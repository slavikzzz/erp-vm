#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем МенеджерВременныхТаблиц;
Перем ДатаАктуальности;

Перем ВременныеТаблицыКУничтожению;

Перем ВТИсточникиДанныхУчетаВремени;
Перем ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная;
Перем ВТПодневныеДанныеУчетаВремени;
Перем ВТИсходныйНаборСотрудникиМесяцы;
Перем ВТИнициализированныеИсточникиФактическихДанных;

Перем ИнициализированныеВременныеТаблицы;
Перем ИменаВременныхТаблиц;

Перем РежимПовторногоИспользованияВременныхТаблиц;
Перем ОписаниеНабораСотрудников;

Перем ИнициализированныеИсточникиДанных;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает пустую таблицу фильтр для метода РабочееВремяПоИсточникамДанных 
// 
// Параметры:
// 	ТипПоляКлючНаборовВидовВремени - Тип - тип поля КлючНаборовВидовВремени
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
//   * ИсточникДанныхФактическогоВремени - СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники" -  
//   * ОбщийГрафик - СправочникСсылка.ГрафикиРаботыСотрудников - 
//   * ПериодРегистрацииФактическогоВремени - Дата -
//   * Месяц - Дата -
//   * КлючНаборовВидовВремени -  
//   * УчитыватьТолькоПраздничныеДни - Булево - 
//   * ФильтроватьВремяПоНабору - Булево - 
//   * УчитыватьВремяВключаемоеВНорму - Булево -  
//   * ПолучатьСверхурочныеЧасы - Булево - 
//   * ПолучатьВсеРабочееВремя - Булево - 
//   * ПолучатьРабочееВремяВключаемоеВНорму - Булево - 
//   * ПолучатьВремяБезФильтрации - Булево - 
//   * ПолучатьОтработанныеСмены - Булево -  
//
Функция НовыйФильтрПолученияЗарегистрированногоВремени(ТипПоляКлючНаборовВидовВремени) Экспорт
	ТипыПоляКлючНаборовВидовВремени = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипПоляКлючНаборовВидовВремени);
	
	Фильтр = Новый ТаблицаЗначений();
	Фильтр.Колонки.Добавить("ИсточникДанныхФактическогоВремени", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники"));
	Фильтр.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	Фильтр.Колонки.Добавить("ПериодРегистрацииФактическогоВремени", Новый ОписаниеТипов("Дата"));
	Фильтр.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	Фильтр.Колонки.Добавить("КлючНаборовВидовВремени", Новый ОписаниеТипов(ТипыПоляКлючНаборовВидовВремени));
	Фильтр.Колонки.Добавить("ФильтроватьВремяПоНабору", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("УчитыватьТолькоПраздничныеДни", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("УчитыватьВремяВключаемоеВНорму", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("ПолучатьСверхурочныеЧасы", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("ПолучатьВремяБезФильтрации", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("ПолучатьВсеРабочееВремя", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("ПолучатьРабочееВремяВключаемоеВНорму", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("ПолучатьПлановоеВремя", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("ПолучатьОтработанныеСмены", Новый ОписаниеТипов("Булево"));
	Фильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Фильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	Возврат Фильтр;
КонецФункции

// Описание
// 
// Параметры:
// 	ТаблицаФильтр - ТаблицаЗначений - :
// 		* ИсточникДанныхФактическогоВремени - СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники" -  
// 		* ОбщийГрафик - СправочникСсылка.ГрафикиРаботыСотрудников - 
// 		* ПериодРегистрацииФактическогоВремени - Дата -
// 		* Месяц - Дата -
// 		* КлючНаборовВидовВремени -  
//		* ФильтроватьВремяПоНабору - Булево - 
// 		* УчитыватьВремяВключаемоеВНорму - Булево -  
// 		* ПолучатьСверхурочныеЧасы - Булево - 
// 		* ПолучатьВсеРабочееВремя - Булево - 
// 		* ПолучатьВремяБезФильтрации - Булево - 
// 		* ПолучатьОтработанныеСмены - Булево -  
// 		* ПолучатьРабочееВремяВключаемоеВНорму - Булево -		
// 	ОписаниеТаблицыНаборовВидовВремени - (См. ОписаниеТаблицыНаборовВидовВремени) -
// 	ПолучатьДетальныеЗаписиПоТерриторияУсловияТруда - Булево - Описание
// 	Порядок - Массив - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица с колонками :
//   * ИсточникДанныхФактическогоВремени - СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники -  
//   * ОбщийГрафик - СправочникСсылка.ГрафикиРаботыСотрудников - 
//   * ПериодРегистрацииФактическогоВремени - Дата -
//   * Месяц - Дата -
//   * КлючНаборовВидовВремени -  
//  
Функция РабочееВремяПоИсточникамДанных(ТаблицаФильтр, ОписаниеТаблицыНаборовВидовВремени, ПолучатьДетальныеЗаписиПоТерриторияУсловияТруда = Ложь) Экспорт
	ДополнитьТаблицуФильтраЗарегистрированногоВремени(ТаблицаФильтр);
	ТребованияПолученияДанных = СводныеТребованияПолученияЗарегистрированногоВремени(ТаблицаФильтр);
	
	ПоляТаблицыФильтра = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаФильтр.Колонки, "Имя");
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаФильтр, "ВТФильтрРабочегоВремени");
	ДобавитьВременныеТаблицыКУничтожению("ВТФильтрРабочегоВремени");
		
	ДополнительныеПоляТаблицыФильтра = СтрСоединить(ПоляТаблицыФильтра, ",");
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(
							"ВТФильтрРабочегоВремени",
							"",
							ДополнительныеПоляТаблицыФильтра);
							
							
	ПриПолученииПодневныхДанныхУчетаВремени(ОписаниеФильтра);
		
	Запрос = ЗапросРабочееВремяПоИсточникамДанных("ВТФильтрРабочегоВремени", ОписаниеТаблицыНаборовВидовВремени, ТребованияПолученияДанных, ПолучатьДетальныеЗаписиПоТерриторияУсловияТруда);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДанныеОВремени = Запрос.Выполнить().Выгрузить();
	
	Если Не ПолучатьДетальныеЗаписиПоТерриторияУсловияТруда Тогда
		СтрокиНеопределенныхТерриторийУсловий = ДанныеОВремени.НайтиСтроки(Новый Структура("РазныеТерриторииУсловияТрудаЗаДень", Истина));
		
		Если Не ПолучатьДетальныеЗаписиПоТерриторияУсловияТруда 
			И СтрокиНеопределенныхТерриторийУсловий.Количество() > 0 Тогда
			
			ПоляПоиска = "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, Месяц, ОбщийГрафик";
			ДанныеОВремени.Индексы.Добавить(ПоляПоиска);
			СтруктураПоиска = Новый Структура(ПоляПоиска);
			
			Для Каждого ЗначениеКлюча Из СтрокиНеопределенныхТерриторийУсловий Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЗначениеКлюча);
				СтрокиПоКлючу = ДанныеОВремени.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаДанныхОВремени Из СтрокиПоКлючу Цикл
					СтрокаДанныхОВремени.Территория = Неопределено;
					СтрокаДанныхОВремени.УсловияТруда = Неопределено;
					СтрокаДанныхОВремени.РазныеТерриторииУсловияТрудаЗаДень = Истина;
				КонецЦикла;	
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;		
	
	УничтожитьВременныеТаблицы();
	
	Возврат ДанныеОВремени;
КонецФункции	

// Возвращает менеджер временных таблиц
//
// Возвращаемое значение - Менеджер временных таблиц
//
Функция ИнициализированныйМенеджерВременныхТаблиц() Экспорт
	Возврат МенеджерВременныхТаблиц;	
КонецФункции	

// Возвращает описание таблицы наборов видов времени (примером такой таблицы является ПланВидовРасчета.Начисления.ВидыВремени).
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя таблицы
//			ИмяПоляКлюч - имя поля ключ набора видов времени (для таблицы  ПланВидовРасчета.Начисления.ВидыВремени - это Ссылка) 
//			ИмяПоляВидВремени - строка
//			ИмяПоляУчитыватьТолькоПраздники - строка.
// 
Функция ОписаниеТаблицыНаборовВидовВремени() Экспорт
	ОписаниеТаблицы = Новый Структура;
	ОписаниеТаблицы.Вставить("ИмяТаблицы");
	ОписаниеТаблицы.Вставить("ИмяПоляКлюч");
	ОписаниеТаблицы.Вставить("ИмяПоляВидВремени");
	ОписаниеТаблицы.Вставить("ИмяПоляУчитыватьТолькоПраздники");
	ОписаниеТаблицы.Вставить("ПолеУчитыватьРабочееВремяДляОтклонений");
	
	Возврат ОписаниеТаблицы;
КонецФункции

// Возвращает описание отбора
//
// Возвращаемое значение - структура с полями
//			ЛевоеЗначение - имя поля в таблице, по которому нужно выполнять отбор
//			ПравоеЗначение - значение с которым будет сравниваться левое значение
//				может быть полем таблицы, параметром (в этом случае передается в формате &<ИмяПараметра>)
//				или может быть не задано, если левое значение имеет тип Булево
//			ПараметрПравоеЗначение - в случае, если правое значение - параметр - в этом поле содержится значение параметра. В остальных случаях не заполняется.
// 
Функция ОписаниеОтбораПоТаблицеФильтру() Экспорт
	ОписаниеОтбора = Новый Структура;
	
	ОписаниеОтбора.Вставить("ЛевоеЗначение", "");
	ОписаниеОтбора.Вставить("ПравоеЗначение", "");
	ОписаниеОтбора.Вставить("ПараметрПравоеЗначение", Неопределено);
	
	Возврат ОписаниеОтбора;
КонецФункции	

#Область МетодыПолученияИсточниковДанныхУчетаВремени

// Возвращает описание таблицы-фильтра для метода СоздатьВТИсточникиДанныхУчетаВремениНаДаты.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДата
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
// 
Функция ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты() Экспорт 
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ИмяТаблицы");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДата");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;
КонецФункции

// Создает временную таблицу, содержащую источник данных учета времени на даты
//	Таблица содержит поля:
//		Сотрудник
//		ИсточникДанныхФактическогоВремени
//		ПериодРегистрацииФактическогоВремени
//		ПериодРегистрацииНормыВремени
//		ОбщийГрафик
//		СуммированныйУчетРабочегоВремени - булево.
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты
//		ИмяВТРезультат - имя результирующей ВТ.
// 
Процедура СоздатьВТИсточникиДанныхУчетаВремениНаДаты(ОписаниеФильтра, ИмяВТРезультат = "ВТИсточникиДанныхУчетаВремениНаДаты") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеФильтра.ИмяТаблицы, ОписаниеФильтра.ИмяПоляСотрудник, ОписаниеФильтра.ИмяПоляДата, ОписаниеФильтра.ИмяПоляДата);
	КонецЕсли;	
	
	СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная();
	
	Запрос = СоздатьЗапрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФильтр.Сотрудник КАК Сотрудник,
	|	ТаблицаФильтр.Дата КАК Дата,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ИсточникДанныхФактическогоВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ИсточникДанныхНормыВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ПериодРегистрацииФактическогоВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ПериодРегистрацииНормыВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ВремяВведеноСводно,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ОбщийГрафик,
	|	ЕСТЬNULL(ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная КАК ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ОбщийГрафик = ГрафикиРаботыСотрудников.Ссылка
	|		ПО ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.Сотрудник = ТаблицаФильтр.Сотрудник
	|			И (ТаблицаФильтр.Дата МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаОкончания)";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеФильтра.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Сотрудник", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Дата", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляДата);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
// 
Функция ОписаниеФильтраВТИнтервалыДействияИсточниковДанныхУчетаВремени() Экспорт 
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ИмяТаблицы");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;
КонецФункции

// Создает временную таблицу, содержащую источники данных и интервалы их действия
//	Таблица содержит поля:
//		Сотрудник
//		ДатаНачала
//		ДатаОкончания
//		ИсточникДанныхФактическогоВремени
//		ПериодРегистрацииФактическогоВремени
//		ПериодРегистрацииНормыВремени
//		ОбщийГрафик
//		СуммированныйУчетРабочегоВремени - булево.
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты
//		ИмяВТРезультат - имя результирующей ВТ.
// 
Процедура СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремени(ОписаниеФильтра, ИмяВТРезультат = "ВТИнтервалыДействияИсточниковДанныхУчетаВремени") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеФильтра.ИмяТаблицы, ОписаниеФильтра.ИмяПоляСотрудник, ОписаниеФильтра.ИмяПоляНачала, ОписаниеФильтра.ИмяПоляДатаОкончания);
	КонецЕсли;
	
	СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная();
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФильтр.Сотрудник,
	|	ВЫБОР
	|		КОГДА ТаблицаФильтр.ДатаНачала < ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаНачала
	|			ТОГДА ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаНачала
	|		ИНАЧЕ ТаблицаФильтр.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ТаблицаФильтр.ДатаОкончания > ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаОкончания
	|			ТОГДА ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаОкончания
	|		ИНАЧЕ ТаблицаФильтр.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ОбщийГрафик,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ИсточникДанныхФактическогоВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ИсточникДанныхНормыВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ПериодРегистрацииФактическогоВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ПериодРегистрацииНормыВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ВремяВведеноСводно,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ПроизводственныйКалендарь,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ИсточникДанныхПолнойНормыВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная КАК ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная
	|		ПО ТаблицаФильтр.Сотрудник = ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.Сотрудник
	|			И (ТаблицаФильтр.ДатаНачала МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаОкончания
	|				ИЛИ ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаНачала МЕЖДУ ТаблицаФильтр.ДатаНачала И ТаблицаФильтр.ДатаОкончания)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеФильтра.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Сотрудник", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ДатаНачала", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ДатаОкончания", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляДатаОкончания);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат",  ИмяВТРезультат);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТПериодыИзмененияИсточниковДанныхУчетаВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДата
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
// 
Функция ОписаниеФильтраВТПериодыИзмененияИсточниковДанныхУчетаВремени() Экспорт 
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяТаблицы");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;
КонецФункции

// Создает временную таблицу, содержащую даты изменения источников данным по сотрудникам
//	Таблица содержит поля:
//		Сотрудник
//		Период
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТПериодыИзмененияИсточниковДанныхУчетаВремени
//		ИмяВТРезультат - имя результирующей ВТ.
// 
Процедура СоздатьВТПериодыИзмененияИсточниковДанныхУчетаВремени(ОписаниеФильтра, ИмяВТРезультат = "ВТПериодыИзмененияИсточниковДанныхУчетаВремени") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеФильтра.ИмяТаблицы, ОписаниеФильтра.ИмяПоляСотрудник, ОписаниеФильтра.ИмяПоляДатаНачала, ОписаниеФильтра.ИмяПоляДатаОкончания);
	КонецЕсли;	

	СоздатьВТИсточникиДанныхУчетаВремени();
	
	Запрос = СоздатьЗапрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФильтр.Сотрудник,
	|	ПериодыИзмененияИсточниковДанных.Период
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсточникиДанныхУчетаВремени КАК ПериодыИзмененияИсточниковДанных
	|		ПО ТаблицаФильтр.Сотрудник = ПериодыИзмененияИсточниковДанных.Сотрудник
	|			И ТаблицаФильтр.ДатаНачала <= ПериодыИзмененияИсточниковДанных.Период
	|			И ТаблицаФильтр.ДатаОкончания >= ПериодыИзмененияИсточниковДанных.Период
	|			И (ПериодыИзмененияИсточниковДанных.СобытиеИзменение)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеФильтра.ИмяТаблицы); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Сотрудник", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ДатаНачала", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ДатаОкончания", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляДатаОкончания);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.Выполнить();	
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТСуммированныйУчетПоСотрудникам.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДата
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
// 
Функция ОписаниеФильтраВТСуммированныйУчетПоСотрудникам() Экспорт 
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ИмяТаблицы");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДата");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;	
КонецФункции

// Создает временную таблицу, содержащую признаки суммированного учета времени по сотрудникам
//	Таблица содержит поля:
//		Сотрудник
//		Дата
//		СуммированныйУчетРабочегоВремени
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты
//		ИмяВТРезультат - имя результирующей ВТ.
// 
Процедура СоздатьВТСуммированныйУчетПоСотрудникам(ОписаниеФильтра, ИмяВТРезультат = "ВТСуммированныйУчетПоСотрудникам") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеФильтра.ИмяТаблицы, ОписаниеФильтра.ИмяПоляСотрудник, ОписаниеФильтра.ИмяПоляДата, ОписаниеФильтра.ИмяПоляДата);
	КонецЕсли;
	
	СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная();
	
	Запрос = СоздатьЗапрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФильтр.Сотрудник КАК Сотрудник,
	|	ТаблицаФильтр.Дата КАК Дата,
	|	ЕСТЬNULL(ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная КАК ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ОбщийГрафик = ГрафикиРаботыСотрудников.Ссылка
	|		ПО ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.Сотрудник = ТаблицаФильтр.Сотрудник
	|			И (ТаблицаФильтр.Дата МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаОкончания)";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеФильтра.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Сотрудник", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Дата", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляДата);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы();

КонецПроцедуры	

#КонецОбласти

#Область МетодыПолученияЗарегистрированныхНаборовВидовВремени

// Возвращает описание таблицы-фильтра для метода СоздатьВТЗарегистрированныеНаборыВидовВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
// 
Функция ОписаниеФильтраВТЗарегистрированныеНаборыВидовВремени() Экспорт 
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяТаблицы", "");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ИмяПоляДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;	
КонецФункции	

// Создает временную таблицу, содержащую ключи наборов видов времени, которые были зарегистрированы
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		Сотрудник
//		ДатаНачала
//		ДатаОкончания
//		КлючНабораВидовВремени
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты
//		ОписаниеТаблицыНаборовВидовВремени - см. ОписаниеТаблицыНаборовВидовВремени.
//			описание таблицы наборов видов времени. В данном случае,в таблице должны быть только те наборы 
//			видов времени, которые нас интересуют (например - только наборы видов времени выстреливающих начислений)
//		ИмяВТРезультат - имя результирующей ВТ.
// 
Процедура СоздатьВТЗарегистрированныеНаборыВидовВремени(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ИмяВТРезультат = "ВТЗарегистрированныеНаборыВидовВремени") Экспорт
	ПараметрыПостроенияЗапроса = ПараметрыПостроенияЗапросаВТЗарегистрированныеНаборовВидовВремениСлужебная();	
	
	ПараметрыПостроенияЗапроса.ИспользоватьСвязьПоКлючуНаборов = Ложь;
	ПараметрыПостроенияЗапроса.ИспользоватьУсловиеЗарегистрированыЧасы = Ложь;
	ПараметрыПостроенияЗапроса.ИмяВТРезультат = ИмяВТРезультат;

	СоздатьВТЗарегистрированныеНаборыВидовВремениСлужебная(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ПараметрыПостроенияЗапроса);
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТНаличиеЗарегистрированныхНаборовВидовВремениВИнтервале.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			ИмяПоляКлючНабораВидовВремени
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
// 
Функция ОписаниеФильтраВТНаличиеЗарегистрированныхНаборовВидовВремениВИнтервале() Экспорт 
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяТаблицы", "");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	//ОписаниеФильтра.Вставить("ИмяПоляКлючНабораВидовВремени", "ИмяПоляДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;	
КонецФункции	

// Создает временную таблицу, содержащую ключи наборов видов времени, по которым были зарегистрированы данные
// в запрашиваемых интервалах по сотрудникам.
// Таблица содержит поля:
//		Сотрудник
//		ДатаНачала
//		ДатаОкончания
//		КлючНабораВидовВремени
//
// Параметры:
//		ОписаниеТаблицыФильтра             - Структура - см. ОписаниеФильтраВТНаличиеЗарегистрированныхНаборовВидовВремениВИнтервале
//		ОписаниеТаблицыНаборовВидовВремени - Структура - см. ОписаниеФильтраВТНаличиеЗарегистрированныхНаборовВидовВремениВИнтервале.
//                                                       В таблице должны все возможные наборы видов времени. 
//		ИмяВТРезультат - Строка - имя результирующей ВТ.
//
Процедура СоздатьВТНаличиеЗарегистрированныхНаборовВидовВремениВИнтервале(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ИмяВТРезультат = "ВТНаличиеЗарегистрированныхНаборовВидовВремениВИнтервале") Экспорт
	ПараметрыПостроенияЗапроса = ПараметрыПостроенияЗапросаВТЗарегистрированныеНаборовВидовВремениСлужебная();	
	
	ПараметрыПостроенияЗапроса.ИспользоватьСвязьПоКлючуНаборов = Истина;
	ПараметрыПостроенияЗапроса.ИспользоватьУсловиеЗарегистрированыЧасы = Ложь;
	ПараметрыПостроенияЗапроса.ИмяВТРезультат = ИмяВТРезультат;

	СоздатьВТЗарегистрированныеНаборыВидовВремениСлужебная(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ПараметрыПостроенияЗапроса);
	
	УничтожитьВременныеТаблицы();
	
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТНаличиеЗарегистрированныхЧасовПоНаборамВидовВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			ИмяПоляКлючНабораВидовВремени
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТНаличиеЗарегистрированныхЧасовПоНаборамВидовВремени() Экспорт 
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяТаблицы", "");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ИмяПоляДатаОкончания");
	ОписаниеФильтра.Вставить("ИмяПоляКлючНабораВидовВремени", "ИмяПоляДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;		
КонецФункции

// Создает временную таблицу, содержащую ключи наборов видов времени, по которым были зарегистрированы данные
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		Сотрудник
//		ДатаНачала
//		ДатаОкончания
//		КлючНабораВидовВремени
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты
//		ОписаниеТаблицыНаборовВидовВремени - см. ОписаниеФильтраВТНаличиеЗарегистрированныхЧасовПоНаборамВидовВремени.
//			описание таблицы наборов видов времени. В данном случае,в таблице должны все возможные наборы видов времени 
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТНаличиеЗарегистрированныхЧасовПоНаборамВидовВремени(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ИмяВТРезультат = "ВТНаличиеЗарегистрированныхЧасовПоНаборамВидовВремени") Экспорт
	ПараметрыПостроенияЗапроса = ПараметрыПостроенияЗапросаВТЗарегистрированныеНаборовВидовВремениСлужебная();	
	
	ПараметрыПостроенияЗапроса.ИспользоватьСвязьПоКлючуНаборов = Истина;
	ПараметрыПостроенияЗапроса.ИспользоватьУсловиеЗарегистрированыЧасы = Истина;
	ПараметрыПостроенияЗапроса.ИмяВТРезультат = ИмяВТРезультат;

	СоздатьВТЗарегистрированныеНаборыВидовВремениСлужебная(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ПараметрыПостроенияЗапроса);
	
	УничтожитьВременныеТаблицы();
	
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТДатыРегистрацииНаборовВидовВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			ИмяПоляКлючНабораВидовВремени
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТДатыРегистрацииНаборовВидовВремени() Экспорт 
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяТаблицы", "");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ИмяПоляДатаОкончания");
	ОписаниеФильтра.Вставить("ИмяПоляКлючНабораВидовВремени", "ИмяПоляДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;		
КонецФункции

// Создает временную таблицу, содержащую даты регистрации наборов видов времени
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		Сотрудник
//		ДатаНачала
//		ДатаОкончания
//		Дата
//		ВремяВЧасах
//		ВЦеломЗаПериод
//		КлючНабораВидовВремени
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТИсточникиДанныхУчетаВремениНаДаты
//		ОписаниеТаблицыНаборовВидовВремени - см. ОписаниеФильтраВТДатыРегистрацииНаборовВидовВремени.
//			описание таблицы наборов видов времени. В данном случае,в таблице должны все возможные наборы видов времени 
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТДатыРегистрацииНаборовВидовВремени(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ИмяВТРезультат = "ВТДатыРегистрацииНаборовВидовВремени") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеТаблицыФильтра.ИмяТаблицы, ОписаниеТаблицыФильтра.ИмяПоляСотрудник, ОписаниеТаблицыФильтра.ИмяПоляДатаНачала, ОписаниеТаблицыФильтра.ИмяПоляДатаОкончания);
	КонецЕсли;
	
	СоздатьВТПодневныеДанныеУчетаВремениПоИнициализированнымДанным();
		
	СоздатьВТПериодыПолученияВидовВремениПоИсточникамДанных(ОписаниеТаблицыФильтра);
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыПолученияДанныхПоИсточникамДанных.Сотрудник,
	|	ДатыПолученияДанныхПоИсточникамДанных.Месяц,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных КАК ДатаНачала,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИсходногоПериодаПолученияДанных КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|			ТОГДА ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных
	|		ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|	КОНЕЦ КАК Дата,
	|	ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПодневныеДанныеУчетаВремени.ДополнительноеЗначение = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ВремяВЧасах,
	|	МАКСИМУМ(ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод) КАК ВЦеломЗаПериод
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТПериодыПолученияВидовВремениПоИсточникамДанных КАК ДатыПолученияДанныхПоИсточникамДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНаборовВидовВремени КАК ТаблицаНаборовВидовВремени
	|		ПО ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени = ТаблицаНаборовВидовВремени.Ключ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодневныеДанныеУчетаВремени КАК ПодневныеДанныеУчетаВремени
	|		ПО (ПодневныеДанныеУчетаВремени.ИсточникДанных = ДатыПолученияДанныхПоИсточникамДанных.ИсточникДанныхФактическогоВремени)
	|			И (ПодневныеДанныеУчетаВремени.ОбщийГрафик = ДатыПолученияДанныхПоИсточникамДанных.ОбщийГрафик)
	|			И (ПодневныеДанныеУчетаВремени.ПериодРегистрации = ДатыПолученияДанныхПоИсточникамДанных.ПериодРегистрацииФактическогоВремени)
	|			И (ПодневныеДанныеУчетаВремени.Месяц = ДатыПолученияДанныхПоИсточникамДанных.Месяц)
	|			И (ПодневныеДанныеУчетаВремени.ВидУчетаВремени = ТаблицаНаборовВидовВремени.ВидВремени)
	|			И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИнтервалаПоиска И ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИнтервалаПоиска
	|				ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|					И НЕ ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники)
	|			И (ПодневныеДанныеУчетаВремени.Праздник = ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники
	|				ИЛИ НЕ ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПолученияДанныхПоИсточникамДанных.Сотрудник,
	|	ДатыПолученияДанныхПоИсточникамДанных.Месяц,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИсходногоПериодаПолученияДанных,
	|	ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени,
	|	ВЫБОР
	|		КОГДА ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|			ТОГДА ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных
	|		ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|	КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодневныеДанныеУчетаВремени", ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники", "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляУчитыватьТолькоПраздники);
		
	УстановитьПоляОписанияНаборовВидовВремениВЗапрос(Запрос.Текст, ОписаниеТаблицыНаборовВидовВремени);
	
	ДобавитьВременныеТаблицыКУничтожению("ВТПериодыПолученияВидовВремениПоИсточникамДанных");
	
	Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы();	
	
КонецПроцедуры

// Возвращает описание таблицы-фильтра для метода СоздатьВТДатыРегистрацииСпискаВидовВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТДатыРегистрацииСпискаВидовВремени() Экспорт
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяТаблицы", "");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ИмяПоляДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;		
КонецФункции	

// Создает временную таблицу, содержащую даты регистрации видов времени из переданного списка
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		Сотрудник
//		ДатаНачала
//		ДатаОкончания
//		Дата
//		ВремяВЧасах
//		ВЦеломЗаПериод
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТДатыРегистрацииСпискаВидовВремени
//		СписокВидовВремени 
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТДатыРегистрацииСпискаВидовВремени(ОписаниеТаблицыФильтра, СписокВидовВремени, ИмяВТРезультат = "ВТДатыРегистрацииСпискаВидовВремени") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеТаблицыФильтра.ИмяТаблицы, ОписаниеТаблицыФильтра.ИмяПоляСотрудник, ОписаниеТаблицыФильтра.ИмяПоляДатаНачала, ОписаниеТаблицыФильтра.ИмяПоляДатаОкончания);
	КонецЕсли;
	
	СоздатьВТПодневныеДанныеУчетаВремениПоИнициализированнымДанным();
		
	СоздатьВТПериодыПолученияВидовВремениПоИсточникамДанных(ОписаниеТаблицыФильтра);
	
	Запрос = СоздатьЗапрос();
	Запрос.УстановитьПараметр("СписокВидовВремени", СписокВидовВремени);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыПолученияДанныхПоИсточникамДанных.Сотрудник,
	|	ДатыПолученияДанныхПоИсточникамДанных.Месяц,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных КАК ДатаНачала,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИсходногоПериодаПолученияДанных КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|			ТОГДА ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных
	|		ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|	КОНЕЦ КАК Дата,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПодневныеДанныеУчетаВремени.ДополнительноеЗначение = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ВремяВЧасах
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТПериодыПолученияВидовВремениПоИсточникамДанных КАК ДатыПолученияДанныхПоИсточникамДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодневныеДанныеУчетаВремени КАК ПодневныеДанныеУчетаВремени
	|		ПО (ПодневныеДанныеУчетаВремени.ИсточникДанных = ДатыПолученияДанныхПоИсточникамДанных.ИсточникДанныхФактическогоВремени)
	|			И (ПодневныеДанныеУчетаВремени.ОбщийГрафик = ДатыПолученияДанныхПоИсточникамДанных.ОбщийГрафик)
	|			И (ПодневныеДанныеУчетаВремени.ПериодРегистрации = ДатыПолученияДанныхПоИсточникамДанных.ПериодРегистрацииФактическогоВремени)
	|			И (ПодневныеДанныеУчетаВремени.Месяц = ДатыПолученияДанныхПоИсточникамДанных.Месяц)
	|			И (ПодневныеДанныеУчетаВремени.ВидУчетаВремени В (&СписокВидовВремени))
	|			И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИнтервалаПоиска И ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИнтервалаПоиска
	|				ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПолученияДанныхПоИсточникамДанных.Сотрудник,
	|	ДатыПолученияДанныхПоИсточникамДанных.Месяц,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИсходногоПериодаПолученияДанных,
	|	ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени,
	|	ВЫБОР
	|		КОГДА ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|			ТОГДА ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных
	|		ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|	КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодневныеДанныеУчетаВремени", ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	ДобавитьВременныеТаблицыКУничтожению("ВТПериодыПолученияВидовВремениПоИсточникамДанных");
	
	Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы();		
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТПериодыДействияНаборовВидовВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			ИмяПоляКлючНабораВидовВремени
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТПериодыДействияНаборовВидовВремени() Экспорт 
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяТаблицы", "");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ИмяПоляДатаОкончания");
	ОписаниеФильтра.Вставить("ИмяПоляКлючНабораВидовВремени", "ИмяПоляДатаОкончания");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;		
КонецФункции

// Создает временную таблицу, содержащую даты регистрации видов времени из переданного списка
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		Сотрудник
//		ДатаНачалаИсходная
//		ДатаОкончанияИсходная
//		ДатаНачала
//		ДатаОкончания
//		Дата
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТДатыРегистрацииСпискаВидовВремени
//		СписокВидовВремени 
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТПериодыДействияНаборовВидовВремени(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ИмяВТРезультат = "ВТПериодыДействияНаборовВидовВремени") Экспорт
	ПараметрыПостроенияЗапроса = ПараметрыПостроенияЗапросаВТДатыРегистрацииНаборовВидовВремениСлужебная();
	
	ПараметрыПостроенияЗапроса.УчитыватьВыходныеДни = Ложь;
	ПараметрыПостроенияЗапроса.ИмяВТРезультат = "ВТДатыРегистрацииНаборовВидовВремениСлужебная";

	СоздатьВТДатыРегистрацииНаборовВидовВремениСлужебная(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени,  ПараметрыПостроенияЗапроса);
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Месяц,
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания,
	|	ВложенныйЗапрос.КлючНабораВидовВремени,
	|	ВложенныйЗапрос.Дата,
	|	СУММА(ВложенныйЗапрос.ПризнакДатыНачалаИнтервала) КАК ПризнакДатыНачалаИнтервала,
	|	СУММА(ВложенныйЗапрос.ПризнакДатыОкончанияИнтервала) КАК ПризнакДатыОкончанияИнтервала
	|ПОМЕСТИТЬ ВТГраницыИнтерваловДействияНаборовВидовВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыРегистрацииНаборовВидовВремени.Сотрудник КАК Сотрудник,
	|		ДатыРегистрацииНаборовВидовВремени.Месяц КАК Месяц,
	|		ДатыРегистрацииНаборовВидовВремени.ДатаНачала КАК ДатаНачала,
	|		ДатыРегистрацииНаборовВидовВремени.ДатаОкончания КАК ДатаОкончания,
	|		ДатыРегистрацииНаборовВидовВремени.КлючНабораВидовВремени КАК КлючНабораВидовВремени,
	|		ДатыРегистрацииНаборовВидовВремени.Дата КАК Дата,
	|		1 КАК ПризнакДатыНачалаИнтервала,
	|		1 КАК ПризнакДатыОкончанияИнтервала
	|	ИЗ
	|		ВТДатыРегистрацииНаборовВидовВремениСлужебная КАК ДатыРегистрацииНаборовВидовВремени
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТДатыРегистрацииНаборовВидовВремени.Сотрудник,
	|		ВТДатыРегистрацииНаборовВидовВремени.Месяц,
	|		ВТДатыРегистрацииНаборовВидовВремени.ДатаНачала,
	|		ВТДатыРегистрацииНаборовВидовВремени.ДатаОкончания,
	|		ВТДатыРегистрацииНаборовВидовВремени.КлючНабораВидовВремени,
	|		ДОБАВИТЬКДАТЕ(ВТДатыРегистрацииНаборовВидовВремени.Дата, ДЕНЬ, 1),
	|		-1,
	|		0
	|	ИЗ
	|		ВТДатыРегистрацииНаборовВидовВремениСлужебная КАК ВТДатыРегистрацииНаборовВидовВремени
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТДатыРегистрацииНаборовВидовВремени.Сотрудник,
	|		ВТДатыРегистрацииНаборовВидовВремени.Месяц,
	|		ВТДатыРегистрацииНаборовВидовВремени.ДатаНачала,
	|		ВТДатыРегистрацииНаборовВидовВремени.ДатаОкончания,
	|		ВТДатыРегистрацииНаборовВидовВремени.КлючНабораВидовВремени,
	|		ДОБАВИТЬКДАТЕ(ВТДатыРегистрацииНаборовВидовВремени.Дата, ДЕНЬ, -1),
	|		0,
	|		-1
	|	ИЗ
	|		ВТДатыРегистрацииНаборовВидовВремениСлужебная КАК ВТДатыРегистрацииНаборовВидовВремени) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Месяц,
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания,
	|	ВложенныйЗапрос.КлючНабораВидовВремени,
	|	ВложенныйЗапрос.Дата
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.ПризнакДатыНачалаИнтервала) > 0
	|		ИЛИ СУММА(ВложенныйЗапрос.ПризнакДатыОкончанияИнтервала) > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачалаИнтервалов.Сотрудник,
	|	ДатыНачалаИнтервалов.Месяц,
	|	ДатыНачалаИнтервалов.ДатаНачала КАК ДатаНачалаИсходная,
	|	ДатыНачалаИнтервалов.ДатаОкончания КАК ДатаОкончанияИсходная,
	|	ДатыНачалаИнтервалов.КлючНабораВидовВремени,
	|	ДатыНачалаИнтервалов.Дата КАК ДатаНачала,
	|	МИНИМУМ(КОНЕЦПЕРИОДА(ДатыОкончанияИнтервалов.Дата, ДЕНЬ)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТГраницыИнтерваловДействияНаборовВидовВремени КАК ДатыНачалаИнтервалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГраницыИнтерваловДействияНаборовВидовВремени КАК ДатыОкончанияИнтервалов
	|		ПО (ДатыНачалаИнтервалов.ПризнакДатыНачалаИнтервала > 0)
	|			И (ДатыОкончанияИнтервалов.ПризнакДатыОкончанияИнтервала > 0)
	|			И ДатыНачалаИнтервалов.Дата <= ДатыОкончанияИнтервалов.Дата
	|			И ДатыНачалаИнтервалов.Сотрудник = ДатыОкончанияИнтервалов.Сотрудник
	|			И ДатыНачалаИнтервалов.Месяц = ДатыОкончанияИнтервалов.Месяц
	|			И ДатыНачалаИнтервалов.ДатаНачала = ДатыОкончанияИнтервалов.ДатаНачала
	|			И ДатыНачалаИнтервалов.ДатаОкончания = ДатыОкончанияИнтервалов.ДатаОкончания
	|			И ДатыНачалаИнтервалов.КлючНабораВидовВремени = ДатыОкончанияИнтервалов.КлючНабораВидовВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыНачалаИнтервалов.Сотрудник,
	|	ДатыНачалаИнтервалов.Месяц,
	|	ДатыНачалаИнтервалов.ДатаНачала,
	|	ДатыНачалаИнтервалов.ДатаОкончания,
	|	ДатыНачалаИнтервалов.КлючНабораВидовВремени,
	|	ДатыНачалаИнтервалов.Дата";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);

	Запрос.Выполнить();
	
	
	ДобавитьВременныеТаблицыКУничтожению("ВТГраницыИнтерваловДействияНаборовВидовВремени, ВТДатыРегистрацииНаборовВидовВремениСлужебная");
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры	

#КонецОбласти

#Область МетодыПолученияНормыВремениПоСотрудникам

// Возвращает описание таблицы-фильтра для метода СоздатьВТНормаВремениСотрудников
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляПериод
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТНормаВремениСотрудников() Экспорт 
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ИмяТаблицы");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляПериод", "Период");
	
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	ОписаниеФильтра.Вставить("КлючевыеПоля", Новый Массив);
	
	Возврат ОписаниеФильтра;
КонецФункции

// Создает временную таблицу, содержащую нормы времени	
//
//	Таблица содержит поля:
//		Сотрудник
//		Период
//		Месяц
//		НормаДнейКалендаряМесяц,
//		НормаЧасовКалендаряМесяц,
//		НормаДнейКалендаряМесяц,
//		НормаДнейКалендаряГод,
//		НормаЧасовКалендаряГод,
//		НормаДнейГрафикаМесяц,
//		НормаЧасовГрафикаМесяц,
//		НормаДнейПолногоГрафикаМесяц,
//		НормаЧасовПолногоГрафикаМесяц,
//		ГрафикРаботы,
//		ПроизводственныйКалендарь
//
// Параметры:
//		ОписаниеФильтра - Структура - см. ОписаниеФильтраВТНормаВремениСотрудников
//		ИмяВТРезультат  - Строка    - имя результирующей ВТ.
//
Процедура СоздатьВТНормаВремениСотрудников(ОписаниеФильтра, ИмяВТРезультат = "ВТНормаВремениСотрудников") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеФильтра.ИмяТаблицы, ОписаниеФильтра.ИмяПоляСотрудник, ОписаниеФильтра.ИмяПоляПериод, ОписаниеФильтра.ИмяПоляПериод);
	КонецЕсли;
	
	СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная();
	
	Запрос = СоздатьЗапрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФильтр.Сотрудник КАК Сотрудник,
	|	ТаблицаФильтр.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(ТаблицаФильтр.Период, МЕСЯЦ) КАК Месяц,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ИсточникДанныхНормыВремени КАК ИсточникДанныхНормыВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ИсточникДанныхПолнойНормыВремени КАК ИсточникДанныхПолнойНормыВремени,
	|	ВЫБОР
	|		КОГДА ОписаниеГрафиков.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА ОписаниеГрафиков.ДлительностьРабочейНедели
	|		ИНАЧЕ ЕСТЬNULL(ОписаниеГрафиков.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели, 0)
	|	КОНЕЦ КАК ДлительностьРабочейНеделиЧасов,
	|	5 КАК ДлительностьРабочейНеделиДней,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ПроизводственныйКалендарь,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ПериодРегистрацииНормыВремени
	|ПОМЕСТИТЬ ВТИсточникиДанныхНормыВремени
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная КАК ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ОписаниеГрафиков
	|			ПО ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ОбщийГрафик = ОписаниеГрафиков.Ссылка
	|		ПО (ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.Сотрудник = ТаблицаФильтр.Сотрудник)
	|			И (ТаблицаФильтр.Период МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхНормыВремени.ПроизводственныйКалендарь,
	|	ИсточникиДанныхНормыВремени.Месяц
	|ПОМЕСТИТЬ ВТРазличныеИсточникиДанныхНормыВремениКалендарей
	|ИЗ
	|	ВТИсточникиДанныхНормыВремени КАК ИсточникиДанныхНормыВремени";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеФильтра.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Сотрудник", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Период", "ТаблицаФильтр." + ОписаниеФильтра.ИмяПоляПериод);
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТИсточникиДанныхНормыВремени, ВТРазличныеИсточникиДанныхНормыВремениКалендарей");
	
	ОписаниеИсточниковДанныхНормы = ОписаниеИсточниковДанныхВТНормаВремениПоИсточникамДанныхСлужебная();
	ОписаниеИсточниковДанныхНормы.ИмяТаблицы = "ВТИсточникиДанныхНормыВремени";
	ОписаниеИсточниковДанныхНормы.ИмяПоляИсточникДанныхНормыВремени = "ИсточникДанныхНормыВремени";
	ОписаниеИсточниковДанныхНормы.ИмяПоляИсточникДанныхПолнойНормыВремени = "ИсточникДанныхПолнойНормыВремени";
	ОписаниеИсточниковДанныхНормы.ИмяПоляМесяц = "Месяц";
	ОписаниеИсточниковДанныхНормы.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииНормыВремени";
	
	СоздатьВТНормаВремениПоИсточникамДанныхСлужебная(ОписаниеИсточниковДанныхНормы, "ВТДанныеГрафиковРаботы");
	

	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочиеДниМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредпраздничныеДниМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейКалендаряМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочиеДниГода,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредпраздничныеДниГода,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейКалендаряГод,
	|	Календари.ПроизводственныйКалендарь,
	|	Календари.Месяц
	|ПОМЕСТИТЬ ВТДанныеКалендарей
	|ИЗ
	|	ВТРазличныеИсточникиДанныхНормыВремениКалендарей КАК Календари
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО Календари.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, ГОД) И КОНЕЦПЕРИОДА(Календари.Месяц, ГОД))
	|			И (ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Календари.ПроизводственныйКалендарь,
	|	Календари.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Сотрудник,
	|	ГрафикиРаботыСотрудников.Период,
	|	ДанныеКалендарей.НормаДнейКалендаряМесяц КАК НормаДнейКалендаряМесяц,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов ЕСТЬ NULL 
	|				ИЛИ ДанныеКалендарей.НормаДнейКалендаряМесяц ЕСТЬ NULL 
	|			ТОГДА NULL
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряМесяц > ДанныеКалендарей.ПредпраздничныеДниМесяца
	|					ТОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряМесяц - ДанныеКалендарей.ПредпраздничныеДниМесяца
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НормаЧасовКалендаряМесяц,
	|	ДанныеКалендарей.НормаДнейКалендаряГод КАК НормаДнейКалендаряГод,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов ЕСТЬ NULL 
	|				ИЛИ ДанныеКалендарей.НормаДнейКалендаряГод ЕСТЬ NULL 
	|			ТОГДА NULL
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряГод > ДанныеКалендарей.ПредпраздничныеДниГода
	|					ТОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряГод - ДанныеКалендарей.ПредпраздничныеДниГода
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НормаЧасовКалендаряГод,
	|	ДанныеГрафиков.НормаДней КАК НормаДнейГрафикаМесяц,
	|	ДанныеГрафиков.НормаЧасов КАК НормаЧасовГрафикаМесяц,
	|	ДанныеГрафиков.НормаДнейПолная КАК НормаДнейПолногоГрафикаМесяц,
	|	ДанныеГрафиков.НормаЧасовПолная КАК НормаЧасовПолногоГрафикаМесяц,
	|	ГрафикиРаботыСотрудников.ИсточникДанныхНормыВремени КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ГрафикиРаботыСотрудников.Месяц
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТИсточникиДанныхНормыВремени КАК ГрафикиРаботыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафиковРаботы КАК ДанныеГрафиков
	|		ПО ГрафикиРаботыСотрудников.ИсточникДанныхНормыВремени = ДанныеГрафиков.ИсточникДанных
	|			И ГрафикиРаботыСотрудников.Месяц = ДанныеГрафиков.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеКалендарей КАК ДанныеКалендарей
	|		ПО ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеКалендарей.ПроизводственныйКалендарь
	|			И ГрафикиРаботыСотрудников.Месяц = ДанныеКалендарей.Месяц";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТДанныеКалендарей, ВТДанныеГрафиковРаботы");
	
	УничтожитьВременныеТаблицы();
	
	ПараметрыПроверкиНормыВремени = УчетРабочегоВремениРасширенный.ПараметрыДляПроверитьЗаполнениеНормыВремени(ИмяВТРезультат, "Месяц");
	
	УчетРабочегоВремениРасширенный.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверкиНормыВремени, "НормаДнейГрафикаМесяц", "ГрафикРаботы");
	УчетРабочегоВремениРасширенный.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверкиНормыВремени, "НормаДнейКалендаряМесяц", "ПроизводственныйКалендарь");
	
	УчетРабочегоВремениРасширенный.ПроверитьЗаполнениеНормыВремени(МенеджерВременныхТаблиц, ПараметрыПроверкиНормыВремени);	
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТДанныеПроизводственногоКалендаряПоСотрудникам.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//			ИмяПоляДатаНачала
//			ДатаОкончания
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоСотрудникам() Экспорт 
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ИмяТаблицы");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	
	Возврат ОписаниеФильтра;
КонецФункции

// Создает временную таблицу, содержащую данные календаря
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		Сотрудник
//		ДатаНачала
//		ДатаОкончания
//		ДнейПоПятидневке
//		ЧасовПоПятидневке,
//		ДнейПоШестидневке,
//		ДнейКалендарных,
//		ДнейКалендарныхБезУчетаПраздников,
//		Праздников
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоСотрудникам
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТДанныеПроизводственногоКалендаряПоСотрудникам(ОписаниеФильтра, ИмяВТРезультат = "ВТДанныеПроизводственногоКалендаряПоСотрудникам") Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеФильтра.ИмяТаблицы, ОписаниеФильтра.ИмяПоляСотрудник, ОписаниеФильтра.ИмяПоляДатаНачала, ОписаниеФильтра.ИмяПоляДатаОкончания);
	КонецЕсли;
	
	СоздатьВТПериодыПолученияВидовВремениПоИсточникамДанных(ОписаниеФильтра);
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧасовПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоШестидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейКалендарных,
	|	ПериодыПроизводственныхКалендарей.ДатаНачалаИсходногоПериодаПолученияДанных КАК ДатаНачала,
	|	ПериодыПроизводственныхКалендарей.ДатаОкончанияИсходногоПериодаПолученияДанных КАК ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL 
	|					И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейКалендарныхБезУчетаПраздников,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Праздников,
	|	ПериодыПроизводственныхКалендарей.Сотрудник
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТПериодыПолученияВидовВремениПоИсточникамДанных КАК ПериодыПроизводственныхКалендарей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ПериодыПроизводственныхКалендарей.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ПериодыПроизводственныхКалендарей.ДатаНачалаИнтервалаПоиска <= ДанныеПроизводственногоКалендаря.Дата
	|			И ПериодыПроизводственныхКалендарей.ДатаОкончанияИнтервалаПоиска >= ДанныеПроизводственногоКалендаря.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПроизводственныхКалендарей.Сотрудник,
	|	ПериодыПроизводственныхКалендарей.ДатаНачалаИсходногоПериодаПолученияДанных,
	|	ПериодыПроизводственныхКалендарей.ДатаОкончанияИсходногоПериодаПолученияДанных";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.Выполнить();	
	
	ДобавитьВременныеТаблицыКУничтожению("ВТПериодыПолученияВидовВремениПоИсточникамДанных");
	
	УничтожитьВременныеТаблицы();
	
КонецПроцедуры

#КонецОбласти

#Область МетодыПолученияДанныхОВремениПоИсточникамДанных

// Возвращает описание таблицы-фильтра для метода СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремени.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//          ИмяПоляИсточникДанных
//			ИмяПоляПериодРегистрацииВремени
//			ИмяПоляОбщийГрафик
//			ИмяПоляКлючНабораВидовВремени
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			ИмяПоляМесяц
//          КлючевыеПоля - массив полей, которые будут добавлены из таблицы-фильтра в результирующую таблицу
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТЗарегистрированноеВремяПоНаборамВидовВремени() Экспорт 
	ОписаниеИсточников = Новый Структура;
	
	ОписаниеИсточников.Вставить("ИмяТаблицы", "");
	ОписаниеИсточников.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеИсточников.Вставить("ИмяПоляИсточникДанных", "ИсточникДанных");
	ОписаниеИсточников.Вставить("ИмяПоляПериодРегистрацииВремени", "ПериодРегистрации");
	ОписаниеИсточников.Вставить("ИмяПоляОбщийГрафик", "ОбщийГрафик");
	ОписаниеИсточников.Вставить("ИмяПоляМесяц", "Месяц");
	ОписаниеИсточников.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеИсточников.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	ОписаниеИсточников.Вставить("ИмяПоляКлючНабораВидовВремени", "");
	
	ОписаниеИсточников.Вставить("КлючевыеПоля", Новый Массив);
	
	ОписаниеИсточников.Вставить("Отбор", Новый Массив);
		
	Возврат ОписаниеИсточников;
КонецФункции

// Создает временную таблицу, содержащую данные о зарегистрированном времени, суммированные в разрезе ключевых полей
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		Сотрудник
//		Дней
//		Часов
//		ЧасовВПределах2Часов
//		ВЦеломЗаПериод - булево, признак того, что время было введено сводно
//      КлючевыеПоля - поля из таблицы фильтра, которые были описаны как ключевые.
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеИсточниковДанных
//		ОписаниеТаблицыНаборовВидовВремени - см. ОписаниеФильтраВТДатыРегистрацииНаборовВидовВремени.
//			описание таблицы наборов видов времени. В данном случае,в таблице должны все возможные наборы видов времени 
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремени(ОписаниеИсточниковДанных, ОписаниеТаблицыНаборовВидовВремени, ИмяВТРезультат = "ВТЗарегистрированноеВремяПоНаборамВидовВремени") Экспорт	
	
	ОписаниеИсточниковДанныхСлужебная = ОписаниеИсточниковДанныхВТЗарегистрированноеВремяПоНаборамВидовВремениСлужебная();
	ЗаполнитьЗначенияСвойств(ОписаниеИсточниковДанныхСлужебная, ОписаниеИсточниковДанных);
	ОписаниеИсточниковДанныхСлужебная.ИмяПоляДатаНачалаГруппировка = ОписаниеИсточниковДанных.ИмяПоляДатаНачала;
	ОписаниеИсточниковДанныхСлужебная.ИмяПоляДатаОкончанияГруппировка = ОписаниеИсточниковДанных.ИмяПоляДатаОкончания;	
	
	ПараметрыПостроенияЗапроса = ПараметрыПолученияВТЗарегистрированноеВремяПоНаборамВидовВремени();
	
	СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремениСлужебная(
		ОписаниеИсточниковДанныхСлужебная, 
		ОписаниеТаблицыНаборовВидовВремени, 
		ПараметрыПостроенияЗапроса,
		ИмяВТРезультат);
	
	УничтожитьВременныеТаблицы();	
	
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТОтработаноВсего
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//          ИмяПоляИсточникДанных
//			ИмяПоляПериодРегистрацииВремени
//			ИмяПоляОбщийГрафик
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			ИмяПоляМесяц
//			КлючевыеПоля - массив полей, которые будут добавлены из таблицы-фильтра в результирующую таблицу
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТОтработаноВсего() Экспорт 
	ОписаниеИсточников = Новый Структура;
	
	ОписаниеИсточников.Вставить("ИмяТаблицы", "");
	ОписаниеИсточников.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеИсточников.Вставить("ИмяПоляИсточникДанных", "ИсточникДанных");
	ОписаниеИсточников.Вставить("ИмяПоляПериодРегистрацииВремени", "ПериодРегистрации");
	ОписаниеИсточников.Вставить("ИмяПоляМесяц", "Месяц");
	ОписаниеИсточников.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеИсточников.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	ОписаниеИсточников.Вставить("ИмяПоляОбщийГрафик", "ОбщийГрафик");
	ОписаниеИсточников.Вставить("КлючевыеПоля", Новый Массив);
	
	ОписаниеИсточников.Вставить("Отбор", Новый Массив);

	Возврат ОписаниеИсточников;	
КонецФункции

// Создает временную таблицу, содержащую данные о зарегистрированном рабочем времени, 
// суммированные в разрезе ключевых полей в запрашиваемых интервалах по сотрудникам.
//
// Таблица содержит поля:
//  Сотрудник
//  Дней
//  Часов
//  ВЦеломЗаПериод
//  КлючевыеПоля - массив полей, которые будут добавлены из таблицы-фильтра в результирующую таблицу.
//
// Параметры:
//  ОписаниеИсточниковДанных - Структура - см. ОписаниеФильтраВТОтработаноВсего
//  ИмяВТРезультат           - Строка    - имя результирующей ВТ.
//
Процедура СоздатьВТОтработаноВсего(ОписаниеИсточниковДанных, ИмяВТРезультат = "ВТОтработаноВсего") Экспорт
	СоздатьВТПодневныеДанныеУчетаВремени(ОписаниеИсточниковДанных);	
	
	Запрос = СоздатьЗапрос();
	Запрос.УстановитьПараметр("РабочееВремя", Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВремениПоДатам.Сотрудник,
	|	ДанныеОВремениПоДатам.КлючевыеПоля,
	|	СУММА(ДанныеОВремениПоДатам.Дней) КАК Дней,
	|	МАКСИМУМ(ДанныеОВремениПоДатам.ВЦеломЗаПериод) КАК ВЦеломЗаПериод,
	|	СУММА(ДанныеОВремениПоДатам.Часов) КАК Часов
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИсходныхИсточниковДанных.Сотрудник КАК Сотрудник,
	|		ТаблицаИсходныхИсточниковДанных.Месяц КАК Месяц,
	|		ТаблицаИсходныхИсточниковДанных.ДатаНачала КАК ДатаНачала,
	|		ТаблицаИсходныхИсточниковДанных.ДатаОкончания КАК ДатаОкончания,
	|		ТаблицаИсходныхИсточниковДанных.ИсточникДанных КАК ИсточникДанных,
	|		ТаблицаИсходныхИсточниковДанных.КлючевыеПоля КАК КлючевыеПоля,
	|		МАКСИМУМ(ПодневныеДанныеУчетаВремени.ОсновноеЗначение) КАК Дней,
	|		МАКСИМУМ(ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод) КАК ВЦеломЗаПериод,
	|		ПодневныеДанныеУчетаВремени.Дата КАК Дата,
	|		СУММА(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение) КАК Часов
	|	ИЗ
	|		ВТТаблицаИсходныхИсточниковДанных КАК ТаблицаИсходныхИсточниковДанных
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДанныеУчетаВремени КАК ПодневныеДанныеУчетаВремени
	|			ПО ТаблицаИсходныхИсточниковДанных.ИсточникДанных = ПодневныеДанныеУчетаВремени.ИсточникДанных
	|				И ТаблицаИсходныхИсточниковДанных.ОбщийГрафик = ПодневныеДанныеУчетаВремени.ОбщийГрафик
	|				И ТаблицаИсходныхИсточниковДанных.Месяц = ПодневныеДанныеУчетаВремени.Месяц
	|				И ТаблицаИсходныхИсточниковДанных.ПериодРегистрации = ПодневныеДанныеУчетаВремени.ПериодРегистрации
	|				И (НЕ ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя)
	|				И (ПодневныеДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя)
	|				И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ ТаблицаИсходныхИсточниковДанных.ДатаНачала И ТаблицаИсходныхИсточниковДанных.ДатаОкончания
	|					ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаИсходныхИсточниковДанных.Сотрудник,
	|		ТаблицаИсходныхИсточниковДанных.Месяц,
	|		ТаблицаИсходныхИсточниковДанных.ДатаНачала,
	|		ТаблицаИсходныхИсточниковДанных.ДатаОкончания,
	|		ТаблицаИсходныхИсточниковДанных.ИсточникДанных,
	|		ТаблицаИсходныхИсточниковДанных.КлючевыеПоля,
	|		ПодневныеДанныеУчетаВремени.Дата) КАК ДанныеОВремениПоДатам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВремениПоДатам.Сотрудник,
	|	ДанныеОВремениПоДатам.КлючевыеПоля";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИсходныхИсточниковДанных", ОписаниеИсточниковДанных.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.Сотрудник", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.Месяц", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ДатаНачала", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ДатаОкончания", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ИсточникДанных", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ОбщийГрафик", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляОбщийГрафик);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ПериодРегистрации", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляПериодРегистрацииВремени);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодневныеДанныеУчетаВремени", ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));

	ДобавитьКлючевыеПоляВТекстЗапроса(Запрос.Текст, ОписаниеИсточниковДанных.КлючевыеПоля, "ТаблицаИсходныхИсточниковДанных");
	ДобавитьКлючевыеПоляВТекстЗапроса(Запрос.Текст, ОписаниеИсточниковДанных.КлючевыеПоля, "ДанныеОВремениПоДатам");

	Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы();
	
КонецПроцедуры

// Возвращает описание таблицы-фильтра для метода СоздатьВТОтработанноеВремяПоТерриториямУсловиямТруда.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//          ИмяПоляИсточникДанных
//			ИмяПоляПериодРегистрацииВремени
//			ИмяПоляОбщийГрафик
//			ИмяПоляДатаНачала
//			ИмяПоляДатаОкончания
//			ИмяПоляМесяц
//			ИмяПоляКлючСтроки
//			ИмяПоляКлючНабораВидовВремени
//			КлючевыеПоля - массив полей, которые будут добавлены из таблицы-фильтра в результирующую таблицу
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТОтработанноеВремяПоТерриториямУсловиямТруда() Экспорт 
	ОписаниеИсточников = Новый Структура;
	
	ОписаниеИсточников.Вставить("ИмяТаблицы", "");
	ОписаниеИсточников.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеИсточников.Вставить("ИмяПоляИсточникДанных", "ИсточникДанных");
	ОписаниеИсточников.Вставить("ИмяПоляПериодРегистрацииВремени", "ПериодРегистрации");
	ОписаниеИсточников.Вставить("ИмяПоляОбщийГрафик", "ОбщийГрафик");
	ОписаниеИсточников.Вставить("ИмяПоляМесяц", "Месяц");
	ОписаниеИсточников.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеИсточников.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	ОписаниеИсточников.Вставить("ИмяПоляКлючНабораВидовВремени", "");
	ОписаниеИсточников.Вставить("ИмяПоляКлючСтроки", Неопределено);
	
	ОписаниеИсточников.Вставить("КлючевыеПоля", Новый Массив);
	ОписаниеИсточников.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеИсточников;
		
КонецФункции

// Создает временную таблицу, содержащую данные о зарегистрированном рабочем времени, суммированные в разрезе ключевых полей
//	в запрашиваемых интервалах по сотрудникам, территорий и условий труда.
//
//	Таблица содержит поля:
//		Сотрудник
//		Территория
//		УсловияТруда
//		Дней
//		Часов
//		ВЦеломЗаПериод
//		КлючевыеПоля - массив полей, которые будут добавлены из таблицы-фильтра в результирующую таблицу.
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеИсточниковДанных
//		ОписаниеТаблицыНаборовВидовВремени - см. ОписаниеФильтраВТОтработанноеВремяПоТерриториямУсловиямТруда.
//			описание таблицы наборов видов времени. В данном случае,в таблице должны все возможные наборы видов времени 
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТОтработанноеВремяПоТерриториямУсловиямТруда(ОписаниеИсточниковДанных, ОписаниеТаблицыНаборовВидовВремени, ИмяВТРезультат = "ВТОтработанноеВремяПоТерриториямУсловиямТруда") Экспорт
	СоздатьВТПодневныеДанныеУчетаВремени(ОписаниеИсточниковДанных);	
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ИсточникДанных.Сотрудник КАК Сотрудник,
	|	ИсточникДанных.Месяц КАК Месяц,
	|	МИНИМУМ(ИсточникДанных.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ИсточникДанных.ДатаОкончания) КАК ДатаОкончания,
	|	ИсточникДанных.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени
	|ПОМЕСТИТЬ УчетВремени_ВТСотрудникиМесяцыПолученияТерриторий
	|ИЗ
	|	ВТИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Сотрудник,
	|	ИсточникДанных.Месяц,
	|	ИсточникДанных.ПериодРегистрацииВремени";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсточникДанных", ОписаниеИсточниковДанных.ИмяТаблицы); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.Сотрудник", "ИсточникДанных." + ОписаниеИсточниковДанных.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.Месяц", "ИсточникДанных." + ОписаниеИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ДатаНачала", "ИсточникДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ДатаОкончания", "ИсточникДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ИмяПоляПериодРегистрацииВремени", "ИсточникДанных." + ОписаниеИсточниковДанных.ИмяПоляПериодРегистрацииВремени);
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("УчетВремени_ВТСотрудникиМесяцыПолученияТерриторий");
	
	ОписаниеФильтраПолученияПериодовТерриторий = УчетРабочегоВремениРасширенный.ОписаниеТаблицыОтбораДляЗапросВТПериодыДействияТерриторий();
	ОписаниеФильтраПолученияПериодовТерриторий.ИмяТаблицы = "УчетВремени_ВТСотрудникиМесяцыПолученияТерриторий";
	ОписаниеФильтраПолученияПериодовТерриторий.ИмяПоляПериодРегистрации = "ПериодРегистрацииВремени";
	
	ОписаниеИсточникаДанныхОВремени = УчетРабочегоВремениРасширенный.ОписаниеИсточникаДанныхОВремениДляЗапросВТПериоды();
	ОписаниеИсточникаДанныхОВремени.ИмяТаблицы = ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени); 
	ОписаниеИсточникаДанныхОВремени.ИмяПоляСотрудник = "ИсточникДанных";
	
	УчетРабочегоВремениРасширенный.СоздатьВТПериодыТерриторий(
		Ложь,
		МенеджерВременныхТаблиц, 
		ОписаниеФильтраПолученияПериодовТерриторий, 
		ОписаниеИсточникаДанныхОВремени, 
		"УчетВремени_ВТПериодыТерриторий");
		
	ДобавитьВременныеТаблицыКУничтожению("УчетВремени_ВТПериодыТерриторий");	
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхИсточниковДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаИсходныхИсточниковДанных.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА ТаблицаИсходныхИсточниковДанных.ДатаНачала < ПериодыТерриторий.ДатаНачала
	|			ТОГДА ПериодыТерриторий.ДатаНачала
	|		ИНАЧЕ ТаблицаИсходныхИсточниковДанных.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПериодыТерриторий.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаИсходныхИсточниковДанных.ДатаОкончания
	|		КОГДА ТаблицаИсходныхИсточниковДанных.ДатаОкончания > ПериодыТерриторий.ДатаОкончания
	|			ТОГДА ПериодыТерриторий.ДатаОкончания
	|		ИНАЧЕ ТаблицаИсходныхИсточниковДанных.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	ТаблицаИсходныхИсточниковДанных.ИсточникДанных КАК ИсточникДанных,
	|	ТаблицаИсходныхИсточниковДанных.ПериодРегистрации КАК ПериодРегистрации,
	|	ПериодыТерриторий.Территория КАК Территория,
	|	ТаблицаИсходныхИсточниковДанных.КлючНабораВидовВремени КАК КлючНабораВидовВремени,
	|	ТаблицаИсходныхИсточниковДанных.КлючевыеПоля,
	|	ТаблицаИсходныхИсточниковДанных.ОбщийГрафик КАК ОбщийГрафик,
	|	ТаблицаИсходныхИсточниковДанных.ДатаНачала КАК ДатаНачалаИсходная,
	|	ТаблицаИсходныхИсточниковДанных.ДатаОкончания КАК ДатаОкончанияИсходная
	|ПОМЕСТИТЬ ВТИсточникиПолученияДанныхПоТерриториям
	|ИЗ
	|	ВТТаблицаИсходныхИсточниковДанных КАК ТаблицаИсходныхИсточниковДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетВремени_ВТПериодыТерриторий КАК ПериодыТерриторий
	|		ПО ТаблицаИсходныхИсточниковДанных.Сотрудник = ПериодыТерриторий.Сотрудник
	|			И (ТаблицаИсходныхИсточниковДанных.ДатаНачала МЕЖДУ ПериодыТерриторий.ДатаНачала И ПериодыТерриторий.ДатаОкончания
	|				ИЛИ ПериодыТерриторий.ДатаНачала МЕЖДУ ТаблицаИсходныхИсточниковДанных.ДатаНачала И ТаблицаИсходныхИсточниковДанных.ДатаОкончания)";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИсходныхИсточниковДанных", ОписаниеИсточниковДанных.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.Сотрудник", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.Месяц", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ДатаНачала", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ДатаОкончания", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.КлючНабораВидовВремени", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляКлючНабораВидовВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ИсточникДанных", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ПериодРегистрации", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляПериодРегистрацииВремени);		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ОбщийГрафик", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляОбщийГрафик);
	
	ДобавитьКлючевыеПоляВТекстЗапроса(Запрос.Текст, ОписаниеИсточниковДанных.КлючевыеПоля, "ТаблицаИсходныхИсточниковДанных");
	
	Запрос.Выполнить();
	
	ОписаниеИсточниковДанныхСлужебная = ОписаниеИсточниковДанныхВТЗарегистрированноеВремяПоНаборамВидовВремениСлужебная();
	ОписаниеИсточниковДанныхСлужебная.ИмяТаблицы = "ВТИсточникиПолученияДанныхПоТерриториям";
	ОписаниеИсточниковДанныхСлужебная.ИмяПоляДатаНачалаГруппировка = "ДатаНачалаИсходная";
	ОписаниеИсточниковДанныхСлужебная.ИмяПоляДатаОкончанияГруппировка = "ДатаОкончанияИсходная";
	ОписаниеИсточниковДанныхСлужебная.КлючевыеПоля = ОписаниеИсточниковДанных.КлючевыеПоля;
	
	ПараметрыПолученияДанных = ПараметрыПолученияВТЗарегистрированноеВремяПоНаборамВидовВремени();
	
	ПараметрыПолученияДанных.ОбновлятьПодневныеДанные = Ложь;
	ПараметрыПолученияДанных.ФормироватьВРазрезеТерриторий = Истина;
	ПараметрыПолученияДанных.ФормироватьВРазрезеУсловияТруда = Истина;
	ПараметрыПолученияДанных.ДляПустыхНаборовВидовВремениУчитыватьТолькоРабочееВремя = Ложь;
		
	СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремениСлужебная(ОписаниеИсточниковДанныхСлужебная, ОписаниеТаблицыНаборовВидовВремени, ПараметрыПолученияДанных, ИмяВТРезультат);
	
	ДобавитьВременныеТаблицыКУничтожению("ВТИсточникиПолученияДанныхПоТерриториям");
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры

// Возвращает описание таблицы-фильтра для метода СоздатьВТНормаВремениПоИсточникамДанных.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляСотрудник
//          ИмяПоляИсточникДанных
//			ИмяПоляИсточникДанныхФактическогоВремени
//			ИмяПоляМесяц
//			ИмяПоляПериодРегистрацииВремени
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру.
//
Функция ОписаниеФильтраВТНормаВремениПоИсточникамДанных() Экспорт
	ОписаниеИсточниковДанных = Новый Структура;
	
	ОписаниеИсточниковДанных.Вставить("ИмяТаблицы", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляИсточникДанныхНормыВремени", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляИсточникДанныхФактическогоВремени", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляМесяц", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляПериодРегистрацииВремени", "");
	
	Возврат ОписаниеИсточниковДанных;	
КонецФункции	

// Создает временную таблицу, содержащую данные о норме времени
// в запрашиваемых интервалах по сотрудникам, территорий и условий труда.
//
// Таблица содержит поля:
//  Сотрудник
//  ИсточникДанных
//  ПериодРегистрации
//  Месяц
//  НормаДней
//  НормаЧасов
//  НормаДнейПолная
//  НормаЧасовПолная
//
// Параметры:
//  ОписаниеИсточниковДанных - Структура - см. ОписаниеФильтраВТНормаВремениПоИсточникамДанных
//  ИмяВТРезультат           - Строка    - имя результирующей ВТ.
//
Процедура СоздатьВТНормаВремениПоИсточникамДанных(ОписаниеИсточниковДанных, ИмяВТРезультат = "ВТНормаВремениПоИсточникамДанных") Экспорт
	Запрос = СоздатьЗапрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени КАК ИсточникДанныхНормыВремениДляПолученияДанных,
	|	ВЫБОР
	|		КОГДА ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|						ТОГДА ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени
	|					ИНАЧЕ ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени.ГрафикПолногоРабочегоВремени
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени
	|	КОНЕЦ КАК ИсточникДанныхПолнойНормыВремениДляПолученияДанных,
	|	ТаблицаИсточниковДанных.ПериодРегистрации КАК ПериодРегистрацииДляПолученияДанных,
	|	ТаблицаИсточниковДанных.Месяц КАК Месяц,
	|	ТаблицаИсточниковДанных.ИсточникДанныхФактическогоВремени КАК ИсточникДанныхФактическогоВремени,
	|	ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени КАК ИсточникДанныхНормыВремени,
	|	ТаблицаИсточниковДанных.ПериодРегистрации КАК ПериодРегистрацииВремени
	|ПОМЕСТИТЬ ВТИсточникиДанныхНормыВремени
	|ИЗ
	|	ВТТаблицаИсточниковДанных КАК ТаблицаИсточниковДанных";
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИсточниковДанных", ОписаниеИсточниковДанных.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ИсточникДанныхФактическогоВремени", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанныхФактическогоВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанныхНормыВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.Месяц", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ПериодРегистрации", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляПериодРегистрацииВремени);
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТИсточникиДанныхНормыВремени");
	
	ОписаниеИсточниковНормыДополненная = ОписаниеИсточниковДанныхВТНормаВремениПоИсточникамДанныхСлужебная();
	ОписаниеИсточниковНормыДополненная.ИмяТаблицы = "ВТИсточникиДанныхНормыВремени";
	ОписаниеИсточниковНормыДополненная.ИмяПоляИсточникДанныхНормыВремени = "ИсточникДанныхНормыВремениДляПолученияДанных";
	ОписаниеИсточниковНормыДополненная.ИмяПоляИсточникДанныхПолнойНормыВремени = "ИсточникДанныхПолнойНормыВремениДляПолученияДанных";
	ОписаниеИсточниковНормыДополненная.ИмяПоляМесяц = "Месяц";
	ОписаниеИсточниковНормыДополненная.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрацииДляПолученияДанных";
	
	ОписаниеИсточниковНормыДополненная.КлючевыеПоля.Добавить("ИсточникДанныхФактическогоВремени");
	ОписаниеИсточниковНормыДополненная.КлючевыеПоля.Добавить("ИсточникДанныхНормыВремени");
	ОписаниеИсточниковНормыДополненная.КлючевыеПоля.Добавить("ПериодРегистрацииВремени");
	
	СоздатьВТНормаВремениПоИсточникамДанныхСлужебная(ОписаниеИсточниковНормыДополненная, ИмяВТРезультат);
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры	

// Возвращает описание таблицы-фильтра для метода СоздатьВТДанныеПроизводственногоКалендаряПоОбщимГрафикам.
//
// Возвращаемое значение - структура с полями
//			ИмяТаблицы - имя временной таблицы
//			ИмяПоляОбщийГрафик
//			ИмяПоляДатаНачала
//			ДатаОкончания
//			Отбор - массив структур созданных методом ОписаниеОтбораПоТаблицеФильтру
//			КлючевыеПоля - массив полей, которые будут добавлены из таблицы-фильтра в результирующую таблицу.
//
Функция ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоОбщимГрафикам() Экспорт 
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ИмяТаблицы");
	ОписаниеФильтра.Вставить("ИмяПоляОбщийГрафик", "ОбщийГрафик");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	ОписаниеФильтра.Вставить("КлючевыеПоля", Новый Массив);
	ОписаниеФильтра.Вставить("Отбор", Новый Массив);
	
	Возврат ОписаниеФильтра;
КонецФункции

// Создает временную таблицу, содержащую данные календаря
//	в запрашиваемых интервалах по сотрудникам.
//
//	Таблица содержит поля:
//		ОбщийГрафик
//		ДатаНачала
//		ДатаОкончания
//		ДнейПоПятидневке
//		ЧасовПоПятидневке,
//		ДнейПоШестидневке,
//		ДнейКалендарных,
//		ДнейКалендарныхБезУчетаПраздников,
//		Праздников
//
// Параметры
//		ОписаниеФильтра - см. ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоОбщимГрафикам
//		ИмяВТРезультат - имя результирующей ВТ.
//
Процедура СоздатьВТДанныеПроизводственногоКалендаряПоОбщимГрафикам(ОписаниеФильтра, ИмяВТРезультат = "ВТДанныеПроизводственногоКалендаряПоОбщимГрафикам") Экспорт	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыПроизводственныхКалендарей.КлючевыеПоля КАК КлючевыеПоля,
	|	ПериодыПроизводственныхКалендарей.ОбщийГрафик КАК ОбщийГрафик,
	|	ПериодыПроизводственныхКалендарей.ДатаНачала КАК ДатаНачала,
	|	ПериодыПроизводственныхКалендарей.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧасовПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоШестидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейКалендарных,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL
	|					И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейКалендарныхБезУчетаПраздников,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Праздников
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТФильтр КАК ПериодыПроизводственныхКалендарей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ПериодыПроизводственныхКалендарей.ОбщийГрафик.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ПериодыПроизводственныхКалендарей.ДатаНачала <= ДанныеПроизводственногоКалендаря.Дата
	|			И ПериодыПроизводственныхКалендарей.ДатаОкончания >= ДанныеПроизводственногоКалендаря.Дата
	|ГДЕ
	|	&УсловиеОтбораТаблицыИсточникаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПроизводственныхКалендарей.ОбщийГрафик,
	|	ПериодыПроизводственныхКалендарей.ДатаНачала,
	|	ПериодыПроизводственныхКалендарей.ДатаОкончания,
	|	ПериодыПроизводственныхКалендарей.КлючевыеПоля";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФильтр", ОписаниеФильтра.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодыПроизводственныхКалендарей.ОбщийГрафик", "ПериодыПроизводственныхКалендарей." + ОписаниеФильтра.ИмяПоляОбщийГрафик);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодыПроизводственныхКалендарей.ДатаНачала", "ПериодыПроизводственныхКалендарей." + ОписаниеФильтра.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодыПроизводственныхКалендарей.ДатаОкончания", "ПериодыПроизводственныхКалендарей." + ОписаниеФильтра.ИмяПоляДатаОкончания);
	
	ДобавитьКлючевыеПоляВТекстЗапроса(Запрос.Текст, ОписаниеФильтра.КлючевыеПоля, "ПериодыПроизводственныхКалендарей"); 
	УстановитьУсловияОтбораВЗапрос(Запрос, ОписаниеФильтра.Отбор, "ПериодыПроизводственныхКалендарей");
	
	Запрос.Выполнить();	
	
	УничтожитьВременныеТаблицы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АлгоритмыПолученияПодневныхДанных() Экспорт
	АлгоритмПолученияПодневныхДанных = Новый Структура();
	АлгоритмПолученияПодневныхДанных.Вставить("ПоВидамВремени", 1);
	АлгоритмПолученияПодневныхДанных.Вставить("ПриОтсутствииЗарегистрированныхДанныхПоучатьНорму", 3);
	АлгоритмПолученияПодневныхДанных.Вставить("ПолучатьВсеРабочееВремя", 4);
	АлгоритмПолученияПодневныхДанных.Вставить("НеВыполнятьФильтрациюПоВидамВремени", 5);
	АлгоритмПолученияПодневныхДанных.Вставить("ПолучатьСверхурочныеЧасы", 6);
	АлгоритмПолученияПодневныхДанных.Вставить("ПолучатьОтработанныеСмены", 7);
	
	Возврат АлгоритмПолученияПодневныхДанных;	
КонецФункции	

Функция ИсточникиДанныхУчетаВремени(ОписаниеФильтра) Экспорт
	ИсточникиДанныхУчетаВремени = НовыйИсточникиДанныхУчетаВремени();
	
	ГрафикиРаботыСотрудников = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраПериоды("ГрафикРаботыСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра); 
	ПараметрыЗарегистрированныхДанных = ПараметрыЗарегистрированныхДанныхУчетаВремени(ОписаниеФильтра);
	
	ОбщиеГрафики = ГрафикиРаботыСотрудников.ВыгрузитьКолонку("ГрафикРаботы");
	ОбщиеГрафики = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбщиеГрафики);
	
	СвойстваГрафиков = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОбщиеГрафики, "СуммированныйУчетРабочегоВремени");
	
	ГрафикиРаботыСотрудников.Сортировать("Сотрудник, НачалоПериода", Новый СравнениеЗначений);
	ПараметрыЗарегистрированныхДанных.Индексы.Добавить("Сотрудник, Месяц");
	СтруктураПоиска = Новый Структура("Сотрудник, Месяц");
	
	Для Каждого СтрокаТаблицыГрафиков Из ГрафикиРаботыСотрудников Цикл
		ПервыйМесяц = НачалоМесяца(СтрокаТаблицыГрафиков.НачалоПериода);
		ПоследнийМесяц = НачалоМесяца(СтрокаТаблицыГрафиков.КонецПериода);
		ТекущийМесяц = ПервыйМесяц;
		
		СтруктураПоиска.Сотрудник = СтрокаТаблицыГрафиков.Сотрудник;
		Пока ТекущийМесяц <= ПоследнийМесяц Цикл
			СтруктураПоиска.Месяц = ТекущийМесяц;
			НайденныеСтроки = ПараметрыЗарегистрированныхДанных.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ПараметрыДанныхУчетаВремениЗаМесяц = НайденныеСтроки[0];
			Иначе
				ПараметрыДанныхУчетаВремениЗаМесяц = Неопределено;
			КонецЕсли;	
			
			СтрокаТаблицыИсточников = ИсточникиДанныхУчетаВремени.Добавить();
			СтрокаТаблицыИсточников.Сотрудник = СтрокаТаблицыГрафиков.Сотрудник;
			СтрокаТаблицыИсточников.Месяц = ТекущийМесяц;
			СтрокаТаблицыИсточников.ДатаНачала = Макс(СтрокаТаблицыГрафиков.НачалоПериода, ТекущийМесяц);
			СтрокаТаблицыИсточников.ДатаОкончания = Мин(СтрокаТаблицыГрафиков.КонецПериода, КонецМесяца(ТекущийМесяц));
			СтрокаТаблицыИсточников.ОбщийГрафик = СтрокаТаблицыГрафиков.ГрафикРаботы;
			
			Если ПараметрыДанныхУчетаВремениЗаМесяц <> Неопределено И
				ПараметрыДанныхУчетаВремениЗаМесяц.ЗарегистрированыИндивидуальныеСведения Тогда
				
				СтрокаТаблицыИсточников.ИсточникДанныхФактическогоВремени = ПараметрыДанныхУчетаВремениЗаМесяц.Сотрудник;
				СтрокаТаблицыИсточников.ПериодРегистрацииФактическогоВремени = ПараметрыДанныхУчетаВремениЗаМесяц.ПериодРегистрации;
			Иначе
				СтрокаТаблицыИсточников.ИсточникДанныхФактическогоВремени = СтрокаТаблицыГрафиков.ГрафикРаботы;
				СтрокаТаблицыИсточников.ПериодРегистрацииФактическогоВремени = '00010101';
			КонецЕсли;	
			
			Если ПараметрыДанныхУчетаВремениЗаМесяц <> Неопределено И
				ПараметрыДанныхУчетаВремениЗаМесяц.ЗарегистрированыИндивидуальныеСведенияОНорме Тогда
				
				СтрокаТаблицыИсточников.ИсточникДанныхНормыВремени = ПараметрыДанныхУчетаВремениЗаМесяц.Сотрудник;
				СтрокаТаблицыИсточников.ПериодРегистрацииНормыВремени = ПараметрыДанныхУчетаВремениЗаМесяц.ПериодРегистрации;
			Иначе
				СтрокаТаблицыИсточников.ИсточникДанныхНормыВремени = СтрокаТаблицыГрафиков.ГрафикРаботы;
				СтрокаТаблицыИсточников.ПериодРегистрацииНормыВремени = '00010101';
			КонецЕсли;	

			Если ПараметрыДанныхУчетаВремениЗаМесяц <> Неопределено Тогда
				СтрокаТаблицыИсточников.ВремяВведеноСводно = ПараметрыДанныхУчетаВремениЗаМесяц.ВремяВведеноСводно;
			Иначе
				СтрокаТаблицыИсточников.ВремяВведеноСводно = Ложь;
			КонецЕсли;	
			
			Если СвойстваГрафиков[СтрокаТаблицыГрафиков.ГрафикРаботы] <> Неопределено Тогда	
				СтрокаТаблицыИсточников.СуммированныйУчетРабочегоВремени = СвойстваГрафиков[СтрокаТаблицыГрафиков.ГрафикРаботы].СуммированныйУчетРабочегоВремени;
			Иначе
				СтрокаТаблицыИсточников.СуммированныйУчетРабочегоВремени = Ложь;
			КонецЕсли;	
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат ИсточникиДанныхУчетаВремени;
КонецФункции	

Функция ОписаниеТаблицыВыявляемыхВидовВремени(ИмяТаблицы, ИмяПоляВидВремени = "ВидВремени", ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни") Экспорт
	Возврат Новый Структура("ИмяТаблицы, ИмяПоляВидВремени, ИмяПоляУчитыватьТолькоПраздники", ИмяТаблицы, ИмяПоляВидВремени, ИмяПоляУчитыватьТолькоПраздники);	
КонецФункции	

Функция ЗарегистрированныеВидыУчетаВремени(ПериодыИсточниковДанныхУчетаВремени, ОписаниеТаблицыВыявляемыхВидовВремени) Экспорт
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
							ПериодыИсточниковДанныхУчетаВремени,
							,
							"Месяц, ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик",
							МенеджерВременныхТаблиц,
							"ВТФильтрЗарегистрированныхВидовВремени");
							
							
	ПриПолученииПодневныхДанныхУчетаВремени(ОписаниеФильтра);						
							
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ГрафикиРаботыПоВидамВремени");
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ШаблонИсточникДанныхФактическогоВремени КАК ИсточникДанныхФактическогоВремени,
	|	&ШаблонПериодРегистрацииФактическогоВремени КАК ПериодРегистрацииФактическогоВремени,
	|	&ШаблонМесяц КАК Месяц,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания,
	|	&ШаблонВидВремени КАК ВидВремени,
	|	&ШаблонУчитыватьТолькоПраздники КАК УчитыватьТолькоПраздники
	|ИЗ
	|	ВТПериодыПолученияВидовВремениПоИсточникамДанных КАК ДатыПолученияДанныхПоИсточникамДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО (ГрафикиРаботыСотрудников.Ссылка = ДатыПолученияДанныхПоИсточникамДанных.ОбщийГрафик)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыявляемыеВидыВремени КАК ТаблицаНаборовВидовВремени
	|		ПО (1 В (&КоррелирующийЗапрос_))";
	
	ШаблонКоррелирующегоЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ПодневныеДанныеУчетаВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь_)
	|			И (&УчитыватьТолькоПраздники_)
	|			И (ВЫБОР
	|				КОГДА ПодневныеДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены
	|					ТОГДА ДОБАВИТЬКДАТЕ(ПодневныеДанныеУчетаВремени.Дата, ДЕНЬ, 1)
	|				ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|			КОНЕЦ = ДанныеПроизводственногоКалендаря.Дата)
	|			И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
	|ГДЕ
	|	ПодневныеДанныеУчетаВремени.ГрафикРаботы = &ИсточникДанныхФактическогоВремени_
	|	И ПодневныеДанныеУчетаВремени.ПериодРегистрации = &ПериодРегистрацииФактическогоВремени_
	|	И ПодневныеДанныеУчетаВремени.Месяц = &Месяц_
	|	И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ВидВремени_
	|	И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_
	|				И НЕ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|			ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|				И НЕ &УчитыватьТолькоПраздники_)
	|	И (НЕ ДанныеПроизводственногоКалендаря.Дата ЕСТЬ NULL
	|			ИЛИ НЕ &УчитыватьТолькоПраздники_)";
		
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "ТаблицаНаборовВидовВремени", ОписаниеТаблицыВыявляемыхВидовВремени.ИмяТаблицы);
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ДатыПолученияДанныхПоИсточникамДанных", "ТаблицаНаборовВидовВремени");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса,
		"ЗарегистрированныеВидыВремени");
		
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "ТаблицаНаборовВидовВремени", "ГрафикиРаботыСотрудников");	
		ВыражениеПоляОбщийГрафик = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ОбщийГрафик", ОписаниеИспользованияФильтра);
		ТекстУсловия = "ГрафикиРаботыСотрудников.Ссылка = " + ВыражениеПоляОбщийГрафик;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "ТаблицаНаборовВидовВремени", ТекстУсловия);
	КонецЕсли;	
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончания");
		
	ВыражениеПоляИсточникДанныхФактическогоВремени =  ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ИсточникДанныхФактическогоВремени", ОписаниеИспользованияФильтра);	
	ВыражениеПоляПериодРегистрацииФактическогоВремени =  ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ПериодРегистрацииФактическогоВремени", ОписаниеИспользованияФильтра);
	ВыражениеПоляМесяц =  ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтра);
	ВыражениеПоляДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	ВыражениеПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);	
	ВыражениеПоляУчитыватьТолькоПраздники = "ТаблицаНаборовВидовВремени." +  ОписаниеТаблицыВыявляемыхВидовВремени.ИмяПоляУчитыватьТолькоПраздники;
	ВыражениеПоляВидВремени = "ТаблицаНаборовВидовВремени." +  ОписаниеТаблицыВыявляемыхВидовВремени.ИмяПоляВидВремени;
	ВыражениеПоляПроизводственныйКалендарь = "ГрафикиРаботыСотрудников.ПроизводственныйКалендарь";
	
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ШаблонКоррелирующегоЗапроса, "&ИсточникДанныхФактическогоВремени_", ВыражениеПоляИсточникДанныхФактическогоВремени);
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ТекстКоррелирующегоЗапроса, "&ПериодРегистрацииФактическогоВремени_", ВыражениеПоляПериодРегистрацииФактическогоВремени);
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ТекстКоррелирующегоЗапроса, "&Месяц_", ВыражениеПоляМесяц);
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ТекстКоррелирующегоЗапроса, "&ФильтрДатаНачала_", ВыражениеПоляДатаНачала);
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ТекстКоррелирующегоЗапроса, "&ФильтрДатаОкончания_", ВыражениеПоляДатаОкончания);	
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ТекстКоррелирующегоЗапроса, "&ВидВремени_", ВыражениеПоляВидВремени);
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ТекстКоррелирующегоЗапроса, "&УчитыватьТолькоПраздники_", ВыражениеПоляУчитыватьТолькоПраздники);
	ТекстКоррелирующегоЗапроса = СтрЗаменить(ТекстКоррелирующегоЗапроса, "&ПроизводственныйКалендарь_", ВыражениеПоляПроизводственныйКалендарь);

	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&КоррелирующийЗапрос_", ТекстКоррелирующегоЗапроса);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаНачала, "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаОкончания, "ДатаОкончания");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляВидВремени, "ВидВремени");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляУчитыватьТолькоПраздники, "УчитыватьТолькоПраздники");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции	

// Описание
// 
// Параметры:
// 	ОписаниеФильтра - (См.ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеФильтраДляСоздатьВТИмяРегистра) - Описание:
// 	ИмяПоляИсточникДанных - Строка - Описание
// 	ИмяПоляПериодРегистрации - Строка - Описание
Процедура ПриПолученииПодневныхДанныхУчетаВремени(ОписаниеФильтра, ИмяПоляИсточникДанных = "ИсточникДанныхФактическогоВремени", ИмяПоляПериодРегистрации = "ПериодРегистрацииФактическогоВремени") Экспорт	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ГрафикиРаботыПоВидамВремени");
	
	ШаблонТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ШаблонИсточникДанных КАК ИсточникДанных,
	|	&ШаблонПериодРегистрации КАК ПериодРегистрации,
	|	&ШаблонМесяц КАК Месяц
	|ИЗ
	|	ВТИсточникДанных КАК ИсточникДанныхУчетаВремени
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&ИсточникДанныхФактическогоВремени_) = &ТипСотрудники
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ИсточникДанныхФактическогоВремени_
	|					И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц_
	|					И ГрафикиРаботыПоВидамВремени.ПериодРегистрации = &ПериодРегистрацииФактическогоВремени_)";
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеПакета.Параметры.Вставить("ТипСотрудники", Тип("СправочникСсылка.Сотрудники"));
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИсточникДанныхУчетаВремени", Неопределено);
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"",
		ОператорЗапроса,
		"");
		
	ВыражениеПоляИсточникДанных = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра(ИмяПоляИсточникДанных, ОписаниеИспользованияФильтра);	
	ВыражениеПоляПериодРегистрации = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра(ИмяПоляПериодРегистрации, ОписаниеИспользованияФильтра);
	ВыражениеПоляМесяц = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтра);
	
	Для ИндексЭлементаОтбора = 0 По ОператорЗапроса.Отбор.Количество() - 1 Цикл
		ОператорЗапроса.Отбор[ИндексЭлементаОтбора] = СтрЗаменить(ОператорЗапроса.Отбор[ИндексЭлементаОтбора], "&ИсточникДанныхФактическогоВремени_", ВыражениеПоляИсточникДанных);
		ОператорЗапроса.Отбор[ИндексЭлементаОтбора] = СтрЗаменить(ОператорЗапроса.Отбор[ИндексЭлементаОтбора], "&ПериодРегистрацииФактическогоВремени_", ВыражениеПоляПериодРегистрации);
		ОператорЗапроса.Отбор[ИндексЭлементаОтбора] = СтрЗаменить(ОператорЗапроса.Отбор[ИндексЭлементаОтбора], "&Месяц_", ВыражениеПоляМесяц);
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляИсточникДанных, "Сотрудник");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляМесяц, "ПериодДействия");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодРегистрации, "ПериодРегистрации");

	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСотрудников.Количество() > 0 Тогда
		УчетРабочегоВремениРасширенный.СформироватьЗаписиРабочегоВремениСотрудников(ТаблицаСотрудников);
	КонецЕсли;	
КонецПроцедуры	

Функция ПериодыДействияНаборовВидовВремени(ТаблицаФильтр, ОписаниеТаблицыНаборовВидовВремени) Экспорт
	ПериодыДействияНаборовВидовВремени = Новый ТаблицаЗначений;
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("ИсточникДанныхФактическогоВремени");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("ПериодРегистрацииФактическогоВремени");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("ОбщийГрафик");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("Месяц");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("ДатаНачалаИсходная");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("ДатаОкончанияИсходная");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("КлючНабораВидовВремени");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("ДатаНачала");
	ПериодыДействияНаборовВидовВремени.Колонки.Добавить("ДатаОкончания");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
						ТаблицаФильтр,
						,
						"ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, Месяц, ОбщийГрафик, КлючНабораВидовВремени",
						МенеджерВременныхТаблиц,
						"ВТФильтрОпределенияПериодаДействияНаборовВидовВремени");
						
	ПриПолученииПодневныхДанныхУчетаВремени(ОписаниеФильтра);					
	
	ОписаниеПолучаемыхДанных = НовыйОписаниеПолучаемыхДанныхДатыРегистрацииНаборовВидовВремени();
	
	ОписаниеПолучаемыхДанных.Порядок.Добавить("ИсточникДанныхФактическогоВремени");
	ОписаниеПолучаемыхДанных.Порядок.Добавить("ПериодРегистрацииФактическогоВремени");
	ОписаниеПолучаемыхДанных.Порядок.Добавить("Месяц");
	ОписаниеПолучаемыхДанных.Порядок.Добавить("ДатаНачала");
	ОписаниеПолучаемыхДанных.Порядок.Добавить("ДатаОкончания");
	ОписаниеПолучаемыхДанных.Порядок.Добавить("КлючНабораВидовВремени");
	ОписаниеПолучаемыхДанных.Порядок.Добавить("Дата");
					
	Запрос = ЗапросВТДатыРегистрацииНаборовВидовВремени(ОписаниеФильтра, ОписаниеТаблицыНаборовВидовВремени, ОписаниеПолучаемыхДанных);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяСтрока = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекущаяСтрока = Неопределено
			Или ТекущаяСтрока.ИсточникДанныхФактическогоВремени <> Выборка.ИсточникДанныхФактическогоВремени
			Или ТекущаяСтрока.ПериодРегистрацииФактическогоВремени <> Выборка.ПериодРегистрацииФактическогоВремени
			Или ТекущаяСтрока.ОбщийГрафик <> Выборка.ОбщийГрафик
			Или ТекущаяСтрока.Месяц <> Выборка.Месяц
			Или ТекущаяСтрока.ДатаНачалаИсходная <> Выборка.ДатаНачала
			Или ТекущаяСтрока.ДатаОкончанияИсходная <> Выборка.ДатаОкончания
			Или ТекущаяСтрока.КлючНабораВидовВремени <> Выборка.КлючНабораВидовВремени
			Или ТекущаяСтрока.ДатаОкончания + 1 <> НачалоДня(Выборка.Дата) Тогда
			
			ТекущаяСтрока = ПериодыДействияНаборовВидовВремени.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка, "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, ОбщийГрафик, Месяц, КлючНабораВидовВремени");
			ТекущаяСтрока.ДатаНачалаИсходная = Выборка.ДатаНачала;
			ТекущаяСтрока.ДатаОкончанияИсходная = Выборка.ДатаОкончания;
			
			Если Выборка.ВЦеломЗаПериод Тогда
				ТекущаяСтрока.ДатаНачала = НачалоМесяца(Выборка.Дата);	
			Иначе	
				ТекущаяСтрока.ДатаНачала = НачалоДня(Выборка.Дата);
			КонецЕсли;	
		КонецЕсли;	
		
		Если Выборка.ВЦеломЗаПериод Тогда
			ТекущаяСтрока.ДатаОкончания = КонецМесяца(Выборка.Дата);	
		Иначе	
			ТекущаяСтрока.ДатаОкончания = КонецДня(Выборка.Дата);
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат ПериодыДействияНаборовВидовВремени;	
КонецФункции

Функция ДатыРегистрацииНаборовВидовВремени(ТаблицаФильтр, ОписаниеТаблицыНаборовВидовВремени, ОписаниеПолучаемыхДанных) Экспорт
	ПоляФильтра = "ИсточникДанныхФактическогоВремени, ПериодРегистрацииФактическогоВремени, Месяц, ОбщийГрафик, КлючНабораВидовВремени";
	Если ОписаниеПолучаемыхДанных.ДополнительныеПоляФильтра.Количество() > 0 Тогда
		ПоляФильтра = ПоляФильтра + ", " + СтрСоединить(ОписаниеПолучаемыхДанных.ДополнительныеПоляФильтра, ",");
	КонецЕсли;	
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		ТаблицаФильтр,
		,
		ПоляФильтра);
						
	ПриПолученииПодневныхДанныхУчетаВремени(ОписаниеФильтра);	
						
	Запрос = ЗапросВТДатыРегистрацииНаборовВидовВремени(ОписаниеФильтра, ОписаниеТаблицыНаборовВидовВремени, ОписаниеПолучаемыхДанных);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ЗапросВТДатыРегистрацииНаборовВидовВремени(ОписаниеФильтра, ОписаниеТаблицыНаборовВидовВремени, ОписаниеПолучаемыхДанных)
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ГрафикиРаботыПоВидамВремени");
	
	ВидВремениВыходной = Справочники.ВидыИспользованияРабочегоВремени.ВыходныеДни;
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ОписаниеПакета.Параметры.Вставить("Выходной", ВидВремениВыходной);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&ШаблонИсточникДанных КАК ИсточникДанных,
	|	&ШаблонПериодРегистрации КАК ПериодРегистрации,
	|	&ОбщийГрафик КАК ОбщийГрафик,
	|	&ШаблонПериодМесяц КАК Месяц,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания,
	|	ПодневныеДанныеУчетаВремени.Дата КАК Дата,
	|	&ШаблонКлючНабораВидовВремени КАК КлючНабораВидовВремени,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПодневныеДанныеУчетаВремени.ДополнительноеЗначение = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ВремяВЧасах,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &Выходной
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЭтоВыходнойДень,
	|	МАКСИМУМ(ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод) КАК ВЦеломЗаПериод
	|ИЗ
	|	ВТПериодыПолученияВидовВремениПоИсточникамДанных КАК ДатыПолученияДанныхПоИсточникамДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО (&ШаблонУсловиеСвязиПоГрафику)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНаборовВидовВремени КАК ТаблицаНаборовВидовВремени
	|		ПО (&ШаблонУсловиеСвязиПоКлючу)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ПодневныеДанныеУчетаВремени
	|		ПО (ПодневныеДанныеУчетаВремени.ГрафикРаботы = &ИсточникДанныхФактическогоВремени_)
	|			И (ПодневныеДанныеУчетаВремени.ПериодРегистрации = &ПериодРегистрацииФактическогоВремени_)
	|			И (ПодневныеДанныеУчетаВремени.Месяц = &Месяц_)
	|			И (ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ВидВремени_)
	|			И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|			И (ВЫБОР
	|				КОГДА ПодневныеДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены
	|					ТОГДА ДОБАВИТЬКДАТЕ(ПодневныеДанныеУчетаВремени.Дата, ДЕНЬ, 1)
	|				ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|			КОНЕЦ = ДанныеПроизводственногоКалендаря.Дата)
	|			И (&ШаблонУчитыватьТолькоПраздники)
	|			И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПолученияДанныхПоИсточникамДанных.ИсточникДанныхФактическогоВремени,
	|	ДатыПолученияДанныхПоИсточникамДанных.Месяц,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачала,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончания,
	|	ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени,
	|	ПодневныеДанныеУчетаВремени.Дата";
	
	ШаблонТекстаУсловия = "(НЕ &УчитыватьТолькоПраздники_
	|			ИЛИ НЕ ДанныеПроизводственногоКалендаря.Дата ЕСТЬ NULL)";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	Если Не ОписаниеПолучаемыхДанных.СоздаватьВременнуюТаблицу Тогда
		ОписаниеЗапроса.ТаблицаДляПомещения = Неопределено;
	КонецЕсли;	
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ОператорЗапроса.Группировка.Очистить();
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "ТаблицаНаборовВидовВремени", ОписаниеТаблицыНаборовВидовВремени.ИмяТаблицы);
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ДатыПолученияДанныхПоИсточникамДанных", "ПодневныеДанныеУчетаВремени");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса);
			
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончания");
		
	ВыражениеПоляИсточникДанныхФактическогоВремени =  ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ИсточникДанныхФактическогоВремени", ОписаниеИспользованияФильтра);	
	ВыражениеПоляПериодРегистрацииФактическогоВремени =  ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ПериодРегистрацииФактическогоВремени", ОписаниеИспользованияФильтра);
	ВыражениеПоляМесяц =  ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтра);
	ВыражениеПоляДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	ВыражениеПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);	
	ВыражениеПоляУчитыватьТолькоПраздники = "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляУчитыватьТолькоПраздники;
	ВыражениеПоляВидВремени = "ТаблицаНаборовВидовВремени." +  ОписаниеТаблицыНаборовВидовВремени.ИмяПоляВидВремени;
	ВыражениеПоляПроизводственныйКалендарь = "ГрафикиРаботыСотрудников.ПроизводственныйКалендарь";
	ВыражениеПоляОбщийГрафик = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ОбщийГрафик", ОписаниеИспользованияФильтра);
	ВыражениеПоляКлючНаборовВидаВремени = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("КлючНабораВидовВремени", ОписаниеИспользованияФильтра); 
	ВыражениеПоляКлючТаблицыНаборов =  "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч;
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ИсточникДанныхФактическогоВремени_", ВыражениеПоляИсточникДанныхФактическогоВремени);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ПериодРегистрацииФактическогоВремени_", ВыражениеПоляПериодРегистрацииФактическогоВремени);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&Месяц_", ВыражениеПоляМесяц);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ВидВремени_", ВыражениеПоляВидВремени);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&УчитыватьТолькоПраздники_", ВыражениеПоляУчитыватьТолькоПраздники);
	
	ТекстУсловияПоГрафику = "ГрафикиРаботыСотрудников.Ссылка = " + ВыражениеПоляОбщийГрафик;
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "ГрафикиРаботыСотрудников", ТекстУсловияПоГрафику);
	
	ТекстУсловияПоКлючу = ВыражениеПоляКлючТаблицыНаборов + " = " + ВыражениеПоляКлючНаборовВидаВремени;
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "ТаблицаНаборовВидовВремени", ТекстУсловияПоКлючу);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "ДанныеПроизводственногоКалендаря", ВыражениеПоляУчитыватьТолькоПраздники);
	
	ТекстУсловия = СтрЗаменить(ШаблонТекстаУсловия, "&УчитыватьТолькоПраздники_", ВыражениеПоляУчитыватьТолькоПраздники);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапроса, ТекстУсловия);
	
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ТекстУсловия = "ГрафикиРаботыСотрудников.Ссылка = " + ВыражениеПоляОбщийГрафик;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "ТаблицаНаборовВидовВремени", ТекстУсловия);
		
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "ТаблицаНаборовВидовВремени", "ГрафикиРаботыСотрудников");	
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "ДанныеПроизводственногоКалендаря", "ГрафикиРаботыСотрудников");
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "ПодневныеДанныеУчетаВремени", "ГрафикиРаботыСотрудников");
	КонецЕсли;		
		
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляИсточникДанныхФактическогоВремени, "ИсточникДанныхФактическогоВремени");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляИсточникДанныхФактическогоВремени);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодРегистрацииФактическогоВремени, "ПериодРегистрацииФактическогоВремени");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляПериодРегистрацииФактическогоВремени);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляОбщийГрафик, "ОбщийГрафик");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляОбщийГрафик);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляМесяц, "Месяц");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляМесяц);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаНачала, "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляДатаНачала);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаОкончания, "ДатаОкончания");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляДатаОкончания);

	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляКлючНаборовВидаВремени, "КлючНабораВидовВремени");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляКлючНаборовВидаВремени);

	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "ПодневныеДанныеУчетаВремени.Дата", "Дата");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, "ПодневныеДанныеУчетаВремени.Дата");
	
	Для Каждого ПолеФильтра Из ОписаниеПолучаемыхДанных.ДополнительныеПоляФильтра Цикл
		ВыражениеПоля = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра(
			ПолеФильтра,
			ОписаниеИспользованияФильтра);
			
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоля, ПолеФильтра);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоля);
	КонецЦикла;			
	
	Если ОписаниеПолучаемыхДанных.ПолучатьВидВремени Тогда
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "ПодневныеДанныеУчетаВремени.ВидУчетаВремени", "ВидУчетаВремени");
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, "ПодневныеДанныеУчетаВремени.ВидУчетаВремени");
	КонецЕсли;	
	
	Если ОписаниеПолучаемыхДанных.ПолучатьЗарегистрированныеЧасы Тогда
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "СУММА(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение)", "ЗарегистрированоЧасов");
	КонецЕсли;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Для Каждого ЭлементПорядка Из ОписаниеПолучаемыхДанных.Порядок Цикл
		ОписаниеЗапроса.Порядок.Добавить(ЭлементПорядка);
	КонецЦикла;				
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;                                    
КонецФункции

Функция НовыйФильтрПолученияНормыВремени() Экспорт
	ФильтрПолученияНормыВремени = Новый ТаблицаЗначений;
	ФильтрПолученияНормыВремени.Колонки.Добавить("ИсточникДанныхНормыВремени", Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ГрафикиРаботыСотрудников"));
	ФильтрПолученияНормыВремени.Колонки.Добавить("ПериодРегистрацииНормыВремени", Новый ОписаниеТипов("Дата"));
	ФильтрПолученияНормыВремени.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	Возврат ФильтрПолученияНормыВремени; 
КонецФункции	

Функция НормаВремениПоИсточникамДанных(ТаблицаФильтр) Экспорт
	Если ТаблицаФильтр.Количество() = 0 Тогда
		Возврат НормаВремениПоИсточникамДанныхПустаяТаблица();
	КонецЕсли;	
	
	ТаблицаФильтр.Свернуть("ИсточникДанныхНормыВремени, ПериодРегистрацииНормыВремени, Месяц");
	
	ТаблицаФильтр.Колонки.Добавить("ГрафикПолногоРабочегоВремени", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ОтборОбщихГрафиков = Новый Массив;
	Для Каждого СтрокаТаблицыФильтра Из ТаблицаФильтр Цикл
		Если ТипЗнч(СтрокаТаблицыФильтра.ИсточникДанныхНормыВремени) = Тип("СправочникСсылка.ГрафикиРаботыСотрудников") Тогда
			ОтборОбщихГрафиков.Добавить(СтрокаТаблицыФильтра.ИсточникДанныхНормыВремени);
		КонецЕсли;
	КонецЦикла;
	
	ГрафикиПолногоВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОтборОбщихГрафиков, "ГрафикПолногоРабочегоВремени");
		
	Для Каждого СтрокаТаблицыФильтра Из ТаблицаФильтр Цикл
		СтрокаТаблицыФильтра.ГрафикПолногоРабочегоВремени = ГрафикиПолногоВремени[СтрокаТаблицыФильтра.ИсточникДанныхНормыВремени];		
	КонецЦикла;	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ГрафикиРаботыПоВидамВремени");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
							ТаблицаФильтр,,
							"ИсточникДанныхНормыВремени, ПериодРегистрацииНормыВремени, Месяц, ГрафикПолногоРабочегоВремени");
							
	ПриПолученииПодневныхДанныхУчетаВремени(ОписаниеФильтра, "ИсточникДанныхНормыВремени", "ПериодРегистрацииНормыВремени");						
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеПакета.Параметры.Вставить("РабочееВремя", Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя);
	
	ШаблонВложенногоЗапроса = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ИсточникДанныхНормыВремени,
	|	ГрафикиРаботыПоВидамВремени.ПериодРегистрации КАК ПериодРегистрацииНормыВремени,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма КАК НормаДней,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма КАК НормаЧасов,
	|	0 КАК НормаДнейПолная,
	|	0 КАК НормаЧасовПолная
	|ИЗ
	|	ВТИсточникиДанныхНормыВремени КАК ИсточникиДанныхНормыВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (&ФильтрИсточникДанныхНормыВремени_ = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (&ФильтрПериодРегистрацииНормыВремени_ = ГрафикиРаботыПоВидамВремени.ПериодРегистрации)
	|			И (&ФильтрМесяц_ = ГрафикиРаботыПоВидамВремени.Месяц)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсточникиДанныхНормыВремени.ИсточникДанныхНормыВремени,
	|	ГрафикиРаботыПоВидамВремени.ПериодРегистрации,
	|	ГрафикиРаботыПоВидамВремени.Месяц,
	|	0,
	|	0,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма
	|ИЗ
	|	ВТИсточникиДанныхНормыВремени КАК ИсточникиДанныхНормыВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (&ФильтрГрафикПолногоВремени_ = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (&ФильтрПериодРегистрацииНормыВремени_ = ГрафикиРаботыПоВидамВремени.ПериодРегистрации)
	|			И (&ФильтрГрафикПолногоВремени_ <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка))
	|			И (&ФильтрМесяц_ = ГрафикиРаботыПоВидамВремени.Месяц)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)";

		
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонВложенногоЗапроса);
	ОператорПолученияДанныхГрафика = ОписаниеЗапроса.Операторы[0];
	ОператорПолученияДанныхПолногоГрафика = ОписаниеЗапроса.Операторы[1];
	
	ОписаниеИспользованияФильтраДанныхГрафика = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИсточникиДанныхНормыВремени", "ГрафикиРаботыПоВидамВремени");
	ОписаниеИспользованияФильтраДанныхПолногоГрафика = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИсточникиДанныхНормыВремени", "ГрафикиРаботыПоВидамВремени");
	
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтраДанныхГрафика,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"",
		ОператорПолученияДанныхГрафика);
		
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтраДанныхПолногоГрафика,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"",
		ОператорПолученияДанныхПолногоГрафика);	
	
		
	ВыражениеПоляИсточникДанных = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ИсточникДанныхНормыВремени", ОписаниеИспользованияФильтраДанныхГрафика);	
	ВыражениеПоляПериодРегистрации = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ПериодРегистрацииНормыВремени", ОписаниеИспользованияФильтраДанныхГрафика);
	ВыражениеПоляМесяц = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтраДанныхГрафика);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, ВыражениеПоляИсточникДанных, "ИсточникДанныхНормыВремени", Ложь);
	
	ОписаниеИспользованияФильтраДанныхГрафика.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтраДанныхГрафика.ТекстШаблонаУсловийСвязи, "&ФильтрИсточникДанныхНормыВремени_", ВыражениеПоляИсточникДанных);
	ОписаниеИспользованияФильтраДанныхГрафика.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтраДанныхГрафика.ТекстШаблонаУсловийСвязи, "&ФильтрПериодРегистрацииНормыВремени_", ВыражениеПоляПериодРегистрации);
	ОписаниеИспользованияФильтраДанныхГрафика.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтраДанныхГрафика.ТекстШаблонаУсловийСвязи, "&ФильтрМесяц_", ВыражениеПоляМесяц);	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтраДанныхГрафика);
	
	Если ГрафикиПолногоВремени.Количество() > 0 Тогда
		ВыражениеПоляПолныйГрафик =  ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ГрафикПолногоРабочегоВремени", ОписаниеИспользованияФильтраДанныхПолногоГрафика);	
		ВыражениеПоляПериодРегистрации = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ПериодРегистрацииНормыВремени", ОписаниеИспользованияФильтраДанныхПолногоГрафика);
		ВыражениеПоляМесяц = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтраДанныхПолногоГрафика);
	
		ОписаниеИспользованияФильтраДанныхПолногоГрафика.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтраДанныхПолногоГрафика.ТекстШаблонаУсловийСвязи, "&ФильтрГрафикПолногоВремени_", ВыражениеПоляПолныйГрафик);
		ОписаниеИспользованияФильтраДанныхПолногоГрафика.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтраДанныхПолногоГрафика.ТекстШаблонаУсловийСвязи, "&ФильтрПериодРегистрацииНормыВремени_", ВыражениеПоляПериодРегистрации);
		ОписаниеИспользованияФильтраДанныхПолногоГрафика.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтраДанныхПолногоГрафика.ТекстШаблонаУсловийСвязи, "&ФильтрМесяц_", ВыражениеПоляМесяц);	
		
		ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтраДанныхПолногоГрафика);	
	Иначе
		ОписаниеЗапроса.Операторы.Удалить(1);
	КонецЕсли;
	
	ТекстВложенногоЗапроса = ЗарплатаКадрыПериодическиеРегистры.ТекстЗапросаПоОписанию(ОписаниеЗапроса);
	
	ШаблонВнешнегоЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ИсточникДанныхНормыВремени КАК ИсточникДанныхНормыВремени,
	|	ВложенныйЗапрос.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремени,
	|	ВложенныйЗапрос.Месяц КАК Месяц,
	|	СУММА(ВложенныйЗапрос.НормаДней) КАК НормаДней,
	|	СУММА(ВложенныйЗапрос.НормаЧасов) КАК НормаЧасов,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.НормаДнейПолная) = 0 ТОГДА СУММА(ВложенныйЗапрос.НормаДней) ИНАЧЕ СУММА(ВложенныйЗапрос.НормаДнейПолная) КОНЕЦ КАК НормаДнейПолная,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.НормаЧасовПолная) = 0 ТОГДА СУММА(ВложенныйЗапрос.НормаЧасов) ИНАЧЕ СУММА(ВложенныйЗапрос.НормаЧасовПолная) КОНЕЦ КАК НормаЧасовПолная
	|ИЗ
	|	ВТВложенныйЗапрос_ КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ИсточникДанныхНормыВремени,
	|	ВложенныйЗапрос.ПериодРегистрацииНормыВремени,                                                                                    
	|	ВложенныйЗапрос.Месяц";
	
	ОписаниеВнешнегоЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонВнешнегоЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеВнешнегоЗапроса);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВложенныйЗапрос_", "(" + ТекстВложенногоЗапроса + ")");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция НормаВремениПоИсточникамДанныхПустаяТаблица()
	 НормаВремени = Новый ТаблицаЗначений;
	 НормаВремени.Колонки.Добавить("ИсточникДанныхНормыВремени", Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ГрафикиРаботыСотрудников"));
	 НормаВремени.Колонки.Добавить("ПериодРегистрацииНормыВремени", Новый ОписаниеТипов("Дата"));
	 НормаВремени.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	 НормаВремени.Колонки.Добавить("НормаДней", Новый ОписаниеТипов("Число"));
	 НормаВремени.Колонки.Добавить("НормаЧасов", Новый ОписаниеТипов("Число"));
	 НормаВремени.Колонки.Добавить("НормаДнейПолная", Новый ОписаниеТипов("Число"));
	 НормаВремени.Колонки.Добавить("НормаЧасовПолная", Новый ОписаниеТипов("Число"));
	
	Возврат НормаВремени;	 
КонецФункции	

Функция ЗапросРабочееВремяПоИсточникамДанных(ИмяВТФильтр, ОписаниеТаблицыНаборовВидовВремени, ТребованияПолученияДанных, ПолучатьДетальныеЗаписиПоТерриторияУсловияТруда = Ложь)		
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();	
		
	ОписаниеПакета.Параметры.Вставить("РабочееВремя", Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя);
	
	ОписаниеПакета.Параметры.Вставить("Явка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	ОписаниеПакета.Параметры.Вставить("Сверхурочные", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	ОписаниеПакета.Параметры.Вставить("СверхурочныеБезПовышеннойОплаты", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты"));
	ОписаниеПакета.Параметры.Вставить("ОплачиваемыеНерабочиеДни", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни"));
	ОписаниеПакета.Параметры.Вставить("ВыделятьНерабочиеДниОтдельнымВидомВремени", УчетРабочегоВремениРасширенный.ВыделятьНерабочиеДниОтдельнымВидомВремени());
	
	
	ЗапросВТПраздники = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсходныхИсточниковДанных.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ПОМЕСТИТЬ ВТПраздники
	|ИЗ
	|	ВТТаблицаИсходныхИсточниковДанных КАК ТаблицаИсходныхИсточниковДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ТаблицаИсходныхИсточниковДанных.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(ТаблицаИсходныхИсточниковДанных.Месяц, МЕСЯЦ))
	|			И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
	|			И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = ТаблицаИсходныхИсточниковДанных.ПроизводственныйКалендарь";
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеОВремениПоДатам.ИсточникДанныхФактическогоВремени КАК ИсточникДанныхФактическогоВремени,
	|	ДанныеОВремениПоДатам.ПериодРегистрацииФактическогоВремени КАК ПериодРегистрацииФактическогоВремени,
	|	ДанныеОВремениПоДатам.ОбщийГрафик КАК ОбщийГрафик,
	|	ДанныеОВремениПоДатам.Месяц КАК Месяц,
	|	ДанныеОВремениПоДатам.ДатаНачала КАК ДатаНачала,
	|	ДанныеОВремениПоДатам.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеОВремениПоДатам.КлючНаборовВидовВремени КАК КлючНаборовВидовВремени,
	|	ДанныеОВремениПоДатам.УчитыватьТолькоПраздничныеДни КАК УчитыватьТолькоПраздничныеДни,
	|	ДанныеОВремениПоДатам.Территория КАК Территория,
	|	ДанныеОВремениПоДатам.УсловияТруда КАК УсловияТруда,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеОВремениПоДатам.ЗарегистрированоВремяПоНабору
	|				ТОГДА ДанныеОВремениПоДатам.Дней
	|			ИНАЧЕ ДанныеОВремениПоДатам.ДнейРабочееВремя
	|		КОНЕЦ) КАК Дней,
	|	МАКСИМУМ(ДанныеОВремениПоДатам.ВЦеломЗаПериод) КАК ВЦеломЗаПериод,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеОВремениПоДатам.ЗарегистрированоВремяПоНабору
	|				ТОГДА ДанныеОВремениПоДатам.Часов
	|			ИНАЧЕ ДанныеОВремениПоДатам.ЧасовРабочееВремя
	|		КОНЕЦ) КАК Часов,
	|	СУММА(ДанныеОВремениПоДатам.ОтработаноСмен) КАК ОтработаноСмен,
	|	СУММА(ДанныеОВремениПоДатам.ОтработаноСверхурочно) КАК ОтработаноСверхурочно,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеОВремениПоДатам.ОтработаноСверхурочно >= 2
	|				ТОГДА 2
	|			ИНАЧЕ ДанныеОВремениПоДатам.Часов
	|		КОНЕЦ) КАК ОтработаноСверхурочноВПределах2Часов,
	|	СУММА(ДанныеОВремениПоДатам.ДнейВключаемыхВНорму) КАК ДнейВключаемыхВНорму,
	|	СУММА(ДанныеОВремениПоДатам.ЧасовВключаемыхВНорму) КАК ЧасовВключаемыхВНорму,
	|	СУММА(ДанныеОВремениПоДатам.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ДанныеОВремениПоДатам.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	СУММА(ДанныеОВремениПоДатам.ВсегоДней) КАК ВсегоДней,
	|	СУММА(ДанныеОВремениПоДатам.ВсегоЧасов) КАК ВсегоЧасов,
	|	МАКСИМУМ(ДанныеОВремениПоДатам.ЗарегистрированыТерритории) КАК ЗарегистрированыТерритории,
	|	СУММА(ДанныеОВремениПоДатам.ДнейПлан) КАК ДнейПлан,
	|	СУММА(ДанныеОВремениПоДатам.ЧасовПлан) КАК ЧасовПлан
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИсходныхИсточниковДанных.ИсточникДанныхФактическогоВремени КАК ИсточникДанныхФактическогоВремени,
	|		ТаблицаИсходныхИсточниковДанных.ПериодРегистрацииФактическогоВремени КАК ПериодРегистрацииФактическогоВремени,
	|		ТаблицаИсходныхИсточниковДанных.ОбщийГрафик КАК ОбщийГрафик,
	|		ТаблицаИсходныхИсточниковДанных.Месяц КАК Месяц,
	|		ТаблицаИсходныхИсточниковДанных.ДатаНачала КАК ДатаНачала,
	|		ТаблицаИсходныхИсточниковДанных.ДатаОкончания КАК ДатаОкончания,
	|		ТаблицаИсходныхИсточниковДанных.КлючНаборовВидовВремени КАК КлючНаборовВидовВремени,
	|		ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни КАК УчитыватьТолькоПраздничныеДни,
	|		&ШаблонТерритория КАК Территория,
	|		&ШаблонТерриторияШаблонУсловияТруда КАК УсловияТруда,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|						ИЛИ &ВыделятьНерабочиеДниОтдельнымВидомВремени
	|							И НЕ ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни
	|							И ТаблицаНаборовВидовВремени.ВидВремени = &Явка
	|							И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ЗарегистрированоВремяПоНабору,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|						ИЛИ &ВыделятьНерабочиеДниОтдельнымВидомВремени
	|							И НЕ ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни
	|							И ТаблицаНаборовВидовВремени.ВидВремени = &Явка
	|							И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Дней,
	|		МАКСИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод, ЛОЖЬ)) КАК ВЦеломЗаПериод,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|						ИЛИ &ВыделятьНерабочиеДниОтдельнымВидомВремени
	|							И НЕ ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни
	|							И ТаблицаНаборовВидовВремени.ВидВремени = &Явка
	|							И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Часов,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.УчитыватьВремяВключаемоеВНорму
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДнейРабочееВремя,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.УчитыватьВремяВключаемоеВНорму
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ЧасовРабочееВремя,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьРабочееВремяВключаемоеВНорму
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДнейВключаемыхВНорму,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьРабочееВремяВключаемоеВНорму
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ЧасовВключаемыхВНорму,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьПлановоеВремя
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначениеНорма, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДнейПлан,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьПлановоеВремя
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначениеНорма, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ЧасовПлан,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьОтработанныеСмены
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОтработаноСмен,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьСверхурочныеЧасы
	|						И ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОтработаноСверхурочно,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьВсеРабочееВремя
	|						И (ОписаниеВидовВремени.РабочееВремя
	|							ИЛИ &ВыделятьНерабочиеДниОтдельнымВидомВремени
	|								И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни)
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОтработаноДней,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьВсеРабочееВремя
	|						И (ОписаниеВидовВремени.РабочееВремя
	|							ИЛИ &ВыделятьНерабочиеДниОтдельнымВидомВремени
	|								И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни)
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени <> &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОтработаноЧасов,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьВремяБезФильтрации
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени <> &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ВсегоДней,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ПолучатьВсеРабочееВремя
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени <> &РабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ВсегоЧасов,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаИсходныхИсточниковДанных.ИсточникДанныхФактическогоВремени ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК ЗарегистрированыТерритории
	|	ИЗ
	|		ВТТаблицаИсходныхИсточниковДанных КАК ТаблицаИсходныхИсточниковДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ПодневныеДанныеУчетаВремени
	|			ПО (ПодневныеДанныеУчетаВремени.ГрафикРаботы = ТаблицаИсходныхИсточниковДанных.ИсточникДанныхФактическогоВремени)
	|				И (ПодневныеДанныеУчетаВремени.Месяц = ТаблицаИсходныхИсточниковДанных.Месяц)
	|				И (ПодневныеДанныеУчетаВремени.ПериодРегистрации = ТаблицаИсходныхИсточниковДанных.ПериодРегистрацииФактическогоВремени)
	|				И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ ТаблицаИсходныхИсточниковДанных.ДатаНачала И ТаблицаИсходныхИсточниковДанных.ДатаОкончания
	|						И НЕ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|					ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|						И НЕ ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни)
	|				И (НЕ ПодневныеДанныеУчетаВремени.ВремяВЧасах)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеВидовВремени
	|			ПО (ТаблицаИсходныхИсточниковДанных.ПолучатьВсеРабочееВремя)
	|				И (ПодневныеДанныеУчетаВремени.ВидУчетаВремени = ОписаниеВидовВремени.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздники КАК ДанныеПроизводственногоКалендаря
	|			ПО ТаблицаИсходныхИсточниковДанных.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|				И (ДанныеПроизводственногоКалендаря.Дата = ВЫБОР
	|					КОГДА ПодневныеДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены
	|						ТОГДА ДОБАВИТЬКДАТЕ(ПодневныеДанныеУчетаВремени.Дата, ДЕНЬ, 1)
	|					ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|				КОНЕЦ)
	|				И (ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаНаборовВидовВремени КАК ТаблицаНаборовВидовВремени
	|			ПО (ТаблицаИсходныхИсточниковДанных.ФильтроватьВремяПоНабору)
	|				И (&КлючТаблицыНаборовВидовВремени = ТаблицаИсходныхИсточниковДанных.КлючНаборовВидовВремени)
	|				И (&ВидВремениТаблицыНаборовВидовВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|					ИЛИ &ВыделятьНерабочиеДниОтдельнымВидомВремени
	|						И &ВидВремениТаблицыНаборовВидовВремени = &Явка
	|						И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни)
	|	ГДЕ
	|		(НЕ ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни
	|				ИЛИ &УсловиеПраздничныйДень)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаИсходныхИсточниковДанных.ИсточникДанныхФактическогоВремени,
	|		ТаблицаИсходныхИсточниковДанных.ПериодРегистрацииФактическогоВремени,
	|		ТаблицаИсходныхИсточниковДанных.ОбщийГрафик,
	|		ТаблицаИсходныхИсточниковДанных.Месяц,
	|		ТаблицаИсходныхИсточниковДанных.ДатаНачала,
	|		ТаблицаИсходныхИсточниковДанных.ДатаОкончания,
	|		ТаблицаИсходныхИсточниковДанных.КлючНаборовВидовВремени,
	|		ТаблицаИсходныхИсточниковДанных.УчитыватьТолькоПраздничныеДни,
	|		ПодневныеДанныеУчетаВремени.Дата) КАК ДанныеОВремениПоДатам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВремениПоДатам.ИсточникДанныхФактическогоВремени,
	|	ДанныеОВремениПоДатам.ПериодРегистрацииФактическогоВремени,
	|	ДанныеОВремениПоДатам.ОбщийГрафик,
	|	ДанныеОВремениПоДатам.Месяц,
	|	ДанныеОВремениПоДатам.ДатаНачала,
	|	ДанныеОВремениПоДатам.ДатаОкончания,
	|	ДанныеОВремениПоДатам.КлючНаборовВидовВремени,
	|	ДанныеОВремениПоДатам.УчитыватьТолькоПраздничныеДни,
	|	ДанныеОВремениПоДатам.Территория,
	|	ДанныеОВремениПоДатам.УсловияТруда";
		
	ОписаниеЗапросаГруппировкиПоИнтервалам = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);	
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаГруппировкиПоИнтервалам);
	ОператорЗапросаГруппировкиПоПоИнтервалам  = ОписаниеЗапросаГруппировкиПоИнтервалам.Операторы[0];
		
	ОписаниеЗапросаДетальныхДанных = ЗарплатаКадрыПериодическиеРегистры.ОписаниеТаблицыЗапросаПоПсевдониму(ОператорЗапросаГруппировкиПоПоИнтервалам, "ДанныеОВремениПоДатам").ОписаниеЗапроса;
	ОператорЗапросаДетальныхДанных = ОписаниеЗапросаДетальныхДанных.Операторы[0];
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаДетальныхДанных, "ТаблицаНаборовВидовВремени", ОписаниеТаблицыНаборовВидовВремени.ИмяТаблицы);	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаДетальныхДанных, "ТаблицаИсходныхИсточниковДанных", ИмяВТФильтр);
		
	ИмяПоляКлючТаблицыНаборов = "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч;
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСоединения(ОператорЗапросаДетальныхДанных, "ТаблицаНаборовВидовВремени", "&КлючТаблицыНаборовВидовВремени", ИмяПоляКлючТаблицыНаборов);	
	ИмяПоляВидВремениТаблицыНаборов = "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляВидВремени;
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСоединения(ОператорЗапросаДетальныхДанных, "ТаблицаНаборовВидовВремени", "&ВидВремениТаблицыНаборовВидовВремени", ИмяПоляВидВремениТаблицыНаборов);	
		
	Если ТребованияПолученияДанных.ИспользуетсяЕдинственныйКалендарь
		И ТребованияПолученияДанных.УчитыватьПраздничныеДни Тогда

		ЗарплатаКадрыПериодическиеРегистры.УдалитьТаблицуИзОператораЗапроса(ОператорЗапросаДетальныхДанных, "ДанныеПроизводственногоКалендаря");
		ТекстУсловияПраздничныДень = "ВЫБОР
									|	КОГДА ПодневныеДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены
									|		ТОГДА ДОБАВИТЬКДАТЕ(ПодневныеДанныеУчетаВремени.Дата, ДЕНЬ, 1)
									|	ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
									|КОНЕЦ В (&ПраздничныеДниКалендаря)";
		ПраздничныеДниКалендаря = УчетРабочегоВремениРасширенный.ПраздничныеДниКалендаря(
										ТребованияПолученияДанных.Календарь,
										ТребованияПолученияДанных.ДатаНачалаПолученияПраздничныхДней, 
										ТребованияПолученияДанных.ДатаОкончанияПолученияПраздничныхДней);
		
		ОписаниеПакета.Параметры.Вставить("ПраздничныеДниКалендаря", ПраздничныеДниКалендаря);		
	ИначеЕсли Не ТребованияПолученияДанных.УчитыватьПраздничныеДни Тогда 	
		ЗарплатаКадрыПериодическиеРегистры.УдалитьТаблицуИзОператораЗапроса(ОператорЗапросаДетальныхДанных, "ДанныеПроизводственногоКалендаря");
		ТекстУсловияПраздничныДень = "ЛОЖЬ";
	Иначе
		ТекстУсловияПраздничныДень = "ВЫБОР
									|	КОГДА ПодневныеДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены
									|		ТОГДА ДОБАВИТЬКДАТЕ(ПодневныеДанныеУчетаВремени.Дата, ДЕНЬ, 1)
									|	ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
									|КОНЕЦ = ДанныеПроизводственногоКалендаря.Дата";	
		
		ОписаниеЗапросаВТПраздники = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ЗапросВТПраздники);	
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(
			ОписаниеЗапросаВТПраздники.Операторы[0], 
			"ТаблицаИсходныхИсточниковДанных", 
			ИмяВТФильтр);
		ОписаниеПакета.ЗапросыПолученияДанных.Вставить(0, ОписаниеЗапросаВТПраздники);
		ДобавитьВременныеТаблицыКУничтожению("ВТПраздники");
	КонецЕсли;		
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииЗапроса(ОператорЗапросаДетальныхДанных, "&УсловиеПраздничныйДень", ТекстУсловияПраздничныДень);

	Если ТребованияПолученияДанных.ПолучатьВсеРабочееВремя Тогда
		
		ТекстУсловияРабочееВремя = "ОписаниеВидовВремени.РабочееВремя";	
	Иначе
		ЗарплатаКадрыПериодическиеРегистры.УдалитьТаблицуИзОператораЗапроса(ОператорЗапросаДетальныхДанных, "ОписаниеВидовВремени");
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхДанных, 0, "0", "ОтработаноДней");
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхДанных, 0, "0", "ОтработаноЧасов");
		
		ТекстУсловияРабочееВремя = "ЛОЖЬ";
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииЗапроса(ОператорЗапросаДетальныхДанных, "&УсловиеРабочееВремя", ТекстУсловияРабочееВремя);
	
	Если ПолучатьДетальныеЗаписиПоТерриторияУсловияТруда Тогда
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхДанных, 0, "ЕСТЬNULL(ПодневныеДанныеУчетаВремени.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка))", "Территория");	
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаДетальныхДанных, "ЕСТЬNULL(ПодневныеДанныеУчетаВремени.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка))");
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхДанных, 0, "ЕСТЬNULL(ПодневныеДанныеУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка))", "УсловияТруда");	
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаДетальныхДанных, "ЕСТЬNULL(ПодневныеДанныеУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка))");
	Иначе
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхДанных, 0, "МАКСИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)))", "Территория");	
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхДанных, 0, "МАКСИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)))", "УсловияТруда");
			
		Выражение = 
		"ВЫБОР 
		|	КОГДА МИНИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка))) = МАКСИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)))
		|			И МИНИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка))) = МАКСИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)))
		|		ТОГДА ЛОЖЬ
		|	ИНАЧЕ ИСТИНА
		|КОНЕЦ";
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаДетальныхДанных, 0, Выражение, "РазныеТерриторииУсловияТрудаЗаДень");
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаГруппировкиПоИнтервалам, 0, "МАКСИМУМ(ДанныеОВремениПоДатам.РазныеТерриторииУсловияТрудаЗаДень)", "РазныеТерриторииУсловияТрудаЗаДень");			
	КонецЕсли;		
		
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	Возврат Запрос;
КонецФункции	

Функция НовыйТребованияПолученияЗарегистрированногоВремени()
	Требования = Новый Структура();
	Требования.Вставить("УчитыватьПраздничныеДни", Ложь);
	Требования.Вставить("ПолучатьВсеРабочееВремя", Ложь);
	Требования.Вставить("ПолучатьВремяБезФильтрации", Ложь);
	Требования.Вставить("ПриОтсутствииЗарегистрированныхДанныхПоучатьНорму", Ложь);
	Требования.Вставить("ПолучатьСверхурочныеЧасы", Ложь);
	Требования.Вставить("ИспользуетсяЕдинственныйКалендарь", Ложь);
	Требования.Вставить("Календарь");
	Требования.Вставить("ДатаНачалаПолученияПраздничныхДней", '00010101');
	Требования.Вставить("ДатаОкончанияПолученияПраздничныхДней", '00010101');
	
	Возврат Требования;
КонецФункции	
	
Функция СводныеТребованияПолученияЗарегистрированногоВремени(ТаблицаФильтр)
	Требования = НовыйТребованияПолученияЗарегистрированногоВремени();
	Требования.ИспользуетсяЕдинственныйКалендарь = Истина;
	Требования.ДатаНачалаПолученияПраздничныхДней = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
	Требования.ДатаОкончанияПолученияПраздничныхДней = '00010101';
	
	ПредыдущийКалендарь = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаФильтр Цикл
		Если ПредыдущийКалендарь <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.ПроизводственныйКалендарь)
			И ПредыдущийКалендарь <> СтрокаТаблицы.ПроизводственныйКалендарь Тогда
			
			Требования.ИспользуетсяЕдинственныйКалендарь = Ложь;
		КонецЕсли;
	
		Требования.Календарь = ?(ЗначениеЗаполнено(СтрокаТаблицы.ПроизводственныйКалендарь), СтрокаТаблицы.ПроизводственныйКалендарь, Требования.Календарь);
		Требования.ДатаНачалаПолученияПраздничныхДней = Мин(Требования.ДатаНачалаПолученияПраздничныхДней, СтрокаТаблицы.ДатаНачала);
		Требования.ДатаОкончанияПолученияПраздничныхДней = Макс(Требования.ДатаОкончанияПолученияПраздничныхДней, КонецДня(СтрокаТаблицы.ДатаОкончания) + 1);	
		
		ПолучатьСверхурочныеЧасы = СтрокаТаблицы.ПолучатьСверхурочныеЧасы;
		ПолучатьВремяБезФильтрации = СтрокаТаблицы.ПолучатьВремяБезФильтрации;
		ПолучатьВсеРабочееВремя  = СтрокаТаблицы.ПолучатьВсеРабочееВремя;
		ПриОтсутствииЗарегистрированныхДанныхПоучатьНорму = СтрокаТаблицы.УчитыватьВремяВключаемоеВНорму;
		УчитыватьПраздничныеДни = СтрокаТаблицы.УчитыватьТолькоПраздничныеДни;
		
		Требования.ПолучатьСверхурочныеЧасы = Макс(Требования.ПолучатьСверхурочныеЧасы, ПолучатьСверхурочныеЧасы);
		Требования.ПолучатьВремяБезФильтрации = Макс(Требования.ПолучатьВремяБезФильтрации, ПолучатьВремяБезФильтрации);
		Требования.ПолучатьВсеРабочееВремя = Макс(Требования.ПолучатьВсеРабочееВремя, ПолучатьВсеРабочееВремя);
		Требования.ПриОтсутствииЗарегистрированныхДанныхПоучатьНорму = Макс(Требования.ПриОтсутствииЗарегистрированныхДанныхПоучатьНорму, ПриОтсутствииЗарегистрированныхДанныхПоучатьНорму);
		Требования.УчитыватьПраздничныеДни = Макс(Требования.УчитыватьПраздничныеДни, УчитыватьПраздничныеДни); 
			
		ПредыдущийКалендарь = СтрокаТаблицы.ПроизводственныйКалендарь;	
	КонецЦикла;
	
	Возврат Требования;
КонецФункции	

Процедура ДополнитьТаблицуФильтраЗарегистрированногоВремени(ТаблицаФильтр)
	Если ТаблицаФильтр.Колонки.Найти("ПроизводственныйКалендарь") = Неопределено Тогда
		ТаблицаФильтр.Колонки.Добавить("ПроизводственныйКалендарь", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	КонецЕсли;	
	
	Если ТаблицаФильтр.Найти(Истина, "УчитыватьТолькоПраздничныеДни") = Неопределено Тогда
		Возврат		
	КонецЕсли;	
	
	ГрафикиОтбор = ТаблицаФильтр.ВыгрузитьКолонку("ОбщийГрафик");
	ГрафикиОтбор = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГрафикиОтбор);
	КалендариПоГрафикам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ГрафикиОтбор, "ПроизводственныйКалендарь");
	
	Для Каждого СтрокаТаблицыФильтра Из ТаблицаФильтр Цикл
		СтрокаТаблицыФильтра.ПроизводственныйКалендарь = КалендариПоГрафикам[СтрокаТаблицыФильтра.ОбщийГрафик];		
	КонецЦикла;
КонецПроцедуры

Функция НовыйИсточникиДанныхУчетаВремени()
	ИсточникиДанныхУчетаВремени = Новый ТаблицаЗначений;
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("Сотрудник");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("Месяц");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ДатаНачала");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ДатаОкончания");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ОбщийГрафик");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ИсточникДанныхФактическогоВремени");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ИсточникДанныхНормыВремени");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ПериодРегистрацииФактическогоВремени");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ПериодРегистрацииНормыВремени");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("ВремяВведеноСводно");
	ИсточникиДанныхУчетаВремени.Колонки.Добавить("СуммированныйУчетРабочегоВремени");
	
	Возврат ИсточникиДанныхУчетаВремени;
КонецФункции	

Функция ПараметрыЗарегистрированныхДанныхУчетаВремени(ОписаниеФильтра)
	Запрос = ЗапросВТПараметрыЗарегистрированныхДанныхУчетаВремени(ОписаниеФильтра, Ложь, Ложь);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ЗапросВТПараметрыЗарегистрированныхДанныхУчетаВремени(ОписаниеФильтра, СоздаватьВременнуюТаблицу, ПолучатьВсеЗаписи)		
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеПакета.Параметры.Вставить("ВидыДанныхВытесняющиеСводноеВремя", УчетРабочегоВремениРасширенный.ВидыДанныхВытесняющиеСводноеВремя());
	ОписаниеПакета.Параметры.Вставить("ДатаАктуальности", ДатаАктуальности);
	
	ШаблонТекстаЗапроса =  
	"ВЫБРАТЬ
	|	&ШаблонИзмерения КАК ШаблонИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодРегистрации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЗарегистрированыИндивидуальныеСведенияОНорме,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Месяц ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЗарегистрированыИндивидуальныеСведения,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВЫБОР
	|					КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)
	|						ТОГДА 1
	|					КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ВидДанных В (&ВидыДанныхВытесняющиеСводноеВремя)
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВремяВведеноСводно,
	|	&ШаблонФильтрДатаОкончания КАК ШаблонФильтрДатаОкончания
	|ПОМЕСТИТЬ ВТПараметрыЗарегистрированныхДанныхУчетаВремени
	|ИЗ
	|	ВТИсходныйНаборСотрудникиМесяцы КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников
	|		ПО (ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Месяц МЕЖДУ &ФильтрДатаНачалаПриведенная_ И &ФильтрДатаОкончанияПриведенная_)
	|			И (ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ПериодРегистрации <= &ДатаАктуальности)";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	Если Не СоздаватьВременнуюТаблицу Тогда
		ОписаниеЗапроса.ТаблицаДляПомещения = "";
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников");
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИзмеренияДаты", "ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса,
		"ПараметрыДанныхУчетаВремени",
		ПолучатьВсеЗаписи);
		
	ФильтрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаПриведенная");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончания");
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");
	
	ФильтрДатаНачалаПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
	ФильтрДатаОкончанияПриведенная.Кратность = "МЕСЯЦ";
	ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаНачалаПриведенная);
			
	ИзмеренияРегистра = Новый Массив;                                   
	ИзмеренияРегистра.Добавить("Сотрудник");
	ИзмеренияРегистра.Добавить("Месяц");
	
	Для Каждого Измерение Из ИзмеренияРегистра Цикл
		Если ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено И ПолучатьВсеЗаписи Тогда 
			ВыражениеИзмерения = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, Измерение);
		Иначе
			ВыражениеИзмерения = "ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников." + Измерение;
		КонецЕсли;
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеИзмерения, Измерение, Ложь);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеИзмерения);	
	КонецЦикла;	
	
	ВыражениеПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаОкончания, "ДатаОкончания", Ложь);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыражениеПоляДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Возврат Запрос;
КонецФункции	

#Область МетодыИнициализации

Процедура УстановитьОписаниеНабораСотрудников(ИмяТаблицы, ИмяПоляСотрудник, ИмяПоляДатаНачала, ИмяПоляДатаОкончания)
	ОписаниеНабораСотрудников = УчетРабочегоВремениРасширенный.ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных();
	
	ОписаниеНабораСотрудников.ТипИсточникаДанных = Тип("МенеджерВременныхТаблиц");
	ОписаниеНабораСотрудников.ТаблицаИсточникДанных = ИмяТаблицы;
	ОписаниеНабораСотрудников.ИмяПоляСотрудник = ИмяПоляСотрудник;
	ОписаниеНабораСотрудников.ИмяПоляДатаНачала = ИмяПоляДатаНачала;
	ОписаниеНабораСотрудников.ИмяПоляДатаОкончания = ИмяПоляДатаОкончания;	
КонецПроцедуры	
	
Функция ОписаниеИсходногоНабораСотрудников()
	ОписаниеИсходногоНабора = Новый Структура;
	ОписаниеИсходногоНабора.Вставить("ТаблицаИсточникДанных");
	ОписаниеИсходногоНабора.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеИсходногоНабора.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеИсходногоНабора.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	
	Возврат ОписаниеИсходногоНабора;
КонецФункции	

Процедура УстановитьДатуАктуальности(УстанавливаемаяДата) Экспорт
	ДатаАктуальности = УстанавливаемаяДата;
КонецПроцедуры	

Процедура УстановитьМенеджерВременныхТаблиц(УстанавливаемыйМенеджерВременныхТаблиц) Экспорт
	МенеджерВременныхТаблиц = УстанавливаемыйМенеджерВременныхТаблиц;
КонецПроцедуры	

Процедура УстановитьИсходныйНаборСотрудников(ОписаниеИсходногоНабора) Экспорт
	РежимПовторногоИспользованияВременныхТаблиц = Истина;
	
	Если ОписаниеИсходногоНабора.ТипИсточникаДанных = Тип("МенеджерВременныхТаблиц") Тогда
		УстановитьИсходныйНаборСотрудниковПоВременнойТаблице(ОписаниеИсходногоНабора);	
	Иначе
		УстановитьИсходныйНаборСотрудниковПоТаблицеЗначений(ОписаниеИсходногоНабора);	
	КонецЕсли;	
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры	

Процедура УстановитьИсходныйНаборСотрудниковПоТаблицеЗначений(ОписаниеИсходногоНабора)
	Запрос = СоздатьЗапрос();
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ОписаниеИсходногоНабора.ТаблицаИсточникДанных);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.ДатаНачала КАК ДатаНачала,
	|	ТаблицаСотрудников.ДатаОкончания КАК ДатаОкончания 
	|ПОМЕСТИТЬ ВТИсходныйНаборСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСотрудников.Сотрудник", ОписаниеИсходногоНабора.ИмяПоляСотрудник); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСотрудников.ДатаНачала", ОписаниеИсходногоНабора.ИмяПоляДатаНачала); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСотрудников.ДатаОкончания", ОписаниеИсходногоНабора.ИмяПоляДатаОкончания); 

	Запрос.Выполнить();
		
	ДобавитьВременныеТаблицыКУничтожению("ВТИсходныйНаборСотрудников");
	
	ОписаниеИсходногоНабораВТ = ОписаниеИсходногоНабораСотрудников();
	ОписаниеИсходногоНабораВТ.ТаблицаИсточникДанных = "ВТИсходныйНаборСотрудников";
	
	УстановитьИсходныйНаборСотрудниковПоВременнойТаблице(ОписаниеИсходногоНабораВТ);	
	
	УничтожитьВременныеТаблицы();
КонецПроцедуры

Процедура УстановитьИсходныйНаборСотрудниковПоВременнойТаблице(ОписаниеИсходногоНабора)
	Если ВременнаяТаблицаИнициализирована(ВТИсходныйНаборСотрудникиМесяцы) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = СоздатьЗапрос();
	
	ДатаНачала = '00010101';
	ДатаОкончания = '00010101';
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ИсходныйНаборСотрудников.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ИсходныйНаборСотрудников.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	ВТИсходныйНаборСотрудников КАК ИсходныйНаборСотрудников";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходныйНаборСотрудников", ОписаниеИсходногоНабора.ТаблицаИсточникДанных); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныйНаборСотрудников.ДатаНачала", ОписаниеИсходногоНабора.ИмяПоляДатаНачала); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныйНаборСотрудников.ДатаОкончания", ОписаниеИсходногоНабора.ИмяПоляДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ДатаНачала) Тогда
			ДатаНачала = Выборка.ДатаНачала;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
			ДатаОкончания = Выборка.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоМесяца(ДатаНачала), НачалоМесяца(ДатаОкончания), "МЕСЯЦ", "Месяц", "УчетВремени_ВТМесяцы");
	
	ДобавитьВременныеТаблицыКУничтожению("УчетВремени_ВТМесяцы");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныйНаборСотрудников.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Месяцы.Месяц < ИсходныйНаборСотрудников.ДатаНачала
	|				ТОГДА ИсходныйНаборСотрудников.ДатаНачала
	|			ИНАЧЕ Месяцы.Месяц
	|		КОНЕЦ) КАК ДатаНачала,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ) > ИсходныйНаборСотрудников.ДатаОкончания
	|				ТОГДА ИсходныйНаборСотрудников.ДатаОкончания
	|			ИНАЧЕ КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	|		КОНЕЦ) КАК ДатаОкончания,
	|	Месяцы.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТИсходныйНаборСотрудникиМесяцы
	|ИЗ
	|	ВТИсходныйНаборСотрудников КАК ИсходныйНаборСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетВремени_ВТМесяцы КАК Месяцы
	|		ПО (Месяцы.Месяц МЕЖДУ НАЧАЛОПЕРИОДА(ИсходныйНаборСотрудников.ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(ИсходныйНаборСотрудников.ДатаОкончания, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныйНаборСотрудников.Сотрудник,
	|	Месяцы.Месяц";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходныйНаборСотрудников", ОписаниеИсходногоНабора.ТаблицаИсточникДанных); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныйНаборСотрудников.Сотрудник", ОписаниеИсходногоНабора.ИмяПоляСотрудник); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныйНаборСотрудников.ДатаНачала", ОписаниеИсходногоНабора.ИмяПоляДатаНачала); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныйНаборСотрудников.ДатаОкончания", ОписаниеИсходногоНабора.ИмяПоляДатаОкончания); 
	
	Запрос.Выполнить();
	
	УстановитьПризнакИнициализированностиВременнойТаблицы(ВТИсходныйНаборСотрудникиМесяцы, ВТИсходныйНаборСотрудникиМесяцы);
КонецПроцедуры

#КонецОбласти

#Область СозданиеВспомогательныхВременныхТаблиц

Процедура СоздатьВТИсточникиДанныхУчетаВремени() Экспорт
	Если ВременнаяТаблицаИнициализирована(ВТИсточникиДанныхУчетаВремени) Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьВТГрафикРаботыСотрудников();
	СоздатьВТПараметрыЗарегистрированныхДанныхУчетаВремени();
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Сотрудник,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц,
	|	ГрафикРаботыСотрудников.Период,
	|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ОбщийГрафик,
	|	ВЫБОР
	|		КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.ЗарегистрированыИндивидуальныеСведения
	|			ТОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|		ИНАЧЕ ГрафикРаботыСотрудников.ГрафикРаботы
	|	КОНЕЦ КАК ИсточникДанныхФактическогоВремени,
	|	ВЫБОР
	|		КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.ЗарегистрированыИндивидуальныеСведенияОНорме
	|			ТОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|		ИНАЧЕ ГрафикРаботыСотрудников.ГрафикРаботы
	|	КОНЕЦ КАК ИсточникДанныхНормыВремени,
	|	ВЫБОР
	|		КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.ЗарегистрированыИндивидуальныеСведения
	|			ТОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодРегистрацииФактическогоВремени,
	|	ВЫБОР
	|		КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.ЗарегистрированыИндивидуальныеСведенияОНорме
	|			ТОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодРегистрацииНормыВремени,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ВремяВведеноСводно,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.ПериодЗаписи, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СобытиеИзменение,
	|	СвойстваГрафиков.ПроизводственныйКалендарь,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.ЗарегистрированыИндивидуальныеСведенияОНорме
	|			ТОГДА ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|		КОГДА СвойстваГрафиков.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА СвойстваГрафиков.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ ГрафикРаботыСотрудников.ГрафикРаботы
	|	КОНЕЦ КАК ИсточникДанныхПолнойНормыВремени,
	|	СвойстваГрафиков.СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТИсточникиДанныхУчетаВремени
	|ИЗ
	|	УчетВремени_ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыЗарегистрированныхДанныхУчетаВремени КАК ПараметрыЗарегистрированныхДанныхУчетаВремени
	|		ПО ГрафикРаботыСотрудников.Сотрудник = ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.Период, МЕСЯЦ) = ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК СвойстваГрафиков
	|		ПО ГрафикРаботыСотрудников.ГрафикРаботы = СвойстваГрафиков.Ссылка";
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТПараметрыЗарегистрированныхДанныхУчетаВремени");
	
	УстановитьПризнакИнициализированностиВременнойТаблицы(ВТИсточникиДанныхУчетаВремени, ВТИсточникиДанныхУчетаВремени);
КонецПроцедуры	

Процедура СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная()
	Если ВременнаяТаблицаИнициализирована(ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная) Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьВТИсточникиДанныхУчетаВремени();
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникиДанныхУчетаВремени.Сотрудник,
	|	ИсточникиДанныхУчетаВремени.Месяц,
	|	ИсточникиДанныхУчетаВремени.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ИсточникиДанныхУчетаВремениСлед.Период ЕСТЬ NULL 
	|				ТОГДА ИсточникиДанныхУчетаВремени.ДатаОкончания
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ИсточникиДанныхУчетаВремениСлед.Период, СЕКУНДА, -1)
	|		КОНЕЦ) КАК ДатаОкончания,
	|	ИсточникиДанныхУчетаВремени.ОбщийГрафик,
	|	ИсточникиДанныхУчетаВремени.ИсточникДанныхФактическогоВремени,
	|	ИсточникиДанныхУчетаВремени.ИсточникДанныхНормыВремени,
	|	ИсточникиДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени,
	|	ИсточникиДанныхУчетаВремени.ПериодРегистрацииНормыВремени,
	|	ИсточникиДанныхУчетаВремени.ВремяВведеноСводно,
	|	ИсточникиДанныхУчетаВремени.ПроизводственныйКалендарь,
	|	ИсточникиДанныхУчетаВремени.ИсточникДанныхПолнойНормыВремени,
	|	ИсточникиДанныхУчетаВремени.СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная
	|ИЗ
	|	ВТИсточникиДанныхУчетаВремени КАК ИсточникиДанныхУчетаВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсточникиДанныхУчетаВремени КАК ИсточникиДанныхУчетаВремениСлед
	|		ПО ИсточникиДанныхУчетаВремени.Сотрудник = ИсточникиДанныхУчетаВремениСлед.Сотрудник
	|			И ИсточникиДанныхУчетаВремени.Месяц = ИсточникиДанныхУчетаВремениСлед.Месяц
	|			И ИсточникиДанныхУчетаВремени.Период < ИсточникиДанныхУчетаВремениСлед.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиДанныхУчетаВремени.Сотрудник,
	|	ИсточникиДанныхУчетаВремени.Месяц,
	|	ИсточникиДанныхУчетаВремени.Период,
	|	ИсточникиДанныхУчетаВремени.ОбщийГрафик,
	|	ИсточникиДанныхУчетаВремени.ИсточникДанныхФактическогоВремени,
	|	ИсточникиДанныхУчетаВремени.ИсточникДанныхНормыВремени,
	|	ИсточникиДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени,
	|	ИсточникиДанныхУчетаВремени.ПериодРегистрацииНормыВремени,
	|	ИсточникиДанныхУчетаВремени.ВремяВведеноСводно,
	|	ИсточникиДанныхУчетаВремени.ПроизводственныйКалендарь,
	|	ИсточникиДанныхУчетаВремени.ИсточникДанныхПолнойНормыВремени,
	|	ИсточникиДанныхУчетаВремени.СуммированныйУчетРабочегоВремени";
	
	Запрос.Выполнить();
	
	УстановитьПризнакИнициализированностиВременнойТаблицы(ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная, ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная);
КонецПроцедуры	

Процедура СоздатьВТГрафикРаботыСотрудников()
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьИсходныйНаборСотрудниковПоВременнойТаблице(ОписаниеНабораСотрудников);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныйНаборСотрудникиМесяцы", "Сотрудник");
	
	ПараметрыПолученияДанных = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПолученияДанных.ВключатьЗаписиНаНачалоПериода = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников", 
		МенеджерВременныхТаблиц, 
		Ложь, 
		ОписаниеФильтра,
		ПараметрыПолученияДанных,
		"УчетВремени_ВТГрафикРаботыСотрудников");
		
	ДобавитьВременныеТаблицыКУничтожению("УчетВремени_ВТГрафикРаботыСотрудников");	
КонецПроцедуры	

Процедура СоздатьВТПараметрыЗарегистрированныхДанныхУчетаВремени()
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьИсходныйНаборСотрудниковПоВременнойТаблице(ОписаниеНабораСотрудников);
	КонецЕсли;	
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице("ВТИсходныйНаборСотрудникиМесяцы", "Сотрудник, Месяц");
	
	Запрос = ЗапросВТПараметрыЗарегистрированныхДанныхУчетаВремени(ОписаниеФильтра, Истина, Истина);	
	Запрос.Выполнить();
КонецПроцедуры	

Функция ПараметрыПостроенияЗапросаВТЗарегистрированныеНаборовВидовВремениСлужебная()
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ИспользоватьСвязьПоКлючуНаборов", Ложь);
	ПараметрыПостроения.Вставить("ИспользоватьУсловиеЗарегистрированыЧасы", Ложь);
	ПараметрыПостроения.Вставить("ИмяВТРезультат", "");
	
	Возврат ПараметрыПостроения;	
КонецФункции	

Процедура СоздатьВТЗарегистрированныеНаборыВидовВремениСлужебная(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ПараметрыПостроенияЗапроса) Экспорт
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		УстановитьОписаниеНабораСотрудников(ОписаниеТаблицыФильтра.ИмяТаблицы, ОписаниеТаблицыФильтра.ИмяПоляСотрудник, ОписаниеТаблицыФильтра.ИмяПоляДатаНачала, ОписаниеТаблицыФильтра.ИмяПоляДатаОкончания);
	КонецЕсли;
	
	СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная();
	СоздатьВТПодневныеДанныеУчетаВремениПоИнициализированнымДанным();
	
	СоздатьВТПериодыПолученияВидовВремениПоИсточникамДанных(ОписаниеТаблицыФильтра);	
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыПолученияДанныхПоИсточникамДанных.Сотрудник,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных КАК ДатаНачала,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИсходногоПериодаПолученияДанных КАК ДатаОкончания,
	|	ТаблицаНаборовВидовВремени.Ключ КАК КлючНабораВидовВремени
	|ПОМЕСТИТЬ ВТНаличиеЗарегистрированныхНаборовВидовВремени
	|ИЗ
	|	ВТПериодыПолученияВидовВремениПоИсточникамДанных КАК ДатыПолученияДанныхПоИсточникамДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНаборовВидовВремени КАК ТаблицаНаборовВидовВремени
	|		ПО (&УсловиеСвязиПоКлючуНаборов)
	|			И (1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					ВТПодневныеДанныеУчетаВремени КАК ПодневныеДанныеУчетаВремени
	|				ГДЕ
	|					ПодневныеДанныеУчетаВремени.ИсточникДанных = ДатыПолученияДанныхПоИсточникамДанных.ИсточникДанныхФактическогоВремени
	|					И ПодневныеДанныеУчетаВремени.ОбщийГрафик = ДатыПолученияДанныхПоИсточникамДанных.ОбщийГрафик
	|					И ПодневныеДанныеУчетаВремени.ПериодРегистрации = ДатыПолученияДанныхПоИсточникамДанных.ПериодРегистрацииФактическогоВремени
	|					И ПодневныеДанныеУчетаВремени.Месяц = ДатыПолученияДанныхПоИсточникамДанных.Месяц
	|					И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = ТаблицаНаборовВидовВремени.ВидВремени
	|					И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИнтервалаПоиска И ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИнтервалаПоиска
	|							И НЕ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|						ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|							И НЕ ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники)
	|					И (ПодневныеДанныеУчетаВремени.Праздник = ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники
	|						ИЛИ НЕ ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники)
	|					И &УсловиеВремяВЧасах))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодневныеДанныеУчетаВремени", ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));
	
	УстановитьПоляОписанияНаборовВидовВремениВЗапрос(Запрос.Текст, ОписаниеТаблицыНаборовВидовВремени);
	
	Если ПараметрыПостроенияЗапроса.ИспользоватьСвязьПоКлючуНаборов Тогда
		УсловиеСвязиПоКлючуНаборовВидовВремени = "ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени = ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч;
	Иначе                                                      	
		УсловиеСвязиПоКлючуНаборовВидовВремени = "ИСТИНА";
	КонецЕсли;	
	
	Если ПараметрыПостроенияЗапроса.ИспользоватьУсловиеЗарегистрированыЧасы Тогда
		ТекстУсловияТолькоВремяВЧасах = "ПодневныеДанныеУчетаВремени.ДополнительноеЗначение > 0";
	Иначе
		ТекстУсловияТолькоВремяВЧасах = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВремяВЧасах", ТекстУсловияТолькоВремяВЧасах);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСвязиПоКлючуНаборов", УсловиеСвязиПоКлючуНаборовВидовВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНаличиеЗарегистрированныхНаборовВидовВремени", ПараметрыПостроенияЗапроса.ИмяВТРезультат);

	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТПериодыПолученияВидовВремениПоИсточникамДанных");
КонецПроцедуры	
	
Функция ПараметрыПостроенияЗапросаВТДатыРегистрацииНаборовВидовВремениСлужебная()
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("УчитыватьВыходныеДни", Ложь);
	ПараметрыПостроения.Вставить("ИмяВТРезультат", "");
	
	Возврат ПараметрыПостроения;	
КонецФункции	

Процедура СоздатьВТДатыРегистрацииНаборовВидовВремениСлужебная(ОписаниеТаблицыФильтра, ОписаниеТаблицыНаборовВидовВремени, ПараметрыПостроенияЗапроса)
	СоздатьВТПодневныеДанныеУчетаВремениПоИнициализированнымДанным();
		
	СоздатьВТПериодыПолученияВидовВремениПоИсточникамДанных(ОписаниеТаблицыФильтра);
	
	ВидВремениВыходной = Справочники.ВидыИспользованияРабочегоВремени.ВыходныеДни;
	
	Запрос = СоздатьЗапрос();
	Запрос.УстановитьПараметр("Выходной", ВидВремениВыходной);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыПолученияДанныхПоИсточникамДанных.Сотрудник,
	|	ДатыПолученияДанныхПоИсточникамДанных.Месяц,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных КАК ДатаНачала,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИсходногоПериодаПолученияДанных КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|			ТОГДА ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных
	|		ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|	КОНЕЦ КАК Дата,
	|	ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПодневныеДанныеУчетаВремени.ДополнительноеЗначение = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ВремяВЧасах,
	|	МАКСИМУМ(ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод) КАК ВЦеломЗаПериод,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &Выходной
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЭтоВыходнойДень
	|ПОМЕСТИТЬ ВТДатыРегистрацииНаборовВидовВремениСлужебная
	|ИЗ
	|	ВТПериодыПолученияВидовВремениПоИсточникамДанных КАК ДатыПолученияДанныхПоИсточникамДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНаборовВидовВремени КАК ТаблицаНаборовВидовВремени
	|		ПО ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени = ТаблицаНаборовВидовВремени.Ключ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодневныеДанныеУчетаВремени КАК ПодневныеДанныеУчетаВремени
	|		ПО (ПодневныеДанныеУчетаВремени.ИсточникДанных = ДатыПолученияДанныхПоИсточникамДанных.ИсточникДанныхФактическогоВремени)
	|			И (ПодневныеДанныеУчетаВремени.ОбщийГрафик = ДатыПолученияДанныхПоИсточникамДанных.ОбщийГрафик)
	|			И (ПодневныеДанныеУчетаВремени.ПериодРегистрации = ДатыПолученияДанныхПоИсточникамДанных.ПериодРегистрацииФактическогоВремени)
	|			И (ПодневныеДанныеУчетаВремени.Месяц = ДатыПолученияДанныхПоИсточникамДанных.Месяц)
	|			И (&УсловиеВидВремени)
	|			И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИнтервалаПоиска И ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИнтервалаПоиска
	|					И НЕ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|				ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|					И НЕ ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники)
	|			И (ПодневныеДанныеУчетаВремени.Праздник = ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники
	|				ИЛИ НЕ ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПолученияДанныхПоИсточникамДанных.Сотрудник,
	|	ДатыПолученияДанныхПоИсточникамДанных.Месяц,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных,
	|	ДатыПолученияДанныхПоИсточникамДанных.ДатаОкончанияИсходногоПериодаПолученияДанных,
	|	ДатыПолученияДанныхПоИсточникамДанных.КлючНабораВидовВремени,
	|	ВЫБОР
	|		КОГДА ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|			ТОГДА ДатыПолученияДанныхПоИсточникамДанных.ДатаНачалаИсходногоПериодаПолученияДанных
	|		ИНАЧЕ ПодневныеДанныеУчетаВремени.Дата
	|	КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодневныеДанныеУчетаВремени", ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));
		
	УстановитьПоляОписанияНаборовВидовВремениВЗапрос(Запрос.Текст, ОписаниеТаблицыНаборовВидовВремени);
	
	Если ПараметрыПостроенияЗапроса.УчитыватьВыходныеДни Тогда
		ТекстУсловияВидВремени = "(ПодневныеДанныеУчетаВремени.ВидУчетаВремени = ТаблицаНаборовВидовВремени.ВидВремени ИЛИ ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &Выходной)";
	Иначе
		ТекстУсловияВидВремени = "ПодневныеДанныеУчетаВремени.ВидУчетаВремени = ТаблицаНаборовВидовВремени.ВидВремени";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВидВремени", ТекстУсловияВидВремени);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыРегистрацииНаборовВидовВремениСлужебная", ПараметрыПостроенияЗапроса.ИмяВТРезультат);
	
	ДобавитьВременныеТаблицыКУничтожению("ВТПериодыПолученияВидовВремениПоИсточникамДанных");
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПериодыПолученияВидовВремениПоИсточникамДанных(ОписаниеТаблицыФильтра)
	СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная();
	
	Запрос = СоздатьЗапрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник,
	|	ТаблицаФильтр.КлючНабораВидовВремени КАК КлючНабораВидовВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхФактическогоВремени,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремени.ОбщийГрафик,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремени.Месяц,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени,
	|	ВЫБОР
	|		КОГДА ТаблицаФильтр.ДатаНачала < ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала
	|			ТОГДА ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала
	|		ИНАЧЕ ТаблицаФильтр.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаИнтервалаПоиска,
	|	ВЫБОР
	|		КОГДА ТаблицаФильтр.ДатаОкончания > ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания
	|			ТОГДА ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания
	|		ИНАЧЕ ТаблицаФильтр.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияИнтервалаПоиска,
	|	ТаблицаФильтр.ДатаНачала КАК ДатаНачалаИсходногоПериодаПолученияДанных,
	|	ТаблицаФильтр.ДатаОкончания КАК ДатаОкончанияИсходногоПериодаПолученияДанных,
	|	ИнтервалыДействияИсточниковДанныхУчетаВремени.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТПериодыПолученияВидовВремениПоИсточникамДанных
	|ИЗ
	|	ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная КАК ИнтервалыДействияИсточниковДанныхУчетаВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ПО ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник = ТаблицаФильтр.Сотрудник
	|			И (ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала МЕЖДУ ТаблицаФильтр.ДатаНачала И ТаблицаФильтр.ДатаОкончания
	|				ИЛИ ТаблицаФильтр.ДатаНачала МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания)
	|			И (&УсловиеОтбораТаблицыИсточникаДанных)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеТаблицыФильтра.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ДатаНачала", "ТаблицаФильтр." + ОписаниеТаблицыФильтра.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ДатаОкончания", "ТаблицаФильтр." + ОписаниеТаблицыФильтра.ИмяПоляДатаОкончания);
	
	Если ОписаниеТаблицыФильтра.Свойство("ИмяПоляКлючНабораВидовВремени") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.КлючНабораВидовВремени", "ТаблицаФильтр." + ОписаниеТаблицыФильтра.ИмяПоляКлючНабораВидовВремени);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.КлючНабораВидовВремени", "ИСТИНА");
	КонецЕсли;
	
	Если ОписаниеТаблицыФильтра.Свойство("Отбор") Тогда
		Отбор = ОписаниеТаблицыФильтра.Отбор;
	Иначе
		Отбор = Новый Массив;
	КонецЕсли;	
	
	УстановитьУсловияОтбораВЗапрос(Запрос, Отбор, "ТаблицаФильтр");
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТПодневныеДанныеУчетаВремениПоИнициализированнымДанным()
	Если ВременнаяТаблицаИнициализирована(ВТПодневныеДанныеУчетаВремени) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВТИсточникиДанныхУчетаВремени();
	
	Запрос = СоздатьЗапрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхУчетаВремени.Месяц,
	|	ИсточникиДанныхУчетаВремени.ИсточникДанныхФактическогоВремени КАК ИсточникДанных,
	|	ИсточникиДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени КАК ПериодРегистрации,
	|	ИсточникиДанныхУчетаВремени.ОбщийГрафик,
	|	ЕСТЬNULL(ИсточникиДанныхУчетаВремени.ПроизводственныйКалендарь, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТРазличныеИсточникиДанных
	|ИЗ
	|	ВТИсточникиДанныхУчетаВремени КАК ИсточникиДанныхУчетаВремени";
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТРазличныеИсточникиДанных");
	
	ОписаниеТаблицыИсточниковДанных = ОписаниеТаблицыИсточниковДанных();
	ОписаниеТаблицыИсточниковДанных.ИмяТаблицы = "ВТРазличныеИсточникиДанных";
	ОписаниеТаблицыИсточниковДанных.ИмяПоляМесяц = "Месяц";
	ОписаниеТаблицыИсточниковДанных.ИмяПоляИсточникДанных = "ИсточникДанных";
	ОписаниеТаблицыИсточниковДанных.ИмяПоляПериодРегистрацииВремени = "ПериодРегистрации";
	ОписаниеТаблицыИсточниковДанных.ИмяПоляОбщийГрафик = "ОбщийГрафик";
	
	СоздатьВТПодневныеДанныеУчетаВремени(ОписаниеТаблицыИсточниковДанных);
	
КонецПроцедуры

Функция ОписаниеТаблицыИсточниковДанных()
	ОписаниеТаблицы = Новый Структура();
	ОписаниеТаблицы.Вставить("ИмяТаблицы");
	ОписаниеТаблицы.Вставить("ИмяПоляМесяц", "Месяц");
	ОписаниеТаблицы.Вставить("ИмяПоляИсточникДанных");
	ОписаниеТаблицы.Вставить("ИмяПоляПериодРегистрацииВремени");
	ОписаниеТаблицы.Вставить("ИмяПоляОбщийГрафик");
	
	ОписаниеТаблицы.Вставить("Отбор", Новый Массив);
	
	
	Возврат ОписаниеТаблицы;
КонецФункции

Процедура СоздатьВТПодневныеДанныеУчетаВремени(ОписаниеТаблицыИсточниковДанных)
	СоздатьВТИсточникиФактическихДанныхДляИнициализации(ОписаниеТаблицыИсточниковДанных);
	
	ДобавитьВременныеТаблицыКУничтожению("ВТИсточникиФактическихДанныхДляИнициализации");
	ДобавитьВременныеТаблицыКУничтожению("ВТКалендариДляИнициализации");
	
	Если Не НеобходимаИнициализацияФактическихДанныхУчетаВремени() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВременнаяТаблицаИнициализирована(ВТПодневныеДанныеУчетаВремени) Тогда
		ИспользоватьРанееПолученныеДанные = Истина;
	Иначе
		ИспользоватьРанееПолученныеДанные = Ложь;
	КонецЕсли;	
	
	СоздатьВТПраздничныеДни();
	
	Запрос = СоздатьЗапрос();	
	
	// Определим сотрудников по которым еще не сформированы инд. сведения
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеИнициализированныеИсточникиДанных.ИсточникДанных КАК Сотрудник,
	|	НеИнициализированныеИсточникиДанных.Месяц КАК ПериодДействия,
	|	НеИнициализированныеИсточникиДанных.ПериодРегистрации
	|ИЗ
	|	ВТИсточникиФактическихДанныхДляИнициализации КАК НеИнициализированныеИсточникиДанных
	|ГДЕ
	|	НеИнициализированныеИсточникиДанных.ИсточникДанных ССЫЛКА Справочник.Сотрудники
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК поле
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = НеИнициализированныеИсточникиДанных.ИсточникДанных
	|					И ГрафикиРаботыПоВидамВремени.Месяц = НеИнициализированныеИсточникиДанных.Месяц
	|					И ГрафикиРаботыПоВидамВремени.ПериодРегистрации = НеИнициализированныеИсточникиДанных.ПериодРегистрации)";
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСотрудников.Сортировать("ПериодДействия");
	
	Если ТаблицаСотрудников.Количество() > 0 Тогда
		МинимальнаяДата = НачалоМесяца(ТаблицаСотрудников[0].ПериодДействия);
		МаксимальнаяДата = КонецМесяца(ТаблицаСотрудников[ТаблицаСотрудников.Количество() - 1].ПериодДействия);
		
		УчетРабочегоВремениРасширенный.СформироватьЗаписиРабочегоВремениСотрудников(ТаблицаСотрудников, МинимальнаяДата, МаксимальнаяДата);
	КонецЕсли;	
	
	ТекстЗапросаПодневныеДанные = 
	"ВЫБРАТЬ
	|	НеИнициализированныеИсточникиДанных.ИсточникДанных КАК ИсточникДанных,
	|	НеИнициализированныеИсточникиДанных.Месяц КАК Месяц,
	|	НеИнициализированныеИсточникиДанных.ПериодРегистрации КАК ПериодРегистрации,
	|	НеИнициализированныеИсточникиДанных.ОбщийГрафик КАК ОбщийГрафик,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ГрафикиРаботыПоВидамВремени.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|	ГрафикиРаботыПоВидамВремени.Территория КАК Территория,
	|	ГрафикиРаботыПоВидамВремени.УсловияТруда КАК УсловияТруда,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ОсновноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение КАК ДополнительноеЗначение,
	|	ВЫБОР
	|		КОГДА ПраздничныеДни.Дата ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Праздник
	|ПОМЕСТИТЬ ВТПодневныеДанныеУчетаВремени
	|ИЗ
	|	ВТИсточникиФактическихДанныхДляИнициализации КАК НеИнициализированныеИсточникиДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО НеИнициализированныеИсточникиДанных.ИсточникДанных = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И НеИнициализированныеИсточникиДанных.Месяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И НеИнициализированныеИсточникиДанных.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
	|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздничныеДни КАК ПраздничныеДни
	|		ПО НеИнициализированныеИсточникиДанных.ПроизводственныйКалендарь = ПраздничныеДни.ПроизводственныйКалендарь
	|			И (ГрафикиРаботыПоВидамВремени.Дата = ПраздничныеДни.Дата)
	|			И (ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены = ПраздничныеДни.ПереходящаяЧастьТекущейСмены)";
	
	ТекстЗапросаПодневныеДанные = СтрЗаменить(ТекстЗапросаПодневныеДанные, "ВТПодневныеДанныеУчетаВремени", НовоеИмяИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));
	
	Если ИспользоватьРанееПолученныеДанные Тогда
		ТекстЗапросаПодневныеДанныеРанееПолученные = 
		"ВЫБРАТЬ
		|	ПодневныеДанныеУчетаВремени.ИсточникДанных,
		|	ПодневныеДанныеУчетаВремени.Месяц,
		|	ПодневныеДанныеУчетаВремени.ПериодРегистрации,
		|	ПодневныеДанныеУчетаВремени.ОбщийГрафик,
		|	ПодневныеДанныеУчетаВремени.ВидУчетаВремени,
		|	ПодневныеДанныеУчетаВремени.Дата,
		|	ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод,
		|	ПодневныеДанныеУчетаВремени.Территория,
		|	ПодневныеДанныеУчетаВремени.УсловияТруда,
		|	ПодневныеДанныеУчетаВремени.ОсновноеЗначение,
		|	ПодневныеДанныеУчетаВремени.ДополнительноеЗначение,
		|	ПодневныеДанныеУчетаВремени.Праздник
		|ИЗ
		|	ВТРанееПолученныеПодневныеДанныеУчетаВремени КАК ПодневныеДанныеУчетаВремени";	
		
		ТекущееИмяВТПодневныеДанныеУчетаВремени = ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени);
		
		ИспользоватьРанееПолученныеДанные = СтрЗаменить(ТекстЗапросаПодневныеДанныеРанееПолученные, "ВТРанееПолученныеПодневныеДанныеУчетаВремени", ТекущееИмяВТПодневныеДанныеУчетаВремени);
		
		ДобавитьОбъединениеВТекстЗапроса(ТекстЗапросаПодневныеДанные, ИспользоватьРанееПолученныеДанные);
		
		ДобавитьВременныеТаблицыКУничтожению(ТекущееИмяВТПодневныеДанныеУчетаВремени);
	КонецЕсли;
	
	ДобавитьИндексированиеВТекстЗапроса(ТекстЗапросаПодневныеДанные, "НеИнициализированныеИсточникиДанных.ИсточникДанных, НеИнициализированныеИсточникиДанных.Месяц, НеИнициализированныеИсточникиДанных.ПериодРегистрации, ГрафикиРаботыПоВидамВремени.ВидУчетаВремени");
	
	Запрос.Текст = ТекстЗапросаПодневныеДанные;
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТПраздничныеДни");
	
	УстановитьПризнакИнициализированностиВременнойТаблицы(ВТПодневныеДанныеУчетаВремени, НовоеИмяИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));
	
	УстановитьИнициализированныеИсточникиФактическихДанных();
	
КонецПроцедуры

Процедура СоздатьВТПраздничныеДни()
	Запрос = СоздатьЗапрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ПроизводственныеКалендари.Месяц КАК Месяц,
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ЛОЖЬ КАК ПереходящаяЧастьТекущейСмены
	|ПОМЕСТИТЬ ВТПраздничныеДни
	|ИЗ
	|	ВТКалендариДляИнициализации КАК ПроизводственныеКалендари
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ПроизводственныеКалендари.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ПроизводственныеКалендари.НачалоМесяца <= ДанныеПроизводственногоКалендаря.Дата
	|			И ПроизводственныеКалендари.КонецМесяца >= ДанныеПроизводственногоКалендаря.Дата
	|			И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроизводственныеКалендари.ПроизводственныйКалендарь,
	|	ПроизводственныеКалендари.Месяц,
	|	ДОБАВИТЬКДАТЕ(ДанныеПроизводственногоКалендаря.Дата, ДЕНЬ, -1),
	|	ИСТИНА
	|ИЗ
	|	ВТКалендариДляИнициализации КАК ПроизводственныеКалендари
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ПроизводственныеКалендари.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДОБАВИТЬКДАТЕ(ПроизводственныеКалендари.НачалоМесяца, ДЕНЬ, 1) <= ДанныеПроизводственногоКалендаря.Дата)
	|			И (ДОБАВИТЬКДАТЕ(ПроизводственныеКалендари.КонецМесяца, ДЕНЬ, 1) >= ДанныеПроизводственногоКалендаря.Дата)
	|			И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))";
		
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТИсточникиФактическихДанныхДляИнициализации(ОписаниеТаблицыИсточниковДанных)
		
	Запрос = СоздатьЗапрос();	
	
	Если ВременнаяТаблицаИнициализирована(ВТИнициализированныеИсточникиФактическихДанных) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаФильтр.Месяц КАК Месяц,
		|	НАЧАЛОПЕРИОДА(ТаблицаФильтр.Месяц, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ТаблицаФильтр.Месяц, МЕСЯЦ) КАК ДатаОкончания,
		|	ТаблицаФильтр.ИсточникДанных КАК ИсточникДанных,
		|	ТаблицаФильтр.ОбщийГрафик КАК ОбщийГрафик,
		|	ТаблицаФильтр.ПериодРегистрации КАК ПериодРегистрации,
		|	ЕСТЬNULL(ГрафикиРаботыСотрудников.ПроизводственныйКалендарь, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТИсточникиФактическихДанныхДляИнициализации
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ТаблицаФильтр.ОбщийГрафик = ГрафикиРаботыСотрудников.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнициализированныеИсточникиДанных КАК ИнициализированныеИсточникиДанных
		|		ПО ТаблицаФильтр.ИсточникДанных = ИнициализированныеИсточникиДанных.ИсточникДанных
		|			И ТаблицаФильтр.Месяц = ИнициализированныеИсточникиДанных.Месяц
		|			И ТаблицаФильтр.ПериодРегистрации = ИнициализированныеИсточникиДанных.ПериодРегистрации
		|			И ТаблицаФильтр.ОбщийГрафик = ИнициализированныеИсточникиДанных.ОбщийГрафик
		|ГДЕ
		|	ИнициализированныеИсточникиДанных.ИсточникДанных ЕСТЬ NULL
		|	И НЕ ТаблицаФильтр.ОбщийГрафик ЕСТЬ NULL
		|	И ТаблицаФильтр.ОбщийГрафик <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|	И ТаблицаФильтр.ИсточникДанных <> НЕОПРЕДЕЛЕНО
		|	И &УсловиеОтбораТаблицыИсточникаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиФактическихДанныхДляИнициализации.Месяц КАК Месяц,
		|	ИсточникиФактическихДанныхДляИнициализации.ДатаНачала КАК НачалоМесяца,
		|	ИсточникиФактическихДанныхДляИнициализации.ДатаОкончания КАК КонецМесяца,
		|	ИсточникиФактическихДанныхДляИнициализации.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТКалендариДляИнициализации
		|ИЗ
		|	ВТИсточникиФактическихДанныхДляИнициализации КАК ИсточникиФактическихДанныхДляИнициализации";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИнициализированныеИсточникиДанных", ТекущееИмяВременнойТаблицы(ВТИнициализированныеИсточникиФактическихДанных));
	Иначе			
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаФильтр.Месяц КАК Месяц,
		|	НАЧАЛОПЕРИОДА(ТаблицаФильтр.Месяц, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ТаблицаФильтр.Месяц, МЕСЯЦ) КАК ДатаОкончания,
		|	ТаблицаФильтр.ИсточникДанных КАК ИсточникДанных,
		|	ТаблицаФильтр.ОбщийГрафик КАК ОбщийГрафик,
		|	ТаблицаФильтр.ПериодРегистрации КАК ПериодРегистрации,
		|	ЕСТЬNULL(ГрафикиРаботыСотрудников.ПроизводственныйКалендарь, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТИсточникиФактическихДанныхДляИнициализации
		|ИЗ
		|	ВТТаблицаФильтр КАК ТаблицаФильтр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ТаблицаФильтр.ОбщийГрафик = ГрафикиРаботыСотрудников.Ссылка
		|ГДЕ
		|	&УсловиеОтбораТаблицыИсточникаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиФактическихДанныхДляИнициализации.Месяц,
		|	ИсточникиФактическихДанныхДляИнициализации.ПроизводственныйКалендарь,
		|	ИсточникиФактическихДанныхДляИнициализации.ДатаНачала КАК НачалоМесяца,
		|	ИсточникиФактическихДанныхДляИнициализации.ДатаОкончания КАК КонецМесяца
		|ПОМЕСТИТЬ ВТКалендариДляИнициализации
		|ИЗ
		|	ВТИсточникиФактическихДанныхДляИнициализации КАК ИсточникиФактическихДанныхДляИнициализации";	
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеТаблицыИсточниковДанных.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.Месяц", "ТаблицаФильтр." + ОписаниеТаблицыИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ИсточникДанных", "ТаблицаФильтр." + ОписаниеТаблицыИсточниковДанных.ИмяПоляИсточникДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ОбщийГрафик", "ТаблицаФильтр." + ОписаниеТаблицыИсточниковДанных.ИмяПоляОбщийГрафик);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ПериодРегистрации", "ТаблицаФильтр." + ОписаниеТаблицыИсточниковДанных.ИмяПоляПериодРегистрацииВремени);
	
	
	УстановитьУсловияОтбораВЗапрос(Запрос, ОписаниеТаблицыИсточниковДанных.Отбор, "ТаблицаФильтр");
	
	Запрос.Выполнить();
		
КонецПроцедуры	

Процедура УстановитьИнициализированныеИсточникиФактическихДанных()
	Запрос = СоздатьЗапрос();
	
	Если Не ВременнаяТаблицаИнициализирована(ВТИнициализированныеИсточникиФактическихДанных) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсточникиФактическихДанныхДляИнициализации.Месяц,
		|	ИсточникиФактическихДанныхДляИнициализации.ИсточникДанных,
		|	ИсточникиФактическихДанныхДляИнициализации.ПериодРегистрации,
		|	ИсточникиФактическихДанныхДляИнициализации.ОбщийГрафик
		|ПОМЕСТИТЬ ВТИнициализированныеИсточникиФактическихДанных
		|ИЗ
		|	ВТИсточникиФактическихДанныхДляИнициализации КАК ИсточникиФактическихДанныхДляИнициализации";
		
		НовоеИмяВТИнициализированныеИсточникиФактическихДанных = ВТИнициализированныеИсточникиФактическихДанных;	
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсточникиФактическихДанныхДляИнициализации.Месяц,
		|	ИсточникиФактическихДанныхДляИнициализации.ИсточникДанных,
		|	ИсточникиФактическихДанныхДляИнициализации.ПериодРегистрации,
		|	ИсточникиФактическихДанныхДляИнициализации.ОбщийГрафик
		|ПОМЕСТИТЬ ВТНовыеИнициализированныеИсточникиФактическихДанных
		|ИЗ
		|	ВТРанееИнициализированныеИсточникиФактическихДанных КАК ИсточникиФактическихДанныхДляИнициализации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсточникиФактическихДанныхДляИнициализации.Месяц,
		|	ИсточникиФактическихДанныхДляИнициализации.ИсточникДанных,
		|	ИсточникиФактическихДанныхДляИнициализации.ПериодРегистрации,
		|	ИсточникиФактическихДанныхДляИнициализации.ОбщийГрафик
		|ИЗ
		|	ВТИсточникиФактическихДанныхДляИнициализации КАК ИсточникиФактическихДанныхДляИнициализации";
		
		ТекущееИмяВТИнициализированныеИсточникиДанных = ТекущееИмяВременнойТаблицы(ВТИнициализированныеИсточникиФактическихДанных);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРанееИнициализированныеИсточникиФактическихДанных", ТекущееИмяВТИнициализированныеИсточникиДанных);
		
		НовоеИмяВТИнициализированныеИсточникиФактическихДанных = НовоеИмяИмяВременнойТаблицы(ВТИнициализированныеИсточникиФактическихДанных);	
		
		ДобавитьВременныеТаблицыКУничтожению(ТекущееИмяВТИнициализированныеИсточникиДанных);

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНовыеИнициализированныеИсточникиФактическихДанных", НовоеИмяВТИнициализированныеИсточникиФактическихДанных);
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	УстановитьПризнакИнициализированностиВременнойТаблицы(ВТИнициализированныеИсточникиФактическихДанных, НовоеИмяВТИнициализированныеИсточникиФактическихДанных);
	
КонецПроцедуры	

Функция НеобходимаИнициализацияФактическихДанныхУчетаВремени()
	Результат = Ложь;
	
	Если Не ВременнаяТаблицаИнициализирована(ВТПодневныеДанныеУчетаВремени) Тогда
		Результат = Истина;
	Иначе
		Запрос = СоздатьЗапрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсточникиФактическихДанныхДляИнициализации.Месяц
		|ИЗ
		|	ВТИсточникиФактическихДанныхДляИнициализации КАК ИсточникиФактическихДанныхДляИнициализации";
		
		Результат = Не Запрос.Выполнить().Пустой();
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции	

Функция ОписаниеИсточниковДанныхВТЗарегистрированноеВремяПоНаборамВидовВремениСлужебная() Экспорт 
	ОписаниеИсточников = Новый Структура;
	
	ОписаниеИсточников.Вставить("ИмяТаблицы", "");
	ОписаниеИсточников.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеИсточников.Вставить("ИмяПоляИсточникДанных", "ИсточникДанных");
	ОписаниеИсточников.Вставить("ИмяПоляПериодРегистрацииВремени", "ПериодРегистрации");
	ОписаниеИсточников.Вставить("ИмяПоляОбщийГрафик", "ОбщийГрафик");
	ОписаниеИсточников.Вставить("ИмяПоляМесяц", "Месяц");
	ОписаниеИсточников.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеИсточников.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	ОписаниеИсточников.Вставить("ИмяПоляДатаНачалаГруппировка", "ДатаНачала");
	ОписаниеИсточников.Вставить("ИмяПоляДатаОкончанияГруппировка", "ДатаОкончания");
	ОписаниеИсточников.Вставить("ИмяПоляКлючНабораВидовВремени", "КлючНабораВидовВремени");
	ОписаниеИсточников.Вставить("ИмяПоляТерритория", "Территория");
	
	ОписаниеИсточников.Вставить("КлючевыеПоля", Новый Массив);
	
	ОписаниеИсточников.Вставить("Отбор", Новый Массив);

	
	Возврат ОписаниеИсточников;
КонецФункции

Функция ПараметрыПолученияВТЗарегистрированноеВремяПоНаборамВидовВремени() Экспорт
	ПараметрыПолучения = Новый Структура;
	
	ПараметрыПолучения.Вставить("ОбновлятьПодневныеДанные", Истина);
	ПараметрыПолучения.Вставить("ФормироватьВРазрезеТерриторий", Ложь);
	ПараметрыПолучения.Вставить("ФормироватьВРазрезеУсловияТруда", Ложь);
	ПараметрыПолучения.Вставить("ФормироватьВРазрезеУсловияТруда", Ложь);
	ПараметрыПолучения.Вставить("ДляПустыхНаборовВидовВремениУчитыватьТолькоРабочееВремя", Истина);
	
	Возврат  ПараметрыПолучения;
	
КонецФункции

Процедура СоздатьВТЗарегистрированноеВремяПоНаборамВидовВремениСлужебная(ОписаниеИсточниковДанных, ОписаниеТаблицыНаборовВидовВремени, ПараметрыПолученияДанных, ИмяВТРезультат) Экспорт	
	Если ПараметрыПолученияДанных.ОбновлятьПодневныеДанные Тогда
		СоздатьВТПодневныеДанныеУчетаВремени(ОписаниеИсточниковДанных);	
	КонецЕсли;	
	
	Запрос = СоздатьЗапрос();
	Запрос.УстановитьПараметр("РабочееВремя", Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя);
	Запрос.УстановитьПараметр("Выходные",  Справочники.ВидыИспользованияРабочегоВремени.ВыходныеДни);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНаборовВидовВремени.Ключ КАК Ключ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаНаборовВидовВремени.ВидВремени = &РабочееВремя
	|					ИЛИ ТаблицаНаборовВидовВремени.ВидВремени.РабочееВремя
	|					ИЛИ ТаблицаНаборовВидовВремени.ВидВремени.ОсновноеВремя = &Выходные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РабочееВремя,
	|	МАКСИМУМ(&ПолеУчитыватьРабочееВремяДляОтклонений) КАК УчитыватьРабочееВремяДляОтклонений
	|ПОМЕСТИТЬ ВТСвойстваНаборовВидовВремени
	|ИЗ
	|	ВТТаблицаНаборовВидовВремени КАК ТаблицаНаборовВидовВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНаборовВидовВремени.Ключ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаНаборовВидовВремени", ОписаниеТаблицыНаборовВидовВремени.ИмяТаблицы); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНаборовВидовВремени.Ключ", "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНаборовВидовВремени.ВидВремени", "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляВидВремени); 
	Если ОписаниеТаблицыНаборовВидовВремени.ПолеУчитыватьРабочееВремяДляОтклонений = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеУчитыватьРабочееВремяДляОтклонений", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеУчитыватьРабочееВремяДляОтклонений", ОписаниеТаблицыНаборовВидовВремени.ПолеУчитыватьРабочееВремяДляОтклонений);	
	КонецЕсли;	
	
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВремениПоДатам.КлючевыеПоля КАК КлючевыеПоля,
	|	ДанныеОВремениПоДатам.Территория КАК Территория,
	|	ДанныеОВремениПоДатам.УсловияТруда КАК УсловияТруда,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеОВремениПоДатам.ЗарегистрированоВремяПоНабору
	|				ТОГДА ДанныеОВремениПоДатам.Дней
	|			ИНАЧЕ ДанныеОВремениПоДатам.ДнейРабочееВремя
	|		КОНЕЦ) КАК Дней,
	|	МАКСИМУМ(ДанныеОВремениПоДатам.ВЦеломЗаПериод) КАК ВЦеломЗаПериод,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеОВремениПоДатам.ЗарегистрированоВремяПоНабору
	|				ТОГДА ДанныеОВремениПоДатам.Часов
	|			ИНАЧЕ ДанныеОВремениПоДатам.ЧасовРабочееВремя
	|		КОНЕЦ) КАК Часов,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеОВремениПоДатам.ЗарегистрированоВремяПоНабору
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеОВремениПоДатам.Часов >= 2
	|							ТОГДА 2
	|						ИНАЧЕ ДанныеОВремениПоДатам.Часов
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧасовВПределах2Часов
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИсходныхИсточниковДанных.Сотрудник КАК Сотрудник,
	|		ТаблицаИсходныхИсточниковДанных.Месяц КАК Месяц,
	|		ТаблицаИсходныхИсточниковДанных.КлючНабораВидовВремени КАК КлючНабораВидовВремени,
	|		ТаблицаИсходныхИсточниковДанных.ИсточникДанных КАК ИсточникДанных,
	|		ТаблицаИсходныхИсточниковДанных.КлючевыеПоля КАК КлючевыеПоля,
	|		ПодневныеДанныеУчетаВремени.Территория КАК Территория,
	|		ПодневныеДанныеУчетаВремени.УсловияТруда КАК УсловияТруда,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|						ИЛИ СвойстваНаборовВидовВремени.РабочееВремя
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ЗарегистрированоВремяПоНабору,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Дней,
	|		МАКСИМУМ(ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод, ЛОЖЬ)) КАК ВЦеломЗаПериод,
	|		СУММА(ВЫБОР
	|				КОГДА ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Часов,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА &УсловиеУчитыватьТолькоРабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ОсновноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДнейРабочееВремя,
	|		СУММА(ВЫБОР
	|				КОГДА &УсловиеУчитыватьТолькоРабочееВремя
	|					ТОГДА ЕСТЬNULL(ПодневныеДанныеУчетаВремени.ДополнительноеЗначение, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ЧасовРабочееВремя,
	|		ТаблицаИсходныхИсточниковДанных.ПериодРегистрации КАК ПериодРегистрацииВремени,
	|		ТаблицаИсходныхИсточниковДанных.ОбщийГрафик КАК ОбщийГрафик
	|	ИЗ
	|		ВТТаблицаИсходныхИсточниковДанных КАК ТаблицаИсходныхИсточниковДанных
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаНаборовВидовВремени КАК ТаблицаНаборовВидовВремени
	|			ПО ТаблицаИсходныхИсточниковДанных.КлючНабораВидовВремени = ТаблицаНаборовВидовВремени.Ключ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСвойстваНаборовВидовВремени КАК СвойстваНаборовВидовВремени
	|			ПО ТаблицаИсходныхИсточниковДанных.КлючНабораВидовВремени = СвойстваНаборовВидовВремени.Ключ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДанныеУчетаВремени КАК ПодневныеДанныеУчетаВремени
	|			ПО ТаблицаИсходныхИсточниковДанных.ИсточникДанных = ПодневныеДанныеУчетаВремени.ИсточникДанных
	|				И ТаблицаИсходныхИсточниковДанных.Месяц = ПодневныеДанныеУчетаВремени.Месяц
	|				И ТаблицаИсходныхИсточниковДанных.ОбщийГрафик = ПодневныеДанныеУчетаВремени.ОбщийГрафик
	|				И ТаблицаИсходныхИсточниковДанных.ПериодРегистрации = ПодневныеДанныеУчетаВремени.ПериодРегистрации
	|				И (ТаблицаНаборовВидовВремени.ВидВремени = ПодневныеДанныеУчетаВремени.ВидУчетаВремени
	|					ИЛИ &УсловиеУчитыватьТолькоРабочееВремя)
	|				И (ПодневныеДанныеУчетаВремени.Дата МЕЖДУ ТаблицаИсходныхИсточниковДанных.ДатаНачала И ТаблицаИсходныхИсточниковДанных.ДатаОкончания
	|						И НЕ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|					ИЛИ ПодневныеДанныеУчетаВремени.ВЦеломЗаПериод
	|						И НЕ ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники)
	|				И (ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники = ПодневныеДанныеУчетаВремени.Праздник
	|					ИЛИ НЕ ЕСТЬNULL(ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники, ЛОЖЬ))
	|				И (&УсловиеОтбораТаблицыИсточникаДанных)
	|	ГДЕ
	|		&УсловиеОтбораТаблицыИсточникаДанных
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаИсходныхИсточниковДанных.Сотрудник,
	|		ТаблицаИсходныхИсточниковДанных.Месяц,
	|		ТаблицаИсходныхИсточниковДанных.ДатаНачала,
	|		ТаблицаИсходныхИсточниковДанных.ДатаОкончания,
	|		ТаблицаИсходныхИсточниковДанных.КлючНабораВидовВремени,
	|		ПодневныеДанныеУчетаВремени.Территория,
	|		ПодневныеДанныеУчетаВремени.УсловияТруда,
	|		ТаблицаИсходныхИсточниковДанных.ИсточникДанных,
	|		ТаблицаИсходныхИсточниковДанных.КлючевыеПоля,
	|		ПодневныеДанныеУчетаВремени.Дата,
	|		ТаблицаИсходныхИсточниковДанных.ПериодРегистрации,
	|		ТаблицаИсходныхИсточниковДанных.ОбщийГрафик) КАК ДанныеОВремениПоДатам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВремениПоДатам.КлючевыеПоля,
	|	ДанныеОВремениПоДатам.Территория,
	|	ДанныеОВремениПоДатам.УсловияТруда";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИсходныхИсточниковДанных", ОписаниеИсточниковДанных.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.Сотрудник", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.Месяц", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ДатаНачала", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ДатаОкончания", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.КлючНабораВидовВремени", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляКлючНабораВидовВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ИсточникДанных", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ПериодРегистрации", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляПериодРегистрацииВремени);		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсходныхИсточниковДанных.ОбщийГрафик", "ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляОбщийГрафик);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПодневныеДанныеУчетаВремени", ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени));
	
	Если ПараметрыПолученияДанных.ДляПустыхНаборовВидовВремениУчитыватьТолькоРабочееВремя Тогда
		ТекстУсловияУчитыватьТолькоРабочееВремя = "(НЕ ЕСТЬNULL(СвойстваНаборовВидовВремени.РабочееВремя, ЛОЖЬ) И ЕСТЬNULL(СвойстваНаборовВидовВремени.УчитыватьРабочееВремяДляОтклонений, ИСТИНА) И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя)";
	Иначе
		ТекстУсловияУчитыватьТолькоРабочееВремя = 
		"ВЫБОР 
		|	КОГДА НЕ СвойстваНаборовВидовВремени.РабочееВремя И ПодневныеДанныеУчетаВремени.ВидУчетаВремени = &РабочееВремя И СвойстваНаборовВидовВремени.УчитыватьРабочееВремяДляОтклонений 
		|		ТОГДА ИСТИНА
		|	КОГДА СвойстваНаборовВидовВремени.Ключ ЕСТЬ NULL И ПодневныеДанныеУчетаВремени.ВидУчетаВремени <> &РабочееВремя
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеУчитыватьТолькоРабочееВремя", ТекстУсловияУчитыватьТолькоРабочееВремя);
	
	ДобавитьКлючевыеПоляВТекстЗапроса(Запрос.Текст, ОписаниеИсточниковДанных.КлючевыеПоля, "ТаблицаИсходныхИсточниковДанных");
	ДобавитьКлючевыеПоляВТекстЗапроса(Запрос.Текст, ОписаниеИсточниковДанных.КлючевыеПоля, "ДанныеОВремениПоДатам");
		
	УстановитьУсловияОтбораВЗапрос(Запрос, ОписаниеИсточниковДанных.Отбор, "ТаблицаИсходныхИсточниковДанных");
		
	Если ПараметрыПолученияДанных.ФормироватьВРазрезеТерриторий Тогда
		ТекстПоляТерритория = "ВЫБОР 
							  |	КОГДА ПодневныеДанныеУчетаВремени.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) 
							  |		ТОГДА ПодневныеДанныеУчетаВремени.Территория
							  |	ИНАЧЕ ТаблицаИсходныхИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляТерритория + "
							  |КОНЕЦ";	
	Иначе	
		ТекстПоляТерритория = "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПодневныеДанныеУчетаВремени.Территория", ТекстПоляТерритория);

	
	Если Не ПараметрыПолученияДанных.ФормироватьВРазрезеУсловияТруда Тогда
		ТекстПоляУсловияТруда = "ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)";
	Иначе
		ТекстПоляУсловияТруда = "ЕСТЬNULL(ПодневныеДанныеУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка))";	
	КонецЕсли;		
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПодневныеДанныеУчетаВремени.УсловияТруда", ТекстПоляУсловияТруда);		
	
	УстановитьПоляОписанияНаборовВидовВремениВЗапрос(Запрос.Текст, ОписаниеТаблицыНаборовВидовВремени);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТСвойстваНаборовВидовВремени");	
КонецПроцедуры	

Функция ОписаниеИсточниковДанныхВТНормаВремениПоИсточникамДанныхСлужебная()
	ОписаниеИсточниковДанных = Новый Структура;
	
	ОписаниеИсточниковДанных.Вставить("ИмяТаблицы", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляИсточникДанныхНормыВремени", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляИсточникДанныхПолнойНормыВремени", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляМесяц", "");
	ОписаниеИсточниковДанных.Вставить("ИмяПоляПериодРегистрацииВремени", "");
	
	ОписаниеИсточниковДанных.Вставить("КлючевыеПоля", Новый Массив);

	Возврат ОписаниеИсточниковДанных;		
КонецФункции	

Процедура СоздатьВТНормаВремениПоИсточникамДанныхСлужебная(ОписаниеИсточниковДанных, ИмяВТРезультат)
	
	Запрос = СоздатьЗапрос();
	Запрос.УстановитьПараметр("РабочееВремя", Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени КАК ИсточникДанных,
	|	ТаблицаИсточниковДанных.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаИсточниковДанных.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени ССЫЛКА Справочник.Сотрудники
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИндивидуальныйГрафик
	|ПОМЕСТИТЬ ВТРазличныеИсточникиДанныхНормыВремени
	|ИЗ
	|	ВТТаблицаИсточниковДанных КАК ТаблицаИсточниковДанных
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточниковДанных.ИсточникДанныхПолнойНормыВремени,
	|	ТаблицаИсточниковДанных.ПериодРегистрации,
	|	ТаблицаИсточниковДанных.Месяц,
	|	ЛОЖЬ
	|ИЗ
	|	ВТТаблицаИсточниковДанных КАК ТаблицаИсточниковДанных
	|ГДЕ
	|	ТаблицаИсточниковДанных.ИсточникДанныхПолнойНормыВремени <> ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.ИсточникДанных КАК Сотрудник,
	|	ГрафикиРаботы.Месяц КАК ПериодДействия,
	|	ГрафикиРаботы.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	ВТРазличныеИсточникиДанныхНормыВремени КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ИндивидуальныйГрафик
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ИсточникДанных
	|					И ГрафикиРаботыПоВидамВремени.Месяц = ГрафикиРаботы.Месяц
	|					И ГрафикиРаботыПоВидамВремени.ПериодРегистрации = ГрафикиРаботы.ПериодРегистрации)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИсточниковДанных", ОписаниеИсточниковДанных.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанныхНормыВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ИсточникДанныхПолнойНормыВремени", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанныхПолнойНормыВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.Месяц", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ПериодРегистрации", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляПериодРегистрацииВремени);

	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТРазличныеИсточникиДанныхНормыВремени");
	
	ТаблицаСотрудников.Сортировать("ПериодДействия");
	
	Если ТаблицаСотрудников.Количество() > 0 Тогда
		МинимальнаяДата = НачалоМесяца(ТаблицаСотрудников[0].ПериодДействия);
		МаксимальнаяДата = КонецМесяца(ТаблицаСотрудников[ТаблицаСотрудников.Количество() - 1].ПериодДействия);
		                                          
		УчетРабочегоВремениРасширенный.СформироватьЗаписиРабочегоВремениСотрудников(ТаблицаСотрудников, МинимальнаяДата, МаксимальнаяДата);
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазличныеИсточникиДанныхНормыВремени.ИсточникДанных,
	|	РазличныеИсточникиДанныхНормыВремени.ПериодРегистрации,
	|	РазличныеИсточникиДанныхНормыВремени.Месяц,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормаВремениПоРазличнымИсточникамДанных
	|ИЗ
	|	ВТРазличныеИсточникиДанныхНормыВремени КАК РазличныеИсточникиДанныхНормыВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО РазличныеИсточникиДанныхНормыВремени.ИсточникДанных = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И РазличныеИсточникиДанныхНормыВремени.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
	|			И РазличныеИсточникиДанныхНормыВремени.Месяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазличныеИсточникиДанныхНормыВремени.ИсточникДанных,
	|	РазличныеИсточникиДанныхНормыВремени.ПериодРегистрации,
	|	РазличныеИсточникиДанныхНормыВремени.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточниковДанных.КлючевыеПоля,
	|	ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени КАК ИсточникДанных,
	|	ТаблицаИсточниковДанных.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаИсточниковДанных.Месяц КАК Месяц,
	|	НормаВремени.НормаДней КАК НормаДней,
	|	НормаВремени.НормаЧасов КАК НормаЧасов,
	|	НормаВремениПолная.НормаДней КАК НормаДнейПолная,
	|	НормаВремениПолная.НормаЧасов КАК НормаЧасовПолная
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТТаблицаИсточниковДанных КАК ТаблицаИсточниковДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоРазличнымИсточникамДанных КАК НормаВремениПолная
	|		ПО ТаблицаИсточниковДанных.ИсточникДанныхПолнойНормыВремени = НормаВремениПолная.ИсточникДанных
	|			И ТаблицаИсточниковДанных.ПериодРегистрации = НормаВремениПолная.ПериодРегистрации
	|			И ТаблицаИсточниковДанных.Месяц = НормаВремениПолная.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоРазличнымИсточникамДанных КАК НормаВремени
	|		ПО ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени = НормаВремени.ИсточникДанных
	|			И ТаблицаИсточниковДанных.ПериодРегистрации = НормаВремени.ПериодРегистрации
	|			И ТаблицаИсточниковДанных.Месяц = НормаВремени.Месяц";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИсточниковДанных", ОписаниеИсточниковДанных.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ИсточникДанныхНормыВремени", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанныхНормыВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ИсточникДанныхПолнойНормыВремени", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляИсточникДанныхПолнойНормыВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.Месяц", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаИсточниковДанных.ПериодРегистрации", "ТаблицаИсточниковДанных." + ОписаниеИсточниковДанных.ИмяПоляПериодРегистрацииВремени);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);	
	
	ДобавитьКлючевыеПоляВТекстЗапроса(Запрос.Текст, ОписаниеИсточниковДанных.КлючевыеПоля, "ТаблицаИсточниковДанных");
	
	Запрос.Выполнить();
	
	ДобавитьВременныеТаблицыКУничтожению("ВТНормаВремениПоРазличнымИсточникамДанных");

КонецПроцедуры	

Функция СохраняемыеТаблицы() Экспорт
	СохраняемыеТаблицы = Новый Соответствие;
	
	СохраняемыеТаблицы.Вставить(ВТИсточникиДанныхУчетаВремени, Истина);
	СохраняемыеТаблицы.Вставить(ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная, Истина);
	СохраняемыеТаблицы.Вставить(ВТПодневныеДанныеУчетаВремени, Истина);  
	СохраняемыеТаблицы.Вставить("ВТИсходныйНаборСотрудникиМесяцы", Истина);
	
	СохраняемыеТаблицы.Вставить(ТекущееИмяВременнойТаблицы(ВТПодневныеДанныеУчетаВремени), Истина);
	СохраняемыеТаблицы.Вставить(ТекущееИмяВременнойТаблицы(ВТИнициализированныеИсточникиФактическихДанных), Истина);
	
	Возврат СохраняемыеТаблицы;
КонецФункции	

#КонецОбласти

#Область СервисныеМетоды

Функция СоздатьЗапрос()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
КонецФункции	

Процедура ДобавитьВременныеТаблицыКУничтожению(ИменаВременныхТаблиц)
	МассивИменТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаВременныхТаблиц, ",");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВременныеТаблицыКУничтожению, МассивИменТаблиц);	
КонецПроцедуры	

Процедура УничтожитьВременныеТаблицы()
	Если Не РежимПовторногоИспользованияВременныхТаблиц Тогда
		Для Каждого ИнициализированнаяТаблица Из ИнициализированныеВременныеТаблицы Цикл
			Если ИнициализированнаяТаблица.Значение = Истина Тогда
				ВременныеТаблицыКУничтожению.Добавить(ИменаВременныхТаблиц[ИнициализированнаяТаблица.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		ИнициализированныеВременныеТаблицы.Очистить();
		ИменаВременныхТаблиц.Очистить();
	КонецЕсли;	
		
	Запрос = СоздатьЗапрос();
	
	Для Каждого УничтожаемаяТаблица Из ВременныеТаблицыКУничтожению Цикл
		Запрос.Текст = "УНИЧТОЖИТЬ " + УничтожаемаяТаблица;
		Запрос.Выполнить();
	КонецЦикла;	
	
	ВременныеТаблицыКУничтожению.Очистить();
КонецПроцедуры	

Функция ВременнаяТаблицаИнициализирована(ВременнаяТаблица)
	Возврат ИнициализированныеВременныеТаблицы[ВременнаяТаблица] = Истина;	
КонецФункции   

Процедура УстановитьПризнакИнициализированностиВременнойТаблицы(ПсевдонимТаблицы, ИмяТаблицы)
	ИнициализированныеВременныеТаблицы.Вставить(ПсевдонимТаблицы, Истина);	
	ИменаВременныхТаблиц.Вставить(ПсевдонимТаблицы, ИмяТаблицы);
КонецПроцедуры	

Процедура ДобавитьОбъединениеВТекстЗапроса(ТекстЗапросаПриемник, ТекстОбъединяемогоЗапроса)
	ТекстЗапросаПриемник = ТекстЗапросаПриемник + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|" +
	ТекстОбъединяемогоЗапроса;	
КонецПроцедуры	

Процедура ДобавитьИндексированиеВТекстЗапроса(ТекстЗапроса, ПоляДляИндексирования)
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляДляИндексирования, ",");
	
	ТекстИндексируемыхПолей = "";
	
	Для Каждого Поле Из МассивПолей Цикл
		ТекстИндексируемыхПолей = ТекстИндексируемыхПолей + "
		|	" + Поле + ",";	
	КонецЦикла;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО"
	+ Сред(ТекстИндексируемыхПолей, 1, СтрДлина(ТекстИндексируемыхПолей) - 1);
КонецПроцедуры	

Функция ТекущееИмяВременнойТаблицы(ПсевдонимТаблицы)
	ИмяВТ = ИменаВременныхТаблиц.Получить(ПсевдонимТаблицы);
	
	Если ИмяВТ = Неопределено Тогда
		ИмяВТ = ПсевдонимТаблицы;	
	КонецЕсли;		
	
	Возврат ИмяВТ;
КонецФункции	

Функция НовоеИмяИмяВременнойТаблицы(ПсевдонимТаблицы)
	ТекущееИмяВТ = ИменаВременныхТаблиц.Получить(ПсевдонимТаблицы);
	
	Если ТекущееИмяВТ = Неопределено Тогда
		НовоеИмяВТ = ПсевдонимТаблицы;	
	ИначеЕсли Прав(ТекущееИмяВТ, 3) = "Доп" Тогда
		НовоеИмяВТ = Сред(ТекущееИмяВТ, 1, СтрДлина(ТекущееИмяВТ) - 3);
	Иначе 
		НовоеИмяВТ = ТекущееИмяВТ + "Доп";
	КонецЕсли;	
	
	Возврат НовоеИмяВТ;
КонецФункции

Функция УстановитьПоляОписанияНаборовВидовВремениВЗапрос(ТекстЗапроса, ОписаниеТаблицыНаборовВидовВремени)
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаНаборовВидовВремени", ОписаниеТаблицыНаборовВидовВремени.ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНаборовВидовВремени.Ключ", "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНаборовВидовВремени.ВидВремени", "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляВидВремени);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНаборовВидовВремени.УчитыватьТолькоПраздники", "ТаблицаНаборовВидовВремени." + ОписаниеТаблицыНаборовВидовВремени.ИмяПоляУчитыватьТолькоПраздники);
КонецФункции

Функция УстановитьУсловияОтбораВЗапрос(Запрос, Отбор, ПсевдонимТаблицы)
	Если Отбор.Количество() > 0 Тогда
		ТекстУсловияОтбор = "";
		
		Для Каждого ЭлементОтбора Из Отбор Цикл 
			ТекстУсловияОтбор = "И " + ПсевдонимТаблицы + "." + ЭлементОтбора.ЛевоеЗначение; 
			
			Если ЭлементОтбора.ПараметрПравоеЗначение <> Неопределено Тогда
				ТекстУсловияОтбор = ТекстУсловияОтбор + " = " +  ЭлементОтбора.ПравоеЗначение;
				Запрос.УстановитьПараметр(ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ПараметрПравоеЗначение);
			ИначеЕсли Не ПустаяСтрока(ЭлементОтбора.ПравоеЗначение) Тогда
				ТекстУсловияОтбор = ТекстУсловияОтбор + " = " + ПсевдонимТаблицы + "." + ЭлементОтбора.ПравоеЗначение;	
			КонецЕсли;				
		КонецЦикла;	
		
		ТекстУсловияОтбор = Сред(ТекстУсловияОтбор, 3);
	Иначе
		ТекстУсловияОтбор = "ИСТИНА";	
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораТаблицыИсточникаДанных", ТекстУсловияОтбор);	
КонецФункции	

Функция ДобавитьКлючевыеПоляВТекстЗапроса(ТекстЗапроса, КлючевыеПоля, ПсевдонимТаблицы)
	Если КлючевыеПоля.Количество() > 0 Тогда
		ТекстКлючевыеПоля = "";
		
		Для Каждого Поле Из КлючевыеПоля Цикл
			ТекстКлючевыеПоля = ТекстКлючевыеПоля + ",
			|	" + ПсевдонимТаблицы + "." + Поле;
		КонецЦикла;	
		
		ТекстКлючевыеПоля = Сред(ТекстКлючевыеПоля, 2);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимТаблицы + ".КлючевыеПоля КАК КлючевыеПоля", ТекстКлючевыеПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимТаблицы + ".КлючевыеПоля", ТекстКлючевыеПоля);
			
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимТаблицы + ".КлючевыеПоля КАК КлючевыеПоля", "ИСТИНА КАК КлючевыеПоля");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимТаблицы + ".КлючевыеПоля", "ИСТИНА КАК КлючевыеПоля");
	КонецЕсли;		
КонецФункции	

#КонецОбласти

Функция НовыйОписаниеПолучаемыхДанныхДатыРегистрацииНаборовВидовВремени() Экспорт
	ОписаниеПолучаемыхДанных = Новый Структура;
	ОписаниеПолучаемыхДанных.Вставить("Порядок", Новый Массив);
	ОписаниеПолучаемыхДанных.Вставить("ДополнительныеПоляФильтра", Новый Массив);
	ОписаниеПолучаемыхДанных.Вставить("ПолучатьВидВремени", Ложь);
	ОписаниеПолучаемыхДанных.Вставить("ПолучатьЗарегистрированныеЧасы", Ложь);
	ОписаниеПолучаемыхДанных.Вставить("СоздаватьВременнуюТаблицу", Ложь);
	
	Возврат ОписаниеПолучаемыхДанных;
КонецФункции	

#КонецОбласти

#Область Инициализация

ВТИсточникиДанныхУчетаВремени = "ВТИсточникиДанныхУчетаВремени";
ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная = "ВТИнтервалыДействияИсточниковДанныхУчетаВремениСлужебная";
ВТПодневныеДанныеУчетаВремени = "ВТПодневныеДанныеУчетаВремени";
ВТИсходныйНаборСотрудникиМесяцы = "ВТИсходныйНаборСотрудникиМесяцы";
ВТИнициализированныеИсточникиФактическихДанных = "ВТИнициализированныеИсточникиФактическихДанных";

ИнициализированныеВременныеТаблицы = Новый Соответствие;
ИменаВременныхТаблиц = Новый Соответствие;

ВременныеТаблицыКУничтожению = Новый Массив;

РежимПовторногоИспользованияВременныхТаблиц = Ложь;

ИнициализированныеИсточникиДанных = Новый ТаблицаЗначений;
ИнициализированныеИсточникиДанных.Колонки.Добавить("ИсточникДанных");
ИнициализированныеИсточникиДанных.Колонки.Добавить("ПериодРегистрации");
ИнициализированныеИсточникиДанных.Колонки.Добавить("Месяц");

ИнициализированныеИсточникиДанных.Индексы.Добавить("ИсточникДанных, ПериодРегистрации, Месяц");

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли
