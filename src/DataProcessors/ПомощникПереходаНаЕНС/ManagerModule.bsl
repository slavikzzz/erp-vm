#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Переносит расчеты по налогам с помощью документов Корректировка расчета по налогам
//
// Параметры:
//	СтруктураПараметров - Структура - параметры обработки
//	АдресХранилища - УникальныйИдентификатор - адрес временного хранилища
//	
Процедура ПереносРасчетовПоНалогамВзносам(СтруктураПараметров, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	ДокОбъект = ПодготовитьДокументКорректировки(СтруктураПараметров);
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Организация",         ДокОбъект.Организация);
	ПараметрыДокумента.Вставить("Дата",                ДокОбъект.Дата);
	ПараметрыДокумента.Вставить("ВидОперации",         СтруктураПараметров.ВидОперации);
	ПараметрыДокумента.Вставить("ВводОстатковРасчетовПоЕНС", Истина);
	
	// получаем данные для заполнения документа
	ТаблицаОстатков = ПолучитьОстаткиРасчетов(ПараметрыДокумента);
	
	ДокОбъект.РасшифровкаНалогов.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		НоваяСтрока = ДокОбъект.РасшифровкаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ТребуетсяКонтроль = ЗаписатьДокументКорректировки(ДокОбъект);
	
	СозданныеДокументы = Новый Массив;
	СозданныеДокументы.Добавить(ДокОбъект.Ссылка);
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполняемаяОперация", СтруктураПараметров.ВидОперации);
	Результат.Вставить("ДокументыОперации",   СозданныеДокументы);
	Результат.Вставить("УспешноВыполнено",    НЕ Отказ);
	Результат.Вставить("ТребуетсяКонтроль",   ТребуетсяКонтроль);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Распределяет авансы по налогам и санкциям, создает документы Корректировка расчетов по налогам
//
// Параметры:
//	СтруктураПараметров - Структура - параметры обработки
//	АдресХранилища - УникальныйИдентификатор - адрес временного хранилища
//	
Процедура ЗачетАвансов(СтруктураПараметров, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	ДокументКорректировка = ПодготовитьДокументКорректировки(СтруктураПараметров);
	СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов;
	ДокументКорректировкаСанкций = ПодготовитьДокументКорректировки(СтруктураПараметров);
	
	ТаблицаРеквизиты = Новый ТаблицаЗначений;
	ТаблицаРеквизиты.Колонки.Добавить("Организация",       Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРеквизиты.Колонки.Добавить("Период",            Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаРеквизиты.Колонки.Добавить("Регистратор",       Новый ОписаниеТипов("ДокументСсылка.КорректировкаРасчетовПоНалогам"));
	ТаблицаРеквизиты.Колонки.Добавить("ВидОперации",       Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРегламентныхОпераций"));
	ТаблицаРеквизиты.Колонки.Добавить("ВыдаватьСообщения", Новый ОписаниеТипов("Булево"));
	
	РеглОперация = Документы.РегламентнаяОперация.СоздатьДокумент();
	НоваяСтрока = ТаблицаРеквизиты.Добавить();
	НоваяСтрока.Организация       = СтруктураПараметров.Организация;
	НоваяСтрока.Период            = КонецДня(СтруктураПараметров.ДатаПерехода);
	НоваяСтрока.Регистратор       = РеглОперация.Ссылка;
	НоваяСтрока.ВидОперации       = Перечисления.ТипыРегламентныхОпераций.РасчетЕНС;
	НоваяСтрока.ВыдаватьСообщения = Ложь;
	
	ПараметрыПроведения = Новый Структура();
	ПараметрыПроведения.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	
	ЕдиныйНалоговыйСчет.ЗачетАвансаПоЕдиномуНалоговомуСчету(ПараметрыПроведения,,РеглОперация.Движения, Отказ);
	
	Документы.КорректировкаРасчетовПоНалогам.ЗаполнитьПоДвижениямДляЗачетаАванса(ДокументКорректировка, РеглОперация.Движения);
	Документы.КорректировкаРасчетовПоНалогам.ЗаполнитьПоДвижениямДляЗачетаАванса(ДокументКорректировкаСанкций, РеглОперация.Движения);

	ТребуетсяКонтроль = ЗаписатьДокументКорректировки(ДокументКорректировка);
	ТребуетсяКонтрольСанкций = ЗаписатьДокументКорректировки(ДокументКорректировкаСанкций);
	
	СозданныеДокументы = Новый Массив;
	СозданныеДокументы.Добавить(ДокументКорректировка);
	СозданныеДокументы.Добавить(ДокументКорректировкаСанкций);
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполняемаяОперация", Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов);
	Результат.Вставить("ДокументыОперации",   СозданныеДокументы);
	Результат.Вставить("УспешноВыполнено",    НЕ Отказ);
	Результат.Вставить("ТребуетсяКонтроль",   ТребуетсяКонтроль Или ТребуетсяКонтрольСанкций);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтменитьВыполнениеОперацииПереходаНаЕНС(СтруктураПараметров, ФиксироватьУстаревшие = Ложь, Отказ = Ложь) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// обработаем ссылки на документы операции и сами документы в зависимости от переданных параметров:
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" - помечаем на удаление
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" - делаем не проведенными
	ОбрабатыватьДокументыОперации = Ложь;
	СтруктураПараметров.Свойство("ОбрабатыватьДокументыОперации", ОбрабатыватьДокументыОперации);
	
	Если ОбрабатыватьДокументыОперации Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОперацийПереходаНаЕНС.Ссылка КАК ДокументОперации
		|ИЗ
		|	Документ.КорректировкаРасчетовПоНалогам КАК ДокументыОперацийПереходаНаЕНС
		|ГДЕ
		|	ДокументыОперацийПереходаНаЕНС.Организация = &Организация
		|	И ДокументыОперацийПереходаНаЕНС.ВводОстатковРасчетовПоЕНС
		|	И ДокументыОперацийПереходаНаЕНС.ВидОперации = &ВидОперации";

		Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ВидОперации",  СтруктураПараметров.ВидОперации);
		НаборДокументы = Запрос.Выполнить().Выбрать();
		
		Если НаборДокументы.Количество() > 0 Тогда
			
			Пока НаборДокументы.Следующий() Цикл
				
				ДокументОперации = НаборДокументы.ДокументОперации.ПолучитьОбъект();
				
				Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" Тогда
					
					ДокументОперации.УстановитьПометкуУдаления(Истина);
					
				ИначеЕсли СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" Тогда
					
					Если ДокументОперации.Проведен Тогда
						ДокументОперации.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОстаткиРасчетов(ПараметрыДокумента) Экспорт
	
	Организация = ПараметрыДокумента.Организация;
	Период      = ПараметрыДокумента.Дата;
	ВидОперации = ПараметрыДокумента.ВидОперации;

	ТаблицаНалогов = Документы.КорректировкаРасчетовПоНалогам.ПолучитьОстаткиРасчетов(ПараметрыДокумента);
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт

	Возврат НСтр("ru = 'Переход на Единый налоговый счет';
				|en = 'Switch to Unified tax account'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции // ИмяСобытияЖурналаРегистрации()

Функция ПодготовитьДокументКорректировки(СтруктураПараметров)

	ДатаДокумента = НачалоДня(СтруктураПараметров.ДатаПерехода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыОперацийПереходаНаЕНС.Ссылка КАК ДокументОперации
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам КАК ДокументыОперацийПереходаНаЕНС
	|ГДЕ
	|	ДокументыОперацийПереходаНаЕНС.Организация = &Организация
	|	И ДокументыОперацийПереходаНаЕНС.ВводОстатковРасчетовПоЕНС
	|	И ДокументыОперацийПереходаНаЕНС.ВидОперации = &ВидОперации"
	;
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаПерехода", СтруктураПараметров.ДатаПерехода);
	Запрос.УстановитьПараметр("ВидОперации",  СтруктураПараметров.ВидОперации);
	
	ДокОбъект = Неопределено;
	
	РезультатПоДокументам = Запрос.Выполнить();
	
	Если НЕ РезультатПоДокументам.Пустой() Тогда
		
		Выборка = РезультатПоДокументам.Выбрать();
		
		Ном = 0;
		МассивЛишнихДокументов = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Ном = Ном + 1;
			Если Ном = 1 Тогда
				ДокОбъект = Выборка.ДокументОперации.ПолучитьОбъект();
				Если ДокОбъект.ПометкаУдаления Тогда
					ДокОбъект.УстановитьПометкуУдаления(Ложь);
				ИначеЕсли ДокОбъект.Проведен Тогда
					ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			Иначе
				МассивЛишнихДокументов.Добавить(Выборка.ДокументОперации);
			КонецЕсли;
		КонецЦикла;
		
		// лишние документы помечаем на удаление
		Для каждого ЛишнийДокумент Из МассивЛишнихДокументов Цикл
			ЛишнийОбъект = ЛишнийДокумент.ПолучитьОбъект();
			ЛишнийОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
	Иначе
		ДокОбъект = Документы.КорректировкаРасчетовПоНалогам.СоздатьДокумент();
		ДокОбъект.ВидОперации         = СтруктураПараметров.ВидОперации;
		ДокОбъект.ВводОстатковРасчетовПоЕНС = Истина;
		ДокОбъект.Дата                = ДатаДокумента;
		ДокОбъект.Организация         = СтруктураПараметров.Организация;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	ДокОбъект.Дата                = ДатаДокумента;
	ДокОбъект.Организация         = СтруктураПараметров.Организация;
	ДокОбъект.Ответственный       = Пользователи.ТекущийПользователь();
	ДокОбъект.ВидОперации         = СтруктураПараметров.ВидОперации;
	ДокОбъект.ВводОстатковРасчетовПоЕНС = Истина;
	ДокОбъект.Комментарий         = СтрШаблон(НСтр("ru = '#Документ создан автоматически при переходе на ЕНС, операция - ""%1""';
													|en = '#Document is created automatically when switching to the unified tax account. The operation is ""%1""'"), СтруктураПараметров.ВидОперации);
	
	Возврат ДокОбъект;
	
КонецФункции

Функция ЗаписатьДокументКорректировки(ДокОбъект)

	ТребуетсяКонтроль = Не ДокОбъект.ПроверитьЗаполнение();
	Если ТребуетсяКонтроль Тогда
		Если ДокОбъект.Проведен Тогда
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Иначе
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			ТребуетсяКонтроль = Истина;
			
			ШаблонСообщения = НСтр("ru = 'Не удалось провести документ %1
									|%2';
									|en = 'Cannot post the document %1
									|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокОбъект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.КорректировкаРасчетовПоНалогам,, 
				ТекстСообщения);
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТребуетсяКонтроль;

КонецФункции

#КонецОбласти

#КонецЕсли