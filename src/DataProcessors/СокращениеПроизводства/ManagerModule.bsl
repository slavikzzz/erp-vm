//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает данные о состоянии заказов на производство в виде структуры "плоских" таблиц.
//
// Параметры:
//  Параметры - Структура - содержит параметры отбора заказов
//  АдресХранилища - Строка - адрес хранилища в которое будут помещен результат.
Процедура СостояниеЗаказовНаПроизводство(Параметры, АдресХранилища) Экспорт
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоЭтапы.Ссылка КАК Заказ,
	|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат КАК КлючСвязиПолуфабрикат,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязи КАК КлючСвязи,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ЗаказНаПроизводствоЭтапы.Этап КАК Этап,
	|	ЗаказНаПроизводствоЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказНаПроизводствоЭтапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ЗаказНаПроизводствоЭтапы.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|	ЗаказНаПроизводствоЭтапы.Подразделение КАК ПодразделениеИзготовитель,
	|	""единиц/партий"" КАК ЕдиницаИзмерения,
	|	ЗаказНаПроизводствоЭтапы.Количество КАК Количество,
	|	ЗаказНаПроизводствоЭтапы.КоличествоЭтаповНаЕдиницуСледующегоЭтапа КАК КоличествоЭтаповНаЕдиницуСледующегоЭтапа,
	|	ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
	|ПОМЕСТИТЬ ВТЭтапыЗаказовНаПроизводство
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоПродукция.Ссылка
	|			И ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи
	|ГДЕ
	|	ЗаказНаПроизводствоЭтапы.Ссылка В(&СписокЗаказов)
	|	И (НЕ &ОтборПоПродукции
	|			ИЛИ &ОтборПоПродукции
	|				И ЗаказНаПроизводствоПродукция.КодСтроки В (&СписокКодовСтрокПродукции))
	|	И НЕ ЗаказНаПроизводствоЭтапы.ЭтапВосстановленияБрака
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КлючСвязиПродукция,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоЭтапыГрафик.Ссылка КАК Заказ,
	|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ЗаказНаПроизводствоЭтапыГрафик.Этап КАК Этап,
	|	ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ЗаказНаПроизводствоЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафика,
	|	ЗаказНаПроизводствоЭтапыГрафик.Подразделение КАК Подразделение,
	|	ЗаказНаПроизводствоЭтапыГрафик.НачалоПредварительногоБуфера КАК НачалоПредварительногоБуфера,
	|	ЗаказНаПроизводствоЭтапыГрафик.ОкончаниеЗавершающегоБуфера КАК ОкончаниеЗавершающегоБуфера
	|ПОМЕСТИТЬ ВТЭтапыГрафикаЗаказовНаПроизводство
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|ГДЕ
	|	ЗаказНаПроизводствоЭтапыГрафик.Ссылка В(&СписокЗаказов)
	|	И (НЕ &ОтборПоПродукции
	|			ИЛИ &ОтборПоПродукции
	|				И ЗаказНаПроизводствоПродукция.КодСтроки В (&СписокКодовСтрокПродукции))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПроизводстваОбороты.Распоряжение КАК Распоряжение,
	|	ЭтапыПроизводстваОбороты.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ЭтапыПроизводстваОбороты.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ЕСТЬNULL(ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот - ЭтапыПроизводстваОбороты.ВыполненоОборот - ЭтапыПроизводстваОбороты.БракОборот, 0) КАК КоличествоОсталось,
	|	ЕСТЬNULL(ЭтапыПроизводстваОбороты.КВыполнениюОборот, 0) КАК КоличествоВыполняется
	|ПОМЕСТИТЬ ВТЭтапыПроизводства
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			Распоряжение В (&СписокЗаказов)
	|				И (НЕ &ОтборПоПродукции
	|					ИЛИ &ОтборПоПродукции
	|						И КодСтрокиПродукция В (&СписокКодовСтрокПродукции))) КАК ЭтапыПроизводстваОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаЗаказовНаПроизводство.Заказ КАК Заказ,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	СУММА(ЕСТЬNULL(ЭтапыПроизводстваОбороты.КоличествоОсталось, 0)) КАК КоличествоОсталось,
	|	СУММА(ЕСТЬNULL(ЭтапыПроизводстваОбороты.КоличествоВыполняется, 0)) КАК КоличествоВыполняется,
	|	МАКСИМУМ(ЭтапыГрафикаЗаказовНаПроизводство.ОкончаниеЗавершающегоБуфера) КАК ДатаОкончанияПлан,
	|	МАКСИМУМ(ЭтапыГрафикаЗаказовНаПроизводство.Подразделение) КАК Подразделение
	|ПОМЕСТИТЬ ВТВыполнениеЭтапов
	|ИЗ
	|	ВТЭтапыГрафикаЗаказовНаПроизводство КАК ЭтапыГрафикаЗаказовНаПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапыПроизводства КАК ЭтапыПроизводстваОбороты
	|		ПО ЭтапыГрафикаЗаказовНаПроизводство.Заказ = ЭтапыПроизводстваОбороты.Распоряжение
	|			И ЭтапыГрафикаЗаказовНаПроизводство.КодСтрокиПродукция = ЭтапыПроизводстваОбороты.КодСтрокиПродукция
	|			И ЭтапыГрафикаЗаказовНаПроизводство.КодСтрокиЭтапыГрафика = ЭтапыПроизводстваОбороты.КодСтрокиЭтапыГрафик
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаЗаказовНаПроизводство.Заказ,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиЭтапы,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиПродукция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КлючСвязиПродукция,
	|	КлючСвязиЭтапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаЗаказовНаПроизводство.Заказ КАК Заказ,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	МаршрутныйЛистПроизводстваВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	МаршрутныйЛистПроизводстваВыходныеИзделия.Характеристика КАК Характеристика,
	|	МАКСИМУМ(МаршрутныйЛистПроизводства.ФактическоеОкончание) КАК ДатаОкончанияФакт,
	|	СУММА(МаршрутныйЛистПроизводстваВыходныеИзделия.КоличествоФакт) КАК Количество
	|ПОМЕСТИТЬ ВТВыполнениеИзделий
	|ИЗ
	|	ВТЭтапыГрафикаЗаказовНаПроизводство КАК ЭтапыГрафикаЗаказовНаПроизводство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК МаршрутныйЛистПроизводстваВыходныеИзделия
	|			ПО МаршрутныйЛистПроизводства.Ссылка = МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка
	|		ПО ЭтапыГрафикаЗаказовНаПроизводство.Заказ = МаршрутныйЛистПроизводства.Распоряжение
	|			И ЭтапыГрафикаЗаказовНаПроизводство.КодСтрокиПродукция = МаршрутныйЛистПроизводства.КодСтроки
	|			И ЭтапыГрафикаЗаказовНаПроизводство.КодСтрокиЭтапыГрафика = МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Распоряжение В (&СписокЗаказов)
	|	И МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|	И МаршрутныйЛистПроизводства.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистПроизводстваВыходныеИзделия.Номенклатура,
	|	МаршрутныйЛистПроизводстваВыходныеИзделия.Характеристика,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиЭтапы,
	|	ЭтапыГрафикаЗаказовНаПроизводство.Заказ,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиПродукция
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыГрафикаЗаказовНаПроизводство.Заказ,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиПродукция,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиЭтапы,
	|	ЗаказПереработчикуПродукция.Номенклатура,
	|	ЗаказПереработчикуПродукция.Характеристика,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПереработчикуУслуги.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)
	|				ТОГДА ЗаказПереработчикуПродукция.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	ВТЭтапыГрафикаЗаказовНаПроизводство КАК ЭтапыГрафикаЗаказовНаПроизводство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
	|			ПО (ЗаказПереработчикуПродукция.Ссылка = ЗаказПереработчикуУслуги.Ссылка)
	|				И (ЗаказПереработчикуПродукция.НомерГруппыЗатрат = ЗаказПереработчикуУслуги.НомерГруппыЗатрат)
	|		ПО ЭтапыГрафикаЗаказовНаПроизводство.КодСтрокиПродукция = ЗаказПереработчикуУслуги.КодСтрокиПродукция
	|			И ЭтапыГрафикаЗаказовНаПроизводство.КодСтрокиЭтапыГрафика = ЗаказПереработчикуУслуги.КодСтрокиЭтапыГрафик
	|			И ЭтапыГрафикаЗаказовНаПроизводство.Заказ = ЗаказПереработчикуУслуги.Распоряжение
	|ГДЕ
	|	ЗаказПереработчикуУслуги.Распоряжение В(&СписокЗаказов)
	|	И ЗаказПереработчикуУслуги.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаЗаказовНаПроизводство.Заказ,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиПродукция,
	|	ЭтапыГрафикаЗаказовНаПроизводство.КлючСвязиЭтапы,
	|	ЗаказПереработчикуПродукция.Номенклатура,
	|	ЗаказПереработчикуПродукция.Характеристика
	//-- Устарело_Переработка24
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КлючСвязиПродукция,
	|	КлючСвязиЭтапы,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.Номер КАК Номер,
	|	ТаблицаПродукции.Дата КАК Дата,
	|	ТаблицаПродукции.НомерСтроки КАК НомерСтрокиПродукция,
	|	0 КАК НомерСтрокиПолуфабрикат,
	|	ТаблицаПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукции.Характеристика КАК Характеристика,
	|	ТаблицаПродукции.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ТаблицаПродукции.ХарактеристикаПредставление КАК ХарактеристикаПредставление,
	|	ТаблицаПродукции.ПодразделениеИзготовитель КАК ПодразделениеИзготовитель,
	|	ТаблицаПродукции.ДатаПотребности КАК ДатаПотребности,
	|	ТаблицаПродукции.ГрафикРассчитан КАК ГрафикРассчитан,
	|	ТаблицаПродукции.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаПродукции.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	&ПустойКлюч КАК КлючСвязиПолуфабрикат,
	|	&ПустойКлюч КАК КлючСвязиЭтапПотребляющийПолуфабрикат,
	|	ТаблицаПродукции.Упаковка КАК Упаковка,
	|	ТаблицаПродукции.УпаковкаКоэффициент КАК УпаковкаКоэффициент,
	|	ТаблицаПродукции.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаПродукции.КоличествоПоЗаказу КАК КоличествоПоЗаказу,
	|	ТаблицаПродукции.КоличествоПоЗаказу КАК КоличествоЗапланировано,
	|	ТаблицаПродукции.КоличествоВыполнено КАК КоличествоВыполнено,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.КоличествоПоЗаказу - ТаблицаПродукции.КоличествоВыполнено > 0
	|			ТОГДА ТаблицаПродукции.КоличествоПоЗаказу - ТаблицаПродукции.КоличествоВыполнено
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОсталось,
	|	ТаблицаПродукции.КоличествоПоЗаказу КАК КоличествоТребуется,
	|	0 КАК КоличествоИзлишек,
	|	ТаблицаПродукции.ВыходныхИзделийНаОдинЭтап КАК ВыходныхИзделийНаОдинЭтап,
	|	ТаблицаПродукции.ВыходныхИзделийНаЕдиницуСледующегоЭтапа КАК ВыходныхИзделийНаЕдиницуСледующегоЭтапа,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.КоличествоПоЗаказу - ТаблицаПродукции.КоличествоВыполнено = 0
	|			ТОГДА ТаблицаПродукции.ДатаОкончанияФакт
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончанияФакт,
	|	ТаблицаПродукции.ДатаОкончанияПлан КАК ДатаОкончанияПлан,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.ДатаОкончанияПлан < &ТекущаяДата
	|				И ТаблицаПродукции.КоличествоПоЗаказу - ТаблицаПродукции.КоличествоВыполнено <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаОкончанияПоГрафикуПросрочена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНаПроизводствоПродукция.Ссылка КАК Заказ,
	|		ЗаказНаПроизводствоПродукция.Ссылка.Номер КАК Номер,
	|		ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК Дата,
	|		ЗаказНаПроизводствоПродукция.НомерСтроки КАК НомерСтроки,
	|		ЗаказНаПроизводствоПродукция.Номенклатура КАК Номенклатура,
	|		ЗаказНаПроизводствоПродукция.Характеристика КАК Характеристика,
	|		ЕСТЬNULL(ЗаказНаПроизводствоПродукция.Номенклатура.Представление, """") КАК НоменклатураПредставление,
	|		ЕСТЬNULL(ЗаказНаПроизводствоПродукция.Характеристика.Представление, """") КАК ХарактеристикаПредставление,
	|		ЕСТЬNULL(ЭтапВыпускаПоГрафику.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеИзготовитель,
	|		ЗаказНаПроизводствоПродукция.ДатаПотребности КАК ДатаПотребности,
	|		ЗаказНаПроизводствоПродукция.ГрафикРассчитан КАК ГрафикРассчитан,
	|		ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтрокиПродукция,
	|		ЗаказНаПроизводствоПродукция.КлючСвязи КАК КлючСвязиПродукция,
	|		ЗаказНаПроизводствоВыходныеИзделия.Упаковка КАК Упаковка,
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) КАК УпаковкаКоэффициент,
	|		ВЫБОР
	|			КОГДА ЗаказНаПроизводствоВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ЗаказНаПроизводствоВыходныеИзделия.Упаковка.Представление
	|			ИНАЧЕ ЗаказНаПроизводствоВыходныеИзделия.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ЗаказНаПроизводствоВыходныеИзделия.КоличествоУпаковок КАК КоличествоПоЗаказу,
	|		ВЫБОР
	|			КОГДА ЗаказНаПроизводствоВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) <> 0
	|							ТОГДА ЕСТЬNULL(ВыполнениеИзделий.Количество, 0) / &ТекстЗапросаКоэффициентУпаковки
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(ВыполнениеИзделий.Количество, 0)
	|		КОНЕЦ КАК КоличествоВыполнено,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭтапВыпуска.Количество, 0) > 0
	|				ТОГДА ЗаказНаПроизводствоВыходныеИзделия.КоличествоУпаковок / ЭтапВыпуска.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВыходныхИзделийНаОдинЭтап,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭтапВыпуска.Количество, 0) > 0
	|					И ЕСТЬNULL(ЭтапВыпуска.КоличествоЭтаповНаЕдиницуСледующегоЭтапа, 0) > 0
	|				ТОГДА ЭтапВыпуска.КоличествоЭтаповНаЕдиницуСледующегоЭтапа * ЗаказНаПроизводствоВыходныеИзделия.КоличествоУпаковок / ЭтапВыпуска.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВыходныхИзделийНаЕдиницуСледующегоЭтапа,
	|		ЕСТЬNULL(ЭтапВыпуска.КоличествоЭтаповНаЕдиницуСледующегоЭтапа, 0) КАК КоличествоЭтаповНаЕдиницуСледующегоЭтапа,
	|		ЕСТЬNULL(ВыполнениеИзделий.ДатаОкончанияФакт, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияФакт,
	|		ЕСТЬNULL(ЭтапВыпускаПоГрафику.ДатаОкончанияПлан, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПлан
	|	ИЗ
	|		Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказНаПроизводствоВыходныеИзделия
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполнениеИзделий КАК ВыполнениеИзделий
	|				ПО ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ВыполнениеИзделий.Заказ
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ВыполнениеИзделий.КлючСвязиПродукция
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиЭтапы = ВыполнениеИзделий.КлючСвязиЭтапы
	|					И ЗаказНаПроизводствоВыходныеИзделия.Номенклатура = ВыполнениеИзделий.Номенклатура
	|					И ЗаказНаПроизводствоВыходныеИзделия.Характеристика = ВыполнениеИзделий.Характеристика
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполнениеЭтапов КАК ЭтапВыпускаПоГрафику
	|				ПО ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ЭтапВыпускаПоГрафику.Заказ
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ЭтапВыпускаПоГрафику.КлючСвязиПродукция
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиЭтапы = ЭтапВыпускаПоГрафику.КлючСвязиЭтапы
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапыЗаказовНаПроизводство КАК ЭтапВыпуска
	|				ПО ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ЭтапВыпуска.Заказ
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ЭтапВыпуска.КлючСвязиПродукция
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиЭтапы = ЭтапВыпуска.КлючСвязи
	|			ПО (ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ЗаказНаПроизводствоПродукция.Ссылка)
	|				И (ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи)
	|				И (ЗаказНаПроизводствоВыходныеИзделия.Номенклатура = ЗаказНаПроизводствоПродукция.Номенклатура)
	|				И (ЗаказНаПроизводствоВыходныеИзделия.Характеристика = ЗаказНаПроизводствоПродукция.Характеристика)
	|	ГДЕ
	|		ЗаказНаПроизводствоПродукция.Ссылка В(&СписокЗаказов)
	|		И (НЕ &ОтборПоПродукции
	|				ИЛИ &ОтборПоПродукции
	|					И ЗаказНаПроизводствоПродукция.КодСтроки В (&СписокКодовСтрокПродукции))) КАК ТаблицаПродукции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПолуфабрикатов.Заказ,
	|	ТаблицаПолуфабрикатов.Номер,
	|	ТаблицаПолуфабрикатов.Дата,
	|	ТаблицаПолуфабрикатов.НомерСтрокиПродукция,
	|	ТаблицаПолуфабрикатов.НомерСтрокиПолуфабрикат,
	|	ТаблицаПолуфабрикатов.Номенклатура,
	|	ТаблицаПолуфабрикатов.Характеристика,
	|	ТаблицаПолуфабрикатов.НоменклатураПредставление,
	|	ТаблицаПолуфабрикатов.ХарактеристикаПредставление,
	|	ТаблицаПолуфабрикатов.ПодразделениеИзготовитель,
	|	ТаблицаПолуфабрикатов.ДатаПотребности,
	|	ТаблицаПолуфабрикатов.ГрафикРассчитан,
	|	ТаблицаПолуфабрикатов.КодСтрокиПродукция,
	|	ТаблицаПолуфабрикатов.КлючСвязиПродукция,
	|	ТаблицаПолуфабрикатов.КлючСвязиПолуфабрикат,
	|	ТаблицаПолуфабрикатов.КлючСвязиЭтапПотребляющийПолуфабрикат,
	|	ТаблицаПолуфабрикатов.Упаковка,
	|	ТаблицаПолуфабрикатов.УпаковкаКоэффициент,
	|	ТаблицаПолуфабрикатов.ЕдиницаИзмерения,
	|	ТаблицаПолуфабрикатов.КоличествоПоЗаказу,
	|	ТаблицаПолуфабрикатов.КоличествоПоЗаказу,
	|	ТаблицаПолуфабрикатов.КоличествоВыполнено,
	|	ВЫБОР
	|		КОГДА ТаблицаПолуфабрикатов.КоличествоПоЗаказу - ТаблицаПолуфабрикатов.КоличествоВыполнено > 0
	|			ТОГДА ТаблицаПолуфабрикатов.КоличествоПоЗаказу - ТаблицаПолуфабрикатов.КоличествоВыполнено
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаПолуфабрикатов.ВыходныхИзделийНаЕдиницуСледующегоЭтапа * ТаблицаПолуфабрикатов.КоличествоЭтаповПотребляющихПолуфабрикат,
	|	ВЫБОР
	|		КОГДА ТаблицаПолуфабрикатов.КоличествоПоЗаказу - ТаблицаПолуфабрикатов.ВыходныхИзделийНаЕдиницуСледующегоЭтапа * ТаблицаПолуфабрикатов.КоличествоЭтаповПотребляющихПолуфабрикат > 0
	|			ТОГДА ТаблицаПолуфабрикатов.КоличествоПоЗаказу - ТаблицаПолуфабрикатов.ВыходныхИзделийНаЕдиницуСледующегоЭтапа * ТаблицаПолуфабрикатов.КоличествоЭтаповПотребляющихПолуфабрикат
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаПолуфабрикатов.ВыходныхИзделийНаОдинЭтап,
	|	ТаблицаПолуфабрикатов.ВыходныхИзделийНаЕдиницуСледующегоЭтапа,
	|	ВЫБОР
	|		КОГДА ТаблицаПолуфабрикатов.КоличествоПоЗаказу - ТаблицаПолуфабрикатов.КоличествоВыполнено = 0
	|			ТОГДА ТаблицаПолуфабрикатов.ДатаОкончанияФакт
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ТаблицаПолуфабрикатов.ДатаОкончанияПлан,
	|	ВЫБОР
	|		КОГДА ТаблицаПолуфабрикатов.ДатаОкончанияПлан < &ТекущаяДата
	|				И ТаблицаПолуфабрикатов.КоличествоПоЗаказу - ТаблицаПолуфабрикатов.КоличествоВыполнено <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНаПроизводствоПродукция.Ссылка КАК Заказ,
	|		ЗаказНаПроизводствоПродукция.Ссылка.Номер КАК Номер,
	|		ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК Дата,
	|		ЗаказНаПроизводствоПродукция.НомерСтроки КАК НомерСтрокиПродукция,
	|		ЗаказНаПроизводствоВыходныеИзделия.НомерСтроки КАК НомерСтрокиПолуфабрикат,
	|		ЗаказНаПроизводствоВыходныеИзделия.Номенклатура КАК Номенклатура,
	|		ЗаказНаПроизводствоВыходныеИзделия.Характеристика КАК Характеристика,
	|		ЕСТЬNULL(ЗаказНаПроизводствоВыходныеИзделия.Номенклатура.Представление, """") КАК НоменклатураПредставление,
	|		ЕСТЬNULL(ЗаказНаПроизводствоВыходныеИзделия.Характеристика.Представление, """") КАК ХарактеристикаПредставление,
	|		ЕСТЬNULL(ЭтапВыпускаПоГрафику.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеИзготовитель,
	|		ЗаказНаПроизводствоПродукция.ДатаПотребности КАК ДатаПотребности,
	|		ЗаказНаПроизводствоПродукция.ГрафикРассчитан КАК ГрафикРассчитан,
	|		ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтрокиПродукция,
	|		ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|		ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязи КАК КлючСвязиПолуфабрикат,
	|		ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиЭтапы КАК КлючСвязиЭтапПотребляющийПолуфабрикат,
	|		ЗаказНаПроизводствоВыходныеИзделия.Упаковка КАК Упаковка,
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) КАК УпаковкаКоэффициент,
	|		ВЫБОР
	|			КОГДА ЗаказНаПроизводствоВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ЗаказНаПроизводствоВыходныеИзделия.Упаковка.Представление
	|			ИНАЧЕ ЗаказНаПроизводствоВыходныеИзделия.Номенклатура.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ЗаказНаПроизводствоВыходныеИзделия.КоличествоУпаковок КАК КоличествоПоЗаказу,
	|		ВЫБОР
	|			КОГДА ЗаказНаПроизводствоВыходныеИзделия.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) <> 0
	|							ТОГДА ЕСТЬNULL(ВыполнениеИзделий.Количество, 0) / &ТекстЗапросаКоэффициентУпаковки
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(ВыполнениеИзделий.Количество, 0)
	|		КОНЕЦ КАК КоличествоВыполнено,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭтапВыпуска.Количество, 0) > 0
	|				ТОГДА ЗаказНаПроизводствоВыходныеИзделия.КоличествоУпаковок / ЭтапВыпуска.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВыходныхИзделийНаОдинЭтап,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭтапВыпуска.Количество, 0) > 0
	|					И ЕСТЬNULL(ЭтапВыпуска.КоличествоЭтаповНаЕдиницуСледующегоЭтапа, 0) > 0
	|				ТОГДА ЭтапВыпуска.КоличествоЭтаповНаЕдиницуСледующегоЭтапа * ЗаказНаПроизводствоВыходныеИзделия.КоличествоУпаковок / ЭтапВыпуска.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВыходныхИзделийНаЕдиницуСледующегоЭтапа,
	|		ЕСТЬNULL(ЭтапПотребляющийПолуфабрикат.Количество, 0) КАК КоличествоЭтаповПотребляющихПолуфабрикат,
	|		ЕСТЬNULL(ЭтапВыпускаПоГрафику.ДатаОкончанияПлан, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПлан,
	|		ЕСТЬNULL(ВыполнениеИзделий.ДатаОкончанияФакт, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияФакт
	|	ИЗ
	|		Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоМатериалыИУслуги
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказНаПроизводствоВыходныеИзделия
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполнениеИзделий КАК ВыполнениеИзделий
	|				ПО ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ВыполнениеИзделий.Заказ
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ВыполнениеИзделий.КлючСвязиПродукция
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиЭтапы = ВыполнениеИзделий.КлючСвязиЭтапы
	|					И ЗаказНаПроизводствоВыходныеИзделия.Номенклатура = ВыполнениеИзделий.Номенклатура
	|					И ЗаказНаПроизводствоВыходныеИзделия.Характеристика = ВыполнениеИзделий.Характеристика
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполнениеЭтапов КАК ЭтапВыпускаПоГрафику
	|				ПО ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ЭтапВыпускаПоГрафику.Заказ
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ЭтапВыпускаПоГрафику.КлючСвязиПродукция
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиЭтапы = ЭтапВыпускаПоГрафику.КлючСвязиЭтапы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|				ПО (ЗаказНаПроизводствоПродукция.Ссылка = ЗаказНаПроизводствоВыходныеИзделия.Ссылка)
	|					И (ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапыЗаказовНаПроизводство КАК ЭтапВыпуска
	|				ПО ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ЭтапВыпуска.Заказ
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ЭтапВыпуска.КлючСвязиПродукция
	|					И ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиЭтапы = ЭтапВыпуска.КлючСвязи
	|			ПО (ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПолуфабрикат = ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязи)
	|				И (ЗаказНаПроизводствоВыходныеИзделия.ПроизводитсяВПроцессе)
	|				И (ЗаказНаПроизводствоВыходныеИзделия.Ссылка = ЗаказНаПроизводствоМатериалыИУслуги.Ссылка)
	|				И (ЗаказНаПроизводствоВыходныеИзделия.КлючСвязиПродукция = ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиПродукция)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыЗаказовНаПроизводство КАК ЭтапПотребляющийПолуфабрикат
	|			ПО ЗаказНаПроизводствоМатериалыИУслуги.Ссылка = ЭтапПотребляющийПолуфабрикат.Заказ
	|				И ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиПродукция = ЭтапПотребляющийПолуфабрикат.КлючСвязиПродукция
	|				И ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиЭтапы = ЭтапПотребляющийПолуфабрикат.КлючСвязи
	|	ГДЕ
	|		ЗаказНаПроизводствоПродукция.Ссылка В(&СписокЗаказов)
	|		И (НЕ &ОтборПоПродукции
	|				ИЛИ &ОтборПоПродукции
	|					И ЗаказНаПроизводствоПродукция.КодСтроки В (&СписокКодовСтрокПродукции))
	|		И ЗаказНаПроизводствоМатериалыИУслуги.ПроизводитсяВПроцессе
	|		И ЗаказНаПроизводствоМатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации) КАК ТаблицаПолуфабрикатов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер,
	|	Заказ,
	|	НомерСтрокиПродукция,
	|	НомерСтрокиПолуфабрикат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыЗаказовНаПроизводство.Заказ КАК Заказ,
	|	ЭтапыЗаказовНаПроизводство.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|	ЭтапыЗаказовНаПроизводство.ПодразделениеИзготовитель КАК ПодразделениеИзготовитель,
	|	ЭтапыЗаказовНаПроизводство.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЭтапыЗаказовНаПроизводство.НомерЭтапа КАК НомерЭтапа,
	|	ЭтапыЗаказовНаПроизводство.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ЭтапыЗаказовНаПроизводство.КлючСвязи КАК КлючСвязи,
	|	ЭтапыЗаказовНаПроизводство.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ЭтапыЗаказовНаПроизводство.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ЭтапыЗаказовНаПроизводство.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ЭтапыЗаказовНаПроизводство.КлючСвязиПолуфабрикат КАК КлючСвязиПолуфабрикат,
	|	ЭтапыЗаказовНаПроизводство.Количество КАК КоличествоПоЗаказу,
	|	ЭтапыЗаказовНаПроизводство.Количество КАК КоличествоЗапланировано,
	|	ЭтапыЗаказовНаПроизводство.Количество - ЕСТЬNULL(ВыполнениеЭтапов.КоличествоОсталось, 0) КАК КоличествоВыполнено,
	|	ЕСТЬNULL(ВыполнениеЭтапов.КоличествоВыполняется, 0) КАК КоличествоВыполняется,
	|	ЕСТЬNULL(ВыполнениеЭтапов.КоличествоОсталось, 0) КАК КоличествоОсталось,
	|	ЭтапыЗаказовНаПроизводство.Количество КАК КоличествоТребуется,
	|	0 КАК КоличествоИзлишек,
	|	ЭтапыЗаказовНаПроизводство.КоличествоЭтаповНаЕдиницуСледующегоЭтапа КАК КоличествоЭтаповНаЕдиницуСледующегоЭтапа,
	|	ЕСТЬNULL(ВыполнениеЭтапов.ДатаОкончанияПлан, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПлан,
	|	ЕСТЬNULL(ВыполнениеИзделий.ДатаОкончанияФакт, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияФакт
	|ИЗ
	|	ВТЭтапыЗаказовНаПроизводство КАК ЭтапыЗаказовНаПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполнениеЭтапов КАК ВыполнениеЭтапов
	|		ПО ЭтапыЗаказовНаПроизводство.Заказ = ВыполнениеЭтапов.Заказ
	|			И ЭтапыЗаказовНаПроизводство.КлючСвязиПродукция = ВыполнениеЭтапов.КлючСвязиПродукция
	|			И ЭтапыЗаказовНаПроизводство.КлючСвязи = ВыполнениеЭтапов.КлючСвязиЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполнениеИзделий КАК ВыполнениеИзделий
	|		ПО ЭтапыЗаказовНаПроизводство.Заказ = ВыполнениеИзделий.Заказ
	|			И ЭтапыЗаказовНаПроизводство.КлючСвязиПродукция = ВыполнениеИзделий.КлючСвязиПродукция
	|			И ЭтапыЗаказовНаПроизводство.КлючСвязи = ВыполнениеИзделий.КлючСвязиЭтапы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	КлючСвязиПолуфабрикат,
	|	НомерЭтапа УБЫВ,
	|	НаименованиеЭтапа";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЗаказНаПроизводствоВыходныеИзделия.Упаковка",
			"ЗаказНаПроизводствоВыходныеИзделия.Номенклатура"));
	
	Запрос.УстановитьПараметр("ПустойКлюч", ПустойКлюч);
	Запрос.УстановитьПараметр("ТекущаяДата", Параметры.ТекущаяДатаСеанса);
	
	Запрос.УстановитьПараметр("СписокЗаказов", Параметры.СписокЗаказов);
	Запрос.УстановитьПараметр("СписокКодовСтрокПродукции", Параметры.СписокКодовСтрокПродукции);
	
	Запрос.УстановитьПараметр("ОтборПоПродукции", Параметры.СписокКодовСтрокПродукции.Количество() > 0);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	Результат = Новый Структура;
	
	// Выходные изделия (продукция и полуфабрикаты)
	ВыходныеИзделия = РезультатЗапроса[КоличествоПакетов-2].Выгрузить();
	
	ДобавитьПолеДопУпорядочивания(ВыходныеИзделия);
	
	ВыходныеИзделия.Индексы.Добавить("Заказ, КлючСвязиПродукция, КлючСвязиПолуфабрикат");
	ВыходныеИзделия.Индексы.Добавить("Заказ, КлючСвязиПродукция, КлючСвязиЭтапПотребляющийПолуфабрикат");
	ВыходныеИзделия.Индексы.Добавить("КлючСвязиПолуфабрикат");
	
	Результат.Вставить("ВыходныеИзделия", ВыходныеИзделия);
	
	// Этапы производства
	Этапы = РезультатЗапроса[КоличествоПакетов-1].Выгрузить();
	
	ДобавитьПолеДопУпорядочивания(Этапы);
	
	Этапы.Колонки.Добавить("Уровень");
	Этапы.Колонки.Добавить("НомерЭтапаФорма");
	Этапы.Колонки.Добавить("НомерСледующегоЭтапаФорма");
	Этапы.Колонки.Добавить("ЭтапВыполнен");
	
	Этапы.Индексы.Добавить("Заказ, КлючСвязиПродукция");
	Этапы.Индексы.Добавить("Заказ, КлючСвязиПродукция, КлючСвязиПолуфабрикат");
	
	Результат.Вставить("Этапы", Этапы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Функция формирует дерево данных содеражащее состояние выполнения заказов на производство.
//
// Параметры:
//  Параметры	 - Структура - содержит параметры построения дерева.
// 
// Возвращаемое значение:
//   - ДеревоЗначений - дерево состояния заказов на производство.
//
Функция ПостроитьДеревоСостояниеЗаказовНаПроизводство(Параметры) Экспорт
	
	// Считываем из временного хранилища данные о выполнении заказов
	СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
	
	// Инициализирум дерево "Состояние заказов"
	СостояниеЗаказов = Новый ДеревоЗначений;
	
	СостояниеЗаказов.Колонки.Добавить("ТипСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	СостояниеЗаказов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	
	СостояниеЗаказов.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));	
	СостояниеЗаказов.Колонки.Добавить("КлючСвязиПродукция", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СостояниеЗаказов.Колонки.Добавить("КлючСвязиПолуфабрикат", Новый ОписаниеТипов("УникальныйИдентификатор"));
	СостояниеЗаказов.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	СостояниеЗаказов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СостояниеЗаказов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СостояниеЗаказов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("Строка"));
	
	СостояниеЗаказов.Колонки.Добавить("ПодразделениеИзготовитель", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
	СостояниеЗаказов.Колонки.Добавить("ГрафикРассчитан", Новый ОписаниеТипов("Булево"));
	СостояниеЗаказов.Колонки.Добавить("ПредставлениеНоменклатураЭтап", Новый ОписаниеТипов("Строка"));
	
	СостояниеЗаказов.Колонки.Добавить("КоличествоПоЗаказу", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("КоличествоЗапланировано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("КоличествоВыполнено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("КоличествоОсталось", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("КоличествоИзлишек", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("КоличествоВыполняется", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("КоличествоВыполняетсяСУчетомПолуфабрикатов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("КоличествоТребуется", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));	
	
	СостояниеЗаказов.Колонки.Добавить("ПроцентВыполнено", Новый ОписаниеТипов("Строка"));
	
	СостояниеЗаказов.Колонки.Добавить("ПоказыватьВыполняется", Новый ОписаниеТипов("Булево"));
	
	СостояниеЗаказов.Колонки.Добавить("НомерКартинкиПроцентВыполнено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	СостояниеЗаказов.Колонки.Добавить("НомерКартинкиВыполняется", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	СостояниеЗаказов.Колонки.Добавить("НомерКартинкиИзлишек", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	СостояниеЗаказов.Колонки.Добавить("ДатаОкончанияПлан", Новый ОписаниеТипов("Дата"));
	СостояниеЗаказов.Колонки.Добавить("ДатаОкончанияФакт", Новый ОписаниеТипов("Дата"));
	СостояниеЗаказов.Колонки.Добавить("ДатаОкончанияПоГрафикуПросрочена", Новый ОписаниеТипов("Булево"));
	
	СостояниеЗаказов.Колонки.Добавить("СтатусВыполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат СостояниеЗаказов;
	КонецЕсли;
	
	// Добавим служебные колонки	
	СостояниеЗаказов.Колонки.Добавить("КлючСвязиЭтапПотребляющийПолуфабрикат", Новый ОписаниеТипов("УникальныйИдентификатор"));	
	СостояниеЗаказов.Колонки.Добавить("ВыходныхИзделийНаОдинЭтап", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	СостояниеЗаказов.Колонки.Добавить("ВыходныхИзделийНаЕдиницуСледующегоЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	// Заполняем дерево "Состояние заказов" от продукции
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Продукция = НайтиСтрокиССохранениемПорядка(СтруктураДанных.ВыходныеИзделия, Новый Структура("КлючСвязиПолуфабрикат", ПустойКлюч));
	
	Для Каждого ДанныеПродукции Из Продукция Цикл
		
		СтрокаПродукция = СостояниеЗаказов.Строки.Добавить();
		
		ЗаполнитьСтрокуДереваСостояниеЗаказов(1, СтрокаПродукция, ДанныеПродукции);
		
		Если НЕ ДанныеПродукции.ГрафикРассчитан Тогда
			Продолжить;
		КонецЕсли;
		
		ИтоговыеДанные = СтруктураИтоговыеДанные();
		
		ДобавитьСтрокуЭтаповРекурсивно(СтрокаПродукция, СтруктураДанных, ИтоговыеДанные, Параметры);
		
		ДозаполнитьСтрокуДереваСостояниеЗаказов(1, СтрокаПродукция, ИтоговыеДанные);
		
	КонецЦикла; 
	
	// Удалим служебные колонки
	СостояниеЗаказов.Колонки.Удалить(СостояниеЗаказов.Колонки.КлючСвязиЭтапПотребляющийПолуфабрикат);
	СостояниеЗаказов.Колонки.Удалить(СостояниеЗаказов.Колонки.ВыходныхИзделийНаОдинЭтап);
	СостояниеЗаказов.Колонки.Удалить(СостояниеЗаказов.Колонки.ВыходныхИзделийНаЕдиницуСледующегоЭтапа);
	
	Возврат СостояниеЗаказов;
	
КонецФункции

// Функция возвращает адрес результата сокращения процесса производства
//
// Параметры:
//  Параметры - Структура - параметры сокращения
// Возвращаемое значение:
//  Строка - адрес результата сокращения.
Функция СократитьПроизводство(Параметры) Экспорт
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");

	СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
	
	СтруктураОтбора = Новый Структура("Заказ, КлючСвязиПродукция, КлючСвязиПолуфабрикат",
		Параметры.ПараметрыСокращения.Заказ,
		Параметры.ПараметрыСокращения.КлючСвязиПродукция,
		Параметры.ПараметрыСокращения.КлючСвязиПолуфабрикат);
		
	ВыходноеИзделие = СтруктураДанных.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора)[0];
	
	СократитьПроизводствоРекурсивно(ВыходноеИзделие, СтруктураДанных, Параметры.ПараметрыСокращения);
	
	Если Не СтруктураДанных.Свойство("БезопасноеСокращение") Тогда
		СтруктураДанных.Вставить("БезопасноеСокращение", Параметры.ПараметрыСокращения.БезопасноеСокращение);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанных, Параметры.УникальныйИдентификатор);
	
КонецФункции

// Функция помещающая результат сокращения в строку спецификации заказа
//
// Параметры:
//  Параметры - Структура - параметры редактирования 
// Возвращаемое значение:
//   - Структура - спецификация строки заказа.
Функция РезультатРедактированияСтрокиСпецификацииЗаказа(Параметры) Экспорт
	
	Если Параметры.Свойство("СтруктураДанных") Тогда
		СтруктураДанных = Параметры.СтруктураДанных;
	Иначе
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
	КонецЕсли;
	
	Если Параметры.Свойство("СпецификацияСтрокиЗаказа") Тогда
		СпецификацияСтрокиЗаказа = Параметры.СпецификацияСтрокиЗаказа;
	Иначе
		СпецификацияСтрокиЗаказа = ПолучитьИзВременногоХранилища(Параметры.АдресСпецификация);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ОсновноеИзделие") Тогда
		ОсновноеИзделие = СтруктураДанных.ОсновноеИзделие;
	Иначе
		ОсновноеИзделие = ОсновноеИзделие(СтруктураДанных, Параметры);
	КонецЕсли;
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ОтборКлючСвязи = Новый Структура("КлючСвязи");
	ОтборКлючСвязиЭтапы = Новый Структура("КлючСвязиЭтапы");
	
	ОтборЭтапы = Новый Структура("Заказ, КлючСвязиПродукция", 
		Параметры.Заказ, 
		Параметры.КлючСвязиПродукция);
		
	ОтборПродукция =  Новый Структура("Заказ, КлючСвязиПродукция, КлючСвязиПолуфабрикат",
		Параметры.Заказ, 
		Параметры.КлючСвязиПродукция, 
		ПустойКлюч);
		
	ОтборПолуфабрикат = Новый Структура("Заказ, КлючСвязиПродукция, КлючСвязиПолуфабрикат",
		Параметры.Заказ, 
		Параметры.КлючСвязиПродукция);
	
	ОтборМатериалыПроизводимыеВПроцессе = Новый Структура("КлючСвязиЭтапы, ПроизводитсяВПроцессе", ПустойКлюч, Истина);
	
	СокращенныеЭтапы = Новый ТаблицаЗначений;
	СокращенныеЭтапы.Колонки.Добавить("КлючСвязи");
	СокращенныеЭтапы.Колонки.Добавить("КоличествоЭтапов");
	СокращенныеЭтапы.Колонки.Добавить("КоличествоЭтаповИсходный");
	
	Для Каждого СтрокаЭтап Из СтруктураДанных.Этапы.НайтиСтроки(ОтборЭтапы) Цикл
		
		ОтборКлючСвязи.КлючСвязи = СтрокаЭтап.КлючСвязи;
		ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		ОтборМатериалыПроизводимыеВПроцессе.КлючСвязиЭтапы = СтрокаЭтап.КлючСвязи;
		
		Если СтрокаЭтап.КоличествоПоЗаказу = СтрокаЭтап.КоличествоЗапланировано Тогда
			Продолжить;
		КонецЕсли;
		
		//Этапы
		ЭтапСпецификации = СпецификацияСтрокиЗаказа.Этапы.НайтиСтроки(ОтборКлючСвязи)[0];
		
		КоличествоЭтапов = СтрокаЭтап.КоличествоЗапланировано;
		КоличествоЭтаповИсходный = ЭтапСпецификации.Количество;
		
		ЭтапСпецификации.Количество = КоличествоЭтапов;
		
		СокращенныйЭтап = СокращенныеЭтапы.Добавить();
		СокращенныйЭтап.КлючСвязи = СтрокаЭтап.КлючСвязи;
		СокращенныйЭтап.КоличествоЭтапов = КоличествоЭтапов;
		СокращенныйЭтап.КоличествоЭтаповИсходный = КоличествоЭтаповИсходный;
		
		Если ЭтапСпецификации.Количество > 0 Тогда
			
			// МатериалыИУслуги (полуфабрикаты производимые в процессе)
			НайденныеСтроки = СпецификацияСтрокиЗаказа.МатериалыИУслуги.НайтиСтроки(ОтборМатериалыПроизводимыеВПроцессе);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Количество = Строка.Количество * КоличествоЭтапов/КоличествоЭтаповИсходный;
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * КоличествоЭтапов/КоличествоЭтаповИсходный;
			КонецЦикла;
			
			//ВозвратныеОтходы
			НайденныеСтроки = СпецификацияСтрокиЗаказа.ВозвратныеОтходы.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Количество = Строка.Количество * КоличествоЭтапов/КоличествоЭтаповИсходный;
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * КоличествоЭтапов/КоличествоЭтаповИсходный;
			КонецЦикла;
			
			//Трудозатраты
			НайденныеСтроки = СпецификацияСтрокиЗаказа.Трудозатраты.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Количество = Строка.Количество * КоличествоЭтапов/КоличествоЭтаповИсходный;
			КонецЦикла;
		
			//ВыходныеИзделия
			НайденныеСтроки = СпецификацияСтрокиЗаказа.ВыходныеИзделия.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Количество = Строка.Количество * КоличествоЭтапов/КоличествоЭтаповИсходный;
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * КоличествоЭтапов/КоличествоЭтаповИсходный;
			КонецЦикла;
			
		Иначе
			
			// МатериалыИУслуги (полуфабрикаты производимые в процессе)
			НайденныеСтроки = СпецификацияСтрокиЗаказа.МатериалыИУслуги.НайтиСтроки(ОтборМатериалыПроизводимыеВПроцессе);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.Количество = 0;
				Строка.КоличествоУпаковок = 0;
			КонецЦикла;
			
			//ВозвратныеОтходы
			НайденныеСтроки = СпецификацияСтрокиЗаказа.ВозвратныеОтходы.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				СпецификацияСтрокиЗаказа.ВозвратныеОтходы.Удалить(Строка);
			КонецЦикла;
			
			//Трудозатраты
			НайденныеСтроки = СпецификацияСтрокиЗаказа.Трудозатраты.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				СпецификацияСтрокиЗаказа.Трудозатраты.Удалить(Строка);
			КонецЦикла;
			
			//ВыходныеИзделия
			НайденныеСтроки = СпецификацияСтрокиЗаказа.ВыходныеИзделия.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если Строка.ПроизводитсяВПроцессе 
					ИЛИ (СпецификацияСтрокиЗаказа.СтруктураПродукции.Номенклатура = Строка.Номенклатура 
						И СпецификацияСтрокиЗаказа.СтруктураПродукции.Характеристика = Строка.Характеристика) Тогда
					Строка.Количество = 0;
					Строка.КоличествоУпаковок = 0;
				Иначе
					СпецификацияСтрокиЗаказа.ВыходныеИзделия.Удалить(Строка);
				КонецЕсли;
					
			КонецЦикла;
			
			//ВидыРабочихЦентров
			НайденныеСтроки = СпецификацияСтрокиЗаказа.ВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				СпецификацияСтрокиЗаказа.ВидыРабочихЦентров.Удалить(Строка);
			КонецЦикла;
			
			//АльтернативныеВидыРабочихЦентров
			НайденныеСтроки = СпецификацияСтрокиЗаказа.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка Из НайденныеСтроки Цикл
				СпецификацияСтрокиЗаказа.АльтернативныеВидыРабочихЦентров.Удалить(Строка);
			КонецЦикла;
			
			Если Не ЭтапСпецификации.ЭтапВосстановленияБрака Тогда
				НайденныеСтроки = СпецификацияСтрокиЗаказа.ЭтапыВосстановленияБрака.НайтиСтроки(ОтборКлючСвязиЭтапы);
				Для Каждого Строка Из НайденныеСтроки Цикл
					СпецификацияСтрокиЗаказа.ЭтапыВосстановленияБрака.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Корректировка заказа материалов
	ЗаказМатериалов = Неопределено;
	Если СтруктураДанных.Свойство("ЗаказМатериалов") Тогда
		ЗаказМатериалов = СтруктураДанных.ЗаказМатериалов;
	КонецЕсли;
	
	КорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.СкорректироватьЗаказМатериаловВПроизводство(
		Параметры.Заказ, Параметры.КлючСвязиПродукция, СокращенныеЭтапы, ЗаказМатериалов);
	
	СпецификацияСтрокиЗаказа.Вставить("КорректировкиЗаказаМатериалов", КорректировкиЗаказаМатериалов);
	
	// Отмена неактуальных маршрутных листов
	ПланированиеПроизводства.ДобавитьПараметрыАктуализацииМаршрутныхЛистов(
		СпецификацияСтрокиЗаказа, Параметры.Заказ, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.КодСтрокиПродукция));
	
	// Планируемого поступления продукции после сокращения
	Если ОсновноеИзделие.Количество <> СпецификацияСтрокиЗаказа.СтруктураПродукции.Количество Тогда
		
		СпецификацияСтрокиЗаказа.СтруктураПродукции.Количество = ОсновноеИзделие.Количество; 
		ПересчитатьКоличествоУпаковокВСтроке(СпецификацияСтрокиЗаказа.СтруктураПродукции);
		
	КонецЕсли;
	
	Возврат СпецификацияСтрокиЗаказа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДерева

Процедура ДобавитьСтрокуЭтаповРекурсивно(СтрокаПродукция, СтруктураДанных, ИтоговыеДанные, Параметры)

	ОтборЭтапы = Новый Структура;
	ОтборЭтапы.Вставить("Заказ", СтрокаПродукция.Заказ);
	ОтборЭтапы.Вставить("КлючСвязиПродукция", СтрокаПродукция.КлючСвязиПродукция);
	ОтборЭтапы.Вставить("КлючСвязиПолуфабрикат", СтрокаПродукция.КлючСвязиПолуфабрикат);
	
	ЭтапыПродукции = НайтиСтрокиССохранениемПорядка(СтруктураДанных.Этапы, ОтборЭтапы);
	
	ОтборПолуфабрикаты = Новый Структура("Заказ, КлючСвязиПродукция, КлючСвязиЭтапПотребляющийПолуфабрикат");
	
	Для Каждого ЭтапПродукции Из ЭтапыПродукции Цикл
		
		Если Параметры.ПоказыватьЭтапы Тогда
			СтрокаЭтап = СтрокаПродукция.Строки.Добавить();
			ЗаполнитьСтрокуДереваСостояниеЗаказов(3, СтрокаЭтап, ЭтапПродукции); 
		КонецЕсли; 
		
		ОтборПолуфабрикаты.Заказ = ЭтапПродукции.Заказ;
		ОтборПолуфабрикаты.КлючСвязиПродукция = ЭтапПродукции.КлючСвязиПродукция;
		ОтборПолуфабрикаты.КлючСвязиЭтапПотребляющийПолуфабрикат = ЭтапПродукции.КлючСвязи;
		
		ПолуфабрикатыЭтапа = НайтиСтрокиССохранениемПорядка(СтруктураДанных.ВыходныеИзделия, ОтборПолуфабрикаты);
		
		Для Каждого ПолуфабрикатЭтапа Из ПолуфабрикатыЭтапа Цикл
			
			ИтогиПоПолуфабрикату = СтруктураИтоговыеДанные(); 
				
			Если Параметры.ПоказыватьЭтапы Тогда
				СтрокаПолуфабрикат = СтрокаЭтап.Строки.Добавить();
			Иначе
				СтрокаПолуфабрикат = СтрокаПродукция.Строки.Добавить();
			КонецЕсли;
			
			ЗаполнитьСтрокуДереваСостояниеЗаказов(2, СтрокаПолуфабрикат, ПолуфабрикатЭтапа);
			
			ДобавитьСтрокуЭтаповРекурсивно(СтрокаПолуфабрикат, СтруктураДанных, ИтогиПоПолуфабрикату, Параметры);
			
			ДозаполнитьСтрокуДереваСостояниеЗаказов(2, СтрокаПолуфабрикат, ИтогиПоПолуфабрикату);
			
			ПересчитатьИтоговыеДанные(СтрокаПолуфабрикат, ИтоговыеДанные);
			
		КонецЦикла; 
		
		РассчитатьИтоговыеДанные(ЭтапПродукции, ИтоговыеДанные);
		Если Параметры.ПоказыватьЭтапы Тогда
			ДозаполнитьСтрокуДереваСостояниеЗаказов(3, СтрокаЭтап, ИтоговыеДанные);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДереваСостояниеЗаказов(ТипСтроки, ТекущаяСтрока, ДанныеЗаполнения)
	
	//ТипСтроки = 1 - "Продукция"
	//ТипСтроки = 2 - "Полуфабрикат"
	//ТипСтроки = 3 - "Этап"
	
	Если ТипСтроки = 1 Тогда
		
		ТекущаяСтрока.ТипСтроки = 1;
		ТекущаяСтрока.НомерКартинки = 0;
		
		ТекущаяСтрока.ПредставлениеНоменклатураЭтап = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
			ДанныеЗаполнения.НоменклатураПредставление,
			ДанныеЗаполнения.ХарактеристикаПредставление
		);
		
		Если НЕ ДанныеЗаполнения.ГрафикРассчитан Тогда
			ТекущаяСтрока.ПредставлениеНоменклатураЭтап = ТекущаяСтрока.ПредставлениеНоменклатураЭтап + ". " + НСтр("ru = 'График не рассчитан.';
																													|en = 'Schedule is not calculated.'");		
		КонецЕсли;
		
	ИначеЕсли ТипСтроки = 2 Тогда
		
		ТекущаяСтрока.ТипСтроки = 2;
		ТекущаяСтрока.НомерКартинки = 6;
		
		ТекущаяСтрока.ПредставлениеНоменклатураЭтап = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
			ДанныеЗаполнения.НоменклатураПредставление,
			ДанныеЗаполнения.ХарактеристикаПредставление);
		
	ИначеЕсли ТипСтроки = 3 Тогда
		
		ТекущаяСтрока.ТипСтроки = 3;
		ТекущаяСтрока.НомерКартинки = 1;
		
		ТекущаяСтрока.ПредставлениеНоменклатураЭтап = ДанныеЗаполнения.НаименованиеЭтапа;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеЗаполнения); 
	
	ТекущаяСтрока.НомерКартинкиИзлишек = -1;
	ТекущаяСтрока.НомерКартинкиВыполняется = -1;
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуДереваСостояниеЗаказов(ТипСтроки, ТекущаяСтрока, ИтоговыеДанные)
	
	//ТипСтроки = 1 - "Продукция"
	//ТипСтроки = 2 - "Полуфабрикат"
	//ТипСтроки = 3 - "Этап"
	
	СтрокаРодитель = ТекущаяСтрока.Родитель;
	
	Если ТипСтроки < 3 Тогда // "Продукция" или "Полуфабрикат"
		
		ТекущаяСтрока.КоличествоВыполняется = ТекущаяСтрока.ВыходныхИзделийНаОдинЭтап * ИтоговыеДанные.КоличествоЭтаповВыполняется
			- ТекущаяСтрока.КоличествоВыполнено; 
		
		ТекущаяСтрока.КоличествоВыполняетсяСУчетомПолуфабрикатов =
			ТекущаяСтрока.ВыходныхИзделийНаОдинЭтап * Макс(ИтоговыеДанные.КоличествоЭтаповВыполняется, ИтоговыеДанные.КоличествоВыполняетсяСУчетомПолуфабрикатов) 
			- ТекущаяСтрока.КоличествоВыполнено; 
			
		ТекущаяСтрока.ПоказыватьВыполняется = (ИтоговыеДанные.КоличествоЭтаповВыполняется - ИтоговыеДанные.КоличествоЭтаповВыполнено)  > 0;
			
	Иначе
			
		ТекущаяСтрока.ПоказыватьВыполняется = Истина;
			
	КонецЕсли;
	
	// Сигналы "Обрати внимание"
	ТекущаяСтрока.НомерКартинкиВыполняется = ТекущаяСтрока.НомерКартинкиВыполняется + ?(ТекущаяСтрока.ПоказыватьВыполняется И ТекущаяСтрока.КоличествоВыполняется > 0, 1, 0);
	ТекущаяСтрока.НомерКартинкиИзлишек = ТекущаяСтрока.НомерКартинкиИзлишек + ?(ТекущаяСтрока.КоличествоИзлишек > 0, 1, 0);
	
	Если СтрокаРодитель <> Неопределено Тогда
		
		СтрокаРодитель.НомерКартинкиВыполняется = Макс(
			СтрокаРодитель.НомерКартинкиВыполняется,
			?(ТекущаяСтрока.ПоказыватьВыполняется И ТекущаяСтрока.КоличествоВыполняется > 0 Или ТекущаяСтрока.НомерКартинкиВыполняется > 0, 1, -1)
		);
		
		СтрокаРодитель.НомерКартинкиИзлишек = Макс(
			СтрокаРодитель.НомерКартинкиИзлишек,
			?(ТекущаяСтрока.КоличествоИзлишек > 0 Или ТекущаяСтрока.НомерКартинкиИзлишек > 0, 1, -1)
		);
		
	КонецЕсли;
	
	ТекущаяСтрока.СтатусВыполнения = ?(ТекущаяСтрока.КоличествоЗапланировано = ТекущаяСтрока.КоличествоВыполнено, 1, 0);
	
	// Процент выполнено
	Если ТекущаяСтрока.КоличествоЗапланировано > 0 Тогда
		ПроцентВыполнено = Окр(Мин(ТекущаяСтрока.КоличествоВыполнено/ТекущаяСтрока.КоличествоЗапланировано, 1) * 100);
	Иначе
		ПроцентВыполнено = 0;
	КонецЕсли;
	
	Если ПроцентВыполнено > 0 Тогда
		ТекущаяСтрока.ПроцентВыполнено = Формат(ПроцентВыполнено, "ЧЦ=3; ЧН=") + "%";
	Иначе
		ТекущаяСтрока.ПроцентВыполнено = "0%";
	КонецЕсли;
	
	ТекущаяСтрока.НомерКартинкиПроцентВыполнено =
		?(ПроцентВыполнено =	100,	4,
		?(ПроцентВыполнено >=	70,		3,
		?(ПроцентВыполнено >=	40,		2,
		?(ПроцентВыполнено >	0,		1,
										0)))
	);
	
КонецПроцедуры

Функция СтруктураИтоговыеДанные()
	
	Структура = Новый Структура;
	
	Структура.Вставить("КоличествоЭтаповВыполнено", 0);
	Структура.Вставить("КоличествоЭтаповВыполняется", 0);
	Структура.Вставить("КоличествоВыполняетсяСУчетомПолуфабрикатов", 0);
	
	Возврат Структура;
	
КонецФункции

Процедура РассчитатьИтоговыеДанные(ТекущаяСтрока, ИтоговыеДанные)
	
	ИтоговыеДанные.КоличествоЭтаповВыполнено = Макс(ТекущаяСтрока.КоличествоВыполнено, ИтоговыеДанные.КоличествоЭтаповВыполнено);
	ИтоговыеДанные.КоличествоЭтаповВыполняется = Макс(ТекущаяСтрока.КоличествоВыполнено + ТекущаяСтрока.КоличествоВыполняется, ИтоговыеДанные.КоличествоЭтаповВыполняется);
	
КонецПроцедуры

Процедура ПересчитатьИтоговыеДанные(СтрокаПолуфабрикат, ИтоговыеДанные)
	
	Если СтрокаПолуфабрикат.ВыходныхИзделийНаЕдиницуСледующегоЭтапа > 0 Тогда 
		
		РасчетноеКоличествоЭтапов = Макс(СтрокаПолуфабрикат.КоличествоВыполнено + СтрокаПолуфабрикат.КоличествоВыполняетсяСУчетомПолуфабрикатов - СтрокаПолуфабрикат.КоличествоИзлишек, 0) 
										/ СтрокаПолуфабрикат.ВыходныхИзделийНаЕдиницуСледующегоЭтапа;
										
		Если РасчетноеКоличествоЭтапов <> Цел(РасчетноеКоличествоЭтапов) Тогда
			РасчетноеКоличествоЭтапов = Цел(РасчетноеКоличествоЭтапов) + 1;
		КонецЕсли;
		
		ИтоговыеДанные.КоличествоВыполняетсяСУчетомПолуфабрикатов = Макс(РасчетноеКоличествоЭтапов, ИтоговыеДанные.КоличествоВыполняетсяСУчетомПолуфабрикатов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетПоДереву

Процедура СократитьПроизводствоРекурсивно(СтрокаИзделия, СтруктураДанных, Параметры)
	
	ТребуетсяИзделия = Параметры.КоличествоТребуется;
	ТребуетсяЭтапов = ?(СтрокаИзделия.ВыходныхИзделийНаОдинЭтап > 0, Параметры.НовоеКоличество/СтрокаИзделия.ВыходныхИзделийНаОдинЭтап, 0);
	
	РасчетноеКоличествоЭтапов = ТребуетсяЭтапов;
	Если РасчетноеКоличествоЭтапов > Цел(РасчетноеКоличествоЭтапов) Тогда
		РасчетноеКоличествоЭтапов = Цел(РасчетноеКоличествоЭтапов) + 1;
	Иначе
		РасчетноеКоличествоЭтапов = Цел(РасчетноеКоличествоЭтапов);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Заказ", СтрокаИзделия.Заказ);
	СтруктураОтбора.Вставить("КлючСвязиПродукция", СтрокаИзделия.КлючСвязиПродукция);
	СтруктураОтбора.Вставить("КлючСвязиПолуфабрикат", СтрокаИзделия.КлючСвязиПолуфабрикат);
	
	ЭтапыИзделия = СтруктураДанных.Этапы.НайтиСтроки(СтруктураОтбора);
	
	Если Параметры.ДоделатьНачатыеПолуфабрикаты 
		И НЕ (СтрокаИзделия.Заказ = Параметры.Заказ
				И СтрокаИзделия.КлючСвязиПродукция = Параметры.КлючСвязиПродукция
				И СтрокаИзделия.КлючСвязиПолуфабрикат = Параметры.КлючСвязиПолуфабрикат) Тогда
				
		Для Каждого ЭтапИзделия Из ЭтапыИзделия Цикл
			РасчетноеКоличествоЭтапов = Макс(РасчетноеКоличествоЭтапов, ЭтапИзделия.КоличествоВыполнено + ЭтапИзделия.КоличествоВыполняется); 
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаИзделия.КоличествоТребуется = ТребуетсяИзделия;
	СтрокаИзделия.КоличествоЗапланировано = Макс(РасчетноеКоличествоЭтапов * СтрокаИзделия.ВыходныхИзделийНаОдинЭтап, СтрокаИзделия.КоличествоВыполнено, СтрокаИзделия.КоличествоТребуется);
	
	СтрокаИзделия.КоличествоОсталось = Макс(СтрокаИзделия.КоличествоЗапланировано - СтрокаИзделия.КоличествоВыполнено, 0);
	СтрокаИзделия.КоличествоИзлишек = Макс(СтрокаИзделия.КоличествоВыполнено + СтрокаИзделия.КоличествоОсталось - СтрокаИзделия.КоличествоТребуется, 0);
	
	Для Каждого ЭтапИзделия Из ЭтапыИзделия Цикл
		
		Если СтрокаИзделия.ВыходныхИзделийНаОдинЭтап > 0 Тогда
			ЭтапИзделия.КоличествоТребуется = Макс(СтрокаИзделия.КоличествоЗапланировано, СтрокаИзделия.КоличествоТребуется + СтрокаИзделия.КоличествоИзлишек)
													/ СтрокаИзделия.ВыходныхИзделийНаОдинЭтап;
		Иначе
			ЭтапИзделия.КоличествоТребуется = 0;
		КонецЕсли;
		
		ЭтапИзделия.КоличествоЗапланировано = Макс(РасчетноеКоличествоЭтапов, ЭтапИзделия.КоличествоВыполнено + ЭтапИзделия.КоличествоВыполняется, ЭтапИзделия.КоличествоТребуется);
		
		ЭтапИзделия.КоличествоОсталось = Макс(ЭтапИзделия.КоличествоЗапланировано - ЭтапИзделия.КоличествоВыполнено, 0);
		ЭтапИзделия.КоличествоИзлишек = Макс(ЭтапИзделия.КоличествоВыполнено + ЭтапИзделия.КоличествоОсталось - ЭтапИзделия.КоличествоТребуется, 0);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Заказ", ЭтапИзделия.Заказ);
		СтруктураОтбора.Вставить("КлючСвязиПродукция", ЭтапИзделия.КлючСвязиПродукция);
		СтруктураОтбора.Вставить("КлючСвязиЭтапПотребляющийПолуфабрикат", ЭтапИзделия.КлючСвязи);
		
		ПолуфабрикатыЭтапа = СтруктураДанных.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ПолуфабрикатЭтапа Из ПолуфабрикатыЭтапа Цикл
			
			НовоеКоличество = РасчетноеКоличествоЭтапов * ПолуфабрикатЭтапа.ВыходныхИзделийНаЕдиницуСледующегоЭтапа; 
			
			Параметры.Вставить("НовоеКоличество", НовоеКоличество);
			Параметры.Вставить("КоличествоТребуется", НовоеКоличество);
			
			СократитьПроизводствоРекурсивно(ПолуфабрикатЭтапа, СтруктураДанных, Параметры);
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ДобавитьПолеДопУпорядочивания(Таблица)
	
	Таблица.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));

	Порядок = 0;
	Для Каждого Строка Из Таблица Цикл
		Строка.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокиССохранениемПорядка(Таблица, ПараметрыОтбора)
	
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	
	ПредПорядок = -1;
	ТребуетсяДопУпорядочивание = Ложь;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если ПредПорядок > Строка.Порядок Тогда
			ТребуетсяДопУпорядочивание = Истина;
			Прервать;
		КонецЕсли;
		ПредПорядок = Строка.Порядок;
	КонецЦикла;
	
	Если ТребуетсяДопУпорядочивание Тогда
		
		ТаблицаДопУпорядочивания = Таблица.СкопироватьКолонки();
		Для Каждого Строка Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДопУпорядочивания.Добавить(), Строка);
		КонецЦикла;
		
		ТаблицаДопУпорядочивания.Сортировать("Порядок");
		
		НайденныеСтроки = Новый Массив;
		Для Каждого Строка Из ТаблицаДопУпорядочивания Цикл
			НайденныеСтроки.Добавить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Процедура ПересчитатьКоличествоУпаковокВСтроке(ТекущаяСтрока, КэшированныеЗначения = Неопределено)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницВСтроке(ТекущаяСтрока, КэшированныеЗначения = Неопределено)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

Функция ОсновноеИзделие(СтруктураДанных, Параметры)
	
	ОсновноеИзделие = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|КоличествоУпаковок,
		|Количество");
	
	БезопасноеСокращение = 0;
	Если СтруктураДанных.Свойство("БезопасноеСокращение") Тогда
		БезопасноеСокращение = СтруктураДанных.БезопасноеСокращение;
	КонецЕсли;
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ОтборОсновноеИзделие = Новый Структура("Заказ, КлючСвязиПродукция, КлючСвязиПолуфабрикат",
		Параметры.Заказ, Параметры.КлючСвязиПродукция, ПустойКлюч);
	
	СтрокаВыходногоИзделия = СтруктураДанных.ВыходныеИзделия.НайтиСтроки(ОтборОсновноеИзделие)[0];
	
	ЗаполнитьЗначенияСвойств(ОсновноеИзделие, СтрокаВыходногоИзделия);
	
	ОсновноеИзделие.КоличествоУпаковок = Макс(БезопасноеСокращение,
		СтрокаВыходногоИзделия.КоличествоЗапланировано,
		СтрокаВыходногоИзделия.ВыходныхИзделийНаОдинЭтап);
	
	ПересчитатьКоличествоЕдиницВСтроке(ОсновноеИзделие);
	
	Возврат ОсновноеИзделие;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21