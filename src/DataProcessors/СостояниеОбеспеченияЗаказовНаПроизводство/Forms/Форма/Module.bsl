#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаказыДляПроверкиЗаданий();
	УстановитьВидимостьСтраниц(Элементы, ЗаказыДляПроверкиЗаданий);
	
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ВРезерве,
		Перечисления.РаспределениеЗапасовСостояния.ВРезерве, Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе,
		Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе, Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате,
		НСтр("ru = 'Ожидается';
			|en = 'Expected'"), Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате,
		НСтр("ru = 'Ожидается не в срок';
			|en = 'Expected out-of-time'"), Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.Обеспечить,
		Перечисления.РаспределениеЗапасовСостояния.Обеспечить, Истина);
	ОтобранныеСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.НеОбеспечивать,
		Перечисления.РаспределениеЗапасовСостояния.НеОбеспечивать, Истина);
	
	Состояния = СтрокаСостояния(ОтобранныеСостояния);
	
	Заголовок = СтрЗаменить(НСтр("ru = 'Состояние обеспечения: %Заказ%';
								|en = 'Supply forecast: %Заказ%'"), "%Заказ%", Параметры.Заказы);
	
	ВосстановитьНастройки();
	Если ЗаказыДляПроверкиЗаданий.Количество() = 0 Тогда
		УправлениеПараметрамиСписков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаказыДляПроверкиЗаданий.Количество() > 0 Тогда
		
		ИнтервалПереключитьСтраницы = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ПереключитьСтраницы", ИнтервалПереключитьСтраницы, Истина);
		
	Иначе
		
		ЭлементыКорня = Набор.ПолучитьЭлементы();
		Для Каждого ЭлементКорня Из ЭлементыКорня Цикл
			Элементы.Набор.Развернуть(ЭлементКорня.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПометкаЗначенийВСписке" Тогда
		
		ОтобранныеСостояния.Очистить();
		Для Каждого Элемент Из ВыбранноеЗначение Цикл
			ОтобранныеСостояния.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка, Элемент.Картинка);
		КонецЦикла;
		Состояния = СтрокаСостояния(ОтобранныеСостояния);
		УправлениеПараметрамиСписков();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтображатьПриИзменении(Элемент)
	
	СохранитьНастройки();
	УправлениеПараметрамиСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Список,Заголовок", ОтобранныеСостояния, НСтр("ru = 'Состояния обеспечения';
																					|en = 'Supply forecast'"));
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПометкаЗначенийВСписке",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,
		,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНабор

&НаКлиенте
Процедура НаборПриАктивизацииЯчейки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СписокВыборНаКлиенте(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьУсловноеОформлениеСписка(УсловноеОформление, "Набор");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие информационных полей для группировок';
								|en = 'Hide information fields for groupings'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборЖелаемаяДатаОтгрузки");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборДействие");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборОбособленно");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборКоличество");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборСостояние");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборДатаПоступления");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборЗаказНаПоступление");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборСпособОбеспеченияНаименование");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборНазначение");
	
	ГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.Продукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Видимость полей позиции для группировок';
								|en = 'Item fields visibility for groupings'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборНоменклатура");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборХарактеристика");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборЕдиницаИзмерения");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборСклад");
	
	ГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.Продукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Видимость полей группировок для позиции';
								|en = 'Grouping fields visibility for item'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборЭтап");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборПродукция");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор.Продукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка(СписокУсловноеОформление, Префикс = "")
	
	ПрефиксСТочкой = ?(Префикс = "", "", Префикс + ".");
	
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Надпись "Обеспечен на складе / В резерве" в поле "Состояние"
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""Обеспечен на складе / В резерве"" в поле ""Состояние""';
								|en = 'The ""Supplied to warehouse / In reserve"" label in the ""State"" field'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "Состояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "ЗарезервированоИОбеспеченоОдновременно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обеспечен на складе / В резерве';
																|en = 'Supplied to warehouse / In reserve'"));
	#КонецОбласти
	
	// Надпись "<не определена>" в поле "Дата поступления", если не установлен основной способ обеспечения, не заполнен календарь или не установлена дата следующей поставки по графику
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""<не определена>"" в поле ""Дата поступления"", если не установлен основной способ обеспечения, не заполнен календарь или не установлена дата следующей поставки по графику';
								|en = 'The ""<not defined>"" label in the ""Date of receipt"" field, if the main procurement strategy is not set, the calendar is not filled in or the date of the next scheduled delivery is not set'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ДатаПоступления");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "ДатаПоступления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не определена>';
																|en = '<not defined>'"));
	#КонецОбласти
	
	// Подсветка даты поступления если не заполнен календарь или не установлена дата следующей поставки по графику
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка даты поступления и заказа на поступления, если не установлен основной способ обеспечения, не заполнен календарь или не установлена дата следующей поставки по графику';
								|en = 'Highlighting the date of receipt and receipt order, if the main procurement strategy is not set, the calendar is not filled in, or the date of the next scheduled delivery is not set'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ДатаПоступления");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "ДатаПоступления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	#КонецОбласти
	
	// Надпись "<как можно раньше>" в поле "Желаемая дата отгрузки", если она не установлена.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""<как можно раньше>"" в поле ""Желаемая дата отгрузки"", если она не установлена';
								|en = 'Label ""<as soon as possible>"" in the ""Desired date of shipment"" field, if it is not set'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ЖелаемаяДатаОтгрузки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "ЖелаемаяДатаОтгрузки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<как можно раньше>';
																|en = '<as soon as possible>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	#КонецОбласти
	
	// Подсветка даты поступления, если не исполнима дата отгрузки (дата поступления позже желаемой даты отгрузки).
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка даты поступления, если не исполнима дата отгрузки (дата поступления позже желаемой даты отгрузки)';
								|en = 'Highlighting of the date of receipt, if the date of shipment cannot be met (the date of receipt is later than the desired date of shipment)'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ДатаПоступления");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "ДатаОтгрузкиИсполнима");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	#КонецОбласти
	
	// Подсветка даты поступления и заказа на поступление, если плановая дата не определена.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Подсветка даты поступления и заказа на поступление, если плановая дата не определена';
								|en = 'Highlighting of date of receipt and receipt order if no schedule date has been defined'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ДатаПоступления");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "ДатаПоступления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	#КонецОбласти
	
	// Текст "Поступило" если состояние "Обеспечен на складе" или "В резерве".
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Текст ""Поступило"" если состояние ""Обеспечен на складе"" или ""В резерве""';
								|en = 'The ""Received"" text if the state is ""Supplied to warehouse"" or ""In reserve""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ДатаПоступления");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокСостоянийВНаличии = Новый СписокЗначений();
	СписокСостоянийВНаличии.Добавить(Перечисления.РаспределениеЗапасовСостояния.ВРезерве);
	СписокСостоянийВНаличии.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе);
	ОтборЭлемента.ПравоеЗначение = СписокСостоянийВНаличии;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Поступило';
																|en = 'Received'"));
	#КонецОбласти
	// Скрытие заказа на поступление, если это необеспеченная строка.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие заказа на поступление, если это необеспеченная строка';
								|en = 'Hiding a receipt order if it is a non-supplied line'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ЗаказНаПоступление");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	// Скрытие способа обеспечения потребностей, если это обеспеченная строка.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие способа обеспечения потребностей, если это обеспеченная строка';
								|en = 'Hiding the procurement strategy if it is a supplied line'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "СпособОбеспеченияНаименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.Обеспечить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	// Надпись "<способ обеспечения не задан>".
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""<способ обеспечения не задан>""';
								|en = 'Label ""<procurement strategy is not set>""'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "СпособОбеспеченияНаименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "СпособОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<способ обеспечения не задан>';
																|en = '<procurement strategy is not set>'"));
	#КонецОбласти
	
	// Надпись "Обеспечен в подразделении" для работ.
	#Область ЭлементОформления
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Надпись ""Обеспечен в подразделении"" для работ';
								|en = 'Label ""Supplied in business unit"" for works'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Префикс + "Состояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксСТочкой + "ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обеспечен в подразделении';
																|en = 'Supplied in business unit'"));
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область Видимость

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСостояния(Состояния)
	
	Все = Истина;
	Представления = Новый Массив();
	Для Каждого Элемент Из Состояния Цикл
		Все = Все И Элемент.Пометка;
		Если Элемент.Пометка Тогда
			Представления.Добавить(Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	Возврат ?(Все, НСтр("ru = 'Все';
						|en = 'All'"), СтрСоединить(Представления, ", "));
	
КонецФункции

#КонецОбласти

#Область НастройкаСписков

&НаСервере
Процедура УправлениеПараметрамиСписков()
	
	ПараметрыЗапроса = ПараметрыЗапроса();
	НаборОбновить(ПараметрыЗапроса);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗапроса()
	
	ПараметрСостояния = Новый Массив;
	Ожидается = Ложь;
	ОжидаетсяНеВСрок = Ложь;
	Для Каждого Элемент Из ОтобранныеСостояния Цикл
		
		Если Элемент.Пометка Тогда
			
			ПараметрСостояния.Добавить(Элемент.Значение);
			Если Элемент.Значение = Перечисления.РаспределениеЗапасовСостояния.ОбеспеченКДате Тогда
				
				ПараметрСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу);
				Ожидается        = Ожидается Или Элемент.Представление = НСтр("ru = 'Ожидается';
																				|en = 'Expected'");
				ОжидаетсяНеВСрок = ОжидаетсяНеВСрок Или Элемент.Представление = НСтр("ru = 'Ожидается не в срок';
																					|en = 'Expected out-of-time'");
				
			КонецЕсли;
			
			Если Элемент.Значение = Перечисления.РаспределениеЗапасовСостояния.ВРезерве Тогда
				ПараметрСостояния.Добавить(Перечисления.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("Состояния"        ,   ПараметрСостояния);
	ПараметрыЗапроса.Вставить("ВсеСостояния"     ,   ОтобранныеСостояния.ВыгрузитьЗначения());
	ПараметрыЗапроса.Вставить("Ожидается"   ,        Ожидается);
	ПараметрыЗапроса.Вставить("ОжидаетсяНеВСрок" ,   ОжидаетсяНеВСрок);
	ПараметрыЗапроса.Вставить("НадписьЗаказ"     ,   НСтр("ru = 'Заказ';
															|en = 'Order'"));
	ПараметрыЗапроса.Вставить("НачалоЭтогоДня"   ,   НачалоДня(ТекущаяДатаСеанса()));
	ПараметрыЗапроса.Вставить("ЗаказыНаОтгрузку",    Параметры.Заказы);
	ПараметрыЗапроса.Вставить("ТекстКОбеспечениюИРезервироватьПоМереПоступления",
		НСтр("ru = 'К обеспечению / Резервировать по мере поступления';
			|en = 'To supply / Reserve upon receipt'"));
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Набор.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Результат = СписокПриАктивизацииСтрокиНаСервере(
			ТекущиеДанные.Номенклатура,
			ТекущиеДанные.Характеристика,
			ТекущиеДанные.Склад,
			ТекущиеДанные.Назначение,
			ТекущиеДанные.ЕдиницаИзмерения);
			
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
		Элементы.НадписьТовар.Заголовок = Результат.НадписьТовар;
		ЭтоРабота = ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
		Элементы.ИтогВНаличии.Заголовок = ?(ЭтоРабота, НСтр("ru = 'В подразделении';
															|en = 'In busIness unit'"), НСтр("ru = 'На складе';
																							|en = 'In warehouse'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПриАктивизацииСтрокиНаСервере(Номенклатура, Характеристика, Склад, Назначение, ЕдиницаИзмерения)
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Номенклатура");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Характеристика");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Склад");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Таблица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &ЕдиницаИзмерения");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	СУММА(Запасы.ВНаличииОстаток) КАК ВНаличии,
		|	СУММА(Запасы.ВНаличииОстаток) + СУММА(Запасы.ПоступитОстаток) КАК Поступит,
		|	СУММА(ВЫБОР
		|			КОГДА Запасы.Назначение В(
		|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|						&Назначение)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА Запасы.ВНаличииОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|							ТОГДА
		|								Запасы.ВНаличииОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДоступноСейчас,
		|	СУММА(ВЫБОР
		|			КОГДА Запасы.Назначение В(
		|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|						&Назначение)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА Запасы.ВНаличииОстаток
		|								- Запасы.ПоступитОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|							ТОГДА
		|								Запасы.ВНаличииОстаток
		|								- Запасы.ПоступитОстаток
		|								- Запасы.РезервироватьНаСкладеОстаток
		|								- Запасы.РезервироватьПоМереПоступленияОстаток
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|		КОНЕЦ) КАК ДоступноВсего
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Номенклатура = &Номенклатура
		|		И Характеристика = &Характеристика
		|		И Склад = &Склад) КАК Запасы
		|СГРУППИРОВАТЬ ПО
		|	Запасы.Номенклатура,
		|	Запасы.Характеристика,
		|	Запасы.Склад");
	Запрос = Новый Запрос();
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",   Характеристика);
	Запрос.УстановитьПараметр("Склад",            Склад);
	Запрос.УстановитьПараметр("Назначение",       Назначение);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	РезультатВыполнения = Запрос.ВыполнитьПакет();
	
	ЭлементыНадписи = Новый Массив();
	Выборка = РезультатВыполнения[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементыНадписи.Добавить(Выборка.Наименование);
	КонецЕсли;
	Выборка = РезультатВыполнения[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементыНадписи.Добавить(Выборка.Наименование);
	КонецЕсли;
	Выборка = РезультатВыполнения[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ЭлементыНадписи.Добавить(Выборка.Наименование);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("НадписьТовар", СтрСоединить(ЭлементыНадписи, ", "));
	Результат.Вставить("ИтогВНаличии",         0);
	Результат.Вставить("ИтогПоступит",         0);
	Результат.Вставить("ИтогДоступноСейчас",   0);
	Результат.Вставить("ИтогДоступноВсего",    0);
	Результат.Вставить("ИтогВРезервеНаСкладе", 0);
	Результат.Вставить("ИтогВРезервеВсего",    0);
	Результат.Вставить("ЕдиницаИзмерения",     "");
	
	Выборка = РезультатВыполнения[3].Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ЕдиницаИзмерения", Выборка.Наименование);
	КонецЕсли;
	
	Выборка = РезультатВыполнения[РезультатВыполнения.ВГраница()].Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат.ИтогВНаличии         = Выборка.ВНаличии;
		Результат.ИтогПоступит         = Выборка.Поступит;
		Результат.ИтогДоступноСейчас   = Выборка.ДоступноСейчас;
		Результат.ИтогДоступноВсего    = Выборка.ДоступноВсего;
		Результат.ИтогВРезервеНаСкладе = Выборка.ВНаличии - Выборка.ДоступноСейчас;
		Результат.ИтогВРезервеВсего    = Выборка.Поступит - Выборка.ДоступноВсего;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СписокВыборНаКлиенте(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Данные = Неопределено;
	
	Если СтрНайти(Поле.Имя, "ЗаказНаОтгрузку") > 0 Тогда
		
		Данные = Элемент.ТекущиеДанные.ЗаказНаОтгрузку;
		
	ИначеЕсли СтрНайти(Поле.Имя, "ЗаказНаПоступление") > 0 Тогда
		
		Данные = Элемент.ТекущиеДанные.ЗаказНаПоступление;
		Если Не ЗначениеЗаполнено(Данные) Тогда
			Данные = Элемент.ТекущиеДанные.СпособОбеспечения;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Поле.Имя, "СпособОбеспеченияНаименование") > 0 Тогда
		
		Данные = Элемент.ТекущиеДанные.СпособОбеспечения;
		Если Не ЗначениеЗаполнено(Данные) Тогда
			Данные = Элемент.ТекущиеДанные.ЗаказНаПоступление;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Номенклатура") > 0 Тогда
		
		Данные = Элемент.ТекущиеДанные.Номенклатура;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Характеристика") > 0 Тогда
		
		Данные = Элемент.ТекущиеДанные.Характеристика;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Склад") > 0 Тогда
		
		Данные = Элемент.ТекущиеДанные.Склад;
		
	ИначеЕсли СтрНайти(Поле.Имя, "Назначение") > 0 Тогда
		
		Данные = Элемент.ТекущиеДанные.ЗаказНазначения;
		Если Не ЗначениеЗаполнено(Данные) Тогда
			Данные = Элемент.ТекущиеДанные.Назначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные) Тогда
		ПоказатьЗначение(, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапроса()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|					И СостояниеЗаказа.Зарезервировано > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|		ИНАЧЕ СостояниеЗаказа.Состояние
		|	КОНЕЦ КАК Состояние,
		|	СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|		И СостояниеЗаказа.Зарезервировано > 0 И СостояниеЗаказа.Обеспечено > 0 КАК ЗарезервированоИОбеспеченоОдновременно,
		|	СостояниеЗаказа.Номенклатура                                КАК Номенклатура,
		|	СостояниеЗаказа.Номенклатура.ТипНоменклатуры                КАК ТипНоменклатуры,
		|	СостояниеЗаказа.Характеристика                              КАК Характеристика,
		|	СостояниеЗаказа.Склад                                       КАК Склад,
		|	СостояниеЗаказа.Назначение                                  КАК Назначение,
		|	СостояниеЗаказа.ЖелаемаяДатаОтгрузки                        КАК ЖелаемаяДатаОтгрузки,
		|	СостояниеЗаказа.ЗаказНаПоступление                          КАК ЗаказНаПоступление,
		|	СостояниеЗаказа.Зарезервировано + СостояниеЗаказа.Обеспечено + СостояниеЗаказа.НеОбеспечено КАК Количество,
		|	СостояниеЗаказа.ЗаказНаОтгрузку                             КАК ЗаказНаОтгрузку,
		|	
		// Производные поля.
		|	СостояниеЗаказа.Номенклатура.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
		|	СостояниеЗаказа.Назначение.Заказ                                           КАК ЗаказНазначения,
		|	СостояниеЗаказа.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Обособленно,
		|	
		// Поле Действие.
		|	ВЫБОР
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
		|		КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|		КОГДА ОжидаемаяОтгрузка.КОбеспечениюБезРезерва > 0
		|				И ОжидаемаяОтгрузка.РезервироватьПоМереПоступления + ОжидаемаяОтгрузка.ОтложитьРезервирование > 0
		|			ТОГДА ВЫРАЗИТЬ(&ТекстКОбеспечениюИРезервироватьПоМереПоступления КАК СТРОКА(50))
		|		КОГДА ОжидаемаяОтгрузка.КОбеспечениюБезРезерва > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления)
		|	КОНЕЦ КАК Действие,
		|	
		// Поле ДатаПоступления.
		|	ВЫБОР КОГДА СостояниеЗаказа.Состояние В(
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить),
		|					ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)) ТОГДА
		|				
		|				РасчетПереопределяемый.ПлановаяДатаПоставки
		|				
		|			ИНАЧЕ
		|				
		|				СостояниеЗаказа.ДатаПоступления
		|				
		|		КОНЕЦ КАК ДатаПоступления,
		|	
		// Поля Способа обеспечения.
		|	ЕСТЬNULL(ВЫРАЗИТЬ(&НадписьЗаказ КАК СТРОКА(5)) + "" / "" + ОсновнойСпособОбеспечения.Наименование, """")     КАК СпособОбеспеченияНаименование,
		|	ЕСТЬNULL(ОсновнойСпособОбеспечения.Ссылка, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)) КАК СпособОбеспечения,
		|	
		// Поле ДатаОтгрузкиИсполнима.
		|	СостояниеЗаказа.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1,1,1)
		|				
		|				ИЛИ ВЫБОР КОГДА СостояниеЗаказа.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня ТОГДА
		|								&НачалоТекущегоДня
		|							ИНАЧЕ СостояниеЗаказа.ЖелаемаяДатаОтгрузки
		|						КОНЕЦ
		|						
		|					>= ВЫБОР КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате) ТОГДА
		|									
		|									ВЫБОР КОГДА СостояниеЗаказа.ДатаПоступления < &НачалоТекущегоДня ТОГДА
		|											&НачалоТекущегоДня
		|										ИНАЧЕ СостояниеЗаказа.ДатаПоступления
		|									КОНЕЦ
		|									
		|								КОГДА СостояниеЗаказа.Состояние В(
		|										ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|										ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить)) ТОГДА
		|									
		|									РасчетПереопределяемый.ПлановаяДатаПоставки
		|									
		|							ИНАЧЕ
		|								ДАТАВРЕМЯ(1,1,1)
		|						КОНЕЦ КАК ДатаОтгрузкиИсполнима,
		|	
		// Поле Порядок.
		|	ВЫБОР КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве) ТОГДА
		|				1
		|			КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе) ТОГДА
		|				2
		|			КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате) ТОГДА
		|				3
		|			КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу) ТОГДА
		|				4
		|			КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить) ТОГДА
		|				5
		|			КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.НеОбеспечивать) ТОГДА
		|				6
		|		КОНЕЦ КАК Порядок,
		|		
		|		СостояниеЗаказа.Состояние В(&Состояния)
		|		И(СостояниеЗаказа.Состояние <> ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченКДате)
		|				И СостояниеЗаказа.Состояние <> ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу)
		|			ИЛИ &Ожидается
		|			ИЛИ &ОжидаетсяНеВСрок
		|				И СостояниеЗаказа.ЖелаемаяДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
		|				И СостояниеЗаказа.ДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ВЫБОР КОГДА СостояниеЗаказа.ЖелаемаяДатаОтгрузки < &НачалоТекущегоДня ТОГДА
		|							&НачалоТекущегоДня
		|						ИНАЧЕ
		|							СостояниеЗаказа.ЖелаемаяДатаОтгрузки
		|					КОНЕЦ < СостояниеЗаказа.ДатаПоступления) КАК УдовлетворяетОтбору
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК СостояниеЗаказа
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОжидаемаяОтгрузка
		|		ПО ОжидаемаяОтгрузка.ЗаказНаОтгрузку = СостояниеЗаказа.ЗаказНаОтгрузку
		|		 И ОжидаемаяОтгрузка.ЖелаемаяДатаОтгрузки = СостояниеЗаказа.ЖелаемаяДатаОтгрузки
		|		 И ОжидаемаяОтгрузка.Номенклатура = СостояниеЗаказа.Номенклатура
		|		 И ОжидаемаяОтгрузка.Характеристика = СостояниеЗаказа.Характеристика
		|		 И ОжидаемаяОтгрузка.Склад = СостояниеЗаказа.Склад
		|		 И ОжидаемаяОтгрузка.Назначение = СостояниеЗаказа.Назначение
		|		 И ОжидаемаяОтгрузка.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|	
		|ГДЕ
		|	СостояниеЗаказа.ЗаказНаОтгрузку В(&ЗаказыНаОтгрузку)
		|		И ВЫБОР
		|			КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ЗарезервированПриПоступлении)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|			КОГДА СостояниеЗаказа.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОбеспеченНаСкладе)
		|					И СостояниеЗаказа.Зарезервировано > 0
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
		|			ИНАЧЕ СостояниеЗаказа.Состояние
		|		КОНЕЦ В(&ВсеСостояния)";
	
	Подстановки = ОбеспечениеВДокументахСервер.ПодстановкиПлановойДатыПоставки(
		"СостояниеЗаказа.Номенклатура",
		"СостояниеЗаказа.Характеристика",
		"СостояниеЗаказа.Склад",
		"&НачалоЭтогоДня",
		"СостояниеЗаказа.Состояние В(
		|	ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаетсяПоНеподтвержденномуЗаказу),
		|	ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.Обеспечить))");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетПереопределяемый.ПлановаяДатаПоставки",       Подстановки.Поле);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА", Подстановки.Соединения);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеТаблиц

&НаСервере
Процедура НаборОбновить(ПараметрыЗапроса)
	
	Набор.ПолучитьЭлементы().Очистить();
	
	ПоляКлюча       = "ЗаказНаОтгрузку,Номенклатура,Характеристика,Назначение,Склад,ЖелаемаяДатаОтгрузки,Действие,Обособленно";
	ПоляИнформации  = "Состояние,ТипНоменклатуры,ЗаказНаПоступление,ЕдиницаИзмерения,ЗаказНазначения,ДатаПоступления,"
	                + "СпособОбеспеченияНаименование,СпособОбеспечения,ДатаОтгрузкиИсполнима,Порядок,УдовлетворяетОтбору";
	
	ПоляСвертки                  = Неопределено;
	ПоляСортировкиДляОбеспечения = Неопределено;
	ПоляСортировки               = Неопределено;
	
	Если Отображать = "ПО_ЭТАПАМ" Тогда
		
		ПоляСвертки                  = ПоляКлюча + ",Продукция,НомерСтрокиПродукция,Этап,ЭтапПорядок";
		ПоляСортировкиДляОбеспечения = ПоляКлюча + ",ЭтапПорядок";
		ПоляСортировки               = "ЭтапПорядок," + ПоляКлюча;
		
	ИначеЕсли Отображать = "ПО_ПРОДУКЦИИ" Тогда
		
		ПоляСвертки                  = ПоляКлюча + ",Продукция,НомерСтрокиПродукция";
		ПоляСортировкиДляОбеспечения = ПоляКлюча + ",НомерСтрокиПродукция";
		ПоляСортировки               = "НомерСтрокиПродукция," + ПоляКлюча;
		
	ИначеЕсли Отображать = "ПО_ЗАКАЗУ" Тогда
		
		ПоляСвертки                  = ПоляКлюча;
		ПоляСортировкиДляОбеспечения = ПоляКлюча;
		ПоляСортировки               = ПоляКлюча;
		
	КонецЕсли;
	
	ТаблицаМатериалыЗаказа = ТаблицаМатериалыЗаказа(
		ПараметрыЗапроса,
		ПоляКлюча,
		ПоляИнформации,
		ПоляСвертки,
		ПоляСортировкиДляОбеспечения);
		
	ТаблицаМатериалыЗаказа.Сортировать(ПоляСортировки);
	
	ЭлементыКорня = Набор.ПолучитьЭлементы();
	ЭлементыВетви = Неопределено;
	
	Если Отображать = "ПО_ЭТАПАМ" Тогда
		
		Ключ = Неопределено;
		Для Индекс = 0 По ТаблицаМатериалыЗаказа.Количество() - 1 Цикл
			
			СтрокаТаблицы = ТаблицаМатериалыЗаказа[Индекс];
			Если СтрокаТаблицы.ЭтапПорядок <> Ключ Тогда
				Ключ = СтрокаТаблицы.ЭтапПорядок;
				Ветвь = ЭлементыКорня.Добавить();
				ЭлементыВетви = Ветвь.ПолучитьЭлементы();
				Ветвь.Этап      = СтрокаТаблицы.Этап;
				Ветвь.Продукция = СтрокаТаблицы.Продукция;
			КонецЕсли;
			НоваяСтрока = ЭлементыВетви.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Этап,Продукция");
			
		КонецЦикла;
		Элементы.НаборЭтап.Видимость      = Истина;
		Элементы.НаборПродукция.Видимость = Истина;
		
	ИначеЕсли Отображать = "ПО_ПРОДУКЦИИ" Тогда
		
		Ключ = Неопределено;
		Для Индекс = 0 По ТаблицаМатериалыЗаказа.Количество() - 1 Цикл
			
			СтрокаТаблицы = ТаблицаМатериалыЗаказа[Индекс];
			Если СтрокаТаблицы.НомерСтрокиПродукция <> Ключ Тогда
				Ключ = СтрокаТаблицы.НомерСтрокиПродукция;
				Ветвь = ЭлементыКорня.Добавить();
				ЭлементыВетви = Ветвь.ПолучитьЭлементы();
				Ветвь.Продукция = СтрокаТаблицы.Продукция;
			КонецЕсли;
			НоваяСтрока = ЭлементыВетви.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Продукция");
			
		КонецЦикла;
		Элементы.НаборЭтап.Видимость      = Ложь;
		Элементы.НаборПродукция.Видимость = Истина;
		
	ИначеЕсли Отображать = "ПО_ЗАКАЗУ" Тогда
		
		Для Индекс = 0 По ТаблицаМатериалыЗаказа.Количество() - 1 Цикл
			
			СтрокаТаблицы = ТаблицаМатериалыЗаказа[Индекс];
			НоваяСтрока = ЭлементыКорня.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		Элементы.НаборЭтап.Видимость      = Ложь;
		Элементы.НаборПродукция.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаМатериалыЗаказа(ПараметрыЗапроса, ПоляКлюча, ПоляИнформации, ПоляСвертки, ПоляСортировкиДляОбеспечения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса();
	Запрос.УстановитьПараметр("Состояния",        ПараметрыЗапроса.Состояния);
	Запрос.УстановитьПараметр("ВсеСостояния",     ПараметрыЗапроса.ВсеСостояния);
	Запрос.УстановитьПараметр("Ожидается",        ПараметрыЗапроса.Ожидается);
	Запрос.УстановитьПараметр("ОжидаетсяНеВСрок", ПараметрыЗапроса.ОжидаетсяНеВСрок);
	Запрос.УстановитьПараметр("ЗаказыНаОтгрузку", ПараметрыЗапроса.ЗаказыНаОтгрузку);
	Запрос.УстановитьПараметр("НадписьЗаказ",     ПараметрыЗапроса.НадписьЗаказ);
	Запрос.УстановитьПараметр("НачалоЭтогоДня",   ПараметрыЗапроса.НачалоЭтогоДня);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТекстКОбеспечениюИРезервироватьПоМереПоступления",
		ПараметрыЗапроса.ТекстКОбеспечениюИРезервироватьПоМереПоступления);
	
	ТаблицаОбеспечение     = Запрос.Выполнить().Выгрузить();
	ТаблицаМатериалыЗаказа = РегистрыНакопления.ЗаказыМатериаловСУчетомКорректировок.ТаблицаМатериалыЗаказаНаПроизводствоКОбеспечению(
		ПараметрыЗапроса.ЗаказыНаОтгрузку);
	
	ТаблицаОбеспечение.Индексы.Добавить(ПоляКлюча);
	ТаблицаМатериалыЗаказа.Свернуть(ПоляСвертки, "Количество");
	
	ТаблицаМатериалыЗаказа.Сортировать(ПоляСортировкиДляОбеспечения);
	
	ДобавляемыеКолонки = СтрРазделить(ПоляИнформации, ",");
	Для Каждого Элемент Из ДобавляемыеКолонки Цикл
		ТаблицаМатериалыЗаказа.Колонки.Добавить(Элемент, ТаблицаОбеспечение.Колонки[Элемент].ТипЗначения, ТаблицаОбеспечение.Колонки[Элемент].Заголовок);
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаМатериалыЗаказа.Количество();
	
	ТекущийКлюч           = Новый Структура(ПоляКлюча);
	НайденныеСтроки       = Неопределено;
	ВсегоСтрокОбеспечения = 0;
	ИндексОбеспечения     = 0;
	РаспределитьТекущее   = 0;
	
	Для ИндексСтроки = 0 По ВсегоСтрок - 1 Цикл
		
		СтрокаТаблицы = ТаблицаМатериалыЗаказа[ИндексСтроки];
		
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущийКлюч, СтрокаТаблицы) Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущийКлюч, СтрокаТаблицы);
			НайденныеСтроки = ТаблицаОбеспечение.НайтиСтроки(ТекущийКлюч);
			ВсегоСтрокОбеспечения = НайденныеСтроки.Количество();
			ИндексОбеспечения = 0;
			
		КонецЕсли;
		
		Пока ИндексОбеспечения < ВсегоСтрокОбеспечения Цикл
			
			Если НайденныеСтроки[ИндексОбеспечения].Количество = 0 Тогда
				ИндексОбеспечения = ИндексОбеспечения + 1;
				Продолжить;
			КонецЕсли;
			
			РаспределитьТекущее = Мин(СтрокаТаблицы.Количество, НайденныеСтроки[ИндексОбеспечения].Количество);
			НайденныеСтроки[ИндексОбеспечения].Количество = НайденныеСтроки[ИндексОбеспечения].Количество - РаспределитьТекущее;
			
			Если РаспределитьТекущее < СтрокаТаблицы.Количество Тогда
				
				НоваяСтрока = ТаблицаМатериалыЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - РаспределитьТекущее;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[ИндексОбеспечения], ПоляИнформации);
				НоваяСтрока.Количество = РаспределитьТекущее;
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НайденныеСтроки[ИндексОбеспечения], ПоляИнформации);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаМатериалыЗаказа = ТаблицаМатериалыЗаказа.Скопировать(Новый Структура("УдовлетворяетОтбору", Истина));
	Возврат ТаблицаМатериалыЗаказа;
	
КонецФункции

#КонецОбласти

#Область ПереключениеСтраниц

&НаСервере
Процедура ЗаполнитьЗаказыДляПроверкиЗаданий()
	
	ЗаказыДляПроверкиЗаданий.Очистить();
	ЗаказыДляПроверкиЗаданий.Добавить(Параметры.Заказы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьСтраницы()
	
	УстановитьВидимостьСтраниц(Элементы, ЗаказыДляПроверкиЗаданий);
	Если ЗаказыДляПроверкиЗаданий.Количество() > 0 Тогда
		ИнтервалПереключитьСтраницы = ИнтервалПереключитьСтраницы + 1;
		ПодключитьОбработчикОжидания("Подключаемый_ПереключитьСтраницы", ИнтервалПереключитьСтраницы, Истина);
	Иначе
		УправлениеПараметрамиСписков();
		ЭлементыКорня = Набор.ПолучитьЭлементы();
		Для Каждого ЭлементКорня Из ЭлементыКорня Цикл
			Элементы.Набор.Развернуть(ЭлементКорня.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСтраниц(Элементы, ЗаказыДляПроверкиЗаданий)
	
	Если Не ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий) Тогда
		ЗаказыДляПроверкиЗаданий.Очистить();
	КонецЕсли;
	ЕстьЗадания = ЗаказыДляПроверкиЗаданий.Количество() > 0;
	Элементы.Страницы.ТекущаяСтраница = ?(ЕстьЗадания, Элементы.СтраницаОжидание, Элементы.СтраницаРабочееМесто);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий)
	
	Возврат ОбеспечениеВДокументахСервер.ЕстьЗаданияПоЗаказам(ЗаказыДляПроверкиЗаданий);
	
КонецФункции

#КонецОбласти

#Область СохранениеНастроек

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура("Отображать");
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.СостояниеОбеспеченияЗаказовНаПроизводство", "Основная", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Отображать = "ПО_ЭТАПАМ";
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.СостояниеОбеспеченияЗаказовНаПроизводство", "Основная");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначениеНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти