
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Подразделение = Параметры.Подразделение;
	ПодразделениеОтбор = Параметры.Подразделение;
	СменноеЗадание = Параметры.СменноеЗадание;
	Участок = Параметры.Участок;
	МножественныйВыбор = Параметры.МножественныйВыбор;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	Дата = Дата(1,1,1);
	Параметры.Свойство("Дата", Дата);
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
	
	РежимВыбора = ?(ПараметрыПодразделения.ИспользоватьПерсональныеНаряды, "Работники", "Бригады");
	
	Элементы.РежимВыбора.Видимость = ПараметрыПодразделения.ИспользоватьПерсональныеНаряды
		И ПараметрыПодразделения.ИспользоватьБригадныеНаряды;
		
	ИспользоватьПерсональныеНаряды = ПараметрыПодразделения.ИспользоватьПерсональныеНаряды;
	
	Элементы.СменыГруппа.Заголовок = ?(ПараметрыПодразделения.ИспользоватьУчастки,
		НСтр("ru = 'Смена, Участок, Исполнитель';
			|en = 'Shift, Land, Assignee'"),
		НСтр("ru = 'Смена, Исполнитель';
			|en = 'Shift, Assignee'"));
	
	НастроитьФормуПоРежимуВыбора(ЭтотОбъект);
	
	КоличествоСмен = ПроизводствоСервер.ГрафикиРаботыПодразделений(Подразделение).Количество();
	НесколькоСменВПодразделении = КоличествоСмен > 1;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Элементы.ГруппаТолькоРаботающие.Видимость = ИспользоватьНачислениеЗарплаты;
	Элементы.ГруппаОрганизация.Видимость = Ложь;
	
	ОперативныйУчетПроизводстваЛокализация.ДобавитьДанныеДляПодбораРаботников(ЭтотОбъект, Дата);
	
	ПрочитатьСмены(СменноеЗадание, КоличествоСмен + 1);
	
	УстановитьОтборПоПодразделению();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//++ Локализация
	Дата = Дата(1,1,1);
	Параметры.Свойство("Дата", Дата);
	
	УчетТрудозатратВРазрезеСотрудников = ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(Дата);
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Если УчетТрудозатратВРазрезеСотрудников ИЛИ ИспользоватьНачислениеЗарплаты Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Работники, "ТолькоРаботающие", ТолькоРаботающие);
	КонецЕсли;
	
	Если УчетТрудозатратВРазрезеСотрудников Тогда
		УстановитьОтборПоОрганизации();
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимВыбораПриИзменении(Элемент)
	
	НастроитьФормуПоРежимуВыбора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтборПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРаботающиеПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Работники, "ТолькоРаботающие", ТолькоРаботающие);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСмены

&НаКлиенте
Процедура СменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботники

&НаКлиенте
Процедура РаботникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБригады

&НаКлиенте
Процедура БригадыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ОбработкаВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для каждого Строка Из Смены.ПолучитьЭлементы() Цикл
		Элементы.Смены.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для каждого Строка Из Смены.ПолучитьЭлементы() Цикл
		Элементы.Смены.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Смены - показать гиперссылку
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ЭтоДействие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Смены - скрыть представление строки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ЭтоДействие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Смены - скрыть гиперссылку
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ЭтоДействие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	// Смены - показать представление строки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ЭтоДействие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьФормуПоРежимуВыбора(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.БригадыРаботники.ТекущаяСтраница = ?(Форма.РежимВыбора = "Работники",
		Элементы.СтраницаРаботники, Элементы.СтраницаБригады);
	
	Элементы.КомандыРаботники.Видимость = Форма.РежимВыбора = "Работники";
	
	Элементы.КомандыБригады.Видимость = Форма.РежимВыбора <> "Работники";
	
	Элементы.ТолькоРаботающие.Видимость = Форма.РежимВыбора = "Работники";
	
	Элементы.ОрганизацияОтбор.Видимость = Форма.РежимВыбора = "Работники";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора()
	
	Ссылки = Новый Массив;
	КлючиЗаписей = Новый Массив;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ПрошлыеСмены Тогда
		
		ВыбраноДействие = Ложь;
		КлючНовойСтроки = -1;
		
		ОбработатьВыборСменНаСервере(Ссылки, ВыбраноДействие, КлючНовойСтроки);
		
		Если Ссылки.ВГраница() = -1 И НЕ ВыбраноДействие Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выделены элементы для выбора';
											|en = 'Items for selection are not highlighted'"));
		КонецЕсли;
		
		Если КлючНовойСтроки <> -1 Тогда
			Элементы.Смены.Развернуть(КлючНовойСтроки);
		КонецЕсли;
		
	Иначе
		
		Список = Элементы[РежимВыбора];
		ВыбранаГруппа = Ложь;
		
		Для каждого Строка Из Список.ВыделенныеСтроки Цикл
			Если ТипЗнч(Строка) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				
				Если ТипЗнч(Строка) = Тип("КлючСтрокиДинамическогоСписка") Тогда
					Строка = Строка.Сотрудник;
				//++ Локализация
				ИначеЕсли ТипЗнч(Строка) = Тип("РегистрСведенийКлючЗаписи.ДанныеДляПодбораСотрудников") Тогда
					КлючиЗаписей.Добавить(Строка);
				//-- Локализация
				КонецЕсли;
				
				Ссылки.Добавить(Строка);
			Иначе
				ВыбранаГруппа = Истина;
			КонецЕсли;
		КонецЦикла;
		
		//++ Локализация
		Если КлючиЗаписей.Количество() > 0 Тогда
			Ссылки = СотрудникиПоКлючамЗаписей(КлючиЗаписей);
		КонецЕсли;
		//-- Локализация
				
		Если Ссылки.ВГраница() = -1 Тогда
			
			Если ВыбранаГруппа Тогда
				ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для строки группировки списка';
											|en = 'Cannot execute the command for the list grouping row'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Не выделены элементы для выбора';
											|en = 'Items for selection are not highlighted'");
			КонецЕсли;
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ссылки.Количество() > 1 И НЕ МножественныйВыбор Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Может быть выбран лишь один исполнитель';
										|en = 'Only one assignee can be selected'"));
		
	ИначеЕсли Ссылки.ВГраница() <> -1 Тогда
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("СменноеЗадание", СменноеЗадание);
		ЗначениеВыбора.Вставить("Ссылки", Ссылки);
		ЗначениеВыбора.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		
		ОповеститьОВыборе(ЗначениеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборСменНаСервере(Ссылки, ВыбраноДействие, КлючНовойСтроки)
	
	СтрокаДействие = Неопределено;
	
	Для каждого Строка Из Элементы.Смены.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Смены.НайтиПоИдентификатору(Строка);
		
		Если ДанныеСтроки.ЭтоДействие Тогда
			
			ВыбраноДействие = Истина;
			СтрокаДействие = ДанныеСтроки;
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.СменноеЗадание") Тогда
			
			Для каждого ДанныеПотомка Из ДанныеСтроки.ПолучитьЭлементы() Цикл
				
				Если Ссылки.Найти(ДанныеПотомка.Ссылка) = Неопределено Тогда
					Ссылки.Добавить(ДанныеПотомка.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если Ссылки.Найти(ДанныеСтроки.Ссылка) = Неопределено Тогда
				Ссылки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ссылки.ВГраница() = -1 И ВыбраноДействие Тогда
		
		Строки = Смены.ПолучитьЭлементы();
		
		ПрочитатьСмены(Строки[Строки.Индекс(СтрокаДействие) - 1].Ссылка, 1);
		
		Строки.Удалить(СтрокаДействие);
		
		Для Индекс = -Строки.Количество()+1 По 0 Цикл
			
			Если НЕ Строки[-Индекс].ЭтоДействие Тогда
				КлючНовойСтроки = Строки[-Индекс].ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//++ Локализация
&НаСервереБезКонтекста
Функция СотрудникиПоКлючамЗаписей(КлючиЗаписей)
	
	Сотрудники = Новый Массив;
	
	Для Каждого КлючЗаписи Из КлючиЗаписей Цикл
		Сотрудники.Добавить(КлючЗаписи.Сотрудник);
	КонецЦикла;
	
	Возврат Сотрудники;
	
КонецФункции
//-- Локализация

&НаСервере
Процедура ПрочитатьСмены(ТочкаОтсчета, Количество)
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	СменноеЗадание.Ссылка  КАК Ссылка,
		|	СменноеЗадание.Смена   КАК Смена,
		|	СменноеЗадание.Дата    КАК Дата,
		|	СменноеЗадание.Участок КАК Участок
		|ПОМЕСТИТЬ ВТСсылки
		|ИЗ
		|	Документ.СменноеЗадание КАК ТочкаОтсчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СменноеЗадание КАК СменноеЗадание
		|		ПО ТочкаОтсчета.Подразделение = СменноеЗадание.Подразделение
		|			И ТочкаОтсчета.Участок = СменноеЗадание.Участок
		|			И ТочкаОтсчета.Дата > СменноеЗадание.Дата
		|			И СменноеЗадание.Проведен
		|ГДЕ
		|	ТочкаОтсчета.Ссылка = &ТочкаОтсчета
		|	И ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ Документ.СменноеЗадание.Исполнители КАК Т ГДЕ Т.Ссылка = СменноеЗадание.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СменноеЗадание.Дата УБЫВ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СменноеЗадание.Ссылка                 КАК Ссылка,
		|	СменноеЗадание.Смена                  КАК Смена,
		|	СменноеЗадание.Дата                   КАК Дата,
		|	СменноеЗадание.Участок                КАК Участок,
		|	СменноеЗаданиеИсполнители.Исполнитель КАК Исполнитель,
		|	СменноеЗаданиеИсполнители.Исполнитель.Наименование КАК ИсполнительПредставление
		|ИЗ
		|	ВТСсылки КАК СменноеЗадание
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменноеЗадание.Исполнители КАК СменноеЗаданиеИсполнители
		|		ПО СменноеЗадание.Ссылка = СменноеЗаданиеИсполнители.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	ИсполнительПредставление
		|ИТОГИ ПО
		|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "10000", Формат(Количество + 1, "ЧГ=0;"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Участок", Участок);
	Запрос.УстановитьПараметр("ТочкаОтсчета", ТочкаОтсчета);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Сч = 1;
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Выборка = ВыборкаИтоги.Выбрать();
		Выборка.Следующий();
		
		СтрокаСмена = Смены.ПолучитьЭлементы().Добавить();
		СтрокаСмена.Ссылка = Выборка.Ссылка;
		СтрокаСмена.Представление = УправлениеПроизводствомКлиентСервер.ПредставлениеСменногоЗадания(
			Выборка.Смена, Выборка.Дата, Выборка.Участок, НесколькоСменВПодразделении);
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			
			СтрокаИсполнитель = СтрокаСмена.ПолучитьЭлементы().Добавить();
			СтрокаИсполнитель.Ссылка = Выборка.Исполнитель;
			СтрокаИсполнитель.Представление = Выборка.ИсполнительПредставление;
			
		КонецЦикла;
		
		Если Сч = Количество Тогда
			Прервать;
		КонецЕсли;
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ВыборкаИтоги.Количество() > Количество Тогда
		
		СтрокаДействие = Смены.ПолучитьЭлементы().Добавить();
		СтрокаДействие.Действие = НСтр("ru = '<показать еще>';
										|en = '<show more>'");
		СтрокаДействие.ЭтоДействие = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Бригады, 
		"Подразделение", 
		ПодразделениеОтбор, 
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(ПодразделениеОтбор));
	
	Если (ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(ТекущаяДатаСеанса()))
		И ИспользоватьПерсональныеНаряды Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Работники, 
			"Подразделение", 
			ПодразделениеОтбор,
			ВидСравненияКомпоновкиДанных.Равно,
			, // Представление - автоматически
			ЗначениеЗаполнено(ПодразделениеОтбор));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()
	
	Если ИспользоватьПерсональныеНаряды Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Работники, 
			"Организация", 
			ОрганизацияОтбор,
			ВидСравненияКомпоновкиДанных.Равно,
			, // Представление - автоматически
			ЗначениеЗаполнено(ОрганизацияОтбор));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
