
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОтборПоЭтапу.Пустая() Тогда
		ЗагрузитьНастройки();
	Иначе
		Подразделения = Документы.ЭтапПроизводства2_2.ПодразделенияИсполнители(
			ОбщегоНазначенияУТКлиентСервер.Массив(Параметры.ОтборПоЭтапу));
		Подразделение = Подразделения[Параметры.ОтборПоЭтапу];
		
		ПредставлениеЭтапа = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ОтборПоЭтапу, "Номер, НаименованиеЭтапа"));
			
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Установлен отбор по этапу';
									|en = 'Stage filter is set'"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			ПредставлениеЭтапа,
			,
			,
			,
			ПолучитьНавигационнуюСсылку(Параметры.ОтборПоЭтапу)));
		МассивСтрок.Добавить(" (");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить';
																|en = 'disable'"),,,, "ОтключитьОтборПоЭтапу"));
		МассивСтрок.Добавить(") ");
			
		ИнформационноеСообщение = Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	ПланируетсяГрафикПроизводства = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	Если РежимНазначения = 0 Тогда
		РежимНазначения = РежимНазначенияИсполнителям();
	КонецЕсли;
	
	Если РежимПросмотра = 0 Тогда
		РежимПросмотра = РежимПросмотраМожноНазначать();
	КонецЕсли;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Подразделение));
	ЕстьУчастки = ПолучитьФункциональнуюОпциюФормы("ИспользоватьПроизводственныеУчастки");
	
	ПодразделениеДоИзменения = Подразделение;
	ЦветВыбранногоРежима = ЦветаСтиля.ЦветТекстаФормы;
	ЦветНеВыбранногоРежима = ЦветаСтиля.ГиперссылкаЦвет;
	ПараметрыНазначения = РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ПараметрыНазначенияОпераций();
	
	ВыделитьКнопкуНастроитьСоставСмен();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ТекстЗапросаОперации = СтрЗаменить(
		Операции.ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("РегистрПереопределяемый.Этап"));
	ТекстЗапросаОперации = СтрЗаменить(
		ТекстЗапросаОперации,
		"&ВремяВыполнения",
		РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ТекстЗапросаВремяОперации("РегистрПереопределяемый"));
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапросаОперации;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Операции, СвойстваСписка);
	Операции.Параметры.УстановитьЗначениеПараметра("ОтборПоУчастку", Ложь);
	Операции.Параметры.УстановитьЗначениеПараметра("Участок", Неопределено);
	
	НастроитьСписокСменныхЗаданий();
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СменныеЗадания.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СменныеЗадания.КоманднаяПанель;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ФормированиеСменныхЗаданий.Форма.ПодборИсполнителей" Тогда
		
		КешСтрок = ЗакешироватьРазвернутыеСтрокиДерева();
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Если ВыбранноеЗначение.ДополнительныеПараметры.Режим = "НовыйИсполнитель" Тогда
				
				ДобавитьИсполнителей(ВыбранноеЗначение.СменноеЗадание, ВыбранноеЗначение.Ссылки);
				
			ИначеЕсли ВыбранноеЗначение.ДополнительныеПараметры.Режим = "НазначениеНовомуИсполнителю" Тогда
				
				СтруктураПараметров = ВыбранноеЗначение.ДополнительныеПараметры.ПараметрыНазначения;
				СтруктураПараметров.Измерения.Исполнитель = ВыбранноеЗначение.Ссылки[0];
				
				НазначитьОперации(
					ВыбранноеЗначение.ДополнительныеПараметры.КлючиОпераций,
					ВыбранноеЗначение.СменноеЗадание,
					СтруктураПараметров);
				
			КонецЕсли;
		
		КонецЕсли;
		
		РазвернутьСтрокиДереваИзКеша(КешСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если Подразделение = ПодразделениеДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	СоставСмен.Очистить();
	Участок.Очистить();
	Смены.ПолучитьЭлементы().Очистить();
	ВыделитьКнопкуНастроитьСоставСмен();
	
	СохранитьНастройки(ЭтотОбъект);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Подразделение));
	ЕстьУчастки = ПолучитьФункциональнуюОпциюФормы("ИспользоватьПроизводственныеУчастки");
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Подразделение");
	
	ПодразделениеДоИзменения = Подразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначатьИсполнителямНажатие(Элемент)
	
	РежимНазначения = РежимНазначенияИсполнителям();
	
	ПриИзмененииРежимаНазначения();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначатьРабочимЦентрамНажатие(Элемент)
	
	РежимНазначения = РежимНазначенияРабочимЦентрам();
	
	ПриИзмененииРежимаНазначения();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначатьВидамРЦНажатие(Элемент)
	
	РежимНазначения = РежимНазначенияВидамРЦ();
	
	ПриИзмененииРежимаНазначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаНазначения()
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "РежимНазначения");
	
	СохранитьНастройкиИЗаполнитьСмены();
	
	РазвернутьВсеСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура МожноНазначатьНажатие(Элемент)
	
	РежимПросмотра = РежимПросмотраМожноНазначать();
	
	ПриИзмененииРежимаПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеКНазначениюНажатие(Элемент)
	
	РежимПросмотра = РежимПросмотраВсеКНазначению();
	
	ПриИзмененииРежимаПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенныеНажатие(Элемент)
	
	РежимПросмотра = РежимПросмотраНазначенные();
	
	ПриИзмененииРежимаПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаПросмотра()
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "РежимПросмотра");
	
	СохранитьНастройки(ЭтотОбъект);
	
	НастроитьОтборОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационноеСообщениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьОтборПоЭтапу" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Параметры.ОтборПоЭтапу = Неопределено;
		
		НастроитьСписокСменныхЗаданий();
		
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтборПоЭтапу");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ДатаНачала > ДатаОкончания И ДатаОкончания <> '000101010000' Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
	
	НастроитьОтборОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если ДатаОкончания < ДатаНачала И ДатаНачала <> '000101010000' Тогда
		ДатаНачала = ДатаОкончания;
	КонецЕсли;
	
	НастроитьОтборОпераций();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСмены

&НаКлиенте
Процедура СменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Смены.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные.ТипСтроки = ТипСтрокиСмена() Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.СменноеЗадание);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиОбъект() Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ОбъектНазначения);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиНовыйИсполнитель() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Подразделение", Подразделение);
		ПараметрыФормы.Вставить("СменноеЗадание", ТекущиеДанные.СменноеЗадание);
		ПараметрыФормы.Вставить("Участок", ТекущиеДанные.Участок);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("Дата", ТекущиеДанные.Дата);
		ПараметрыФормы.Вставить("ДополнительныеПараметры",
			Новый Структура("Режим", "НовыйИсполнитель"));
		
		ОткрытьФорму("Обработка.ФормированиеСменныхЗаданий.Форма.ПодборИсполнителей",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменыПриАктивизацииСтроки(Элемент)
	
	НастроитьОтборОпераций();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СменыАктивнаяСтрока");
	
КонецПроцедуры

&НаКлиенте
Процедура СменыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеСменныхЗаданий.Форма.РабочееМесто.НазначитьОперации");
	
	НазначитьОперацииВыбраннойСтроке(
		ПараметрыПеретаскивания.Значение,
		Смены.НайтиПоИдентификатору(Строка));
	
КонецПроцедуры

&НаКлиенте
Процедура СменыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СменыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СменыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если РежимНазначения = РежимНазначенияИсполнителям()
		И Смены.НайтиПоИдентификатору(Элементы.Смены.ТекущаяСтрока).ТипСтроки = ТипСтрокиОбъект() Тогда
		
		УдалитьТекущегоИсполнителя();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Смены.ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждениеНеВыбранаСмена();
		
	Иначе
		
		КлючиОпераций = ПроверитьПолучитьОперацииДляНазначения(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяСтрока));
		
		Если КлючиОпераций = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Строка = Элементы.Смены.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Подразделение", Подразделение);
		ПараметрыФормы.Вставить("СменноеЗадание", Строка.СменноеЗадание);
		ПараметрыФормы.Вставить("КлючиОпераций", КлючиОпераций);
		
		Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
			
			ПараметрыФормы.Вставить("ВыборИсполнителя", Истина);
			
			Если Строка.ТипСтроки = ТипСтрокиОбъект() Тогда
				ПараметрыФормы.Вставить("Исполнитель", Строка.ОбъектНазначения);
			КонецЕсли;
			
		ИначеЕсли РежимНазначения = РежимНазначенияРабочимЦентрам() Тогда
			
			ПараметрыФормы.Вставить("ВыборРЦ", Истина);
			
			Если Строка.ТипСтроки = ТипСтрокиОбъект() Тогда
				ПараметрыФормы.Вставить("РабочийЦентр", Строка.ОбъектНазначения);
				ПараметрыФормы.Вставить("ВидРабочегоЦентра", Строка.ВидРабочегоЦентра);	
			КонецЕсли;
			
		ИначеЕсли РежимНазначения = РежимНазначенияВидамРЦ() Тогда
			
			ПараметрыФормы.Вставить("ВыборВидаРЦ", Истина);
			
			Если Строка.ТипСтроки = ТипСтрокиОбъект() Тогда
				ПараметрыФормы.Вставить("ВидРабочегоЦентра", Строка.ОбъектНазначения);
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("НазначитьЧасть",
			РежимПросмотра = РежимПросмотраМожноНазначать()
			ИЛИ РежимПросмотра = РежимПросмотраВсеКНазначению());
		
		ОткрытьФорму("Обработка.ФормированиеСменныхЗаданий.Форма.НазначениеОпераций",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("НазначениеВОтдельнойФормеЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриАктивизацииСтроки(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОперацииАктивнаяСтрока");
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Для каждого Элемент Из ПараметрыПеретаскивания.Значение Цикл
		
		Если ТипЗнч(Элемент) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			Выполнение = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСменныеЗадания

&НаКлиенте
Процедура СменныеЗаданияПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСоставСмен(Команда)
	
	Если Подразделение.Пустая() Тогда
		
		ОчиститьСообщения();
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Подразделение';
																					|en = 'Business unit'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Подразделение");
		
		Возврат;
		
	КонецЕсли;
	
	Статусы = Новый СписокЗначений;
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Формируется"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение",       Подразделение);
	ПараметрыФормы.Вставить("Участок",             Участок);
	ПараметрыФормы.Вставить("Статусы",             Статусы);
	ПараметрыФормы.Вставить("ВыбранныеРанееСмены", СоставСмен);
	ПараметрыФормы.Вставить("МножественныйВыбор",  Истина);
	
	ОткрытьФорму(
		"Документ.СменноеЗадание.Форма.ФормаВыбораПоКалендарю",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("НастроитьСоставСменЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставСменЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		СоставСмен.ЗагрузитьЗначения(РезультатЗакрытия.Задания);
		Участок = РезультатЗакрытия.Участок;
		
		НастроитьСоставСменЗавершениеНаСервере();
		
		РазвернутьВсеСтрокиДерева();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСоставСменЗавершениеНаСервере()
	
	СохранитьНастройки(ЭтаФорма);
	ЗаполнитьСмены();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для каждого Строка Из Смены.ПолучитьЭлементы() Цикл
		Элементы.Смены.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьВсеСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура Назначить(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеСменныхЗаданий.Форма.РабочееМесто.НазначитьОперации");
	
	Если Элементы.Смены.ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждениеНеВыбранаСмена();
		
	Иначе
		
		КлючиОпераций = ПроверитьПолучитьОперацииДляНазначения(Элементы.Операции.ВыделенныеСтроки);
		
		Если КлючиОпераций <> Неопределено Тогда
			
			НазначитьОперацииВыбраннойСтроке(КлючиОпераций, Элементы.Смены.ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЧасть(Команда)
	
	Если Элементы.Смены.ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждениеНеВыбранаСмена();
		
	Иначе
		
		КлючиОпераций = ПроверитьПолучитьОперацииДляНазначения(Элементы.Операции.ВыделенныеСтроки);
		
		Если КлючиОпераций = Неопределено Тогда
			Возврат;
		ИначеЕсли КлючиОпераций.Количество() > 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Действие может быть выполнено только для одной строки';
											|en = 'Action can be performed only for one line'"));
			Возврат;
		КонецЕсли;
		
		Строка = Элементы.Смены.ТекущиеДанные;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Подразделение", Подразделение);
		ПараметрыФормы.Вставить("СменноеЗадание", Строка.СменноеЗадание);
		ПараметрыФормы.Вставить("КлючиОпераций", КлючиОпераций);
		
		Если Строка.ТипСтроки = ТипСтрокиОбъект() Тогда
			Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
				
				ПараметрыФормы.Вставить("Исполнитель", Строка.ОбъектНазначения);
				
			ИначеЕсли РежимНазначения = РежимНазначенияРабочимЦентрам() Тогда
				
				ПараметрыФормы.Вставить("РабочийЦентр", Строка.ОбъектНазначения);
				ПараметрыФормы.Вставить("ВидРабочегоЦентра", Строка.ВидРабочегоЦентра);	
				
			ИначеЕсли РежимНазначения = РежимНазначенияВидамРЦ() Тогда
				
				ПараметрыФормы.Вставить("ВидРабочегоЦентра", Строка.ОбъектНазначения);
				
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ВводКоличества", Истина);
		ПараметрыФормы.Свойство("НазначитьЧасть", Истина);
		
		ОткрытьФорму("Обработка.ФормированиеСменныхЗаданий.Форма.НазначениеОпераций",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("НазначениеВОтдельнойФормеЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтборПоУчастку(Команда)
	
	ОтборПоУчастку = НЕ ОтборПоУчастку;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтборПоУчастку");
	
	СохранитьНастройки(ЭтотОбъект);
	
	НастроитьОтборОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	КлючиОпераций = ПроверитьПолучитьОперацииДляНазначения(Элементы.Операции.ВыделенныеСтроки);
		
	Если КлючиОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("КлючиОпераций", КлючиОпераций);
	
	Если Элементы.Смены.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("СменноеЗадание", Элементы.Смены.ТекущиеДанные.СменноеЗадание);
	КонецЕсли;
	
	Строка = Неопределено;
	Если Элементы.Смены.ТекущиеДанные <> Неопределено
		И Элементы.Смены.ТекущиеДанные.ТипСтроки = ТипСтрокиОбъект() Тогда
		Строка = Элементы.Смены.ТекущиеДанные;
	КонецЕсли;
	
	Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
			
		ПараметрыФормы.Вставить("ВыборИсполнителя", Истина);
		
		Если Строка <> Неопределено Тогда
			ПараметрыФормы.Вставить("Исполнитель", Строка.ОбъектНазначения);
		КонецЕсли;
		
	ИначеЕсли РежимНазначения = РежимНазначенияРабочимЦентрам() Тогда
		
		ПараметрыФормы.Вставить("ВыборРЦ", Истина);
		
		Если Строка <> Неопределено Тогда
			ПараметрыФормы.Вставить("РабочийЦентр", Строка.ОбъектНазначения);
			ПараметрыФормы.Вставить("ВидРабочегоЦентра", Строка.ВидРабочегоЦентра);	
		КонецЕсли;
		
	ИначеЕсли РежимНазначения = РежимНазначенияВидамРЦ() Тогда
		
		ПараметрыФормы.Вставить("ВыборВидаРЦ", Истина);
		
		Если Строка <> Неопределено Тогда
			ПараметрыФормы.Вставить("ВидРабочегоЦентра", Строка.ОбъектНазначения);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ФормированиеСменныхЗаданий.Форма.НазначениеОпераций",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("НазначениеВОтдельнойФормеЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	КлючиОпераций = ПроверитьПолучитьОперацииДляНазначения(Элементы.Операции.ВыделенныеСтроки);
		
	Если КлючиОпераций <> Неопределено Тогда
		
		ОчиститьСообщения();
		
		КешСтрок = ЗакешироватьРазвернутыеСтрокиДерева();
		
		УдалитьОперацииНаСервере(КлючиОпераций);
		
		РазвернутьСтрокиДереваИзКеша(КешСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеВОтдельнойФормеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		КешСтрок = ЗакешироватьРазвернутыеСтрокиДерева();
		
		ОбновитьФормуПослеНазначенияОпераций(
			РезультатЗакрытия.КлючиОпераций,
			РезультатЗакрытия.СменноеЗадание);
		
		РазвернутьСтрокиДереваИзКеша(КешСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСмены(Команда)
	
	Если СоставСмен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСменыНаСервере();
	
	РазвернутьВсеСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадание(Команда)
	
	Если Элементы.Смены.ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана смена';
										|en = 'Shift is not selected'"));
		
	Иначе
		
		ПоказатьЗначение(, Элементы.Смены.ТекущиеДанные.СменноеЗадание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаданиюСтатусСформировано(Команда)
	
	Если Элементы.Смены.ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана смена';
										|en = 'Shift is not selected'"));
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КешСтрок = ЗакешироватьРазвернутыеСтрокиДерева();
	
	НачатьОжидание = УстановитьСтатусВФоне(Элементы.Смены.ТекущиеДанные.СменноеЗадание);
	
	Если НачатьОжидание Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановитьСтатусВФонеЗавершение",
			ЭтотОбъект,
			Новый Структура("Ссылка, КешСтрок", Элементы.Смены.ТекущиеДанные.СменноеЗадание, КешСтрок));
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОписаниеОповещения,
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		РазвернутьСтрокиДереваИзКеша(КешСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Результат - Структура - Описание:
// * Статус           - Строка - "Выполнено", если задание было успешно выполнено;
//	                                  "Ошибка", если задание завершено с ошибкой.
// * АдресРезультата  - Строка - адрес временного хранилища, в которое будет
//	                                  помещен (или уже помещен) результат работы процедуры.
// * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//	                                     содержит адрес дополнительного временного хранилища,
//	                                     в которое будет помещен (или уже помещен) результат работы процедуры.
// * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
// * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// * Сообщения        - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю, 
//                                                сформированных в процедуре-обработчике длительной операции.
// 	ДопПараметры - Структура - Описание:
// * Ссылка - ДокументСсылка.СменноеЗадание - 
// * КешСтрок - Массив из ДанныеФормыЭлементДерева - 
&НаКлиенте
Процедура УстановитьСтатусВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьРезультатУстановкиСтатусаВФоне(Результат, ДопПараметры.Ссылка);
		
		РазвернутьСтрокиДереваИзКеша(ДопПараметры.КешСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(ЭтотОбъект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания"), Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьОтборОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИсполнителя(Команда)
	
	УдалитьТекущегоИсполнителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.СменныеЗадания.ВыделенныеСтроки);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СменныеЗадания);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СменныеЗадания, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СменныеЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СменныеЗадания);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементами

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Смены - показать гиперссылку
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиНовыйИсполнитель();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Смены - скрыть представление строки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыПредставлениеСтроки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиНовыйИсполнитель();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Смены - скрыть гиперссылку
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиНовыйИсполнитель();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	// Смены - показать представление строки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыПредставлениеСтроки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиНовыйИсполнитель();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Смены - перегрузка красным
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СменыЗагрузка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиОбъект();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Смены.Загрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Смены.Длительность");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Сменные задания - оформление поля Дата в списке
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект,
		"СменныеЗадания.Дата",
		Элементы.СменныеЗаданияДата.Имя);
	
	// Операции - ед изм времени выполнения Секунда
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Секунда;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сек';
																								|en = 'sec'")));
	
	// Операции - ед изм времени выполнения Минута
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'мин';
																								|en = 'min'")));
	
	// Операции - ед изм времени выполнения Час
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Час;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'ч';
																								|en = 'h'")));
	
	// Операции - ед изм времени выполнения Сутки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сут';
																								|en = 'd'")));
	
	// Операции - выделить красным строки которые нужно назначать или нарушен порядок назначения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Операции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.НужноНазначать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.НарушенПорядокНазначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Операции - строки, недоступные для назначения, выделить серым шрифтом
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Операции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.СменноеЗадание");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.МожноНазначать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.НужноНазначать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	// Операции - представление этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииЭтап.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Операции.ПредставлениеЭтапа"));
	
	// дата начала
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Операции", "ОперацииНачалоЭтапа");
	
	// дата завершения
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Операции", "ОперацииОкончаниеЭтапа");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("РежимНазначения") 
		ИЛИ Инициализация Тогда
		
		Элементы.НазначатьИсполнителям.Гиперссылка = Форма.РежимНазначения <> РежимНазначенияИсполнителям();
		Элементы.НазначатьИсполнителям.ЦветТекста = ?(Форма.РежимНазначения <> РежимНазначенияИсполнителям(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Элементы.НазначатьРабочимЦентрам.Гиперссылка = Форма.РежимНазначения <> РежимНазначенияРабочимЦентрам();
		Элементы.НазначатьРабочимЦентрам.ЦветТекста = ?(Форма.РежимНазначения <> РежимНазначенияРабочимЦентрам(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Элементы.НазначатьВидамРЦ.Гиперссылка = Форма.РежимНазначения <> РежимНазначенияВидамРЦ();
		Элементы.НазначатьВидамРЦ.ЦветТекста = ?(Форма.РежимНазначения <> РежимНазначенияВидамРЦ(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Элементы.СменыКонтекстноеМенюУдалитьИсполнителя.Видимость = Форма.РежимНазначения = РежимНазначенияИсполнителям();
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Операции,
			"Подразделение",
			Форма.Подразделение,
			ВидСравненияКомпоновкиДанных.Равно,,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СменныеЗадания,
			"Подразделение",
			Форма.Подразделение,
			ВидСравненияКомпоновкиДанных.Равно,,
			Истина);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОтборПоЭтапу")
		ИЛИ Инициализация Тогда
		
		ЕстьОтбор = НЕ Форма.Параметры.ОтборПоЭтапу.Пустая();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Операции,
			"Этап",
			Форма.Параметры.ОтборПоЭтапу,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЕстьОтбор);
		
		Элементы.Подразделение.ТолькоПросмотр                    = ЕстьОтбор;
		Элементы.ИнформационноеСообщениеОперации.Видимость       = ЕстьОтбор;
		Элементы.ИнформационноеСообщениеСменныеЗадания.Видимость = ЕстьОтбор;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РежимНазначения") 
		ИЛИ СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		Если Форма.РежимНазначения = РежимНазначенияИсполнителям() Тогда
			ОбъектНазначения = НСтр("ru = 'Исполнитель';
									|en = 'Assignee'");
		ИначеЕсли Форма.РежимНазначения = РежимНазначенияРабочимЦентрам() Тогда
			ОбъектНазначения = НСтр("ru = 'Рабочий центр';
									|en = 'Work center'");
		ИначеЕсли Форма.РежимНазначения = РежимНазначенияВидамРЦ() Тогда
			ОбъектНазначения = НСтр("ru = 'Вид РЦ';
									|en = 'Work center type'");
		КонецЕсли;
		
		Если Форма.ЕстьУчастки Тогда
			Элементы.СменыГруппаПредставление.Заголовок = СтрШаблон(НСтр("ru = 'Смена, Участок, %1';
																		|en = 'Shift, Land, %1'"), ОбъектНазначения);
		Иначе
			Элементы.СменыГруппаПредставление.Заголовок = СтрШаблон(НСтр("ru = 'Смена, %1';
																		|en = 'Shift, %1'"), ОбъектНазначения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РежимПросмотра") 
		ИЛИ Инициализация Тогда
		
		Элементы.МожноНазначать.Гиперссылка  = Форма.РежимПросмотра <> РежимПросмотраМожноНазначать();
		Элементы.МожноНазначать.ЦветТекста = ?(Форма.РежимПросмотра <> РежимПросмотраМожноНазначать(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Элементы.ВсеКНазначению.Гиперссылка  = Форма.РежимПросмотра <> РежимПросмотраВсеКНазначению();
		Элементы.ВсеКНазначению.ЦветТекста = ?(Форма.РежимПросмотра <> РежимПросмотраВсеКНазначению(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Элементы.Назначенные.Гиперссылка  = Форма.РежимПросмотра <> РежимПросмотраНазначенные();
		Элементы.Назначенные.ЦветТекста = ?(Форма.РежимПросмотра <> РежимПросмотраНазначенные(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Элементы.ОперацииНазначить.Видимость = Форма.РежимПросмотра = РежимПросмотраМожноНазначать()
			ИЛИ Форма.РежимПросмотра = РежимПросмотраВсеКНазначению();
		Элементы.ОперацииКонтекстноеМенюНазначить.Видимость = Форма.РежимПросмотра = РежимПросмотраМожноНазначать()
			ИЛИ Форма.РежимПросмотра = РежимПросмотраВсеКНазначению();
			
		Элементы.ОперацииНазначитьЧасть.Видимость = Форма.РежимПросмотра = РежимПросмотраМожноНазначать()
			ИЛИ Форма.РежимПросмотра = РежимПросмотраВсеКНазначению();
		Элементы.ОперацииКонтекстноеМенюНазначитьЧасть.Видимость = Форма.РежимПросмотра = РежимПросмотраМожноНазначать()
			ИЛИ Форма.РежимПросмотра = РежимПросмотраВсеКНазначению();
		
		Элементы.ОперацииИзменить.Видимость = Форма.РежимПросмотра = РежимПросмотраНазначенные();
		Элементы.ОперацииКонтекстноеМенюИзменить.Видимость = Форма.РежимПросмотра = РежимПросмотраНазначенные();
		
		Элементы.ОперацииУдалить.Видимость = Форма.РежимПросмотра = РежимПросмотраНазначенные();
		Элементы.ОперацииКонтекстноеМенюУдалить.Видимость = Форма.РежимПросмотра = РежимПросмотраНазначенные();
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РежимПросмотра")
		ИЛИ СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		Элементы.ОперацииОтборПоУчастку.Видимость = Форма.ЕстьУчастки
			И (
				Форма.РежимПросмотра = РежимПросмотраМожноНазначать()
				ИЛИ Форма.РежимПросмотра = РежимПросмотраВсеКНазначению()
				);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОперацииАктивнаяСтрока") 
		ИЛИ Инициализация Тогда
		
		ДоступностьКоманд = Элементы.Операции.ТекущаяСтрока <> Неопределено;
		
		Элементы.ОперацииНазначить.Доступность = ДоступностьКоманд;
		Элементы.ОперацииКонтекстноеМенюНазначить.Доступность = ДоступностьКоманд;
		
		Элементы.ОперацииНазначитьЧасть.Доступность = ДоступностьКоманд;
		Элементы.ОперацииКонтекстноеМенюНазначитьЧасть.Доступность = ДоступностьКоманд;
		
		Элементы.ОперацииИзменить.Доступность = ДоступностьКоманд;
		Элементы.ОперацииКонтекстноеМенюИзменить.Доступность = ДоступностьКоманд;
		
		Элементы.ОперацииУдалить.Доступность = ДоступностьКоманд;
		Элементы.ОперацииКонтекстноеМенюУдалить.Доступность = ДоступностьКоманд;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СменыАктивнаяСтрока") 
		ИЛИ Инициализация Тогда
		
		ДоступностьКоманд = Элементы.Смены.ТекущаяСтрока <> Неопределено;
		
		Элементы.СменыКонтекстноеМенюОткрытьЗадание.Доступность = ДоступностьКоманд;
		Элементы.СменыКонтекстноеМенюУстановитьЗаданиюСтатусСформировано.Доступность = ДоступностьКоманд;
		Элементы.СменыКонтекстноеМенюУдалитьИсполнителя.Доступность = ДоступностьКоманд
			И Форма.РежимНазначения = РежимНазначенияИсполнителям()
			И Форма.Смены.НайтиПоИдентификатору(Элементы.Смены.ТекущаяСтрока).ТипСтроки = ТипСтрокиОбъект();
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОтборПоУчастку") 
		ИЛИ Инициализация Тогда
		
		Элементы.ОперацииОтборПоУчастку.Пометка = Форма.ОтборПоУчастку;
		
	КонецЕсли;
	
	Если Инициализация Тогда
		
		Элементы.Период.Видимость = Форма.ПланируетсяГрафикПроизводства;
		Элементы.ОперацииНачалоЭтапа.Видимость = Форма.ПланируетсяГрафикПроизводства;
		Элементы.ОперацииОкончаниеЭтапа.Видимость = Форма.ПланируетсяГрафикПроизводства;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева()
	
	Для каждого Строка Из Смены.ПолучитьЭлементы() Цикл
		
		Элементы.Смены.Развернуть(Строка.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборОпераций()
	
	Источник = Элементы.Смены.ТекущиеДанные;
	ЕстьИсточник = Источник <> Неопределено;
	
	//
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"НазначатьНеРанее",
		?(ЕстьИсточник, Источник.Дата, Неопределено),
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,,
		ЕстьИсточник И РежимПросмотра = РежимПросмотраМожноНазначать());
	
	//
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"МожноНазначать",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,,
		РежимПросмотра = РежимПросмотраМожноНазначать());
	
	//
	
	Значение = Неопределено;
	ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно;
	
	Если РежимПросмотра = РежимПросмотраВсеКНазначению() Тогда
		Значение = ПредопределенноеЗначение("Документ.СменноеЗадание.ПустаяСсылка");
	ИначеЕсли РежимПросмотра = РежимПросмотраНазначенные() Тогда
		Если ЕстьИсточник Тогда
			Значение = Источник.СменноеЗадание;
		Иначе
			Значение = ПредопределенноеЗначение("Документ.СменноеЗадание.ПустаяСсылка");
			ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Заполнено;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"СменноеЗадание",
		Значение,
		ВидСравненияСКД,,
		Значение <> Неопределено);
	
	//
	
	ОтборПоОбъекту = ЕстьИсточник
		И РежимПросмотра = РежимПросмотраНазначенные()
		И (Источник.ТипСтроки = ТипСтрокиОбъект()
			ИЛИ Источник.ТипСтроки = ТипСтрокиОбъектНеНазначен());
	
	//
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"Исполнитель",
		?(ЕстьИсточник, Источник.ОбъектНазначения, Неопределено),
		ВидСравненияКомпоновкиДанных.Равно,,
		ОтборПоОбъекту И РежимНазначения = РежимНазначенияИсполнителям());
		
	//
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"РабочийЦентр",
		?(ЕстьИсточник, Источник.ОбъектНазначения, Неопределено),
		ВидСравненияКомпоновкиДанных.Равно,,
		ОтборПоОбъекту И РежимНазначения = РежимНазначенияРабочимЦентрам());
		
	//
	
	Значение = Неопределено;
	ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно;
	
	Если ОтборПоОбъекту И РежимНазначения = РежимНазначенияВидамРЦ() Тогда
		
		Значение = Источник.ОбъектНазначения;
		
	ИначеЕсли ЕстьИсточник
		И Источник.ТипСтроки = ТипСтрокиОбъект()
		И (РежимПросмотра = РежимПросмотраМожноНазначать()
			ИЛИ РежимПросмотра = РежимПросмотраВсеКНазначению())
		И (РежимНазначения = РежимНазначенияРабочимЦентрам()
			ИЛИ РежимНазначения = РежимНазначенияВидамРЦ()) Тогда
		
		Значение = Новый СписокЗначений;
		Значение.Добавить(Источник.ВидРабочегоЦентра);
		Значение.Добавить(ПредопределенноеЗначение("Справочник.ВидыРабочихЦентров.ПустаяСсылка"));
		Значение.Добавить(ПредопределенноеЗначение("Справочник.РабочиеЦентры.ПустаяСсылка"));
		Значение.Добавить(Неопределено);
		
		ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСписке;
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"ВидРабочегоЦентра",
		Значение,
		ВидСравненияСКД,,
		Значение <> Неопределено);
	
	//
	
	УстановитьОтборПоУчастку = ОтборПоУчастку
		И ЕстьИсточник
		И НЕ Источник.Участок.Пустая()
		И (РежимПросмотра = РежимПросмотраМожноНазначать()
			ИЛИ РежимПросмотра = РежимПросмотраВсеКНазначению());
	
	Операции.Параметры.УстановитьЗначениеПараметра("ОтборПоУчастку", УстановитьОтборПоУчастку);
	
	Операции.Параметры.УстановитьЗначениеПараметра("Участок",
		?(УстановитьОтборПоУчастку, Источник.Участок, Неопределено));
		
	Операции.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ДатаНачала);
	Операции.Параметры.УстановитьЗначениеПараметра("КонецПериода", ДатаОкончания);
	Операции.Параметры.УстановитьЗначениеПараметра("ПланируетсяГрафикПроизводства", ПланируетсяГрафикПроизводства);
	
КонецПроцедуры

&НаКлиенте
Функция ЗакешироватьРазвернутыеСтрокиДерева()
	
	КешСтрок = Новый Массив;
	
	Для каждого Строка Из Смены.ПолучитьЭлементы() Цикл
		
		Если Элементы.Смены.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			
			КешСтрок.Добавить(Строка.СменноеЗадание);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КешСтрок;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиДереваИзКеша(КешСтрок)
	
	Для каждого Строка Из Смены.ПолучитьЭлементы() Цикл
		
		Если КешСтрок.Найти(Строка.СменноеЗадание) <> Неопределено Тогда
			
			Элементы.Смены.Развернуть(Строка.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗакешироватьТекСтрокуДерева()
	
	Если Элементы.Смены.ТекущаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТекСтроки = Смены.НайтиПоИдентификатору(Элементы.Смены.ТекущаяСтрока);
	
	КешТекСтроки = Новый Структура;
	КешТекСтроки.Вставить("СменноеЗадание", ДанныеТекСтроки.СменноеЗадание);
	
	Если ДанныеТекСтроки.ТипСтроки = ТипСтрокиОбъект() Тогда
		
		КешТекСтроки.Вставить("ОбъектНазначения", ДанныеТекСтроки.ОбъектНазначения);
		
	ИначеЕсли ДанныеТекСтроки.ТипСтроки = ТипСтрокиОбъектНеНазначен()
		ИЛИ ДанныеТекСтроки.ТипСтроки = ТипСтрокиНовыйИсполнитель() Тогда
		
		КешТекСтроки.Вставить("ТипСтроки", ДанныеТекСтроки.ТипСтроки);
		
	КонецЕсли;
	
	Возврат КешТекСтроки;
	
КонецФункции

&НаСервере
Процедура УстановитьТекСтрокуДереваИзКеша(КешТекСтроки, Дерево)
	
	Если КешТекСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСмена = Дерево.Строки.Найти(КешТекСтроки.СменноеЗадание, "СменноеЗадание");
	Если СтрокаСмена <> Неопределено Тогда
		
		ИндексСмены = Дерево.Строки.Индекс(СтрокаСмена);
		
		Если КешТекСтроки.Количество() = 1 Тогда
			
			Элементы.Смены.ТекущаяСтрока = Смены.ПолучитьЭлементы()[ИндексСмены].ПолучитьИдентификатор();
			
		Иначе
			
			СтрокаПотомок = Неопределено;
			Если КешТекСтроки.Свойство("ОбъектНазначения") Тогда
				СтрокаПотомок = СтрокаСмена.Строки.Найти(КешТекСтроки.ОбъектНазначения, "ОбъектНазначения");
			ИначеЕсли КешТекСтроки.Свойство("ТипСтроки") Тогда
				СтрокаПотомок = СтрокаСмена.Строки.Найти(КешТекСтроки.ТипСтроки, "ТипСтроки");
			КонецЕсли;
			
			Если СтрокаПотомок <> Неопределено Тогда
				
				ИндексПотомок = СтрокаСмена.Строки.Индекс(СтрокаПотомок);
				Элементы.Смены.ТекущаяСтрока = Смены.ПолучитьЭлементы()[ИндексСмены].ПолучитьЭлементы()[ИндексПотомок].ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокСменныхЗаданий()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	Если Параметры.ОтборПоЭтапу.Пустая() Тогда
		
		СвойстваСписка.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокументПереопределяемый.Ссылка        КАК Ссылка,
			|	ДокументПереопределяемый.Номер         КАК Номер,
			|	ДокументПереопределяемый.Дата          КАК Дата,
			|	ДокументПереопределяемый.Статус        КАК Статус,
			|	ДокументПереопределяемый.Подразделение КАК Подразделение,
			|	ДокументПереопределяемый.Участок       КАК Участок,
			|	ДокументПереопределяемый.Смена         КАК Смена,
			|	ДокументПереопределяемый.Ответственный КАК Ответственный,
			|	ДокументПереопределяемый.Комментарий   КАК Комментарий
			|ИЗ
			|	Документ.СменноеЗадание КАК ДокументПереопределяемый";
		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СменныеЗадания, СвойстваСписка);
		
	Иначе
		
		СвойстваСписка.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокументПереопределяемый.Ссылка        КАК Ссылка,
			|	ДокументПереопределяемый.Номер         КАК Номер,
			|	ДокументПереопределяемый.Дата          КАК Дата,
			|	ДокументПереопределяемый.Статус        КАК Статус,
			|	ДокументПереопределяемый.Подразделение КАК Подразделение,
			|	ДокументПереопределяемый.Участок       КАК Участок,
			|	ДокументПереопределяемый.Смена         КАК Смена,
			|	ДокументПереопределяемый.Ответственный КАК Ответственный,
			|	ДокументПереопределяемый.Комментарий   КАК Комментарий
			|ИЗ
			|	Документ.СменноеЗадание КАК ДокументПереопределяемый
			|ГДЕ
			|	(ИСТИНА В
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
			|		ГДЕ
			|			Операции.СменноеЗадание = ДокументПереопределяемый.Ссылка
			|			И Операции.Этап = &Этап)
			|	ИЛИ ИСТИНА В
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Документ.ПроизводственнаяОперация2_2 КАК Операции
			|		ГДЕ
			|			Операции.СменноеЗадание = ДокументПереопределяемый.Ссылка
			|			И Операции.Этап = &Этап
			|			И Операции.Проведен))";
			
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СменныеЗадания, СвойстваСписка);
		
		СменныеЗадания.Параметры.УстановитьЗначениеПараметра("Этап", Параметры.ОтборПоЭтапу);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Чтение

&НаСервере
Процедура ЗаполнитьСмены()
	
	АктивизироватьСтроку = Элементы.Смены.ТекущаяСтрока = Неопределено;
	
	Смены.ПолучитьЭлементы().Очистить();
	ВыделитьКнопкуНастроитьСоставСмен();
	
	Если Подразделение.Пустая() ИЛИ СоставСмен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НесколькоСменВПодразделении = ПроизводствоСервер.ГрафикиРаботыПодразделений(Подразделение).Количество() > 1;
	
	// Чтение состава смен
	Запрос = Новый Запрос(ТекстЗапросаСмены());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Задания", СоставСмен.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("НазначатьИсполнителям", РежимНазначения = РежимНазначенияИсполнителям());
	Запрос.УстановитьПараметр("НазначатьРабочимЦентрам", РежимНазначения = РежимНазначенияРабочимЦентрам());
	Запрос.УстановитьПараметр("НазначатьВидамРЦ", РежимНазначения = РежимНазначенияВидамРЦ());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если НЕ ВыборкаИтоги.Следующий() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаСЗ = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаСмены = РезультатЗапроса.Выгрузить();
	
	// Чтение расписания
	ВсеГрафики = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСмены.ВыгрузитьКолонку("Смена"));
	ВсеСсылки = Неопределено;
	ГрафикиРЦ = Неопределено;
	Если РежимНазначения <> РежимНазначенияИсполнителям() Тогда
		ВсеСсылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСмены.ВыгрузитьКолонку("ОбъектНазначения"));
		ГрафикиРЦ = ПроизводствоСервер.ГрафикиРаботыРЦ(ВсеСсылки, РежимНазначения = РежимНазначенияРабочимЦентрам());
		ГрафикиРЦ.Индексы.Добавить("Ссылка, ГрафикРаботы");
		ГрафикиРЦ.Индексы.Добавить("Ссылка");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеГрафики, ГрафикиРЦ.ВыгрузитьКолонку("ГрафикРаботы"), Истина);
	КонецЕсли;
	
	Расписание = ПланированиеПроизводства.РасписаниеРаботыПоГрафику(
		ВсеГрафики,
		НачалоДня(ВыборкаИтоги.ДатаМин),
		КонецДня(ВыборкаИтоги.Дата));
	Расписание.Индексы.Добавить("ДатаГрафика, ГрафикРаботы");
	СтруктураПоиска1 = Новый Структура("ДатаГрафика, ГрафикРаботы");
	
	СоставВРЦ = Неопределено;
	СтруктураПоиска2 = Неопределено;
	Если РежимНазначения = РежимНазначенияВидамРЦ() Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВидыРабочихЦентров.Ссылка КАК ОбъектНазначения,
			|	РабочиеЦентры.Участок     КАК Участок,
			|	ЕСТЬNULL(РабочиеЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)) КАК РабочийЦентр
			|ИЗ
			|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
			|		ПО ВидыРабочихЦентров.Ссылка = РабочиеЦентры.ВидРабочегоЦентра
			|			И (РабочиеЦентры.ПометкаУдаления = ЛОЖЬ)
			|ГДЕ
			|	ВидыРабочихЦентров.Ссылка В(&Ссылки)");
		Запрос.УстановитьПараметр("Ссылки", ВсеСсылки);
		СоставВРЦ = Запрос.Выполнить().Выгрузить();
		СоставВРЦ.Индексы.Добавить("ОбъектНазначения, Участок");
		СтруктураПоиска2 = Новый Структура("ОбъектНазначения, Участок");
	КонецЕсли;
	
	// Заполнение дерева
	Дерево = РеквизитФормыВЗначение("Смены");
	Пока ВыборкаСЗ.Следующий() Цикл
		
		// Строка - смена
		СтрокаСмена = Дерево.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаСмена, ВыборкаСЗ, "СменноеЗадание, Дата, Участок, КоличествоОпераций");
		
		СтрокаСмена.ТипСтроки = ТипСтрокиСмена();
		СтрокаСмена.ОбъектНазначения = ВыборкаСЗ.СменноеЗадание;
		
		СтрокаСмена.ПредставлениеОбъекта = УправлениеПроизводствомКлиентСервер.ПредставлениеСменногоЗадания(
			ВыборкаСЗ.Смена, ВыборкаСЗ.Дата, ВыборкаСЗ.Участок, НесколькоСменВПодразделении);
		
		// Длительность
		СтруктураПоиска1.ДатаГрафика = НачалоДня(ВыборкаСЗ.Дата);
		СтруктураПоиска1.ГрафикРаботы = ВыборкаСЗ.Смена;
		РасписаниеСмены = Расписание.НайтиСтроки(СтруктураПоиска1);
		
		СуммаСекунды = 0;
		Для каждого Строка Из РасписаниеСмены Цикл
			СуммаСекунды = СуммаСекунды + Строка.Длительность;
		КонецЦикла;
		
		СтрокаСмена.Длительность = Окр(
			ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				СуммаСекунды,
				Перечисления.ЕдиницыИзмеренияВремени.Час),
			1);
		
		// Представление
		ЗаполнитьПредставлениеСтрокиСмены(СтрокаСмена);
		
		Выборка = ВыборкаСЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.КоличествоОпераций = 0 И Выборка.ОбъектНазначения.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			// Строка - объект назначения
			СтрокаОбъект = СтрокаСмена.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаОбъект, Выборка, "СменноеЗадание, Дата, Участок, ОбъектНазначения, ВидРабочегоЦентра, КоличествоОпераций");
			
			Если Выборка.ОбъектНазначения.Пустая() Тогда
				СтрокаОбъект.ТипСтроки = ТипСтрокиОбъектНеНазначен();
				СтрокаОбъект.ПредставлениеОбъекта = ?(РежимНазначения = РежимНазначенияИсполнителям(),
					НСтр("ru = '<исполнитель не назначен>';
						|en = '<no assignee>'"),
					?(РежимНазначения = РежимНазначенияРабочимЦентрам(),
						НСтр("ru = '<рабочий центр не назначен>';
							|en = '<work center is not specified>'"),
						НСтр("ru = '<вид РЦ не назначен>';
							|en = '<work center type is not specified>'")));
			Иначе
				СтрокаОбъект.ТипСтроки = ТипСтрокиОбъект();
				СтрокаОбъект.ПредставлениеОбъекта = Выборка.ПредставлениеОбъекта;
				
				Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
					СтрокаОбъект.Длительность = СтрокаСмена.Длительность;
				Иначе
					
					Если РежимНазначения = РежимНазначенияВидамРЦ() Тогда
						
						ЗаполнитьЗначенияСвойств(СтруктураПоиска2, Выборка, "ОбъектНазначения, Участок");
						СтрокиСостава = СоставВРЦ.НайтиСтроки(СтруктураПоиска2);
						Для каждого Строка Из СтрокиСостава Цикл
							СтрокаОбъект.Длительность = СтрокаОбъект.Длительность
								+ РассчитатьДлительность(
									Строка.РабочийЦентр,
									ГрафикиРЦ,
									Расписание,
									ВыборкаСЗ.Смена,
									СтрокаСмена.Длительность,
									НачалоДня(ВыборкаСЗ.Дата),
									РасписаниеСмены);
						КонецЦикла;
						
					Иначе
						
						СтрокаОбъект.Длительность = РассчитатьДлительность(
							Выборка.ОбъектНазначения,
							ГрафикиРЦ,
							Расписание,
							ВыборкаСЗ.Смена,
							СтрокаСмена.Длительность,
							НачалоДня(ВыборкаСЗ.Дата),
							РасписаниеСмены);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаОбъект.Загрузка = Окр(
				ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
					Выборка.ЗагрузкаСекунды,
					Перечисления.ЕдиницыИзмеренияВремени.Час),
				1);
			СтрокаОбъект.Свободно = ?(СтрокаОбъект.Длительность > СтрокаОбъект.Загрузка,
				СтрокаОбъект.Длительность - СтрокаОбъект.Загрузка, 0);
			
			СтрокаСмена.Загрузка = СтрокаСмена.Загрузка + СтрокаОбъект.Загрузка;
			СтрокаСмена.Свободно = СтрокаСмена.Свободно + СтрокаОбъект.Свободно;
			
			ЗаполнитьПредставлениеСтрокиСмены(СтрокаОбъект);
			
		КонецЦикла;
		
		// Строка - добавить исполнителей
		Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
			
			СтрокаКоманда = СтрокаСмена.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаКоманда, ВыборкаСЗ, "СменноеЗадание, Дата, Участок");
			
			СтрокаКоманда.ТипСтроки = ТипСтрокиНовыйИсполнитель();
			СтрокаКоманда.Действие = НСтр("ru = '<добавить исполнителей>';
											|en = '<add assignees>'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "Смены");
	ВыделитьКнопкуНастроитьСоставСмен();
	
	Если АктивизироватьСтроку И Дерево.Строки.Количество() <> 0 Тогда
		Элементы.Смены.ТекущаяСтрока = Смены.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСменыПослеНазначенияОпераций(МассивСмен)
	
	Если МассивСмен.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	КешТекСтроки = ЗакешироватьТекСтрокуДерева();
	
	Дерево = РеквизитФормыВЗначение("Смены");
	
	// Выборка изменений
	Запрос = Новый Запрос(ТекстЗапросаОбновлениеСмены());
	Запрос.УстановитьПараметр("Задания", МассивСмен);
	Запрос.УстановитьПараметр("НазначатьИсполнителям", РежимНазначения = РежимНазначенияИсполнителям());
	Запрос.УстановитьПараметр("НазначатьРабочимЦентрам", РежимНазначения = РежимНазначенияРабочимЦентрам());
	Запрос.УстановитьПараметр("НазначатьВидамРЦ", РежимНазначения = РежимНазначенияВидамРЦ());
	
	СоставЗаданий = Запрос.Выполнить().Выгрузить();
	СоставЗаданий.Индексы.Добавить("СменноеЗадание, ОбъектНазначения");
	СтруктураПоиска = Новый Структура("СменноеЗадание, ОбъектНазначения");
	
	ПолныйПересчет = Ложь;
	
	Для каждого СменноеЗадание Из МассивСмен Цикл
		
		// Обновление строки - смены
		СтрокаСмена = Дерево.Строки.Найти(СменноеЗадание, "СменноеЗадание");
		
		Если СтрокаСмена = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСмена.КоличествоОпераций = 0;
		СтрокаСмена.Загрузка = 0;
		СтрокаСмена.Свободно = 0;
		
		СчОбъектов = 0;
		
		Для каждого СтрокаОбъект Из СтрокаСмена.Строки Цикл
			
			Если СтрокаОбъект.ТипСтроки = ТипСтрокиНовыйИсполнитель() Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОбъект);
			НайденныеСтроки = СоставЗаданий.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				
				СтрокаОбъект.КоличествоОпераций = 0;
				СтрокаОбъект.Загрузка = 0;
				СтрокаОбъект.Свободно = СтрокаОбъект.Длительность;
				
				СтрокаСмена.Свободно = СтрокаСмена.Свободно + СтрокаОбъект.Свободно;
				
			Иначе
				
				СтрокаОбъект.КоличествоОпераций = НайденныеСтроки[0].КоличествоОпераций;
				СтрокаОбъект.Загрузка = Окр(
					ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
						НайденныеСтроки[0].ЗагрузкаСекунды,
						Перечисления.ЕдиницыИзмеренияВремени.Час),
					1);
				СтрокаОбъект.Свободно = ?(СтрокаОбъект.Длительность > СтрокаОбъект.Загрузка,
					СтрокаОбъект.Длительность - СтрокаОбъект.Загрузка, 0);
				
				СтрокаСмена.КоличествоОпераций = СтрокаСмена.КоличествоОпераций + СтрокаОбъект.КоличествоОпераций;
				СтрокаСмена.Загрузка = СтрокаСмена.Загрузка + СтрокаОбъект.Загрузка;
				СтрокаСмена.Свободно = СтрокаСмена.Свободно + СтрокаОбъект.Свободно;
				
				СчОбъектов = СчОбъектов + 1;
				
			КонецЕсли;
			
			ЗаполнитьПредставлениеСтрокиСмены(СтрокаОбъект);
			
		КонецЦикла;
		
		Если СчОбъектов <> СоставЗаданий.НайтиСтроки(Новый Структура("СменноеЗадание", СменноеЗадание)).Количество() Тогда
			
			ПолныйПересчет = Истина;
			Прервать;
			
		Иначе
			
			ЗаполнитьПредставлениеСтрокиСмены(СтрокаСмена);
			
			СтрокаОбъектНеНазначен = СтрокаСмена.Строки.Найти(ТипСтрокиОбъектНеНазначен(), "ТипСтроки");
			Если СтрокаОбъектНеНазначен <> Неопределено
				И СтрокаОбъектНеНазначен.КоличествоОпераций = 0 Тогда
				
				СтрокаСмена.Строки.Удалить(СтрокаОбъектНеНазначен);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолныйПересчет Тогда
		
		ЗаполнитьСмены();
		
		УстановитьТекСтрокуДереваИзКеша(КешТекСтроки, РеквизитФормыВЗначение("Смены"));
		
	Иначе
		
		ЗначениеВРеквизитФормы(Дерево, "Смены");
		
		УстановитьТекСтрокуДереваИзКеша(КешТекСтроки, Дерево);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСмены()
	
	Результат =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.СменноеЗадание            КАК СменноеЗадание,
		|	ВложенныйЗапрос.Смена                     КАК Смена,
		|	ВложенныйЗапрос.Дата                      КАК ДатаМин,
		|	ВложенныйЗапрос.Дата                      КАК Дата,
		|	ВложенныйЗапрос.Участок                   КАК Участок,
		|	ВложенныйЗапрос.ОбъектНазначения          КАК ОбъектНазначения,
		|	ВложенныйЗапрос.ПредставлениеОбъекта      КАК ПредставлениеОбъекта,
		|	ВложенныйЗапрос.ВидРабочегоЦентра         КАК ВидРабочегоЦентра,
		|	СУММА(ВложенныйЗапрос.КоличествоОпераций) КАК КоличествоОпераций,
		|	СУММА(ВложенныйЗапрос.ЗагрузкаСекунды)    КАК ЗагрузкаСекунды
		|ИЗ
		|	(ВЫБРАТЬ
		|		Операции.СменноеЗадание КАК СменноеЗадание,
		|		Задание.Смена           КАК Смена,
		|		Задание.Дата            КАК Дата,
		|		Задание.Участок         КАК Участок,
		|		ВЫБОР
		|			КОГДА &НазначатьИсполнителям
		|				ТОГДА Операции.Исполнитель
		|			КОГДА &НазначатьРабочимЦентрам
		|				ТОГДА Операции.РабочийЦентр
		|			КОГДА &НазначатьВидамРЦ
		|				ТОГДА Операции.ВидРабочегоЦентра
		|		КОНЕЦ                   КАК ОбъектНазначения,
		|		ВЫБОР
		|			КОГДА &НазначатьИсполнителям
		|				ТОГДА Операции.Исполнитель.Наименование
		|			КОГДА &НазначатьРабочимЦентрам
		|				ТОГДА Операции.РабочийЦентр.Наименование
		|			КОГДА &НазначатьВидамРЦ
		|				ТОГДА Операции.ВидРабочегоЦентра.Наименование
		|		КОНЕЦ                   КАК ПредставлениеОбъекта,
		|		ВЫБОР
		|			КОГДА &НазначатьИсполнителям
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			КОГДА &НазначатьРабочимЦентрам
		|					И Операции.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ Операции.ВидРабочегоЦентра
		|		КОНЕЦ КАК ВидРабочегоЦентра,
		|		1                       КАК КоличествоОпераций,
		|		&ВремяОперации
		|			* ВЫБОР Операции.ВремяЕдИзм
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|					ТОГДА 60
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|					ТОГДА 3600
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|					ТОГДА 86400
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|					ТОГДА 86400
		|				ИНАЧЕ 1
		|			КОНЕЦ               КАК ЗагрузкаСекунды
		|	ИЗ
		|		РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменноеЗадание КАК Задание
		|			ПО Операции.СменноеЗадание = Задание.Ссылка
		|	ГДЕ
		|		Операции.Подразделение = &Подразделение
		|		И Операции.СменноеЗадание В(&Задания)
		|		И Задание.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСменныхЗаданий.Формируется)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СменноеЗадание.Ссылка,
		|		СменноеЗадание.Смена,
		|		СменноеЗадание.Дата,
		|		СменноеЗадание.Участок,
		|		ЕСТЬNULL(СменноеЗаданиеИсполнители.Исполнитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)),
		|		СменноеЗаданиеИсполнители.Исполнитель.Наименование,
		|		НЕОПРЕДЕЛЕНО,
		|		0,
		|		0
		|	ИЗ
		|		Документ.СменноеЗадание КАК СменноеЗадание
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СменноеЗадание.Исполнители КАК СменноеЗаданиеИсполнители
		|			ПО СменноеЗадание.Ссылка = СменноеЗаданиеИсполнители.Ссылка
		|	ГДЕ
		|		&НазначатьИсполнителям
		|		И СменноеЗадание.Ссылка В(&Задания)
		|		И СменноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСменныхЗаданий.Формируется)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СменноеЗадание.Ссылка,
		|		СменноеЗадание.Смена,
		|		СменноеЗадание.Дата,
		|		СменноеЗадание.Участок,
		|		ЕСТЬNULL(РабочиеЦентры.Ссылка, ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)),
		|		РабочиеЦентры.Наименование,
		|		РабочиеЦентры.ВидРабочегоЦентра,
		|		0,
		|		0
		|	ИЗ
		|		Документ.СменноеЗадание КАК СменноеЗадание
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|			ПО СменноеЗадание.Подразделение = ВидыРабочихЦентров.Подразделение
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|			ПО (ВидыРабочихЦентров.Ссылка = РабочиеЦентры.ВидРабочегоЦентра)
		|				И (СменноеЗадание.Участок = РабочиеЦентры.Участок
		|					ИЛИ РабочиеЦентры.Участок = ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка))
		|				И (РабочиеЦентры.ПометкаУдаления = ЛОЖЬ)
		|	ГДЕ
		|		&НазначатьРабочимЦентрам
		|		И СменноеЗадание.Ссылка В(&Задания)
		|		И СменноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСменныхЗаданий.Формируется)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СменноеЗадание.Ссылка,
		|		СменноеЗадание.Смена,
		|		СменноеЗадание.Дата,
		|		СменноеЗадание.Участок,
		|		ЕСТЬNULL(ВидыРабочихЦентров.Ссылка, ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)),
		|		ВидыРабочихЦентров.Наименование,
		|		ВидыРабочихЦентров.Ссылка,
		|		0,
		|		0
		|	ИЗ
		|		Документ.СменноеЗадание КАК СменноеЗадание
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|			ПО СменноеЗадание.Подразделение = ВидыРабочихЦентров.Подразделение
		|				И (ВидыРабочихЦентров.ПометкаУдаления = ЛОЖЬ)
		|	ГДЕ
		|		&НазначатьВидамРЦ
		|		И СменноеЗадание.Ссылка В(&Задания)
		|		И СменноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСменныхЗаданий.Формируется)
		|		И (СменноеЗадание.Участок = ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка)
		|				ИЛИ ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						Справочник.РабочиеЦентры КАК Т
		|					ГДЕ
		|						Т.ВидРабочегоЦентра = ВидыРабочихЦентров.Ссылка
		|						И Т.Участок = СменноеЗадание.Участок))) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Смена,
		|	ВложенныйЗапрос.СменноеЗадание,
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Участок,
		|	ВложенныйЗапрос.ОбъектНазначения,
		|	ВложенныйЗапрос.ВидРабочегоЦентра,
		|	ВложенныйЗапрос.ПредставлениеОбъекта,
		|	ВложенныйЗапрос.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Смена,
		|	Участок,
		|	ПредставлениеОбъекта
		|ИТОГИ
		|	МАКСИМУМ(Смена),
		|	МИНИМУМ(ДатаМин),
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(Участок),
		|	СУММА(КоличествоОпераций)
		|ПО
		|	ОБЩИЕ,
		|	СменноеЗадание";
	
	Результат = СтрЗаменить(
		Результат,
		"&ВремяОперации",
		РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ТекстЗапросаВремяОперации("Операции"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОбновлениеСмены()
	
	Результат =
		"ВЫБРАТЬ
		|	Операции.СменноеЗадание КАК СменноеЗадание,
		|	ВЫБОР
		|		КОГДА &НазначатьИсполнителям
		|			ТОГДА Операции.Исполнитель
		|		КОГДА &НазначатьРабочимЦентрам
		|			ТОГДА Операции.РабочийЦентр
		|		КОГДА &НазначатьВидамРЦ
		|			ТОГДА Операции.ВидРабочегоЦентра
		|	КОНЕЦ                   КАК ОбъектНазначения,
		|	СУММА(1)                КАК КоличествоОпераций,
		|	СУММА(
		|		&ВремяОперации
		|			* ВЫБОР Операции.ВремяЕдИзм
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|					ТОГДА 60
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|					ТОГДА 3600
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|					ТОГДА 86400
		|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|					ТОГДА 86400
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|		)                   КАК ЗагрузкаСекунды
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК Операции
		|ГДЕ
		|	Операции.СменноеЗадание В(&Задания)
		|
		|СГРУППИРОВАТЬ ПО
		|	Операции.СменноеЗадание,
		|	ВЫБОР
		|		КОГДА &НазначатьИсполнителям
		|			ТОГДА Операции.Исполнитель
		|		КОГДА &НазначатьРабочимЦентрам
		|			ТОГДА Операции.РабочийЦентр
		|		КОГДА &НазначатьВидамРЦ
		|			ТОГДА Операции.ВидРабочегоЦентра
		|	КОНЕЦ";
	
	Результат = СтрЗаменить(
		Результат,
		"&ВремяОперации",
		РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ТекстЗапросаВремяОперации("Операции"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеСтрокиСмены(Строка);
	
	Если Строка.КоличествоОпераций = 0 Тогда
		Строка.ПредставлениеСтроки = Строка.ПредставлениеОбъекта;
	Иначе
		Строка.ПредставлениеСтроки = СтрШаблон("%1 (%2)", Строка.ПредставлениеОбъекта, Строка.КоличествоОпераций);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьДлительность(Ссылка, Графики, Расписание, Смена, ДлительностьСмены, ДатаСмены, РасписаниеСмены)
	
	Результат = 0;
	
	Если Графики.НайтиСтроки(Новый Структура("Ссылка, ГрафикРаботы", Ссылка, Смена)).ВГраница() <> -1 Тогда
		Результат = ДлительностьСмены;
	Иначе
		
		СуммаСекунды = 0;
		СтрокиГрафики = Графики.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ДатаГрафика", ДатаСмены);
		
		Для каждого Строка Из СтрокиГрафики Цикл
			
			СтруктураПоиска.Вставить("ГрафикРаботы", Строка.ГрафикРаботы);
			РасписаниеРЦ = Расписание.НайтиСтроки(СтруктураПоиска);
			
			Для каждого Интервал1 Из РасписаниеСмены Цикл
				Для каждого Интервал2 Из РасписаниеРЦ Цикл
					
					ИнтервалыПересекаются = Интервал2.ВремяНачала < Интервал1.ВремяОкончания
						И Интервал2.ВремяОкончания > Интервал1.ВремяНачала;
					
					Если ИнтервалыПересекаются Тогда
						
						СуммаСекунды = СуммаСекунды
							+ (
								Мин(Интервал1.ВремяОкончания, Интервал2.ВремяОкончания)
								- Макс(Интервал1.ВремяНачала, Интервал2.ВремяНачала)
							);
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Результат = Окр(
			ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				СуммаСекунды,
				Перечисления.ЕдиницыИзмеренияВремени.Час),
			1);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСменыНаСервере()
	
	КешТекСтроки = ЗакешироватьТекСтрокуДерева();
	
	ЗаполнитьСмены();
	
	УстановитьТекСтрокуДереваИзКеша(КешТекСтроки, РеквизитФормыВЗначение("Смены"));
	
КонецПроцедуры

#КонецОбласти

#Область Запись

&НаКлиенте
Функция ПроверитьПолучитьОперацииДляНазначения(Строки)
	
	Если Строки.Количество() = 0 Тогда
		
		Результат = Неопределено;
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны операции для выполнения действия';
										|en = 'Operations to execute the action are not selected'"));
		
	Иначе
		
		Результат = Новый Массив;
		
		Для каждого Строка ИЗ Строки Цикл
			
			Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Действие не может быть выполнено для строки группировки списка';
												|en = 'Action cannot be executed for the list grouping row'"));
				
				Результат = Неопределено;
				Прервать;
				
			Иначе
				
				Результат.Добавить(Строка);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НазначитьОперацииВыбраннойСтроке(КлючиОпераций, Строка)
	
	ОчиститьСообщения();
	
	СтруктураПараметров = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыНазначения);
	СтруктураПараметров.Измерения.СменноеЗадание = Строка.СменноеЗадание;
	
	Если Строка.ТипСтроки = ТипСтрокиНовыйИсполнитель() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Подразделение", Подразделение);
		ПараметрыФормы.Вставить("СменноеЗадание", Строка.СменноеЗадание);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		ПараметрыФормы.Вставить("Дата", Строка.Дата);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Режим", "НазначениеНовомуИсполнителю");
		ДополнительныеПараметры.Вставить("КлючиОпераций", КлючиОпераций);
		ДополнительныеПараметры.Вставить("ПараметрыНазначения", СтруктураПараметров);
		
		ПараметрыФормы.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ФормированиеСменныхЗаданий.Форма.ПодборИсполнителей",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если Строка.ТипСтроки = ТипСтрокиОбъект() Тогда
			
			Если РежимНазначения = РежимНазначенияИсполнителям() Тогда
				
				СтруктураПараметров.Измерения.Исполнитель = Строка.ОбъектНазначения;
				
			ИначеЕсли РежимНазначения = РежимНазначенияРабочимЦентрам() Тогда
				
				СтруктураПараметров.Измерения.РабочийЦентр = Строка.ОбъектНазначения;
				СтруктураПараметров.Измерения.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
				
			ИначеЕсли РежимНазначения = РежимНазначенияВидамРЦ() Тогда
				
				СтруктураПараметров.Измерения.ВидРабочегоЦентра = Строка.ОбъектНазначения;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьУчастки Тогда
			
			Если ЕстьНесоответствующиеУчастки(Строка.Участок, КлючиОпераций) Тогда 
				
				ТекстВопроса = СтрШаблон(НСтр("ru = 'В назначаемых операциях есть участки не соответствующие участку ""%1"". Продолжить?';
												|en = 'Operations to assign contain areas that do not match the ""%1"" area. Continue?'"), Строка(Строка.Участок));
				
				Режим = Новый СписокЗначений;
				Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru = 'Назначить';
															|en = 'Assign'"));
				Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru = 'Отменить';
															|en = 'Cancel'"));
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("КлючиОпераций",        КлючиОпераций);
				ДопПараметры.Вставить("СменноеЗадание",       Строка.СменноеЗадание);
				ДопПараметры.Вставить("СтруктураПараметров",  СтруктураПараметров);
				
				ПоказатьВопрос(Новый ОписаниеОповещения("НазначитьОперацииЗавершение", ЭтотОбъект, ДопПараметры), ТекстВопроса,Режим);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КешСтрок = ЗакешироватьРазвернутыеСтрокиДерева();
		
		НазначитьОперации(КлючиОпераций, Строка.СменноеЗадание, СтруктураПараметров);
		
		РазвернутьСтрокиДереваИзКеша(КешСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНесоответствующиеУчастки(Участок, КлючиОпераций)
	
	Результат = Ложь;

	Для Каждого Ключ Из КлючиОпераций Цикл

		Если ЗначениеЗаполнено(Ключ.Участок)
			И НЕ Участок = Ключ.Участок Тогда
			
			Результат = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;
			
КонецФункции

// Обработчик оповещения
&НаКлиенте
Процедура НазначитьОперацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КлючиОпераций = ДополнительныеПараметры.КлючиОпераций;
	СменноеЗадание = ДополнительныеПараметры.СменноеЗадание;
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КешСтрок = ЗакешироватьРазвернутыеСтрокиДерева();
	
	НазначитьОперации(КлючиОпераций, СменноеЗадание, СтруктураПараметров);
	
	РазвернутьСтрокиДереваИзКеша(КешСтрок);
	
КонецПроцедуры


&НаСервере
Процедура НазначитьОперации(КлючиОпераций, СменноеЗадание, СтруктураПараметров)
	
	РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.НазначитьОперации(
		КлючиОпераций,
		СтруктураПараметров);
	
	ОбновитьФормуПослеНазначенияОпераций(КлючиОпераций, СменноеЗадание);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИсполнителей(СменноеЗадание, Ссылки)
	
	КешТекСтроки = ЗакешироватьТекСтрокуДерева();
	
	Дерево = РеквизитФормыВЗначение("Смены");
	
	СтрокаСмена = Дерево.Строки.Найти(СменноеЗадание, "СменноеЗадание");
	Если СтрокаСмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеИсполнители = Новый Массив;
	Для каждого Ссылка Из Ссылки Цикл
		Если СтрокаСмена.Строки.Найти(Ссылка, "ОбъектНазначения") = Неопределено Тогда
			НовыеИсполнители.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	Если НовыеИсполнители.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Документы.СменноеЗадание.ДобавитьИсполнителей(СменноеЗадание, НовыеИсполнители);
	
	Для каждого Ссылка Из НовыеИсполнители Цикл
		
		СтрокаОбъект = СтрокаСмена.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаОбъект, СтрокаСмена, "СменноеЗадание, Дата, Участок, Длительность");
		
		СтрокаОбъект.ТипСтроки = ТипСтрокиОбъект();
		СтрокаОбъект.ОбъектНазначения = Ссылка;
		СтрокаОбъект.ПредставлениеОбъекта = Ссылка;
		СтрокаОбъект.Свободно = СтрокаОбъект.Длительность;
		
		СтрокаСмена.Свободно = СтрокаСмена.Свободно + СтрокаОбъект.Свободно;
		
		ЗаполнитьПредставлениеСтрокиСмены(СтрокаОбъект);
		
	КонецЦикла;
	
	СтрокаСмена.Строки.Сортировать("ТипСтроки, ПредставлениеОбъекта");
	
	ЗначениеВРеквизитФормы(Дерево, "Смены");
	
	УстановитьТекСтрокуДереваИзКеша(КешТекСтроки, Дерево);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущегоИсполнителя()
	
	СтрокаОбъект = Элементы.Смены.ТекущиеДанные;
	Если СтрокаОбъект = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран исполнитель';
										|en = 'Assignee is not selected'"));
		Возврат;
		
	ИначеЕсли СтрокаОбъект.Загрузка > 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Исполнителю назначены операции, удаление невозможно';
										|en = 'The assignee has operations assigned. Cannot delete assignee.'"));
		Возврат;
		
	КонецЕсли;
	
	УдалитьИсполнителяНаСервере(СтрокаОбъект.СменноеЗадание, СтрокаОбъект.ОбъектНазначения);
	
	СтрокаСмена = СтрокаОбъект.ПолучитьРодителя();
	СтрокаСмена.Свободно = СтрокаСмена.Свободно - СтрокаОбъект.Свободно;
	
	СтрокаСмена.ПолучитьЭлементы().Удалить(СтрокаОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьИсполнителяНаСервере(СменноеЗадание, Ссылка)
	
	Документы.СменноеЗадание.УдалитьИсполнителя(СменноеЗадание, Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОперацииНаСервере(КлючиОпераций)
	
	РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.УдалитьОперацииПоКлючам(КлючиОпераций);
	
	ОбновитьФормуПослеНазначенияОпераций(КлючиОпераций, Документы.СменноеЗадание.ПустаяСсылка());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПослеНазначенияОпераций(КлючиОпераций, СменноеЗадание)
	
	МассивСмен = Новый Массив;
	
	Если НЕ СменноеЗадание.Пустая()
		И МассивСмен.Найти(СменноеЗадание) = Неопределено
		И СоставСмен.НайтиПоЗначению(СменноеЗадание) <> Неопределено Тогда
		
		МассивСмен.Добавить(СменноеЗадание);
		
	КонецЕсли;
	
	Для каждого Ключ Из КлючиОпераций Цикл
		
		Если НЕ Ключ.СменноеЗадание.Пустая()
			И МассивСмен.Найти(Ключ.СменноеЗадание) = Неопределено
			И СоставСмен.НайтиПоЗначению(Ключ.СменноеЗадание) <> Неопределено Тогда
			
			МассивСмен.Добавить(Ключ.СменноеЗадание);
			
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСменыПослеНазначенияОпераций(МассивСмен);
	
КонецПроцедуры

&НаСервере
Функция УстановитьСтатусВФоне(Ссылка)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка", Ссылка);
	ПараметрыПроцедуры.Вставить("Статус", Перечисления.СтатусыСменныхЗаданий.Сформировано);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Установка статуса сменному заданию';
			|en = 'Set status for shift task'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.СменноеЗадание.УстановитьСтатусВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжидание = Истина;
		
	Иначе
		
		ОбработатьРезультатУстановкиСтатусаВФоне(ДлительнаяОперация, Ссылка);
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат НачатьОжидание;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатУстановкиСтатусаВФоне(Результат, Ссылка)
	
	Если Результат.Статус = "Ошибка" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТипЗнч(РезультатСтруктура) = Тип("Структура") И РезультатСтруктура.Свойство("Сообщения") Тогда
			
			Для каждого Сообщение Из РезультатСтруктура.Сообщения Цикл
			
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	Иначе
		
		СоставСмен.Удалить(СоставСмен.НайтиПоЗначению(Ссылка));
		
		ЗаполнитьСмены();
		
		Элементы.Операции.Обновить();
	
		Элементы.СменныеЗадания.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиСмена()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиОбъектНеНазначен()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиОбъект()
	
	Возврат 3;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиНовыйИсполнитель()
	
	Возврат 4;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимНазначенияИсполнителям()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимНазначенияРабочимЦентрам()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимНазначенияВидамРЦ()
	
	Возврат 3;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимПросмотраМожноНазначать()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимПросмотраВсеКНазначению()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимПросмотраНазначенные()
	
	Возврат 3;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗагрузитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Обработка.ФормированиеСменныхЗаданий.НастройкиРабочегоМеста",
		Неопределено);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("Подразделение",   Подразделение);
		Настройки.Свойство("Участок",         Участок);
		Настройки.Свойство("РежимНазначения", РежимНазначения);
		Настройки.Свойство("РежимПросмотра",  РежимПросмотра);
		Настройки.Свойство("ОтборПоУчастку",  ОтборПоУчастку);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьНастройки(Форма)
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("Подразделение",   Форма.Подразделение);
	Настройки.Вставить("Участок",         Форма.Участок);
	Настройки.Вставить("РежимНазначения", Форма.РежимНазначения);
	Настройки.Вставить("РежимПросмотра",  Форма.РежимПросмотра);
	Настройки.Вставить("ОтборПоУчастку",  Форма.ОтборПоУчастку);
	
	ЗаписатьНастройкиВХранилище(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНастройкиВХранилище(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"Обработка.ФормированиеСменныхЗаданий.НастройкиРабочегоМеста",
		Неопределено,
		Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИЗаполнитьСмены()
	
	СохранитьНастройки(ЭтотОбъект);
	
	ЗаполнитьСмены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеНеВыбранаСмена()
	
	ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана смена для назначения';
									|en = 'Shift for assignment not selected'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.СменныеЗадания.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СменноеЗадание.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаСервере
Процедура ВыделитьКнопкуНастроитьСоставСмен()
	
	Элементы.НастроитьСоставСмен.ЦветФона = ?(Смены.ПолучитьЭлементы().Количество() > 0,
		Новый Цвет,
		Новый Цвет(253, 250, 165));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
