
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Подразделение       = Параметры.Подразделение;
	Участок             = Параметры.Участок;
	ВыбранныеРанееСмены = Параметры.ВыбранныеРанееСмены;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Подразделение));
	ИспользоватьУчастки = ПолучитьФункциональнуюОпциюФормы("ИспользоватьПроизводственныеУчастки");
	
	Элементы.Декорация1.Видимость = ИспользоватьУчастки;
	Если НЕ ИспользоватьУчастки ИЛИ ЕстьУчасткиУПодразделения(Подразделение) Тогда
		Элементы.ГруппаНеСозданыУчастки.Видимость = Ложь;
	Иначе
		Элементы.ГруппаНеСозданыУчастки.Видимость = Истина;
	КонецЕсли;
	Элементы.Представление.Заголовок = ?(ИспользоватьУчастки,
		НСтр("ru = 'Смена, Участок';
			|en = 'Shift, Land'"),
		НСтр("ru = 'Смена';
			|en = 'Shift'"));
	
	ЧислоСтрок = 10;
	НесколькоСменВПодразделении = ПроизводствоСервер.ГрафикиРаботыПодразделений(Подразделение).Количество() > 1;
	
	ИнициализироватьСмены();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчастокПриИзменении(Элемент)
	
	ВывестиВидимыеСменыСНачала();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму(
		"Обработка.ФормированиеСменныхЗаданий.Форма.ВыборУчастков",
		Новый Структура("Подразделение, ВыбранныеЗначения", Подразделение, Участок),
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеНеСозданыУчасткиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьСтруктуруРЦ" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Подразделение", Подразделение);
		ПараметрыФормы.Вставить("РедактироватьУчастки", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеУчастковЗавершение", ЭтотОбъект);
		
		ОткрытьФорму(
			"Справочник.РабочиеЦентры.Форма.СтруктураРабочихЦентров",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидимыеСмены

&НаКлиенте
Процедура ВидимыеСменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ВидимыеСмены.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтатусыЗаданийЗапрещенВыбор().Найти(ТекущиеДанные.СтатусЗадания) = Неопределено Тогда
	
		ТекущиеДанные.Выбрана = НЕ ТекущиеДанные.Выбрана;
		ПриВыбореСмены(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидимыеСмены.ТекущиеДанные;
	ПриВыбореСмены(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ОчиститьСообщения();
	
	Задания = СоздатьИПолучитьВыбранныеЗадания();
	
	Если Задания <> Неопределено Тогда
		Закрыть(Новый Структура("Задания, Участок", Задания, Участок));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Вверх(Команда)
	
	ТекущаяСтрока = ВидимыеСмены[0];
	
	Индекс = ИндексСледующейСмены(ЭтаФорма, Истина, ТекущаяСтрока.ИндексВладельца-1);
	
	Если Индекс <> Неопределено Тогда
		ДобавитьСтрокуВВидимыеСмены(ЭтотОбъект, ВсеСмены[Индекс], Истина);
	Иначе
		
		Окончание = НачалоДня(ВсеСмены[ТекущаяСтрока.ИндексВладельца].Дата) - 1;
		
		ПрочитатьСмены(ДобавитьМесяц(Окончание, -1), Окончание, Истина);
		
		Индекс = ИндексСледующейСмены(ЭтаФорма, Истина, ТекущаяСтрока.ИндексВладельца-1);
		
		Если Индекс <> Неопределено Тогда
			ДобавитьСтрокуВВидимыеСмены(ЭтотОбъект, ВсеСмены[Индекс], Истина);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Данные графика не заполнены';
											|en = 'Schedule data is not filled in'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Вниз(Команда)
	
	ТекущаяСтрока = ВидимыеСмены[ЧислоСтрок-1];
	
	Индекс = ИндексСледующейСмены(ЭтаФорма, Ложь, ТекущаяСтрока.ИндексВладельца+1);
	
	Если Индекс <> Неопределено Тогда
		ДобавитьСтрокуВВидимыеСмены(ЭтотОбъект, ВсеСмены[Индекс], Ложь);
	Иначе
		
		Начало = КонецДня(ВсеСмены[ТекущаяСтрока.ИндексВладельца].Дата) + 1;
		
		ПрочитатьСмены(Начало, ДобавитьМесяц(Начало, 1), Ложь);
		
		Индекс = ИндексСледующейСмены(ЭтаФорма, Ложь, ТекущаяСтрока.ИндексВладельца+1);
		
		Если Индекс <> Неопределено Тогда
			ДобавитьСтрокуВВидимыеСмены(ЭтотОбъект, ВсеСмены[Индекс], Ложь);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Данные графика не заполнены';
											|en = 'Schedule data is not filled in'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыбор(Команда)
	
	ОтменитьВыборНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыборНаСервере()
	
	Для каждого Строка Из ВсеСмены Цикл
		Строка.Выбрана = Ложь;
	КонецЦикла;
	
	Для каждого Строка Из ВидимыеСмены Цикл
		Строка.Выбрана = Ложь;
	КонецЦикла;
	
	КоличествоВыбранныхСмен = 0;
	
	НастроитьПодсказкуВыбраноСмен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВНачалоСписка(Команда)
	
	ВывестиВидимыеСменыСНачала();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадание(Команда)
	
	ТекущиеДанные = Элементы.ВидимыеСмены.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если НЕ ВсеСмены[ТекущиеДанные.ИндексВладельца].СменноеЗадание.Пустая() Тогда
			ПоказатьЗначение(, ВсеСмены[ТекущиеДанные.ИндексВладельца].СменноеЗадание);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Задание не создано';
											|en = 'Job is not created'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Серый шрифт
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидимыеСмены.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидимыеСмены.СтатусЗадания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	// Пояснение "задание не создано"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусЗадания.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидимыеСмены.СтатусЗадания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<задание не создано>';
																|en = '<task is not created>'"));
	
	// Запрет выбора смен
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Выбрана.Имя);
	
	ЗначениеОтбора = Новый СписокЗначений;
	ЗначениеОтбора.ЗагрузитьЗначения(СтатусыЗаданийЗапрещенВыбор());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидимыеСмены.СтатусЗадания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначениеОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСмены()
	
	ВсеСмены.Очистить();
	ИндексНачалоСписка = -1;
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	ПрочитатьСмены(ДобавитьМесяц(ТекущаяДата, -1), ДобавитьМесяц(ТекущаяДата, 1), Ложь);
	
	ДоступнаПрокрутка = ВсеСмены.Количество() > ЧислоСтрок;
	
	Если ВсеСмены.Количество() <> 0 Тогда
		
		Для Индекс = 0 По ВсеСмены.Количество()-1 Цикл
			Если ВсеСмены[Индекс].Дата >= ТекущаяДата Тогда
				ИндексНачалоСписка = Индекс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДоступнаПрокрутка И ИндексНачалоСписка > ВсеСмены.Количество()-ЧислоСтрок Тогда
			ИндексНачалоСписка = ВсеСмены.Количество()-ЧислоСтрок; // список видимых смен должен содержать заданное число строк
		ИначеЕсли ИндексНачалоСписка = -1 Тогда
			ИндексНачалоСписка = ?(ДоступнаПрокрутка, ВсеСмены.Количество()-ЧислоСтрок, 0);
		КонецЕсли;
		
		ВывестиВидимыеСменыСНачала();
		
	КонецЕсли;
	
	Если ДоступнаПрокрутка Тогда
		ДатаНачалаСписка = ВсеСмены[ИндексНачалоСписка].Дата;
		Если НачалоДня(ДатаНачалаСписка) = ТекущаяДата Тогда
			Элементы.ПерейтиВНачалоСписка.Заголовок = СтрШаблон(НСтр("ru = '%1 сегодня';
																	|en = '%1 today'"), Формат(ДатаНачалаСписка, "ДЛФ=DD"));
		Иначе
			Элементы.ПерейтиВНачалоСписка.Заголовок = Формат(ДатаНачалаСписка, "ДЛФ=DD");
		КонецЕсли;
	КонецЕсли;
	
	КоличествоВыбранныхСмен = КоличествоВыбранныхСменПриСоздании();
	НастроитьПодсказкуВыбраноСмен(ЭтотОбъект);
	
	Элементы.ПерейтиВНачалоСписка.Видимость = ДоступнаПрокрутка;
	
	Элементы.Вверх.Доступность = ДоступнаПрокрутка;
	Элементы.Вниз.Доступность = ДоступнаПрокрутка;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСмены(Начало, Окончание, ДобавлятьВНачало)
	
	Выборка = ВыбратьСменыЗаПериод(Начало, Окончание);
	Если Выборка.Количество() < ЧислоСтрок Тогда
		
		Если ВсеСмены.Количество() = 0 Тогда
			Начало = '00010101';
			Окончание = '39991231';
		ИначеЕсли ДобавлятьВНачало Тогда
			Начало = '00010101';
		Иначе
			Окончание = '39991231';
		КонецЕсли;
		
		Выборка = ВыбратьСменыЗаПериод(Начало, Окончание);
		
	КонецЕсли;
	
	Переиндексация = Новый Соответствие;
	СтрокаНачалоСписка = Неопределено;
	Если ДобавлятьВНачало Тогда
		
		Для каждого Строка Из ВидимыеСмены Цикл
			Переиндексация.Вставить(ВидимыеСмены.Индекс(Строка), ВсеСмены[Строка.ИндексВладельца]);
		КонецЦикла;
		
		Если ИндексНачалоСписка <> -1 Тогда
			СтрокаНачалоСписка = ВсеСмены[ИндексНачалоСписка];
		КонецЕсли;
		
	КонецЕсли;
	
	Индекс = 0;
	Пока Выборка.Следующий() Цикл
		
		Если ДобавлятьВНачало Тогда
			НоваяСтрока = ВсеСмены.Вставить(Индекс);
			Индекс = Индекс + 1;
		Иначе
			НоваяСтрока = ВсеСмены.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	Если ДобавлятьВНачало Тогда
		
		Для каждого КлючИЗначение Из Переиндексация Цикл
			ВидимыеСмены[КлючИЗначение.Ключ].ИндексВладельца = ВсеСмены.Индекс(КлючИЗначение.Значение);
		КонецЦикла;
		
		Если ИндексНачалоСписка <> -1 Тогда
			ИндексНачалоСписка = ВсеСмены.Индекс(СтрокаНачалоСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыбратьСменыЗаПериод(Начало, Окончание)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(
		МенеджерВременныхТаблиц,
		ПроизводствоСервер.ГрафикиРаботыПодразделений(Подразделение).ВыгрузитьКолонку("ГрафикРаботы"),
		Начало,
		Окончание);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроизводственныеУчастки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТУчастки
		|ИЗ
		|	Справочник.ПроизводственныеУчастки КАК ПроизводственныеУчастки
		|ГДЕ
		|	&ИспользоватьУчастки
		|	И ПроизводственныеУчастки.Владелец = &Подразделение
		|	И НЕ ПроизводственныеУчастки.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расписания.ГрафикРаботы КАК Смена,
		|	Расписания.ДатаГрафика КАК ДатаБезВремени,
		|	МИНИМУМ(ДОБАВИТЬКДАТЕ(Расписания.ДатаГрафика, МИНУТА, ЧАС(ЕСТЬNULL(Расписания.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1))) * 60 + МИНУТА(ЕСТЬNULL(Расписания.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1))))) КАК Дата,
		|	ЕСТЬNULL(ВТУчастки.Ссылка, ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка)) КАК Участок
		|ПОМЕСТИТЬ ВТСмены
		|ИЗ
		|	ВТРасписанияРаботы КАК Расписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчастки КАК ВТУчастки
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(НЕ &ИспользоватьУчастки
		|		ИЛИ ВТУчастки.Ссылка ЕСТЬ НЕ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	Расписания.ГрафикРаботы,
		|	Расписания.ДатаГрафика,
		|	ЕСТЬNULL(ВТУчастки.Ссылка, ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СменноеЗадание.Ссылка  КАК Ссылка,
		|	СменноеЗадание.Статус  КАК Статус,
		|	СменноеЗадание.Дата    КАК Дата,
		|	СменноеЗадание.Смена   КАК Смена,
		|	СменноеЗадание.Участок КАК Участок,
		|	СменноеЗадание.Ссылка В (&ВыбранныеРанееСмены)
		|		И НЕ СменноеЗадание.Статус В (&СтатусыЗапрещенВыбор) КАК Выбрана
		|ПОМЕСТИТЬ ВТЗадания
		|ИЗ
		|	Документ.СменноеЗадание КАК СменноеЗадание
		|ГДЕ
		|	СменноеЗадание.Подразделение = &Подразделение
		|	И СменноеЗадание.Проведен
		|	И СменноеЗадание.Дата МЕЖДУ &Начало И &Окончание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ                          
		|	ВТСмены.Смена                     КАК Смена,
		|	ВЫРАЗИТЬ(ВТСмены.Смена КАК Справочник.Календари).Представление КАК СменаПредставление,
		|	ВТСмены.Дата                      КАК Дата,
		|	ВТСмены.Участок                   КАК Участок,
		|	ВТСмены.Участок.Представление     КАК УчастокПредставление,
		|	ВТЗадания.Ссылка                  КАК СменноеЗадание,
		|	ВТЗадания.Статус                  КАК СтатусЗадания,
		|	ЕСТЬNULL(ВТЗадания.Выбрана, ЛОЖЬ) КАК Выбрана
		|ИЗ
		|	ВТСмены КАК ВТСмены
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗадания КАК ВТЗадания
		|		ПО ВТСмены.Смена = ВТЗадания.Смена
		|			И ВТСмены.Дата = ВТЗадания.Дата
		|			И ВТСмены.Участок = ВТЗадания.Участок
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТЗадания.Смена,
		|	ВТЗадания.Смена.Представление,
		|	ВТЗадания.Дата,
		|	ВТЗадания.Участок,
		|	ВТЗадания.Участок.Представление,
		|	ВТЗадания.Ссылка,
		|	ВТЗадания.Статус,
		|	ВТЗадания.Выбрана
		|ИЗ
		|	ВТЗадания КАК ВТЗадания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСмены КАК ВТСмены
		|		ПО ВТЗадания.Смена = ВТСмены.Смена
		|			И ВТЗадания.Дата = ВТСмены.Дата
		|			И ВТЗадания.Участок = ВТСмены.Участок
		|ГДЕ
		|	ВТСмены.Смена ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Смена,
		|	Участок");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("ВыбранныеРанееСмены", ВыбранныеРанееСмены.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("СтатусыЗапрещенВыбор", СтатусыЗаданийЗапрещенВыбор());
	Запрос.УстановитьПараметр("ИспользоватьУчастки", ИспользоватьУчастки);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ВывестиВидимыеСменыСНачала()
	
	ВидимыеСмены.Очистить();
	
	Индекс = ИндексСледующейСмены(ЭтаФорма, Ложь, ИндексНачалоСписка);
	
	Пока Индекс <> Неопределено Цикл
		
		ДобавитьСтрокуВВидимыеСмены(ЭтотОбъект, ВсеСмены[Индекс], Ложь);
		
		Если ВидимыеСмены.Количество() = ЧислоСтрок Тогда
			Прервать;
		КонецЕсли;
		
		Индекс = ИндексСледующейСмены(ЭтаФорма, Ложь, Индекс+1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексСледующейСмены(Форма, Вверх, Знач Индекс)
	
	Если Индекс < 0 ИЛИ Индекс >= Форма.ВсеСмены.Количество() Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли НЕ Форма.ИспользоватьУчастки ИЛИ Форма.Участок.Количество() = 0 Тогда
		
		Возврат Индекс;
		
	Иначе
		
		Результат = Неопределено;
		
		Если Вверх Тогда
			
			Пока Индекс >= 0 Цикл
				
				Если Форма.Участок.НайтиПоЗначению(Форма.ВсеСмены[Индекс].Участок) <> Неопределено Тогда
					
					Результат = Индекс;
					Прервать;
					
				КонецЕсли;
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
		Иначе
			
			Пока Индекс < Форма.ВсеСмены.Количество() Цикл
				
				Если Форма.Участок.НайтиПоЗначению(Форма.ВсеСмены[Индекс].Участок) <> Неопределено Тогда
					
					Результат = Индекс;
					Прервать;
					
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВВидимыеСмены(Форма, Владелец, ДобавлятьВНачало)
	
	ВидимыеСмены = Форма.ВидимыеСмены;
	
	Если ДобавлятьВНачало Тогда
		НоваяСтрока = ВидимыеСмены.Вставить(0);
	Иначе
		НоваяСтрока = ВидимыеСмены.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Владелец, "СтатусЗадания, Выбрана");
	
	НоваяСтрока.Представление = УправлениеПроизводствомКлиентСервер.ПредставлениеСменногоЗадания(
		Владелец.СменаПредставление,
		Владелец.Дата,
		Владелец.УчастокПредставление,
		Форма.НесколькоСменВПодразделении);
	
	НоваяСтрока.ИндексВладельца = Форма.ВсеСмены.Индекс(Владелец);
	
	Если ВидимыеСмены.Количество() > Форма.ЧислоСтрок Тогда
		Если ДобавлятьВНачало Тогда
			ВидимыеСмены.Удалить(ВидимыеСмены.Количество()-1);
		Иначе
			ВидимыеСмены.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьИПолучитьВыбранныеЗадания()
	
	ВыбранныеСтроки = ВсеСмены.НайтиСтроки(Новый Структура("Выбрана", Истина));
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не отмечены смены для выбора';
																|en = 'Shifts are not marked for selection'"),, "ВидимыеСмены");
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылки = Новый Массив;
	МассивДанныхЗаполнения = Новый Массив;
	
	Для каждого Строка Из ВыбранныеСтроки Цикл
		
		Если Строка.СменноеЗадание.Пустая() Тогда
			
			ДанныеЗаполнения = Документы.СменноеЗадание.ДанныеЗаполнения();
			ДанныеЗаполнения.Подразделение = Подразделение;
			ДанныеЗаполнения.ЗаполнитьИсполнителейИзПрошлойСмены = ЗаполнятьИсполнителейИзПрошлойСмены;
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Строка, "Дата, Смена, Участок");
			
			МассивДанныхЗаполнения.Добавить(ДанныеЗаполнения);
			
		Иначе
			Ссылки.Добавить(Строка.СменноеЗадание);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДанныхЗаполнения.Количество() <> 0 Тогда
		
		НовыеСсылки = Документы.СменноеЗадание.СоздатьЗадания(МассивДанныхЗаполнения);
		Для каждого Ссылка Из НовыеСсылки Цикл
			Ссылки.Добавить(Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ссылки;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореСмены(ТекущиеДанные)
	
	ВсеСмены[ТекущиеДанные.ИндексВладельца].Выбрана = ТекущиеДанные.Выбрана;
	
	КоличествоВыбранныхСмен = КоличествоВыбранныхСмен + ?(ТекущиеДанные.Выбрана, 1, -1);
	
	НастроитьПодсказкуВыбраноСмен(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьПодсказкуВыбраноСмен(Форма)
	
	Если Форма.КоличествоВыбранныхСмен <> 0 Тогда
		Форма.Элементы.ПодсказкаВыбраноЗаданий.Заголовок = СтрШаблон(
			НСтр("ru = 'Выбрано заданий: %1';
				|en = 'Selected jobs: %1'"),
			Формат(Форма.КоличествоВыбранныхСмен, "ЧГ=0"));
	КонецЕсли;
	
	Форма.Элементы.ПодсказкаВыбраноЗаданий.Видимость = Форма.КоличествоВыбранныхСмен <> 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыЗаданийЗапрещенВыбор()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Сформировано"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоВыбранныхСменПриСоздании()

	Если ВыбранныеРанееСмены.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СменноеЗадание.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СменноеЗадание КАК СменноеЗадание
		|ГДЕ
		|	СменноеЗадание.Подразделение = &Подразделение
		|	И СменноеЗадание.Ссылка В (&Ссылки)
		|	И СменноеЗадание.Статус НЕ В (&Статусы)
		|	И СменноеЗадание.Проведен");
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Ссылки", ВыбранныеРанееСмены.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Статусы", СтатусыЗаданийЗапрещенВыбор());
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьУчасткиУПодразделения(Подразделение)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ПроизводственныеУчастки КАК ПроизводственныеУчастки
		|ГДЕ
		|	ПроизводственныеУчастки.Владелец = &Подразделение
		|	И НЕ ПроизводственныеУчастки.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура СозданиеУчастковЗавершение(Результат, Параметры) Экспорт
	
	Если ЕстьУчасткиУПодразделения(Подразделение) Тогда
		
		Элементы.ГруппаНеСозданыУчастки.Видимость = Ложь;
		
		ИнициализироватьСмены();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
