
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройки();
	
	РежимПодбора = Параметры.РежимПодбора;
	
	Если НЕ Параметры.СменноеЗадание.Пустая() Тогда
		
		Заголовок = СтрШаблон(
			?(РежимПодбора, НСтр("ru = 'Подбор операций в %1';
								|en = 'Pick operations to %1'"), НСтр("ru = 'Добавление операции в %1';
																		|en = 'Add operation to %1'")),
			Параметры.СменноеЗадание);
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.СменноеЗадание, "Дата, Подразделение, Участок"));
		
	Иначе
		
		Заголовок = ?(РежимПодбора, НСтр("ru = 'Подбор операций';
										|en = 'Pick operations'"), НСтр("ru = 'Добавление операции';
																		|en = 'Add operations'"));
		
	КонецЕсли;
	
	// Текст запроса списка
	ТекстЗапросаСписок = СтрЗаменить(
		Список.ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("РегистрПереопределяемый.Этап"));
	ТекстЗапросаСписок = СтрЗаменить(
		ТекстЗапросаСписок,
		"&ВремяВыполнения",
		РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ТекстЗапросаВремяОперации("РегистрПереопределяемый"));
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапросаСписок;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	// Отбор списка
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Подразделение));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СменноеЗадание",
		,
		ВидСравненияКомпоновкиДанных.НеЗаполнено,,
		Истина);
		
	// Прочее
	Если НЕ Подразделение.Пустая() Тогда
		
		ИспользоватьБригадныеНаряды = 
			ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение).ИспользоватьБригадныеНаряды;
			
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Подразделение));
		
	КонецЕсли;
	
	Если РежимПросмотра = 0 Тогда
		РежимПросмотра = РежимПросмотраМожноНазначать();
	КонецЕсли;
	
	Элементы.ПодборОпераций.Видимость = РежимПодбора;
	
	ЦветВыбранногоРежима = ЦветаСтиля.ЦветТекстаФормы;
	ЦветНеВыбранногоРежима = ЦветаСтиля.ГиперссылкаЦвет;
	
	Связи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый СвязьПараметраВыбора("Отбор.ВидРабочегоЦентра", "Элементы.ПодборОпераций.ТекущиеДанные.ВидРабочегоЦентра"));
	Если НЕ Участок.Пустая() Тогда
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Участок", "Участок"));
	КонецЕсли;
	Элементы.ПодборОперацийРабочийЦентр.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
	
	УчетТрудозатратВРазрезеСотрудников = ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(Дата);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МожноНазначатьНажатие(Элемент)
	
	РежимПросмотра = РежимПросмотраМожноНазначать();
	
	СохранитьНастройки(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РежимПросмотра");
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеКНазначениюНажатие(Элемент)
	
	РежимПросмотра = РежимПросмотраВсеКНазначению();
	
	СохранитьНастройки(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РежимПросмотра");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Действие не может быть выполнено для строки группировки списка';
										|en = 'Action cannot be executed for the list grouping row'"));
		Возврат;
		
	КонецЕсли;
	
	ДобавитьСтрокуВПодборОпераций(ВыбраннаяСтрока);
	
	Если НЕ РежимПодбора Тогда
		
		ПеренестиВДокумент();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодборОпераций

&НаКлиенте
Процедура ПодборОперацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперацийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПодборОпераций.ТекущиеДанные;
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		ТекущиеДанные.Исполнитель,
		ИспользоватьБригадныеНаряды,
		УчетТрудозатратВРазрезеСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперацийИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПодборОпераций.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборОперацийИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Неопределено,
		Подразделение,
		ТекущиеДанные.Исполнитель,
		Дата,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперацийИсполнительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.ПодборОпераций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
		
		ТекущиеДанные.Исполнитель = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперацийИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение, Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперацийИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение, Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперацийКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодборОпераций.ТекущиеДанные;
	
	ТекущиеДанные.ВремяВыполнения = ОперативныйУчетПроизводстваКлиентСервер.РассчитатьВремяОперацииОтКоличества(
		ТекущиеДанные.Количество,
		ТекущиеДанные.КоличествоШтучное,
		ТекущиеДанные.ВремяШтучное,
		ТекущиеДанные.ВремяПЗ,
		ТекущиеДанные.ПараллельнаяЗагрузка,
		ТекущиеДанные.КоэффициентВремениРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперацийВремяВыполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодборОпераций.ТекущиеДанные;
	
	ТекущиеДанные.Количество = ОперативныйУчетПроизводстваКлиентСервер.РассчитатьКоличествоОперацииОтВремени(
		ТекущиеДанные.ВремяВыполнения,
		ТекущиеДанные.ВремяШтучное,
		ТекущиеДанные.ВремяПЗ,
		ТекущиеДанные.КоличествоШтучное,
		ТекущиеДанные.КоэффициентВремениРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПеренестиВДокумент(Команда)
	
	Если НЕ РежимПодбора Тогда
		
		ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
		
		Если ТекущаяСтрока = Неопределено Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана операция';
											|en = 'Operation is not selected'"));
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Действие не может быть выполнено для строки группировки списка';
											|en = 'Action cannot be executed for the list grouping row'"));
			Возврат;
			
		Иначе
			
			ДобавитьСтрокуВПодборОпераций(ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПеренестиВДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Список - ед изм времени выполнения Секунда
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Секунда;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сек';
																								|en = 'sec'")));
	
	// Список - ед изм времени выполнения Минута
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'мин';
																								|en = 'min'")));
	
	// Список - ед изм времени выполнения Час
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Час;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'ч';
																								|en = 'h'")));
	
	// Список - ед изм времени выполнения Сутки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокВремяВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВремяВыполненияЕдИзм");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=1; ЧФ='Ч %1'", НСтр("ru = 'сут';
																								|en = 'd'")));
	
	// Список - строки которые нужно назначать выделить красным шрифтом
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.НужноНазначать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Список - недоступные для назначения строки выделить серым шрифтом
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.МожноНазначать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.НужноНазначать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	// Список - представление этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтап.Имя);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Список.ПредставлениеЭтапа"));
	
	// ПодборОпераций - представление этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодборОперацийЭтап.Имя);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ПодборОпераций.ПредставлениеЭтапа"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("РежимПросмотра") 
		ИЛИ Инициализация Тогда
		
		Элементы.МожноНазначать.Гиперссылка  = Форма.РежимПросмотра <> РежимПросмотраМожноНазначать();
		Элементы.МожноНазначать.ЦветТекста = ?(Форма.РежимПросмотра <> РежимПросмотраМожноНазначать(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		Элементы.ВсеКНазначению.Гиперссылка  = Форма.РежимПросмотра <> РежимПросмотраВсеКНазначению();
		Элементы.ВсеКНазначению.ЦветТекста = ?(Форма.РежимПросмотра <> РежимПросмотраВсеКНазначению(),
			Форма.ЦветНеВыбранногоРежима, Форма.ЦветВыбранногоРежима);
		
		//
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"НазначатьНеРанее",
			Форма.Дата,
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,,
			Форма.РежимПросмотра = РежимПросмотраМожноНазначать() И ЗначениеЗаполнено(Форма.Дата));
		
		//
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			"МожноНазначать",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,,
			Форма.РежимПросмотра = РежимПросмотраМожноНазначать());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение, Дата)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПараметрыОтбора = Новый Структура("Организация, Подразделение, Дата");
	ПараметрыОтбора.Подразделение = Подразделение;
	ПараметрыОтбора.Дата = Дата;
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВПодборОпераций(КлючОперации)
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(КлючОперации);
	
	ИсключаяСвойства = "";
	Если НЕ Участок.Пустая() Тогда
		
		Если Участок <> ДанныеСтроки.УчастокРабочегоЦентра Тогда
			ИсключаяСвойства = "РабочийЦентр";
		КонецЕсли;
		
		Если Участок <> ДанныеСтроки.Участок Тогда
		
			Если ПустаяСтрока(ИсключаяСвойства) Тогда
				ИсключаяСвойства = "Участок";
			Иначе
				ИсключаяСвойства = ИсключаяСвойства + " ,Участок";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока = Объект.ПодборОпераций.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, ИсключаяСвойства);
	НоваяСтрока.КлючОперации = КлючОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент()
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьОжидание = ПеренестиВДокументВФоне();
	
	Если НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ПеренестиВДокументВФонеЗавершение", ЭтотОбъект),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		Закрыть(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиВДокументВФоне()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Операции", Объект.ПодборОпераций.Выгрузить());
	ПараметрыПроцедуры.Вставить("СменноеЗадание", Параметры.СменноеЗадание);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Подбор операций в сменное задание';
			|en = 'Pick operations for shift task'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ОперацииКСозданиюСменныхЗаданий.ДобавитьВЗаданиеВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжидание = Истина;
		
	Иначе
		
		ОбработатьРезультатФоновогоЗадания(ДлительнаяОперация);
		
		НачатьОжидание = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат НачатьОжидание;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиВДокументВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		ОбработатьРезультатФоновогоЗадания(Результат);
		
		Закрыть(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатФоновогоЗадания(Результат)
	
	Если Результат.Статус = "Ошибка" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ТипЗнч(РезультатСтруктура) = Тип("Структура") И РезультатСтруктура.Свойство("Сообщения") Тогда
			
			Для каждого Сообщение Из РезультатСтруктура.Сообщения Цикл
			
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимПросмотраМожноНазначать()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимПросмотраВсеКНазначению()
	
	Возврат 2;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОперацииКСозданиюСменныхЗаданий.ПодборОпераций",
		Неопределено);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("РежимПросмотра",  РежимПросмотра);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьНастройки(Форма)
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("РежимПросмотра",  Форма.РежимПросмотра);
	
	ЗаписатьНастройкиВХранилище(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНастройкиВХранилище(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ОперацииКСозданиюСменныхЗаданий.ПодборОпераций",
		Неопределено,
		Настройки);
	
КонецПроцедуры

#КонецОбласти
