
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗавершатьЗаявкиСотрудникаПослеПодписанияСправки = Константы.ЗавершатьЗаявкиСотрудниковПослеПодписанияСправки.Получить();
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
	ВидНастройки = ВидНастройки();
	СтруктурыПредприятияРезультатПроверки = ПроверитьСтруктуруПредприятия();
	СтруктураПредприятияДоступна = СтруктурыПредприятияРезультатПроверки.Доступна;
	ЗаблокированоНаВремяОбновления = ЗаблокированоНаВремяОбновления();
	Если (ВидНастройки <> 0 И Не СтруктураПредприятияДоступна) Или ЗаблокированоНаВремяОбновления Тогда
		// Используется настройка с точностью до структуры предприятия,
		// но пользователю недоступна структура предприятия.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"НастройкиПравилСтруктураПредприятия", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписатьИЗакрыть", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписать", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаОтчетПоЗадачам", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ВидНастройки", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияОграничениеДоступности", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ПоказыватьРасформированные", "Видимость", Ложь);
		Если ЗаблокированоНаВремяОбновления Тогда
			Элементы.ДекорацияНастройкаНедоступна.Заголовок = НСтр("ru = 'Настройка правил недоступна. Дождитесь окончания обновления правил.';
																	|en = 'Rule setting is unavailable. Please wait until the rules are updated.'");
		КонецЕсли;
	Иначе
		СтруктураПредприятияПустая = СтруктурыПредприятияРезультатПроверки.Пустая;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияПустаяСтруктураПредприятия", "Видимость", СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройки", "Доступность", Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписатьИЗакрыть", "Доступность", Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписать", "Доступность", Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройкаНедоступна", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДекорацияОграничениеДоступности", "Видимость", Не СтруктураПредприятияДоступна);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ВидНастройки", "Доступность", СтруктураПредприятияДоступна И Не СтруктураПредприятияПустая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ПоказыватьРасформированные", "Доступность", СтруктураПредприятияДоступна И Не СтруктураПредприятияПустая);
		Если Не СтруктураПредприятияПустая Тогда
			ЗаполнитьНастройкиМаршрутов();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	УстановитьУсловноеОФормление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИспользуетсяКадровыйЭДОЗаписанаКонстанта" Тогда
		Элементы.НастройкиПравилЭтапыТребуетсяПодпись.Видимость = Параметр;
		Элементы.НастройкиПравилСтруктураПредприятияЭтапыТребуетсяПодпись.Видимость = Параметр;
		Если Параметр Тогда
			Возврат;	
		КонецЕсли;
		ЗавершатьЗаявкиСотрудникаПослеПодписанияСправки = Ложь;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНастройкиПриИзменении(Элемент)
	Если ВидНастройки = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ВидНастройкиПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Настройки в разрезе структурных единиц будут очищены. Продолжить?';
										|en = 'Settings broken down by business units will be cleared. Continue?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВидНастройкиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершатьЗаявкуЭлектронныйДокументПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПравил

&НаКлиенте
Процедура НастройкиПравилПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилПриАктивизацииСтроки(Элемент)
	Если ВидНастройки = 0 И Элементы.ГруппаНастройки.Доступность Тогда
		ЗаполнитьНастройкиБезСтруктуры(Элементы.НастройкиПравил.ТекущиеДанные.РольИсполнителя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилСписокПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиПравил.ТекущиеДанные;
	СписокПользователейСтроки 	= ТекущиеДанные.СписокПользователей;
	РольИсполнителяСтроки 		= Элементы.НастройкиПравил.ТекущиеДанные.РольИсполнителя;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокПользователей", 	СписокПользователейСтроки.ВыгрузитьЗначения());
	ПараметрыОткрытия.Вставить("РольИсполнителя", 		РольИсполнителяСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокПользователейВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПравилОбработкиЗаявокСотрудников.Форма.ИсполнителиЗаявок", ПараметрыОткрытия, ЭтотОбъект, , , ,
				 ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Вид = ВидПоляФормы.ПолеНадписи И Поле.Гиперссылка Тогда
		
		ТекущаяРоль = Элементы.НастройкиПравил.ТекущиеДанные.РольИсполнителя;
		ТипЗаявки = ВидЗаявкиСЭтапамиВнешнегоСервиса(ТекущаяРоль);
		
		Если ТипЗаявки <> Неопределено Тогда
			ПараметрыОткрытия = Новый Структура("ТипЗаявки", ТипЗаявки); 
			ОткрытьФорму(
				"Справочник.ПравилаСогласованияЗаявокКабинетСотрудника.ФормаСписка",
				ПараметрыОткрытия);
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПравилСтруктураПредприятия

&НаКлиенте
Процедура НастройкиПравилСтруктураПредприятияСписокПользователейПриИзменении(Элемент)
	ЗаполнитьПодчиненныеЭлементы("СписокПользователей");	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилСтруктураПредприятияСписокПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиПравилСтруктураПредприятия.ТекущиеДанные;
	СписокПользователейСтроки 	= ТекущиеДанные.СписокПользователей;
	ПодразделениеСтроки 		= ТекущиеДанные.Подразделение;
	РольИсполнителяСтроки 		= Элементы.НастройкиПравил.ТекущиеДанные.РольИсполнителя;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокПользователей", 	СписокПользователейСтроки.ВыгрузитьЗначения());
	ПараметрыОткрытия.Вставить("Подразделение", 		ПодразделениеСтроки);
	ПараметрыОткрытия.Вставить("РольИсполнителя", 		РольИсполнителяСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокПользователейВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаПравилОбработкиЗаявокСотрудников.Форма.ИсполнителиЗаявок", ПараметрыОткрытия, ЭтотОбъект, , , ,
				 ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилСтруктураПредприятияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПравилЭтапы

&НаКлиенте
Процедура НастройкиПравилЭтапыПриИзменении(Элемент)
	Модифицированность = Истина;
	ЗаполнитьИзНастроекБезСтруктуры("Этапы");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Вид = ВидПоляФормы.ПолеНадписи И Поле.Гиперссылка Тогда	
		Этап = Элементы.НастройкиПравилЭтапы.ТекущиеДанные.Этап;
		ОткрытьФорму(
			"Справочник.ПравилаСогласованияЗаявокКабинетСотрудника.ФормаОбъекта",
			ПараметрыОткрытияПравилаСогласования(Этап));
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПравилСтруктураПредприятияЭтапы

&НаКлиенте
Процедура НастройкиПравилСтруктураПредприятияЭтапыПриИзменении(Элемент)
	Модифицированность = Истина;
	ЗаполнитьПодчиненныеЭлементы("Этапы");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравилСтруктураПредприятияЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Вид = ВидПоляФормы.ПолеНадписи И Поле.Гиперссылка Тогда		
		Этап = Элементы.НастройкиПравилСтруктураПредприятияЭтапы.ТекущиеДанные.Этап;
		Подразделение = Элементы.НастройкиПравилСтруктураПредприятия.ТекущиеДанные.Подразделение;
		ОткрытьФорму(
			"Справочник.ПравилаСогласованияЗаявокКабинетСотрудника.ФормаОбъекта",
			ПараметрыОткрытияПравилаСогласования(Этап, Подразделение));
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьНастройкиПравилОбработки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНастройкиПравилОбработки();	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСогласованиеКабинетСотрудника(Команда)
	
	ТекущаяРоль = Элементы.НастройкиПравил.ТекущиеДанные.РольИсполнителя;
	ТипЗаявки = ВидЗаявкиСЭтапамиВнешнегоСервиса(ТекущаяРоль);
	
	Если ТипЗаявки <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("ТипЗаявки", ТипЗаявки); 
		ОткрытьФорму(
			"Справочник.ПравилаСогласованияЗаявокКабинетСотрудника.ФормаСписка",
			ПараметрыОткрытия);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для данного типа заявки не предусмотрена настройка этапов согласования на стороне 1С:Кабинет сотрудника';
														|en = 'You cannot set up approval stages in 1C:Employee Account for this request type'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаявкам(Команда)
	ОткрытьФорму("Отчет.Задачи.ФормаОбъекта", ПараметрыОткрытияОтчета());
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРасформированныеПриИзменении(Элемент)
	НастройкиПравил.Очистить();
	ЗаполнитьНастройкиМаршрутов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеПравилОбработки

&НаСервере
Процедура ЗаполнитьНастройкиМаршрутов()
	
	ИспользуютсяШаблоныДокументов = Истина;
	НастройкиПравилВыгрузка = РеквизитФормыВЗначение("НастройкиПравил");
	НастройкиПравилВыгрузка.Колонки.Добавить("Сортировка", Новый ОписаниеТипов("Строка"));
	ИспользуемаяФункциональностьСервиса = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	СписокРолей = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗадач();
	Если Не ИспользуемаяФункциональностьСервиса.ЗаявленияНаДСВ Тогда
		РольНаУдаление = СписокРолей.Найти(БизнесПроцессыЗаявокСотрудниковВнутренний.РольИсполнителяОтветственныйЗаУдержаниеДСВ());
		Если РольНаУдаление <> Неопределено Тогда
			СписокРолей.Удалить(РольНаУдаление);
		КонецЕсли;
	КонецЕсли;
	Если Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.2") Тогда
		РольНаУдаление = СписокРолей.Найти(ПредопределенноеЗначение("Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников"));
		Если РольНаУдаление <> Неопределено Тогда
			СписокРолей.Удалить(РольНаУдаление);
		КонецЕсли;
		ИспользуютсяШаблоныДокументов = Ложь;
	КонецЕсли;
	
	ТаблицаПравилНастроек = ТаблицаПравилНастроек(СписокРолей);
	ТаблицаПользователей = ТаблицаПользователей(СписокРолей);
	
	СтрокиПоРоли = Неопределено;
	Для каждого Роль Из СписокРолей Цикл
		
		СписокШаблоновДокументов = Новый Массив;
		Если ИспользуютсяШаблоныДокументов
			И Роль = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ШаблоныДокументов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
				|ГДЕ
				|	НЕ ШаблоныДокументов.ПометкаУдаления
				|	И НЕ ШаблоныДокументов.Предопределенный
				|
				|УПОРЯДОЧИТЬ ПО
				|	ШаблоныДокументов.Наименование";
			
			СписокШаблоновДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Иначе
			СписокШаблоновДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ШаблоныДокументов.ПустаяСсылка());
		КонецЕсли;
		
		Для Каждого ШаблонДокумента Из СписокШаблоновДокументов Цикл
			НастройкаПравил = НастройкиПравилВыгрузка.Добавить();
			НастройкаПравил.РольИсполнителя = Роль;
			НастройкаПравил.ШаблонДокумента = ШаблонДокумента;
			НастройкаПравил.Сортировка = Строка(?(ШаблонДокумента = Справочники.ШаблоныДокументов.ПустаяСсылка(), Роль, ШаблонДокумента));
			НастройкаПравил.СписокПользователей.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
			Если ВидЗаявкиСЭтапамиВнешнегоСервиса(Роль) <> Неопределено Тогда
				НастройкаПравил.Гиперссылка = НСтр("ru = 'Правила согласования 1С:Кабинет сотрудника';
													|en = 'Approval rules 1C:Employee Account'");	
			КонецЕсли;
			
			Колонки = НастройкаПравил.СтруктураПредприятия.Колонки; 
			Колонки.Добавить("Подразделение");
			Колонки.Добавить("Этапы", Новый ОписаниеТипов("ТаблицаЗначений"));
			Колонки.Добавить("СписокПользователей", Новый ОписаниеТипов("СписокЗначений"));
			
			СтрокиПоРоли = ТаблицаПравилНастроек.Строки.НайтиСтроки(Новый Структура("РольИсполнителя,ШаблонДокумента", Роль, ШаблонДокумента));
			МассивПовторяющихся = Новый Массив;
			Для каждого СтрокаПоРоли Из СтрокиПоРоли Цикл
				Если МассивПовторяющихся.Найти(СтрокаПоРоли.Подразделение) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивПовторяющихся.Добавить(СтрокаПоРоли.Подразделение);
				НоваяСтрокаСтруктураПредприятия = НастройкаПравил.СтруктураПредприятия.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСтруктураПредприятия, СтрокаПоРоли);
				ЗаполнитьДерево(НоваяСтрокаСтруктураПредприятия, СтрокаПоРоли, МассивПовторяющихся);
			КонецЦикла;
					
			СтрокиПоРоли = ТаблицаПравилНастроек.Строки.НайтиСтроки(Новый Структура("РольИсполнителя,ШаблонДокумента", Роль, ШаблонДокумента), Истина);
			СтрокиЭтаповПоПодразделению = Новый Соответствие;
			Для Каждого СтрокаПоРоли Из СтрокиПоРоли Цикл
				Если СтрокиЭтаповПоПодразделению[СтрокаПоРоли.Подразделение] = Неопределено Тогда
					СтрокиЭтаповПоПодразделению.Вставить(СтрокаПоРоли.Подразделение, Новый Массив);
				КонецЕсли;
				СтрокиЭтаповПоПодразделению[СтрокаПоРоли.Подразделение].Добавить(СтрокаПоРоли);
			КонецЦикла;
			
			Для каждого ЭлементСтруктурыПредприятия Из ПолучитьЭлементы(НастройкаПравил.СтруктураПредприятия) Цикл
				
				Отбор = Новый Структура("РольИсполнителя,ШаблонДокумента", Роль, ШаблонДокумента);
				Отбор.Вставить("Подразделение", ЭлементСтруктурыПредприятия.Подразделение);
				
				ЭлементСтруктурыПредприятия.СписокПользователей.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
				ЭлементСтруктурыПредприятия.СписокПользователей.ЗагрузитьЗначения(
					ТаблицаПользователей.Скопировать(Отбор).ВыгрузитьКолонку("Исполнитель"));
					
				ТаблицаЭтапов = НовыйТаблицаЭтапы();
				Для Каждого СтрокаЭтапа Из СтрокиЭтаповПоПодразделению[Отбор.Подразделение] Цикл
					СтрокаТаблицыЭтапов = ТаблицаЭтапов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЭтапов, СтрокаЭтапа);
				КонецЦикла;
				ЭлементСтруктурыПредприятия.Этапы = ТаблицаЭтапов;
				
			КонецЦикла;
				
			Если СтрокиПоРоли.Количество() > 0 Тогда
				
				СтрокаСтруктурыПредприятия = НастройкаПравил.СтруктураПредприятия.Строки[0];
				
				НастройкаПравил.СписокПользователей.ЗагрузитьЗначения(СтрокаСтруктурыПредприятия.СписокПользователей.ВыгрузитьЗначения());
				НастройкаПравил.Этапы = СтрокаСтруктурыПредприятия.Этапы.Скопировать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НастройкиПравилВыгрузка.Сортировать("Сортировка");
	ЗначениеВРеквизитФормы(НастройкиПравилВыгрузка, "НастройкиПравил");
	
КонецПроцедуры

&НаСервере
Функция ТаблицаПравилНастроек(СписокРолей)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТЭтапы.РольИсполнителя КАК РольИсполнителя,
	               |	ВТЭтапы.Этап КАК Этап,
				   |	ВТЭтапы.ВнешнийСервис КАК ВнешнийСервис
	               |ПОМЕСТИТЬ ВТЭтапыРоли
	               |ИЗ
	               |	&ВТЭтапы КАК ВТЭтапы";
	
	Запрос.УстановитьПараметр("ВТЭтапы", Справочники.ЭтапыЗаявокСотрудников.ТаблицаАктивныхЭтаповИРолейИсполнителя());
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ПоказыватьРасформированные", ПоказыватьРасформированные);
	Запрос.УстановитьПараметр("РолиИсполнителей", СписокРолей);
	
	ПустыеПодразделения = БизнесПроцессыЗаявокСотрудников.ПараметрЗапросаПустыеПодразделения();
	Запрос.УстановитьПараметр("ПустыеПодразделения", ПустыеПодразделения);
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	РолиИсполнителей.Ссылка КАК РольИсполнителя,
		|	Организации.Наименование КАК Наименование,
		|	ЭтапыРоли.Этап КАК Этап,
		|	ЭтапыРоли.ВнешнийСервис КАК ВнешнийСервис,
		|	ЗНАЧЕНИЕ(Справочник.ШаблоныДокументов.ПустаяСсылка) КАК ШаблонДокумента
		|ПОМЕСТИТЬ ВТОрганизацииРоли
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО (РолиИсполнителей.Ссылка В (&РолиИсполнителей))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыРоли КАК ЭтапыРоли
		|		ПО (РолиИсполнителей.Ссылка = ЭтапыРоли.РольИсполнителя)
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Предопределенный
		|	И РолиИсполнителей.Ссылка <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка,
		|	РолиИсполнителей.Ссылка,
		|	Организации.Наименование,
		|	ЭтапыРоли.Этап,
		|	ЭтапыРоли.ВнешнийСервис,
		|	ШаблоныДокументов.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО (РолиИсполнителей.Ссылка В (&РолиИсполнителей))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыРоли КАК ЭтапыРоли
		|		ПО (РолиИсполнителей.Ссылка = ЭтапыРоли.РольИсполнителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ПО (НЕ ШаблоныДокументов.Предопределенный)
		|			И (НЕ ШаблоныДокументов.ПометкаУдаления)
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Предопределенный
		|	И РолиИсполнителей.Ссылка = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОрганизацииРоли.РольИсполнителя КАК РольИсполнителя,
		|	ОрганизацииРоли.Организация КАК Организация,
		|	ОрганизацииРоли.Наименование КАК Наименование,
		|	ОрганизацииРоли.Этап КАК Этап,
		|	ВЫБОР
		|		КОГДА ОрганизацииРоли.ВнешнийСервис
		|			ТОГДА ""Правила согласования""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Гиперссылка,
		|	ОрганизацииРоли.ВнешнийСервис КАК ВнешнийСервис,
		|	ОрганизацииРоли.ШаблонДокумента КАК ШаблонДокумента,
		|	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ПравилаОбработкиЗаявокСотрудников1.СрокЗадачи, ПравилаОбработкиЗаявокСотрудников.СрокЗадачи), ПравилаОбработкиЗаявокСотрудников2.СрокЗадачи), 7) КАК СрокЗадачи,
		|	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ПравилаОбработкиЗаявокСотрудников1.ТребуетсяПодпись, ПравилаОбработкиЗаявокСотрудников.ТребуетсяПодпись), ПравилаОбработкиЗаявокСотрудников2.ТребуетсяПодпись), ЛОЖЬ) КАК ТребуетсяПодпись,
		|	НЕ ПравилаОбработкиЗаявокСотрудников1.Подразделение ЕСТЬ NULL КАК ЗаполненоПодразделениеПравилОбработки
		|ИЗ
		|	ВТОрганизацииРоли КАК ОрганизацииРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
		|		ПО ОрганизацииРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников.РольИсполнителя
		|			И ОрганизацииРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников.ШаблонДокумента
		|			И (ПравилаОбработкиЗаявокСотрудников.Подразделение В (&ПустыеПодразделения)
		|				ИЛИ ОрганизацииРоли.Организация = ПравилаОбработкиЗаявокСотрудников.Подразделение)
		|			И ОрганизацииРоли.Этап = ПравилаОбработкиЗаявокСотрудников.Этап
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников1
		|		ПО ОрганизацииРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников1.РольИсполнителя
		|			И ОрганизацииРоли.Организация = ПравилаОбработкиЗаявокСотрудников1.Подразделение
		|			И ОрганизацииРоли.Этап = ПравилаОбработкиЗаявокСотрудников1.Этап
		|			И ОрганизацииРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников1.ШаблонДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников2
		|		ПО (ПравилаОбработкиЗаявокСотрудников2.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
		|				ИЛИ ОрганизацииРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников2.РольИсполнителя)
		|			И (ПравилаОбработкиЗаявокСотрудников2.Подразделение В (&ПустыеПодразделения)
		|				ИЛИ ОрганизацииРоли.Организация = ПравилаОбработкиЗаявокСотрудников2.Подразделение)
		|			И ОрганизацииРоли.Этап = ПравилаОбработкиЗаявокСотрудников2.Этап
		|			И ОрганизацииРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников2.ШаблонДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	РольИсполнителя,
		|	ОрганизацииРоли.Наименование,
		|	ВнешнийСервис УБЫВ,
		|	Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОрганизацииРоли";
		УстановитьПривилегированныйРежим(Истина);
		НастройкиОрганизаций = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	РолиИсполнителей.Ссылка КАК РольИсполнителя,
		|	СтруктураПредприятия.Владелец КАК Владелец,
		|	ЭтапыРоли.Этап КАК Этап,
		|	ЭтапыРоли.ВнешнийСервис КАК ВнешнийСервис,
		|	ЗНАЧЕНИЕ(Справочник.ШаблоныДокументов.ПустаяСсылка) КАК ШаблонДокумента
		|ПОМЕСТИТЬ ВТПодразделенияРоли
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО (РолиИсполнителей.Ссылка В (&РолиИсполнителей))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыРоли КАК ЭтапыРоли
		|		ПО (РолиИсполнителей.Ссылка = ЭтапыРоли.РольИсполнителя)
		|ГДЕ
		|	(СтруктураПредприятия.Расформировано = ЛОЖЬ
		|			ИЛИ &ПоказыватьРасформированные)
		|	И РолиИсполнителей.Ссылка <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураПредприятия.Ссылка,
		|	РолиИсполнителей.Ссылка,
		|	СтруктураПредприятия.Владелец,
		|	ЭтапыРоли.Этап,
		|	ЭтапыРоли.ВнешнийСервис,
		|	ШаблоныДокументов.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО (РолиИсполнителей.Ссылка В (&РолиИсполнителей))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыРоли КАК ЭтапыРоли
		|		ПО (РолиИсполнителей.Ссылка = ЭтапыРоли.РольИсполнителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ПО (НЕ ШаблоныДокументов.Предопределенный)
		|			И (НЕ ШаблоныДокументов.ПометкаУдаления)
		|ГДЕ
		|	(СтруктураПредприятия.Расформировано = ЛОЖЬ
		|			ИЛИ &ПоказыватьРасформированные)
		|	И РолиИсполнителей.Ссылка = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияРоли.РольИсполнителя КАК РольИсполнителя,
		|	ПодразделенияРоли.Владелец КАК Организация,
		|	ПодразделенияРоли.Подразделение КАК Подразделение,
		|	ПодразделенияРоли.Этап КАК Этап,
		|	ВЫБОР
		|		КОГДА ПодразделенияРоли.ВнешнийСервис
		|			ТОГДА ""Правила согласования""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Гиперссылка,
		|	ПодразделенияРоли.ВнешнийСервис КАК ВнешнийСервис,
		|	ПодразделенияРоли.ШаблонДокумента КАК ШаблонДокумента,
		|	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ПравилаОбработкиЗаявокСотрудников1.СрокЗадачи, ПравилаОбработкиЗаявокСотрудников.СрокЗадачи), ПравилаОбработкиЗаявокСотрудников2.СрокЗадачи), 7) КАК СрокЗадачи,
		|	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ПравилаОбработкиЗаявокСотрудников1.ТребуетсяПодпись, ПравилаОбработкиЗаявокСотрудников.ТребуетсяПодпись), ПравилаОбработкиЗаявокСотрудников2.ТребуетсяПодпись), ЛОЖЬ) КАК ТребуетсяПодпись,
		|	НЕ ПравилаОбработкиЗаявокСотрудников1.Подразделение ЕСТЬ NULL КАК ЗаполненоПодразделениеПравилОбработки
		|ИЗ
		|	ВТПодразделенияРоли КАК ПодразделенияРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
		|		ПО ПодразделенияРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников.РольИсполнителя
		|			И ПодразделенияРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников.ШаблонДокумента
		|			И (ПравилаОбработкиЗаявокСотрудников.Подразделение В (&ПустыеПодразделения)
		|				ИЛИ ПодразделенияРоли.Подразделение = ПравилаОбработкиЗаявокСотрудников.Подразделение)
		|			И ПодразделенияРоли.Этап = ПравилаОбработкиЗаявокСотрудников.Этап
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников1
		|		ПО ПодразделенияРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников1.РольИсполнителя
		|			И ПодразделенияРоли.Подразделение = ПравилаОбработкиЗаявокСотрудников1.Подразделение
		|			И ПодразделенияРоли.Этап = ПравилаОбработкиЗаявокСотрудников1.Этап
		|			И ПодразделенияРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников1.ШаблонДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников2
		|		ПО (ПравилаОбработкиЗаявокСотрудников2.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
		|				ИЛИ ПодразделенияРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников2.РольИсполнителя)
		|			И (ПравилаОбработкиЗаявокСотрудников2.Подразделение В (&ПустыеПодразделения)
		|				ИЛИ ПодразделенияРоли.Подразделение = ПравилаОбработкиЗаявокСотрудников2.Подразделение)
		|			И ПодразделенияРоли.Этап = ПравилаОбработкиЗаявокСотрудников2.Этап
		|			И ПодразделенияРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников2.ШаблонДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	РольИсполнителя,
		|	ПодразделенияРоли.Подразделение ИЕРАРХИЯ,
		|	ВнешнийСервис УБЫВ,
		|	Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПодразделенияРоли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЭтапыРоли";
		УстановитьПривилегированныйРежим(Истина);
		ДеревоПодразделений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		УстановитьПривилегированныйРежим(Ложь);
		
		ДеревоНастроек = Новый ДеревоЗначений;
		ДеревоНастроек.Колонки.Добавить("РольИсполнителя");
		ДеревоНастроек.Колонки.Добавить("Подразделение");
		ДеревоНастроек.Колонки.Добавить("Этап");
		ДеревоНастроек.Колонки.Добавить("СрокЗадачи", Новый ОписаниеТипов("Число"));
		ДеревоНастроек.Колонки.Добавить("ТребуетсяПодпись", Новый ОписаниеТипов("Булево"));
		ДеревоНастроек.Колонки.Добавить("ЗаполненоПодразделениеПравилОбработки", Новый ОписаниеТипов("Булево"));
		ДеревоНастроек.Колонки.Добавить("ВнешнийСервис", Новый ОписаниеТипов("Булево"));
		ДеревоНастроек.Колонки.Добавить("Гиперссылка", Новый ОписаниеТипов("Строка"));
		ДеревоНастроек.Колонки.Добавить("ШаблонДокумента");
		
		Отбор = Новый Структура("РольИсполнителя,Организация");
		СтрокиДереваПодразделений = ДеревоПодразделений.Строки;
		ТекущаяОрганизация = Неопределено;
		МассивПовторяющихся = Новый Массив;
		Для каждого СтрокаТЗ Из НастройкиОрганизаций Цикл
			
			Если ТекущаяОрганизация <> СтрокаТЗ.Организация Тогда
				ТекущаяОрганизация = СтрокаТЗ.Организация;
				МассивПовторяющихся.Очистить();
			КонецЕсли;
					
			НоваяСтрока = ДеревоНастроек.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Подразделение = СтрокаТЗ.Организация;
			
			Если МассивПовторяющихся.Найти(СтрокаТЗ.РольИсполнителя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивПовторяющихся.Добавить(СтрокаТЗ.РольИсполнителя);
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
			НайденныеСтроки = СтрокиДереваПодразделений.НайтиСтроки(Отбор);
			ЗаполнитьСтрокиДереваНастроек(НоваяСтрока, НайденныеСтроки);
			
		КонецЦикла;
		
		Возврат ДеревоНастроек;
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	РолиИсполнителей.Ссылка КАК РольИсполнителя,
		|	ЭтапыРоли.Этап КАК Этап,
		|	ЭтапыРоли.ВнешнийСервис КАК ВнешнийСервис,
		|	ЗНАЧЕНИЕ(Справочник.ШаблоныДокументов.ПустаяСсылка) КАК ШаблонДокумента
		|ПОМЕСТИТЬ ВТПодразделенияРоли
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО (РолиИсполнителей.Ссылка В (&РолиИсполнителей))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыРоли КАК ЭтапыРоли
		|		ПО (РолиИсполнителей.Ссылка = ЭтапыРоли.РольИсполнителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	(ПодразделенияОрганизаций.Расформировано = ЛОЖЬ
		|			ИЛИ &ПоказыватьРасформированные
		|			ИЛИ ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL)
		|	И РолиИсполнителей.Ссылка <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураПредприятия.Ссылка,
		|	РолиИсполнителей.Ссылка,
		|	ЭтапыРоли.Этап,
		|	ЭтапыРоли.ВнешнийСервис,
		|	ШаблоныДокументов.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК РолиИсполнителей
		|		ПО (РолиИсполнителей.Ссылка В (&РолиИсполнителей))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапыРоли КАК ЭтапыРоли
		|		ПО (РолиИсполнителей.Ссылка = ЭтапыРоли.РольИсполнителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ПО (НЕ ШаблоныДокументов.Предопределенный)
		|			И (НЕ ШаблоныДокументов.ПометкаУдаления)
		|ГДЕ
		|	(ПодразделенияОрганизаций.Расформировано = ЛОЖЬ
		|			ИЛИ &ПоказыватьРасформированные
		|			ИЛИ ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL)
		|	И РолиИсполнителей.Ссылка = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияРоли.РольИсполнителя КАК РольИсполнителя,
		|	ПодразделенияРоли.Подразделение КАК Подразделение,
		|	ПодразделенияРоли.Этап КАК Этап,
		|	ВЫБОР
		|		КОГДА ПодразделенияРоли.ВнешнийСервис
		|			ТОГДА ""Правила согласования""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Гиперссылка,
		|	ПодразделенияРоли.ВнешнийСервис КАК ВнешнийСервис,
		|	ПодразделенияРоли.ШаблонДокумента КАК ШаблонДокумента,
		|	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ПравилаОбработкиЗаявокСотрудников1.СрокЗадачи, ПравилаОбработкиЗаявокСотрудников.СрокЗадачи), ПравилаОбработкиЗаявокСотрудников2.СрокЗадачи), 7) КАК СрокЗадачи,
		|	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ПравилаОбработкиЗаявокСотрудников1.ТребуетсяПодпись, ПравилаОбработкиЗаявокСотрудников.ТребуетсяПодпись), ПравилаОбработкиЗаявокСотрудников2.ТребуетсяПодпись), ЛОЖЬ) КАК ТребуетсяПодпись,
		|	НЕ ПравилаОбработкиЗаявокСотрудников1.Подразделение ЕСТЬ NULL КАК ЗаполненоПодразделениеПравилОбработки
		|ИЗ
		|	ВТПодразделенияРоли КАК ПодразделенияРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
		|		ПО ПодразделенияРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников.РольИсполнителя
		|			И (ПравилаОбработкиЗаявокСотрудников.Подразделение В (&ПустыеПодразделения)
		|				ИЛИ ПодразделенияРоли.Подразделение = ПравилаОбработкиЗаявокСотрудников.Подразделение)
		|			И ПодразделенияРоли.Этап = ПравилаОбработкиЗаявокСотрудников.Этап
		|			И ПодразделенияРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников.ШаблонДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников1
		|		ПО ПодразделенияРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников1.РольИсполнителя
		|			И ПодразделенияРоли.Подразделение = ПравилаОбработкиЗаявокСотрудников1.Подразделение
		|			И ПодразделенияРоли.Этап = ПравилаОбработкиЗаявокСотрудников1.Этап
		|			И ПодразделенияРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников1.ШаблонДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников2
		|		ПО (ПравилаОбработкиЗаявокСотрудников2.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
		|				ИЛИ ПодразделенияРоли.РольИсполнителя = ПравилаОбработкиЗаявокСотрудников2.РольИсполнителя)
		|			И (ПравилаОбработкиЗаявокСотрудников2.Подразделение В (&ПустыеПодразделения)
		|				ИЛИ ПодразделенияРоли.Подразделение = ПравилаОбработкиЗаявокСотрудников2.Подразделение)
		|			И ПодразделенияРоли.Этап = ПравилаОбработкиЗаявокСотрудников2.Этап
		|			И ПодразделенияРоли.ШаблонДокумента = ПравилаОбработкиЗаявокСотрудников2.ШаблонДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	РольИсполнителя,
		|	ПодразделенияРоли.Подразделение ИЕРАРХИЯ,
		|	ВнешнийСервис УБЫВ,
		|	Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПодразделенияРоли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЭтапыРоли";
		СтруктураПредприятия = Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия());
		ИмяТаблицы = СтруктураПредприятия.Метаданные().ПолноеИмя();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
		
		УстановитьПривилегированныйРежим(Истина);
		Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиДереваНастроек(СтрокаРодитель, КоллекцияСтрокДерева)

	Для каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДереваНастроек(НоваяСтрока, СтрокаДерева.Строки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТаблицаПользователей(СписокРолей)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	               |	ИсполнителиЗадач.Исполнитель КАК Исполнитель,
	               |	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА ИсполнителиЗадач.ДополнительныйОбъектАдресации = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.ШаблоныДокументов.ПустаяСсылка)
	               |		ИНАЧЕ ИсполнителиЗадач.ДополнительныйОбъектАдресации
	               |	КОНЕЦ КАК ШаблонДокумента
	               |ИЗ
	               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	               |ГДЕ
	               |	ИсполнителиЗадач.РольИсполнителя В(&РолиИсполнителей)";
	
	Запрос.УстановитьПараметр("РолиИсполнителей", СписокРолей);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДерево(Приемник, Источник, МассивПовторяющихся = Неопределено)
	
	Если МассивПовторяющихся = Неопределено Тогда
		МассивПовторяющихся = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементИсточника Из Источник.Строки Цикл
		Если МассивПовторяющихся.Найти(ЭлементИсточника.Подразделение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПовторяющихся.Добавить(ЭлементИсточника.Подразделение);
		ЭлементПриемника = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
		Если ЭлементИсточника.Строки.Количество() > 0 Тогда
			ЗаполнитьДерево(ЭлементПриемника, ЭлементИсточника, МассивПовторяющихся);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйТаблицаЭтапы()
	
	ТаблицаЭтапы = Новый ТаблицаЗначений;
	
	ТаблицаЭтапы.Колонки.Добавить("Этап");
	ТаблицаЭтапы.Колонки.Добавить("СрокЗадачи");
	ТаблицаЭтапы.Колонки.Добавить("ТребуетсяПодпись");
	ТаблицаЭтапы.Колонки.Добавить("Гиперссылка");
	ТаблицаЭтапы.Колонки.Добавить("ВнешнийСервис");
	
	Возврат ТаблицаЭтапы;
	
КонецФункции

#КонецОбласти

#Область ЗаписьПравилОбработки

&НаКлиенте
Процедура ЗаписатьНастройкиПравилОбработки(Закрыть = Ложь)
	ДлительнаяОперация = ЗаписатьНастройкиПравилОбработкиНаСервере();
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьНастройкиПравилОбработкиЗавершение",
													 ЭтотОбъект,
													 Новый Структура("Закрыть", Закрыть));
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНастройкиПравилОбработкиНаСервере()
	
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("ЗавершатьЗаявкиСотрудниковПослеПодписанияСправки", ЗавершатьЗаявкиСотрудникаПослеПодписанияСправки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
												  "БизнесПроцессыЗаявокСотрудников.ЗаписатьНастройкиПравилОбработки",
												  РеквизитФормыВЗначение("НастройкиПравил"),
												  ВидНастройки,
												  ДополнительныеНастройки);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЭлементы(Дерево, ДеревоФормы = Ложь)
	Возврат БизнесПроцессыЗаявокСотрудниковКлиентСервер.ПолучитьЭлементы(Дерево, ДеревоФормы);	
КонецФункции

#КонецОбласти

#Область ИзменениеВариантовНастроек

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	НастройкиПоВидамЗаявки = (ВидНастройки = 0);
	Элементы.НастройкиПравилСписокПользователей.Видимость = НастройкиПоВидамЗаявки;
	Элементы.НастройкиПравилСтруктураПредприятия.Видимость = (ВидНастройки = 1);
	Элементы.НастройкиПравилСтруктураПредприятияЭтапы.Видимость = (ВидНастройки = 1);
	Элементы.НастройкиПравилЭтапы.Видимость = (ВидНастройки = 0);
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	Элементы.НастройкиПравилЭтапыТребуетсяПодпись.Видимость = ИспользуетсяКадровыйЭДО;
	Элементы.НастройкиПравилСтруктураПредприятияЭтапыТребуетсяПодпись.Видимость = ИспользуетсяКадровыйЭДО;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиБезСтруктуры(ТекущаяРоль = Неопределено)
	
	Если ТекущаяРоль <> Неопределено Тогда
		ЗаполнитьНастройкиБезСтруктурыДляРоли(ТекущаяРоль);	
	Иначе
		Для Каждого Настройка Из НастройкиПравил Цикл
			ЗаполнитьНастройкиБезСтруктурыДляРоли(Настройка.РольИсполнителя);	
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиБезСтруктурыДляРоли(Роль)
	
	НастройкаПравилОбработки = НастройкиПравил.НайтиСтроки(Новый Структура("РольИсполнителя", Роль))[0];
	
	НастройкаПравилОбработкиСтруктураПредприятия = НастройкаПравилОбработки.СтруктураПредприятия.ПолучитьЭлементы()[0];
	
	НастройкаПравилОбработки.СписокПользователей.ЗагрузитьЗначения(НастройкаПравилОбработкиСтруктураПредприятия.СписокПользователей.ВыгрузитьЗначения());
	НастройкаПравилОбработки.Этапы.Загрузить(НастройкаПравилОбработкиСтруктураПредприятия.Этапы.Выгрузить());

КонецПроцедуры
#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеТаблицыЭтапов("НастройкиПравил.Этапы");
	УстановитьУсловноеОформлениеТаблицыЭтапов("НастройкиПравил.СтруктураПредприятия.Этапы");
	
	// Скрываем гиперссылку для заявок без правил согласования в 1С:Кабинет сотрудника.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлементы = Элемент.Поля.Элементы.Добавить();
	ПолеЭлементы.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПравилГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПравил.Гиперссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлементы = Элемент.Поля.Элементы.Добавить();
	ПолеЭлементы.Поле = Новый ПолеКомпоновкиДанных("НастройкиПравилРольИсполнителя");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПравил.ШаблонДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый  ПолеКомпоновкиДанных("НастройкиПравил.ШаблонДокумента"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицыЭтапов(ПутьКДанным)
	
	// Скрываем гиперссылку для обычных этапов.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СтрЗаменить(ПутьКДанным, ".", "") + "Гиперссылка"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ВнешнийСервис");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрываем детальную настройку для этапов внешнего сервиса.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СтрЗаменить(ПутьКДанным, ".", "") + "СрокЗадачи"].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[СтрЗаменить(ПутьКДанным, ".", "") + "ТребуетсяПодпись"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ВнешнийСервис");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	ЗаписатьНастройкиПравилОбработки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиПравилОбработкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Модифицированность = Ложь;
		Если ДополнительныеПараметры.Закрыть Тогда
			Закрыть();
		КонецЕсли;
		
		Для Каждого НастройкаПравил Из НастройкиПравил Цикл
			ЭлементыНастроекПравил = ПолучитьЭлементы(НастройкаПравил.СтруктураПредприятия, Истина);
			Для Каждого ЭлементНастроекПравил Из ЭлементыНастроекПравил Цикл
				ЭлементНастроекПравил.Изменено = Ложь;	
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'При сохранении настроек правил обработки заявок сотрудников произошла ошибка:';
								|en = 'An error occurred when saving the settings for processing employee requests:'") 
						 + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ИнформированиеПользователяКлиент.Предупредить(ТекстСообщения, Результат.ПодробноеПредставлениеОшибки,);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ВидНастройки = 0 Тогда
		СписокПользователейСтроки = Элементы.НастройкиПравил.ТекущиеДанные.СписокПользователей;
		СписокПользователейСтроки.ЗагрузитьЗначения(Результат);
		
		ЗаполнитьИзНастроекБезСтруктуры("СписокПользователей");
	ИначеЕсли ВидНастройки = 1 Тогда
		СписокПользователейСтроки = Элементы.НастройкиПравилСтруктураПредприятия.ТекущиеДанные.СписокПользователей;
		СписокПользователейСтроки.ЗагрузитьЗначения(Результат);
		
		ЗаполнитьПодчиненныеЭлементы("СписокПользователей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНастройкиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ВидНастройки = 1;
		Возврат;
	КонецЕсли;
	
	ВидНастройкиПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьИзНастроекБезСтруктуры(ИмяРеквизита)
	Модифицированность = Истина;
	Роль = Элементы.НастройкиПравил.ТекущиеДанные.РольИсполнителя;
	ШаблонДокумента = Элементы.НастройкиПравил.ТекущиеДанные.ШаблонДокумента;
	ЗаполнитьИзНастроекБезСтруктурыНаСервере(ИмяРеквизита, Роль, ШаблонДокумента);		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзНастроекБезСтруктурыНаСервере(ИмяРеквизита, ТекущаяРоль = Неопределено, ШаблонДокумента = Неопределено)
	Если ТекущаяРоль <> Неопределено Тогда
		ЗаполнитьИзНастроекБезСтруктурыНаСервереДляРоли(ИмяРеквизита, ТекущаяРоль, ШаблонДокумента);	
	Иначе
		Для каждого Настройка Из НастройкиПравил Цикл
			ЗаполнитьИзНастроекБезСтруктурыНаСервереДляРоли(ИмяРеквизита, Настройка.РольИсполнителя, Настройка.ШаблонДокумента); 	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьИзНастроекБезСтруктурыНаСервереДляРоли(ИмяРеквизита, Роль, ШаблонДокумента)
	
	НастройкиПравилДляРоли = НастройкиПравил.НайтиСтроки(Новый Структура("РольИсполнителя,ШаблонДокумента", Роль, ШаблонДокумента));
	
	ЭлементыНастроекПравил = ПолучитьЭлементы(НастройкиПравилДляРоли[0].СтруктураПредприятия, Истина);
	Для каждого ЭлементНастройкиПравил Из ЭлементыНастроекПравил Цикл
		Если ТипЗнч(ЭлементНастройкиПравил[ИмяРеквизита]) = Тип("СписокЗначений") Тогда
			ЭлементНастройкиПравил[ИмяРеквизита].ЗагрузитьЗначения(НастройкиПравилДляРоли[0][ИмяРеквизита].ВыгрузитьЗначения());
		ИначеЕсли Тип(ЭлементНастройкиПравил[ИмяРеквизита]) = Тип("ДанныеФормыКоллекция") Тогда
			ЭлементНастройкиПравил[ИмяРеквизита].Загрузить(НастройкиПравилДляРоли[0][ИмяРеквизита].Выгрузить());
		Иначе
			ЭлементНастройкиПравил[ИмяРеквизита] = НастройкиПравилДляРоли[0][ИмяРеквизита];
		КонецЕсли;
		ЭлементНастройкиПравил.Изменено = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодчиненныеЭлементы(ИмяКолонки)
	
	ТекущиеДанные = Элементы.НастройкиПравилСтруктураПредприятия.ТекущиеДанные;
	ТекущиеДанные.Изменено = Истина;
	
	ЗаполнитьПодчиненныеЭлементыНаСервере(
		ТекущиеДанные.ПолучитьИдентификатор(),
		Элементы.НастройкиПравил.ТекущиеДанные.ПолучитьИдентификатор(),
		ИмяКолонки);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПодчиненныеЭлементыНаСервере(ИдентификаторТекущихДанных, ИдентификаторТекущейРоли, ИмяКолонки);
	
	ТекущиеДанныеРоли = НастройкиПравил.НайтиПоИдентификатору(ИдентификаторТекущейРоли);
	ТекущиеДанные = ТекущиеДанныеРоли.СтруктураПредприятия.НайтиПоИдентификатору(ИдентификаторТекущихДанных);
	
	НастройкиПодчиненныхПодразделений = ПолучитьЭлементы(ТекущиеДанные, Истина);
	Для каждого НастройкаПодразделения Из НастройкиПодчиненныхПодразделений Цикл
		Если ТипЗнч(НастройкаПодразделения[ИмяКолонки]) = Тип("СписокЗначений") Тогда
			НастройкаПодразделения[ИмяКолонки].ЗагрузитьЗначения(ТекущиеДанные[ИмяКолонки].ВыгрузитьЗначения());
		ИначеЕсли ТипЗнч(НастройкаПодразделения[ИмяКолонки]) = Тип("ДанныеФормыКоллекция") Тогда	
			НастройкаПодразделения[ИмяКолонки].Загрузить(ТекущиеДанные[ИмяКолонки].Выгрузить());	
		Иначе
			НастройкаПодразделения[ИмяКолонки] = ТекущиеДанные[ИмяКолонки];
		КонецЕсли;
		НастройкаПодразделения.Изменено = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидНастройкиПриИзмененииНаСервере()
	
	УстановитьВидимостьЭлементов();
	
	Если ВидНастройки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНастройкиБезСтруктуры();
	
	Модифицированность = Истина;
	ЗаполнитьИзНастроекБезСтруктурыНаСервере("СписокПользователей");
	ЗаполнитьИзНастроекБезСтруктурыНаСервере("Этапы");

КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияОтчета()
	
	ОтчетОбъект = Отчеты.Задачи.Создать();
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ЭлементОтбора =  КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
	ЭлементОтбора.Представление = НСтр("ru = 'Заявки сотрудников';
										|en = 'Employee applications'");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БизнесПроцесс.ТипЗаявкиКабинетСотрудника");
	ЭлементОтбора.Использование = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Вариант", КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта", "ЗаявкиСотрудника");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ВидНастройки()

	ПустыеПодразделения = БизнесПроцессыЗаявокСотрудников.ПараметрЗапросаПустыеПодразделения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеПодразделения", ПустыеПодразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи КАК СрокЗадачи
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	|ГДЕ
	|	НЕ ПравилаОбработкиЗаявокСотрудников.Подразделение В (&ПустыеПодразделения)";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ?(РезультатЗапроса.Пустой(), 0, 1);

КонецФункции

&НаСервере
Функция ПроверитьСтруктуруПредприятия()

	Запрос = Новый Запрос;
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Предопределенный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";
	Иначе
		СтруктураПредприятия = Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия());
		ИмяТаблицы = СтруктураПредприятия.Метаданные().ПолноеИмя();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	#Таблица КАК Таблица";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		РезультатПроверки = Новый Структура;
		РезультатПроверки.Вставить("Доступна", Истина);
		РезультатПроверки.Вставить("Пустая", РезультатЗапроса.Выбрать().Количество() = 0);
		Возврат РезультатПроверки;
	Исключение
		// Отсутствует полный доступ к структуре предприятия.
		РезультатПроверки = Новый Структура;
		РезультатПроверки.Вставить("Доступна", Ложь);
		РезультатПроверки.Вставить("Пустая", Истина);
		Возврат РезультатПроверки;
	КонецПопытки;

КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОткрытияПравилаСогласования(Этап, Подразделение = Неопределено)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.ПустаяСсылка());
	ПараметрыОткрытия.Вставить("ТипЗаявки", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап, "ТипЗаявки"));
	Если Подразделение <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	ПустыеПодразделения = БизнесПроцессыЗаявокСотрудников.ПараметрЗапросаПустыеПодразделения();
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаСогласования.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ПравилаСогласованияЗаявокКабинетСотрудника КАК ПравилаСогласования
	               |ГДЕ
	               |	ПравилаСогласования.Подразделение В (&Подразделения)
	               |	И ПравилаСогласования.ТипЗаявки = &ТипЗаявки";
	
	Запрос.УстановитьПараметр("ТипЗаявки", ПараметрыОткрытия.ТипЗаявки);
	Запрос.УстановитьПараметр("Подразделения",
		?(Подразделение = Неопределено,
			ПустыеПодразделения,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
			ПараметрыОткрытия.Ключ = Выборка.Ссылка;
	ИначеЕсли Подразделение <> Неопределено Тогда
		Если ТипЗнч(Подразделение) = Тип("СправочникСсылка.Организации") Тогда
			Возврат ПараметрыОткрытияПравилаСогласования(Этап);
		ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, "Родитель, Владелец");
			Если ЗначениеЗаполнено(РеквизитыПодразделения.Родитель) Тогда
				Возврат ПараметрыОткрытияПравилаСогласования(Этап, РеквизитыПодразделения.Родитель);	
			Иначе
				Возврат ПараметрыОткрытияПравилаСогласования(Этап, РеквизитыПодразделения.Владелец);
			КонецЕсли;
		Иначе
			Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Родитель");
			Возврат ПараметрыОткрытияПравилаСогласования(Этап, Родитель);
		КонецЕсли;
	КонецЕсли;
		
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидЗаявкиСЭтапамиВнешнегоСервиса(Роль)
	
	ТаблицаРолей = Новый ТаблицаЗначений;
	ТаблицаРолей.Колонки.Добавить("Роль");
	ТаблицаРолей.Колонки.Добавить("ВидЗаявки");
	
	НастраиваемыеВидыЗаявокВнешнегоСервиса = Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.ДоступныеТипыЗаявок();
	Для Каждого ВидЗаявки Из НастраиваемыеВидыЗаявокВнешнегоСервиса Цикл
				
		ИмяТаблицы = БизнесПроцессыЗаявокСотрудников.СоответствиеЗаявкиИТипаЗаявки()[ВидЗаявки];
		РольИсполнителя = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗаявокПоТипамЗапросов()[ИмяТаблицы];
		
		СтрокаРоли = ТаблицаРолей.Добавить();
		СтрокаРоли.Роль = РольИсполнителя;
		СтрокаРоли.ВидЗаявки = ВидЗаявки;
		
	КонецЦикла;
	
	СтрокаРоли = ТаблицаРолей.Найти(Роль, "Роль");
	Если СтрокаРоли = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокаРоли.ВидЗаявки;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокированоНаВремяОбновления() 
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя КАК РольИсполнителя,
	               |	ПравилаОбработкиЗаявокСотрудников.Подразделение КАК Подразделение,
	               |	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи КАК СрокЗадачи
	               |ИЗ
	               |	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	               |ГДЕ
	               |	ПравилаОбработкиЗаявокСотрудников.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыЗаявокСотрудников.ПустаяСсылка)
	               |ИТОГИ ПО
	               |	РольИсполнителя";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти