#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ПланированиеГрафика

// Планирует модель и/или предварительный график производства одного заказа.
//
// Параметры:
//  Настройки - Структура - настройки расчета графика. Состав ключей
//		см. функцию-конструктор НастройкиПланированияПредварительногоГрафика.
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат планирования.
//
Процедура ПланироватьПредварительныйГрафикРаспоряжения(Настройки, АдресХранилища) Экспорт
	
	Файловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ПланированиеВФоновомРежиме = НЕ Файловая
		И Настройки.ПланироватьГрафик
		И Настройки.ПланироватьМодель;
	
	НомерЗаданияКРасчетуГрафикаПроизводства = ЗафиксироватьНомерЗаданияКРасчетуГрафикаПроизводства();
	
	Если ПланированиеВФоновомРежиме Тогда
		
		ИмяМетодаЗадания = "УправлениеПроизводством.ПланироватьИЗаписатьГрафикВФоне";
		НаименованиеЗадания = НСтр("ru = 'Планирование графика производства';
									|en = 'Production schedule creating'");
		АдресаРезультатов = Новый Массив;
		
		Для Сч = 1 По 2 Цикл
			
			Если Сч = 1 Тогда
				НастройкиПланирования = НастройкиПланированияПредварительныйГрафик(
					Настройки, НомерЗаданияКРасчетуГрафикаПроизводства);
			Иначе
				НастройкиПланирования = НастройкиПланированияМодельГрафика(
					Настройки, НомерЗаданияКРасчетуГрафикаПроизводства);
			КонецЕсли;
			
			АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
			АдресаРезультатов.Добавить(АдресРезультата);
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(НастройкиПланирования);
			ПараметрыМетода.Добавить(АдресРезультата);
			Задание = ФоновыеЗадания.Выполнить(ИмяМетодаЗадания, ПараметрыМетода,, НаименованиеЗадания);
			
		КонецЦикла;
		
		ОжидатьЗавершенияФоновыхЗаданий(ИмяМетодаЗадания, НаименованиеЗадания);
		
		РезультатыФоновогоПланирования = РезультатыФоновогоПланированияГрафика(АдресаРезультатов);
		РезультатыГрафик = РезультатыФоновогоПланирования.РезультатыГрафик;
		РезультатыМодель = РезультатыФоновогоПланирования.РезультатыМодель;
		
	Иначе
		
		Если Настройки.ПланироватьГрафик Тогда
			НастройкиПланирования = НастройкиПланированияПредварительныйГрафик(
				Настройки, НомерЗаданияКРасчетуГрафикаПроизводства);
			РезультатыГрафик = ПланироватьИЗаписатьГрафик(НастройкиПланирования);
		Иначе
			РезультатыГрафик = Неопределено;
		КонецЕсли;
		
		Если Настройки.ПланироватьМодель Тогда
			НастройкиПланирования = НастройкиПланированияМодельГрафика(
				Настройки, НомерЗаданияКРасчетуГрафикаПроизводства);
			РезультатыМодель = ПланироватьИЗаписатьГрафик(НастройкиПланирования);
		Иначе
			РезультатыМодель = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = РезультатыПланированияПредварительногоГрафика(
		РезультатыГрафик,
		РезультатыМодель,
		НомерЗаданияКРасчетуГрафикаПроизводства,
		Настройки.ОтменитьРучныеИзмененияГрафика);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Записывает результаты предварительного расчета графика в действующий (рабочий) график производства.
//
// Параметры:
//  Параметры - Структура - содержит следующие данные:
//		* Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, график которого необходимо записать.
//		* РазмещенныеЭтапы - Массив - массив этапов производства, принадлежащих распоряжению,
//			график которых необходимо записать.
//		* НомерЗаданияКРасчетуГрафикаПроизводства - Число - значение одноименной константы, зафиксированное
//			перед планированием графика.
//		* ОтменитьРучныеИзмененияГрафика - Булево - значение одноименной настройки, использованной при планировании.
//  АдресХранилища - Строка - адрес хранилища, в которое может быть помещен результат работы процедуры.
//
Процедура ЗаписатьПредварительныйГрафикВРабочий(Параметры, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Распоряжение = Параметры.Распоряжение;
		Этапы = Параметры.РазмещенныеЭтапы;
		НомерЗаданияКРасчетуГрафикаПроизводства = Параметры.НомерЗаданияКРасчетуГрафикаПроизводства;
		ОтменитьРучныеИзмененияГрафика = Параметры.ОтменитьРучныеИзмененияГрафика;
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ЗаписатьПредварительныйГрафикВРабочий(
			Распоряжение);
		
		РегистрыСведений.ПланированиеЗагрузкиВидовРабочихЦентров.ЗаписатьПредварительныйГрафикВРабочий(
			Распоряжение,
			Этапы);
		
		ПриЗаписиРабочегоГрафика(
			Распоряжение,
			Этапы,
			НомерЗаданияКРасчетуГрафикаПроизводства,
			ОтменитьРучныеИзмененияГрафика);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурналРегистрацииОшибкуЗаписиГрафика(Комментарий);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Очищает результаты предварительного планирования графика производства.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, предварительный график которого необходимо очистить.
//  АдресХранилища - Строка - адрес хранилища, в которое может быть помещен результат работы процедуры.
//
Процедура ОчиститьПредварительныйГрафик(Распоряжение, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ОчиститьПредварительныйГрафик(Распоряжение);
		РегистрыСведений.ПланированиеЗагрузкиВидовРабочихЦентров.ОчиститьПредварительныйГрафик(Распоряжение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
 		
		ИмяСобытия = НСтр("ru = 'График производства';
							|en = 'Production schedule'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
			+ "."
			+ НСтр("ru = 'Очистка';
					|en = 'Cleanup'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Уровень = УровеньЖурналаРегистрации.Ошибка;
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,, Комментарий);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Функция - конструктор настроек расчета графика производства заказа
// 
// Возвращаемое значение:
//  Структура - доступные настройки расчета.
//
Функция НастройкиПланированияПредварительногоГрафика() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПланироватьГрафик", Ложь);
	Результат.Вставить("ЗадействоватьРезервДоступностиГрафик", Ложь);
	
	Результат.Вставить("ПланироватьМодель", Ложь);
	Результат.Вставить("ЗадействоватьРезервДоступностиМодель", Ложь);
	
	Результат.Вставить("Распоряжение");
	
	Результат.Вставить("ВсеМатериалыВНаличии", Ложь);
	Результат.Вставить("НеограниченныйПаркОборудования", Ложь);
	Результат.Вставить("КруглосуточнаяРаботаБезВыходных", Ложь);
	Результат.Вставить("ОтсутствиеПрочихЗаказов", Ложь);
	
	Результат.Вставить("ПолноеПерепланирование", Ложь);
	Результат.Вставить("ОтменитьРучныеИзмененияГрафика", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Планирует график производства одного/нескольких распоряжений
// и записывает его в качестве рабочего графика.
//
// Параметры:
//  Параметры - Структура - параметры расчета графика, элементы:
//		* Распоряжения - Массив - содержит ссылки на распоряжения, график которых необходимо рассчитать.
//		* ПолноеПерепланирование - Булево - флаг того, что расчет следует выполнить для всех этапов производства;
//			в противном случае расчет будет выполнен только для этапов, требующих пересчета графика.
//		* ЗадействоватьРезервДоступности - Булево - флаг того, что при планировании можно занимать доступность
//			видов рабочих центров, находящуюся в резерве.
//		* ОтменитьРучныеИзмененияГрафика - Булево - флаг того, что при планировании необходимо отменить
//			ручные изменения графика производства этапов.
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат планирования.
//		Результатом является структура с элементами:
//		* КоличествоВсего - Число - количество распоряжений, график которых необходимо было рассчитать.
//		* КоличествоОбработанных - Число - количество распоряжений, график которых был рассчитан успешно.
//		* ЕстьОшибки - Булево - флаг того, что в процессе планирования одного из распоряжений возникла ошибка.
//		* РаспоряжениеОшибка - ДокументСсылка.ЗаказНаПроизводство2_2 - ссылка на распоряжение, при планировании
//			которого возникли ошибки. Планирование графика распоряжений выполняется последовательно,
//			в соответствии с приоритетами распоряжений. Если планирование очередного распоряжения завершается
//			с ошибками, то дальнейший расчет графика не выполняется.
//
Процедура ПланироватьРабочийГрафикРаспоряжений(Параметры, АдресХранилища) Экспорт
	
	КоличествоВсего = Параметры.Распоряжения.Количество();
	
	Результат = ИнициализироватьРезультатГрупповогоПланирования();
	Результат.КоличествоВсего = КоличествоВсего;
	
	Очередь = ОчередьПланированияГрафикаРаспоряжений(Параметры.Распоряжения);
	
	Пока Очередь.Следующий() Цикл
		
		НастройкиПланирования = НастройкиПланированияРабочийГрафикРаспоряжений(Очередь.Распоряжение, Параметры);
		
		РезультатыПланирования = ПланироватьИЗаписатьГрафик(НастройкиПланирования);
		
		Если РезультатыПланирования.ЕстьОшибки Тогда
			
			Результат.ЕстьОшибки = Истина;
			Результат.РаспоряжениеОшибка = Очередь.Распоряжение;
			
			Прервать;
			
		ИначеЕсли РезультатыПланирования.ГрафикЗапланирован Тогда
			
			Результат.КоличествоОбработанных = Результат.КоличествоОбработанных + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Планирует рабочий график производства для заданного массива этапов.
//
// Параметры:
//  Параметры - Структура - параметры планирования графика с элементами:
//		* Этапы - Массив - ссылки на этапы, график которых необходимо запланировать.
//		* ЗадействоватьРезервДоступности - Булево - флаг того, что при планировании можно занимать доступность
//			видов рабочих центров, находящуюся в резерве.
//		* ОтменитьРучныеИзмененияГрафика - Булево - флаг того, что при планировании необходимо отменить
//			ручные изменения графика производства этапов.
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат планирования.
//		Результатом является структура с элементами:
//		* КоличествоВсего - Число - количество этапов, график которых необходимо рассчитать.
//		* КоличествоОбработанных - Число - количество этапов, график которых был рассчитан успешно.
//
Процедура ПланироватьРабочийГрафикЭтапов(Параметры, АдресХранилища) Экспорт
	
	КоличествоВсего = Параметры.Этапы.Количество();
	
	Результат = ИнициализироватьРезультатГрупповогоПланирования();
	Результат.КоличествоВсего = КоличествоВсего;
	
	ВыборкаРаспоряжение = ОчередьПланированияГрафикаЭтапов(Параметры.Этапы);
	
	Пока ВыборкаРаспоряжение.Следующий() Цикл
		
		ЭтапыРаспоряжения = Новый Массив;
		ВыборкаЭтап = ВыборкаРаспоряжение.Выбрать();
		Пока ВыборкаЭтап.Следующий() Цикл
			ЭтапыРаспоряжения.Добавить(ВыборкаЭтап.Этап);
		КонецЦикла;
		
		НастройкиПланирования = НастройкиПланированияРабочийГрафикЭтапов(
				ВыборкаРаспоряжение.Распоряжение,
				ЭтапыРаспоряжения,
				Параметры);
		
		РезультатыПланирования = ПланироватьИЗаписатьГрафик(НастройкиПланирования);
		Если РезультатыПланирования.ЕстьОшибки Тогда
			
			Результат.ЕстьОшибки = Истина;
			Результат.РаспоряжениеОшибка = ВыборкаРаспоряжение.Распоряжение;
			
			Прервать;
			
		Иначе
			Результат.КоличествоОбработанных = Результат.КоличествоОбработанных + ЭтапыРаспоряжения.Количество();
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Планирует график по очереди заказов на производство с неактуальным графиком
//  и записывает его в качестве рабочего графика.
//
Процедура ПланироватьОчередьЗаказовНаПроизводство() Экспорт
	
	Очередь = ОчередьПланированияГрафикаРаспоряжений();
	
	Пока Очередь.Следующий() Цикл
		
		НастройкиПланирования = НастройкиПланированияРабочийГрафикРаспоряжений(Очередь.Распоряжение);
		
		РезультатыПланирования = ПланироватьИЗаписатьГрафик(НастройкиПланирования);
		
		Если РезультатыПланирования.ЕстьОшибки Тогда
			
			СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеПланированиеГрафикаПроизводства();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось рассчитать график производства по заказу: %1, по причине %2';
											|en = 'Cannot calculate production schedule for the order: %1. Reason: %2'"),
								Очередь.Распоряжение,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Очередь.Распоряжение.Метаданные(), Очередь.Распоряжение, ТекстСообщения);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, есть ли право доступа на планирование графика производства
// 
// Возвращаемое значение:
//   - Булево - Истина, если право доступа есть.
//
Функция ПланированиеДоступно() Экспорт
	
	Результат = Ложь;
	
	Если УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
		
		Результат = ПравоДоступа("Использование", Метаданные.Обработки.ПланированиеГрафикаПроизводства2_2);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КодыОшибокКонстанты

// Возвращает код ошибки планирования графика: нехватка доступного времени.
// 
// Возвращаемое значение:
//  Число - код ошибки.
//
Функция КодОшибкиДоступностьВРЦ() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает код ошибки планирования графика: отсутствует график работы подразделения.
// 
// Возвращаемое значение:
//  Число - код ошибки.
//
Функция КодОшибкиГрафикРаботыПодразделения() Экспорт
	
	Возврат 2;
	
КонецФункции

// Возвращает код ошибки планирования графика: отсутствует график работы предприятия.
// 
// Возвращаемое значение:
//  Число - код ошибки.
//
Функция КодОшибкиГрафикРаботыПредприятия() Экспорт
	
	Возврат 5;
	
КонецФункции

// Возвращает код ошибки планирования графика: отсутствует график у этапа предшественника.
// 
// Возвращаемое значение:
//  Число - код ошибки.
//
Функция КодОшибкиОтсутствуетГрафикПредшественника() Экспорт
	
	Возврат 3;
	
КонецФункции

// Возвращает код ошибки планирования графика: зацикливание связей этапов.
// 
// Возвращаемое значение:
//  Число - код ошибки.
//
Функция КодОшибкиЕстьЦиклыВЦепочкеЭтапов() Экспорт
	
	Возврат 4;
	
КонецФункции

#КонецОбласти

#Область ДоступностьИсполнителей

// Помещает в менеджер временную таблицу, содержащую данные о доступном времени рабочих центров.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер, в который будет помещена
//		сформированная временная таблица.
//  ИмяВременнойТаблицы		 - Строка - имя временной таблицы.
//  МассивВРЦ				 - Массив - массив, солдержащий виды рабочих цеентров, доступность которых необходимо получить.
//  МассивЭтапов			 - Массив - этапы данного распоряжения, не уменьшающие доступность видов рабочих центров.
//		Соответственно, прочие этапы данного распоряжения будут уменьшать доступность видов рабочих центров. Например, при расчете
//		графика распоряжения следует передать все этапы, график которых будет пересчитан, т.к. они не должны занимать доступность.
//  Начало					 - Дата - начало интервала выборки данных.
//  Окончание				 - Дата - окончание интервала выборки данных.
//  Параметры				 - Структура - прочие параметры выборки данных:
//		* Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - планируемый заказ на производство.
//		* РазмещениеКНачалу - Булево - направление размещения выпуска.
//		* ОтсутствиеПрочихЗаказов - Булево - настройка планирования.
//		* ОтменитьРучныеИзмененияГрафика - Булево - настройка планирования.
//
Процедура СоздатьВТДоступностьВидовРЦ(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, МассивВРЦ, МассивЭтапов, Начало, Окончание, Параметры) Экспорт
	
	Распоряжение = Параметры.Распоряжение;
	КНачалу = Параметры.РазмещениеКНачалу;
	ОтсутствиеПрочихЗаказов = Параметры.ОтсутствиеПрочихЗаказов;
	ОтменитьРучныеИзмененияГрафика = Параметры.ОтменитьРучныеИзмененияГрафика;
	
	Документы.ЗаказНаПроизводство2_2.СоздатьВТЗаказыСБольшимПриоритетом(
		МенеджерВременныхТаблиц,
		"ВТПриоритетныеРаспоряжения",
		Распоряжение);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыРЦ.Ссылка КАК Исполнитель,
	|	ВидыРЦ.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВидыРЦ.РезервДоступности КАК РезервДоступности,
	|	ВЫБОР ВидыРЦ.Подразделение.ИнтервалПланирования
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|			ТОГДА &НачалоЧаса
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|			ТОГДА &НачалоДня
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|			ТОГДА &НачалоНедели
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|			ТОГДА &НачалоМесяца
	|	КОНЕЦ КАК Начало,
	|	ВЫБОР ВидыРЦ.Подразделение.ИнтервалПланирования
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|			ТОГДА &ОкончаниеЧаса
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|			ТОГДА &ОкончаниеДня
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|			ТОГДА &ОкончаниеНедели
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|			ТОГДА &ОкончаниеМесяца
	|	КОНЕЦ КАК Окончание
	|ПОМЕСТИТЬ ВТВидыРЦ
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРЦ
	|ГДЕ
	|	ВидыРЦ.Ссылка В(&МассивВРЦ)
	|	И ВидыРЦ.УчитыватьДоступностьПоГрафикуРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	Начало,
	|	Окончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доступность.ВидРабочегоЦентра КАК Исполнитель,
	|	Доступность.ДатаИнтервала КАК ДатаИнтервала,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				ТОГДА 0
	|			КОГДА Доступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|				ТОГДА Доступность.ДоступностьПоВидуРЦ
	|			ИНАЧЕ Доступность.ДоступностьПоРЦ
	|		КОНЕЦ) КАК КоличествоПриход,
	|	СУММА(ВЫБОР
	|			КОГДА Доступность.ЭтоДвижениеВводаДоступности
	|				ТОГДА 0
	|			ИНАЧЕ Доступность.Занято
	|		КОНЕЦ) КАК КоличествоРасход,
	|	МАКСИМУМ(ВидыРЦ.ИнтервалПланирования) КАК ИнтервалПланирования,
	|	МАКСИМУМ(ВидыРЦ.РезервДоступности) КАК РезервДоступности
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК Доступность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРЦ КАК ВидыРЦ
	|		ПО (ВидыРЦ.Исполнитель = Доступность.ВидРабочегоЦентра)
	|			И Доступность.ДатаИнтервала >= ВидыРЦ.Начало
	|			И (Доступность.ДатаИнтервала <= ВидыРЦ.Окончание
	|				ИЛИ &КНачалу)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетныеРаспоряжения КАК ПриоритетныеЗаказы2_2
	|		ПО (ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение = ПриоритетныеЗаказы2_2.Ссылка)
	//++ Устарело_Производство21
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетныеРаспоряжения КАК ПриоритетныеЗаказы
	|		ПО ((ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство)) = ПриоритетныеЗаказы.Ссылка)
	//-- Устарело_Производство21
	|ГДЕ
	|	(Доступность.ЭтоДвижениеВводаДоступности
	|			ИЛИ НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				И Доступность.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|				И ПриоритетныеЗаказы2_2.Ссылка ЕСТЬ НЕ NULL
	|			ИЛИ НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				И Доступность.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
	//++ Устарело_Производство21 
	|			ИЛИ НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				И Доступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|				И ПриоритетныеЗаказы.Ссылка ЕСТЬ НЕ NULL
	//-- Устарело_Производство21 
	|			ИЛИ НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				И Доступность.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|				И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение = &Распоряжение
	|				И (НЕ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЭтапПроизводства2_2) В (&МассивЭтапов)
	|					ИЛИ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЭтапПроизводства2_2).РучноеРазмещениеВГрафике
	|						И НЕ &ОтменитьРучныеИзмененияГрафика))
	|	И (Доступность.ЭтоДвижениеВводаДоступности
	|			ИЛИ НЕ &ОтсутствиеПрочихЗаказов)
	|	И Доступность.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Доступность.ВидРабочегоЦентра,
	|	Доступность.ДатаИнтервала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	ДатаИнтервала";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТРезультат", ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивВРЦ", МассивВРЦ);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
	Запрос.УстановитьПараметр("КНачалу", КНачалу);
	Запрос.УстановитьПараметр("ОтсутствиеПрочихЗаказов", ОтсутствиеПрочихЗаказов);
	Запрос.УстановитьПараметр("ОтменитьРучныеИзмененияГрафика", ОтменитьРучныеИзмененияГрафика);
	
	Запрос.УстановитьПараметр("НачалоЧаса", НачалоЧаса(Начало));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Начало));
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели(Начало));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Начало));
	
	Запрос.УстановитьПараметр("ОкончаниеЧаса", КонецЧаса(Окончание));
	Запрос.УстановитьПараметр("ОкончаниеДня", КонецДня(Окончание));
	Запрос.УстановитьПараметр("ОкончаниеНедели", КонецНедели(Окончание));
	Запрос.УстановитьПараметр("ОкончаниеМесяца", КонецМесяца(Окончание));
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Рассчитывает дату размещения буферов по графику работы подразделения.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение,
//		по расписанию которого необходимо разместить буферы.
//  Буферы - Массив - содержит структуры, описывающие размещаемые буферы. Ключи структур:
//		* Длительность - Число - размер размещаемого буфера.
//		* ЕдиницаИзмерения - ПеречислениеСсылка.ЕдиницыИзмеренияВремени - единица измерения длительности буфера.
//		* Дата - Дата - дата, начиная с которой необходимо разместить буфер.
//		* ПрямоеРазмещение - Булево - направление размещения буфера. Если Истина, то буфер откладывается
//			в будущее от даты начала размещения. В противном случае размещение выполняется в прошлое,
//			относительно даты размещения.
//		* ДатаРазмещения - Дата - результат размещения буфера. Если размещение выполнить не удалось,
//			то дата будет пустой.
//
Процедура РазместитьБуферы(Подразделение, Буферы) Экспорт
	
	// Инициализация параметров планирования
	ПараметрыПланирования = ИнициализироватьПараметрыПланирования(
		ИнициализироватьНастройкиПланирования(1));
	ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных = Ложь;
	
	// Чтение расписания
	ГрафикРаботы = 1;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПроизводствоСервер.СоздатьВТГрафикиРаботыПодразделений(
		Подразделение, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&ГрафикРаботы                КАК ГрафикРаботы,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботыСсылка
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Графики = Запрос.Выполнить().Выгрузить();
	
	РасписаниеУББВ = РасписаниеУББВ(Графики, '00010101', '39991231');
	ДобавитьВРасписаниеУББВИндексыИСлужебныеПоля(РасписаниеУББВ);
	ПараметрыПланирования.РасписаниеУББВ = РасписаниеУББВ;
	
	// Размещение буферов
	Для каждого Буфер Из Буферы Цикл
		
		ДатаРазмещения = '00010101';
		
		Если ЗначениеЗаполнено(Буфер.Дата) И ЗначениеЗаполнено(Буфер.Длительность) Тогда
			
			РезультатыРазмещения = РазместитьПоРасписаниюУББВ(
				ПараметрыПланирования,
				ГрафикРаботы,
				Буфер.ПрямоеРазмещение,
				Буфер.Дата,
				Буфер.Длительность,
				Буфер.ЕдиницаИзмерения);
			
			Если РезультатыРазмещения.РазмещениеВыполнено Тогда
				
				Если Буфер.ПрямоеРазмещение Тогда
					ДатаРазмещения = РезультатыРазмещения.Окончание;
				Иначе
					ДатаРазмещения = РезультатыРазмещения.Начало;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Буфер.Дата) И НЕ ЗначениеЗаполнено(Буфер.Длительность) Тогда
			
			ДатаРазмещения = Буфер.Дата;
			
		КонецЕсли;
		
		Буфер.Вставить("ДатаРазмещения", ДатаРазмещения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПланированиеГрафика

Функция ПланироватьИЗаписатьГрафик(НастройкиПланирования)
	
	КлючеваяОперация = "МежцеховоеУправление2_2.ПланированиеГрафикаПроизводства";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыПланирования = ПланироватьИЗаписатьГрафикВнутриЗамераВремени(НастройкиПланирования);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, РезультатыПланирования.КоличествоДанных);
	
	Возврат РезультатыПланирования;
	
КонецФункции

Функция ПланироватьИЗаписатьГрафикВнутриЗамераВремени(НастройкиПланирования)
	
	РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(
		НастройкиПланирования.Распоряжение);
	
	Отказ = Ложь;
	ПараметрыПланирования = ПараметрыПланирования(НастройкиПланирования, Ложь, Отказ);
	
	Если НЕ Отказ Тогда
		
		ВыполнитьПроверкиПередПланированием(ПараметрыПланирования, Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		УправлениеПроизводствомПереопределяемый.ПослеЗаполненияПараметровПланирования(ПараметрыПланирования);
		ПланироватьГрафикПоПараметрам(ПараметрыПланирования);
		
		Если ПараметрыПланирования.ИзменитьНаправлениеПланирования Тогда
		
			ПараметрыПланирования = ПараметрыПланирования(НастройкиПланирования, Истина, Отказ);
			
			Если НЕ Отказ Тогда
				
				УправлениеПроизводствомПереопределяемый.ПослеЗаполненияПараметровПланирования(ПараметрыПланирования);
				ДобавитьОповещениеОбИзмененииНаправленияПланирования(ПараметрыПланирования);
				ПланироватьГрафикПоПараметрам(ПараметрыПланирования);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			ПослеЗавершенияПланирования(ПараметрыПланирования);
			
			Если ПараметрыПланирования.РезультатыПланирования.ГрафикЗапланирован Тогда
				
				УправлениеПроизводствомПереопределяемый.ПередЗаписьюРезультатовПланирования(ПараметрыПланирования);
				ЗаписатьГрафик(ПараметрыПланирования);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатыПланирования = ПараметрыПланирования.РезультатыПланирования;
	РезультатыПланирования.КоличествоДанных = КоличествоОбработанныхДанных(ПараметрыПланирования);
	
	ПараметрыПланирования = Неопределено;
	
	Возврат РезультатыПланирования;
	
КонецФункции

Процедура ПланироватьГрафикПоПараметрам(ПараметрыПланирования)
	
	МаксИндекс = ПараметрыПланирования.Этапы.Количество()-1;
	Для Индекс = 0 По МаксИндекс Цикл
		
		Этап = ПараметрыПланирования.Этапы[Индекс];
		
		Если Этап.Размещать Тогда
			
			ПараметрыРазмещения = ИнициализироватьПараметрыРазмещенияЭтапа(ПараметрыПланирования, Этап);
			
			Если НЕ ЭтапРазмещенВручную(ПараметрыПланирования, Этап) Тогда
				
				ЗаполнитьДатуОбеспеченияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения);
				РассчитатьМоментРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения);
				
				Если ЭтоЭтапУББВ(Этап) Тогда
					РазместитьЭтапУББВ(ПараметрыПланирования, Этап, ПараметрыРазмещения);
				Иначе
					РазместитьЭтапББВ(ПараметрыПланирования, Этап, ПараметрыРазмещения);
				КонецЕсли;
				
				ПараметрыРазмещения = Неопределено;
				
				Если ПараметрыПланирования.ИзменитьНаправлениеПланирования Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				
				РазместитьЭтапСРучнымРазмещением(ПараметрыПланирования, Этап, ПараметрыРазмещения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	Этап - СтрокаТаблицыЗначений -
// Возвращаемое значение:
// 	Структура - Описание:
// * ЗагрузкаВРЦ - ТаблицаЗначений -:
// ** ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 -
// ** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// ** ДатаИнтервала - Дата -
// ** Занято - Число -
// ** СтрокаДоступностьВРЦ - СтрокаТаблицыЗначений - где:
// *** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// *** ДатаИнтервала - Дата -
// *** Доступность - Число -
// *** Занято - Число -
// * КодОшибкиРазмещения - Число -
// * ПланироватьНеРанее - Дата -
// * ДатаОбеспечения - Дата -
// * МоментРазмещения - Дата -
// * РазмещениеВыпуска - ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства -
// * ОграниченПоОборудованию - Булево -
// * ОграниченПоМатериалам - Булево -
// * ОграничиваетСрокВыпуска - Булево -
// * НаКритическомПути - Булево -
// * НачалоСледующегоЭтапа - Дата -
// * НачалоЗавершающегоБуфера - Дата -
// * ОкончаниеПредварительногоБуфера - Дата -
// * ОкончаниеЭтапа - Дата -
// * НачалоЭтапа - Дата -
// * ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 -
Функция ИнициализироватьПараметрыРазмещенияЭтапа(ПараметрыПланирования, Этап)
	
	Результат = Новый Структура;
	
	Реквизиты = РеквизитыГрафикаПроизводства();
	Для каждого Реквизит Из Реквизиты Цикл
		Результат.Вставить(Реквизит.Ключ, Реквизит.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Результат.Вставить("МоментРазмещения", '00010101');
	Результат.Вставить("ДатаОбеспечения", '00010101');
	Результат.Вставить("ПланироватьНеРанее", '00010101');
	Результат.Вставить("КодОшибкиРазмещения", 0);
	
	Если НЕ ЭтоЭтапУББВ(Этап) ИЛИ ЭтапРазмещенВручную(ПараметрыПланирования, Этап) Тогда
		ЗагрузкаВРЦ = ИнициализироватьТаблицуУчетаЗагрузкиВРЦ();
		ЗагрузкаВРЦ.Колонки.Добавить("СтрокаДоступностьВРЦ", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
		Результат.Вставить("ЗагрузкаВРЦ", ЗагрузкаВРЦ);
	КонецЕсли;
	
	Результат.ЭтапПроизводства = Этап.ЭтапПроизводства;
	Результат.ПланироватьНеРанее = Этап.ПланироватьНеРанее;
	Результат.РазмещениеВыпуска = ?(ПараметрыПланирования.РазмещениеКНачалу,
		Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу,
		Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДатуОбеспеченияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	Если НЕ ПараметрыПланирования.ВсеМатериалыВНаличии
		И ПараметрыПланирования.ДатыОбеспечения <> Неопределено Тогда
		
		НайденнаяСтрока = ПараметрыПланирования.ДатыОбеспечения.Найти(Этап.ЭтапПроизводства, "ЭтапПроизводства");
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			ПараметрыРазмещения.ДатаОбеспечения = НайденнаяСтрока.ДатаОбеспечения;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьМоментРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	Если ПараметрыПланирования.РазмещениеКНачалу Тогда
		
		// Ограничение по предшествующим и дате запуска.
		МоментРазмещения = Макс(Этап.ДатаРазмещенияПредшествующих, ПараметрыРазмещения.ПланироватьНеРанее, ПараметрыПланирования.НачатьНеРанее);
		
		// Ограничение по текущей дате.
		ТекущаяДата = ТекущаяДатаСеанса();
		ЭтоЭтапУББВ = ЭтоЭтапУББВ(Этап);
		СместитьКПредшествующим = ЭтоЭтапУББВ // Этапы УББВ с нулевой длительностью не "отрываются" от предшествующих этапов
			И НЕ ЗначениеЗаполнено(Этап.ДлительностьЭтапа)
			И ЗначениеЗаполнено(Этап.ДатаРазмещенияПредшествующих)
			И КонецДня(Этап.ДатаРазмещенияПредшествующих) = КонецДня(ТекущаяДата);
		
		Если МоментРазмещения < ТекущаяДата
			И ПараметрыРазмещения.ДатаОбеспечения < ТекущаяДата
			И НЕ СместитьКПредшествующим Тогда
			
			// Размещение необходимо выполнить в текущем либо следующем интервале.
			
			Если ЭтоЭтапУББВ Тогда
				
				Границы = ГраницыДняПоРасписанию(ПараметрыПланирования, Этап.ГрафикРаботы, НачалоДня(ТекущаяДата));
				Если ЗначениеЗаполнено(Границы.Начало) Тогда
					
					НачалоДня = НачалоДня(ТекущаяДата) + ВремяВСекунды(Границы.Начало);
					Если ТекущаяДата <= НачалоДня Тогда
						ТекущаяДатаПриведенная = НачалоДня(ТекущаяДата);
					Иначе
						ТекущаяДатаПриведенная = КонецДня(ТекущаяДата)+1;
					КонецЕсли;
					
				Иначе
				
					ТекущаяДатаПриведенная = КонецДня(ТекущаяДата)+1;
						
				КонецЕсли;
				
			Иначе
				
				НестандартныеГраницы = ИнтервалПланированияИмеетНестандартныеГраницы(Этап);
				Если НестандартныеГраницы Тогда
					
					ОкончаниеИнтервала = ПривестиКГраницеИнтервалаПланирования(
						ТекущаяДата,
						Этап.ИнтервалПланирования,
						Этап.ОкончаниеИнтервалаПланирования);
					
					Если ТекущаяДата <= ОкончаниеИнтервала Тогда
						ТекущаяДатаПриведенная = ПривестиКНачалуПериода(ТекущаяДата, Этап.ИнтервалПланирования);
					Иначе
						ТекущаяДатаПриведенная = ПривестиКОкончаниюПериода(ТекущаяДата, Этап.ИнтервалПланирования);
					КонецЕсли;
					
				Иначе
					
					ТекущаяДатаПриведенная = ПривестиКНачалуПериода(ТекущаяДата, Этап.ИнтервалПланирования);
					
				КонецЕсли;
				
			КонецЕсли;
			
			МоментРазмещения = ТекущаяДатаПриведенная;
			
		Иначе
			
			// Ограничение по дате обеспечения материалами.
			Если ЗначениеЗаполнено(ПараметрыРазмещения.ДатаОбеспечения) 
				И ПараметрыРазмещения.ДатаОбеспечения > МоментРазмещения Тогда
					
				МоментРазмещения = ПараметрыРазмещения.ДатаОбеспечения;
				ОтметитьЭтапОграниченПоМатериалам(ПараметрыРазмещения);
					
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Ограничение по предшествующим и дате запуска.
		Если ЗначениеЗаполнено(Этап.ДатаРазмещенияПредшествующих) Тогда
			МоментРазмещения = Этап.ДатаРазмещенияПредшествующих;
		Иначе
			МоментРазмещения = ПараметрыПланирования.ДатаПотребности;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыРазмещения.МоментРазмещения = МоментРазмещения;
	
КонецПроцедуры

Процедура ДобавитьЭтапВГрафик(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	Этап.Размещен = Истина;
	
	ЗаписьГрафика = ПараметрыПланирования.ГрафикПроизводства.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьГрафика, ПараметрыРазмещения);
	
	Если НЕ ЭтоЭтапУББВ(Этап) ИЛИ ЭтапРазмещенВручную(ПараметрыПланирования, Этап) Тогда
		ДобавитьЗагрузкуВРЦВГрафик(ПараметрыПланирования, ПараметрыРазмещения);
	КонецЕсли;
	
	ЗаполнитьДатуРазмещенияУПоследующихЭтапов(
		ПараметрыПланирования,
		Этап,
		ПараметрыРазмещения.НачалоЭтапа,
		ПараметрыРазмещения.ОкончаниеЭтапа);
	
КонецПроцедуры

Процедура ДобавитьЗагрузкуВРЦВГрафик(ПараметрыПланирования, ПараметрыРазмещения)
	
	Для каждого Строка Из ПараметрыРазмещения.ЗагрузкаВРЦ Цикл
		
		НоваяСтрока = ПараметрыПланирования.ЗагрузкаВРЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если ЗначениеЗаполнено(Строка.СтрокаДоступностьВРЦ) Тогда
			
			Строка.СтрокаДоступностьВРЦ.Доступно = Строка.СтрокаДоступностьВРЦ.Доступно - Строка.Занято;
			Строка.СтрокаДоступностьВРЦ.Занято = Строка.СтрокаДоступностьВРЦ.Занято + Строка.Занято;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДатуРазмещенияУПоследующихЭтапов(ПараметрыПланирования, ЭтапРодитель, НачалоЭтапаРодителя, ОкончаниеЭтапаРодителя)
	
	ПоследующиеЭтапы = ДанныеСвязанныхЭтапов(ПараметрыПланирования, ЭтапРодитель.ЭтапПроизводства, Истина);
	Для каждого Этап Из ПоследующиеЭтапы Цикл
		
		Если ПараметрыПланирования.РазмещениеКНачалу Тогда
			Этап.ДатаРазмещенияПредшествующих = Макс(Этап.ДатаРазмещенияПредшествующих, ОкончаниеЭтапаРодителя);
		Иначе
			Этап.ДатаРазмещенияПредшествующих = 
				?(ЗначениеЗаполнено(Этап.ДатаРазмещенияПредшествующих),
					Мин(Этап.ДатаРазмещенияПредшествующих, НачалоЭтапаРодителя),
					НачалоЭтапаРодителя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеСвязанныхЭтапов(ПараметрыПланирования, ЭтапПроизводства, ПоследующиеЭтапы = Истина)
	
	Результат = Новый Массив;
	
	СвязанныеЭтапы = СвязанныеЭтапы(
		ПараметрыПланирования.ЗависимостиЭтапов,
		ЭтапПроизводства,
		ПараметрыПланирования.РазмещениеКНачалу,
		ПоследующиеЭтапы);
	
	Для каждого СвязанныйЭтап Из СвязанныеЭтапы Цикл
		
		Этап = ПараметрыПланирования.Этапы.Найти(СвязанныйЭтап, "ЭтапПроизводства");
		Если НЕ Этап = Неопределено Тогда
			Результат.Добавить(Этап);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СвязанныеЭтапы(ЗависимостиЭтапов, ЭтапПроизводства, РазмещениеКНачалу, ПоследующиеЭтапы = Истина)
	
	Результат = Новый Массив;
	
	Если (РазмещениеКНачалу И ПоследующиеЭтапы)
		ИЛИ (НЕ РазмещениеКНачалу И НЕ ПоследующиеЭтапы) Тогда
		
		СтруктураПоиска = Новый Структура("ЭтапПроизводства", ЭтапПроизводства);
		НайденныеСтроки = ЗависимостиЭтапов.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из НайденныеСтроки Цикл
			Результат.Добавить(Строка.СледующийЭтап);
		КонецЦикла;
		
	Иначе
		
		СтруктураПоиска = Новый Структура("СледующийЭтап", ЭтапПроизводства);
		НайденныеСтроки = ЗависимостиЭтапов.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из НайденныеСтроки Цикл
			Результат.Добавить(Строка.ЭтапПроизводства);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьРезультатыРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения, ЭтапРазмещен)
	
	Если ЭтапРазмещен Тогда
		
		Если НЕ ПараметрыПланирования.РазмещениеКНачалу
			И НарушенаГраницаРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения) Тогда
			
			ПараметрыПланирования.ИзменитьНаправлениеПланирования = Истина;
			
		Иначе
			
			ДобавитьЭтапВГрафик(ПараметрыПланирования, Этап, ПараметрыРазмещения);
			
			Если НЕ ЭтоЭтапУББВ(Этап) Тогда
				СместитьПредшествующиеЭтапыУББВ(ПараметрыПланирования, Этап, ПараметрыРазмещения.НачалоЭтапа);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПараметрыПланирования.РазмещениеКНачалу Тогда
			
			ПараметрыПланирования.ИзменитьНаправлениеПланирования = Истина;
			
		Иначе
			
			ИсключитьПоследующиеЭтапыИзРасчетаРекурсивно(ПараметрыПланирования, Этап);
			ЗафиксироватьОшибкуРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НарушенаГраницаРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	НарушенаДатаОбеспечения = ЗначениеЗаполнено(ПараметрыРазмещения.ДатаОбеспечения)
		И ПараметрыРазмещения.НачалоЭтапа < ПараметрыРазмещения.ДатаОбеспечения;
	
	НарушеноПредшествование = ЭтапРазмещенВручную(ПараметрыПланирования, Этап)
		И ЗначениеЗаполнено(Этап.ДатаРазмещенияПредшествующих)
		И Этап.ДатаРазмещенияПредшествующих < ПараметрыРазмещения.ОкончаниеЭтапа;
	
	Возврат НарушенаДатаОбеспечения
		ИЛИ НарушеноПредшествование
		ИЛИ ПараметрыРазмещения.НачалоЭтапа < ПараметрыРазмещения.ПланироватьНеРанее
		ИЛИ ПараметрыРазмещения.НачалоЭтапа < ТекущаяДатаСеанса();
	
КонецФункции

Процедура ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения)
	
	ПараметрыРазмещения.ОграниченПоОборудованию = Истина;
	
КонецПроцедуры

Процедура ОтметитьЭтапОграниченПоМатериалам(ПараметрыРазмещения)
	
	ПараметрыРазмещения.ОграниченПоМатериалам = Истина;
	
КонецПроцедуры

Процедура ПослеЗавершенияПланирования(ПараметрыПланирования)
	
	РазмещенныеЭтапы = МассивРазмещенныхЭтапов(ПараметрыПланирования);
	
	ЗаполнитьРезультатыПланирования(ПараметрыПланирования, РазмещенныеЭтапы);
	
	Если ПараметрыПланирования.РезультатыПланирования.ГрафикЗапланирован Тогда
		
		ЗаполнитьВзаимозависимыеРеквизитыЭтаповГрафика(ПараметрыПланирования, РазмещенныеЭтапы);
		ПривестиДатыГрафикаКПользовательскомуПредставлению(ПараметрыПланирования);
		ПараметрыПланирования.ЗагрузкаВРЦ.Свернуть("ЭтапПроизводства,ВидРабочегоЦентра,ДатаИнтервала","Занято");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатыПланирования(ПараметрыПланирования, РазмещенныеЭтапы)
	
	Результаты = ПараметрыПланирования.РезультатыПланирования;
	
	ГрафикЗапланирован = НЕ Результаты.ЕстьОшибки
		И ПараметрыПланирования.ГрафикПроизводства.Количество() > 0;
	
	Результаты.ГрафикЗапланирован = ГрафикЗапланирован;
	Результаты.СтатусГрафика = ПараметрыПланирования.СтатусГрафика;
	Результаты.РазмещенныеЭтапы = РазмещенныеЭтапы;
	
КонецПроцедуры

Процедура ЗаполнитьВзаимозависимыеРеквизитыЭтаповГрафика(ПараметрыПланирования, РазмещенныеЭтапы)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЭтапПроизводства2_2.СоздатьВТСвязиЭтаповПоРаспоряжению(
		МенеджерВременныхТаблиц,
		ПараметрыПланирования.Распоряжение,
		Истина);
	
	РассчитатьКритическийПуть(ПараметрыПланирования, МенеджерВременныхТаблиц, РазмещенныеЭтапы);
	РассчитатьНачалоСледующихЭтапов(ПараметрыПланирования, МенеджерВременныхТаблиц, РазмещенныеЭтапы);
	
КонецПроцедуры

Процедура РассчитатьКритическийПуть(ПараметрыПланирования, МенеджерВременныхТаблиц, РазмещенныеЭтапы)
	
	ДополнитьГрафикЗаписямиДляРасчетаКритическогоПути(ПараметрыПланирования);
	
	КрайниеЭтапы = КрайниеЭтапыКритическогоПути(ПараметрыПланирования, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства,
	|	ВТСвязиЭтапов.СледующийЭтап КАК СледующийЭтап
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение = &Распоряжение
	|	И ЭтапПроизводства2_2.РучноеРазмещениеВГрафике
	|	И (НЕ &ОтменитьРучныеИзмененияГрафика
	|			ИЛИ НЕ ЭтапПроизводства2_2.Ссылка В (&РазмещенныеЭтапы))
	|	И ЭтапПроизводства2_2.Проведен");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Распоряжение", ПараметрыПланирования.Распоряжение);
	Запрос.УстановитьПараметр("ОтменитьРучныеИзмененияГрафика",
		ПараметрыПланирования.ОтменитьРучныеИзмененияГрафика);
	Запрос.УстановитьПараметр("РазмещенныеЭтапы", РазмещенныеЭтапы);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ЗависимостиЭтапов = МассивРезультатов[0].Выгрузить();
	ЭтапыРазмещенныеВручную = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ЭтапПроизводства Из КрайниеЭтапы Цикл
		
		ОтметитьЭтапНаКритическомПутиРекурсивно(
			ПараметрыПланирования, ЭтапПроизводства, ЗависимостиЭтапов, ЭтапыРазмещенныеВручную);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьГрафикЗаписямиДляРасчетаКритическогоПути(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение КАК Распоряжение,
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ГрафикЭтаповПроизводства2_2.СтатусГрафика КАК СтатусГрафика,
	|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа КАК НачалоЭтапа,
	|	ДОБАВИТЬКДАТЕ(ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа, СЕКУНДА, 1) КАК ОкончаниеЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеПредварительногоБуфера КАК ОкончаниеПредварительногоБуфера,
	|	ВЫБОР
	|		КОГДА ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера = ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера, СЕКУНДА, 1)
	|		ИНАЧЕ ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера
	|	КОНЕЦ КАК НачалоЗавершающегоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоСледующегоЭтапа КАК НачалоСледующегоЭтапа,
	|	ЛОЖЬ КАК НаКритическомПути,
	|	ЛОЖЬ КАК ОграничиваетСрокВыпуска,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоМатериалам КАК ОграниченПоМатериалам,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоОборудованию КАК ОграниченПоОборудованию,
	|	ГрафикЭтаповПроизводства2_2.РазмещениеВыпуска КАК РазмещениеВыпуска
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
	|	И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В (&ЭтапыПроизводства)
	|	И ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Статус В(&СтатусыЭтапа)");
	
	Запрос.УстановитьПараметр("Распоряжение", ПараметрыПланирования.Распоряжение);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("ЭтапыПроизводства", 
		ПараметрыПланирования.ГрафикПроизводства.ВыгрузитьКолонку("ЭтапПроизводства"));
	Запрос.УстановитьПараметр("СтатусыЭтапа",
		Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПараметрыПланирования.ГрафикПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КрайниеЭтапыКритическогоПути(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	Если ПараметрыПланирования.РазмещениеКНачалу Тогда
		
		// Крайние справа.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Зависимости1.СледующийЭтап КАК ЭтапПроизводства
		|ИЗ
		|	ВТСвязиЭтапов КАК Зависимости1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвязиЭтапов КАК Зависимости2
		|		ПО Зависимости1.СледующийЭтап = Зависимости2.Этап
		|ГДЕ
		|	Зависимости2.Этап ЕСТЬ NULL";
		
	Иначе
		
		// Крайние слева.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Зависимости1.Этап КАК ЭтапПроизводства
		|ИЗ
		|	ВТСвязиЭтапов КАК Зависимости1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвязиЭтапов КАК Зависимости2
		|		ПО Зависимости1.Этап = Зависимости2.СледующийЭтап
		|ГДЕ
		|	Зависимости2.Этап ЕСТЬ NULL";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭтапПроизводства");
	
КонецФункции

Процедура ОтметитьЭтапНаКритическомПутиРекурсивно(ПараметрыПланирования, ЭтапПроизводства, ЗависимостиЭтапов, ЭтапыРазмещенныеВручную)
	
	ЗаписьГрафика = ПараметрыПланирования.ГрафикПроизводства.Найти(ЭтапПроизводства, "ЭтапПроизводства");
	
	Если НЕ ЗаписьГрафика = Неопределено Тогда
		
		Если НЕ ЗаписьГрафика.НаКритическомПути Тогда
			
			ЗаписьГрафика.НаКритическомПути = Истина;
			
			РазмещенВручную = НЕ ЭтапыРазмещенныеВручную.Найти(ЭтапПроизводства) = Неопределено;
			
			Если ЗаписьГрафика.ОграниченПоОборудованию
				ИЛИ ЗаписьГрафика.ОграниченПоМатериалам
				ИЛИ РазмещенВручную Тогда
				
				ЗаписьГрафика.ОграничиваетСрокВыпуска = Истина;
				
			Иначе
				
				ЭтапыПути = ПоследующиеЭтапыКритическогоПути(ПараметрыПланирования, ЗависимостиЭтапов, ЭтапПроизводства);
				
				Если ЗначениеЗаполнено(ЭтапыПути) Тогда
					
					Для каждого Этап Из ЭтапыПути Цикл
						ОтметитьЭтапНаКритическомПутиРекурсивно(
							ПараметрыПланирования, Этап, ЗависимостиЭтапов, ЭтапыРазмещенныеВручную);
					КонецЦикла;
					
				Иначе
					
					ЗаписьГрафика.ОграничиваетСрокВыпуска = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПоследующиеЭтапыКритическогоПути(ПараметрыПланирования, ЗависимостиЭтапов, ЭтапПроизводства)
	
	Результат = Новый Массив;
	
	Если ПараметрыПланирования.РазмещениеКНачалу Тогда
		ПолеГраница = "ОкончаниеЭтапа";
	Иначе
		ПолеГраница = "НачалоЭтапа";
	КонецЕсли;
	
	ПредшествующиеЭтапы = СвязанныеЭтапы(
		ЗависимостиЭтапов,
		ЭтапПроизводства,
		ПараметрыПланирования.РазмещениеКНачалу,
		Ложь);
	
	ДатаГраница = '00010101';
	
	Для каждого Этап Из ПредшествующиеЭтапы Цикл
		
		ЗаписьГрафика = ПараметрыПланирования.ГрафикПроизводства.Найти(Этап, "ЭтапПроизводства");
		Если НЕ ЗаписьГрафика = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ДатаГраница) Тогда
				
				Результат.Добавить(Этап);
				ДатаГраница = ЗаписьГрафика[ПолеГраница];
				
			Иначе
				
				Если ДатаГраница = ЗаписьГрафика[ПолеГраница] Тогда
					
					Результат.Добавить(Этап);
					
				ИначеЕсли (ПараметрыПланирования.РазмещениеКНачалу И ЗаписьГрафика[ПолеГраница] > ДатаГраница)
					ИЛИ (НЕ ПараметрыПланирования.РазмещениеКНачалу И ЗаписьГрафика[ПолеГраница] < ДатаГраница) Тогда
					
					Результат.Очистить();
					Результат.Добавить(Этап);
					ДатаГраница = ЗаписьГрафика[ПолеГраница];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьНачалоСледующихЭтапов(ПараметрыПланирования, МенеджерВременныхТаблиц, РазмещенныеЭтапы)
	
	ДополнитьГрафикЗаписямиСмежныхЭтапов(
		ПараметрыПланирования, МенеджерВременныхТаблиц, РазмещенныеЭтапы);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства,
	|	ВТСвязиЭтапов.СледующийЭтап КАК СледующийЭтап
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗависимостиЭтапов = Запрос.Выполнить().Выгрузить();
	
	Для каждого ЭтапПроизводства Из РазмещенныеЭтапы Цикл
		ЗаполнитьНачалоСледующегоЭтапа(ПараметрыПланирования, ЗависимостиЭтапов, ЭтапПроизводства);
	КонецЦикла;
	
	Для каждого ЭтапПроизводства Из ПараметрыПланирования.ПредшествующиеЭтапыПроизводства Цикл
		ЗаполнитьНачалоСледующегоЭтапа(ПараметрыПланирования, ЗависимостиЭтапов, ЭтапПроизводства);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьГрафикЗаписямиСмежныхЭтапов(ПараметрыПланирования, МенеджерВременныхТаблиц, РазмещенныеЭтапы)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСвязиЭтапов.СледующийЭтап КАК ЭтапПроизводства
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|ГДЕ
	|	ВТСвязиЭтапов.Этап В(&ПредшествующиеЭтапы)
	|	И НЕ ВТСвязиЭтапов.СледующийЭтап В (&РазмещенныеЭтапы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСвязиЭтапов.СледующийЭтап
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|ГДЕ
	|	ВТСвязиЭтапов.Этап В(&РазмещенныеЭтапы)
	|	И НЕ ВТСвязиЭтапов.СледующийЭтап В (&РазмещенныеЭтапы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапПроизводства.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|ГДЕ
	|	ЭтапПроизводства.Ссылка В(&ПредшествующиеЭтапы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение,
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
	|	ГрафикЭтаповПроизводства2_2.СтатусГрафика,
	|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеПредварительногоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоСледующегоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.НаКритическомПути,
	|	ГрафикЭтаповПроизводства2_2.ОграничиваетСрокВыпуска,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоМатериалам,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоОборудованию
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
	|	И ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.ЭтапПроизводства
	|			ИЗ
	|				ВТЭтапы)
	|	И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В (&ЭтапыГрафика)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПредшествующиеЭтапы", ПараметрыПланирования.ПредшествующиеЭтапыПроизводства);
	Запрос.УстановитьПараметр("РазмещенныеЭтапы", РазмещенныеЭтапы);
	Запрос.УстановитьПараметр("Распоряжение", ПараметрыПланирования.Распоряжение);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("ЭтапыГрафика", 
		ПараметрыПланирования.ГрафикПроизводства.ВыгрузитьКолонку("ЭтапПроизводства"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПараметрыПланирования.ГрафикПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНачалоСледующегоЭтапа(ПараметрыПланирования, ЗависимостиЭтапов, ЭтапПроизводства)
	
	ЗаписьГрафика = ПараметрыПланирования.ГрафикПроизводства.Найти(ЭтапПроизводства, "ЭтапПроизводства");
	Если ЗаписьГрафика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьГрафика.НачалоСледующегоЭтапа = '00010101';
	
	СледующиеЭтапы = СвязанныеЭтапы(ЗависимостиЭтапов, ЭтапПроизводства, Истина, Истина);
	Для каждого СледующийЭтап Из СледующиеЭтапы Цикл
		
		ЗаписьСледующийЭтап = ПараметрыПланирования.ГрафикПроизводства.Найти(СледующийЭтап, "ЭтапПроизводства");
		
		Если НЕ ЗаписьСледующийЭтап = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ЗаписьГрафика.НачалоСледующегоЭтапа) Тогда
				
				ЗаписьГрафика.НачалоСледующегоЭтапа = МИН(
					ЗаписьГрафика.НачалоСледующегоЭтапа,
					ЗаписьСледующийЭтап.НачалоЭтапа);
					
			Иначе
				
				ЗаписьГрафика.НачалоСледующегоЭтапа = ЗаписьСледующийЭтап.НачалоЭтапа;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазместитьЭтапСРучнымРазмещением(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	ДанныеГрафика = ПараметрыПланирования.ГрафикЭтаповРазмещенныхВручную.Найти(
		Этап.ЭтапПроизводства, "ЭтапПроизводства");
	
	Если НЕ ДанныеГрафика = Неопределено Тогда
		
		ЭтапРазмещен = Истина;
		ЗаполнитьЗначенияСвойств(ПараметрыРазмещения, ДанныеГрафика);
		
		СтруктураПоиска = Новый Структура("ЭтапПроизводства", Этап.ЭтапПроизводства);
		НайденныеСтроки = ПараметрыПланирования.ЗагрузкаЭтаповРазмещенныхВручную.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ПараметрыРазмещения.ЗагрузкаВРЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		
	Иначе
		
		ЭтапРазмещен = Ложь;
		
	КонецЕсли;
	
	ЗафиксироватьРезультатыРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения, ЭтапРазмещен);
	
КонецПроцедуры

Процедура ВыполнитьПроверкиПередПланированием(ПараметрыПланирования, Отказ)
	
	ЭтапОшибка = Документы.ЭтапПроизводства2_2.ПустаяСсылка();
	
	Если Документы.ЭтапПроизводства2_2.ЕстьЦиклыВЦепочкеЭтапов(ПараметрыПланирования.Распоряжение, ЭтапОшибка) Тогда
		
		ЗафиксироватьОшибкуЕстьЦиклыВЦепочкеЭтапов(ПараметрыПланирования, ЭтапОшибка);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоОбработанныхДанных(ПараметрыПланирования)
	
	Если ТипЗнч(ПараметрыПланирования.Этапы) = Тип("ТаблицаЗначений") Тогда
		
		Результат = ПараметрыПланирования.Этапы.Количество();
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПланированиеУББВ

Процедура РазместитьЭтапУББВ(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	Если ЗначениеЗаполнено(Этап.ДлительностьЭтапа) Тогда
		
		РезультатыРазмещения = РазместитьПоРасписаниюУББВ(
			ПараметрыПланирования,
			Этап.ГрафикРаботы,
			ПараметрыПланирования.РазмещениеКНачалу,
			ПараметрыРазмещения.МоментРазмещения,
			Этап.ДлительностьЭтапа,
			Этап.ЕдиницаИзмеренияДлительностиЭтапа);
		
		Если РезультатыРазмещения.РазмещениеВыполнено Тогда
				
			ЭтапРазмещен = Истина;
			ПараметрыРазмещения.НачалоЭтапа = РезультатыРазмещения.Начало;
			ПараметрыРазмещения.ОкончаниеЭтапа = РезультатыРазмещения.Окончание;
			
		Иначе
			ЭтапРазмещен = Ложь;
		КонецЕсли;
		
	Иначе
		
		ЭтапРазмещен = Истина;
		ПараметрыРазмещения.НачалоЭтапа = ПараметрыРазмещения.МоментРазмещения;
		ПараметрыРазмещения.ОкончаниеЭтапа = ПараметрыРазмещения.МоментРазмещения;
		
	КонецЕсли;
	
	Если НЕ ЭтапРазмещен Тогда
		ПараметрыРазмещения.КодОшибкиРазмещения = КодОшибкиОтсутствуетГрафикЭтапУББВ(Этап);
	КонецЕсли;
	
	ЗафиксироватьРезультатыРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения, ЭтапРазмещен);
	
КонецПроцедуры

Функция РазместитьПоРасписаниюУББВ(ПараметрыПланирования, ГрафикРаботы, РазмещениеКНачалу, МоментРазмещения, Время, ВремяЕдИзм)
	
	РазмещатьВДнях = ДлительностьВДнях(ВремяЕдИзм);
	ОсталосьРазместить = ДлительностьЗагрузкиУББВ(Время, ВремяЕдИзм, РазмещатьВДнях);
	
	ИнтервалГрафика = НачальныйИнтервалРазмещенияУББВ(
		ПараметрыПланирования, ГрафикРаботы, РазмещениеКНачалу, МоментРазмещения, РазмещатьВДнях);
	
	Если НЕ ИнтервалГрафика = Неопределено Тогда
		
		НачалоРазмещения = НачалоРазмещенияУББВ(РазмещениеКНачалу, МоментРазмещения, ИнтервалГрафика, РазмещатьВДнях);
		ОкончаниеРазмещения = НачалоРазмещения;
		
		Пока НЕ ИнтервалГрафика = Неопределено Цикл
			
			СместитьГраницуРазмещенияУББВ(
				РазмещениеКНачалу, ИнтервалГрафика, ОкончаниеРазмещения, ОсталосьРазместить, РазмещатьВДнях);
			
			Если ОсталосьРазместить > 0 Тогда
				ИнтервалГрафика = ОчереднойИнтервалРазмещенияУББВ(
					ПараметрыПланирования, РазмещениеКНачалу, ГрафикРаботы, ИнтервалГрафика, РазмещатьВДнях);
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура("РазмещениеВыполнено, Начало, Окончание");
	Если МАКС(0, ОсталосьРазместить) = 0 Тогда
		
		Результат.РазмещениеВыполнено = Истина;
		Если РазмещениеКНачалу Тогда
			Результат.Начало = НачалоРазмещения;
			Результат.Окончание = ОкончаниеРазмещения;
		Иначе
			Результат.Начало = ОкончаниеРазмещения;
			Результат.Окончание = НачалоРазмещения;
		КонецЕсли;
		
		Если РазмещатьВДнях Тогда
			ИсправитьГраницыУББВСКалендаряНаРасписание(
				ПараметрыПланирования, ГрафикРаботы, Результат.Начало, Результат.Окончание);
		КонецЕсли;
		
	Иначе
		
		Результат.РазмещениеВыполнено = Ложь;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция ДлительностьЗагрузкиУББВ(Время, ВремяЕдИзм, РазмещатьВДнях)
	
	Если РазмещатьВДнях Тогда
		ОсталосьРазместить = Время;
	Иначе
		ОсталосьРазместить = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(Время, ВремяЕдИзм);
	КонецЕсли;
	
	Возврат ОсталосьРазместить;
	
КонецФункции

Функция ДлительностьВДнях(ЕдИзм)
	
	Возврат ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.День;
	
КонецФункции

Функция НачальныйИнтервалРазмещенияУББВ(ПараметрыПланирования, ГрафикРаботы, РазмещениеКНачалу, МоментРазмещения, РазмещатьВДнях)
	
	Если РазмещатьВДнях Тогда
		Результат = НачальныйИнтервалРазмещенияУББВПоКалендарю(ПараметрыПланирования, ГрафикРаботы, РазмещениеКНачалу, МоментРазмещения);
	Иначе
		Результат = НачальныйИнтервалРазмещенияУББВПоРасписанию(ПараметрыПланирования, ГрафикРаботы, РазмещениеКНачалу, МоментРазмещения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НачальныйИнтервалРазмещенияУББВПоКалендарю(ПараметрыПланирования, ГрафикРаботы, РазмещениеКНачалу, МоментРазмещения)
	
	Если МоментРазмещения = НачалоДня(МоментРазмещения) Тогда
		Если РазмещениеКНачалу Тогда
			НачальнаяДатаГрафика = МоментРазмещения;
		Иначе
			НачальнаяДатаГрафика = НачалоДня(МоментРазмещения-1);
		КонецЕсли;
	Иначе
		Если РазмещениеКНачалу Тогда
			НачальнаяДатаГрафика = КонецДня(МоментРазмещения) + 1;
		Иначе
			НачальнаяДатаГрафика = НачалоДня(МоментРазмещения - 86400);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		Результат = ИнтервалРазмещенияУББВКруглосуточнаяРабота(ГрафикРаботы, НачальнаяДатаГрафика);
		
	Иначе
		
		Результат = Неопределено;
		РасписаниеУББВ = ПараметрыПланирования.РасписаниеУББВ;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ГрафикРаботы", ГрафикРаботы);
		
		Для Сч = 1 По 3 Цикл
			
			СтруктураПоиска.Вставить("ДатаГрафика", НачальнаяДатаГрафика);
			НайденныеСтроки = РасписаниеУББВ.НайтиСтроки(СтруктураПоиска);
			
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				Результат = НайденныеСтроки[0];
				Прервать;
			Иначе
				Если РазмещениеКНачалу Тогда
					НачальнаяДатаГрафика = НачальнаяДатаГрафика + 86400;
				Иначе
					НачальнаяДатаГрафика = НачальнаяДатаГрафика - 86400;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат = Неопределено Тогда
			
			СтруктураПоиска = Новый Структура("ГрафикРаботы", ГрафикРаботы);
			НайденныеСтроки = НайтиСтрокиССохранениемПорядка(РасписаниеУББВ, СтруктураПоиска, Истина);
			
			МаксИндекс = НайденныеСтроки.ВГраница();
			Если РазмещениеКНачалу Тогда
				
				Для сч = 0 По МаксИндекс Цикл
					Строка = НайденныеСтроки[сч];
					Если Строка.ДатаГрафика >= НачальнаяДатаГрафика Тогда
						Результат = Строка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Для сч = 0 По МаксИндекс Цикл
					Строка = НайденныеСтроки[МаксИндекс-сч];
					Если Строка.ДатаГрафика <= НачальнаяДатаГрафика Тогда
						Результат = Строка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НачальныйИнтервалРазмещенияУББВПоРасписанию(ПараметрыПланирования, ГрафикРаботы, РазмещениеКНачалу, МоментРазмещения)
	
	ДатаГрафика = НачалоДня(МоментРазмещения);
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		Результат = ИнтервалРазмещенияУББВКруглосуточнаяРабота(ГрафикРаботы, ДатаГрафика);
		
	Иначе
		
		РасписаниеУББВ = ПараметрыПланирования.РасписаниеУББВ;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ГрафикРаботы", ГрафикРаботы);
		СтруктураПоиска.Вставить("ДатаГрафика", ДатаГрафика);
		
		НайденныеСтроки = НайтиСтрокиССохранениемПорядка(РасписаниеУББВ, СтруктураПоиска, Истина);
		
		Результат = ИнтервалРазмещенияУББВПоРасписанию(РазмещениеКНачалу, МоментРазмещения, НайденныеСтроки);
		Если Результат = Неопределено Тогда
			
			СтруктураПоиска = Новый Структура("ГрафикРаботы", ГрафикРаботы);
			НайденныеСтроки = НайтиСтрокиССохранениемПорядка(РасписаниеУББВ, СтруктураПоиска, Истина);
			
			Результат = ИнтервалРазмещенияУББВПоРасписанию(РазмещениеКНачалу, МоментРазмещения, НайденныеСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ИнтервалРазмещенияУББВПоРасписанию(РазмещениеКНачалу, МоментРазмещения, СтрокиРасписания)
	
	Результат = Неопределено;
	
	МаксИндекс = СтрокиРасписания.ВГраница();
	Если РазмещениеКНачалу Тогда
		
		Для сч = 0 По МаксИндекс Цикл
			Строка = СтрокиРасписания[сч];
			Если МоментРазмещения < Строка.Окончание Тогда
				
				Результат = Строка;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для сч = 0 По МаксИндекс Цикл
			Строка = СтрокиРасписания[МаксИндекс-сч]; // см. РасписаниеУББВКонструкторСтроки
			Если МоментРазмещения > Строка.Начало Тогда
				
				Результат = Строка;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НачалоРазмещенияУББВ(РазмещениеКНачалу, МоментРазмещения, ИнтервалГрафика, РазмещатьВДнях)
	
	Если РазмещатьВДнях Тогда
		
		Если РазмещениеКНачалу Тогда
			Результат = ИнтервалГрафика.ДатаГрафика;
		Иначе
			Результат = КонецДня(ИнтервалГрафика.ДатаГрафика) + 1;
		КонецЕсли;
		
	Иначе
		
		Если МоментРазмещения >= ИнтервалГрафика.Начало
			И МоментРазмещения <= ИнтервалГрафика.Окончание Тогда
			Результат = МоментРазмещения;
		Иначе
			Если РазмещениеКНачалу Тогда
				Результат = ИнтервалГрафика.Начало;
			Иначе
				Результат = ИнтервалГрафика.Окончание;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СместитьГраницуРазмещенияУББВ(РазмещениеКНачалу, ИнтервалГрафика, ГраницаРазмещения, ОсталосьРазместить, РазмещатьВДнях)
	
	Если РазмещатьВДнях Тогда
		
		Если РазмещениеКНачалу Тогда
			ГраницаРазмещения = КонецДня(ИнтервалГрафика.ДатаГрафика) + 1;
		Иначе
			ГраницаРазмещения = ИнтервалГрафика.ДатаГрафика;
		КонецЕсли;
		
		ОсталосьРазместить = ОсталосьРазместить - 1;
		
	Иначе
		
		Если ГраницаРазмещения >= ИнтервалГрафика.Начало
			И ГраницаРазмещения <= ИнтервалГрафика.Окончание Тогда
			
			Если РазмещениеКНачалу Тогда
				
				ДоступноеВремя = ИнтервалГрафика.Окончание - ГраницаРазмещения;
				ВремяСмещения = МИН(ОсталосьРазместить, ДоступноеВремя);
				ГраницаРазмещения = ГраницаРазмещения + ВремяСмещения;
				
			Иначе
				
				ДоступноеВремя = ГраницаРазмещения - ИнтервалГрафика.Начало;
				ВремяСмещения = МИН(ОсталосьРазместить, ДоступноеВремя);
				ГраницаРазмещения = ГраницаРазмещения - ВремяСмещения;
				
			КонецЕсли;
			
			ОсталосьРазместить = ОсталосьРазместить - ВремяСмещения;
			
		Иначе
			
			ВремяСмещения = МИН(ОсталосьРазместить, ИнтервалГрафика.Длительность);
			
			Если РазмещениеКНачалу Тогда
				ГраницаРазмещения = ИнтервалГрафика.Начало + ВремяСмещения;
			Иначе
				ГраницаРазмещения = ИнтервалГрафика.Окончание - ВремяСмещения;
			КонецЕсли;
			
			ОсталосьРазместить = ОсталосьРазместить - ВремяСмещения;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОчереднойИнтервалРазмещенияУББВ(ПараметрыПланирования, РазмещениеКНачалу, ГрафикРаботы, ИнтервалГрафика, РазмещатьВДнях)
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		Если РазмещениеКНачалу Тогда
			ДатаГрафика = КонецДня(ИнтервалГрафика.ДатаГрафика)+1;
		Иначе
			ДатаГрафика = НачалоДня(ИнтервалГрафика.ДатаГрафика)-86400;
		КонецЕсли;
		
		Результат = ИнтервалРазмещенияУББВКруглосуточнаяРабота(ГрафикРаботы, ДатаГрафика);
		
	Иначе
		
		Результат = Неопределено;
		РасписаниеУББВ = ПараметрыПланирования.РасписаниеУББВ;
		Индекс = РасписаниеУББВ.Индекс(ИнтервалГрафика);
		
		Если РазмещениеКНачалу Тогда
			
			Индекс = Индекс + 1;
			Пока Индекс < РасписаниеУББВ.Количество() Цикл
				
				СледующийИнтервал = РасписаниеУББВ[Индекс];
				Если СледующийИнтервал.ГрафикРаботы = ГрафикРаботы Тогда
					
					Если РазмещатьВДнях Тогда
						Если НЕ ИнтервалГрафика.ДатаГрафика = СледующийИнтервал.ДатаГрафика Тогда
							Результат = СледующийИнтервал;
						КонецЕсли;
					Иначе
						Результат = СледующийИнтервал;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если НЕ Результат = Неопределено Тогда
					Прервать;
				Иначе
					Индекс = Индекс + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Индекс = Индекс - 1;
			Пока Индекс >= 0 Цикл
				
				СледующийИнтервал = РасписаниеУББВ[Индекс];
				Если СледующийИнтервал.ГрафикРаботы = ГрафикРаботы Тогда
					
					Если РазмещатьВДнях Тогда
						Если НЕ ИнтервалГрафика.ДатаГрафика = СледующийИнтервал.ДатаГрафика Тогда
							Результат = СледующийИнтервал;
						КонецЕсли;
					Иначе
						Результат = СледующийИнтервал;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если НЕ Результат = Неопределено Тогда
					Прервать;
				Иначе
					Индекс = Индекс - 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СместитьПредшествующиеЭтапыУББВ(ПараметрыПланирования, Этап, Знач МоментРазмещения)
	
	Если НЕ ПараметрыПланирования.РазмещениеКНачалу 
		ИЛИ НЕ Этап.СмещатьПредшествующиеЭтапыУББВ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПредшествующиеЭтапы = ДанныеСвязанныхЭтапов(ПараметрыПланирования, Этап.ЭтапПроизводства, Ложь);
	Для каждого ПредшествующийЭтап Из ПредшествующиеЭтапы Цикл
		
		Если ЭтоЭтапУББВ(ПредшествующийЭтап)
			И Этап.ПартияПроизводства = ПредшествующийЭтап.ПартияПроизводства Тогда
			
			Если ЗначениеЗаполнено(ПредшествующийЭтап.ДлительностьЭтапа) Тогда
				
				РезультатыРазмещения = РазместитьПоРасписаниюУББВ(
					ПараметрыПланирования,
					ПредшествующийЭтап.ГрафикРаботы,
					Ложь,
					МоментРазмещения,
					ПредшествующийЭтап.ДлительностьЭтапа,
					ПредшествующийЭтап.ЕдиницаИзмеренияДлительностиЭтапа);
					
			Иначе
				
				РезультатыРазмещения = Новый Структура;
				РезультатыРазмещения.Вставить("РазмещениеВыполнено", Истина);
				РезультатыРазмещения.Вставить("Начало", МоментРазмещения);
				РезультатыРазмещения.Вставить("Окончание", МоментРазмещения);
				
			КонецЕсли;
			
			Если РезультатыРазмещения.РазмещениеВыполнено Тогда
				
				ЗаписьГрафика = ПараметрыПланирования.ГрафикПроизводства.Найти(ПредшествующийЭтап.ЭтапПроизводства, "ЭтапПроизводства");
				Если НЕ ЗаписьГрафика = Неопределено Тогда
					
					ЗаписьГрафика.НачалоЭтапа = РезультатыРазмещения.Начало;
					ЗаписьГрафика.ОкончаниеЭтапа = РезультатыРазмещения.Окончание;
					ЗаписьГрафика.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИнтервалРазмещенияУББВКруглосуточнаяРабота(ГрафикРаботы, ДатаГрафика)
	
	Результат = Новый Структура;
	Результат.Вставить("ГрафикРаботы", ГрафикРаботы);
	Результат.Вставить("ДатаГрафика", ДатаГрафика);
	Результат.Вставить("Начало", НачалоДня(ДатаГрафика));
	Результат.Вставить("Окончание", КонецДня(ДатаГрафика)+1);
	Результат.Вставить("Длительность", 86400);
	
	Возврат Результат;
	
КонецФункции

Процедура ИсправитьГраницыУББВСКалендаряНаРасписание(ПараметрыПланирования, ГрафикРаботы, Начало, Окончание)
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		Возврат;
	КонецЕсли;
	
	Границы = ГраницыДняПоРасписанию(ПараметрыПланирования, ГрафикРаботы, НачалоДня(Начало));
	
	Если ЗначениеЗаполнено(Границы.Начало) Тогда
		Начало = НачалоДня(Начало) + ВремяВСекунды(Границы.Начало);
	КонецЕсли;
	
	ДатаГрафикаОкончание = НачалоДня(Окончание-1);
	Если НЕ НачалоДня(Начало) = ДатаГрафикаОкончание Тогда
		Границы = ГраницыДняПоРасписанию(ПараметрыПланирования, ГрафикРаботы, ДатаГрафикаОкончание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Границы.Окончание) Тогда
		Окончание = ДатаГрафикаОкончание + ВремяВСекунды(Границы.Окончание);
	КонецЕсли;
	
КонецПроцедуры

Функция ГраницыДняПоРасписанию(ПараметрыПланирования, ГрафикРаботы, ДатаГрафика)
	
	Результат = Новый Структура("Начало, Окончание", '00010101', '00010101');
	
	Если НЕ ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		СтруктураПоиска = Новый Структура("ГрафикРаботы, ДатаГрафика", ГрафикРаботы, ДатаГрафика);
		НайденныеСтроки = ПараметрыПланирования.РасписаниеУББВ.НайтиСтроки(СтруктураПоиска);
		
		Для Индекс = 0 По НайденныеСтроки.ВГраница() Цикл
			
			Если Индекс = 0 Тогда
				Результат.Начало = НайденныеСтроки[Индекс].ВремяНачала;
				Результат.Окончание = НайденныеСтроки[Индекс].ВремяОкончания;
			Иначе
				Результат.Начало = МИН(Результат.Начало, НайденныеСтроки[Индекс].ВремяНачала);
				Результат.Окончание = МАКС(Результат.Окончание, НайденныеСтроки[Индекс].ВремяОкончания);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КодОшибкиОтсутствуетГрафикЭтапУББВ(Этап)
	
	Если Этап.ПроизводствоНаСтороне Тогда
		
		Результат = КодОшибкиГрафикРаботыПредприятия();
		
	Иначе
		
		Результат = КодОшибкиГрафикРаботыПодразделения();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПланированиеББВ

Процедура РазместитьЭтапББВ(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	Отказ = Ложь;
	
	СместитьМоментРазмещенияНаВеличинуБуфера(ПараметрыПланирования, Этап, ПараметрыРазмещения, Отказ);
	
	Если Отказ Тогда
		ПараметрыРазмещения.КодОшибкиРазмещения = КодОшибкиГрафикРаботыПодразделения();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ВидыРабочихЦентров = ВидыРабочийЦентровЭтапа(ПараметрыПланирования, Этап);
		Если ВидыРабочихЦентров.Количество() = 1 Тогда
			
			ЗагрузитьОдиночныйВРЦ(ПараметрыПланирования, Этап, ВидыРабочихЦентров[0], ПараметрыРазмещения, Отказ);
			
		ИначеЕсли ВидыРабочихЦентров.Количество() > 1 Тогда
			
			ЗагрузитьГруппуВРЦ(ПараметрыПланирования, Этап, ВидыРабочихЦентров, ПараметрыРазмещения, Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда
			ПараметрыРазмещения.КодОшибкиРазмещения = КодОшибкиДоступностьВРЦ();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		РассчитатьГраницыБуферовЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения, Отказ);
		
		Если Отказ Тогда
			ПараметрыРазмещения.КодОшибкиРазмещения = КодОшибкиГрафикРаботыПодразделения();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьРезультатыРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения, НЕ Отказ);
	
КонецПроцедуры

Процедура СместитьМоментРазмещенияНаВеличинуБуфера(ПараметрыПланирования, Этап, ПараметрыРазмещения, Отказ)
	
	Если ПараметрыПланирования.РазмещениеКНачалу Тогда
		
		БуферЕдИзм = Этап.ЕдиницаИзмеренияПредварительногоБуфера;
		Буфер = УчитываемыйРазмерБуфера(Этап.ПредварительныйБуфер, БуферЕдИзм, Этап);
		
	Иначе
		
		БуферЕдИзм = Этап.ЕдиницаИзмеренияЗавершающегоБуфера;
		Буфер = УчитываемыйРазмерБуфера(Этап.ЗавершающийБуфер, БуферЕдИзм, Этап);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Буфер) Тогда
		
		РезультатыРазмещения = РазместитьПоРасписаниюУББВ(
			ПараметрыПланирования,
			Этап.ГрафикРаботы,
			ПараметрыПланирования.РазмещениеКНачалу,
			ПараметрыРазмещения.МоментРазмещения,
			Буфер,
			БуферЕдИзм);
			
		Если РезультатыРазмещения.РазмещениеВыполнено Тогда
			
			Если ПараметрыПланирования.РазмещениеКНачалу Тогда
				
				ПараметрыРазмещения.МоментРазмещения = РезультатыРазмещения.Окончание;
				
			Иначе
				
				ПараметрыРазмещения.МоментРазмещения = РезультатыРазмещения.Начало;
				
			КонецЕсли;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОдиночныйВРЦ(ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, Отказ)
	
	ОсталосьРазместить = ИсполнительЭтапа.Время;
	ИнтервалРазмещения = НачальныйИнтервалРазмещенияББВ(
		ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, ПараметрыРазмещения.МоментРазмещения);
	
	Пока НЕ ИнтервалРазмещения = Неопределено Цикл
		
		Длительность = ЗагрузкаВРЦНаИнтервале(Этап, ИсполнительЭтапа,  ИнтервалРазмещения, ОсталосьРазместить);
		ДобавитьЗагрузкуВРЦ(
			ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, ИнтервалРазмещения, Длительность);
		ОсталосьРазместить = ОсталосьРазместить - Длительность;
		
		Если ОсталосьРазместить > 0 Тогда
			
			НепрерывноеРазмещение = Истина;
			ИнтервалРазмещения = ОчереднойИнтервалРазмещенияББВ(
				ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, НепрерывноеРазмещение);
			
			Если Этап.Непрерывный И НЕ НепрерывноеРазмещение Тогда
				ОсталосьРазместить = ИсполнительЭтапа.Время;
				ПараметрыРазмещения.ЗагрузкаВРЦ.Очистить();
				ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
			КонецЕсли;
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОсталосьРазместить = 0 Тогда
		РассчитатьГраницыЗагрузкиВРЦ(ПараметрыПланирования, Этап, ПараметрыРазмещения);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьГруппуВРЦ(ПараметрыПланирования, Этап, ИсполнителиЭтапа, ПараметрыРазмещения, Отказ)
	
	Порядок = Перечисления.ПорядокРаботыВидовРабочихЦентров;
	
	Если Этап.ПорядокРаботыВидовРабочихЦентров = Порядок.Последовательно Тогда
		
		ЗагрузитьГруппуВРЦПоследовательно(ПараметрыПланирования, Этап, ИсполнителиЭтапа, ПараметрыРазмещения, Отказ);
		
	ИначеЕсли Этап.ПорядокРаботыВидовРабочихЦентров = Порядок.Одновременно Тогда
		
		ЗагрузитьГруппуВРЦОдновременно(ПараметрыПланирования, Этап, ИсполнителиЭтапа, ПараметрыРазмещения, Отказ);
		
	ИначеЕсли Этап.ПорядокРаботыВидовРабочихЦентров = Порядок.Независимо Тогда
		
		ЗагрузитьГруппуВРЦНезависимо(ПараметрыПланирования, Этап, ИсполнителиЭтапа, ПараметрыРазмещения, Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		РассчитатьГраницыЗагрузкиВРЦ(ПараметрыПланирования, Этап, ПараметрыРазмещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьГруппуВРЦПоследовательно(ПараметрыПланирования, Этап, ИсполнителиЭтапа, ПараметрыРазмещения, Отказ)
	
	ИнтервалПервогоИсполнителя = Неопределено;
	ИнтервалРазмещения = Неопределено;
	
	Если ПараметрыПланирования.РазмещениеКНачалу Тогда
		НачальныйИндекс = 0;
		МаксимальныйИндекс = ИсполнителиЭтапа.Количество()-1;
	Иначе
		НачальныйИндекс = -(ИсполнителиЭтапа.Количество()-1);
		МаксимальныйИндекс = 0;
	КонецЕсли;
	
	Индекс = НачальныйИндекс;
	
	Пока Индекс <= МаксимальныйИндекс Цикл
		
		Если ПараметрыПланирования.РазмещениеКНачалу Тогда
			ИсполнительЭтапа = ИсполнителиЭтапа[Индекс];
		Иначе
			ИсполнительЭтапа = ИсполнителиЭтапа[-Индекс];
		КонецЕсли;
		
		ОсталосьРазместить = ИсполнительЭтапа.Время;
		
		Если Индекс = НачальныйИндекс Тогда
			Если ИнтервалПервогоИсполнителя = Неопределено Тогда
				ИнтервалРазмещения = НачальныйИнтервалРазмещенияББВ(
					ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, ПараметрыРазмещения.МоментРазмещения);
			Иначе
				ИнтервалРазмещения = ОчереднойИнтервалРазмещенияББВ(
					ПараметрыПланирования, ИсполнительЭтапа, ИнтервалПервогоИсполнителя);
			КонецЕсли;
			ИнтервалПервогоИсполнителя = ИнтервалРазмещения;
		Иначе
			
			Если ПараметрыПланирования.РазмещениеКНачалу Тогда
				МоментРазмещения = ИнтервалРазмещения.ДатаИнтервала;
			Иначе
				МоментРазмещения = ПривестиКОкончаниюПериода(
					ИнтервалРазмещения.ДатаИнтервала, ИсполнительЭтапа.ИнтервалПланирования);
			КонецЕсли;
				
			ИнтервалРазмещения = НачальныйИнтервалРазмещенияББВ(
				ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, МоментРазмещения);
			
		КонецЕсли;
		
		ПовторитьОбходИсполнителей = Ложь;
		
		Пока НЕ ИнтервалРазмещения = Неопределено Цикл
			
			Длительность = ЗагрузкаВРЦНаИнтервале(Этап, ИсполнительЭтапа,  ИнтервалРазмещения, ОсталосьРазместить);
			ДобавитьЗагрузкуВРЦ(
				ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, ИнтервалРазмещения, Длительность);
			ОсталосьРазместить = ОсталосьРазместить - Длительность;
			
			Если ОсталосьРазместить > 0 Тогда
				
				НепрерывноеРазмещение = Истина;
				ИнтервалРазмещения = ОчереднойИнтервалРазмещенияББВ(
					ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, НепрерывноеРазмещение);
				
				Если Этап.Непрерывный И НЕ НепрерывноеРазмещение Тогда
					
					ПараметрыРазмещения.ЗагрузкаВРЦ.Очистить();
					ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
					
					Если Индекс <> НачальныйИндекс Тогда
						ПовторитьОбходИсполнителей = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПовторитьОбходИсполнителей Тогда
			
			Индекс = НачальныйИндекс;
			Продолжить;
			
		ИначеЕсли ОсталосьРазместить > 0 Тогда
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьГруппуВРЦОдновременно(ПараметрыПланирования, Этап, ИсполнителиЭтапа, ПараметрыРазмещения, Отказ)
	
	ПервыйИсполнитель = ИсполнителиЭтапа[0];
	
	ОсталосьРазместить = ПервыйИсполнитель.Время;
	ИнтервалРазмещения = НачальныйИнтервалРазмещенияББВ(
		ПараметрыПланирования, Этап, ПервыйИсполнитель, ПараметрыРазмещения, ПараметрыРазмещения.МоментРазмещения);
	
	Пока НЕ ИнтервалРазмещения = Неопределено Цикл
		
		Интервалы = Новый Соответствие;
		Интервалы.Вставить(0, ИнтервалРазмещения);
		
		Для Индекс = 1 По ИсполнителиЭтапа.Количество()-1 Цикл
			
			ИнтервалПрочегоВРЦ = ИнтервалРазмещенияББВПоДатеИнтервала(
				ПараметрыПланирования, ИсполнителиЭтапа[Индекс], ИнтервалРазмещения.ДатаИнтервала);
			
			Если ИнтервалПрочегоВРЦ <> Неопределено Тогда
				Интервалы.Вставить(Индекс, ИнтервалПрочегоВРЦ);
			Иначе
				
				Если Этап.Непрерывный Тогда
					ОсталосьРазместить = ПервыйИсполнитель.Время;
					ПараметрыРазмещения.ЗагрузкаВРЦ.Очистить();
					ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Интервалы.Количество() = ИсполнителиЭтапа.Количество() Тогда
			
			Длительность = 0;
			
			Для каждого КлючИЗначение Из Интервалы Цикл
				
				ТекИсполнитель = ИсполнителиЭтапа[КлючИЗначение.Ключ];
				ТекИнтервал = КлючИЗначение.Значение;
							
				ДлительностьИнтервала = ЗагрузкаВРЦНаИнтервале(Этап, ТекИсполнитель, ТекИнтервал, ОсталосьРазместить);
				
				Длительность = ?(Длительность > 0, МИН(Длительность, ДлительностьИнтервала), ДлительностьИнтервала);
				
			КонецЦикла;
			
			Для каждого КлючИЗначение Из Интервалы Цикл
				
				ТекИсполнитель = ИсполнителиЭтапа[КлючИЗначение.Ключ];
				ТекИнтервал = КлючИЗначение.Значение;
				
				ДобавитьЗагрузкуВРЦ(
					ПараметрыПланирования, Этап, ТекИсполнитель, ПараметрыРазмещения, ТекИнтервал, Длительность);
					
			КонецЦикла;
			
			ОсталосьРазместить = ОсталосьРазместить - Длительность;
			
		КонецЕсли;
		
		Если ОсталосьРазместить > 0 Тогда
			
			НепрерывноеРазмещение = Истина;
			ИнтервалРазмещения = ОчереднойИнтервалРазмещенияББВ(
				ПараметрыПланирования, ПервыйИсполнитель, ИнтервалРазмещения, НепрерывноеРазмещение);
			
			Если Этап.Непрерывный И НЕ НепрерывноеРазмещение Тогда
				ОсталосьРазместить = ПервыйИсполнитель.Время;
				ПараметрыРазмещения.ЗагрузкаВРЦ.Очистить();
				ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
			КонецЕсли;
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОсталосьРазместить > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьГруппуВРЦНезависимо(ПараметрыПланирования, Этап, ИсполнителиЭтапа, ПараметрыРазмещения, Отказ)
	
	Для каждого ИсполнительЭтапа Из ИсполнителиЭтапа Цикл
		
		ОсталосьРазместить = ИсполнительЭтапа.Время;
		ИнтервалРазмещения = НачальныйИнтервалРазмещенияББВ(
			ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, ПараметрыРазмещения.МоментРазмещения);
		
		Пока НЕ ИнтервалРазмещения = Неопределено Цикл
			
			Длительность = ЗагрузкаВРЦНаИнтервале(Этап, ИсполнительЭтапа,  ИнтервалРазмещения, ОсталосьРазместить);
			
			ДобавитьЗагрузкуВРЦ(
				ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, ИнтервалРазмещения, Длительность);
			
			ОсталосьРазместить = ОсталосьРазместить - Длительность;
			
			Если ОсталосьРазместить > 0 Тогда
				
				НепрерывноеРазмещение = Истина;
				ИнтервалРазмещения = ОчереднойИнтервалРазмещенияББВ(
				ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, НепрерывноеРазмещение);
				
				Если Этап.Непрерывный И НЕ НепрерывноеРазмещение Тогда
					
					ОсталосьРазместить = ИсполнительЭтапа.Время;
					
					СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ИсполнительЭтапа.ВидРабочегоЦентра);
					НайденныеСтроки = ПараметрыРазмещения.ЗагрузкаВРЦ.НайтиСтроки(СтруктураПоиска);
					Для каждого Строка Из НайденныеСтроки Цикл
						ПараметрыРазмещения.ЗагрузкаВРЦ.Удалить(Строка);
					КонецЦикла;
					
					ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
					
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОсталосьРазместить > 0 Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НачальныйИнтервалРазмещенияББВ(ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, МоментРазмещения)
	
	ДатаИнтервала = ДатаНачальногоИнтервалаББВ(ПараметрыПланирования, Этап, МоментРазмещения);
	
	Результат = Неопределено;
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		#Область КруглосуточнаяРабота
		
		ИнтервалРазмещения = ИнициализироватьИнтервалРазмещенияКруглосуточнаяРабота();
		ИнтервалРазмещения.ВидРабочегоЦентра = ИсполнительЭтапа.ВидРабочегоЦентра;
		
		ЗаполнитьИнтервалРазмещенияКруглосуточнаяРабота(ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, ДатаИнтервала);
		
		Результат = ИнтервалРазмещения;
		
		#КонецОбласти
		
	Иначе
		
		Если ИсполнительЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			КоличествоИтерацийПоиска = 3;
		Иначе
			КоличествоИтерацийПоиска = 1;
		КонецЕсли;
	
		Если ИсполнительЭтапа.УчитыватьДоступность Тогда
			
			#Область ПоискПоДате
			
			ВыполнитьОбходИнтервалов = Истина;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВидРабочегоЦентра", ИсполнительЭтапа.ВидРабочегоЦентра);
			
			Для Сч = 1 По КоличествоИтерацийПоиска Цикл
				
				СтруктураПоиска.Вставить("ДатаИнтервала", ДатаИнтервала);
				НайденныеСтроки = ПараметрыПланирования.ДоступностьВРЦ.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					Если ПараметрыПланирования.РазмещениеКНачалу Тогда
						ДатаИнтервала = ПривестиКОкончаниюПериода(ДатаИнтервала, ИсполнительЭтапа.ИнтервалПланирования);
					Иначе
						ДатаИнтервала = ПривестиКНачалуПериода(ДатаИнтервала-1, ИсполнительЭтапа.ИнтервалПланирования);
					КонецЕсли;
					
				Иначе 
					
					Строка = НайденныеСтроки[0];
					Если Строка.Доступно > 0 Тогда
						
						Результат = Строка;
						
					Иначе
						
						ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
						
						ВыполнитьОбходИнтервалов = Ложь;
						
						Если ПараметрыПланирования.РазмещениеКНачалу Тогда
							ИндексСтроки = ПараметрыПланирования.ДоступностьВРЦ.Индекс(Строка) + 1;
							МаксИндекс = ПараметрыПланирования.ДоступностьВРЦ.Количество() - 1;
						Иначе
							ИндексСтроки = -(ПараметрыПланирования.ДоступностьВРЦ.Индекс(Строка) - 1);
							МаксИндекс = 0;
						КонецЕсли;
						
						Для Индекс = ИндексСтроки По МаксИндекс Цикл
							
							Если ПараметрыПланирования.РазмещениеКНачалу Тогда
								Строка = ПараметрыПланирования.ДоступностьВРЦ[Индекс];
							Иначе
								Строка = ПараметрыПланирования.ДоступностьВРЦ[-Индекс];
							КонецЕсли;
							
							Если НЕ Строка.ВидРабочегоЦентра = ИсполнительЭтапа.ВидРабочегоЦентра Тогда
								Прервать;
							ИначеЕсли Строка.Доступно > 0 Тогда
								Результат = Строка;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			#КонецОбласти
			
			#Область ОбходИнтервалов
			
			Если Результат = Неопределено И ВыполнитьОбходИнтервалов Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ВидРабочегоЦентра", ИсполнительЭтапа.ВидРабочегоЦентра);
				НайденныеСтроки = НайтиСтрокиССохранениемПорядка(
					ПараметрыПланирования.ДоступностьВРЦ, СтруктураПоиска, Истина);
				
				МаксИндекс = НайденныеСтроки.ВГраница();
				
				Если ПараметрыПланирования.РазмещениеКНачалу Тогда
					
					Для Сч = 0 По МаксИндекс Цикл
						Строка = НайденныеСтроки[Сч];
						Если Строка.ДатаИнтервала >= ДатаИнтервала Тогда
							
							Если Строка.Доступно > 0 Тогда
								
								Результат = Строка;
								Прервать;
								
							Иначе
								
								ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					Для Сч = 0 По МаксИндекс Цикл
						Строка = НайденныеСтроки[МаксИндекс-Сч];
						Если Строка.ДатаИнтервала <= ДатаИнтервала Тогда
							
							Если Строка.Доступно > 0 Тогда
								
								Результат = Строка;
								Прервать;
								
							Иначе
								
								ОтметитьЭтапОграниченПоОборудованию(ПараметрыРазмещения);
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			#КонецОбласти
			
		Иначе
			
			#Область ПоискПоДате
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ГрафикРаботы", ИсполнительЭтапа.ГрафикРаботы);
			
			Для Сч = 1 По КоличествоИтерацийПоиска Цикл
				
				СтруктураПоиска.Вставить("ДатаИнтервала", ДатаИнтервала);
				НайденныеСтроки = ПараметрыПланирования.РасписаниеББВ.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					Если ПараметрыПланирования.РазмещениеКНачалу Тогда
						ДатаИнтервала = ПривестиКОкончаниюПериода(ДатаИнтервала, ИсполнительЭтапа.ИнтервалПланирования);
					Иначе
						ДатаИнтервала = ПривестиКНачалуПериода(ДатаИнтервала-1, ИсполнительЭтапа.ИнтервалПланирования);
					КонецЕсли;
					
				Иначе
					
					Результат = НайденныеСтроки[0];
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			#КонецОбласти
			
			#Область ОбходИнтервалов
			
			Если Результат = Неопределено Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ГрафикРаботы", ИсполнительЭтапа.ГрафикРаботы);
				НайденныеСтроки = НайтиСтрокиССохранениемПорядка(
					ПараметрыПланирования.РасписаниеББВ, СтруктураПоиска, Истина);
				
				МаксИндекс = НайденныеСтроки.ВГраница();
				Результат = Неопределено;
				Если ПараметрыПланирования.РазмещениеКНачалу Тогда
					
					Для Сч = 0 По МаксИндекс Цикл
						Строка = НайденныеСтроки[Сч];
						Если Строка.ДатаИнтервала >= ДатаИнтервала Тогда
							
							Результат = Строка;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					Для Сч = 0 По МаксИндекс Цикл
						Строка = НайденныеСтроки[МаксИндекс-Сч];
						Если Строка.ДатаИнтервала <= ДатаИнтервала Тогда
							
							Результат = Строка;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОчереднойИнтервалРазмещенияББВ(ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, НепрерывноеРазмещение = Истина)
	
	Результат = Неопределено;
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		#Область КруглосуточнаяРабота
		
		Если ПараметрыПланирования.РазмещениеКНачалу Тогда
			
			ДатаИнтервала = ПривестиКОкончаниюПериода(
				ИнтервалРазмещения.ДатаИнтервала, ИсполнительЭтапа.ИнтервалПланирования);
			
		Иначе
			
			ДатаИнтервала = ПривестиКНачалуПериода(
				ИнтервалРазмещения.ДатаИнтервала-1, ИсполнительЭтапа.ИнтервалПланирования);
			
		КонецЕсли;
		
		ЗаполнитьИнтервалРазмещенияКруглосуточнаяРабота(ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, ДатаИнтервала, НепрерывноеРазмещение);
		
		Результат = ИнтервалРазмещения;
		
		#КонецОбласти
		
	Иначе
		
		Если ИсполнительЭтапа.УчитыватьДоступность Тогда
			
			#Область УчитыватьДоступность
			
			ТаблицаИнтервалов = ПараметрыПланирования.ДоступностьВРЦ;
			Индекс = ТаблицаИнтервалов.Индекс(ИнтервалРазмещения);
			
			Если ПараметрыПланирования.РазмещениеКНачалу Тогда
				
				Индекс = Индекс + 1;
				Пока Индекс < ТаблицаИнтервалов.Количество() Цикл
					
					СледующийИнтервал = ТаблицаИнтервалов[Индекс];
					Если СледующийИнтервал.ВидРабочегоЦентра = ИнтервалРазмещения.ВидРабочегоЦентра Тогда
						
						Если СледующийИнтервал.Доступно > 0 Тогда
							Результат = СледующийИнтервал;
						Иначе
							НепрерывноеРазмещение = Ложь;
						КонецЕсли;
						
					Иначе
						Прервать;
					КонецЕсли;
					
					Если НЕ Результат = Неопределено Тогда
						Прервать;
					Иначе
						Индекс = Индекс + 1;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Индекс = Индекс - 1;
				Пока Индекс >= 0 Цикл
					
					СледующийИнтервал = ТаблицаИнтервалов[Индекс];
					Если СледующийИнтервал.ВидРабочегоЦентра = ИнтервалРазмещения.ВидРабочегоЦентра Тогда
						
						Если СледующийИнтервал.Доступно > 0 Тогда
							Результат = СледующийИнтервал;
						Иначе
							НепрерывноеРазмещение = Ложь;
						КонецЕсли;
						
					Иначе
						Прервать;
					КонецЕсли;
					
					Если НЕ Результат = Неопределено Тогда
						Прервать;
					Иначе
						Индекс = Индекс - 1;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			#КонецОбласти
			
		Иначе
			
			#Область НеУчитыватьДоступность
			
			ТаблицаИнтервалов = ПараметрыПланирования.РасписаниеББВ;
			Индекс = ТаблицаИнтервалов.Индекс(ИнтервалРазмещения);
			
			Если ПараметрыПланирования.РазмещениеКНачалу Тогда
				Индекс = Индекс + 1;
				Если Индекс >= ТаблицаИнтервалов.Количество() Тогда
					Индекс = Неопределено;
				КонецЕсли;
			Иначе
				Индекс = Индекс - 1;
				Если Индекс < 0 Тогда
					Индекс = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Индекс = Неопределено Тогда
				
				СледующийИнтервал = ТаблицаИнтервалов[Индекс];
				Если СледующийИнтервал.ГрафикРаботы = ИнтервалРазмещения.ГрафикРаботы
					И СледующийИнтервал.ИнтервалПланирования = ИнтервалРазмещения.ИнтервалПланирования Тогда
					
					Результат = СледующийИнтервал;
					
				КонецЕсли;
				
			КонецЕсли;
			
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнтервалРазмещенияББВПоДатеИнтервала(ПараметрыПланирования, ИсполнительЭтапа, ДатаИнтервала)
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		ИнтервалРазмещения = ИнициализироватьИнтервалРазмещенияКруглосуточнаяРабота();
		ИнтервалРазмещения.ВидРабочегоЦентра = ИсполнительЭтапа.ВидРабочегоЦентра;
		
		ЗаполнитьИнтервалРазмещенияКруглосуточнаяРабота(ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, ДатаИнтервала);
		
		Если ИнтервалРазмещения <> Неопределено
			И ИнтервалРазмещения.ДатаИнтервала = ДатаИнтервала Тогда
			Результат = ИнтервалРазмещения;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ИсполнительЭтапа.УчитыватьДоступность Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВидРабочегоЦентра", ИсполнительЭтапа.ВидРабочегоЦентра);
			СтруктураПоиска.Вставить("ДатаИнтервала", ДатаИнтервала);
			
			НайденныеСтроки = ПараметрыПланирования.ДоступностьВРЦ.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 1 
				И НайденныеСтроки[0].Доступно > 0 Тогда
				Результат = НайденныеСтроки[0];
			Иначе
				Результат = Неопределено;
			КонецЕсли;
			
		Иначе
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ГрафикРаботы", ИсполнительЭтапа.ГрафикРаботы);
			СтруктураПоиска.Вставить("ДатаИнтервала", ДатаИнтервала);
			
			НайденныеСтроки = ПараметрыПланирования.РасписаниеББВ.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 1 Тогда
				Результат = НайденныеСтроки[0];
			Иначе
				Результат = Неопределено;
			КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЗагрузкуВРЦ(ПараметрыПланирования, Этап, ИсполнительЭтапа, ПараметрыРазмещения, ИнтервалРазмещения, Длительность)
	
	НоваяСтрока = ПараметрыРазмещения.ЗагрузкаВРЦ.Добавить();
	НоваяСтрока.ВидРабочегоЦентра = ИсполнительЭтапа.ВидРабочегоЦентра;
	НоваяСтрока.ДатаИнтервала = ИнтервалРазмещения.ДатаИнтервала;
	НоваяСтрока.ЭтапПроизводства = Этап.ЭтапПроизводства;
	
	Если ИсполнительЭтапа.УчитыватьДоступность Тогда
		
		Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
			НоваяСтрока.СтрокаДоступностьВРЦ = ИнтервалРазмещения.СтрокаДоступностьВРЦ;
		Иначе
			НоваяСтрока.СтрокаДоступностьВРЦ = ИнтервалРазмещения;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.Занято = Длительность;
	
КонецПроцедуры

Функция ЗагрузкаВРЦНаИнтервале(Этап, ИсполнительЭтапа,  ИнтервалРазмещения, ОсталосьРазместить)
	
	Если ИсполнительЭтапа.УчитыватьДоступность И ИнтервалРазмещения.Доступно = 0 Тогда
		
		Результат = 0;
		
	Иначе
		
		МаксЗагрузкаНаКвант = МаксимальнаяЗагрузкаНаКвант(Этап, ИсполнительЭтапа);
		
		Если ИсполнительЭтапа.УчитыватьДоступность Тогда
			
			Результат = МИН(ОсталосьРазместить, МаксЗагрузкаНаКвант, ИнтервалРазмещения.Доступно);
			
		Иначе
			
			Результат = МИН(ОсталосьРазместить, МаксЗагрузкаНаКвант);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальнаяЗагрузкаНаКвант(Этап, ИсполнительЭтапа)
	
	КоличествоПартий = ?(Цел(Этап.КоличествоПартий) = Этап.КоличествоПартий,
		Этап.КоличествоПартий,
		Цел(Этап.КоличествоПартий)+1);
	
	ЕдиницОборудования = ?(ИсполнительЭтапа.УчитыватьДоступность,
		МИН(КоличествоПартий, ИсполнительЭтапа.КоличествоРабочихЦентров),
		КоличествоПартий);
	
	Возврат ИсполнительЭтапа.МаксимальнаяДоступность * ЕдиницОборудования;
	
КонецФункции

Функция ДатаНачальногоИнтервалаББВ(ПараметрыПланирования, Этап, МоментРазмещения)
	
	НестандартныеГраницы = ИнтервалПланированияИмеетНестандартныеГраницы(Этап);
	
	Если НестандартныеГраницы Тогда
		
		Если ПараметрыПланирования.РазмещениеКНачалу Тогда
			
			МоментРазмещенияПриведенный = ПривестиКГраницеИнтервалаПланирования(
				МоментРазмещения,
				Этап.ИнтервалПланирования,
				Этап.НачалоИнтервалаПланирования);
				
			Если МоментРазмещения <= МоментРазмещенияПриведенный Тогда
				
				Результат = ПривестиКНачалуПериода(МоментРазмещения, Этап.ИнтервалПланирования);
				
			Иначе
				
				Результат = ПривестиКОкончаниюПериода(МоментРазмещения, Этап.ИнтервалПланирования);
				
			КонецЕсли;
			
		Иначе
			
			МоментРазмещенияПриведенный = ПривестиКГраницеИнтервалаПланирования(
				МоментРазмещения,
				Этап.ИнтервалПланирования,
				Этап.ОкончаниеИнтервалаПланирования);
			
			Если МоментРазмещения >= МоментРазмещенияПриведенный Тогда
				
				Результат = ПривестиКНачалуПериода(МоментРазмещения, Этап.ИнтервалПланирования);
				
			Иначе
				
				Результат = ПривестиКНачалуПериода(
					ПривестиКНачалуПериода(МоментРазмещения, Этап.ИнтервалПланирования)-1, Этап.ИнтервалПланирования);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		МоментРазмещенияПриведенный = ПривестиКНачалуПериода(МоментРазмещения, Этап.ИнтервалПланирования);
		Если ПараметрыПланирования.РазмещениеКНачалу Тогда
			
			Если МоментРазмещения = МоментРазмещенияПриведенный Тогда
				Результат = МоментРазмещения;
			Иначе
				Результат = ПривестиКОкончаниюПериода(МоментРазмещения, Этап.ИнтервалПланирования);
			КонецЕсли;
			
		Иначе
			
			Результат = ПривестиКНачалуПериода(МоментРазмещенияПриведенный-1, Этап.ИнтервалПланирования);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьГраницыЗагрузкиВРЦ(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	НачалоЗагрузки = '39991231';
	ОкончаниеЗагрузки = '00010101';
	
	Для каждого ИнтервалЗагрузки Из ПараметрыРазмещения.ЗагрузкаВРЦ Цикл
		НачалоЗагрузки = МИН(НачалоЗагрузки, ИнтервалЗагрузки.ДатаИнтервала);
		ОкончаниеЗагрузки = МАКС(ОкончаниеЗагрузки, ИнтервалЗагрузки.ДатаИнтервала);
	КонецЦикла;
	
	НестандартныеГраницы = ИнтервалПланированияИмеетНестандартныеГраницы(Этап);
	
	Если НестандартныеГраницы
		И НЕ ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		
		НачалоЗагрузки = ПривестиКГраницеИнтервалаПланирования(
			НачалоЗагрузки,
			Этап.ИнтервалПланирования,
			Этап.НачалоИнтервалаПланирования);
		
		ОкончаниеЗагрузки = ПривестиКГраницеИнтервалаПланирования(
			ОкончаниеЗагрузки,
			Этап.ИнтервалПланирования,
			Этап.ОкончаниеИнтервалаПланирования) + 1;
		
	Иначе
		
		ОкончаниеЗагрузки = ПривестиКОкончаниюПериода(
			ОкончаниеЗагрузки, Этап.ИнтервалПланирования);
		
	КонецЕсли;
	
	ПараметрыРазмещения.ОкончаниеПредварительногоБуфера = НачалоЗагрузки;
	ПараметрыРазмещения.НачалоЗавершающегоБуфера = ОкончаниеЗагрузки;
	
КонецПроцедуры

Процедура РассчитатьГраницыБуферовЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения, Отказ)
	
	// Размещение предварительного буфера.
	
	БуферЕдИзм = Этап.ЕдиницаИзмеренияПредварительногоБуфера;
	Буфер = УчитываемыйРазмерБуфера(Этап.ПредварительныйБуфер, БуферЕдИзм, Этап);
	ОкончаниеПредварительногоБуфера = ?(
		ЗначениеЗаполнено(ПараметрыРазмещения.ОкончаниеПредварительногоБуфера),
		ПараметрыРазмещения.ОкончаниеПредварительногоБуфера,
		ПараметрыРазмещения.МоментРазмещения);
	
	Если ЗначениеЗаполнено(Буфер) Тогда
		
		РезультатыРазмещения = РазместитьПоРасписаниюУББВ(
			ПараметрыПланирования,
			Этап.ГрафикРаботы,
			Ложь,
			ОкончаниеПредварительногоБуфера,
			Буфер,
			БуферЕдИзм);
		
		Если РезультатыРазмещения.РазмещениеВыполнено Тогда
			
			ПараметрыРазмещения.НачалоЭтапа = РезультатыРазмещения.Начало;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыРазмещения.НачалоЭтапа = ОкончаниеПредварительногоБуфера;
		
	КонецЕсли;
	
	// Размещение завершающего буфера.
	
	БуферЕдИзм = Этап.ЕдиницаИзмеренияЗавершающегоБуфера;
	Буфер = УчитываемыйРазмерБуфера(Этап.ЗавершающийБуфер, БуферЕдИзм, Этап);
	НачалоЗавершающегоБуфера = ?(
		ЗначениеЗаполнено(ПараметрыРазмещения.НачалоЗавершающегоБуфера),
		ПараметрыРазмещения.НачалоЗавершающегоБуфера,
		ПараметрыРазмещения.МоментРазмещения);
	
	Если ЗначениеЗаполнено(Буфер) Тогда
		
		РезультатыРазмещения = РазместитьПоРасписаниюУББВ(
			ПараметрыПланирования,
			Этап.ГрафикРаботы,
			Истина,
			НачалоЗавершающегоБуфера,
			Буфер,
			БуферЕдИзм);
		
		Если РезультатыРазмещения.РазмещениеВыполнено Тогда
			
			ПараметрыРазмещения.ОкончаниеЭтапа = РезультатыРазмещения.Окончание;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыРазмещения.ОкончаниеЭтапа = НачалоЗавершающегоБуфера;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнтервалПланированияВСекунды(ИнтервалПланирования, ДатаМесяца = Неопределено)
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Результат = 3600; // 60 * 60
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		Результат = 86400; // 60 * 60 * 24
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		Результат = 604800; // 60 * 60 * 24 * 7
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		Если ДатаМесяца = Неопределено Тогда
			Результат = 2592000; // 60 * 60 * 24 * 30
		Иначе
			Результат = 60 * 60 * 24 * День(КонецМесяца(ДатаМесяца));
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УчитываемыйРазмерБуфера(Буфер, БуферЕдИзм, Этап)
	
	Если Этап.МинимальныйЗначимыйБуфер = 0 Тогда
		
		Результат = Буфер;
		
	Иначе
		
		ВремяИнтервала = ИнтервалПланированияВСекунды(Этап.ИнтервалПланирования);
		ВремяБуфера = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(Буфер, БуферЕдИзм);
		
		Если (ВремяБуфера / ВремяИнтервала * 100) >= Этап.МинимальныйЗначимыйБуфер Тогда
			
			Результат = Буфер;
			
		Иначе
			
			Результат = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьИнтервалРазмещенияКруглосуточнаяРабота()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидРабочегоЦентра");
	Результат.Вставить("ДатаИнтервала");
	Результат.Вставить("Доступно");
	Результат.Вставить("СтрокаДоступностьВРЦ");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИнтервалРазмещенияКруглосуточнаяРабота(
		ПараметрыПланирования, ИсполнительЭтапа, ИнтервалРазмещения, ДатаИнтервала, НепрерывноеРазмещение = Истина)
	
	МаксимальнаяДоступность = ИнтервалПланированияВСекунды(ИсполнительЭтапа.ИнтервалПланирования, ДатаИнтервала);
	
	Если ИсполнительЭтапа.УчитыватьДоступность Тогда
		
		Если ИсполнительЭтапа.КоличествоРабочихЦентров = 0 Тогда
			
			ИнтервалРазмещения = Неопределено;
			Возврат;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидРабочегоЦентра", ИсполнительЭтапа.ВидРабочегоЦентра);
		
		Пока Истина Цикл
			
			ДоступностьНорматив = МаксимальнаяДоступность * ИсполнительЭтапа.КоличествоРабочихЦентров;
			
			СтруктураПоиска.Вставить("ДатаИнтервала", ДатаИнтервала);
			НайденныеСтроки = ПараметрыПланирования.ДоступностьВРЦ.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаДоступностьВРЦ = ДобавитьЗаписьВДоступностьВРЦ(ПараметрыПланирования, СтруктураПоиска);
				лДоступность = ДоступностьНорматив;
			Иначе
				СтрокаДоступностьВРЦ = НайденныеСтроки[0];
				лДоступность = ДоступностьНорматив - СтрокаДоступностьВРЦ.Занято;
			КонецЕсли;
			
			Если лДоступность > 0 Тогда
				
				ИнтервалРазмещения.ДатаИнтервала = ДатаИнтервала;
				ИнтервалРазмещения.Доступно = лДоступность;
				ИнтервалРазмещения.СтрокаДоступностьВРЦ = СтрокаДоступностьВРЦ;
				Прервать;
				
			Иначе
				
				Если ПараметрыПланирования.РазмещениеКНачалу Тогда
					ДатаИнтервала = ПривестиКОкончаниюПериода(ДатаИнтервала, ИсполнительЭтапа.ИнтервалПланирования);
				Иначе
					ДатаИнтервала = ПривестиКНачалуПериода(ДатаИнтервала-1, ИсполнительЭтапа.ИнтервалПланирования);
				КонецЕсли;
				
				МаксимальнаяДоступность = ИнтервалПланированияВСекунды(ИсполнительЭтапа.ИнтервалПланирования, ДатаИнтервала);
				
				НепрерывноеРазмещение = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ИнтервалРазмещения.ДатаИнтервала = ДатаИнтервала;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкиПланирования

// Параметры:
// 	НомерЗаданияКРасчетуГрафикаПроизводства - Неопределено, Произвольный, Число - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * НомерЗаданияКРасчетуГрафикаПроизводства - Неопределено, Число -
// * ЗадействоватьРезервДоступности - Булево -
// * СтатусГрафика - Число - 
// * Этапы - Массив из ДокументСсылка.ЭтапПроизводства2_2 -
// * Распоряжения - ДокументСсылка.ЗаказНаПроизводство2_2 -
// * ОтменитьРучныеИзмененияГрафика - Булево -
// * ПолноеПерепланирование - Булево -
// * ОтсутствиеПрочихЗаказов - Булево -
// * КруглосуточнаяРаботаБезВыходных - Булево -
// * НеограниченныйПаркОборудования - Булево -
// * ВсеМатериалыВНаличии - Булево -
// * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 -
// * ЗадействоватьРезервДоступностиМодель - Булево -
// * ПланироватьМодель - Булево -
// * ЗадействоватьРезервДоступностиГрафик - Булево -
// * ПланироватьГрафик - Булево -
Функция ИнициализироватьНастройкиПланирования(НомерЗаданияКРасчетуГрафикаПроизводства = Неопределено)
	
	Результат = Новый Структура;
	
	Настройки = НастройкиПланированияПредварительногоГрафика();
	Для каждого Элемент Из Настройки Цикл
		Результат.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Результат.Вставить("Распоряжения");
	Результат.Вставить("Этапы");
	Результат.Вставить("СтатусГрафика");
	Результат.Вставить("ЗадействоватьРезервДоступности", Ложь);
	
	Если НомерЗаданияКРасчетуГрафикаПроизводства = Неопределено Тогда
		НомерЗаданияКРасчетуГрафикаПроизводства = ЗафиксироватьНомерЗаданияКРасчетуГрафикаПроизводства();
	КонецЕсли;
	Результат.Вставить("НомерЗаданияКРасчетуГрафикаПроизводства", НомерЗаданияКРасчетуГрафикаПроизводства);
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиПланированияПредварительныйГрафик(ВнешниеНастройки, НомерЗаданияКРасчетуГрафикаПроизводства)
	
	НастройкиПланирования = ИнициализироватьНастройкиПланирования(НомерЗаданияКРасчетуГрафикаПроизводства);
	ЗаполнитьЗначенияСвойств(НастройкиПланирования, ВнешниеНастройки);
	
	НастройкиПланирования.СтатусГрафика = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусПредварительныйГрафик();
	НастройкиПланирования.ЗадействоватьРезервДоступности = ВнешниеНастройки.ЗадействоватьРезервДоступностиГрафик;
	
	НастройкиПланирования.ВсеМатериалыВНаличии = Ложь;
	НастройкиПланирования.НеограниченныйПаркОборудования = Ложь;
	НастройкиПланирования.КруглосуточнаяРаботаБезВыходных = Ложь;
	НастройкиПланирования.ОтсутствиеПрочихЗаказов = Ложь;
	
	Возврат НастройкиПланирования;
	
КонецФункции

Функция НастройкиПланированияМодельГрафика(ВнешниеНастройки, НомерЗаданияКРасчетуГрафикаПроизводства)
	
	НастройкиПланирования = ИнициализироватьНастройкиПланирования(НомерЗаданияКРасчетуГрафикаПроизводства);
	ЗаполнитьЗначенияСвойств(НастройкиПланирования, ВнешниеНастройки);
	
	НастройкиПланирования.СтатусГрафика = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусМодельГрафика();
	НастройкиПланирования.ЗадействоватьРезервДоступности = ВнешниеНастройки.ЗадействоватьРезервДоступностиМодель;
	
	Возврат НастройкиПланирования;
	
КонецФункции

Функция НастройкиПланированияРабочийГрафикРаспоряжений(Распоряжение, Параметры = Неопределено)
	
	НастройкиПланирования = ИнициализироватьНастройкиПланирования();
	
	Если Параметры <> Неопределено Тогда
		
		СписокВнешнихНастроек = Новый Массив;
		СписокВнешнихНастроек.Добавить("ЗадействоватьРезервДоступности");
		СписокВнешнихНастроек.Добавить("ПолноеПерепланирование");
		СписокВнешнихНастроек.Добавить("ОтменитьРучныеИзмененияГрафика");
		
		Для каждого Настройка Из СписокВнешнихНастроек Цикл
			
			Если НЕ Параметры.Свойство(Настройка, НастройкиПланирования[Настройка]) Тогда
				НастройкиПланирования[Настройка] = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкиПланирования.Распоряжение = Распоряжение;
	
	НастройкиПланирования.СтатусГрафика = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
	НастройкиПланирования.ВсеМатериалыВНаличии = Ложь;
	НастройкиПланирования.НеограниченныйПаркОборудования = Ложь;
	НастройкиПланирования.КруглосуточнаяРаботаБезВыходных = Ложь;
	НастройкиПланирования.ОтсутствиеПрочихЗаказов = Ложь;
	
	Возврат НастройкиПланирования;
	
КонецФункции

Функция НастройкиПланированияРабочийГрафикЭтапов(Распоряжение, Этапы, Параметры)
	
	НастройкиПланирования = ИнициализироватьНастройкиПланирования();
	
	СписокВнешнихНастроек = Новый Массив;
	СписокВнешнихНастроек.Добавить("ЗадействоватьРезервДоступности");
	СписокВнешнихНастроек.Добавить("ОтменитьРучныеИзмененияГрафика");
	
	Для каждого Настройка Из СписокВнешнихНастроек Цикл
		
		Если НЕ Параметры.Свойство(Настройка, НастройкиПланирования[Настройка]) Тогда
			НастройкиПланирования[Настройка] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиПланирования.Распоряжение = Распоряжение;
	НастройкиПланирования.Этапы = Этапы;
	
	НастройкиПланирования.СтатусГрафика = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
	НастройкиПланирования.ПолноеПерепланирование = Истина;
	НастройкиПланирования.ВсеМатериалыВНаличии = Ложь;
	НастройкиПланирования.НеограниченныйПаркОборудования = Ложь;
	НастройкиПланирования.КруглосуточнаяРаботаБезВыходных = Ложь;
	НастройкиПланирования.ОтсутствиеПрочихЗаказов = Ложь;
	
	Возврат НастройкиПланирования;
	
КонецФункции

#КонецОбласти

#Область ПараметрыПланирования

Функция ПараметрыПланирования(НастройкиПланирования, ИзменитьНаправлениеПланирования, Отказ)
	
	ПараметрыПланирования = ИнициализироватьПараметрыПланирования(НастройкиПланирования);
	ЗаполнитьЗначенияСвойств(ПараметрыПланирования, НастройкиПланирования);
	
	ПараметрыПланирования.РезультатыПланирования = ИнициализироватьПараметрРезультатыПланирования(ПараметрыПланирования);
	
	ПрочитатьРеквизитыРаспоряжения(ПараметрыПланирования, НастройкиПланирования.Распоряжение);
	
	ИзменитьНаправлениеПланирования(ПараметрыПланирования, ИзменитьНаправлениеПланирования);
	
	ПрочитатьЭтапыСЗависимостями(
		ПараметрыПланирования,
		НастройкиПланирования.Распоряжение,
		НастройкиПланирования.Этапы,
		Отказ);
		
	Если НЕ Отказ Тогда
		
		ПрочитатьИсполнителиЭтапов(ПараметрыПланирования);
		ПрочитатьДатыОбеспечения(ПараметрыПланирования);
		ПрочитатьДоступностьВРЦ(ПараметрыПланирования);
		ПрочитатьРасписаниеББВ(ПараметрыПланирования);
		ПрочитатьРасписаниеУББВ(ПараметрыПланирования);
		
		ИнициализироватьПараметрГрафикПроизводства(ПараметрыПланирования);
		ИнициализироватьПараметрЗагрузкаВРЦ(ПараметрыПланирования);
		
	КонецЕсли;
	
	Возврат ПараметрыПланирования;
	
КонецФункции

// Конструктор структуры, описывающей параметры расчета графика производства.
// 
// Параметры:
// 	НастройкиПланирования - см. ИнициализироватьНастройкиПланирования
// Возвращаемое значение:
// 	Структура - Описание:
// * РезультатыПланирования - см. ИнициализироватьПараметрРезультатыПланирования
// * ЗагрузкаВРЦ - см. ИнициализироватьТаблицуУчетаЗагрузкиВРЦ
// * ГрафикПроизводства - ТаблицаЗначений - где:
// ** РазмещениеВыпуска - ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства -
// ** ОграниченПоОборудованию - Булево -
// ** ОграниченПоМатериалам - Булево -
// ** ОграничиваетСрокВыпуска - Булево -
// ** НаКритическомПути - Булево -
// ** НачалоСледующегоЭтапа - Дата -
// ** НачалоЗавершающегоБуфера - Дата -
// ** ОкончаниеПредварительногоБуфера - Дата -
// ** ОкончаниеЭтапа - Дата -
// ** НачалоЭтапа - Дата -
// ** ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 -
// * РасписаниеУББВ - см. РасписаниеУББВ
// * РасписаниеББВ - см. РасписаниеББВ
// * ДоступностьВРЦ - ТаблицаЗначений - где:
// ** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// ** ДатаИнтервала - Дата -
// ** Доступность - Число -
// ** Занято - Число -
// * ЗагрузкаЭтаповРазмещенныхВручную - ТаблицаЗначений - 
// * ГрафикЭтаповРазмещенныхВручную - ТаблицаЗначений - 
// * ПредшествующиеЭтапыПроизводства - Массив - 
// * ИсполнителиЭтапов - ТаблицаЗначений - 
// * ЗависимостиЭтапов - ТаблицаЗначений - 
// * Этапы - ТаблицаЗначений - 
// * ДатыОбеспечения - ТаблицаЗначений - 
// * ИзменитьНаправлениеПланирования - Булево -
// * РазмещениеКНачалу - Булево - 
// * ДатаПотребности - Дата -
// * НачатьНеРанее - Дата - 
// * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 -
// * ОтменитьРучныеИзмененияГрафика - Булево -
// * ПолноеПерепланирование - Булево -
// * ОтсутствиеПрочихЗаказов - Булево -
// * КруглосуточнаяРаботаБезВыходных - Булево -
// * НеограниченныйПаркОборудования - Булево -
// * ВсеМатериалыВНаличии - Булево -
// * ЗадействоватьРезервДоступностиМодель - Булево -
// * ПланироватьМодель - Булево -
// * ЗадействоватьРезервДоступностиГрафик - Булево -
// * ПланироватьГрафик - Булево -
Функция ИнициализироватьПараметрыПланирования(НастройкиПланирования)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Распоряжение");
	Результат.Вставить("НачатьНеРанее");
	Результат.Вставить("ДатаПотребности");
	Результат.Вставить("РазмещениеКНачалу");
	Результат.Вставить("ИзменитьНаправлениеПланирования", Ложь);
	Результат.Вставить("ДатыОбеспечения");
	
	Результат.Вставить("Этапы");
	Результат.Вставить("ЭтапыРазмещаемые");
	Результат.Вставить("ЗависимостиЭтапов");
	Результат.Вставить("ИсполнителиЭтапов");
	Результат.Вставить("ПредшествующиеЭтапыПроизводства");
	
	Результат.Вставить("ГрафикЭтаповРазмещенныхВручную");
	Результат.Вставить("ЗагрузкаЭтаповРазмещенныхВручную");
	
	Результат.Вставить("ДоступностьВРЦ");
	Результат.Вставить("РасписаниеББВ");
	Результат.Вставить("РасписаниеУББВ");
	
	Результат.Вставить("ГрафикПроизводства");
	Результат.Вставить("ЗагрузкаВРЦ");
	Результат.Вставить("РезультатыПланирования");
	
	Для каждого Настройка Из НастройкиПланирования Цикл
		Результат.Вставить(Настройка.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьРеквизитыРаспоряжения(ПараметрыПланирования, Распоряжение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2.Ссылка КАК Распоряжение,
	|	ЗаказНаПроизводство2_2.НачатьНеРанее,
	|	ЗаказНаПроизводство2_2.ДатаПотребности,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство2_2.РазмещениеВыпуска = ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазмещениеКНачалу
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Ссылка = &Распоряжение");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПланирования, Выборка);
	
КонецПроцедуры

Процедура ИзменитьНаправлениеПланирования(ПараметрыПланирования, ИзменитьНаправлениеПланирования)
	
	Если ИзменитьНаправлениеПланирования Тогда
		
		ПараметрыПланирования.РазмещениеКНачалу = НЕ ПараметрыПланирования.РазмещениеКНачалу;
		
	ИначеЕсли НЕ ПараметрыПланирования.РазмещениеКНачалу И ПараметрыПланирования.ДатаПотребности <= ТекущаяДатаСеанса() Тогда
		
		ДобавитьОповещениеОбИзмененииНаправленияПланирования(ПараметрыПланирования);
		ПараметрыПланирования.РазмещениеКНачалу = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЭтапыСЗависимостями(ПараметрыПланирования, Распоряжение, МассивЭтапов, Отказ)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.ЭтапПроизводства2_2.СоздатьВТСвязиЭтаповПоРаспоряжению(
		МенеджерВременныхТаблиц,
		Распоряжение,
		Ложь);
	
	Запрос = ИнициализироватьЗапросЭтапыСЗависимостями(ПараметрыПланирования, Распоряжение, МассивЭтапов);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	МаксИндекс = МассивРезультатов.ВГраница();
	
	Этапы = МассивРезультатов[МаксИндекс-4].Выгрузить();// ТаблицаЗначений - 
	
	Если Этапы.Количество() > 0 Тогда
		
		ДобавитьСлужебныеКолонкиВЭтапы(Этапы);
		Этапы.Индексы.Добавить("ЭтапПроизводства");
		Этапы.Индексы.Добавить("Размещать");
		Этапы.Индексы.Добавить("Размещен");
		ПараметрыПланирования.Этапы = Этапы;
		ПараметрыПланирования.ЭтапыРазмещаемые = МассивРазмещаемыхЭтапов(ПараметрыПланирования);
		
		ЗависимостиЭтапов = МассивРезультатов[МаксИндекс-3].Выгрузить();// ТаблицаЗначений - 
		ЗависимостиЭтапов.Индексы.Добавить("ЭтапПроизводства");
		ЗависимостиЭтапов.Индексы.Добавить("СледующийЭтап");
		ПараметрыПланирования.ЗависимостиЭтапов = ЗависимостиЭтапов;
		
		ПредшествующиеЭтапы = МассивРезультатов[МаксИндекс-2].Выгрузить();
		Если ПредшествующиеЭтапы.Найти(Истина, "ГрафикОтсутствует") = Неопределено Тогда
			ЗаполнитьДатуРазмещенияПредшествующихЭтапов(
				ПараметрыПланирования, ПредшествующиеЭтапы);
		Иначе
			ЗафиксироватьОшибкиОтсутствуетГрафикПредшествующихЭтапов(
				ПараметрыПланирования, ПредшествующиеЭтапы);
			Отказ = Истина;
		КонецЕсли;
		ПараметрыПланирования.ПредшествующиеЭтапыПроизводства = ПредшествующиеЭтапы.ВыгрузитьКолонку("ЭтапПроизводства");
		
		ГрафикЭтаповРазмещенныхВручную = МассивРезультатов[МаксИндекс-1].Выгрузить();// ТаблицаЗначений - 
		ГрафикЭтаповРазмещенныхВручную.Индексы.Добавить("ЭтапПроизводства");
		ПараметрыПланирования.ГрафикЭтаповРазмещенныхВручную = ГрафикЭтаповРазмещенныхВручную;
		
		ЗагрузкаЭтаповРазмещенныхВручную = МассивРезультатов[МаксИндекс].Выгрузить();// ТаблицаЗначений - 
		ЗагрузкаЭтаповРазмещенныхВручную.Индексы.Добавить("ЭтапПроизводства");
		ПараметрыПланирования.ЗагрузкаЭтаповРазмещенныхВручную = ЗагрузкаЭтаповРазмещенныхВручную;
		
	Иначе
		
		ДобавитьОповещениеОтсутствуютЭтапыДляПланирования(ПараметрыПланирования);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьЗапросЭтапыСЗависимостями(ПараметрыПланирования, Распоряжение, МассивЭтапов)
	
	ТекстыЗапросовПакета = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(&ПолеСортировкиПоДлительности) КАК ДлительностьДоВыпускаЗапуска
	|ПОМЕСТИТЬ НомерПервогоНеактуальногоЭтапа
	|ИЗ
	|	РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
	|ГДЕ
	|	НЕ &ПолноеПерепланирование
	|	И НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства В
	|			(ВЫБРАТЬ
	|				Т.ЭтапПроизводства КАК ЭтапПроизводства
	|			ИЗ
	|				РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства КАК Т
	|			ГДЕ
	|				Т.Распоряжение = &Распоряжение
	|				И Т.НомерЗадания <= &НомерЗаданияКРасчетуГрафикаПроизводства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка КАК ЭтапПроизводства,
	|	&ИспользуетсяПланированиеПоПроизводственнымРесурсам
	|		И (ЭтапПроизводства2_2.ПланироватьРаботуВидовРабочихЦентров
	|			ИЛИ ЭтапПроизводства2_2.РучноеРазмещениеВГрафике
	|				И &ОтменитьРучныеИзмененияГрафика
	|				И ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК Т
	|					ГДЕ
	|						Т.Ссылка = ЭтапПроизводства2_2.Ссылка)) КАК ПланироватьРаботуВидовРабочихЦентров
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
	|		ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомерПервогоНеактуальногоЭтапа КАК НомерПервогоНеактуальногоЭтапа
	|		ПО (НЕ &ПолноеПерепланирование)
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение = &Распоряжение
	|	И ЭтапПроизводства2_2.Проведен
	|	И ЭтапПроизводства2_2.Статус В(&СтатусыЭтапа)
	|	И (НЕ &ОтборПоЭтапам
	|				И &ПолноеПерепланирование
	|			ИЛИ &ОтборПоЭтапам
	|				И ЭтапПроизводства2_2.Ссылка В (&Этапы)
	|			ИЛИ НЕ &ПолноеПерепланирование
	|				И &ПолеСортировкиПоДлительности <= НомерПервогоНеактуальногоЭтапа.ДлительностьДоВыпускаЗапуска)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ЭтапПроизводства КАК ЭтапПроизводства,
	|	МИНИМУМ(ВложенныйЗапрос.ВидРабочегоЦентра.МинимальныйЗначимыйБуфер) КАК МинимальныйЗначимыйБуфер
	|ПОМЕСТИТЬ ВТЗначимыеБуферы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыРабочихЦентров.Ссылка КАК ЭтапПроизводства,
	|		ВидыРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|	ГДЕ
	|		ВидыРабочихЦентров.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТЭтапы.ЭтапПроизводства
	|				ИЗ
	|					ВТЭтапы
	|				ГДЕ
	|					ВТЭтапы.ПланироватьРаботуВидовРабочихЦентров)
	|		И ВидыРабочихЦентров.Использовать
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АльтернативныеВидыРабочихЦентров.Ссылка,
	|		АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК АльтернативныеВидыРабочихЦентров
	|	ГДЕ
	|		АльтернативныеВидыРабочихЦентров.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТЭтапы.ЭтапПроизводства
	|				ИЗ
	|					ВТЭтапы
	|				ГДЕ
	|					ВТЭтапы.ПланироватьРаботуВидовРабочихЦентров)
	|		И АльтернативныеВидыРабочихЦентров.Использовать) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ЭтапПроизводства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства,
	|	ВТСвязиЭтапов.СледующийЭтап КАК СледующийЭтап
	|ПОМЕСТИТЬ ВТЗависимости
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|ГДЕ
	|	(ВТСвязиЭтапов.Этап В
	|				(ВЫБРАТЬ
	|					ВТЭтапы.ЭтапПроизводства
	|				ИЗ
	|					ВТЭтапы)
	|			ИЛИ ВТСвязиЭтапов.СледующийЭтап В
	|				(ВЫБРАТЬ
	|					ВТЭтапы.ЭтапПроизводства
	|				ИЗ
	|					ВТЭтапы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства,
	|	СледующийЭтап";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = РегистрыСведений.ГрафикЭтаповПроизводства2_2.ТекстЗапросаВТСрокиВыполненияЭтапов(
		"ВТЗависимости", "&ПолеВТЗависимостиСинонимПредшественник");
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТЗависимости1.ЭтапПроизводства КАК ЭтапПроизводства
	|ПОМЕСТИТЬ ВТПервыеЭтапыУББВ
	|ИЗ
	|	ВТЗависимости КАК ВТЗависимости1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗависимости КАК ВТЗависимости2
	|		ПО ВТЗависимости1.ЭтапПроизводства = ВТЗависимости2.СледующийЭтап
	|			И (ВЫРАЗИТЬ(ВТЗависимости2.ЭтапПроизводства КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства = ВЫРАЗИТЬ(ВТЗависимости2.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства)
	|ГДЕ
	|	ВТЗависимости1.ЭтапПроизводства В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.ЭтапПроизводства
	|			ИЗ
	|				ВТЭтапы
	|			ГДЕ
	|				НЕ ВТЭтапы.ПланироватьРаботуВидовРабочихЦентров)
	|	И ВТЗависимости2.СледующийЭтап ЕСТЬ NULL
	|	И &ИспользуетсяПланированиеПоПроизводственнымРесурсам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗависимости1.ЭтапПроизводства
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТЗависимости.СледующийЭтап КАК ЭтапПроизводства
	|ПОМЕСТИТЬ ВТСмещениеЭтаповУББВ
	|ИЗ
	|	ВТЗависимости КАК ВТЗависимости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПервыеЭтапыУББВ КАК ВТПервыеЭтапыУББВ
	|		ПО ВТЗависимости.ЭтапПроизводства = ВТПервыеЭтапыУББВ.ЭтапПроизводства
	|			И (ВЫРАЗИТЬ(ВТЗависимости.ЭтапПроизводства КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства = ВЫРАЗИТЬ(ВТЗависимости.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства)
	|ГДЕ
	|	ВТЗависимости.СледующийЭтап В
	|		(ВЫБРАТЬ
	|			ВТЭтапы.ЭтапПроизводства
	|		ИЗ
	|			ВТЭтапы
	|		ГДЕ
	|			ВТЭтапы.ПланироватьРаботуВидовРабочихЦентров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(&ПолеВТЗависимостиПредшественник КАК Документ.ЭтапПроизводства2_2) КАК ЭтапПроизводства,
	|	ГрафикЭтапов.НачалоЭтапа КАК НачалоЭтапа,
	|	ВЫБОР
	|		КОГДА ГрафикЭтапов.ОкончаниеЭтапа ЕСТЬ НЕ NULL 
	|			ТОГДА ДОБАВИТЬКДАТЕ(ГрафикЭтапов.ОкончаниеЭтапа, СЕКУНДА, 1)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОкончаниеЭтапа,
	|	ВЫБОР
	|		КОГДА ГрафикЭтапов.ЭтапПроизводства ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГрафикОтсутствует
	|ПОМЕСТИТЬ ВТЭтапыПредшественники
	|ИЗ
	|	ВТЭтапы КАК ВТЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗависимости КАК ВТЗависимости
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокиВыполненияЭтапов КАК ГрафикЭтапов
	|			ПО (&ПолеВТЗависимостиПредшественник = ГрафикЭтапов.ЭтапПроизводства)
	|		ПО (ВТЭтапы.ЭтапПроизводства = &ПолеВТЗависимостиПоследователь)
	|ГДЕ
	|	НЕ &ПолеВТЗависимостиПредшественник В
	|				(ВЫБРАТЬ
	|					ВТЭтапы.ЭтапПроизводства
	|				ИЗ
	|					ВТЭтапы)
	|	И &ПолеВТЗависимостиСтатусПредшественник <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭтапы.ЭтапПроизводства КАК ЭтапПроизводства
	|ПОМЕСТИТЬ ВТВсеЭтапы
	|ИЗ
	|	ВТЭтапы КАК ВТЭтапы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТЭтапыПредшественники.ЭтапПроизводства
	|ИЗ
	|	ВТЭтапыПредшественники КАК ВТЭтапыПредшественники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка                                 КАК ЭтапПроизводства,
	|	ЭтапПроизводства2_2.ПроизводствоНаСтороне                  КАК ПроизводствоНаСтороне,
	|	ЭтапПроизводства2_2.ПартияПроизводства                     КАК ПартияПроизводства,
	|	ЭтапПроизводства2_2.Непрерывный                            КАК Непрерывный,
	|	ЕСТЬNULL(ВТЭтапы.ПланироватьРаботуВидовРабочихЦентров,
	|		ЭтапПроизводства2_2.ПланироватьРаботуВидовРабочихЦентров
	|		И &ИспользуетсяПланированиеПоПроизводственнымРесурсам) КАК ПланироватьРаботуВидовРабочихЦентров,
	|	ЭтапПроизводства2_2.ПорядокРаботыВидовРабочихЦентров       КАК ПорядокРаботыВидовРабочихЦентров,
	|	ЭтапПроизводства2_2.ДлительностьЭтапа                      КАК ДлительностьЭтапа,
	|	ВЫБОР
	|		КОГДА ЭтапПроизводства2_2.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
	|			ТОГДА &ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ
	|		ИНАЧЕ ЭтапПроизводства2_2.ЕдиницаИзмеренияДлительностиЭтапа
	|	КОНЕЦ                                                      КАК ЕдиницаИзмеренияДлительностиЭтапа,
	|	ЭтапПроизводства2_2.ПредварительныйБуфер                   КАК ПредварительныйБуфер,
	|	ЭтапПроизводства2_2.ЗавершающийБуфер                       КАК ЗавершающийБуфер,
	|	ЭтапПроизводства2_2.ЕдиницаИзмеренияПредварительногоБуфера КАК ЕдиницаИзмеренияПредварительногоБуфера,
	|	ЭтапПроизводства2_2.ЕдиницаИзмеренияЗавершающегоБуфера     КАК ЕдиницаИзмеренияЗавершающегоБуфера,
	|	ЕСТЬNULL(ВТЗначимыеБуферы.МинимальныйЗначимыйБуфер, 0)     КАК МинимальныйЗначимыйБуфер,
	|	ЭтапПроизводства2_2.НаименованиеЭтапа                      КАК НаименованиеЭтапа,
	|	ЭтапПроизводства2_2.Номер                                  КАК НомерЭтапа,
	|	ВЫБОР
	|		КОГДА ЭтапПроизводства2_2.КоличествоНаЕдиницуПартииВыпуска = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЭтапПроизводства2_2.КоличествоУпаковокПлан
	|				* ЕСТЬNULL(&КоэффициентУпаковкаПлан, 1)
	|				/ ЭтапПроизводства2_2.КоличествоНаЕдиницуПартииВыпуска
	|	КОНЕЦ                                                      КАК КоличествоПартий,
	|	ЭтапПроизводства2_2.Подразделение                          КАК Подразделение,
	|	ЭтапПроизводства2_2.Подразделение.ИнтервалПланирования     КАК ИнтервалПланирования,
	|	ЭтапПроизводства2_2.Подразделение.НачалоИнтервалаПланирования    КАК НачалоИнтервалаПланирования,
	|	ЭтапПроизводства2_2.Подразделение.ОкончаниеИнтервалаПланирования КАК ОкончаниеИнтервалаПланирования,
	|	ЭтапПроизводства2_2.РучноеРазмещениеВГрафике               КАК РучноеРазмещениеВГрафике,
	|	0                                                          КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭтапПроизводства2_2.ПланироватьНеРанее) = ТИП(ДАТА)
	|			ТОГДА ЭтапПроизводства2_2.ПланироватьНеРанее
	|		КОГДА НЕ &РазмещениеКНачалу
	|				И ЭтапПроизводства2_2.ПланироватьНеРанее ССЫЛКА Документ.ЭтапПроизводства2_2
	|				И ЭтапПроизводства2_2.ПланироватьНеРанее <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|				И НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						ВТЭтапы КАК Этапы
	|					ГДЕ
	|						Этапы.ЭтапПроизводства = ЭтапПроизводства2_2.ПланироватьНеРанее)
	|			ТОГДА ЕСТЬNULL(ГрафикПланироватьНеРанее.ОкончаниеЭтапа, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ                                                      КАК ПланироватьНеРанее,
	|	ВТСмещениеЭтаповУББВ.ЭтапПроизводства ЕСТЬ НЕ NULL         КАК СмещатьПредшествующиеЭтапыУББВ,
	|	ВТЭтапы.ЭтапПроизводства ЕСТЬ НЕ NULL                      КАК Размещать,
	|	&ПолеСортировкиПоДлительности                              КАК ПолеСортировкиПоДлительности
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
	|		ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначимыеБуферы КАК ВТЗначимыеБуферы
	|		ПО ЭтапПроизводства2_2.Ссылка = ВТЗначимыеБуферы.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСмещениеЭтаповУББВ КАК ВТСмещениеЭтаповУББВ
	|		ПО ЭтапПроизводства2_2.Ссылка = ВТСмещениеЭтаповУББВ.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапы КАК ВТЭтапы
	|		ПО ЭтапПроизводства2_2.Ссылка = ВТЭтапы.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПланироватьНеРанее
	|		ПО ЭтапПроизводства2_2.ПланироватьНеРанее = ГрафикПланироватьНеРанее.ЭтапПроизводства
	|			И ГрафикПланироватьНеРанее.СтатусГрафика = &СтатусГрафика
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТВсеЭтапы.ЭтапПроизводства
	|			ИЗ
	|				ВТВсеЭтапы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	&ПолеСортировкиПоДлительности УБЫВ,
	|	НормативныйГрафикЭтаповПроизводства.Ресурсоемкость УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТЗависимости.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ВТЗависимости.СледующийЭтап    КАК СледующийЭтап
	|ИЗ
	|	ВТЗависимости КАК ВТЗависимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭтапыПредшественники.ЭтапПроизводства                    КАК ЭтапПроизводства,
	|	ВТЭтапыПредшественники.НачалоЭтапа                         КАК НачалоЭтапа,
	|	ВТЭтапыПредшественники.ОкончаниеЭтапа                      КАК ОкончаниеЭтапа,
	|	ВТЭтапыПредшественники.ГрафикОтсутствует                   КАК ГрафикОтсутствует,
	|	ВТЭтапыПредшественники.ЭтапПроизводства.Распоряжение       КАК Распоряжение,
	|	ВТЭтапыПредшественники.ЭтапПроизводства.Распоряжение.Номер КАК РаспоряжениеНомер
	|ИЗ
	|	ВТЭтапыПредшественники КАК ВТЭтапыПредшественники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства                КАК ЭтапПроизводства,
	|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа                     КАК НачалоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа                  КАК ОкончаниеЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеПредварительногоБуфера КАК ОкончаниеПредварительногоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера        КАК НачалоЗавершающегоБуфера
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.ЭтапПроизводства
	|			ИЗ
	|				ВТЭтапы)
	|	И ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.РучноеРазмещениеВГрафике
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2ЗанятостьВидовРабочихЦентров.Ссылка            КАК ЭтапПроизводства,
	|	ЭтапПроизводства2_2ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ЭтапПроизводства2_2ЗанятостьВидовРабочихЦентров.ДатаИнтервала     КАК ДатаИнтервала,
	|	ЭтапПроизводства2_2ЗанятостьВидовРабочихЦентров.Количество        КАК Занято
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЗанятостьВидовРабочихЦентров КАК ЭтапПроизводства2_2ЗанятостьВидовРабочихЦентров
	|ГДЕ
	|	ЭтапПроизводства2_2ЗанятостьВидовРабочихЦентров.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.ЭтапПроизводства
	|			ИЗ
	|				ВТЭтапы)
	|	И ЭтапПроизводства2_2ЗанятостьВидовРабочихЦентров.Ссылка.РучноеРазмещениеВГрафике";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	Если ПараметрыПланирования.РазмещениеКНачалу Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеСортировкиПоДлительности",
			"НормативныйГрафикЭтаповПроизводства.ДлительностьДоВыпуска");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиПредшественник",
			"ВТЗависимости.ЭтапПроизводства");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиСинонимПредшественник",
			"ЭтапПроизводства");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиСтатусПредшественник",
			"ВТЗависимости.ЭтапПроизводства.Статус");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиПоследователь",
			"ВТЗависимости.СледующийЭтап");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеСортировкиПоДлительности",
			"НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиПредшественник",
			"ВТЗависимости.СледующийЭтап");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиСинонимПредшественник",
			"СледующийЭтап");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиСтатусПредшественник",
			"ВТЗависимости.СледующийЭтап.Статус");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеВТЗависимостиПоследователь",
			"ВТЗависимости.ЭтапПроизводства");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&КоэффициентУпаковкаПлан",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЭтапПроизводства2_2.УпаковкаПлан",
			"ЭтапПроизводства2_2.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("РазмещениеКНачалу", ПараметрыПланирования.РазмещениеКНачалу);
	Запрос.УстановитьПараметр("ОтборПоЭтапам", ЗначениеЗаполнено(МассивЭтапов));
	Запрос.УстановитьПараметр("Этапы", ?(ЗначениеЗаполнено(МассивЭтапов), МассивЭтапов, Новый Массив));
	Запрос.УстановитьПараметр("ПолноеПерепланирование", ПараметрыПланирования.ПолноеПерепланирование);
	Запрос.УстановитьПараметр("НомерЗаданияКРасчетуГрафикаПроизводства",
		ПараметрыПланирования.НомерЗаданияКРасчетуГрафикаПроизводства);
	Запрос.УстановитьПараметр("ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ",
		Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ());
	Запрос.УстановитьПараметр("СтатусГрафика",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("СтатусыЭтапа",
		Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован());
	Запрос.УстановитьПараметр("ИспользуетсяПланированиеПоПроизводственнымРесурсам",
		ИспользуетсяПланированиеПоПроизводственнымРесурсам());
	Запрос.УстановитьПараметр("ОтменитьРучныеИзмененияГрафика",
		ПараметрыПланирования.ОтменитьРучныеИзмененияГрафика);
	Запрос.УстановитьПараметр("СтатусГрафика",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	Возврат Запрос;
	
КонецФункции

Процедура ДобавитьСлужебныеКолонкиВЭтапы(Этапы)
	
	Этапы.Колонки.Добавить("ДатаРазмещенияПредшествующих", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Этапы.Колонки.Добавить("Размещен", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

Процедура ЗаполнитьДатуРазмещенияПредшествующихЭтапов(ПараметрыПланирования, ПредшествующиеЭтапы)
	
	Для каждого Строка Из ПредшествующиеЭтапы Цикл
		
		Этап = ПараметрыПланирования.Этапы.Найти(Строка.ЭтапПроизводства, "ЭтапПроизводства");
		Если НЕ Этап = Неопределено Тогда
			
			ЗаполнитьДатуРазмещенияУПоследующихЭтапов(
				ПараметрыПланирования,
				Этап,
				Строка.НачалоЭтапа,
				Строка.ОкончаниеЭтапа);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьИсполнителиЭтапов(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.Ссылка КАК ЭтапПроизводства,
	|	ВидыРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ВидыРабочихЦентров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыРабочихЦентров.ВремяРаботы КАК ВремяРаботы,
	|	ВидыРабочихЦентров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТИсполнители
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Ссылка В(&ЭтапыПроизводства)
	|	И ВидыРабочихЦентров.Использовать
	|	И &ИспользуетсяПланированиеПоПроизводственнымРесурсам
	|	И (ВидыРабочихЦентров.Ссылка.ПланироватьРаботуВидовРабочихЦентров
	|			ИЛИ ВидыРабочихЦентров.Ссылка.РучноеРазмещениеВГрафике
	|				И &ОтменитьРучныеИзмененияГрафика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АльтернативныеВидыРабочихЦентров.Ссылка,
	|	АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра,
	|	АльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения,
	|	АльтернативныеВидыРабочихЦентров.ВремяРаботы,
	|	ВидыРабочихЦентров.НомерСтроки
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК АльтернативныеВидыРабочихЦентров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|		ПО АльтернативныеВидыРабочихЦентров.Ссылка = ВидыРабочихЦентров.Ссылка
	|			И АльтернативныеВидыРабочихЦентров.КлючСвязиВидыРабочихЦентров = ВидыРабочихЦентров.КлючСвязи
	|ГДЕ
	|	АльтернативныеВидыРабочихЦентров.Ссылка В(&ЭтапыПроизводства)
	|	И АльтернативныеВидыРабочихЦентров.Использовать
	|	И &ИспользуетсяПланированиеПоПроизводственнымРесурсам
	|	И (АльтернативныеВидыРабочихЦентров.Ссылка.ПланироватьРаботуВидовРабочихЦентров
	|			ИЛИ АльтернативныеВидыРабочихЦентров.Ссылка.РучноеРазмещениеВГрафике
	|				И &ОтменитьРучныеИзмененияГрафика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсполнители.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ВТИсполнители.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ВЫБОР
	|		КОГДА &НеограниченныйПаркОборудования
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВТИсполнители.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
	|	КОНЕЦ КАК УчитыватьДоступность,
	|	0 КАК ГрафикРаботы,
	|	ВТИсполнители.ЭтапПроизводства.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВЫБОР
	|		КОГДА &КруглосуточнаяРаботаБезВыходных 
	|			ТОГДА ВЫБОР ВТИсполнители.ЭтапПроизводства.Подразделение.ИнтервалПланирования
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|					ТОГДА &МаксимальнаяДоступностьДень
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|					ТОГДА &МаксимальнаяДоступностьНеделя
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|					ТОГДА &МаксимальнаяДоступностьМесяц
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|					ТОГДА &МаксимальнаяДоступностьЧас
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР ВТИсполнители.ВидРабочегоЦентра.ЕдиницаИзмеренияДоступностиРЦ
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|					ТОГДА ВТИсполнители.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 60
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|					ТОГДА ВТИсполнители.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 3600
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|					ТОГДА ВТИсполнители.ВидРабочегоЦентра.МаксимальнаяДоступностьРЦ * 86400
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК МаксимальнаяДоступность,
	|	ВЫБОР ВТИсполнители.ЕдиницаИзмерения
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ВТИсполнители.ВремяРаботы * 60
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ВТИсполнители.ВремяРаботы * 3600
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ВТИсполнители.ВремяРаботы * 86400
	|		ИНАЧЕ ВТИсполнители.ВремяРаботы
	|	КОНЕЦ КАК Время,
	|	ВТИсполнители.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеИсполнителей
	|ИЗ
	|	ВТИсполнители КАК ВТИсполнители
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	КОЛИЧЕСТВО(РабочиеЦентры.Ссылка) КАК КоличествоРабочихЦентров
	|ПОМЕСТИТЬ ВТКоличествоРЦ
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.ВидРабочегоЦентра В
	|			(ВЫБРАТЬ
	|				ВТИсполнители.ВидРабочегоЦентра
	|			ИЗ
	|				ВТИсполнители
	|			ГДЕ
	|				ВТИсполнители.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеЦентры.ВидРабочегоЦентра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеИсполнителей.НомерСтроки КАК НомерСтроки,
	|	ВТДанныеИсполнителей.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ВТДанныеИсполнителей.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ВТДанныеИсполнителей.УчитыватьДоступность КАК УчитыватьДоступность,
	|	ВТДанныеИсполнителей.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТДанныеИсполнителей.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВТДанныеИсполнителей.МаксимальнаяДоступность КАК МаксимальнаяДоступность,
	|	ВТДанныеИсполнителей.Время КАК Время,
	|	ВЫБОР
	|		КОГДА ВТДанныеИсполнителей.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|			ТОГДА ВТДанныеИсполнителей.ВидРабочегоЦентра.КоличествоРабочихЦентров
	|		ИНАЧЕ ЕСТЬNULL(ВТКоличествоРЦ.КоличествоРабочихЦентров, 0)
	|	КОНЕЦ КАК КоличествоРабочихЦентров
	|ИЗ
	|	ВТДанныеИсполнителей КАК ВТДанныеИсполнителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоРЦ КАК ВТКоличествоРЦ
	|		ПО ВТДанныеИсполнителей.ВидРабочегоЦентра = ВТКоличествоРЦ.ВидРабочегоЦентра
	|ГДЕ
	|	ВТДанныеИсполнителей.ЭтапПроизводства.ПорядокРаботыВидовРабочихЦентров = &Последовательно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТДанныеИсполнителей.НомерСтроки) КАК НомерСтроки,
	|	ВТДанныеИсполнителей.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ВТДанныеИсполнителей.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ВТДанныеИсполнителей.УчитыватьДоступность КАК УчитыватьДоступность,
	|	ВТДанныеИсполнителей.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТДанныеИсполнителей.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВТДанныеИсполнителей.МаксимальнаяДоступность КАК МаксимальнаяДоступность,
	|	СУММА(ВТДанныеИсполнителей.Время) КАК Время,
	|	ВЫБОР
	|		КОГДА ВТДанныеИсполнителей.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|			ТОГДА ВТДанныеИсполнителей.ВидРабочегоЦентра.КоличествоРабочихЦентров
	|		ИНАЧЕ ЕСТЬNULL(ВТКоличествоРЦ.КоличествоРабочихЦентров, 0)
	|	КОНЕЦ КАК КоличествоРабочихЦентров
	|ИЗ
	|	ВТДанныеИсполнителей КАК ВТДанныеИсполнителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоРЦ КАК ВТКоличествоРЦ
	|		ПО ВТДанныеИсполнителей.ВидРабочегоЦентра = ВТКоличествоРЦ.ВидРабочегоЦентра
	|ГДЕ
	|	ВТДанныеИсполнителей.ЭтапПроизводства.ПорядокРаботыВидовРабочихЦентров <> &Последовательно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеИсполнителей.ЭтапПроизводства,
	|	ВТДанныеИсполнителей.ВидРабочегоЦентра,
	|	ВТДанныеИсполнителей.УчитыватьДоступность,
	|	ВТДанныеИсполнителей.ГрафикРаботы,
	|	ВТДанныеИсполнителей.ИнтервалПланирования,
	|	ВТДанныеИсполнителей.МаксимальнаяДоступность,
	|	ВЫБОР
	|		КОГДА ВТДанныеИсполнителей.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|			ТОГДА ВТДанныеИсполнителей.ВидРабочегоЦентра.КоличествоРабочихЦентров
	|		ИНАЧЕ ЕСТЬNULL(ВТКоличествоРЦ.КоличествоРабочихЦентров, 0)
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапПроизводства,
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЭтапыПроизводства",
		МассивРазмещаемыхЭтапов(ПараметрыПланирования));
	Запрос.УстановитьПараметр("НеограниченныйПаркОборудования",
		ПараметрыПланирования.НеограниченныйПаркОборудования);
	Запрос.УстановитьПараметр("ИспользуетсяПланированиеПоПроизводственнымРесурсам",
		ИспользуетсяПланированиеПоПроизводственнымРесурсам());
	Запрос.УстановитьПараметр("ОтменитьРучныеИзмененияГрафика",
		ПараметрыПланирования.ОтменитьРучныеИзмененияГрафика);
	Запрос.УстановитьПараметр("Последовательно", Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно);
	Запрос.УстановитьПараметр("КруглосуточнаяРаботаБезВыходных", ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных);
	Запрос.УстановитьПараметр("МаксимальнаяДоступностьДень", 
		ИнтервалПланированияВСекунды(Перечисления.ТочностьГрафикаПроизводства.День));
	Запрос.УстановитьПараметр("МаксимальнаяДоступностьНеделя",
		ИнтервалПланированияВСекунды(Перечисления.ТочностьГрафикаПроизводства.Неделя));
	Запрос.УстановитьПараметр("МаксимальнаяДоступностьМесяц",
		ИнтервалПланированияВСекунды(Перечисления.ТочностьГрафикаПроизводства.Месяц));
	Запрос.УстановитьПараметр("МаксимальнаяДоступностьЧас",
		ИнтервалПланированияВСекунды(Перечисления.ТочностьГрафикаПроизводства.Час));
	
	УстановитьПривилегированныйРежим(Истина);
	ИсполнителиЭтапов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Индекс = 0;
	Пока Индекс < ИсполнителиЭтапов.Количество()-1 Цикл
		Строка = ИсполнителиЭтапов[Индекс];
		СледующаяСтрока = ИсполнителиЭтапов[Индекс+1];
		Если Строка.ЭтапПроизводства = СледующаяСтрока.ЭтапПроизводства
			И Строка.ВидРабочегоЦентра = СледующаяСтрока.ВидРабочегоЦентра Тогда
			СледующаяСтрока.Время = СледующаяСтрока.Время + Строка.Время;
			ИсполнителиЭтапов.Удалить(Строка);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВТаблицуПорядковыйНомерСтрок(ИсполнителиЭтапов);
	
	ИсполнителиЭтапов.Индексы.Добавить("ЭтапПроизводства");
	
	ПараметрыПланирования.ИсполнителиЭтапов = ИсполнителиЭтапов;
	
КонецПроцедуры

Процедура ПрочитатьДатыОбеспечения(ПараметрыПланирования)
	
	Если ПараметрыПланирования.ВсеМатериалыВНаличии Тогда
		Возврат;
	КонецЕсли;
	
	ДатыОбеспечения = УправлениеПроизводством.РассчитатьОграниченияГрафикаПроизводстваПоМатериалам(
		ПараметрыПланирования.Распоряжение);
	
	Если ДатыОбеспечения <> Неопределено Тогда
		ДатыОбеспечения.Индексы.Добавить("ЭтапПроизводства");
	КонецЕсли;
	
	ПараметрыПланирования.ДатыОбеспечения = ДатыОбеспечения;
	
КонецПроцедуры

Процедура ИнициализироватьПараметрГрафикПроизводства(ПараметрыПланирования)
	
	ГрафикПроизводства = Новый ТаблицаЗначений;
	
	Реквизиты = РеквизитыГрафикаПроизводства();
	Для каждого Реквизит Из Реквизиты Цикл
		ГрафикПроизводства.Колонки.Добавить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	ГрафикПроизводства.Индексы.Добавить("ЭтапПроизводства");
	
	ПараметрыПланирования.ГрафикПроизводства = ГрафикПроизводства;
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * РазмещениеВыпуска - ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства -
// * ОграниченПоОборудованию - Булево -
// * ОграниченПоМатериалам - Булево -
// * ОграничиваетСрокВыпуска - Булево -
// * НаКритическомПути - Булево -
// * НачалоСледующегоЭтапа - Дата -
// * НачалоЗавершающегоБуфера - Дата -
// * ОкончаниеПредварительногоБуфера - Дата -
// * ОкончаниеЭтапа - Дата -
// * НачалоЭтапа - Дата -
// * ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 -
Функция РеквизитыГрафикаПроизводства()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЭтапПроизводства", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Результат.Вставить("НачалоЭтапа", Новый ОписаниеТипов("Дата"));
	Результат.Вставить("ОкончаниеЭтапа", Новый ОписаниеТипов("Дата"));
	Результат.Вставить("ОкончаниеПредварительногоБуфера", Новый ОписаниеТипов("Дата"));
	Результат.Вставить("НачалоЗавершающегоБуфера", Новый ОписаниеТипов("Дата"));
	Результат.Вставить("НачалоСледующегоЭтапа", Новый ОписаниеТипов("Дата"));
	Результат.Вставить("НаКритическомПути", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ОграничиваетСрокВыпуска", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ОграниченПоМатериалам", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ОграниченПоОборудованию", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("РазмещениеВыпуска",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПривязкиОперацийПроизводства"));
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьПараметрЗагрузкаВРЦ(ПараметрыПланирования)
	
	ПараметрыПланирования.ЗагрузкаВРЦ = ИнициализироватьТаблицуУчетаЗагрузкиВРЦ();
	
КонецПроцедуры

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// Возвращаемое значение:
// 	Структура - Описание:
// * РазмещенныеЭтапы - Массив -
// * Оповещения - Массив -
// * Ошибки - см. ИнициализироватьОшибкиПланирования
// * ЕстьОшибки - Булево -
// * ГрафикЗапланирован - Булево -
Функция ИнициализироватьПараметрРезультатыПланирования(ПараметрыПланирования)
	
	РезультатыПланирования = Новый Структура;
	РезультатыПланирования.Вставить("ГрафикЗапланирован", Ложь);
	РезультатыПланирования.Вставить("СтатусГрафика", ПараметрыПланирования.СтатусГрафика);
	РезультатыПланирования.Вставить("ЕстьОшибки", Ложь);
	РезультатыПланирования.Вставить("Ошибки", ИнициализироватьОшибкиПланирования());
	РезультатыПланирования.Вставить("Оповещения", Новый Массив);
	РезультатыПланирования.Вставить("РазмещенныеЭтапы", Новый Массив);
	РезультатыПланирования.Вставить("КоличествоДанных", 0);
	
	Возврат РезультатыПланирования;
	
КонецФункции

Процедура ПрочитатьРасписаниеББВ(ПараметрыПланирования, Начало = Неопределено, Окончание = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура("УчитыватьДоступность", Ложь);
	Исполнители = ПараметрыПланирования.ИсполнителиЭтапов.НайтиСтроки(СтруктураПоиска);
	Если Исполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРЦ = Новый Массив;
	Для каждого Строка Из Исполнители Цикл
		ВидыРЦ.Добавить(Строка.ВидРабочегоЦентра);
	КонецЦикла;
	
	ГрафикиСсылки = ПроизводствоСервер.ГрафикиРаботыВидовРЦ(ВидыРЦ);
	
	Графики = Новый ТаблицаЗначений;
	Графики.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Графики.Колонки.Добавить("ГрафикРаботыСсылка", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	Графики.Колонки.Добавить("ИнтервалПланирования", Новый ОписаниеТипов("ПеречислениеСсылка.ТочностьГрафикаПроизводства"));
	
	Сч = 1;
	Для каждого Строка Из Исполнители Цикл
		
		СтрокиСсылки = ГрафикиСсылки.НайтиСтроки(Новый Структура("Ссылка", Строка.ВидРабочегоЦентра));
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ГрафикРаботыСсылка", СтрокиСсылки[0].ГрафикРаботы);
		СтруктураПоиска.Вставить("ИнтервалПланирования", Строка.ИнтервалПланирования);
		СтрокиГрафикаПоСсылке = Графики.НайтиСтроки(СтруктураПоиска);
		
		ГрафикРаботы = 0;
		
		// Поиск кода графика, совпадающего по составу графиков
		Для каждого СтрокаПоСсылке Из СтрокиГрафикаПоСсылке Цикл
			
			СтрокиГрафикаПоКоду = Графики.НайтиСтроки(Новый Структура("ГрафикРаботы", СтрокаПоСсылке.ГрафикРаботы));
			
			Если СтрокиСсылки.Количество() = СтрокиГрафикаПоКоду.Количество() Тогда
				
				ГрафикиИдентичны = Истина;
				
				Если СтрокиСсылки.Количество() > 1 Тогда
					Для каждого СтрокаСсылка Из СтрокиСсылки Цикл
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("ГрафикРаботы", СтрокаПоСсылке.ГрафикРаботы);
						СтруктураПоиска.Вставить("ГрафикРаботыСсылка", СтрокаСсылка.ГрафикРаботы);
						СтруктураПоиска.Вставить("ИнтервалПланирования", Строка.ИнтервалПланирования);
						
						Если Графики.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							ГрафикиИдентичны = Ложь;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				Если ГрафикиИдентичны Тогда
					ГрафикРаботы = СтрокаПоСсылке.ГрафикРаботы;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавление нового кода
		Если ГрафикРаботы = 0 Тогда
			
			ГрафикРаботы = Сч;
			Сч = Сч + 1;
			
			Для каждого СтрокаСсылка Из СтрокиСсылки Цикл
				НоваяСтрока = Графики.Добавить();
				НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
				НоваяСтрока.ГрафикРаботыСсылка = СтрокаСсылка.ГрафикРаботы;
				НоваяСтрока.ИнтервалПланирования = Строка.ИнтервалПланирования;
			КонецЦикла;
			
		КонецЕсли;
		
		Строка.ГрафикРаботы = ГрафикРаботы;
		
	КонецЦикла;
	
	Если Начало = Неопределено ИЛИ Окончание = Неопределено Тогда
		
		Период = ПериодВыборкиКалендарныхДанных(ПараметрыПланирования);
		Начало = ?(Начало = Неопределено, Период.Начало, Начало);
		Окончание = ?(Окончание = Неопределено, Период.Окончание, Окончание);
		
	КонецЕсли;
	
	РасписаниеББВ = РасписаниеББВ(Графики, Начало, Окончание); //ТаблицаЗначений - 
	
	ДобавитьВТаблицуПорядковыйНомерСтрок(РасписаниеББВ);
	
	РасписаниеББВ.Индексы.Добавить("ГрафикРаботы, ДатаИнтервала");
	РасписаниеББВ.Индексы.Добавить("ГрафикРаботы");
	
	ПараметрыПланирования.РасписаниеББВ = РасписаниеББВ;
	
КонецПроцедуры

Процедура ПрочитатьРасписаниеУББВ(ПараметрыПланирования)
	
	Если ПараметрыПланирования.КруглосуточнаяРаботаБезВыходных Тогда
		Возврат;
	КонецЕсли;
	
	Этапы = Новый Массив;
	Подразделения = Новый Массив;
	
	Для каждого Этап Из ПараметрыПланирования.Этапы Цикл
		Если ЭтоЭтапУББВ(Этап)
			ИЛИ ЗначениеЗаполнено(Этап.ПредварительныйБуфер)
			ИЛИ ЗначениеЗаполнено(Этап.ЗавершающийБуфер) Тогда
			
			Этапы.Добавить(Этап);
			
			Если НЕ Этап.ПроизводствоНаСтороне И Подразделения.Найти(Этап.Подразделение) = Неопределено Тогда
				Подразделения.Добавить(Этап.Подразделение);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Этапы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикиСсылки = Неопределено;
	Если Подразделения.Количество() > 0 Тогда
		ГрафикиСсылки = ПроизводствоСервер.ГрафикиРаботыПодразделений(Подразделения);
	КонецЕсли;
	
	Графики = Новый ТаблицаЗначений;
	Графики.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Графики.Колонки.Добавить("ГрафикРаботыСсылка", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	
	Сч = 1;
	ГрафикНаСтороне = Константы.ОсновнойКалендарьПредприятия.Получить();
	Для каждого Строка Из Этапы Цикл
		
		ГрафикРаботы = 0;
		
		Если Строка.ПроизводствоНаСтороне Тогда
			
			СтруктураПоиска = Новый Структура("ГрафикРаботыСсылка", ГрафикНаСтороне);
			СтрокиГрафикаПоСсылке = Графики.НайтиСтроки(СтруктураПоиска);
			
			// Поиск кода графика, совпадающего по составу графиков
			Для каждого СтрокаПоСсылке Из СтрокиГрафикаПоСсылке Цикл
				
				СтрокиГрафикаПоКоду = Графики.НайтиСтроки(Новый Структура("ГрафикРаботы", СтрокаПоСсылке.ГрафикРаботы));
				
				Если СтрокиГрафикаПоКоду.Количество() = 1 Тогда
					ГрафикРаботы = СтрокаПоСсылке.ГрафикРаботы;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Добавление нового кода
			Если ГрафикРаботы = 0 Тогда
				
				ГрафикРаботы = Сч;
				Сч = Сч + 1;
							
				НоваяСтрока = Графики.Добавить();
				НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
				НоваяСтрока.ГрафикРаботыСсылка = ГрафикНаСтороне;
				
			КонецЕсли;
			
		Иначе
			
			СтрокиСсылки = ГрафикиСсылки.НайтиСтроки(Новый Структура("Ссылка", Строка.Подразделение));
		
			СтруктураПоиска = Новый Структура("ГрафикРаботыСсылка", СтрокиСсылки[0].ГрафикРаботы);
			СтрокиГрафикаПоСсылке = Графики.НайтиСтроки(СтруктураПоиска);
			
			// Поиск кода графика, совпадающего по составу графиков
			Для каждого СтрокаПоСсылке Из СтрокиГрафикаПоСсылке Цикл
				
				СтрокиГрафикаПоКоду = Графики.НайтиСтроки(Новый Структура("ГрафикРаботы", СтрокаПоСсылке.ГрафикРаботы));
				
				Если СтрокиСсылки.Количество() = СтрокиГрафикаПоКоду.Количество() Тогда
					
					ГрафикиИдентичны = Истина;
					
					Если СтрокиСсылки.Количество() > 1 Тогда
						Для каждого СтрокаСсылка Из СтрокиСсылки Цикл
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("ГрафикРаботы", СтрокаПоСсылке.ГрафикРаботы);
							СтруктураПоиска.Вставить("ГрафикРаботыСсылка", СтрокаСсылка.ГрафикРаботы);
							
							Если Графики.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
								ГрафикиИдентичны = Ложь;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
					Если ГрафикиИдентичны Тогда
						ГрафикРаботы = СтрокаПоСсылке.ГрафикРаботы;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Добавление нового кода
			Если ГрафикРаботы = 0 Тогда
				
				ГрафикРаботы = Сч;
				Сч = Сч + 1;
				
				Для каждого СтрокаСсылка Из СтрокиСсылки Цикл
					НоваяСтрока = Графики.Добавить();
					НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
					НоваяСтрока.ГрафикРаботыСсылка = СтрокаСсылка.ГрафикРаботы;
				КонецЦикла;
				
			КонецЕсли;
		    
		КонецЕсли;
		
		Строка.ГрафикРаботы = ГрафикРаботы;
		
	КонецЦикла;
	
	Период = ПериодВыборкиКалендарныхДанных(ПараметрыПланирования);
	
	РасписаниеУББВ = РасписаниеУББВ(Графики, Период.Начало, Период.Окончание);
	ДобавитьВРасписаниеУББВИндексыИСлужебныеПоля(РасписаниеУББВ);
	
	ПараметрыПланирования.РасписаниеУББВ = РасписаниеУББВ;
	
КонецПроцедуры

Процедура ДобавитьВРасписаниеУББВИндексыИСлужебныеПоля(РасписаниеУББВ)
	
	ДобавитьВТаблицуПорядковыйНомерСтрок(РасписаниеУББВ);
	
	РасписаниеУББВ.Индексы.Добавить("ГрафикРаботы, ДатаГрафика");
	РасписаниеУББВ.Индексы.Добавить("ГрафикРаботы");
	
КонецПроцедуры

// Функция-конструктор для типизации
//
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений - содержит:
//		* Начало - Дата
Функция РасписаниеУББВКонструкторСтроки() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПрочитатьДоступностьВРЦ(ПараметрыПланирования)
	
	Если ПараметрыПланирования.НеограниченныйПаркОборудования
		ИЛИ ПараметрыПланирования.ИсполнителиЭтапов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапросДоступностьВРЦ(ПараметрыПланирования);
	ДоступностьВРЦ = Запрос.Выполнить().Выгрузить();
	
	ДобавитьВТаблицуПорядковыйНомерСтрок(ДоступностьВРЦ);
	
	ДоступностьВРЦ.Индексы.Добавить("ВидРабочегоЦентра, ДатаИнтервала");
	ДоступностьВРЦ.Индексы.Добавить("ВидРабочегоЦентра");
	
	ПараметрыПланирования.ДоступностьВРЦ = ДоступностьВРЦ;
	
КонецПроцедуры

Функция ДобавитьЗаписьВДоступностьВРЦ(ПараметрыПланирования, ЗначенияЗаполнения)
	
	ТаблицаДоступность = ПараметрыПланирования.ДоступностьВРЦ; // ТаблицаЗначений
	
	НоваяСтрока = ТаблицаДоступность.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
	НоваяСтрока.Доступно = 0;
	НоваяСтрока.Занято = 0;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ИнициализироватьЗапросДоступностьВРЦ(ПараметрыПланирования)
	
	МассивЭтапов = МассивРазмещаемыхЭтапов(ПараметрыПланирования);
	Период = ПериодВыборкиКалендарныхДанных(ПараметрыПланирования);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТДоступностьВидовРЦ(
		МенеджерВременныхТаблиц,
		"ВТДоступностьВидыРЦ",
		ПараметрыПланирования.ИсполнителиЭтапов.ВыгрузитьКолонку("ВидРабочегоЦентра"),
		МассивЭтапов,
		ТекущаяДатаСеанса(),
		Период.Окончание,
		ПараметрыПланирования);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Исполнитель КАК ВидРабочегоЦентра,
	|	ВложенныйЗапрос.Период КАК ДатаИнтервала,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Доступно > 0
	|			ТОГДА ВложенныйЗапрос.Доступно
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Доступно,
	|	ВложенныйЗапрос.Занято КАК Занято
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТДоступность.Исполнитель КАК Исполнитель,
	|		ТДоступность.ДатаИнтервала КАК Период,
	|		ВЫБОР
	|			КОГДА &ЗадействоватьРезервДоступности
	|				ТОГДА ТДоступность.КоличествоПриход - ТДоступность.КоличествоРасход
	|			ИНАЧЕ (ВЫРАЗИТЬ(ТДоступность.КоличествоПриход * (100 - ТДоступность.РезервДоступности) / 100 КАК ЧИСЛО(15, 0))) - ТДоступность.КоличествоРасход
	|		КОНЕЦ КАК Доступно,
	|		ТДоступность.КоличествоРасход КАК Занято
	|	ИЗ
	|		ВТДоступностьВидыРЦ КАК ТДоступность
	|	ГДЕ
	|		ТДоступность.КоличествоПриход > 0) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРабочегоЦентра,
	|	ДатаИнтервала");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗадействоватьРезервДоступности",
		ПараметрыПланирования.ЗадействоватьРезервДоступности);
	
	Возврат Запрос;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 -
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ДатаИнтервала - Дата -
// * Занято - Число -
Функция ИнициализироватьТаблицуУчетаЗагрузкиВРЦ()
	
	ЗагрузкаВРЦ = Новый ТаблицаЗначений;
	ЗагрузкаВРЦ.Колонки.Добавить("ЭтапПроизводства", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	ЗагрузкаВРЦ.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ЗагрузкаВРЦ.Колонки.Добавить("ДатаИнтервала", Новый ОписаниеТипов("Дата"));
	ЗагрузкаВРЦ.Колонки.Добавить("Занято", Новый ОписаниеТипов("Число"));
	
	Возврат ЗагрузкаВРЦ;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Описание - Строка -
// * Расшифровка - Структура -
// * Ключ - ЛюбаяСсылка -
// * СтатусГрафика - Число -
Функция ИнициализироватьОшибкиПланирования()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Расшифровка");
	Результат.Колонки.Добавить("Ключ");
	Результат.Колонки.Добавить("СтатусГрафика", Новый ОписаниеТипов("Число"));
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ТаблицаГрафики - ТаблицаЗначений - Описание:
// * ГрафикРаботы - Число -
// * ГрафикРаботыСсылка - СправочникСсылка.Календари -
// * ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства -
// * ГрафикРаботы - Число -
// * ГрафикРаботыСсылка - СправочникСсылка.Календари -
// * ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства -
// * ГрафикРаботы - Число -
// * ГрафикРаботыСсылка - СправочникСсылка.Календари -
// * ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства -
// * ГрафикРаботы - Число -
// * ГрафикРаботыСсылка - СправочникСсылка.Календари -
// * ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства -
// 	Начало - Неопределено - Описание
// 	Окончание - Неопределено - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание
Функция РасписаниеББВ(ТаблицаГрафики, Начало, Окончание)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(
		МенеджерВременныхТаблиц, ТаблицаГрафики.ВыгрузитьКолонку("ГрафикРаботыСсылка"), Начало, Окончание);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Графики.ГрафикРаботы,
	|	Графики.ГрафикРаботыСсылка,
	|	Графики.ИнтервалПланирования
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	&Графики КАК Графики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Графики.ГрафикРаботы КАК ГрафикРаботы,
	|	Графики.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВЫБОР Графики.ИнтервалПланирования
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|			ТОГДА НАЧАЛОПЕРИОДА(Расписание.ДатаГрафика, ДЕНЬ)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|			ТОГДА НАЧАЛОПЕРИОДА(Расписание.ДатаГрафика, НЕДЕЛЯ)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(Расписание.ДатаГрафика, МЕСЯЦ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИнтервала
	|ИЗ
	|	Графики КАК Графики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК Расписание
	|		ПО Графики.ГрафикРаботыСсылка = Расписание.ГрафикРаботы
	|ГДЕ
	|	Графики.ИнтервалПланирования В (ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День), ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя), ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботы,
	|	ДатаИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Графики.ГрафикРаботы КАК ГрафикРаботы,
	|	Графики.ИнтервалПланирования КАК ИнтервалПланирования,
	|	Расписание.ДатаГрафика КАК ДатаГрафика,
	|	ЕСТЬNULL(Расписание.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяНачала,
	|	ВЫБОР
	|		КОГДА Расписание.ВремяОкончания ЕСТЬ NULL 
	|				ИЛИ Расписание.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(Расписание.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59), СЕКУНДА) + 1
	|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(Расписание.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), Расписание.ВремяОкончания, СЕКУНДА)
	|	КОНЕЦ КАК Длительность
	|ИЗ
	|	Графики КАК Графики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК Расписание
	|		ПО Графики.ГрафикРаботыСсылка = Расписание.ГрафикРаботы
	|ГДЕ
	|	Графики.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботы,
	|	ДатаГрафика,
	|	ВремяНачала");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Графики", ТаблицаГрафики);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = МассивРезультатов[1].Выгрузить();//ТаблицаЗначений - 
	
	Выборка = МассивРезультатов[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Начало = Дата(Год(Выборка.ДатаГрафика), Месяц(Выборка.ДатаГрафика), День(Выборка.ДатаГрафика),
			Час(Выборка.ВремяНачала), Минута(Выборка.ВремяНачала), Секунда(Выборка.ВремяНачала));
		Окончание = Начало + Выборка.Длительность;
		
		Если НЕ Начало = НачалоЧаса(Начало) Тогда
			Начало = КонецЧаса(Начало) + 1;
		КонецЕсли;
		
		Пока Начало < Окончание Цикл
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаИнтервала = Начало;
			
			Начало = КонецЧаса(Начало) + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ТаблицаГрафики - ТаблицаЗначений - Описание:
// * ГрафикРаботы - Число -
// * ГрафикРаботыСсылка - СправочникСсылка.Календари -
// 	Начало - Дата - Описание
// 	Окончание - Дата - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - где:
// * ГрафикРаботы - Число -
// * ДатаГрафика - Дата -
// * ВремяНачала - Дата -
// * ВремяОкончания - Дата -
// * Начало - Дата -
// * Окончание - Дата -
Функция РасписаниеУББВ(ТаблицаГрафики, Начало, Окончание) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(
		МенеджерВременныхТаблиц,
		ТаблицаГрафики.ВыгрузитьКолонку("ГрафикРаботыСсылка"),
		Начало,
		Окончание);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Графики.ГрафикРаботы       КАК ГрафикРаботы,
		|	Графики.ГрафикРаботыСсылка КАК ГрафикРаботыСсылка
		|ПОМЕСТИТЬ Графики
		|ИЗ
		|	&Графики КАК Графики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Графики.ГрафикРаботы                                    КАК ГрафикРаботы,
		|	Расписание.ДатаГрафика                                  КАК ДатаГрафика,
		|	ЕСТЬNULL(Расписание.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1))    КАК ВремяНачала,
		|	ЕСТЬNULL(Расписание.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяОкончания,
		|	ВЫБОР
		|		КОГДА Расписание.ВремяОкончания ЕСТЬ NULL
		|				ИЛИ Расписание.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(Расписание.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59), СЕКУНДА) + 1
		|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(Расписание.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), Расписание.ВремяОкончания, СЕКУНДА)
		|	КОНЕЦ                                                   КАК Длительность
		|ИЗ
		|	Графики КАК Графики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК Расписание
		|		ПО Графики.ГрафикРаботыСсылка = Расписание.ГрафикРаботы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикРаботы,
		|	ДатаГрафика,
		|	ВремяНачала");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Графики", ТаблицаГрафики);
	
	Результат = Запрос.Выполнить().Выгрузить(); // ТаблицаЗначений -
	
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	
	Для каждого Строка Из Результат Цикл
		Строка.Начало = Дата(Год(Строка.ДатаГрафика), Месяц(Строка.ДатаГрафика), День(Строка.ДатаГрафика),
			Час(Строка.ВремяНачала), Минута(Строка.ВремяНачала), Секунда(Строка.ВремяНачала));
		Строка.Окончание = Строка.Начало + Строка.Длительность;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОшибкиОповещения

Процедура ЗафиксироватьОшибкуРазмещенияЭтапа(ПараметрыПланирования, Этап, ПараметрыРазмещения)
	
	КодОшибкиРазмещения = ПараметрыРазмещения.КодОшибкиРазмещения;
	
	Расшифровка = Новый Структура;
	Расшифровка.Вставить("КодОшибки", КодОшибкиРазмещения);
	
	Если КодОшибкиРазмещения = КодОшибкиДоступностьВРЦ() Тогда
		
		Причина = НСтр("ru = 'недостаточно доступного времени видов рабочих центров';
						|en = 'there is not enough available time of work center types'");
		Ключ = Этап.ЭтапПроизводства;
		
		Расшифровка.Вставить("ЭтапПроизводства", Этап.ЭтапПроизводства);
		Расшифровка.Вставить("Период", ПараметрыРазмещения.МоментРазмещения);
		Расшифровка.Вставить("Подразделение", Этап.Подразделение);
		
		ВидыРабочихЦентров = ВидыРабочийЦентровЭтапа(ПараметрыПланирования, Этап);
		Если ВидыРабочихЦентров.Количество() > 0 Тогда
			ВидРабочегоЦентра = ВидыРабочихЦентров[0].ВидРабочегоЦентра;
		Иначе
			ВидРабочегоЦентра = Неопределено;
		КонецЕсли;
		Расшифровка.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
		
	ИначеЕсли КодОшибкиРазмещения = КодОшибкиГрафикРаботыПодразделения() Тогда
		
		Причина = НСтр("ru = 'не определен график работы подразделения или данные графика не заполнены';
						|en = 'business unit work schedule is not specified or schedule data is not filled in'");
		Ключ = Этап.Подразделение;
		Расшифровка.Вставить("Подразделение", Этап.Подразделение);
		
	ИначеЕсли КодОшибкиРазмещения = КодОшибкиГрафикРаботыПредприятия() Тогда
		
		Причина = НСтр("ru = 'не определен график работы предприятия или данные графика не заполнены';
						|en = 'enterprise schedule is not specified or schedule data is not filled in'");
		Ключ = "ГрафикРаботыПредприятия";
		
	КонецЕсли;
	
	СтатусГрафика = ПараметрыПланирования.СтатусГрафика;
	СтруктураПоиска = Новый Структура("Ключ, СтатусГрафика", Ключ, СтатусГрафика);
	НайденныеСтроки = ПараметрыПланирования.РезультатыПланирования.Ошибки.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОбластьПланирования = ПредставлениеОбластиПланирования(СтатусГрафика);
		ПредставлениеЭтапа = ПредставлениеЭтапа(Этап.ЭтапПроизводства);
		
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При планировании %1 не размещен этап ""%2"" по причине: %3.';
					|en = 'When planning %1, stage %2 was not placed. Reason: %3.'"),
				ОбластьПланирования,
				ПредставлениеЭтапа,
				Причина);
		
		НоваяСтрока = ПараметрыПланирования.РезультатыПланирования.Ошибки.Добавить();
		НоваяСтрока.Описание = Описание;
		НоваяСтрока.Расшифровка = Расшифровка;
		НоваяСтрока.Ключ = Ключ;
		НоваяСтрока.СтатусГрафика = СтатусГрафика;
		
	КонецЕсли;
	
	ПараметрыПланирования.РезультатыПланирования.ЕстьОшибки = Истина;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкиОтсутствуетГрафикПредшествующихЭтапов(ПараметрыПланирования, ПредшествующиеЭтапы)
	
	Для каждого Строка Из ПредшествующиеЭтапы Цикл
		
		Если Строка.ГрафикОтсутствует Тогда
			
			Ключ = Строка.ЭтапПроизводства;
			СтатусГрафика = ПараметрыПланирования.СтатусГрафика;
			СтруктураПоиска = Новый Структура("Ключ, СтатусГрафика", Ключ, СтатусГрафика);
			НайденныеСтроки = ПараметрыПланирования.РезультатыПланирования.Ошибки.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ОбластьПланирования = ПредставлениеОбластиПланирования(СтатусГрафика);
				ПредставлениеЭтапа = ПредставлениеЭтапа(Строка.ЭтапПроизводства);
				НомерРаспоряжения = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Строка.РаспоряжениеНомер,
					Ложь,
					Истина);
				Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При планировании %1 возникла ошибка: отсутствует график предшествующего этапа ""%2"" (заказ № %3).';
						|en = 'An error occurred when planning %1: there is no schedule of the previous stage ""%2"" (order No. %3).'"),
					ОбластьПланирования,
					ПредставлениеЭтапа,
					НомерРаспоряжения);
				
				Расшифровка = Новый Структура;
				Расшифровка.Вставить("КодОшибки", КодОшибкиОтсутствуетГрафикПредшественника());
				Расшифровка.Вставить("ЭтапПроизводства", Строка.ЭтапПроизводства);
				Расшифровка.Вставить("Распоряжение", Строка.Распоряжение);
				
				НоваяСтрока = ПараметрыПланирования.РезультатыПланирования.Ошибки.Добавить();
				НоваяСтрока.Описание = Описание;
				НоваяСтрока.Расшифровка = Расшифровка;
				НоваяСтрока.Ключ = Ключ;
				НоваяСтрока.СтатусГрафика = СтатусГрафика;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПланирования.РезультатыПланирования.ЕстьОшибки = Истина;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуЕстьЦиклыВЦепочкеЭтапов(ПараметрыПланирования, ЭтапОшибка)
	
	Ключ = ПараметрыПланирования.Распоряжение;
	СтатусГрафика = ПараметрыПланирования.СтатусГрафика;
	ОбластьПланирования = ПредставлениеОбластиПланирования(СтатусГрафика);
	
	Если ЗначениеЗаполнено(ЭтапОшибка) Тогда
		
		ПредставлениеЭтапа = ПредставлениеЭтапа(ЭтапОшибка);
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При планировании %1 возникла ошибка: обнаружено зацикливание этапов производства на документе ""%2"".';
				|en = 'An error occurred when planning %1: production stage loop on the ""%2"" document detected.'"),
			ОбластьПланирования,
			ПредставлениеЭтапа);
		
	Иначе
		
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При планировании %1 возникла ошибка: обнаружено зацикливание этапов производства.';
				|en = 'An error occurred when planning %1: production stage loop detected.'"),
			ОбластьПланирования);
		
	КонецЕсли;
	
	Расшифровка = Новый Структура;
	Расшифровка.Вставить("КодОшибки", КодОшибкиЕстьЦиклыВЦепочкеЭтапов());
	Расшифровка.Вставить("ЭтапПроизводства", ЭтапОшибка);
	Расшифровка.Вставить("Распоряжение", ПараметрыПланирования.Распоряжение);
	
	НоваяСтрока = ПараметрыПланирования.РезультатыПланирования.Ошибки.Добавить();
	НоваяСтрока.Описание = Описание;
	НоваяСтрока.Расшифровка = Расшифровка;
	НоваяСтрока.Ключ = Ключ;
	НоваяСтрока.СтатусГрафика = СтатусГрафика;
	
КонецПроцедуры

Процедура ДобавитьОповещениеОбИзмененииНаправленияПланирования(ПараметрыПланирования)
	
	НомерРаспоряжения = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПланирования.Распоряжение, "Номер"),
		Ложь,
		Истина);
	
	Оповещение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При планировании заказа № %1 использован способ размещения выпуска ""К началу"".';
			|en = 'When planning order No.%1 the ""Backward"" production scheduling method was used.'"),
		НомерРаспоряжения);
	
	ПараметрыПланирования.РезультатыПланирования.Оповещения.Добавить(Оповещение);
	
КонецПроцедуры

Процедура ДобавитьОповещениеОтсутствуютЭтапыДляПланирования(ПараметрыПланирования)
	
	НомерРаспоряжения = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПланирования.Распоряжение, "Номер"),
		Ложь,
		Истина);
	
	Оповещение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отсутствуют этапы заказа № %1 для планирования.';
			|en = 'Stages of order No. %1 for planning are missing.'"),
		НомерРаспоряжения);
	
	ПараметрыПланирования.РезультатыПланирования.Оповещения.Добавить(Оповещение);
	
КонецПроцедуры

Функция ПредставлениеОбластиПланирования(СтатусГрафика)
	
	Если СтатусГрафика = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусМодельГрафика() Тогда
		Результат = НСтр("ru = 'модели';
						|en = 'models'");
	Иначе
		Результат = НСтр("ru = 'графика';
						|en = 'schedule'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СрокиВыпускаПродукции

Процедура ПрочитатьСрокиВыпускаПродукции(Параметры, АдресХранилища) Экспорт
	
	Результат = ИнициализироватьСрокиВыпускаПродукции();
	
	Распоряжение = Параметры.Распоряжение;
	ГрафикЗапланирован = Параметры.ГрафикЗапланирован;
	МодельЗапланирована = Параметры.МодельЗапланирована;
	
	ТекстЗапроса = ТекстЗапросаСрокиВыпускаПродукции(ГрафикЗапланирован, МодельЗапланирована);
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.ЗаказНаПроизводство2_2.СоздатьВТЭтапыОбеспечивающиеЗаказы(
		МенеджерВременныхТаблиц,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Распоряжение));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("ГрафикЗапланирован", ГрафикЗапланирован);
	Запрос.УстановитьПараметр("МодельЗапланирована", МодельЗапланирована);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("СтатусПредварительныйГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусПредварительныйГрафик());
	Запрос.УстановитьПараметр("СтатусМодельГрафика",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусМодельГрафика());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.ТипПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			
			НоваяСтрока.ДатаЗапускаГрафик = Выборка.НачалоПродукция;
			НоваяСтрока.ДатаВыпускаГрафик = Выборка.ОкончаниеРаспоряжение;
			НоваяСтрока.ДатаЗапускаМодель = Выборка.НачалоМодельПродукция;
			НоваяСтрока.ДатаВыпускаМодель = Выборка.ОкончаниеМодельРаспоряжение;
			
		Иначе
			
			НоваяСтрока.ДатаЗапускаГрафик = Выборка.НачалоРаспоряжение;
			НоваяСтрока.ДатаВыпускаГрафик = Выборка.ОкончаниеПродукция;
			НоваяСтрока.ДатаЗапускаМодель = Выборка.НачалоМодельРаспоряжение;
			НоваяСтрока.ДатаВыпускаМодель = Выборка.ОкончаниеМодельПродукция;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ИнициализироватьСрокиВыпускаПродукции()
	
	МассивТиповПолучатель = Новый Массив;
	МассивТиповПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТиповПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Результат.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Результат.Колонки.Добавить("Получатель", Новый ОписаниеТипов(МассивТиповПолучатель));
	Результат.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДатаЗапускаГрафик", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаВыпускаГрафик", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаЗапускаМодель", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаВыпускаМодель", Новый ОписаниеТипов("Дата"));
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСрокиВыпускаПродукции(ГрафикЗапланирован, МодельЗапланирована)
	
	Возврат 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ЭтапПроизводства КАК ЭтапПроизводства,
		|	МИНИМУМ(ВложенныйЗапрос.НачалоЭтапа) КАК НачалоЭтапа,
		|	МАКСИМУМ(ВложенныйЗапрос.ОкончаниеЭтапа) КАК ОкончаниеЭтапа,
		|	МИНИМУМ(ВложенныйЗапрос.НачалоЭтапаМодель) КАК НачалоЭтапаМодель,
		|	МАКСИМУМ(ВложенныйЗапрос.ОкончаниеЭтапаМодель) КАК ОкончаниеЭтапаМодель
		|ПОМЕСТИТЬ ВТГрафик
		|ИЗ
		|	(ВЫБРАТЬ
		|		РабочийГрафик.ЭтапПроизводства КАК ЭтапПроизводства,
		|		РабочийГрафик.НачалоЭтапа КАК НачалоЭтапа,
		|		РабочийГрафик.ОкончаниеЭтапа КАК ОкончаниеЭтапа,
		|		NULL КАК НачалоЭтапаМодель,
		|		NULL КАК ОкончаниеЭтапаМодель
		|	ИЗ
		|		РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК РабочийГрафик
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ПредварительныйГрафик
		|			ПО РабочийГрафик.ЭтапПроизводства = ПредварительныйГрафик.ЭтапПроизводства
		|				И (ПредварительныйГрафик.СтатусГрафика = &СтатусПредварительныйГрафик)
		|				И (&ГрафикЗапланирован)
		|	ГДЕ
		|		РабочийГрафик.Распоряжение = &Распоряжение
		|		И РабочийГрафик.СтатусГрафика = &СтатусРабочийГрафик
		|		И ПредварительныйГрафик.Распоряжение ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПредварительныйГрафик.ЭтапПроизводства,
		|		ПредварительныйГрафик.НачалоЭтапа,
		|		ПредварительныйГрафик.ОкончаниеЭтапа,
		|		NULL,
		|		NULL
		|	ИЗ
		|		РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ПредварительныйГрафик
		|	ГДЕ
		|		ПредварительныйГрафик.Распоряжение = &Распоряжение
		|		И ПредварительныйГрафик.СтатусГрафика = &СтатусПредварительныйГрафик
		|		И &ГрафикЗапланирован
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МодельГрафика.ЭтапПроизводства,
		|		NULL,
		|		NULL,
		|		МодельГрафика.НачалоЭтапа,
		|		МодельГрафика.ОкончаниеЭтапа
		|	ИЗ
		|		РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК МодельГрафика
		|	ГДЕ
		|		МодельГрафика.Распоряжение = &Распоряжение
		|		И МодельГрафика.СтатусГрафика = &СтатусМодельГрафика
		|		И &МодельЗапланирована) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ЭтапПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТГрафик.НачалоЭтапа) КАК Начало,
		|	МАКСИМУМ(ВТГрафик.ОкончаниеЭтапа) КАК Окончание,
		|	МИНИМУМ(ВТГрафик.НачалоЭтапаМодель) КАК НачалоМодель,
		|	МАКСИМУМ(ВТГрафик.ОкончаниеЭтапаМодель) КАК ОкончаниеМодель
		|ПОМЕСТИТЬ ВТСрокиРаспоряжений
		|ИЗ
		|	ВТГрафик КАК ВТГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документ.ТипПроизводственногоПроцесса КАК ТипПроцесса,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Назначение КАК Назначение,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ТабличнаяЧасть.Подразделение
		|		ИНАЧЕ ТабличнаяЧасть.Склад
		|	КОНЕЦ КАК Получатель,
		|	ТабличнаяЧасть.Упаковка КАК Упаковка,
		|	МИНИМУМ(ТабличнаяЧасть.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	ВТСрокиРаспоряжений.Начало КАК НачалоРаспоряжение,
		|	ВТСрокиРаспоряжений.Окончание КАК ОкончаниеРаспоряжение,
		|	ВТСрокиРаспоряжений.НачалоМодель КАК НачалоМодельРаспоряжение,
		|	ВТСрокиРаспоряжений.ОкончаниеМодель КАК ОкончаниеМодельРаспоряжение,
		|	МИНИМУМ(ВТГрафик.НачалоЭтапа) КАК НачалоПродукция,
		|	МАКСИМУМ(ВТГрафик.ОкончаниеЭтапа) КАК ОкончаниеПродукция,
		|	МИНИМУМ(ВТГрафик.НачалоЭтапаМодель) КАК НачалоМодельПродукция,
		|	МАКСИМУМ(ВТГрафик.ОкончаниеЭтапаМодель) КАК ОкончаниеМодельПродукция,
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЭтапыОбеспечивающиеЗаказы КАК ВТЭтапы
		|		ПО ТабличнаяЧасть.Номенклатура = ВТЭтапы.Номенклатура
		|			И ТабличнаяЧасть.Характеристика = ВТЭтапы.Характеристика
		|			И ТабличнаяЧасть.Назначение = ВТЭтапы.Назначение
		|			И ТабличнаяЧасть.Склад = ВТЭтапы.Склад
		|			И ТабличнаяЧасть.Спецификация = ВТЭтапы.Спецификация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокиРаспоряжений КАК ВТСрокиРаспоряжений
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафик КАК ВТГрафик
		|		ПО (ВТЭтапы.Этап = ВТГрафик.ЭтапПроизводства)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Распоряжение
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ТабличнаяЧасть.Подразделение
		|		ИНАЧЕ ТабличнаяЧасть.Склад
		|	КОНЕЦ,
		|	Документ.ТипПроизводственногоПроцесса,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.Характеристика,
		|	ВТСрокиРаспоряжений.Начало,
		|	ВТСрокиРаспоряжений.НачалоМодель,
		|	ВТСрокиРаспоряжений.Окончание,
		|	ВТСрокиРаспоряжений.ОкончаниеМодель,
		|	ТабличнаяЧасть.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧасть.НомерСтроки";
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПланироватьИЗаписатьГрафикВФоне(НастройкиПланирования, АдресХранилища) Экспорт
	
	РезультатыПланирования = ПланироватьИЗаписатьГрафик(НастройкиПланирования);
	ПоместитьВоВременноеХранилище(РезультатыПланирования, АдресХранилища);
	
КонецПроцедуры

Функция ЗафиксироватьНомерЗаданияКРасчетуГрафикаПроизводства()
	
	НачатьТранзакцию();
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРасчетуГрафикаПроизводства");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НомерЗадания = Константы.НомерЗаданияКРасчетуГрафикаПроизводства.Получить();
		Константы.НомерЗаданияКРасчетуГрафикаПроизводства.Установить(НомерЗадания+1);
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
 		ИмяСобытия = НСтр("ru = 'График производства';
							|en = 'Production schedule'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
			+ "."
			+ НСтр("ru = 'Планирование';
					|en = 'Planning'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
 		Уровень = УровеньЖурналаРегистрации.Ошибка;
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,, Комментарий);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат НомерЗадания;
	
КонецФункции

Процедура ОжидатьЗавершенияФоновыхЗаданий(Знач ИмяМетодаЗадания, Знач НаименованиеЗадания)
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("ИмяМетода", ИмяМетодаЗадания);
	ОтборЗаданий.Вставить("Наименование", НаименованиеЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Если ЗначениеЗаполнено(Задания) Тогда
		ФоновыеЗадания.ОжидатьЗавершения(Задания);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатыПланированияПредварительногоГрафика(
													РезультатыГрафик,
													РезультатыМодель,
													НомерЗаданияКРасчетуГрафикаПроизводства,
													ОтменитьРучныеИзмененияГрафика)
	
	Результат = Новый Структура;
	
	Ошибки = ИнициализироватьОшибкиПланирования();
	Оповещения = Новый Массив;
	
	Для Сч = 1 По 2 Цикл
		
		Если Сч = 1 Тогда
			РезультатыПланирования = РезультатыГрафик;
			ИмяФлага = "ГрафикЗапланирован";
		Иначе
			РезультатыПланирования = РезультатыМодель;
			ИмяФлага = "МодельЗапланирована";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатыПланирования) Тогда
			
			Результат.Вставить(ИмяФлага, РезультатыПланирования.ГрафикЗапланирован);
			
			Для каждого Строка Из РезультатыПланирования.Ошибки Цикл
				НоваяСтрока = Ошибки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
			
			Для каждого Оповещение Из РезультатыПланирования.Оповещения Цикл
				Оповещения.Добавить(Оповещение);
			КонецЦикла;
			
		Иначе
			Результат.Вставить(ИмяФлага, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Ошибки", Ошибки);
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Оповещения);
	Результат.Вставить("Оповещения", Оповещения);
	
	РазмещенныеЭтапы = ?(РезультатыГрафик = Неопределено, Новый Массив, РезультатыГрафик.РазмещенныеЭтапы);
	Результат.Вставить("РазмещенныеЭтапы", РазмещенныеЭтапы);
	
	Результат.Вставить("НомерЗаданияКРасчетуГрафикаПроизводства", НомерЗаданияКРасчетуГрафикаПроизводства);
	Результат.Вставить("ОтменитьРучныеИзмененияГрафика", ОтменитьРучныеИзмененияГрафика);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатыФоновогоПланированияГрафика(АдресаРезультатов)
	
	Результат = Новый Структура("РезультатыГрафик, РезультатыМодель", Неопределено, Неопределено);
	
	Для каждого АдресХранилища Из АдресаРезультатов Цикл
		
		Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
			
			РезультатыПланирования = ПолучитьИзВременногоХранилища(АдресХранилища);
			
			Если ТипЗнч(РезультатыПланирования) = Тип("Структура") Тогда
				
				Если РезультатыПланирования.СтатусГрафика =
					РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусПредварительныйГрафик() Тогда
					
					Результат.РезультатыГрафик = РезультатыПланирования;
					
				ИначеЕсли РезультатыПланирования.СтатусГрафика =
					РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусМодельГрафика() Тогда
					
					Результат.РезультатыМодель = РезультатыПланирования;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьГрафик(ПараметрыПланирования)
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ЗаписатьРезультатыПланирования(
			ПараметрыПланирования.Распоряжение,
			ПараметрыПланирования.СтатусГрафика,
			ПараметрыПланирования.ГрафикПроизводства);
		
		Если ПараметрыПланирования.СтатусГрафика = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик() Тогда
			
			Этапы = МассивРазмещенныхЭтапов(ПараметрыПланирования);
			
			РегистрыНакопления.ДоступностьВидовРабочихЦентров.ЗаписатьЗанятоГрафикомПроизводства(
				Этапы,
				ПараметрыПланирования.ЗагрузкаВРЦ);
			
			ПриЗаписиРабочегоГрафика(
				ПараметрыПланирования.Распоряжение,
				Этапы,
				ПараметрыПланирования.НомерЗаданияКРасчетуГрафикаПроизводства,
				ПараметрыПланирования.ОтменитьРучныеИзмененияГрафика);
			
		Иначе
			
			РегистрыСведений.ПланированиеЗагрузкиВидовРабочихЦентров.ЗаписатьРезультатыПланирования(
				ПараметрыПланирования.Распоряжение,
				ПараметрыПланирования.СтатусГрафика,
				ПараметрыПланирования.ЗагрузкаВРЦ);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурналРегистрацииОшибкуЗаписиГрафика(Комментарий);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоЭтапУББВ(Этап)
	
	Возврат НЕ Этап.ПланироватьРаботуВидовРабочихЦентров ИЛИ Этап.ПроизводствоНаСтороне;
	
КонецФункции

Функция ПериодВыборкиКалендарныхДанных(ПараметрыПланирования)
	
	Результат = Новый Структура("Начало, Окончание");
	
	Результат.Начало = НачалоДня(ТекущаяДатаСеанса());
	
	Если ПараметрыПланирования.РазмещениеКНачалу Тогда
		Результат.Окончание = '39991201235959';
	Иначе
		Результат.Окончание = КонецДня(ПараметрыПланирования.ДатаПотребности);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица)
	
	ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
	
КонецПроцедуры

Функция НайтиСтрокиССохранениемПорядка(Таблица, УсловиеПоиска, СтрокиПронумерованы=Ложь)
	
	Возврат ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(Таблица, УсловиеПоиска,СтрокиПронумерованы);
	
КонецФункции

Функция ПривестиКНачалуПериода(Дата, ИнтервалПланирования)
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		Результат = НачалоДня(Дата);
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		Результат = НачалоНедели(Дата);
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		Результат = НачалоМесяца(Дата);
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Результат = НачалоЧаса(Дата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиКОкончаниюПериода(Дата, ИнтервалПланирования)
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		Результат = КонецДня(Дата) + 1;
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		Результат = КонецНедели(Дата) + 1;
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		Результат = КонецМесяца(Дата) + 1;
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Результат = КонецЧаса(Дата) + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиКГраницеИнтервалаПланирования(Дата, ИнтервалПланирования, ГраницаИнтервала)
	
	Возврат ПривестиКНачалуПериода(Дата, ИнтервалПланирования)
		+ ГраницаИнтервалаВСекунды(ГраницаИнтервала, ИнтервалПланирования);
	
КонецФункции

Функция ГраницаИнтервалаВСекунды(Дата, ИнтервалПланирования)
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		Результат = Час(Дата) * 3600 + Минута(Дата) * 60 + Секунда(Дата);
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		Результат = (ДеньНедели(Дата)-1) * 86400 + Час(Дата) * 3600 + Минута(Дата) * 60 + Секунда(Дата);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИсключитьПоследующиеЭтапыИзРасчетаРекурсивно(ПараметрыПланирования, ЭтапРодитель)
	
	ПоследующиеЭтапы = ДанныеСвязанныхЭтапов(ПараметрыПланирования, ЭтапРодитель.ЭтапПроизводства, Истина);
	Для каждого Этап Из ПоследующиеЭтапы Цикл
		
		Если Этап.Размещать Тогда
			
			Этап.Размещать = Ложь;
			ИсключитьПоследующиеЭтапыИзРасчетаРекурсивно(ПараметрыПланирования, Этап);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИнтервалПланированияИмеетНестандартныеГраницы(Этап)
	
	ИнтервалПланирования = Этап.ИнтервалПланирования;
	Начало = Этап.НачалоИнтервалаПланирования;
	Окончание = Этап.ОкончаниеИнтервалаПланирования;
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		Результат = НЕ НачалоДня(Начало) = Начало
			ИЛИ НЕ КонецДня(Окончание) = Окончание;
			
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		Результат = НЕ НачалоНедели(Начало) = Начало
			ИЛИ НЕ КонецНедели(Окончание) = Окончание;
			
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяВСекунды(Время)
	
	Возврат Час(Время)*3600 + Минута(Время)*60 + Секунда(Время);
	
КонецФункции

Процедура ПривестиДатыГрафикаКПользовательскомуПредставлению(ПараметрыПланирования)
	
	Для каждого Строка Из ПараметрыПланирования.ГрафикПроизводства Цикл
		
		Если Строка.НачалоЭтапа = Строка.ОкончаниеЭтапа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.НачалоЗавершающегоБуфера = Строка.ОкончаниеЭтапа Тогда
			Строка.НачалоЗавершающегоБуфера = Строка.НачалоЗавершающегоБуфера - 1;
		КонецЕсли;
		Строка.ОкончаниеЭтапа = Строка.ОкончаниеЭтапа - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписиРабочегоГрафика(Распоряжение, Этапы, НомерЗадания, ОтменитьРучныеИзмененияГрафика)
	
	РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.УдалитьЗадания(Распоряжение, Этапы, НомерЗадания);
	
	Документы.ЭтапПроизводства2_2.ОбновитьПланируемоеПоступлениеТоваров(Этапы);
	
	УправлениеПроизводством.ПроверитьПорядокСледованияЭтапов(Этапы);
	
	Если ОтменитьРучныеИзмененияГрафика Тогда
		Документы.ЭтапПроизводства2_2.ОтменитьРучноеРазмещениеЭтаповВГрафике(Этапы, Ложь);
	КонецЕсли;
	
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжение);
	
КонецПроцедуры

Функция ВидыРабочийЦентровЭтапа(ПараметрыПланирования, Этап)
	
	СтруктураПоиска = Новый Структура("ЭтапПроизводства", Этап.ЭтапПроизводства);
	
	Возврат НайтиСтрокиССохранениемПорядка(
		ПараметрыПланирования.ИсполнителиЭтапов,
		СтруктураПоиска,
		Истина);
	
КонецФункции

Функция ПредставлениеЭтапа(ЭтапПроизводства)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтапПроизводства, "НаименованиеЭтапа, Номер");
	
	Возврат Реквизиты.НаименованиеЭтапа + " (" + Реквизиты.Номер + ")";
	
КонецФункции

Функция МассивРазмещаемыхЭтапов(ПараметрыПланирования)
	
	СтруктураПоиска = Новый Структура("Размещать", Истина);
	ТаблицаОтбор = ПараметрыПланирования.Этапы.Скопировать(СтруктураПоиска, "ЭтапПроизводства");
	Возврат ТаблицаОтбор.ВыгрузитьКолонку("ЭтапПроизводства");
	
КонецФункции

Функция МассивРазмещенныхЭтапов(ПараметрыПланирования)
	
	СтруктураПоиска = Новый Структура("Размещен", Истина);
	ТаблицаОтбор = ПараметрыПланирования.Этапы.Скопировать(СтруктураПоиска, "ЭтапПроизводства");
	Возврат ТаблицаОтбор.ВыгрузитьКолонку("ЭтапПроизводства");
	
КонецФункции

Функция ОчередьПланированияГрафикаРаспоряжений(Распоряжения = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьЗаказов.Ссылка КАК Распоряжение
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ОчередьЗаказов
	|ГДЕ
	|	(НЕ &ЕстьОтборПоРаспоряжению
	|		ИЛИ &ЕстьОтборПоРаспоряжению И ОчередьЗаказов.Ссылка В (&Распоряжения)
	|	) И ОчередьЗаказов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
	|	И ОчередьЗаказов.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЗаказов.Приоритет.РеквизитДопУпорядочивания,
	|	ОчередьЗаказов.Подразделение.РеквизитДопУпорядочивания,
	|	ОчередьЗаказов.Очередь");
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("ЕстьОтборПоРаспоряжению", Распоряжения <> Неопределено);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ОчередьПланированияГрафикаЭтапов(Этапы)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапПроизводства22.Распоряжение КАК Распоряжение,
	|	ЭтапПроизводства22.Ссылка КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства22
	|ГДЕ
	|	ЭтапПроизводства22.Ссылка В(&Этапы)
	|	И ЭтапПроизводства22.Статус В(&СтатусыЭтапа)
	|	И ЭтапПроизводства22.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапПроизводства22.Распоряжение.Приоритет.РеквизитДопУпорядочивания,
	|	ЭтапПроизводства22.Распоряжение.Подразделение.РеквизитДопУпорядочивания,
	|	ЭтапПроизводства22.Распоряжение.Очередь
	|ИТОГИ ПО
	|	Распоряжение");
	
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("СтатусыЭтапа",
		Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован());
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ПараметрыПланированияГрафика() Экспорт
	
	НастройкиПланирования = ИнициализироватьНастройкиПланирования(1);
	Результат = ИнициализироватьПараметрыПланирования(НастройкиПланирования);
	ЗаполнитьЗначенияСвойств(Результат, НастройкиПланирования);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьВЖурналРегистрацииОшибкуЗаписиГрафика(Комментарий)
	
	ИмяСобытия = НСтр("ru = 'График производства';
						|en = 'Production schedule'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
		+ "."
		+ НСтр("ru = 'Запись';
				|en = 'Record'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,,, Комментарий);
	
КонецПроцедуры

Функция ЭтапРазмещенВручную(ПараметрыПланирования, Этап)
	
	Возврат Этап.РучноеРазмещениеВГрафике И НЕ ПараметрыПланирования.ОтменитьРучныеИзмененияГрафика;
	
КонецФункции

Процедура ПрочитатьКоличествоОбъектовДляПланирования(
													РазмещеноВручную,
													РассчитатьГрафик,
													ЕстьПриоритетные,
													Распоряжения,
													МенеджерВременныхТаблиц,
													ИмяВременнойТаблицы) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапПроизводства2_2.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение В (&Распоряжения)
	|	И ЭтапПроизводства2_2.Статус В(&СтатусыЭтапа)
	|	И ЭтапПроизводства2_2.РучноеРазмещениеВГрафике = ИСТИНА
	|	И ЭтапПроизводства2_2.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаданияКРасчетуГрафикаПроизводства.ЭтапПроизводства) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства КАК ЗаданияКРасчетуГрафикаПроизводства
	|ГДЕ
	|	ЗаданияКРасчетуГрафикаПроизводства.Распоряжение В (&Распоряжения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаданияКРасчетуГрафикаПроизводства.ЭтапПроизводства КАК ЭтапПроизводства
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства КАК ЗаданияКРасчетуГрафикаПроизводства
	|ГДЕ
	|	ЗаданияКРасчетуГрафикаПроизводства.Распоряжение В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				ВТПриоритетныеЗаказы КАК Т)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("СтатусыЭтапа",
		Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован());
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Количество) Тогда
		РазмещеноВручную = Выборка.Количество;
	КонецЕсли;
	
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Количество) Тогда
		РассчитатьГрафик = Выборка.Количество;
	КонецЕсли;
	
	Выборка = МассивРезультатов[2].Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ЭтапПроизводства) Тогда
		ЕстьПриоритетные = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьРезультатГрупповогоПланирования()
	
	Результат = Новый Структура;
	
	Результат.Вставить("КоличествоВсего", 0);
	Результат.Вставить("КоличествоОбработанных", 0);
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("РаспоряжениеОшибка", Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуетсяПланированиеПоПроизводственнымРесурсам()
	
	Настройки = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Возврат Настройки.ИспользуетсяПланированиеПоПроизводственнымРесурсам;
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#КонецЕсли
