#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Распоряжение", Распоряжение) Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.';
								|en = 'This data processor is not intended for manual use.'");
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
	ПрочитатьДанныеРаспоряжения();
	
	НастроитьФормуПриСоздании();
	
	ОбновитьДанныеГрафика();
	
	УправлениеДоступностью(ЭтотОбъект);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьОжиданиеДлительныхОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ГрафикЗапланирован Тогда
		
		Отказ = Истина;
		ПоказатьВопросОСохраненииГрафикаПередЗакрытием();
		
	ИначеЕсли МодельЗапланирована Тогда
		
		Отказ = Истина;
		УдалитьРезультатыПланированияНаКлиенте(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОтменитьДлительныеОперацииПриЗакрытии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьТолькоЗадерживающиеЗаказПриИзменении(Элемент)
	
	УстановитьОтборТолькоЗадерживающиеЗаказЭтапы(Этапы, ТолькоЗадерживающиеЗаказЭтапы);
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадержкиВОбеспеченииОтсутствуютНажатие(Элемент)
	
	РасшифроватьОбеспечениеМатериаламиПоМодели();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДиаграммыФормыСрокиВыполнения

&НаКлиенте
Процедура СрокиВыполненияОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	Если ТипЗнч(Расшифровки) = Тип("Массив")
		И Расшифровки.Количество() > 1 Тогда
		
		ЗначениеРасшифровки  = Расшифровки[1];
		
		Если ТипЗнч(ЗначениеРасшифровки) = Тип("Число") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПараметрКоманды", Распоряжение);
			ПараметрыФормы.Вставить("СтатусГрафика", ЗначениеРасшифровки);
			
			ОткрытьФорму(
				"Отчет.ДиаграммаПроизводстваЗаказа.ФормаОбъекта",
				ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДиаграммыФормыЗагрузкаОборудования

&НаКлиенте
Процедура ЗагрузкаОборудованияВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	ОбработкаРасшифровкиЗагрузкаОборудования(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОборудованияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровкиЗагрузкаОборудования(СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДиаграммыФормыОбеспечениеМатериалами

&НаКлиенте
Процедура ОбеспечениеМатериаламиВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифроватьОбеспечениеМатериаламиПоМодели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасшифроватьОбеспечениеМатериаламиПоМодели();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибки

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = Ошибки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	КодыОшибок = КодыОшибокПланирования();
	
	Если ДанныеСтроки.Расшифровка.КодОшибки = КодыОшибок.КодОшибкиДоступностьВРЦ Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРаботы", ПредопределенноеЗначение(
			"Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства"));
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Расшифровка.ВидРабочегоЦентра) Тогда
			ПараметрыФормы.Вставить("ВидРабочегоЦентра", ДанныеСтроки.Расшифровка.ВидРабочегоЦентра);
			ПараметрыФормы.Вставить("НачалоПериода", ДанныеСтроки.Расшифровка.Период);
		Иначе
			ПараметрыФормы.Вставить("Подразделение", ДанныеСтроки.Расшифровка.Подразделение);
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ДоступностьВидовРабочихЦентров.Форма", ПараметрыФормы);
		
	ИначеЕсли ДанныеСтроки.Расшифровка.КодОшибки = КодыОшибок.КодОшибкиГрафикРаботыПодразделения Тогда
		
		ПоказатьЗначение(, ДанныеСтроки.Расшифровка.Подразделение);
		
	ИначеЕсли ДанныеСтроки.Расшифровка.КодОшибки = КодыОшибок.КодОшибкиГрафикРаботыПредприятия Тогда
		
		ОткрытьФорму("Обработка.ПанельАдминистрированияУТ.Форма.Предприятие");
		
	ИначеЕсли ДанныеСтроки.Расшифровка.КодОшибки = КодыОшибок.КодОшибкиОтсутствуетГрафикПредшественника Тогда
		
		ПараметрыФормы = Новый Структура("Распоряжение", ДанныеСтроки.Расшифровка.Распоряжение);
		ОткрытьФорму(
			"Обработка.ПланированиеГрафикаПроизводства2_2.Форма.ПланированиеГрафикаЗаказа",
			ПараметрыФормы,
			,
			ДанныеСтроки.Расшифровка.Распоряжение);
			
	ИначеЕсли ДанныеСтроки.Расшифровка.КодОшибки = КодыОшибок.КодОшибкиЕстьЦиклыВЦепочкеЭтапов Тогда
		
		ПоказатьЗначение(, ДанныеСтроки.Расшифровка.ЭтапПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Планировать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборНастроекПланированияЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Распоряжение", Распоряжение);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.НастройкиПланированияРаспоряжения",
		ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если ГрафикЗапланирован Тогда
		
		СохранитьНаКлиенте(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перечитать(Команда)
	
	Если ГрафикЗапланирован ИЛИ МодельЗапланирована Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПеречитатьДанныеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные изменены. Перечитать данные?';
							|en = 'Data is changed. Reread?'");
		Кнопки = РежимДиалогаВопрос.ДаНет;
		КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КнопкаПоУмолчанию);
		
	Иначе
		
		ПеречитатьДанныеНаСервере();
		НачатьОжиданиеДлительныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСмежныхЭтапов(Команда)
	
	ЭтапПроизводства = Элементы.Этапы.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ЭтапПроизводства) Тогда
		
		СтатусГрафика = СтатусГрафикаСписокЭтапы(ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрКоманды", ЭтапПроизводства);
		ПараметрыФормы.Вставить("СтатусГрафика", СтатусГрафика);
		
		ОткрытьФорму(
			"Отчет.ДиаграммаСмежныхЭтаповПроизводства.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,
			ЭтапПроизводства);
		
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выбрать этап.';
									|en = 'Select the stage.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагностикаЭтапа(Команда)
	
	ЭтапПроизводства = Элементы.Этапы.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ЭтапПроизводства) Тогда
		
		СтатусГрафика = СтатусГрафикаСписокЭтапы(ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрКоманды", ЭтапПроизводства);
		ПараметрыФормы.Вставить("СтатусГрафика", СтатусГрафика);
		
		ОткрытьФорму(
			"Отчет.ДиагностикаЭтапаПроизводства.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			ЭтапПроизводства);
		
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо выбрать этап.';
									|en = 'Select the stage.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Планирование

&НаКлиенте
Процедура ВыборНастроекПланированияЗавершение(НастройкиРасчета, ДополнительныеПараметры) Экспорт
	
	Если НЕ НастройкиРасчета = Неопределено Тогда
		
		Результат = ПланироватьГрафикВФоновомРежиме(НастройкиРасчета);
		ЗаполнитьРеквизитыФоновойОперации(Результат);
		
		Если Результат.ЗаданиеВыполнено Тогда
			ЗавершеноПланированиеГрафикаВФоновомРежиме();
		Иначе
			НачатьОжиданиеФоновойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПланироватьГрафикВФоновомРежиме(НастройкиРасчета)
	
	ТекущаяФоноваяОперация = ИмяФоновойОперацииПланированиеГрафика();
	
	НаименованиеЗадания = НСтр("ru = 'Планирование графика производства заказа';
								|en = 'Production schedule planning for order'");
	
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"УправлениеПроизводствомПереопределяемый.ПланироватьПредварительныйГрафикРаспоряжения",
		НастройкиРасчета,
		НаименованиеЗадания);
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФоновойОперацииПланированиеГрафика()
	
	Возврат "ПланированиеГрафика";
	
КонецФункции

&НаКлиенте
Процедура ЗавершеноПланированиеГрафикаВФоновомРежиме()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаФоноваяОперация) Тогда
		
		ОчиститьСообщения();
		ПрочитатьРезультатыПланирования();
		НачатьОжиданиеДлительныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВФонеСБлокировкойФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыФоновойОперации(Результат)
	
	АдресХранилищаФоноваяОперация = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеФоновойОперации()
	
	ПодключитьОбработчикОжиданияФоновойОперации();
	ОткрытьФормуДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияФоновойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				Если ТекущаяФоноваяОперация = ИмяФоновойОперацииПланированиеГрафика() Тогда
					ЗавершеноПланированиеГрафикаВФоновомРежиме();
				ИначеЕсли ТекущаяФоноваяОперация = ИмяФоновойОперацииСохранениеГрафика() Тогда
					ЗавершеноСохранениеГрафикаВФоновомРежиме();
				ИначеЕсли ТекущаяФоноваяОперация = ИмяФоновойОперацииУдалениеРезультатов() Тогда
					ЗавершеноУдалениеРезультатовПланированияВФоновомРежиме();
				КонецЕсли;
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область РаботаВФонеБезБлокировкиФормы

&НаСервере
Процедура ЗаполнитьДлительныеОперацииФормы()
	
	НоваяСтрока = ДлительныеОперацииФормы.Добавить();
	НоваяСтрока.Имя = ИмяДлительнойОперацииСрокиВыпуска();
	НоваяСтрока.НачатьОжидание = Ложь;
	НоваяСтрока.ДлительнаяОперация = Неопределено;
	
	НоваяСтрока = ДлительныеОперацииФормы.Добавить();
	НоваяСтрока.Имя = ИмяДлительнойОперацииЗагрузкаОборудования();
	НоваяСтрока.НачатьОжидание = Ложь;
	НоваяСтрока.ДлительнаяОперация = Неопределено;
	
	НоваяСтрока = ДлительныеОперацииФормы.Добавить();
	НоваяСтрока.Имя = ИмяДлительнойОперацииОбеспечениеМатериалами();
	НоваяСтрока.НачатьОжидание = Ложь;
	НоваяСтрока.ДлительнаяОперация = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДлительнойОперации(Форма, Имя)
	
	СтруктураПоиска = Новый Структура("Имя", Имя);
	НайденныеСтроки = Форма.ДлительныеОперацииФормы.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Результат = Неопределено;
	Иначе
		Результат = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтменитьДлительныеОперацииПриЗакрытии()
	
	Для каждого Строка Из ДлительныеОперацииФормы Цикл
		Если НЕ Строка.ДлительнаяОперация = Неопределено Тогда
			
			ОтменитьДлительнуюОперацию(Строка.Имя);

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьДлительнуюОперацию(Имя)
	
	ОписаниеОперации = ОписаниеДлительнойОперации(ЭтотОбъект, Имя);
	
	Если НЕ ОписаниеОперации.ДлительнаяОперация = Неопределено Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ОписаниеОперации.ДлительнаяОперация.ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДлительнойОперацииСрокиВыпуска()
	
	Возврат "ЧтениеСроковВыпускаПродукции";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДлительнойОперацииЗагрузкаОборудования()
	
	Возврат "ЧтениеЗагрузкиОборудования";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДлительнойОперацииОбеспечениеМатериалами()
	
	Возврат "ЧтениеОбеспеченияМатериалами";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусДлительнойОперацииВыполняется()
	
	Возврат "Выполняется";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусДлительнойОперацииВыполнено()
	
	Возврат "Выполнено";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусДлительнойОперацииОшибка()
	
	Возврат "Ошибка";
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеДлительныхОпераций()
	
	Для каждого Строка Из ДлительныеОперацииФормы Цикл
		
		Если Строка.НачатьОжидание Тогда
			
			ОповещениеОЗавершении = ОповещениеОЗавершенииДлительнойОперации(Строка.Имя);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				Строка.ДлительнаяОперация,
				ОповещениеОЗавершении,
				ПараметрыОжидания);
			
			ОтобразитьНачалоОжиданияДлительнойОперации(Строка.Имя);
			
			Строка.НачатьОжидание = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеОЗавершенииДлительнойОперации(Имя)
	
	Если Имя = ИмяДлительнойОперацииСрокиВыпуска() Тогда
		
		Результат = Новый ОписаниеОповещения("ПрочитатьСрокиВыпускаПродукцииВФонеЗавершение", ЭтотОбъект);
		
	ИначеЕсли Имя = ИмяДлительнойОперацииЗагрузкаОборудования() Тогда
		
		Результат = Новый ОписаниеОповещения("ЗаполнитьДиаграммуЗагрузкаОборудованияВФонеЗавершение", ЭтотОбъект);
		
	ИначеЕсли Имя = ИмяДлительнойОперацииОбеспечениеМатериалами() Тогда
		
		Результат = Новый ОписаниеОповещения("ЗаполнитьДиаграммуОбеспечениеМатериаламиВФонеЗавершение", ЭтотОбъект);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьНачалоОжиданияДлительнойОперации(Имя)
	
	Если Имя = ИмяДлительнойОперацииСрокиВыпуска() Тогда
		
		Элементы.ГруппаПродукцияДлительнаяОперация.ТекущаяСтраница = Элементы.СтраницаПродукцияДлительнаяОперация;
		
	ИначеЕсли Имя = ИмяДлительнойОперацииЗагрузкаОборудования() Тогда
		
		Элементы.ГруппаЗагрузкаОборудованияДлительнаяОперация.ТекущаяСтраница =
			Элементы.СтраницаЗагрузкаОборудованияДлительнаяОперация;
	
	ИначеЕсли Имя = ИмяДлительнойОперацииОбеспечениеМатериалами() Тогда
		
		Элементы.ГруппаОбеспечениеМатериаламиДлительнаяОперация.ТекущаяСтраница =
			Элементы.СтраницаОбеспечениеМатериаламиДлительнаяОперация;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеОбновлениеДанных

&НаСервере
Процедура ПеречитатьДанныеНаСервере()
	
	Ошибки.Очистить();
	
	ПрочитатьДанныеРаспоряжения();
	ОбновитьДанныеГрафика();
	
	ПеречитываниеДанных = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеРаспоряжения()
	
	ДанныеРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Распоряжение,
		"ДатаПотребности, НачатьНеРанее, Номер, Дата, ТипПроизводственногоПроцесса");
	
	ДатаПотребности = ДанныеРаспоряжения.ДатаПотребности;
	НачатьНеРанее = ДанныеРаспоряжения.НачатьНеРанее;
	ЭтоРазборка = (ДанныеРаспоряжения.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	НомерРаспоряжения = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
		ДанныеРаспоряжения.Номер, Ложь, Истина);
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Планирование графика производства заказа № %1 от %2';
			|en = 'Production schedule creating for order No.%1 dated %2'"),
		НомерРаспоряжения,
		Формат(ДанныеРаспоряжения.Дата, "ДЛФ=D"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеГрафика()
	
	ПрочитатьСрокиГрафика();
	
	ЗаполнитьДиаграммуСрокиВыполнения();
	ЗаполнитьДиаграммуЗагрузкаОборудованияВФоне();
	ЗаполнитьДиаграммуОбеспечениеМатериаламиВФоне();
	
	ПрочитатьСрокиВыпускаПродукцииВФоне();
	
	ЗаполнитьИнформационныеНадписи();
	
	УстановитьПараметрыСпискаЭтапы();
	
	ПоказатьСкрытьОшибки();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСрокиГрафика()
	
	СтатусРабочийГрафик = СтатусРабочийГрафик();
	СтатусПредварительныйГрафик = СтатусПредварительныйГрафик();
	СтатусМодель = СтатусМодельГрафика();
	
	СтатусыГрафика = Новый Массив;
	Если ГрафикЗапланирован Тогда
		СтатусыГрафика.Добавить(СтатусПредварительныйГрафик);
	Иначе
		СтатусыГрафика.Добавить(СтатусРабочийГрафик);
	КонецЕсли;
	Если МодельЗапланирована Тогда
		СтатусыГрафика.Добавить(СтатусМодель);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства КАК ЭтапПроизводства
	|ПОМЕСТИТЬ ВТРазмещенныеЭтапы
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика <> &СтатусРабочийГрафик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ГрафикЭтаповПроизводства2_2.НачалоЭтапа) КАК ДатаЗапуска
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмещенныеЭтапы КАК ВТРазмещенныеЭтапы
	|		ПО ГрафикЭтаповПроизводства2_2.ЭтапПроизводства = ВТРазмещенныеЭтапы.ЭтапПроизводства
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
	|	И ВТРазмещенныеЭтапы.ЭтапПроизводства ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.СтатусГрафика,
	|	МИНИМУМ(ГрафикЭтаповПроизводства2_2.НачалоЭтапа) КАК ДатаЗапуска,
	|	МАКСИМУМ(ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа) КАК ДатаВыпуска
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика В(&СтатусыГрафика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикЭтаповПроизводства2_2.СтатусГрафика");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("СтатусыГрафика", СтатусыГрафика);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", СтатусРабочийГрафик);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаЗапуска) Тогда
		ДатаЗапускаРабочийГрафик = Выборка.ДатаЗапуска;
	Иначе
		ДатаЗапускаРабочийГрафик = Неопределено;
	КонецЕсли;
	
	Выборка = МассивРезультатов[2].Выбрать();
	
	СрокиГрафикаЗаполнены = Ложь;
	СрокиМоделиЗаполнены = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтатусГрафика = СтатусПредварительныйГрафик
			ИЛИ Выборка.СтатусГрафика = СтатусРабочийГрафик Тогда
			
			ДатаЗапускаГрафик = Выборка.ДатаЗапуска;
			ДатаВыпускаГрафик = Выборка.ДатаВыпуска;
			СрокиГрафикаЗаполнены = Истина;
			
		ИначеЕсли Выборка.СтатусГрафика = СтатусМодель Тогда
			
			ДатаЗапускаМодель = Выборка.ДатаЗапуска;
			ДатаВыпускаМодель = Выборка.ДатаВыпуска;
			СрокиМоделиЗаполнены = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаЗапускаРабочийГрафик) Тогда
		
		Если ЗначениеЗаполнено(ДатаЗапускаГрафик) Тогда
			ДатаЗапускаГрафик = Мин(ДатаЗапускаГрафик, ДатаЗапускаРабочийГрафик);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаЗапускаМодель) Тогда
			ДатаЗапускаМодель = Мин(ДатаЗапускаМодель, ДатаЗапускаРабочийГрафик);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СрокиГрафикаЗаполнены Тогда
		
		Если ЗначениеЗаполнено(ДатаПотребности) Тогда
			ОпозданиеГрафик = РазностьДатСтрокой(ДатаПотребности, ДатаВыпускаГрафик);
		Иначе
			ОпозданиеГрафик = "";
		КонецЕсли;
		
		ДлительностьГрафик = РазностьДатСтрокой(ДатаЗапускаГрафик, ДатаВыпускаГрафик);
		
	Иначе
		ДатаЗапускаГрафик = '00010101';
		ДатаВыпускаГрафик = '00010101';
		ОпозданиеГрафик = "";
		ДлительностьГрафик = "";
	КонецЕсли;
	
	Если СрокиМоделиЗаполнены Тогда
		
		Если ЗначениеЗаполнено(ДатаПотребности) Тогда
			ОпозданиеМодель = РазностьДатСтрокой(ДатаПотребности, ДатаВыпускаМодель);
		Иначе
			ОпозданиеМодель = "";
		КонецЕсли;
		
		ДлительностьМодель = РазностьДатСтрокой(ДатаЗапускаМодель, ДатаВыпускаМодель);
	Иначе
		ДатаЗапускаМодель = '00010101';
		ДатаВыпускаМодель = '00010101';
		ОпозданиеМодель = "";
		ДлительностьМодель = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРезультатыПланирования()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаФоноваяОперация);
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		Результат,
		"ГрафикЗапланирован, МодельЗапланирована, НомерЗаданияКРасчетуГрафикаПроизводства, ОтменитьРучныеИзмененияГрафика");
	РазмещенныеЭтапы.ЗагрузитьЗначения(Результат.РазмещенныеЭтапы);
	
	ЗначениеВРеквизитФормы(Результат.Ошибки, "Ошибки");
	СообщитьОбОшибкахПриПланировании();
	
	ПоказатьОповещения(Результат.Оповещения);
	
	УправлениеДоступностью(ЭтотОбъект);
	
	ОбновитьДанныеГрафика();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСрокиВыпускаПродукцииВФоне()
	
	ИмяОперации = ИмяДлительнойОперацииСрокиВыпуска();
	ОтменитьДлительнуюОперацию(ИмяОперации);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Распоряжение", Распоряжение);
	ПараметрыПроцедуры.Вставить("ГрафикЗапланирован", ГрафикЗапланирован);
	ПараметрыПроцедуры.Вставить("МодельЗапланирована", МодельЗапланирована);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение сроков выпуска продукции';
															|en = 'Read product release time'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПланированиеГрафикаПроизводства2_2.ПрочитатьСрокиВыпускаПродукции",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	ОписаниеОперации = ОписаниеДлительнойОперации(ЭтотОбъект, ИмяОперации);
	Если ДлительнаяОперация.Статус = СтатусДлительнойОперацииВыполняется() Тогда
		
		ОписаниеОперации.ДлительнаяОперация = ДлительнаяОперация;
		ОписаниеОперации.НачатьОжидание = Истина;
		
	Иначе
		
		ОписаниеОперации.ДлительнаяОперация = Неопределено;
		ОписаниеОперации.НачатьОжидание = Ложь;
		
		ОбработатьРезультатЧтенияСроковВыпускаПродукцииВФоне(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСрокиВыпускаПродукции(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		
		Продукция.Загрузить(Результат);
		Для каждого Строка Из Продукция Цикл
			
			Если ЗначениеЗаполнено(Строка.ДатаЗапускаГрафик) Тогда
				
				Если ЗначениеЗаполнено(ДатаПотребности) Тогда
					Строка.ОпозданиеГрафик = РазностьДатСтрокой(
						ДатаПотребности, Строка.ДатаВыпускаГрафик);
				Иначе
					Строка.ОпозданиеГрафик = "";
				КонецЕсли;
				
				Строка.ДлительностьГрафик = РазностьДатСтрокой(
					Строка.ДатаЗапускаГрафик, Строка.ДатаВыпускаГрафик);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ДатаЗапускаМодель) Тогда
				Если ЗначениеЗаполнено(ДатаПотребности) Тогда
					Строка.ОпозданиеМодель = РазностьДатСтрокой(
						ДатаПотребности, Строка.ДатаВыпускаМодель);
				Иначе
					Строка.ОпозданиеМодель = "";
				КонецЕсли;
				
				Строка.ДлительностьМодель = РазностьДатСтрокой(
					Строка.ДатаЗапускаМодель, Строка.ДатаВыпускаМодель);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ГруппаПродукцияДлительнаяОперация.ТекущаяСтраница = Элементы.СтраницаПродукцияДанные;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьИПоказатьСрокиВыпускаПродукции(Форма)
	
	Форма.Продукция.Очистить();
	Форма.Элементы.ГруппаПродукцияДлительнаяОперация.ТекущаяСтраница = Форма.Элементы.СтраницаПродукцияДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСрокиВыпускаПродукцииВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяОперации = ИмяДлительнойОперацииСрокиВыпуска();
	ОписаниеОперации = ОписаниеДлительнойОперации(ЭтотОбъект, ИмяОперации);
	ОписаниеОперации.ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		
		ОчиститьИПоказатьСрокиВыпускаПродукции(ЭтотОбъект);
		
	Иначе
		
		ОбработатьРезультатЧтенияСроковВыпускаПродукцииВФоне(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЧтенияСроковВыпускаПродукцииВФоне(Результат)
	
	Если Результат.Статус = СтатусДлительнойОперацииВыполнено() Тогда
		
		ЗагрузитьСрокиВыпускаПродукции(Результат.АдресРезультата);
		
	Иначе
		
		ОчиститьИПоказатьСрокиВыпускаПродукции(ЭтотОбъект);
		
		Если Результат.Статус = СтатусДлительнойОперацииОшибка() Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационныеНадписи()
	
	РазмещеноВручную = 0;
	РассчитатьГрафик = 0;
	ЕстьПриоритетные = Ложь;
	
	ПрочитатьДанныеИнформационныхНадписей(РазмещеноВручную, РассчитатьГрафик, ЕстьПриоритетные);
	
	Если РазмещеноВручную > 0 Тогда
		
		Элементы.НадписьРазмещенныеВручную.Заголовок = СтрШаблон(
			НСтр("ru = 'Имеются этапы, запланированные вручную (всего: %1).';
				|en = 'There are stages scheduled manually (total: %1).'"),
			РазмещеноВручную);
		Элементы.ГруппаРазмещенныеВручную.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаРазмещенныеВручную.Видимость = Ложь;
		
	КонецЕсли;
	
	Если РассчитатьГрафик > 0 Тогда
		
		Элементы.НадписьАктуальностьГрафика.Заголовок = СтрШаблон(
			НСтр("ru = 'График заказа не актуален. Имеются этапы, требующие перепланирования (всего: %1).';
				|en = 'Order schedule is not relevant. There are stages which require replanning (total: %1).'"),
			РассчитатьГрафик);
		
	Иначе
		
		Элементы.НадписьАктуальностьГрафика.Заголовок = НСтр("ru = 'График заказа актуален.';
															|en = 'Order schedule is relevant.'");
		
	КонецЕсли;
	
	Элементы.ГруппаНаличиеБолееПриоритетныхЗаказов.Видимость = ЕстьПриоритетные;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеИнформационныхНадписей(РазмещеноВручную, РассчитатьГрафик, ЕстьПриоритетные)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЗаказНаПроизводство2_2.СоздатьВТЗаказыСБольшимПриоритетом(
		МенеджерВременныхТаблиц,
		"ВТПриоритетныеЗаказы",
		Распоряжение);
	
	Обработки.ПланированиеГрафикаПроизводства2_2.ПрочитатьКоличествоОбъектовДляПланирования(
		РазмещеноВручную,
		РассчитатьГрафик,
		ЕстьПриоритетные,
		Распоряжение,
		МенеджерВременныхТаблиц,
		"ВТПриоритетныеЗаказы");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаЭтапы()
	
	Этапы.Параметры.УстановитьЗначениеПараметра("Распоряжение", Распоряжение);
	
	СтатусГрафика = СтатусГрафикаСписокЭтапы(ЭтотОбъект);
	Этапы.Параметры.УстановитьЗначениеПараметра("СтатусГрафика", СтатусГрафика);
	
	Этапы.Параметры.УстановитьЗначениеПараметра("СтатусыЭтапа",
		Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусГрафикаСписокЭтапы(Форма)
	
	Если Форма.ГрафикЗапланирован Тогда
		Результат = СтатусПредварительныйГрафик();
	Иначе
		Результат = СтатусРабочийГрафик();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СообщитьОбОшибкахПриПланировании()
	
	Если Ошибки.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'При планировании графика возникли ошибки.';
				|en = 'Errors occurred when planning the schedule.'"),
			,
			"Ошибки");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОповещения(Оповещения)
	
	Для каждого Оповещение Из Оповещения Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Оповещение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьОшибки()
	
	Элементы.СтраницаОшибки.Видимость = НЕ (Ошибки.Количество() = 0);
	
КонецПроцедуры

#КонецОбласти

#Область Сохранение

&НаКлиенте
Процедура СохранитьНаКлиенте(ПередЗакрытием)
	
	СохранениеПередЗакрытием = ПередЗакрытием;
	
	Результат = СохранитьНаСервере();
	ЗаполнитьРеквизитыФоновойОперации(Результат);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗавершеноСохранениеГрафикаВФоновомРежиме();
	Иначе
		Если ПередЗакрытием Тогда
			ПодключитьОбработчикОжидания("НачатьОжиданиеФоновойОперации", 0.1, Истина);
		Иначе
			НачатьОжиданиеФоновойОперации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьНаСервере()
	
	ТекущаяФоноваяОперация = ИмяФоновойОперацииСохранениеГрафика();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Распоряжение", Распоряжение);
	ПараметрыЗадания.Вставить("НомерЗаданияКРасчетуГрафикаПроизводства", НомерЗаданияКРасчетуГрафикаПроизводства);
	ПараметрыЗадания.Вставить("ОтменитьРучныеИзмененияГрафика", ОтменитьРучныеИзмененияГрафика);
	ПараметрыЗадания.Вставить("РазмещенныеЭтапы", РазмещенныеЭтапы.ВыгрузитьЗначения());
	
	НаименованиеЗадания = НСтр("ru = 'Сохранение графика производства заказа';
								|en = 'Save order production schedule'");
	
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ПланированиеГрафикаПроизводства2_2.ЗаписатьПредварительныйГрафикВРабочий",
		ПараметрыЗадания,
		НаименованиеЗадания);
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФоновойОперацииСохранениеГрафика()
	
	Возврат "СохранениеГрафика";
	
КонецФункции

&НаКлиенте
Процедура ЗавершеноСохранениеГрафикаВФоновомРежиме()
	
	ОчиститьРезультатыПланирования();
	Оповестить("Запись_ГрафикПроизводства", Распоряжение);
	
	Если СохранениеПередЗакрытием Тогда
		
		Закрыть();
		
	Иначе
		
		УправлениеДоступностью(ЭтотОбъект);
		ОбновитьДанныеГрафика();
		НачатьОжиданиеДлительныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСохраненииГрафикаПередЗакрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОСохраненииПередЗакрытиемЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?';
						|en = 'Data has changed. Save the changes?'");
	Кнопки = РежимДиалогаВопрос.ДаНетОтмена;
	КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КнопкаПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОСохраненииПередЗакрытиемЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОтветПользователя = РезультатЗакрытия;
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		СохранитьНаКлиенте(Истина);
		
	ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		
		УдалитьРезультатыПланированияНаКлиенте(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеРезультатовПланирования

&НаКлиенте
Процедура УдалитьРезультатыПланированияНаКлиенте(ПередЗакрытием)
	
	УдалениеРезультатовПередЗакрытием = ПередЗакрытием;
	
	Результат = УдалитьРезультатыПланированияНаСервере();
	ЗаполнитьРеквизитыФоновойОперации(Результат);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗавершеноУдалениеРезультатовПланированияВФоновомРежиме();
	Иначе
		Если ПередЗакрытием Тогда
			ПодключитьОбработчикОжидания("НачатьОжиданиеФоновойОперации", 0.1, Истина);
		Иначе
			НачатьОжиданиеФоновойОперации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьРезультатыПланированияНаСервере()
	
	ТекущаяФоноваяОперация = ИмяФоновойОперацииУдалениеРезультатов();
	
	НаименованиеЗадания = НСтр("ru = 'Очистка предварительного графика производства';
								|en = 'Clear preliminary production schedule'");
	
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ПланированиеГрафикаПроизводства2_2.ОчиститьПредварительныйГрафик",
		Распоряжение,
		НаименованиеЗадания);
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФоновойОперацииУдалениеРезультатов()
	
	Возврат "УдалениеРезультатов";
	
КонецФункции

&НаКлиенте
Процедура ЗавершеноУдалениеРезультатовПланированияВФоновомРежиме()
	
	ОчиститьРезультатыПланирования();
	
	Если УдалениеРезультатовПередЗакрытием Тогда
		
		Закрыть();
		
	Иначе
		
		УправлениеДоступностью(ЭтотОбъект);
		
		Если ПеречитываниеДанных Тогда
			ПеречитатьДанныеНаСервере();
		Иначе
			ОбновитьДанныеГрафика();
		КонецЕсли;
		НачатьОжиданиеДлительныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРезультатыПланирования()
	
	ГрафикЗапланирован = Ложь;
	МодельЗапланирована = Ложь;
	НомерЗаданияКРасчетуГрафикаПроизводства = 0;
	ОтменитьРучныеИзмененияГрафика = Ложь;
	Ошибки.Очистить();
	РазмещенныеЭтапы.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ДиаграммаСрокиВыполнения

&НаСервере
Процедура НастроитьДиаграммуСрокиВыполнения()
	
	СрокиВыполнения.АвтоОпределениеПолногоИнтервала = Ложь;
	СрокиВыполнения.АвтоУстановкаТекстаТочек = Ложь;
	СрокиВыполнения.Анимация = АнимацияДиаграммы.НеИспользовать;
	СрокиВыполнения.ВертикальнаяПрокрутка = Ложь;
	СрокиВыполнения.Окантовка = Ложь;
	СрокиВыполнения.ОтображатьЛегенду = Ложь;
	СрокиВыполнения.ОтображатьПустыеЗначения = Ложь;
	СрокиВыполнения.ОтображатьЗаголовок = Ложь;
	СрокиВыполнения.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.НеОтображать;
	СрокиВыполнения.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	СрокиВыполнения.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	Элементы.ЦветРаспоряжение.ЦветФона = ЦветИнтервала(ВидИнтервалаРаспоряжение());
	Элементы.ЦветГрафик.ЦветФона = ЦветИнтервала(ВидИнтервалаГрафик());
	Элементы.ЦветМодель.ЦветФона = ЦветИнтервала(ВидИнтервалаМодель());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуСрокиВыполнения()
	
	СрокиВыполнения.Обновление = Ложь;
	СрокиВыполнения.Очистить();
	
	Точка = СрокиВыполнения.Точки.Добавить();
	
	Границы = Новый Структура("Начало, Окончание", '39991231', '00010101');
	
	Если ЗначениеЗаполнено(НачатьНеРанее) И ЗначениеЗаполнено(ДатаПотребности) И НЕ ЭтоРазборка Тогда
		ДобавитьИнтервалВСрокиВыполнения(Точка, НачатьНеРанее, ДатаПотребности, ВидИнтервалаРаспоряжение(), Границы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗапускаГрафик) И ЗначениеЗаполнено(ДатаВыпускаГрафик) Тогда
		ДобавитьИнтервалВСрокиВыполнения(Точка, ДатаЗапускаГрафик, ДатаВыпускаГрафик, ВидИнтервалаГрафик(), Границы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗапускаМодель) И ЗначениеЗаполнено(ДатаВыпускаМодель) Тогда
		ДобавитьИнтервалВСрокиВыполнения(Точка, ДатаЗапускаМодель, ДатаВыпускаМодель, ВидИнтервалаМодель(), Границы);
	КонецЕсли;
	
	СрокиВыполнения.Обновление = Истина;
	
	Если ЗначениеЗаполнено(Границы.Окончание) Тогда
		НастроитьШкалуСрокиВыполнения(Границы.Начало, Границы.Окончание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнтервалВСрокиВыполнения(Точка, Начало, Окончание, ВидИнтервала, Границы)
	
	Серия = СрокиВыполнения.Серии.Добавить();
	Серия.Текст = ВидИнтервала;
	Серия.Цвет = ЦветИнтервала(ВидИнтервала);
	
	Значение = СрокиВыполнения.ПолучитьЗначение(Точка, Серия);
	
	Интервал = Значение.Добавить();
	Интервал.Начало = Начало;
	Интервал.Конец = Окончание;
	
	ФорматнаяСтрока = ФорматнаяСтрокаДляДатыГрафикаПроизводства();
	Интервал.Текст = Формат(Начало, ФорматнаяСтрока)
		+ " - "
		+ Формат(Окончание, ФорматнаяСтрока);
	
	Если ВидИнтервала = ВидИнтервалаРаспоряжение() Тогда
 		Интервал.Расшифровка = Распоряжение;
	ИначеЕсли ВидИнтервала = ВидИнтервалаГрафик() Тогда
		Если ГрафикЗапланирован Тогда
			Интервал.Расшифровка = СтатусПредварительныйГрафик();
		Иначе
			Интервал.Расшифровка = СтатусРабочийГрафик();
		КонецЕсли;
	ИначеЕсли ВидИнтервала = ВидИнтервалаМодель() Тогда
		Интервал.Расшифровка = СтатусМодельГрафика();
	КонецЕсли;
	
	Границы.Начало = Мин(Границы.Начало, Начало);
	Границы.Окончание = Макс(Границы.Окончание, Окончание);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьШкалуСрокиВыполнения(Начало, Окончание)
	
	НастройкиШкалы = УправлениеПроизводствомКлиентСервер.НастройкиШкалыДиаграммыГантаВРежимеВсеДанные(
		Начало, Окончание, 3);
	
	ШкалаВремениЭлементы = СрокиВыполнения.ОбластьПостроения.ШкалаВремени.Элементы;
	
	Для Индекс = 1 По ШкалаВремениЭлементы.Количество()-1 Цикл
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[Индекс]);
	КонецЦикла;
	
	ЭлементШкалы = ШкалаВремениЭлементы.Добавить();
	ЭлементШкалы.Единица = НастройкиШкалы.Единица;
	ЭлементШкалы.Формат = НастройкиШкалы.Формат;
	
	Если ШкалаВремениЭлементы.Количество() = 2 Тогда
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[0]);
	КонецЕсли;
	
	СрокиВыполнения.УстановитьПолныйИнтервал(
		НастройкиШкалы.НачалоПолногоИнтервала,
		НастройкиШкалы.ОкончаниеПолногоИнтервала);
	
КонецПроцедуры

&НаСервере
Функция ВидИнтервалаРаспоряжение()
	
	Возврат "Распоряжение";
	
КонецФункции

&НаСервере
Функция ВидИнтервалаГрафик()
	
	Возврат "График";
	
КонецФункции

&НаСервере
Функция ВидИнтервалаМодель()
	
	Возврат "Модель";
	
КонецФункции

&НаСервере
Функция ЦветИнтервала(ВидИнтервала)
	
	Если ВидИнтервала = ВидИнтервалаРаспоряжение() Тогда
		
		Результат = WebЦвета.СветлоЗеленый;
		
	ИначеЕсли ВидИнтервала = ВидИнтервалаГрафик() Тогда
		
		Результат = WebЦвета.Голубой;
		
	ИначеЕсли ВидИнтервала = ВидИнтервалаМодель() Тогда
		
		Результат = WebЦвета.Хаки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДиаграммаЗагрузкаОборудования

&НаСервере
Процедура НастроитьДиаграммуЗагрузкаОборудования()
	
	Если НЕ ИспользуетсяПланированиеПоПроизводственнымРесурсам() Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГистограмму(ЗагрузкаОборудования);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуЗагрузкаОборудованияВФоне()
	
	Если НЕ ИспользуетсяПланированиеПоПроизводственнымРесурсам() Тогда
		Возврат;
	КонецЕсли;
	
	Если МодельЗапланирована Тогда
		
		ИмяОперации = ИмяДлительнойОперацииЗагрузкаОборудования();
		ОтменитьДлительнуюОперацию(ИмяОперации);
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Распоряжение", Распоряжение);
		ПараметрыПроцедуры.Вставить("КоличествоЕдиниц", 5);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение загрузки оборудования по модели';
																|en = 'Reading the equipment load according to model'");
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"Отчеты.ЗагрузкаОборудованияПоМоделиГрафикаПроизводства.ПолучитьНаиболееЗагруженноеОборудование",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
		
		ОписаниеОперации = ОписаниеДлительнойОперации(ЭтотОбъект, ИмяОперации);
		Если ДлительнаяОперация.Статус = СтатусДлительнойОперацииВыполняется() Тогда
			
			ОписаниеОперации.ДлительнаяОперация = ДлительнаяОперация;
			ОписаниеОперации.НачатьОжидание = Истина;
			
		Иначе
			
			ОписаниеОперации.ДлительнаяОперация = Неопределено;
			ОписаниеОперации.НачатьОжидание = Ложь;
			
			ОбработатьРезультатЧтенияЗагрузкиОборудованияВФоне(ДлительнаяОперация);
			
		КонецЕсли;
		
	Иначе
		
		ОчиститьИПоказатьЗагрузкуОборудования(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДиаграммуЗагрузкаОборудованияВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяОперации = ИмяДлительнойОперацииЗагрузкаОборудования();
	ОписаниеОперации = ОписаниеДлительнойОперации(ЭтотОбъект, ИмяОперации);
	ОписаниеОперации.ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		
		ОчиститьИПоказатьЗагрузкуОборудования(ЭтотОбъект);
		
	Иначе
		
		ОбработатьРезультатЧтенияЗагрузкиОборудованияВФоне(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЧтенияЗагрузкиОборудованияВФоне(Результат)
	
	Если Результат.Статус = СтатусДлительнойОперацииВыполнено() Тогда
		
		ЗаполнитьЗагрузкуОборудования(Результат.АдресРезультата);
		
	Иначе
		
		ОчиститьИПоказатьЗагрузкуОборудования(ЭтотОбъект);
		
		Если Результат.Статус = СтатусДлительнойОперацииОшибка() Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗагрузкуОборудования(АдресРезультата)
	
	ЗагрузкаОборудования.Обновление = Ложь;
	ЗагрузкаОборудования.Очистить();
		
	Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ЗначениеЗаполнено(Данные) Тогда
		
		РеквизитыВРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			Данные.ВыгрузитьКолонку("ВидРабочегоЦентра"),
			"Представление");
		
		Данные.Сортировать("ЗагрузкаПроценты Возр");
		
		Серия = ЗагрузкаОборудования.Серии.Добавить("Загрузка");
		Серия.Цвет = WebЦвета.Лосось;
		
		Для Индекс = 0 По Данные.Количество()-1 Цикл
			
			Расшифровка = Данные[Индекс].ВидРабочегоЦентра;
			ТекстТочки = РеквизитыВРЦ.Получить(Расшифровка).Представление;
			Значение = Данные[Индекс].ЗагрузкаПроценты;
			Подсказка = ТекстТочки + ", " + Значение + "%";
			
			Точка = ЗагрузкаОборудования.Точки.Добавить();
			Точка.Текст = ТекстТочки;
			
			ЗагрузкаОборудования.УстановитьЗначение(Точка, Серия, Значение, Расшифровка, Подсказка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗагрузкаОборудования.Обновление = Истина;
	
	Элементы.ГруппаЗагрузкаОборудованияДлительнаяОперация.ТекущаяСтраница = Элементы.СтраницаЗагрузкаОборудованияДиаграмма;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьИПоказатьЗагрузкуОборудования(Форма)
	
	Форма.ЗагрузкаОборудования.Очистить();
	Форма.Элементы.ГруппаЗагрузкаОборудованияДлительнаяОперация.ТекущаяСтраница = Форма.Элементы.СтраницаЗагрузкаОборудованияДиаграмма;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиЗагрузкаОборудования(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МодельЗапланирована Тогда
		
		Отбор = Новый Структура("Распоряжение", Распоряжение);
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Отбор", Отбор);
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОтчета.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		
		ОткрытьФорму(
			"Отчет.ЗагрузкаОборудованияПоМоделиГрафикаПроизводства.ФормаОбъекта",
	        ПараметрыОтчета,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДиаграммаОбеспечениеМатериалами

&НаСервере
Процедура НастроитьДиаграммуОбеспечениеМатериалами()
	
	Если НЕ ИспользуетсяПланированиеПоМатериальнымРесурсам() Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГистограмму(ОбеспечениеМатериалами);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуОбеспечениеМатериаламиВФоне()
	
	Если НЕ ИспользуетсяПланированиеПоМатериальнымРесурсам() Тогда
		Возврат;
	КонецЕсли;
	
	Если МодельЗапланирована Тогда
		
		ИмяОперации = ИмяДлительнойОперацииОбеспечениеМатериалами();
		ОтменитьДлительнуюОперацию(ИмяОперации);
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Распоряжение", Распоряжение);
		ПараметрыПроцедуры.Вставить("КоличествоЕдиниц", 5);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение потребности в материалах по модели';
																|en = 'Reading the demand for materials according to model'");
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"Отчеты.ПотребностьВМатериалахПоМоделиГрафикаПроизводства.ПолучитьМатериалыСНаибольшейЗадержкойВОбеспечении",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
		
		ОписаниеОперации = ОписаниеДлительнойОперации(ЭтотОбъект, ИмяОперации);
		Если ДлительнаяОперация.Статус = СтатусДлительнойОперацииВыполняется() Тогда
			
			ОписаниеОперации.ДлительнаяОперация = ДлительнаяОперация;
			ОписаниеОперации.НачатьОжидание = Истина;
			
		Иначе
			
			ОписаниеОперации.ДлительнаяОперация = Неопределено;
			ОписаниеОперации.НачатьОжидание = Ложь;
			
			ОбработатьРезультатЧтенияОбеспеченияМатериаламиВФоне(ДлительнаяОперация);
			
		КонецЕсли;
		
	Иначе
		
		ОчиститьИПоказатьОбеспечениеМатериалами(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДиаграммуОбеспечениеМатериаламиВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяОперации = ИмяДлительнойОперацииОбеспечениеМатериалами();
	ОписаниеОперации = ОписаниеДлительнойОперации(ЭтотОбъект, ИмяОперации);
	ОписаниеОперации.ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		
		ОчиститьИПоказатьОбеспечениеМатериалами(ЭтотОбъект);
		
	Иначе
		
		ОбработатьРезультатЧтенияОбеспеченияМатериаламиВФоне(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЧтенияОбеспеченияМатериаламиВФоне(Результат)
	
	Если Результат.Статус = СтатусДлительнойОперацииВыполнено() Тогда
		
		ЗаполнитьОбеспечениеМатериалами(Результат.АдресРезультата);
		
	Иначе
		
		ОчиститьИПоказатьОбеспечениеМатериалами(ЭтотОбъект);
		
		Если Результат.Статус = СтатусДлительнойОперацииОшибка() Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбеспечениеМатериалами(АдресРезультата)
	
	ОбеспечениеМатериалами.Очистить();
		
	Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ЗначениеЗаполнено(Данные) Тогда
		
		ОбеспечениеМатериалами.Обновление = Ложь;
		
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			Данные.ВыгрузитьКолонку("Номенклатура"),
			"Представление");
		
		Данные.Сортировать("Опоздание Возр");
		
		Серия = ОбеспечениеМатериалами.Серии.Добавить("Опоздание");
		Серия.Цвет = WebЦвета.Лосось;
		
		Для Индекс = 0 По Данные.Количество()-1 Цикл
			
			Расшифровка = Данные[Индекс].Номенклатура;
			ТекстТочки = РеквизитыНоменклатуры.Получить(Расшифровка).Представление;
			Значение = Данные[Индекс].Опоздание;
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, %2 дн.';
					|en = '%1, %2 days'"), ТекстТочки, Значение);
			
			Точка = ОбеспечениеМатериалами.Точки.Добавить();
			Точка.Текст = ТекстТочки;
			
			ОбеспечениеМатериалами.УстановитьЗначение(Точка, Серия, Значение, Расшифровка, Подсказка);
			
		КонецЦикла;
		
		ОбеспечениеМатериалами.Обновление = Истина;
		Элементы.ГруппаОбеспечениеМатериаламиДлительнаяОперация.ТекущаяСтраница =
			Элементы.СтраницаОбеспечениеМатериаламиДиаграмма;
		
	Иначе
		
		Элементы.ГруппаОбеспечениеМатериаламиДлительнаяОперация.ТекущаяСтраница =
			Элементы.СтраницаОбеспечениеМатериаламиЗадержкиОтсутствуют;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьИПоказатьОбеспечениеМатериалами(Форма)
	
	Форма.ОбеспечениеМатериалами.Очистить();
	Форма.Элементы.ГруппаОбеспечениеМатериаламиДлительнаяОперация.ТекущаяСтраница = Форма.Элементы.СтраницаОбеспечениеМатериаламиДиаграмма;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьОбеспечениеМатериаламиПоМодели()
	
	Если МодельЗапланирована Тогда
		
		Отбор = Новый Структура("Распоряжение", Распоряжение);
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Отбор", Отбор);
		ПараметрыОтчета.Вставить("КлючВарианта", "ПотребностьВМатериалахКонтекст");
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОтчета.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		
		ОткрытьФорму(
			"Отчет.ПотребностьВМатериалахПоМоделиГрафикаПроизводства.ФормаОбъекта",
	        ПараметрыОтчета,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область ЕдиницыИзмерения
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПродукцияНоменклатураЕдиницаИзмерения", "Продукция.Упаковка");
	
	#КонецОбласти

	#Область ОпозданиеПоГрафикуШапка
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыпускаГрафик.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОпозданиеГрафик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаВыпускаГрафик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРазборка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	#КонецОбласти
	
	#Область ОпозданиеПоГрафикуПродукция
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаВыпускаГрафик.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОпозданиеГрафик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продукция.ДатаВыпускаГрафик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРазборка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	#КонецОбласти
	
	#Область ОпозданиеПоМоделиШапка
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыпускаМодель.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОпозданиеМодель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаВыпускаМодель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРазборка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	#КонецОбласти
		
	#Область ОпозданиеПоМоделиПродукция
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаВыпускаМодель.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОпозданиеМодель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продукция.ДатаВыпускаМодель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРазборка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	#КонецОбласти
	
	#Область ДатыГрафика
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаЗапускаГрафик.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаВыпускаГрафик.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаЗапускаМодель.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаВыпускаМодель.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыНачало.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОкончание.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Формат",
		ФорматнаяСтрокаДляДатыГрафикаПроизводства());
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриСоздании()
	
	НастроитьВидимостьЭлементовФормы();
	НастроитьФорматЭлементовСТипомДата();
	НастроитьДиаграммуСрокиВыполнения();
	НастроитьДиаграммуЗагрузкаОборудования();
	НастроитьДиаграммуОбеспечениеМатериалами();
	ЗаполнитьДлительныеОперацииФормы();
	ЗаполнитьОбозначенияПродукции();
	НастроитьТекстЗапросаСпискаЭтапы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбозначенияПродукции()
	
	Макет = Обработки.ПланированиеГрафикаПроизводства2_2.ПолучитьМакет("РасшифровкаТаблицыПродукция");
	Область = Макет.ПолучитьОбласть("Расшифровка");
	ОбозначенияПродукции.Вывести(Область);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТекстЗапросаСпискаЭтапы()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	СвойстваСписка.ТекстЗапроса = СтрЗаменить(
		Этапы.ТекстЗапроса,
		"&ПредставлениеЭтапа",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("ЭтапыПереопределяемый"));
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Этапы, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовФормы()
	
	Элементы.ГруппаЗагрузкаОборудования.Видимость = ИспользуетсяПланированиеПоПроизводственнымРесурсам();
	Элементы.ГруппаОбеспечениеМатериалами.Видимость = ИспользуетсяПланированиеПоМатериальнымРесурсам();
	
	// Шапка
	Элементы.ДатаПотребности.Видимость = НЕ ЭтоРазборка;
	Элементы.ДекорацияЗаголовок4.Видимость = НЕ ЭтоРазборка;
	Элементы.ОпозданиеГрафик.Видимость = НЕ ЭтоРазборка;
	Элементы.ОпозданиеМодель.Видимость = НЕ ЭтоРазборка;
	
	// Колонка Опоздание в таблице
	Элементы.ПродукцияОпозданиеГрафик.Видимость = НЕ ЭтоРазборка;
	Элементы.ПродукцияОпозданиеМодель.Видимость = НЕ ЭтоРазборка;
	
	// Легенда диаграммы
	Элементы.ЦветРаспоряжение.Видимость = НЕ ЭтоРазборка;
	Элементы.ЛегендаРаспоряжение.Видимость = НЕ ЭтоРазборка;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорматЭлементовСТипомДата()
	
	ФорматнаяСтрока = ФорматнаяСтрокаДляДатыГрафикаПроизводства();
	
	Элементы.НачатьНеРанее.ФорматРедактирования = ФорматнаяСтрока;
	Элементы.ДатаПотребности.ФорматРедактирования = ФорматнаяСтрока;
	Элементы.ДатаЗапускаГрафик.ФорматРедактирования = ФорматнаяСтрока;
	Элементы.ДатаВыпускаГрафик.ФорматРедактирования = ФорматнаяСтрока;
	Элементы.ДатаЗапускаМодель.ФорматРедактирования = ФорматнаяСтрока;
	Элементы.ДатаВыпускаМодель.ФорматРедактирования = ФорматнаяСтрока;
	
КонецПроцедуры

&НаСервере
Функция ФорматнаяСтрокаДляДатыГрафикаПроизводства()
	
	Возврат УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства();	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазностьДатСтрокой(Знач Дата1, Знач Дата2)
	
	РазностьЧасы = Цел((Дата2 - Дата1 + 1)/3600);
	
	Если РазностьЧасы < 1 Тогда
		
		Результат = "";
		
	Иначе
		
		Если РазностьЧасы <= 48 Тогда
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 ч.';
					|en = '%1 h.'"),
				РазностьЧасы);
			
		Иначе
			
			РазностьДни = Цел((НачалоДня(Дата2) - НачалоДня(Дата1))/86400);
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 дн.';
					|en = '%1 days'"),
				Формат(РазностьДни, "ЧГ=0"));
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Форма.Элементы.ФормаСохранить.Доступность = Форма.ГрафикЗапланирован;
	Форма.Модифицированность = Форма.ГрафикЗапланирован;
	
	Форма.Элементы.ДатаЗапускаМодель.Доступность = Форма.МодельЗапланирована;
	Форма.Элементы.ДатаВыпускаМодель.Доступность = Форма.МодельЗапланирована;
	Форма.Элементы.ОпозданиеМодель.Доступность = Форма.МодельЗапланирована;
	Форма.Элементы.ДлительностьМодель.Доступность = Форма.МодельЗапланирована;
	Форма.Элементы.ЗагрузкаОборудования.Доступность = Форма.МодельЗапланирована;
	Форма.Элементы.ОбеспечениеМатериалами.Доступность = Форма.МодельЗапланирована;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПеречитатьДанныеЗавершение(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		ПеречитываниеДанных = Истина;
		УдалитьРезультатыПланированияНаКлиенте(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусРабочийГрафик()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатусПредварительныйГрафик()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусПредварительныйГрафик();
	
КонецФункции
	
&НаСервереБезКонтекста
Функция СтатусМодельГрафика()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусМодельГрафика();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборТолькоЗадерживающиеЗаказЭтапы(Список, ЗначениеОтбора)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"ЗадерживаетЗаказ", 
		ЗначениеОтбора, 
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеОтбора);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиФормыКлиент()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТолькоЗадерживающиеЗаказЭтапы", ТолькоЗадерживающиеЗаказЭтапы);
	
	СохранитьНастройкиФормыСервер(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыСервер(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючФормы(),
		КлючНастроекФормы(),
		Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы(),
		КлючНастроекФормы());
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		ПослеЗагрузкиНастроекФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючФормы()
	
	Возврат "Обработка.ПланированиеГрафикаПроизводства2_2.ПланированиеГрафикаЗаказа";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекФормы()
	
	Возврат "Основные";
	
КонецФункции

&НаСервере
Процедура ПослеЗагрузкиНастроекФормы()
	
	УстановитьОтборТолькоЗадерживающиеЗаказЭтапы(Этапы, ТолькоЗадерживающиеЗаказЭтапы);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГистограмму(Диаграмма)
	
	Диаграмма.Анимация = АнимацияДиаграммы.НеИспользовать;
	Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
	Диаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаГоризонтальная;
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	Диаграмма.ОбластьПостроения.Верх = 0;
	Диаграмма.ОбластьПостроения.Лево = 0;
	Диаграмма.ОбластьПостроения.ШкалаЗначений.ОтображениеЛинийСетки = ОтображениеЛинийСеткиДиаграммы.НеОтображать;
	Диаграмма.ОбластьПостроения.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодыОшибокПланирования()
	
	Менеджер = Обработки.ПланированиеГрафикаПроизводства2_2;
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибкиДоступностьВРЦ", Менеджер.КодОшибкиДоступностьВРЦ());
	Результат.Вставить("КодОшибкиГрафикРаботыПодразделения", Менеджер.КодОшибкиГрафикРаботыПодразделения());
	Результат.Вставить("КодОшибкиГрафикРаботыПредприятия", Менеджер.КодОшибкиГрафикРаботыПредприятия());
	Результат.Вставить("КодОшибкиОтсутствуетГрафикПредшественника", Менеджер.КодОшибкиОтсутствуетГрафикПредшественника());
	Результат.Вставить("КодОшибкиЕстьЦиклыВЦепочкеЭтапов", Менеджер.КодОшибкиЕстьЦиклыВЦепочкеЭтапов());
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуетсяПланированиеПоПроизводственнымРесурсам()
	
	Возврат УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоПроизводственнымРесурсам();
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуетсяПланированиеПоМатериальнымРесурсам()
	
	Возврат УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоМатериальнымРесурсам();
	
КонецФункции

#КонецОбласти

#КонецОбласти
