
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ПланированиеГрафикаЭтапов", ПланированиеГрафикаЭтапов);
	Элементы.ПолноеПерепланирование.Видимость = НЕ ПланированиеГрафикаЭтапов;
	
	ЗагрузитьНастройкиФормы();
	
	СкрытьОтключитьНедоступныеНастройки();
	
	ЗаполнитьПояснениеНастроек(ЭтотОбъект);
	
	ЗаполнитьИнформационныеНадписиПриСоздании();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗадействоватьРезервДоступностиПриИзменении(Элемент)
	
	СохранитьНастройкиФормыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеПерепланированиеПриИзменении(Элемент)
	
	СохранитьНастройкиФормыКлиент();
	ЗаполнитьПояснениеНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеИзмененияГрафикаПриИзменении(Элемент)
	
	ЗаполнитьПояснениеНастроек(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Планировать(Команда)
	
	НастройкиПланирования = Новый Структура;
	
	НастройкиПланирования.Вставить("ЗадействоватьРезервДоступности", ЗадействоватьРезервДоступности);
	НастройкиПланирования.Вставить("ОтменитьРучныеИзмененияГрафика", ОтменитьРучныеИзмененияГрафика);
	
	Если НЕ ПланированиеГрафикаЭтапов Тогда
		НастройкиПланирования.Вставить("ПолноеПерепланирование", ПолноеПерепланирование);
	КонецЕсли;
	
	Закрыть(НастройкиПланирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючФормы(), Неопределено);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьОтключитьНедоступныеНастройки()
	
	Настройки = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если НЕ Настройки.ИспользуетсяПланированиеПоПроизводственнымРесурсам Тогда
		
		Элементы.ЗадействоватьРезервДоступности.Видимость = Ложь;
		ЗадействоватьРезервДоступности = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиФормыКлиент()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЗадействоватьРезервДоступности", ЗадействоватьРезервДоступности);
	Настройки.Вставить("ПолноеПерепланирование", ПолноеПерепланирование);
	
	СохранитьНастройкиФормыСервер(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормыСервер(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючФормы(),
		Неопределено,
		Настройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючФормы()
	
	Возврат "Обработка.ПланированиеГрафикаПроизводства2_2.НастройкиПланированияСпискаРаспоряженийИЭтапов";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПояснениеНастроек(Форма)
	
	Если Форма.ПланированиеГрафикаЭтапов Тогда
		Возврат;
	КонецЕсли;
	
	Подсказка = УправлениеПроизводствомКлиентСервер.ОписаниеНастроекПланирования(
		Форма.ПолноеПерепланирование,
		Форма.ОтменитьРучныеИзмененияГрафика);
	
	Форма.Элементы.Группа1.Подсказка = Подсказка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационныеНадписиПриСоздании()
	
	Если ПланированиеГрафикаЭтапов Тогда
		
		Этапы = Новый Массив;
		Если Параметры.Свойство("Этапы", Этапы) Тогда
			
			ЗаполнитьИнформационныеНадписиПланированиеЭтапов(Этапы);
			
		КонецЕсли;
		
	Иначе
		
		Распоряжения = Новый Массив;
		Если Параметры.Свойство("Распоряжения", Распоряжения) Тогда
			
			ЗаполнитьИнформационныеНадписиПланированиеРаспоряжений(Распоряжения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационныеНадписиПланированиеЭтапов(Этапы)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЭтапПроизводства2_2.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка В(&Этапы)
	|	И ЭтапПроизводства2_2.РучноеРазмещениеВГрафике = ИСТИНА");
	
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Количество) Тогда
		
		Элементы.НадписьРазмещенныеВручную.Заголовок = СтрШаблон(
			НСтр("ru = 'Имеются этапы, запланированные вручную (всего: %1).';
				|en = 'There are stages scheduled manually (total: %1).'"),
			Выборка.Количество);
		Элементы.ГруппаРазмещенныеВручную.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаРазмещенныеВручную.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаАктуальностьГрафика.Видимость = Ложь;
	Элементы.ГруппаНаличиеБолееПриоритетныхЗаказов.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационныеНадписиПланированиеРаспоряжений(Распоряжения)
	
	РазмещеноВручную = 0;
	РассчитатьГрафик = 0;
	ЕстьПриоритетные = Ложь;
	
	ПрочитатьДанныеИнформационныхНадписей(РазмещеноВручную, РассчитатьГрафик, ЕстьПриоритетные, Распоряжения);
	
	Если РазмещеноВручную > 0 Тогда
		
		Элементы.НадписьРазмещенныеВручную.Заголовок = СтрШаблон(
			НСтр("ru = 'Имеются этапы, запланированные вручную (всего: %1).';
				|en = 'There are stages scheduled manually (total: %1).'"),
			РазмещеноВручную);
		Элементы.ГруппаРазмещенныеВручную.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаРазмещенныеВручную.Видимость = Ложь;
		
	КонецЕсли;
	
	Если РассчитатьГрафик > 0 Тогда
		
		Элементы.НадписьАктуальностьГрафика.Заголовок = СтрШаблон(
			НСтр("ru = 'График не актуален. Имеются этапы, требующие перепланирования (всего: %1).';
				|en = 'Schedule is not relevant. There are stages which require rescheduling (total: %1).'"),
			РассчитатьГрафик);
		
	Иначе
		
		Элементы.НадписьАктуальностьГрафика.Заголовок = НСтр("ru = 'График актуален.';
															|en = 'Schedule is relevant.'");
		
	КонецЕсли;
	Элементы.ГруппаАктуальностьГрафика.Видимость = Истина;
	
	Элементы.ГруппаНаличиеБолееПриоритетныхЗаказов.Видимость = ЕстьПриоритетные;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеИнформационныхНадписей(РазмещеноВручную, РассчитатьГрафик, ЕстьПриоритетные, Распоряжения)
	
	Распоряжение = РаспоряжениеСНаименьшимПриоритетом(Распоряжения);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЗаказНаПроизводство2_2.СоздатьВТЗаказыСБольшимПриоритетом(
		МенеджерВременныхТаблиц,
		"ВТПриоритетныеЗаказы",
		Распоряжение);
	
	ИсключитьИзВТПланируемыеРаспоряжения(
		МенеджерВременныхТаблиц,
		"ВТПриоритетныеЗаказы",
		Распоряжения);
	
	Обработки.ПланированиеГрафикаПроизводства2_2.ПрочитатьКоличествоОбъектовДляПланирования(
		РазмещеноВручную,
		РассчитатьГрафик,
		ЕстьПриоритетные,
		Распоряжения,
		МенеджерВременныхТаблиц,
		"ВТПриоритетныеЗаказы");
	
КонецПроцедуры

&НаСервере
Функция РаспоряжениеСНаименьшимПриоритетом(Распоряжения)
	
	Если Распоряжения.Количество() = 1 Тогда
		
		Результат = Распоряжения[0];
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказНаПроизводство2_2.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
		|ГДЕ
		|	ЗаказНаПроизводство2_2.Проведен = ИСТИНА
		|	И ЗаказНаПроизводство2_2.Ссылка В(&Распоряжения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания УБЫВ,
		|	ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания УБЫВ,
		|	ЗаказНаПроизводство2_2.Очередь УБЫВ");
		
		Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИсключитьИзВТПланируемыеРаспоряжения(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Распоряжения)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТПриоритетныеЗаказы.Ссылка
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	ВТПриоритетныеЗаказы КАК ВТПриоритетныеЗаказы
	|ГДЕ
	|	НЕ ВТПриоритетныеЗаказы.Ссылка В (&Распоряжения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПриоритетныеЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаказы.Ссылка
	|ПОМЕСТИТЬ ВТПриоритетныеЗаказы
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПриоритетныеЗаказы", ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти
