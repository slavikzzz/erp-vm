
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Возврат при получении формы для анализа.
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
		КлючНастроек                = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияИспользования;
		КлючНастроек                = Параметры.КлючНазначенияИспользования;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/Обработка.ЖурналДокументовИнтеркампани";
	
	ИспользуетсяОграничениеПоОрганизации = УправлениеДоступомСлужебный.ЕстьОграничениеТаблицыПоВидуДоступа(
		"РегистрСведений.РеестрДокументов", "Организации", "ГруппыПартнеров,Организации,Подразделения,Склады");
	
	ВосстановитьНастройки(Параметры);
	
	ТЗХозОперацииИТипыДокументов = Обработки.ЖурналДокументовИнтеркампани.ИнициализироватьХозяйственныеОперацииИДокументы(
		ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
	ИспользуемыеТипыДокументов = ТЗХозОперацииИТипыДокументов.ВыгрузитьКолонку("ТипДокумента");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(СписокОформлено);
	
	Если ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Истина;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.ПредставлениеСостояния;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.Сторно"));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокОформленоКоманднаяПанель;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект,Элементы.СписокОформлено, Элементы.ПредставлениеСостояния);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData"
			И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			
		КонецЕсли;
		
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "СписокОформлено";
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если ИмяСобытия = "Запись_ВозвратТоваровМеждуОрганизациями"
		Или ИмяСобытия = "Запись_ОтчетПоКомиссииМеждуОрганизациями"
		Или ИмяСобытия = "Запись_ОтчетПоКомиссииМеждуОрганизациямиОСписании"
		Или ИмяСобытия = "Запись_ПередачаТоваровМеждуОрганизациями"
		//++ НЕ УТКА
		Или ИмяСобытия = "Запись_ОтчетДавальцуМеждуОрганизациями"
		//-- НЕ УТКА
		ИЛИ ИмяСобытия = "Проведение_Сторно"
		Или ИмяСобытия = "Запись_Сторно" Тогда
		
		Элементы.СписокОформлено.Обновить();
		
		ОбновитьГиперссылкуКОформлению();
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаСписка(ИмяСобытия, ЭтотОбъект, Элементы.СписокОформлено);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияГиперссылкиКОформлению()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		
		ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища,КОформлению);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы",    КлючНазначенияФормыПоУмолчанию());
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы",
		ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	
	ОповещениеФормы = Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора", ПараметрыФормы, , , , ,
		ОповещениеФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИмяКлючевойоперации = 
		"Обработка.ЖурналДокументовИнтеркампани.ФормаСписка.Команда.КОформлениюОбработкаНавигационнойСсылки."
		+ НавигационнаяСсылкаФорматированнойСтроки;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойоперации);
	
	СтандартнаяОбработка = Ложь;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ОтборыФормыСписка = Новый Структура;
	ОтборыФормыСписка.Вставить("Организация", Организация);
	ОтборыФормыСписка.Вставить("Склад",       Склад);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияФормы", КлючНазначенияФормыПоУмолчанию());
	ПараметрыФормы.Вставить("ОтборыФормыСписка",   ОтборыФормыСписка);
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "РабочееМестоПередачиВыкуп") > 0 Тогда
		ПараметрУникальности = КлючНазначенияФормыПоУмолчанию();
	Иначе
		ПараметрУникальности = Ложь;
	КонецЕсли;
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы, , ПараметрУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КнопкаСоздать

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Склад",       Склад);
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Склад",       Склад);
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы, КлючФормы,
		КлючНазначенияИспользования, СтруктураОтбора);
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокОформлено);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокОформлено, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокОформлено);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)

	ДоступныКомандыЭДО = Истина;
	ЭтоКомандаТекущиеДелаЭДО = СтрНайти(Команда.Имя, "ТекущиеДелаЭДО");
	ЭтоКомандаПроизвольныйДокумент = СтрНайти(Команда.Имя, "ПроизвольныйДокумент");
	Если Не ЭтоКомандаТекущиеДелаЭДО и Не ЭтоКомандаПроизвольныйДокумент Тогда
		Если Элементы.СписокОформлено.ТекущиеДанные <> Неопределено Тогда
			ТекущийДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элементы.СписокОформлено.ТекущиеДанные, "Ссылка");
			Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
				РезультатыПроверки = ЭлектронноеВзаимодействиеУТВызовСервера.ПроверитьНаличиеПараметровЭДПоИсточнику(ТекущийДокумент);
				ДоступныКомандыЭДО = РезультатыПроверки.Получить("ЕстьЭДО");
				
				Если РезультатыПроверки.Получить("ЕстьЭДО") Тогда
					Если РезультатыПроверки.Получить("Направление") = "Входящий" Тогда
						ОбменСКонтрагентамиУТКлиент.ИзменитьДоступностьКомандыПерезаполнить(ЭтотОбъект, Истина);
					Иначе
						ОбменСКонтрагентамиУТКлиент.ИзменитьДоступностьКомандыПерезаполнить(ЭтотОбъект, Ложь);				
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДоступныКомандыЭДО = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДоступныКомандыЭДО Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для данного типа документов отправка/получение по ЭДО не предусмотрено.';
										|en = 'Sending/receiving via EDI is not available for this document type.'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.ПредставлениеСостояния);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(Период, Неопределено, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = ВыбранноеЗначение;
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокОформлено, Заголовок);
	СписокПровестиСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокОформлено, Заголовок);
	СписокОтменаПроведенияСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокОформлено, Заголовок);
	СписокПометкаУдаленияСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма,
		Элементы.СписокОформлено);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыСостоянияОригинала()
	
	ОбновитьКомандыСостоянияОригинала()
   
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыСостоянияОригинала()
	
	ТЗХозОперацииИТипыДокументов = Обработки.ЖурналДокументовИнтеркампани.ИнициализироватьХозяйственныеОперацииИДокументы(
		ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);	
	
	ИспользуемыеТипыДокументов = ТЗХозОперацииИТипыДокументов.ВыгрузитьКолонку("ТипДокумента");

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокОформленоКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОформлено

&НаКлиенте
Процедура СписокОформленоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "СостояниеОригиналаПервичногоДокумента" Или Поле.Имя = "СостояниеОригиналПолучен" Тогда
		// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
		УчетОригиналовПервичныхДокументовКлиент.СписокВыбор(Поле.Имя,ЭтотОбъект, Элементы.СписокОформлено, СтандартнаяОбработка);
		// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
	Если Поле = Элементы.ПредставлениеСостояния Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(Элемент.ТекущиеДанные.Ссылка, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОформленоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		
		Если Копирование Тогда
			
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
			
		ИначеЕсли ОтборТипыДокументов.Количество() = 1
			И ОтборХозяйственныеОперации.Количество() = 1 Тогда
			
			СтруктураКоманды = Новый Структура("Имя", Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
			
		Иначе
			
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОформленоПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОформленоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	СписокПометкаУдаленияСервер();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОформленоПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокОформленоПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуСписка(Строки);
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриПолученииДанныхНаСервере(Строки);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СписокПометкаУдаленияСервер()
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	ОбновитьГиперссылкуКОформлению();
КонецПроцедуры

&НаСервере
Процедура СписокОтменаПроведенияСервер()
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	ОбновитьГиперссылкуКОформлению();
КонецПроцедуры

&НаСервере
Процедура СписокПровестиСервер()
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	ОбновитьГиперссылкуКОформлению();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокОформлено.Дата",
		"СписокОформленоДата");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыИнтеркампани";
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		
		ФормаОткрытаПоГиперссылке = Истина;
		ОтборыФормыСписка = Параметры.СтруктураБыстрогоОтбора;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОтборыФормыСписка, "Организация") Тогда
			Организация = ОтборыФормыСписка.Организация;
		Иначе
			Организация = Неопределено;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОтборыФормыСписка, "МестоХранения") Тогда
			Склад = ОтборыФормыСписка.МестоХранения;
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ФормаОткрытаПоГиперссылке = Ложь;
		
		КлючОбъекта = "Обработка.ЖурналДокументовИнтеркампани.Форма.ФормаСписка";
		Настройки   = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНазначенияИспользования);
		
		Если Настройки <> Неопределено Тогда
			
			Организация = Настройки.Организация;
			Склад       = Настройки.Склад;
			Период      = Настройки.Период;
			
			ОтборТипыДокументов        = Настройки.ОтборТипыДокументов;
			ОтборХозяйственныеОперации = Настройки.ОтборХозяйственныеОперации;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозяйственныеОперацииИДокументы)
	
	КлючНазначенияФормы = КлючНазначенияФормыПоУмолчанию();
	ЗаголовокФормы      = НСтр("ru = 'Документы между организациями (все)';
								|en = 'Intercompany sales documents (all)'");
	
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(ТЗХозяйственныеОперацииИДокументы, КлючНазначенияФормы,
		ЗаголовокФормы);
	
	Заголовок = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	
	УстановитьОтборыДинамическогоСписка();
	УстановитьВидимостьДоступность();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(ИнформационнаяНадписьОтбор, ХозяйственныеОперацииИДокументы,
		ОтборТипыДокументов, ОтборХозяйственныеОперации);
	
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОформлено, "ТипСсылки",
		ОтборТипыДокументов, ВидСравненияКомпоновкиДанных.ВСписке, Неопределено, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОформлено, "ХозяйственнаяОперация",
		ОтборХозяйственныеОперации, ВидСравненияКомпоновкиДанных.ВСписке, Неопределено, Истина);
	
	УстановитьОтборПоОрганизации();
	УстановитьОтборПоСкладу();
	УстановитьОтборПоПериоду();
	
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()
	
	Если Не ИспользуетсяОграничениеПоОрганизации Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОформлено, "ДополнительнаяЗапись",
			Ложь, ВидСравненияКомпоновкиДанных.Равно, Неопределено, Не ЗначениеЗаполнено(Организация));
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос;
		запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОформлено, "Организация",
		СписокОрганизаций, ВидСравненияКомпоновкиДанных.ВСписке, Неопределено, ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСкладу()
	
	ОтборСклады = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	ОтборМестаХранения = Справочники.КлючиРеестраДокументов.КлючиПоЗначениям(ОтборСклады);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОформлено,
																			"МестоХранения",
																			ОтборМестаХранения,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ЗначениеЗаполнено(ОтборМестаХранения));	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериоду()
	
	КонецПериода = ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, Дата(2999, 12, 31));
	
	Если Период.ДатаНачала > КонецПериода Тогда
		ВызватьИсключение НСтр("ru = 'Дата начала периода не может быть больше даты окончания периода';
								|en = 'The period start date cannot be greater than the period end date'");
	КонецЕсли;
	
	СписокОформлено.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	СписокОформлено.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецДня(Дата(3999, 12, 31))));
		
КонецПроцедуры

&НаСервере
Функция ОбновитьГиперссылкуКОформлению()
	
	// Проверка необходимости отображения элемента формы КОформлению
	Отбор = Новый Структура("Отбор", Истина);
	ХозОперацииИДокументы = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
	
	НеобходимаГиперссылкаКОформлению = Ложь;
	
	Для Каждого Строка Из ХозОперацииИДокументы Цикл
		Если ЗначениеЗаполнено(Строка.МенеджерРасчетаГиперссылкиКОформлению) Тогда
			НеобходимаГиперссылкаКОформлению = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Организация",          Организация);
	ПараметрыФормирования.Вставить("Склад",                Склад);
	ПараметрыФормирования.Вставить("ЭтоРасчетГиперссылки", Истина);
	ПараметрыФормирования.Вставить("КлючНазначенияИспользования", КлючНазначенияФормыПоУмолчанию());
	
	Если НеобходимаГиперссылкаКОформлению Тогда
	
		Элементы.КОформлению.Видимость = Истина;
		ТекстИдетОбновлениеДанных = НСтр("ru = 'К оформлению: <идет обновление данных>';
										|en = 'To register: <updating data>'");
		КОформлению = Новый ФорматированнаяСтрока(ТекстИдетОбновлениеДанных);
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ХозяйственныеОперацииИДокументы.Выгрузить());
		ПараметрыЗадания.Добавить(ПараметрыФормирования);
		
		ПроцедураРасчета = "Обработки.ЖурналДокументовИнтеркампани.СформироватьГиперссылкуКОформлениюФоновоеЗадание";
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне(ПроцедураРасчета,
		                                                     ПараметрыЗадания,
		                                                     ПараметрыВыполнения);
		
		АдресХранилища       = РезультатРасчета.АдресРезультата;
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		
		Если РезультатРасчета.Статус = "Выполнено" Тогда
			ОбновитьГиперссылкуКОформлениюЗавершение(АдресХранилища,КОформлению);
		КонецЕсли;
	Иначе
		Элементы.КОформлению.Видимость = Ложь;
	КонецЕсли;
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Обработка.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов");
	
	СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, ПараметрыФормирования);
	Элементы.СмТакжеВРаботе.Видимость = ЗначениеЗаполнено(СмТакжеВРаботе);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьГиперссылкуКОформлениюЗавершение(Знач АдресХранилища,КОформлению)
	
	КОформлению = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не ЗначениеЗаполнено(КОформлению) Тогда
		ТекстИдетОбновлениеДанных = НСтр("ru = 'К оформлению: нет';
										|en = 'To register: no'");
		КОформлению = Новый ФорматированнаяСтрока(ТекстИдетОбновлениеДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьОтборПоОрганизации();
	ОбновитьГиперссылкуКОформлению();

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	УстановитьОтборПоСкладу();
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Элементы.Склад.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Элементы.СписокОформленоВалюта.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СписокОформленоДоговор.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
	Элементы.СписокОформленоКонтрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма                                             = ЭтаФорма;
	СтруктураПараметров.ИмяКнопкиСкопировать                              = "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню               = "СписокСкопировать1";
	СтруктураПараметров.ИмяКнопкиИзменить                                 = "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                  = "СписокИзменить1";
	СтруктураПараметров.ИмяКнопкиПровести                                 = "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                  = "СписокПровести1";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                         = "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню          = "СписокОтменаПроведения1";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                = "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню = "СписокУстановитьПометкуУдаления1";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормаОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	КлючОбъекта = "Обработка.ЖурналДокументовИнтеркампани.Форма.ФормаСписка";
	ИменаСохраняемыхРеквизитов = "Организация,Склад,Период,ОтборХозяйственныеОперации,ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	ТекстСостояния = НСтр("ru = 'Выполняется поиск документа по штрихкоду...';
							|en = 'Searching for the document by barcode...'");
	Состояние(ТекстСостояния);
	
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "СписокОформлено");
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ТЗХозяйственныеОперацииИДокументы = ХозяйственныеОперацииИДокументы.Выгрузить();
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ТЗХозяйственныеОперацииИДокументы);
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

#КонецОбласти

#Область РаботаСКешируемымиЗначениями

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов)
	
	ТЗХозяйственныеОперацииИДокументы = ПолучитьИзВременногоХранилища(АдресДоступныхХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(ТЗХозяйственныеОперацииИДокументы,
		ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозяйственныеОперацииИДокументы);
	
КонецПроцедуры

#КонецОбласти
