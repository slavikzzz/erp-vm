
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	Если Параметры.Свойство("Распоряжения") Тогда
		Распоряжения.ЗагрузитьЗначения(Параметры.Распоряжения);
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяТекущейСтраницы") И ЗначениеЗаполнено(Параметры.ИмяТекущейСтраницы) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[Параметры.ИмяТекущейСтраницы];
		ТекущийЭлемент = Элементы.Страницы.ТекущаяСтраница;
	КонецЕсли;
	
	ВосстановитьНастройки(Параметры);
	УстановитьОтборПоОрганизации();
	УстановитьОтборПоСкладу();
	
	ЗаполнитьМетаданныеДокументов();
	НастроитьФормуПоПравамИФункциональнымОпциям();
	
	ТребуетсяОбновитьПередачи = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьОтчеты = Истина;
	ТребуетсяОбновитьВозвраты = Истина;
	
	ОбновитьТекущуюСтраницуНаСервере();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// Инициализация сохраненных отборов
	СостоянияПередачиПриИзменении(Неопределено);
	СостоянияПоступленияПриИзменении(Неопределено);
	СостояниеОтчетаПриИзменении(Неопределено);
	СостояниеВозвратыПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И КлючНазначенияИспользования <> "ТекущиеДела" И КлючНазначенияИспользования <> "ВводНаОсновании" Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ЗаказПереработчику" Или ИмяСобытия = "Принять_ФормаСозданныхДокументов" Тогда
		ТребуетсяОбновитьПередачи = Истина;
		ТребуетсяОбновитьПоступления = Истина;
		ТребуетсяОбновитьОтчеты = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ПередачаСырьяПереработчику" Тогда
		ТребуетсяОбновитьПередачи = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ПоступлениеОтПереработчика" Тогда
		ТребуетсяОбновитьПоступления = Истина;
		ТребуетсяОбновитьОтчеты = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ОтчетПереработчика" Тогда
		ТребуетсяОбновитьОтчеты = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ВозвратСырьяОтПереработчика" Тогда
		ТребуетсяОбновитьВозвраты = Истина;
	ИначеЕсли ИмяСобытия = "Запись_РасходныйОрдерНаТовары" Тогда
		ТребуетсяОбновитьПередачи = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ПриходныйОрдерНаТовары" Тогда
		ТребуетсяОбновитьПоступления = Истина;
		ТребуетсяОбновитьВозвраты = Истина;
	ИначеЕсли ИмяСобытия = "СменаСтраницы_КОформлениюПередача" Тогда
		ТекущийЭлемент = Элементы[Параметр];
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбновитьТекущуюСтраницу();
	
	Если ЗначениеЗаполнено(Распоряжения)
		И СписокРаспоряженияНаПередачу.Количество() = 0 И СписокРаспоряженияНаПоступление.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Если отборы уже загружены из параметров
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Организация") Тогда
			Настройки.Удалить("Организация");
		КонецЕсли;
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Склад") Тогда
			Настройки.Удалить("Склад");
		КонецЕсли;
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Менеджер") Тогда
			Настройки.Удалить("Менеджер");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ТребуетсяОбновитьПередачи = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьОтчеты = Истина;
	ТребуетсяОбновитьВозвраты = Истина;
	
	ОбновитьТекущуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияПередачиПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если Не ПустаяСтрока(СостояниеНакладнойПередачи) Тогда
		ОтборСтрок.Вставить("СостояниеНакладной", Число(СостояниеНакладнойПередачи));
	КонецЕсли;
	Если Не ПустаяСтрока(СостояниеОрдераНаОтгрузку) Тогда
		ОтборСтрок.Вставить("СостояниеОрдераНаОтгрузку", Число(СостояниеОрдераНаОтгрузку));
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаПередачу.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияПоступленияПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если Не ПустаяСтрока(СостояниеНакладнойПоступления) Тогда
		ОтборСтрок.Вставить("СостояниеНакладной", Число(СостояниеНакладнойПоступления));
	КонецЕсли;
	Если Не ПустаяСтрока(СостояниеОрдераНаПриемку) Тогда
		ОтборСтрок.Вставить("СостояниеОрдераНаПриемку", Число(СостояниеОрдераНаПриемку));
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаПоступление.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОтчетаПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(СостояниеОтчета) Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("СостояниеОтчета", Число(СостояниеОтчета));
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОтчеты.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВозвратыПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(СостояниеОрдераНаПриемкуВозврат) Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("СостояниеОрдераНаПриемку", Число(СостояниеОрдераНаПриемкуВозврат));
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаВозвратСырья.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналПереработкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьПоЗаказамПередачи(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОформитьПоЗаказамПередачи");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПередачу.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаспоряженияПоСкладам = НакладныеКлиент.ДанныеДляОформленияПоЗаказам(СписокРаспоряженияНаПередачу,
		ВыделенныеСтроки, "Склад",
		СписокОшибок, "Объект.СписокРаспоряженияНаПередачу", МетаданныеДокументов);
	
	Если ЗначениеЗаполнено(РаспоряженияПоСкладам) Тогда
		
		ПараметрыСозданныхДокументов = НакладныеВызовСервера.ОформитьНакладныеПоЗаказам(РаспоряженияПоСкладам,
			ПараметрыФормыСозданныхДокументов(), СписокОшибок, "Объект.СписокРаспоряженияНаПередачу");
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузкеПередачи(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОформитьПоОтгрузкеПередачи");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПередачу.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаспоряженияПоСкладам = НакладныеКлиент.ДанныеДляОформленияПоОрдерам(СписокРаспоряженияНаПередачу,
		ВыделенныеСтроки, "Склад",
		СписокОшибок, "Объект.СписокРаспоряженияНаПередачу", МетаданныеДокументов);
	
	Если ЗначениеЗаполнено(РаспоряженияПоСкладам) Тогда
		
		ПараметрыСозданныхДокументов = НакладныеВызовСервера.ОформитьНакладныеПоОрдерам(РаспоряженияПоСкладам,
			ПараметрыФормыСозданныхДокументов(), СписокОшибок, "Объект.СписокРаспоряженияНаПередачу");
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоЗаказамПоступления(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОформитьПоЗаказамПоступления");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПоступление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаспоряженияПоСкладам = НакладныеКлиент.ДанныеДляОформленияПоЗаказам(СписокРаспоряженияНаПоступление,
		ВыделенныеСтроки, "Склад",
		СписокОшибок, "Объект.СписокРаспоряженияНаПоступление", МетаданныеДокументов);
	
	Если ЗначениеЗаполнено(РаспоряженияПоСкладам) Тогда
		
		ПараметрыСозданныхДокументов = НакладныеВызовСервера.ОформитьНакладныеПоЗаказам(РаспоряженияПоСкладам,
			ПараметрыФормыСозданныхДокументов(), СписокОшибок, "Объект.СписокРаспоряженияНаПоступление");
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоПриемкеПоступления(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОформитьПоПриемкеПоступления");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПоступление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаспоряженияПоСкладам = НакладныеКлиент.ДанныеДляОформленияПоОрдерам(СписокРаспоряженияНаПоступление,
		ВыделенныеСтроки, "Склад",
		СписокОшибок, "Объект.СписокРаспоряженияНаПоступление", МетаданныеДокументов);
	
	Если ЗначениеЗаполнено(РаспоряженияПоСкладам) Тогда
		
		ПараметрыСозданныхДокументов = НакладныеВызовСервера.ОформитьНакладныеПоОрдерам(РаспоряженияПоСкладам,
			ПараметрыФормыСозданныхДокументов(), СписокОшибок, "Объект.СписокРаспоряженияНаПоступление");
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтчеты(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОформитьОтчеты");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОтчеты.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Поступления = Новый Массив();
	Заказы      = Новый Массив();
	Сводно      = Новый Массив();
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		Данные = СписокРаспоряженияНаОтчеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
			Заказы.Добавить(Данные.Ссылка);
		ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
			Поступления.Добавить(Данные.Ссылка);
		Иначе
			РеквизитыШапки = Новый Структура("Организация, Партнер", Данные.Организация, Данные.Партнер);
			Сводно.Добавить(Новый Структура("ПоЗаказам, РеквизитыШапки, МассивЗаказов",
				Ложь, РеквизитыШапки, Новый Массив));
		КонецЕсли;
	КонецЦикла;
	
	Если Сводно.Количество() = 1 И Не ЗначениеЗаполнено(Заказы) И Не ЗначениеЗаполнено(Поступления) Тогда
		
		ПараметрыСозданныхДокументов = Новый Структура("ИмяФормы, Параметры");
		ПараметрыСозданныхДокументов.ИмяФормы = "Документ.ОтчетПереработчика.ФормаОбъекта";
		ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", Сводно[0]);
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
		
	Иначе
		
		Для каждого Данные Из Сводно Цикл
			ТекстОшибки = НСтр("ru = 'Одновременное оформление отчета по переработчику %1 в рамках организации %2 вместе с другими распоряжениями невозможно. Выберите данную строку отдельно.';
								|en = 'Cannot register the report by the %1 subcontractor in the %2 company with other references simultaneously. Select this line separately.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Данные.РеквизитыШапки.Партнер, Данные.РеквизитыШапки.Организация);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОтчеты",
				ТекстОшибки, Неопределено);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Заказы) Или ЗначениеЗаполнено(Поступления) Тогда
			
			ПараметрыСозданныхДокументов = ОформитьОтчетыНаСервере(Заказы, Поступления,
				ПараметрыФормыСозданныхДокументов("ОформитьОтчеты"), СписокОшибок, "Объект.СписокРаспоряженияНаОтчеты");
			НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, для которого можно было бы оформить отчет переработчика.';
								|en = 'No document for which ""Subcontracting services notification received"" can be registered is selected.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки, Неопределено);
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоПриемкеВозвраты(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОформитьПоПриемкеВозвраты");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаВозвратСырья.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(
		ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаспоряженияПоСкладам = НакладныеКлиент.ДанныеДляОформленияПоОрдерам(СписокРаспоряженияНаВозвратСырья,
		ВыделенныеСтроки, "Склад",
		СписокОшибок, "Объект.СписокРаспоряженияНаВозвратСырья", МетаданныеДокументов);
	
	Если ЗначениеЗаполнено(РаспоряженияПоСкладам) Тогда
		
		ПараметрыСозданныхДокументов = НакладныеВызовСервера.ОформитьНакладныеПоОрдерам(РаспоряженияПоСкладам,
			ПараметрыФормыСозданныхДокументов(), СписокОшибок, "Объект.СписокРаспоряженияНаВозвратСырья");
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПередачи(Команда)
	ОткрытьОтчетСостояниеВыполненияДокументов("СписокРаспоряженияНаПередачу", СписокРаспоряженияНаПередачу);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПоступления(Команда)
	ОткрытьОтчетСостояниеВыполненияДокументов("СписокРаспоряженияНаПоступление", СписокРаспоряженияНаПоступление);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияОтчеты(Команда)
	ОткрытьОтчетСостояниеВыполненияДокументов("СписокРаспоряженияНаОтчеты", СписокРаспоряженияНаОтчеты);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаПередачу(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОбновитьСписокРаспоряженияНаПередачу");
	
	ОбновитьСписокРаспоряженияНаПередачуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаПоступление(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОбновитьСписокРаспоряженияНаПоступление");
	
	ОбновитьСписокРаспоряженияНаПоступлениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаОтчеты(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОбновитьСписокРаспоряженияНаОтчеты");
	
	ОбновитьСписокРаспоряженияНаОтчетыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаВозвратСырья(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Команда.ОбновитьСписокРаспоряженияНаВозвратСырья");
	
	ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Документы имеют высокий приоритет
	ВысшийПриоритет = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Передача имеет высокий приоритет';
								|en = 'Transfer is in high priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПередачу.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПередачу.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ВысшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Поступление имеет высокий приоритет';
								|en = 'Receipt is in high priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПоступление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПоступление.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ВысшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отчет имеет высокий приоритет';
								|en = 'Report is in high priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчеты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ВысшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документы имеют низкий приоритет
	НизшийПриоритет = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Передача имеет низкий приоритет';
								|en = 'Transfer is in low priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПередачу.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПередачу.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НизшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Поступление имеет низкий приоритет';
								|en = 'Receipt is in low priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПоступление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПоступление.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НизшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отчет имеет низкий приоритет';
								|en = 'Report is in low priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчеты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НизшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отчет без распоряжения';
								|en = 'Report without reference'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыТипРаспоряжения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без распоряжения>';
																|en = '<without reference>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отчет поле не используется';
								|en = 'The Report field is not used'");
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыНомер.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыДата.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыСуммаДокумента.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыВалюта.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыКонтрагент.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыПодразделение.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыМенеджер.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыДополнительно.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыСсылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	////
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаПередачу.Дата",     "СписокРаспоряженияНаПередачуДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаПоступление.Дата",  "СписокРаспоряженияНаПоступлениеДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОтчеты.Дата",       "СписокРаспоряженияНаОтчетыДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаВозвратСырья.Дата", "СписокРаспоряженияНаВозвратСырьяДата");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравамИФункциональнымОпциям()
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		Элементы.СписокРаспоряженияНаПередачуСостояниеВыполнения.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаОформлениеСостояниеВыполнения.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаОтчетыСостояниеВыполнения.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке")
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке) Тогда
		Элементы.СписокРаспоряженияНаПередачуОформитьПоЗаказам.Заголовок = НСтр("ru = 'Оформить';
																				|en = 'Register'");
		Элементы.Переместить(Элементы.ГруппаКомандыПередачи, Элементы.ГруппаСостоянияПередачи);
		
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПередачи.СписокВыбора, Истина);
		
		Элементы.СостояниеОрдераНаОтгрузку.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаПередачуОформитьПоОтгрузке.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаПередачуСостояниеОрдера.Видимость = Ложь;
	Иначе
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПередачи.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаОтгрузку.СписокВыбора);
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении")
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению) Тогда
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоЗаказам.Заголовок = НСтр("ru = 'Оформить';
																					|en = 'Register'");
		Элементы.Переместить(Элементы.ГруппаКомандыПоступления, Элементы.ГруппаСостоянияПоступления);
		
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПоступления.СписокВыбора, Истина);
		
		Элементы.СостояниеОрдераНаПриемку.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоПриемке.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаПоступлениеСостояниеОрдера.Видимость = Ложь;
		Элементы.СтраницаВозвратыСырья.Видимость =  Ложь;
	Иначе
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПоступления.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаПриемку.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаПриемкуВозврат.СписокВыбора, Истина);
	КонецЕсли;
	
	ПросмотрЗаказов = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПереработчику);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
		ИЛИ НЕ ПравоДоступа("Просмотр", Метаданные.Документы.ПередачаСырьяПереработчику) ИЛИ НЕ ПросмотрЗаказов Тогда
		Элементы.СтраницаПередачиСырья.Видимость = Ложь;
	ИначеЕсли НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПередачаСырьяПереработчику) Тогда
		Элементы.СписокРаспоряженияНаПередачуОформитьПоЗаказам.Доступность = Ложь;
		Элементы.СписокРаспоряженияНаПередачуОформитьПоОтгрузке.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
		ИЛИ НЕ ПравоДоступа("Просмотр", Метаданные.Документы.ПоступлениеОтПереработчика) ИЛИ НЕ ПросмотрЗаказов Тогда
		Элементы.СтраницаПоступления.Видимость = Ложь;
	ИначеЕсли НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеОтПереработчика) Тогда
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоЗаказам.Доступность = Ложь;
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоПриемке.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыПолученныеОтПереработчика)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
		ИЛИ НЕ ПравоДоступа("Просмотр", Метаданные.Документы.ПоступлениеОтПереработчика) ИЛИ НЕ ПросмотрЗаказов Тогда
		Элементы.СтраницаОтчеты.Видимость = Ложь;
	Иначе
		СписокВыбора = Элементы.СостояниеОтчета.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("1", НСтр("ru = 'Создать отчет';
										|en = 'Create a report'"),    Ложь, БиблиотекаКартинок.СоздатьНакладную);
		СписокВыбора.Добавить("2", НСтр("ru = 'Дооформить отчет';
										|en = 'Finish creating the report'"), Ложь, БиблиотекаКартинок.ДооформитьНакладную);
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОтчетПереработчика) Тогда
			Элементы.СписокРаспоряженияНаОтчетыОформить.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы.ВозвратСырьяОтПереработчика) Тогда
		Элементы.СтраницаВозвратыСырья.Видимость = Ложь;
	ИначеЕсли НЕ ПравоДоступа("Добавление", Метаданные.Документы.ВозвратСырьяОтПереработчика) Тогда
		Элементы.СписокРаспоряженияНаВозвратСырьяОформить.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжения) Тогда
		Элементы.ГруппаОтборы.Видимость = Ложь;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.СостояниеНакладнойПередачи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.СостояниеОрдераНаОтгрузку.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.СостояниеНакладнойПоступления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.СостояниеОрдераНаПриемку.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		
		Элементы.СписокРаспоряженияНаПередачуСправка.Видимость = Истина;
		Элементы.СписокРаспоряженияНаПоступлениеСправка.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиСырья Тогда
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"));
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПередачаСырьяПереработчику.ПустаяСсылка"));
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступления Тогда
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"));
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеОтПереработчика.ПустаяСсылка"));
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПереработчику.ПустаяСсылка"));
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеОтПереработчика.ПустаяСсылка"));
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья Тогда
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ВозвратСырьяОтПереработчика.ПустаяСсылка"));
	КонецЕсли;
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиСырья Тогда
			ТекущийСписок = "СписокРаспоряженияНаПередачу";
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступления Тогда
			ТекущийСписок = "СписокРаспоряженияНаПоступление";
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
			ТекущийСписок = "СписокРаспоряженияНаОтчеты";
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья Тогда
			ТекущийСписок = "СписокРаспоряженияНаВозвратСырья";
		КонецЕсли;
		
		Найдено = ЭтаФорма[ТекущийСписок].НайтиСтроки(Новый Структура("Ссылка", Ссылка));
		ТаблицаФормы = Элементы[ТекущийСписок]; // ТаблицаФормы
		Если ЗначениеЗаполнено(Найдено) Тогда
			ТаблицаФормы.ТекущаяСтрока = Найдено[0].ПолучитьИдентификатор();
		КонецЕсли;
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновитьСписокРаспоряжения

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаПередачуНаСервере()
	
	Если Элементы.СписокРаспоряженияНаПередачу.ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаПередачу.НайтиПоИдентификатору(Элементы.СписокРаспоряженияНаПередачу.ТекущаяСтрока).Ссылка;
	Иначе
		ТекущийДокумент = Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад,, Менеджер);
	ТекстыЗапросов = ТекстыЗапросов(ПараметрыОтбора, Перечисления.ХозяйственныеОперации.ПередачаПереработчику);
	
	Запрос = Новый Запрос(ТекстыЗапросов.ТекстЗапросаРасчетаСостояний);
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОформляемаяХозОперация", Перечисления.ХозяйственныеОперации.ПередачаПереработчику);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад", СписокСкладов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения.ВыгрузитьЗначения());
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаСпискаРаспоряжений;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаПередачу.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		Найдено = СписокРаспоряженияНаПередачу.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ЗначениеЗаполнено(Найдено) Тогда
			Элементы.СписокРаспоряженияНаПередачу.ТекущаяСтрока = Найдено[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяОбновитьПередачи = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаПоступлениеНаСервере()
	
	Если Элементы.СписокРаспоряженияНаПоступление.ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаПоступление.НайтиПоИдентификатору(Элементы.СписокРаспоряженияНаПоступление.ТекущаяСтрока).Ссылка;
	Иначе
		ТекущийДокумент = Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад,, Менеджер);
	ТекстыЗапросов = ТекстыЗапросов(ПараметрыОтбора, Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика);
	
	Запрос = Новый Запрос(ТекстыЗапросов.ТекстЗапросаРасчетаСостояний);
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОформляемаяХозОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад", СписокСкладов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения.ВыгрузитьЗначения());
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаСпискаРаспоряжений;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаПоступление.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		Найдено = СписокРаспоряженияНаПоступление.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ЗначениеЗаполнено(Найдено) Тогда
			Элементы.СписокРаспоряженияНаПоступление.ТекущаяСтрока = Найдено[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяОбновитьПоступления = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаОтчетыНаСервере()
	
	Если Элементы.СписокРаспоряженияНаОтчеты.ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаОтчеты.НайтиПоИдентификатору(Элементы.СписокРаспоряженияНаОтчеты.ТекущаяСтрока).Ссылка;
	Иначе
		ТекущийДокумент = Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,,,, Менеджер);
	
	Запрос = Новый Запрос(НакладныеСервер.ТекстЗапросаСостояний("СостоянияОтчетовПереработчика", ПараметрыОтбора, Неопределено));
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрДокументов.НомерДокументаИБ КАК Номер,
		|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипРаспоряжения,
		|	ОстаткиСостояния.Состояние КАК СостояниеОтчета,
		|	РеестрДокументов.Сумма КАК СуммаДокумента,
		|	РеестрДокументов.Валюта КАК Валюта,
		|	ЕСТЬNULL(ОстаткиСостояния.Партнер, РеестрДокументов.Партнер) КАК Партнер,
		|	РеестрДокументов.Контрагент.Ключ КАК Контрагент,
		|	ЕСТЬNULL(ОстаткиСостояния.Организация, РеестрДокументов.Организация) КАК Организация,
		|	РеестрДокументов.Подразделение КАК Подразделение,
		|	РеестрДокументов.Ответственный КАК Менеджер,
		|	ОстаткиСостояния.Распоряжение КАК Ссылка,
		|	РеестрДокументов.Дополнительно КАК Дополнительно,
		|	ВЫБОР
		|		КОГДА ОстаткиСостояния.Распоряжение ССЫЛКА Документ.ЗаказПереработчику
		|			ТОГДА ВЫРАЗИТЬ(ОстаткиСостояния.Распоряжение КАК Документ.ЗаказПереработчику).Приоритет
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ВтСостоянияОтчетовПереработчика КАК ОстаткиСостояния
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ОстаткиСостояния.Распоряжение = РеестрДокументов.Ссылка
		|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаОтчеты.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		Найдено = СписокРаспоряженияНаОтчеты.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ЗначениеЗаполнено(Найдено) Тогда
			Элементы.СписокРаспоряженияНаОтчеты.ТекущаяСтрока = Найдено[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяОбновитьОтчеты = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере()
	
	Если Элементы.СписокРаспоряженияНаВозвратСырья.ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаВозвратСырья.НайтиПоИдентификатору(Элементы.СписокРаспоряженияНаВозвратСырья.ТекущаяСтрока).Ссылка;
	Иначе
		ТекущийДокумент = Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад,, Менеджер);
	ТекстыЗапросов = ТекстыЗапросов(ПараметрыОтбора, Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика);
	
	Запрос = Новый Запрос(ТекстыЗапросов.ТекстЗапросаРасчетаСостояний);
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОформляемаяХозОперация", Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад", СписокСкладов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	Если ЗначениеЗаполнено(Распоряжения) Тогда
		Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаСпискаРаспоряжений;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаВозвратСырья.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		Найдено = СписокРаспоряженияНаВозвратСырья.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ЗначениеЗаполнено(Найдено) Тогда
			Элементы.СписокРаспоряженияНаВозвратСырья.ТекущаяСтрока = Найдено[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяОбновитьВозвраты = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СохраняемыеНастройкиФормы

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиФормы(Параметры.СтруктураБыстрогоОтбора));
	Иначе
		НастройкиИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению", КлючНазначенияИспользования);
		
		Если ТипЗнч(НастройкиИзХранилища) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиФормы(НастройкиИзХранилища));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению",
		КлючНазначенияИспользования, НастройкиФормы(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормы(ИсточникНастроек)
	
	ИменаСохраняемыхРеквизитов =
		"Организация,
		|Склад,
		|Менеджер,
		|СостояниеНакладнойПередачи,
		|СостояниеНакладнойПоступления,
		|СостояниеОрдераНаОтгрузку,
		|СостояниеОрдераНаПриемку,
		|СостояниеОрдераНаПриемкуВозврат,
		|СостояниеОтчета";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ИсточникНастроек);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьОтборПоОрганизации();
	
	ТребуетсяОбновитьПередачи = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьОтчеты = Истина;
	ТребуетсяОбновитьВозвраты = Истина;
	
	ОбновитьТекущуюСтраницуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	УстановитьОтборПоСкладу();
	
	ТребуетсяОбновитьПередачи = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьВозвраты = Истина;
	
	ОбновитьТекущуюСтраницуНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура УстановитьОтборПоОрганизации()

	СписокОрганизаций.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций.ЗагрузитьЗначения(Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация));
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСкладу()
	
	СписокСкладов = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыПередачиВПереработку";
	
КонецФункции

&НаСервереБезКонтекста
Функция ОформитьОтчетыНаСервере(Заказы, Поступления, ПараметрыФормыСозданныхДокументов, СписокОшибок, ПолеОшибки)
	
	ПараметрыСозданныхДокументов = Новый Структура("ИмяФормы, Параметры");
	
	Если Заказы.Количество() = 1 И Поступления.Количество() = 0 Тогда
		ПараметрыСозданныхДокументов.ИмяФормы = "Документ.ОтчетПереработчика.ФормаОбъекта";
		ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", Заказы[0]);
	Иначе
		
		НакладныеСервер.СгруппироватьДокументыПоКлючевымПолям(Поступления, Документы.ОтчетПереработчика.КлючевыеПоляШапкиРаспоряжения());
		
		Если Поступления.Количество() = 1 И Заказы.Количество() = 0 Тогда
			
			МенеджерНакладной = Документы.ОтчетПереработчика;
			
			ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Поступления[0]);
			МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, Поступления[0]);
			
			ПараметрыСозданныхДокументов.ИмяФормы = "Документ.ОтчетПереработчика.ФормаОбъекта";
			ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", ПараметрыЗаполнения);
			
		Иначе
			
			НакладныеСервер.СгруппироватьДокументыПоКлючевымПолям(Заказы, "Ссылка");
			
			Группировка = Новый Структура("ИмяОформляемогоДокумента, МассивЗаказов, ПоляЗаполнения",
				Метаданные.Документы.ОтчетПереработчика.Имя, Заказы, Новый Структура);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Группировка.МассивЗаказов, Поступления);
		
			ГруппировкиРаспоряжений = Новый Массив(1);
			ГруппировкиРаспоряжений[0] = Группировка;
			
			СозданныеДокументы = НакладныеСервер.СформироватьДокументыПоРаспоряжениям(ГруппировкиРаспоряжений, СписокОшибок, ПолеОшибки);
			
			Если Не ЗначениеЗаполнено(СозданныеДокументы) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Владелец = Пользователи.АвторизованныйПользователь();
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы, ПараметрыФормыСозданныхДокументов.КлючДанных);
			УстановитьПривилегированныйРежим(Ложь);
			
			ПараметрыСозданныхДокументов.ИмяФормы = "ОбщаяФорма.ФормаСозданныхДокументов";
			ПараметрыСозданныхДокументов.Параметры = ПараметрыФормыСозданныхДокументов;
			ПараметрыСозданныхДокументов.Вставить("КоличествоСозданныхДокументов", СозданныеДокументы.Количество());
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ПараметрыСозданныхДокументов;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетСостояниеВыполненияДокументов(ИмяТаблицы, ТаблицаФормы)
	
	Если Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одной строки. Выполнение команды невозможно.';
										|en = 'No lines are selected. Cannot execute the command.'"));
	Иначе
		СписокДокументов = Новый СписокЗначений;
		Для каждого Идентификатор Из Элементы[ИмяТаблицы].ВыделенныеСтроки Цикл
			СтрокаТаблицы = ТаблицаФормы.НайтиПоИдентификатору(Идентификатор);
			Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
				СписокДокументов.Добавить(СтрокаТаблицы.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокДокументов.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выполнение команды возможно только для заказов переработчику.';
											|en = 'Command can be performed only for subcontracting purchase orders.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыЖурнала()
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",	Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",		Склад);
	СтруктураБыстрогоОтбора.Вставить("Менеджер",	Менеджер);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",	СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста",			"ЖурналДокументовПереработки");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",		"ДокументыПередачиВПереработку");
	ПараметрыЖурнала.Вставить("СинонимЖурнала",				НСтр("ru = 'Документы передачи в переработку 2.4';
																	|en = 'Subcontracting services received 2.4 — All documents'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПередачиКОформлению.Элемент.Страницы.ПриСменеСтраницы");
	
	ОбновитьТекущуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюСтраницу()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиСырья И ТребуетсяОбновитьПередачи Тогда
		ОбновитьСписокРаспоряженияНаПередачуНаСервере();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступления И ТребуетсяОбновитьПоступления Тогда
		ОбновитьСписокРаспоряженияНаПоступлениеНаСервере();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты И ТребуетсяОбновитьОтчеты Тогда
		ОбновитьСписокРаспоряженияНаОтчетыНаСервере();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья И ТребуетсяОбновитьВозвраты Тогда
		ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюСтраницуНаСервере()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиСырья И ТребуетсяОбновитьПередачи Тогда
		ОбновитьСписокРаспоряженияНаПередачуНаСервере();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступления И ТребуетсяОбновитьПоступления Тогда
		ОбновитьСписокРаспоряженияНаПоступлениеНаСервере();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты И ТребуетсяОбновитьОтчеты Тогда
		ОбновитьСписокРаспоряженияНаОтчетыНаСервере();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья И ТребуетсяОбновитьВозвраты Тогда
		ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстыЗапросов(ПараметрыОтбора, ХозОперация)
	
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(ХозОперация);
	
	Пакет = Новый Массив;
	Выборка = Новый Массив;
	Состояния = НакладныеСервер.СостоянияПоХозоперациям(ХозОперации);
	Для каждого КЗ Из Состояния Цикл
		Пакет.Добавить(НакладныеСервер.ТекстЗапросаСостояний(КЗ.Ключ, ПараметрыОтбора, КЗ.Значение));
		
		Если КЗ.Ключ = "СостоянияРасходныхОрдеров" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияРасходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияРасходныхОрдеров.Склад КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК Приоритет,
			|	ВЫБОР
			|		КОГДА СостоянияРасходныхОрдеров.Распоряжение ССЫЛКА Документ.ЗаказПереработчику
			|			ТОГДА 0
			|		ИНАЧЕ 4
			|	КОНЕЦ КАК СостояниеНакладной,
			|	СостоянияРасходныхОрдеров.Состояние КАК СостояниеРасходногоОрдера,
			|	4 КАК СостояниеПриходногоОрдера,
			|	ИСТИНА КАК НакладнаяНаОтгрузку,
			|	ЛОЖЬ КАК НакладнаяНаПриемку
			|ИЗ
			|	ВТСостоянияРасходныхОрдеров КАК СостоянияРасходныхОрдеров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыПолучатель
			|		ПО (СпрСкладыПолучатель.Ссылка = СостоянияРасходныхОрдеров.Получатель)
			|			И (СпрСкладыПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении)
			|			И (СпрСкладыПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)");
		ИначеЕсли КЗ.Ключ = "СостоянияПриходныхОрдеров" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияПриходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияПриходныхОрдеров.Склад КАК Склад,
			|	НЕОПРЕДЕЛЕНО КАК Приоритет,
			|	ВЫБОР
			|		КОГДА СостоянияПриходныхОрдеров.Распоряжение ССЫЛКА Документ.ЗаказПереработчику
			|			ТОГДА 0
			|		ИНАЧЕ 4
			|	КОНЕЦ КАК СостояниеНакладной,
			|	4 КАК СостояниеРасходногоОрдера,
			|	СостоянияПриходныхОрдеров.Состояние КАК СостояниеПриходногоОрдера,
			|	ЛОЖЬ КАК НакладнаяНаОтгрузку,
			|	ИСТИНА КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияПриходныхОрдеров КАК СостоянияПриходныхОрдеров
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО (СпрСкладыОтправитель.Ссылка = СостоянияПриходныхОрдеров.Отправитель)
			|			И (СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке)
			|			И (СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)");
		ИначеЕсли КЗ.Ключ = "СостоянияОтгрузок" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияОтгрузок.Распоряжение КАК Распоряжение,
			|	СостоянияОтгрузок.Склад КАК Склад,
			|	ДокЗаказПереработчику.Приоритет КАК Приоритет,
			|	СостоянияОтгрузок.Состояние КАК СостояниеНакладной,
			|	ВЫБОР
			|		КОГДА СпрСкладыОтправитель.Ссылка ЕСТЬ NULL
			|			ТОГДА 4
			|		КОГДА СостоянияОтгрузок.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеРасходногоОрдера,
			|	4 КАК СостояниеПриходногоОрдера,
			|	ИСТИНА КАК НакладнаяНаОтгрузку,
			|	ЛОЖЬ КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияОтгрузок КАК СостоянияОтгрузок
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО (СпрСкладыОтправитель.Ссылка = СостоянияОтгрузок.Склад)
			|			И (СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке)
			|			И (СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ДокЗаказПереработчику
			|			ПО СостоянияОтгрузок.Распоряжение = ДокЗаказПереработчику.Ссылка");
		ИначеЕсли КЗ.Ключ = "СостоянияПоступлений" Тогда
			Выборка.Добавить(
			"ВЫБРАТЬ
			|	СостоянияПоступлений.Распоряжение КАК Распоряжение,
			|	СостоянияПоступлений.Склад КАК Склад,
			|	ДокЗаказПереработчику.Приоритет КАК Приоритет,
			|	СостоянияПоступлений.Состояние КАК СостояниеНакладной,
			|	4 КАК СостояниеРасходногоОрдера,
			|	ВЫБОР
			|		КОГДА СпрСкладыПолучатель.Ссылка ЕСТЬ NULL
			|				ИЛИ ДокЗаказПереработчику.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
			|			ТОГДА 4
			|		КОГДА СостоянияПоступлений.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СостояниеПриходногоОрдера,
			|	ЛОЖЬ КАК НакладнаяНаОтгрузку,
			|	ИСТИНА КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияПоступлений КАК СостоянияПоступлений
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыПолучатель
			|		ПО (СпрСкладыПолучатель.Ссылка = СостоянияПоступлений.Склад)
			|			И (СпрСкладыПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении)
			|			И (СпрСкладыПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ДокЗаказПереработчику
			|			ПО СостоянияПоступлений.Распоряжение = ДокЗаказПереработчику.Ссылка");
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаРасчетаСостояний = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапросаСпискаРаспоряжений =
		СтрЗаменить(
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Распоряжение КАК Ссылка,
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	МАКСИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет,
		|	МАКСИМУМ(ВложенныйЗапрос.СостояниеНакладной) КАК СостояниеНакладной,
		|	МАКСИМУМ(ВложенныйЗапрос.СостояниеРасходногоОрдера) КАК СостояниеОрдераНаОтгрузку,
		|	МАКСИМУМ(ВложенныйЗапрос.СостояниеПриходногоОрдера) КАК СостояниеОрдераНаПриемку,
		|	МАКСИМУМ(ВложенныйЗапрос.НакладнаяНаОтгрузку) КАК НакладнаяНаОтгрузку,
		|	МАКСИМУМ(ВложенныйЗапрос.НакладнаяНаПриемку) КАК НакладнаяНаПриемку
		|ПОМЕСТИТЬ ВтОстаткиСостояния
		|ИЗ
		|	ТекстЗапросаВложенный КАК ВложенныйЗапрос
		|ГДЕ
		|	&КонтекстРаспоряжений
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Распоряжение,
		|	ВложенныйЗапрос.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеестрДокументов.НомерДокументаИБ КАК Номер,
		|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипРаспоряжения,
		|	ОстаткиСостояния.СостояниеНакладной КАК СостояниеНакладной,
		|	ОстаткиСостояния.СостояниеОрдераНаОтгрузку КАК СостояниеОрдераНаОтгрузку,
		|	ОстаткиСостояния.СостояниеОрдераНаПриемку КАК СостояниеОрдераНаПриемку,
		|	ОстаткиСостояния.НакладнаяНаОтгрузку КАК НакладнаяНаОтгрузку,
		|	ОстаткиСостояния.НакладнаяНаПриемку КАК НакладнаяНаПриемку,
		|	РеестрДокументов.Сумма КАК СуммаДокумента,
		|	РеестрДокументов.Валюта КАК Валюта,
		|	РеестрДокументов.Партнер КАК Партнер,
		|	РеестрДокументов.Контрагент.Ключ КАК Контрагент,
		|	РеестрДокументов.Организация КАК Организация,
		|	РеестрДокументов.Подразделение КАК Подразделение,
		|	ОстаткиСостояния.Склад КАК Склад,
		|	РеестрДокументов.Ответственный КАК Менеджер,
		|	ОстаткиСостояния.Ссылка КАК Ссылка,
		|	РеестрДокументов.Дополнительно КАК Дополнительно,
		|	&ОформляемаяХозОперация КАК ХозяйственнаяОперация,
		|	ОстаткиСостояния.Приоритет КАК Приоритет
		|ИЗ
		|	ВтОстаткиСостояния КАК ОстаткиСостояния
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ОстаткиСостояния.Ссылка = РеестрДокументов.Ссылка
		|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО ОстаткиСостояния.Склад = СпрСклады.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата", "ТекстЗапросаВложенный", "(" + СтрСоединить(Выборка, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");
	
	ТекстЗапросаСпискаРаспоряжений =
		СтрЗаменить(
			ТекстЗапросаСпискаРаспоряжений,
			"&КонтекстРаспоряжений",
			?(ЗначениеЗаполнено(Распоряжения),
				"ВложенныйЗапрос.Распоряжение В (&Распоряжения)",
				"ИСТИНА"));
	
	Возврат Новый Структура("ТекстЗапросаРасчетаСостояний, ТекстЗапросаСпискаРаспоряжений",
		ТекстЗапросаРасчетаСостояний, ТекстЗапросаСпискаРаспоряжений);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМетаданныеДокументов()
	
	Строка = МетаданныеДокументов.Добавить();
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ПередачаПереработчику;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПередачаСырьяПереработчику.ПолноеИмя();
	Строка.КлючевыеПоляШапки			= Документы.ПередачаСырьяПереработчику.КлючевыеПоляШапкиРаспоряжения();
	Строка.ЗаголовокФормыПереоформления	= НСтр("ru = 'Переоформление передачи сырья переработчику по выбранным распоряжениям';
													|en = 'Reregister ""Goods issue — Subcontracting services received"" for the selected references'");
	
	Строка = МетаданныеДокументов.Добавить();
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПоступлениеОтПереработчика.ПолноеИмя();
	Строка.КлючевыеПоляШапки			= Документы.ПоступлениеОтПереработчика.КлючевыеПоляШапкиРаспоряжения();
	Строка.ЗаголовокФормыПереоформления	= НСтр("ru = 'Переоформление поступления от переработчика по выбранным распоряжениям';
													|en = 'Reregister ""Goods receipt — Subcontracting services received"" for the selected references'");
	
	Строка = МетаданныеДокументов.Добавить();
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВозвратСырьяОтПереработчика.ПолноеИмя();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыСозданныхДокументов(ИмяКоманды = Неопределено)
	
	ПараметрыФормы = Новый Структура("КлючДанных, ВидимыеКолонки, СобытияОбновления",
		КлючНазначенияИспользования, Новый Массив, Новый Массив);
	
	ПараметрыФормы.ВидимыеКолонки.Добавить("Номер");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дата");
	ПараметрыФормы.ВидимыеКолонки.Добавить("ТипЗначения");
	ПараметрыФормы.ВидимыеКолонки.Добавить("СуммаДокумента");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Валюта");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Партнер");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Контрагент");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Договор");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Организация");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Подразделение");
	
	Если ИмяКоманды <> "ОформитьОтчеты" Тогда
		ПараметрыФормы.ВидимыеКолонки.Добавить("Склад");	
	КонецЕсли;	
	
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дополнительно");
	
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ПередачаСырьяПереработчику");
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ПоступлениеОтПереработчика");
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ОтчетПереработчика");
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
