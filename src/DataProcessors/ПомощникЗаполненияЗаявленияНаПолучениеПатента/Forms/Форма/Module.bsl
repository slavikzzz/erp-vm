#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПодготовитьДанныеПередОткрытием();
	УправлениеФормойПриСозданииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолучитьВидыДеятельностиВФоне();
	ПолучитьОписаниеСтавокНалогаВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		ПредставлениеПредставителя = ВыбранноеЗначение.Представитель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Организации" И Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизации();
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ИзменениеСтавокПСНПомощник" Тогда
		
		ОбработатьИзменениеСтавокПСН(Параметр);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ИспользуетсяСервисРегистрации Тогда
		
		НепроверяемыеРеквизиты = Новый Массив;
		НепроверяемыеРеквизиты.Добавить("Организация");
		НепроверяемыеРеквизиты.Добавить("ДатаСоставления");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ДатаНачала) И Объект.ДатаНачала < СрокПредставленияОтчета(ДатаСоставления) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Начало действия патента должно быть не менее чем через 10 рабочих дней от даты подачи заявления';
					|en = 'The beginning of a patent must be at least 10 workdays from the date of application'"),,
				"ДатаНачала", "Объект", Отказ);
		КонецЕсли;
		
		Если СпособПодачиДокументов = 1 И Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Представитель не заполнен';
					|en = 'Representative is not filled in'"),, "ПредставлениеПредставителя",, Отказ);
		КонецЕсли;
		
		Если Не РеквизитыОрганизацииЗаполнены Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Заполните недостающие реквизиты';
					|en = 'Fill in the missing attributes'"),, "СообщениеТребуютсяРеквизиты",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрименитьПониженнуюСтавку И Объект.СтавкаНалога = УчетУСНПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Укажите размер пониженной ставки налога или уберите признак ""Применить пониженную ставку""';
				|en = 'Specify the amount of the reduced tax rate or remove the ""Apply reduced rate"" flag'"),,
			"Объект.СтавкаНалога",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "АдресИРеквизитыИнспекции" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПерейтиКСервисуОпределитьРеквизитыИФНС();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокПатентов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначениеОтбора = Новый Структура("Владелец", Организация);
		ОткрытьФорму("Справочник.Патенты.ФормаСписка",
			Новый Структура("Отбор", ЗначениеОтбора));
		
	ИначеЕсли ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		СохранитьДанныеПомощникаРегистрации();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не ИспользуетсяСервисРегистрации Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормы", ЭтаФорма);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные изменены. Сохранить заявление?';
										|en = 'The data was changed. Save the changes?'"), Режим);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ПолучитьВидыДеятельностиВФоне();
	НалоговыеКаникулы = Ложь;
	УстановитьСтавкуНалога();
	ПолучитьОписаниеСтавокНалогаВФоне();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",       Организация);
	ПараметрыФормы.Вставить("Контекст",   Новый Структура);
	ПараметрыФормы.Вставить("Назначение", "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты",   ПроверяемыеРеквизитыОрганизации());
	ПараметрыФормы.Контекст.Вставить("Период",        ДатаСоставления);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", ИмяРеглОтчета());
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаЭлемента", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	ВидДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаПриИзменении(Элемент)
	
	КодРегионаПриИзмененииНаСервере();
	НалоговыеКаникулы = Ложь;
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КодРегионаПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерВидаДеятельностиПриИзменении(Элемент)
	
	ПорядковыйНомер = СокрЛП(Объект.ПорядковыйНомерВидаДеятельности);
	Если СтрДлина(ПорядковыйНомер) = 1 Тогда
		Объект.ПорядковыйНомерВидаДеятельности = СтрШаблон(НСтр("ru = '0%1';
																|en = '0%1'"), ПорядковыйНомер);
	КонецЕсли;
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПатентаПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала
		Или Год(Объект.ДатаОкончания) <> Год(Объект.ДатаНачала) Тогда
		
		Объект.ДатаОкончания = КонецГода(Объект.ДатаНачала);
		
	КонецЕсли;
	
	Если Год(ТекущаяДатаНачалаДействияПатента) <> Год(Объект.ДатаНачала)
		Или ЭтоПереходныйПериод(ТекущаяДатаНачалаДействияПатента) <> ЭтоПереходныйПериод(Объект.ДатаНачала) Тогда
		
		ПрочитатьДанныеКлассификатора(Элементы.ВидДеятельности, Объект.КодВидаДеятельности, АдресВоВременномХранилище,
			Объект.ДатаНачала, УникальныйИдентификатор);
		
		ПолучитьВидыДеятельностиВФоне();
		ПолучитьОписаниеСтавокНалогаВФоне();
		
	КонецЕсли;
	
	ТекущаяДатаНачалаДействияПатента = Объект.ДатаНачала;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПатентаПриИзменении(Элемент)
	
	Если ИспользуетсяСервисРегистрации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала
		Или Год(Объект.ДатаОкончания) <> Год(Объект.ДатаНачала)
		Или ЭтоПереходныйПериод(ТекущаяДатаНачалаДействияПатента) <> ЭтоПереходныйПериод(НачалоГода(Объект.ДатаОкончания)) Тогда
		
		Объект.ДатаНачала = НачалоГода(Объект.ДатаОкончания);
		ПрочитатьДанныеКлассификатора(Элементы.ВидДеятельности, Объект.КодВидаДеятельности, АдресВоВременномХранилище,
			Объект.ДатаНачала, УникальныйИдентификатор);
		
		ПолучитьВидыДеятельностиВФоне();
		ПолучитьОписаниеСтавокНалогаВФоне();
		
	КонецЕсли;
	
	ТекущаяДатаНачалаДействияПатента = Объект.ДатаНачала;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыеКаникулыПриИзменении(Элемент)
	
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаПриИзменении(Элемент)
	
	УстановитьПрименитьПониженнуюСтавку();
	УстановитьНормуЗакона();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПониженнуюСтавкуПриИзменении(Элемент)
	
	Если Не ПрименитьПониженнуюСтавку Тогда
		Объект.СтавкаНалога = УчетУСНПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
		Объект.НормаЗакона = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовПриИзменении(Элемент)
	
	СпособПодачиДокументовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура(
		"Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяИнспекцияАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСдачиОтчетностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйВизитКонтактыГосорганов_ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаСервисПриИзменении(Элемент)
	
	КодРегионаПриИзмененииНаСервере();
	
	ПолучитьВидыДеятельностиВФоне();
	ПолучитьОписаниеСтавокНалогаВФоне();
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаСервисАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КодРегионаПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиСтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(КодВидаДеятельностиСтрокой)
		Или Лев(ПолныйКодВидаДеятельности, 6) <> КодВидаДеятельностиСтрокой Тогда
		ПолныйКодВидаДеятельности = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ПолныйКодВидаДеятельности) Тогда
		НайтиВидДеятельности(КодВидаДеятельностиСтрокой, Ложь);
	Иначе
		НайтиВидДеятельности(ПолныйКодВидаДеятельности, Истина);
	КонецЕсли;
	
	ПолучитьОписаниеСтавокНалогаВФоне();
	НалоговыеКаникулы = Ложь;
	УстановитьСтавкуНалога();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиСтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Совместимость с БП, функционал не поддерживается.
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиСтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВидДеятельностиПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДеятельностиСервисОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолныйКодВидаДеятельности = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтавкаНалогаВВашемРегионеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СтавкиНалогаВВашемРегионе" Тогда
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНазад(Команда)

	Если ИспользуетсяСервисРегистрации Тогда
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяСервисРегистрации Тогда
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительно;
		УправлениеФормой(ЭтотОбъект);
		СформироватьЗаявлениеНаПолучениеПатента();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПропуститьШаг(Команда)
	
	// Совместимость с БП.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПолучениеПатента(Команда)
	
	Если СсылкаНаДокумент.Пустая() Или Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить1СОтчетность(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Организация, , , , , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазадДополнительно(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей

#Область Адреса

&НаКлиенте
Процедура АдресаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Совместимость с БП.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Совместимость с БП.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьКодНалоговогоОргана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПослеУдаления(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

#КонецОбласти

#Область Объекты

&НаКлиенте
Процедура ОбъектыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Совместимость с БП.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Совместимость с БП.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПослеУдаления(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеСредства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВидДеятельностиПриИзмененииНаСервере()
	
	ОчиститьНеиспользуемыеРеквизиты();
	ОбновитьЭлементыВидаДеятельности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидДеятельностиПереходногоПериода(Период, КодВидаДеятельности)
	
	Если Не ЗначениеЗаполнено(КодВидаДеятельности) Или Не ЭтоПереходныйПериод(НачалоГода(Период)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодыВидовДеятельностиПереходногоПериода = УчетУСНПСНКлиентСервер.КодыВидовДеятельностиПереходногоПериода();
	Возврат КодыВидовДеятельностиПереходногоПериода.Получить(КодВидаДеятельности) <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредупреждениеОбОграниченияхВидаДеятельности(КодВидаДеятельности)
	
	ЧастиПредупреждения = Новый Массив;
	
	Если КодВидаДеятельности = "94" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении деятельности стоянок для транспортных средств ограничено.';
											|en = 'Application of the patent taxation system to vehicle parking operations is limited.'"));
	ИначеЕсли КодВидаДеятельности = "95" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении розничной торговли, осуществляемой через объекты с площадью торгового зала свыше 50 квадратных метров, ограничено.';
											|en = 'Application of the patent taxation system to retail trade carried out through facilities with a sales area exceeding 50 square meters is limited.'"));
	ИначеЕсли КодВидаДеятельности = "96" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении услуг общественного питания, осуществляемых через объекты с площадью зала обслуживания свыше 50 квадратных метров, ограничено.';
											|en = 'Application of the patent taxation system to restaurants and cafe at facilities with a service hall area exceeding 50 square meters is limited.'"));
	ИначеЕсли КодВидаДеятельности = "97" Тогда
		ЧастиПредупреждения.Добавить(НСтр("ru = 'Применение патентной системы налогообложения в отношении услуг мойки транспортных средств, полирования и предоставления аналогичных услуг ограничено.';
											|en = 'Application of the patent taxation system to vehicle washing, polishing and similar services is limited.'"));
	КонецЕсли;
	
	ЧастиПредупреждения.Добавить(НСтр("ru = 'До вступления Закона субъекта РФ в силу, патент может быть получен только при переходе с ЕНВД.';
										|en = 'A patent can only be obtained only when switching from UTII unless the Law of the subject of the Russian Federation is enacted.'"));
	ЧастиПредупреждения.Добавить(НСтр("ru = 'Такой патент выдается на срок от одного до трех месяцев (до 31 марта 2021 года).';
										|en = 'Such patent is issued for a period of one to three months (until March 31, 2021).'"));
	
	Возврат СтрСоединить(ЧастиПредупреждения, Символы.ПС);
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыВидаДеятельности()
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
		
	УказатьОбъекты = Ложь;
	УказатьТС = Ложь;
	
	Элементы.ГруппаСведенияОбОбъектах.Видимость = УказатьОбъекты;
	Элементы.ГруппаТранспортныеСредства.Видимость = УказатьТС;
	Элементы.ГруппаАдреса.Видимость = Не (УказатьОбъекты Или УказатьТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			СсылкаНаДокумент = СформироватьЗаявлениеНаПолучениеПатентаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеЗначения()
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеДокументаВОбъект(СсылкаНаДокумент)

	СтруктураОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент,
		"Организация, ДатаПодписи, ДанныеУведомления, ИмяФормы, ИмяОтчета");
	
	Организация = СтруктураОбъекта.Организация;
	ДатаСоставления = СтруктураОбъекта.ДатаПодписи;
	
	ИмяФормыОтчета = СтрШаблон("Отчет.%1.Форма.%2", СтруктураОбъекта.ИмяОтчета, СтруктураОбъекта.ИмяФормы);
	ДанныеУведомления = СтруктураОбъекта.ДанныеУведомления.Получить();
	Если ДанныеУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомощникаЗаполнения = Неопределено;
	Если ДанныеУведомления.Свойство("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения) 
		И ДанныеПомощникаЗаполнения <> Неопределено Тогда
		
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.АктуализироватьФорматСохраняемыхДанных(ДанныеПомощникаЗаполнения);
		
		РеквизитыФормы = ПолучитьРеквизиты();
		СписокРеквизитов = Новый Массив;
		Для Каждого ТекРеквизит Из РеквизитыФормы Цикл
			СписокРеквизитов.Добавить(ТекРеквизит.Имя);
		КонецЦикла;
		
		Для Каждого ТекЗначение Из ДанныеПомощникаЗаполнения Цикл
			
			Если ТипЗнч(ТекЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
				
				Для Каждого ТекСтрока Из ТекЗначение.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ТекЗначение.Ключ].Добавить(), ТекСтрока);
				КонецЦикла;
				
			ИначеЕсли Объект.Свойство(ТекЗначение.Ключ) Тогда
				
				Объект[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			ИначеЕсли РегистрацияВНалоговомОргане.Свойство(ТекЗначение.Ключ) Тогда
				
				РегистрацияВНалоговомОргане[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			ИначеЕсли СписокРеквизитов.Найти(ТекЗначение.Ключ) <> Неопределено Тогда
				
				ЭтотОбъект[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
			СпособПодачиДокументов = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораРегионов(СписокВыбора)
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	ШаблонПредставления = НСтр("ru = '%1 - %2 %3';
								|en = '%1 - %2 %3'"); // например: "77 - Москва г".
	
	Для Каждого Регион Из КлассификаторСубъектовРФ Цикл
		
		Если Регион.ДиапазонПочтовыхИндексов = "0" Тогда //регион был включен в состав другого субъекта
			Продолжить;
		КонецЕсли;
		
		КодРегиона = Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧДЦ=0; ЧВН=");
		Представление = СтрШаблон(ШаблонПредставления, КодРегиона, Регион.Наименование, Регион.Сокращение);
		СписокВыбора.Добавить(КодРегиона, Представление);
	
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСтатусПроцессаФормированияЗаявления(Форма, ЗаявлениеСформировано = Ложь)
	
	Элементы = Форма.Элементы;
	
	Элементы.КартинкаЗаявлениеНаПолучениеПатента.Видимость = ЗаявлениеСформировано;
	Элементы.КартинкаЗаявлениеФормируется.Видимость = Не ЗаявлениеСформировано;
	Элементы.ЗаявлениеФормируется.Видимость = Не ЗаявлениеСформировано;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификационныйКодВидаДеятельности(КодВидаДеятельности, КодРегиона, ПорядковыйНомер)
	
	ПустойКод = "__";
	
	СтрокаВидДеятельности = ?(ПустаяСтрока(КодВидаДеятельности), ПустойКод, КодВидаДеятельности);
	СтрокаКодРегиона      = ?(ПустаяСтрока(КодРегиона), ПустойКод, КодРегиона);
	СтрокаПорядковыйНомер = ?(ПустаяСтрока(ПорядковыйНомер), ПустойКод, ПорядковыйНомер);
	
	Возврат СтрШаблон(НСтр("ru = 'Код вида деятельности: %1 - %2 - %3';
							|en = 'Activity category code: %1 - %2 - %3'"),
		СтрокаВидДеятельности, СтрокаКодРегиона, СтрокаПорядковыйНомер);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеглОтчета()
	Возврат "РегламентированноеУведомлениеПолучениеПатента";
КонецФункции

&НаКлиенте
Процедура ОбновитьКодНалоговогоОргана()
	
	ПодключитьОбработчикОжидания("ОбновитьРеквизитыНалоговойИнспекции", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура КодРегионаПриИзмененииНаСервере()
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
		
	Элементы.ПодсказкаОпределитьВидаДеятельности.Заголовок = ТекстПодсказкиВидДеятельности(Объект.КодРегиона);
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		ТекстПодсказкиНормаЗакона(Объект.КодРегиона, НалоговыеКаникулы, ИнформацияСервисаСтавкиНалога));
	
	Если Лев(Объект.КодНалоговогоОргана, 2) <> Объект.КодРегиона Тогда
		Объект.КодНалоговогоОргана = "";
	КонецЕсли;
	
	Если Сред(ПолныйКодВидаДеятельности, 3, 2) <> Объект.КодРегиона Тогда
		КодВидаДеятельностиСтрокой = "";
		ПолныйКодВидаДеятельности = "";
	КонецЕсли;
	
	УстановитьПодсказкуВвода();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбновитьСведенияОбОрганизации();
	КодРегионаПриИзмененииНаСервере();
	ОбновитьСведенияОПредставителе();
	ОбновитьКодВидаДеятельности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизации()
	
	СведенияОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		"ОГРН, РегистрацияВНалоговомОргане, КодНалоговогоОргана, КодОКВЭД2");
		
	Если ЗначениеЗаполнено(СведенияОрганизация.РегистрацияВНалоговомОргане) Тогда
		
		РегистрацияНУОбъект = СведенияОрганизация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияНУОбъект, "РегистрацияВНалоговомОргане");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		СпособПодачиДокументов = 1;
	Иначе
		СпособПодачиДокументов = 0;
	КонецЕсли;
	
	Объект.КодРегиона = СведенияОрганизация.КодНалоговогоОргана;
	Объект.КодНалоговогоОргана = СведенияОрганизация.КодНалоговогоОргана;
	ВидДеятельностиОКВЭД = СведенияОрганизация.КодОКВЭД2;
	
	ПроверитьРеквизитыОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОПредставителе()
	
	Если ИспользуетсяСервисРегистрации Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПодачиДокументов = 0 Тогда
		ОчиститьРеквизитыПредставителя(РегистрацияВНалоговомОргане, СпособПодачиДокументов);
		ПредставлениеПредставителя = "";
	ИначеЕсли ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		ПредставлениеПредставителя = РегистрацияВНалоговомОргане.Представитель;
	Иначе
		ПредставлениеПредставителя = НСтр("ru = 'Заполнить';
											|en = 'Fill in'");
	КонецЕсли;
	
	Элементы.ПредставлениеПредставителя.Видимость = СпособПодачиДокументов = 1;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	Объект.КоличествоСотрудников = 0;
	Объект.Объекты.Очистить();
	Объект.ТранспортныеСредства.Очистить();
	Объект.Адреса.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыПредставителя(РегистрацияВНалоговомОргане, СпособПодачиДокументов)
	
	РеквизитыПредставителя = Новый Массив;
	РеквизитыПредставителя.Добавить("Представитель");
	РеквизитыПредставителя.Добавить("ДокументПредставителя");
	РеквизитыПредставителя.Добавить("УполномоченноеЛицоПредставителя");
	РеквизитыПредставителя.Добавить("Доверенность");

	Для Каждого ТекРеквизит Из РеквизитыПредставителя Цикл
		РегистрацияВНалоговомОргане[ТекРеквизит] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПередОткрытием()
	
	ИспользуетсяСервисРегиональныеСтавкиНалогов = Ложь;
	
	ИспользуетсяСервисРегистрации = Ложь;
	
	СпособСдачиОтчетности = "Интернет";
	
	Если ИспользуетсяСервисРегиональныеСтавкиНалогов Тогда
		ЗаполнитьСписокВыбораРегионов(Элементы.КодРегионаСервис.СписокВыбора);
	Иначе
		ЗаполнитьСписокВыбораРегионов(Элементы.КодРегиона.СписокВыбора);
	КонецЕсли;
	
	Если ИспользуетсяСервисРегистрации Тогда
		
		ВосстановитьСохраненныеЗначения();
		
	Иначе
		
		Организация = Параметры.Организация;
		СсылкаНаДокумент = Параметры.Ключ;
		СоздатьНовоеЗаявление = Параметры.СоздатьНовоеЗаявление;
		ДатаСоставления = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		Если Организация.Пустая() И Не СсылкаНаДокумент.Пустая() Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "Организация");
		КонецЕсли;
		
		Если Организация.Пустая() И РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
			Организация = Модуль.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		ОбновитьСведенияОбОрганизации();
		
		Если СсылкаНаДокумент.Пустая() И Не Организация.Пустая() И Не СоздатьНовоеЗаявление Тогда
			
			Заявление = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.НайтиЗаявлениеНаПолучениеПатента(
				Новый Структура("Организация, СоздатьНовоеЗаявление", Организация, СоздатьНовоеЗаявление));
				
			Если Заявление <> Неопределено Тогда
				СсылкаНаДокумент = Заявление.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СсылкаНаДокумент.Пустая() Тогда
			ДанныеДокументаВОбъект(СсылкаНаДокумент);
		Иначе
			ИмяФормыОтчета = Отчеты.РегламентированноеУведомлениеПолучениеПатента.ПолучитьФормуПоУмолчанию();
		КонецЕсли;
		
		ОбновитьСведенияОПредставителе();
		
	КонецЕсли;
	
	УстановитьСрокПатентаПоУмолчанию();
	ПрочитатьДанныеКлассификатора(Элементы.ВидДеятельности, Объект.КодВидаДеятельности, АдресВоВременномХранилище,
		Объект.ДатаНачала, УникальныйИдентификатор);
	
	Если Объект.НормаЗакона = "" Тогда
		Объект.СтавкаНалога = УчетУСНПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	КонецЕсли;
	
	ПрименитьПониженнуюСтавку = Объект.СтавкаНалога < УчетУСНПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	
	ОбновитьКодВидаДеятельности();
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
	Элементы.ПодсказкаОпределитьВидаДеятельности.Заголовок = ТекстПодсказкиВидДеятельности(Объект.КодРегиона);
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		ТекстПодсказкиНормаЗакона(Объект.КодРегиона, НалоговыеКаникулы, ИнформацияСервисаСтавкиНалога));
	
	ТекущаяДатаНачалаДействияПатента = Объект.ДатаНачала;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска)
	
	РезультатСписок = Новый СписокЗначений;
	
	ЦветПоУмолчанию = ЦветаСтиля.ЦветТекстаУспех;
	Для Каждого ТекЗначение Из ДанныеВыбора Цикл
		Представление = ПодсветитьСтрокуПоиска(ТекЗначение.Представление, ТекстПоиска, ЦветПоУмолчанию);
		РезультатСписок.Добавить(ТекЗначение.Значение, Представление);
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("ИНН");
	ПроверяемыеРеквизиты.Добавить("ОГРН");
	ПроверяемыеРеквизиты.Добавить("КодНалоговогоОргана");
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

&НаСервере
Процедура ОбновитьКодВидаДеятельности()
	
	Если Не ЗначениеЗаполнено(Объект.КодВидаДеятельности) Тогда
		Объект.КодВидаДеятельности = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.КодВидаДеятельностиПСН(
			ВидДеятельностиОКВЭД,
			Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыНалоговойИнспекции()
	
	Если ИспользуетсяСервисРегистрации Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыНалоговойИнспекцииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыНалоговойИнспекцииНаСервере()
	
	Если Объект.Адреса.Количество() > 0 Или Объект.Объекты.Количество() > 0 Тогда
		УстановитьКодНалоговогоОргана();
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КодНалоговогоОргана) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговойИнспекции = РаботаСКонтрагентами.РеквизитыНалоговогоОрганаПоКоду(
		Объект.КодНалоговогоОргана);
	
	Если РеквизитыНалоговойИнспекции <> Неопределено Тогда
		
		Если Не ПустаяСтрока(РеквизитыНалоговойИнспекции.Адрес) Тогда
			МассивПодстрок = СтрРазделить(РеквизитыНалоговойИнспекции.Адрес, ",", Ложь);
			РеквизитыНалоговойИнспекции.Адрес = СтрСоединить(МассивПодстрок, ",");
		КонецЕсли;
		
		НалоговаяИнспекцияНаименование = РеквизитыНалоговойИнспекции.Наименование;
		НалоговаяИнспекцияТелефон      = РеквизитыНалоговойИнспекции.Телефон;
		НалоговаяИнспекцияАдрес        = РеквизитыНалоговойИнспекции.Адрес;
		НалоговаяИнспекцияЭлектроннаяПочта = РеквизитыНалоговойИнспекции.ЭлектроннаяПочта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Ошибка при формировании заявления на получение патента:';
								|en = 'Error when generating an application for a patent:'"));
	МассивСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеСрокаСдачиОтчетности(Знач ДатаСоставления, Знач ДатаНачалаДействия)
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	КоличествоДней = КоличествоДнейДоПодачиЗаявления();
	Сутки = 24 * 60 * 60;
	
	Если Не ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		
		// Если не задан производственный календарь, тогда рассчитываем по календарным дням
		ДатаПоКалендарю = ДатаНачалаДействия - КоличествоДней * Сутки;
		
	Иначе
		
		// Рассчитаем срок подачи в рабочих днях до даты начала действия патента по производственному календарю
		// Дата не может быть меньше даты составления заявления
		
		РазностьДат = КалендарныеГрафики.РазностьДатПоКалендарю(ПроизводственныйКалендарь,
			ДатаСоставления,
			ДатаНачалаДействия,
			Ложь);
		
		Если РазностьДат > КоличествоДней Тогда
			ДатаПоКалендарю = КалендарныеГрафики.ДатаПоКалендарю(ПроизводственныйКалендарь,
				ДатаСоставления,
				РазностьДат - КоличествоДней - 1,
				Ложь);
		Иначе
			ДатаПоКалендарю = ДатаСоставления;
		КонецЕсли;
		
	КонецЕсли;
	
	Представление = СтрШаблон(НСтр("ru = 'Сдать заявление следует не позднее %1';
									|en = 'The application must be submitted no later than %1'"), Формат(ДатаПоКалендарю, "ДЛФ=DD"));
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыОрганизации()
	
	НезаполненныеРеквизиты = Неопределено;
	ПроверяемыеРеквизиты   = ПроверяемыеРеквизитыОрганизации();
	
	Если Не РеквизитыЗаполнены(Организация, ПроверяемыеРеквизиты, НезаполненныеРеквизиты) Тогда
		
		РеквизитыОрганизацииЗаполнены = Ложь;
		СообщениеТребуютсяРеквизиты = СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(
			Организация, НСтр("ru = 'подготовить заявление';
								|en = 'prepare an application'"));
		
	Иначе
		РеквизитыОрганизацииЗаполнены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеПомощникаРегистрации(ПропуститьШаг = Ложь)
	
	Структура = Новый Структура();
	
	Если Не ПропуститьШаг Тогда
		
		Реквизиты = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Реквизиты;
		Для Каждого ТекРеквизит Из Реквизиты Цикл
			Структура.Вставить(ТекРеквизит.Имя, Объект[ТекРеквизит.Имя]);
		КонецЦикла;
		
		ТабличныеЧасти = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ТабличныеЧасти;
		Для Каждого ТекТабличнаяЧасть Из ТабличныеЧасти Цикл
			Структура.Вставить(ТекТабличнаяЧасть.Имя, Объект[ТекТабличнаяЧасть.Имя].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
	
	Структура.Вставить("ПолныйКодВидаДеятельности", ПолныйКодВидаДеятельности);
	
	Структура.Вставить("ПропуститьШаг", ПропуститьШаг);
	
КонецПроцедуры

&НаСервере
Процедура СпособПодачиДокументовПриИзмененииНаСервере()
	
	ОбновитьСведенияОПредставителе();

КонецПроцедуры

&НаСервереБезКонтекста
Функция СрокПредставленияОтчета(Знач Период)
	
	КоличествоДней = КоличествоДнейДоПодачиЗаявления();
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	Если Не ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		
		// Если не задан производственный календарь, тогда рассчитываем по календарным дням
		Возврат Период + КоличествоДней * 24 * 60 * 60;
		
	КонецЕсли;
	
	Возврат КалендарныеГрафики.ДатаПоКалендарю(ПроизводственныйКалендарь, Период, КоличествоДней, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоДнейДоПодачиЗаявления()
	
	// Срок не позднее чем за 10 дней до начала применения ПСН
	// п.2 ст. 346.45 НК РФ
	Возврат 10;
	
КонецФункции

&НаСервере
Функция СформироватьЗаявлениеНаПолучениеПатентаНаСервере()
	
	ПараметрыЗаявления = Новый Структура;
	
	Реквизиты = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Реквизиты;
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		ПараметрыЗаявления.Вставить(ТекРеквизит.Имя, Объект[ТекРеквизит.Имя]);
	КонецЦикла;
	
	ТабличныеЧасти = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ТабличныеЧасти;
	Для Каждого ТекТаблица Из ТабличныеЧасти Цикл
		ПараметрыЗаявления.Вставить(ТекТаблица.Имя, Объект[ТекТаблица.Имя].Выгрузить());
	КонецЦикла;
	
	ПараметрыЗаявления.Вставить("Организация",                  Организация);
	ПараметрыЗаявления.Вставить("ДатаСоставления",              ДатаСоставления);
	ПараметрыЗаявления.Вставить("Представитель",                РегистрацияВНалоговомОргане.Представитель);
	ПараметрыЗаявления.Вставить("ДокументПредставителя",        РегистрацияВНалоговомОргане.ДокументПредставителя);
	ПараметрыЗаявления.Вставить("СоздатьНовоеЗаявление",        СоздатьНовоеЗаявление);
	
	Если Не СсылкаНаДокумент.Пустая() Тогда
		ПараметрыЗаявления.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
		ПараметрыЗаявления.Вставить("ИмяФормы",         ИмяФормыОтчета);
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение заявления на получение патента';
														|en = 'Filling out an application for a patent'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ИмяМетода = "Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.СформироватьЗаявлениеНаПолучениеПатента";
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыЗаявления, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаявлениеНаПолучениеПатента()
	
	СформироватьЗаявлениеПриПереходеНаСледующийШаг();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиВидДеятельности(КодРегиона)
	
	КодРегионаПоУмолчанию = ?(ПустаяСтрока(КодРегиона), "77", КодРегиона);
	СсылкаНаКлассификатор = СтрШаблон(УчетУСНПСНКлиентСервер.ШаблонСсылкиНаКлассификаторВидовДеятельности(),
		КодРегионаПоУмолчанию);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Определите наименование и код по ';
								|en = 'Determine the description and code by '"));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Классификатору видов деятельности';
															|en = 'Activity type classifier'"),,,, СсылкаНаКлассификатор));
	МассивСтрок.Добавить(".");
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(НСтр("ru = 'В разделе 6 найдите строку, соответствующую вашему региону и виду деятельности. ';
								|en = 'In section 6, find the line that matches your region and activity type. '"));
	
	ТекстПодсказки = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПодсказкиСрокПатента(ПроизводитсяРегистрацияИП)
	
	Если ПроизводитсяРегистрацияИП Тогда
		Возврат НСтр("ru = 'При получении патента одновременно с регистрацией предпринимателя дату начала действия заполнять не требуется';
					|en = 'When obtaining a patent simultaneously with the registration of an entrepreneur, the validity start date is not required to be filled'");
	Иначе
		Возврат НСтр("ru = 'Патент выдается на срок не менее одного месяца в пределах календарного года.
			|Начало действия патента должно быть не менее чем через 10 рабочих дней от даты подачи заявления.';
			|en = 'A patent is issued for a period of at least one month within a calendar year. 
			|The beginning of a patent must be at least 10 workdays from the date of application.'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиНормаЗакона(КодРегиона, НалоговыеКаникулы, ИнформацияСервиса)
	
	СсылкаНаЗакон = "";
	Если ИнформацияСервиса <> Неопределено Тогда
		Если НалоговыеКаникулы Тогда
			СсылкаНаЗакон = ИнформацияСервиса["НалоговыеКаникулы"]["СсылкаНаНормативныйАкт"];
		Иначе
			СсылкаНаЗакон = ИнформацияСервиса["ЛьготнаяСтавка"]["СсылкаНаНормативныйАкт"];
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СсылкаНаЗакон) Тогда
		СсылкаНаЗакон = СтрШаблон(УчетУСНПСНКлиентСервер.ШаблонСсылкиНаЗаконРегиона(), КодРегиона);
	КонецЕсли;
	
	Если НалоговыеКаникулы Тогда
		ШаблонПодсказки = НСтр("ru = 'Пункт статьи <a href = %1>закона региона</a> о возможности применения налоговых каникул';
								|en = 'Clause of <a href = %1>region law</a> article on the possibility to apply tax holidays'");
	Иначе
		ШаблонПодсказки = НСтр("ru = 'Пункт статьи <a href = %1>закона региона</a> о возможности применения пониженной ставки налога';
								|en = 'Clause of <a href = %1>region law</a> article on the possibility to apply a reduced tax rate'");
	КонецЕсли;
	ТекстПодсказки = СтрШаблон(ШаблонПодсказки, СсылкаНаЗакон);
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	Если ИспользуетсяСервисРегистрации Тогда
		Элементы.ГруппаПодачаДокументов.Видимость = Ложь;
		Элементы.ГруппаРеквизитыШапки.Видимость = Ложь;
		Элементы.ДатаНачалаДействияПатента.Видимость = Ложь;
		Элементы.ДатаОкончанияДействияПатента.Заголовок = НСтр("ru = 'Срок действия с даты регистрации по';
																|en = 'Valid from the date of registration to'");
		Элементы.ГруппаПериодДействия.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать;
		Элементы.ФонТребуютсяРеквизиты.Видимость = Ложь;
		Элементы.ДатаСоставления.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ГруппаПропуститьШаг.Видимость = Ложь;
		Элементы.ГруппаПодачаДокументов.Видимость = Истина;
		Элементы.ГруппаРеквизитыШапки.Видимость = Организация.Пустая();
		Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДатаНачалаДействияПатента.Видимость = Истина;
		Элементы.ГруппаПериодДействия.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		Элементы.ДатаСоставления.АвтоОтметкаНезаполненного = Истина;
		НалоговаяИнспекцияАдресНаКарте = СтрокаСсылкиПоказатьНаКарте();
	КонецЕсли;
	
	Элементы.ДатаОкончанияДействияПатентаРасширеннаяПодсказка.Заголовок =
		ТекстПодсказкиСрокПатента(ИспользуетсяСервисРегистрации);
	
	Элементы.КомандаНазад.Видимость  = ИспользуетсяСервисРегистрации;
	Элементы.ПропуститьШаг.Видимость = ИспользуетсяСервисРегистрации;
	
	Элементы.ГруппаВидДеятельности.Видимость = Не ИспользуетсяСервисРегиональныеСтавкиНалогов;
	Элементы.ГруппаВидДеятельностиСервис.Видимость = ИспользуетсяСервисРегиональныеСтавкиНалогов;
	Элементы.ДекорацияСтавкиНалогаВВашемРегионе.Видимость = ИспользуетсяСервисРегиональныеСтавкиНалогов;
	
	УстановитьПодсказкуВвода();
	ОбновитьЭлементыВидаДеятельности();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не Форма.ИспользуетсяСервисРегистрации Тогда
		Элементы.ФонТребуютсяРеквизиты.Видимость = Не Форма.РеквизитыОрганизацииЗаполнены;
		ИзменитьСтатусПроцессаФормированияЗаявления(Форма, Не (Форма.Модифицированность Или Форма.СсылкаНаДокумент.Пустая()));
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное Тогда
		
		Элементы.КодВидаДеятельностиСервис.Доступность = Форма.ИспользуетсяСервисРегиональныеСтавкиНалогов 
			И Элементы.КодВидаДеятельностиСервис.СписокВыбора.Количество() <> 0;
		
		Если ЗначениеЗаполнено(Форма.КодВидаДеятельностиСтрокой) Тогда
			Элементы.ДекорацияНаименованиеВидаДеятельностиСервис.Видимость = ЗначениеЗаполнено(Объект.НаименованиеВидаДеятельности);
			Элементы.ДекорацияНаименованиеВидаДеятельностиСервис.Заголовок = Объект.НаименованиеВидаДеятельности;
		Иначе
			Элементы.ДекорацияНаименованиеВидаДеятельностиСервис.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаОснованиеПониженнаяСтавка.Видимость = Форма.ПрименитьПониженнуюСтавку;
		Элементы.СтавкаНалога.ТолькоПросмотр = Форма.НалоговыеКаникулы;
		
		Если ВыбранВидДеятельностиПереходногоПериода(Объект.ДатаНачала, Объект.КодВидаДеятельности) Тогда
			Элементы.ГруппаПредупреждениеОбОграничениях.Видимость = Истина;
			Элементы.ПредупреждениеОбОграничениях.Заголовок = ПредупреждениеОбОграниченияхВидаДеятельности(
				Объект.КодВидаДеятельности);
		Иначе
			Элементы.ГруппаПредупреждениеОбОграничениях.Видимость = Ложь;
			Элементы.ПредупреждениеОбОграничениях.Заголовок = "";
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительно Тогда
	
		Форма.ПредставлениеСрокаСдачиОтчетности = ПредставлениеСрокаСдачиОтчетности(
			Форма.ДатаСоставления,
			Объект.ДатаНачала);
		
		Элементы.СтраницыДействияСОтчетами.ТекущаяСтраница = Элементы[Форма.СпособСдачиОтчетности];
		
		Если Форма.Используется1СОтчетность Тогда
			Элементы.Группа1СОтчетность.Видимость = Истина;
			Элементы.ЗаголовокПодключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Элементы.ОписаниеПодключить1СОтчетность.Видимость  = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Элементы.Подключить1СОтчетность.Видимость          = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Элементы.Открыть1СОтчетность.Видимость             = Форма.ЭлектронныйДокументооборотДоступен;
		Иначе
			Элементы.Группа1СОтчетность.Видимость = Ложь;
		КонецЕсли;
		Элементы.Гиперссылка1СОтчетность.Видимость = Не Форма.Используется1СОтчетность;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодНалоговогоОргана()
	
	ПараметрыВыполнения = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.НовыеПараметрыЗаполненияКодНалоговогоОргана();
	ПараметрыВыполнения.Адреса = Объект.Адреса;
	ПараметрыВыполнения.Объекты = Объект.Объекты;
	ПараметрыВыполнения.КодНалоговогоОрганаИП = Объект.КодНалоговогоОргана;
	
	Объект.КодНалоговогоОргана = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.КодНалоговогоОрганаПатента(
		ПараметрыВыполнения, РегистрацияВНалоговомОргане.Код);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуВвода()
	
	Элементы.КодНалоговогоОргана.ПодсказкаВвода = СтрШаблон("%1__", Объект.КодРегиона);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокПатентаПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		// Срок действия уже был заполнен каким-то образом. Не будем его менять.
		Возврат;
	КонецЕсли;
	
	// Заполним наиболее вероятный срок действия нового патента.
	
	Если ИспользуетсяСервисРегистрации Тогда
		// При регистрации ИП на ПСН начало патента не может быть ранее даты регистрации.
		МинимальнаяДатаНачала = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя())
			+ Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ВремяРегистрацииПредпринимателя();
	Иначе
		// При подаче заявления действующим ИП патент не может начинаться ранее чем через 10 дней от даты заявления.
		МинимальнаяДатаНачала = СрокПредставленияОтчета(НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()));
	КонецЕсли;
	
	// Патент не может быть выдан на срок менее месяца.
	МинимальнаяДатаОкончания
		= Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.МинимальнаяДатаОкончанияПатента(МинимальнаяДатаНачала);
	// Чаще всего предприниматели получают патент на максимальный срок.
	Объект.ДатаОкончания = КонецГода(МинимальнаяДатаОкончания);
	
	Если Не ИспользуетсяСервисРегистрации Тогда
		// Если дата заявления с учетом 10-дневного исполнения не позволяет получить патент на месяц и более,
		// заявление подается на получение патента на следующий год.
		Объект.ДатаНачала = Макс(МинимальнаяДатаНачала, НачалоГода(Объект.ДатаОкончания));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодНалоговогоОргана");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодНалоговогоОргана");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#Область ДлительныеОперации

&НаКлиенте
Процедура СформироватьЗаявлениеПриПереходеНаСледующийШаг()
	
	ОбновитьРеквизитыНалоговойИнспекцииНаСервере();
	ДлительнаяОперация = СформироватьЗаявлениеНаПолучениеПатентаНаСервере();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ПолучатьРезультат = Истина;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("СформироватьЗаявлениеПослеЗавершенияФоновогоЗадания", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявлениеПослеЗавершенияФоновогоЗадания(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СформироватьЗаявлениеЗаданиеВыполнено(ДлительнаяОперация.АдресРезультата);
		
	Иначе
		
		ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаявлениеЗаданиеВыполнено(АдресРезультата)
	
	СсылкаНаДокумент = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Используется1СОтчетность = РегламентированнаяОтчетность.Используется1СОтчетность();
	ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
		Организация, ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	СоздатьНовоеЗаявление = Ложь;
	Модифицированность    = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КодРегионаПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Количество = 0;
	
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		
		Если Количество > 20 Тогда
			Прервать;
		КонецЕсли;
		
		ТекстПоиска = СокрЛП(Текст);
		Если Найти(НРег(ЭлементСписка.Представление), НРег(ТекстПоиска)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			Количество = Количество + 1;
		ИначеЕсли СтрНачинаетсяС(ЭлементСписка.Значение, ТекстПоиска)
			Или СтрНачинаетсяС(ЭлементСписка.Значение, "0" + ТекстПоиска) Тогда
			ДанныеВыбора.Добавить(
				ЭлементСписка.Значение, 
				ПредставлениеВидаДеятельности(ЭлементСписка.Значение, ЭлементСписка.Представление));
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВидаДеятельности(Код, Наименование)

	Возврат СтрШаблон("%1 - %2", Лев(Код, 6), Наименование);

КонецФункции

#Область СервисРегиональныхСтавок

&НаКлиенте
Процедура ВидДеятельностиПриАвтоПодборе(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	МаксимальныйРазмерСпискаВыбора = 20;
	
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		
		Если ДанныеВыбора.Количество() >= МаксимальныйРазмерСпискаВыбора Тогда
			Прервать;
		КонецЕсли;
		
		ТекстПоиска = СокрЛП(Текст);
		Если Найти(НРег(ЭлементСписка.Представление), НРег(ТекстПоиска)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		ИначеЕсли СтрНачинаетсяС(ЭлементСписка.Значение, ТекстПоиска)
			Или СтрНачинаетсяС(ЭлементСписка.Значение, "0" + ТекстПоиска) Тогда
			ДанныеВыбора.Добавить(
				ЭлементСписка.Значение, 
				ПредставлениеВидаДеятельности(ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВидыДеятельностиВФоне()
	
	Если Не ИспользуетсяСервисРегиональныеСтавкиНалогов
		Или Не ЗначениеЗаполнено(Объект.КодРегиона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = ПараметрыМетодаВидыДеятельностиПСН();
	ПараметрыМетода.КодРегиона = Объект.КодРегиона;
	
	ДлительнаяОперация = ПолучитьВидыДеятельностиВФонеНаСервере(ПараметрыМетода, УникальныйИдентификатор);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресСпискаВидовДеятельности = "";
	ЗаполнитьСписокВыбораВидовДеятельности();
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		Элементы.КодВидаДеятельностиСервисДлительнаяОперация.Видимость = Истина;
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		Обработчик = Новый ОписаниеОповещения("ОбработкаПолученияВидовДеятельности", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	Иначе
		ОбработкаОшибкиСервисаРегиональныхСтавокНалогов(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыДеятельностиВФонеНаСервере(Знач ПараметрыМетода, Знач УникальныйИдентификатор)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Региональные ставки налогов: Список видов деятельности ПСН';
			|en = 'Regional tax rates: List of PTS activity types'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"РегиональныеСтавкиНалогов.ПолучитьВидыДеятельностиПатентаВФоне",
		ПараметрыМетода,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПолученияВидовДеятельности(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" И ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата) Тогда
		Элементы.КодВидаДеятельностиСервисДлительнаяОперация.Видимость = Ложь;
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если Результат.КодСостояния = 200 Тогда
			СписокВидовДеятельности = Результат.Ответ;
			Если ЭтоПереходныйПериод(Объект.ДатаНачала) Тогда
				ДополнитьВидамиДеятельностиПереходногоПериода(
					Объект.КодРегиона,
					УчетУСНПСНКлиентСервер.КодыВидовДеятельностиПереходногоПериода(),
					СписокВидовДеятельности);
			КонецЕсли;
			АдресСпискаВидовДеятельности = ПоместитьВоВременноеХранилище(
				СписокВидовДеятельности,
				УникальныйИдентификатор);
			ЗаполнитьСписокВыбораВидовДеятельности();
		Иначе
			ТекстСообщения = НСтр("ru = 'Сервис временно недоступен.
				|Укажите наименование и код вида деятельности самостоятельно.';
				|en = 'The service is temporarily unavailable. 
				|Specify the description and code of the activity type yourself.'");
			Обработчик = Новый ОписаниеОповещения("ОтключитьНедоступныйСервис", ЭтотОбъект);
			ПоказатьПредупреждение(Обработчик, ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияСтавкиНалогаВВашемРегионе.Заголовок = НСтр("ru = 'Не удалось получить данные сервиса.';
																	|en = 'Cannot get service data.'");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОшибкиСервисаРегиональныхСтавокНалогов(ПредставлениеОшибки)
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ПредставлениеОшибки, , "КодВидаДеятельностиСтрокой");
	
	Элементы.КодВидаДеятельностиСервисДлительнаяОперация.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПереходныйПериод(Период)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПереходныйПериод = УчетУСНПСНКлиентСервер.ПереходныйПериод();
	
	Возврат ПереходныйПериод.Начало <= НачалоДня(Период) И НачалоДня(Период) <= ПереходныйПериод.Конец;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидовДеятельности()
	
	Элементы.КодВидаДеятельностиСервис.СписокВыбора.Очистить();
	
	Если ЭтоАдресВременногоХранилища(АдресСпискаВидовДеятельности) Тогда
		
		ВидыДеятельности = ПолучитьИзВременногоХранилища(АдресСпискаВидовДеятельности);
		Если ВидыДеятельности <> Неопределено Тогда
			Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельности Цикл
				Элементы.КодВидаДеятельностиСервис.СписокВыбора.Добавить(
					РеквизитыВидаДеятельности.Код,
					ПредставлениеВидаДеятельности(РеквизитыВидаДеятельности.Код, РеквизитыВидаДеятельности.Наименование));
			КонецЦикла;
		КонецЕсли;
		
		РезультатПоиска = Ложь;
		Если ПустаяСтрока(ПолныйКодВидаДеятельности) Тогда
			РезультатПоиска = НайтиВидДеятельности(КодВидаДеятельностиСтрокой, Ложь);
		Иначе
			РезультатПоиска = НайтиВидДеятельности(ПолныйКодВидаДеятельности, Истина);
		КонецЕсли;
		
		Если Не РезультатПоиска Тогда
			ПолныйКодВидаДеятельности = "";
			КодВидаДеятельностиСтрокой = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиВидДеятельности(Знач Код, ИскатьПоПолномуКоду)
	
	Код = СокрЛП(Код);
	
	КодВидаДеятельности             = Лев(Код, 2);
	КодРегионаВидаДеятельности      = Сред(Код, 3, 2);
	ПорядковыйНомерВидаДеятельности = Сред(Код, 5, 2);
	НаименованиеВидаДеятельности = "";
	
	РезультатПоиска = Ложь;
	
	Если Не ПустаяСтрока(Код) И ЭтоАдресВременногоХранилища(АдресСпискаВидовДеятельности) Тогда
		ВидыДеятельности = ПолучитьИзВременногоХранилища(АдресСпискаВидовДеятельности);
		Если ВидыДеятельности <> Неопределено И ИскатьПоПолномуКоду Тогда
			Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельности Цикл
				Если СокрЛП(РеквизитыВидаДеятельности.Код) = Код Тогда
					НаименованиеВидаДеятельности = РеквизитыВидаДеятельности.Наименование;
					РезультатПоиска = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ВидыДеятельности <> Неопределено И Не ИскатьПоПолномуКоду Тогда
			Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельности Цикл
				Если Лев(СокрЛП(РеквизитыВидаДеятельности.Код), 6) = Код Тогда
					НаименованиеВидаДеятельности = РеквизитыВидаДеятельности.Наименование;
					ПолныйКодВидаДеятельности = РеквизитыВидаДеятельности.Код;
					РезультатПоиска = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатПоиска Тогда
		Объект.КодВидаДеятельности = КодВидаДеятельности;
		Объект.ПорядковыйНомерВидаДеятельности = ПорядковыйНомерВидаДеятельности;
		Объект.НаименованиеВидаДеятельности = НаименованиеВидаДеятельности;
	Иначе
		Объект.КодВидаДеятельности = "";
		Объект.ПорядковыйНомерВидаДеятельности = "";
		Объект.НаименованиеВидаДеятельности = "";
	КонецЕсли;
	
	ВидДеятельностиПриИзмененииНаСервере();
	
	Возврат РезультатПоиска;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОписаниеСтавокНалогаВФоне()
	
	Если Не ИспользуетсяСервисРегиональныеСтавкиНалогов Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНалога()
	
	Если НалоговыеКаникулы Тогда
		Объект.СтавкаНалога = 0;
	Иначе
		ИспользоватьСтавкуПоУмолчанию = ИнформацияСервисаСтавкиНалога = Неопределено
			Или Не ИнформацияСервисаСтавкиНалога["ЛьготнаяСтавка"]["Применяется"];
		Если ИспользоватьСтавкуПоУмолчанию Тогда
			Объект.СтавкаНалога = УчетУСНПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
		Иначе
			Объект.СтавкаНалога = ИнформацияСервисаСтавкиНалога["ЛьготнаяСтавка"]["СтавкаНалога"];
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПрименитьПониженнуюСтавку();
	
	УстановитьНормуЗакона();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПрименитьПониженнуюСтавку()
	
	ПрименитьПониженнуюСтавку = Объект.СтавкаНалога < УчетУСНПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНормуЗакона()

	Если Не ПрименитьПониженнуюСтавку Тогда
		Объект.НормаЗакона = "";
		Возврат;
	КонецЕсли;
	
	Если ИнформацияСервисаСтавкиНалога = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если НалоговыеКаникулы Тогда
		Объект.НормаЗакона = ИнформацияСервисаСтавкиНалога["НалоговыеКаникулы"]["НормативныйАкт"];
	Иначе
		Объект.НормаЗакона = ИнформацияСервисаСтавкиНалога["ЛьготнаяСтавка"]["НормативныйАкт"];
	КонецЕсли;
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		ТекстПодсказкиНормаЗакона(Объект.КодРегиона, НалоговыеКаникулы, ИнформацияСервисаСтавкиНалога));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтавокПСН(НовыеСтавки)
	
	Если ТипЗнч(НовыеСтавки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КодРегиона <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеСтавки, "КодРегиона") Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя применить ставку налога для другого региона.';
									|en = 'Cannot apply the tax rate for another region.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	ИначеЕсли ПолныйКодВидаДеятельности <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеСтавки, "КодВидаДеятельности") Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя применить ставку налога для другого вида деятельности.';
									|en = 'Cannot apply the tax rate for another activity type.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ИнформацияСервисаСтавкиНалога = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеСтавки, "Информация");
	
	НалоговыеКаникулы = НовыеСтавки.Свойство("НалоговыеКаникулы");
	Если НалоговыеКаникулы Тогда
		УстановитьСтавкуНалога();
	Иначе
		Объект.СтавкаНалога = НовыеСтавки.СтавкаНалога;
		УстановитьПрименитьПониженнуюСтавку();
		УстановитьНормуЗакона();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если НалоговыеКаникулы Тогда
		ТекущийЭлемент = Элементы.НалоговыеКаникулы;
	Иначе
		ТекущийЭлемент = Элементы.СтавкаНалога;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьНедоступныйСервис(ДополнительныеПараметры) Экспорт

	ИспользуетсяСервисРегиональныеСтавкиНалогов = Ложь;
	ОтключитьНедоступныйСервисНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОтключитьНедоступныйСервисНаСервере()

	ЗаполнитьСписокВыбораРегионов(Элементы.КодРегиона.СписокВыбора);
	УправлениеФормойПриСозданииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеМетоды

&НаКлиенте
Процедура ПерейтиКСервисуОпределитьРеквизитыИФНС()
	
	АдресСервисаОпределитьРеквизитыИФНС = "https://service.nalog.ru/addrno.do";
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСервисаОпределитьРеквизитыИФНС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылка)
	
	МаксимальноеЧислоШагов = 6;
	
	ЭтоСсылкаШага = Ложь;
	Для НомерТекущегоШага = 1 По МаксимальноеЧислоШагов Цикл
		ИмяШага = "Шаг" + НомерТекущегоШага;
		Если НавигационнаяСсылка = ИмяШага Тогда
			ЭтоСсылкаШага = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭтоСсылкаШага;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНаКартеНажатие(Форма, Элемент, Знач Адрес, ДополнениеАдреса = "")
	
	СписокСервисовКартографии = Новый СписокЗначений;
	СписокСервисовКартографии.Добавить("ЯндексКарты", "Яндекс.Карты");
	СписокСервисовКартографии.Добавить("GoogleMaps", "Google Карты");
	
	Адрес = СокрЛП(ДополнениеАдреса + " " + АдресБезИндекса(Адрес));
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Адрес", Адрес);
	
	ПараметрыОповещения.Вставить("Объект", "ПомощникЗаполненияЗаявленияНаПолучениеПатента");
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьНаКартеНажатиеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Форма.ПоказатьВыборИзМеню(Оповещение, СписокСервисовКартографии, Элемент);

КонецПроцедуры

&НаКлиенте
Функция АдресБезИндекса(Адрес)
	
	// Если индекс стоит вначале, то Google Карты не находят такой адрес.
	// Для правильного поиска уберем индекс из строки адреса.
	
	МассивЭлементовАдреса = СтрРазделить(Адрес, ",");
	Если МассивЭлементовАдреса.Количество() < 1 Тогда
		// Слишком мало элементов, с большой вероятностью индекса в адресе нет.
		Возврат Адрес;
	КонецЕсли;
	
	Индекс = СокрЛП(МассивЭлементовАдреса[0]);
	
	Если НЕ (СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Индекс) И СтрДлина(Индекс) = 6) Тогда
		// Это не индекс.
		Возврат Адрес;
	КонецЕсли;
	
	// Удалим индекс.
	МассивЭлементовАдреса.Удалить(0);
	
	// Формируем новую строку адреса.
	Возврат СокрЛП(СтрСоединить(МассивЭлементовАдреса, ","));
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНаКартеНажатиеЗавершение(ИмяКартографическогоСервиса, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ИмяКартографическогоСервиса) = Тип("ЭлементСпискаЗначений") И ДополнительныеПараметры.Свойство("Адрес") Тогда
		
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(
			ДополнительныеПараметры.Адрес, 
			ИмяКартографическогоСервиса.Значение);
		
		Комментарий = СтрШаблон(
			НСтр("ru = 'Объект: %1 Сервис: %2';
				|en = 'Object: %1 Service: %2'"),
			ДополнительныеПараметры.Объект,
			ИмяКартографическогоСервиса.Представление);
			
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Переход на карту';
				|en = 'Go to the map'"),
			"Информация", Комментарий,
			,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает форматированную строку с подсвеченной частью в тексте
//
// Параметры:
//   ИсходнаяСтрока - Строка
//   СтрокаПоиска   - Строка
//
// Возвращаемое значение:
//   ФорматированнаяСтрока
//
&НаСервереБезКонтекста
Функция ПодсветитьСтрокуПоиска(ИсходнаяСтрока, СтрокаПоиска, ЦветУспешногоПоиска = Неопределено)
	
	// Для каждой строки результата формируем представление, аналогично платформенному.
	ПредставлениеСтроки = Новый Массив;
	ОсновнаяСтрока = СокрЛП(ИсходнаяСтрока);
	ВыделяемаяЧасть= СтрокаПоиска;
	ШрифтВыделения = Новый Шрифт(,,Истина);
	
	Если ЦветУспешногоПоиска = Неопределено Тогда
		ЦветВыделения = ЦветаСтиля.ЦветТекстаУспех;
	Иначе
		ЦветВыделения = ЦветУспешногоПоиска;
	КонецЕсли;
	
	// Находим и выделяем цветом часть строки, которая была введена пользователем.
	Поз = СтрНайти(ВРег(ОсновнаяСтрока), ВРег(СтрокаПоиска),, 1);
	ВыделяемаяПодстрока = Сред(ОсновнаяСтрока, Поз, СтрДлина(ВыделяемаяЧасть));
	ФорматВыделяемаяСтрока = Новый ФорматированнаяСтрока(ВыделяемаяПодстрока, ШрифтВыделения, ЦветВыделения);
	
	// Находим оставшуюся часть строки и формируем массив из введенной пользователем строки и оставшейся части.
	Если Поз = 1 Тогда
		// Часть введенной пользователем строки находится в начале, значит оставшуюся строку нужно искать с конца.
		ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(ОсновнаяСтрока, 
			СтрДлина(ОсновнаяСтрока) - СтрДлина(ВыделяемаяЧасть))));
	ИначеЕсли Поз = СтрДлина(ОсновнаяСтрока) Тогда
		// Часть введенной пользователем строки находится в конце, значит оставшуюся строку  искать с начала.
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ОсновнаяСтрока, Поз-1)));
		ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
	Иначе
		// Часть введенной пользователем строки находится в середине, значит оставшуюся строку нужно искать в начале и в конце.
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Лев(ОсновнаяСтрока, Поз-1)));
		ПредставлениеСтроки.Добавить(ФорматВыделяемаяСтрока);
		ПредставлениеСтроки.Добавить(Новый ФорматированнаяСтрока(Сред(ОсновнаяСтрока, Поз + СтрДлина(ВыделяемаяЧасть))));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеСтроки);
	
КонецФункции

// Возвращает текст ссылки по которой осуществляется переход на карту,
// в виде форматированной строки (с картинкой)
//
&НаСервереБезКонтекста
Функция СтрокаСсылкиПоказатьНаКарте()
	
	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(БиблиотекаКартинок.УведомлениеСервиса);
	СоставСтроки.Добавить(НСтр("ru = 'Показать на карте';
								|en = 'Show on the map'"));
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);
	
КонецФункции

// Конструктор структуры параметров метода получения видов деятельности ПСН
//
// Возвращаемое значение:
//  Структура
//
&НаКлиенте
Функция ПараметрыМетодаВидыДеятельностиПСН()
	
	Возврат Новый Структура("КодРегиона", "");
	
КонецФункции

// Проверяет, что в списке присутствуют виды деятельности, которые можно применять при переходе с ЕНВД
// до принятия регионального закона. Если вида деятельности нет, добавляет.
//
// Параметры:
//  КодРегиона - Строка
//  КодыВидовДеятельностиПереходногоПериода - Соответствие
//  СписокВидовДеятельности - Массив - возможно Неопределено
//
&НаКлиенте
Процедура ДополнитьВидамиДеятельностиПереходногоПериода(КодРегиона, КодыВидовДеятельностиПереходногоПериода, СписокВидовДеятельности)
	
	Если Не ЗначениеЗаполнено(КодРегиона)
		Или КодыВидовДеятельностиПереходногоПериода.Количество() = 0
		Или СписокВидовДеятельности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если региональный закон уже принят, удалим код из списка
	Для Каждого РеквизитыВидаДеятельности Из СписокВидовДеятельности Цикл
		КодВидаДеятельности = Лев(СокрЛ(РеквизитыВидаДеятельности.Код), 2);
		Если КодыВидовДеятельностиПереходногоПериода.Получить(КодВидаДеятельности) <> Неопределено Тогда
			КодыВидовДеятельностиПереходногоПериода.Удалить(КодВидаДеятельности);
		КонецЕсли;
	КонецЦикла;
	
	// Оставшиеся коды добавляем с условным номером 01
	Для Каждого ВидДеятельностиПереходногоПериода Из КодыВидовДеятельностиПереходногоПериода Цикл
		
		ЧастиКода = Новый Массив;
		ЧастиКода.Добавить(ВидДеятельностиПереходногоПериода.Ключ);
		ЧастиКода.Добавить(КодРегиона);
		ЧастиКода.Добавить("01");
		ЧастиКода.Добавить("00");
		
		НовыйВидДеятельности = Новый Структура;
		НовыйВидДеятельности.Вставить("Код", СтрСоединить(ЧастиКода));
		НовыйВидДеятельности.Вставить("Наименование", ВидДеятельностиПереходногоПериода.Значение);
		
		СписокВидовДеятельности.Добавить(НовыйВидДеятельности);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыЗаполнены(Организация, ПроверяемыеРеквизиты, НезаполненныеРеквизиты)
	
	Если ПроверяемыеРеквизиты = Неопределено ИЛИ ПроверяемыеРеквизиты.Количество() = 0 Тогда
		// Нечего проверять.
		Возврат Истина;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ПроверяемыеРеквизиты);
	
	Результат = Истина;
	
	НезаполненныеРеквизиты = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитов[ИмяРеквизита]) Тогда
			Результат = Ложь;
			НезаполненныеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строку с сообщением о необходимости дозаполнить реквизиты для отчетности
// 
// Параметры:
//    ТекстДействия - Строка, Неопределено - Текст, который необходимо подставить в строку, например "подготовить отчет"
// 
// Возвращаемое значение:
//    Форматированная строка
//
&НаСервереБезКонтекста
Функция СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация, ТекстДействия = Неопределено)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	КонецЕсли;
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ТекстОписанияСведений = НСтр("ru = 'сведения о себе';
									|en = 'personal information'");
	Иначе
		ТекстОписанияСведений = НСтр("ru = 'сведения об организации';
									|en = 'company information'");
	КонецЕсли;
	
	ГиперссылкаСведенияОСебе = Новый ФорматированнаяСтрока(ТекстОписанияСведений,,,, ПолучитьНавигационнуюСсылку(Организация));
	
	Если ТекстДействия = Неопределено Тогда
		ТекстДействия = НСтр("ru = 'подготовить отчет';
							|en = 'prepare report'");
	КонецЕсли;
	
	ЭлементыСообщенияОбОшибке = Новый Массив;
	ЭлементыСообщенияОбОшибке.Добавить(СтрШаблон(НСтр("ru = 'Чтобы %1, укажите';
														|en = 'In order to %1, specify'"), ТекстДействия));
	ЭлементыСообщенияОбОшибке.Добавить(" ");
	ЭлементыСообщенияОбОшибке.Добавить(ГиперссылкаСведенияОСебе);
	ЭлементыСообщенияОбОшибке.Добавить(" ");
	ЭлементыСообщенияОбОшибке.Добавить(НСтр("ru = '(ИНН, ОГРНИП, код налогового органа)';
											|en = '(TIN, PSRNIE, tax authority code)'"));
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыСообщенияОбОшибке);
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьДанныеКлассификатора(ВидДеятельности, КодВидаДеятельности, АдресХранилища, ДатаНачала, Ключ)
	
	ОбновитьНастройкиКлассификатораНаСервере(АдресХранилища, ДатаНачала, Ключ);
	ЗаполнитьСписокВидовДеятельности(ВидДеятельности, АдресХранилища);
	Если ВидДеятельности.СписокВыбора.НайтиПоЗначению(КодВидаДеятельности) = Неопределено Тогда
		КодВидаДеятельности = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьНастройкиКлассификатораНаСервере(АдресХранилища, ДатаНачала, Ключ)
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		УдалитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	АдресХранилища =
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.АдресНастроекКлассификатора(ДатаНачала, Ключ);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВидовДеятельности(ВидДеятельности, АдресНастроек)
	
	ВидДеятельности.СписокВыбора.Очистить();
	НастройкиКлассификатора = ПолучитьИзВременногоХранилища(АдресНастроек);
	ВидыДеятельностиПСН = НастройкиКлассификатора.ВидыДеятельностиПСН;
	Для Каждого РеквизитыВидаДеятельности Из ВидыДеятельностиПСН Цикл
		ВидДеятельности.СписокВыбора.Добавить(
			РеквизитыВидаДеятельности.Код,
			СтрШаблон(НСтр("ru = '%1 - %2';
							|en = '%1 - %2'"), РеквизитыВидаДеятельности.Код, РеквизитыВидаДеятельности.Наименование));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВидДеятельностиВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВидДеятельностиВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Выполняет поиск по наименованию вида деятельности при вводе по строке
//
// Параметры:
//  Текст -Строка - параметр события АвтоПодбор или ОкончаниеВводаТекста
//  ДанныеВыбора - СписокЗначений - параметр события АвтоПодбор или ОкончаниеВводаТекста
//  СтандартнаяОбработка - Булево - параметр события АвтоПодбор или ОкончаниеВводаТекста
//
&НаКлиенте
Процедура ВидДеятельностиВводПоСтроке(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Элементы.ВидДеятельности.СписокВыбора Цикл
		НайденноеВхождение = СтрНайти(НРег(ЭлементСписка.Представление), НРег(Текст));
		Если НайденноеВхождение > 0 Тогда
			СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если СписокВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(СписокВыбора, Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

