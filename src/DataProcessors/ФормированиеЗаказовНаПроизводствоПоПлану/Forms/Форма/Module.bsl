&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Обработка = РеквизитФормыВЗначение("Объект");
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ОтображатьЗаказыКОформлению = Истина;
	//++ Устарело_Производство21
	ИспользоватьУправлениеПроизводством2_1 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	ИспользоватьУправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
	Если Не ИспользоватьУправлениеПроизводством2_2 Тогда
		ИнициализироватьСписок2_1();
	КонецЕсли;	
	//-- Устарело_Производство21
	ИспользоватьТипПроцесса = УправлениеДаннымиОбИзделиях.ДоступноОписаниеТипаПроизводственногоПроцесса();
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	Если Не ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	ВосстановитьНастройки();
	
	Если Не ЗначениеЗаполнено(Объект.РазмещениеВыпуска) Тогда
		Объект.РазмещениеВыпуска = ПредопределенноеЗначение("Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу");
	КонецЕсли;
	
	Если Не ИспользоватьТипПроцесса Тогда
		Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка;
	КонецЕсли;
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	ДанныеСценария = ЗначенияРеквизитовСценария(Объект.Сценарий);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСценария);
	
	Если Не ДанныеСценария.ИспользоватьДляПланированияМатериалов Тогда
		Объект.ФормироватьЗаказыПоАктуальнымСпецификациям = Истина;
		Элементы.ФормироватьЗаказыПоАктуальнымСпецификациям.Доступность = Ложь;
	КонецЕсли;
	
	РежимРасчетаПотребностейПоПлануПриИзмененииНаСервере();
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.ПериодНачало, Объект.ПериодОкончание);
	
	УстановитьВидимостьЭлементовФормы();
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма);
	НастройкиВидимостиПриИзмененииСценария(ЭтаФорма);
	НастройкиВидимостиПриИзмененииТипаПроцесса(ЭтаФорма);
	НастройкиВидимостиИспользоватьУправлениеПроизводством2_2();
	
	ЗаполнитьСписокВыбораРежимаРасчета(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И (ВыбранноеЗначение.Свойство("РазбиватьЗаказыПоНазначениям")
		Или ВыбранноеЗначение.Свойство("РазбиватьЗаказыПоСкладам")) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
		
		УстановитьВидимостьЭлементовФормы();
		Если ОтображатьЗаказыКОформлению Тогда
			ОбновитьКорзинуЗаказов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство"  И Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		СписокДокументовДляОбновления.Добавить(Параметр);
		ОбновитьДанныеКогдаФормаСтанетАктивной();
		
	ИначеЕсли ИмяСобытия = "УстановленОтбор_ФормированиеЗаказовНаПроизводствоПоПлану" Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ДанныеСценария = ЗначенияРеквизитовСценария(Объект.Сценарий);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСценария);
	
	Если Не ДанныеСценария.ИспользоватьДляПланированияМатериалов Тогда
		Объект.ФормироватьЗаказыПоАктуальнымСпецификациям = Истина;
		Элементы.ФормироватьЗаказыПоАктуальнымСпецификациям.Доступность = Ложь;
	Иначе
		Объект.ФормироватьЗаказыПоАктуальнымСпецификациям = Ложь;
		Элементы.ФормироватьЗаказыПоАктуальнымСпецификациям.Доступность = Истина;
	КонецЕсли;
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.ПериодНачало, Объект.ПериодОкончание);
	
	Если Не ПланированиеПоНазначениям Тогда
		Назначение = Неопределено
	КонецЕсли;
	
	НастройкиВидимостиПриИзмененииСценария(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРасчетаПотребностейПоПлануПриИзменении(Элемент)
	
	РежимРасчетаПотребностейПоПлануПриИзмененииНаСервере();
	
КонецПроцедуры

//ОтладаПеренести
&НаСервере
Процедура РежимРасчетаПотребностейПоПлануПриИзмененииНаСервере()
	
	ИнициализироватьКомпоновщикНастроек();
	
	Если Объект.РежимРасчетаПотребностейПоПлану < 2 Тогда
		Элементы.ПериодОкончание.Доступность = Истина;
		Элементы.УстановитьИнтервалПериода.Доступность = Истина;
	Иначе
		Элементы.ПериодОкончание.Доступность = Ложь;
		Элементы.УстановитьИнтервалПериода.Доступность = Ложь;
		
		Объект.ПериодОкончание = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ТекущаяДатаСеанса, Периодичность);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоПриИзменении(Элемент)
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.ПериодНачало, Объект.ПериодОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеПриИзменении(Элемент)
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.ПериодНачало, Объект.ПериодОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделенияПриИзменении(Элемент)
	
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроизводственногоПроцессаПриИзменении(Элемент)
	
	ЭтоРазборка = Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение(
		"Перечисление.ТипыПроизводственныхПроцессов.Разборка");
	
	НастройкиВидимостиПриИзмененииТипаПроцесса(ЭтаФорма);
	
	ЗаполнитьСписокВыбораРежимаРасчета(ЭтаФорма);
	
	ИнициализироватьКомпоновщикНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ФормированиеЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("Назначение", 		ТекСтрока.Назначение);
	КлючСтроки.Вставить("Спецификация", 	ТекСтрока.Спецификация);
	КлючСтроки.Вставить("НачалоПериода", 	?(ЭтоРазборка, ТекСтрока.ДатаЗаказа, ТекСтрока.НачалоПериодаВыпуска));
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(?(ЭтоРазборка, ТекСтрока.ОкончаниеПериодаЗаказа, ТекСтрока.ДатаВыпуска)));
	
	Если ТекСтрока.РедактироватьПодразделение Тогда
		КлючСтроки.Вставить("Подразделение", 	ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Иначе
		КлючСтроки.Вставить("Подразделение", 	ТекСтрока.ПодразделениеДиспетчер);
	КонецЕсли;
	
	КлючСтроки.Вставить("Сценарий", 		Объект.Сценарий);
	
	Если Объект.РежимРасчетаПотребностейПоПлану > 1 Тогда
		СписокДокументов = СписокПлановНарастающимИтогомПоСтроке(КлючСтроки);
	Иначе
		СписокДокументов = СписокПлановПоСтроке(КлючСтроки);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПланаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите документ';
																	|en = 'Select document'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("Спецификация", 	ТекСтрока.Спецификация);
	КлючСтроки.Вставить("Назначение", 		ТекСтрока.Назначение);
	КлючСтроки.Вставить("НачалоПериода",    ?(ЭтоРазборка, ТекСтрока.ДатаЗаказа, ТекСтрока.НачалоПериодаВыпуска));
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(?(ЭтоРазборка, ТекСтрока.ОкончаниеПериодаЗаказа, ТекСтрока.ДатаВыпуска)));
	КлючСтроки.Вставить("ДатаВыпуска",      ТекСтрока.ДатаВыпуска);
	КлючСтроки.Вставить("ДатаЗаказа",       ТекСтрока.ДатаЗаказа);
	КлючСтроки.Вставить("НачалоПериодаВыпуска",   ТекСтрока.НачалоПериодаВыпуска);
	КлючСтроки.Вставить("ОкончаниеПериодаЗаказа", ТекСтрока.ОкончаниеПериодаЗаказа);
	
	Если ТекСтрока.РедактироватьПодразделение Тогда
		КлючСтроки.Вставить("Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	Иначе
		КлючСтроки.Вставить("Подразделение", ТекСтрока.ПодразделениеДиспетчер);
	КонецЕсли;
	
	Если Объект.РежимРасчетаПотребностейПоПлану > 1 Тогда
		СписокДокументов = СписокЗаказовНарастающимИтогомПоСтроке(КлючСтроки);
	Иначе
		СписокДокументов = СписокЗаказовПоСтроке(КлючСтроки);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаЗаказаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите документ';
																	|en = 'Select document'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовОтметитьКЗаказуПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПодразделениеПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПодразделениеДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);

	КлючСтроки = Новый Структура;
	КлючСтроки.Вставить("Номенклатура",					СтрокаТаблицы.Номенклатура);
	КлючСтроки.Вставить("Характеристика",				СтрокаТаблицы.Характеристика);
	КлючСтроки.Вставить("Спецификация",					СтрокаТаблицы.Спецификация);
	Если ЭтоРазборка Тогда
		КлючСтроки.Вставить("ДатаЗаказа",				СтрокаТаблицы.ДатаЗаказа);
		КлючСтроки.Вставить("ОкончаниеПериодаЗаказа",	СтрокаТаблицы.ОкончаниеПериодаЗаказа);
	Иначе
		КлючСтроки.Вставить("НачалоПериодаВыпуска", 	СтрокаТаблицы.НачалоПериодаВыпуска);
		КлючСтроки.Вставить("ДатаВыпуска",				СтрокаТаблицы.ДатаВыпуска);
	КонецЕсли;
	КлючСтроки.Вставить("РедактироватьПодразделение",	Ложь);
	
	СсылкаНеВСписке = Новый Массив;
	Строки = ТаблицаФормированиеЗаказов.НайтиСтроки(КлючСтроки);
	Для Каждого Строка Из Строки Цикл
		СсылкаНеВСписке.Добавить(Строка.ПодразделениеДиспетчер);
	КонецЦикла;
	
	Отбор = Новый Структура("ПодразделениеДиспетчер", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодразделениеДиспетчерЗавершение", 
		ЭтотОбъект, 
		Новый Структура("ВыделенныеСтроки", Элементы.ФормированиеЗаказов.ВыделенныеСтроки));
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", 
		Новый Структура("Ключ, Отбор, СсылкаНеВСписке", СтрокаТаблицы.ПодразделениеДиспетчер, Отбор, СсылкаНеВСписке),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПодразделениеДиспетчерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);

	КлючСтроки = Новый Структура;
	КлючСтроки.Вставить("Номенклатура",					СтрокаТаблицы.Номенклатура);
	КлючСтроки.Вставить("Характеристика",				СтрокаТаблицы.Характеристика);
	КлючСтроки.Вставить("Спецификация",					СтрокаТаблицы.Спецификация);
	Если ЭтоРазборка Тогда
		КлючСтроки.Вставить("ДатаЗаказа",				СтрокаТаблицы.ДатаЗаказа);
		КлючСтроки.Вставить("ОкончаниеПериодаЗаказа",	СтрокаТаблицы.ОкончаниеПериодаЗаказа);
	Иначе
		КлючСтроки.Вставить("НачалоПериодаВыпуска", 	СтрокаТаблицы.НачалоПериодаВыпуска);
		КлючСтроки.Вставить("ДатаВыпуска",				СтрокаТаблицы.ДатаВыпуска);
	КонецЕсли;
	КлючСтроки.Вставить("РедактироватьПодразделение",	Ложь);
	
	СсылкаНеВСписке = Новый Массив;
	Строки = ТаблицаФормированиеЗаказов.НайтиСтроки(КлючСтроки);
	Для Каждого Строка Из Строки Цикл
		Если ВыбранноеЗначение = Строка.ПодразделениеДиспетчер Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(, НСтр("ru = 'По выбранному подразделению есть планы.';
											|en = 'There are plans by the selected business unit.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовСкладПриИзменении(Элемент)
	
	Если РазбиватьЗаказыПоСкладам И ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовДатаВыпускаПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовДатаЗаказаПриИзменении(Элемент)
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзинаЗаказов

// Параметры:
// 	Строка - Число -
// 	Поле - ПолеФормы -
&НаКлиенте
Процедура КорзинаЗаказовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	Если Строка <> Неопределено И (Поле.Имя = "КорзинаЗаказовПодразделениеДиспетчер"
		Или Поле.Имя = "КорзинаЗаказовСклад") Тогда
		СтрокаКорзины = КорзинаЗаказов.НайтиПоИдентификатору(Строка);
		
		Если Поле.Имя = "КорзинаЗаказовПодразделениеДиспетчер" Тогда
			ИменаПолей = "ПодразделениеДиспетчер";
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Назначить для выделенного товара подразделение диспетчер: %1?';
					|en = 'Assign a dispatching unit: %1 to the selected goods?'"), СтрокаКорзины.ПодразделениеДиспетчер);
		ИначеЕсли Поле.Имя = "КорзинаЗаказовСклад" Тогда
			ИменаПолей = "Склад";
			ТекстВопроса =СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Назначить для выделенного товара склад: %1?';
					|en = 'Assign a warehouse for the selected goods: %1?'"),СтрокаКорзины.Склад);
		Иначе
			ИменаПолей= "";
			ТекстВопроса = "";
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ИменаПолей) Тогда 
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Назначить';
														|en = 'Assign'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не назначать';
														|en = 'Do not assign'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("ИменаПолей", ИменаПолей);
			ДополнительныеПараметры.Вставить("СтрокаКорзины", СтрокаКорзины);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("КорзинаЗаказовПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПеретаскиваниеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыПеретаскивания = ДополнительныеПараметры.ПараметрыПеретаскивания;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ИменаПолей = ДополнительныеПараметры.ИменаПолей;
		СтрокаКорзины = ДополнительныеПараметры.СтрокаКорзины;
		
		Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
			Если Не СтрокаТЧ.РедактироватьПодразделение И ИменаПолей = "Подразделение" Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаКорзины, ИменаПолей);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() =0 Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Попытка	
		ОтметитьКЗаказу = ПараметрыПеретаскивания.Значение[0].ОтметитьКЗаказу;
	Исключение
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтобратьНоменклатуру(Команда)
	
	ПараметрыФормы = Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек);
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.ФормаОтбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериода(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодаЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодНачало", "ПериодОкончание"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
	"Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.Команда.Заполнить");
	
	Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение,
			НСтр("ru = 'В таблице имеются строки. При обновлении данных из планов строки будут очищены. Продолжить?';
				|en = 'There are rows in the table. When updating the plan data, the rows will be cleared. Continue?'"), 
			Кнопки, 0);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаказов(Команда)
	
	//++ Устарело_Производство21
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
	//-- Устарело_Производство21	
		ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаСписка");
	//++ Устарело_Производство21	
	Иначе
		ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаСписка");
	КонецЕсли;
	//-- Устарело_Производство21
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#Область КомандыТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ОтображатьЗаказыКОформлению(Команда)
	
	ОтображатьЗаказыКОформлениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСозданияЗаказа(Команда)
	
	ПараметрыСозданияЗаказа = Новый Структура();
	ПараметрыСозданияЗаказа.Вставить("РазбиватьЗаказыПоНазначениям", РазбиватьЗаказыПоНазначениям);
	ПараметрыСозданияЗаказа.Вставить("РазбиватьЗаказыПоСкладам", РазбиватьЗаказыПоСкладам);
	ПараметрыСозданияЗаказа.Вставить("ВидимостьНазначения", ПланированиеПоНазначениям И ИспользоватьОбособленноеОбеспечениеЗаказов);
	ПараметрыСозданияЗаказа.Вставить("ДоступностьНастройкиНазначения", Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка"));
	
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.ПараметрыСозданияЗаказа", ПараметрыСозданияЗаказа, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеДиспетчер(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.';
										|en = 'Select lines in the list'"));
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ПодразделениеДиспетчер", Истина);
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);
	
	ВыделенныеСтроки = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		Если Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока).РедактироватьПодразделение Тогда
			ВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в которых разрешено редактирование подразделения-диспетчера.';
										|en = 'Select lines in which dispatching unit editing is allowed.'"));
		Возврат;
	КонецЕсли;
	
	СсылкаНеВСписке = ПолучитьПодразделенияСПланамиПоВыделеннымСтрокам(ВыделенныеСтроки);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодразделениеДиспетчерЗавершение", 
		ЭтотОбъект, 
		Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки));
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", 
		Новый Структура("Ключ, Отбор, СсылкаНеВСписке", СтрокаТаблицы.ПодразделениеДиспетчер, Отбор, СсылкаНеВСписке),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСклад(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.';
										|en = 'Select lines in the list'"));
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);
	Склад = Неопределено;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормыВыбора.Вставить("Ключ", СтрокаТаблицы.Склад);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗаполнитьСкладЗавершение",
		ЭтотОбъект,
		Новый Структура("СтрокаТаблицы", СтрокаТаблицы));
	ОткрытьФорму(
		"Справочник.Склады.ФормаВыбора",
		ПараметрыФормыВыбора,
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.ФормированиеЗаказов;
	ДанныеТаблицы = Объект.ФормированиеЗаказов;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		Действия = Новый Структура;
		Действия.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДату(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.';
										|en = 'Select lines in the list'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьДатуЗавершение", ЭтотОбъект);
	
	Если ЭтоРазборка Тогда
		
		ПоказатьВводДаты(Оповещение, 
			Элементы.ФормированиеЗаказов.ТекущиеДанные.ДатаЗаказа,
			НСтр("ru = 'Введите дату запуска';
				|en = 'Enter start date'"),
			ЧастиДаты.Дата);
			
	Иначе
		
		ПоказатьВводДаты(Оповещение, 
			Элементы.ФормированиеЗаказов.ТекущиеДанные.ДатаВыпуска,
			НСтр("ru = 'Введите дату выпуска';
				|en = 'Enter a release date'"),
			ЧастиДаты.Дата);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИлиРаспределить(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.';
										|en = 'Select lines in the list'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	
	Если ЭтоРазборка Тогда
		ПараметрыФормы.Вставить("ДатаПроизводства", Элементы.ФормированиеЗаказов.ТекущиеДанные.ДатаЗаказа);
		ПараметрыФормы.Вставить("ТипПланирования", "ПланированиеПроизводстваРазборки");
	Иначе
		ПараметрыФормы.Вставить("ДатаПроизводства", Элементы.ФормированиеЗаказов.ТекущиеДанные.ДатаВыпуска);
		ПараметрыФормы.Вставить("ТипПланирования", "ПланированиеПроизводстваСборки");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПеренестиИлиРаспределитьЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормированиеЗаказовПоПланамРаспределениеИПеренос",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	
КонецПроцедуры

#КонецОбласти

#Область КомандыПошаговогоМастера

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.Команда.Далее");
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		ОчиститьСообщения();
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ПериодОкончание)  
			И Объект.ПериодНачало > Объект.ПериодОкончание Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Поле = "Объект.ПериодНачало";
			СообщениеПользователю.Текст = НСтр("ru = '""Начало периода"" больше ""Окончания периода"". Отбор невозможен.';
												|en = '""Beginning of period"" is greater than ""End of period"". Cannot filter.'");
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда 
			РазбиватьЗаказыПоНазначениям = Истина;
		КонецЕсли;
		
		СохранитьНастройки();
		ЗаполнитьНаКлиенте();
		
		Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
			Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда 
		
		ОбновитьКорзинуЗаказов();
		
		Если КорзинаЗаказов.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Нет заказов к оформлению. Отметьте флажком количество в колонке 
				|""К заказу"" для номенклатуры которую необходимо заказать.';
				|en = 'No orders for registration. Select quantity in
				|the ""To order"" column for products which should be ordered.'");
			
			ПоказатьПредупреждение(,ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ОчиститьСообщения();
		СоздатьЗаказыНаСервере();
		
		//++ Устарело_Производство21
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
		//-- Устарело_Производство21	
			Список = Список2_2;
		//++ Устарело_Производство21	
		Иначе
			Список = Список2_1;
		КонецЕсли;
		//-- Устарело_Производство21
	
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Ссылка",
			СформированныеЗаказы,
			ВидСравненияКомпоновкиДанных.ВСписке,
			НСтр("ru = 'Сформированные заказы';
				|en = 'Generated orders'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Если СформированныеЗаказы.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пометить документы на удаление';
														|en = 'Mark documents for deletion'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос
				(Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), 
				НСтр("ru = 'Список созданных заказов не пуст. Сформированные документы будут помечены на удаление. Пометить на удаление заказы и продолжить?';
					|en = 'The list of created orders is not empty. The generated documents will be marked for deletion. Mark orders for deletion and continue?'"),
				Кнопки);
			Возврат;
		КонецЕсли;
		
		ОчиститьСообщения();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		КорзинаЗаказов.Очистить();
		Объект.ФормированиеЗаказов.Очистить();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометитьДокументыНаУдаление(СформированныеЗаказы.ВыгрузитьЗначения()) Тогда
		СформированныеЗаказы.Очистить();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
		УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
		УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеЗаказов(Команда)
	
	КорзинаЗаказов.Очистить();
	ОчиститьСообщения();
	Объект.ФормированиеЗаказов.Очистить();
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОтображенияФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовПодразделениеДиспетчер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.РедактироватьПодразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы(Страница)
	
	Если Страница = Элементы.СтраницаШаг1 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 1 из 3. Отбор планов';
												|en = 'Step 1 of 3. Settings'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 2 из 3. Определение состава и объема заказа';
												|en = 'Step 2 of 3. Define what to order and how much to order'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru = 'Шаг 3 из 3. Уточнение сформированных заказов';
												|en = 'Step 3 of 3. Specify generated orders'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.ФормаОтображатьЗаказыКОформлению.Пометка = ОтображатьЗаказыКОформлению;
	Элементы.ГруппаЗаказыКОформлению.Видимость        = ОтображатьЗаказыКОформлению;
	
	Элементы.КорзинаЗаказовСклад.Видимость            = РазбиватьЗаказыПоСкладам И ИспользоватьНесколькоСкладов;
	Элементы.ФормированиеЗаказовСклад.Видимость       = РазбиватьЗаказыПоСкладам И ИспользоватьНесколькоСкладов;
	Элементы.ФормаЗаполнитьСклад.Видимость            = РазбиватьЗаказыПоСкладам И ИспользоватьНесколькоСкладов;
	
	ВидимостьНазначения = ПланированиеПоНазначениям И ИспользоватьОбособленноеОбеспечениеЗаказов;
	Элементы.КорзинаЗаказовНазначение.Видимость                      = РазбиватьЗаказыПоНазначениям И ВидимостьНазначения;
	
	Элементы.ФормированиеЗаказовПеренестиРаспределить.Видимость = Периодичность <> Перечисления.Периодичность.День;
	Элементы.ФормированиеЗаказовКонтекстноеМенюПеренестиРаспределить.Видимость = Периодичность <> Перечисления.Периодичность.День;
	
	Элементы.ТипПроизводственногоПроцесса.Видимость = ИспользоватьТипПроцесса;
	Если ИспользоватьТипПроцесса Тогда
		ИсключаемыеТипы = Новый Массив;
		ИсключаемыеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций);
		ПроизводствоСервер.ЗаполнитьСписокТиповПроизводственногоПроцесса(Элементы.ТипПроизводственногоПроцесса, ИсключаемыеТипы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанели(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
				
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг1;
		Элементы.ДалееШаг1.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг2;
		Элементы.ДалееШаг2.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг3;
		Элементы.ЗавершитьФормированиеЗаказовШаг3.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкиВидимостиПриИзмененииОтбораПоПодраздлелениюНаСервере(Форма)
	
	ВидимостьКолонокПодразделения = Не (Форма.ОтборПодразделения И ЗначениеЗаполнено(Форма.Объект.Подразделение));
	Форма.Элементы.ФормированиеЗаказовПодразделениеДиспетчер.Видимость = ВидимостьКолонокПодразделения;
	Форма.Элементы.ФормированиеЗаказовЗаполнитьПодразделениеДиспетчерВВыделенныхСтроках.Видимость = ВидимостьКолонокПодразделения;
	Форма.Элементы.Подразделение.Доступность = Форма.ОтборПодразделения;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкиВидимостиПриИзмененииСценария(Форма)
	
	ВидимостьНазначения = Форма.ПланированиеПоНазначениям И Форма.ИспользоватьОбособленноеОбеспечениеЗаказов;
	Форма.Элементы.ГруппаДополнительныеОтборы.Видимость = ВидимостьНазначения;
	Форма.Элементы.ФормированиеЗаказовНазначение.Видимость = ВидимостьНазначения;
	Форма.Элементы.КорзинаЗаказовНазначение.Видимость = ВидимостьНазначения И Форма.РазбиватьЗаказыПоНазначениям;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиВидимостиИспользоватьУправлениеПроизводством2_2()
	//++ Устарело_Производство21
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
	//-- Устарело_Производство21	
		Элементы.Список2_1.Видимость = Ложь;
	//++ Устарело_Производство21	
	Иначе
		Элементы.Список2_2.Видимость = Ложь;
		Элементы.КорзинаЗаказовНачатьНеРанее.Видимость = Ложь;
		Элементы.КорзинаЗаказовДатаПотребности.Видимость = Ложь;
		СформированныеЗаказы.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство");
	КонецЕсли;
	//-- Устарело_Производство21
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастройкиВидимостиПриИзмененииТипаПроцесса(Форма)
	
	Форма.Элементы.ФормированиеЗаказовДатаВыпуска.Видимость = НЕ Форма.ЭтоРазборка;
	Форма.Элементы.КорзинаЗаказовДатаПотребности.Видимость = НЕ Форма.ЭтоРазборка;
	
	Форма.Элементы.ФормированиеЗаказовДатаЗаказа.ТолькоПросмотр = НЕ Форма.ЭтоРазборка;
	
	Форма.Элементы.ФормированиеЗаказовКонтекстноеМенюУстановитьДату.Заголовок = ?(Форма.ЭтоРазборка,
		НСтр("ru = 'Установить дату запуска';
			|en = 'Set start date'"), НСтр("ru = 'Установить дату выпуска';
													|en = 'Set the release date'"));
	
	Форма.Элементы.ФормированиеЗаказовУстановитьДату.Заголовок = ?(Форма.ЭтоРазборка,
		НСтр("ru = 'Установить дату запуска';
			|en = 'Set start date'"), НСтр("ru = 'Установить дату выпуска';
													|en = 'Set the release date'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораРежимаРасчета(Форма)
	
	Список = Форма.Элементы.РежимРасчетаПотребностейПоПлану.СписокВыбора;
	
	Список.Очистить();
	
	Список.Добавить(0, НСтр("ru = 'Раздельно по периодам запуска';
							|en = 'Separate by starting periods'"));
	
	Если НЕ Форма.ЭтоРазборка Тогда
		Список.Добавить(1, НСтр("ru = 'Раздельно по периодам выпуска';
								|en = 'Separate by release periods'"));
	КонецЕсли;
	
	Список.Добавить(2, НСтр("ru = 'Нарастающим итогом за период запуска';
							|en = 'Cumulative for start period'"));
	
	Если НЕ Форма.ЭтоРазборка Тогда
		Список.Добавить(3, НСтр("ru = 'Нарастающим итогом за период выпуска';
								|en = 'Cumulative for release period'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	//++ Устарело_Производство21
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
	//-- Устарело_Производство21	
		Если Объект.РежимРасчетаПотребностейПоПлану = 0
			Или Объект.РежимРасчетаПотребностейПоПлану = 1 Тогда
			
			Если ЭтоРазборка Тогда
				ИмяМакета = "МакетКомпоновки2_2Разборка";
			Иначе
				ИмяМакета = "МакетКомпоновки2_2Сборка";
			Конецесли;
				
			СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет(ИмяМакета);

		Иначе
			
			Если ЭтоРазборка Тогда
				ИмяМакета = "МакетКомпоновки2_2НарастающимИтогомРазборка";
			Иначе
				ИмяМакета = "МакетКомпоновки2_2НарастающимИтогомСборка";
			Конецесли;
			СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет(ИмяМакета);
			
			Если ЭтоРазборка Тогда
				ИмяМакета = "МакетКомпоновкиКоличествоВПланахРазборка";
			Иначе
				ИмяМакета = "МакетКомпоновкиКоличествоВПланахСборка";
			Конецесли;
			СхемаКомпоновкиДанныхКоличествоВПланах = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет(ИмяМакета);
			
			Если ЭтоРазборка Тогда
				ИмяМакета = "МакетКомпоновки2_2КоличествоВЗаказахРазборка";
			Иначе
				ИмяМакета = "МакетКомпоновки2_2КоличествоВЗаказахСборка";
			Конецесли;
			СхемаКомпоновкиДанныхКоличествоВЗаказах = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет(ИмяМакета);
			
		КонецЕсли;
	//++ Устарело_Производство21	
	Иначе
		Если Объект.РежимРасчетаПотребностейПоПлану = 0
			Или Объект.РежимРасчетаПотребностейПоПлану = 1 Тогда
			СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновки");
		Иначе
			СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновкиНарастающимИтогом");
			СхемаКомпоновкиДанныхКоличествоВПланах = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновкиКоличествоВПланахСборка");
			СхемаКомпоновкиДанныхКоличествоВЗаказах = Обработки.ФормированиеЗаказовНаПроизводствоПоПлану.ПолучитьМакет("МакетКомпоновкиКоличествоВЗаказах");
		КонецЕсли;
	КонецЕсли;
	//-- Устарело_Производство21
	
	АдресСхемыКомпоновкиДанныхКоличествоВПланах = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхКоличествоВПланах, Новый УникальныйИдентификатор);
	АдресСхемыКомпоновкиДанныхКоличествоВЗаказах = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхКоличествоВЗаказах, Новый УникальныйИдентификатор);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура")
		И ЗначениеНастроек.Свойство("ПользовательскиеНастройки") Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	Настройки.Вставить("Сценарий",                  Объект.Сценарий);
	Настройки.Вставить("ПериодНачало",              Объект.ПериодНачало);
	Настройки.Вставить("ПериодОкончание",           Объект.ПериодОкончание);
	Настройки.Вставить("ОтборПодразделения",        ОтборПодразделения);
	Настройки.Вставить("Подразделение",             Объект.Подразделение);
	Настройки.Вставить("Организация",               Объект.Организация);
	Настройки.Вставить("РежимРасчетаПотребностейПоПлану", Объект.РежимРасчетаПотребностейПоПлану);
	Настройки.Вставить("РазбиватьЗаказыПоСкладам",  РазбиватьЗаказыПоСкладам);
	Настройки.Вставить("РазбиватьЗаказыПоНазначениям",  РазбиватьЗаказыПоНазначениям);
	Настройки.Вставить("Назначение",                Объект.Назначение);
	Настройки.Вставить("ТипПроизводственногоПроцесса", Объект.ТипПроизводственногоПроцесса);
	Настройки.Вставить("ФормироватьЗаказыПоАктуальнымСпецификациям", Объект.ФормироватьЗаказыПоАктуальнымСпецификациям);
	Настройки.Вставить("РазмещениеВыпуска",         Объект.РазмещениеВыпуска);
	
	СохранитьНастройкиНаСервере(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	КлючОбъекта = "Обработка.ФормированиеЗаказовНаПроизводствоПоПлану";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, "Настройки", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);
		
		ЭтоРазборка = Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка;
	Иначе
		Объект.РазмещениеВыпуска = ПредопределенноеЗначение("Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, ИнициализироватьКомпановщик = Ложь)
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	Если ИнициализироватьКомпановщик Тогда
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
		КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Если Объект.РежимРасчетаПотребностейПоПлану = 0
		Или Объект.РежимРасчетаПотребностейПоПлану = 2 Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериодаЗаказа",    Объект.ПериодНачало);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОкончаниеПериодаЗаказа", Объект.ПериодОкончание);
	Иначе
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода",    Объект.ПериодНачало);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОкончаниеПериода", Объект.ПериодОкончание);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ФормироватьЗаказыПоАктуальнымСпецификациям", 
																			Объект.ФормироватьЗаказыПоАктуальнымСпецификациям);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	Для каждого ПараметрКомпоновки Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			?(ЭтоРазборка, "РесурсныеСпецификации.ОсновноеИзделиеУпаковка", "РесурсныеСпецификацииВыходныеИзделия.Упаковка"),
			"ПланыПроизводстваОбороты.Номенклатура"));
	
	Возврат Запрос;
	
КонецФункции 

#КонецОбласти

#Область ПроцедурыОбработчикиКомандЗавершение

&НаКлиенте
Процедура УстановитьИнтервалПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт 
	
	ПривестиДатыКПериодичностиСценария(ЭтотОбъект, Объект.ПериодНачало, Объект.ПериодОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаКлиенте()
	
	Объект.ФормированиеЗаказов.Очистить();
	КорзинаЗаказов.Очистить();
	ОбновитьНаСервере();
	Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет утвержденного плана для сценария %1, соответствующего установленным отборам. Необходимо изменить отборы.';
				|en = 'There is no confirmed plan for the %1 scenario corresponding to the set filters. Change the filters.'"),
			Объект.Сценарий);
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеДиспетчерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ПодразделениеДиспетчер = Результат;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеДиспетчер) Тогда
		Возврат;
	КонецЕсли; 
	
	ПодразделениеДиспетчерИзменен = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаТаблицы.ПодразделениеДиспетчер <> ПодразделениеДиспетчер Тогда
			ПодразделениеДиспетчерИзменен = Истина;
			СтрокаТаблицы.ПодразделениеДиспетчер = ПодразделениеДиспетчер;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодразделениеДиспетчерИзменен И ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
	
	Склад = Результат;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли; 
	
	СкладИзменен = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаТаблицы.Склад <> Склад Тогда
			СкладИзменен = Истина;
			СтрокаТаблицы.Склад = Склад;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкладИзменен И РазбиватьЗаказыПоСкладам Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИлиРаспределитьЗавершение(ПараметрыРаспределения, ДополнительныеПараметры) Экспорт 
	
	Если ПараметрыРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиИлиРаспределитьЗавершениеНаСервере(ПараметрыРаспределения,
		Элементы.ФормированиеЗаказов.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиИлиРаспределитьЗавершениеНаСервере(ПараметрыРаспределения,Знач ВыделенныеСтроки) 
	
	Планирование.ПеренестиИлиРаспределитьНаСервере(ПараметрыРаспределения,
		ВыделенныеСтроки,
		Объект.ФормированиеЗаказов);
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуЗавершение(Дата, ДополнительныеПараметры) Экспорт 
	
	Если Дата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ЭтоРазборка Тогда
			СтрокаТЧ.ДатаЗаказа = Дата;
		Иначе
			СтрокаТЧ.ДатаВыпуска = Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПолученияПлановИЗаказов

&НаСервере
Функция СписокПлановПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланыПроизводстваОбороты.КЗаказуОборот КАК Количество,
	|	ПланыПроизводстваОбороты.Регистратор КАК Документ,
	|	ПланыПроизводстваОбороты.ПланПроизводства.МоментВремени КАК МоментВремени,
	|	ПланыПроизводстваОбороты.ПланПроизводства.Дата КАК ДатаДокумента,
	|	ПланыПроизводстваОбороты.ПланПроизводства.Номер КАК НомерДокумента
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И Подразделение = &Подразделение
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Назначение = &Назначение
	|				И Спецификация = &Спецификация) КАК ПланыПроизводстваОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ДокПланПроизводства
	|		ПО ПланыПроизводстваОбороты.Регистратор = ДокПланПроизводства.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)';
				|en = '%1 (No. %2 from %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция СписокПлановНарастающимИтогомПоСтроке(КлючСтроки)

	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанныхКоличествоВПланах, КомпоновщикНастроекКоличествоВПланахВЗаказах, Истина);
	
	Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
	Запрос.УстановитьПараметр("Подразделение",		КлючСтроки.Подразделение);
	//++ Устарело_Производство21
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_2", ИспользоватьУправлениеПроизводством2_2);
	//-- Устарело_Производство21
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	Запрос.УстановитьПараметр("Номенклатура", КлючСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", КлючСтроки.Характеристика);
	Запрос.УстановитьПараметр("Назначение", КлючСтроки.Назначение);
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса", Объект.ТипПроизводственногоПроцесса);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	СписокДокументов = Новый СписокЗначений();
	Для Каждого Строка Из ТаблицаРезультата Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)';
				|en = '%1 (No. %2 from %3)'"), 
				Формат(Строка.Количество, "ЧДЦ=3"), Строка.НомерДокумента, 
				Формат(Строка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Строка.Документ, ДокументПредставление);
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция СписокЗаказовПоСтроке(КлючСтроки)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство2_2Продукция.Ссылка КАК Документ,
	|	ЗаказНаПроизводство2_2.Дата КАК ДатаДокумента,
	|	ЗаказНаПроизводство2_2.Номер КАК НомерДокумента,
	|	СУММА(ЗаказНаПроизводство2_2Продукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ЗаказНаПроизводство2_2Продукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|		ПО ЗаказНаПроизводство2_2Продукция.Ссылка = ЗаказНаПроизводство2_2.Ссылка
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Проведен
	|	И НЕ ЗаказНаПроизводство2_2Продукция.Отменено
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводство2_2.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И НЕ ЗаказНаПроизводство2_2.Подразделение В (&ПодразделенияПоКоторымЕстьПланы)
	|	И ЗаказНаПроизводство2_2.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)
	|	И ЗаказНаПроизводство2_2Продукция.Номенклатура = &Номенклатура
	|	И ЗаказНаПроизводство2_2Продукция.Характеристика = &Характеристика
	|	И ВЫБОР
	|			КОГДА &ПланированиеПоНазначениям
	|				ТОГДА 
	|					ВЫБОР КОГДА &ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка) ТОГДА
	|						ЗаказНаПроизводство2_2Продукция.Назначение = &Назначение
	|					ИНАЧЕ
	|						ЗаказНаПроизводство2_2.НазначениеПродукция = &Назначение
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	
	|	И ЗаказНаПроизводство2_2Продукция.Количество <> 0
	|	И ВЫБОР
	|			КОГДА &Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводство2_2Продукция.Спецификация = &Спецификация
	|		КОНЕЦ
	|	И ЗаказНаПроизводство2_2.ДатаПотребности МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	//++ Устарело_Производство21
	|	И &ИспользоватьУправлениеПроизводством2_2
	//-- Устарело_Производство21
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПроизводство2_2Продукция.Ссылка,
	|	ЗаказНаПроизводство2_2.Дата,
	|	ЗаказНаПроизводство2_2.Номер
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Документ,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК ДатаДокумента,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер КАК НомерДокумента,
	|	СУММА(ЗаказНаПроизводствоПродукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА НЕ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение В (&ПодразделенияПоКоторымЕстьПланы)
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И ЗаказНаПроизводствоПродукция.ДатаПотребности МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ЗаказНаПроизводствоПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводствоПродукция.Номенклатура = &Номенклатура
	|	И ЗаказНаПроизводствоПродукция.Характеристика = &Характеристика
	|	И ВЫБОР
	|			КОГДА &ПланированиеПоНазначениям И &Назначение<>ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА ЗаказНаПроизводствоПродукция.Назначение = &Назначение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ЗаказНаПроизводствоПродукция.Количество <> 0
	|	И ВЫБОР
	|			КОГДА &Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Спецификация = &Спецификация
	|		КОНЕЦ
	|	И &ИспользоватьУправлениеПроизводством2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПроизводствоПродукция.Ссылка,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер
	//-- Устарело_Производство21
	|";
	
	Если ЭтоРазборка Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаПотребности", "НачатьНеРанее");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	ПодразделенияПоКоторымЕстьПланы = Новый Массив;
	
	Если Не ЗначениеЗаполнено(КлючСтроки.Подразделение) Тогда

		КлючСтроки.Удалить("Подразделение");
		КлючСтроки.Удалить("НачалоПериода");
		КлючСтроки.Удалить("ОкончаниеПериода");
		Если ЭтоРазборка Тогда
			КлючСтроки.Удалить("НачалоПериодаВыпуска");
			КлючСтроки.Удалить("ДатаВыпуска");
		Иначе
			КлючСтроки.Удалить("ДатаЗаказа");
			КлючСтроки.Удалить("ОкончаниеПериодаЗаказа");
		КонецЕсли;
		
		КлючСтроки.Вставить("РедактироватьПодразделение", Ложь);
		
		НайденныеСтроки = ТаблицаФормированиеЗаказов.НайтиСтроки(КлючСтроки);
		Для Каждого Строка Из НайденныеСтроки Цикл
			ПодразделенияПоКоторымЕстьПланы.Добавить(Строка.ПодразделениеДиспетчер);
		КонецЦикла;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодразделенияПоКоторымЕстьПланы", ПодразделенияПоКоторымЕстьПланы);
	//++ Устарело_Производство21
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_1", ИспользоватьУправлениеПроизводством2_1);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_2", ИспользоватьУправлениеПроизводством2_2);
	//-- Устарело_Производство21
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса",  Объект.ТипПроизводственногоПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)';
				|en = '%1 (No. %2 from %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция СписокЗаказовНарастающимИтогомПоСтроке(КлючСтроки)
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанныхКоличествоВЗаказах, КомпоновщикНастроекКоличествоВПланахВЗаказах, Истина);
	
	Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
	Запрос.УстановитьПараметр("Подразделение",		КлючСтроки.Подразделение);
	Запрос.УстановитьПараметр("ОтборПодразделения",	ЗначениеЗаполнено(КлючСтроки.Подразделение));
	//++ Устарело_Производство21
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_1", ИспользоватьУправлениеПроизводством2_1);
	//-- Устарело_Производство21
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	Запрос.УстановитьПараметр("Номенклатура", КлючСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", КлючСтроки.Характеристика);
	Запрос.УстановитьПараметр("Назначение", КлючСтроки.Назначение);
	Запрос.УстановитьПараметр("ОтборПоНазначению", ЗначениеЗаполнено(Объект.Назначение));
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса", Объект.ТипПроизводственногоПроцесса);

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	СписокДокументов = Новый СписокЗначений();
	Для Каждого Строка Из ТаблицаРезультата Цикл
		
		Если Не ЗначениеЗаполнено(КлючСтроки.Подразделение) 
			И ЗначениеЗаполнено(Строка.Подразделение) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№ %2 от %3)';
				|en = '%1 (No. %2 from %3)'"), 
				Формат(Строка.Количество, "ЧДЦ=3"), Строка.НомерДокумента, 
				Формат(Строка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Строка.Документ, ДокументПредставление);
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаКлиенте
Процедура ВыборДокументаПланаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ПланПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаЗаказаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		//++ Устарело_Производство21
		Иначе
			ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		//-- Устарело_Производство21
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область СозданиеУдалениеЗаказов

&НаСервере
Процедура СоздатьЗаказыНаСервере()
	
	Отбор = Новый Структура("ОтметитьКЗаказу", Истина);
	ТаблицаЗаказов = Объект.ФормированиеЗаказов.Выгрузить(Отбор, "
		| ПодразделениеДиспетчер,
		| Номенклатура,
		| Характеристика,
		| Назначение,
		| НаправлениеДеятельности,
		| Давалец,
		| Договор,
		| Спецификация,
		| Склад,
		| ДатаЗаказа,
		| ДатаВыпуска,
		| Упаковка,
		| КоличествоУпаковок,
		| Количество");
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		ТаблицаЗаказов.ЗаполнитьЗначения(СкладПоУмолчанию, "Склад");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗаказов.ПодразделениеДиспетчер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Назначение,
	|	ТаблицаЗаказов.НаправлениеДеятельности,
	|	ТаблицаЗаказов.Давалец,
	|	ТаблицаЗаказов.Договор,
	|	ТаблицаЗаказов.Спецификация,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.ДатаЗаказа,
	|	ТаблицаЗаказов.ДатаВыпуска,
	|	ТаблицаЗаказов.Упаковка,
	|	ТаблицаЗаказов.КоличествоУпаковок,
	|	ТаблицаЗаказов.Количество
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.КоличествоУпаковок > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.ПодразделениеДиспетчер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Назначение,
	|	ТаблицаЗаказов.НаправлениеДеятельности,
	|	ТаблицаЗаказов.Давалец,
	|	ТаблицаЗаказов.Договор.ТипДоговора КАК ТипДоговора,
	|	ТаблицаЗаказов.Договор,
	|	ТаблицаЗаказов.Спецификация,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ТаблицаЗаказов.ДатаВыпуска,
	|	ТаблицаЗаказов.Упаковка,
	|	ТаблицаЗаказов.КоличествоУпаковок,
	|	ТаблицаЗаказов.Количество
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказов.ПодразделениеДиспетчер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Назначение,
	|	ТаблицаЗаказов.НаправлениеДеятельности,
	|	ТаблицаЗаказов.Давалец,
	|	ТаблицаЗаказов.Договор,
	|	ТаблицаЗаказов.Количество,
	|	ТаблицаЗаказов.Спецификация,
	|	ТаблицаЗаказов.КоличествоУпаковок,
	|	ТаблицаЗаказов.Упаковка,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.ДатаЗаказа,
	|	ТаблицаЗаказов.ДатаВыпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаказа";
	
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
	
	СписокОшибок = Новый СписокЗначений;
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Колонки = "ПодразделениеДиспетчер";
	
	//++ Устарело_Производство21
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
	//-- Устарело_Производство21	
		Колонки = Колонки + ",ДатаЗаказа,ДатаВыпуска,Давалец,Договор,ТипДоговора";
	//++ Устарело_Производство21	
	КонецЕсли;
	//-- Устарело_Производство21
	
	Если РазбиватьЗаказыПоСкладам Тогда
		Колонки = Колонки + ",Склад";
	КонецЕсли;
	
	Если РазбиватьЗаказыПоНазначениям Тогда
		Колонки = Колонки + ",Назначение";
	КонецЕсли;
	
	ТаблицаДокументов = ТаблицаЗаказов.Скопировать(, Колонки);
	ТаблицаДокументов.Свернуть(Колонки,);
	ТекущаяДата = ТекущаяДатаСеанса();
	Для каждого СтрокаДокумента Из ТаблицаДокументов Цикл; 
		
		ДанныеЗаполнения = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокумента);
		Товары = ТаблицаЗаказов.Скопировать(ДанныеЗаполнения);
		
		Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			ДанныеЗаполнения.Вставить("НазначениеПродукция", СтрокаДокумента.Назначение);
			
			Товары.ЗаполнитьЗначения(Справочники.Назначения.ПустаяСсылка(), "Назначение");
		КонецЕсли;
		
		//++ Устарело_Производство21
		Если Не ИспользоватьУправлениеПроизводством2_2 Тогда
			// Изменим имена колонок на нужные названия табличной части "Продукция"
			Товары.Колонки.ДатаЗаказа.Имя = "НачатьНеРанее";
			Товары.Колонки.ДатаВыпуска.Имя = "ДатаПотребности";
		КонецЕсли;
		//-- Устарело_Производство21
		
		ДанныеЗаполнения.Вставить("Товары", Товары);
		ДанныеЗаполнения.Вставить("Подразделение", СтрокаДокумента.ПодразделениеДиспетчер);
		ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
		ДанныеЗаполнения.Вставить("РазмещениеВыпуска", Объект.РазмещениеВыпуска);
		
		Если РазбиватьЗаказыПоНазначениям Тогда
			ДанныеЗаполнения.Вставить("НаправлениеДеятельности", Товары[0].НаправлениеДеятельности);
		Иначе
			НаправленияДеятельности = Товары.Скопировать(,"НаправлениеДеятельности");
			НаправленияДеятельности.Свернуть("НаправлениеДеятельности");
			Если НаправленияДеятельности.Количество() = 1 Тогда
				ДанныеЗаполнения.Вставить("НаправлениеДеятельности", НаправленияДеятельности[0].НаправлениеДеятельности);
			КонецЕсли
		КонецЕсли;
		
		//++ Устарело_Переработка24
		Если
		//++ Устарело_Производство21	 
			ИспользоватьУправлениеПроизводством2_2
			И
		//-- Устарело_Производство21	 
			ЗначениеЗаполнено(СтрокаДокумента.Давалец)
			И СтрокаДокумента.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
			ДанныеЗаполнения.Вставить("Партнер", СтрокаДокумента.Давалец);
			ДанныеЗаполнения.Вставить("Договор", СтрокаДокумента.Договор);
		КонецЕсли;
		//-- Устарело_Переработка24
		
		Если
		//++ Устарело_Производство21	 
			ИспользоватьУправлениеПроизводством2_2
			И
		//-- Устарело_Производство21	 
			ЗначениеЗаполнено(СтрокаДокумента.Давалец)
			И СтрокаДокумента.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем2_5 Тогда
			ДанныеЗаполнения.Вставить(
				"ХозяйственнаяОперация", ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора());
			ДанныеЗаполнения.Вставить("Партнер", СтрокаДокумента.Давалец);
			ДанныеЗаполнения.Вставить("Договор", СтрокаДокумента.Договор);
		КонецЕсли;
		
		//++ Устарело_Производство21
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
		//-- Устарело_Производство21	
			ДанныеЗаполнения.Вставить("ТипПроизводственногоПроцесса", Объект.ТипПроизводственногоПроцесса);
			ДанныеЗаполнения.Вставить("НачатьНеРанее", СтрокаДокумента.ДатаЗаказа);
			ДанныеЗаполнения.Вставить("ДатаПотребности", СтрокаДокумента.ДатаВыпуска);
			ДанныеЗаполнения.Вставить("Источник", "ФормированиеЗаказовНаПроизводствоПоПлану");
		//++ Устарело_Производство21	
		КонецЕсли;
		//-- Устарело_Производство21
		
		//++ Устарело_Производство21
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
		//-- Устарело_Производство21	
			ДокументОбъект = Документы.ЗаказНаПроизводство2_2.СоздатьДокумент();
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
		//++ Устарело_Производство21	
		Иначе
			ДокументОбъект = Документы.ЗаказНаПроизводство.СоздатьДокумент();
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству;
		КонецЕсли;
		//-- Устарело_Производство21
		ДокументОбъект.Дата = ТекущаяДата;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		ЗаписатьЗаказНаСервере(ДокументОбъект, СписокОшибок);
		
	КонецЦикла; 
	
	Для каждого ЭлементСписка Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементСписка.Представление, ЭлементСписка.Значение);
		ЭлементСписка.Значение = Неопределено;
	КонецЦикла;
	СписокОшибок = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаказНаСервере(ДокументОбъект, СписокОшибок)

	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДокументОбъект.Комментарий = НСтр("ru = 'Сформирован автоматически обработкой ""Формирование заказов на производство по плану"".';
										|en = 'Generated automatically using data processor ""Convert plan to production orders"".'");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	КэшированныеЗначения = Неопределено;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ДокументОбъект.Продукция, СтруктураДействий, КэшированныеЗначения);
	
	ТекстОшибкиЗаписи = НСтр("ru = '%1 невозможно записать документ по причине:
								|%2';
								|en = 'Cannot save the document %1. Reason:
								|%2'");
	ТекстОшибкиЗаполнения = НСтр("ru = '%1 невозможно провести по причине некорректного заполнения.';
								|en = 'Cannot post %1. Reason: the document is filled incorrectly.'");
	
	Попытка
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			СписокОшибок.Добавить(ДокументОбъект,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаполнения, Строка(ДокументОбъект.Ссылка)));
		КонецЕсли;
		
		СформированныеЗаказы.Добавить(ДокументОбъект.Ссылка);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование заказов на производство по плану';
										|en = 'Convert plan to production orders'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ТекстОшибки = ОписаниеОшибки();
		СписокОшибок.Добавить(ДокументОбъект,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаписи, Строка(ДокументОбъект.Ссылка), ТекстОшибки));
		
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПометитьДокументыНаУдаление(СсылкиНаПометкуУдаления)
	
	СписокОшибок = ОбщегоНазначенияУТ.УстановитьПометкуУдаленияДокументов(СсылкиНаПометкуУдаления);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.Ссылка В(&Ссылка)
		|		И НЕ РеестрДокументов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкиНаПометкуУдаления);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовСценария(Сценарий)
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "Периодичность, ПланированиеПоНазначениям, ИспользоватьДляПланированияМатериалов");
		
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("Периодичность", Неопределено);
		Результат.Вставить("ПланированиеПоНазначениям", Ложь);
		Результат.Вставить("ИспользоватьДляПланированияМатериалов", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиДатыКПериодичностиСценария(Форма, ДатаНачала, ДатаОкончания)
	
	НоваяДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(
		ДатаНачала, Форма.Периодичность);
	
	ДатаНачала = ?(ЗначениеЗаполнено(ДатаНачала), НоваяДатаНачала, ДатаНачала);
	
	НоваяДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(
		ДатаОкончания, Форма.Периодичность);
		
	ДатаОкончания = ?(ЗначениеЗаполнено(ДатаОкончания), НоваяДатаОкончания, ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек);
	
	Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
	Запрос.УстановитьПараметр("Подразделение",		Объект.Подразделение);
	Запрос.УстановитьПараметр("ОтборПодразделения", ОтборПодразделения);
	//++ Устарело_Производство21
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_1", ИспользоватьУправлениеПроизводством2_1);
	//-- Устарело_Производство21
	Запрос.УстановитьПараметр("ПланированиеПоНазначениям", ПланированиеПоНазначениям);
	Запрос.УстановитьПараметр("Назначение", Объект.Назначение);
	Запрос.УстановитьПараметр("ОтборПоНазначению", ЗначениеЗаполнено(Объект.Назначение));
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса", Объект.ТипПроизводственногоПроцесса);
	Запрос.УстановитьПараметр("РазмещениеВыпускаКОкончанию",
		Объект.РазмещениеВыпуска = ПредопределенноеЗначение("Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию"));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Таблица = Результат.Выгрузить();
		ТаблицаФормированиеЗаказов.Загрузить(Таблица);
		Если ОтборПодразделения Тогда
			ТаблицаФормированиеЗаказовСОтбором = Таблица.Скопировать(Новый Структура("ПодразделениеДиспетчер", Объект.Подразделение));
		Иначе
			ТаблицаФормированиеЗаказовСОтбором = Таблица;
		КонецЕсли;
		
		Объект.ФормированиеЗаказов.Загрузить(ТаблицаФормированиеЗаказовСОтбором);
		
		Если Объект.ФормироватьЗаказыПоАктуальнымСпецификациям Тогда
			
			ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
			ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
			
			ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Объект.ТипПроизводственногоПроцесса);
			
			СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
			
			СвязиПараметровВыбора.Номенклатура            = "Объект.ФормированиеЗаказов.Номенклатура";
			СвязиПараметровВыбора.Характеристика          = "Объект.ФормированиеЗаказов.Характеристика";
			СвязиПараметровВыбора.ПодразделениеДиспетчер  = "Объект.ФормированиеЗаказов.ПодразделениеДиспетчер";
			СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.ФормированиеЗаказов.НаправлениеДеятельности";
			СвязиПараметровВыбора.НачалоПроизводства      = СтрШаблон("Объект.ФормированиеЗаказов.%1", ?(ЭтоРазборка, "ДатаЗаказа", "НачалоПериодаВыпуска"));
			ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Вставить("Объект.ФормированиеЗаказов.Спецификация", СвязиПараметровВыбора);
			
			МассивСтрок = Новый Массив;
			МассивДанных = Новый Массив;
			
		КонецЕсли;
		
		Для Каждого СтрокаЗаказа ИЗ Объект.ФормированиеЗаказов Цикл
			СтрокаЗаказа.Период.ДатаНачала    = ?(ЭтоРазборка, СтрокаЗаказа.ДатаЗаказа, СтрокаЗаказа.НачалоПериодаВыпуска);
			СтрокаЗаказа.Период.ДатаОкончания = ?(ЭтоРазборка, СтрокаЗаказа.ОкончаниеПериодаЗаказа, СтрокаЗаказа.ДатаВыпуска);
			
			Если Объект.ФормироватьЗаказыПоАктуальнымСпецификациям Тогда
				МассивСтрок.Добавить(СтрокаЗаказа);
				
				ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СобратьДанныеОбИзделииДляВыбораСпецификации(
					Объект, СтрокаЗаказа, ПараметрыВыбораСпецификаций, ЭтотОбъект, Новый Структура("КлючПутейКДанным", "Объект.ФормированиеЗаказов"));
				
				МассивДанных.Добавить(ДанныеОбИзделии);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Объект.ФормироватьЗаказыПоАктуальнымСпецификациям Тогда
			УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных, ПараметрыВыбораСпецификаций);
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() Тогда
		Если ПроверитьЕстьДокументыДляОбновления() Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект), 
				НСтр("ru = 'Заказы на производство были изменены. Хотите обновить данные? При обновлении строки будут очищены.';
					|en = 'Production orders were changed. Do you want to update the data? Lines will be cleared during update.'"), 
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru = 'Формирование заказов на производство по плану';
					|en = 'Convert plan to production orders'"));
		КонецЕсли;
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьЕстьДокументыДляОбновления()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|	ТаблицаФормированиеЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаФормированиеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаФормированиеЗаказов.Спецификация КАК Спецификация,
	|	ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска КАК НачалоПериодаВыпуска,
	|	ТаблицаФормированиеЗаказов.ДатаВыпуска КАК ДатаВыпуска,
	|	ТаблицаФормированиеЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ТаблицаФормированиеЗаказов.ОкончаниеПериодаЗаказа КАК ОкончаниеПериодаЗаказа,
	|	ТаблицаФормированиеЗаказов.РедактироватьПодразделение КАК РедактироватьПодразделение
	|ПОМЕСТИТЬ ТаблицаФормированиеЗаказов
	|ИЗ
	|	&ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство2_2Продукция.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ЗаказНаПроизводство2_2Продукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|		ПО ЗаказНаПроизводство2_2Продукция.Номенклатура = ТаблицаФормированиеЗаказов.Номенклатура
	|			И ЗаказНаПроизводство2_2Продукция.Характеристика = ТаблицаФормированиеЗаказов.Характеристика
	|ГДЕ
	|	ЗаказНаПроизводство2_2Продукция.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА ТаблицаФормированиеЗаказов.РедактироватьПодразделение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводство2_2Продукция.Ссылка.Подразделение = ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер
	|		КОНЕЦ
	|	И ЗаказНаПроизводство2_2Продукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)
	|	И (&ЭтоРазборка
	|			ИЛИ ЗаказНаПроизводство2_2Продукция.Ссылка.ДатаПотребности МЕЖДУ ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска И ТаблицаФормированиеЗаказов.ДатаВыпуска)
	|	И (НЕ &ЭтоРазборка
	|			ИЛИ ЗаказНаПроизводство2_2Продукция.Ссылка.НачатьНеРанее МЕЖДУ ТаблицаФормированиеЗаказов.ДатаЗаказа И ТаблицаФормированиеЗаказов.ОкончаниеПериодаЗаказа)
	|	И ЗаказНаПроизводство2_2Продукция.Ссылка В(&СписокДокументовДляОбновления)
	//++ Устарело_Производство21
	|	И &ИспользоватьУправлениеПроизводством2_2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|		ПО ЗаказНаПроизводствоПродукция.Номенклатура = ТаблицаФормированиеЗаказов.Номенклатура
	|			И ЗаказНаПроизводствоПродукция.Характеристика = ТаблицаФормированиеЗаказов.Характеристика
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА ТаблицаФормированиеЗаказов.РедактироватьПодразделение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение = ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер
	|		КОНЕЦ
	|	И (&ЭтоРазборка
	|		ИЛИ ЗаказНаПроизводствоПродукция.ДатаПотребности МЕЖДУ ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска И ТаблицаФормированиеЗаказов.ДатаВыпуска)
	|	И (НЕ &ЭтоРазборка
	|		ИЛИ ЗаказНаПроизводствоПродукция.НачатьНеРанее МЕЖДУ ТаблицаФормированиеЗаказов.ДатаЗаказа И ТаблицаФормированиеЗаказов.ОкончаниеПериодаЗаказа)
	|	И ЗаказНаПроизводствоПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводствоПродукция.Ссылка В(&СписокДокументовДляОбновления)
	|	И &ИспользоватьУправлениеПроизводством2_1
	//-- Устарело_Производство21
	|";
	
	//++ Устарело_Производство21
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_1", ИспользоватьУправлениеПроизводством2_1);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПроизводством2_2", ИспользоватьУправлениеПроизводством2_2);
	//-- Устарело_Производство21
	Запрос.УстановитьПараметр("СписокДокументовДляОбновления", СписокДокументовДляОбновления);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ТаблицаФормированиеЗаказов", ТаблицаФормированиеЗаказов.Выгрузить());
	Запрос.УстановитьПараметр("ЭтоРазборка", ЭтоРазборка);
	
	ЗаказыНеВходятВПланы = Запрос.Выполнить().Пустой();
	СписокДокументовДляОбновления.Очистить();
	
	Возврат Не ЗаказыНеВходятВПланы;
	
КонецФункции

&НаСервере
Процедура ОтображатьЗаказыКОформлениюНаСервере()
	
	ОтображатьЗаказыКОформлению = Не ОтображатьЗаказыКОформлению;
	УстановитьВидимостьЭлементовФормы();
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКорзинуЗаказов()
	
	Отбор = Новый Структура("ОтметитьКЗаказу", Истина);
	Колонки = "ПодразделениеДиспетчер";
	
	//++ Устарело_Производство21
	Если ИспользоватьУправлениеПроизводством2_2 Тогда
	//-- Устарело_Производство21	
		Колонки = Колонки + ", ДатаЗаказа, ДатаВыпуска";
	//++ Устарело_Производство21	
	КонецЕсли;
	//-- Устарело_Производство21
	Если РазбиватьЗаказыПоСкладам Тогда
		Колонки = Колонки + ",Склад";
	КонецЕсли;	
	Если РазбиватьЗаказыПоНазначениям Тогда
		Колонки = Колонки + ",Назначение";
	КонецЕсли;
	
	ТаблицаКорзинаЗаказов = Объект.ФормированиеЗаказов.Выгрузить(Отбор, Колонки + ", КоличествоУпаковок");
	Для Каждого Строка Из ТаблицаКорзинаЗаказов Цикл
		Если Строка.КоличествоУпаковок>0 Тогда
			Строка.КоличествоУпаковок = 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКорзинаЗаказов.Свернуть(Колонки, "КоличествоУпаковок");
	КорзинаЗаказов.Очистить();
	
	Для Каждого Строка Из ТаблицаКорзинаЗаказов Цикл
		Если Строка.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = КорзинаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВсегоСтрок = Строка.КоличествоУпаковок;
		//++ Устарело_Производство21
		Если ИспользоватьУправлениеПроизводством2_2 Тогда
		//-- Устарело_Производство21
			НоваяСтрока.НачатьНеРанее = Строка.ДатаЗаказа;
			НоваяСтрока.ДатаПотребности = Строка.ДатаВыпуска;
		//++ Устарело_Производство21	
		КонецЕсли;
		//-- Устарело_Производство21
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Устанавливать И НЕ СтрокаТаблицы.ОтметитьКЗаказу И СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Истина;
			
		ИначеЕсли Не Устанавливать И СтрокаТаблицы.ОтметитьКЗаказу Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтображатьЗаказыКОформлению Тогда
		ОбновитьКорзинуЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделенияСПланамиПоВыделеннымСтрокам(ИдентификаторыСтрок)
	
	Таблица = ТаблицаФормированиеЗаказов.Выгрузить();
	ТаблицаВыделенныеСтроки = Таблица.СкопироватьКолонки();
	
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		НоваяСтрока = ТаблицаВыделенныеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВыделенныеСтроки.Номенклатура КАК Номенклатура,
	|	ТаблицаВыделенныеСтроки.Характеристика КАК Характеристика,
	|	ТаблицаВыделенныеСтроки.Спецификация КАК Спецификация,
	|	ТаблицаВыделенныеСтроки.НачалоПериодаВыпуска КАК НачалоПериодаВыпуска
	|ПОМЕСТИТЬ ТаблицаВыделенныеСтроки
	|ИЗ
	|	&ТаблицаВыделенныеСтроки КАК ТаблицаВыделенныеСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|	ТаблицаФормированиеЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаФормированиеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаФормированиеЗаказов.Спецификация КАК Спецификация,
	|	ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска КАК НачалоПериодаВыпуска,
	|	ТаблицаФормированиеЗаказов.РедактироватьПодразделение КАК РедактироватьПодразделение
	|ПОМЕСТИТЬ ТаблицаФормированиеЗаказов
	|ИЗ
	|	&ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФормированиеЗаказов.ПодразделениеДиспетчер
	|ИЗ
	|	ТаблицаФормированиеЗаказов КАК ТаблицаФормированиеЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВыделенныеСтроки КАК ТаблицаВыделенныеСтроки
	|		ПО ТаблицаФормированиеЗаказов.Номенклатура = ТаблицаВыделенныеСтроки.Номенклатура
	|			И ТаблицаФормированиеЗаказов.Характеристика = ТаблицаВыделенныеСтроки.Характеристика
	|			И ТаблицаФормированиеЗаказов.Спецификация = ТаблицаВыделенныеСтроки.Спецификация
	|			И ТаблицаФормированиеЗаказов.НачалоПериодаВыпуска = ТаблицаВыделенныеСтроки.НачалоПериодаВыпуска
	|			И (ТаблицаФормированиеЗаказов.РедактироватьПодразделение = ЛОЖЬ)";
	
	Если ЭтоРазборка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачалоПериодаВыпуска", "ОкончаниеПериодаЗаказа");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаФормированиеЗаказов",Таблица);
	Запрос.УстановитьПараметр("ТаблицаВыделенныеСтроки",ТаблицаВыделенныеСтроки);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПодразделениеДиспетчер");
	
КонецФункции

//++ Устарело_Производство21
&НаСервере
Процедура ИнициализироватьСписок2_1()
	
	СвойстваДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваДинамическогоСписка, Список2_1);
	
	СвойстваДинамическогоСписка.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство.Номер КАК Номер,
	|	ЗаказНаПроизводство.Дата КАК Дата,
	|	ЗаказНаПроизводство.Статус КАК Статус,
	|	-ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетНомер,
	|	ЗаказНаПроизводство.Приоритет КАК Приоритет,
	|	ЗаказНаПроизводство.Подразделение КАК Подразделение,
	|	ЗаказНаПроизводство.Ответственный КАК Ответственный,
	|	ЗаказНаПроизводство.Комментарий КАК Комментарий,
	|	ЗаказНаПроизводство.Ссылка КАК Ссылка,
	|	ЗаказНаПроизводство.Организация КАК Организация
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство";
	
	СвойстваДинамическогоСписка.ОсновнаяТаблица = 
		СтрЗаменить(СвойстваДинамическогоСписка.ОсновнаяТаблица, "ЗаказМатериаловВПроизводство", "ЗаказНаПроизводство");
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список2_1, СвойстваДинамическогоСписка);
	
КонецПроцедуры
//-- Устарело_Производство21

#КонецОбласти

#КонецОбласти
