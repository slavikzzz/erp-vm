
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИспользуемыеТипыДокументов = Новый Массив;
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеДенежныхДокументов"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ВыбытиеДенежныхДокументов"));
	
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.Сторно"));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.ОтборОрганизация.Видимость = ИспользоватьНесколькоОрганизаций;
	Элементы.СписокРаспоряженийОрганизация.Видимость = ИспользоватьНесколькоОрганизаций;
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	Элементы.ОтборПодразделение.Видимость = ИспользоватьПодразделения;
	Элементы.СписокРаспоряженийПодразделение.Видимость = ИспользоватьПодразделения;
	
	ТипыДокументов = Новый Массив();
	ТипыДокументов.Добавить("Документ.ПоступлениеДенежныхДокументов");
	ТипыДокументов.Добавить("Документ.ВыбытиеДенежныхДокументов");
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.СписокРаспоряжений,
		ТипыДокументов);
	
	Список.Параметры.УстановитьЗначениеПараметра("ИдОбъектаПоступлениеДенежныхДокументов",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПоступлениеДенежныхДокументов"));
	Список.Параметры.УстановитьЗначениеПараметра("ИдОбъектаВыбытиеДенежныхДокументов",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВыбытиеДенежныхДокументов"));
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборОрганизацияр = Настройки.Получить("ОтборОрганизацияр");
	ОтборПодразделение = Настройки.Получить("ОтборПодразделение");
	ОтборМОЛ = Настройки.Получить("ОтборМОЛ");
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВыбытиеДенежныхДокументов" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_ПоступлениеДенежныхДокументов" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ИмяСобытия = "Проведение_Сторно" Или ИмяСобытия = "Запись_Сторно" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМОЛПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Обработка.ЖурналДокументовДенежныеДокументы.Форма.ФормаСписка.ПриСменеСтраницы." + ТекущаяСтраница.Имя);
	
	Если ТекущаяСтраница = Элементы.ГруппаСписокОстатков Тогда
		Элементы.СписокРаспоряжений.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСписокДокументов Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСписков

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
	Иначе
		СоздатьДокумент(Истина, "ПоступлениеОтП");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФорму("Документ.ПоступлениеДенежныхДокументов.Форма.ФормаДокумента", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		Если Поле.Имя = "СписокРаспоряженийОрганизация" Тогда
			ПоказатьЗначение(Неопределено, ТекДанные.Организация);
			
		ИначеЕсли Поле.Имя = "СписокРаспоряженийПодразделение" Тогда
			ПоказатьЗначение(Неопределено, ТекДанные.Подразделение);
			
		ИначеЕсли Поле.Имя = "СписокРаспоряженийМОЛ" Тогда
			ПоказатьЗначение(Неопределено, ТекДанные.МОЛ);
			
		Иначе ПоказатьЗначение(Неопределено, ТекДанные.ДенежныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоступлениеОтПоставщика(Команда)
	СоздатьДокумент(Истина, "ПоступлениеОтП");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеОтПодотчетника(Команда)
	СоздатьДокумент(Истина, "ПоступлениеОтФЛ");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВыдачуПодотчетнику(Команда)
	СоздатьДокумент(Ложь, "ВыдачаФЛ", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыдачуПодотчетнику(Команда)
	СоздатьДокумент(Ложь, "ВыдачаФЛ");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВозвратПоставщику(Команда)
	СоздатьДокумент(Ложь, "ВозвратП", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратПоставщику(Команда)
	СоздатьДокумент(Ложь, "ВозвратП");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПеремещение(Команда)
	СоздатьДокумент(Ложь, "Перемещение", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
	СоздатьДокумент(Ложь, "Перемещение");
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСписание(Команда)
	СоздатьДокумент(Ложь, "Списание", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписание(Команда)
	СоздатьДокумент(Ложь, "Списание");
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Период = ВыбранноеЗначение;
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Поступление, ИмяХозОперации, ПоСписку = Ложь)
	
	СтрХозОпераций = Новый Структура;
	СтрХозОпераций.Вставить("ПоступлениеОтП",	ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика"));
	СтрХозОпераций.Вставить("ПоступлениеОтФЛ",	ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника"));
	СтрХозОпераций.Вставить("ВыдачаФЛ",			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику"));
	СтрХозОпераций.Вставить("ВозвратП",			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику"));
	СтрХозОпераций.Вставить("Перемещение",		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеДенежныхДокументов"));
	СтрХозОпераций.Вставить("Списание",			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеДенежныхДокументов"));
	
	Если Поступление И ПоСписку Тогда
		
		СоздатьПоступлениеДенежныхДокументов(СтрХозОпераций[ИмяХозОперации], Элементы.СписокРаспоряжений);
		Возврат;
		
	ИначеЕсли ПоСписку Тогда // Выбытие
		
		СоздатьВыбытиеДенежныхДокументов(СтрХозОпераций[ИмяХозОперации], Элементы.СписокРаспоряжений);
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("ХозяйственнаяОперация", СтрХозОпераций[ИмяХозОперации]);
	Если Не ОтборМОЛ.Пустая() Тогда
		ДанныеЗаполнения.Вставить("МОЛ", ОтборМОЛ);
		ДанныеЗаполнения.Вставить("МОЛОтправитель", ОтборМОЛ);
	КонецЕсли;
	Если Не ОтборОрганизация.Пустая() Тогда
		ДанныеЗаполнения.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	Если Не ОтборПодразделение.Пустая() Тогда
		ДанныеЗаполнения.Вставить("Подразделение", ОтборПодразделение);
	КонецЕсли;
	
	ПарамОткрытия = Новый Структура("Основание", ДанныеЗаполнения);
	
	Если Поступление Тогда
		ОткрытьФорму("Документ.ПоступлениеДенежныхДокументов.Форма.ФормаДокумента",
			ПарамОткрытия,
			ЭтаФорма);
	Иначе
		ОткрытьФорму("Документ.ВыбытиеДенежныхДокументов.Форма.ФормаДокумента",
			ПарамОткрытия,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеДенежныхДокументов(ХозОперация, Список)
	
	ТекущиеДанные = Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
									|en = 'Cannot execute the command for the specified object'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		МассивДД = Новый Массив;
		МассивДД.Добавить(ТекущиеДанные.ДенежныйДокумент);
		
		ПараметрыОснования.Вставить("ХозяйственнаяОперация",	ХозОперация);
		ПараметрыОснования.Вставить("Организация",				ТекущиеДанные.Организация);
		ПараметрыОснования.Вставить("Подразделение",			ТекущиеДанные.Подразделение);
		ПараметрыОснования.Вставить("МОЛ",						ТекущиеДанные.МОЛ);
		ПараметрыОснования.Вставить("Валюта",					ТекущиеДанные.Валюта);
		ПараметрыОснования.Вставить("ВалютаВзаиморасчетов",		ТекущиеДанные.Валюта);
		ПараметрыОснования.Вставить("ДенежныеДокументы",		МассивДД);
		
		ОткрытьФорму("Документ.ПоступлениеДенежныхДокументов.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
		
	Иначе
		
		ОтПоставщика = ХозОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика");
		
		НаПроверку = Новый Структура;
		НаПроверку.Вставить("Организация",	 НСтр("ru = 'Организация';
													|en = 'Company'"));
		НаПроверку.Вставить("Подразделение", НСтр("ru = 'Подразделение';
													|en = 'Business unit'"));
		НаПроверку.Вставить("МОЛ",			 НСтр("ru = 'МОЛ';
													|en = 'Responsible employee'"));
		Если ОтПоставщика Тогда
			НаПроверку.Вставить("Валюта", НСтр("ru = 'Валюта';
												|en = 'Currency'"));
		КонецЕсли;
		
		Проверка = Новый Структура;
		Для Каждого ИмяРекв Из НаПроверку Цикл
			Проверка.Вставить(ИмяРекв.Ключ, Новый Массив);
			Проверка.Вставить(ИмяРекв.Ключ + "Отказ", Ложь);
		КонецЦикла;
		
		МассивДД = Новый Массив;
		Для Каждого ТекСтрока Из Список.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(ТекСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИмяРекв Из НаПроверку Цикл
				ПроверитьДублиРеквизитовДляДД(Проверка, ИмяРекв.Ключ, Список.ДанныеСтроки(ТекСтрока)[ИмяРекв.Ключ]);
			КонецЦикла;
			
			МассивДД.Добавить(Список.ДанныеСтроки(ТекСтрока).ДенежныйДокумент);
			
		КонецЦикла;
		
		Если МассивДД.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		ОчиститьСообщения();
		
		ПараметрыОснования.Вставить("ХозяйственнаяОперация",	ХозОперация);
		ПараметрыОснования.Вставить("Организация",				Проверка.Организация[0]);
		ПараметрыОснования.Вставить("Подразделение",			Проверка.Подразделение[0]);
		ПараметрыОснования.Вставить("МОЛ",						Проверка.МОЛ[0]);
		ПараметрыОснования.Вставить("ДенежныеДокументы",		МассивДД);
		Если ОтПоставщика Тогда
			ПараметрыОснования.Вставить("Валюта",				Проверка.Валюта[0]);
			ПараметрыОснования.Вставить("ВалютаВзаиморасчетов",	Проверка.Валюта[0]);
		КонецЕсли;
		
		Если СообщитьОбОшибкахФормированияДанныхЗаполненияДД(НаПроверку, Проверка) Тогда
			
			// В результате проверки обнаружены ошибки
			ТекстСообщения = НСтр("ru = 'Поступление денежных документов будет создано с указанием значений %1 из строки, на которой установлен курсор';
									|en = 'Financial document receipt will be created with values %1 of a line over which you hover the mouse pointer  '");
			ТекстРеквизитов = "";
			ВсегоРеквизитов = НаПроверку.Количество();
			ТекущийРеквизит = 1;
			Для Каждого ИмяРекв Из НаПроверку Цикл
				ЗнакПрепинания = ?(ВсегоРеквизитов = ТекущийРеквизит, " " + НСтр("ru = 'и ""';
																				|en = 'and ""'"), ", """); ТекущийРеквизит = ТекущийРеквизит + 1;
				ТекстРеквизитов = ТекстРеквизитов + ?(ПустаяСтрока(ТекстРеквизитов), """", ЗнакПрепинания) + ИмяРекв.Значение + """";
			КонецЦикла;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстРеквизитов);
			
			// Сообщаем о найденных дублях, но документ создаем, т.к. это поступление
			Оповещение = Новый ОписаниеОповещения("СоздатьДокументПоступленияДД", ДенежныеСредстваКлиент, ПараметрыОснования);
			ПоказатьПредупреждение(Оповещение, ТекстСообщения);
			
		Иначе
			
			СоздатьДокументПоступленияДД(ПараметрыОснования);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыбытиеДенежныхДокументов(ХозОперация, Список)
	
	ТекущиеДанные = Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
									|en = 'Cannot execute the command for the specified object'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		МассивДД = Новый Массив;
		МассивДД.Добавить(ТекущиеДанные.ДенежныйДокумент);
		
		ПараметрыОснования.Вставить("ХозяйственнаяОперация", ХозОперация);
		ПараметрыОснования.Вставить("Организация",           ТекущиеДанные.Организация);
		ПараметрыОснования.Вставить("Подразделение",         ТекущиеДанные.Подразделение);
		ПараметрыОснования.Вставить("МОЛОтправитель",        ТекущиеДанные.МОЛ);
		ПараметрыОснования.Вставить("МОЛ",                   ТекущиеДанные.МОЛ);
		ПараметрыОснования.Вставить("Валюта",                ТекущиеДанные.Валюта);
		ПараметрыОснования.Вставить("ДенежныеДокументы",     МассивДД);
		
		ОткрытьФорму("Документ.ВыбытиеДенежныхДокументов.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
	Иначе
		
		ВозвратПоставщику = (ХозОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику"));
		
		НаПроверку = Новый Структура;
		НаПроверку.Вставить("Организация",   НСтр("ru = 'Организация';
													|en = 'Company'"));
		НаПроверку.Вставить("Подразделение", НСтр("ru = 'Подразделение';
													|en = 'Business unit'"));
		НаПроверку.Вставить("МОЛ",           НСтр("ru = 'МОЛ';
													|en = 'Responsible employee'"));
		Если ВозвратПоставщику Тогда
			НаПроверку.Вставить("Валюта", НСтр("ru = 'Валюта';
												|en = 'Currency'"));
		КонецЕсли;
		
		Проверка = Новый Структура;
		Для Каждого ИмяРекв Из НаПроверку Цикл
			Проверка.Вставить(ИмяРекв.Ключ, Новый Массив);
			Проверка.Вставить(ИмяРекв.Ключ + "Отказ", Ложь);
		КонецЦикла;
		
		МассивДД = Новый Массив;
		Для Каждого ТекСтрока Из Список.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(ТекСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИмяРекв Из НаПроверку Цикл
				ПроверитьДублиРеквизитовДляДД(Проверка, ИмяРекв.Ключ, Список.ДанныеСтроки(ТекСтрока)[ИмяРекв.Ключ]);
			КонецЦикла;
			
			МассивДД.Добавить(Список.ДанныеСтроки(ТекСтрока).ДенежныйДокумент);
		КонецЦикла;
		
		Если МассивДД.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
										|en = 'Cannot execute the command for the specified object'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		ОчиститьСообщения();
		
		Если СообщитьОбОшибкахФормированияДанныхЗаполненияДД(НаПроверку, Проверка) Тогда
			ТекстСообщения = НСтр("ru = 'Документ не может быть создан.';
									|en = 'Document cannot be created.'"); // В результате проверки обнаружены ошибки
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПараметрыОснования.Вставить("ХозяйственнаяОперация", ХозОперация);
		ПараметрыОснования.Вставить("Организация",           Проверка.Организация[0]);
		ПараметрыОснования.Вставить("Подразделение",         Проверка.Подразделение[0]);
		ПараметрыОснования.Вставить("МОЛОтправитель",        Проверка.МОЛ[0]);
		ПараметрыОснования.Вставить("МОЛ",                   Проверка.МОЛ[0]);
		Если ВозвратПоставщику Тогда
			ПараметрыОснования.Вставить("Валюта", Проверка.Валюта[0]);
		КонецЕсли;
		
		ПараметрыОснования.Вставить("ДенежныеДокументы", МассивДД);
		
		ОткрытьФорму("Документ.ВыбытиеДенежныхДокументов.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоступленияДД(ПараметрыОснования)
	
	ОткрытьФорму("Документ.ПоступлениеДенежныхДокументов.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования));
	
КонецПроцедуры

&НаКлиенте
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияДД(НаПроверку, Проверка)
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru = 'У выделенных остатков денежных документов отличается поле ""%Поле%""';
							|en = 'The ""%Поле%"" field is different for the selected financial document balance.'");
	
	Для Каждого Реквизит Из НаПроверку Цикл
		Если Проверка[Реквизит.Ключ + "Отказ"] = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ТекстСообщения, "%Поле%", Реквизит.Значение), , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьДублиРеквизитовДляДД(Проверка, Имя, Значение)
	
	Если Проверка[Имя + "Отказ"] = Истина Тогда
		// Ранее уже были найдены ошибки
	ИначеЕсли Проверка[Имя].Количество() > 0 И Проверка[Имя].Найти(Значение) = Неопределено Тогда
		// Обнаружены дубли реквизитов
		Проверка.Вставить(Имя + "Отказ", Истина);
	ИначеЕсли Проверка[Имя].Найти(Значение) = Неопределено Тогда
		// Сохраним проверенное значение реквизита
		Проверка[Имя].Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	Списки = Новый Массив;
	Списки.Добавить(Список);
	Списки.Добавить(СписокРаспоряжений);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", ОтборОрганизация);
	Отбор.Вставить("Подразделение", ОтборПодразделение);
	
	Для Каждого ЭлементСписок Из Списки Цикл
		Для Каждого ЭлементОтбора Из Отбор Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭлементСписок,
				ЭлементОтбора.Ключ,
				ЭлементОтбора.Значение,
				ВидСравненияКомпоновкиДанных.ВСписке,,
				ЗначениеЗаполнено(ЭлементОтбора.Значение));
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряжений,
		"МОЛ",
		ОтборМОЛ,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(ОтборМОЛ));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"МОЛ",
																			ОтборМОЛ,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ЗначениеЗаполнено(ОтборМОЛ));
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериоду()
	
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецДня(Дата(3999, 12, 31))));
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

