//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура           = "Объект.Номенклатура";
	СвязиПараметровВыбора.Характеристика         = "Объект.Характеристика";
	СвязиПараметровВыбора.НачалоПроизводства     = "Объект.НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер = "Объект.ПодразделениеДиспетчер";
	
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Вставить("Объект.Спецификация", СвязиПараметровВыбора);
	
	Возврат ПараметрыВыбораСпецификаций;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "";
	Возврат ИменаРеквизитов;
	
КонецФункции

#Область Обеспечение

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	
	// Потребности в продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Склад";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Подразделение";
	
	Возврат МакетФормы;
	
КонецФункции

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
//
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания() Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки";
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "МатериалыИУслуги";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "МатериалыИУслугиВариантОбеспечения";
	ЭлементыФормы.Доступно           = "МатериалыИУслугиДоступно";
	ЭлементыФормы.Серия              = "МатериалыИУслугиСерия";
	ЭлементыФормы.Обособленно        = "МатериалыИУслугиОбособленно";
	ЭлементыФормы.Склад              = "МатериалыИУслугиСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.МатериалыИУслуги.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.МатериалыИУслуги.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.МатериалыИУслуги.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.МатериалыИУслуги.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.МатериалыИУслуги.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.МатериалыИУслуги.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.МатериалыИУслуги.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.МатериалыИУслуги.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.МатериалыИУслуги.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.МатериалыИУслуги.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.МатериалыИУслуги.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.МатериалыИУслуги.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.МатериалыИУслуги.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = Истина;
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыМатериаловВПроизводство";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Форма";
	ПараметрыВстраивания.ИмяТаблицы = "Форма.Объект.МатериалыИУслуги";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Этап.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	ТабЧасть.Назначение КАК Назначение,
		|	Реквизиты.Ссылка КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	ИСТИНА КАК ГотовКОбеспечению,
		|	Реквизиты.СтатусЗаказаНаПроизводство В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
		|		) КАК ГотовКОтгрузке,
		|	ВЫБОР КОГДА ТабЧасть.ДатаПотребности <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|				ТабЧасть.ДатаПотребности
		|			ИНАЧЕ
		|				Реквизиты.НачатьНеРанее
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	ТабЧасть.Отменено КАК Отменено,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Ссылка.Дата КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	Реквизиты.Ссылка.Приоритет КАК Приоритет,
		|	НЕОПРЕДЕЛЕНО КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Форма.Объект.МатериалыИУслуги КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Форма.Объект КАК Реквизиты
		|		ПО ИСТИНА";
	
	ПараметрыВстраивания.АдресКорректировкиДвижений = "АдресДвиженийЗаказа";
	
	// Шаблон сериализации данных формы.
	МатериалыИУслуги = Новый Структура();
	МатериалыИУслуги.Вставить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	МатериалыИУслуги.Вставить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	МатериалыИУслуги.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	МатериалыИУслуги.Вставить("Этап",               Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	МатериалыИУслуги.Вставить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	МатериалыИУслуги.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	МатериалыИУслуги.Вставить("Обособленно",        Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("Количество",         Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	МатериалыИУслуги.Вставить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	МатериалыИУслуги.Вставить("ДатаПотребности",    Новый ОписаниеТипов("Дата"));
	МатериалыИУслуги.Вставить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	МатериалыИУслуги.Вставить("Отменено",           Новый ОписаниеТипов("Булево"));
	МатериалыИУслуги.Вставить("КодСтроки",          Новый ОписаниеТипов("Число"));
	
	Объект = Новый Структура();
	Объект.Вставить("Ссылка",                       Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	Объект.Вставить("СтатусЗаказаНаПроизводство",   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказовНаПроизводство"));
	Объект.Вставить("НачатьНеРанее",                Новый ОписаниеТипов("Дата"));
	Объект.Вставить("МатериалыИУслуги",             МатериалыИУслуги);
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УдалитьДанныеПолуфабрикатаИзСпецификации(КлючСвязи, Объект) Экспорт
	
	СтруктураОтбора = Новый Структура("КлючСвязиПолуфабрикат, ЭтапВыполнен", КлючСвязи, Ложь);
	
	НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
	
	МассивКлючейДляУдаления = Новый Массив;
	МассивКлючейДляПроверки = Новый Массив;
	
	// Этапы полуфабриката
	Для Каждого СтрокаЭтап Из НайденныеСтроки Цикл
		МассивКлючейДляУдаления.Добавить(СтрокаЭтап.КлючСвязи);
		МассивКлючейДляПроверки.Добавить(СтрокаЭтап.КлючСвязи);
	КонецЦикла;
	
	СтруктураОтбора.Очистить();
	
	Пока МассивКлючейДляПроверки.Количество() > 0 Цикл
		
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", МассивКлючейДляПроверки[0]);
		СтруктураОтбора.Вставить("ЭтапВыполнен", Ложь);
		
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаЭтап Из НайденныеСтроки Цикл
			МассивКлючейДляУдаления.Добавить(СтрокаЭтап.КлючСвязи);
			МассивКлючейДляПроверки.Добавить(СтрокаЭтап.КлючСвязи);
		КонецЦикла;
		
		МассивКлючейДляПроверки.Удалить(0);
		
	КонецЦикла;
	
	СтруктураОтбора.Очистить();
	Для Каждого Ключ Из МассивКлючейДляУдаления Цикл
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязи", Ключ);
		
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.Этапы.Удалить(Строка);
		КонецЦикла;
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", Ключ);
		
		НайденныеСтроки = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.ВидыРабочихЦентров.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.МатериалыИУслуги.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.ВыходныеИзделия.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.ВозвратныеОтходы.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.Трудозатраты.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	ПланированиеПроизводства.ПостроитьСтруктуруЭтапов(Объект.Этапы);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

//-- Устарело_Производство21
