//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РеквизитыПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры");
	
	Если РеквизитыПродукции.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
	
	ПроверитьКратностьКоличестваВШтуках(Отказ);
	ПроверитьЗаполнениеКоличества(ПроверяемыеРеквизиты, Отказ);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПроверитьЗаполнениеВыходныеИзделия(РеквизитыПродукции, МассивНепроверяемыхРеквизитов, Отказ);
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.ДатаПотребности");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.СтатьяКалькуляции");
	
	ПроверитьЗаполнениеМатериалыИУслуги(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьЗаполнениеТрудозатраты(МассивНепроверяемыхРеквизитов, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПроизводство),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КлючСвязи");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КлючСвязиЭтапы");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КлючСвязиПродукция");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.КлючСвязи");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.КлючСвязиЭтапы");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.КлючСвязиПродукция");

	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КлючСвязи");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КлючСвязиЭтапы");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КлючСвязиПродукция");

	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.КлючСвязи");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.КлючСвязиЭтапы");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.КлючСвязиПродукция");

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеВыходныеИзделия(РеквизитыПродукции, МассивНепроверяемыхРеквизитов, Отказ)
	
	ЭтапыНаСтороне = Новый Соответствие;
	
	ШаблонСообщенияДоляСтоимости = НСтр("ru = 'Не заполнена колонка ""Доля стоимости"" у изделия ""%1"" этапа ""%2""';
										|en = 'Fill in the ""Cost share"" column of the ""%1"" product at the ""%2"" stage'");
	ШаблонСообщенияЭтапПродукция = НСтр("ru = 'Не заполнена колонка ""Этап"" в строке %1 списка ""Продукция""';
										|en = 'Fill in the ""Stage"" column in line %1 of the ""Products"" list'");
	ШаблонСообщенияКоличество    = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""Продукция""';
										|en = 'The ""Quantity"" column is not populated in line %1 of the ""Products"" list'");
	ШаблонСообщенияЭтапОтходы    = НСтр("ru = 'Не заполнена колонка ""Этап"" в строке %1 списка ""Возвратные отходы""';
										|en = 'Fill in the ""Stage"" column in line %1 of list ""Recyclable waste""'");
	
	ШаблонСообщенияНетСтрокВыходныеИзделия = НСтр("ru = 'Для этапа %1, выполняемого переработчиком, не введено ни одной строки в список ""Выходные изделия""';
													|en = 'No line is entered in the ""Finished products"" list for stage %1 performed by toller '");
	
	СписокШаблонов = Новый Структура("ШаблонСообщенияДоляСтоимости", ШаблонСообщенияДоляСтоимости);
	
	Для Каждого СтрокаЭтап Из ЭтотОбъект.Этапы Цикл
		
		СписокИзделийЭтапа = ЭтотОбъект.ВыходныеИзделия.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", СтрокаЭтап.КлючСвязи));
		СписокОтходовЭтапа = ЭтотОбъект.ВозвратныеОтходы.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", СтрокаЭтап.КлючСвязи));
		
		ПроверитьТипСтоимостиИДолюСтоимости(СписокИзделийЭтапа, СписокОтходовЭтапа, СтрокаЭтап, СписокШаблонов, Отказ);
		
		Если СтрокаЭтап.ПроизводствоНаСтороне Тогда
			
			ЭтапыНаСтороне.Вставить(СтрокаЭтап.КлючСвязи, Истина);
			
			Если СписокИзделийЭтапа.Количество() = 0 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияНетСтрокВыходныеИзделия, СтрокаЭтап.НаименованиеЭтапа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"ВыходныеИзделия",
					"Объект",
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонНаправлениеВыпуска = НСтр("ru = 'Не определено направление выпуска в строке %1 списка Продукция';
									|en = 'Release direction is not determined in line %1 of the ""Products"" list'");
	
	ПродукцияПрисутствуетВВыходныхИзделиях = Ложь;
	
	Для Каждого Строка Из ЭтотОбъект.ВыходныеИзделия Цикл
		
		ПродукцияПрисутствуетВВыходныхИзделиях = ПродукцияПрисутствуетВВыходныхИзделиях
			ИЛИ (Строка.Номенклатура = ЭтотОбъект.Номенклатура
				 И Строка.Характеристика = ЭтотОбъект.Характеристика
				 И Не Строка.ПроизводитсяВПроцессе
				 И (РеквизитыПродукции.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа И Строка.Склад = ЭтотОбъект.Склад
					 ИЛИ РеквизитыПродукции.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа И Строка.Подразделение = ЭтотОбъект.Подразделение));
		
		Если Не ЗначениеЗаполнено(Строка.Склад) И Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаправлениеВыпуска,
				Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "Получатель"),
				"Объект",
				Отказ);
				
		Иначе
			
			Если Не ЗначениеЗаполнено(Строка.Склад) И ЭтапыНаСтороне.Получить(Строка.КлючСвязиЭтапы) = Истина Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке %1 списка Продукция необходимо указать направление выпуска ""Выпуск продукции на склад""';
						|en = 'Specify the direction of release ""Release of products to warehouse"" in line %1 of list Products'"),
					Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "Получатель"),
					"Объект",
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Строка.Этап) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияЭтапПродукция,
				Строка.НомерСтроки);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "НаименованиеЭтапа"),
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Строка.КоличествоУпаковок = 0
				И (Не Строка.ПроизводитсяВПроцессе 
					И Не (Строка.Номенклатура = ЭтотОбъект.Номенклатура
							И Строка.Характеристика = ЭтотОбъект.Характеристика)) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияКоличество,
				Строка.НомерСтроки);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "КоличествоУпаковок"),
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонНаправлениеВыпуска = НСтр("ru = 'Не определено направление выпуска в строке %1 списка Побочный и промежуточный выпуск';
									|en = 'Release direction in line %1 of the ""Side and intermediate release"" list is not determined'");
	
	Для Каждого Строка Из ЭтотОбъект.ВозвратныеОтходы Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Склад) И Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаправлениеВыпуска, 
				Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", Строка.НомерСтроки, "Получатель"),
				"Объект",
				Отказ);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(Строка.Склад) И ЭтапыНаСтороне.Получить(Строка.КлючСвязиЭтапы) = Истина Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке %1 списка Побочный и промежуточный выпуск необходимо указать направление выпуска ""Выпуск продукции на склад""';
						|en = 'Specify a direction of release ""Release of products to warehouse"" in line %1 of the ""Side and intermediate release"" list'"),
					Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", Строка.НомерСтроки, "Получатель"),
					"Объект",
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Строка.Этап) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияЭтапОтходы,
				Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", Строка.НомерСтроки, "НаименованиеЭтапа"),
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПродукцияПрисутствуетВВыходныхИзделиях Тогда
		
		ТекстСообщения = НСтр("ru = 'В списке ""Выходные изделия"" отсутствует производимое изделие';
								|en = 'Manufactured product is missing in the ""Finished products"" list.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"ВыходныеИзделия",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Склад");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Подразделение");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Подразделение");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Этап");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Этап");
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеМатериалыИУслуги(МассивНепроверяемыхРеквизитов, Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки,
	|	МатериалыИУслуги.ДатаПотребности КАК ДатаПотребности,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Этап КАК Справочник.ЭтапыПроизводства) КАК Этап,
	|	МатериалыИУслуги.ЗаказатьНаСклад КАК ЗаказатьНаСклад,
	|	МатериалыИУслуги.Отменено КАК Отменено,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Склад КАК Справочник.Склады) КАК Склад,
	|	МатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	МатериалыИУслуги.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
	|	МатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|ИЗ
	|	&МатериалыИУслуги КАК МатериалыИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТМатериалыИУслуги КАК Т
	|ГДЕ
	|	Т.КоличествоУпаковок = 0
	|	И НЕ Т.ПроизводитсяВПроцессе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМатериалыИУслуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТМатериалыИУслуги КАК ВТМатериалыИУслуги
	|ГДЕ
	|	ВТМатериалыИУслуги.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТМатериалыИУслуги КАК МатериалыИУслуги
	|ГДЕ
	|	МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		И МатериалыИУслуги.Этап В (&ЭтапыПроизводимыеНаСтороне)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА МатериалыИУслуги.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И МатериалыИУслуги.ЗаказатьНаСклад
	|			ТОГДА ""Склад""
	|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				И МатериалыИУслуги.ПроизводитсяВПроцессе
	|			ТОГДА ""СпецификацияПолуфабриката""
	|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|				И МатериалыИУслуги.ПроизводитсяВПроцессе
	|			ТОГДА ""ЭтапВыпускаПолуфабриката""
	|		КОГДА НЕ МатериалыИУслуги.ПроизводитсяВПроцессе
	|				И МатериалыИУслуги.ДатаПотребности = ДАТАВРЕМЯ(1, 1, 1)
	|				И (МатериалыИУслуги.ЗаказатьНаСклад
	|					ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА ""ДатаПотребности""
	|		КОГДА МатериалыИУслуги.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				И НЕ МатериалыИУслуги.Отменено
	|			ТОГДА ""СтатьяКалькуляции""
	|	КОНЕЦ КАК Поле
	|ИЗ
	|	ВТМатериалыИУслуги КАК МатериалыИУслуги
	|ГДЕ
	|	МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (МатериалыИУслуги.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И МатериалыИУслуги.ЗаказатьНаСклад
	|			ИЛИ МатериалыИУслуги.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				И МатериалыИУслуги.ПроизводитсяВПроцессе
	|			ИЛИ МатериалыИУслуги.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|				И МатериалыИУслуги.ПроизводитсяВПроцессе
	|			ИЛИ НЕ МатериалыИУслуги.ПроизводитсяВПроцессе
	|				И МатериалыИУслуги.ДатаПотребности = ДАТАВРЕМЯ(1, 1, 1)
	|				И (МатериалыИУслуги.ЗаказатьНаСклад
	|					ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ИЛИ МатериалыИУслуги.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				И НЕ МатериалыИУслуги.Отменено
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("МатериалыИУслуги", МатериалыИУслуги.Выгрузить());
	Запрос.УстановитьПараметр("ЭтапыПроизводимыеНаСтороне", Этапы.Выгрузить(Новый Структура("ПроизводствоНаСтороне", Истина), "Этап").ВыгрузитьКолонку(0));
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Результат.Количество();
	
	ПроверкаКоличествоУпаковок = Результат[КоличествоПакетов-4];
	ПроверкаЭтап = Результат[КоличествоПакетов-3];
	ПроверкаНоменклатура = Результат[КоличествоПакетов-2]; 
	ПроверкаСтрокаМатериалыИУслуги = Результат[КоличествоПакетов-1];
	
	Если НЕ ПроверкаКоличествоУпаковок.Пустой() Тогда
		
		ШаблонСообщенияКоличества = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""Материалы""';
										|en = 'The ""Quantity"" column is not populated in line %1 of the ""Materials"" list'");
		
		Выборка = ПроверкаКоличествоУпаковок.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияКоличества,
				Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "КоличествоУпаковок"),
				"Объект",
				Отказ);
			
		КонецЦикла;

	КонецЕсли;
	
	Если НЕ ПроверкаЭтап.Пустой() Тогда
		
		ШаблонСообщенияЭтапМатериалы = НСтр("ru = 'Не заполнена колонка ""Этап"" в строке %1 списка ""Материалы""';
											|en = 'Fill in the ""Stage"" column in line %1 of list ""Materials""'");
		
		Выборка = ПроверкаЭтап.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияЭтапМатериалы,
				Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "НаименованиеЭтапа"),
				"Объект",
				Отказ);
			
		КонецЦикла;

	КонецЕсли;
	
	Если НЕ ПроверкаНоменклатура.Пустой() Тогда
		
		ШаблонСообщенияРабота = НСтр("ru = 'По спецификации производственный этап выполняется силами переработчика. В списке ""Материалы и работы"" не допускается указание работ (см. строку %1)';
									|en = 'According to BOM, the production stage is performed by toller. You cannot specify works in the ""Materials and works"" list (see line %1)'");
		
		Выборка = ПроверкаНоменклатура.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияРабота, Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура"),
				"Объект",
				Отказ);
			
		КонецЦикла;

	КонецЕсли;
	
	Если НЕ ПроверкаСтрокаМатериалыИУслуги.Пустой() Тогда
		
		СписокШаблоновПолей = Новый Структура;
		СписокШаблоновПолей.Вставить("Склад", НСтр("ru = 'Не указан склад получения материалов в строке %1 списка ""Материалы и работы""';
													|en = 'Material receiving warehouse is not specified in line %1 of the ""Materials and works"" list'"));
		СписокШаблоновПолей.Вставить("СпецификацияПолуфабриката", НСтр("ru = 'Не указана спецификация полуфабриката в строке %1 списка ""Материалы и работы""';
																		|en = 'Semi-finished product BOM is not specified in line %1 of the ""Materials and works"" list'"));
		СписокШаблоновПолей.Вставить("ЭтапВыпускаПолуфабриката", НСтр("ru = 'Не указан этап выпуска полуфабриката в строке %1 списка ""Материалы и работы""';
																		|en = 'Specify semi-finished product release stage in line %1 of the ""Materials and works"" list'"));
		СписокШаблоновПолей.Вставить("ДатаПотребности", НСтр("ru = 'Не указана дата потребности в строке %1 списка ""Материалы и работы""';
															|en = 'Demand date is not specified in line %1 of the ""Materials and works"" list'"));
		СписокШаблоновПолей.Вставить("СтатьяКалькуляции", НСтр("ru = 'Не указана статья калькуляции в строке %1 списка ""Материалы и работы""';
																|en = 'Costing item is not specified in line %1 of the ""Materials and works"" list'"));
		
		Выборка = ПроверкаСтрокаМатериалыИУслуги.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СписокШаблоновПолей[Выборка.Поле], Выборка.НомерСтроки);
			
			Если Выборка.Поле = "ДатаПотребности" Тогда
				ИмяРеквизита = "ДатаПотребности";
			ИначеЕсли Выборка.Поле = "СпецификацияПолуфабриката"
				ИЛИ Выборка.Поле = "ЭтапВыпускаПолуфабриката" Тогда
				ИмяРеквизита = "ИсточникПолученияПолуфабриката";
			ИначеЕсли Выборка.Поле = "Склад" Тогда
				ИмяРеквизита = "Склад";
			ИначеЕсли Выборка.Поле = "СтатьяКалькуляции" Тогда
				ИмяРеквизита = "СтатьяКалькуляции";
			Иначе
				ИмяРеквизита = "НомерСтроки";
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, ИмяРеквизита), "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПроверок = Новый Структура("
		|СтатусСпецификации,
		|СоответствиеСпецификации,
		|ПроизводствоНаСтороне,
		|ЗаполнениеВнутреннихПолуфабрикатов");
	
	ПараметрыПроверкиВнутреннихПолуфабрикатов = УправлениеДаннымиОбИзделиях.ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(ЭтотОбъект);
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("СтруктураПроверок", СтруктураПроверок);
	ПараметрыПроверки.Вставить("ПутьКДанным",       "Объект");
	ПараметрыПроверки.Вставить("ПараметрыПроверкиВнутреннихПолуфабрикатов", ПараметрыПроверкиВнутреннихПолуфабрикатов);
	
	УправлениеДаннымиОбИзделиях.ПроверитьСпецификацииПолуфабрикатов(МатериалыИУслуги, ПараметрыПроверки, Отказ);
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Этап");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Склад");
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТрудозатраты(МассивНепроверяемыхРеквизитов, Отказ)
	
	ШаблонСообщенияЭтапТрудозатраты = НСтр("ru = 'Не заполнена колонка ""Этап"" в строке %1 списка ""Трудозатраты""';
											|en = 'Fill in the ""Stage"" column in line %1 of the ""Labor costs"" list'");
	
	НайденныеСтроки = Трудозатраты.НайтиСтроки(Новый Структура("Этап", Справочники.ЭтапыПроизводства.ПустаяСсылка()));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияЭтапТрудозатраты,
			Строка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "НаименованиеЭтапа"),
			"Объект",
			Отказ);
		
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Этап");
	
КонецПроцедуры

Процедура ПроверитьТипСтоимостиИДолюСтоимости(СписокИзделийЭтапа, СписокОтходовЭтапа, СтрокаЭтап, СписокШаблонов, Отказ)
	
	Если СписокИзделийЭтапа.Количество() > 1 Тогда
		
		// Не заполнена колонка ""Доля стоимости"" у изделия ""%1"" этапа ""%2""
		Для каждого СтрокаИзделие Из СписокИзделийЭтапа Цикл
			
			Если СтрокаИзделие.ДоляСтоимости = 0 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СписокШаблонов.ШаблонСообщенияДоляСтоимости, 
					Строка(СтрокаИзделие.Номенклатура),
					Строка(СтрокаЭтап.НаименованиеЭтапа));
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", СтрокаИзделие.НомерСтроки, "ДоляСтоимости");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличества(ПроверяемыеРеквизиты, Отказ)

	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "ВыходныеИзделия.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "ВозвратныеОтходы.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "МатериалыИУслуги.ЗаказатьНаСклад = ИСТИНА";
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПроверитьКратностьКоличестваВШтуках(Отказ)

	СписокСтрокИзделия = СписокСтрокСНекратнымКоличеством(ВыходныеИзделия);
	СписокСтрокОтходы  = СписокСтрокСНекратнымКоличеством(ВозвратныеОтходы);
	
	Если СписокСтрокИзделия.Количество() = 0 
		И СписокСтрокОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТЧ.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВыходныеИзделия
	|ИЗ
	|	&ВыходныеИзделия КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТЧ.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВозвратныеОтходы
	|ИЗ
	|	&ВозвратныеОтходы КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ВыходныеИзделия"" КАК ИмяТЧ,
	|	ТЧ.НомерСтроки,
	|	ВЫРАЗИТЬ(ТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление КАК УпаковкаПредставление,
	|	ТЧ.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ВыходныеИзделия КАК ТЧ
	|ГДЕ
	|	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = &ШтучныйТип
	|	И ВЫРАЗИТЬ(ТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины В (&МерныеТипы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВозвратныеОтходы"",
	|	ТЧ.НомерСтроки,
	|	ВЫРАЗИТЬ(ТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление,
	|	ТЧ.КоличествоУпаковок
	|ИЗ
	|	ВозвратныеОтходы КАК ТЧ
	|ГДЕ
	|	ВЫРАЗИТЬ(ТЧ.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = &ШтучныйТип
	|	И ВЫРАЗИТЬ(ТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины В (&МерныеТипы)";
	
	Запрос.УстановитьПараметр("ВыходныеИзделия", ВыходныеИзделия.Выгрузить(СписокСтрокИзделия));
	Запрос.УстановитьПараметр("ВозвратныеОтходы", ВозвратныеОтходы.Выгрузить(СписокСтрокОтходы));
	
	МерныеТипы = Новый Массив;
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
	Запрос.УстановитьПараметр("МерныеТипы", МерныеТипы);
	Запрос.УстановитьПараметр("ШтучныйТип", Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ШаблонОшибкаПродукция = НСтр("ru = 'Количество продукции (%1 %2) в строке %3 должно быть кратно количеству этапов, т.к. учет ведется в штучной единице измерения.';
								|en = 'Quantity of products (%1 %2) in the %3 line should be multiple of the number of stages as accounting is kept in the piece unit of measure.'");
	ШаблонОшибкаОтход = НСтр("ru = 'Количество побочного и промежуточного выпуска (%1 %2) в строке %3 должно быть кратно количеству этапов, т.к. учет ведется в штучной единице измерения.';
							|en = 'Quantity of side and intermediate release (%1 %2) in the %3 line should be multiple of the number of stages as accounting is kept in the piece unit of measure.'");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИмяТЧ = "ВыходныеИзделия" Тогда
			ТекстСообщения = СтрШаблон(ШаблонОшибкаПродукция, 
										Выборка.КоличествоУпаковок, 
										Выборка.УпаковкаПредставление, 
										Формат(Выборка.НомерСтроки, "ЧГ=0"));
		Иначе
			ТекстСообщения = СтрШаблон(ШаблонОшибкаОтход, 
										Выборка.КоличествоУпаковок, 
										Выборка.УпаковкаПредставление, 
										Формат(Выборка.НомерСтроки, "ЧГ=0"));
		КонецЕсли; 
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТЧ, Выборка.НомерСтроки, "КоличествоУпаковок");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ); 
	
	КонецЦикла;
	
КонецПроцедуры

Функция СписокСтрокСНекратнымКоличеством(ТабличнаяЧасть)

	СписокСтрок = Новый Массив;
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Для каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) 
			ИЛИ ТекущаяСтрока.КоличествоУпаковок = 0
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) // Если упаковка не выбрана то количество может быть не кратным
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.Склад)
			ИЛИ ТекущаяСтрока.КлючСвязиЭтапы = ПустойКлюч Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЭтап = Этапы.Найти(ТекущаяСтрока.КлючСвязиЭтапы, "КлючСвязи");
		Если СтрокаЭтап = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.Количество % СтрокаЭтап.Количество <> 0 Тогда
			СписокСтрок.Добавить(ТекущаяСтрока);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат СписокСтрок;
	
КонецФункции

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21