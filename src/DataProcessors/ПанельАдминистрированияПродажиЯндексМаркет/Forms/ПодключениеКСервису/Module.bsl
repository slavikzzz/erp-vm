
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИдентификаторКабинета", ИдентификаторКабинета); 
	Если ЗначениеЗаполнено(ИдентификаторКабинета) Тогда 
		Элементы.ИдентификаторКабинета.ТолькоПросмотр = Истина;
	КонецЕсли;
	ДанныеАвторизации     = ИнтеграцияСЯндексМаркетСервер.ДанныеАвторизацииПоИдентификаторуКабинета(ИдентификаторКабинета);
	Если ДанныеАвторизации <> Неопределено И ДанныеАвторизации.Свойство("apikey_token") Тогда
		НаименованиеКабинета = ДанныеАвторизации.business_name;
		КлючДоступа          = ДанныеАвторизации.apikey_token;
	КонецЕсли;   	 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПодключения Тогда
		Оповестить("ЯндексМаркет_ПодключениеКСервису", ИдентификаторКабинета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключить(Команда) 
	
	Если ОбязательныеПоляЗаполнены() Тогда   
		Если ЕстьКлючДляКабинета() Тогда 	
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьВопросЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеОЗавершении, 
			НСтр("ru = 'Для указанного кабинета уже есть сохраненный ключ доступа. Заменить значение ключа?';
				|en = 'Для указанного кабинета уже есть сохраненный ключ доступа. Заменить значение ключа?'"), 
			РежимДиалогаВопрос.ДаНет, 
			, 
			КодВозвратаДиалога.Нет, 
			НСтр("ru = 'Сохранение ключа доступа';
				|en = 'Сохранение ключа доступа'"), 
			КодВозвратаДиалога.Нет);
		Иначе
			ОбработатьПодключение();	
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры   
	
&НаКлиенте
Процедура ОтменаПодключения(Команда)
	
	ИдентификаторКабинета = Неопределено;
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОбязательныеПоляЗаполнены()
	
	Результат = Истина;
	ОчиститьСообщения(); 
	
	Если Не ЗначениеЗаполнено(НаименованиеКабинета) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Наименование кабинета""';
														|en = 'Не заполнено поле ""Наименование кабинета""'"));
		Результат = Ложь;
	КонецЕсли;

	
	Если Не ЗначениеЗаполнено(ИдентификаторКабинета) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Идентификатор кабинета""';
														|en = 'Не заполнено поле ""Идентификатор кабинета""'"));
		Результат = Ложь;
	КонецЕсли;

	
	Если Не ЗначениеЗаполнено(КлючДоступа) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Ключ доступа""';
														|en = 'Не заполнено поле ""Ключ доступа""'"));
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
    	ОбработатьПодключение();	
	КонецЕсли;    
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьПодключение()
	
	Результат     = ПодключитьНаСервере();
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'При выполнении запроса к интернет-ресурсу возникли ошибки. Подробности см. в журнале регистрации.';
														|en = 'При выполнении запроса к интернет-ресурсу возникли ошибки. Подробности см. в журнале регистрации.'"));
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Или МобильныйКлиент Тогда
		Если Результат = Истина Тогда      
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Авторизация пройдена.';
															|en = 'Авторизация пройдена.'"));
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка авторизации.';
															|en = 'Ошибка авторизации.'"));
		КонецЕсли;
		
		Закрыть(ИдентификаторКабинета);
		
	#Иначе                
		РезультатВыводаСтраницы = ПоказатьСтраницуСРезультатамиАвторизации(Результат);
		Если Не РезультатВыводаСтраницы Тогда  
			Если Результат = Истина Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Авторизация пройдена.';
																|en = 'Авторизация пройдена.'"));
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Ошибка авторизации.';
																|en = 'Ошибка авторизации.'"));
			КонецЕсли;
		КонецЕсли;	
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ЕстьКлючДляКабинета() 
	
	Результат = Ложь;
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ДанныеАвторизацииПоИдентификаторуКабинета(СокрЛП(ИдентификаторКабинета));   
	Если ДанныеАвторизации<>Неопределено И ДанныеАвторизации.Свойство("apikey_token") Тогда 
		Результат = Истина;	
	КонецЕсли;             
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодключитьНаСервере()
	
	Результат     = Неопределено;
		
	// сохранение ключа
	ДанныеАвторизации = Новый Структура;
	ДанныеАвторизации.Вставить("apikey_token",СокрЛП(КлючДоступа));
	ДанныеАвторизации.Вставить("business_name",СокрЛП(НаименованиеКабинета));
					
	// проверка вызова с новым ключом
	Попытка
		Сервер            = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPI();
		АдресРесурса      = "";

		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси,60, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Api-Key", ДанныеАвторизации.apikey_token);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		HTTPОтвет    = HTTPСоединение.Получить(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		РезультатОтвета    = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		
		Если КодСостояния <> 200 Тогда
			Если РезультатОтвета.Свойство("status") И РезультатОтвета.status = "ERROR" Тогда
				ОписаниеОшибок = ИнтеграцияСЯндексМаркетСервер.ТекстОшибки(РезультатОтвета.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли;
			
			Результат = Ложь;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проверка авторизации не успешна %1: %2%3';
					|en = 'Проверка авторизации не успешна %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
				
			ЗаписьЖурналаРегистрации(ИнтеграцияСЯндексМаркетСервер.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		Иначе                  
			Для Каждого ЭлементКоллекции Из РезультатОтвета.campaigns Цикл
				Если СокрЛП(Формат(ЭлементКоллекции.business.id, "ЧН=; ЧГ=0"))=СокрЛП(ИдентификаторКабинета) Тогда
					Результат = Истина;
				Иначе
					Результат = Ложь;
				КонецЕсли; 
				Прервать;
			КонецЦикла;					
		КонецЕсли;

	Исключение 
		Результат = Ложь;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2';
				|en = 'No connection with the %1 server. Reason: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ИнтеграцияСЯндексМаркетСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки; 
	
	Если Результат Тогда   
		Результат = ИнтеграцияСЯндексМаркетСервер.УстановитьНастройкиАвторизации(ДанныеАвторизации,СокрЛП(ИдентификаторКабинета));	
	КонецЕсли; 
	
	РезультатПодключения = Результат;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПутьКФайлуМакета(АвторизацияУспешна)  
	
	КаталогВременныхФайлов = ФайловаяСистема.СоздатьВременныйКаталог();
	СоздатьКаталог(КаталогВременныхФайлов);
		
	Если АвторизацияУспешна Тогда
		ИмяФайла = "УспешнаяАвторизация.html";
	Иначе
		ИмяФайла = "НеУспешнаяАвторизация.html";
	КонецЕсли;

	ПутьКФайлу = КаталогВременныхФайлов + ИмяФайла;
	
	МассивНайденныхФайлов = НайтиФайлы(КаталогВременныхФайлов, ИмяФайла, Ложь);
	
	Если МассивНайденныхФайлов.Количество() = 0 Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстСтраницы = ТекстСтраницы(ПутьКФайлу, АвторизацияУспешна);
		ТекстовыйДокумент.УстановитьТекст(ТекстСтраницы);
		ТекстовыйДокумент.Записать(ПутьКФайлу);
	КонецЕсли;
	
	Возврат ПутьКФайлу;
	
КонецФункции

&НаКлиенте
Функция ПоказатьСтраницуСРезультатамиАвторизации(АвторизацияУспешна)
	
	Результат = Истина;

	Попытка	
		ПутьКФайлу = ПутьКФайлуМакета(АвторизацияУспешна);
		ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
		Закрыть(ИдентификаторКабинета);
	Исключение
		ДобавитьЗаписьВЖурналРегистрации(ПутьКФайлу);
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстСтраницы(ПутьКФайлу, АвторизацияУспешна)
	
	Если АвторизацияУспешна Тогда
		ТекстСтраницы = ПолучитьОбщийМакет("УспешнаяАвторизация").ПолучитьТекст();
	Иначе
		ТекстСтраницы = ПолучитьОбщийМакет("НеУспешнаяАвторизация").ПолучитьТекст();
	КонецЕсли;
	
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, 
		НСтр("ru = 'Все права защищены';
			|en = 'All rights reserved'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '© ООО 1С-Софт, %1. Все права защищены';
				|en = '© OOO 1C Company, %1. All rights reserved'"),
			Формат(Год(ТекущаяДатаСеанса()), "ЧГ=0")));
	
	Возврат ТекстСтраницы;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗаписьВЖурналРегистрации(ПутьКФайлу)
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось открыть приложение по адресу %1 по причине: %2';
			|en = 'Cannot open the application at %1 due to: %2'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), 
		ПутьКФайлу, 
		ОписаниеОшибки());
	ЗаписьЖурналаРегистрации(ИнтеграцияСЯндексМаркетСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка,,, 
		ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючДоступаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;       
	ТекущийЭлемент = Элементы.ГруппаПодсказка;
	ТекущийРежимПароля = Элементы.КлючДоступа.РежимПароля;
	Элементы.КлючДоступа.РежимПароля = Не ТекущийРежимПароля;  
	Если Элементы.КлючДоступа.КартинкаКнопкиВыбора = БиблиотекаКартинок.СкрытьПароль Тогда
		Элементы.КлючДоступа.КартинкаКнопкиВыбора = БиблиотекаКартинок.ПоказатьПароль;
	Иначе   
		Элементы.КлючДоступа.КартинкаКнопкиВыбора = БиблиотекаКартинок.СкрытьПароль;
	КонецЕсли;
	ОбновитьОтображениеДанных(Элемент);
	ТекущийЭлемент = Элемент;
	
КонецПроцедуры  

&НаКлиенте
Процедура НаименованиеКабинетаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)  
	
	СтандартнаяОбработка = Ложь; 
	ПолучитьИзБуфераОбменаНаименованиеКабинета();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКабинетаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;   
	ПолучитьИзБуфераОбменаИдентификаторКабинета();
	
КонецПроцедуры

&НаКлиенте
Процедура КлючДоступаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "СсылкаВставитьИзБуфераОбмена" Тогда
		СтандартнаяОбработка = Ложь;	
		ПолучитьИзБуфераОбменаКлючДоступа(); 
	Иначе
		СтандартнаяОбработка = Истина;		
	КонецЕсли;

КонецПроцедуры  

&НаКлиенте
Асинх Процедура ПолучитьИзБуфераОбменаКлючДоступа() 
	
	КлючДоступа = Ждать СодержимоеБуфераОбмена();	

КонецПроцедуры 

&НаКлиенте
Асинх Процедура ПолучитьИзБуфераОбменаНаименованиеКабинета() 
	
	НаименованиеКабинета = Ждать СодержимоеБуфераОбмена();	

КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьИзБуфераОбменаИдентификаторКабинета() 
	
	ИдентификаторКабинета = Ждать СодержимоеБуфераОбмена();	

КонецПроцедуры

&НаКлиенте
Асинх Функция СодержимоеБуфераОбмена()
	
	Если СредстваБуфераОбмена.ИспользованиеДоступно() Тогда
		Если Ждать СредстваБуфераОбмена.СодержитДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Текст) Тогда
			Возврат Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Текст);
		КонецЕсли;
	КонецЕсли;   
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

