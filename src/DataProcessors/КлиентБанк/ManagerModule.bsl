#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает данные выписки из файла.
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные файла выписки
//  ФорматОбмена - ПеречислениеСсылка.ФорматОбменаСБанком - формат файла
//  Кодировка - Строка - формат файла обмена
// 
// Возвращаемое значение:
//  Структура - данные выписки из файла:
// * Заголовок - Структура - содержит поля:
// ** Отправитель - Строка - название банка
// ** ДатаСоздания - Дата - дата создания выписки
// ** ДатаНачала - Дата - дата начала периода выписки
// ** ДатаКонца - Дата - дата окончания периода выписки
// * РасчетныеСчета - Массив из Строка - список счетов, данные по которым содержит выписка
// * ДокументыВыписки - Массив из Структура - данные операции:
// ** Структура - См. ДенежныеСредстваКлиентСервер.ТегиСтрокиДокумента
// * ОшибкиРазбора - Массив из Строка - ошибки, обнаруженные при чтении выписки
// * СписокСчетов - Массив из Строка - список счетов, данные по которым содержит выписка.
Функция ПрочитатьДанныеВыпискиИзФайла(ДвоичныеДанные, ФорматОбмена, Кодировка) Экспорт
	
	ДанныеВыписки = Новый Структура;
	ДанныеВыписки.Вставить("Заголовок", ДенежныеСредстваСервер.ЗаголовокВыписки());
	ДанныеВыписки.Вставить("РасчетныеСчета", Новый Массив);
	ДанныеВыписки.Вставить("ДокументыВыписки", Новый Массив);
	ДанныеВыписки.Вставить("ОшибкиРазбора", Новый Массив);
	
	Если ФорматОбмена = Перечисления.ФорматОбменаСБанком.ISO20022 Тогда
		ПрочитатьДанныеВыпискиISO20022(ДвоичныеДанные, ДанныеВыписки);
	ИначеЕсли ФорматОбмена = Перечисления.ФорматОбменаСБанком.MT940 Тогда
		ПрочитатьДанныеВыпискиMT940(ДвоичныеДанные, ДанныеВыписки, Кодировка);
	//++ Локализация
	ИначеЕсли ФорматОбмена = Перечисления.ФорматОбменаСБанком.ФедеральноеКазначействоРФ Тогда
		ПрочитатьДанныеАрхиваТОФК(ДвоичныеДанные, ДанныеВыписки);
	//-- Локализация
	Иначе
		КлиентБанкЛокализация.ПрочитатьВыпискуИзФайла(ДвоичныеДанные, ФорматОбмена, ДанныеВыписки);
	КонецЕсли;
		
	ДанныеВыписки.Заголовок.Вставить("ВремяСоздания", "");
	ДанныеВыписки.Вставить("СписокСчетов", Новый Массив);
	ДокументыВыписки = Новый Массив;
	Для Каждого Элемент Из ДанныеВыписки.РасчетныеСчета Цикл
		ДанныеВыписки.СписокСчетов.Добавить(Элемент.РасчСчет);
	КонецЦикла;
	ДанныеВыписки.РасчетныеСчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеВыписки.РасчетныеСчета);
	Для Каждого Элемент Из ДанныеВыписки.ДокументыВыписки Цикл
		ДанныеОперации = ДенежныеСредстваКлиентСервер.ТегиСтрокиДокумента();
		ЗаполнитьЗначенияСвойств(ДанныеОперации, Элемент);
		ДанныеОперации.Вставить("ДатаПроведения", Элемент.ДатаОперации);
		Если Элемент.НаправлениеПлатежа = "1" Тогда
			ДанныеОперации.Вставить("Списано", Элемент.ДатаОперации);
			ДанныеОперации.ДатаСписано = Формат(Элемент.ДатаОперации, "ДЛФ=D;");
		Иначе
			ДанныеОперации.Вставить("Поступило", Элемент.ДатаОперации);
			ДанныеОперации.ДатаПоступило = Формат(Элемент.ДатаОперации, "ДЛФ=D;");
		КонецЕсли;
		ДанныеОперации.ПлательщикСВИФТ = Элемент.ПлательщикБанкSWIFT;
		ДанныеОперации.ПлательщикБанк1 = Элемент.ПлательщикБанк;
		ДанныеОперации.ПолучательСВИФТ = Элемент.ПолучательБанкSWIFT;
		ДанныеОперации.ПолучательБанк1 = Элемент.ПолучательБанк;
		Если ЗначениеЗаполнено(Элемент.Дата) Тогда
			ДанныеОперации.Вставить("ДатаДок", Элемент.Дата);
			ДанныеОперации.Дата = Формат(Элемент.Дата, "ДЛФ=D;");
		КонецЕсли;
		ДокументыВыписки.Добавить(ДанныеОперации);
	КонецЦикла;
	ДанныеВыписки.ДокументыВыписки = ДокументыВыписки;
	Возврат ДанныеВыписки;
	
КонецФункции

// Формирует таблицу банковских счетов с настройками обмена
//
// Параметры:
//    Загрузка - Булево - Признак подготовки счетов для загрузки или для выгрузки платежей.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица банковских счетов.
//
Функция ТаблицаСчетов(Загрузка = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНастройкиСчетов();
	Запрос.УстановитьПараметр("Загрузка", Загрузка);
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов;
	
КонецФункции

// Формирует таблицу документов к выгрузке в банк
//
// Параметры:
//    МассивСчетов - Массив - счета для отбора платежей к выгрузке
//    ДатаНачала - Дата - Начало периода выборки документов
//    ДатаКонца - Дата - Конец периода выборки документов
//    ТолькоНевыгруженные - Булево - Признак отбора только не выгруженных ранее платежей.
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица документов.
//
Функция ТаблицаДокументовКВыгрузке(
	МассивСчетов = Неопределено,
	ДатаНачала = '00010101',
	ДатаКонца = '00010101',
	ТолькоНевыгруженные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДокументыКВыгрузке();
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
	Запрос.УстановитьПараметр("ТолькоНевыгруженные", ТолькоНевыгруженные);
	
	ПоляПлатежа = ИнициализироватьПоляПлатежа();
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ПакетЗапросов = Схема.ПакетЗапросов[2]; // ЗапросВыбораСхемыЗапроса
	ПоляЗапроса = ПакетЗапросов.Колонки;
	
	Для каждого КлючИЗначение Из ПоляПлатежа Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Выгружает платежи в файл
//
// Параметры:
//    ПараметрыВыгрузки - Структура - Параметры выгрузки платежей
//    АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, куда будут помещены данные выгрузки.
//
Процедура Выгрузить(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	Если ПараметрыВыгрузки.ФорматОбмена = Перечисления.ФорматОбменаСБанком.ISO20022 Тогда
		ВыгрузитьПлатежиВISO20022(ПараметрыВыгрузки, АдресХранилища);
	ИначеЕсли ПараметрыВыгрузки.ФорматОбмена = Перечисления.ФорматОбменаСБанком.ClientBankExchange1c Тогда
		ВыгрузитьПлатежиВ1CClientBankExchange(ПараметрыВыгрузки, АдресХранилища);
	ИначеЕсли ПараметрыВыгрузки.ФорматОбмена = Перечисления.ФорматОбменаСБанком.MT940 Тогда
		ВыгрузитьПлатежиВMT940(ПараметрыВыгрузки, АдресХранилища);
	//++ Локализация
	ИначеЕсли ПараметрыВыгрузки.ФорматОбмена = Перечисления.ФорматОбменаСБанком.ФедеральноеКазначействоРФ Тогда
		ВыгрузитьПлатежиТОФК(ПараметрыВыгрузки, АдресХранилища);
	//-- Локализация
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВыгрузки.ФорматОбмена) Тогда
		ДвоичныеДанныеФайла = Неопределено;
		КлиентБанкЛокализация.ВыгрузитьДокументыВФайл(
			ПараметрыВыгрузки.ТаблицаДокументов, ПараметрыВыгрузки.ФорматОбмена, ДвоичныеДанныеФайла);
		ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, АдресХранилища);
	Иначе
		ШаблонСообщения = НСтр("ru = 'В банковском счете %1 не указан формат обмена для выгрузки данных.';
								|en = 'The exchange format for data export is not specified in the bank account %1.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыВыгрузки.БанковскийСчет);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыВыгрузки.БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

// Загружает платежи в базу
//
// Параметры:
//    ПараметрыЗагрузки - Структура - Параметры выгрузки платежей.
//    АдресХранилища - Строка - Адрес, по которому буде помещена таблица с загруженными документами
//
Процедура Загрузить(ПараметрыЗагрузки, АдресХранилища) Экспорт
	
	//++ Локализация
	Если ПараметрыЗагрузки.ПрямойОбмен Тогда
		
		ЗамерПроизводительности = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Обработка.КлиентБанк.МодульМенеджера.Загрузить");
		ДанныеВыписки = РазобратьДеревоВыписки(ПараметрыЗагрузки.СтрокиВыписки);
		
	Иначе
		
		Если ПараметрыЗагрузки.ФайлПодтвержденияЗачисления Тогда
			
			ЗагрузитьПодтверждениеЗачисления(ПараметрыЗагрузки, АдресХранилища);
			Возврат;
			
		КонецЕсли;
		
	//-- Локализация
		Если ПараметрыЗагрузки.ФорматОбмена = Перечисления.ФорматОбменаСБанком.ClientBankExchange1c Тогда
			
			ЗамерПроизводительности = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Обработка.КлиентБанк.МодульМенеджера.Загрузить");
				ДанныеВыписки = ДенежныеСредстваКлиентСервер.РазобратьФайлВыписки1CClientBankExchange(
					ПараметрыЗагрузки.СтрокиВыписки);
			
		Иначе
			
			ЗамерПроизводительности = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Обработка.КлиентБанк.МодульМенеджера.Загрузить");
			ДанныеВыписки = Обработки.КлиентБанк.ПрочитатьДанныеВыпискиИзФайла(
				ПараметрыЗагрузки.СтрокиВыписки, ПараметрыЗагрузки.ФорматОбмена, ПараметрыЗагрузки.Кодировка);
			
		КонецЕсли;
	//++ Локализация
	КонецЕсли;
	//-- Локализация
	
	Если ДанныеВыписки <> Неопределено
		И (ДенежныеСредстваКлиентСервер.ЕстьСчетВФайлеВыписки(ПараметрыЗагрузки.БанковскийСчет, ДанныеВыписки)
		Или ПараметрыЗагрузки.ПрямойОбмен) Тогда
		
		БанковскийСчет = ПараметрыЗагрузки.БанковскийСчет;
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
		Валюта = РеквизитыСчета.Валюта;
		НомерСчета = СокрЛП(РеквизитыСчета.НомерСчета);
		
		РегистрыСведений.ПоследнийОбменСБанками.СоздатьЗапись(
			БанковскийСчет, Новый Структура("ДатаНачалаЗагрузки, ДатаКонцаЗагрузки",
				ПараметрыЗагрузки.ДатаНачалаЗагрузки, ПараметрыЗагрузки.ДатаКонцаЗагрузки));
				
		ЗаписатьОстаткиНаСчетахПоДаннымВыписки(
			БанковскийСчет, НомерСчета, ДанныеВыписки, ПараметрыЗагрузки.ДатаНачалаЗагрузки, ПараметрыЗагрузки.ДатаКонцаЗагрузки);
		
		ДокументыВыписки = ДанныеВыписки.ДокументыВыписки;
		ДокументыКЗагрузке = ПараметрыЗагрузки.ДокументыКЗагрузке;
		
		Если Не ДокументыВыписки.Количество() Тогда
			ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, 0);
			Возврат;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для каждого ДокументВыписки Из ДокументыВыписки Цикл
			
			ДанныеДокумента = НайтиРазбитыйПлатеж(ДокументыКЗагрузке, ДокументВыписки);
		
			Если ДанныеДокумента <> Неопределено Тогда
				
				ДанныеДокумента.ДанныеВыписки = СтрШаблон("%1
					|%2", ДанныеДокумента.ДанныеВыписки, ДокументВыписки.ДанныеВыписки);
				ДанныеДокумента.Сумма = СтрШаблон("%1 + %2", ДанныеДокумента.Сумма, ДокументВыписки.Сумма);
				Продолжить;
				
			КонецЕсли;
			
			ДокументКЗагрузке = ДокументыКЗагрузке.Добавить();
			ЗаполнитьЗначенияСвойств(ДокументКЗагрузке, ДокументВыписки);
			ДокументКЗагрузке.БанковскийСчет = БанковскийСчет;
			ДокументКЗагрузке.Валюта = Валюта;
			ДокументКЗагрузке.Загружать = Истина;
			ДокументКЗагрузке.СоздаватьКонтрагента = Истина;
			ДокументКЗагрузке.НомерСокр = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ДокументКЗагрузке.Номер);
			ДокументКЗагрузке["НомерСтроки"] = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ПодготовитьСтрокиВыписки(ДокументыКЗагрузке, БанковскийСчет, РеквизитыСчета, ПараметрыЗагрузки);
		ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, ПараметрыЗагрузки.СоздаватьКонтрагентов, ПараметрыЗагрузки.ПроводитьДокументы);
		СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, ПараметрыЗагрузки.СоздаватьКонтрагентов, ПараметрыЗагрузки.ПроводитьДокументы);
		СнятьПризнакПроведения(ДокументыКЗагрузке, БанковскийСчет, ДанныеВыписки.Заголовок);
		
		ДатыРасчета = Новый Массив;
		Для каждого ДокументКЗагрузке Из ДокументыКЗагрузке Цикл
			Если Не ДокументКЗагрузке.Исходящий И ДатыРасчета.Найти(ДокументКЗагрузке.ДатаДок) = Неопределено Тогда
				ДатыРасчета.Добавить(НачалоДня(ДокументКЗагрузке.ДатаДок));
			КонецЕсли;
		КонецЦикла;
		РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоОжидаемымПоступлениямДенежныхСредств(ДатыРасчета);
		
		Отбор = Новый Структура("Загружать", Истина);
		СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
		ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузке);
		
		ПоместитьВоВременноеХранилище(ТаблицаДокументов, АдресХранилища);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, ДокументыВыписки.Количество());
	Иначе
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, 1);
	КонецЕсли;
	
КонецПроцедуры

// Создает элемент справочника "Контрагенты"
//
// Параметры:
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание контрагента и связанных данных.
//
// Возвращаемое значение:
//    СправочникСсылка.Контрагенты - Ссылка на новый элемент справочника.
//
Функция СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтрокаДокумента.Исходящий Тогда
		
		ИмяКолонкиНаименованиеМеждународное = "ПОЛУЧАТЕЛЬНаименованиеМеждународное";
		ИмяКолонкиИНН    = "ПОЛУЧАТЕЛЬИНН";
		ИмяКолонкиКПП    = "ПОЛУЧАТЕЛЬКПП";
		ИмяКолонкиСтрана = "ПОЛУЧАТЕЛЬСтрана";
		
	Иначе
		
		ИмяКолонкиНаименованиеМеждународное = "ПЛАТЕЛЬЩИКНаименованиеМеждународное";
		ИмяКолонкиИНН = "ПЛАТЕЛЬЩИКИНН";
		ИмяКолонкиКПП = "ПЛАТЕЛЬЩИККПП";
		ИмяКолонкиСтрана = "ПЛАТЕЛЬЩИКСтрана";	
		
	КонецЕсли;
	
	СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
	
	ДанныеКонтрагента = РеквизитыЗаполненияКонтрагента();
	ДанныеПартнера = РеквизитыЗаполненияПартнера();
	
	ДанныеКонтрагента.Вставить("Наименование", СтруктураНаименования.СокращенноеНаименование);
	ДанныеКонтрагента.Вставить("НаименованиеПолное", СтрокаДокумента.ИмяКонтрагента);
	ДанныеКонтрагента.Вставить("НаименованиеМеждународное", СтрокаДокумента[ИмяКолонкиНаименованиеМеждународное]);
	ДанныеКонтрагента.Вставить("ИНН", ?(СтрокаДокумента[ИмяКолонкиИНН] = "000000000000" Или СтрокаДокумента[ИмяКолонкиИНН] = "0000000000",
										"",
										СтрокаДокумента[ИмяКолонкиИНН]));
	ДанныеКонтрагента.Вставить("КПП", СтрокаДокумента[ИмяКолонкиКПП]);
	ДанныеКонтрагента.Вставить("СтранаРегистрации", Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", СтрокаДокумента[ИмяКолонкиСтрана]));
	
	ОсновнаяСтрана = Константы.ОсновнаяСтрана.Получить();
	Если Не ЗначениеЗаполнено(ДанныеКонтрагента.СтранаРегистрации) Тогда
		ДанныеКонтрагента.Вставить("СтранаРегистрации", ОсновнаяСтрана);
	КонецЕсли;
	
	Если СтрДлина(ДанныеКонтрагента.ИНН) = 10 Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.СтранаРегистрации)
		И ДанныеКонтрагента.СтранаРегистрации <> ОсновнаяСтрана Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	Иначе
		
		Если СтрокаДокумента.ЭтоСБП
			И ДанныеКонтрагента.ИНН = "" Тогда
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
			ДанныеПартнера.Вставить("ЮрФизЛицо", Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		Иначе
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеПартнера, ДанныеКонтрагента, , "ЮрФизЛицо");
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Возврат СтрокаДокумента.Контрагент;
	КонецЕсли;
	
	Партнер = НайтиСоздатьПартнера(ДанныеПартнера);
	ДанныеКонтрагента.Вставить("Партнер", Партнер);
	
	Контрагент = НайтиСоздатьКонтрагента(ДанныеКонтрагента);
	
	СтрокаДокумента.Контрагент = Контрагент;
	СтрокаДокумента.Партнер = Партнер;
	
	// Нужно подставить нового контрагента и партнера в другие строки выписки
	Если Не ПустаяСтрока(ДанныеКонтрагента.ИНН) Тогда
		
		ПоляОтбора = "БанковскийСчет, ПОЛУЧАТЕЛЬИНН, Исходящий";
		СтруктураПоиска = Новый Структура(
			ПоляОтбора, СтрокаДокумента.БанковскийСчет, ДанныеКонтрагента.ИНН, Истина);
		ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, СтруктураПоиска);
		
		ПоляОтбора = "БанковскийСчет, ПЛАТЕЛЬЩИКИНН, Исходящий";
		СтруктураПоиска = Новый Структура(
			ПоляОтбора, СтрокаДокумента.БанковскийСчет, ДанныеКонтрагента.ИНН, Ложь);
		ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, СтруктураПоиска);
		
	Иначе
		
		ПоляОтбора = "БанковскийСчет, ИмяКонтрагента";
		СтруктураПоиска = Новый Структура(
			ПоляОтбора, СтрокаДокумента.БанковскийСчет, СтрокаДокумента.ИмяКонтрагента);
		ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, СтруктураПоиска);
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Создает элемент справочника "БанковскиеСчетаКонтрагентов"
//
// Параметры:
//    ДокументыКЗагрузке - ТаблицаЗначений - Таблица документов выписки
//    СтрокаДокумента - СтрокаТаблицыЗначений - Содержит описание счета и связанных данных
//    ВладелецСчета - СправочникСсылка.Контрагенты - Контрагент - владелец счета.
//
// Возвращаемое значение:
//    СправочникСсылка.БанковскиеСчетаКонтрагентов - Ссылка на новый элемент справочника.
//
Функция СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ВладелецСчета) Экспорт
	
	
	Если СтрокаДокумента.Исходящий Тогда
		
		ИмяКолонкиСчет              = "ПОЛУЧАТЕЛЬСЧЕТ";
		ИмяКолонкиПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ2";
		ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ3";
		ИмяКолонкиГородБанкаНеПрямыеРасчеты     = "ПОЛУЧАТЕЛЬ4";
		ИмяКолонкиБИК               = "ПОЛУЧАТЕЛЬБИК";
		ИмяКолонкиКорСчет           = "ПОЛУЧАТЕЛЬКОРСЧЕТ";
		ИмяКолонкиРасчСчет          = "ПОЛУЧАТЕЛЬРАСЧСЧЕТ";
		ИмяКолонкиКодСтраныБанка    = "ПОЛУЧАТЕЛЬБАНК5";
		ИмяКолонкиСВИФТ             = "ПОЛУЧАТЕЛЬСВИФТ";
		ИмяКолонкиНаименованиеБанка = "ПОЛУЧАТЕЛЬБАНК1";
		ИмяКолонкиГородБанка        = "ПОЛУЧАТЕЛЬБАНК2";
		
	Иначе
		
		ИмяКолонкиСчет              = "ПЛАТЕЛЬЩИКСЧЕТ";
		ИмяКолонкиПрямыеРасчеты     = "ПЛАТЕЛЬЩИК2";
		ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты     = "ПЛАТЕЛЬЩИК3";
		ИмяКолонкиГородБанкаНеПрямыеРасчеты     = "ПЛАТЕЛЬЩИК4";
		ИмяКолонкиБИК               = "ПЛАТЕЛЬЩИКБИК";
		ИмяКолонкиКорСчет           = "ПЛАТЕЛЬЩИККОРСЧЕТ";
		ИмяКолонкиРасчСчет          = "ПЛАТЕЛЬЩИКРАСЧСЧЕТ";
		ИмяКолонкиКодСтраныБанка    = "ПЛАТЕЛЬЩИКБАНК5";
		ИмяКолонкиСВИФТ             = "ПЛАТЕЛЬЩИКСВИФТ";
		ИмяКолонкиНаименованиеБанка = "ПЛАТЕЛЬЩИКБАНК1";
		ИмяКолонкиГородБанка        = "ПЛАТЕЛЬЩИКБАНК2";
		
	КонецЕсли;
	
	НомерСчета = СтрокаДокумента[ИмяКолонкиСчет];
	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСчета = РеквизитыБанковскогоСчета();
	
	ДанныеСчета.Вставить("Владелец",              ВладелецСчета);
	ДанныеСчета.Вставить("ВалютаДенежныхСредств", СтрокаДокумента.Валюта);
	ДанныеСчета.Вставить("НомерСчета",            НомерСчета);
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ИмяКолонкиПрямыеРасчеты]);
	ОсновнаяСтрана = Константы.ОсновнаяСтрана.Получить();
	Если ПрямыеРасчеты Тогда
		
		// Банк контрагента
		БикБанка       = СтрокаДокумента[ИмяКолонкиБИК];
		КоррСчетБанка  = СтрокаДокумента[ИмяКолонкиКорСчет];
		
		Банк = Неопределено;
		Если Не ПустаяСтрока(БикБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоКоду(БикБанка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Банк) И Не ПустаяСтрока(КоррСчетБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетБанка);
		КонецЕсли;
		
		КодСтраныБанка = СтрокаДокумента[ИмяКолонкиКодСтраныБанка];
		Если ЗначениеЗаполнено(КодСтраныБанка) Тогда
			СтранаБанка = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2", КодСтраныБанка);
			Если ЗначениеЗаполнено(СтранаБанка)
				//++ Локализация
				И СтранаБанка <> ОсновнаяСтрана
				//-- Локализация
				Тогда
				ДанныеСчета.Вставить("ИностранныйБанк", Истина);
			КонецЕсли;
			ДанныеСчета.Вставить("СтранаБанка", СтранаБанка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Банк) Тогда
			
			СтранаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Страна");
			
			Если СтранаБанка = ОсновнаяСтрана Тогда
				ДанныеСчета.Вставить("Банк", Банк);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСчета.Банк) Тогда
			ДанныеСчета.Вставить("РучноеИзменениеРеквизитовБанка", Истина);
			ДанныеСчета.Вставить("БИКБанка",          СтрокаДокумента[ИмяКолонкиБИК]);
			ДанныеСчета.Вставить("СВИФТБанка",        СтрокаДокумента[ИмяКолонкиСВИФТ]);
			ДанныеСчета.Вставить("НаименованиеБанка", СтрокаДокумента[ИмяКолонкиНаименованиеБанка]);
			ДанныеСчета.Вставить("ГородБанка",        СтрокаДокумента[ИмяКолонкиГородБанка]);
			ДанныеСчета.Вставить("КоррСчетБанка",     СтрокаДокумента[ИмяКолонкиКорСчет]);
		КонецЕсли;
		
	Иначе
		
		// Банк контрагента
		НаимБанка      = СтрокаДокумента[ИмяКолонкиНаименованиеБанкаНеПрямыеРасчеты];
		КоррСчетБанка  = СтрокаДокумента[ИмяКолонкиРасчСчет];
		
		Банк = Неопределено;
		Если Не ПустаяСтрока(НаимБанка) И Не ПустаяСтрока(КоррСчетБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетБанка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Банк) Тогда
			
			СтранаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Страна");
			
			Если СтранаБанка = ОсновнаяСтрана Тогда
				ДанныеСчета.Вставить("Банк", Банк);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСчета.Банк) Тогда
			ДанныеСчета.Вставить("РучноеИзменениеРеквизитовБанка", Истина);
			ДанныеСчета.Вставить("НаименованиеБанка", НаимБанка);
			ДанныеСчета.Вставить("ГородБанка",        СтрокаДокумента[ИмяКолонкиГородБанкаНеПрямыеРасчеты]);
			ДанныеСчета.Вставить("КоррСчетБанка",     КоррСчетБанка);
		КонецЕсли;
		
		// РЦ банка контрагента
		РЦБанка         = СтрокаДокумента[ИмяКолонкиНаименованиеБанка];
		БикРЦБанка      = СтрокаДокумента[ИмяКолонкиБИК];
		КоррСчетРЦБанка = СтрокаДокумента[ИмяКолонкиКорСчет];
		
		РЦБанк = Неопределено;
		Если Не ПустаяСтрока(РЦБанка) И Не ПустаяСтрока(БикРЦБанка) Тогда
			РЦБанк = Справочники.КлассификаторБанков.НайтиПоКоду(БикРЦБанка);
			Если Не ЗначениеЗаполнено(РЦБанк) Тогда
				РЦБанк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", КоррСчетРЦБанка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РЦБанк) Тогда
			
			СтранаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РЦБанк, "Страна");
			
			Если СтранаБанка = ОсновнаяСтрана Тогда
				ДанныеСчета.Вставить("БанкДляРасчетов", РЦБанк);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСчета.БанкДляРасчетов) Тогда
			ДанныеСчета.Вставить("РучноеИзменениеРеквизитовБанкаДляРасчетов", Истина);
			ДанныеСчета.Вставить("НаименованиеБанкаДляРасчетов", РЦБанка);
			ДанныеСчета.Вставить("ГородБанкаДляРасчетов",        СтрокаДокумента[ИмяКолонкиГородБанка]);
			ДанныеСчета.Вставить("БИКБанкаДляРасчетов",          БикРЦБанка);
			ДанныеСчета.Вставить("КоррСчетБанкаДляРасчетов",     КоррСчетРЦБанка);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСчета.РучноеИзменениеРеквизитовБанка Тогда
		СтрокаНаименования = Прав(СокрЛП(ДанныеСчета.НомерСчета), 4)
			+ ?(ЗначениеЗаполнено(ДанныеСчета.НаименованиеБанка), " в " + Строка(ДанныеСчета.НаименованиеБанка), "")
			+ " (" + Строка(ДанныеСчета.ВалютаДенежныхСредств) + ")";
	Иначе
		СтрокаНаименования = Прав(СокрЛП(ДанныеСчета.НомерСчета), 4) 
			+ ?(ЗначениеЗаполнено(ДанныеСчета.Банк), " в " + Строка(ДанныеСчета.Банк), "")
			+ " (" + Строка(ДанныеСчета.ВалютаДенежныхСредств) + ")";
	КонецЕсли;
	
	ДанныеСчета.Вставить("Наименование", Лев(СтрокаНаименования, 150));
	
	Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		Возврат СтрокаДокумента.СчетКонтрагента;
	КонецЕсли;
	
	Счет = НайтиСоздатьБанковскийСчетКонтрагента(ДанныеСчета);
	
	// Нужно подставить новый счет в другие строки выписки
	СтруктураПоиска = Новый Структура("ПОЛУЧАТЕЛЬСЧЕТ, Контрагент, БанковскийСчет",
		ДанныеСчета.НомерСчета, ВладелецСчета, СтрокаДокумента.БанковскийСчет);
	
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.СчетКонтрагента = Счет;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ПЛАТЕЛЬЩИКСЧЕТ, Контрагент, БанковскийСчет",
		ДанныеСчета.НомерСчета, ВладелецСчета, СтрокаДокумента.БанковскийСчет);
	
	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.СчетКонтрагента = Счет;
	КонецЦикла;
	
	Возврат Счет;
	
КонецФункции

// Заполняет значение поля из таблицы данных контрагента.
// 
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - данные, содержащие Наименование и КПП контрагента.
//  ТекущееЗначение - Строка - значение поля, которое следует заполнить.
//  Документ - ДокументСсылка - документ, по которому выполняется заполнение.
//  Признак - Число - признак, определяющий выбор реквизита из таблицы данных контрагента ТаблицаДанных: 0 - Наименование,
//                    1 - КПП.
//
Процедура ЗаполнитьЗначениеРеквизитаПоДокументу(ТаблицаДанных, ТекущееЗначение, Документ, Признак) Экспорт

	Отбор = Новый Структура("Документ, Признак", Документ, Признак);
	СписокДанных = ТаблицаДанных.НайтиСтроки(Отбор);
	ТекущееЗначение = ?(ТекущееЗначение <> "", ТекущееЗначение,
						?(СписокДанных.Количество() > 0, СписокДанных[0].ЗначениеРеквизита, ""));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаНастройкиСчетов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка                            КАК Ссылка,
	|	БанковскиеСчета.Владелец                          КАК Организация,
	|	БанковскиеСчета.Наименование                      КАК Наименование,
	|	БанковскиеСчета.НомерСчета                        КАК НомерСчета,
	//++ Локализация
	|	БанковскиеСчета.РазделЛицевогоСчета               КАК РазделЛицевогоСчета,
	|	БанковскиеСчета.НомерЛицевогоСчета                КАК НомерЛицевогоСчета,
	|
	|	БанковскиеСчета.ИспользоватьПрямойОбменСБанком    КАК ПрямойОбмен,
	//-- Локализация
	|	БанковскиеСчета.ИспользоватьОбменСБанком          КАК ОбменЧерезФайл,
	|	
	|	ВЫБОР
	//++ Локализация
	|		КОГДА БанковскиеСчета.ИспользоватьПрямойОбменСБанком ТОГДА
	|			ЕСТЬNULL(СоглашениеЭД.Ссылка, ЗНАЧЕНИЕ(Справочник.НастройкиОбменСБанками.ПустаяСсылка))
	//-- Локализация
	|		КОГДА БанковскиеСчета.ИспользоватьОбменСБанком ТОГДА
	|			ВЫБОР КОГДА &Загрузка ТОГДА
	|				БанковскиеСчета.ФайлЗагрузки
	|			ИНАЧЕ
	|				БанковскиеСчета.ФайлВыгрузки
	|			КОНЕЦ
	|	КОНЕЦ КАК НастройкаОбмена,
	|	ВЫРАЗИТЬ("""" КАК Строка(255)) КАК ПредставлениеНастройкиОбмена,
	|
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ИспользоватьОбменСБанком ТОГДА
	|			ВЫБОР КОГДА &Загрузка ТОГДА
	|				БанковскиеСчета.ФайлЗагрузки
	|			ИНАЧЕ
	|				БанковскиеСчета.ФайлВыгрузки
	|			КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ("""" КАК Строка(255))
	|	КОНЕЦ КАК ПравилоФайловогоОбменаСБанками,
		//++ Локализация
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ФорматОбмена = ЗНАЧЕНИЕ(Перечисление.ФорматОбменаСБанком.ПустаяСсылка) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФорматОбменаСБанком.ClientBankExchange1c)
	|		ИНАЧЕ
		//-- Локализация
	|			БанковскиеСчета.ФорматОбмена
		//++ Локализация
	|	КОНЕЦ
		//-- Локализация
	|		КАК ФорматОбмена,
	|	БанковскиеСчета.ВерсияФорматаВыгрузки             КАК ВерсияФорматаВыгрузки,
	|	БанковскиеСчета.Кодировка                         КАК Кодировка,
	|	БанковскиеСчета.Программа                         КАК Программа,
	|	
	|	0                                                 КАК КВыгрузке,
	|	
	|	ПоследнийОбменСБанками.ДатаВыгрузки               КАК ДатаПоследнейВыгрузки,
	|	ПоследнийОбменСБанками.ДатаНачалаЗагрузки         КАК ДатаНачалаПоследнейЗагрузки,
	|	ПоследнийОбменСБанками.ДатаКонцаЗагрузки          КАК ДатаКонцаПоследнейЗагрузки,
	|	НЕОПРЕДЕЛЕНО                                      КАК ДатаНачалаЗагрузки,
	|	НЕОПРЕДЕЛЕНО                                      КАК ДатаКонцаЗагрузки,
	|	ВЫРАЗИТЬ("""" КАК Строка(30))                     КАК ПоследняяВыписка,
	|	
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИКБанка,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк
	|	КОНЕЦ КАК Банк,
	//++ Локализация
	|	ЛОЖЬ                                              КАК ЕстьВозможностьПрямогоОбмена,
	//-- Локализация
	|	БанковскиеСчета.Закрыт                            КАК Закрыт,
	|	ВЫБОР
	|		КОГДА &Загрузка 
	|			ТОГДА БанковскиеСчета.ИспользоватьКаталогЗагрузки
	|		ИНАЧЕ БанковскиеСчета.ИспользоватьКаталогВыгрузки
	|	КОНЕЦ КАК ЗагружатьКаталог
	|	
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиОбменСБанками КАК СоглашениеЭД
	|	ПО
	|		БанковскиеСчета.ИспользоватьПрямойОбменСБанком
	|		И БанковскиеСчета.Владелец = СоглашениеЭД.Организация
	|		И БанковскиеСчета.Банк = СоглашениеЭД.Банк
	|		И НЕ СоглашениеЭД.Недействительна 
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПоследнийОбменСБанками КАК ПоследнийОбменСБанками
	|	ПО
	|		ПоследнийОбменСБанками.БанковскийСчет = БанковскиеСчета.Ссылка
	|	
	|ГДЕ
	|	БанковскиеСчета.ОбменСБанкомВключен
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И НЕ БанковскиеСчета.Закрыт
	|	
	|УПОРЯДОЧИТЬ ПО
	|	БанковскиеСчета.Наименование
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументыКВыгрузке()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БезналичныеДенежныеСредства.Регистратор КАК Ссылка
	|
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК БезналичныеДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.Ссылка = БезналичныеДенежныеСредства.Регистратор
	|	
	|ГДЕ
	|	БезналичныеДенежныеСредства.КСписанию <> 0
	|	И (БезналичныеДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		ИЛИ &ДатаКонца = ДАТАВРЕМЯ(1,1,1) И БезналичныеДенежныеСредства.Период >= &ДатаНачала)
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	//++ Локализация
	|		,ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже)
	//-- Локализация
	|	)
	|	И ДанныеДокумента.БанковскийСчет В(&МассивСчетов)
	|	И (ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1) ИЛИ НЕ &ТолькоНевыгруженные)
	|	
	|СГРУППИРОВАТЬ ПО
	|	БезналичныеДенежныеСредства.Регистратор
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БезналичныеДенежныеСредства.Регистратор КАК Ссылка
	|
	|ПОМЕСТИТЬ ПлатежныеТребования
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК БезналичныеДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.Ссылка = БезналичныеДенежныеСредства.Регистратор
	|	
	|ГДЕ
	|	БезналичныеДенежныеСредства.КЗачислению <> 0
	|	И (БезналичныеДенежныеСредства.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		ИЛИ &ДатаКонца = ДАТАВРЕМЯ(1,1,1) И БезналичныеДенежныеСредства.Период >= &ДатаНачала)
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|	И ДанныеДокумента.БанковскийСчет В(&МассивСчетов)
	|	И (ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1) ИЛИ НЕ &ТолькоНевыгруженные)
	|	
	|СГРУППИРОВАТЬ ПО
	|	БезналичныеДенежныеСредства.Регистратор
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса
		+ ТекстЗапросаПлатежныеПорученияТретьиЛица() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеПорученияВнутренние() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеПорученияПереводы() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеТребованияТретьиЛица() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаПлатежныеТребованияВнутренние() + "ОБЪЕДИНИТЬ ВСЕ"
		+ ТекстЗапросаКонвертацияВалюты()
		;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияТретьиЛица() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента             КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) <> """" ТОГДА
	|			ДанныеДокумента.ТекстПлательщика
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	|		ИНАЧЕ ДанныеДокумента.Организация.Наименование
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) <> """" ТОГДА
	|			ДанныеДокумента.ТекстПлательщика
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование международное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ОрганизацияИНН,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика <> """" ТОГДА
	|			ДанныеДокумента.КПППлательщика
	// КПП организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,
	
	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику) ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент
	|	КОНЕЦ КАК Контрагент,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.ЮрФизЛицо
	|	КОНЕЦ КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику) ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК Строка(255)) = """" ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|				И ТИПЗНАЧЕНИЯ(БанковскиеСчетаКонтрагентов.Владелец) = ТИП(Справочник.ФизическиеЛица)
	|			ТОГДА
	|				ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|				ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.Владелец КАК Справочник.Контрагенты).НаименованиеПолное
	// Наименование полное контрагента
	|			ИНАЧЕ """"
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|			И ТИПЗНАЧЕНИЯ(БанковскиеСчетаКонтрагентов.Владелец) = ТИП(Справочник.ФизическиеЛица) 
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|			ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.Владелец КАК Справочник.Контрагенты).НаименованиеМеждународное
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.НаименованиеМеждународное
	|	КОНЕЦ КАК КонтрагентНаименованиеМеждународное,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику) ТОГДА
	|					ДанныеДокумента.ПодотчетноеЛицо.ИНН
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)) ТОГДА
	|					БанковскиеСчетаКонтрагентов.Владелец.ИНН
	|				ИНАЧЕ
	|					ДанныеДокумента.Контрагент.ИНН
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК КонтрагентИНН,
	// КПП контрагента
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КППКорреспондента, """") КАК КонтрагентКПП,
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,

	//++ Локализация

	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	//++ Локализация
	|	, БанковскийСчетОрганизации.НомерЛицевогоСчета КАК ЛицевойСчет
	//-- Локализация
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО
	|		ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО
	|		ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО
	|		КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО
	|		КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.Контрагент
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО
	|		БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО
	|		БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетКонтрагента
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	//++ НЕ УТ
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.ПодотчетноеЛицо.Наименование", "ДанныеДокумента.ПодотчетноеЛицо.ФИО");
	//-- НЕ УТ
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияВнутренние() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель              КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) <> """" ТОГДА
	|			ДанныеДокумента.ТекстПлательщика
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	|		ИНАЧЕ ДанныеДокумента.Организация.Наименование
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) <> """" ТОГДА
	|			ДанныеДокумента.ТекстПлательщика
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование международное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ОрганизацияИНН,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика <> """" ТОГДА
	|			ДанныеДокумента.КПППлательщика
	// КПП организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,

	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	// Наименование международное организации
	|	"""" КАК КонтрагентНаименованиеМеждународное,
	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	// КПП организации
	|	"""" КАК КонтрагентКПП,
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,

	//++ Локализация

	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	//++ Локализация
	|	, БанковскийСчетОрганизации.НомерЛицевогоСчета КАК ЛицевойСчет
	//-- Локализация
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель.Владелец
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеПорученияПереводы() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель              КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты) ТОГДА
	|			ДанныеДокумента.СуммаКонвертации
	|		ИНАЧЕ
	|			ДанныеДокумента.СуммаДокумента
	|	КОНЕЦ КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	|		ИНАЧЕ ДанныеДокумента.Организация.Наименование
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование международное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ДанныеДокумента.Организация.ИНН КАК ОрганизацияИНН,
	// КПП организации
	|	"""" КАК ОрганизацияКПП,
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,

	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК Строка(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	// Наименование международное организации
	|	"""" КАК КонтрагентНаименованиеМеждународное,
	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	// КПП организации
	|	"""" КАК КонтрагентКПП,
	|	КонтактнаяИнформацияОрганизации.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияОрганизации.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,

	//++ Локализация

	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	//++ Локализация
	|	, БанковскийСчетОрганизации.НомерЛицевогоСчета КАК ЛицевойСчет
	//-- Локализация
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|	)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеТребованияТретьиЛица() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента             КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	""""                                                  КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО                                          КАК ТипКомиссииЗаПеревод,
	|	""""                                                  КАК ТипКомиссииЗаПереводНаименование,
	|	""""                                                  КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) = """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	|		ИНАЧЕ ДанныеДокумента.Организация.Наименование
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование международное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ДанныеДокумента.Организация.ИНН КАК ОрганизацияИНН,
	// КПП организации
	|	"""" КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	|	
	|	&ДанныеБанковскогоСчетаОрганизации,
	
	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент
	|	КОНЕЦ КАК Контрагент,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.ЮрФизЛицо
	|	КОНЕЦ КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК Строка(255)) = """" ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|			ТОГДА
	|				ДанныеДокумента.ПодотчетноеЛицо.Наименование
	// Наименование полное контрагента
	|			ИНАЧЕ """"
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|		ТОГДА
	|			ДанныеДокумента.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			ДанныеДокумента.Контрагент.НаименованиеМеждународное
	|	КОНЕЦ КАК КонтрагентНаименованиеМеждународное,
	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника))
	|				ТОГДА
	|					ДанныеДокумента.ПодотчетноеЛицо.ИНН
	|				ИНАЧЕ
	|					ДанныеДокумента.Контрагент.ИНН
	|			КОНЕЦ
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК КонтрагентИНН,
	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.КППКорреспондента <> """" ТОГДА
	|			БанковскиеСчетаКонтрагентов.КППКорреспондента
	// КПП контрагента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КонтрагентКПП,
	
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,

	//++ Локализация

	// Налоги
	|	ЛОЖЬ КАК ПеречислениеВБюджет,
	|	"""" КАК СтатусСоставителя,
	|	
	|	"""" КАК КодБК,
	|	"""" КАК КодОКАТО,
	|	"""" КАК ПоказательОснования,
	|	"""" КАК ПоказательПериода,
	|	"""" КАК ПоказательНомера,
	|	"""" КАК ПоказательДаты,
	|	"""" КАК ПоказательТипа,
	|	"""" КАК ОчередностьПлатежа,
	|	
	|	"""" КАК КодВидаДохода,
	|	"""" КАК КодВыплат,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	//++ Локализация
	|	, """" КАК ЛицевойСчет
	//-- Локализация
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеТребования КАК ПлатежныеТребования
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеТребования.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.Контрагент
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетКонтрагента
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	//++ НЕ УТ
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.ПодотчетноеЛицо.Наименование", "ДанныеДокумента.ПодотчетноеЛицо.ФИО");
	//-- НЕ УТ
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПлатежныеТребованияВнутренние() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетОтправитель             КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	""""                                                  КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО                                          КАК ТипКомиссииЗаПеревод,
	|	""""                                                  КАК ТипКомиссииЗаПереводНаименование,
	|	""""                                                  КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	|		ИНАЧЕ ДанныеДокумента.Организация.Наименование
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование международное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ДанныеДокумента.Организация.ИНН КАК ОрганизацияИНН,
	// КПП организации
	|	"""" КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,
	
	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,	
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	// Наименование международное организации
	|	"""" КАК КонтрагентНаименованиеМеждународное,

	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	// КПП организации
	|	"""" КАК КонтрагентКПП,
	
	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,

	//++ Локализация

	// Налоги
	|	ЛОЖЬ КАК ПеречислениеВБюджет,
	|	"""" КАК СтатусСоставителя,
	|	
	|	"""" КАК КодБК,
	|	"""" КАК КодОКАТО,
	|	"""" КАК ПоказательОснования,
	|	"""" КАК ПоказательПериода,
	|	"""" КАК ПоказательНомера,
	|	"""" КАК ПоказательДаты,
	|	"""" КАК ПоказательТипа,
	|	"""" КАК ОчередностьПлатежа,
	|	
	|	"""" КАК КодВидаДохода,
	|	"""" КАК КодВыплат,
	//-- Локализация
	|	
	|	"""" КАК НомерСчетаКомиссии,
	|	"""" КАК БИКСчетаКомиссии,
	|	"""" КАК НаименованиеБанкаСчетаКомиссии
	//++ Локализация
	|	, """" КАК ЛицевойСчет
	//-- Локализация
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеТребования КАК ПлатежныеТребования
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеТребования.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.БанковскийСчетОтправитель.Владелец
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетОтправитель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонвертацияВалюты() Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ДатаВыгрузки                          КАК ДатаВыгрузки,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Дата                                  КАК Дата,
	|	ДанныеДокумента.СуммаДокумента                        КАК Сумма,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.Наименование                   КАК ISOКодВалюты,
	|	ДанныеДокумента.Валюта.Код                            КАК КодВалюты,
	|	ДанныеДокумента.НазначениеПлатежа                     КАК НазначениеПлатежа,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК Операция,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                        КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетПолучатель              КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.ТипПлатежногоДокумента                КАК ВидДокумента,
	|	ДанныеДокумента.ВидПлатежа                            КАК ВидПлатежа,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.ИдентификаторПлатежа                  КАК Код,
	|	ДанныеДокумента.КодВалютнойОперации                   КАК КодВалютнойОперации,
	//++ Локализация
	|	ДанныеДокумента.КодВалютнойОперации.Код               КАК КодВидаВалютнойОперации,
	//-- Локализация
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Ответственный.ФизическоеЛицо          КАК ФизическоеЛицо,
	|	ДанныеДокумента.ТипКомиссииЗаПеревод                  КАК ТипКомиссииЗаПеревод,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипКомиссииЗаПеревод)   КАК ТипКомиссииЗаПереводНаименование,
	|	ДанныеДокумента.ИнформацияДляРегулирующихОрганов      КАК ИнформацияДляРегулирующихОрганов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
	|			ТОГДА ""01""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.Аккредитив)
	|			ТОГДА ""08""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение)
	|			ТОГДА ""06""
	|		КОГДА ДанныеДокумента.ТипПлатежногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеТребование)
	|			ТОГДА ""02""
	|		ИНАЧЕ ""00""
	|	КОНЕЦ КАК ВидОплаты,
	|	
	//++ Локализация
	|	ЕСТЬNULL(СостоянияЭД.СостояниеЭДО, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ПустаяСсылка)) КАК СостояниеЭД,
	//-- Локализация
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВыгрузки = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выгружать,
	|	
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств                КАК ВалютаСписания,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Наименование   КАК ВалютаСписанияИСОКод,
	|	БанковскийСчетОрганизации.ВалютаДенежныхСредств.Код            КАК ВалютаСписанияКод,
	|	ДанныеДокумента.СуммаДокумента                                 КАК ВалютаСписанияСумма,
	|	
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств              КАК ВалютаПеревода,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Наименование КАК ВалютаПереводаИСОКод,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код          КАК ВалютаПереводаКод,
	|	ДанныеДокумента.СуммаКонвертации                               КАК ВалютаПереводаСумма,
	
	// Организация и счет организации
	
	|	БанковскийСчетОрганизации.НомерСчета КАК ОрганизацияРасчСчет,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК ОрганизацияРасчСчетЭтоIBAN,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) <> """" ТОГДА
	|			ДанныеДокумента.ТекстПлательщика
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	|		ИНАЧЕ ДанныеДокумента.Организация.Наименование
	|	КОНЕЦ КАК ОрганизацияНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТекстПлательщика КАК СТРОКА(255)) <> """" ТОГДА
	|			ДанныеДокумента.ТекстПлательщика
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """" ТОГДА
	|			БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеСокращенное,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскийСчетОрганизации.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскийСчетОрганизации.ТекстКорреспондента
	// Наименование международное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияНаименованиеМеждународное,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ОрганизацияИНН,
	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика <> """" ТОГДА
	|			ДанныеДокумента.КПППлательщика
	// КПП организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОрганизацияКПП,
	
	|	КонтактнаяИнформацияОрганизации.Представление КАК ОрганизацияАдресМеждународный,
	|	КонтактнаяИнформацияОрганизации.ЗначенияПолей КАК ОрганизацияАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияОрганизации.Значение КАК ОрганизацияАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияОрганизации.Страна КАК ОрганизацияСтранаНаименование,
	|	КонтактнаяИнформацияОрганизации.Регион КАК ОрганизацияРегион,
	|	КонтактнаяИнформацияОрганизации.Город КАК ОрганизацияГород,
	
	|	&ДанныеБанковскогоСчетаОрганизации,

	// Контрагент и счет контрагента
	
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК КонтрагентРасчСчет,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК КонтрагентРасчСчетЭтоIBAN,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) КАК ЮрФизЛицо,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Владелец.Наименование
	|	КОНЕЦ КАК КонтрагентНаименование,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(БанковскиеСчетаКонтрагентов.ТекстКорреспондента КАК СТРОКА(255)) <> """"
	|			ТОГДА БанковскиеСчетаКонтрагентов.ТекстКорреспондента
	// Наименование сокращенное организации
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КонтрагентНаименованиеСокращенное,
	
	// Наименование международное организации
	|	"""" КАК КонтрагентНаименованиеМеждународное,

	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК КонтрагентИНН,
	// КПП организации
	|	"""" КАК КонтрагентКПП,

	|	КонтактнаяИнформацияКонтрагента.Представление КАК КонтрагентАдресМеждународный,
	|	КонтактнаяИнформацияКонтрагента.ЗначенияПолей КАК КонтрагентАдресМеждународныйЗначенияПолей,
	|	КонтактнаяИнформацияКонтрагента.Значение КАК КонтрагентАдресМеждународныйЗначение,
	|	КонтактнаяИнформацияКонтрагента.Страна КАК КонтрагентСтрана,
	|	КонтактнаяИнформацияКонтрагента.Регион КАК КонтрагентРегион,
	|	КонтактнаяИнформацияКонтрагента.Город КАК КонтрагентГород,
	
	|	&ДанныеБанковскогоСчетаКонтрагента,

	//++ Локализация

	// Налоги
	|	&ДанныеНалогов,
	//-- Локализация
	
	// Комиссия конвертации
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УсловиеСделкиКонвертации = 1 ТОГДА
	|			ДанныеДокумента.БанковскийСчетСписанияКомиссии.НомерСчета
	|		ИНАЧЕ
	|			БанковскийСчетОрганизации.НомерСчета
	|	КОНЕЦ КАК НомерСчетаКомиссии,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УсловиеСделкиКонвертации = 1 ТОГДА
	|			ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.РучноеИзменениеРеквизитовБанка ТОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.БИКБанка
	|			ИНАЧЕ ДанныеДокумента.БанковскийСчетСписанияКомиссии.Банк.Код КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.БИКБанка
	|			ИНАЧЕ БанковскийСчетОрганизации.Банк.Код КОНЕЦ
	|	КОНЕЦ КАК БИКСчетаКомиссии,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УсловиеСделкиКонвертации = 1 ТОГДА
	|			ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.РучноеИзменениеРеквизитовБанка ТОГДА ДанныеДокумента.БанковскийСчетСписанияКомиссии.НаименованиеБанка
	|			ИНАЧЕ ДанныеДокумента.БанковскийСчетСписанияКомиссии.Банк.Наименование КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.НаименованиеБанка
	|			ИНАЧЕ БанковскийСчетОрганизации.Банк.Наименование КОНЕЦ
	|	КОНЕЦ КАК НаименованиеБанкаСчетаКомиссии
	//++ Локализация
	|	, """" КАК ЛицевойСчет
	//-- Локализация
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПоручения КАК ПлатежныеПоручения
	|	ПО ДанныеДокумента.Ссылка = ПлатежныеПоручения.Ссылка
	|	
	//++ Локализация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|	ПО ДанныеДокумента.Ссылка = СостоянияЭД.СсылкаНаОбъект
	//-- Локализация
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияОрганизации
	|	ПО КонтактнаяИнформацияОрганизации.Ссылка = ДанныеДокумента.Организация
	|		И КонтактнаяИнформацияОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|	ПО КонтактнаяИнформацияКонтрагента.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель.Владелец
	|		И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетОрганизации
	|	ПО БанковскийСчетОрганизации.Ссылка = ДанныеДокумента.БанковскийСчет
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
	|	ПО БанковскиеСчетаКонтрагентов.Ссылка = ДанныеДокумента.БанковскийСчетПолучатель
	|	
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаОрганизации", ТекстДанныеБанковскогоСчетаОрганизации());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеБанковскогоСчетаКонтрагента", ТекстДанныеБанковскогоСчетаКонтрагента());
	//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеНалогов", ТекстДанныеНалогов());
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИнициализироватьПоляПлатежа()
	
	Поля = Новый Структура;
	Поля.Вставить("ОрганизацияНаим",                "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("КонтрагентНаим",                 "КонтрагентНаименованиеСокращенное");
	
	Поля.Вставить("КПППлательщика",                 "ОрганизацияКПП");

	Поля.Вставить("ОрганизацияГородРЦБанка",        "ОрганизацияГородБанкаДляРасчетов");
	Поля.Вставить("ОрганизацияБИКРЦБанка",          "ОрганизацияБИКБанкаДляРасчетов");
	Поля.Вставить("ОрганизацияКоррСчет",            "ОрганизацияКоррСчетБанка");
	Поля.Вставить("ОрганизацияКоррСчетРЦБанка",     "ОрганизацияКоррСчетБанкаДляРасчетов");
	
	Поля.Вставить("КПППолучателя",                  "КонтрагентКПП");

	Поля.Вставить("КонтрагентГородРЦБанка",         "КонтрагентГородБанкаДляРасчетов");
	Поля.Вставить("КонтрагентБИКРЦБанка",           "КонтрагентБИКБанкаДляРасчетов");
	Поля.Вставить("КонтрагентКоррСчет",             "КонтрагентКоррСчетБанка");
	Поля.Вставить("КонтрагентКоррСчетРЦБанка",      "КонтрагентКоррСчетБанкаДляРасчетов");
	
	Возврат Поля;
	
КонецФункции

Функция ТекстДанныеБанковскогоСчетаОрганизации()
	
	Возврат "
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.НаименованиеБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Наименование КОНЕЦ КАК ОрганизацияБанк,
	|	ЕСТЬNULL(БанковскийСчетОрганизации.Банк.БИКРКЦ.Наименование, """") КАК ОрганизацияБанкНаименованиеРКЦ,
	|	БанковскийСчетОрганизации.НаименованиеБанкаМеждународное КАК ОрганизацияБанкМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.ГородБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Город КОНЕЦ КАК ОрганизацияГородБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.ГородБанкаМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.ГородМеждународный КОНЕЦ КАК ОрганизацияГородБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.БИКБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Код КОНЕЦ КАК ОрганизацияБИКБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СВИФТБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.СВИФТБИК КОНЕЦ КАК ОрганизацияСВИФТБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.КоррСчетБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.КоррСчет КОНЕЦ КАК ОрганизацияКоррСчетБанка,
	|	БанковскийСчетОрганизации.СчетВБанкеДляРасчетов КАК ОрганизацияСчетВБанкеДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.АдресБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Адрес КОНЕЦ КАК ОрганизацияАдресБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.АдресБанкаМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.АдресМеждународный КОНЕЦ КАК ОрганизацияАдресБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СтранаБанка.Наименование
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Страна.Наименование КОНЕЦ КАК ОрганизацияСтранаБанка,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СтранаБанка.Код
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Страна.Код КОНЕЦ КАК ОрганизацияСтранаБанкаКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.СтранаБанка.КодАльфа2
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Страна.КодАльфа2 КОНЕЦ КАК ОрганизацияСтранаБанкаИСОКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка ТОГДА БанковскийСчетОрганизации.ТелефоныБанка
	|		ИНАЧЕ БанковскийСчетОрганизации.Банк.Телефоны КОНЕЦ КАК ОрганизацияТелефоныБанка,
	|	БанковскийСчетОрганизации.ЭтоIBAN КАК БанковскийСчетОрганизацииIBAN,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Наименование КОНЕЦ КАК ОрганизацияБанкДляРасчетов,
	|	ЕСТЬNULL(БанковскийСчетОрганизации.БанкДляРасчетов.БИКРКЦ.Наименование, """") КАК ОрганизацияБанкДляРасчетовНаименованиеРКЦ,
	|	БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетовМеждународное КАК ОрганизацияБанкДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.ГородБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Город КОНЕЦ КАК ОрганизацияГородБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.ГородМеждународный КОНЕЦ КАК ОрганизацияГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Код КОНЕЦ КАК ОрганизацияБИКБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.СВИФТБИК КОНЕЦ КАК ОрганизацияСВИФТБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.КоррСчет КОНЕЦ КАК ОрганизацияКоррСчетБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.АдресБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Адрес КОНЕЦ КАК ОрганизацияАдресБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.АдресМеждународный КОНЕЦ КАК ОрганизацияАдресБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СтранаБанкаДляРасчетов.Наименование
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Страна.Наименование КОНЕЦ КАК ОрганизацияСтранаБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СтранаБанкаДляРасчетов.Код
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Страна.Код КОНЕЦ КАК ОрганизацияСтранаБанкаДляРасчетовКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.СтранаБанкаДляРасчетов.КодАльфа2
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Страна.КодАльфа2 КОНЕЦ КАК ОрганизацияСтранаБанкаДляРасчетовИСОКод,
	|	ВЫБОР КОГДА БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскийСчетОрганизации.ТелефоныБанкаДляРасчетов
	|		ИНАЧЕ БанковскийСчетОрганизации.БанкДляРасчетов.Телефоны КОНЕЦ КАК ОрганизацияТелефоныБанкаДляРасчетов";
	
КонецФункции

Функция ТекстДанныеБанковскогоСчетаКонтрагента()
	
	Возврат "
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Наименование КОНЕЦ КАК КонтрагентБанк,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Банк.БИКРКЦ.Наименование, """") КАК КонтрагентБанкНаименованиеРКЦ,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанкаМеждународное КАК КонтрагентБанкМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.ГородБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Город КОНЕЦ КАК КонтрагентГородБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.ГородБанкаМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.ГородМеждународный КОНЕЦ КАК КонтрагентГородБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Код КОНЕЦ КАК КонтрагентБИКБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СВИФТБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.СВИФТБИК КОНЕЦ КАК КонтрагентСВИФТБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.КоррСчет КОНЕЦ КАК КонтрагентКоррСчетБанка,
	|	БанковскиеСчетаКонтрагентов.СчетВБанкеДляРасчетов КАК КонтрагентСчетВБанкеДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.АдресБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Адрес КОНЕЦ КАК КонтрагентАдресБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.АдресБанкаМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.АдресМеждународный КОНЕЦ КАК КонтрагентАдресБанкаМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанка.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Страна.Наименование КОНЕЦ КАК КонтрагентСтранаБанка,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанка.Код
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Страна.Код КОНЕЦ КАК КонтрагентСтранаБанкаКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанка.КодАльфа2
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Страна.КодАльфа2 КОНЕЦ КАК КонтрагентСтранаБанкаИСОКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА БанковскиеСчетаКонтрагентов.ТелефоныБанка
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Телефоны КОНЕЦ КАК КонтрагентТелефоныБанка,
	|	БанковскиеСчетаКонтрагентов.ЭтоIBAN КАК БанковскийСчетКонтрагентаIBAN,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Наименование КОНЕЦ КАК КонтрагентБанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.БанкДляРасчетов.БИКРКЦ.Наименование, """") КАК КонтрагентБанкДляРасчетовНаименованиеРКЦ,
	|	БанковскиеСчетаКонтрагентов.НаименованиеБанкаДляРасчетовМеждународное КАК КонтрагентБанкДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.ГородБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Город КОНЕЦ КАК КонтрагентГородБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.ГородМеждународный КОНЕЦ КАК КонтрагентГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Код КОНЕЦ КАК КонтрагентБИКБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.СВИФТБИК КОНЕЦ КАК КонтрагентСВИФТБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.КоррСчет КОНЕЦ КАК КонтрагентКоррСчетБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.АдресБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Адрес КОНЕЦ КАК КонтрагентАдресБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.АдресМеждународный КОНЕЦ КАК КонтрагентАдресБанкаДляРасчетовМеждународный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов.Наименование
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Страна.Наименование КОНЕЦ КАК КонтрагентСтранаБанкаДляРасчетов,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов.Код
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Страна.Код КОНЕЦ КАК КонтрагентСтранаБанкаДляРасчетовКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.СтранаБанкаДляРасчетов.КодАльфа2
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Страна.КодАльфа2 КОНЕЦ КАК КонтрагентСтранаБанкаДляРасчетовИСОКод,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА БанковскиеСчетаКонтрагентов.ТелефоныБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Телефоны КОНЕЦ КАК КонтрагентТелефоныБанкаДляРасчетов";
	
КонецФункции

//++ Локализация
Функция ТекстДанныеНалогов()
	
	Возврат "
	|	ДанныеДокумента.ПеречислениеВБюджет       КАК ПеречислениеВБюджет,
	|	ДанныеДокумента.СтатусСоставителя         КАК СтатусСоставителя,
	|	
	|	ДанныеДокумента.КодБК                     КАК КодБК,
	|	ДанныеДокумента.КодОКАТО                  КАК КодОКАТО,
	|	ДанныеДокумента.ПоказательОснования       КАК ПоказательОснования,
	|	ДанныеДокумента.ПоказательПериода         КАК ПоказательПериода,
	|	ДанныеДокумента.ПоказательНомера          КАК ПоказательНомера,
	|	ДанныеДокумента.ПоказательДаты            КАК ПоказательДаты,
	|	ДанныеДокумента.КодВыплат                 КАК ПоказательТипа,
	|	ДанныеДокумента.ОчередностьПлатежа        КАК ОчередностьПлатежа,
	|	
	|	ДанныеДокумента.КодВидаДохода             КАК КодВидаДохода,
	|	ДанныеДокумента.КодВыплат                 КАК КодВыплат
	|";
	
КонецФункции
//-- Локализация

#КонецОбласти

#Область Выгрузка

Процедура ВыгрузитьПлатежиВ1CClientBankExchange(ПараметрыВыгрузки, АдресХранилища)
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("Дата");
	НачПериода = ТаблицаДокументов[0].Дата;
	КонПериода = ТаблицаДокументов[КоличествоДокументов-1].Дата;
	
	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Если ТекущаяДатаСеанса >= '20200601' Тогда
		ВерсияФормата = "1.03";
	ИначеЕсли ТекущаяДатаСеанса>= '20140101' Тогда
		ВерсияФормата = "1.02";
	Иначе
		ВерсияФормата = "1.01";
	КонецЕсли;
	
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ВерсияФормата);
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.Кодировка), ПараметрыВыгрузки.Кодировка, "Windows"));
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель="    + СокрЛП(ПараметрыВыгрузки.Программа));
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм:сс"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(НачПериода, "ДФ=дд.ММ.гггг"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(КонПериода, "ДФ=дд.ММ.гггг"));
	
	Если ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ОчереднойБанковскийСчет Из БанковскиеСчетаВыгрузки Цикл 
			ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + ОчереднойБанковскийСчет.НомерСчета);
		КонецЦикла;
	Иначе
		ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскиеСчетаВыгрузки.НомерСчета);
	КонецЕсли;
	
	ВидыДокументов = Новый Соответствие;
	ВидыДокументов.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение, "Платежное поручение");
	ВидыДокументов.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование, "Платежное требование");
	
	Для каждого ВидДокумента Из ВидыДокументов Цикл
		Если ТаблицаДокументов.Найти(ВидДокумента.Ключ, "ВидДокумента") <> Неопределено Тогда
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ВидДокумента.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Выводим отмеченные секции документов
	Для каждого СтрокаСекции Из ТаблицаДокументов Цикл
		Буфер = СекцияДокумент(СтрокаСекции);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL.
	Если ПараметрыВыгрузки.Кодировка = "DOS" Тогда
		Кодировка = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодировка);
	
	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			СтрШаблон("%1 %2", НСтр("ru = 'Выгрузка платежей в банк.';
									|en = 'Export payments to the bank.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'Удаление временного файла';
					|en = 'Delete temporary file'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Функция СекцияДокумент(СтруктураДокумента)
	
	Буфер = "";
	
	Секция = СтруктураЭкспорта();
	ЗаполнитьЗначениеЭкспорта(Секция, СтруктураДокумента);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из Секция Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		Если Не ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=дд.ММ.гггг");
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		УжеЕстьФразаОшибкаВФайле = СтрНайти(Буфер, НСтр("ru = 'Ошибка в файле.';
														|en = 'File error.'")) > 0;
		Если УжеЕстьФразаОшибкаВФайле Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, НСтр("ru = 'Ошибка в файле.';
														|en = 'File error.'"), "");
		КонецЕсли;
		
		Шаблон = НСтр("ru = '%1%2%3';
						|en = '%1%2%3'");
		Буфер  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Буфер,
					?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
					НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Если ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		Плательщик = "Контрагент";
		Получатель = "Организация";
	Иначе
		Плательщик = "Организация";
		Получатель = "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДляЭкспорта.Номер, Истина, Истина);
	СтрокаЭкспорта.Дата           = Формат(ВыборкаДляЭкспорта.Дата, "ДФ=дд.ММ.гггг");
	СтрокаЭкспорта.Сумма          = Формат(ВыборкаДляЭкспорта.Сумма, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	СтрокаЭкспорта.ВидПлатежа     = ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика   = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя    = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	
	// ВидОплаты
	Если ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		СтрокаЭкспорта.ВидОплаты  = "01";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.Аккредитив Тогда
		СтрокаЭкспорта.ВидОплаты  = "08";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение Тогда
		СтрокаЭкспорта.ВидОплаты  = "06";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		СтрокаЭкспорта.ВидОплаты  = "02";
	Иначе
		СтрокаЭкспорта.ВидОплаты  = "00";
	КонецЕсли;
	
	// Код - идентификатор платежа
	СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.Код;
	
	// Плательщик1
	СтрокаЭкспорта.Плательщик1 = ВыборкаДляЭкспорта[Плательщик + "Наим"];
	
	// Плательщик, ПлательщикИНН
	Значение = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + ВыборкаДляЭкспорта[Плательщик + "ИНН"] + " " + СтрокаЭкспорта.Плательщик1;
	
	// ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4.
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2        = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.Плательщик3        = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4        = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик         = СтрокаЭкспорта.Плательщик
			+ " р/с " + СтрокаЭкспорта.Плательщик2
			+ " в " + СтрокаЭкспорта.Плательщик3
			+ " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
	КонецЕсли;
	
	// Получатель1
	ПолучательПозицияСимволВК = СтрНайти(ВыборкаДляЭкспорта[Получатель + "Наим"], Символы.ВК);
	Если ПолучательПозицияСимволВК = 0 Тогда
		СтрокаЭкспорта.Получатель1 = ВыборкаДляЭкспорта[Получатель + "Наим"];
	КонецЕсли;
	
	// Получатель, ПолучательИНН
	СтрокаЭкспорта.ПолучательИНН = ВыборкаДляЭкспорта[Получатель + "ИНН"];
	СтрокаЭкспорта.Получатель = "ИНН " + ВыборкаДляЭкспорта[Получатель + "ИНН"] + " " + СтрокаЭкспорта.Получатель1;
	
	// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4.
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2        = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.Получатель3        = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4        = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель         = СтрокаЭкспорта.Получатель
			+ " р/с " + СтрокаЭкспорта.Получатель2
			+ " в " + СтрокаЭкспорта.Получатель3
			+ " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
		Если ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетовНаименованиеРКЦ"]) Тогда
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетовНаименованиеРКЦ"]
				+ "//" + ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		Иначе
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		КонецЕсли;
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		Если ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкНаименованиеРКЦ"]) Тогда
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "БанкНаименованиеРКЦ"]
				+ "//" + ВыборкаДляЭкспорта[Получатель + "Банк"];
		Иначе
			СтрокаЭкспорта.ПолучательБанк1 = ВыборкаДляЭкспорта[Получатель + "Банк"];
		КонецЕсли;
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
	// СтатусСоставителя, ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО/ОКТМО ПоказательОснования ПоказательПериода
	// ПоказательНомера ПоказательДаты ПоказательТипа Код.
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.КодБК) Тогда
			СтрокаЭкспорта.ПоказательКБК = "0";
		Иначе
			СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.КодОКАТО) Тогда
			СтрокаЭкспорта.ОКАТО = "0";
		Иначе
			СтрокаЭкспорта.ОКАТО = СокрЛП(ВыборкаДляЭкспорта.КодОКАТО);
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = ВыборкаДляЭкспорта.ПоказательДаты;
		КонецЕсли;
	КонецЕсли;
	
	// Код выплат
	СтрокаЭкспорта.ПоказательТипа = "" + ВыборкаДляЭкспорта.КодВыплат;
	
	// Код вида дохода
	СтрокаЭкспорта.КодНазПлатежа = "" + ВыборкаДляЭкспорта.КодВидаДохода;
	
	// Очередность
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
	// НазначениеПлатежа, НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6.
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС + Символы.ВК, " ");
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(
		СтрЗаменить(СтрЗаменить(СтрокаЭкспорта.НазначениеПлатежа, Символы.ПС, " "), Символы.ВК, " "), Символы.ПФ, " ");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураЭкспорта()
	
	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить("Выгружать",              ""); // "_"
	СтруктураЭкспорта.Вставить("Готовность",             ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить("НомерДок",               ""); // "№ Документа"
	СтруктураЭкспорта.Вставить("Номер",                  ""); // "Номер"
	СтруктураЭкспорта.Вставить("Дата",                   ""); // "Дата"
	СтруктураЭкспорта.Вставить("Операция",               ""); // "Операция"
	СтруктураЭкспорта.Вставить("СчетОрганизации",        ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить("НомерСчетаОрганизации",  ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить("Сумма",                  ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить("Контрагент",             ""); // "Контрагент"
	СтруктураЭкспорта.Вставить("СчетКонтрагента",        ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить("НомерСчетаКонтрагента",  ""); // "Эл. Р/с контрагента"
	
	СтруктураЭкспорта.Вставить("КвитанцияДата",          ""); // "Дата форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияВремя",         ""); // "Время форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияСодержание",    ""); // "Содержание квитанции"
	
	СтруктураЭкспорта.Вставить("ПлательщикСчет",         ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик",             ""); // "Плательщик"
	СтруктураЭкспорта.Вставить("ПлательщикИНН",          ""); // "ИНН плательщика"
	СтруктураЭкспорта.Вставить("Плательщик1",            ""); // "Наименование плательщика"
	СтруктураЭкспорта.Вставить("Плательщик2",            ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик3",            ""); // "Банк плательщика"
	СтруктураЭкспорта.Вставить("Плательщик4",            ""); // "Город банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикРасчСчет",     ""); // "Корсчет банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк1",        ""); // "РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк2",        ""); // "Город РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБИК",          ""); // "БИК РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикКорсчет",      ""); // "Корсчет РЦ банка плат."
	
	СтруктураЭкспорта.Вставить("ПолучательСчет",         ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель",             ""); // "Получатель"
	СтруктураЭкспорта.Вставить("ПолучательИНН",          ""); // "ИНН получателя"
	СтруктураЭкспорта.Вставить("Получатель1",            ""); // "Наименование получателя"
	СтруктураЭкспорта.Вставить("Получатель2",            ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель3",            ""); // "Банк получателя"
	СтруктураЭкспорта.Вставить("Получатель4",            ""); // "Город банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательРасчСчет",     ""); // "Корсчет банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк1",        ""); // "РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк2",        ""); // "Город РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБИК",          ""); // "БИК РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательКорсчет",      ""); // "Корсчет РЦ банка пол."
	
	СтруктураЭкспорта.Вставить("ВидПлатежа",             ""); // "Вид платежа"
	СтруктураЭкспорта.Вставить("КодНазПлатежа",          ""); // "Код вида дохода"
	СтруктураЭкспорта.Вставить("ВидОплаты",              ""); // "Вид оплаты"
	СтруктураЭкспорта.Вставить("ПеречислениеВБюджет",    ""); // "Перечисление в бюджет",
	СтруктураЭкспорта.Вставить("ВидПеречисленияВБюджет", ""); // "Вид перечисления в бюджет",
	
	СтруктураЭкспорта.Вставить("СтатусСоставителя",      ""); // "Статус составителя"
	СтруктураЭкспорта.Вставить("ПлательщикКПП",          ""); // "КПП плательщика"
	СтруктураЭкспорта.Вставить("ПолучательКПП",          ""); // "КПП получателя"
	СтруктураЭкспорта.Вставить("ПоказательКБК",          ""); // "Показатель КБК"
	СтруктураЭкспорта.Вставить("ОКАТО",                  ""); // "ОКАТО/ОКТМО"
	СтруктураЭкспорта.Вставить("ПоказательОснования",    ""); // "Показатель основания"
	СтруктураЭкспорта.Вставить("ПоказательПериода",      ""); // "Показатель периода"
	СтруктураЭкспорта.Вставить("ПоказательНомера",       ""); // "Показатель номера документа"
	СтруктураЭкспорта.Вставить("ПоказательДаты",         ""); // "Показатель даты документа"
	СтруктураЭкспорта.Вставить("ПоказательТипа",         ""); // "Показатель типа платежа"
	
	СтруктураЭкспорта.Вставить("СрокПлатежа",            ""); // "Срок действия аккредитива"
	СтруктураЭкспорта.Вставить("Очередность",            ""); // "Очередность платежа"
	
	СтруктураЭкспорта.Вставить("НазначениеПлатежа",      ""); // "Назначение платежа"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа1",     ""); // "Назначение платежа, стр. 1"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа2",     ""); // "Назначение платежа, стр. 2"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа3",     ""); // "Назначение платежа, стр. 3"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа4",     ""); // "Назначение платежа, стр. 4"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа5",     ""); // "Назначение платежа, стр. 5"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа6",     ""); // "Назначение платежа, стр. 6"
	
	СтруктураЭкспорта.Вставить("СрокАкцепта",            ""); // "Срок акцепта"
	СтруктураЭкспорта.Вставить("ВидАккредитива",         ""); // "Вид аккредитива"
	СтруктураЭкспорта.Вставить("УсловиеОплаты1",         ""); // "Условие оплаты, стр. 1"
	СтруктураЭкспорта.Вставить("УсловиеОплаты2",         ""); // "Условие оплаты, стр. 2"
	СтруктураЭкспорта.Вставить("УсловиеОплаты3",         ""); // "Условие оплаты, стр. 3"
	СтруктураЭкспорта.Вставить("ПлатежПоПредст",         ""); // "Платеж по представлению"
	СтруктураЭкспорта.Вставить("ДополнУсловия",          ""); // "Дополнительные условия"
	СтруктураЭкспорта.Вставить("НомерСчетаПоставщика",   ""); // "№ счета поставщика"
	СтруктураЭкспорта.Вставить("ДатаОтсылкиДок",         ""); // "Дата отсылки документов"
	
	СтруктураЭкспорта.Вставить("Документ",               ""); // "Источник"
	СтруктураЭкспорта.Вставить("СекцияДокумент",         ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить("ОписаниеОшибок",         ""); // "Замечания"
	СтруктураЭкспорта.Вставить("ТипДокумента",           ""); // "Тип пл. документа"
	
	СтруктураЭкспорта.Вставить("Код",                    ""); // "Уникальный идентификатор платежа"
	
	Возврат СтруктураЭкспорта;
	
КонецФункции

Процедура ВыгрузитьПлатежиВISO20022(ПараметрыВыгрузки, АдресХранилища)
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("Дата");
	ТекстОшибки = "";
	
	НазванияТипов = НазванияТиповISO20022(ПараметрыВыгрузки.ВерсияФорматаВыгрузки);
	Фабрика = ДенежныеСредстваПовтИсп.ФабрикаISO20022(ПараметрыВыгрузки.ВерсияФорматаВыгрузки);
	ПространствоИмен = "urn:iso:std:iso:20022:tech:xsd:" + ПараметрыВыгрузки.ВерсияФорматаВыгрузки;

	СообщениеPain001 = ОбъектТипаCML(Фабрика, "Document", ПространствоИмен);
	СообщениеЗаголовок = ОбъектТипаCML(Фабрика, НазванияТипов.CustomerCreditTransferInitiation, ПространствоИмен);
	СекцияЗаголовокГруппы = ОбъектТипаCML(Фабрика, НазванияТипов.GroupHeader, ПространствоИмен);
	ИдДокумента = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "MsgId", ИдДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "CreDtTm", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
	КоличествоДокументов = Строка(ТаблицаДокументов.Количество());
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "NbOfTxs", КоличествоДокументов, Истина, ТекстОшибки);
	ОбщаяСумма = ТаблицаДокументов.Итог("Сумма");
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "CtrlSum", ОбщаяСумма, Истина, ТекстОшибки);
	ИдентификацияИнициатора = ОбъектТипаCML(Фабрика, НазванияТипов.PartyIdentification, ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокГруппы, "InitgPty", ИдентификацияИнициатора, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СообщениеЗаголовок, "GrpHdr", СекцияЗаголовокГруппы, Истина, ТекстОшибки);
	Для Каждого Документ Из ТаблицаДокументов Цикл
		ВыгрузитьДокументВISO20022(Фабрика, НазванияТипов, ПространствоИмен, СообщениеЗаголовок, Документ, ТекстОшибки);
	КонецЦикла;
	
	ЗаполнитьСвойствоXDTO(СообщениеPain001, "CstmrCdtTrfInitn", СообщениеЗаголовок, Истина, ТекстОшибки);

	СообщениеPain001.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
		
	ДвоичныеДанные = ДвоичныеДанныеИзXDTO(Фабрика, СообщениеPain001);
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
	
КонецПроцедуры

Функция НазванияТиповISO20022(ВерсияФорматаВыгрузки)
	
	ВозвращаемоеЗначение = Новый Структура;
	Если ВерсияФорматаВыгрузки = "pain.001.001.03" Тогда
		ВозвращаемоеЗначение.Вставить("CustomerCreditTransferInitiation", "CustomerCreditTransferInitiationV03");
		ВозвращаемоеЗначение.Вставить("GroupHeader", "GroupHeader32");
		ВозвращаемоеЗначение.Вставить("PartyIdentification", "PartyIdentification32");
		ВозвращаемоеЗначение.Вставить("PaymentInstruction", "PaymentInstructionInformation3");
		ВозвращаемоеЗначение.Вставить("Party", "Party6Choice");
		ВозвращаемоеЗначение.Вставить("OrganisationIdentification", "OrganisationIdentification4");
		ВозвращаемоеЗначение.Вставить("CashAccount", "CashAccount16");
		ВозвращаемоеЗначение.Вставить("BranchAndFinancialInstitutionIdentification", "BranchAndFinancialInstitutionIdentification4");
		ВозвращаемоеЗначение.Вставить("FinancialInstitutionIdentification", "FinancialInstitutionIdentification7");
		ВозвращаемоеЗначение.Вставить("BIC", "BIC");
		ВозвращаемоеЗначение.Вставить("CreditTransferTransaction", "CreditTransferTransactionInformation10");
		ВозвращаемоеЗначение.Вставить("RemittanceInformation", "RemittanceInformation5");
	ИначеЕсли ВерсияФорматаВыгрузки = "pain.001.001.04" Тогда
		ВозвращаемоеЗначение.Вставить("CustomerCreditTransferInitiation", "CustomerCreditTransferInitiationV04");
		ВозвращаемоеЗначение.Вставить("GroupHeader", "GroupHeader48");
		ВозвращаемоеЗначение.Вставить("PartyIdentification", "PartyIdentification43");
		ВозвращаемоеЗначение.Вставить("PaymentInstruction", "PaymentInstruction6");
		ВозвращаемоеЗначение.Вставить("Party", "Party11Choice");
		ВозвращаемоеЗначение.Вставить("OrganisationIdentification", "OrganisationIdentification8");
		ВозвращаемоеЗначение.Вставить("CashAccount", "CashAccount24");
		ВозвращаемоеЗначение.Вставить("BranchAndFinancialInstitutionIdentification", "BranchAndFinancialInstitutionIdentification5");
		ВозвращаемоеЗначение.Вставить("FinancialInstitutionIdentification", "FinancialInstitutionIdentification8");
		ВозвращаемоеЗначение.Вставить("BIC", "BICFI");
		ВозвращаемоеЗначение.Вставить("CreditTransferTransaction", "CreditTransferTransaction1");
		ВозвращаемоеЗначение.Вставить("RemittanceInformation", "RemittanceInformation7");
	ИначеЕсли ВерсияФорматаВыгрузки = "pain.001.001.05" Тогда
		ВозвращаемоеЗначение.Вставить("CustomerCreditTransferInitiation", "CustomerCreditTransferInitiationV05");
		ВозвращаемоеЗначение.Вставить("GroupHeader", "GroupHeader48");
		ВозвращаемоеЗначение.Вставить("PartyIdentification", "PartyIdentification43");
		ВозвращаемоеЗначение.Вставить("PaymentInstruction", "PaymentInstruction9");
		ВозвращаемоеЗначение.Вставить("Party", "Party11Choice");
		ВозвращаемоеЗначение.Вставить("OrganisationIdentification", "OrganisationIdentification8");
		ВозвращаемоеЗначение.Вставить("CashAccount", "CashAccount24");
		ВозвращаемоеЗначение.Вставить("BranchAndFinancialInstitutionIdentification", "BranchAndFinancialInstitutionIdentification5");
		ВозвращаемоеЗначение.Вставить("FinancialInstitutionIdentification", "FinancialInstitutionIdentification8");
		ВозвращаемоеЗначение.Вставить("BIC", "BICFI");
		ВозвращаемоеЗначение.Вставить("CreditTransferTransaction", "CreditTransferTransaction6");
		ВозвращаемоеЗначение.Вставить("RemittanceInformation", "RemittanceInformation7");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неподдерживаемая версия формата выгрузки';
								|en = 'Unsupported export format version'")
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ВыгрузитьДокументВISO20022(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СообщениеЗаголовок,
	Документ,
	ТекстОшибки)
	
	ИдентификаторОперации = СтрЗаменить(Строка(Документ.Ссылка.УникальныйИдентификатор()), "-", "");
	СекцияЗаголовокПлатежа = ОбъектТипаCML(Фабрика, НазванияТипов.PaymentInstruction, ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "PmtInfId", ИдентификаторОперации, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "PmtMtd", "TRF", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "NbOfTxs", "1", Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "CtrlSum", Документ.Сумма, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "ReqdExctnDt", Документ.Дата, Истина, ТекстОшибки);
	
	СекцияТранзакция = ОбъектТипаCML(Фабрика, НазванияТипов.CreditTransferTransaction, ПространствоИмен);
	ВыгрузитьДебитораВISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияЗаголовокПлатежа, Документ, ТекстОшибки);
	ВыгрузитьИнформациюОКомиссииВISO20022(СекцияЗаголовокПлатежа, Документ, ТекстОшибки);
	ВыгрузитьИдентификаторыДокумента(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);

	СекцияСумма = ОбъектТипаCML(Фабрика, "AmountType3Choice", ПространствоИмен);
	СекцияСуммаЗначение = ОбъектТипаCML(Фабрика, "ActiveOrHistoricCurrencyAndAmount", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияСуммаЗначение, "__content", Документ.Сумма, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияСуммаЗначение, "Ccy", Документ.ISOКодВалюты, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияСумма, "InstdAmt", СекцияСуммаЗначение, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Amt", СекцияСумма, Истина, ТекстОшибки);
	
	ВыгрузитьКредитораISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	Если ЗначениеЗаполнено(Документ.ОчередностьПлатежа) Тогда
		СекцияОчередность = ОбъектТипаCML(Фабрика, "Purpose2Choice", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияОчередность, "Cd", Строка(Документ.ОчередностьПлатежа), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Purp", СекцияОчередность, , ТекстОшибки);
	КонецЕсли;
	
	ВыгрузитьКодДокументаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	ВыгрузитьКодВидаДоходаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	ВыгрузитьНалоговыеРеквизитыISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	
	СекцияИнформацияОПлатеже = ОбъектТипаCML(Фабрика, НазванияТипов.RemittanceInformation, ПространствоИмен);
	МассивСтрокНазначенияПлатежа = МассивСтрокНазначенияПлатежаДляISO(Документ.НазначениеПлатежа);
	Для Каждого Строка Из МассивСтрокНазначенияПлатежа Цикл
		Если НЕ ПустаяСтрока(Строка) Тогда
			СекцияИнформацияОПлатеже.Ustrd.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "RmtInf", СекцияИнформацияОПлатеже, , ТекстОшибки);
	
	СекцияЗаголовокПлатежа.CdtTrfTxInf.Добавить(СекцияТранзакция);
	СообщениеЗаголовок.PmtInf.Добавить(СекцияЗаголовокПлатежа);
	
КонецПроцедуры

Процедура ВыгрузитьИдентификаторыДокумента(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СекцияТранзакция,
	Документ,
	ТекстОшибки)

	СекцияИДПлатежа = ОбъектТипаCML(Фабрика, "PaymentIdentification1", ПространствоИмен);
	ИдентификаторДокумента = СтрЗаменить(Строка(Документ.Ссылка.УникальныйИдентификатор()), "-", "");
	ЗаполнитьСвойствоXDTO(СекцияИДПлатежа, "InstrId", ИдентификаторДокумента, Истина, ТекстОшибки);
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер, Истина, Истина);
	ЗаполнитьСвойствоXDTO(СекцияИДПлатежа, "EndToEndId", НомерДокумента, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "PmtId", СекцияИДПлатежа, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура ВыгрузитьКодДокументаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	Если ЗначениеЗаполнено(Документ.Код) Тогда
		СекцияРегулятора = ОбъектТипаCML(Фабрика, "RegulatoryReporting3", ПространствоИмен);
		СекцияДеталиРегулятора = ОбъектТипаCML(Фабрика, "StructuredRegulatoryReporting3", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияДеталиРегулятора, "Cd", Документ.Код, , ТекстОшибки);
		СекцияРегулятора.Dtls.Добавить(СекцияДеталиРегулятора);
		СекцияТранзакция.RgltryRptg.Добавить(СекцияРегулятора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьНалоговыеРеквизитыISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	Если Документ.ПеречислениеВБюджет Тогда
		СекцияНалог = ОбъектТипаCML(Фабрика, "TaxInformation3", ПространствоИмен);
		КПППолучателя = ?(ЗначениеЗаполнено(Документ.КПППолучателя), Документ.КПППолучателя, "0");
		СекцияКредитор = ОбъектТипаCML(Фабрика, "TaxParty1", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияКредитор, "TaxTp", КПППолучателя, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "Cdtr", СекцияКредитор, , ТекстОшибки);
		КПППлательщика = ?(ЗначениеЗаполнено(Документ.КПППлательщика), Документ.КПППлательщика, "0");
		СекцияДебитор = ОбъектТипаCML(Фабрика, "TaxParty2", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияДебитор, "TaxTp", КПППлательщика, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "Dbtr", СекцияДебитор, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "AdmstnZn", Документ.КодОКАТО, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияНалог, "RefNb", Документ.ПоказательНомера, , ТекстОшибки);
		Если ЗначениеЗаполнено(Документ.ПоказательДаты) И Документ.ПоказательДаты <> "0" Тогда
			ЗаполнитьСвойствоXDTO(СекцияНалог, "Dt", ДатаИзСтрокиРФ(Документ.ПоказательДаты), , ТекстОшибки);
		КонецЕсли;
		ВыгрузитьРасшифровкуНалогаISO20022(СекцияНалог, Документ, Фабрика, ПространствоИмен, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Tax", СекцияНалог, , ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьРасшифровкуНалогаISO20022(СекцияНалог, Документ, Фабрика, ПространствоИмен, ТекстОшибки)
	
	СекцияРасшифровкаНалога = ОбъектТипаCML(Фабрика, "TaxRecord1", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "Tp", Документ.КодВыплат, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "Ctgy", Документ.ПоказательОснования, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "DbtrSts", Документ.СтатусСоставителя, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "CtgyDtls", Документ.КодБК, , ТекстОшибки);

	Если ЗначениеЗаполнено(Документ.ПоказательПериода) Тогда
		Если СтрНайти(Документ.ПоказательПериода, ".") > 0 Тогда
			СекцияПериод = ОбъектТипаCML(Фабрика, "TaxPeriod1", ПространствоИмен);
			Год = Число(Сред(Документ.ПоказательПериода, 7));
			НачалоГода = Дата(Год, 1, 1);
			ЗаполнитьСвойствоXDTO(СекцияПериод, "Yr", НачалоГода, , ТекстОшибки);
			Период = Сред(Документ.ПоказательПериода, 1, 2);
			Если Период = "МС" Тогда
				Месяц = Сред(Документ.ПоказательПериода, 4, 2);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "Tp", "MM" + Месяц, , ТекстОшибки);
			ИначеЕсли Период = "КВ" Тогда
				Квартал = Сред(Документ.ПоказательПериода, 5, 1);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "Tp", "QTR" + Квартал, , ТекстОшибки);
			ИначеЕсли Период = "ПЛ" Тогда
				Полугодие = Сред(Документ.ПоказательПериода, 5, 1);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "Tp", "HLF" + Полугодие, , ТекстОшибки);
			ИначеЕсли Период = "ГД" Тогда
				// при годовом не указывается
			Иначе // указана точная дата
				СекцияДата = ОбъектТипаCML(Фабрика, "DatePeriodDetails", ПространствоИмен);
				Дата = ДатаИзСтрокиРФ(Документ.ПоказательПериода);
				ЗаполнитьСвойствоXDTO(СекцияДата, "FrDt", Дата, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияДата, "ToDt", Дата, , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СекцияПериод, "FrToDt", СекцияДата, , ТекстОшибки);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(СекцияРасшифровкаНалога, "Prd", СекцияПериод, , ТекстОшибки);
		ИначеЕсли Документ.ПоказательПериода <> "0" Тогда // для таможенных платежей
			СекцияПолучатель = ОбъектТипаCML(Фабрика, "TaxParty1", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(СекцияПолучатель, "RegnId", Документ.ПоказательПериода, , ТекстОшибки);
			ЗаполнитьСвойствоXDTO(СекцияНалог, "Cdtr", СекцияПолучатель, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	СекцияНалог.Rcrd.Добавить(СекцияРасшифровкаНалога);
		
КонецПроцедуры

Функция ДатаИзСтрокиРФ(ДатаСтрокой)
	
	Возврат Дата(Число(Сред(ДатаСтрокой, 7)), Число(Сред(ДатаСтрокой, 4, 2)), Число(Сред(ДатаСтрокой, 1, 2)));
	
КонецФункции

Процедура ВыгрузитьКодВидаДоходаISO20022(Фабрика, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	Если ЗначениеЗаполнено(Документ.КодВидаДохода) Тогда
		СекцияКодаВидаДохода = ОбъектТипаCML(Фабрика, "RegulatoryReporting3", ПространствоИмен);
		СекцияДетали = ОбъектТипаCML(Фабрика, "StructuredRegulatoryReporting3", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияДетали, "Dt", "PTCD", , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияДетали, "Cd", Документ.КодВидаДохода, , ТекстОшибки);
		СекцияКодаВидаДохода.Dtls.Добавить(СекцияДетали);
		СекцияТранзакция.RgltryRptg.Добавить(СекцияКодаВидаДохода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОКомиссииВISO20022(СекцияЗаголовокПлатежа, Документ, ТекстОшибки)
	
	ТипКомиссии = Неопределено;
	Если ЗначениеЗаполнено(Документ.ТипКомиссииЗаПеревод) Тогда
		Если Документ.ТипКомиссииЗаПеревод = Перечисления.ТипыКомиссииЗаБанковскиеПереводы.BEN Тогда
			ТипКомиссии = "CRED";
		ИначеЕсли Документ.ТипКомиссииЗаПеревод = Перечисления.ТипыКомиссииЗаБанковскиеПереводы.OUR Тогда
			ТипКомиссии = "DEBT";
		ИначеЕсли Документ.ТипКомиссииЗаПеревод = Перечисления.ТипыКомиссииЗаБанковскиеПереводы.SHA Тогда
			ТипКомиссии = "SHAR";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипКомиссии) Тогда
			ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "ChrgBr", ТипКомиссии, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДебитораВISO20022(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СекцияЗаголовокПлатежа,
	Документ,
	ТекстОшибки)
	
	НаименованиеОрганизации = ?(ЗначениеЗаполнено(Документ.ОрганизацияНаименованиеМеждународное),
		Документ.ОрганизацияНаименованиеМеждународное, Документ.ОрганизацияНаим);
	СекцияЗаголовокДебитор = ОбъектТипаCML(Фабрика, НазванияТипов.PartyIdentification, ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "Nm", НаименованиеОрганизации, Истина, ТекстОшибки);
	Если ЗначениеЗаполнено(Документ.ОрганизацияИНН) Тогда
		ИдентификаторУчастникаISO = ИдентификаторУчастникаISO(
			Фабрика, НазванияТипов, ПространствоИмен, Документ.ОрганизацияИНН, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокДебитор, "Id", ИдентификаторУчастникаISO, , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "Dbtr", СекцияЗаголовокДебитор, Истина, ТекстОшибки);
	
	СекцияСчетПлательщика = СчетISO(Фабрика, НазванияТипов, ПространствоИмен, Документ.ОрганизацияРасчСчет,
									Документ.БанковскийСчетОрганизацииIBAN, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "DbtrAcct", СекцияСчетПлательщика, Истина, ТекстОшибки);

	БанкПлательщик = ОбъектТипаCML(
		Фабрика, НазванияТипов.BranchAndFinancialInstitutionIdentification, ПространствоИмен);
	БанкПлательщикИД = ОбъектТипаCML(Фабрика, НазванияТипов.FinancialInstitutionIdentification, ПространствоИмен);
	Если ЗначениеЗаполнено(Документ.ОрганизацияСВИФТБанка) Тогда
		ЗаполнитьСвойствоXDTO(
			БанкПлательщикИД, НазванияТипов.BIC, Документ.ОрганизацияСВИФТБанка, Истина, ТекстОшибки);
	Иначе
		
		Если ЗначениеЗаполнено(Документ.ОрганизацияБИКБанка) Тогда
			НациональныйКодБанка = ОбъектТипаCML(Фабрика, "GenericFinancialIdentification1", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(НациональныйКодБанка, "Id", Документ.ОрганизацияБИКБанка, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкПлательщикИД, "Othr", НациональныйКодБанка, Истина, ТекстОшибки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Не заполнен идентификатор банка организации (БИК / SWIFT)';
									|en = 'Company''s bank ID (Bank code / SWIFT) is not filled in'");
		КонецЕсли;
		
	КонецЕсли;
	НаименованиеБанка = ?(ЗначениеЗаполнено(Документ.ОрганизацияБанкМеждународный),
						Документ.ОрганизацияБанкМеждународный, Документ.ОрганизацияБанк);
	ЗаполнитьСвойствоXDTO(БанкПлательщикИД, "Nm", НаименованиеБанка, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БанкПлательщик, "FinInstnId", БанкПлательщикИД, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокПлатежа, "DbtrAgt", БанкПлательщик, Истина, ТекстОшибки);

КонецПроцедуры

Процедура ВыгрузитьКредитораISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки)
	
	ВыгрузитьБанкПолучателяВISO20022(Фабрика, НазванияТипов, ПространствоИмен, СекцияТранзакция, Документ, ТекстОшибки);
	
	Получатель = ОбъектТипаCML(Фабрика, НазванияТипов.PartyIdentification, ПространствоИмен);
	НаименованиеПолучателя = ?(ЗначениеЗаполнено(Документ.КонтрагентНаименованиеМеждународное),
								Документ.КонтрагентНаименованиеМеждународное, Документ.КонтрагентНаим);
	// Банки Европы применяют версию формата pain.001.001.03 и в наименование получателя добавляют ИНН/КПП
	Если СтрЗаканчиваетсяНа(ПространствоИмен, "pain.001.001.03") И Документ.ISOКодВалюты = "RUB" Тогда
		НаименованиеПолучателя = Документ.КонтрагентИНН
			+ ?(ЗначениеЗаполнено(Документ.КПППолучателя), "/" + Документ.КПППолучателя, "") + " "
			+ НаименованиеПолучателя;
		Остаток = Сред(НаименованиеПолучателя, 71);
		// RUB payment - the taxpayer identification number or INN (and KPP) is inserted in the tag
		// Creditor/Name before the name. If the Creditor's name is too long, the remainder of the name
		// must be written in the PstlAdr/AdrLine tag without any spaces (without a hyphen).
		Если ЗначениеЗаполнено(Остаток) Тогда
			СекцияПочтовыйАдрес = ОбъектТипаCML(Фабрика, "PostalAddress6", ПространствоИмен);
			ДобавитьАдресВСекциюСРазбивкой(СекцияПочтовыйАдрес, Остаток);
			ЗаполнитьСвойствоXDTO(Получатель, "PstlAdr", СекцияПочтовыйАдрес, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Получатель, "Nm", НаименованиеПолучателя, , ТекстОшибки);
	Если ЗначениеЗаполнено(Документ.КонтрагентИНН) Тогда
		СекцияИдентификаторПолучателя = ИдентификаторУчастникаISO(
			Фабрика, НазванияТипов, ПространствоИмен, Документ.КонтрагентИНН, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Получатель, "Id", СекцияИдентификаторПолучателя, , ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "Cdtr", Получатель, , ТекстОшибки);
	
	СчетПолучатель = СчетISO(Фабрика, НазванияТипов, ПространствоИмен, Документ.КонтрагентРасчСчет,
								Документ.БанковскийСчетКонтрагентаIBAN, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAcct", СчетПолучатель, , ТекстОшибки);
	
КонецПроцедуры

Процедура ВыгрузитьБанкПолучателяВISO20022(
	Фабрика,
	НазванияТипов,
	ПространствоИмен,
	СекцияТранзакция,
	Документ,
	ТекстОшибки)
	
	БанкПолучатель = ОбъектТипаCML(
		Фабрика, НазванияТипов.BranchAndFinancialInstitutionIdentification, ПространствоИмен);
	БанкПолучательИД = ОбъектТипаCML(Фабрика, НазванияТипов.FinancialInstitutionIdentification, ПространствоИмен);
	Если ЗначениеЗаполнено(Документ.КонтрагентСВИФТБанка) Тогда
		ЗаполнитьСвойствоXDTO(БанкПолучательИД, НазванияТипов.BIC, Документ.КонтрагентСВИФТБанка, Истина, ТекстОшибки);
	Иначе
		
		Если ЗначениеЗаполнено(Документ.КонтрагентБИКБанка) Тогда
			НациональныйКодБанка = ОбъектТипаCML(Фабрика, "GenericFinancialIdentification1", ПространствоИмен);
			ЗаполнитьСвойствоXDTO(НациональныйКодБанка, "Id", Документ.КонтрагентБИКБанка, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(БанкПолучательИД, "Othr", НациональныйКодБанка, Истина, ТекстОшибки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Не заполнен идентификатор банка получателя (БИК / SWIFT)';
									|en = 'Payee’s bank ID (Bank code / SWIFT) is not filled in'");
		КонецЕсли;
		
	КонецЕсли;
	НаименованиеБанка = ?(ЗначениеЗаполнено(Документ.КонтрагентБанкМеждународный),
						Документ.КонтрагентБанкМеждународный, Документ.КонтрагентБанк);
	Если Документ.ISOКодВалюты = "RUB" Тогда
		// RUB payment - full name of the Creditor's Agent + city + BIC of the Creditor Agent (9 digits)
		// + correspondent account of the Creditor's Agent in the Central Bank of the Russian Federation
		// (20 digits, starts with 301). The last three digits of the BIC and the correspondent account
		// must coincide.
		ГородБанка = ?(ЗначениеЗаполнено(Документ.КонтрагентГородБанкаМеждународный),
						Документ.КонтрагентГородБанкаМеждународный, Документ.КонтрагентГородБанка);
		НаименованиеБанка = НаименованиеБанка + " " + ГородБанка + " " + Документ.КонтрагентБИКБанка + " "
							+ Документ.КонтрагентКоррСчет;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(БанкПолучательИД, "Nm", НаименованиеБанка, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БанкПолучатель, "FinInstnId", БанкПолучательИД, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAgt", БанкПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(Документ.КонтрагентКоррСчет) Тогда
		СчетБанкаПосредника = СчетISO(Фабрика, НазванияТипов, ПространствоИмен, Документ.КонтрагентКоррСчет,
										Документ.БанковскийСчетКонтрагентаIBAN, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияТранзакция, "CdtrAgtAcct", СчетБанкаПосредника, Истина, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ДвоичныеДанныеИзXDTO(Фабрика, ЭД)

	НоваяЗаписьXML = Новый ЗаписьXML;
	ПотокВПамяти = Новый ПотокВПамяти();
	НоваяЗаписьXML.ОткрытьПоток(ПотокВПамяти, "UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	НазначениеТипа = НазначениеТипаXML.Явное;
	Фабрика.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , НазначениеТипа);
	НоваяЗаписьXML.Закрыть();
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

Функция МассивСтрокНазначенияПлатежаДляISO(НазначениеПлатежа)

	МассивВозврата = Новый Массив;
	ОграничениеСтрокиФорматаISO = 140;

	Для Счетчик = 1 По СтрЧислоСтрок(НазначениеПлатежа) Цикл
		ТекСтрока = СтрПолучитьСтроку(НазначениеПлатежа, Счетчик);
		Если СтрДлина(ТекСтрока) > ОграничениеСтрокиФорматаISO Тогда
			Пока СтрДлина(ТекСтрока) > 0 Цикл
				КоличествоКСрезу = Мин(ОграничениеСтрокиФорматаISO, СтрДлина(ТекСтрока));
				КусокСтроки = Сред(ТекСтрока, 1, КоличествоКСрезу);
				МассивВозврата.Добавить(КусокСтроки);
				Если СтрДлина(ТекСтрока) <= ОграничениеСтрокиФорматаISO Тогда
					Прервать;
				КонецЕсли;
				ТекСтрока = Сред(ТекСтрока, КоличествоКСрезу + 1);
			КонецЦикла;
		Иначе
			МассивВозврата.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивВозврата;

КонецФункции

Процедура ДобавитьАдресВСекциюСРазбивкой(СекцияПочтовыйАдрес, Адрес)

	Для Счетчик = 1 По СтрЧислоСтрок(Адрес) Цикл
		ТекСтрока = СтрПолучитьСтроку(Адрес, Счетчик);
		Пока СтрДлина(ТекСтрока) > 70 Цикл
			СрезСтроки = Сред(ТекСтрока, 1, 70);
			СекцияПочтовыйАдрес.AdrLine.Добавить(СрезСтроки);
			ТекСтрока = Сред(ТекСтрока, 71);
		КонецЦикла;
		СекцияПочтовыйАдрес.AdrLine.Добавить(ТекСтрока);
	КонецЦикла;

КонецПроцедуры

Функция ИдентификаторУчастникаISO(Фабрика, НазванияТипов, ПространствоИмен, ИНН, ТекстОшибки)

	СекцияЗаголовокИд = ОбъектТипаCML(Фабрика, НазванияТипов.Party, ПространствоИмен);
	СекцияЗаголовокОрг = ОбъектТипаCML(Фабрика, НазванияТипов.OrganisationIdentification, ПространствоИмен);
	СекцияЗаголовокОргИд = ОбъектТипаCML(Фабрика, "GenericOrganisationIdentification1", ПространствоИмен);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокОргИд, "Id", ИНН, Истина, ТекстОшибки);
	СекцияЗаголовокОрг.Othr.Добавить(СекцияЗаголовокОргИд);
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокИд, "OrgId", СекцияЗаголовокОрг, Ложь, ТекстОшибки);
	Возврат СекцияЗаголовокИд;

КонецФункции

Функция СчетISO(Фабрика, НазванияТипов, ПространствоИмен, НомерСчета, ЭтоIBAN, ТекстОшибки)

	СекцияЗаголовокСчет = ОбъектТипаCML(Фабрика, НазванияТипов.CashAccount, ПространствоИмен);
	СекцияЗаголовокСчетИд = ОбъектТипаCML(Фабрика, "AccountIdentification4Choice", ПространствоИмен);
	Если ЭтоIBAN Тогда
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетИд, "IBAN", НомерСчета, Истина, ТекстОшибки);
	Иначе
		СекцияЗаголовокСчетТип = ОбъектТипаCML(Фабрика, "GenericAccountIdentification1", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТип, "Id", НомерСчета, Истина, ТекстОшибки);
		СекцияЗаголовокСчетТипИмя = ОбъектТипаCML(Фабрика, "AccountSchemeName1Choice", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТипИмя, "Cd", "BBAN", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетТип, "SchmeNm", СекцияЗаголовокСчетТипИмя, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчетИд, "Othr", СекцияЗаголовокСчетТип, Истина, ТекстОшибки);
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(СекцияЗаголовокСчет, "Id", СекцияЗаголовокСчетИд, Истина, ТекстОшибки);
	
	Возврат СекцияЗаголовокСчет;

КонецФункции

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)

	// Проверка на соответствие длины фасету для строк
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Свойства = ОбъектXDTO.Свойства(); // КоллекцияСвойствXDTO
		УстанавливаемоеСвойство = Свойства.Получить(ИмяСвойства);
		Фасеты = УстанавливаемоеСвойство.Тип.Фасеты;
		Если Фасеты <> Неопределено Тогда
			ФасетМаксимальнаяДлина = Фасеты.Получить(ВидФасетаXDTO.МаксДлина);
			Если ФасетМаксимальнаяДлина <> Неопределено Тогда
				МаксимальнаяДлина = Число(ФасетМаксимальнаяДлина.Значение);
				Если СтрДлина(Значение) > МаксимальнаяДлина Тогда
					ШаблонОшибки = НСтр("ru = 'Ошибка установки свойства %1
						|Устанавливаемое значение: %2
						|Текущая длина строки: %3 
						|Допустимая длина строки: %4';
						|en = 'Property setting error %1
						|Value to be set: %2
						|Current string length: %3 
						|Allowed string length: %4'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбъектXDTO.Тип().Имя + "."
						+ ИмяСвойства, Значение, СтрДлина(Значение), МаксимальнаяДлина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ФасетМинимальнаяДлина = Фасеты.Получить(ВидФасетаXDTO.МинДлина);
			Если ФасетМинимальнаяДлина <> Неопределено Тогда
				МинимальнаяДлина = Число(ФасетМинимальнаяДлина.Значение);
				Если СтрДлина(Значение) < МинимальнаяДлина Тогда
					ШаблонОшибки = НСтр("ru = 'Ошибка установки свойства %1
						|Устанавливаемое значение: %2
						|Текущая длина строки: %3 
						|Минимальная длина строки: %4';
						|en = 'Property setting error %1
						|Value to be set: %2
						|Current string length: %3 
						|Minimum string length: %4'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбъектXDTO.Тип().Имя + "."
						+ ИмяСвойства, Значение, СтрДлина(Значение), МинимальнаяДлина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
			|Ошибка установки значения свойства ""%1"".';
			|en = 'Performing the operation: XDTO filling.
			|An error occurred when setting the value of the ""%1"" property.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС
			+ ТекстСообщения, ТекстСообщения);

		ЗаписатьВЖурналРегистрации(ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки

КонецПроцедуры

Процедура ЗаписатьВЖурналРегистрации(Комментарий, Уровень = Неопределено, ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = НовыеПараметрыЗаписиВЖурналРегистрации();
	КонецЕсли;
	
	УровеньВажностиСобытия = ?(ТипЗнч(Уровень) = Тип("УровеньЖурналаРегистрации"), Уровень,
							УровеньЖурналаРегистрации.Ошибка);
	ПолноеИмяСобытия = НСтр("ru = 'Выгрузка платежей в банк. Формирование xml файла.';
							|en = 'Payment export to the bank. XML file generation.'");
	ЗаписьЖурналаРегистрации(ПолноеИмяСобытия, УровеньВажностиСобытия, ПараметрыЗаписи.ОбъектМетаданных,
		ПараметрыЗаписи.Данные, Комментарий, ПараметрыЗаписи.РежимТранзакции);
	
КонецПроцедуры

Функция НовыеПараметрыЗаписиВЖурналРегистрации()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектМетаданных", Неопределено);
	Параметры.Вставить("Данные", Неопределено);
	Параметры.Вставить("РежимТранзакции", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьСвойствоXDTO(
	ОбъектXDTO,
	ИмяСвойства,
	Значение,
	Обязательное = Ложь,
	ТекстОшибки = "",
	УстанавливатьПустыеЗначения = Ложь) Экспорт

	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO")
			ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение)
				ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ОбъектТипаCML(Фабрика, Путь, URIПространстваИмен)

	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		ТипОбъекта = ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь);
	Иначе
		ТипОбъекта = Путь;
	КонецЕсли;

	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйОбъект = Фабрика.Создать(ТипОбъекта);

	Возврат НовыйОбъект;

КонецФункции

Функция ТипОбъектаCML(Фабрика, URIПространстваИмен, Путь)

	МассивПути = ЭлементыПутиТипаXDTO(Путь, ".");

	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент, 1) = "{" И Прав(ПервыйЭлемент, 1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = Фабрика.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = Фабрика.Тип(URIПространстваИмен, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;

	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл

		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;

	КонецЦикла;

	Возврат ТипОбъекта;

КонецФункции

Функция ЭлементыПутиТипаXDTO(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = СтрНайти(Строка, "{");
	КонПозицияПервогоЭлемента = СтрНайти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

Процедура ВыгрузитьПлатежиВMT940(ПараметрыВыгрузки, АдресХранилища)

	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("Дата");
	НачПериода = ТаблицаДокументов[0].Дата;
	КонПериода = ТаблицаДокументов[КоличествоДокументов - 1].Дата;
	
	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскиеСчетаВыгрузки, "НомерСчета");
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку(":20:" + Формат(ТекущаяДатаСеанса(), "ДФ=ггММдд"));
	ПотокВыгрузки.ДобавитьСтроку(":25:" + НомерСчета);
	
	Для каждого СтрокаСекции Из ТаблицаДокументов Цикл
		ВыгрузитьДокументВMT940(ПотокВыгрузки, СтрокаСекции, НомерСчета);
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL.
	Если ПараметрыВыгрузки.Кодировка = "DOS" Тогда
		Кодировка = "cp866";		// КодировкаТекста.OEM;
	Иначе
		Кодировка = "windows-1251";	// КодировкаТекста.ANSI;
	КонецЕсли;
	
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодировка);
	
	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выгрузка платежей в банк. Удаление временного файла';
				|en = 'Export payments to the bank. Delete temporary file'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры 

Процедура ВыгрузитьДокументВMT940(ПотокВыгрузки, СтрокаСекции ,НомерСчета) 

	ПотокВыгрузки.ДобавитьСтроку(":28С:" 
				+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаСекции.Номер, Истина, Истина));					// Номер выписки/номер страницы
	
	НаименованиеВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСекции.Валюта, "Наименование");
	ПотокВыгрузки.ДобавитьСтроку(":61:" 
				+ Формат(ТекущаяДатаСеанса(), "ДФ=ггММдд")																// YYMMDD
				+ Формат(ТекущаяДатаСеанса(), "ДФ=ММдд")																// MMDD
				+ ?(ТипЗнч(СтрокаСекции.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"), "C", "D")	// C–Кредит, D-Дебет
				+ Прав(НаименованиеВалюты, 1)																			// Третья буква ISO кода валюты
				+ Формат(СтрокаСекции.Сумма, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0")												// Сумма проводки
				+ "FTRF"																								// Код типа транзакции
				+ "NONREF");																							// Клиентская ссылка
									
	ПотокВыгрузки.ДобавитьСтроку(":86:"
				+ ?(СтрокаСекции.НазначениеПлатежа = "", "", "?20" + СтрокаСекции.НазначениеПлатежа)					// Дополнительные детали платежа
				+ ?(СтрокаСекции.КонтрагентСВИФТБанка = "",
							"?30" + СтрокаСекции.КонтрагентБИКБанка, "?30" + СтрокаСекции.КонтрагентСВИФТБанка)			// Идентификационный код банка контрагента
				+ "?31" + СтрокаСекции.КонтрагентРасчСчет																// Счет контрагента платежа
				+ "?32" + СтрокаСекции.КонтрагентНаим);																	// Наименование контрагента

КонецПроцедуры

//++ Локализация

Процедура ВыгрузитьПлатежиТОФК(ПараметрыВыгрузки, АдресХранилища)
	
	КаталогВременныхФайлов = "";
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		КаталогВременныхФайлов = ФайловаяСистема.СоздатьВременныйКаталог("");
	Иначе
		Возврат;
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВыгрузки.БанковскийСчет, "Владелец");
	ЗаписатьФайлыПлатежныхПорученийТОФК(Организация, ТаблицаДокументов, КаталогВременныхФайлов);
	
	ФайлыКаталога = НайтиФайлы(КаталогВременныхФайлов, "*.xml", Истина);
	
	Если ФайлыКаталога.Количество() > 0 Тогда
		
		ИмяАрхивногоФайла = Строка(Новый УникальныйИдентификатор) + ".zip";
		ИмяАрхивногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяАрхивногоФайла);
		Архив = Новый ЗаписьZipФайла(КаталогВременныхФайлов + ИмяАрхивногоФайла, , , , , , КодировкаИменФайловВZipФайле.UTF8);
		
		Для Каждого ТекущийФайл Из ФайлыКаталога Цикл
			Архив.Добавить(ТекущийФайл.ПолноеИмя);
		КонецЦикла;
		
		Архив.Записать();
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяАрхивногоФайла);
		ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, АдресХранилища);
		
	КонецЕсли;

КонецПроцедуры

// Формирует файл формата TSE_0401060_D07 для ТОФК и записывает его во временное хранилище.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой формируется файл.
//  ТаблицаДокументов - ТаблицаЗначений - описание см. Обработка.КлиентБанк.ДокументыКВыгрузке.
//  КаталогФайлов - Строка - Каталог временных файлов.
//
Процедура ЗаписатьФайлыПлатежныхПорученийТОФК(Организация, ТаблицаДокументов, КаталогФайлов)
	
	Индекс = 1;
	ТаблицаРасшифровки = Неопределено;
	
	//++ НЕ УТ
	ТаблицаРасшифровки = ДанныеИсполняемогоКонтракта(ТаблицаДокументов);
	//-- НЕ УТ
	
	КодУБП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодУБП");
	
	Для Каждого СтрокаДанных Из ТаблицаДокументов Цикл
		
		Если ТипЗнч(СтрокаДанных.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			Исходящий = Истина;
		Иначе
			Исходящий = Ложь;
		КонецЕсли;
		
		СтруктураФайла = ОписаниеПлатежногоПорученияТОФК(Исходящий);
		
		ДанныеДокумента = ДанныеДокументаДляВыгрузкиТОФК(ТаблицаДокументов, ТаблицаРасшифровки, СтрокаДанных, СтруктураФайла, Исходящий);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Фабрика = ФабрикаXDTO;
		ПакетXDTO = Фабрика.Пакеты.Получить(Метаданные.ПакетыXDTO.TSE_0401060_D07.ПространствоИмен);
		
		Для Каждого КорневоеСвойство Из ПакетXDTO.КорневыеСвойства Цикл
			
			ОбъектXDTO = ЗаполнитьОбъектXDTO(Фабрика, КорневоеСвойство.Тип, ДанныеДокумента, СтруктураФайла);
			ДесятичныеСвойстваПакетаXDTO = Новый Соответствие;
			ОбменСБанкамиУТ.СформироватьСписокДесятичныхСвойствПакетаXDTO(
				Фабрика, ДесятичныеСвойстваПакетаXDTO, КорневоеСвойство.Тип, СтруктураФайла);
			Фабрика.ЗаписатьXML(ЗаписьXML,
								ОбъектXDTO,
								КорневоеСвойство.ЛокальноеИмя,
								КорневоеСвойство.URIПространстваИмен,
								ФормаXML.Элемент,
								НазначениеТипаXML.Явное);
			
		КонецЦикла;
		
		ТекстXML = ЗаписьXML.Закрыть();
		ТекстXML = ИзменитьФорматОтображенияДесятичныхСвойствXML(ТекстXML, ДесятичныеСвойстваПакетаXDTO);
		ТекстXML = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ТекстXML);
		
		ДеньФормирования = Формат(ТекущаяДатаСеанса(), "ДФ=dd");
		МесяцФормирования = Формат(ТекущаяДатаСеанса(), "ДФ=ММ");
		
		ДатаФормирования = ЦелоеЧислоВТридцатишестиричнойСистемеСчисления(Число(ДеньФормирования))
			+ ЦелоеЧислоВТридцатишестиричнойСистемеСчисления(Число(МесяцФормирования));
		ПорядковыйНомер = ЦелоеЧислоВТридцатишестиричнойСистемеСчисления(Индекс);
		
		Пока СтрДлина(ПорядковыйНомер) < 6 Цикл
			ПорядковыйНомер = "0" + ПорядковыйНомер;
		КонецЦикла;
		
		ИмяФайла = СтрШаблон("TSE_0401060_D07_%1%2%3.xml",
			?(ПустаяСтрока(КодУБП), "00000000", ВРег(КодУБП)),
			ДатаФормирования,
			ПорядковыйНомер);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстXML);
		ТекстовыйДокумент.КодЯзыкаМакета = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстовыйДокумент.Записать(КаталогФайлов + ИмяФайла, КодировкаТекста.UTF8);
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДокументаДляВыгрузкиТОФК(ТаблицаДокументов, ТаблицаРасшифровки, СтрокаДанных, СтруктураФайла, Исходящий)
	
	ДанныеДокумента = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДанных);
		
	ДанныеДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер);
	ДобавитьКлючиКДаннымДокумента(ДанныеДокумента, СтруктураФайла);
	
	Если Исходящий Тогда
		
		ДанныеДокумента.BasicRequisites_PayView = "Платежное поручение";
		ДанныеДокумента.BasicRequisites_PayView_code = ?(ДанныеДокумента.ВидПлатежа = "Срочно", "4", "0");
		
		Если Не ЗначениеЗаполнено(ДанныеДокумента.AdditionalInfo_OperType) Тогда
			ДанныеДокумента.AdditionalInfo_OperType = "01";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеДокумента.PayerAndRecipient_Payer_KPP) Тогда
			ДанныеДокумента.PayerAndRecipient_Payer_KPP = "0";
		КонецЕсли;
		
		//++ НЕ УТ
		ПараметрыОтбора = Новый Структура("Ссылка", ДанныеДокумента.Ссылка);
		РасшифровкаПлатежа =  ТаблицаРасшифровки.Скопировать(ПараметрыОтбора);
		
		ДокументыОснования = Новый Массив;
		
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			
			РеквизитыРасшифровки = ОписаниеРеквизитовРасшифровкиПлатежаТОФК();
			
			РеквизитыРасшифровки.Вставить("ContractID", СтрокаРасшифровки.ИГК);
			РеквизитыРасшифровки.Вставить("NumPP", СтрокаРасшифровки.НомерСтрокиОснования);
			РеквизитыРасшифровки.Вставить("ViewC", "Государственный контракт");
			РеквизитыРасшифровки.Вставить("ViewC_code", "5");
			РеквизитыРасшифровки.Вставить("DocDate", СтрокаРасшифровки.ДатаЗаключенияКонтракта);
			РеквизитыРасшифровки.Вставить("DocNum", СтрокаРасшифровки.НомерКонтракта);
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяЦелевыхСредств) Тогда
				
				НайденнаяСсылка = Справочники.НаправленияРасходованияЦелевыхСредств.НайтиПоКоду(СтрокаРасшифровки.СтатьяЦелевыхСредств);
				
				Если НайденнаяСсылка = Неопределено Тогда
					НайденнаяСсылка = Справочники.ИсточникиПоступленияЦелевыхСредств.НайтиПоКоду(СтрокаРасшифровки.СтатьяЦелевыхСредств);
					РеквизитыРасшифровки.Вставить("CodeObjectPayer", НайденнаяСсылка);
				Иначе
					РеквизитыРасшифровки.Вставить("CodeObjectPayer", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяСсылка, "УкрупненныйКодРасходов"));
					РеквизитыРасшифровки.Вставить("DetCodeObjectPayer", НайденнаяСсылка);
				КонецЕсли;
				
			КонецЕсли;
			
			РеквизитыРасшифровки.Вставить("Sum", СтрокаРасшифровки.СуммаКОплате);
			РеквизитыРасшифровки.Вставить("SumNDS", СтрокаРасшифровки.СуммаНДС);
			РеквизитыРасшифровки.Вставить("AnalyticCodePay", СтрокаРасшифровки.РазделЛицевогоСчета);
			
			ДокументыОснования.Добавить(РеквизитыРасшифровки);
			
		КонецЦикла;
		
		ДанныеДокумента.Вставить("TSE_Tab0401060_TSE_Tab0401060_ITEM", ДокументыОснования);
		//-- НЕ УТ
		
	КонецЕсли;
	
	Возврат ДанныеДокумента;
	
КонецФункции

Функция ОписаниеПлатежногоПорученияТОФК(Исходящее)
	
	ОсновныеРеквизиты = Новый Структура;
	ОсновныеРеквизиты.Вставить("Version", "Версия");
	
	// Реквизиты платежного поручения
	ОсновныеРеквизиты.Вставить("BasicRequisites_DocNum", "Номер");
	ОсновныеРеквизиты.Вставить("BasicRequisites_DocDate", "Дата");
	ОсновныеРеквизиты.Вставить("BasicRequisites_PaySum", "Сумма");
	ОсновныеРеквизиты.Вставить("BasicRequisites_PayView", "ВидПлатежа");
	
	// Дополнительная информация
	ОсновныеРеквизиты.Вставить("AdditionalInfo_PayDate", "СрокПлатежа");
	ОсновныеРеквизиты.Вставить("AdditionalInfo_PayOrder", "ОчередностьПлатежа");
	ОсновныеРеквизиты.Вставить("AdditionalInfo_OperType", "ВидОперации");
	
	// Реквизиты плательщика 
	ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_KPP", "КПППлательщика");
	
	// Реквизиты получателя
	ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_KPP", "КПППолучателя");
	
	// Общие данные платежного поручения
	ОсновныеРеквизиты.Вставить("TranscriptPP_PayPurpose", "НазначениеПлатежа");
	
	Если Исходящее Тогда
		
		// Реквизиты плательщика
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_INN", "ОрганизацияИНН");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_PersonalAcc", "ЛицевойСчет");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_Name", "ОрганизацияНаим");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_CheckAcc", "ОрганизацияРасчСчет");
		
		// Реквизиты банка плательщика
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_BIK", "ОрганизацияБИКБанка");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_BankName", "ОрганизацияБанк");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_CorrAcc", "ОрганизацияКоррСчет");
		
		// Реквизиты получателя
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_INN", "КонтрагентИНН");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_Name", "КонтрагентНаим");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_CheckAcc", "КонтрагентРасчСчет");
		
		// Реквизиты банка получателя
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_BIK", "КонтрагентБИКБанка");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_BankName", "КонтрагентБанк");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_CorrAcc", "КонтрагентКоррСчет");
		
		// Налоговые платежи
		ОсновныеРеквизиты.Вставить("TAX_UIN", "Код");
		ОсновныеРеквизиты.Вставить("TAX_DrawStat", "СтатусСоставителя");
		ОсновныеРеквизиты.Вставить("TAX_KBK", "КодБК");
		ОсновныеРеквизиты.Вставить("TAX_OKTMO", "КодОКАТО");
		ОсновныеРеквизиты.Вставить("TAX_PayReason", "ПоказательОснования");
		ОсновныеРеквизиты.Вставить("TAX_Period", "ПоказательПериода");
		ОсновныеРеквизиты.Вставить("TAX_DocNo", "ПоказательНомера");
		ОсновныеРеквизиты.Вставить("TAX_DocDate", "ПоказательДаты");
		ОсновныеРеквизиты.Вставить("TAX_TypeNP", "ПоказательТипа");
		
	Иначе
		
		// Реквизиты плательщика
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_INN", "КонтрагентИНН");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_Name", "КонтрагентНаим");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_CheckAcc", "КонтрагентРасчСчет");
		
		// Реквизиты банка плательщика
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_BIK", "КонтрагентБИКБанка");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_BankName", "КонтрагентБанк");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Payer_CorrAcc", "КонтрагентКоррСчет");
		
		// Реквизиты получателя
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_INN", "ОрганизацияИНН");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_PersonalAcc", "ЛицевойСчет");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_Name", "ОрганизацияНаим");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_CheckAcc", "ОрганизацияРасчСчет");
		
		// Реквизиты банка получателя
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_BIK", "ОрганизацияБИКБанка");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_BankName", "ОрганизацияБанк");
		ОсновныеРеквизиты.Вставить("PayerAndRecipient_Recip_CorrAcc", "ОрганизацияКоррСчет");
		
	КонецЕсли;
	
	ВидПлатежа = Новый Структура;
	ВидПлатежа.Вставить("code", "code");
	ОсновныеРеквизиты.Вставить("BasicRequisites_PayView", ВидПлатежа);
	
	//++ НЕ УТ
	РасшифровкаПлатежа = ОписаниеРеквизитовРасшифровкиПлатежаТОФК();
	РасшифровкаПлатежа.Вставить("ViewC", ВидПлатежа);
	
	ОсновныеРеквизиты.Вставить("TSE_Tab0401060", Новый Структура("TSE_Tab0401060_ITEM", РасшифровкаПлатежа));
	//-- НЕ УТ
	
	Возврат ОсновныеРеквизиты;
	
КонецФункции

Функция ЗаполнитьОбъектXDTO(Фабрика, Тип, ДанныеДокумента, СтруктураОбъекта, ИмяОбъекта = "")
	
	ОбъектДанныхXDTO = Фабрика.Создать(Тип);
	
	Для Каждого ТекущееСвойство Из ОбъектДанныхXDTO.Свойства() Цикл
		
		ИмяСвойства = ТекущееСвойство.Имя;
		ТипСвойства = ТекущееСвойство.Тип;
		Ключ = ИмяОбъекта + ?(ИмяОбъекта <> "", "_" + ИмяСвойства, ИмяСвойства);
		
		Если Не СтруктураОбъекта.Свойство(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектДанныхXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			
			ОбъектСписокXDTO = ОбъектДанныхXDTO.ПолучитьСписок(ТекущееСвойство); // СписокXDTO, Неопределено
			
			Для Каждого СтрокаДокумента Из ДанныеДокумента[Ключ] Цикл
				
				ОбъектXDTO = ЗаполнитьОбъектXDTO(Фабрика, ТипСвойства, СтрокаДокумента, СтруктураОбъекта[ИмяСвойства]);
				ОбъектСписокXDTO.Добавить(ОбъектXDTO);
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO") Тогда
			
			ЗначениеПоля = ЗаполнитьОбъектXDTO(Фабрика, ТипСвойства, ДанныеДокумента, СтруктураОбъекта[ИмяСвойства], ИмяСвойства);
			
			Если ТекущееСвойство.Тип.Последовательный Тогда
				ПоследовательностьОбъекта = ЗначениеПоля.Последовательность(); // ПоследовательностьXDTO
				ПоследовательностьОбъекта.Добавить(ДанныеДокумента[Ключ]);
			КонецЕсли;
			
		Иначе
			
			Если ОбъектДанныхXDTO[ИмяСвойства] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ДанныеДокумента.Свойство(Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеПоля = ДанныеДокумента[Ключ];
			
		КонецЕсли;
		
		ТекстОшибки = "";
		ОбменСБанкамиУТ.ПривестиКТипу(ТекущееСвойство, ЗначениеПоля, ТекстОшибки);
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Или ТипЗнч(ЗначениеПоля) = Тип("Дата") Или ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ОбъектДанныхXDTO[ИмяСвойства] = ЗначениеПоля;
		Исключение
			
			ПараметрыОшибки = НовыеПараметрыЗаписиВЖурналРегистрации();
			ПараметрыОшибки.ОбъектМетаданных = Метаданные.Обработки.КлиентБанк;
			ЗаписатьВЖурналРегистрации(
				ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ,
				ПараметрыОшибки);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ОбъектДанныхXDTO;
	
КонецФункции

Процедура ДобавитьКлючиКДаннымДокумента(ДанныеДокумента, СтруктураФайла, ВерхнийКлюч = "")
	
	Для Каждого ЭлементСтруктуры Из СтруктураФайла Цикл
		
		ТекущийКлюч = ВерхнийКлюч + ?(ВерхнийКлюч <> "", "_" + ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
		
		Если ЭлементСтруктуры.Значение <> Неопределено
			И ДанныеДокумента.Свойство(ЭлементСтруктуры.Значение) Тогда
			ДанныеДокумента.Вставить(ТекущийКлюч, ДанныеДокумента[ЭлементСтруктуры.Значение]);
		Иначе
			ДанныеДокумента.Вставить(ТекущийКлюч);
		КонецЕсли;
		
		Если ЭлементСтруктуры.Значение <> Неопределено
			И ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
			ДобавитьКлючиКДаннымДокумента(ДанныеДокумента, ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ
Функция ОписаниеРеквизитовРасшифровкиПлатежаТОФК()
	
	РасшифровкаПлатежа = Новый Структура;
	РасшифровкаПлатежа.Вставить("ContractID");
	РасшифровкаПлатежа.Вставить("NumPP");
	РасшифровкаПлатежа.Вставить("ViewC");
	РасшифровкаПлатежа.Вставить("DocDate");
	РасшифровкаПлатежа.Вставить("DocNum");
	РасшифровкаПлатежа.Вставить("CodeObjectPayer");
	РасшифровкаПлатежа.Вставить("DetCodeObjectPayer");
	РасшифровкаПлатежа.Вставить("Sum");
	РасшифровкаПлатежа.Вставить("SumNDS");
	РасшифровкаПлатежа.Вставить("AnalyticCodePay");
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

Функция ДанныеИсполняемогоКонтракта(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	*
	               |ПОМЕСТИТЬ ИсходнаяТаблица
	               |ИЗ
	               |	&ТаблицаДокументов КАК ТаблицаДокументов";
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	ЗапросСДополнениями = Новый Запрос;
	ЗапросСДополнениями.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросСДополнениями.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.Ссылка,
		|	ЕСТЬNULL(ГосударственныеКонтракты.НомерИГК, """") КАК НомерИГК,
		|	ЕСТЬNULL(НаправлениеДеятельности.НомерКонтракта, """") КАК НомерКонтракта,
		|	ЕСТЬNULL(НаправлениеДеятельности.ДатаЗаключенияКонтракта, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаключенияКонтракта,
		|	БанковскиеСчетаОрганизаций.РазделЛицевогоСчета КАК РазделЛицевогоСчета
		|ПОМЕСТИТЬ ОсновныеДанные
		|ИЗ
		|	ИсходнаяТаблица КАК ИсходнаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|		ПО ИсходнаяТаблица.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|			ПО БанковскиеСчетаОрганизаций.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосударственныеКонтракты КАК ГосударственныеКонтракты
		|			ПО НаправленияДеятельности.ГосударственныйКонтракт = ГосударственныеКонтракты.Ссылка
		|ГДЕ
		|	ИсходнаяТаблица.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение)
		|;
		|
		|ВЫБРАТЬ
		|	ОсновныеДанные.Ссылка,
		|	МИНИМУМ(СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.НомерСтроки) КАК НомерСтрокиОснования,
		|	СУММА(СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма) КАК СуммаКОплате,
		|	СУММА(СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
		|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ОсновныеДанные.НомерИГК КАК ИГК,
		|	ОсновныеДанные.НомерКонтракта КАК НомерКонтракта,
		|	ОсновныеДанные.ДатаЗаключенияКонтракта КАК ДатаЗаключенияКонтракта,
		|	ОсновныеДанные.РазделЛицевогоСчета КАК РазделЛицевогоСчета
		|ИЗ
		|	ОсновныеДанные КАК ОсновныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа
		|		ПО ОсновныеДанные.Ссылка = СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеДанные.Ссылка,
		|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.СтатьяЦелевыхСредств,
		|	ОсновныеДанные.НомерИГК,
		|	ОсновныеДанные.НомерКонтракта,
		|	ОсновныеДанные.ДатаЗаключенияКонтракта,
		|	ОсновныеДанные.РазделЛицевогоСчета";
	
	ТаблицаРасшифровки = ЗапросСДополнениями.Выполнить().Выгрузить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ИсходнаяТаблица");
	
	Возврат ТаблицаРасшифровки;
	
КонецФункции
//-- НЕ УТ

Функция ИзменитьФорматОтображенияДесятичныхСвойствXML(ТекстXML, ДесятичныеСвойства)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("TSE_0401060_D07", "http://www.roskazna.ru/eb/domain/TSE_0401060_D07/formular");
	ЗаписьXML.ЗаписатьАтрибут("Version", "6.0");
	ЗаписьXML.ЗаписатьАтрибут("xsi:schemaLocation", "http://www.roskazna.ru/eb/domain/TSE_0401060_D07/formular formulars.xsd");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("self", "http://www.roskazna.ru/eb/domain/TSE_0401060_D07/formular");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	НачальныйТег = Истина;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если НачальныйТег Тогда
			НачальныйТег = Ложь;
		Иначе
			ОбменСБанкамиУТ.ЗаписатьУзелXML(ЧтениеXML, ЗаписьXML, ДесятичныеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ЦелоеЧислоВТридцатишестиричнойСистемеСчисления(Число)
	
	ЦелаяЧасть = Цел(Число / 36);
	Остаток = Число - 36 * ЦелаяЧасть;
	
	Если ЦелаяЧасть > 0 Тогда
		Результат = ЦелоеЧислоВТридцатишестиричнойСистемеСчисления(ЦелаяЧасть);
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат + ДесятичноеЧислоВТрицатишестиричнойСистемыСчисления().Получить(Остаток);
	
КонецФункции

Функция ДесятичноеЧислоВТрицатишестиричнойСистемыСчисления()
	
	Равнозначность = Новый Соответствие;
	Равнозначность.Вставить(0, "0");
	Равнозначность.Вставить(1, "1");
	Равнозначность.Вставить(2, "2");
	Равнозначность.Вставить(3, "3");
	Равнозначность.Вставить(4, "4");
	Равнозначность.Вставить(5, "5");
	Равнозначность.Вставить(6, "6");
	Равнозначность.Вставить(7, "7");
	Равнозначность.Вставить(8, "8");
	Равнозначность.Вставить(9, "9");
	Равнозначность.Вставить(10, "A");
	Равнозначность.Вставить(11, "B");
	Равнозначность.Вставить(12, "C");
	Равнозначность.Вставить(13, "D");
	Равнозначность.Вставить(14, "E");
	Равнозначность.Вставить(15, "F");
	Равнозначность.Вставить(16, "G");
	Равнозначность.Вставить(17, "H");
	Равнозначность.Вставить(18, "I");
	Равнозначность.Вставить(19, "J");
	Равнозначность.Вставить(20, "K");
	Равнозначность.Вставить(21, "L");
	Равнозначность.Вставить(22, "M");
	Равнозначность.Вставить(23, "N");
	Равнозначность.Вставить(24, "O");
	Равнозначность.Вставить(25, "P");
	Равнозначность.Вставить(26, "Q");
	Равнозначность.Вставить(27, "R");
	Равнозначность.Вставить(28, "S");
	Равнозначность.Вставить(29, "T");
	Равнозначность.Вставить(30, "U");
	Равнозначность.Вставить(31, "V");
	Равнозначность.Вставить(32, "W");
	Равнозначность.Вставить(33, "X");
	Равнозначность.Вставить(34, "Y");
	Равнозначность.Вставить(35, "Z");
	
	Возврат Равнозначность;
	
КонецФункции

//-- Локализация

#КонецОбласти

//++ Локализация
#Область РазборВыпискиПрямойОбмен

Функция РазобратьДеревоВыписки(ДеревоДанных)
	
	Если ДеревоДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
	Заголовок               = Новый Структура;
	РасчетныеСчета          = Новый Массив;
	ДокументыВыписки        = Новый ТаблицаЗначений;
	ОшибкиРазбора           = Новый Массив;
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	Выписка = ДеревоДанных.Строки[0].Строки[0];
	Операции = Выписка.Строки.Найти("Операции", "Уровень3");
	Если Операции <> Неопределено Тогда
		ДобавитьКолонкиВТаблицуОпераций(Операции.Строки[0].Строки, ТаблицаОпераций);
	КонецЕсли;
	
	РасчетныеСчетаВыписки = Новый Массив;
	Для каждого СтрокаДерева Из ДеревоДанных.Строки[0].Строки Цикл
		ЗаголовокВыписки = Новый Структура;
		ИнициализироватьЗаголовокВыписки(СтрокаДерева.Строки, ЗаголовокВыписки);
		РасчетныеСчетаВыписки.Добавить(ЗаголовокВыписки);
		СтрокиОпераций = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Уровень3", "Операции"));
		ЦиклПоСтрокамДерева(СтрокиОпераций, ТаблицаОпераций);
	КонецЦикла;
	
	// Документы
	ПоляДокументовКЗагрузке = ПоляДокументовКЗагрузке();
	ДокументыВыписки = Обработки.КлиентБанк.Создать().ДокументыКЗагрузке.ВыгрузитьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		
		ДокументВыписки = ДокументыВыписки.Добавить();
		СекцияДокумента = "СЕКЦИЯДОКУМЕНТ" + Символы.ПС;
		Для каждого КлючИЗначение Из ПоляДокументовКЗагрузке Цикл
			ДокументВыписки[КлючИЗначение.Значение] = СтрокаТаблицы[КлючИЗначение.Ключ];
			СекцияДокумента = СекцияДокумента + КлючИЗначение.Значение + "=" + СтрокаТаблицы[КлючИЗначение.Ключ] + Символы.ПС;
		КонецЦикла;
		ДокументВыписки.ДанныеВыписки = СекцияДокумента + "КОНЕЦДОКУМЕНТА";
		
		Если СтрокаТаблицы.НаправлениеПлатежа = "1" Тогда
			ДокументВыписки.СуммаСписано = ДокументВыписки.СуммаДокумента;
			ДокументВыписки.ДатаСписано = ДокументВыписки.ДатаПроведения;
		Иначе
			ДокументВыписки.СуммаПоступило = ДокументВыписки.СуммаДокумента;
			ДокументВыписки.ДатаПоступило = ДокументВыписки.ДатаПроведения;
		КонецЕсли;
	КонецЦикла;
	
	// Заголовок
	Заголовок.Вставить("ДатаНачала", Дата(3999, 1, 1));
	Заголовок.Вставить("ДатаКонца", Дата(1, 1, 1));
	
	Для каждого СтрокаЗаголовка Из РасчетныеСчетаВыписки Цикл
		Если СтрокаЗаголовка.НачалоПериода < Заголовок.ДатаНачала Тогда
			Заголовок.ДатаНачала = СтрокаЗаголовка.НачалоПериода;
		КонецЕсли;
		Если СтрокаЗаголовка.КонецПериода > Заголовок.ДатаКонца Тогда
			Заголовок.ДатаКонца = СтрокаЗаголовка.КонецПериода;
		КонецЕсли;
	КонецЦикла;
	
	// Расчетные счета
	Для каждого СтрокаСчет Из РасчетныеСчетаВыписки Цикл
		РасчетныйСчет = Новый Структура;
		Для каждого ПолеРасчетногоСчета Из ПоляРасчетногоСчета() Цикл
			РасчетныйСчет.Вставить(ПолеРасчетногоСчета.Значение, СтрокаСчет[ПолеРасчетногоСчета.Ключ]);
		КонецЦикла;
		РасчетныеСчета.Добавить(РасчетныйСчет);
	КонецЦикла;
	
	Результат.Заголовок        = Заголовок;
	Результат.РасчетныеСчета   = РасчетныеСчета;
	Результат.ДокументыВыписки = ДокументыВыписки;
	Результат.ОшибкиРазбора    = ОшибкиРазбора;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКолонкиВТаблицуОпераций(СтрокиДерева, Таблица)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		ПолныйПуть = СтрЗаменить(СтрокаДерева.ПолныйПуть, ".", "_");
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "Выписки_НомерСтроки_Операции_НомерСтроки_", "");
		Если Таблица.Колонки.Найти(ПолныйПуть) = Неопределено Тогда
			Таблица.Колонки.Добавить(ПолныйПуть, Новый ОписаниеТипов(СтрокаДерева.Тип));
		КонецЕсли;
		ДобавитьКолонкиВТаблицуОпераций(СтрокаДерева.Строки, Таблица);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЦиклПоСтрокамДерева(СтрокиДерева, Таблица, Знач ТекущаяСтрокаТаблицы = Неопределено)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ПолныйПуть = СтрЗаменить(СтрокаДерева.ПолныйПуть, ".", "_");
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "Выписки_НомерСтроки_Операции_НомерСтроки_", "");
		
		Если ПолныйПуть = "Выписки_НомерСтроки_Операции_НомерСтроки" Тогда
			ТекущаяСтрокаТаблицы = Таблица.Добавить();
		ИначеЕсли СтрокаДерева.Уровень() >= 4 Тогда
			ТекущаяСтрокаТаблицы[ПолныйПуть] = СтрокаДерева.Значение;
		КонецЕсли;
		
		ЦиклПоСтрокамДерева(СтрокаДерева.Строки, Таблица, ТекущаяСтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьЗаголовокВыписки(СтрокиЗаголовка, ЗаголовокВыписки)
	
	Для каждого СтрокаЗаголовка Из СтрокиЗаголовка Цикл
		ПолныйПуть = СтрЗаменить(СтрокаЗаголовка.ПолныйПуть, ".", "_");
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "Выписки_НомерСтроки_", "");
		Если ПолныйПуть = "Банк" Или ПолныйПуть = "Организация" Тогда
			ИнициализироватьЗаголовокВыписки(СтрокаЗаголовка.Строки, ЗаголовокВыписки);
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов(СтрокаЗаголовка.Тип);
			ЗаголовокВыписки.Вставить(ПолныйПуть, ОписаниеТипов.ПривестиЗначение(СтрокаЗаголовка.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляРасчетногоСчета()
	
	Поля = Новый Структура;
	
	Поля.Вставить("НачалоПериода", "ДатаНачала");
	Поля.Вставить("КонецПериода", "ДатаКонца");
	Поля.Вставить("НомерСчета", "РасчСчет");
	Поля.Вставить("НачальныйОстаток", "НачальныйОстаток");
	Поля.Вставить("ОборотВходящихПлатежей", "ВсегоПоступило");
	Поля.Вставить("ОборотИсходящихПлатежей", "ВсегоСписано");
	Поля.Вставить("КонечныйОстаток", "КонечныйОстаток");
	
	Возврат Поля;
	
КонецФункции

Функция ПоляДокументовКЗагрузке()
	
	Поля = Новый Структура;
	
	Поля.Вставить("ДатаОперации", "ДатаПроведения");
	Поля.Вставить("ДатаДокумента", "Дата");
	Поля.Вставить("НомерДокумента", "Номер");
	Поля.Вставить("СуммаДокумента", "Сумма");
	Поля.Вставить("ВидДокумента", "Операция");
	Поля.Вставить("НазначениеПлатежа", "НазначениеПлатежа");
	Поля.Вставить("УникальныйИдентификаторПлатежа", "Код");
	Поля.Вставить("КодВидаДохода", "КодНазПлатежа");
	
	Поля.Вставить("Плательщик_Наименование", "Плательщик");
	Поля.Вставить("Плательщик_НаименованиеМеждународное", "ПлательщикНаименованиеМеждународное");
	Поля.Вставить("Плательщик_АдресСтруктурированный_Страна_ISOКод", "ПлательщикСтрана");
	Поля.Вставить("Плательщик_ИНН", "ПлательщикИНН");
	Поля.Вставить("Плательщик_РасчСчет", "ПлательщикСчет");
	
	Поля.Вставить("Плательщик_Банк",               "ПлательщикБанк1");
	Поля.Вставить("Плательщик_Банк_Город",         "ПлательщикБанк2");
	Поля.Вставить("Плательщик_Банк_БИК",           "ПлательщикБИК");
	Поля.Вставить("Плательщик_Банк_SWIFT",         "ПлательщикСВИФТ");
	Поля.Вставить("Плательщик_Банк_КоррСчет",      "ПлательщикКорсчет");
	Поля.Вставить("Плательщик_Банк_НаименованиеМеждународное", "ПлательщикБанк3");
	Поля.Вставить("Плательщик_Банк_Адрес",         "ПлательщикБанк4");
	Поля.Вставить("Плательщик_Банк_Страна_ISOКод", "ПлательщикБанк5");
	
	
	Поля.Вставить("Получатель_Наименование", "Получатель");
	Поля.Вставить("Получатель_НаименованиеМеждународное", "ПолучательНаименованиеМеждународное");
	Поля.Вставить("Получатель_АдресСтруктурированный_Страна_ISOКод", "ПолучательСтрана");
	Поля.Вставить("Получатель_ИНН", "ПолучательИНН");
	Поля.Вставить("Получатель_КПП", "ПолучательКПП");
	Поля.Вставить("Получатель_РасчСчет", "ПолучательСчет");
	
	Поля.Вставить("Получатель_Банк",               "ПолучательБанк1");
	Поля.Вставить("Получатель_Банк_Город",         "ПолучательБанк2");
	Поля.Вставить("Получатель_Банк_БИК",           "ПолучательБИК");
	Поля.Вставить("Получатель_Банк_SWIFT",         "ПолучательСВИФТ");
	Поля.Вставить("Получатель_Банк_КоррСчет",      "ПолучательКорсчет");
	Поля.Вставить("Получатель_Банк_НаименованиеМеждународное", "ПолучательБанк3");
	Поля.Вставить("Получатель_Банк_Адрес",         "ПолучательБанк4");
	Поля.Вставить("Получатель_Банк_Страна_ISOКод", "ПолучательБанк5");
	
	
	Поля.Вставить("ПлатежВБюджет_СтатусСоставителя",     "СтатусСоставителя");
	Поля.Вставить("ПлатежВБюджет_ПоказательКБК",         "ПоказательКБК");
	Поля.Вставить("ПлатежВБюджет_ОКТМО",                 "ОКАТО");
	Поля.Вставить("ПлатежВБюджет_ПоказательОснования",   "ПоказательОснования");
	Поля.Вставить("ПлатежВБюджет_ПоказательПериода",     "ПоказательПериода");
	Поля.Вставить("ПлатежВБюджет_ПоказательНомера",      "ПоказательНомера");
	Поля.Вставить("ПлатежВБюджет_ПоказательДаты",        "ПоказательДаты");
	Поля.Вставить("ПлатежВБюджет_КодВыплат",             "ПоказательТипа");
	
	Возврат Поля;
	
КонецФункции

#КонецОбласти
//-- Локализация

#Область Загрузка

Процедура ПрочитатьДанныеВыпискиISO20022(ДвоичныеДанныеФайла, Результат)
	
	Попытка
		ОбъектXML = Новый ЧтениеXML;
		ПотокВПамяти = ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
		ОбъектXML.ОткрытьПоток(ПотокВПамяти);
		ОбъектXML.Прочитать();
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		//++ Локализация
		СвойстваОбъекта = ЭД.Свойства(); // КоллекцияСвойствXDTO
		
		Если СвойстваОбъекта.Получить("BkToCstmrStmt") = Неопределено Тогда
			ДенежныеСредстваКлиентСерверЛокализация.ПрочитатьФайлРеестраОбменаСБанком(ДвоичныеДанныеФайла, , Результат);
			Возврат;
		КонецЕсли;
		//-- Локализация
		
		Если ТипЗнч(ЭД.BkToCstmrStmt.Stmt) = Тип("ОбъектXDTO") Тогда
			Выписки = Новый Массив;
			Выписки.Добавить(ЭД.BkToCstmrStmt.Stmt);
		Иначе
			Выписки = ЭД.BkToCstmrStmt.Stmt;
		КонецЕсли;
		ДатаСозданияСтрокой = ЗначениеСвойстваXDTO(ЭД, "BkToCstmrStmt.GrpHdr.CreDtTm");
		Результат.Заголовок.ДатаСоздания = XMLЗначение(Тип("Дата"), ДатаСозданияСтрокой);
		
		Для Каждого Выписка Из Выписки Цикл
			ДанныеПоРасчетномуСчету = ДенежныеСредстваКлиентСервер.ДанныеРасчетногоСчета();
			ДанныеПоРасчетномуСчету.ДатаНачала = XMLЗначение(Тип("Дата"), Выписка.FrToDt.FrDtTm);
			ДанныеПоРасчетномуСчету.ДатаКонца = XMLЗначение(Тип("Дата"), Выписка.FrToDt.ToDtTm);
			РеквизитыВладельцаСчета = РеквизитыВладельцаСчета(Выписка.Acct);
			ДанныеПоРасчетномуСчету.РасчСчет = РеквизитыВладельцаСчета.НомерСчета;
			Результат.Заголовок.Отправитель = ЗначениеСвойстваXDTO(РеквизитыВладельцаСчета, "Svcr.FinInstnId.Nm");
			Результат.Заголовок.ДатаНачала = ДанныеПоРасчетномуСчету.ДатаНачала;
			Результат.Заголовок.ДатаКонца = ДанныеПоРасчетномуСчету.ДатаКонца;
			
			ПрочитатьОстаткиИОборотыISO20022(Выписка, ДанныеПоРасчетномуСчету);
			
			Результат.РасчетныеСчета.Добавить(ДанныеПоРасчетномуСчету);
			НаборСвойствВыписки = Выписка.Свойства(); // КоллекцияСвойствXDTO
			Если НаборСвойствВыписки.Получить("Ntry") <> Неопределено Тогда
				Если ТипЗнч(Выписка.Ntry) = Тип("ОбъектXDTO") Тогда
					Операции = Новый Массив;
					Операции.Добавить(Выписка.Ntry);
				Иначе
					Операции = Выписка.Ntry;
				КонецЕсли;
				Для Каждого Операция Из Операции Цикл
					ПрочитатьОперациюISO20022(Операция, Результат.ДокументыВыписки, РеквизитыВладельцаСчета);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла
	Исключение
		Результат.ОшибкиРазбора.Добавить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция РеквизитыВладельцаСчета(Acct)
			
	ВладелецСчета = Новый Структура;
	КодIBAN = ЗначениеСвойстваXDTO(Acct, "Id.IBAN");
	КодId = ЗначениеСвойстваXDTO(Acct, "Id.Othr.Id");
	ВладелецСчета.Вставить("НомерСчета", ?(ЗначениеЗаполнено(КодIBAN), КодIBAN, КодId));
	ВладелецСчета.Вставить("Наименование", ЗначениеСвойстваXDTO(Acct, "Ownr.Nm"));
	ПлательщикOrgId = ЗначениеСвойстваXDTO(Acct, "Ownr.Id.OrgId.Othr.Id");
	ПлательщикPrvtId = ЗначениеСвойстваXDTO(Acct, "Ownr.Id.PrvtId.Othr.Id");
	ВладелецСчета.Вставить("ИНН", ?(ЗначениеЗаполнено(ПлательщикOrgId), ПлательщикOrgId, ПлательщикPrvtId));
	ВладелецСчета.Вставить("Страна", ЗначениеСвойстваXDTO(Acct, "Ownr.PstlAdr.Ctry"));
	ВладелецСчета.Вставить("БанкSWIFT", ЗначениеСвойстваXDTO(Acct, "Svcr.FinInstnId.BIC"));
	ВладелецСчета.Вставить("Банк", ЗначениеСвойстваXDTO(Acct, "Svcr.FinInstnId.Nm"));
	
	Возврат ВладелецСчета
			
КонецФункции

Процедура ПрочитатьОстаткиИОборотыISO20022(Выписка, ДанныеПоРасчетномуСчету)
	
	// Остатки
	Если ТипЗнч(Выписка.Bal) = Тип("ОбъектXDTO") Тогда
		Балансы = Новый Массив;
		Балансы.Добавить(Выписка.Bal);
	Иначе
		Балансы = Выписка.Bal;
	КонецЕсли;
	Для Каждого Баланс Из Балансы Цикл
		
		НаборСвойствCdOrPrtry = Баланс.Tp.CdOrPrtry.Свойства(); // КоллекцияСвойствXDTO
		Если НаборСвойствCdOrPrtry.Получить("Cd") <> Неопределено Тогда
			СуммаСтрокой = Баланс.Amt.Последовательность().ПолучитьТекст(0);
			Если Баланс.Tp.CdOrPrtry.Cd = "OPBD" Тогда
				ДанныеПоРасчетномуСчету.НачальныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
			ИначеЕсли Баланс.Tp.CdOrPrtry.Cd = "CLBD" Тогда
				ДанныеПоРасчетномуСчету.КонечныйОстаток = XMLЗначение(Тип("Число"), СуммаСтрокой);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Обороты
	НаборСвойствВыписки = Выписка.Свойства(); // КоллекцияСвойствXDTO
	Если НаборСвойствВыписки.Получить("TxsSummry") <> Неопределено Тогда
		
		НаборСвойствTxsSummry = Выписка.TxsSummry.Свойства(); // КоллекцияСвойствXDTO
		Если НаборСвойствTxsSummry.Получить("TtlCdtNtries") <> Неопределено Тогда
			
			НаборСвойствTtlCdtNtries = Выписка.TxsSummry.TtlCdtNtries.Свойства(); // КоллекцияСвойствXDTO
			Если НаборСвойствTtlCdtNtries.Получить("Sum") <> Неопределено Тогда
				ДанныеПоРасчетномуСчету.ВсегоПоступило = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlCdtNtries.Sum);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НаборСвойствTxsSummry.Получить("TtlDbtNtries") <> Неопределено Тогда
			
			НаборСвойствTtlDbtNtries = Выписка.TxsSummry.TtlDbtNtries.Свойства(); // КоллекцияСвойствXDTO
			Если НаборСвойствTtlDbtNtries.Получить("Sum") <> Неопределено Тогда
				ДанныеПоРасчетномуСчету.ВсегоСписано = XMLЗначение(Тип("Число"), Выписка.TxsSummry.TtlDbtNtries.Sum);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьОперациюISO20022(Операция, ДокументыВыписки, РеквизитыВладельцаСчета)
			
	// Если платеж не исполнен, то он пропускается
	Если Операция.Sts <> "BOOK" Тогда
		Возврат;
	КонецЕсли;
	ДанныеОперации = ДенежныеСредстваСервер.ДанныеЗагружаемойОперации();
	СуммаСтрокой = Операция.Amt.Последовательность().ПолучитьТекст(0);
	ДанныеОперации.Сумма = XMLЗначение(Тип("Число"), СуммаСтрокой);
	ДанныеОперации.НаправлениеПлатежа = ?(Операция.CdtDbtInd = "DBIT", "1", "2");
	ДатаОперации = ЗначениеСвойстваXDTO(Операция, "BookgDt.Dt");
	Если ДатаОперации <> Неопределено Тогда
		ДанныеОперации.ДатаОперации = XMLЗначение(Тип("Дата"), ДатаОперации);
	КонецЕсли;
	ДатаДокумента = ЗначениеСвойстваXDTO(Операция, "ValDt.Dt");
	Если ДатаДокумента <> Неопределено Тогда
		ДанныеОперации.Дата = XMLЗначение(Тип("Дата"), ДатаДокумента);
	Иначе
		ДанныеОперации.Дата = ДанныеОперации.ДатаОперации;
	КонецЕсли;
	ДанныеОперации.Идентификатор = ЗначениеСвойстваXDTO(Операция, "AcctSvcrRef");
	ДанныеОперации.Вставить("ВидОплаты", ЗначениеСвойстваXDTO(Операция, "BkTxCd.Prtry.Cd"));
	НаборСвойствОперации = Операция.Свойства(); // КоллекцияСвойствXDTO
	Если НаборСвойствОперации.Получить("NtryDtls") <> Неопределено Тогда
		
		Если ТипЗнч(Операция.NtryDtls) = Тип("ОбъектXDTO") Тогда
			Транзакция = Операция.NtryDtls;
		Иначе
			Транзакция = Операция.NtryDtls[0];
		КонецЕсли;
		НаборСвойствТранзакции = Транзакция.Свойства(); // КоллекцияСвойствXDTO
		Если НаборСвойствТранзакции.Получить("TxDtls") <> Неопределено Тогда
			Если ТипЗнч(Транзакция.TxDtls) = Тип("ОбъектXDTO") Тогда
				ДетальТранзакции = Транзакция.TxDtls;
			Иначе
				ДетальТранзакции = Транзакция.TxDtls[0];
			КонецЕсли;
			ДанныеОперации.Номер = ЗначениеСвойстваXDTO(ДетальТранзакции, "Refs.EndToEndId");
			ОчередностьПлатежа = ЗначениеСвойстваXDTO(ДетальТранзакции, "Purp.Prtry");
			Если ЗначениеЗаполнено(ОчередностьПлатежа) Тогда
				ДанныеОперации.Вставить("ОчередностьПлатежа", Число(ОчередностьПлатежа));
			КонецЕсли;
			
			ПрочитатьДанныеПлательщикаISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета);
			ПрочитатьДанныеПолучателяISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета);
		
			ПрочитатьКодИНазначениеПлатежаISO20022(ДетальТранзакции, ДанныеОперации);
			
			ПрочитатьНалоговыеРеквизитыРФ(ДанныеОперации, ДетальТранзакции);
			
		КонецЕсли;
	КонецЕсли;
	
	ДокументыВыписки.Добавить(ДанныеОперации);
		
КонецПроцедуры

Процедура ПрочитатьНалоговыеРеквизитыРФ(ДанныеОперации, ДетальТранзакции)
	
	// Код таможенного органа для таможенных платежей
	ДанныеОперации.Вставить("ПоказательПериода", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Cdtr.RegnId"));
	ДанныеОперации.Вставить("ПолучательКПП", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Cdtr.TaxTp"));
	ДанныеОперации.Вставить("ПлательщикКПП", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Dbtr.TaxTp"));
	ДанныеОперации.Вставить("ОКАТО", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.AdmstnZn"));
	ДанныеОперации.Вставить("ПоказательНомера", ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.RefNb"));
	ПоказательДатыСтрокой = ЗначениеСвойстваXDTO(ДетальТранзакции, "Tax.Dt");
	Если ЗначениеЗаполнено(ПоказательДатыСтрокой) Тогда
		ДанныеОперации.Вставить("ПоказательДатыДок", XMLЗначение(Тип("Дата"), ПоказательДатыСтрокой));
		ДанныеОперации.Вставить("ПоказательДаты", ПоказательДатыСтрокой);
	КонецЕсли;
	СвойстваТранзакции = ДетальТранзакции.Свойства(); // КоллекцияСвойствXDTO
	Если СвойстваТранзакции.Получить("Rcrd") <> Неопределено Тогда
		Если ТипЗнч(ДетальТранзакции.Rcrd) = Тип("ОбъектXDTO") Тогда
			ДополнительныеДетали = ДетальТранзакции.Rcrd;
		Иначе
			ДополнительныеДетали = ДетальТранзакции.Rcrd[0];
		КонецЕсли;
		ДанныеОперации.Вставить("ПоказательТипа", ЗначениеСвойстваXDTO(ДополнительныеДетали, "Tp"));
		ДанныеОперации.Вставить("ПоказательОснования", ЗначениеСвойстваXDTO(ДополнительныеДетали, "Ctgy"));
		ДанныеОперации.Вставить("ПоказательКБК", ЗначениеСвойстваXDTO(ДополнительныеДетали, "CtgyDtls"));
		ДанныеОперации.Вставить("СтатусСоставителя", ЗначениеСвойстваXDTO(ДополнительныеДетали, "DbtrSts"));
		ГодНалоговогоПериодаСтрокой = ЗначениеСвойстваXDTO(ДополнительныеДетали, "Prd.Yr");
		Если ЗначениеЗаполнено(ГодНалоговогоПериодаСтрокой) Тогда
			ДатаНалоговогоПериода = XMLЗначение(Тип("Дата"), ГодНалоговогоПериодаСтрокой);
			ТипНалоговогоПериода = ЗначениеСвойстваXDTO(ДополнительныеДетали, "Prd.Tp");
			Если ЗначениеЗаполнено(ТипНалоговогоПериода) Тогда
				Если СтрНачинаетсяС(ТипНалоговогоПериода, "MM") Тогда
					ПоказательПериода = "МС." + Сред(ТипНалоговогоПериода, 3) + Год(ДатаНалоговогоПериода);
				ИначеЕсли СтрНачинаетсяС(ТипНалоговогоПериода, "HLF") Тогда
					ПоказательПериода = "ПЛ.0" + Сред(ТипНалоговогоПериода, 4) + Год(ДатаНалоговогоПериода);
				ИначеЕсли СтрНачинаетсяС(ТипНалоговогоПериода, "QTR") Тогда
					ПоказательПериода = "КВ.0" + Сред(ТипНалоговогоПериода, 4) + Год(ДатаНалоговогоПериода);
				КонецЕсли;
			Иначе
				ПоказательПериода = Формат(ДатаНалоговогоПериода, "ДФ=dd.MM.yyyy;");
			КонецЕсли;
			ДанныеОперации.Вставить("ПоказательПериода", ПоказательПериода);
		КонецЕсли;
		ТочнаяДата = ЗначениеСвойстваXDTO(ДополнительныеДетали, "Prd.FrToDt.FrDt");
		Если ЗначениеЗаполнено(ТочнаяДата) Тогда
			ДанныеОперации.Вставить("ПоказательПериода", Формат(ТочнаяДата, "ДФ=dd.MM.yyyy;"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьКодИНазначениеПлатежаISO20022(ДетальТранзакции, ДанныеОперации)
		
		ДеталиДокумента = ЗначениеСвойстваXDTO(ДетальТранзакции, "RmtInf");
		
		Если ДеталиДокумента <> Неопределено Тогда // детали документа
		
			СвойстваДокумента = ДеталиДокумента.Свойства(); // КоллекцияСвойствXDTO
			
			Если СвойстваДокумента.Получить("Ustrd") <> Неопределено Тогда // назначение платежа
				Если ТипЗнч(ДеталиДокумента.Ustrd) = Тип("Строка") Тогда
					НазначенияПлатежа = Новый Массив;
					НазначенияПлатежа.Добавить(ДеталиДокумента.Ustrd);
				Иначе
					НазначенияПлатежа = ДеталиДокумента.Ustrd;
				КонецЕсли;
				НазначениеПлатежаПолное = "";
				Для Каждого НазначениеПлатежа Из НазначенияПлатежа Цикл
					НазначениеПлатежаПолное = ?(ПустаяСтрока(НазначениеПлатежаПолное), "",
												НазначениеПлатежаПолное + Символы.ПС);
					НазначениеПлатежаПолное = НазначениеПлатежаПолное + НазначениеПлатежа;
				КонецЦикла;
				ДанныеОперации.НазначениеПлатежа = НазначениеПлатежаПолное;
			КонецЕсли;
			
			Если СвойстваДокумента.Получить("Strd") <> Неопределено Тогда
				Если ТипЗнч(ДеталиДокумента.Strd) = Тип("ОбъектXDTO") Тогда
					СтруктурныеДетали = ДеталиДокумента.Strd;
				Иначе
					СтруктурныеДетали = ДеталиДокумента.Strd[0];
				КонецЕсли;
				ДанныеОперации.Вставить("Код", ЗначениеСвойстваXDTO(СтруктурныеДетали, "CdtrRefInf.Ref"));
			КонецЕсли;
		КонецЕсли;
		
КонецПроцедуры

Процедура ПрочитатьДанныеПлательщикаISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета)
		
	Дебитор = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr");
	Если Дебитор = Неопределено И ДанныеОперации.НаправлениеПлатежа = "1" Тогда
		ДанныеОперации.Плательщик = РеквизитыВладельцаСчета.Наименование;
		ДанныеОперации.ПлательщикИНН = РеквизитыВладельцаСчета.ИНН;
		ДанныеОперации.ПлательщикСтрана = РеквизитыВладельцаСчета.Страна;
		ДанныеОперации.ПлательщикСчет = РеквизитыВладельцаСчета.НомерСчета;
		ДанныеОперации.ПлательщикБанкSWIFT = РеквизитыВладельцаСчета.БанкSWIFT;
		ДанныеОперации.ПлательщикБанк = РеквизитыВладельцаСчета.Банк;
	Иначе
		ДанныеОперации.Плательщик = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.Nm");
		ПлательщикId = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.Id.OrgId.Othr.Id");
		ПлательщикBIC = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.Id.OrgId.BICOrBEI");
		ДанныеОперации.ПлательщикИНН = ?(ЗначениеЗаполнено(ПлательщикId), ПлательщикId, ПлательщикBIC);
	
		КодСтраны = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Dbtr.CtryOfRes");
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			ИнформацияОСтране = УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(
				КодСтраны, "КодАльфа2");
			Если ЗначениеЗаполнено(ИнформацияОСтране) Тогда
				ДанныеОперации.ПлательщикСтрана = ИнформацияОСтране.Наименование;
			КонецЕсли;
		КонецЕсли;
	
		НомерСчета = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.DbtrAcct.Id.Othr.Id");
		КодIBAN = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.DbtrAcct.Id.IBAN");
		ДанныеОперации.ПлательщикСчет = ?(ЗначениеЗаполнено(НомерСчета), НомерСчета, КодIBAN);
		ДанныеОперации.ПлательщикБанкSWIFT = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.DbtrAgt.FinInstnId.BIC");
		ДанныеОперации.ПлательщикБанк = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.DbtrAgt.FinInstnId.Nm");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПолучателяISO20022(ДетальТранзакции, ДанныеОперации, РеквизитыВладельцаСчета)
		
	Кредитор = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr");
	Если Кредитор = Неопределено И ДанныеОперации.НаправлениеПлатежа = "2" Тогда
		ДанныеОперации.Получатель = РеквизитыВладельцаСчета.Наименование;
		ДанныеОперации.ПолучательИНН = РеквизитыВладельцаСчета.ИНН;
		ДанныеОперации.ПолучательСтрана = РеквизитыВладельцаСчета.Страна;
		ДанныеОперации.ПолучательСчет = РеквизитыВладельцаСчета.НомерСчета;
		ДанныеОперации.ПолучательБанкSWIFT = РеквизитыВладельцаСчета.БанкSWIFT;
		ДанныеОперации.ПолучательБанк = РеквизитыВладельцаСчета.Банк;
	Иначе
		ДанныеОперации.Получатель = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.Nm");
		ПолучательId = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.Id.OrgId.Othr.Id");
		ПолучательBIC = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.Id.OrgId.BICOrBEI");
		ДанныеОперации.ПолучательИНН = ?(ЗначениеЗаполнено(ПолучательId), ПолучательId, ПолучательBIC);
		
		КодСтраны = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.Cdtr.CtryOfRes");
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			ИнформацияОСтране = УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(
				КодСтраны, "КодАльфа2");
			Если ЗначениеЗаполнено(ИнформацияОСтране) Тогда
				ДанныеОперации.ПолучательСтрана = ИнформацияОСтране.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		НомерСчета = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.CdtrAcct.Id.Othr.Id");
		КодIBAN = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdPties.CdtrAcct.Id.IBAN");
		ДанныеОперации.ПолучательСчет = ?(ЗначениеЗаполнено(НомерСчета), НомерСчета, КодIBAN);
		
		ДанныеОперации.ПолучательБанкSWIFT = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.CdtrAgt.FinInstnId.BIC");
		ДанныеОперации.ПолучательБанк = ЗначениеСвойстваXDTO(ДетальТранзакции, "RltdAgts.CdtrAgt.FinInstnId.Nm");
	КонецЕсли;

КонецПроцедуры

Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь)
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Путь, ".");
	
	КоллекцияСвойств = ОбъектXDTO.Свойства(); // КоллекцияСвойствXDTO
	
	Если КоллекцияСвойств.Получить(МассивСтрок[0]) = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 1 Тогда
		Значение = ОбъектXDTO[МассивСтрок[0]];
		Если ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Значение;
	Иначе
		НаборСвойств = ОбъектXDTO.Свойства(); // КоллекцияСвойствXDTO
		Свойство = НаборСвойств.Получить(МассивСтрок[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Свойство.ВерхняяГраница = 1 Тогда
			ПодОбъектXDTO = ОбъектXDTO.ПолучитьXDTO(Свойство);
		Иначе
			Список = ОбъектXDTO.ПолучитьСписок(Свойство);
			Если Список.Количество() = 0 Тогда
				Возврат Неопределено;
			Иначе
				ПодОбъектXDTO = Список[0];
			КонецЕсли;
		КонецЕсли;
		МассивСтрок.Удалить(0);
		НоваяСтрока = "";
		Для Каждого Элемент Из МассивСтрок Цикл
			НоваяСтрока = НоваяСтрока + ?(ПустаяСтрока(НоваяСтрока), "", ".") + Элемент;
		КонецЦикла;
		Возврат ЗначениеСвойстваXDTO(ПодОбъектXDTO, НоваяСтрока);
	КонецЕсли;
	
КонецФункции

Процедура ПрочитатьДанныеВыпискиMT940(ДвоичныеДанныеФайла, Результат, Кодировка)

	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		
		СтрокиФайла = Новый Массив;
		
		ФайлВыписки = Новый Файл(ИмяФайла);
		
		Если Кодировка = "DOS" Тогда
			КодировкаФайла = "cp866";        // КодировкаТекста.OEM;
		Иначе
			КодировкаФайла = "windows-1251"; // КодировкаТекста.ANSI;
		КонецЕсли;
		
		ПотокЧтения = Новый ЧтениеТекста(ИмяФайла, КодировкаФайла,,, Ложь);
		
		ТекстДляРазбора = ПотокЧтения.Прочитать();
		
		МассивСтраницВыписки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстДляРазбора, ":20:");
		
		Для СтрокаМассиваВыписки = 0 По МассивСтраницВыписки.Количество() - 1 Цикл
			
			ДанныеПоРасчетномуСчету = ДенежныеСредстваКлиентСервер.ДанныеРасчетногоСчета();
			
			ТекущийБлокВыписки = МассивСтраницВыписки.Получить(СтрокаМассиваВыписки);
			
			Если Лев(ТекущийБлокВыписки, 3) = "{1:" Или ТекущийБлокВыписки = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСТегом25 = СтрПолучитьСтроку(ТекущийБлокВыписки, 2);
			
			Если СтрНайти(СтрокаСТегом25, ":25:") Тогда
				Если СтрНайти(СтрокаСТегом25, "/") Тогда
					ДанныеПоРасчетномуСчету.РасчСчет = СокрЛП(Сред(СтрокаСТегом25, СтрНайти(СтрокаСТегом25, "/") + 1));
				Иначе
					ДанныеПоРасчетномуСчету.РасчСчет = СокрЛП(Сред(СтрокаСТегом25, 5));
				КонецЕсли;
			КонецЕсли;
			
			МассивПоТегу60F = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущийБлокВыписки, ":60F:");
			МассивПоТегу60M = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущийБлокВыписки, ":60M:");
				
			Если МассивПоТегу60F.Количество() > 1 Или МассивПоТегу60M.Количество() > 1 Тогда
				
				МассивПоТегу60 = ?(МассивПоТегу60F.Количество() > 1, МассивПоТегу60F, МассивПоТегу60M);
				
				СтрокаСТегом60 = СтрПолучитьСтроку(МассивПоТегу60[1], 1);
				
				ДатаВыписки = ПолучитьДатуВыпискиMT940(СтрокаСТегом60, 2);
				
				ВалютаСтрока = Сред(СтрокаСТегом60, 8, 3);
				
				Остаток = Число(Сред(СтрокаСТегом60, 11));
				
				ДанныеПоРасчетномуСчету.ДатаНачала		 = ДатаВыписки;
				ДанныеПоРасчетномуСчету.ДатаКонца		 = ДатаВыписки;
				ДанныеПоРасчетномуСчету.НачальныйОстаток = Остаток;
				
			КонецЕсли;
			
			МассивПоТегу62F = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущийБлокВыписки, ":62F:");
			МассивПоТегу62M = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущийБлокВыписки, ":62M:");
				
			Если МассивПоТегу62F.Количество() > 1 Или МассивПоТегу62M.Количество() > 1 Тогда
				
				МассивПоТегу62 = ?(МассивПоТегу62F.Количество() > 1, МассивПоТегу62F, МассивПоТегу62M);
				
				СтрокаСТегом62 = СтрПолучитьСтроку(МассивПоТегу62[1], 1);
				
				Остаток = Число(Сред(СтрокаСТегом62, 11));

				ДанныеПоРасчетномуСчету.КонечныйОстаток = Остаток;
				
			КонецЕсли;
			
			Результат.Заголовок.Отправитель = ДанныеПоРасчетномуСчету.РасчСчет;
			Результат.Заголовок.ДатаНачала = ДанныеПоРасчетномуСчету.ДатаНачала;
			Результат.Заголовок.ДатаКонца = ДанныеПоРасчетномуСчету.ДатаКонца;
			
			Результат.РасчетныеСчета.Добавить(ДанныеПоРасчетномуСчету);
			
			МассивПоТегу61 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущийБлокВыписки, ":61:");
			
			Для СтрокаМассиваПоТегу61 = 0 По МассивПоТегу61.Количество() - 1 Цикл
				
				ТекущаяСтрокаПоВыписке = МассивПоТегу61.Получить(СтрокаМассиваПоТегу61);
			
				МассивПоТегу86 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрокаПоВыписке, ":86:");
				
				ПрочитатьОперациюМТ940(МассивПоТегу86, Результат.ДокументыВыписки, ДанныеПоРасчетномуСчету);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
		
	Исключение
		Результат.ОшибкиРазбора.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьДатуВыпискиMT940(ДатаВСтроке, НачальныйНомерСимвола);
	
	ДатаСтрока = Сред(ДатаВСтроке, НачальныйНомерСимвола, 6);
	
	Возврат Дата("20" + Лев(ДатаСтрока, 2) + Прав(ДатаСтрока, 4));
	
КонецФункции

Процедура ПрочитатьОперациюМТ940(МассивПоТегу86, ДокументыВыписки, РеквизитыВладельцаСчета)
	
	Если МассивПоТегу86.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Данные61тега = СокрЛП(МассивПоТегу86.Получить(0));
	
	КодСимвола7  = КодСимвола(Данные61тега, 7);
	КодСимвола11 = КодСимвола(Данные61тега, 11);
	
	Если (КодСимвола7 >= 65 И КодСимвола7 <= 90) Тогда
		
		ВидДвижения = Сред(Данные61тега, 7, 1);
		СимволДебитКредит = 7;
		
	ИначеЕсли (КодСимвола11 >= 65 И КодСимвола11 <= 90) Тогда
		
		ВидДвижения = Сред(Данные61тега, 11, 1);
		СимволДебитКредит = 11;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	КодСимволаОтсчетаСумм = КодСимвола(Данные61тега, СимволДебитКредит + 1);
	
	Если (КодСимволаОтсчетаСумм >= 65 И КодСимволаОтсчетаСумм <= 90) Тогда
		
		СимволНачалаОтсчетаСуммы = СимволДебитКредит + 2;
		
	Иначе
		
		СимволНачалаОтсчетаСуммы = СимволДебитКредит + 1;
		
	КонецЕсли;
	
	ДанныеОперации = ДенежныеСредстваСервер.ДанныеЗагружаемойОперации();
	
	КоличествоСимволовМеждуNИЗапятой = СтрНайти(Данные61тега, ",") - СимволНачалаОтсчетаСуммы;
	
	Если СтрНайти(Данные61тега, "//") > 0 Тогда
		Номер = СокрЛП(Сред(Данные61тега, СтрНайти(Данные61тега, "//") + 2));
	Иначе
		Номер = "";
	КонецЕсли;
	
	ДанныеОперации.ДатаОперации 	  = ПолучитьДатуВыпискиMT940(Данные61тега, 1);
	ДанныеОперации.Дата				  = ДанныеОперации.ДатаОперации;
	ДанныеОперации.НаправлениеПлатежа = ?(ВидДвижения = "D", "1", "2");
	ДанныеОперации.Номер			  = Номер;
	Попытка
		ДанныеОперации.Сумма		  = Число(Сред(Данные61тега, СимволНачалаОтсчетаСуммы, КоличествоСимволовМеждуNИЗапятой + 3));
	Исключение
		ДанныеОперации.Сумма		  = 0;
	КонецПопытки;
	
	СтрокаПоТегу86 = СтрЗаменить(МассивПоТегу86.Получить(МассивПоТегу86.Количество() - 1), Символы.ПС, "");
	
	Если СтрНайти(СтрокаПоТегу86, "~") > 0 Тогда
		СимволПоиска = "~";
	Иначе
		СимволПоиска = "?";
	КонецЕсли;
	
	МассивСтрокПоТегу = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПоТегу86, СимволПоиска);
	
	СтруктураВыписки = Новый Структура;
	СтруктураВыписки.Вставить("Наименование");
	СтруктураВыписки.Вставить("ИНН");
	СтруктураВыписки.Вставить("Страна");
	СтруктураВыписки.Вставить("НомерСчета");
	СтруктураВыписки.Вставить("БанкSWIFT");
	СтруктураВыписки.Вставить("Банк");
	
	Для Каждого ЭлементМассива Из МассивСтрокПоТегу Цикл
		Если Лев(ЭлементМассива, 2) = "30" Тогда
			ДанныеОперации.Идентификатор = ПолучитьСтрокуБезТега(ЭлементМассива);
		ИначеЕсли Лев(ЭлементМассива, 2) = "31" Тогда
			СтруктураВыписки.НомерСчета = ПолучитьСтрокуБезТега(ЭлементМассива); 
		ИначеЕсли Лев(ЭлементМассива, 2) = "32" Или Лев(ЭлементМассива, 2) = "33" Тогда
			СтруктураВыписки.Наименование = ПолучитьСтрокуБезТега(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДанныеПлательщикаМТ940(ДанныеОперации, СтруктураВыписки, РеквизитыВладельцаСчета);
	ЗаполнитьДанныеПолучателяМТ940(ДанныеОперации, СтруктураВыписки, РеквизитыВладельцаСчета);
	
	ДокументыВыписки.Добавить(ДанныеОперации);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПлательщикаМТ940(ДанныеОперации, СтруктураВыписки, РеквизитыВладельцаСчета)
	
	Если ДанныеОперации.НаправлениеПлатежа = "1" Тогда
		ДанныеОперации.Плательщик = "";
		ДанныеОперации.ПлательщикИНН = "";
		ДанныеОперации.ПлательщикСтрана = "";
		ДанныеОперации.ПлательщикСчет = РеквизитыВладельцаСчета.РасчСчет;
		ДанныеОперации.ПлательщикБанкSWIFT = "";
		ДанныеОперации.ПлательщикБанк = "";
	Иначе
		ДанныеОперации.Плательщик = СтруктураВыписки.Наименование;
		ДанныеОперации.ПлательщикИНН = СтруктураВыписки.ИНН;
		ДанныеОперации.ПлательщикСтрана = СтруктураВыписки.Страна;
		ДанныеОперации.ПлательщикСчет = СтруктураВыписки.НомерСчета;
		ДанныеОперации.ПлательщикБанкSWIFT = СтруктураВыписки.БанкSWIFT;
		ДанныеОперации.ПлательщикБанк = СтруктураВыписки.Банк;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПолучателяМТ940(ДанныеОперации, СтруктураВыписки, РеквизитыВладельцаСчета)
	
	Если ДанныеОперации.НаправлениеПлатежа = "2" Тогда
		ДанныеОперации.Получатель = "";
		ДанныеОперации.ПолучательИНН = "";
		ДанныеОперации.ПолучательСтрана = "";
		ДанныеОперации.ПолучательСчет = РеквизитыВладельцаСчета.РасчСчет;
		ДанныеОперации.ПолучательБанкSWIFT = "";
		ДанныеОперации.ПолучательБанк = "";
	Иначе
		ДанныеОперации.Получатель = СтруктураВыписки.Наименование;
		ДанныеОперации.ПолучательИНН = СтруктураВыписки.ИНН;
		ДанныеОперации.ПолучательСтрана = СтруктураВыписки.Страна;
		ДанныеОперации.ПолучательСчет = СтруктураВыписки.НомерСчета;
		ДанныеОперации.ПолучательБанкSWIFT = СтруктураВыписки.БанкSWIFT;
		ДанныеОперации.ПолучательБанк = СтруктураВыписки.Банк;
	КонецЕсли;

КонецПроцедуры

//++ Локализация

Процедура ПрочитатьДанныеАрхиваТОФК(Архив, Результат)

	Попытка
		ЧтениеZip = Новый ЧтениеZipФайла(Архив.ОткрытьПотокДляЧтения());
	Исключение
		ЧтениеZip = Неопределено;
	КонецПопытки;
	
	Если ЧтениеZip <> Неопределено Тогда
		
		Если ЧтениеZip.Элементы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла("");
		ПутьКВременнойПапке = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки);
		
		Результат.Вставить("ЛицевыеСчета", Новый Массив);
		
		Для каждого ЭлементАрхива Из ЧтениеZip.Элементы Цикл
			
			ЧтениеZip.Извлечь(ЭлементАрхива, ИмяВременнойПапки);
			Файл = Новый ДвоичныеДанные(ПутьКВременнойПапке + ЭлементАрхива.Имя);
			
			Если СтрНайти(ЭлементАрхива.Имя, "TSE_StatemAccNubp_D13") > 0 Тогда
				ПрочитатьФайлВыпискиТОФК(Файл, Результат);
			ИначеЕсли СтрНайти(ЭлементАрхива.Имя, "TSE_0401060_D07") > 0 Тогда
				ПрочитатьФайлПлатежногоПорученияТОФК(Файл, Результат);
			ИначеЕсли СтрНайти(ЭлементАрхива.Имя, "TSE_IncomingErrand_D092") > 0 Тогда
				ПрочитатьФайлРаспоряженияОСовершенииПлатежаТОФК(Файл, Результат);
			КонецЕсли;
			
		КонецЦикла;
		
		УдалитьФайлы(ИмяВременнойПапки);
		ЧтениеZip.Закрыть();
		
		Если Результат.РасчетныеСчета.Количество() = 0
			И Результат.ДокументыВыписки.Количество() <> 0 Тогда
			ЗаполнитьДанныеВыпискиТОФКПоДокументамВыписки(Результат.ДокументыВыписки, Результат.РасчетныеСчета);
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьФайлВыпискиТОФК(Файл, Результат)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Файл.ОткрытьПотокДляЧтения());

	ОбъектXDTOФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ПакетВыписки = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.TSE_StatemAccNubp_D13.ПространствоИмен);
	СхемаФорматаВыписки = ФабрикаXDTO.Создать(ПакетВыписки.КорневыеСвойства[0].Тип);
	
	СтруктураДанныхФайла = Новый Структура;
	ПрочитатьДанныеXDTOПоСхеме(ОбъектXDTOФайл, СхемаФорматаВыписки, СтруктураДанныхФайла);
	
	ЧтениеXML.Закрыть();
	
	Если СтруктураДанныхФайла.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВыпискиТОФК(СтруктураДанныхФайла, Результат);
	
КонецПроцедуры

// Читает файл платежного поручения типа TSE_0401060_D07 от ТОФК.
// 
// Параметры:
//  Файл - ДвоичныеДанные - Файл
//  Результат - Структура - Результат:
//  * Заголовок - Структура:
//   ** Отправитель - Строка - имя отправителя файла.
//   ** ДатаСоздания - Дата, Неопределено - дата создания файла.
//   ** ДатаНачала - Дата, Неопределено - дата начала периода, за который сформированы данные файла.
//   ** ДатаКонца - Дата, Неопределено - дата конца периода, за который сформированы данные файла.
//  * РасчетныеСчета - Массив из Строка - расчетные счета по прочитанному файлу.
//  * ДокументыВыписки - Массив из Структура - данные по загружаемым операциям.
//  * ОшибкиРазбора - Массив из Строка - ошибки загрузки.
//  * ЛицевыеСчета - Массив из Строка - список лицевых счетов по читаемому файлу.
//
Процедура ПрочитатьФайлПлатежногоПорученияТОФК(Файл, Результат)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Файл.ОткрытьПотокДляЧтения());

	ОбъектXDTOФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ПакетПлатежныхПоручений = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.TSE_0401060_D07.ПространствоИмен);
	СхемаФорматаПлатежногоПоручения = ФабрикаXDTO.Создать(ПакетПлатежныхПоручений.КорневыеСвойства[0].Тип);
	
	СтруктураДанныхФайла = Новый Структура;
	ПрочитатьДанныеXDTOПоСхеме(ОбъектXDTOФайл, СхемаФорматаПлатежногоПоручения, СтруктураДанныхФайла);
	
	ЧтениеXML.Закрыть();
	
	Если СтруктураДанныхФайла.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Реквизиты платежного поручения
	ДанныеОперации = ДенежныеСредстваСервер.ДанныеЗагружаемойОперации();
	ДанныеОперации.Вставить("Номер", СтруктураДанныхФайла.BasicRequisites_DocNum);
	ДанныеОперации.Вставить("Дата", СтруктураДанныхФайла.BasicRequisites_DocDate);
	ДанныеОперации.Вставить("Сумма", СтруктураДанныхФайла.BasicRequisites_PaySum);
	
	ДанныеОперации.Вставить("Идентификатор", ЗначениеТегаТОФК(СтруктураДанныхФайла, "BasicRequisites_DocGuid"));
	ДанныеОперации.Вставить("Операция", ЗначениеТегаТОФК(СтруктураДанныхФайла, "BasicRequisites_PayView", ""));
	
	ВидПлатежа = ЗначениеТегаТОФК(СтруктураДанныхФайла, "BasicRequisites_PayView_code", "");
	ДанныеОперации.Вставить("ВидПлатежа", ?(ВидПлатежа = "4", "Срочно", ""));
	
	Если СтруктураДанныхФайла.Свойство("AdditionalInfo_PayDate") Тогда
		ДанныеОперации.Вставить("СрокПлатежа", СтруктураДанныхФайла.AdditionalInfo_PayDate);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("AdditionalInfo_OperType") Тогда
		ДанныеОперации.Вставить("ВидОплаты", СтруктураДанныхФайла.AdditionalInfo_OperType);
	КонецЕсли;
	
	ДанныеОперации.Вставить("Очередность", СтруктураДанныхФайла.AdditionalInfo_PayOrder);
	
	// Реквизиты плательщика
	ДанныеОперации.Вставить("ПлательщикИНН", СтруктураДанныхФайла.PayerAndRecipient_Payer_INN);
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Payer_KPP") Тогда
		ДанныеОперации.Вставить("ПлательщикКПП", СтруктураДанныхФайла.PayerAndRecipient_Payer_KPP);
	КонецЕсли;
	
	ДанныеОперации.Вставить("Плательщик", СтруктураДанныхФайла.PayerAndRecipient_Payer_Name);
	ДанныеОперации.Вставить("ПлательщикРасчСчет", СтруктураДанныхФайла.PayerAndRecipient_Payer_CheckAcc);
	ДанныеОперации.Вставить("ПлательщикСчет", СтруктураДанныхФайла.PayerAndRecipient_Payer_CheckAcc);
	ДанныеОперации.Вставить("ПлательщикЛицевойСчет", СтруктураДанныхФайла.PayerAndRecipient_Payer_PersonalAcc);
	
	ДанныеОперации.Вставить("НаправлениеПлатежа", ?(ЗначениеЗаполнено(ДанныеОперации.ПлательщикСчет), "1", "2"));
	
	// Реквизиты банка плательщика
	ДанныеОперации.Вставить("ПлательщикБИК", СтруктураДанныхФайла.PayerAndRecipient_Payer_BIK);
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Payer_BankName") Тогда
		ДанныеОперации.Вставить("ПлательщикБанк", СтруктураДанныхФайла.PayerAndRecipient_Payer_BankName);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Payer_CorrAcc") Тогда
		ДанныеОперации.Вставить("ПлательщикКорсчет", СтруктураДанныхФайла.PayerAndRecipient_Payer_CorrAcc);
	КонецЕсли;
	
	// Реквизиты получателя
	ДанныеОперации.Вставить("ПолучательИНН", СтруктураДанныхФайла.PayerAndRecipient_Recip_INN);
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Recip_KPP") Тогда
		ДанныеОперации.Вставить("ПолучательКПП", СтруктураДанныхФайла.PayerAndRecipient_Recip_KPP);
	КонецЕсли;
	
	ДанныеОперации.Вставить("Получатель", СтруктураДанныхФайла.PayerAndRecipient_Recip_Name);
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Recip_CheckAcc") Тогда
		ДанныеОперации.Вставить("ПолучательРасчСчет", СтруктураДанныхФайла.PayerAndRecipient_Recip_CheckAcc);
		ДанныеОперации.Вставить("ПолучательСчет", СтруктураДанныхФайла.PayerAndRecipient_Recip_CheckAcc);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Recip_PersonalAcc") Тогда
		ДанныеОперации.Вставить("ПолучательЛицевойСчет", СтруктураДанныхФайла.PayerAndRecipient_Recip_PersonalAcc);
	КонецЕсли;
	
	// Реквизиты банка получателя
	ДанныеОперации.Вставить("ПолучательБИК", СтруктураДанныхФайла.PayerAndRecipient_Recip_BIK);
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Recip_BankName") Тогда
		ДанныеОперации.Вставить("ПолучательБанк", СтруктураДанныхФайла.PayerAndRecipient_Recip_BankName);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("PayerAndRecipient_Recip_CorrAcc") Тогда
		ДанныеОперации.Вставить("ПолучательКорсчет", СтруктураДанныхФайла.PayerAndRecipient_Recip_CorrAcc);
	КонецЕсли;
	
	// Налоговые платежи
	Если СтруктураДанныхФайла.Свойство("TAX_UIN") Тогда
		ДанныеОперации.Вставить("Код", СтруктураДанныхФайла.TAX_UIN);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_DrawStat") Тогда
		ДанныеОперации.Вставить("СтатусСоставителя", СтруктураДанныхФайла.TAX_DrawStat);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_KBK") Тогда
		ДанныеОперации.Вставить("ПоказательКБК", СтруктураДанныхФайла.TAX_KBK);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_OKTMO") Тогда
		ДанныеОперации.Вставить("ОКАТО", СтруктураДанныхФайла.TAX_OKTMO);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_PayReason") Тогда
		ДанныеОперации.Вставить("ПоказательОснования", СтруктураДанныхФайла.TAX_PayReason);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_Period") Тогда
		ДанныеОперации.Вставить("ПоказательПериода", СтруктураДанныхФайла.TAX_Period);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_DocNo") Тогда
		ДанныеОперации.Вставить("ПоказательНомера", СтруктураДанныхФайла.TAX_DocNo);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_DocDate") Тогда
		
		Если СтруктураДанныхФайла.TAX_DocDate = "0"
			ИЛИ СтруктураДанныхФайла.TAX_DocDate = "00" Тогда
			ДанныеОперации.Вставить("ПоказательДаты", СтруктураДанныхФайла.TAX_DocDate);
		Иначе
			ДанныеОперации.Вставить("ПоказательДаты", XMLЗначение(Тип("Дата"), СтруктураДанныхФайла.TAX_DocDate));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("TAX_TypeNP") Тогда
		ДанныеОперации.Вставить("ПоказательТипа", СтруктураДанныхФайла.TAX_TypeNP);
	КонецЕсли;
	
	// Общие данные платежного поручения
	ДанныеОперации.Вставить("НазначениеПлатежа", СтруктураДанныхФайла.TranscriptPP_PayPurpose);
	
	Если СтруктураДанныхФайла.Свойство("MarksTOFK_DateOper") Тогда
		ДанныеОперации.Вставить("ДатаОперации", СтруктураДанныхФайла.MarksTOFK_DateOper);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("DepartmentalInfo_PurposePayment") Тогда
		ДанныеОперации.Вставить("КодНазПлатежа", СтруктураДанныхФайла.DepartmentalInfo_PurposePayment);
	КонецЕсли;
	
	// Расшифровка платежа
	Если СтруктураДанныхФайла.Свойство("TSE_Tab0401060_TSE_Tab0401060_ITEM") Тогда
		
		ТаблицаРасшифровки = ПустаяТаблицаРасшифровкиТОФК();
		
		Для Каждого СтрокаРасшифровки Из СтруктураДанныхФайла.TSE_Tab0401060_TSE_Tab0401060_ITEM Цикл
			
			НоваяСтрока = ТаблицаРасшифровки.Добавить();
			
			Если ДанныеОперации.НаправлениеПлатежа = "1" Тогда
				
				НоваяСтрока.АналитическийКодРаздела = ЗначениеТегаТОФК(СтрокаРасшифровки, "AnalyticCodePay");
				
				//++ НЕ УТ
				КодПоступления = ЗначениеТегаТОФК(СтрокаРасшифровки, "CodeObjectPayer", "");
				КодРасходования = ЗначениеТегаТОФК(СтрокаРасшифровки, "DetCodeObjectPayer", "");
				НоваяСтрока.СтатьяЦелевыхСредств = СтатьяЦелевыхСредствПоКоду(КодПоступления, КодРасходования);
				//-- НЕ УТ
				
			Иначе
				
				НоваяСтрока.АналитическийКодРаздела = ЗначениеТегаТОФК(СтрокаРасшифровки, "AnalyticCodeRec");
			
				//++ НЕ УТ
				КодПоступления = ЗначениеТегаТОФК(СтрокаРасшифровки, "CodeObjectRecipient", "");
				КодРасходования = ЗначениеТегаТОФК(СтрокаРасшифровки, "DetCodeObjectRecipient", "");
				НоваяСтрока.СтатьяЦелевыхСредств = СтатьяЦелевыхСредствПоКоду(КодПоступления, КодРасходования);
				//-- НЕ УТ
				
			КонецЕсли;
			
			НоваяСтрока.ИГК = ЗначениеТегаТОФК(СтрокаРасшифровки, "ContractID");
			НоваяСтрока.Сумма = ЗначениеТегаТОФК(СтрокаРасшифровки, "Sum");
			НоваяСтрока.СуммаНДС = ЗначениеТегаТОФК(СтрокаРасшифровки, "SumNDS");
			
		КонецЦикла;
		
		Разделы = ТаблицаРасшифровки.Скопировать(, "АналитическийКодРаздела, Сумма, СуммаНДС");
		Разделы.Свернуть("АналитическийКодРаздела", "Сумма, СуммаНДС");
		
		ВсегоСтрок = Разделы.Количество();
		
		Если ВсегоСтрок > 1 Тогда
			
			Для Индекс = 1 По ВсегоСтрок - 1 Цикл
				
				Раздел = Разделы[Индекс];
				Отбор = Новый Структура("АналитическийКодРаздела");
				ЗаполнитьЗначенияСвойств(Отбор, Раздел);
				
				ТаблицаПоОтбору = ТаблицаРасшифровки.Скопировать(Отбор);
				
				Если ТаблицаПоОтбору.Колонки.Найти("СтатьяЦелевыхСредств") <> Неопределено Тогда
					ТаблицаПоОтбору.Свернуть("ИГК, АналитическийКодРаздела, СтатьяЦелевыхСредств", "Сумма, СуммаНДС");
				Иначе
					ТаблицаПоОтбору.Свернуть("ИГК, АналитическийКодРаздела", "Сумма, СуммаНДС");
				КонецЕсли;
				
				ДанныеОперацииКопия = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеОперации);
				ДанныеОперацииКопия.Вставить("АналитическийКодРаздела", Раздел.АналитическийКодРаздела);
				ДанныеОперацииКопия.Вставить("Сумма", Раздел.Сумма + Раздел.СуммаНДС);
				//++ НЕ УТ
				ДанныеОперацииКопия.Вставить("СтатьяЦелевыхСредств", ТаблицаПоОтбору[0].СтатьяЦелевыхСредств);
				//-- НЕ УТ
				ДанныеОперацииКопия.Вставить("ИГК", ТаблицаПоОтбору[0].ИГК);
				
				Результат.ДокументыВыписки.Добавить(ДанныеОперацииКопия);
				
			КонецЦикла;
			
		КонецЕсли;
			
		СтрокаТаблицы = ТаблицаРасшифровки[0];
		ДанныеОперации.Вставить("АналитическийКодРаздела", Разделы[0].АналитическийКодРаздела);
		//++ НЕ УТ
		ДанныеОперации.Вставить("СтатьяЦелевыхСредств", СтрокаТаблицы.СтатьяЦелевыхСредств);
		//-- НЕ УТ
		ДанныеОперации.Вставить("ИГК", СтрокаТаблицы.ИГК);
		ДанныеОперации.Вставить("Сумма", Разделы[0].Сумма + Разделы[0].СуммаНДС);
		
	КонецЕсли;
	
	Результат.ДокументыВыписки.Добавить(ДанныеОперации);
	
	Результат.Заголовок.ДатаНачала = ?(Результат.Заголовок.ДатаНачала = Неопределено,
									ДанныеОперации.Дата,
									Мин(Результат.Заголовок.ДатаНачала, ДанныеОперации.Дата));
	Результат.Заголовок.ДатаКонца = ?(Результат.Заголовок.ДатаКонца = Неопределено,
									КонецДня(ДанныеОперации.Дата),
									Макс(Результат.Заголовок.ДатаКонца, КонецДня(ДанныеОперации.Дата)));
									
	Для Каждого РасчетныйСчет Из Результат.РасчетныеСчета Цикл
		РасчетныйСчет.ДатаНачала = Результат.Заголовок.ДатаНачала;
		РасчетныйСчет.ДатаКонца = Результат.Заголовок.ДатаКонца;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьФайлРаспоряженияОСовершенииПлатежаТОФК(Файл, Результат)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Файл.ОткрытьПотокДляЧтения());

	ОбъектXDTOФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ПакетРаспоряжения = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.MSC_TransfOrderAcc.ПространствоИмен);
	СхемаФорматаРаспоряжения = ФабрикаXDTO.Создать(ПакетРаспоряжения.КорневыеСвойства[0].Тип);
	
	СтруктураДанныхФайла = Новый Структура;
	ПрочитатьДанныеXDTOПоСхеме(ОбъектXDTOФайл, СхемаФорматаРаспоряжения, СтруктураДанныхФайла);
	
	ЧтениеXML.Закрыть();
	
	Если СтруктураДанныхФайла.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеРаспоряженияТОФК(СтруктураДанныхФайла, Результат);

КонецПроцедуры

//++ НЕ УТ
Функция СтатьяЦелевыхСредствПоКоду(КодПоступления, КодРасходования)
	
	Если КодПоступления = Лев(КодРасходования, 4) Тогда
		Возврат Справочники.НаправленияРасходованияЦелевыхСредств.НайтиПоКоду(КодРасходования);
	Иначе
		Возврат Справочники.ИсточникиПоступленияЦелевыхСредств.НайтиПоКоду(КодПоступления);
	КонецЕсли;
	
КонецФункции
//-- НЕ УТ

Функция ЗначениеТегаТОФК(Источник, ИмяТега, ЗначениеПоУмолчанию = Неопределено)
	
	Если Источник.Свойство(ИмяТега) Тогда
		Возврат Источник[ИмяТега];
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Процедура ЗаполнитьДанныеВыпискиТОФК(Выписка, Результат)

	Если Результат.ЛицевыеСчета.Найти(Выписка.BasicRequisites_AccNum) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат.ЛицевыеСчета.Добавить(Выписка.BasicRequisites_AccNum);
	Результат.Заголовок.ДатаНачала = ?(Результат.Заголовок.ДатаНачала = Неопределено,
									КонецДня(Выписка.BasicRequisites_DatePrevStatement) + 1,
									Мин(Результат.Заголовок.ДатаНачала, КонецДня(Выписка.BasicRequisites_DatePrevStatement) + 1));
	Результат.Заголовок.ДатаКонца = ?(Результат.Заголовок.ДатаКонца = Неопределено,
									КонецДня(Выписка.BasicRequisites_DocDate),
									Макс(Результат.Заголовок.ДатаКонца, КонецДня(Выписка.BasicRequisites_DocDate)));
	Результат.Заголовок.ДатаСоздания = Выписка.BasicRequisites_DocDate;
	Результат.Заголовок.Отправитель = Выписка.ORFK_NameFK;
	
	Если Выписка.Свойство("TSE_BalanAcc_D13_TSE_BalanAcc_D13_ITEM")
		ИЛИ Выписка.Свойство("TSE_BalanAcc2_D13_TSE_BalanAcc2_D13_ITEM") Тогда
		
		ТаблицаОстатков = ?(Выписка.Свойство("TSE_BalanAcc_D13_TSE_BalanAcc_D13_ITEM"),
							Выписка.TSE_BalanAcc_D13_TSE_BalanAcc_D13_ITEM,
							Выписка.TSE_BalanAcc2_D13_TSE_BalanAcc2_D13_ITEM);
		ОстаткиСредствПоРазделам = НоваяТаблицаОстатковВыпискиТОФК();
		
		Для Каждого ТекущийОстаток Из ТаблицаОстатков Цикл
			
			НоваяСтрока = ОстаткиСредствПоРазделам.Добавить();
			
			НоваяСтрока.АналитическийКодРаздела = ТекущийОстаток.AnalitCode;
			НоваяСтрока.НачальныйОстаток = ТекущийОстаток.SDTotal;
			НоваяСтрока.КонечныйОстаток = ТекущийОстаток.EDTotal;
		
		КонецЦикла;
		
		ЗаполнитьСведенияОбОстаткахТОФК(ОстаткиСредствПоРазделам,
										Выписка.BasicRequisites_AccNum,
										Результат.Заголовок.ДатаНачала,
										Результат.Заголовок.ДатаКонца,
										Результат.РасчетныеСчета);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеВыпискиТОФКПоДокументамВыписки(ДокументыВыписки, РасчетныеСчета)

	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("РасчСчет", Новый ОписаниеТипов("Строка"));
	ТаблицаСчетов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаСчетов.Колонки.Добавить("РазделЛицевогоСчета", Новый ОписаниеТипов("Строка"));
	ТаблицаСчетов.Колонки.Добавить("НомерЛицевогоСчета", Новый ОписаниеТипов("Строка"));
	ТаблицаСчетов.Колонки.Добавить("ВсегоПоступило", Новый ОписаниеТипов("Число"));
	ТаблицаСчетов.Колонки.Добавить("ВсегоСписано", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекущийДокумент Из ДокументыВыписки Цикл
		
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.Дата = ТекущийДокумент.Дата;
		НоваяСтрока.РазделЛицевогоСчета = ТекущийДокумент.АналитическийКодРаздела;
			
		Если ТекущийДокумент.НаправлениеПлатежа = "1" Тогда
			
			НоваяСтрока.РасчСчет = ТекущийДокумент.ПлательщикСчет;
			НоваяСтрока.НомерЛицевогоСчета = ТекущийДокумент.ПлательщикЛицевойСчет;
			НоваяСтрока.ВсегоСписано = ТекущийДокумент.Сумма;
			
		Иначе
			
			НоваяСтрока.РасчСчет = ТекущийДокумент.ПолучательСчет;
			НоваяСтрока.НомерЛицевогоСчета = ТекущийДокумент.ПолучательЛицевойСчет;
			НоваяСтрока.ВсегоПоступило = ТекущийДокумент.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОборотПоВыписке = ТаблицаСчетов.Скопировать();
	ОборотПоВыписке.Свернуть("РасчСчет, РазделЛицевогоСчета, НомерЛицевогоСчета", "ВсегоПоступило, ВсегоСписано");
	
	Для Каждого СтрокаТаблицы Из ОборотПоВыписке Цикл
	
		ДанныеПоСчету = ДенежныеСредстваКлиентСервер.ДанныеРасчетногоСчета();
		ЗаполнитьЗначенияСвойств(ДанныеПоСчету, СтрокаТаблицы);
		
		Отбор = Новый Структура("РасчСчет, РазделЛицевогоСчета, НомерЛицевогоСчета");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		
		СписокДат = ТаблицаСчетов.Скопировать(Отбор, "Дата");
		СписокДат.Сортировать("Дата");
		
		ДанныеПоСчету.ДатаНачала = СписокДат[0].Дата;
		ДанныеПоСчету.ДатаКонца = СписокДат[СписокДат.Количество() - 1].Дата;
		
		РасчетныеСчета.Добавить(ДанныеПоСчету);
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеРаспоряженияТОФК(СтруктураДанныхФайла, Результат)

	ДанныеОперации = ДенежныеСредстваСервер.ДанныеЗагружаемойОперации();
	ДанныеОперации.Вставить("Номер", СтруктураДанныхФайла.AccDoc_DocNum);
	ДанныеОперации.Вставить("Дата", СтруктураДанныхФайла.AccDoc_DocDate);
	
	Если СтруктураДанныхФайла.Свойство("ExecDate") Тогда
		ДанныеОперации.Вставить("ДатаОперации", СтруктураДанныхФайла.ExecDate);
		ДанныеОперации.Вставить("НаправлениеПлатежа", "1");
	Иначе
		ДанныеОперации.Вставить("ДатаОперации", СтруктураДанныхФайла.AccDoc_DocDate);
		ДанныеОперации.Вставить("НаправлениеПлатежа", "2");
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("AddInfo_PaymentID") Тогда
		ДанныеОперации.Вставить("Идентификатор", ЗначениеТегаТОФК(СтруктураДанныхФайла, "AddInfo_PaymentID"));
	КонецЕсли;
	
	ДанныеОперации.Вставить("Сумма", СтруктураДанныхФайла.BasicRequisites_PaySum);
	ДанныеОперации.Вставить("Валюта", Справочники.Валюты.НайтиПоКоду(СтруктураДанныхФайла.CurrCode_OKV));
	
	// Реквизиты плательщика
	ДанныеОперации.Вставить("ПлательщикИНН", СтруктураДанныхФайла.Payer_INN);
	ДанныеОперации.Вставить("ПлательщикКПП", СтруктураДанныхФайла.Payer_KPP);
	ДанныеОперации.Вставить("Плательщик", СтруктураДанныхФайла.Payer_Name);
	ДанныеОперации.Вставить("ПлательщикРасчСчет", СтруктураДанныхФайла.Payer_CheckAcc);
	ДанныеОперации.Вставить("ПлательщикСчет", СтруктураДанныхФайла.Payer_CheckAcc);
	
	Если СтруктураДанныхФайла.Свойство("Payer_AccNum") Тогда
		ДанныеОперации.Вставить("ПлательщикЛицевойСчет", СтруктураДанныхФайла.Payer_AccNum);
	КонецЕсли;
	
	// Реквизиты банка плательщика
	ДанныеОперации.Вставить("ПлательщикБИК", СтруктураДанныхФайла.Payer_BIK);
	ДанныеОперации.Вставить("ПлательщикБанк", СтруктураДанныхФайла.Payer_BankName);
	ДанныеОперации.Вставить("ПлательщикКорсчет", СтруктураДанныхФайла.Payer_CorrAcc);
	
	// Реквизиты получателя
	ДанныеОперации.Вставить("ПолучательИНН", СтруктураДанныхФайла.Recip_INN);
	ДанныеОперации.Вставить("ПолучательКПП", СтруктураДанныхФайла.Recip_KPP);
	ДанныеОперации.Вставить("Получатель", СтруктураДанныхФайла.Recip_Name);
	ДанныеОперации.Вставить("ПолучательРасчСчет", СтруктураДанныхФайла.Recip_CheckAcc);
	ДанныеОперации.Вставить("ПолучательСчет", СтруктураДанныхФайла.Recip_CheckAcc);
	
	Если СтруктураДанныхФайла.Свойство("Recip_AccNum") Тогда
		ДанныеОперации.Вставить("ПолучательЛицевойСчет", СтруктураДанныхФайла.Recip_AccNum);
	КонецЕсли;
	
	// Реквизиты банка получателя
	ДанныеОперации.Вставить("ПолучательБИК", СтруктураДанныхФайла.Recip_BIK);
	ДанныеОперации.Вставить("ПолучательБанк", СтруктураДанныхФайла.Recip_BankName);
	ДанныеОперации.Вставить("ПолучательКорсчет", СтруктураДанныхФайла.Recip_CorrAcc);
	
	// Налоговые реквизиты
	Если СтруктураДанныхФайла.Свойство("DepInfo_TAX_DrawStat") Тогда
		ДанныеОперации.Вставить("СтатусСоставителя", СтруктураДанныхФайла.DepInfo_TAX_DrawStat);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("DepInfo_TAX_KBK") Тогда
		ДанныеОперации.Вставить("ПоказательКБК", СтруктураДанныхФайла.DepInfo_TAX_KBK);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("DepInfo_TAX_OKTMO") Тогда
		ДанныеОперации.Вставить("ОКАТО", СтруктураДанныхФайла.DepInfo_TAX_OKTMO);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("DepInfo_TAX_PayReason") Тогда
		ДанныеОперации.Вставить("ПоказательОснования", СтруктураДанныхФайла.DepInfo_TAX_PayReason);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("DepInfo_TAX_Period") Тогда
		ДанныеОперации.Вставить("ПоказательПериода", СтруктураДанныхФайла.DepInfo_TAX_Period);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("DepInfo_TAX_DocNo") Тогда
		ДанныеОперации.Вставить("ПоказательНомера", СтруктураДанныхФайла.DepInfo_TAX_DocNo);
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("DepInfo_TAX_DocDate") Тогда
		
		Если СтруктураДанныхФайла.TAX_DocDate = "0"
			ИЛИ СтруктураДанныхФайла.TAX_DocDate = "00" Тогда
			ДанныеОперации.Вставить("ПоказательДаты", СтруктураДанныхФайла.DepInfo_TAX_DocDate);
		Иначе
			ДанныеОперации.Вставить("ПоказательДаты", XMLЗначение(Тип("Дата"), СтруктураДанныхФайла.DepInfo_TAX_DocDate));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанныхФайла.Свойство("Payer_Ident") Тогда
		ДанныеОперации.Вставить("Код", СтруктураДанныхФайла.Payer_Ident);
	КонецЕсли;
	
	// Общие данные платежного поручения
	ДанныеОперации.Вставить("НазначениеПлатежа", СтруктураДанныхФайла.DepInfo_PayPurpose);
	
	// Расшифровка поручения
	Если СтруктураДанныхФайла.Свойство("OrdersAcc_OrdersAcc_ITEM") Тогда
		
		ТаблицаРасшифровки = ПустаяТаблицаРасшифровкиТОФК();
		
		Для Каждого СтрокаРасшифровки Из СтруктураДанныхФайла.OrdersAcc_OrdersAcc_ITEM Цикл
			
			НоваяСтрока = ТаблицаРасшифровки.Добавить();
			
			Если ДанныеОперации.НаправлениеПлатежа = "1" Тогда
				
				НоваяСтрока.АналитическийКодРаздела = ЗначениеТегаТОФК(СтрокаРасшифровки, "Order_AnalyticCodePay");
				
				//++ НЕ УТ
				КодЦели = ЗначениеТегаТОФК(СтрокаРасшифровки, "Order_CodeObjectPay", "");
				НоваяСтрока.СтатьяЦелевыхСредств = Справочники.НаправленияРасходованияЦелевыхСредств.НайтиПоКоду(КодЦели);
				//-- НЕ УТ
				
			Иначе
				
				НоваяСтрока.АналитическийКодРаздела = ЗначениеТегаТОФК(СтрокаРасшифровки, "Order_AnalyticCodeRec");
			
				//++ НЕ УТ
				КодЦели = ЗначениеТегаТОФК(СтрокаРасшифровки, "Order_CodeObjectRec", "");
				НоваяСтрока.СтатьяЦелевыхСредств = Справочники.ИсточникиПоступленияЦелевыхСредств.НайтиПоКоду(КодЦели);
				//-- НЕ УТ
				
			КонецЕсли;
			
			НоваяСтрока.ИГК = ЗначениеТегаТОФК(СтрокаРасшифровки, "Order_IGK");
			НоваяСтрока.Сумма = ЗначениеТегаТОФК(СтрокаРасшифровки, "Order_Sum");
			
		КонецЦикла;
		
		Разделы = ТаблицаРасшифровки.Скопировать(, "АналитическийКодРаздела, Сумма");
		Разделы.Свернуть("АналитическийКодРаздела", "Сумма");
		
		ВсегоСтрок = Разделы.Количество();
		
		Если ВсегоСтрок > 1 Тогда
			
			Для Индекс = 1 По ВсегоСтрок - 1 Цикл
				
				Раздел = Разделы[Индекс];
				Отбор = Новый Структура("АналитическийКодРаздела");
				ЗаполнитьЗначенияСвойств(Отбор, Раздел);
				
				ТаблицаПоОтбору = ТаблицаРасшифровки.Скопировать(Отбор);
				
				Если ТаблицаПоОтбору.Колонки.Найти("СтатьяЦелевыхСредств") <> Неопределено Тогда
					ТаблицаПоОтбору.Свернуть("ИГК, АналитическийКодРаздела, СтатьяЦелевыхСредств", "Сумма");
				Иначе
					ТаблицаПоОтбору.Свернуть("ИГК, АналитическийКодРаздела", "Сумма");
				КонецЕсли;
				
				ДанныеОперацииКопия = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеОперации);
				ДанныеОперацииКопия.Вставить("АналитическийКодРаздела", Раздел.АналитическийКодРаздела);
				ДанныеОперацииКопия.Вставить("Сумма", Раздел.Сумма);
				//++ НЕ УТ
				ДанныеОперацииКопия.Вставить("СтатьяЦелевыхСредств", ТаблицаПоОтбору[0].СтатьяЦелевыхСредств);
				//-- НЕ УТ
				ДанныеОперацииКопия.Вставить("ИГК", ТаблицаПоОтбору[0].ИГК);
				
				Результат.ДокументыВыписки.Добавить(ДанныеОперацииКопия);
				
			КонецЦикла;
			
		КонецЕсли;
			
		СтрокаТаблицы = ТаблицаРасшифровки[0];
		ДанныеОперации.Вставить("АналитическийКодРаздела", Разделы[0].АналитическийКодРаздела);
		//++ НЕ УТ
		ДанныеОперации.Вставить("СтатьяЦелевыхСредств", СтрокаТаблицы.СтатьяЦелевыхСредств);
		//-- НЕ УТ
		ДанныеОперации.Вставить("ИГК", СтрокаТаблицы.ИГК);
		ДанныеОперации.Вставить("Сумма", Разделы[0].Сумма);
		
	КонецЕсли;
	
	Результат.ДокументыВыписки.Добавить(ДанныеОперации);
	
	Результат.Заголовок.ДатаНачала = ?(Результат.Заголовок.ДатаНачала = Неопределено,
									ДанныеОперации.Дата,
									Мин(Результат.Заголовок.ДатаНачала, ДанныеОперации.Дата));
	Результат.Заголовок.ДатаКонца = ?(Результат.Заголовок.ДатаКонца = Неопределено,
									КонецДня(ДанныеОперации.Дата),
									Макс(Результат.Заголовок.ДатаКонца, КонецДня(ДанныеОперации.Дата)));
									
	Для Каждого РасчетныйСчет Из Результат.РасчетныеСчета Цикл
		
		Если РасчетныйСчет.РасчСчет = ДанныеОперации.ПлательщикРасчСчет
			Или РасчетныйСчет.РасчСчет = ДанныеОперации.ПолучательРасчСчет Тогда
			
			РасчетныйСчет.ДатаНачала = Результат.Заголовок.ДатаНачала;
			РасчетныйСчет.ДатаКонца = Результат.Заголовок.ДатаКонца;
			
			РасчетныйСчет.ВсегоПоступило = ?(ДанныеОперации.НаправлениеПлатежа = "1", 0, ДанныеОперации.Сумма);
			РасчетныйСчет.ВсегоСписано = ?(ДанныеОперации.НаправлениеПлатежа = "1", ДанныеОперации.Сумма, 0);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

//-- Локализация

Функция ПолучитьСтрокуБезТега(СтрокаСТегом)
	
	Возврат(Прав(СтрокаСТегом, СтрДлина(СтрокаСТегом) - 2));
	
КонецФункции

Процедура ПодготовитьСтрокиВыписки(ДокументыКЗагрузке, БанковскийСчет, РеквизитыСчета, НастройкиЗагрузки)
	
	ТипыПлатежныхДокументовПоступления = Новый Соответствие;
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	ТипыПлатежныхДокументовСписания = Новый Соответствие;
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("БАНКОВСКИЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	СтатусыСоставителейТаможенныхПлатежей = Новый Массив;
	СтатусыСоставителейТаможенныхПлатежей.Добавить("06");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("16");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("17");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("18");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("19");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("20");
	
	СобственныеСчета = СобственныеСчета(БанковскийСчет);
	
	НомерСчета = РеквизитыСчета.НомерСчета;
	
	//++ Локализация
	НомерЛицевогоСчета = РеквизитыСчета.НомерЛицевогоСчета;
	РазделЛицевогоСчета = РеквизитыСчета.РазделЛицевогоСчета;
	//-- Локализация
	
	// Подготовка строк выписки к поиску документов и контрагентов, заполнение общих реквизитов. Первичное распознавание.
	Для каждого СтрокаДокумента Из ДокументыКЗагрузке Цикл
		
		Если Не СтрокаДокумента.Загружать Или
			(Не СтрокаДокумента.ПлательщикСчет = НомерСчета
			И Не СтрокаДокумента.ПолучательСчет = НомерСчета) Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Входящий или исходящий платеж
		Если СтрокаДокумента.ПлательщикСчет = НомерСчета И СтрокаДокумента.ПолучательСчет = НомерСчета Тогда // Если БИК банка изменился, а номер счета остался прежним
			Исходящий = ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано);
		Иначе
			Исходящий = (СтрокаДокумента.ПлательщикСчет = НомерСчета);
		КонецЕсли;
		СтрокаДокумента.Исходящий = Исходящий;
		
		//++ Локализация
		НеподходящийЛицевойСчет = СтрокаДокумента.ПлательщикЛицевойСчет <> НомерЛицевогоСчета
									И СтрокаДокумента.ПолучательЛицевойСчет <> НомерЛицевогоСчета;
		
		Если НеподходящийЛицевойСчет Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		
		НеподходящийКодРаздела = СтрокаДокумента.АналитическийКодРаздела <> РазделЛицевогоСчета;
		
		Если Исходящий
			И НеподходящийКодРаздела Тогда
			СтрокаДокумента.Загружать = Ложь;
			Продолжить;
		КонецЕсли;
		//-- Локализация
		
		// Дата документа
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда
			СтрокаДокумента.ДатаДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
			Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаДок) Тогда
				СтрокаДокумента.ДатаДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
					?(Исходящий, СтрокаДокумента.ДатаСписано, СтрокаДокумента.ДатаПоступило));
			КонецЕсли;
		КонецЕсли;
		
		// Тип платежного документа
		ТипСтрокой = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е");
		Если Исходящий Тогда
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовСписания.Получить(ТипСтрокой);
		Иначе
			ТипПлатежногоДокумента = ТипыПлатежныхДокументовПоступления.Получить(ТипСтрокой);
		КонецЕсли;
		Если ТипПлатежногоДокумента = Неопределено Тогда
			ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
		КонецЕсли;

		СтрокаДокумента.ТипПлатежногоДокумента = ТипПлатежногоДокумента;
		
		// Хоз. операция по виду оплаты
		Если СтрокаДокумента.ВидОплаты = "03" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "04" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "13" Тогда
			Если Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
			Иначе
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
			КонецЕсли;
		КонецЕсли;
		
		// Переводы
		Если СтрокаДокумента.Исходящий Тогда
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательБИК);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПолучательСВИФТ) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательСВИФТ);
			Иначе
				СтруктураПоиска = Новый Структура("НомерСчета", СтрокаДокумента.ПолучательСчет);
			КонецЕсли;
			
			СобственныеСчетаПолучатели = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаПолучатели.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаПолучатели[0]["Ссылка"];
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
					СтрокаДокумента.Загружать = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПлательщикСчет, СтрокаДокумента.ПлательщикБИК);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПлательщикСВИФТ) Тогда
				СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаДокумента.ПлательщикСчет, СтрокаДокумента.ПлательщикСВИФТ);
			Иначе
				СтруктураПоиска = Новый Структура("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			КонецЕсли;
			
			СобственныеСчетаОтправители = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
			Если СобственныеСчетаОтправители.Количество() > 0 Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
				СтрокаДокумента.СчетКонтрагента = СобственныеСчетаОтправители[0]["Ссылка"];
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
					СтрокаДокумента.Загружать = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Инкассация
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			
			БалансовыйСчет = Лев(СтрокаДокумента.ПлательщикСчет, 5);
			Если БалансовыйСчет    = "20202" // поступление/списание наличных из кассы
				Или БалансовыйСчет = "20208" // поступление/списание наличных из банкомата, устройства Cash-in
			Тогда
				Если СтрокаДокумента.Исходящий Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
				Иначе
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Контрагент
		Если Исходящий Тогда
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
		Иначе
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
		КонецЕсли;
		СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
		СтрокаДокумента.СокрИмяКонтрагента = СтруктураНаименования.СокращенноеНаименование;
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 10)) Тогда
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаДокумента.ИмяКонтрагента, 12)) Тогда
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 13));
			Иначе
				СтрокаДокумента.ИмяКонтрагента = СокрЛП(Сред(СтрокаДокумента.ИмяКонтрагента, 11));
			КонецЕсли;
		КонецЕсли;
		
		ИННДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательИНН, СтрокаДокумента.ПлательщикИНН);
		СтрокаДокумента.ПроверятьИНН = ЗначениеЗаполнено(ИННДляПоиска)
										И ИННДляПоиска <> "000000000000"
										И ИННДляПоиска <> "0000000000";
	
		КППДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательКПП, СтрокаДокумента.ПлательщикКПП);
		СтрокаДокумента.ПроверятьКПП = (ЗначениеЗаполнено(КППДляПоиска) И КППДляПоиска <> "0");
		
		// УИП
		Если ЗначениеЗаполнено(СтрокаДокумента.Код) Тогда
			СтрокаДокумента.ЗаполненУИП = Истина;
		КонецЕсли;
		
		// Назначение платежа
		Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
			Для инд = 2 По 6 Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + инд]) Тогда
					Прервать;
				КонецЕсли;
				СтрокаДокумента.НазначениеПлатежа =
					СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + инд];
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДокумента.ФорматированноеНазначениеПлатежа =
			ДенежныеСредстваСервер.ФорматироватьНазначениеПлатежа(СтрокаДокумента.НазначениеПлатежа);
		
		// Сумма
		СписокСумм = СтрРазделить(СтрокаДокумента.Сумма, "+");
		
		Для Каждого ТекущаяСумма Из СписокСумм Цикл
			
			Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекущаяСумма);
			Если Сумма <> Неопределено Тогда
				Если Сумма < 0 Тогда
					Сумма = - Сумма;
				КонецЕсли;
				СтрокаДокумента.СуммаДокумента = СтрокаДокумента.СуммаДокумента + Сумма;
				Если Исходящий Тогда
					СтрокаДокумента.СуммаСписано   = СтрокаДокумента.СуммаСписано + Сумма;
				Иначе
					СтрокаДокумента.СуммаПоступило = СтрокаДокумента.СуммаПоступило + Сумма;
				КонецЕсли;
			Иначе
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверная сумма документа (%1)!';
							|en = 'Incorrect document amount (%1).'"), СтрокаДокумента.Сумма));
			КонецЕсли;
		
		КонецЦикла;
		
		//++ Локализация
		
		// Очередность платежа
		Буфер = СокрЛП(СтрокаДокумента.Очередность);
		Если Буфер <> "" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Буфер) Тогда
			СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
		Иначе
			СтрокаДокумента.ОчередностьПлатежа = 5;
		КонецЕсли;
		
		// СБП
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			
			СтрокаДокумента.ЭтоСБП = ЭтоОперацияСБП(СтрокаДокумента.НазначениеПлатежа);
			
			Если СтрокаДокумента.ЭтоСБП Тогда
			
				СтатусКонтрагента = ?(Исходящий, Лев(СтрокаДокумента.ПолучательСчет, 3), Лев(СтрокаДокумента.ПлательщикСчет, 3));
				ЭтоСчетФизЛица = СтатусКонтрагента = "408";
				
				Если Исходящий Тогда
					
					Если ЭтоКомиссияСБП(СтрокаДокумента.НазначениеПлатежа) Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
					ИначеЕсли ЭтоВозврат(СтрокаДокумента.НазначениеПлатежа) Тогда
						
						Если СтрДлина(ИННДляПоиска) = 12
							Или (Не СтрокаДокумента.ПроверятьИНН И ЭтоСчетФизЛица) Тогда
							СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
						Иначе
							СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Если СтрДлина(ИННДляПоиска) = 12
						Или (Не СтрокаДокумента.ПроверятьИНН И ЭтоСчетФизЛица) Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
					Иначе
						СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
					КонецЕсли;
					
				КонецЕсли;
				
				Если (СтрокаДокумента.Получатель = СтрокаДокумента.ПолучательБанк1
					Или СтрокаДокумента.Плательщик = СтрокаДокумента.ПлательщикБанк1)
					И ЭтоСчетФизЛица Тогда
					
					Если НастройкиЗагрузки.РежимЗаполненияКонтрагентаПоQRПлатежу = 0 Тогда
						
						СтрокаДокумента.ИмяКонтрагента = ВРег(ВырезкаФИОФизлицаВНазначенииПлатежаСБП(СтрокаДокумента.НазначениеПлатежа));
						
						Если СтрокаДокумента.ИмяКонтрагента <> "" Тогда
							СтруктураНаименования = ДенежныеСредстваСерверЛокализация.НаименованиеОрганизации(СтрокаДокумента.ИмяКонтрагента);
							СтрокаДокумента.СокрИмяКонтрагента = СтруктураНаименования.СокращенноеНаименование;
						Иначе
							СтрокаДокумента.СоздаватьКонтрагента = Ложь;
						КонецЕсли;
						
					Иначе
						СтрокаДокумента.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Платеж в бюджет
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) Тогда
			СтрокаДокумента.ПлатежВБюджет = Истина;
			
			Если СтатусыСоставителейТаможенныхПлатежей.Найти(СтрокаДокумента.СтатусСоставителя) <> Неопределено Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
			ИначеЕсли СтрокаДокумента.СтатусСоставителя = "08" Тогда
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
			Иначе
				СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			КонецЕсли;
			
			Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж И Не Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратНалогов;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
			ИначеЕсли СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж И Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
		
		// Показатель даты бюджетного платежа
		Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
			СтрокаДокумента.ПоказательДатыДок = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДаты);
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ПоказательДатыДок) Тогда
				СтрокаДокумента.ПоказательДатыДок = Неопределено;
			КонецЕсли;
		КонецЕсли;
		//-- Локализация
		
		// Дата проведения банком
		Если Исходящий Тогда
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
					СтрокаДокумента.Списано = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.ДатаСписано);
				Иначе
					СтрокаДокумента.Списано = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.Дата);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
					СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
					СтрокаДокумента.Поступило = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.ДатаПоступило);
				Иначе
					СтрокаДокумента.Поступило = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
						СтрокаДокумента.Дата);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
					СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//++ Локализация
		
		// Дата отсылки платежного требования
		Если Не ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
			СтрокаДокумента.ДатаОтсылки = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылкиДок);
		КонецЕсли;
		//-- Локализация
	КонецЦикла;
	
	// Ранее загруженные/введенные вручную документы
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, ДатаДок, Поступило, Списано, Номер, НомерСокр, Исходящий, ПолучательСчет, ПлательщикСчет, ТипПлатежногоДокумента,
		|ПолучательИНН, ПлательщикИНН, ПолучательКПП, ПлательщикКПП, ПроверятьИНН, ПроверятьКПП, ДанныеВыписки, Код, Операция");
	ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	// Основание платежа по УИП
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("Исходящий", Ложь);
	Отбор.Вставить("ЗаполненУИП", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	Если СтрокиКЗагрузке.Количество() Тогда
		ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузке, "НомерСтроки, Код");
		ЗаполнитьОснованиеПлатежейПоУИП(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	КонецЕсли;
	
	// Контрагенты, счета контрагентов
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Исходящий, ИмяКонтрагента, СокрИмяКонтрагента, Контрагент, ПолучательСчет, ПолучательБИК, ПлательщикСчет, ПлательщикБИК,
		|ПолучательИНН, ПлательщикИНН, ПолучательКПП, ПлательщикКПП, ПроверятьИНН, ПроверятьКПП, ВидОперации");
	ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов);
	
	// Партнеры
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденКонтрагент", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, Контрагент, Партнер");
	ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет);
	
	// Образцы документов для заполнения
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденСчетКонтрагента", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет);
	
	// Заполнение по косвенным данным
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденКонтрагент", Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет);
	
	// Поиск ПКО при инкассации
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденОбразец", Ложь);
	Отбор.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Истина);
	
	// Поиск РКО при инкассации
	Отбор = Новый Структура;
	Отбор.Вставить("Загружать", Истина);
	Отбор.Вставить("НайденДокументВБазе", Ложь);
	Отбор.Вставить("НайденоОснованиеПлатежа", Ложь);
	Отбор.Вставить("НайденОбразец", Ложь);
	Отбор.Вставить("ВидОперации", Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		СтрокиКЗагрузке,
		"НомерСтроки, СуммаДокумента, ДатаПроведения");
	ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Ложь);
	
КонецПроцедуры

Процедура ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		ДокументОбъект = СтрокаДокумента.Документ.ПолучитьОбъект();
		
		СделатьНепроведенным = Ложь;
		
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
		
		УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		
		ЗаменитьСтароеЗначение = Ложь;
		//++ Локализация
		ЗаменитьСтароеЗначение = (СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе");
		//-- Локализация
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер, ЗаменитьСтароеЗначение);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
				
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
				ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
		КонецЕсли;
		
		// Контрагент
		Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
			ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
			Иначе
				УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// Счет контрагента
		Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
			КонецЕсли;
		КонецЕсли;
		
		СуммыРазличаются = (СтрокаДокумента.СуммаДокумента <> ДокументОбъект.СуммаДокумента);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
			И ДокументОбъект.ПлатежСКонвертацией Тогда
			УстановитьСвойство(ДокументОбъект, "СуммаВВалютеОтправителя", СтрокаДокумента.СуммаДокумента, Истина);
		Иначе
			УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента, Истина);
		КонецЕсли;
		
		Если СуммыРазличаются
			И ДокументОбъект.РасшифровкаПлатежа.Количество() <> 1 Тогда
			
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
			
			Если СтрокаДокумента.Исходящий Тогда
				ЗаполнитьРасшифровкуСписания(СтрокаДокумента, ДокументОбъект, РеквизитыХозОперации, ПроводитьДокументы);
			Иначе
				ЗаполнитьРасшифровкуПоступления(СтрокаДокумента, ДокументОбъект, РеквизитыХозОперации, ПроводитьДокументы);
			КонецЕсли;
			
		Иначе
			
			СтатьяДвиженияДенежныхСредств =
				Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ДокументОбъект.ХозяйственнаяОперация);
			
			Для каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
			
				// Партнер
				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.Партнер)
					И РеквизитыХозОперации.Найти("РасшифровкаПлатежа.Партнер") <> Неопределено Тогда
					СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
				КонецЕсли;
				
				Если СтрокаРасшифровки.КурсЧислительВзаиморасчетов = 0
					Или СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов = 0 Тогда
					РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
																			СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
																			ДокументОбъект.Валюта,
																			СтрокаРасшифровки.ВалютаВзаиморасчетов,
																			ДокументОбъект.Организация,
																			?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
																			СтрокаРасшифровки.ОбъектРасчетов);
				КонецЕсли;
				
				// Статья ДДС
				Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств") <> Неопределено
					И Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
					
					Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
						
						РеквизитыОбъектаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										СтрокаРасшифровки.ОбъектРасчетов,
										"Договор.СтатьяДвиженияДенежныхСредств, Соглашение.СтатьяДвиженияДенежныхСредств");
						
						СтатьяДвиженияДенежныхСредствОбъектаРасчетов = 
							?(ЗначениеЗаполнено(РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств),
							РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств,
							РеквизитыОбъектаРасчетов.СоглашениеСтатьяДвиженияДенежныхСредств);
						
						Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредствОбъектаРасчетов) Тогда
							СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств =
								?(ЗначениеЗаполнено(РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств),
								РеквизитыОбъектаРасчетов.ДоговорСтатьяДвиженияДенежныхСредств,
								РеквизитыОбъектаРасчетов.СоглашениеСтатьяДвиженияДенежныхСредств);
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств)
						И ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
						СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СуммыРазличаются
				И ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 Тогда
				
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа[0];
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
				
				ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
					СтрокаРасшифровки, ДокументОбъект.Валюта, ВалютаРеглУчета);
					
				СтруктураПересчетаСуммы = Новый Структура;
				СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРасшифровки, СтруктураДействий, Неопределено);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки, Истина);
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка';
																|en = '#Imported from Client Bank'"));
		
		Если ДокументОбъект.Модифицированность() Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса(), Истина);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения, Истина);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			
			Если СокрЛП(ДокументОбъект.ОшибкиЗагрузки) <> "" Тогда
				СделатьНепроведенным = ДокументОбъект.Проведен;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммыРазличаются Тогда
			ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, НСтр("ru = 'Изменилась сумма документа';
																	|en = 'Изменилась сумма документа'"));
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, ?(СделатьНепроведенным, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписи), СтрокаДокумента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	РазрешитьПлатежиБезУказанияЗаявок = РеквизитыСчета.РазрешитьПлатежиБезУказанияЗаявок;
	
	Организация          = РеквизитыСчета.Организация;
	Префикс              = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	Валюта               = РеквизитыСчета.Валюта;
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	
	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
		БанковскийСчет, Истина, Ложь);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			ДокументОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Иначе
			ДокументОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		КонецЕсли;
		
		// Общие реквизиты
		ДатаВхДокумента = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
		Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", ДатаВхДокумента);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", СтрокаДокумента.ДатаДок);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер);
		
		УстановитьСвойство(ДокументОбъект, "Организация", Организация);
		УстановитьСвойство(ДокументОбъект, "БанковскийСчет", БанковскийСчет);
		УстановитьСвойство(ДокументОбъект, "Валюта", Валюта);
		
		УстановитьСвойство(ДокументОбъект, "ТипПлатежногоДокумента", СтрокаДокумента.ТипПлатежногоДокумента);
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента);
		
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки);
		УстановитьСвойство(ДокументОбъект, "ИдентификаторПлатежа", СтрокаДокумента.Код);
		
		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка';
																|en = '#Imported from Client Bank'"));
		УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса());
		
		УстановитьСвойство(ДокументОбъект, "ТипНалога", СтрокаДокумента.ТипНалога);
		УстановитьСвойство(ДокументОбъект, "НастройкаСчетовУчета", СтрокаДокумента.НастройкаСчетовУчета);
		
		УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", СтрокаДокумента.ОшибкиЗагрузки);
		
		УстановитьСвойство(ДокументОбъект, "Ответственный", ТекущийПользователь);
		
		// Индивидуальное заполнение
		Если СтрокаДокумента.Исходящий Тогда
			ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс);
		Иначе
			ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы);
		КонецЕсли;
		
		//++ Локализация
		Если СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе" Тогда
		//-- Локализация
			УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		//++ Локализация
		КонецЕсли;
		//-- Локализация
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", ДокументОбъект.Дата);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоДокумента) Тогда
			ДокументОбъект.ДатаВходящегоДокумента = ДокументОбъект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.НомерВходящегоДокумента) Тогда
			ДокументОбъект.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.Движения.ДенежныеСредстваБезналичные.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ОшибкиЗагрузки + "
			|" + ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;
		
		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации ИЛИ 
			ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если СтрокаДокумента.Исходящий Тогда
				ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.ПоступлениеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			Иначе
				ЗеркальныйПлатежСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.СписаниеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписи, СтрокаДокумента);
		
		СтрокаДокумента.Документ = ДокументОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

Процедура СнятьПризнакПроведения(ДокументыКЗагрузке, БанковскийСчет, ЗаголовокВыписки)
	
	// Снимаем признак проведения банком для отсутствующих в выписке документов
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И ДанныеДокумента.ДатаПроведенияБанком МЕЖДУ &ДатаНач И &ДатаКон
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПроведеноБанком
	|	И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И ДанныеДокумента.ДатаПроведенияБанком МЕЖДУ &ДатаНач И &ДатаКон
	|";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ЗаголовокВыписки.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ЗаголовокВыписки.ДатаКонца));
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКЗагрузке.НайтиСтроки(Новый Структура("Документ", Выборка.Ссылка));
		Если СтрокаВТаблицеИмпорта.Количество() = 0 Тогда
			
			Попытка
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект
				ДокументОбъект.ПроведеноБанком = Ложь;
				ДокументОбъект.ДатаПроведенияБанком = Неопределено;
				ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			Исключение
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				Событие = НСтр("ru = 'Данные';
								|en = 'Data'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Отмена проведения';
								|en = 'Cancel posting'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(Событие,
					УровеньЖурналаРегистрации.Ошибка,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ОписаниеОшибки.Описание);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СобственныеСчета(БанковскийСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.БИКБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.СВИФТБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.СВИФТБИК
	|	КОНЕЦ КАК СВИФТ
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		БанковскиеСчетаОрганизаций.Владелец = БанковскиеСчета.Владелец
	|		И БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет
	|	
	|ГДЕ
	|	БанковскиеСчета.Ссылка <> &БанковскийСчет
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаДок,
	|	ТаблицаДокументов.Поступило,
	|	ТаблицаДокументов.Списано,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.НомерСокр,
	|	ТаблицаДокументов.Исходящий,
	|	ТаблицаДокументов.ТипПлатежногоДокумента,
	|	ТаблицаДокументов.ПолучательСчет,
	|	ТаблицаДокументов.ПлательщикСчет,
	|	ТаблицаДокументов.ПолучательИНН,
	|	ТаблицаДокументов.ПлательщикИНН,
	|	ТаблицаДокументов.ПолучательКПП,
	|	ТаблицаДокументов.ПлательщикКПП,
	|	ТаблицаДокументов.ПроверятьИНН,
	|	ТаблицаДокументов.ПроверятьКПП,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Код КАК Строка(25)) КАК Код,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.ДанныеВыписки КАК Строка(1024)) КАК ДанныеВыписки,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Операция КАК Строка(128)) КАК Операция
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		
	|		И (НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|			И НЕ ДанныеДокумента.ПроведеноБанком
	|			ИЛИ НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|				И ДанныеДокумента.ДатаПроведенияБанком = ТаблицаДокументов.Списано
	|				И ДанныеДокумента.ПроведеноБанком)
	|		
	|		И (ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|			ИЛИ ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.НомерСокр)
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|	
	|		И (ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПолучательСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПолучательСчет = """"
	|			)
	//++ Локализация
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.Владелец.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетПолучатель.Владелец.ИНН = ТаблицаДокументов.ПолучательИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН = ТаблицаДокументов.ПолучательИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.ИННКорреспондента = ТаблицаДокументов.ПолучательИНН
	|			)
	|		И (
	|			(НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КПП, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетПолучатель.Владелец.КПП = ТаблицаДокументов.ПолучательКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП = ТаблицаДокументов.ПолучательКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.КППКорреспондента = ТаблицаДокументов.ПолучательКПП
	|			)
	|			ИЛИ 
	|			(ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	//-- Локализация
	|		
	|ГДЕ
	|	ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	//++ Локализация
	|		И НЕ ДанныеДокумента.ДанныеВыписки ПОДОБНО (""СЕКЦИЯДОКУМЕНТ=Операция по Яндекс.Кассе%"")
	//-- Локализация
	|		
	|		И (НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|			И НЕ ДанныеДокумента.ПроведеноБанком
	|			ИЛИ НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаДок
	|				И ДанныеДокумента.ДатаПроведенияБанком = ТаблицаДокументов.Поступило
	|				И ДанныеДокумента.ПроведеноБанком)
	|		
	|		И (ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.Номер
	|			ИЛИ ДанныеДокумента.НомерВходящегоДокумента = ТаблицаДокументов.НомерСокр)
	|		И ДанныеДокумента.ТипПлатежногоДокумента = ТаблицаДокументов.ТипПлатежногоДокумента
	|		
	|		И (ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета = ТаблицаДокументов.ПлательщикСчет
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.НомерСчета, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.НомерСчета, """") = """")
	|			ИЛИ ТаблицаДокументов.ПлательщикСчет = """"
	|			)
	//++ Локализация
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.Владелец.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетОтправитель.Владелец.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.ИННКорреспондента = ТаблицаДокументов.ПолучательИНН
	|			)
	|		
	|		И (НЕ ТаблицаДокументов.ПроверятьИНН
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.Контрагент.ИНН, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.ПодотчетноеЛицо.ИНН, """") = """")
	|			ИЛИ ДанныеДокумента.Контрагент.ИНН = ТаблицаДокументов.ПлательщикИНН
	|			ИЛИ ДанныеДокумента.ПодотчетноеЛицо.ИНН = ТаблицаДокументов.ПлательщикИНН)
	|		
	|		И ((НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ ЕСТЬNULL(ДанныеДокумента.Контрагент.КПП, """") = """"
	|			ИЛИ ДанныеДокумента.Контрагент.КПП = ТаблицаДокументов.ПлательщикКПП)
	|			
	|			ИЛИ (ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	//-- Локализация
	|		И (
	//++ Локализация
	|			(НЕ ТаблицаДокументов.ПроверятьКПП
	|			ИЛИ (ЕСТЬNULL(ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КПП, """") = """"
	|				И ЕСТЬNULL(ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП, """") = """")
	|			ИЛИ ДанныеДокумента.БанковскийСчетОтправитель.Владелец.КПП = ТаблицаДокументов.ПлательщикКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.Владелец.КПП = ТаблицаДокументов.ПлательщикКПП
	|			ИЛИ ДанныеДокумента.БанковскийСчетКонтрагента.КППКорреспондента = ТаблицаДокументов.ПолучательКПП
	|			)
	|			ИЛИ 
	//-- Локализация
	|			(ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) = ТаблицаДокументов.ДанныеВыписки
	|				И ВЫРАЗИТЬ(ДанныеДокумента.ДанныеВыписки КАК Строка(1024)) <> """"))
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	//++ Локализация
	|	И НЕ ТаблицаДокументов.Операция ПОДОБНО (""Операция по Яндекс.Кассе%"")
	//-- Локализация
	|	
	//++ Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Проведение банком платежа ЯндексКассы
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		И ДанныеДокумента.ИдентификаторПлатежа = ТаблицаДокументов.Код
	|		И ДанныеДокумента.ДанныеВыписки ПОДОБНО (""СЕКЦИЯДОКУМЕНТ=Операция по Яндекс.Кассе%"")
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И ТаблицаДокументов.Код <> """"
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Платеж ЯндексКассы
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|		И ДанныеДокумента.ИдентификаторПлатежа = ТаблицаДокументов.Код
	|		
	|ГДЕ
	|	НЕ ТаблицаДокументов.Исходящий
	|	И НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И ТаблицаДокументов.Код <> """"
	|	И ТаблицаДокументов.Операция ПОДОБНО (""Операция по Яндекс.Кассе%"")
	//-- Локализация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проведен УБЫВ";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			// Если документ найден, создавать новый не будем. Если найдено несколько документов,
			// то дубли документа пропускаем, обновляем только первый найденный документ.
			Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДокумента.Документ = Выборка.Ссылка;
			СтрокаДокумента.НайденДокументВБазе = Истина;
			СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеПлатежейПоУИП(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	СпискиУИП = РазделенныйСписокУИП(ТаблицаДокументов);
	
	Если СпискиУИП.УИПРасчетовСКлиентами.Количество() <> 0 Тогда
	
		ДанныеВыбора = Новый СписокЗначений;
	
		СтруктураОтбора = ВзаиморасчетыКлиентСервер.СтруктураОтбораДанныхВыбора();
		СтруктураОтбора.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		СтруктураОтбора.Текст       = СпискиУИП.УИПРасчетовСКлиентами.ВыгрузитьКолонку("Код");
		СтруктураОтбора.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		СтруктураОтбора.УчитыватьФилиалы = Истина;
		
		ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораУИП(
			ДанныеВыбора,
			СтруктураОтбора,
			Ложь);
	
		Для Каждого ЭлементДанных Из ДанныеВыбора Цикл
			
			Выборка = ЭлементДанных.Значение.Значение;
			
			Отбор = Новый Структура("Код", Выборка.ИдентификаторПлатежа);
			СтрокиТаблицы = СпискиУИП.УИПРасчетовСКлиентами.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				СтрокаДокумента = ДокументыКЗагрузке.Найти(СтрокаТаблицы["НомерСтроки"], "НомерСтроки");
				Если СтрокаДокумента <> Неопределено Тогда
					
					СтрокаДокумента.НайденоОснованиеПлатежа = Истина;
					СтрокаДокумента.НайденКонтрагент = Истина;
					СтрокаДокумента.СоздаватьКонтрагента = Ложь;
					
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, Выборка, "Контрагент, Партнер, ОснованиеПлатежа, ОбъектРасчетов");
					
					Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
						
						Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
							СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
						ИначеЕсли ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
							СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ОбъектРасчетов) Тогда
						СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
							ДенежныеСредстваСервер.СтатьяДвиженияДенежныхСредствОбъектаРасчетов(СтрокаДокумента.ОбъектРасчетов, СтрокаДокумента.ВидОперации);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СпискиУИП.УИПКонвертации.Количество() <> 0 Тогда
	
		ДанныеДокументов = ДенежныеСредстваСервер.ОснованияОперацииКонвертацииПоУИП(
			СпискиУИП.УИПКонвертации.ВыгрузитьКолонку("Код"), ТекущаяДатаСеанса());
	
		Для Каждого ТекущиеДанные Из ДанныеДокументов Цикл
			
			ОтборИдентификатора = Новый Структура;
			ОтборИдентификатора.Вставить("Код", ТекущиеДанные.ИдентификаторПлатежа);
			СтрокиДокументов = ДокументыКЗагрузке.НайтиСтроки(ОтборИдентификатора);
			
			Для Каждого СтрокаДокумента Из СтрокиДокументов Цикл
				
				СтрокаДокумента.НайденоОснованиеПлатежа = Истина;
				СтрокаДокумента.НайденКонтрагент = Истина;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
			
				ЗаполнитьЗначенияСвойств(
					СтрокаДокумента,
					ТекущиеДанные, 
					"Контрагент, Партнер, ОснованиеПлатежа, Подразделение, СтатьяДвиженияДенежныхСредств, ВалютаКонвертации, СуммаКонвертации");
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ИмяКонтрагента КАК Наименование,
	|	ТаблицаДокументов.СокрИмяКонтрагента КАК СокращенноеНаименование,
	|	ТаблицаДокументов.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательИНН
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикИНН
	|	КОНЕЦ КАК ИНН,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|		ТаблицаДокументов.ПолучательКПП
	|	ИНАЧЕ
	|		ТаблицаДокументов.ПлательщикКПП
	|	КОНЕЦ КАК КПП,
	|	ТаблицаДокументов.ПроверятьИНН,
	|	ТаблицаДокументов.ПроверятьКПП,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательСчет
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикСчет
	|	КОНЕЦ КАК НомерСчета,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаДокументов.Исходящий ТОГДА
	|			ТаблицаДокументов.ПолучательБИК
	|		ИНАЧЕ
	|			ТаблицаДокументов.ПлательщикБИК
	|	КОНЕЦ КАК Строка(9)) КАК БИКБанка,
	|	ТаблицаДокументов.ВидОперации
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	0 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И (ДанныеСправочника.Банк.Код = ТаблицаДокументов.БИКБанка Или ДанныеСправочника.БИКБанка = ТаблицаДокументов.БИКБанка)
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт,
	|	Константа.ИспользоватьПередачиТоваровМеждуОрганизациями КАК ИспользоватьПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|				ИЛИ ТаблицаДокументов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|			ТОГДА ИспользоватьПередачиТоваровМеждуОрганизациями.Значение
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Контрагент уже найден, ищем счет
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	5 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ПО
	|		Контрагенты.Ссылка = ТаблицаДокументов.Контрагент
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец = Контрагенты.Ссылка
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	10 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.Владелец.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	20 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И ДанныеСправочника.Владелец.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Владелец КАК Контрагент,
	|	ДанныеСправочника.Ссылка КАК СчетКонтрагента,
	|	30 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|		И (ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.Наименование
	|			ИЛИ ДанныеСправочника.Владелец.НаименованиеПолное = ТаблицаДокументов.СокращенноеНаименование)
	|		И НЕ ДанныеСправочника.Закрыт
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	40 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ДанныеСправочника.КПП = ТаблицаДокументов.КПП
	|		И ТаблицаДокументов.ПроверятьКПП
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	50 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|		И ТаблицаДокументов.ПроверятьИНН
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	60 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.НаименованиеПолное = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|		И (ДанныеСправочника.КПП = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьКПП)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСправочника.Ссылка КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	70 КАК Приоритет
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ФизическиеЛица КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Наименование = ТаблицаДокументов.Наименование
	|		И (ДанныеСправочника.ИНН = ТаблицаДокументов.ИНН
	|			ИЛИ ДанныеСправочника.ИНН = """"
	|			ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ДанныеСправочника.Владелец,
	|	ДанныеСправочника.Ссылка,
	|	80
	|
	|ИЗ
	|	ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаКонтрагентов КАК ДанныеСправочника
	|		ПО ДанныеСправочника.НомерСчета = ТаблицаДокументов.НомерСчета
	|			И НЕ ДанныеСправочника.Закрыт
	|			И (ДанныеСправочника.Владелец.ИНН = """"
	|				ИЛИ НЕ ТаблицаДокументов.ПроверятьИНН)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			
			НайденоКонтрагентов = 0;
			ТекущийПриоритет = 99;
			
			Пока Выборка.Следующий() Цикл
				Если ТекущийПриоритет < Выборка.Приоритет Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаДокумента.ЭтоСБП
					И Не ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
					И Выборка.Контрагент = Справочники.Контрагенты.РозничныйПокупатель Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийПриоритет = Выборка.Приоритет;
				НайденоКонтрагентов = НайденоКонтрагентов + 1;
				
				Если НайденоКонтрагентов = 1 Тогда
					
					СтрокаДокумента.Контрагент = Выборка.Контрагент;
					СтрокаДокумента.НайденКонтрагент = Истина;
					
					Если ЗначениеЗаполнено(Выборка.СчетКонтрагента) Тогда
						СтрокаДокумента.СчетКонтрагента = Выборка.СчетКонтрагента;
						СтрокаДокумента.НайденСчетКонтрагента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Если найдено два одинаковых контрагента с одинаковым номером счета, тогда контрагента не заполняем, 
			// будет предложено выбрать контрагента, по выбранному контрагенту определится счет.
			// Если найдено два одинаковых контрагента без найденного счета, тогда контрагент не заполняем, 
			// будет предложено выбрать контрагента и для него будет создан счет.
			// Если у одного контрагента 2 и более одинаковых счета, тогда контрагента не заполняем.
			// В остальных случаях если найдены дубли с одинаковым приоритетом, то контрагент останется пустым и новый создаваться не будет.
			Если НайденоКонтрагентов > 1 Тогда
				
				СтрокаДокумента.Контрагент = Неопределено;
				СтрокаДокумента.СчетКонтрагента = Неопределено;
				СтрокаДокумента.СоздаватьКонтрагента = Ложь;
				СтрокаДокумента.НайденКонтрагент = Ложь;
				СтрокаДокумента.НайденСчетКонтрагента = Ложь;
			
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки,
					СтрШаблон(НСтр("ru = 'Найдено более одного контрагента или банковского счета контрагента (%1)!';
									|en = 'More than one counterparty or counterparty bank account is found (%1).'"), СтрокаДокумента.ИмяКонтрагента));
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартнеров(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет)
	
	Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Организация;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.Контрагент КАК Контрагент
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ВЫБОР КОГДА ДанныеСправочника.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		ДанныеСправочника.Партнер
	|	КОГДА НЕ АналитикаУчетаПоПартнерам.Партнер ЕСТЬ NULL ТОГДА
	|		АналитикаУчетаПоПартнерам.Партнер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НеизвестныйПартнер)
	|	КОНЕЦ КАК Партнер
	|
	|ИЗ
	|	ТаблицаДокументов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеСправочника
	|	ПО
	|		ДанныеСправочника.Ссылка = ТаблицаДокументов.Контрагент
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|		ПО
	|			АналитикаУчетаПоПартнерам.Контрагент = ДанныеСправочника.Ссылка
	|			И АналитикаУчетаПоПартнерам.Организация = &Организация
	|			И АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.Партнер = Выборка.Партнер;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбразцы(СтрокиКЗагрузке, БанковскийСчет)
	
	РеквизитыХозОперацийПоступления = РеквизитыХозОперацийПоступления();
	РеквизитыХозОперацийСписания = РеквизитыХозОперацийСписания();
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаВходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств          КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо                 КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаОтправитель                КАК КассаОтправитель,
	|	ТабЧасть.Подразделение                          КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение                   КАК Подразделение,
	|	ТабЧасть.СтатьяДоходов                          КАК РасшифровкаПлатежаСтатьяДоходов,
	|	ТабЧасть.АналитикаДоходов                       КАК РасшифровкаПлатежаАналитикаДоходов,
	|	ТабЧасть.АналитикаАктивовПассивов               КАК РасшифровкаПлатежаАналитикаАктивовПассивов,
	|	ДанныеДокумента.ДоговорЭквайринга               КАК ДоговорЭквайринга,
	|	ДанныеДокумента.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов               КАК АналитикаРасходов,
	|	ДанныеДокумента.ТипНалога                       КАК ТипНалога,
	|	ДанныеДокумента.НастройкаСчетовУчета            КАК НастройкаСчетовУчета
	|	
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	&Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	ТекстЗапросаИсходящие = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	ТабЧасть.СтатьяДвиженияДенежныхСредств          КАК РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ПодотчетноеЛицо                 КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.КассаПолучатель                 КАК КассаПолучатель,
	|	ТабЧасть.Подразделение                          КАК РасшифровкаПлатежаПодразделение,
	|	ДанныеДокумента.Подразделение                   КАК Подразделение,
	|	ТабЧасть.СтатьяРасходов                         КАК РасшифровкаПлатежаСтатьяРасходов,
	|	ТабЧасть.АналитикаРасходов                      КАК РасшифровкаПлатежаАналитикаРасходов,
	|	ТабЧасть.АналитикаАктивовПассивов               КАК РасшифровкаПлатежаАналитикаАктивовПассивов,
	|	ДанныеДокумента.ДоговорЭквайринга               КАК ДоговорЭквайринга,
	|	ДанныеДокумента.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов               КАК АналитикаРасходов,
	|	ДанныеДокумента.ТипНалога                       КАК ТипНалога,
	|	ДанныеДокумента.НастройкаСчетовУчета            КАК НастройкаСчетовУчета
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
	|	ПО
	|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	&Условие
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	// Шаг 1. Поиск по счету отправителя, получателя, назначению платежа
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента
	|		ИЛИ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
	|			И ДанныеДокумента.Контрагент = &Контрагент))
	|	И ДанныеДокумента.ФорматированноеНазначениеПлатежа = &ФорматированноеНазначениеПлатежа
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг2 = Новый Массив;
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		
		Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
			Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг2.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг2.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг 2. Поиск по счету отправителя, получателя, без учета назначения платежа
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &СчетКонтрагента)
	|	И ДанныеДокумента.Проведен
	|";

	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &БанковскийСчет
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &СчетКонтрагента
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &СчетКонтрагента
	|		ИЛИ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
	|			И ДанныеДокумента.Контрагент = &Контрагент))
	|	И ДанныеДокумента.Проведен
	|";
	
	СтрокиПоискаШаг3 = Новый Массив;
	Для каждого СтрокаДокумента Из СтрокиПоискаШаг2 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		Иначе
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
			ТекстУсловия = ТекстУсловия + "
			|	И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
			Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		КонецЕсли;
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				Если ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия) Тогда
					
					СтрокаДокумента.НайденОбразец = Истина;
					СтрокаДокумента.Образец = Выборка.Ссылка;
					СтрокаДокумента.ВидОперации = Выборка.ХозяйственнаяОперация;
					
					Для каждого Реквизит Из НаборРеквизитов Цикл
						Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
							ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
						Иначе
							ИмяРеквизита = Реквизит.Ключ;
						КонецЕсли;
						СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиПоискаШаг3.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиПоискаШаг3.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг 3. Зеркальный платеж
	УсловиеИсходящие = "
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетПолучатель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	УсловиеВходящие = "
	|	ДанныеДокумента.БанковскийСчет = &СчетКонтрагента
	|	И (ДанныеДокумента.БанковскийСчетКонтрагента = &БанковскийСчет
	|		ИЛИ ДанныеДокумента.БанковскийСчетОтправитель = &БанковскийСчет)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	)
	|	И ДанныеДокумента.Проведен
	|";
	
	Для каждого СтрокаДокумента Из СтрокиПоискаШаг3 Цикл
		
		Если СтрокаДокумента.Исходящий Тогда
			Запрос.Текст = ТекстЗапросаВходящие;
			ТекстУсловия = УсловиеВходящие;
			Реквизиты = РеквизитыХозОперацийПоступления;
		Иначе
			Запрос.Текст = ТекстЗапросаИсходящие;
			ТекстУсловия = УсловиеИсходящие;
			Реквизиты = РеквизитыХозОперацийСписания;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
		Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НаборРеквизитов = Реквизиты.Получить(Выборка.ХозяйственнаяОперация);
			Если НаборРеквизитов <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборРеквизитов, Выборка);
				
				СтрокаДокумента.НайденОбразец = Истина;
				СтрокаДокумента.Образец = Выборка.Ссылка;
				
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
				КонецЕсли;
				
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
				ИначеЕсли Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию;
				КонецЕсли;
				
				Для каждого Реквизит Из НаборРеквизитов Цикл
					Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
						Продолжить;
					КонецЕсли;
					Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
						ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
					Иначе
						ИмяРеквизита = Реквизит.Ключ;
					КонецЕсли;
					СтрокаДокумента[ИмяРеквизита] = Реквизит.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоискКорректен(СтрокаДокумента, Выборка, НаборРеквизитов, ТекстУсловия)
	
	Запрос = Новый Запрос;
	
	Если СтрокаДокумента.Исходящий Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	&Условие
		|	
		|";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТабЧасть
		|	ПО
		|		ТабЧасть.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	&Условие
		|	
		|";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("БанковскийСчет", СтрокаДокумента.БанковскийСчет);
	Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
	
	Если Запрос.НайтиПараметры().Найти("Контрагент") <> Неопределено Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	КонецЕсли;
	Если Запрос.НайтиПараметры().Найти("ФорматированноеНазначениеПлатежа") <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Дата > &ПериодПроверки";
	Запрос.УстановитьПараметр("ПериодПроверки", ТекущаяДатаСеанса() - 60 * 60 * 24 * 15); // Проверяются документы за последние 15 дней
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Запрос.Текст = Запрос.Текст + " И ДанныеДокумента.ХозяйственнаяОперация = &ХозяйственнаяОперация И (ИСТИНА";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", СтрокаДокумента.ВидОперации);
	Иначе
		Запрос.Текст = Запрос.Текст + " И (ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Выборка.ХозяйственнаяОперация);
	КонецЕсли;
	
	СтрокаУсловия = "";
	Если НаборРеквизитов <> Неопределено Тогда
		Для каждого Реквизит Из НаборРеквизитов Цикл
			
			Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Реквизит.Ключ, "РасшифровкаПлатежа") Тогда
				ИмяРеквизита = Сред(Реквизит.Ключ, СтрДлина("РасшифровкаПлатежа") + 1);
				СтрокаУсловия = " ИЛИ ТабЧасть.ИмяРеквизита <> &ИмяРеквизита";
			Иначе
				ИмяРеквизита = Реквизит.Ключ;
				СтрокаУсловия = " ИЛИ ДанныеДокумента.ИмяРеквизита <> &ИмяРеквизита";
			КонецЕсли;
			
			СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "ИмяРеквизита", ИмяРеквизита);
			Запрос.Текст = Запрос.Текст + СтрокаУсловия;
			Запрос.УстановитьПараметр(ИмяРеквизита, Реквизит.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ")";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Процедура ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, БанковскийСчет)
	
	Если СтрокиКЗагрузке.Количество() <> 0 Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Организация);
		
		СтрокаТаблицы = СтрокиКЗагрузке.Получить(0);
		ТаблицаКЗагрузке = СтрокаТаблицы.Владелец();
		КонтрагентыИСчета = ТаблицаКЗагрузке.Скопировать(СтрокиКЗагрузке, "Контрагент, СчетКонтрагента");
		КонтрагентыИСчета.Свернуть("Контрагент, СчетКонтрагента");
		
		ОбъектыРасчетовПоДоговорам = СписокОбъектовРасчетовПоДоговорам(БанковскийСчет, Организация, КонтрагентыИСчета);
		ОбъектыРасчетовПоДоговорам.Индексы.Добавить("Контрагент, СчетКонтрагента");
		
		ДоговорыКредитовДепозитов = СписокДоговоровКредитовДепозитов(БанковскийСчет, КонтрагентыИСчета);
		ДоговорыКредитовДепозитов.Индексы.Добавить("Контрагент, СчетКонтрагента");
		
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда // Собственная организация
			
			Если МассивВзаимосвязанныхОрганизаций.Найти(СтрокаДокумента.Контрагент) <> Неопределено Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств;
			Иначе
				
				Если СтрокаДокумента.Исходящий Тогда
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
				Иначе
					СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура ("Контрагент, СчетКонтрагента");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаДокумента);
		
		// Договор кредита/депозита
		НайденныеДоговорыКредитовДепозитов = ДоговорыКредитовДепозитов.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеДоговорыКредитовДепозитов.Количество() = 1 Тогда
			
			Выборка = НайденныеДоговорыКредитовДепозитов.Получить(0);
			СтрокаДокумента.ДоговорКредитаДепозита = Выборка.Ссылка;
			СтрокаДокумента.ВидОперации = Справочники.ДоговорыКредитовИДепозитов.ОперацияПоХарактеруДоговора(
				Выборка.ХарактерДоговора,
				Не СтрокаДокумента.Исходящий);
				
			Если Выборка.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСПоступленияВыдачи, Выборка.СтатьяДДСОсновногоДолга);
			Иначе
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
					?(Не СтрокаДокумента.Исходящий, Выборка.СтатьяДДСОсновногоДолга, Выборка.СтатьяДДСПоступленияВыдачи);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// Договор с контрагентом
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ОбъектРасчетов) Тогда
			
			ДополнитьПараметрыОтбораДоговора(ПараметрыОтбора);
			
			Если СтрокаДокумента.Исходящий Тогда
				ПараметрыОтбора.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
			КонецЕсли;
				
			ЗаполнитьОбъектРасчетовПлатежаПоДоговору(СтрокаДокумента, ОбъектыРасчетовПоДоговорам, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКассовыйДокумент(ДокументыКЗагрузке, ТаблицаДокументов, БанковскийСчет, Исходящие)
	
	Если Не ТаблицаДокументов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.НомерСтроки,
	|	ТаблицаДокументов.ДатаПроведения,
	|	ТаблицаДокументов.СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Если Исходящие Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаДокументов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк)
		|		И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ТаблицаДокументов.ДатаПроведения
		|		И ДанныеДокумента.СуммаДокумента = ТаблицаДокументов.СуммаДокумента
		|		И ДанныеДокумента.Проведен
		|ГДЕ
		|	НЕ ДанныеДокумента.Ссылка ЕСТЬ NULL
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДокумента = ДокументыКЗагрузке.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.КассовыйДокумент = Выборка.Ссылка;
			СтрокаДокумента.Загружать = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	УстановитьСвойство(ДокументОбъект, "Дата", ДокументОбъект.ДатаВходящегоДокумента);
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	//++ Локализация
	
	// Контроль заявок
	Если ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или ДокументОбъект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер Тогда
	
		ДокументОбъект.НеКонтролироватьЗаполнениеЗаявки = Истина;
	Иначе
	//-- Локализация
		ДокументОбъект.ОплатаПоЗаявкам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
			И Не ДенежныеСредстваСервер.РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект);
	//++ Локализация
	КонецЕсли;
	
	РеквизитыПлательщика = ДенежныеСредстваПовтИспРФ.ДанныеПлательщика(ДокументОбъект.Организация, ДокументОбъект.БанковскийСчет);
	УстановитьСвойство(ДокументОбъект, "ИННПлательщика", РеквизитыПлательщика.ИННПлательщика);
	УстановитьСвойство(ДокументОбъект, "КПППлательщика", РеквизитыПлательщика.КПППлательщика);
	УстановитьСвойство(ДокументОбъект, "ТекстПлательщика", РеквизитыПлательщика.ТекстПлательщика);
	//-- Локализация
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
	
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыХозОперации.Найти("ДатаАвансовогоОтчета") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "ДатаАвансовогоОтчета",
			?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса()) + 7 * 24 * 3600);
	КонецЕсли;
	
	// Банковский счет получатель
	Если РеквизитыХозОперации.Найти("БанковскийСчетПолучатель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетПолучатель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, Подразделение, КассаПолучатель");
	
	//++ Локализация
	Если ЗначениеЗаполнено(СтрокаДокумента.ОчередностьПлатежа) Тогда
		УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", СтрокаДокумента.ОчередностьПлатежа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ОчередностьПлатежа", 5);
	КонецЕсли;
	
	СписокКВД = ПлатежиВБюджетКлиентСервер.КодыВидовДохода(ДокументОбъект.Дата,
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	КодВидаДохода =
		?(СписокКВД.НайтиПоЗначению(СтрокаДокумента.КодНазПлатежа) <> Неопределено, СтрокаДокумента.КодНазПлатежа, "");
	УстановитьСвойство(ДокументОбъект, "КодВидаДохода", КодВидаДохода);
	УстановитьСвойство(ДокументОбъект, "КодВыплат", СтрокаДокумента.ПоказательТипа);
	
	Если СтрокаДокумента.ЭтоСБП Тогда
		
		Если СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда // Комиссия СБП
		
			СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
			
			ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
		
			ПараметрыОтбора.Организация = ДокументОбъект.Организация;
			ПараметрыОтбора.Эквайер = ДокументОбъект.Контрагент;
			ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
			ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
			
			ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
			
			Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
				
				РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДоговорЭквайринга);
				
				СтрокаДокумента.Подразделение = РеквизитыДоговора.ПодразделениеРасходов;
				СтрокаДокумента.СтатьяРасходов = РеквизитыДоговора.СтатьяРасходов;
				СтрокаДокумента.АналитикаРасходов = РеквизитыДоговора.АналитикаРасходов;
				СтрокаДокумента.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДвиженияДенежныхСредствКомиссия;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
			
			СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
			
			ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
		
			ПараметрыОтбора.Организация = ДокументОбъект.Организация;
			ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
			ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
			
			ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
			
			Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
				
				РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДоговорЭквайринга);
				
				УстановитьСвойство(ДокументОбъект, "Контрагент", РеквизитыДоговора.Эквайер, Истина);
				УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", ДоговорЭквайринга);
				УстановитьСвойство(
					ДокументОбъект,
					"БанковскийСчетКонтрагента",
					РеквизитыДоговора.БанковскийСчетКонтрагента,
					Истина);
				УстановитьСвойство(
					ДокументОбъект,
					"СтатьяДвиженияДенежныхСредств",
					РеквизитыДоговора.СтатьяДвиженияДенежныхСредствВозврат,
					Истина);
				
				ОтражатьКомиссию = 
					(РеквизитыДоговора.СпособОтраженияКомиссии = 
						Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении
					И РеквизитыДоговора.ВзимаетсяКомиссияПриВозврате);
				УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию", ОтражатьКомиссию);
				
				Если ОтражатьКомиссию Тогда
				
					УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", РеквизитыДоговора.СтатьяРасходов);
					УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", РеквизитыДоговора.АналитикаРасходов);
					УстановитьСвойство(ДокументОбъект, "Подразделение", РеквизитыДоговора.ПодразделениеРасходов);
					УстановитьСвойство(
						ДокументОбъект, "НаправлениеДеятельности", РеквизитыДоговора.НаправлениеДеятельности);
					
					Если РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
						ДокументОбъект.СуммаКомиссии = ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
							СтрокаДокумента.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	// Бюджетные реквизиты
	Если СтрокаДокумента.ПлатежВБюджет Тогда
		УстановитьСвойство(ДокументОбъект, "ПеречислениеВБюджет", Истина);
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", СтрокаДокумента.ВидПеречисленияВБюджет);
		УстановитьСвойство(ДокументОбъект, "КодБК", СтрокаДокумента.ПоказательКБК);
		УстановитьСвойство(ДокументОбъект, "КодОКАТО", СтрокаДокумента.ОКАТО);
		УстановитьСвойство(ДокументОбъект, "СтатусСоставителя", СтрокаДокумента.СтатусСоставителя);
		Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", "0");
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", СтрокаДокумента.ПоказательОснования);
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", СтрокаДокумента.ПоказательПериода);
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", СтрокаДокумента.ПоказательНомера);
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", СтрокаДокумента.ПоказательДаты);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "ПоказательТипа", СтрокаДокумента.ПоказательТипа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(ДокументОбъект);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПлательщика);
	КонецЕсли;
	
	УстановитьСвойство(ДокументОбъект, "ВидПлатежа", СтрокаДокумента.ВидПлатежа);
	
	//-- Локализация
	
	// Расшифровка платежа
	ЗаполнитьРасшифровкуСписания(СтрокаДокумента, ДокументОбъект, РеквизитыХозОперации, ПроводитьДокументы);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы)
	
	Перем РеквизитыВсе, РеквизитыХозОперации;
	
	УстановитьСвойство(ДокументОбъект, "Дата", ДокументОбъект.ДатаВходящегоДокумента);
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	// Хоз. операция
	Если ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		ХозяйственнаяОперация = СтрокаДокумента.ВидОперации;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	КонецЕсли;
	УстановитьСвойство(ДокументОбъект, "ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	// Статья по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаДокумента.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	КонецЕсли;
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ДокументОбъект, РеквизитыВсе, РеквизитыХозОперации);
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
	
	// Контрагент
	Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
		ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
			УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
		Иначе
			УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	// Счет контрагента
	Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
		КонецЕсли;
	КонецЕсли;
	
	// Подотчетное лицо
	Если РеквизитыХозОперации.Найти("ПодотчетноеЛицо") <> Неопределено Тогда
		Если СтрокаДокумента.НайденКонтрагент Тогда
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.Контрагент);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПодотчетноеЛицо", СтрокаДокумента.ПодотчетноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	// Банковский счет отправитель
	Если РеквизитыХозОперации.Найти("БанковскийСчетОтправитель") <> Неопределено Тогда
		УстановитьСвойство(ДокументОбъект, "БанковскийСчетОтправитель", СтрокаДокумента.СчетКонтрагента);
	КонецЕсли;
	
	// Прочие реквизиты
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДокумента,
		"СтатьяДвиженияДенежныхСредств, Подразделение, КассаОтправитель");
	
	// Поступление оплаты по эквайрингу
	Если РеквизитыХозОперации.Найти("ДоговорЭквайринга") <> Неопределено Тогда
		
		ОбработатьКомиссию = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорЭквайринга) Тогда
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", СтрокаДокумента.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", СтрокаДокумента.СтатьяРасходов);
			УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", СтрокаДокумента.АналитикаРасходов);
			РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
			УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
				РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
			ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
		Иначе
			
			СпособПроведенияПлатежа = Неопределено;
			
			Если СтрокаДокумента.ЭтоСБП Тогда
				СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей;
			КонецЕсли;
			
			ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
		
			ПараметрыОтбора.Организация = ДокументОбъект.Организация;
			ПараметрыОтбора.Эквайер = ДокументОбъект.Контрагент;
			ПараметрыОтбора.БанковскийСчет = ДокументОбъект.БанковскийСчет;
			ПараметрыОтбора.СпособПроведенияПлатежа = СпособПроведенияПлатежа;
			
			ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
			УстановитьСвойство(ДокументОбъект, "ДоговорЭквайринга", ДоговорЭквайринга);
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДоговорЭквайринга) Тогда
				РеквизитыДоговора = Справочники.ДоговорыЭквайринга.РеквизитыДоговора(ДокументОбъект.ДоговорЭквайринга);
				УстановитьСвойство(ДокументОбъект, "Подразделение", РеквизитыДоговора.ПодразделениеРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяРасходов", РеквизитыДоговора.СтатьяРасходов);
				УстановитьСвойство(ДокументОбъект, "АналитикаРасходов", РеквизитыДоговора.АналитикаРасходов);
				УстановитьСвойство(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", РеквизитыДоговора.СтатьяДвиженияДенежныхСредствПоступлениеОплаты);
				УстановитьСвойство(ДокументОбъект, "ОтражатьКомиссию",
					РеквизитыДоговора.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ПриЗачислении);
				ОбработатьКомиссию = ДокументОбъект.ОтражатьКомиссию;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбработатьКомиссию И РеквизитыДоговора.ФиксированнаяСтавкаКомиссии Тогда
			СуммаКомиссии = Окр(ДенежныеСредстваКлиентСервер.РассчитатьСуммуКомиссии(
				ДокументОбъект.СуммаДокумента, РеквизитыДоговора.СтавкаКомиссии, Истина), 2);
			СуммаКомиссииСтрокой1 = Строка(СуммаКомиссии);
			СуммаКомиссииСтрокой2 = Строка(Цел(СуммаКомиссии));
			Если СтрНайти(ДокументОбъект.НазначениеПлатежа, СуммаКомиссииСтрокой1)
				Или СтрНайти(ДокументОбъект.НазначениеПлатежа, СуммаКомиссииСтрокой2) Тогда
				УстановитьСвойство(ДокументОбъект, "СуммаКомиссии", СуммаКомиссии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//++ Локализация
	
	// Бюджетные реквизиты
	Если СтрокаДокумента.ПлатежВБюджет Тогда
		УстановитьСвойство(ДокументОбъект, "ПеречислениеВБюджет", Истина);
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", СтрокаДокумента.ВидПеречисленияВБюджет);
		УстановитьСвойство(ДокументОбъект, "КодБК", СтрокаДокумента.ПоказательКБК);
		УстановитьСвойство(ДокументОбъект, "КодОКАТО", СтрокаДокумента.ОКАТО);
		УстановитьСвойство(ДокументОбъект, "СтатусСоставителя", СтрокаДокумента.СтатусСоставителя);
		Если СтрокаДокумента.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", "0");
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", "0");
		Иначе
			УстановитьСвойство(ДокументОбъект, "ПоказательОснования", СтрокаДокумента.ПоказательОснования);
			УстановитьСвойство(ДокументОбъект, "ПоказательПериода", СтрокаДокумента.ПоказательПериода);
			УстановитьСвойство(ДокументОбъект, "ПоказательНомера", СтрокаДокумента.ПоказательНомера);
			УстановитьСвойство(ДокументОбъект, "ПоказательДаты", СтрокаДокумента.ПоказательДаты);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "ПоказательТипа", СтрокаДокумента.ПоказательТипа);
	Иначе
		УстановитьСвойство(ДокументОбъект, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж);
	КонецЕсли;
	//-- Локализация
	
	// Расшифровка платежа
	ЗаполнитьРасшифровкуПоступления(СтрокаДокумента, ДокументОбъект, РеквизитыХозОперации, ПроводитьДокументы);
	
	УстановитьСвойство(ДокументОбъект, "ВалютаКонвертации", СтрокаДокумента.ВалютаКонвертации);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации) Тогда
		ДенежныеСредстваСервер.ПересчитатьПараметрыКонвертации(ДокументОбъект, ВалютаРеглУчета, "ВалютаКонвертации");
	КонецЕсли;
	
	Если СтрокаДокумента.СуммаКонвертации <> 0 Тогда
		
		УстановитьСвойство(ДокументОбъект, "СуммаКонвертации", СтрокаДокумента.СуммаКонвертации, Истина);
		ДенежныеСредстваСервер.ПересчитатьПараметрыКонвертации(ДокументОбъект, ВалютаРеглУчета, "СуммаКонвертации");
		
	КонецЕсли;
	
	//++ Локализация
	Если НЕ ПустаяСтрока(ДокументОбъект.НазначениеПлатежа) Тогда
		ДокументОбъект.ЗаполнитьКодВалютнойОперации();
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуСписания(СтрокаДокумента, ДокументОбъект, РеквизитыХозОперации, ПроводитьДокументы)

	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
		
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеРегистра.ОбъектОплаты КАК ДоговорКредитаДепозита,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).СтатьяДДСПоступленияВыдачи КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.БанковскийСчетКасса = &БанковскийСчет
			|	И ДанныеРегистра.ПлательщикПолучатель = &Контрагент
			|	И ДанныеРегистра.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Списание)
			|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.ОбъектОплаты
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ОбъектОплаты) = 1
			|";
			
			Запрос.УстановитьПараметр("БанковскийСчет", ДокументОбъект.БанковскийСчет);
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			Иначе
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДоговорКредитаДепозита) Тогда
					
					СтрокиКЗагрузке = Новый Массив;
					СтрокиКЗагрузке.Добавить(СтрокаДокумента);
					ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, ДокументОбъект.БанковскийСчет);
					
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита");
			КонецЕсли;
			
			ЗаполнитьРасшифровкуПлатежаПоДоговоруКредитаДепозита(СтрокаРасшифровки);
			
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
			ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
			ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
				СтрокаРасшифровки, ДокументОбъект.Валюта, ВалютаРеглУчета);
		
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов, Подразделение");
			//++ Локализация

			//++ НЕ УТ
			СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
			//-- НЕ УТ

			//-- Локализация
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
		
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Дата", ДокументОбъект.Дата);
			Реквизиты.Вставить("Организация", ДокументОбъект.Организация);
			Реквизиты.Вставить("СуммаДокумента", 0);
			Реквизиты.Вставить("Валюта", ДокументОбъект.Валюта);
			
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				Реквизиты.Вставить("Контрагент", ДокументОбъект.Контрагент);
			Иначе
				Реквизиты.Вставить("Контрагент", ДокументОбъект.ИмяКонтрагента);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Реквизиты.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
			Иначе
				Реквизиты.Вставить("Партнер", Неопределено);
			КонецЕсли;
			
			Реквизиты.Вставить("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
			
			Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
			Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
			Реквизиты.Вставить("ПодборДебиторскойЗадолженности", Ложь);
			Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
			Реквизиты.Вставить("ПоДатамПлатежей", Истина);
			
			//++ Локализация

			//++ НЕ УТ
			Реквизиты.Вставить("ПлатежиПо275ФЗ", Ложь);
			Реквизиты.Вставить("ДоговорСУчастникомГОЗ", Ложь);
			//-- НЕ УТ

			ОперацияССамозанятым = Неопределено;

			//-- Локализация
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			КолонкиТаблицыОстатковВзаиморасчетов = ТаблицаОстатковРасчетов.Колонки; // КоллекцияКолонокТаблицыЗначений 
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
		
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				
				Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.Номер, Истина, Истина);
					Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
						
						//++ Локализация

						Если ОперацияССамозанятым <> Неопределено
							И СтрокаТаблицы.ОперацияССамозанятым <> ОперацияССамозанятым
							И СтрокаТаблицы.ОперацияССамозанятым <> Неопределено Тогда
							СтрокаТаблицы.Обработано = Истина;
							Продолжить;
						КонецЕсли;
						
						ОперацияССамозанятым = СтрокаТаблицы.ОперацияССамозанятым;

						//-- Локализация
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						//++ Локализация

						//++ НЕ УТ
						СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
						//-- НЕ УТ

						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						//++ Локализация

						Если ОперацияССамозанятым <> Неопределено
							И СтрокаТаблицы.ОперацияССамозанятым <> ОперацияССамозанятым
							И СтрокаТаблицы.ОперацияССамозанятым <> Неопределено Тогда
							СтрокаТаблицы.Обработано = Истина;
							Продолжить;
						КонецЕсли;
						
						ОперацияССамозанятым = СтрокаТаблицы.ОперацияССамозанятым;

						//-- Локализация
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, , "Сумма");
						//++ Локализация

						//++ НЕ УТ
						СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
						//-- НЕ УТ

						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РаспределяемаяСумма > 0 Или Не ДокументОбъект.РасшифровкаПлатежа.Количество() Тогда
				
				//++ Локализация
				Если ОперацияССамозанятым <> Неопределено
					И СтрокаДокумента.ДоговорССамозанятым <> ОперацияССамозанятым Тогда
					ЗаполняемыеРеквизиты = "Партнер, СтатьяДвиженияДенежныхСредств";
				Иначе
				//-- Локализация
				
					ЗаполняемыеРеквизиты = "Партнер, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств";

				//++ Локализация
				КонецЕсли;
				
				ОперацияССамозанятым = СтрокаДокумента.ДоговорССамозанятым;
				//-- Локализация
				
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента, ЗаполняемыеРеквизиты);
				ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
				//++ Локализация

				//++ НЕ УТ
				СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
				//-- НЕ УТ

				//-- Локализация
				СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
					СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
					СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
					ДокументОбъект.Валюта,
					СтрокаРасшифровки.ВалютаВзаиморасчетов,
					ДокументОбъект.Организация,
					?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
					СтрокаРасшифровки.ОбъектРасчетов);
				
				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
					СтрокаРасшифровки.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Дата);
				КонецЕсли;
				
			КонецЕсли;
			
			//++ Локализация
			УстановитьСвойство(ДокументОбъект, "ОперацияССамозанятым", ?(ОперацияССамозанятым = Неопределено, Ложь, ОперацияССамозанятым));
			//-- Локализация
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Ложь));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПоступления(СтрокаДокумента, ДокументОбъект, РеквизитыХозОперации, ПроводитьДокументы)

	Если РеквизитыХозОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
	
		Если СтрокаДокумента.НайденоОснованиеПлатежа Тогда // УИП
		
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
			ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
			//++ Локализация

			//++ НЕ УТ
			СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
			//-- НЕ УТ

			//-- Локализация
			СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
				СтрокаРасшифровки.ОбъектРасчетов);
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
					
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ДанныеРегистра.ОбъектОплаты КАК ДоговорКредитаДепозита,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ОбъектОплаты КАК Справочник.ДоговорыКредитовИДепозитов).СтатьяДДСПоступленияВыдачи КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	РегистрСведений.ГрафикПлатежей КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.БанковскийСчетКасса = &БанковскийСчет
			|	И ДанныеРегистра.ПлательщикПолучатель = &Контрагент
			|	И ДанныеРегистра.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Поступление)
			|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРегистра.ОбъектОплаты
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ОбъектОплаты) = 1
			|";
			
			Запрос.УстановитьПараметр("БанковскийСчет", ДокументОбъект.БанковскийСчет);
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			Иначе
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.ДоговорКредитаДепозита) Тогда
					
					СтрокиКЗагрузке = Новый Массив;
					СтрокиКЗагрузке.Добавить(СтрокаДокумента);
					ЗаполнитьПоКосвеннымДанным(СтрокиКЗагрузке, ДокументОбъект.БанковскийСчет);
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, СтатьяДвиженияДенежныхСредств, ДоговорКредитаДепозита");
			КонецЕсли;
			
			ЗаполнитьРасшифровкуПлатежаПоДоговоруКредитаДепозита(СтрокаРасшифровки);
			
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
			ДенежныеСредстваКлиентСервер.РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(
				СтрокаРасшифровки, ДокументОбъект.Валюта, ВалютаРеглУчета);
			
		ИначеЕсли РеквизитыХозОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") = Неопределено Тогда // Прочие платежи
			
			СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
				"Партнер, СтатьяДвиженияДенежныхСредств, СтатьяДоходов, АналитикаДоходов, АналитикаАктивовПассивов, Подразделение");
			//++ Локализация

			//++ НЕ УТ
			СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
			//-- НЕ УТ

			//-- Локализация
			СтрокаРасшифровки.Сумма = СтрокаДокумента.СуммаДокумента;
			РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
				СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
				СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
				ДокументОбъект.Валюта,
				СтрокаРасшифровки.ВалютаВзаиморасчетов,
				ДокументОбъект.Организация,
				?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата));
		
		Иначе
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Дата", ДокументОбъект.Дата);
			Реквизиты.Вставить("Организация", ДокументОбъект.Организация);
			Реквизиты.Вставить("СуммаДокумента", 0);
			Реквизиты.Вставить("Валюта", ДокументОбъект.Валюта);
			
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				Реквизиты.Вставить("Контрагент", ДокументОбъект.Контрагент);
			Иначе
				Реквизиты.Вставить("Контрагент", ДокументОбъект.ИмяКонтрагента);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Реквизиты.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
			Иначе
				Реквизиты.Вставить("Партнер", Неопределено);
			КонецЕсли;
			
			Реквизиты.Вставить("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
			
			Реквизиты.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
			Реквизиты.Вставить("ПартнерПрочиеОтношения", Ложь);
			Реквизиты.Вставить("ПодборДебиторскойЗадолженности", Истина);
			Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", Ложь);
			Реквизиты.Вставить("ПоДатамПлатежей", Истина);
			
			//++ Локализация

			//++ НЕ УТ
			Реквизиты.Вставить("ПлатежиПо275ФЗ", Ложь);
			Реквизиты.Вставить("ДоговорСУчастникомГОЗ", Ложь);
			//-- НЕ УТ

			//-- Локализация
			
			АдресПлатежейВХранилище = "";
			ТаблицаОстатковРасчетов = Неопределено;
			
			ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
			КолонкиТаблицыОстатковВзаиморасчетов = ТаблицаОстатковРасчетов.Колонки; // КоллекцияКолонокТаблицыЗначений
			КолонкиТаблицыОстатковВзаиморасчетов.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
			КолонкиТаблицыОстатковВзаиморасчетов.Объект.Имя = "ОснованиеПлатежа";
			
			РаспределяемаяСумма = ДокументОбъект.СуммаДокумента;
			
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				
				Если ТипЗнч(СтрокаТаблицы.ОбъектРасчетов) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТаблицы.Номер, Истина, Истина);
					
					Если СтрЧислоВхождений(СтрокаДокумента.НазначениеПлатежа, НомерДокументаРасчетов) > 0 Тогда
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						//++ Локализация

						//++ НЕ УТ
						СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
						//-- НЕ УТ

						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПроводитьДокументы И РаспределяемаяСумма > 0 Тогда // Подбор объектов расчетов
				
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
						
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы,, "Сумма");
						//++ Локализация

						//++ НЕ УТ
						СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
						//-- НЕ УТ

						//-- Локализация
						СтрокаРасшифровки.Сумма = СуммаСтроки;
						
						РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
							СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
							СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
							ДокументОбъект.Валюта,
							СтрокаРасшифровки.ВалютаВзаиморасчетов,
							ДокументОбъект.Организация,
							?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
							СтрокаРасшифровки.ОбъектРасчетов);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РаспределяемаяСумма > 0 Или Не ДокументОбъект.РасшифровкаПлатежа.Количество() Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаДокумента,
					"Партнер, ОснованиеПлатежа, ОбъектРасчетов, СтатьяДвиженияДенежныхСредств");
				ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(СтрокаРасшифровки);
				//++ Локализация

				//++ НЕ УТ
				СтрокаРасшифровки.СтатьяЦелевыхСредств = СтрокаДокумента.СтатьяЦелевыхСредств;
				//-- НЕ УТ

				//-- Локализация
				СтрокаРасшифровки.Сумма = РаспределяемаяСумма;
				РаботаСКурсамиВалютУТ.ЗаполнитьКурсДокументаПоУмолчанию(
					СтрокаРасшифровки.КурсЧислительВзаиморасчетов,
					СтрокаРасшифровки.КурсЗнаменательВзаиморасчетов,
					ДокументОбъект.Валюта,
					СтрокаРасшифровки.ВалютаВзаиморасчетов,
					ДокументОбъект.Организация,
					?(ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения), СтрокаДокумента.ДатаПроведения, ДокументОбъект.Дата),,
					СтрокаРасшифровки.ОбъектРасчетов);
				
				Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
					СтрокаРасшифровки.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Дата);
				КонецЕсли;
				
			КонецЕсли;
			
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(
				ДокументОбъект.РасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация,
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов"), Истина));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция РеквизитыХозОперацийСписания()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику,
		Новый Структура("ПодотчетноеЛицо, Подразделение, РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет,
		Новый Структура("ТипНалога, НастройкаСчетовУчета, РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,
		Новый Структура("СтатьяДвиженияДенежныхСредств, Подразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка,
		Новый Структура("КассаПолучатель"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяРасходов, РасшифровкаПлатежаАналитикаРасходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту,
		Новый Структура("ДоговорЭквайринга, Подразделение, СтатьяРасходов, АналитикаРасходов, СтатьяДвиженияДенежныхСредств"));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Функция РеквизитыХозОперацийПоступления()
	
	РеквизитыХозОпераций = Новый Соответствие;
	
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте,
		Новый Структура("ДоговорЭквайринга, Подразделение, СтатьяРасходов, АналитикаРасходов, СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк,
		Новый Структура("Касса"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств, РасшифровкаПлатежаСтатьяДоходов, РасшифровкаПлатежаАналитикаДоходов, РасшифровкаПлатежаАналитикаАктивовПассивов, РасшифровкаПлатежаПодразделение"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника,
		Новый Структура("СтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,
		Новый Структура("РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС,
		Новый Структура(""));
	РеквизитыХозОпераций.Вставить(Перечисления.ХозяйственныеОперации.ВозвратНалогов,
		Новый Структура("ТипНалога, НастройкаСчетовУчета, РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"));
	
	Возврат РеквизитыХозОпераций;
	
КонецФункции

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь)
	
	Если ЗначениеСвойства <> Неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если (Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Или ОбязательнаяЗаменаСтарогоЗначения)
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
			Или ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗамечание(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		Шаблон = НСтр("ru = '%1%2%3';
						|en = '%1%2%3'");
		Буфер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Буфер,
			?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
			НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, РежимЗаписи, СтрокаДокумента)
	
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен      = ОбъектДляЗаписи.Проведен;
	Проводить = (РежимЗаписи = РежимЗаписиДокумента.Проведение Или ОбъектПроведен И РежимЗаписи = РежимЗаписиДокумента.Запись);
	
	Если ОбъектМодифицирован
		И Не Проводить Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписи);
		Исключение
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ВывестиОшибкуЗаписи(ОбъектДляЗаписи, ОписаниеОшибки, СтрокаДокумента.ОшибкиЗагрузки);
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если Проводить И (ОбъектМодифицирован Или НЕ ОбъектПроведен) Тогда
		
		// Сохранение первоначально заполненной расшифровки платежа в случае ошибки проведения
		КопияРасшифровкиПлатежа = Неопределено;
		
		Если ОбъектДляЗаписи.РасшифровкаПлатежа.Количество() > 0 Тогда
			КопияРасшифровкиПлатежа = ОбъектДляЗаписи.РасшифровкаПлатежа.Выгрузить();
		КонецЕсли;
		
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru = '%1
				|Произошли ошибки при проведении!';
				|en = '%1 
				|Errors occurred when posting.'");
			
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				ОписаниеОшибки.Описание);
			ЗаписатьОшибкуИзмененияДокументаВЖурнал(ОбъектДляЗаписи, ОбъектДляЗаписи.Ссылка, Комментарий);
			
			Если ОписаниеОшибки.Причина <> Неопределено Тогда
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки.Причина.Описание);
			КонецЕсли;
			
		КонецПопытки;
		
		Если Не ОбъектДляЗаписи.Проведен Тогда
			
			// Восстановление первоначальной расшифровки платежа в случае ошибки проведения,
			// т.к. во время записи объекта создается и заполняется объект расчетов в табличную часть,
			// а после отката транзакции остается ссылка, не существующего объекта расчетов ("битая ссылка")
			Если КопияРасшифровкиПлатежа <> Неопределено Тогда
				ОбъектДляЗаписи.РасшифровкаПлатежа.Загрузить(КопияРасшифровкиПлатежа);
			КонецЕсли;
			
			Попытка
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке();
				ВывестиОшибкуЗаписи(ОбъектДляЗаписи, ОписаниеОшибки, СтрокаДокумента.ОшибкиЗагрузки);
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОшибкуЗаписи(Объект, ОписаниеОшибки, ОшибкиЗагрузки)

	НазваниеОбъекта = Строка(Объект);
	ЭтоНовыйДокумент = Объект.ЭтоНовый();
	
	ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1%2. %3';
			|en = '%1%2. %3'"),
		Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
		?(ЭтоНовыйДокумент, " " + НСтр("ru = 'не создан';
										|en = 'not created'"), " " + НСтр("ru = 'не записан';
																		|en = 'not saved'")),
		ТекстОшибкиЗаписиДокумента());
	
	ДокументСсылка = ?(ЭтоНовыйДокумент, "", Объект.Ссылка);
	
	ТекущаяПричина = ОписаниеОшибки.Причина;
	ИсходноеОписаниеОшибки = ОписаниеОшибки;
	
	Пока ТекущаяПричина <> Неопределено Цикл
		ИсходноеОписаниеОшибки = ТекущаяПричина;
		ТекущаяПричина = ИсходноеОписаниеОшибки.Причина;
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = '%1
						|%2
						|%3
						|%4
						|%5';
						|en = '%1
						|%2
						|%3
						|%4
						|%5'");
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки,
		ОписаниеОшибки.Описание,
		ИсходноеОписаниеОшибки.ИмяМодуля,
		ИсходноеОписаниеОшибки.ИсходнаяСтрока,
		ИсходноеОписаниеОшибки.Описание,
		?(ЭтоНовыйДокумент, ТекстСообщения, ТекстОшибкиЗаписиДокумента()));
	
	ЗаписатьОшибкуИзмененияДокументаВЖурнал(Объект, ДокументСсылка, Комментарий);
	
	Если ОписаниеОшибки.Причина <> Неопределено Тогда
		ДобавитьЗамечание(ОшибкиЗагрузки, ИсходноеОписаниеОшибки.Описание);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОшибкуИзмененияДокументаВЖурнал(Объект, ДокументСсылка, Комментарий)

	Событие = НСтр("ru = 'Данные';
					|en = 'Data'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ "." + НСтр("ru = 'Изменение';
					|en = 'Change'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(
		Событие,
		УровеньЖурналаРегистрации.Ошибка,
		Объект.Метаданные(),
		ДокументСсылка,
		Комментарий);

КонецПроцедуры

Функция ТекстОшибкиЗаписиДокумента()

	Возврат НСтр("ru = 'Произошли ошибки при записи документа!';
				|en = 'Errors occurred when saving the document.'");

КонецФункции

Процедура ЗаписатьОстаткиНаСчетахПоДаннымВыписки(БанковскийСчет, НомерСчета, ДанныеВыписки, ДатаНачалаЗагрузки, ДатаКонцаЗагрузки)
	
	Если ДанныеВыписки <> Неопределено Тогда
		РасчетныеСчета = ДанныеВыписки.РасчетныеСчета;
		Для каждого РасчетныйСчет Из РасчетныеСчета Цикл
			Если НомерСчета = РасчетныйСчет.РасчСчет Тогда
				
				ПараметрыЗаписи = Новый Структура;
				
				НачальныйОстаток = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.НачальныйОстаток);
				КонечныйОстаток = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.КонечныйОстаток);
				Поступление = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.ВсегоПоступило);
				Списание = ДенежныеСредстваКлиентСервер.ПреобразоватьВЧисло(РасчетныйСчет.ВсегоСписано);
				
				ДатаНачала = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(РасчетныйСчет.ДатаНачала);
				ДатаКонца = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(РасчетныйСчет.ДатаКонца);
				
				Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
					ДатаНачала = ДатаНачалаЗагрузки;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДатаКонца) Тогда
					ДатаКонца = ДатаКонцаЗагрузки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаКонца)
					И НачалоДня(ДатаНачала) = НачалоДня(ДатаКонца) Тогда
					
					ПараметрыЗаписи.Вставить("НачальныйОстаток", НачальныйОстаток);
					ПараметрыЗаписи.Вставить("Поступление", Поступление);
					ПараметрыЗаписи.Вставить("Списание", Списание);
					ПараметрыЗаписи.Вставить("КонечныйОстаток", КонечныйОстаток);
					
					РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
						ДатаНачала, БанковскийСчет, ПараметрыЗаписи);
				Иначе
					Если ЗначениеЗаполнено(ДатаНачала) Тогда
						ПараметрыЗаписи.Вставить("НачальныйОстаток", НачальныйОстаток);
						РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
							ДатаНачала, БанковскийСчет, ПараметрыЗаписи);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДатаКонца) Тогда
						ПараметрыЗаписи.Вставить("КонечныйОстаток", КонечныйОстаток);
						РегистрыСведений.ОстаткиНаБанковскихСчетахПоДаннымВыписок.СоздатьЗапись(
							ДатаКонца, БанковскийСчет, ПараметрыЗаписи);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаПоДоговоруКредитаДепозита(ДанныеРасшифровки)

	РеквизитыДоговора = "ВалютаВзаиморасчетов, ХарактерДоговора, СтатьяДДСОсновногоДолга, СтатьяДДСПоступленияВыдачи";
	СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеРасшифровки.ДоговорКредитаДепозита, РеквизитыДоговора);
	ЗаполнитьЗначенияСвойств(ДанныеРасшифровки, СвойстваДоговора);
	
	Если СвойстваДоговора.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм Тогда
		Если ЗначениеЗаполнено(СвойстваДоговора.СтатьяДДСПоступленияВыдачи) Тогда
			ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств = СвойстваДоговора.СтатьяДДСПоступленияВыдачи;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СвойстваДоговора.СтатьяДДСОсновногоДолга) Тогда
			ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств = СвойстваДоговора.СтатьяДДСОсновногоДолга;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаПоОбъектуРасчетов(ДанныеРасшифровки)

	Если Не ЗначениеЗаполнено(ДанныеРасшифровки.ОбъектРасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъектаРасчетов = "ВалютаВзаиморасчетов, НаправлениеДеятельности, Организация, Подразделение";
	ЗаполнитьЗначенияСвойств(ДанныеРасшифровки, ДанныеРасшифровки.ОбъектРасчетов, РеквизитыОбъектаРасчетов);

КонецПроцедуры

// Возвращает таблицу с объектами расчетов по договорам контрагентов.
// 
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций -  Банковский счет организации.
//  Организация - СправочникСсылка.Организации -  Организация.
//  ИсходнаяТаблица - ТаблицаЗначений - таблица, содержащая список контрагентов и их счетов:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполняется поиск договоров контрагентов.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполняется поиск договоров контрагентов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Список объектов расчетов по найденным договорам контрагентов:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполнялся поиск договоров контрагентов.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполнялся поиск договоров контрагентов.
//   *Договор - СправочникСсылка.ДоговорыКонтрагентов - найденный договор контрагента.
//   *СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - статья ДДС по договору.
//   *ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - объект расчетов по договору.
//
Функция СписокОбъектовРасчетовПоДоговорам(БанковскийСчет, Организация, ИсходнаяТаблица)

	ИсходнаяТаблица.Индексы.Добавить("Контрагент, СчетКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Контрагент КАК Контрагент,
		|	Таблица.СчетКонтрагента КАК СчетКонтрагента
		|ПОМЕСТИТЬ КонтрагентыИСчета
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрагентыИСчета.Контрагент КАК Контрагент,
		|	КонтрагентыИСчета.СчетКонтрагента КАК СчетКонтрагента,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ДоговорыКонтрагентов.БанковскийСчет КАК БанковскийСчет,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым КАК ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.Статус КАК Статус,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ТипДоговора В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем),
		//++ НЕ УТКА

		//++ Устарело_Переработка24
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем),
		//-- Устарело_Переработка24
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем2_5),

		//-- НЕ УТКА
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СХранителем),

		//++ НЕ УТ
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПередачаВАренду),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Субаренда),
		//-- НЕ УТ
		
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомитентомНаЗакупку),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.РеализацияЧерезКомиссионера))
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|КОНЕЦ КАК ТипРасчетов
		|ПОМЕСТИТЬ ДоговорыСКонтрагентами
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыИСчета КАК КонтрагентыИСчета
		|		ПО ДоговорыКонтрагентов.Контрагент = КонтрагентыИСчета.Контрагент
		|			И ДоговорыКонтрагентов.Организация = &Организация
		|			И (ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|				ИЛИ ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БанковскийСчетКонтрагента,
		|	БанковскийСчет,
		|	Статус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента КАК СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор КАК Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым КАК ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов КАК ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	(ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ДоговорыКонтрагентов.СчетКонтрагента
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка))
		|	И (ДоговорыКонтрагентов.БанковскийСчет = &БанковскийСчет
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ДоговорыКонтрагентов.СчетКонтрагента
		|	И ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И (ДоговорыКонтрагентов.БанковскийСчет = &БанковскийСчет
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	(ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ДоговорыКонтрагентов.СчетКонтрагента
		|		ИЛИ ДоговорыКонтрагентов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка))
		|	И ДоговорыКонтрагентов.БанковскийСчет <> &БанковскийСчет
		|	И ДоговорыКонтрагентов.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Контрагент,
		|	ДоговорыКонтрагентов.СчетКонтрагента,
		|	ДоговорыКонтрагентов.Договор,
		|	ДоговорыКонтрагентов.СтатьяДвиженияДенежныхСредств,
		|	ДоговорыКонтрагентов.ДоговорССамозанятым,
		|	ДоговорыКонтрагентов.ОбъектРасчетов,
		|	ДоговорыКонтрагентов.ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	ДоговорыСКонтрагентами КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ДоговорыКонтрагентов.СчетКонтрагента
		|	И ДоговорыКонтрагентов.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.БанковскийСчет <> &БанковскийСчет
		|	И ДоговорыКонтрагентов.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
		|";
	
	Запрос.УстановитьПараметр("Таблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		
		Отбор = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
		Отбор.Вставить("ВернутьПервый", Истина);
		
		ДоговорыИОбъектыРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектыРасчетовПоСсылкам(
			Результат.ВыгрузитьКолонку("Договор"),
			Организация, ,
			Отбор);
		
		Для Каждого СтрокаДоговора Из Результат Цикл
			СтрокаДоговора.ОбъектРасчетов = ДоговорыИОбъектыРасчетов[СтрокаДоговора.Договор];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу с договорами кредитов и депозитов.
// 
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций -  Банковский счет организации.
//  Организация - СправочникСсылка.Организации -  Организация.
//  ИсходнаяТаблица - ТаблицаЗначений - таблица, содержащая список контрагентов и их счетов:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполняется поиск договоров.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполняется поиск договоров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Список объектов расчетов по найденным договорам:
//   *Контрагент - СправочникСсылка.Организации, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица - 
//                контрагент, по которому выполнялся поиск договоров.
//   *СчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций, Строка - 
//                     банковский счет контрагента, по которому выполнялся поиск договоров.
//   *Ссылка - СправочникСсылка.ДоговорыКредитовИДепозитов - найденный договор кредита и депозита.
//   *ХарактерДоговора - ПеречислениеСсылка.ХарактерыДоговоровФинансовыхИнструментов - характер договора.
//   *СтатьяДДСПоступленияВыдачи - СправочникСсылка.СтатьиДвиженияДенежныхСредств - статья движения денежных средств 
//                                 поступления (выдачи) по договору.
//   *СтатьяДДСОсновногоДолга - СправочникСсылка.ОбъектыРасчетов - Статья движения денежных средств основного долга по 
//                              договору.
//
Функция СписокДоговоровКредитовДепозитов(БанковскийСчет, ИсходнаяТаблица)

	ИсходнаяТаблица.Индексы.Добавить("Контрагент, СчетКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Контрагент КАК Контрагент,
		|	Таблица.СчетКонтрагента КАК СчетКонтрагента
		|ПОМЕСТИТЬ КонтрагентыИСчета
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрагентыИСчета.Контрагент КАК Контрагент,
		|	КонтрагентыИСчета.СчетКонтрагента КАК СчетКонтрагента,
		|	ДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
		|	ДоговорыКредитовИДепозитов.ХарактерДоговора КАК ХарактерДоговора,
		|	ДоговорыКредитовИДепозитов.СтатьяДДСПоступленияВыдачи КАК СтатьяДДСПоступленияВыдачи,
		|	ДоговорыКредитовИДепозитов.СтатьяДДСОсновногоДолга КАК СтатьяДДСОсновногоДолга
		|ИЗ
		|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыИСчета КАК КонтрагентыИСчета
		|		ПО ДоговорыКредитовИДепозитов.Контрагент = КонтрагентыИСчета.Контрагент
		|			И ДоговорыКредитовИДепозитов.БанковскийСчетКонтрагента = КонтрагентыИСчета.СчетКонтрагента
		|			И (ДоговорыКредитовИДепозитов.БанковскийСчет = &БанковскийСчет)
		|			И (ДоговорыКредитовИДепозитов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует))";
	
	Запрос.УстановитьПараметр("Таблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция НайтиРазбитыйПлатеж(ТаблицаДокументов, СтрокаДокумента)

	ПараметрыОтбора = ДенежныеСредстваКлиентСервер.ТегиСтрокиДокумента();
	ПараметрыОтбора.Удалить("Сумма");
	ПараметрыОтбора.Удалить("ДанныеВыписки");
	ПараметрыОтбора.Удалить("ОКТМО");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаДокумента);
	
	Для Каждого ТекущийОтбор Из ПараметрыОтбора Цикл
		
		КолонкаТаблицы = ТаблицаДокументов.Колонки.Найти(ТекущийОтбор.Ключ);
		
		Если КолонкаТаблицы <> Неопределено Тогда
			ПараметрыОтбора.Вставить(ТекущийОтбор.Ключ, КолонкаТаблицы.ТипЗначения.ПривестиЗначение(ТекущийОтбор.Значение));
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли;

КонецФункции

Функция РеквизитыЗаполненияКонтрагента()

	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("Наименование", "");
	РеквизитыКонтрагента.Вставить("НаименованиеПолное", "");
	РеквизитыКонтрагента.Вставить("НаименованиеМеждународное", "");
	РеквизитыКонтрагента.Вставить("ИНН", "");
	РеквизитыКонтрагента.Вставить("КПП", "");
	РеквизитыКонтрагента.Вставить("СтранаРегистрации", Неопределено);
	РеквизитыКонтрагента.Вставить("ЮрФизЛицо", Неопределено);
	РеквизитыКонтрагента.Вставить("Партнер", Неопределено);
	
	Возврат РеквизитыКонтрагента;

КонецФункции

Функция РеквизитыЗаполненияПартнера()

	РеквизитыПартнера = Новый Структура;
	РеквизитыПартнера.Вставить("Наименование", "");
	РеквизитыПартнера.Вставить("НаименованиеПолное", "");
	РеквизитыПартнера.Вставить("Клиент", Истина);
	РеквизитыПартнера.Вставить("Поставщик", Истина);
	РеквизитыПартнера.Вставить("ПрочиеОтношения", Истина);
	РеквизитыПартнера.Вставить("ЮрФизЛицо", Перечисления.КомпанияЧастноеЛицо.Компания);
	
	Возврат РеквизитыПартнера;

КонецФункции

Функция РеквизитыБанковскогоСчета()

	РеквизитыСчета = Новый Структура;
	РеквизитыСчета.Вставить("Владелец", Неопределено);
	РеквизитыСчета.Вставить("ВалютаДенежныхСредств", Неопределено);
	РеквизитыСчета.Вставить("НомерСчета", "");
	РеквизитыСчета.Вставить("ИностранныйБанк", Ложь);
	РеквизитыСчета.Вставить("СтранаБанка", Справочники.СтраныМира.ПустаяСсылка());
	РеквизитыСчета.Вставить("Банк", Неопределено);
	РеквизитыСчета.Вставить("РучноеИзменениеРеквизитовБанка", Ложь);
	РеквизитыСчета.Вставить("БИКБанка", "");
	РеквизитыСчета.Вставить("СВИФТБанка", "");
	РеквизитыСчета.Вставить("НаименованиеБанка", "");
	РеквизитыСчета.Вставить("ГородБанка", "");
	РеквизитыСчета.Вставить("КоррСчетБанка", "");
	РеквизитыСчета.Вставить("БанкДляРасчетов", "");
	РеквизитыСчета.Вставить("РучноеИзменениеРеквизитовБанкаДляРасчетов", Ложь);
	РеквизитыСчета.Вставить("НаименованиеБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("ГородБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("БИКБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("КоррСчетБанкаДляРасчетов", "");
	РеквизитыСчета.Вставить("Наименование", "");
	
	Возврат РеквизитыСчета;

КонецФункции

Функция НайтиСоздатьПартнера(Отбор)

	Результат = СсылкаИзТаблицыСОтбором("Справочник.Партнеры", Отбор);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйПартнер, Отбор);
		НовыйПартнер.ДатаРегистрации = ТекущаяДатаСеанса();
		НовыйПартнер.Комментарий = НСтр("ru = '#Создан автоматически при импорте банковских документов';
										|en = '#Created automatically while importing bank documents'");
		НовыйПартнер.Записать();
		
		Результат = НовыйПартнер.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НайтиСоздатьКонтрагента(Отбор)

	Результат = СсылкаИзТаблицыСОтбором("Справочник.Контрагенты", Отбор);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйКонтрагент, Отбор);
		НовыйКонтрагент.Записать();
		
		Результат = НовыйКонтрагент.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НайтиСоздатьБанковскийСчетКонтрагента(Отбор)

	Результат = СсылкаИзТаблицыСОтбором("Справочник.БанковскиеСчетаКонтрагентов", Отбор);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
	
		НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйСчет, Отбор);
		
		НовыйСчет.Записать();
		Результат = НовыйСчет.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СсылкаИзТаблицыСОтбором(ИмяТаблицы, ПараметрыЗапроса)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяТаблицы КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И &Условия";
	
	СписокУсловий = Новый Массив;
	
	Для Каждого ТекущийПараметр Из ПараметрыЗапроса Цикл
		
		СписокУсловий.Добавить(СтрШаблон("Таблица.%1 = &%1", ТекущийПараметр.Ключ));
		Запрос.УстановитьПараметр(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", СтрСоединить(СписокУсловий, " И ")); //@Query-part
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция РазделенныйСписокУИП(ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУИП.Код КАК Код,
		|	ТаблицаУИП.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ СписокУИП
		|ИЗ
		|	&ТаблицаУИП КАК ТаблицаУИП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокУИП.НомерСтроки КАК НомерСтроки,
		|	СписокУИП.Код КАК Код
		|ПОМЕСТИТЬ СписокУИПКонвертацииВалюты
		|ИЗ
		|	СписокУИП КАК СписокУИП
		|ГДЕ
		|	СписокУИП.Код ПОДОБНО &ПрефиксКонвертации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокУИП.Код КАК Код,
		|	СписокУИП.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	СписокУИП КАК СписокУИП
		|ГДЕ
		|	НЕ СписокУИП.НомерСтроки В
		|				(ВЫБРАТЬ
		|					СписокУИПКонвертацииВалюты.НомерСтроки КАК НомерСтроки
		|				ИЗ
		|					СписокУИПКонвертацииВалюты КАК СписокУИПКонвертацииВалюты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокУИПКонвертацииВалюты.НомерСтроки КАК НомерСтроки,
		|	СписокУИПКонвертацииВалюты.Код КАК Код
		|ИЗ
		|	СписокУИПКонвертацииВалюты КАК СписокУИПКонвертацииВалюты";
	
	Запрос.УстановитьПараметр("ТаблицаУИП", ТаблицаДокументов);
	Запрос.УстановитьПараметр("ПрефиксКонвертации", НСтр("ru = 'ПП%';
														|en = '#%'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	МассивЗапросов = Запрос.ВыполнитьПакет();
	УИПРасчетовСКлиентами = МассивЗапросов[МассивЗапросов.ВГраница() - 1].Выгрузить();
	УИПКонвертации = МассивЗапросов[МассивЗапросов.ВГраница()].Выгрузить();
	
	СпискиУИП = Новый Структура;
	СпискиУИП.Вставить("УИПРасчетовСКлиентами", УИПРасчетовСКлиентами);
	СпискиУИП.Вставить("УИПКонвертации", УИПКонвертации);
	
	Возврат СпискиУИП;
	
КонецФункции

Процедура ЗаполнитьКонтрагентаВДокументахЗагрузки(Контрагент, Партнер, ДокументыКЗагрузке, Отбор)

	ЗаписиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(Отбор);
	
	Для каждого ЗаписьКонтрагента Из ЗаписиКонтрагента Цикл
		ЗаписьКонтрагента.Контрагент = Контрагент;
		ЗаписьКонтрагента.Партнер = Партнер;
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьПараметрыОтбораДоговора(ПараметрыОтбора)

	ПараметрыОтбора.Вставить("Приоритет", 1);
	ПараметрыОтбора.Вставить("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);

КонецПроцедуры

Процедура ЗаполнитьОбъектРасчетовПлатежаПоДоговору(СтрокаПлатежа, ОбъектыРасчетовПоДоговорам, Отбор)

	Если Отбор.Приоритет > 4 Тогда
		Возврат;
	КонецЕсли;
	
	СписокОбъектовРасчетов = ОбъектыРасчетовПоДоговорам.НайтиСтроки(Отбор);
	
	Если СписокОбъектовРасчетов.Количество() = 1 Тогда
		
		СтрокаПлатежа.ОбъектРасчетов = СписокОбъектовРасчетов[0].ОбъектРасчетов;
		СтрокаПлатежа.ДоговорССамозанятым = СписокОбъектовРасчетов[0].ДоговорССамозанятым;
		
		Если ЗначениеЗаполнено(СписокОбъектовРасчетов[0].СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = СписокОбъектовРасчетов[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	ИначеЕсли СписокОбъектовРасчетов.Количество() = 0 Тогда
		
		Отбор.Вставить("Приоритет", Отбор.Приоритет + 1);
		ЗаполнитьОбъектРасчетовПлатежаПоДоговору(СтрокаПлатежа, ОбъектыРасчетовПоДоговорам, Отбор);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область Локализация

Процедура ЗагрузитьПодтверждениеЗачисления(Параметры, Адрес)

	БанковскийСчет = Параметры.БанковскийСчет;
	Документ = ДенежныеСредстваСерверЛокализация.ФормированиеПодтвержденияЗачисленияДенежныхСредств(Параметры.СтрокиВыписки, БанковскийСчет);
	
	Если Документ <> Неопределено Тогда
	
		ПоместитьВоВременноеХранилище(Документ, Адрес);
		
		РегистрыСведений.ПоследнийОбменСБанками.СоздатьЗапись(
				БанковскийСчет, Новый Структура("ДатаНачалаЗагрузки, ДатаКонцаЗагрузки",
					Параметры.ДатаНачалаЗагрузки, Параметры.ДатаКонцаЗагрузки));
	
	КонецЕсли;

КонецПроцедуры

Функция НоваяТаблицаОстатковВыпискиТОФК()

	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("АналитическийКодРаздела", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(8)));
	Таблица.Колонки.Добавить("НачальныйОстаток", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КонечныйОстаток", Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;

КонецФункции

Процедура ЗаполнитьСведенияОбОстаткахТОФК(ОстаткиДенежныхСредствПоРазделам, НомерСчета, ДатаНачала, ДатаКонца, РасчетныеСчета)

	КопияТаблицыОстатков = ОстаткиДенежныхСредствПоРазделам.Скопировать(, "АналитическийКодРаздела");
	КопияТаблицыОстатков.Свернуть("АналитическийКодРаздела");
	КопияТаблицыОстатков.Колонки.Добавить("НомерСчета", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	КопияТаблицыОстатков.ЗаполнитьЗначения(НомерСчета, "НомерСчета");
	Выборка = ВыборкаКазначейскихСчетовОрганизацийПоЛицевымСчетамИРазделам(КопияТаблицыОстатков);
	
	Для Каждого Раздел Из ОстаткиДенежныхСредствПоРазделам Цикл
		
		ДанныеПоСчету = ДенежныеСредстваКлиентСервер.ДанныеРасчетногоСчета();
		ЗаполнитьЗначенияСвойств(ДанныеПоСчету, Раздел);
		
		Если Выборка.НайтиСледующий(Раздел.АналитическийКодРаздела, "АналитическийКодРаздела") Тогда
			ДанныеПоСчету.РасчСчет = Выборка.Счет;
		Иначе
			ДанныеПоСчету.РасчСчет = "";
		КонецЕсли;
		
		ДанныеПоСчету.РазделЛицевогоСчета = Раздел.АналитическийКодРаздела;
		ДанныеПоСчету.НомерЛицевогоСчета = НомерСчета;
		ДанныеПоСчету.ДатаНачала = ДатаНачала;
		ДанныеПоСчету.ДатаКонца = ДатаКонца;
		
		РасчетныеСчета.Добавить(ДанныеПоСчету);
		
		Выборка.Сбросить();
		
	КонецЦикла;

КонецПроцедуры

Функция ВыборкаКазначейскихСчетовОрганизацийПоЛицевымСчетамИРазделам(ИсходныеДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.НомерСчета КАК НомерСчета,
		|	ИсходныеДанные.АналитическийКодРаздела КАК АналитическийКодРаздела
		|ПОМЕСТИТЬ СчетаИРазделы
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаИРазделы.НомерСчета КАК НомерСчета,
		|	СчетаИРазделы.АналитическийКодРаздела КАК АналитическийКодРаздела,
		|	БанковскиеСчетаОрганизаций.НомерСчета КАК Счет,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаОрганизаций.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаИРазделы КАК СчетаИРазделы
		|		ПО БанковскиеСчетаОрганизаций.НомерЛицевогоСчета = СчетаИРазделы.НомерСчета
		|			И БанковскиеСчетаОрганизаций.РазделЛицевогоСчета = СчетаИРазделы.АналитическийКодРаздела
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СчетаИРазделы";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ПустаяТаблицаРасшифровкиТОФК()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИГК", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("АналитическийКодРаздела", Новый ОписаниеТипов("Строка"));
	
	//++ НЕ УТ
	ТипыСтатьиЦелевыхСредств = Новый Массив;
	ТипыСтатьиЦелевыхСредств.Добавить(Тип("СправочникСсылка.ИсточникиПоступленияЦелевыхСредств"));
	ТипыСтатьиЦелевыхСредств.Добавить(Тип("СправочникСсылка.НаправленияРасходованияЦелевыхСредств"));
	Таблица.Колонки.Добавить("СтатьяЦелевыхСредств", Новый ОписаниеТипов(ТипыСтатьиЦелевыхСредств));
	//-- НЕ УТ
	
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ПрочитатьДанныеXDTOПоСхеме(ОбъектXDTO, ИсточникXDTO, Данные, ЗаголовокПоля = "")

	Для каждого КоллекцияСвойствXDTO Из ОбъектXDTO.Свойства() Цикл
	
		КоллекцияСвойствИсточникаXDTO = ИсточникXDTO.Свойства(); // КоллекцияСвойствXDTO
		СвойствоИсточникаXDTO = КоллекцияСвойствИсточникаXDTO.Получить(КоллекцияСвойствXDTO.Имя);
		ЗначениеСвойстваОбъектаXDTO = ОбъектXDTO[КоллекцияСвойствXDTO.Имя];
		
		Если СвойствоИсточникаXDTO = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодзаголовокПоля = ?(ЗаголовокПоля <> "", ЗаголовокПоля + "_", "") + КоллекцияСвойствXDTO.Имя;
		
		Если ТипЗнч(ЗначениеСвойстваОбъектаXDTO) = Тип("СписокXDTO")
			ИЛИ ТипЗнч(ИсточникXDTO[КоллекцияСвойствXDTO.Имя]) = Тип("СписокXDTO") Тогда
		
			МассивДанных = Новый Массив;
			НомерСтроки = 0;
			
			Если ТипЗнч(ЗначениеСвойстваОбъектаXDTO) = Тип("СписокXDTO") Тогда
				
				Для каждого ЭлементСписка Из ЗначениеСвойстваОбъектаXDTO Цикл
				
					ДанныеСписка = Новый Структура;
					ДанныеСписка.Вставить("НомерСтроки", НомерСтроки);
					ПрочитатьДанныеXDTOПоСхеме(ЭлементСписка, ФабрикаXDTO.Создать(СвойствоИсточникаXDTO.Тип), ДанныеСписка);
					МассивДанных.Добавить(ДанныеСписка);
					НомерСтроки = НомерСтроки + 1;
				
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ЗначениеСвойстваОбъектаXDTO) = Тип("ОбъектXDTO") Тогда
				
				ДанныеСписка = Новый Структура;
				ПрочитатьДанныеXDTOПоСхеме(ЗначениеСвойстваОбъектаXDTO, ФабрикаXDTO.Создать(СвойствоИсточникаXDTO.Тип), ДанныеСписка);
				МассивДанных.Добавить(ДанныеСписка);
				
			КонецЕсли;
			
			Данные.Вставить(ПодзаголовокПоля, МассивДанных);
			
		ИначеЕсли ТипЗнч(ЗначениеСвойстваОбъектаXDTO) = Тип("ОбъектXDTO") Тогда
			
			ПрочитатьДанныеXDTOПоСхеме(ЗначениеСвойстваОбъектаXDTO, ФабрикаXDTO.Создать(СвойствоИсточникаXDTO.Тип), Данные, ПодзаголовокПоля);
			
			Попытка
				
				ЗначениеЭлемента = ЗначениеСвойстваОбъектаXDTO.Последовательность().ПолучитьТекст(0);
				Данные.Вставить(ПодзаголовокПоля, ЗначениеЭлемента);
				
			Исключение
				Продолжить;
			КонецПопытки;
			
		Иначе
			
			ЗначениеXDTO = ЗначениеСвойстваОбъектаXDTO;
			ОбменСБанкамиУТ.ПривестиКТипу(СвойствоИсточникаXDTO, ЗначениеXDTO);
			Данные.Вставить(ПодзаголовокПоля, ЗначениеXDTO);
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция ЭтоКомиссияСБП(Знач ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "комисси") > 0
		И ЭтоОперацияСБП(ИсходнаяСтрока);

КонецФункции

Функция ЭтоОперацияСБП(Знач ИсходнаяСтрока)

	СписокПодстрок = Новый Массив;
	СписокПодстрок.Добавить(НСтр("ru = 'систем';
								|en = 'faster'"));
	СписокПодстрок.Добавить(НСтр("ru = 'быстры';
								|en = 'payments'"));
	СписокПодстрок.Добавить(НСтр("ru = 'платеж';
								|en = 'system'"));
	
	ПодстрокаКод = Новый Массив;
	ПодстрокаКод.Добавить(НСтр("ru = 'QR';
								|en = 'QR'"));
	ПодстрокаКод.Добавить(НСтр("ru = 'код';
								|en = 'code'"));
	
	Возврат СтрНайти(ВРег(ИсходнаяСтрока), СтрШаблон(" %1 ", НСтр("ru = 'СБП';
																	|en = 'Faster Payments System'"))) > 0
		ИЛИ СтрНайти(ИсходнаяСтрока, НСтр("ru = 'СБП';
											|en = 'Faster Payments System'")) > 0
		ИЛИ НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, 1, 0)
		ИЛИ НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, ПодстрокаКод, 1, 0);

КонецФункции

// Возращает признак наличия фразы в исходной строке.
//
// Параметры:
//  ИсходнаяСтрока - Строка - исходная строка, в которой выполняется поиск фразы.
//  СписокПодстрок - Массив из Строка - массив искомой подстроки в виде отдельных слов.
//  ПозицияПодстроки - Число - позиция, с учетом которой выполняется поиск в исходной строке.
//  Индекс - Число - индекс, рассматриваемой строки списка подстрок.
// 
// Возвращаемое значение:
//   - Булево
//
Функция НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ПозицияПодстроки, Индекс)

	Подстрока = СписокПодстрок.Получить(Индекс);
	
	Если Индекс = 0 Тогда
		ПредыдущаяПодстрока = "";
	Иначе
		ПредыдущаяПодстрока = СписокПодстрок.Получить(Индекс - 1);
	КонецЕсли;
	
	НачальнаяПозиция = ПозицияПодстроки + СтрДлина(ПредыдущаяПодстрока);
	ПозицияПодстроки = СтрНайти(НРег(ИсходнаяСтрока), Подстрока, , НачальнаяПозиция);
	
	Если ПозицияПодстроки > 0 Тогда
		
		Если СписокПодстрок.ВГраница() >= Индекс + 1 Тогда
			Результат = НайденаФразаИзСпискаПодстрок(ИсходнаяСтрока, СписокПодстрок, ПозицияПодстроки, Индекс + 1);
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВырезкаФИОФизлицаВНазначенииПлатежаСБП(Знач ИсходнаяСтрока)

	Результат = "";
	
	ПодстрокаСФИО = ВырезаннаяПодстрока(ИсходнаяСтрока, НСтр("ru = 'от';
															|en = 'from'"));
	
	Если ПодстрокаСФИО <> "" Тогда
		Результат = ВырезатьФИОИзСтроки(ПодстрокаСФИО);
	Иначе
		
		ПодстрокаСФИО = ВырезаннаяПодстрока(ИсходнаяСтрока, НСтр("ru = 'в пользу';
																|en = 'for'"));
		
		Если ПодстрокаСФИО <> "" Тогда
			Результат = ВырезатьФИОИзСтроки(ПодстрокаСФИО);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВырезаннаяПодстрока(Знач ИсходнаяСтрока, Фраза)

	ВырезаннаяПодстрока = "";
	
	Подстрока = СтрШаблон(" %1 ", Фраза);
	НачальнаяПозиция = СтрНайти(НРег(ИсходнаяСтрока), Подстрока);
	
	Если НачальнаяПозиция > 0 Тогда
		ВырезаннаяПодстрока = Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - (НачальнаяПозиция + СтрДлина(Подстрока) - 1));
	КонецЕсли;
	
	Возврат ВырезаннаяПодстрока;

КонецФункции

Функция ВырезатьФИОИзСтроки(ИсходнаяСтрока)

	МассивПодстрокСФИО = СтрРазделить(ИсходнаяСтрока, " ", Ложь);
	ЧастиФИО = Новый Массив;
	
	ЧастиОтчества = Новый Массив;
	ЧастиОтчества.Добавить(НСтр("ru = 'оглы';
								|en = 'ogly'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'улы';
								|en = 'uly'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'уулу';
								|en = 'uulu'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'кызы';
								|en = 'kizi'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'гызы';
								|en = 'gizi'"));
	ЧастиОтчества.Добавить(НСтр("ru = 'угли';
								|en = 'ugli'"));
	
	Для Каждого СтрокаМассива Из МассивПодстрокСФИО Цикл
		
		ПерваяБуква = Лев(СтрокаМассива, 1);
		
		Если Не ЭтоЗаглавнаяБуква(ПерваяБуква)
			И ЧастиФИО.Количество() > 0
			И ЧастиОтчества.Найти(СтрокаМассива) = Неопределено Тогда
			Прервать;
		Иначе
			ЧастиФИО.Добавить(СтрокаМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиФИО, " ");

КонецФункции

Функция ЭтоВозврат(Знач ИсходнаяСтрока)

	Возврат СтрНайти(НРег(ИсходнаяСтрока), "возврат") > 0;

КонецФункции

Функция ЭтоЗаглавнаяБуква(Буква)

	Возврат ВРег(Буква) = Буква;

КонецФункции

#КонецОбласти

//-- Локализация

#КонецОбласти

#КонецЕсли
