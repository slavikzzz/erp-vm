#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

// Заголовок рабочего места
// 
// Возвращаемое значение:
//  Строка
// 
Функция ЗаголовокРабочегоМеста() Экспорт
	
	Возврат НСтр("ru = 'Документы приема в переработку (все)';
				|en = 'External subcontracting — All documents'");
	
КонецФункции

// Инициализировать хозяйственные операции и документы.
// 
// Параметры:
//  ОтборХозяйственныеОперации		 - СписокЗначений - список значений типа ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений - список значений типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция.
// 
// Возвращаемое значение:
//  см. ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования) Экспорт
		
	ХозяйственныеОперацииИДокументы = ХозяйственныеОперацииИДокументы();
		
	Если КлючНазначенияИспользования = ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы,
		ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНастроек);
	ТаблицаЗначенийДоступно.Сортировать("Порядок");
	
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет на наличие документов к оформлению.
// 
// Параметры:
//  Параметры             - Структура -
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации -
// 
// Возвращаемое значение:
//  Булево - Есть документы к оформлению
//
Функция ЕстьДокументыКОформлению(Параметры, ХозяйственнаяОперация) Экспорт
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(
							Параметры.Организация,, Параметры.Склад, ХозяйственнаяОперация, Параметры.Менеджер);
	
	ХозяйственныеОперации = Новый Массив;
	ХозяйственныеОперации.Добавить(ХозяйственнаяОперация);
	
	Состояния = НакладныеСервер.СостоянияПоХозоперациям(ХозяйственныеОперации);
	Если Не ЗначениеЗаполнено(Состояния) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаТаблиц = НакладныеСервер.ИменаВременныхТаблицПоСостояниям();
	Пакет		= Новый Массив;
	Выборка		= Новый Массив;
	
	Текст =
	"ВЫБРАТЬ
	|	КОформлению
	|ИЗ
	|	&ИмяТаблицы
	|";
	
	Для Каждого КЗ Из Состояния Цикл
		Пакет.Добавить(НакладныеСервер.ТекстЗапросаСостояний(КЗ.Ключ, ПараметрыОтбора, КЗ.Значение, Истина));
		Выборка.Добавить(СтрЗаменить(Текст, "&ИмяТаблицы", ИменаТаблиц[КЗ.Ключ]));
	КонецЦикла;
	
	Пакет.Добавить(СтрСоединить(Выборка, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетДавальцу2_5 Тогда
		ХозяйственныеОперации.Добавить(ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора());
	КонецЕсли;
	
	СписокОрганизаций = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		СписокОрганизаций = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Параметры.Организация);
		СписокОрганизаций.Добавить(Параметры.Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ХозОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("Склад", СкладыСервер.СписокПодчиненныхСкладов(Параметры.Склад).ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер", Параметры.Менеджер);
	
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


// Возвращает количество строк к оформлению.
// 
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
// 
// Возвращаемое значение:
//  Число - количество строк к оформлению
//
Функция КоличествоСтрокКОформлению(ХозяйственнаяОперация) Экспорт
	
	ХозяйственныеОперации = Новый Массив;
	ХозяйственныеОперации.Добавить(ХозяйственнаяОперация);
	
	Пакет   = Новый Массив;
	Выборка = Новый Массив;
	
	Состояния = НакладныеСервер.СостоянияПоХозоперациям(ХозяйственныеОперации);
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(,,, ХозяйственнаяОперация);
	
	Для каждого КЗ Из Состояния Цикл
		
		Пакет.Добавить(НакладныеСервер.ТекстЗапросаСостояний(КЗ.Ключ, ПараметрыОтбора, КЗ.Значение));
		
		Если КЗ.Ключ = "СостоянияРасходныхОрдеров" Тогда
			
			ТекстЗапросаВыборка =
			"ВЫБРАТЬ
			|	СостоянияРасходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияРасходныхОрдеров.Склад        КАК Склад
			|ИЗ
			|	ВТСостоянияРасходныхОрдеров КАК СостоянияРасходныхОрдеров";
			
		ИначеЕсли КЗ.Ключ = "СостоянияПриходныхОрдеров" Тогда
			
			ТекстЗапросаВыборка =
			"ВЫБРАТЬ
			|	СостоянияПриходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияПриходныхОрдеров.Склад        КАК Склад
			|ИЗ
			|	ВтСостоянияПриходныхОрдеров КАК СостоянияПриходныхОрдеров";
			
		ИначеЕсли КЗ.Ключ = "СостоянияПередач" Тогда
			
			ТекстЗапросаВыборка =
			"ВЫБРАТЬ
			|	СостоянияПередач.Распоряжение КАК Распоряжение,
			|	СостоянияПередач.Склад        КАК Склад
			|ИЗ
			|	ВтСостоянияПередач КАК СостоянияПередач";
			
		ИначеЕсли КЗ.Ключ = "СостоянияПоступлений" Тогда
			
			ТекстЗапросаВыборка =
			"ВЫБРАТЬ
			|	СостоянияПоступлений.Распоряжение КАК Распоряжение,
			|	СостоянияПоступлений.Склад        КАК Склад
			|ИЗ
			|	ВтСостоянияПоступлений КАК СостоянияПоступлений";
			
		КонецЕсли;
		
		Выборка.Добавить(ТекстЗапросаВыборка);
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Распоряжение КАК Распоряжение,
	|	ВложенныйЗапрос.Склад        КАК Склад
	|ИЗ
	|	ТекстЗапросаВложенный КАК ВложенныйЗапрос
	|";
	
	ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса,
					"ТекстЗапросаВложенный",
					СтрШаблон("(%1)", СтрСоединить(Выборка, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении())));
	
	Пакет.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	
	ХозяйственныеОперации.Добавить(ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора());
	
	Запрос.УстановитьПараметр("ХозОперация",       ХозяйственныеОперации);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

#Область ФормированиеГиперссылкиВЖурнале

Процедура СформироватьГиперссылкуКОформлениюФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("КОформлению, СмТакжеВРаботе");
	Результат.КОформлению = ОбщегоНазначенияУТ.СформироватьГиперссылкуКОформлению(Параметры[0], Параметры[1]);
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыДавальцев2_5") Тогда
		МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ЗаказДавальца2_5");
	КонецЕсли;
	
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ДоверенностьВыданная");
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Обработка.ФормированиеПередачТоваровМеждуОрганизациямиИВыкупов");
	
	ЖурналДокументовПриемаВПереработку2_5Локализация.ДополнитьМассивМенеджеровРасчетаСмТакжеВРаботеЛокализация(МассивМенеджеровРасчетаСмТакжеВРаботе);
	
	Результат.СмТакжеВРаботе =
		ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, Параметры[1]);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	ХозяйственныеОперацииИДокументы = ХозяйственныеОперацииИДокументы();
	НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(
		Новый Структура("КлючНазначенияИспользования", Параметры.КлючНазначенияИспользования));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Все строки с одинаковым ключом должны иметь одинаковый заголовок рабочего места 
	СтрокаПоКлючуНазначенияИспользования = НайденныеСтроки[0];
	
	Возврат Новый ФорматированнаяСтрока(СтрокаПоКлючуНазначенияИспользования.ЗаголовокРабочегоМеста, , , ,
				"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.СписокДокументов");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ХозяйственныеОперацииИДокументы()
	
	ТЗХозОперацииИТипыДокументов = ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы();
	ТЗХозОперацииИТипыДокументов.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "ПриемкаТоваровНаХранение";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.ПриемкаТоваровНаХранение");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (поступления от давальца)';
												|en = 'External subcontracting (from provider)'");
	Строка.ДокументПредставление	   = ДавальческаяСхемаКлиентСервер.СинонимДокументаПриемкаТоваровНаХранение();
	Строка.Порядок					   = 11;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "ПоступлениеОтДавальца";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "ОтчетДавальцу";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ОтчетДавальцу2_5;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.ОтчетДавальцу2_5");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.ОтчетДавальцу2_5.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (отчеты давальцу)';
												|en = 'External subcontracting (consumption reports)'");
	Строка.Порядок					   = 12;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ОтчетДавальцу2_5";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "ОтгрузкаТоваровСХранения";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.ОтгрузкаТоваровСХранения.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (передачи давальцу)';
												|en = 'External subcontracting (transfers to provider)'");
	Строка.ДокументПредставление	   = НСтр("ru = 'Передача давальцу';
												|en = 'Goods issue — Subcontracting services delivered'");
	Строка.Порядок					   = 13;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "ПередачаДавальцу";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "ОтгрузкаТоваровСХранения";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.ОтгрузкаТоваровСХранения.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (передачи давальцу)';
												|en = 'External subcontracting (transfers to provider)'");
	Строка.ДокументПредставление	   = НСтр("ru = 'Передача давальцу';
												|en = 'Goods issue — Subcontracting services delivered'");
	Строка.Порядок					   = 14;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "ВозвратДавальцу";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "ОтчетОСписанииТоваровСХранения";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.СписаниеТоваровДавальцаЗаСчетДавальца;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.ОтчетОСписанииТоваровСХранения");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.ОтчетОСписанииТоваровСХранения.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (отчеты о списании)';
												|en = 'External subcontracting (write-off reports)'");
	Строка.ДокументПредставление	   = ДавальческаяСхемаКлиентСервер.СинонимДокументаОтчетОСписанииТоваровСХранения();
	Строка.Порядок					   = 16;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ОтчетОСписанииТоваровСХранения";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "ОтчетОСписанииТоваровСХранения";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.СписаниеТоваровДавальцаНаРасходы;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.ОтчетОСписанииТоваровСХранения");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.ОтчетОСписанииТоваровСХранения.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (отчеты о списании)';
												|en = 'External subcontracting (write-off reports)'");
	Строка.ДокументПредставление	   = ДавальческаяСхемаКлиентСервер.СинонимДокументаОтчетОСписанииТоваровСХранения();
	Строка.Порядок					   = 17;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ОтчетОСписанииТоваровСХранения";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "ВыкупПринятыхНаХранениеТоваров";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ВыкупТоваровДавальца;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (выкупы товаров)';
												|en = 'External subcontracting (redemptions of goods)'");
	Строка.ДокументПредставление	   = ДавальческаяСхемаКлиентСервер.СинонимДокументаВыкупПринятыхНаХранениеТоваров();
	Строка.Порядок					   = 18;
	Строка.МенеджерРасчетаГиперссылкиКОформлению = "Документ.ВыкупПринятыхНаХранениеТоваров";
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования = "КорректировкаРеализации";
	Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ОтчетДавальцу2_5;
	Строка.ДобавитьКнопкуСоздать	   = Истина;
	Строка.ТипДокумента				   = Тип("ДокументСсылка.КорректировкаРеализации");
	Строка.ПолноеИмяДокумента		   = Метаданные.Документы.КорректировкаРеализации.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (корректировки реализации)';
												|en = 'External subcontracting (sales adjustments)'");
	Строка.ДокументПредставление	   = НСтр("ru = 'Корректировка отчета давальцу';
												|en = 'Adjust ""Consumption report — Subcontracting services delivered""'");
	Строка.Порядок					   = 19;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемкиПоПриемкамТоваровДавальца2_5") Тогда
		
		Строка = ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.КлючНазначенияИспользования = "АктОРасхожденияхПослеПриемки";
		Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5;
		Строка.ТипДокумента				   = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки");
		Строка.ПолноеИмяДокумента		   = Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя();
		Строка.ДобавитьКнопкуСоздать	   = Истина;
		Строка.ИспользуютсяСтатусы		   = Истина;
		Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (расхождения)';
													|en = 'External subcontracting (discrepancies)'");
		Строка.ДокументПредставление	   = НСтр("ru = 'Акт о расхождениях после приемки от давальца';
													|en = 'Discrepancy report following receipt from provider'");
		Строка.Порядок					   = 20;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузкиПоОтгрузкамТоваровДавальцу2_5") Тогда
		
		Строка = ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.КлючНазначенияИспользования = "АктОРасхожденияхПослеОтгрузки";
		Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5;
		Строка.ТипДокумента				   = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки");
		Строка.ПолноеИмяДокумента		   = Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя();
		Строка.ДобавитьКнопкуСоздать	   = Истина;
		Строка.ИспользуютсяСтатусы		   = Истина;
		Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (расхождения)';
													|en = 'External subcontracting (discrepancies)'");
		Строка.ДокументПредставление	   = НСтр("ru = 'Акт о расхождениях после отгрузки давальцу';
													|en = 'Discrepancy report following shipment to provider'");
		Строка.Порядок					   = 21;
		
		Строка = ТЗХозОперацииИТипыДокументов.Добавить();
		Строка.КлючНазначенияИспользования = "АктОРасхожденияхПослеОтгрузки";
		Строка.ХозяйственнаяОперация	   = Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5;
		Строка.ТипДокумента				   = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки");
		Строка.ПолноеИмяДокумента		   = Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя();
		Строка.ДобавитьКнопкуСоздать	   = Истина;
		Строка.ИспользуютсяСтатусы		   = Истина;
		Строка.ЗаголовокРабочегоМеста	   = НСтр("ru = 'Документы приема в переработку (расхождения)';
													|en = 'External subcontracting (discrepancies)'");
		Строка.ДокументПредставление	   = НСтр("ru = 'Акт о расхождениях после отгрузки давальцу';
													|en = 'Discrepancy report following shipment to provider'");
		Строка.Порядок					   = 22;
		
	КонецЕсли;
	
	УчетНДСУП.ОписаниеОперацийИТиповДокументовДляЖурналаДокументовПриемаВПереработку2_5(ТЗХозОперацииИТипыДокументов);
	
	Возврат ТЗХозОперацииИТипыДокументов;
	
КонецФункции

#КонецОбласти

#КонецЕсли
