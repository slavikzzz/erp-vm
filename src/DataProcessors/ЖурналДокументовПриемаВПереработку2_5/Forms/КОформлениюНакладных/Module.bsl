
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Если Не Параметры.Свойство("КлючНазначенияФормы", КлючНазначенияИспользования)
	 Или Не ЗначениеЗаполнено(КлючНазначенияИспользования) Тогда
		КлючНазначенияИспользования = ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку();
	КонецЕсли;
	
	Если Параметры.Свойство("Распоряжения") Тогда
		Распоряжения.ЗагрузитьЗначения(Параметры.Распоряжения);
	КонецЕсли;
	
	ИмяТекущейСтраницы = Неопределено;
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы)
	   И ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
		ТекущийЭлемент = Элементы.Страницы.ТекущаяСтраница;
	КонецЕсли;
	
	ИспользоватьПоступлениеПоНесколькимЗаказам =
		ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	
	ВосстановитьНастройки(Параметры);
	УстановитьОтборПоОрганизации();
	УстановитьОтборПоСкладу();
	
	ЗаполнитьМетаданныеДокументов();
	НастроитьФормуПоПравамИФункциональнымОпциям();
	
	ТребуетсяОбновитьПередачи    = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьОтчеты      = Истина;
	ТребуетсяОбновитьВозвраты    = Истина;
	
	ОбновитьТекущуюСтраницуНаСервере();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// Инициализация сохраненных отборов
	СостоянияПередачиПриИзменении(Неопределено);
	СостоянияПоступленияПриИзменении(Неопределено);
	СостояниеОтчетаПриИзменении(Неопределено);
	СостояниеВозвратыПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы
	   И КлючНазначенияИспользования <> "ТекущиеДела"
	   И КлючНазначенияИспользования <> "ВводНаОсновании" Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ЗаказДавальца2_5" Тогда
		
		ТребуетсяОбновитьПередачи    = Истина;
		ТребуетсяОбновитьПоступления = Истина;
		ТребуетсяОбновитьОтчеты      = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_ОтгрузкаТоваровСХранения" Тогда
		
		ТребуетсяОбновитьПередачи = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_ПриемкаТоваровНаХранение" Тогда
		
		ТребуетсяОбновитьПоступления = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_ОтчетДавальцу2_5" Тогда
		
		ТребуетсяОбновитьОтчеты = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_ОтгрузкаТоваровСХранения" Тогда
		
		ТребуетсяОбновитьВозвраты = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_РасходныйОрдерНаТовары" Тогда
		
		ТребуетсяОбновитьПередачи = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_ПриходныйОрдерНаТовары" Тогда
		
		ТребуетсяОбновитьПоступления = Истина;
		ТребуетсяОбновитьВозвраты    = Истина;
		
	ИначеЕсли ИмяСобытия = "Принять_ФормаСозданныхДокументов" Тогда
		
		ТребуетсяОбновитьПередачи    = Истина;
		ТребуетсяОбновитьПоступления = Истина;
		ТребуетсяОбновитьОтчеты      = Истина;
		ТребуетсяОбновитьВозвраты    = Истина;
		
	ИначеЕсли ИмяСобытия = "СменаСтраницы_КОформлениюПрием" Тогда
		
		ТекущийЭлемент = Элементы[Параметр];
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбновитьТекущуюСтраницу();
	
	Если ЗначениеЗаполнено(Распоряжения)
	   И СписокРаспоряженияНаПередачу.Количество() = 0
	   И СписокРаспоряженияНаПоступление.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Организация") Тогда
			Настройки.Удалить("Организация");
		КонецЕсли;
		
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Склад") Тогда
			Настройки.Удалить("Склад");
		КонецЕсли;
		
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Менеджер") Тогда
			Настройки.Удалить("Менеджер");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ТребуетсяОбновитьПередачи    = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьОтчеты      = Истина;
	ТребуетсяОбновитьВозвраты    = Истина;
	
	ОбновитьТекущуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияПередачиПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если ЗначениеЗаполнено(СостояниеНакладнойПередачи) Тогда
		ОтборСтрок.Вставить("СостояниеНакладной", Число(СостояниеНакладнойПередачи));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеОрдераНаОтгрузку) Тогда
		ОтборСтрок.Вставить("СостояниеОрдераНаОтгрузку", Число(СостояниеОрдераНаОтгрузку));
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаПередачу.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияПоступленияПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если ЗначениеЗаполнено(СостояниеНакладнойПоступления) Тогда
		ОтборСтрок.Вставить("СостояниеНакладной", Число(СостояниеНакладнойПоступления));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеОрдераНаПриемку) Тогда
		ОтборСтрок.Вставить("СостояниеОрдераНаПриемку", Число(СостояниеОрдераНаПриемку));
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаПоступление.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОтчетаПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если ЗначениеЗаполнено(СостояниеОтчета) Тогда
		ОтборСтрок.Вставить("СостояниеОтчета", Число(СостояниеОтчета));
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОтчеты.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВозвратыПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	
	Если ЗначениеЗаполнено(СостояниеОрдераНаОтгрузкуВозврат) Тогда
		ОтборСтрок.Вставить("СостояниеОрдераНаОтгрузку", Число(СостояниеОрдераНаОтгрузкуВозврат));
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаВозвратСырья.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналПереработкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьПоЗаказамПередачи(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОформитьПоЗаказамПередачи");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПередачу.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаспоряжений = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаПередачу.ДанныеСтроки(Строка);
		
		СтруктураРаспоряжений = Новый Структура;
		СтруктураРаспоряжений.Вставить("Ссылка",			 НайденнаяСтрока.Ссылка);
		СтруктураРаспоряжений.Вставить("СостояниеНакладной", НайденнаяСтрока.СостояниеНакладной);
		СтруктураРаспоряжений.Вставить("СостояниеОрдера",	 НайденнаяСтрока.СостояниеОрдераНаОтгрузку);
		
		СписокРаспоряжений.Добавить(СтруктураРаспоряжений);
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",						 ЭтотОбъект);
	ДополнительныеПараметры.Вставить("МассивСсылок",				 СписокРаспоряжений);
	ДополнительныеПараметры.Вставить("ПоОрдерам",					 Ложь);
	ДополнительныеПараметры.Вставить("Склад",						 Склад);
	ДополнительныеПараметры.Вставить("СоздаватьДокументПродажи",	 Ложь);
	ДополнительныеПараметры.Вставить("СохраненыНастройкиОформления", Истина);
	ДополнительныеПараметры.Вставить("ИмяФормыСозданныеДокументы",  "ОбщаяФорма.ФормаСозданныхДокументов");
	ЗаполнитьПараметрыФормыСозданныхДокументов(
		ДополнительныеПараметры,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаДавальцу2_5"));
	ДополнительныеПараметры.Вставить(
		"КлючОбъектаСистемныхНастроек",
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных/ТекущиеДанные");
	ДополнительныеПараметры.Вставить(
		"КлючОбъекта",
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных/ТекущиеДанные");
	
	ПродажиКлиент.СформироватьКомплектДокументовВызов(Неопределено, ДополнительныеПараметры);
	
	Оповестить("Запись_ОтгрузкаТоваровСХранения");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузкеПередачи(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОформитьПоОтгрузкеПередачи");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПередачу.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаспоряжений = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаПередачу.ДанныеСтроки(Строка);
		
		СтруктураРаспоряжений = Новый Структура;
		СтруктураРаспоряжений.Вставить("Ссылка",			 НайденнаяСтрока.Ссылка);
		СтруктураРаспоряжений.Вставить("СостояниеНакладной", НайденнаяСтрока.СостояниеНакладной);
		СтруктураРаспоряжений.Вставить("СостояниеОрдера",	 НайденнаяСтрока.СостояниеОрдераНаОтгрузку);
		
		СписокРаспоряжений.Добавить(СтруктураРаспоряжений);
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",						 ЭтотОбъект);
	ДополнительныеПараметры.Вставить("МассивСсылок",				 СписокРаспоряжений);
	ДополнительныеПараметры.Вставить("ПоОрдерам",					 Истина);
	ДополнительныеПараметры.Вставить("Склад",						 Склад);
	ДополнительныеПараметры.Вставить("СоздаватьДокументПродажи",	 Ложь);
	ДополнительныеПараметры.Вставить("СохраненыНастройкиОформления", Истина);
	ДополнительныеПараметры.Вставить("ИмяФормыСозданныеДокументы",  "ОбщаяФорма.ФормаСозданныхДокументов");
	ЗаполнитьПараметрыФормыСозданныхДокументов(
		ДополнительныеПараметры,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаДавальцу2_5"));
	ДополнительныеПараметры.Вставить(
		"КлючОбъектаСистемныхНастроек",
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных/ТекущиеДанные");
	ДополнительныеПараметры.Вставить(
		"КлючОбъекта",
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных/ТекущиеДанные");
	
	ПродажиКлиент.СформироватьКомплектДокументовВызов(Неопределено, ДополнительныеПараметры);
	
	Оповестить("Запись_ОтгрузкаТоваровСХранения");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоЗаказамПоступления(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОформитьПоЗаказамПоступления");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПоступление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыСозданныхДокументов = ОформитьНакладныеПоЗаказамНаСервере(
										ПоместитьВоВременноеХранилище(ВыделенныеСтроки, УникальныйИдентификатор));
	
	ОбработатьРезультатОформленияДокументов(ПараметрыСозданныхДокументов, "Запись_ПриемкаТоваровНаХранение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоПриемкеПоступления(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОформитьПоПриемкеПоступления");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаПоступление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыСозданныхДокументов = ОформитьПриобретенияНаСервереПоОрдерам(
										ПоместитьВоВременноеХранилище(ВыделенныеСтроки, УникальныйИдентификатор));
	
	ОбработатьРезультатОформленияДокументов(ПараметрыСозданныхДокументов, "Запись_ПриемкаТоваровНаХранение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтчеты(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОформитьОтчеты");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОтчеты.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ГруппыРаспоряжений = Новый Структура;
	ГруппыРаспоряжений.Вставить("Заказы",   Новый Структура("МассивЗаказов, Склады", Новый Массив, Новый Массив));
	ГруппыРаспоряжений.Вставить("Договоры", Новый Структура("МассивЗаказов, Склады", Новый Массив, Новый Массив));
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = СписокРаспоряженияНаОтчеты.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
			ГруппыРаспоряжений.Заказы.МассивЗаказов.Добавить(ТекущаяСтрока.Ссылка);
		Иначе
			
			ГруппыРаспоряжений.Договоры.МассивЗаказов.Добавить(ТекущаяСтрока.Договор);
			
			Если ГруппыРаспоряжений.Договоры.Склады.Найти(ТекущаяСтрока.Склад) = Неопределено Тогда
				ГруппыРаспоряжений.Договоры.Склады.Добавить(ТекущаяСтрока.Склад);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;

	Если ГруппыРаспоряжений.Договоры.Склады.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок,
			"Объект.СписокРаспоряженияНаОтчеты",
			НСтр("ru = 'Оформление отчета <без заказа> по нескольким складам не поддерживается.';
				|en = 'Registration of a report <without an order> by several warehouses is not supported.'"),
			Неопределено);
		
	Иначе
		
		МассивРаспоряжений = Новый Массив;
		
		Для каждого ГруппаРаспоряжений Из ГруппыРаспоряжений Цикл
			
			ЗначениеГруппыРаспоряжений = ГруппаРаспоряжений.Значение;
			
			МассивЗаказов = ЗначениеГруппыРаспоряжений.МассивЗаказов;
			
			Если МассивЗаказов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоляЗаполнения = Новый Структура;
			Если ЗначениеГруппыРаспоряжений.Склады.Количество() > 0 Тогда
				ПоляЗаполнения.Вставить("Склад", ЗначениеГруппыРаспоряжений.Склады[0]);
			КонецЕсли;
			
			ДанныеРаспоряжений = Новый Структура;
			ДанныеРаспоряжений.Вставить("ИмяОформляемогоДокумента", "ОтчетДавальцу2_5");
			ДанныеРаспоряжений.Вставить("ПоляЗаполнения",			ПоляЗаполнения);
			ДанныеРаспоряжений.Вставить("МассивЗаказов",			МассивЗаказов);
			ДанныеРаспоряжений.Вставить("КлючевыеПоляШапки");
			ДанныеРаспоряжений.Вставить("КлючевыеПоляШапкиАдаптированные");
			
			МассивРаспоряжений.Добавить(ДанныеРаспоряжений);
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ЗаполнитьПараметрыФормыСозданныхДокументов(
			ПараметрыФормы,
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтчетДавальцу2_5"),
			КлючНазначенияИспользования);
		
		ПараметрыСозданныхДокументов = ОформитьОтчетыНаСервере(
											МассивРаспоряжений,
											ПараметрыФормы,
											СписокОшибок,
											"Объект.СписокРаспоряженияНаОтчеты");
		
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтотОбъект);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузкеВозвраты(Команда)
	
	Перем СписокОшибок;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОформитьПоПриемкеВозвраты");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаВозвратСырья.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКлиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала()) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаспоряженияПоСкладам = НакладныеКлиент.ДанныеДляОформленияПоОрдерам(
												СписокРаспоряженияНаВозвратСырья,
												ВыделенныеСтроки,
												"Склад",
												СписокОшибок,
												"Объект.СписокРаспоряженияНаВозвратСырья",
												МетаданныеДокументов);
	
	Если ЗначениеЗаполнено(РаспоряженияПоСкладам) Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗаполнитьПараметрыФормыСозданныхДокументов(
			ПараметрыФормы,
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДавальцу2_5"),
			КлючНазначенияИспользования);
		
		ПараметрыСозданныхДокументов = НакладныеВызовСервера.ОформитьНакладныеПоОрдерам(
																РаспоряженияПоСкладам,
																ПараметрыФормы,
																СписокОшибок,
																"Объект.СписокРаспоряженияНаВозвратСырья");
		
		НакладныеКлиент.ОткрытьФормуСозданныхДокументов(ПараметрыСозданныхДокументов, ЭтаФорма);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПередачи(Команда)
	
	ОткрытьОтчетСостояниеВыполненияДокументов("СписокРаспоряженияНаПередачу", СписокРаспоряженияНаПередачу);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияПоступления(Команда)
	
	ОткрытьОтчетСостояниеВыполненияДокументов("СписокРаспоряженияНаПоступление", СписокРаспоряженияНаПоступление);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияОтчеты(Команда)
	
	ОткрытьОтчетСостояниеВыполненияДокументов("СписокРаспоряженияНаОтчеты", СписокРаспоряженияНаОтчеты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаПередачу(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОбновитьСписокРаспоряженияНаПередачу");
	
	ОбновитьСписокРаспоряженияНаПередачуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаПоступление(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОбновитьСписокРаспоряженияНаПоступление");
	
	ОбновитьСписокРаспоряженияНаПоступлениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаОтчеты(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОбновитьСписокРаспоряженияНаОтчеты");
	
	ОбновитьСписокРаспоряженияНаОтчетыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаВозвратСырья(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Команда.ОбновитьСписокРаспоряженияНаВозвратСырья");
	
	ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Документы имеют высокий приоритет
	ВысшийПриоритет = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Передача имеет высокий приоритет';
								|en = 'Transfer is in high priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПередачу.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПередачу.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ВысшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Поступление имеет высокий приоритет';
								|en = 'Receipt is in high priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПоступление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПоступление.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ВысшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отчет имеет высокий приоритет';
								|en = 'Report is in high priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчеты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ВысшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документы имеют низкий приоритет
	НизшийПриоритет = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Передача имеет низкий приоритет';
								|en = 'Transfer is in low priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПередачу.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПередачу.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НизшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Поступление имеет низкий приоритет';
								|en = 'Receipt is in low priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаПоступление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаПоступление.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НизшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Отчет имеет низкий приоритет';
								|en = 'Report is in low priority'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчеты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НизшийПриоритет;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	// Отчет давальцу
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыТипРаспоряжения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без заказа>';
																|en = '<without order>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженияНаОтчетыДоговор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряженияНаОтчеты.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без договора>';
																|en = '<without contract>'"));
	
	//
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокРаспоряженияНаПередачу.Дата", "СписокРаспоряженияНаПередачуДата");
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокРаспоряженияНаПоступление.Дата", "СписокРаспоряженияНаПоступлениеДата");
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокРаспоряженияНаОтчеты.Дата", "СписокРаспоряженияНаОтчетыДата");
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокРаспоряженияНаВозвратСырья.Дата", "СписокРаспоряженияНаВозвратСырьяДата");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравамИФункциональнымОпциям()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов) Тогда
		
		Элементы.СписокРаспоряженияНаПередачуСостояниеВыполнения.Видимость    = Ложь;
		Элементы.СписокРаспоряженияНаОформлениеСостояниеВыполнения.Видимость  = Ложь;
		Элементы.СписокРаспоряженияНаОтчетыСостояниеВыполнения.Видимость      = Ложь;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке")
	 Или Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке) Тогда
	 	
		Элементы.СписокРаспоряженияНаПередачуОформитьПоЗаказам.Заголовок = НСтр("ru = 'Оформить';
																				|en = 'Register'");
		Элементы.Переместить(Элементы.ГруппаКомандыПередачи, Элементы.ГруппаСостоянияПередачи);
		
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПередачи.СписокВыбора, Истина);
		
		Элементы.СостояниеОрдераНаОтгрузку.Видимость                          = Ложь;
		Элементы.СписокРаспоряженияНаПередачуОформитьПоОтгрузке.Видимость     = Ложь;
		Элементы.СписокРаспоряженияНаПередачуСостояниеОрдера.Видимость        = Ложь;
		Элементы.СтраницаВозвратыСырья.Видимость                              = Ложь;
		
	Иначе
		
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПередачи.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаОтгрузку.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаОтгрузкуВозврат.СписокВыбора, Истина);
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении")
	 Или Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению) Тогда
	 	
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоЗаказам.Заголовок = НСтр("ru = 'Оформить';
																					|en = 'Register'");
		Элементы.Переместить(Элементы.ГруппаКомандыПоступления, Элементы.ГруппаСостоянияПоступления);
		
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПоступления.СписокВыбора, Истина);
		
		Элементы.СостояниеОрдераНаПриемку.Видимость                           = Ложь;
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоПриемке.Видимость   = Ложь;
		Элементы.СписокРаспоряженияНаПоступлениеСостояниеОрдера.Видимость     = Ложь;
		
	Иначе
		
		НакладныеСервер.ЗаполнитьСостоянияНакладной(Элементы.СостояниеНакладнойПоступления.СписокВыбора);
		НакладныеСервер.ЗаполнитьСостоянияОрдера(Элементы.СостояниеОрдераНаПриемку.СписокВыбора);
		
	КонецЕсли;
	
	ПросмотрЗаказов = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказДавальца2_5);
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
	 Или Не ПравоДоступа("Просмотр", Метаданные.Документы.ОтгрузкаТоваровСХранения)
	 Или Не ПросмотрЗаказов Тогда
		
		Элементы.СтраницаПередачиПродукции.Видимость                          = Ложь;
		
	ИначеЕсли Не ПравоДоступа("Добавление", Метаданные.Документы.ОтгрузкаТоваровСХранения) Тогда
		
		Элементы.СписокРаспоряженияНаПередачуОформитьПоЗаказам.Доступность    = Ложь;
		Элементы.СписокРаспоряженияНаПередачуОформитьПоОтгрузке.Доступность   = Ложь;
		
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
	 Или Не ПравоДоступа("Просмотр", Метаданные.Документы.ПриемкаТоваровНаХранение)
	 Или Не ПросмотрЗаказов Тогда
		
		Элементы.СтраницаПоступленияСырья.Видимость                           = Ложь;
		
	ИначеЕсли Не ПравоДоступа("Добавление", Метаданные.Документы.ПриемкаТоваровНаХранение) Тогда
		
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоЗаказам.Доступность = Ложь;
		Элементы.СписокРаспоряженияНаПоступлениеОформитьПоПриемке.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОтчетДавальцу2_5)
	 Или Не ПросмотрЗаказов Тогда
		
		Элементы.СтраницаОтчеты.Видимость                                     = Ложь;
		
	Иначе
		
		СписокВыбора = Элементы.СостояниеОтчета.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("1", НСтр("ru = 'Создать отчет';
										|en = 'Create a report'"),    Ложь, БиблиотекаКартинок.СоздатьНакладную);
		СписокВыбора.Добавить("2", НСтр("ru = 'Дооформить отчет';
										|en = 'Finish creating the report'"), Ложь, БиблиотекаКартинок.ДооформитьНакладную);
		
		Если Не ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцу2_5) Тогда
			Элементы.СписокРаспоряженияНаОтчетыОформить.Доступность            = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.ОтгрузкаТоваровСХранения) Тогда
		
		Элементы.СтраницаВозвратыСырья.Видимость                              = Ложь;
		
	ИначеЕсли Не ПравоДоступа("Добавление", Метаданные.Документы.ОтгрузкаТоваровСХранения) Тогда
		
		Элементы.СписокРаспоряженияНаВозвратСырьяОформить.Доступность         = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжения) Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = СтрШаблон(
						НСтр("ru = 'Документы приема в переработку (%1) (к оформлению)';
							|en = 'External subcontracting — Unregistered documents (%1)'"),
						НРег(Элементы.Страницы.ТекущаяСтраница.Заголовок));
		
		Элементы.ГруппаОтборы.Видимость                           = Ложь;
		Элементы.Страницы.ОтображениеСтраниц                      = ОтображениеСтраницФормы.Нет;
		
		Элементы.СостояниеНакладнойПередачи.ПоложениеЗаголовка    = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.СостояниеОрдераНаОтгрузку.ПоложениеЗаголовка     = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.СостояниеНакладнойПоступления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.СостояниеОрдераНаПриемку.ПоложениеЗаголовка      = ПоложениеЗаголовкаЭлементаФормы.Верх;
		
		Элементы.СписокРаспоряженияНаПередачуСправка.Видимость    = Истина;
		Элементы.СписокРаспоряженияНаПоступлениеСправка.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеНакладной

&НаСервере
Функция ОформитьНакладныеПоЗаказамНаСервере(АдресВыбранныеСтроки)
	
	СписокРаспоряжений = СписокРаспоряженияНаПоступление.Выгрузить(Новый Массив);
	
	ВыбранныеСтроки = ПолучитьИзВременногоХранилища(АдресВыбранныеСтроки);
	Для каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(
			СписокРаспоряжений.Добавить(),
			СписокРаспоряженияНаПоступление.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	СписокОшибок   = Неопределено;
	
	ДокументыПоТипамНакладных = ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок);
	КоличествоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если КоличествоТаблиц > 0 Тогда
		
		ПараметрыФормы = ?(КоличествоТаблиц = 1,
							ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных),
							ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок, 
			"Объект.СписокРаспоряженияНаПоступление",
			НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить по заказам';
				|en = 'No documents that can be registered under orders are selected'"));
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных)
	
	НастройкиФормы = Новый Структура;
	
	МетаДокумента = Метаданные.Документы.ПриемкаТоваровНаХранение;
	ИмяДокумента  = МетаДокумента.Имя;
	
	Заказы = ДокументыПоТипамНакладных[0].ВыгрузитьКолонку("Ссылка");
	
	РеквизитыШапки = Новый Структура;
	Если Не ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, ИмяДокумента, РеквизитыШапки) Тогда
		Возврат НастройкиФормы;
	КонецЕсли;
	
	СозданныеДокументы = Новый Массив;
	СозданныеДокументы.Добавить(Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкладПоступления",  Неопределено);
	ПараметрыФормы.Вставить("РеквизитыШапки",	 РеквизитыШапки);
	ПараметрыФормы.Вставить("ДокументОснование", Заказы);
	
	НастройкиФормы.Вставить("ИмяФормы", "Документ.ПриемкаТоваровНаХранение.ФормаОбъекта");
	НастройкиФормы.Вставить("Параметры", Новый Структура);
	НастройкиФормы.Параметры.Вставить("Основание",			ПараметрыФормы);
	НастройкиФормы.Параметры.Вставить("СозданныеДокументы", СозданныеДокументы);
	
	Возврат НастройкиФормы;
	
КонецФункции

&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура;
	
	МетаДокумента = Метаданные.Документы.ПриемкаТоваровНаХранение;
	ИмяДокумента	 = МетаДокумента.Имя;
	СинонимДокумента = МетаДокумента.Синоним;
	
	СозданныеДокументы = Новый Массив;
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
		
		РеквизитыШапки = Новый Структура;
		Если Не ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, ИмяДокумента, РеквизитыШапки) Тогда
			Возврат СтруктураПараметров;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("СкладПоступления",  Неопределено);
		ДанныеЗаполнения.Вставить("РеквизитыШапки",	   РеквизитыШапки);
		ДанныеЗаполнения.Вставить("ДокументОснование", Заказы);
		
		ДокументОбъект = Документы.ПриемкаТоваровНаХранение.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
		СозданныеДокументы.Добавить(Новый Структура("Документ", ДокументОбъект.Ссылка));
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					СписокОшибок,
					"Объект.СписокРаспоряженияНаОформление",
					СтрШаблон(НСтр("ru = 'Не удалось провести документ %1';
									|en = 'Cannot post the %1 document'"), ДокументОбъект));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Параметры", Новый Структура("СозданныеДокументы", СозданныеДокументы));
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.ФормаСозданныхДокументов");
	ЗаполнитьПараметрыФормыСозданныхДокументов(
		СтруктураПараметров.Параметры,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца2_5"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ТаблицыЗаказовРазделенныхПоКлючевымПолям(СписокРаспоряжений, СписокОшибок)
	
	КлючевыеПоля = "Партнер,Контрагент,Договор,Организация,Валюта,Подразделение";
	
	СтруктураКлючевыеПоля = Новый Структура(КлючевыеПоля);
	СтруктураКлючевыеПоля.Вставить("СостояниеНакладной");
	
	РазделеннаяТаблица = Неопределено;
	ПоляРазделения	   = "Ссылка,Склад,ХозяйственнаяОперация,СостояниеНакладной";
	
	МассивТаблиц = Новый Массив;
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеНакладной");
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ТекстОшибки = "";
		
		Если Строка.СостояниеНакладной = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная.';
								|en = 'An invoice has already been created for the %1 reference.'");
			
		ИначеЕсли Строка.СостояниеНакладной = 4 Тогда
			
			ТекстОшибки =
				НСтр("ru = 'Распоряжение %1 является накладной. Невозможно оформить накладную по накладной.';
					|en = 'Reference %1 is an invoice. Cannot register an invoice for the invoice.'");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок, "Объект.СписокРаспоряженияНаПоступление", СтрШаблон(ТекстОшибки, Строка.Ссылка));
			
			Продолжить;
			
		КонецЕсли;
		
		Если РазделеннаяТаблица = Неопределено 
		 Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
		 Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(СтруктураКлючевыеПоля, Строка, КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = СписокРаспоряжений.СкопироватьКолонки(ПоляРазделения);
			МассивТаблиц.Добавить(РазделеннаяТаблица);
			
			ЗаполнитьЗначенияСвойств(СтруктураКлючевыеПоля, Строка);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РазделеннаяТаблица.Добавить(), Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

#КонецОбласти

#Область ОформлениеПоОрдерам

&НаСервере
Функция ОформитьПриобретенияНаСервереПоОрдерам(АдресВыбранныеСтроки)
	
	СписокРаспоряжений = ШаблонРаспоряженияНаПоступление();
	СписокРаспоряжений.Колонки.Добавить("ЕстьОформленныеПоступления", Новый ОписаниеТипов("Булево"));
	
	ВыбранныеСтроки = ПолучитьИзВременногоХранилища(АдресВыбранныеСтроки);
	Для каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		
		ЗаполнитьЗначенияСвойств(
			СписокРаспоряжений.Добавить(),
			СписокРаспоряженияНаПоступление.НайтиПоИдентификатору(ИдентификаторСтроки));
			
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	СписокОшибок   = Неопределено;
	
	ДокументыПоТипамНакладных =
		ТаблицыПриобретенийРазделенныхПоКлючевымПолямДляОрдеров(СписокРаспоряжений, СписокОшибок);
	КоличествоТаблиц = ДокументыПоТипамНакладных.Количество();
	
	Если КоличествоТаблиц > 0 Тогда
		
		ПараметрыФормы = ?(КоличествоТаблиц = 1,
							ОформитьПриобретениеПоТаблицеКонтрольОрдеров(ДокументыПоТипамНакладных),
							ОформитьРядПриобретенийПоТаблицамКонтрольОрдеров(ДокументыПоТипамНакладных, СписокОшибок));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок, 
			"Объект.СписокРаспоряженияНаПоступление",
			НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить по заказам';
				|en = 'No documents that can be registered under orders are selected'"));
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции


// Шаблон распоряжения на поступление.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//   * Ссылка - ДокументСсылка.ПриемкаТоваровНаХранение -
//
&НаСервере
Функция ШаблонРаспоряженияНаПоступление()
	
	Возврат СписокРаспоряженияНаПоступление.Выгрузить(Новый Массив);
	
КонецФункции

// Оформляет приобретение по таблице контроль ордеров.
// 
// Параметры:
//  ДокументыПоТипамНакладных - Массив из см. ШаблонРаспоряженияНаПоступление
// 
// Возвращаемое значение:
//  Структура - Оформить приобретение по таблице контроль ордеров:
//   * Параметры - Структура - содержит:
//     ** Основание - Структура - содержит:
//         *** ДокументОснование - ДокументСсылка.ПриемкаТоваровНаХранение -
//         *** СкладПоступления  - СправочникСсылка.Склады -
//         *** ЗаполнятьПоОрдеру - Булево -
//     ** ЗаполнятьПоОрдеру - Булево -
//   * ИмяФормы - Строка -
//
&НаСервере
Функция ОформитьПриобретениеПоТаблицеКонтрольОрдеров(ДокументыПоТипамНакладных)
	
	НастройкиФормы = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	МетаДокумента = Метаданные.Документы.ПриемкаТоваровНаХранение;
	ИмяДокумента  = МетаДокумента.Имя;
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока  = ТаблицаДокументов[0];
	Заказы			  = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	ПолноеИмяРаспоряжения = ?(ВыделеннаяСтрока.Ссылка = Неопределено,
								"", 
								ВыделеннаяСтрока.Ссылка.Метаданные().ПолноеИмя());
								
	ПолноеИмяНакладной    = Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя();
	
	Если ПолноеИмяРаспоряжения = ПолноеИмяНакладной Тогда
		
		ПараметрыФормы.Вставить("Ключ",              ВыделеннаяСтрока.Ссылка);
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", Истина);
		
		ИмяФормыОформления = "Документ.ПриемкаТоваровНаХранение.Форма.ФормаДокумента";
	
	ИначеЕсли ВыделеннаяСтрока.ЕстьОформленныеПоступления Тогда
		
		РеквизитыШапки = Новый Структура;
		Если Не ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, ИмяДокумента, РеквизитыШапки) Тогда
			Возврат НастройкиФормы;
		КонецЕсли;
		
		НастройкиФормыПереоформления = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
		НастройкиФормыПереоформления.ИмяФормыНакладной   = "Документ.ПриемкаТоваровНаХранение.ФормаОбъекта";
		НастройкиФормыПереоформления.НакладнаяНаОтгрузку = Ложь;
		НастройкиФормыПереоформления.НакладнаяНаПриемку  = Истина;
		НастройкиФормыПереоформления.Заголовок = НСтр("ru = 'Переоформление документов по выбранным распоряжениям';
														|en = 'Reregister documents for the selected references'");
		
		ПараметрыФормы.Вставить("НастройкиФормы", НастройкиФормыПереоформления);
		ПараметрыФормы.Вставить("Заказы",		  Заказы);
		ПараметрыФормы.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыФормы.Вставить("Склад",		  ВыделеннаяСтрока.Склад);
		
		ИмяФормыОформления = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
		
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ВыделеннаяСтрока.Ссылка);
		ДанныеЗаполнения.Вставить("СкладПоступления",  ВыделеннаяСтрока.Склад);
		ДанныеЗаполнения.Вставить("ЗаполнятьПоОрдеру", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание",		 ДанныеЗаполнения);
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", Истина);
		
		ИмяФормыОформления = "Документ.ПриемкаТоваровНаХранение.ФормаОбъекта";
		
	КонецЕсли;
	
	СозданныеДокументы = Новый Массив;
	СозданныеДокументы.Добавить(Неопределено);
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	
	НастройкиФормы.Вставить("Параметры", ПараметрыФормы);
	НастройкиФормы.Вставить("ИмяФормы",  ИмяФормыОформления);
	
	Возврат НастройкиФормы;
	
КонецФункции

&НаСервере
Функция ОформитьРядПриобретенийПоТаблицамКонтрольОрдеров(ДокументыПоТипамНакладных, СписокОшибок)
	
	СтруктураПараметров = Новый Структура;
	
	МетаДокумента = Метаданные.Документы.ПриемкаТоваровНаХранение;
	ИмяДокумента	 = МетаДокумента.Имя;
	СинонимДокумента = МетаДокумента.Синоним;
	
	СозданныеДокументы = Новый Массив;
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
		
		РеквизитыШапки = Новый Структура;
		Если Не ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(Заказы, ИмяДокумента, РеквизитыШапки) Тогда
			Возврат СтруктураПараметров;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", Заказы);
		ДанныеЗаполнения.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ДанныеЗаполнения.Вставить("СкладПоступления",  Таблица[0].Склад);
		ДанныеЗаполнения.Вставить("ЗаполнятьПоОрдеру", Истина);
		
		ДокументОбъект = Документы.ПриемкаТоваровНаХранение.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
		СозданныеДокументы.Добавить(Новый Структура("Документ", ДокументОбъект.Ссылка));
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					СписокОшибок,
					"Объект.СписокРаспоряженияНаОформление",
					СтрШаблон(НСтр("ru = 'Не удалось провести документ %1';
									|en = 'Cannot post the %1 document'"), ДокументОбъект));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Параметры", Новый Структура("СозданныеДокументы", СозданныеДокументы));
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.ФормаСозданныхДокументов");
	ЗаполнитьПараметрыФормыСозданныхДокументов(
		СтруктураПараметров.Параметры,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца2_5"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ТаблицыПриобретенийРазделенныхПоКлючевымПолямДляОрдеров(СписокРаспоряжений, СписокОшибок) 
	
	КлючевыеПоля = "Партнер, Контрагент, Договор, Организация, Сделка, Валюта, Подразделение, ХозяйственнаяОперация";
	
	ТекущиеКлючи = Новый Структура(КлючевыеПоля);
	ТекущиеКлючи.Вставить("СостояниеОрдераНаПриемку");
	ТекущиеКлючи.Вставить("ЕстьОформленныеПоступления");
	
	РазделеннаяТаблица = Неопределено;
	ПоляРазделения	   = "Ссылка, Склад, ХозяйственнаяОперация, СостояниеОрдераНаПриемку, ЕстьОформленныеПоступления";

	МассивТаблиц = Новый Массив;
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеОрдераНаПриемку");
	
	ЕстьОформленныеПоступления = Ложь;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		Если Строка.НакладнаяНаОтгрузку И Строка.НакладнаяНаПриемку Тогда
			
			ПоОрдерам = НСтр("ru = 'по отгрузке (приемке)';
							|en = 'by shipment (receiving)'");
			
		ИначеЕсли Строка.НакладнаяНаОтгрузку Тогда
			
			ПоОрдерам = НСтр("ru = 'по отгрузке';
							|en = 'by shipment'");
			
		ИначеЕсли Строка.НакладнаяНаПриемку Тогда
			
			ПоОрдерам = НСтр("ru = 'по приемке';
							|en = 'by receipt'");
			
		КонецЕсли;
		
		ТекстОшибки = "";
		
		Если (Строка.СостояниеОрдераНаОтгрузку = 0 Или Не Строка.НакладнаяНаОтгрузку)
		   И (Строка.СостояниеОрдераНаПриемку = 0 Или Не Строка.НакладнаяНаПриемку) Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную %2,
												|т.к. ордера соответствуют накладным.';
												|en = 'Cannot register the %2 invoice for the %1 reference 
												| as notes correspond to the invoices.'"), Строка.Ссылка, ПоОрдерам);
			
		ИначеЕсли (Строка.СостояниеОрдераНаОтгрузку = 1 Или Не Строка.НакладнаяНаОтгрузку)
				И (Строка.СостояниеОрдераНаПриемку = 1 Или Не Строка.НакладнаяНаПриемку) Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную %2,
												|т.к. нет ни одного ордера.';
												|en = 'Cannot register the %2 invoice for the %1 reference 
												| as there are no goods issues/receipts.'"), Строка.Ссылка, ПоОрдерам);
			
		ИначеЕсли (Строка.СостояниеОрдераНаОтгрузку = 4 Или Не Строка.НакладнаяНаОтгрузку)
				И (Строка.СостояниеОрдераНаПриемку = 4 Или Не Строка.НакладнаяНаПриемку) Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную %2,
												|т.к. ордера не используются.';
												|en = 'Cannot register the %2 invoice for the %1 reference 
												| as goods issues/receipts are not used.'"), Строка.Ссылка, ПоОрдерам);
			
		Иначе
			
			Строка.ЕстьОформленныеПоступления = ОпределитьНаличиеОформленныхНакладных(Строка.Ссылка, Строка.Склад);
			
			Если Строка.ЕстьОформленныеПоступления <> ЕстьОформленныеПоступления И МассивТаблиц.Количество() > 0 Тогда
				
				ТекстОшибки =
					СтрШаблон(НСтр("ru = 'В пакетном режиме можно или создавать новые документы или перезаполнять.
										  |Документ %1 не будет обработан, выберете его отдельно.';
										  |en = 'You can either create new documents or refill them in batch mode.
										  |Document %1 will not be processed, select it separately.'", Строка.Ссылка));
				
			Иначе
				
				ЕстьОформленныеПоступления = Строка.ЕстьОформленныеПоступления;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				СписокОшибок, "Объект.СписокРаспоряженияНаПоступление",ТекстОшибки);
			
			Продолжить;
			
		КонецЕсли;
		
		Если РазделеннаяТаблица = Неопределено 
		 Или Не ИспользоватьПоступлениеПоНесколькимЗаказам
		 Или Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеКлючи, Строка, КлючевыеПоля) Тогда
			
			РазделеннаяТаблица = СписокРаспоряжений.СкопироватьКолонки(ПоляРазделения);
			МассивТаблиц.Добавить(РазделеннаяТаблица);
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РазделеннаяТаблица.Добавить(), Строка);
		
	КонецЦикла;
	
	Если МассивТаблиц.Количество() > 1 И ЕстьОформленныеПоступления Тогда
		
		МассивТаблиц = Новый Массив;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			СписокОшибок,
			"Объект.СписокРаспоряженияНаПоступление",
			НСтр("ru = 'Переоформлять накладные можно только по заказам, имеющим одинаковые значимые реквизиты.';
				|en = 'The notes can be reissued only for orders with the same important attributes.'"));
		
	КонецЕсли;
	
	Возврат МассивТаблиц;
	
КонецФункции

#КонецОбласти

#Область ПриемкаТоваров

&НаСервере
Функция ОпределитьНаличиеОформленныхНакладных(РаспоряжениеСсылка, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику КАК Заказ,
	|	ТаблицаЗаказы.Регистратор	  КАК Накладная
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ТаблицаЗаказы
	|ГДЕ
	|	ТаблицаЗаказы.Склад                      = &Склад
	|	И ТаблицаЗаказы.ЗаказПоставщику          = &РаспоряжениеСсылка
	|	И ТИПЗНАЧЕНИЯ(ТаблицаЗаказы.Регистратор) = ТИП(Документ.ПриемкаТоваровНаХранение)
	|	И ТаблицаЗаказы.Номенклатура.ТипНоменклатуры В (
	|										ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|										ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&РаспоряжениеСсылка    КАК Заказ,
	|	ДокументПриемки.Ссылка КАК Накладная
	|ИЗ
	|	Документ.ПриемкаТоваровНаХранение КАК ДокументПриемки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровНаХранение.Товары КАК ТоварыПриемки
	|		ПО ДокументПриемки.Ссылка = ТоварыПриемки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК СторноДокументы
	|		ПО СторноДокументы.СторнируемыйДокумент = ДокументПриемки.Ссылка
	|		 И НЕ СторноДокументы.ДополнительнаяЗапись
	|ГДЕ
	|	ДокументПриемки.Проведен
	|	И ТоварыПриемки.Склад     = &Склад
	|	И ДокументПриемки.Договор = &РаспоряжениеСсылка
	|	И СторноДокументы.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.ДокументПоступления                    КАК ДокументПоступления,
	|	ТоварыКПоступлениюОстатки.Номенклатура                           КАК Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика                         КАК Характеристика,
	|	ТоварыКПоступлениюОстатки.Назначение                             КАК Назначение,
	|	ТоварыКПоступлениюОстатки.Серия                                  КАК Серия,
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоОрдерамОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления = &РаспоряжениеСсылка
	|			И Склад = &Склад) КАК ТоварыКПоступлениюОстатки
	|ГДЕ
	|	ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоОрдерамОстаток <> 0";
	
	Запрос.УстановитьПараметр("РаспоряжениеСсылка", РаспоряжениеСсылка);
	Запрос.УстановитьПараметр("Склад",				Склад);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОформленныеНакладные = РезультатыЗапроса[0].Выгрузить();
	
	Возврат Не РезультатыЗапроса[1].Пустой() И ОформленныеНакладные.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиПродукции Тогда
		
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказДавальца2_5.ПустаяСсылка"));
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОтгрузкаТоваровСХранения.ПустаяСсылка"));
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступленияСырья Тогда
		
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказДавальца2_5.ПустаяСсылка"));
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПриемкаТоваровНаХранение.ПустаяСсылка"));
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
		
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказДавальца2_5.ПустаяСсылка"));
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья Тогда
		
		Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОтгрузкаТоваровСХранения.ПустаяСсылка"));
		
	КонецЕсли;
	
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиПродукции Тогда
			
			ТекущийСписок = "СписокРаспоряженияНаПередачу";
			
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступленияСырья Тогда
			
			ТекущийСписок = "СписокРаспоряженияНаПоступление";
			
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
			
			ТекущийСписок = "СписокРаспоряженияНаОтчеты";
			
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья Тогда
			
			ТекущийСписок = "СписокРаспоряженияНаВозвратСырья";
			
		КонецЕсли;
		
		Ссылка = МассивСсылок[0];
		
		МассивСтрок = ЭтотОбъект[ТекущийСписок].НайтиСтроки(Новый Структура("Ссылка", Ссылка));
		
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы[ТекущийСписок].ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновитьСписокРаспоряжения

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаПередачуНаСервере()
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5;
	ТекущаяСтрока   = Элементы.СписокРаспоряженияНаПередачу.ТекущаяСтрока;
	
	ТекущийДокумент = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаПередачу.НайтиПоИдентификатору(ТекущаяСтрока).Ссылка;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад,, Менеджер);
	
	ТекстыЗапросов = ТекстыЗапросов(ПараметрыОтбора, ТекущаяОперация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаРасчетаСостояний;
	
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	
	ХозяйственныеОперации = Новый Массив;
	ХозяйственныеОперации.Добавить(ТекущаяОперация);
	ХозяйственныеОперации.Добавить(ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора());
	
	Запрос.УстановитьПараметр("ОформляемаяХозОперация", ТекущаяОперация);
	Запрос.УстановитьПараметр("НачалоТекущегоДня",		НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ХозОперация",			ХозяйственныеОперации);
	Запрос.УстановитьПараметр("Организация",			СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад",					СписокСкладов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер",				Менеджер);
	Запрос.УстановитьПараметр("Распоряжения",			Распоряжения.ВыгрузитьЗначения());
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаСпискаРаспоряжений;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаПередачу.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		
		МассивСтрок = СписокРаспоряженияНаПередачу.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.СписокРаспоряженияНаПередачу.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьПередачи = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаПоступлениеНаСервере()
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5;
	ТекущаяСтрока   = Элементы.СписокРаспоряженияНаПоступление.ТекущаяСтрока;
	
	ТекущийДокумент = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаПоступление.НайтиПоИдентификатору(ТекущаяСтрока).Ссылка;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад, ТекущаяОперация, Менеджер);
	ТекстыЗапросов  = ТекстыЗапросов(ПараметрыОтбора, ТекущаяОперация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаРасчетаСостояний;
	
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	
	ХозяйственныеОперации = Новый Массив;
	ХозяйственныеОперации.Добавить(ТекущаяОперация);
	ХозяйственныеОперации.Добавить(ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора());
	
	Запрос.УстановитьПараметр("ОформляемаяХозОперация", ТекущаяОперация);
	Запрос.УстановитьПараметр("НачалоТекущегоДня",		НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ХозОперация",			ХозяйственныеОперации);
	Запрос.УстановитьПараметр("Организация",			СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад",					СписокСкладов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер",				Менеджер);
	Запрос.УстановитьПараметр("Распоряжения",			Распоряжения.ВыгрузитьЗначения());
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаСпискаРаспоряжений;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаПоступление.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		
		МассивСтрок = СписокРаспоряженияНаПоступление.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.СписокРаспоряженияНаПоступление.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьПоступления = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаОтчетыНаСервере()
	
	ТекущаяСтрока   = Элементы.СписокРаспоряженияНаОтчеты.ТекущаяСтрока;
	
	ТекущийДокумент = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаОтчеты.НайтиПоИдентификатору(ТекущаяСтрока).Ссылка;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад,, Менеджер);
	
	ТипыРаспоряжений = Новый Массив;
	ТипыРаспоряжений.Добавить("Документ.ЗаказДавальца2_5");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		НакладныеСервер.ТекстЗапросаСостояний("СостоянияОтчетовДавальцам2_5", ПараметрыОтбора, ТипыРаспоряжений);
	
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад",		 СписокСкладов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер",	 Менеджер);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиСостояния.Договор                                                        КАК Договор,
	|	РеестрДокументов.НомерДокументаИБ                                               КАК Номер,
	|	РеестрДокументов.ДатаДокументаИБ                                                КАК Дата,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка)                                            КАК ТипРаспоряжения,
	|	ОстаткиСостояния.Состояние                                                      КАК СостояниеОтчета,
	|	РеестрДокументов.Сумма                                                          КАК СуммаДокумента,
	|	РеестрДокументов.Валюта                                                         КАК Валюта,
	|	РеестрДокументов.Партнер                                                        КАК Партнер,
	|	РеестрДокументов.Контрагент.Ключ                                                КАК Контрагент,
	|	РеестрДокументов.Организация                                                    КАК Организация,
	|	РеестрДокументов.Подразделение                                                  КАК Подразделение,
	|	РеестрДокументов.Ответственный                                                  КАК Менеджер,
	|	ОстаткиСостояния.Распоряжение                                                   КАК Ссылка,
	|	ОстаткиСостояния.Склад                                                          КАК Склад,
	|	РеестрДокументов.Дополнительно                                                  КАК Дополнительно,
	|	ВЫРАЗИТЬ(ОстаткиСостояния.Распоряжение КАК Документ.ЗаказДавальца2_5).Приоритет КАК Приоритет
	|ИЗ
	|	ВтСостоянияОтчетовДавальцам2_5 КАК ОстаткиСостояния
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ОстаткиСостояния.Распоряжение = РеестрДокументов.Ссылка
	|		 И НЕ РеестрДокументов.ДополнительнаяЗапись
	|ГДЕ
	|	ОстаткиСостояния.Распоряжение <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиСостояния.Договор                         КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                     КАК Номер,
	|	ДАТАВРЕМЯ(1, 1, 1)                               КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                     КАК ТипРаспоряжения,
	|	ОстаткиСостояния.Состояние                       КАК СостояниеОтчета,
	|	НЕОПРЕДЕЛЕНО                                     КАК СуммаДокумента,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов        КАК Валюта,
	|	ДоговорыКонтрагентов.Партнер                     КАК Партнер,
	|	ДоговорыКонтрагентов.Контрагент                  КАК Контрагент,
	|	ДоговорыКонтрагентов.Организация                 КАК Организация,
	|	ДоговорыКонтрагентов.Подразделение               КАК Подразделение,
	|	ДоговорыКонтрагентов.Менеджер                    КАК Менеджер,
	|	ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка) КАК Ссылка,
	|	ОстаткиСостояния.Склад                           КАК Склад,
	|	НЕОПРЕДЕЛЕНО                                     КАК Дополнительно,
	|	НЕОПРЕДЕЛЕНО                                     КАК Приоритет
	|ИЗ
	|	ВтСостоянияОтчетовДавальцам2_5 КАК ОстаткиСостояния
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ОстаткиСостояния.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ОстаткиСостояния.Распоряжение = ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Договор УБЫВ,
	|	Дата";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаОтчеты.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		
		МассивСтрок = СписокРаспоряженияНаОтчеты.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.СписокРаспоряженияНаОтчеты.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьОтчеты = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере()
	
	ТекущаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5;
	ТекущаяСтрока   = Элементы.СписокРаспоряженияНаВозвратСырья.ТекущаяСтрока;
	
	ТекущийДокумент = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = СписокРаспоряженияНаВозвратСырья.НайтиПоИдентификатору(ТекущаяСтрока).Ссылка;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Организация,, Склад, ТекущаяОперация, Менеджер);
	
	ТекстыЗапросов = ТекстыЗапросов(ПараметрыОтбора, ТекущаяОперация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаРасчетаСостояний;
	
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	
	ХозяйственныеОперации = Новый Массив;
	ХозяйственныеОперации.Добавить(ТекущаяОперация);
	ХозяйственныеОперации.Добавить(ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора());
	
	Запрос.УстановитьПараметр("ОформляемаяХозОперация", ТекущаяОперация);
	Запрос.УстановитьПараметр("НачалоТекущегоДня",		НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ХозОперация",			ХозяйственныеОперации);
	Запрос.УстановитьПараметр("Организация",			СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Склад",					СписокСкладов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Менеджер",				Менеджер);
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстыЗапросов.ТекстЗапросаСпискаРаспоряжений;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуТаблицыЗначений(ТаблицаДокументов);
	СписокРаспоряженияНаВозвратСырья.Загрузить(ТаблицаДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТекущийДокумент <> Неопределено Тогда
		
		МассивСтрок = СписокРаспоряженияНаВозвратСырья.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.СписокРаспоряженияНаВозвратСырья.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьВозвраты = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СохраняемыеНастройкиФормы

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиФормы(Параметры.СтруктураБыстрогоОтбора));
		
	Иначе
		
		НастройкиИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
									"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.СписокДокументов",
									КлючНазначенияИспользования);
		
		Если ТипЗнч(НастройкиИзХранилища) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиФормы(НастройкиИзХранилища));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.СписокДокументов",
		КлючНазначенияИспользования,
		НастройкиФормы(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормы(ИсточникНастроек)
	
	ИменаСохраняемыхРеквизитов =
	"Организация,
	|Склад,
	|Менеджер,
	|СостояниеНакладнойПередачи,
	|СостояниеНакладнойПоступления,
	|СостояниеОрдераНаОтгрузку,
	|СостояниеОрдераНаПриемку,
	|СостояниеОрдераНаОтгрузкуВозврат,
	|СостояниеОтчета";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ИсточникНастроек);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОбработатьРезультатОформленияДокументов(ПараметрыСозданныхДокументов, ИмяСобытия)
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	КоличествоСозданныхДокументов = 0;
	
	Если ПараметрыСозданныхДокументов.Свойство("Параметры") Тогда
		
		СозданныеДокументы = ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы;
		
		КоличествоСозданныхДокументов = СозданныеДокументы.Количество();
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание документов';
				|en = 'Create documents'"),,
			СтрШаблон(НСтр("ru = 'Создано документов: %1';
							|en = 'Created documents: %1'"), КоличествоСозданныхДокументов));
		
	КонецЕсли;
	
	Если КоличествоСозданныхДокументов > 0 Тогда
		
		Если КоличествоСозданныхДокументов > 1
		 Или СозданныеДокументы.Найти(Неопределено) = Неопределено Тогда
			Оповестить(ИмяСобытия);
		КонецЕсли;
		
		Если ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
			ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьОтборПоОрганизации();
	
	ТребуетсяОбновитьПередачи    = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьОтчеты      = Истина;
	ТребуетсяОбновитьВозвраты    = Истина;
	
	ОбновитьТекущуюСтраницуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	УстановитьОтборПоСкладу();
	
	ТребуетсяОбновитьПередачи    = Истина;
	ТребуетсяОбновитьПоступления = Истина;
	ТребуетсяОбновитьВозвраты    = Истина;
	
	ОбновитьТекущуюСтраницуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()

	СписокОрганизаций.Очистить();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		СписокОрганизаций.ЗагрузитьЗначения(
			Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация));
		
		СписокОрганизаций.Добавить(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСкладу()
	
	СписокСкладов = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОформитьОтчетыНаСервере(ГруппировкиРаспоряжений, ПараметрыФормыСозданныхДокументов, СписокОшибок, ПолеОшибки)
	
	ПараметрыСозданныхДокументов = Новый Структура("ИмяФормы, Параметры");
	
	Для каждого ГруппаРаспоряжений Из ГруппировкиРаспоряжений Цикл
		
		ИмяОформляемогоДокумента = ГруппаРаспоряжений.ИмяОформляемогоДокумента;
		МетаданныеЗаказа = ГруппаРаспоряжений.МассивЗаказов[0].Метаданные();
		
		ЗаполнитьЗначенияСвойств(
			ГруппаРаспоряжений, КлючевыеПоляШапкиРаспоряжения(ИмяОформляемогоДокумента, МетаданныеЗаказа));
		
	КонецЦикла;
	
	НакладныеСервер.СгруппироватьДокументыПоКлючевымПолямВКоллекции(
		ГруппировкиРаспоряжений, "МассивЗаказов", "КлючевыеПоляШапки", "КлючевыеПоляШапкиАдаптированные");
	
	Если ГруппировкиРаспоряжений.Количество() = 1 И ГруппировкиРаспоряжений[0].МассивЗаказов.Количество() = 1 Тогда
		
		ГруппаРаспоряжений 		 = ГруппировкиРаспоряжений[0];
		ТекущееРаспоряжение		 = ГруппаРаспоряжений.МассивЗаказов[0];
		ИмяОформляемогоДокумента = ГруппаРаспоряжений.ИмяОформляемогоДокумента;
		
		МенеджерНакладной = Документы[ИмяОформляемогоДокумента];
				
		ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(ТекущееРаспоряжение, ГруппаРаспоряжений.ПоляЗаполнения);
		МенеджерНакладной.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, ТекущееРаспоряжение);
		
		ПараметрыСозданныхДокументов.ИмяФормы = "Документ." + ИмяОформляемогоДокумента + ".ФормаОбъекта";
		ПараметрыСозданныхДокументов.Параметры = Новый Структура("Основание", ПараметрыЗаполнения);
		
	Иначе
		
		СозданныеДокументы = НакладныеСервер.СформироватьДокументыПоРаспоряжениям(
												ГруппировкиРаспоряжений, СписокОшибок, ПолеОшибки);
		
		Если Не ЗначениеЗаполнено(СозданныеДокументы) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Владелец = Пользователи.АвторизованныйПользователь();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
							Владелец, СозданныеДокументы, ПараметрыФормыСозданныхДокументов.КлючДанных);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыСозданныхДокументов.ИмяФормы  = "ОбщаяФорма.ФормаСозданныхДокументов";
		ПараметрыСозданныхДокументов.Параметры = ПараметрыФормыСозданныхДокументов;
		ПараметрыСозданныхДокументов.Вставить("КоличествоСозданныхДокументов", СозданныеДокументы.Количество());
		
	КонецЕсли;
	
	Возврат ПараметрыСозданныхДокументов;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетСостояниеВыполненияДокументов(ИмяТаблицы, ТаблицаФормы)
	
	Если Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одной строки. Выполнение команды невозможно.';
										|en = 'No lines are selected. Cannot execute the command.'"));
		
	Иначе
		
		СписокДокументов = Новый СписокЗначений;
		
		Для каждого Идентификатор Из Элементы[ИмяТаблицы].ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = ТаблицаФормы.НайтиПоИдентификатору(Идентификатор);
			
			Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
				СписокДокументов.Добавить(СтрокаТаблицы.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокДокументов.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выполнение команды возможно только для заказов давальца.';
											|en = 'Command can be performed only for subcontracting sales orders.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму(
			"Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыЖурнала()
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",		Склад);
	СтруктураБыстрогоОтбора.Вставить("Менеджер",	Менеджер);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста",		 "ЖурналДокументовПриемаВПереработку2_5");
	ПараметрыЖурнала.Вставить("СинонимЖурнала",			 НСтр("ru = 'Документы приема в переработку';
																|en = 'External subcontracting'"));
	ПараметрыЖурнала.Вставить(
		"КлючНазначенияФормы",
		ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку());
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных.Элемент.Страницы.ПриСменеСтраницы");
	
	ОбновитьТекущуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюСтраницу()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиПродукции
	   И ТребуетсяОбновитьПередачи Тогда
		
		ОбновитьСписокРаспоряженияНаПередачуНаСервере();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступленияСырья
			И ТребуетсяОбновитьПоступления Тогда
		
		ОбновитьСписокРаспоряженияНаПоступлениеНаСервере();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты
			И ТребуетсяОбновитьОтчеты Тогда
		
		ОбновитьСписокРаспоряженияНаОтчетыНаСервере();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья
			И ТребуетсяОбновитьВозвраты Тогда
		
		ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюСтраницуНаСервере()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиПродукции
	   И ТребуетсяОбновитьПередачи Тогда
		
		ОбновитьСписокРаспоряженияНаПередачуНаСервере();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоступленияСырья
			И ТребуетсяОбновитьПоступления Тогда
		
		ОбновитьСписокРаспоряженияНаПоступлениеНаСервере();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтчеты
			И ТребуетсяОбновитьОтчеты Тогда
		
		ОбновитьСписокРаспоряженияНаОтчетыНаСервере();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВозвратыСырья
			И ТребуетсяОбновитьВозвраты Тогда
		
		ОбновитьСписокРаспоряженияНаВозвратСырьяНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстыЗапросов(ПараметрыОтбора, ХозОперация)
	
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(ХозОперация);
	
	Пакет     = Новый Массив;
	Выборка   = Новый Массив;
	
	Состояния = НакладныеСервер.СостоянияПоХозоперациям(ХозОперации);
	
	Для каждого КЗ Из Состояния Цикл
		
		Пакет.Добавить(НакладныеСервер.ТекстЗапросаСостояний(КЗ.Ключ, ПараметрыОтбора, КЗ.Значение));
		
		Если КЗ.Ключ = "СостоянияРасходныхОрдеров" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СостоянияРасходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияРасходныхОрдеров.Склад        КАК Склад,
			|	НЕОПРЕДЕЛЕНО                           КАК Приоритет,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияРасходныхОрдеров.Распоряжение) = ТИП(Документ.ЗаказДавальца2_5)
			|			ТОГДА 0
			|		ИНАЧЕ 4
			|	КОНЕЦ                                  КАК СостояниеНакладной,
			|	СостоянияРасходныхОрдеров.Состояние    КАК СостояниеРасходногоОрдера,
			|	4                                      КАК СостояниеПриходногоОрдера,
			|	ИСТИНА                                 КАК НакладнаяНаОтгрузку,
			|	ЛОЖЬ                                   КАК НакладнаяНаПриемку
			|ИЗ
			|	ВТСостоянияРасходныхОрдеров КАК СостоянияРасходныхОрдеров";
			
		ИначеЕсли КЗ.Ключ = "СостоянияПриходныхОрдеров" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СостоянияПриходныхОрдеров.Распоряжение КАК Распоряжение,
			|	СостоянияПриходныхОрдеров.Склад        КАК Склад,
			|	НЕОПРЕДЕЛЕНО                           КАК Приоритет,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СостоянияПриходныхОрдеров.Распоряжение) = ТИП(Документ.ЗаказДавальца2_5)
			|			ТОГДА 0
			|		ИНАЧЕ 4
			|	КОНЕЦ                                  КАК СостояниеНакладной,
			|	4                                      КАК СостояниеРасходногоОрдера,
			|	СостоянияПриходныхОрдеров.Состояние    КАК СостояниеПриходногоОрдера,
			|	ЛОЖЬ                                   КАК НакладнаяНаОтгрузку,
			|	ИСТИНА                                 КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияПриходныхОрдеров КАК СостоянияПриходныхОрдеров";
			
		ИначеЕсли КЗ.Ключ = "СостоянияПередач" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СостоянияПередач.Распоряжение КАК Распоряжение,
			|	СостоянияПередач.Склад        КАК Склад,
			|	ЗаказДавальца2_5.Приоритет    КАК Приоритет,
			|	СостоянияПередач.Состояние    КАК СостояниеНакладной,
			|	ВЫБОР
			|		КОГДА СпрСкладыОтправитель.Ссылка ЕСТЬ NULL
			|			ТОГДА 4
			|		КОГДА СостоянияПередач.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ                          КАК СостояниеРасходногоОрдера,
			|	4                              КАК СостояниеПриходногоОрдера,
			|	ИСТИНА                         КАК НакладнаяНаОтгрузку,
			|	ЛОЖЬ                           КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияПередач КАК СостоянияПередач
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыОтправитель
			|		ПО СпрСкладыОтправитель.Ссылка = СостоянияПередач.Склад
			|		 И СпрСкладыОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
			|		 И СпрСкладыОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
			|		ПО СостоянияПередач.Распоряжение = ЗаказДавальца2_5.Ссылка";
			
		ИначеЕсли КЗ.Ключ = "СостоянияПоступлений" Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СостоянияПоступлений.Распоряжение КАК Распоряжение,
			|	СостоянияПоступлений.Склад        КАК Склад,
			|	ЗаказДавальца2_5.Приоритет        КАК Приоритет,
			|	СостоянияПоступлений.Состояние    КАК СостояниеНакладной,
			|	4                                 КАК СостояниеРасходногоОрдера,
			|	ВЫБОР
			|		КОГДА СпрСкладыПолучатель.Ссылка ЕСТЬ NULL
			|		  ИЛИ ЗаказДавальца2_5.ВариантПриемкиТоваров =
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
			|			ТОГДА 4
			|		КОГДА СостоянияПоступлений.Состояние = 1
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ                             КАК СостояниеПриходногоОрдера,
			|	ЛОЖЬ                              КАК НакладнаяНаОтгрузку,
			|	ИСТИНА                            КАК НакладнаяНаПриемку
			|ИЗ
			|	ВтСостоянияПоступлений КАК СостоянияПоступлений
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСкладыПолучатель
			|		ПО СпрСкладыПолучатель.Ссылка = СостоянияПоступлений.Склад
			|		 И СпрСкладыПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
			|		 И СпрСкладыПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
			|		ПО СостоянияПоступлений.Распоряжение = ЗаказДавальца2_5.Ссылка";
			
		КонецЕсли;
		
		Выборка.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапросаРасчетаСостояний = СтрСоединить(Пакет, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапросаСпискаРаспоряжений =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Распоряжение                        КАК Ссылка,
	|	ВложенныйЗапрос.Склад                               КАК Склад,
	|	МАКСИМУМ(ВложенныйЗапрос.Приоритет)                 КАК Приоритет,
	|	МАКСИМУМ(ВложенныйЗапрос.СостояниеНакладной)        КАК СостояниеНакладной,
	|	МАКСИМУМ(ВложенныйЗапрос.СостояниеРасходногоОрдера) КАК СостояниеОрдераНаОтгрузку,
	|	МАКСИМУМ(ВложенныйЗапрос.СостояниеПриходногоОрдера) КАК СостояниеОрдераНаПриемку,
	|	МАКСИМУМ(ВложенныйЗапрос.НакладнаяНаОтгрузку)       КАК НакладнаяНаОтгрузку,
	|	МАКСИМУМ(ВложенныйЗапрос.НакладнаяНаПриемку)        КАК НакладнаяНаПриемку
	|ПОМЕСТИТЬ ВтОстаткиСостояния
	|ИЗ
	|	ТекстЗапросаВложенный КАК ВложенныйЗапрос
	|ГДЕ
	|	&КонтекстРаспоряжений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Распоряжение,
	|	ВложенныйЗапрос.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДокументов.НомерДокументаИБ          КАК Номер,
	|	РеестрДокументов.ДатаДокументаИБ           КАК Дата,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка)       КАК ТипРаспоряжения,
	|	ОстаткиСостояния.СостояниеНакладной        КАК СостояниеНакладной,
	|	ОстаткиСостояния.СостояниеОрдераНаОтгрузку КАК СостояниеОрдераНаОтгрузку,
	|	ОстаткиСостояния.СостояниеОрдераНаПриемку  КАК СостояниеОрдераНаПриемку,
	|	ОстаткиСостояния.НакладнаяНаОтгрузку       КАК НакладнаяНаОтгрузку,
	|	ОстаткиСостояния.НакладнаяНаПриемку        КАК НакладнаяНаПриемку,
	|	РеестрДокументов.Сумма                     КАК СуммаДокумента,
	|	РеестрДокументов.Валюта                    КАК Валюта,
	|	РеестрДокументов.Партнер                   КАК Партнер,
	|	РеестрДокументов.Контрагент.Ключ           КАК Контрагент,
	|	РеестрДокументов.Договор                   КАК Договор,
	|	РеестрДокументов.Организация               КАК Организация,
	|	РеестрДокументов.Подразделение             КАК Подразделение,
	|	ОстаткиСостояния.Склад                     КАК Склад,
	|	РеестрДокументов.Ответственный             КАК Менеджер,
	|	ОстаткиСостояния.Ссылка                    КАК Ссылка,
	|	РеестрДокументов.Дополнительно             КАК Дополнительно,
	|	&ОформляемаяХозОперация                    КАК ХозяйственнаяОперация,
	|	ОстаткиСостояния.Приоритет                 КАК Приоритет
	|ИЗ
	|	ВтОстаткиСостояния КАК ОстаткиСостояния
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ОстаткиСостояния.Ссылка = РеестрДокументов.Ссылка
	|		 И НЕ РеестрДокументов.ДополнительнаяЗапись
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО ОстаткиСостояния.Склад = СпрСклады.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ТекстЗапросаСпискаРаспоряжений =
		СтрЗаменить(
			ТекстЗапросаСпискаРаспоряжений,
			"ТекстЗапросаВложенный",
			СтрШаблон("(%1)", СтрСоединить(Выборка, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении())));
	
	ТекстЗапросаСпискаРаспоряжений =
		СтрЗаменить(
			ТекстЗапросаСпискаРаспоряжений,
			"&КонтекстРаспоряжений",
			?(ЗначениеЗаполнено(Распоряжения), "ВложенныйЗапрос.Распоряжение В (&Распоряжения)", "ИСТИНА"));
	
	СтруктураТекстовЗапросов = Новый Структура;
	СтруктураТекстовЗапросов.Вставить("ТекстЗапросаРасчетаСостояний",   ТекстЗапросаРасчетаСостояний);
	СтруктураТекстовЗапросов.Вставить("ТекстЗапросаСпискаРаспоряжений", ТекстЗапросаСпискаРаспоряжений);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМетаданныеДокументов()
	
	Строка = МетаданныеДокументов.Добавить();
	Строка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5;
	Строка.ПолноеИмяДокумента	 = Метаданные.Документы.ОтгрузкаТоваровСХранения.ПолноеИмя();
	Строка.Обработчик			 = "ВозвратДавальцу";
	
КонецПроцедуры


// Заполняет параметры формы "ОбщаяФорма.ФормаСозданныхДокументов".
//
// Параметры:
//  ПараметрыФормы        - Структура
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
//  КлючДанных            - Неопределено, Строка- КлючНазначенияИспользования
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыФормыСозданныхДокументов(ПараметрыФормы, ХозяйственнаяОперация, КлючДанных = Неопределено)
	
	ПараметрыФормы.Вставить("ВидимыеКолонки",	 Новый Массив);
	ПараметрыФормы.Вставить("СобытияОбновления", Новый Массив);
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтчетДавальцу2_5")
	 Или ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДавальцу2_5") Тогда
		ПараметрыФормы.Вставить("КлючДанных",	 КлючДанных);
	КонецЕсли;
	
	ПараметрыФормы.ВидимыеКолонки.Добавить("Номер");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дата");
	ПараметрыФормы.ВидимыеКолонки.Добавить("ТипЗначения");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Партнер");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Контрагент");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Договор");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Организация");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Подразделение");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Склад");
	ПараметрыФормы.ВидимыеКолонки.Добавить("Дополнительно");
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтчетДавальцу2_5")
	 Или ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца2_5") Тогда
		ПараметрыФормы.ВидимыеКолонки.Добавить("СуммаДокумента");
		ПараметрыФормы.ВидимыеКолонки.Добавить("Валюта");
	КонецЕсли;
	
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ОтгрузкаТоваровСХранения");
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ПриемкаТоваровНаХранение");
	ПараметрыФормы.СобытияОбновления.Добавить("Запись_ОтчетДавальцу2_5");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючевыеПоляШапкиРаспоряжения(ИмяДокументаФормирования, ОбъектМетаданныхРаспоряжение)
	
	МенеджерДокумента = Документы[ИмяДокументаФормирования];
	КлючевыеПоляШапки = МенеджерДокумента.КлючевыеПоляШапкиРаспоряжения();
	
	КлючевыеПоляШапкиАдаптированные = КлючевыеПоляШапки;
	
	МенеджерРаспоряжение = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданныхРаспоряжение.ПолноеИмя());
	ЗаменяемыеРеквизиты = Новый Структура;
	
	Если МенеджерДокумента = Документы.ОтчетДавальцу2_5 И МенеджерРаспоряжение = Справочники.ДоговорыКонтрагентов Тогда
		
		ЗаменяемыеРеквизиты.Вставить("Валюта",			"ВалютаВзаиморасчетов");
		ЗаменяемыеРеквизиты.Вставить("Договор",			"Ссылка");
		ЗаменяемыеРеквизиты.Вставить("Склад",			"НЕОПРЕДЕЛЕНО");
		ЗаменяемыеРеквизиты.Вставить("Сделка",			"НЕОПРЕДЕЛЕНО");
		ЗаменяемыеРеквизиты.Вставить("ЦенаВключаетНДС", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеРеквизиты.Вставить("ПорядокРасчетов", "НЕОПРЕДЕЛЕНО");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаменяемыеРеквизиты) Тогда
		
		МассивКлючевыхПолейАдаптированных = СтрРазделить(КлючевыеПоляШапкиАдаптированные, ",", Ложь);
		
		КоличествоПолей = МассивКлючевыхПолейАдаптированных.Количество();
		Индекс = 0;
		ЗначениеЗамены = Неопределено;
		
		Пока Индекс < КоличествоПолей Цикл
			
			КлючевоеПолеАдаптированное = СтрЗаменить(МассивКлючевыхПолейАдаптированных[Индекс], Символы.ПС, "");
			
			Если ЗаменяемыеРеквизиты.Свойство(КлючевоеПолеАдаптированное, ЗначениеЗамены) Тогда
				
				МассивКлючевыхПолейАдаптированных[Индекс] = СтрШаблон("%1%2 КАК %3",
																		Символы.ПС,
																		ЗначениеЗамены,
																		КлючевоеПолеАдаптированное);
				
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		КлючевыеПоляШапкиАдаптированные = СтрСоединить(МассивКлючевыхПолейАдаптированных, ",");
		
	КонецЕсли;
	
	СтруктураКлючевыхПолей = Новый Структура;
	СтруктураКлючевыхПолей.Вставить("КлючевыеПоляШапки",			   КлючевыеПоляШапки);
	СтруктураКлючевыхПолей.Вставить("КлючевыеПоляШапкиАдаптированные", КлючевыеПоляШапкиАдаптированные);
	
	Возврат СтруктураКлючевыхПолей;
	
КонецФункции

#КонецОбласти

#КонецОбласти
