#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Свойство("КлючНазначенияИспользования") 
		И ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда
		КлючНазначенияИспользования = Параметры.КлючНазначенияИспользования;
	ИначеЕсли Параметры.Свойство("КлючНазначенияФормы")
		И ЗначениеЗаполнено(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	Иначе
		КлючНазначенияИспользования = ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку();
	КонецЕсли;
	
	Если КлючНазначенияИспользования = ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/Обработка.ЖурналДокументовПриемаВПереработку2_5";
	
	ВосстановитьНастройки(Параметры);
	
	ТЗХозОперацииИТипыДокументов = Обработки.ЖурналДокументовПриемаВПереработку2_5.ИнициализироватьХозяйственныеОперацииИДокументы(ОтборХозяйственныеОперации,
		ОтборТипыДокументов, КлючНазначенияИспользования);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
	ИспользуемыеТипыДокументов = ТЗХозОперацииИТипыДокументов.ВыгрузитьКолонку("ТипДокумента");
	ОбновлениеИнформационнойБазыУТ.ПроверитьВозможностьОткрытияЖурналаДокументов(ИспользуемыеТипыДокументов);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(Список);
	
	Если ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Истина;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ПроверкаДокументовВРеглУчете
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	
	ПроверкаДокументовСервер.ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(
		СвойстваСписка.ТекстЗапроса, "РеестрДокументовПереопределяемый");
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	// Конец ПроверкаДокументовВРеглУчете
		
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.ГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ЗначениеЗаполнено(ИспользуемыеТипыДокументов) Тогда
		ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
		ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
		ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаСписка(
		ЭтотОбъект, Элементы.Список, Элементы.СписокСуммаДокумента);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияКлиент.ОбновитьПодсказкуФормы(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если ИмяСобытия = "Запись_ЗаказДавальца2_5"
	 Или ИмяСобытия = "Запись_ПриемкаТоваровНаХранение"
	 Или ИмяСобытия = "Запись_ОтгрузкаТоваровСХранения"
	 Или ИмяСобытия = "Запись_ОтчетДавальцу2_5"
	 Или ИмяСобытия = "Запись_ВыкупПринятыхНаХранениеТоваров"
	 Или ИмяСобытия = "Запись_ОтчетОСписанииТоваровСХранения"
	 Или ИмяСобытия = "Запись_ПорчаТоваров"
	 Или ИмяСобытия = "Запись_ПересортицаТоваров"
	 Или ИмяСобытия = "Запись_АктОРасхожденияхПослеПриемки"
	 Или ИмяСобытия = "Запись_АктОРасхожденияхПослеОтгрузки"
	 Или ИмяСобытия = "Запись_СчетФактураВыданный"
	 Или ИмяСобытия = "Запись_КорректировкаРеализации"
	 Или ИмяСобытия = "Принять_ФормаСозданныхДокументов" Тогда
		
		Элементы.Список.Обновить();
		
		ОбновитьГиперссылкуКОформлению();
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
			
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаСписка(ИмяСобытия, ЭтотОбъект, Элементы.Список);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияГиперссылкиКОформлению()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		
		ОбновитьГиперссылкуКОформлениюЗавершение();
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить(
		"ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку());
	
	ОткрытьФорму(
		"Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
		ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.Список.Событие.КОформлениюОбработкаНавигационнойСсылки");
	
	СтандартнаяОбработка = Ложь;
	
	МассивИмен = СтрРазделить(НавигационнаяСсылкаФорматированнойСтроки, "/");
	ИмяФормыОформленияНакладных = МассивИмен[0];
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",       Склад);
	СтруктураБыстрогоОтбора.Вставить("Менеджер",    Менеджер);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора",     СтруктураБыстрогоОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы",          ?(МассивИмен.Количество() > 1, МассивИмен[1], ""));
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыПриемаВПереработку");
	
	ОткрытьФорму(ИмяФормыОформленияНакладных, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.Список.Событие.СмТакжеВРаботеОбработкаНавигационнойСсылки");
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",       Склад);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыФормы.Вставить(
		"КлючНазначенияИспользования", ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку());
	
	// Доверенность выданная
	ПараметрыФормы.Вставить("ДоступностьРаспоряженийНаПолучениеДС", Истина);
	ПараметрыФормы.Вставить("ДоступностьРаспоряженийТовары", Ложь);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Доверенности на получение денежных средств';
													|en = 'Authorization letters to receive cash'"));
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОформлено

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		
		Если Копирование Тогда
			
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
			
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда
			
			Подключаемый_СоздатьДокумент(
				Новый Структура("Имя", Элементы.ГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя));
			
		Иначе
			
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "СостояниеОригиналаПервичногоДокумента" Или Поле.Имя = "СостояниеОригиналПолучен" Тогда
		// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
		УчетОригиналовПервичныхДокументовКлиент.СписокВыбор(Поле.Имя, ЭтотОбъект, Элементы.Список, СтандартнаяОбработка);
		// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменить(Команда)
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	
	ОбновитьГиперссылкуКОформлению();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	
	ОбновитьГиперссылкуКОформлению();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	
	ОбновитьГиперссылкуКОформлению();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
	ОбновитьГиперссылкуКОформлению();
	ПодключитьОбработчикОжиданияГиперссылкиКОформлению();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбщегоНазначенияУТ.ОбработатьМультиязычнуюКолонкуСписка(Строки);
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриПолученииДанныхНаСервере(Строки);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// ЭлектронноеВзаимодействие.ТорговыеПредложения
&НаКлиенте
Процедура Подключаемый_ПодсказкиБизнесСетьНажатие(Команда)
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПодсказок(ЭтаФорма);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

#Область КнопкаСоздать

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Склад",       Склад);
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	КлючФормы = ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку();
	
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Склад",       Склад);
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(
		АдресХозяйственныеОперацииИДокументы, КлючФормы, КлючНазначенияИспользования, СтруктураОтбора);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(
		Период,, Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = ВыбранноеЗначение;
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы - 
&НаКлиенте
Процедура Подключаемый_УстановитьСтатус(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьСтатус(Команда.Имя, СоответствиеКомандСтатусам, Элементы.Список);
	
КонецПроцедуры

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыСостоянияОригинала()
	
	ОбновитьКомандыСостоянияОригинала()
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыСостоянияОригинала()
	
	Если КлючНазначенияИспользования = ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТЗХозОперацииИТипыДокументов = Обработки.ЖурналДокументовПриемаВПереработку2_5.ИнициализироватьХозяйственныеОперацииИДокументы(ОтборХозяйственныеОперации,
		ОтборТипыДокументов, КлючНазначенияИспользования);
	
	ИспользуемыеТипыДокументов = ТЗХозОперацииИТипыДокументов.ВыгрузитьКолонку("ТипДокумента");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду =
		ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...';
					|en = 'Searching for the document by barcode...'"));
	
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтаФорма, "Список");
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыПриИзменении

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьОтборПоОрганизации();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	УстановитьОтборыДинамическихСписков();
	УстановитьВидимостьДоступность();
	ОбновитьГиперссылкуКОформлению();
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "СписокДата");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки(Параметры)
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		
		СтруктураБыстрогоОтбора = Параметры.СтруктураБыстрогоОтбора;
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("Склад",       Склад);
		СтруктураБыстрогоОтбора.Свойство("Менеджер",    Менеджер);
		СтруктураБыстрогоОтбора.Свойство("Период",      Период);
		
	Иначе
		
		Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.ФормаСписка", КлючНазначенияИспользования);
		
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
			
			Настройки.Свойство("Организация", Организация);
			Настройки.Свойство("Склад",       Склад);
			Настройки.Свойство("Менеджер",    Менеджер);
			Настройки.Свойство("Период",      Период);
			
			Настройки.Свойство("ОтборТипыДокументов",        ОтборТипыДокументов);
			Настройки.Свойство("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ИменаСохраняемыхРеквизитов =
		"Организация,
		|Склад,
		|Менеджер,
		|Период,
		|ОтборТипыДокументов,
		|ОтборХозяйственныеОперации";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.ФормаСписка", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов)
	
	ДанныеРабочегоМеста = ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
							ТЗХозОперацииИТипыДокументов,
							ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку(),
							Обработки.ЖурналДокументовПриемаВПереработку2_5.ЗаголовокРабочегоМеста());
	
	Заголовок = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.Список,
		ХозяйственныеОперацииИДокументы);
	
	УстановитьОтборыДинамическихСписков();
	УстановитьВидимостьДоступность();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
							Элементы.ИнформационнаяНадписьОтбор.Заголовок,
							ХозяйственныеОперацииИДокументы,
							ОтборТипыДокументов,
							ОтборХозяйственныеОперации);
	
	НастроитьКнопкиУправленияДокументами();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость       = Ложь;
		Элементы.СписокОрганизация.Видимость = Ложь;
	Иначе
		Элементы.СписокОрганизация.Видимость = Не ЗначениеЗаполнено(Организация);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Элементы.Склад.Видимость       = Ложь;
		Элементы.СписокСклад.Видимость = Ложь;
	Иначе
		Элементы.СписокСклад.Видимость = Не ЗначениеЗаполнено(Склад);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОтветственныйВДокументах") Тогда
		Элементы.Менеджер.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Элементы.СписокВалюта.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СписокКонтрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
	// Перезаполнение списка статусов
	ОбщегоНазначенияУТ.УстановитьСписокСтатусов(ЭтаФорма, Элементы.УстановитьСтатус);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 											  = ЭтаФорма;
	СтруктураПараметров.ИмяКнопкиСкопировать 							  = "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню 			  = "СписокКонтекстноеМенюСкопировать";
	СтруктураПараметров.ИмяКнопкиИзменить 								  = "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню 				  = "СписокКонтекстноеМенюИзменить";
	СтруктураПараметров.ИмяКнопкиПровести 								  = "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню 				  = "СписокКонтекстноеМенюПровести";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения 						  = "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню 		  = "СписокКонтекстноеМенюОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления 				  = "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню = "СписокКонтекстноеМенюУстановитьПометкуУдаления";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);

КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресХозяйственныхОперацийИДокументов)
	
	ТЗХозОперацииИТипыДокументов = ПолучитьИзВременногоХранилища(АдресХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(
		ТЗХозОперацииИТипыДокументов, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоВыбраннымОперациямИДокументам(ТЗХозОперацииИТипыДокументов);
	
КонецПроцедуры

#Область Отборы

&НаСервере
Процедура УстановитьОтборыДинамическихСписков()
	
	ОтборСклады        = СкладыСервер.СписокПодчиненныхСкладов(Склад);
	ОтборМестаХранения = Справочники.КлючиРеестраДокументов.КлючиПоЗначениям(ОтборСклады);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ТипСсылки", ОтборТипыДокументов, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ХозяйственнаяОперация", ОтборХозяйственныеОперации, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"МестоХранения",
		ОтборМестаХранения,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(ОтборМестаХранения));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
		
	УстановитьОтборПоОрганизации();
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоОрганизации()

	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
	   И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		СписокОрганизаций,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ЗначениеЗаполнено(Организация));
		
	ОбновитьГиперссылкуКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериоду()
	
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецДня(Дата(3999, 12, 31))));
	
КонецПроцедуры

#КонецОбласти 

#Область ГиперссылкаКОформлению

&НаСервере
Процедура ОбновитьГиперссылкуКОформлению()
	
	Элементы.КОформлению.Видимость = Истина;
	КОформлению = Новый ФорматированнаяСтрока(НСтр("ru = 'К оформлению: <идет обновление данных>';
													|en = 'To register: <updating data>'"));
	
	Элементы.СмТакжеВРаботе.Видимость = Истина;
	СмТакжеВРаботе = Новый ФорматированнаяСтрока(НСтр("ru = 'См. также: <идет обновление данных>';
														|en = 'See also: <data is being updated>'"));
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Склад",       Склад);
	ПараметрыФормирования.Вставить("Организация", Организация);
	ПараметрыФормирования.Вставить("Менеджер",    Менеджер);
	ПараметрыФормирования.Вставить(
		"КлючНазначенияИспользования", ДавальческаяСхемаКлиентСервер.КлючНазначенияДокументыПриемаВПереработку());
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ХозяйственныеОперацииИДокументы.Выгрузить());
	ПараметрыЗадания.Добавить(ПараметрыФормирования);
	
	ПроцедураРасчета =
		"Обработки.ЖурналДокументовПриемаВПереработку2_5.СформироватьГиперссылкуКОформлениюФоновоеЗадание";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
	
	РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне(ПроцедураРасчета, ПараметрыЗадания, ПараметрыВыполнения);
	АдресХранилища       = РезультатРасчета.АдресРезультата;
	ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
	
	Если РезультатРасчета.Статус = "Выполнено" Тогда
		ОбновитьГиперссылкуКОформлениюЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкуКОформлениюЗавершение()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ЗначениеЗаполнено(Результат.КОформлению) Тогда
		КОформлению = Результат.КОформлению;
	Иначе
		КОформлению = Новый ФорматированнаяСтрока(НСтр("ru = 'К оформлению: нет';
														|en = 'To register: no'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.СмТакжеВРаботе) Тогда
		СмТакжеВРаботе = Результат.СмТакжеВРаботе;
		Элементы.СмТакжеВРаботе.Видимость = Истина;
	Иначе
		Элементы.СмТакжеВРаботе.Видимость = Ложь;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
