
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
		ИсточникДанных = Параметры.ИсточникДанных;
	Иначе
		Сведения = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.СведенияОРежимеРаботыСИсточниками();
		ИсточникДанных = Сведения.ИсточникДанных;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ИсточникДанныхСохраненный = Настройки.Получить("ИсточникДанных");
	
	Если ИсточникДанныхСохраненный <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ИсточникДанных)
				И ОбщегоНазначения.СсылкаСуществует(ИсточникДанныхСохраненный) Тогда
			ИсточникДанных = ИсточникДанныхСохраненный;
			ЗаполнитьРеквизитыПоИсточнику();
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИсточникДанных");
		КонецЕсли;
		Настройки.Удалить("ИсточникДанных");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ИсточникДанных.Пустая() Тогда
		
		НачатьОбновлениеСчетчиковКоличестваОшибок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияЗагрузкаЗавершение()
			И Источник = ИсточникДанных Тогда
		
		ЗаполнитьРеквизитыПоИсточнику();
		
		НачатьОбновлениеСчетчиковКоличестваОшибок();
		
		Элементы.СписокОшибок.Обновить();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ИсточникДанныхПриИзмененииНаСервере();
	
	НачатьОбновлениеСчетчиковКоличестваОшибок();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьРассмотренныеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтборОшибок");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппировкаОшибок

&НаКлиенте
Процедура ГруппировкаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ГруппировкаПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОшибок

&НаКлиенте
Процедура СписокОшибокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокОшибокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОшибокПриИзменении(Элемент)
	
	НачатьОбновлениеСчетчиковКоличестваОшибок(Элементы.ГруппировкаОшибок.ТекущиеДанные.ГруппировкаЗначение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокОшибокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Обработки.ЗагрузкаПроизводственнойНСИ.УстановитьОформлениеДатыВСписке(Строки, "ДатаВозникновения");
	
	ТекущееЗначениеГруппировки = Неопределено;
	Если Настройки.ДополнительныеСвойства.Свойство("ТекущееЗначениеГруппировки", ТекущееЗначениеГруппировки)
			И (ТекущееЗначениеГруппировки = Перечисления.ЗагрузкаНСИТипыПроблем.СопоставлениеОбъектов
				ИЛИ ТекущееЗначениеГруппировки = Перечисления.ЗагрузкаНСИТипыПроблем.ПоискОбъекта) Тогда
		УстановитьОформлениеТипаДанныхВСписке(Строки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ГруппировкаОшибокПриИзменении(Команда)
	
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.ГруппаТипГруппировки, Команда.Имя);
	
	ЗаполнитьТаблицуГруппировкаОшибок();
	
	НачатьОбновлениеСчетчиковКоличестваОшибок();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ГруппировкаОшибок");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаОшибокОбновитьСписок(Команда)
	
	ЗаполнитьТаблицуГруппировкаОшибок();
	
	ВосстановитьПозициюВТаблицеГруппировкаОшибок(ЭтотОбъект);
	
	НачатьОбновлениеСчетчиковКоличестваОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаОшибокОчиститьСписок(Команда)
	
	ОчиститьСписокОшибок();
	
	Элементы.СписокОшибок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОшибокРассмотрена(Команда)
	
	ВыделенныеСтроки = Элементы.СписокОшибок.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтметитьРассмотренными(ВыделенныеСтроки);
	
	Элементы.СписокОшибок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОшибокОткрытьОбъект(Команда)
	
	ТекущиеДанные = Элементы.СписокОшибок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанные.СсылкаНаОбъект)
			И СсылкаСуществует(ТекущиеДанные.СсылкаНаОбъект) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОшибокСопоставить(Команда)
	
	ТекущиеДанные = Элементы.СписокОшибок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТипЗначения = ТипЗнч(ТекущиеДанные.ОбъектМетаданных);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИсточникДанных",       ИсточникДанных);
		ДополнительныеПараметры.Вставить("ТекущийИдентификатор", ТекущиеДанные.Идентификатор);
		ДополнительныеПараметры.Вставить("ОбъектМетаданных",     ТекущиеДанные.ОбъектМетаданных);
		ДополнительныеПараметры.Вставить("КлючЗаписиОшибки",     Элементы.СписокОшибок.ТекущаяСтрока);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		Если ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
				И ЗначениеЗаполнено(ТекущиеДанные.ВладелецЗначений) Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ТекущиеДанные.ВладелецЗначений));
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("СписокОшибокСопоставитьЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ИмяФормыВыбораОбъектаМетаданных(ТипЗначения),
			ПараметрыФормы,
			ЭтотОбъект,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	НачатьЗагрузкуДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОбъектов(Команда)
	
	ОткрытьФорму("Обработка.ЗагрузкаПроизводственнойНСИ.Форма.СоответствиеОбъектов",
		Новый Структура("ИсточникДанных", ИсточникДанных),,
		ИсточникДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналРегистрации(Команда)
	
	ПараметрыФормы = ПараметрыОткрытияЖурналаРегистрации(ИсточникДанных);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппировкаКоличествоОшибок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГруппировкаОшибок.ПроизводитсяОбновление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "обновление...");
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйШрифтЗагрузкаНСИ);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОшибок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОшибок.Рассмотрена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
		Элементы.ИсточникДанных.ТолькоПросмотр = Истина;
		Заголовок = СтрШаблон(НСтр("ru = 'Мониторинг состояния загрузки из источника ""%1""';
									|en = 'Monitor the import state from the ""%1"" source'"), ИсточникДанных);
	КонецЕсли;
	
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.ГруппаТипГруппировки, Команды.ГруппировкаПоТипамДанных.Имя);
	
	ЗаполнитьТаблицуГруппировкаОшибок();
	
	НастроитьСписокОшибок();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ИсточникДанных")
		ИЛИ Инициализация Тогда
		
		ИсточникДанныхЗаполнен = НЕ Форма.ИсточникДанных.Пустая();
		
		Элементы.ГруппировкаОбновитьСписок.Доступность = ИсточникДанныхЗаполнен;
		Элементы.ГруппировкаОчистить.Доступность       = ИсточникДанныхЗаполнен;
		Элементы.ГруппаТипГруппировки.Доступность      = ИсточникДанныхЗаполнен;
		Элементы.ВыполнитьЗагрузку.Доступность         = ИсточникДанныхЗаполнен;
		Элементы.ЖурналРегистрации.Доступность         = ИсточникДанныхЗаполнен;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ГруппировкаОшибок")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаТипГруппировки.Заголовок = Элементы[ТекущийРежимГруппировкиОшибок(Форма)].Заголовок;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОтборОшибок")
		ИЛИ Инициализация Тогда
		
		ТекущаяСтрока = Элементы.ГруппировкаОшибок.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			
			ТекущиеДанные = Форма.ГруппировкаОшибок.НайтиПоИдентификатору(ТекущаяСтрока);
			
			ПараметрыСписка = ПараметрыСпискаОшибок(Форма, ТекущиеДанные);
			
			МассивОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				Форма.СписокОшибок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, , "ПолеГруппировки");
			Если МассивОтборов.ВГраница() <> -1 Тогда
				МассивОтборов[0].ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыСписка.ПолеГруппировки);
				МассивОтборов[0].ПравоеЗначение = ТекущиеДанные.ГруппировкаЗначение;
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					Форма.СписокОшибок,
					ПараметрыСписка.ПолеГруппировки,
					ТекущиеДанные.ГруппировкаЗначение,
					ВидСравненияКомпоновкиДанных.Равно,
					"ПолеГруппировки",
					Истина);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокОшибок,
				"Рассмотрена",
				Форма.ОтображатьРассмотренные,
				ВидСравненияКомпоновкиДанных.Равно,,
				НЕ Форма.ОтображатьРассмотренные);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокОшибок,
				"ИсточникДанных",
				Форма.ИсточникДанных,
				ВидСравненияКомпоновкиДанных.Равно,,
				Истина);
			
			// Тип проблемы
			Элементы.СписокОшибокТипПроблемы.Видимость = НЕ ТекущийРежимГруппировкиОшибок(Форма) = РежимГруппировкиПоТипамПроблем();
			
			// Объект метаданных
			Элементы.СписокОшибокОбъектМетаданных.Видимость =
				Форма.ТекущееЗначениеГруппировки = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИТипыПроблем.СопоставлениеОбъектов")
					ИЛИ Форма.ТекущееЗначениеГруппировки = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИТипыПроблем.ПоискОбъекта");
			
			// Ссылка на Объект
			Элементы.СписокОшибокСсылкаНаОбъект.Видимость =
				НЕ (Форма.ТекущееЗначениеГруппировки = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИТипыПроблем.ФорматФайлаДанных"))
					И НЕ (Форма.ТекущееЗначениеГруппировки = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИТипыПроблем.СопоставлениеОбъектов"))
					И НЕ (Форма.ТекущееЗначениеГруппировки = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИТипыПроблем.ПоискОбъекта"))
					И НЕ (Форма.ТекущееЗначениеГруппировки = ПредопределенноеЗначение("Перечисление.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных"));
			Элементы.СписокОшибокСсылкаНаОбъект.Заголовок = ПараметрыСписка.ПредставлениеОбъекта;
				
			Элементы.ИнформационнаяСтрокаОбнаруженоОшибок.Видимость = Истина;
			Элементы.ОтображатьРассмотренные.Видимость = Истина;
			Элементы.ГруппаСтраницыСписокОшибок.ТекущаяСтраница = Элементы.ГруппаСтраницаСписокОшибокОсновная;
			
		Иначе
			Элементы.ИнформационнаяСтрокаОбнаруженоОшибок.Видимость = Ложь;
			Элементы.ОтображатьРассмотренные.Видимость = Ложь;
			Элементы.ГруппаСтраницыСписокОшибок.ТекущаяСтраница = Элементы.ГруппаСтраницаСписокОшибокПустая;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ДлительныеОперацииСтруктура = Новый Структура("ОбновлениеСчетчиков,ЗагрузкаДанных");
	
	ЗаполнитьРеквизитыПоИсточнику();
	
КонецПроцедуры

&НаСервере
Процедура ИсточникДанныхПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыПоИсточнику();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИсточнику()
	
	ЗаполнитьТаблицуГруппировкаОшибок();
	
	ВосстановитьПозициюВТаблицеГруппировкаОшибок(ЭтотОбъект);
	
	ОбновитьИнформациюОСостоянии();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуЭлементаВГруппеКоманд(ГруппаКоманд, ИмяКоманды)
	
	Для каждого Элемент Из ГруппаКоманд.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.ИмяКоманды = ИмяКоманды);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрерватьДлительнуюОперацию(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСостоянии()
	
	ИнформационнаяСтрокаПоследнееВыполнение = "";
	ИнформационнаяСтрокаОбнаруженоОшибок    = "";
	
	Если ЗначениеЗаполнено(ИсточникДанных) Тогда
		СостояниеЗагрузки = РегистрыСведений.НастройкиВыполненияЗагрузкиНСИ.СостояниеЗагрузки(ИсточникДанных)[0];
		СвойстваСостояния = Перечисления.ЗагрузкаНСИСостояния.СвойстваСостоянияЗагрузки(СостояниеЗагрузки.Состояние);
		Если СвойстваСостояния.Состояние <> Перечисления.ЗагрузкаНСИСостояния.НеВыполнялась
				И ЗначениеЗаполнено(СостояниеЗагрузки.ДатаОкончания) Тогда
			ИнформационнаяСтрокаПоследнееВыполнение = СтрШаблон(НСтр("ru = 'Последнее выполнение: %1';
																	|en = 'Last execution: %1'"),
				Обработки.ЗагрузкаПроизводственнойНСИ.ПредставлениеДатыСобытияВИнтерфейсе(СостояниеЗагрузки.ДатаОкончания));
			ИнформационнаяСтрокаОбнаруженоОшибок    = СтрШаблон(НСтр("ru = 'Ошибок рассмотреть: %1, при последнем выполнении: %2';
																	|en = 'Errors to review: %1. Upon the last execution: %2'"),
				ГруппировкаОшибок.Итог("КоличествоОшибок"),
				СостояниеЗагрузки.КоличествоОшибок);
		КонецЕсли;
		ИнформационнаяСтрокаСостояние = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Состояние загрузки: <span style=""color: %1""> %2</span>';
				|en = 'Import state: <span style=""color: %1""> %2</span>'"),
			СвойстваСостояния.Цвет,
			СвойстваСостояния.Состояние);
	Иначе
		ИнформационнаяСтрокаСостояние = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = 'Источник не выбран';
																					|en = 'Source is not selected'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыВыбораОбъектаМетаданных(ТипЗначения)
	
	Если ТипЗначения = Тип("СправочникСсылка.Номенклатура")
			И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ИмяФормы = "Обработка.ЗагрузкаПроизводственнойНСИ.Форма.СопоставлениеНоменклатуры";
	Иначе
		ИмяФормы = СтрШаблон("%1.ФормаВыбора" , Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя());
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаКлиенте
Процедура СписокОшибокСопоставитьЗавершение(Значение, СтруктураПараметров) Экспорт
	
	Если Значение <> Неопределено Тогда
		
		Если ВыполнитьСопоставление(Значение, СтруктураПараметров) Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Сопоставление выполнено';
					|en = 'Mapped'"));
			
			Элементы.СписокОшибок.Обновить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьСопоставление(Значение, СтруктураПараметров)
	
	ПараметрыРегистра = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыРегистраСоответствия(СтруктураПараметров.ОбъектМетаданных);
	
	ЗаписьСопоставление = РегистрыСведений[ПараметрыРегистра.ИмяРегистра].СоздатьМенеджерЗаписи(); // РегистрСведенийЗапись.СоответствиеНоменклатурыДляЗагрузкиНСИ, РегистрСведенийЗапись.СоответствиеОбъектовДляЗагрузкиНСИ
	ЗаписьСопоставление.ИсточникДанных = СтруктураПараметров.ИсточникДанных;
	ЗаписьСопоставление.Идентификатор  = СтруктураПараметров.ТекущийИдентификатор;
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЗаписьСопоставление, Значение);
	Иначе
		ЗаписьСопоставление.ОбъектМетаданных = СтруктураПараметров.ОбъектМетаданных;
		ЗаписьСопоставление.СсылкаНаОбъект   = Значение;
	КонецЕсли;
	
	ЗаписьОшибка = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьОшибка, СтруктураПараметров.КлючЗаписиОшибки);
	ЗаписьОшибка.Прочитать();
	ЗаписьОшибка.Рассмотрена = Истина;
	
	НачатьТранзакцию();
	Попытка
		ЗаписьСопоставление.Записать();
		ЗаписьОшибка.Записать();
		Результат = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать соответствие по причине: %1';
															|en = 'Cannot save the mapping. Reason: %1'"), ПредставлениеОшибки));
		Результат = Ложь;
	КонецПопытки;
	
	Если Результат Тогда
		ТекущиеДанные = ГруппировкаОшибок.НайтиПоИдентификатору(Элементы.ГруппировкаОшибок.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.КоличествоОшибок = ТекущиеДанные.КоличествоОшибок - 1;
			ОбновитьИнформациюОСостоянии();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОткрытияЖурналаРегистрации(ИсточникДанных)
	
	Результат = Новый Структура;
	
	ОтбираемыеСобытия = Новый Массив;
	ОтбираемыеСобытия.Добавить(Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных));
	Результат.Вставить("СобытиеЖурналаРегистрации", ОтбираемыеСобытия);
		
	СостояниеЗагрузки = РегистрыСведений.НастройкиВыполненияЗагрузкиНСИ.СостояниеЗагрузки(ИсточникДанных)[0];
	Если ЗначениеЗаполнено(СостояниеЗагрузки.ДатаНачала) Тогда
		Результат.Вставить("ДатаНачала", СостояниеЗагрузки.ДатаНачала);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ГруппировкаОшибок

&НаКлиенте
Процедура Подключаемый_ГруппировкаПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ГруппировкаОшибок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоляФайла.Очистить();
		Возврат;
	КонецЕсли;
	
	ТекущееЗначениеГруппировки = ТекущиеДанные.ГруппировкаЗначение;
	
	НастройкиСписка = СписокОшибок.КомпоновщикНастроек.Настройки;
	НастройкиСписка.ДополнительныеСвойства.Вставить("ТекущееЗначениеГруппировки", ТекущееЗначениеГруппировки);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ОтборОшибок");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуГруппировкаОшибок()
	
	ТекущийРежимГруппировкиОшибок = ТекущийРежимГруппировкиОшибок(ЭтотОбъект);
	ГруппировкаОшибок.Очистить();
	
	Если ИсточникДанных.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИсточникаДанных = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанных(ИсточникДанных);
	
	ОписаниеЗагружаемыхДанных = УправлениеДаннымиОбИзделиях.ОписаниеЗагружаемыхДанных(НастройкиИсточникаДанных);
	
	ТаблицаГруппировкаОшибок = ГруппировкаОшибок.Выгрузить();
	
	Если ТекущийРежимГруппировкиОшибок = РежимГруппировкиПоТипамДанных() Тогда
		НастройкаРеквизитовИсточника = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиРеквизитовИсточника(
			ИсточникДанных, ОписаниеЗагружаемыхДанных);
		Для каждого СтрокаРеквизит Из НастройкаРеквизитовИсточника Цикл
			Для каждого СтрокаОписаниеТипа Из СтрокаРеквизит.ОписаниеРеквизита.ОписаниеСсылочныхТипов Цикл
				НоваяСтрока = ТаблицаГруппировкаОшибок.Добавить();
				НоваяСтрока.ГруппировкаЗначение      = СтрокаОписаниеТипа.ОбъектМетаданных;
				НоваяСтрока.ГруппировкаПредставление = СтрокаОписаниеТипа.Синоним;
				НоваяСтрока.ПредставлениеОбъекта     = СтрокаОписаниеТипа.ПредставлениеОбъекта;
				НоваяСтрока.ПолноеИмяТипа            = СтрокаОписаниеТипа.ПолноеИмя;
			КонецЦикла;
		КонецЦикла;
		ДополнительныеСправочники = Новый Структура;
		ДополнительныеСправочники.Вставить("ЭтапыПроизводства",          Истина);
		ДополнительныеСправочники.Вставить("ТехнологическиеОперации",    Истина);
		ДополнительныеСправочники.Вставить("ХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
		Для каждого КлючИЗначение Из ДополнительныеСправочники Цикл
			Если КлючИЗначение.Значение Тогда
				МетаданныеСправочника = Метаданные.Справочники.Найти(КлючИЗначение.Ключ);
				НоваяСтрока = ТаблицаГруппировкаОшибок.Добавить();
				НоваяСтрока.ГруппировкаЗначение      = Справочники[КлючИЗначение.Ключ].ПустаяСсылка();
				НоваяСтрока.ГруппировкаПредставление = МетаданныеСправочника.Синоним;
				НоваяСтрока.ПредставлениеОбъекта     = МетаданныеСправочника.ПредставлениеОбъекта;
				НоваяСтрока.ПолноеИмяТипа            = МетаданныеСправочника.ПолноеИмя();
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока = ТаблицаГруппировкаОшибок.Добавить();
		НоваяСтрока.ГруппировкаЗначение      = Неопределено;
		НоваяСтрока.ГруппировкаПредставление = НСтр("ru = 'Прочее';
													|en = 'Other'");
		НоваяСтрока.Порядок                  = 1;
		ТаблицаГруппировкаОшибок.Свернуть("Порядок,ГруппировкаЗначение,ГруппировкаПредставление,ПолноеИмяТипа,ПредставлениеОбъекта");
	ИначеЕсли ТекущийРежимГруппировкиОшибок = РежимГруппировкиПоТипамПроблем() Тогда
		Для каждого ТипПроблемы Из Перечисления.ЗагрузкаНСИТипыПроблем Цикл
			НоваяСтрока = ТаблицаГруппировкаОшибок.Добавить();
			НоваяСтрока.ГруппировкаЗначение = ТипПроблемы;
			НоваяСтрока.ГруппировкаПредставление = Строка(ТипПроблемы);
			НоваяСтрока.Порядок = ?(ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.Прочее, 1, 0);
		КонецЦикла;
	ИначеЕсли ТекущийРежимГруппировкиОшибок = РежимГруппировкиПоФайлам() Тогда
		МассивРазделов = УправлениеДаннымиОбИзделияхКлиентСервер.ПорядокОбработкиРазделовИсточника(НастройкиИсточникаДанных);
		Для Индекс = 0 По МассивРазделов.ВГраница() Цикл
			НоваяСтрока = ТаблицаГруппировкаОшибок.Добавить();
			НоваяСтрока.Порядок = Индекс;
			НоваяСтрока.ГруппировкаЗначение = МассивРазделов[Индекс];
			НоваяСтрока.ГруппировкаПредставление = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеФайлаДанныхПоКлючуРаздела(МассивРазделов[Индекс]);
		КонецЦикла;
		НоваяСтрока = ТаблицаГруппировкаОшибок.Добавить();
		НоваяСтрока.ГруппировкаЗначение      = "";
		НоваяСтрока.ГруппировкаПредставление = НСтр("ru = 'Прочее';
													|en = 'Other'");
		НоваяСтрока.Порядок                  = ТаблицаГруппировкаОшибок.Количество();
	КонецЕсли;
	
	ТаблицаГруппировкаОшибок.Сортировать("Порядок,ГруппировкаПредставление");
	ГруппировкаОшибок.Загрузить(ТаблицаГруппировкаОшибок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьПозициюВТаблицеГруппировкаОшибок(Форма)
	
	Если Форма.ТекущееЗначениеГруппировки <> Неопределено Тогда
		НайденныеСтроки = Форма.ГруппировкаОшибок.НайтиСтроки(Новый Структура("ГруппировкаЗначение", Форма.ТекущееЗначениеГруппировки));
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Форма.Элементы.ГруппировкаОшибок.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСписокОшибок()
	
	ПараметрыСписка = ПараметрыСпискаОшибок(ЭтотОбъект);
	
	НаборЗаписей = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьНаборЗаписей();
	Для каждого ВыделеннаяСтрока Из Элементы.ГруппировкаОшибок.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ГруппировкаОшибок.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ДанныеСтроки.КоличествоОшибок = 0;
		
		НаборЗаписей.Отбор[ПараметрыСписка.ПолеГруппировки].Установить(ДанныеСтроки.ГруппировкаЗначение);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ОбновитьИнформациюОСостоянии();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРежимГруппировкиОшибок(Форма)
	
	Результат = Неопределено;
	
	Для каждого Элемент Из Форма.Элементы.ГруппаТипГруппировки.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			Результат = Элемент.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимГруппировкиПоТипамДанных()
	
	Возврат "ГруппировкаПоТипамДанных";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимГруппировкиПоТипамПроблем()
	
	Возврат "ГруппировкаПоТипамПроблем";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимГруппировкиПоФайлам()
	
	Возврат "ГруппировкаПоФайлам";
	
КонецФункции

#КонецОбласти

#Область СписокОшибок

&НаКлиенте
Процедура Подключаемый_СписокОшибокПриАктивизацииСтроки()
	
	ТекущаяСтрока = Элементы.СписокОшибок.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоляФайла.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокОшибокПриАктивизацииСтрокиНаСервере(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура СписокОшибокПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки)
	
	Запись = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ИдентификаторСтроки);
	Запись.Прочитать();
	
	НастроитьКомандыДействийСОшибкой(Запись);
	
	ЗаполнитьТаблицуПоляФайла(Запись);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПоляФайла(ДанныеОшибки)
	
	СтруктураПолейФайла = ДанныеОшибки.ПоляФайла.Получить(); // Структура
	
	ПоляФайла.Загрузить(РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.ТаблицаПолейФайла(СтруктураПолейФайла));
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьРассмотренными(ВыделенныеСтроки)
	
	ТекущиеДанные = ГруппировкаОшибок.НайтиПоИдентификатору(Элементы.ГруппировкаОшибок.ТекущаяСтрока);
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Запись = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ВыделеннаяСтрока);
		Запись.Прочитать();
		Запись.Рассмотрена = Истина;
		Запись.Записать();
	КонецЦикла;
	
	ТекущиеДанные.КоличествоОшибок = ТекущиеДанные.КоличествоОшибок - ВыделенныеСтроки.Количество();
	
	ОбновитьИнформациюОСостоянии();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокОшибок()
	
	СписокПолей = Новый Массив;
	СписокПолей.Добавить("ОбъектМетаданных");
	
	СписокОшибок.УстановитьОграниченияИспользованияВПорядке(СписокПолей);
	СписокОшибок.УстановитьОграниченияИспользованияВГруппировке(СписокПолей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОформлениеТипаДанныхВСписке(Строки)
	
	ИмяКолонки       = "ОбъектМетаданных";
	КэшПредставлений = Новый Соответствие;
	
	Для каждого КлючИЗначение Из Строки Цикл
		
		СтрокаСписка = КлючИЗначение.Значение;
		Если СтрокаСписка.Оформление.Получить(ИмяКолонки) <> Неопределено Тогда
			
			ТипЗначения   = ТипЗнч(СтрокаСписка.Данные[ИмяКолонки]);
			Представление = КэшПредставлений.Получить(ТипЗначения);
			
			Если Представление = Неопределено Тогда
				ОписаниеОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
				Представление = ОписаниеОбъектаМетаданных.Синоним;
				КэшПредставлений.Вставить(ТипЗначения, Представление);
			КонецЕсли;
			
			СтрокаСписка.Оформление[ИмяКолонки].УстановитьЗначениеПараметра("Текст", Представление);
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомандыДействийСОшибкой(ДанныеОшибки = Неопределено)
	
	Если ДанныеОшибки <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеОшибки.СсылкаНаОбъект) Тогда
			Элементы.СписокОшибокОткрытьОбъект.Доступность = Истина;
			Элементы.СписокОшибокОткрытьОбъектКонтекст.Доступность = Истина;
		Иначе
			Элементы.СписокОшибокОткрытьОбъект.Доступность = Ложь;
			Элементы.СписокОшибокОткрытьОбъектКонтекст.Доступность = Ложь;
		КонецЕсли;
		Если ДанныеОшибки.ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.СопоставлениеОбъектов Тогда
			Элементы.СписокОшибокСопоставить.Доступность = Истина;
			Элементы.СписокОшибокСопоставитьКонтекст.Доступность = Истина;
		Иначе
			Элементы.СписокОшибокСопоставить.Доступность = Ложь;
			Элементы.СписокОшибокСопоставитьКонтекст.Доступность = Ложь;
		КонецЕсли;
		Элементы.СписокОшибокРассмотрена.Доступность   = Истина;
	Иначе
		Элементы.СписокОшибокОткрытьОбъект.Доступность = Ложь;
		Элементы.СписокОшибокСопоставить.Доступность   = Ложь;
		Элементы.СписокОшибокРассмотрена.Доступность   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СсылкаСуществует(СсылкаНаОбъект)
	
	Возврат ЗначениеЗаполнено(СсылкаНаОбъект) И ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеСчетчиковКоличестваОшибок

&НаКлиенте
Процедура НачатьОбновлениеСчетчиковКоличестваОшибок(ГруппировкаЗначение = Неопределено)
	
	Если ДлительныеОперацииСтруктура.ОбновлениеСчетчиков <> Неопределено Тогда
		ПрерватьДлительнуюОперацию(ДлительныеОперацииСтруктура.ОбновлениеСчетчиков.ИдентификаторЗадания);
	КонецЕсли;
	
	Для каждого Строка Из ГруппировкаОшибок Цикл
		Если ГруппировкаЗначение = Неопределено
			ИЛИ Строка.ГруппировкаЗначение = ГруппировкаЗначение Тогда
			Строка.ПроизводитсяОбновление = Истина;
			Строка.КоличествоОшибок = 0;
		КонецЕсли;
	КонецЦикла;
	
	НачатьОбновлениеСчетчиковКоличестваОшибокНаСервере(ГруппировкаЗначение);
	
	Если ДлительныеОперацииСтруктура.ОбновлениеСчетчиков <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбновлениеСчетчиковКоличестваОшибокЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительныеОперацииСтруктура.ОбновлениеСчетчиков,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеСчетчиковКоличестваОшибокНаСервере(ГруппировкаЗначение)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление счетчиков количества ошибок.';
															|en = 'Update error counters.'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИсточникДанных",      ИсточникДанных);
	ПараметрыПроцедуры.Вставить("ГруппировкаПоле",     ПараметрыСпискаОшибок(ЭтотОбъект).ПолеГруппировки);
	ПараметрыПроцедуры.Вставить("ГруппировкаЗначение", ГруппировкаЗначение);
	
	ДлительныеОперацииСтруктура.ОбновлениеСчетчиков = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаПроизводственнойНСИ.КоличествоОшибокПоГруппировкамВФоне",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСчетчиковКоличестваОшибокЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ДлительныеОперацииСтруктура.ОбновлениеСчетчиков = Неопределено;
	
	Если ДлительнаяОперация <> Неопределено И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ОбработатьРезультатОбновлениеСчетчиковКоличестваОшибок(ДлительнаяОперация); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатОбновлениеСчетчиковКоличестваОшибок(ДлительнаяОперация)
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	Для каждого Строка Из ГруппировкаОшибок Цикл
		ГруппировкаЗначение = ?(Строка.ГруппировкаЗначение = Неопределено,
			Перечисления.ЗагрузкаНСИТипыПроблем.Прочее,
			Строка.ГруппировкаЗначение);
		Количество = Результат.Получить(ГруппировкаЗначение);
		Если Количество <> Неопределено Тогда
			Строка.КоличествоОшибок = Количество;
		КонецЕсли;
		Строка.ПроизводитсяОбновление = Ложь;
	КонецЦикла;
	
	ОбновитьИнформациюОСостоянии();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСпискаОшибок(Форма, ТекущиеДанные = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ПолеГруппировки");
	Результат.Вставить("ПредставлениеОбъекта");
	
	ТекущийРежимГруппировкиОшибок = ТекущийРежимГруппировкиОшибок(Форма);
	
	Если ТекущийРежимГруппировкиОшибок = РежимГруппировкиПоТипамДанных() Тогда
		Результат.ПолеГруппировки = "ОбъектМетаданных";
		Если ТекущиеДанные <> Неопределено Тогда
			Результат.ПредставлениеОбъекта = ?(ПустаяСтрока(ТекущиеДанные.ПредставлениеОбъекта),
				ТекущиеДанные.ГруппировкаПредставление,
				ТекущиеДанные.ПредставлениеОбъекта);
		КонецЕсли;
	ИначеЕсли ТекущийРежимГруппировкиОшибок = РежимГруппировкиПоТипамПроблем() Тогда
		Результат.ПолеГруппировки = "ТипПроблемы";
	ИначеЕсли ТекущийРежимГруппировкиОшибок = РежимГруппировкиПоФайлам() Тогда
		Результат.ПолеГруппировки = "КлючРаздела";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ПредставлениеОбъекта) Тогда
		Результат.ПредставлениеОбъекта = НСтр("ru = 'Объект';
												|en = 'Object'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыполнитьЗагрузкуДанных

&НаКлиенте
Процедура НачатьЗагрузкуДанных()
	
	Если ДлительныеОперацииСтруктура.ЗагрузкаДанных <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗагрузкуДанныхНаСервере();
	
	Если ДлительныеОперацииСтруктура.ЗагрузкаДанных <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗагрузкаДанныхЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ТекстСообщения = СтрШаблон(НСтр("ru = 'Выполняется загрузка данных из источника ""%1""';
															|en = 'Importing data from the ""%1"" source'"), ИсточникДанных);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительныеОперацииСтруктура.ЗагрузкаДанных,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьЗагрузкуДанныхНаСервере()
	
	ИмяДействия = Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗагрузитьДанные();
	
	Если Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеУжеВыполняется(ИсточникДанных, ИмяДействия) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Загрузка данных из источника ""%1"" уже выполняется';
															|en = 'Data from the ""%1"" source is already being imported'"), ИсточникДанных));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.КлючФоновогоЗадания         = Обработки.ЗагрузкаПроизводственнойНСИ.КлючВыполненияДействияВФоне(ИсточникДанных, ИмяДействия);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Обработки.ЗагрузкаПроизводственнойНСИ.НаименованиеДействияВФоне(ИмяДействия);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяДействия",    ИмяДействия);
	ПараметрыПроцедуры.Вставить("ИсточникДанных", ИсточникДанных);
	
	ДлительныеОперацииСтруктура.ЗагрузкаДанных = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаПроизводственнойНСИ.ВыполнитьДействиеВФоне",
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ДлительныеОперацииСтруктура.ЗагрузкаДанных = Неопределено;
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ТекстЗаголовок = НСтр("ru = 'Загрузка данных';
								|en = 'Data import'");
		ТекстСообщения = "";
		Картинка       = Неопределено;
		
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Загрузка данных завершилась неудачно.
					|%1
					|Подробности см. в рабочем месте ""Мониторинг состояния загрузки"" или в журнале регистрации.';
					|en = 'Data is not imported.
					|%1
					|For more information, see the ""Import state monitoring"" workspace or the event log.'"),
				ДлительнаяОперация.КраткоеПредставлениеОшибки);
			Картинка = БиблиотекаКартинок.Ошибка32;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ПоказатьОповещениеПользователя(ТекстЗаголовок,,ТекстСообщения, Картинка);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить(
		УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияЗагрузкаЗавершение(),,
		ИсточникДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
