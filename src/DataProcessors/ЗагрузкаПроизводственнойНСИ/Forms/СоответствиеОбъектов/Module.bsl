
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
		ИсточникДанных = Параметры.ИсточникДанных;
	Иначе
		Сведения = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.СведенияОРежимеРаботыСИсточниками();
		ИсточникДанных = Сведения.ИсточникДанных;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ИсточникДанныхСохраненный = Настройки.Получить("ИсточникДанных");
	
	Если ИсточникДанныхСохраненный <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ИсточникДанных)
				И ОбщегоНазначения.СсылкаСуществует(ИсточникДанныхСохраненный) Тогда
			ИсточникДанных = ИсточникДанныхСохраненный;
			ЗаполнитьРеквизитыПоИсточнику();
			НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИсточникДанных");
		КонецЕсли;
		Настройки.Удалить("ИсточникДанных");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ИсточникДанных.Пустая() Тогда
		
		НачатьОбновлениеСчетчиковОбъектовКСопоставлению();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ИсточникДанныхПриИзмененииНаСервере();
	
	НачатьОбновлениеСчетчиковОбъектовКСопоставлению();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТипыДанных

&НаКлиенте
Процедура ТипыДанныхПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ТипыДанныхПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоответствиеОбъектов

&НаКлиенте
Процедура СоответствиеОбъектовПриИзменении(Элемент)
	
	НачатьОбновлениеСчетчиковОбъектовКСопоставлению(Элементы.ТипыДанных.ТекущиеДанные.ОбъектМетаданных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьИдентификаторы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьИдентификаторыЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение,
		НСтр("ru = 'Будет произведено заполнение идентификаторов объектов из файлов данных для последующего сопоставления.
			|Операция может занять длительное время. Продолжить?';
			|en = 'Object IDs will be filled from the data files and mapped afterwards.
			|The operation might take some time. Continue?'"),
		РежимДиалогаВопрос.ДаНет)
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыДанныхОбновитьСписок(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыДанныхПоказать(Команда)
	
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.ТипыДанныхГруппаПоказать, Команда.Имя);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТипыДанныхОтбор");
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОбъектовПоказать(Команда)
	
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.СоответствиеОбъектовГруппаПоказать, Команда.Имя);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СоответствиеОбъектовОтбор");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСопоставленныеОбъектыИзФайла(Команда)
	
	Возврат; // Пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МониторингСостоянияЗагрузки(Команда)
	
	ОткрытьФорму("Обработка.ЗагрузкаПроизводственнойНСИ.Форма.МониторингСостоянияЗагрузки",
		Новый Структура("ИсточникДанных", ИсточникДанных),,
		ИсточникДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТипыДанныхКоличествоОбъектов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипыДанных.ПроизводитсяОбновление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "обновление...");
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйШрифтЗагрузкаНСИ);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
		Элементы.ИсточникДанных.ТолькоПросмотр = Истина;
		Заголовок = СтрШаблон(НСтр("ru = 'Соответствие объектов источника ""%1""';
									|en = 'Map objects of the ""%1"" source'"), ИсточникДанных);
	КонецЕсли;
	
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.ТипыДанныхГруппаПоказать,           Команды.ТипыДанныхВсе.Имя);
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.СоответствиеОбъектовГруппаПоказать, Команды.СоответствиеОбъектовВсе.Имя);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ИсточникДанных")
		ИЛИ Инициализация Тогда
		
		Элементы.ТипыДанныхЗаполнитьИдентификаторы.Доступность = НЕ Форма.ИсточникДанных.Пустая();
		Элементы.ТипыДанныхТипыДанныхОбновитьСписок.Доступность = НЕ Форма.ИсточникДанных.Пустая();
		Элементы.ТипыДанныхГруппаПоказать.Доступность = НЕ Форма.ИсточникДанных.Пустая();
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТипыДанныхОтбор")
		ИЛИ Инициализация Тогда
			
		Для каждого Элемент Из Форма.Элементы.ТипыДанныхГруппаПоказать.ПодчиненныеЭлементы Цикл
			Если Элемент.Пометка Тогда
				Если Элемент.ИмяКоманды = "ТипыДанныхВсе" Тогда
					ОтборСтрок = Новый ФиксированнаяСтруктура;
				Иначе
					ОтборСтрок = Новый ФиксированнаяСтруктура("Загружаемый", Элемент.ИмяКоманды = "ТипыДанныхЗагружаемые");
				КонецЕсли;
				Элементы.ТипыДанных.ОтборСтрок = ОтборСтрок;
				Элементы.ТипыДанныхГруппаПоказать.Заголовок = СтрШаблон(НСтр("ru = 'Показать: %1';
																			|en = 'Show: %1'"), Элемент.Заголовок);
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СоответствиеОбъектовОтбор")
		ИЛИ Инициализация Тогда
		
		Для каждого Элемент Из Элементы.СоответствиеОбъектовГруппаПоказать.ПодчиненныеЭлементы Цикл
			Если Элемент.Пометка Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					Форма.СоответствиеОбъектов,
					"Сопоставлено",
					(Элемент.ИмяКоманды = "СоответствиеОбъектовСопоставленные"),
					ВидСравненияКомпоновкиДанных.Равно,,
					НЕ (Элемент.ИмяКоманды = "СоответствиеОбъектовВсе"));
				Элементы.СоответствиеОбъектовГруппаПоказать.Заголовок = СтрШаблон(НСтр("ru = 'Показать: %1';
																						|en = 'Show: %1'"), Элемент.Заголовок);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ТипыДанных")
		ИЛИ Инициализация Тогда
		
		ТекущаяСтрока = Элементы.ТипыДанных.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.ТипыДанных.НайтиПоИдентификатору(ТекущаяСтрока);
			Для каждого ПолеОтбора Из СтрРазделить("ИсточникДанных,ОбъектМетаданных",",") Цикл
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					Форма.СоответствиеОбъектов,
					ПолеОтбора,
					?(ТекущиеДанные.Свойство(ПолеОтбора), ТекущиеДанные[ПолеОтбора], Форма[ПолеОтбора]),
					ВидСравненияКомпоновкиДанных.Равно,,
					Истина);
			КонецЦикла;
			ПараметрыРегистра = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыРегистраСоответствия(ТекущиеДанные.ОбъектМетаданных);
			Для каждого Элемент Из Элементы.СоответствиеОбъектовГруппаОбъект.ПодчиненныеЭлементы Цикл
				Элемент.Видимость = ПараметрыРегистра.ПоляОбъектаДоступные.Найти(СтрРазделить(Элемент.Имя,"_")[1]) <> Неопределено;
			КонецЦикла;
			Элементы.СоответствиеОбъектов_СсылкаНаОбъект.Заголовок = ?(
				ПустаяСтрока(ТекущиеДанные.ПредставлениеОбъекта), ТекущиеДанные.Представление, ТекущиеДанные.ПредставлениеОбъекта);
			Элементы.ГруппаСтраницыОбъекты.ТекущаяСтраница = Элементы.ГруппаСтраницаСопоставленныеОбъекты;
		Иначе
			Элементы.ГруппаСтраницыОбъекты.ТекущаяСтраница = Элементы.ГруппаСтраницаПустая;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ДлительныеОперацииСтруктура = Новый Структура("ЗаполнениеИдентификаторов,ОбновлениеСчетчиков");
	
	ЗаполнитьРеквизитыПоИсточнику();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИсточнику()
	
	ЗаполнитьТипыДанных();
	
КонецПроцедуры

&НаСервере
Процедура ИсточникДанныхПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыПоИсточнику();
	
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.ТипыДанныхГруппаПоказать,           Команды.ТипыДанныхВсе.Имя);
	УстановитьПометкуЭлементаВГруппеКоманд(Элементы.СоответствиеОбъектовГруппаПоказать, Команды.СоответствиеОбъектовВсе.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыДанных()
	
	ТипыДанных.Очистить();
	
	Если ИсточникДанных.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИсточникаДанных = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанных(ИсточникДанных);
	
	ОписаниеЗагружаемыхДанных = УправлениеДаннымиОбИзделиях.ОписаниеЗагружаемыхДанных(НастройкиИсточникаДанных);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИсключитьСпособыУстановкиЗначения", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.УстановитьВЗначение));
	
	НастройкаРеквизитовИсточника = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиРеквизитовИсточника(
		ИсточникДанных, ОписаниеЗагружаемыхДанных, Отбор);
	
	Таблица = ТипыДанных.Выгрузить();
	Для каждого СтрокаРеквизит Из НастройкаРеквизитовИсточника Цикл
		Для каждого СтрокаОписаниеТипа Из СтрокаРеквизит.ОписаниеРеквизита.ОписаниеСсылочныхТипов Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ОбъектМетаданных     = СтрокаОписаниеТипа.ОбъектМетаданных;
			НоваяСтрока.Представление        = СтрокаОписаниеТипа.Синоним;
			НоваяСтрока.ПредставлениеОбъекта = СтрокаОписаниеТипа.ПредставлениеОбъекта;
			НоваяСтрока.ПолноеИмяТипа        = СтрокаОписаниеТипа.ПолноеИмя;
			НоваяСтрока.Загружаемый          = ОписаниеЗагружаемыхДанных.Свойство(СтрокаОписаниеТипа.Имя);
		КонецЦикла;
	КонецЦикла;
	
	Таблица.Свернуть("ОбъектМетаданных,Представление,ПредставлениеОбъекта,ПолноеИмяТипа,Загружаемый");
	Таблица.Сортировать("Представление");
	
	ТипыДанных.Загрузить(Таблица);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТипыДанныхПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ТипыДанных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДанныхПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТипыДанныхПриАктивизацииСтрокиНаСервере()
	
	ТекущиеДанные = ТипыДанных.НайтиПоИдентификатору(Элементы.ТипыДанных.ТекущаяСтрока);
	
	ТекущийОбъектМетаданных = ТекущиеДанные.ОбъектМетаданных;
	
	УстановитьСвойстваСпискаСоответствиеОбъектов(ТекущиеДанные);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТипыДанных");
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьСвойстваСпискаСоответствиеОбъектов(ТекущиеДанные)
	
	ПараметрыРегистра = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыРегистраСоответствия(ТекущиеДанные.ОбъектМетаданных);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ИсточникДанных                 КАК ИсточникДанных,
	|	Таблица.Идентификатор                  КАК Идентификатор,
	|	Таблица.ПредставлениеВнешнейСистемы    КАК ПредставлениеВнешнейСистемы,
	|	Таблица.ДатаЗаписи                     КАК ДатаЗаписи,
	|	Таблица.Сопоставлено                   КАК Сопоставлено,
	|	&ПоляОбъектаПереопределение
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|
	|";
	
	ПоляОбъектаПереопределение = Новый Массив;
	Для каждого КлючИЗначение Из ПараметрыРегистра.ПоляОбъектаПереопределение Цикл
		ТекстПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), КлючИЗначение.Значение, КлючИЗначение.Ключ);
		ТекстПоля = СтрЗаменить(ТекстПоля, "&ИмяТаблицы", "Таблица");
		ТекстПоля = СтрЗаменить(ТекстПоля, "&ИмяТипа", ТекущиеДанные.ПолноеИмяТипа);
		ПоляОбъектаПереопределение.Добавить(СтрШаблон("%1 КАК %2", ТекстПоля, КлючИЗначение.Ключ));
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ПараметрыРегистра.ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляОбъектаПереопределение", СтрСоединить(ПоляОбъектаПереопределение,","));
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица = ПараметрыРегистра.ИмяТаблицы;
	СвойстваСписка.ТекстЗапроса    = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СоответствиеОбъектов, СвойстваСписка);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуЭлементаВГруппеКоманд(ГруппаКоманд, ИмяКоманды)
	
	Для каждого Элемент Из ГруппаКоманд.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.ИмяКоманды = ИмяКоманды);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПозициюВСпискеТиповДанных()
	
	Если ТекущийОбъектМетаданных <> Неопределено Тогда
		НайденныеСтроки = ТипыДанных.НайтиСтроки(Новый Структура("ОбъектМетаданных", ТекущийОбъектМетаданных));
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Элементы.ТипыДанных.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные()
	
	ЗаполнитьТипыДанных();
	
	ВосстановитьПозициюВСпискеТиповДанных();
	
	НачатьОбновлениеСчетчиковОбъектовКСопоставлению();
	
	Элементы.СоответствиеОбъектов.Обновить();
	
КонецПроцедуры

#Область ЗагрузкаИдентификаторов

&НаКлиенте
Процедура ЗаполнитьИдентификаторыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НачатьЗаполнениеИдентификаторовИзФайловДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеИдентификаторовИзФайловДанных()
	
	Если ДлительныеОперацииСтруктура.ЗаполнениеИдентификаторов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗаполнениеИдентификаторовИзФайловДанныхНаСервере();
	
	Если ДлительныеОперацииСтруктура.ЗаполнениеИдентификаторов <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнениеИдентификаторовИзФайловДанныхЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Производится заполнение идентификаторов из файлов данных.';
												|en = 'Filling IDs from the data files.'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительныеОперацииСтруктура.ЗаполнениеИдентификаторов,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьЗаполнениеИдентификаторовИзФайловДанныхНаСервере()
	
	ИмяДействия = Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗаполнитьИдентификаторы();
	
	Если Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеУжеВыполняется(ИсточникДанных, ИмяДействия) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Заполнение идентификаторов по источнику ""%1"" уже выполняется';
															|en = 'IDs by the ""%1"" source are already being filled'"), ИсточникДанных));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.КлючФоновогоЗадания         = Обработки.ЗагрузкаПроизводственнойНСИ.КлючВыполненияДействияВФоне(ИсточникДанных, ИмяДействия);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Обработки.ЗагрузкаПроизводственнойНСИ.НаименованиеДействияВФоне(ИмяДействия);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяДействия",    ИмяДействия);
	ПараметрыПроцедуры.Вставить("ИсточникДанных", ИсточникДанных);
	
	ДлительныеОперацииСтруктура.ЗаполнениеИдентификаторов = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаПроизводственнойНСИ.ВыполнитьДействиеВФоне",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеИдентификаторовИзФайловДанныхЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ДлительныеОперацииСтруктура.ЗаполнениеИдентификаторов = Неопределено;
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ТекстЗаголовок = НСтр("ru = 'Заполнение идентификаторов';
								|en = 'Fill IDs'");
		ТекстСообщения = "";
		Картинка       = Неопределено;
		
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			Результат = ОбработатьРезультатЗаполненияИдентификаторов(ДлительнаяОперация);
			
			КоличествоОшибок         = Результат.КоличествоОшибок;
			ИдентификаторовЗаполнено = Результат.СтруктураСчетчиков.ИдентификаторовЗаполнено;
			
			Если КоличествоОшибок > 0 Тогда
				ТекстСообщения = НСтр("ru = 'При заполнении идентификаторов возникли ошибки.
					|Подробности см. в рабочем месте ""Мониторинг состояния загрузки"" или в журнале регистрации.';
					|en = 'Errors occurred when filling IDs.
					|For more information, see the ""Import state monitoring"" workspace or the event log.'");
				Картинка = БиблиотекаКартинок.Ошибка32;
			ИначеЕсли ИдентификаторовЗаполнено > 0 Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Заполнение идентификаторов успешно завершено.
					|Новых идентификаторов для сопоставления: %1';
					|en = 'IDs are filled.
					|New IDs to map: %1'"), ИдентификаторовЗаполнено);
				Картинка = БиблиотекаКартинок.Успешно32;
			Иначе
				ТекстСообщения = НСтр("ru = 'Заполнение идентификаторов завершено.';
										|en = 'IDs are filled.'");
				Картинка = БиблиотекаКартинок.Информация32;
			КонецЕсли;
		
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось заполнить идентификаторы.
				|Подробности см. в рабочем месте ""Мониторинг состояния загрузки"" или в журнале регистрации.';
				|en = 'Cannot fill IDs.
				|For more information, see the ""Import state monitoring"" workspace or the event log.'");
			Картинка = БиблиотекаКартинок.Ошибка32;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ПоказатьОповещениеПользователя(ТекстЗаголовок,,ТекстСообщения, Картинка);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗаполненияИдентификаторов(ДлительнаяОперация)
	
	Возврат ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеСчетчиковОбъектовКСопоставлению

&НаКлиенте
Процедура НачатьОбновлениеСчетчиковОбъектовКСопоставлению(ОбъектыМетаданных = Неопределено)
	
	Если ДлительныеОперацииСтруктура.ОбновлениеСчетчиков <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектовМетаданных = Новый Массив;

	Для каждого Строка Из ТипыДанных Цикл
		Если ОбъектыМетаданных = Неопределено 
			ИЛИ ОбъектыМетаданных = Строка.ОбъектМетаданных
			ИЛИ (ТипЗнч(ОбъектыМетаданных) = Тип("Массив") И ОбъектыМетаданных.Найти(Строка.ОбъектМетаданных) <> Неопределено) Тогда
			Строка.ПроизводитсяОбновление = Истина;
			Строка.КоличествоСопоставить = 0;
			МассивОбъектовМетаданных.Добавить(Строка.ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОбъектовМетаданных.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОбновлениеСчетчиковОбъектовКСопоставлениюНаСервере(МассивОбъектовМетаданных);
	
	Если ДлительныеОперацииСтруктура.ОбновлениеСчетчиков <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбновлениеСчетчиковОбъектовКСопоставлениюЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительныеОперацииСтруктура.ОбновлениеСчетчиков,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеСчетчиковОбъектовКСопоставлениюНаСервере(ОбъектыМетаданных)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление счетчиков сопоставленных объектов.';
															|en = 'Update the counters of mapped objects.'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИсточникДанных", ИсточникДанных);
	ПараметрыПроцедуры.Вставить("ОбъектыМетаданных", ОбъектыМетаданных);
	
	ДлительныеОперацииСтруктура.ОбновлениеСчетчиков = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаПроизводственнойНСИ.ОбъектыМетаданныхКСопоставлениюВФоне",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСчетчиковОбъектовКСопоставлениюЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ДлительныеОперацииСтруктура.ОбновлениеСчетчиков = Неопределено;
	
	Если ДлительнаяОперация <> Неопределено И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ОбработатьРезультатОбновленияСчетчиковОбъектовКСопоставлению(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатОбновленияСчетчиковОбъектовКСопоставлению(ДлительнаяОперация)
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	Для каждого Строка Из ТипыДанных Цикл
		Количество = Результат.Получить(Строка.ОбъектМетаданных);
		Если Количество <> Неопределено Тогда
			Строка.КоличествоСопоставить = Количество;
		КонецЕсли;
		Строка.ПроизводитсяОбновление = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
