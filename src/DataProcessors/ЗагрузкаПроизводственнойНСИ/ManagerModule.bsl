
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ДлительныеОперации

Процедура ВыполнитьДействиеВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = Создать().ВыполнитьДействие(Параметры.ИмяДействия, Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбъектыМетаданныхКСопоставлениюВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = ОбъектыМетаданныхКСопоставлению(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура КоличествоОшибокПоГруппировкамВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = КоличествоОшибокПоГруппировкам(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Действия

// Действие "Заполнить идентификаторы".
// 
// Возвращаемое значение:
//  Строка
Функция ДействиеЗаполнитьИдентификаторы() Экспорт
	
	Возврат НСтр("ru = 'Заполнить идентификаторы';
				|en = 'Fill IDs'");
	
КонецФункции

// Действие "Загрузить данные".
// 
// Возвращаемое значение:
//  Строка
Функция ДействиеЗагрузитьДанные() Экспорт
	
	Возврат НСтр("ru = 'Загрузить данные';
				|en = 'Import data'");
	
КонецФункции

// Ключ для регламентного или фонового задания
// 
// Параметры:
//  ИсточникДанных - СправочникСсылка.ИсточникиЗагрузкиПроизводственнойНСИ
//  ИмяДействия - Строка
// 
// Возвращаемое значение:
//  Строка
Функция КлючВыполненияДействияВФоне(ИсточникДанных, ИмяДействия) Экспорт
	
	Возврат СтрШаблон("%1: %2", ИмяДействия, ИсточникДанных.УникальныйИдентификатор());
	
КонецФункции

// Наименование фонового задания при выполнении действия в фоне.
// 
// Параметры:
//  ИмяДействия - Строка
// 
// Возвращаемое значение:
//  Строка
Функция НаименованиеДействияВФоне(ИмяДействия) Экспорт
	
	Возврат СтрШаблон("%1: %2", ИмяСобытияЖурналаРегистрации(), ИмяДействия);
	
КонецФУнкции

// Определяет, выполняется ли уже указанное действие по данному источнику
// 
// Параметры:
//  ИсточникДанных - СправочникСсылка.ИсточникиЗагрузкиПроизводственнойНСИ
//  ИмяДействия - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеУжеВыполняется(ИсточникДанных, ИмяДействия) Экспорт
	
	КлючЗадания = КлючВыполненияДействияВФоне(ИсточникДанных, ИмяДействия);
	
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();
	Если НЕ ПривилегированныйРежимУстановлен Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно));
	
	Если НЕ ПривилегированныйРежимУстановлен Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		ЗаписьЖурналаРегистрации(
			КлючСобытияЖурналаРегистрации(ИсточникДанных),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтрШаблон(НСтр("ru = 'Действие ""%1"" для источника ""%2"" уже выполняется.';
							|en = 'The ""%1"" action for the ""%2"" source is already being performed.'"), ИмяДействия, ИсточникДанных));
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ОбъектыМетаданныхКСопоставлению(Параметры)
	
	Результат = Новый Соответствие;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ОбъектМетаданных КАК ОбъектМетаданных,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСопоставить
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовДляЗагрузкиНСИ КАК Таблица
	|ГДЕ
	|	Таблица.ИсточникДанных = &ИсточникДанных
	|	И Таблица.ОбъектМетаданных В (&ОбъектыМетаданных)
	|	И НЕ Таблица.Сопоставлено
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ОбъектМетаданных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ОбъектМетаданных,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСопоставить
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыДляЗагрузкиНСИ КАК Таблица
	|ГДЕ
	|	Таблица.ИсточникДанных = &ИсточникДанных
	|	И &ЕстьНоменклатура
	|	И НЕ Таблица.Сопоставлено
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсточникДанных", Параметры.ИсточникДанных);
	Запрос.УстановитьПараметр("ОбъектыМетаданных", Параметры.ОбъектыМетаданных);
	Запрос.УстановитьПараметр("ЕстьНоменклатура", Параметры.ОбъектыМетаданных.Найти(Справочники.Номенклатура.ПустаяСсылка()) <> Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ОбъектМетаданных, Выборка.КоличествоСопоставить);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоОшибокПоГруппировкам(Параметры)
	
	Результат = Новый Соответствие;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ГруппировкаПоле КАК ГруппировкаЗначение,
	|	КОЛИЧЕСТВО(*)    КАК КоличествоОшибок
	|ИЗ
	|	РегистрСведений.ОшибкиЗагрузкиПроизводственнойНСИ КАК Таблица
	|ГДЕ
	|	Таблица.ИсточникДанных = &ИсточникДанных
	|	И НЕ Таблица.Рассмотрена
	|	И &Отбор
	|СГРУППИРОВАТЬ ПО
	|	&ГруппировкаПоле
	|
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникДанных", Параметры.ИсточникДанных);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппировкаПоле", СтрШаблон("Таблица.%1", Параметры.ГруппировкаПоле));
	Если Параметры.Свойство("ГруппировкаЗначение") И ЗначениеЗаполнено(Параметры.ГруппировкаЗначение) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", СтрШаблон("Таблица.%1 = &ГруппировкаЗначение", Параметры.ГруппировкаПоле));
		Запрос.УстановитьПараметр("ГруппировкаЗначение", Параметры.ГруппировкаЗначение);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ГруппировкаЗначение = ?(Выборка.ГруппировкаЗначение = Неопределено,
			Перечисления.ЗагрузкаНСИТипыПроблем.Прочее,
			Выборка.ГруппировкаЗначение);
		Результат.Вставить(ГруппировкаЗначение, Выборка.КоличествоОшибок);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Имя события журнала регистрации.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка производственной НСИ';
				|en = 'Import production master data'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Ключ события журнала регистрации.
// 
// Параметры:
//  ИсточникДанных - СправочникСсылка.ИсточникиЗагрузкиПроизводственнойНСИ
// 
// Возвращаемое значение:
//  Строка - Строка
Функция КлючСобытияЖурналаРегистрации(ИсточникДанных) Экспорт
	
	Возврат СтрШаблон("%1: %2", ИмяСобытияЖурналаРегистрации(), ИсточникДанных);
	
КонецФункции

// Представление даты события в интерфейсе.
// 
// Параметры:
//  ДатаСобытия - Дата
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДатыСобытияВИнтерфейсе(ДатаСобытия) Экспорт
	
	КоличествоДнейРазницы =  Цел((НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(ДатаСобытия)) / 86400);
	
	Если КоличествоДнейРазницы = 0 Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Сегодня, %1';
									|en = 'Today, %1'"), Формат(ДатаСобытия, "ДЛФ=T"));
		
	ИначеЕсли КоличествоДнейРазницы = 1 Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Вчера, %1';
									|en = 'Yesterday, %1'"), Формат(ДатаСобытия, "ДЛФ=T"));
		
	ИначеЕсли КоличествоДнейРазницы = 2 Тогда
		
		Результат = СтрШаблон(НСтр("ru = 'Позавчера, %1';
									|en = 'Day before yesterday, %1'"), Формат(ДатаСобытия, "ДЛФ=T"));
		
	Иначе
		
		Результат = Формат(ДатаСобытия, "ДЛФ=DD");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Установить оформление даты в списке.
// 
// Параметры:
//  Строки - Массив из КлючИЗначение
//  ИмяКолонки - Строка
// 
Процедура УстановитьОформлениеДатыВСписке(Строки, ИмяКолонки) Экспорт
	
	Для каждого КлючИЗначение Из Строки Цикл
		
		СтрокаСписка = КлючИЗначение.Значение;
		
		Если ЗначениеЗаполнено(СтрокаСписка.Данные[ИмяКолонки]) Тогда
			
			СтрокаСписка.Оформление[ИмяКолонки].УстановитьЗначениеПараметра(
				"Текст", ПредставлениеДатыСобытияВИнтерфейсе(СтрокаСписка.Данные[ИмяКолонки]));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
