
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ОписаниеЗагружаемыхДанных;

Перем Кэш; // Структура
Перем ТаблицаПротоколОшибок; // ТаблицаЗначений

Перем ТекущееДействие; // Строка
Перем ТекущийКлючРаздела; // Строка
Перем ТекущееИмяФайла; // Строка
Перем ТекущийИдентификатор; // Строка

Перем ИсточникДанных;
Перем ИсточникДанныхОбъект;
Перем НастройкиИсточникаДанных; // см. Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанныхКонструктор
Перем НастройкиРеквизитовИсточникаДанных; // ТаблицаЗначений
Перем НастройкиРеквизитов; // ТаблицаЗначений

Перем ПорцияДанных; // ДеревоЗначений
Перем РазмерПорцииДанных; // Число

Перем ТаблицаИдентификаторов; // ТаблицаЗначений
Перем ТаблицаПакетногоПоиска; // ТаблицаЗначений
Перем ТаблицаДанныхОписание; // Структура
Перем ТаблицаДанных; // ТаблицаЗначений
Перем ТаблицаДополнительныхСведений; // ТаблицаЗначений

Перем Ключ_Номенклатура;
Перем Ключ_Оборудование;
Перем Ключ_Спецификация;
Перем Ключ_Материалы;
Перем Ключ_Трудозатраты;
Перем Ключ_Операции;
Перем Ключ_Этапы;
Перем Ключ_ВидыРабот;
Перем Ключ_Замены;
Перем Ключ_Замены_Материалы;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполнить действие.
// 
// Параметры:
//  ИмяДействия - Строка - имя действия
//  Параметры - Структура:
//  * ИсточникДанных - СправочникСсылка.ИсточникиЗагрузкиПроизводственнойНСИ
// 
// Возвращаемое значение:
//  см. ЗавершитьВыполнениеДействия
Функция ВыполнитьДействие(ИмяДействия, Параметры) Экспорт
	
	ТекущееДействие = ИмяДействия;
	ИсточникДанных = Параметры.ИсточникДанных;
	
	ЗаписьЖурналаРегистрации(
		Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
		УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(НСтр("ru = 'Действие ""%1"" для источника ""%2"": Запуск';
						|en = 'The ""%1"" action for the ""%2"" source: Start'"), ИмяДействия, ИсточникДанных));
		
	ИнициализироватьПеременныеПередВыполнениемДействия(ИмяДействия);
		
	ВыполнитьДействиеПорциями();
	
	Результат = ЗавершитьВыполнениеДействия();
	
	ЗаписатьРезультатВыполненияВЖурнал(Результат);
		
	ЗаписьЖурналаРегистрации(
		Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
		УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(НСтр("ru = 'Действие ""%1"" для источника ""%2"": Завершение';
						|en = 'The ""%1"" action for the ""%2"" source: Complete'"), ИмяДействия, ИсточникДанных));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Действия

Процедура ИнициализироватьПеременныеПередВыполнениемДействия(ИмяДействия)
	
	ИсточникДанныхОбъект = ИсточникДанных.ПолучитьОбъект();
	
	НастройкиИсточникаДанных = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиИсточникаДанных(ИсточникДанных);
	ОписаниеЗагружаемыхДанных = УправлениеДаннымиОбИзделиях.ОписаниеЗагружаемыхДанных(НастройкиИсточникаДанных);
	
	НастройкиРеквизитовИсточникаДанных = Справочники.ИсточникиЗагрузкиПроизводственнойНСИ.НастройкиРеквизитовИсточника(ИсточникДанных, ОписаниеЗагружаемыхДанных); // ТаблицаЗначений
	НастройкиРеквизитовИсточникаДанных.Индексы.Добавить("КлючРаздела");
	НастройкиРеквизитовИсточникаДанных.Индексы.Добавить("КлючРаздела,СсылочныйТип");
	
	ТекущийКлючРаздела = "";
	ТекущееИмяФайла = "";
	
	ТаблицаПротоколОшибок.Очистить();
	ТаблицаПротоколОшибок.Индексы.Очистить();
	
	Ключ_Номенклатура     = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("Номенклатура");
	Ключ_Оборудование     = XMLСтрока(НастройкиИсточникаДанных.ВариантЗагрузкиОборудования);
	Ключ_Спецификация     = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("РесурсныеСпецификации");
	Ключ_Материалы        = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("РесурсныеСпецификации", "МатериалыИУслуги");
	Ключ_Трудозатраты     = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("РесурсныеСпецификации", "Трудозатраты");
	Ключ_Этапы            = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("ЭтапыПроизводства");
	Ключ_Операции         = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("ТехнологическиеОперации");
	Ключ_ВидыРабот        = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("ВидыРаботСотрудников");
	Ключ_Замены           = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("РазрешениеНаЗаменуМатериалов");
	Ключ_Замены_Материалы = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных("РазрешениеНаЗаменуМатериалов", "Материалы");
	
	ИнициализироватьКэш();
	
КонецПроцедуры

Процедура ВыполнитьДействиеПорциями()
	
	Если ИсточникДанныхОбъект.ПометкаУдаления Тогда
		ДобавитьЗаписьВПротоколОшибок(
			Перечисления.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных,
			СтрШаблон(НСтр("ru = 'Источник данных ""%1"" помечен на удаление.';
							|en = 'The %1 data source is marked for deletion.'"), ИсточникДанных));
		Возврат;
	КонецЕсли;
	
	Если НЕ ИсточникДанныхОбъект.ПроверитьЗаполнение() Тогда
		ДобавитьЗаписьВПротоколОшибок(
			Перечисления.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных,
			НСтр("ru = 'Не пройдена проверка настроек источника данных.';
				|en = 'Data source settings are not checked.'"));
		Возврат;
	КонецЕсли;
	
	КаталогРасположенияДанных = Новый Файл(НастройкиИсточникаДанных.РасположениеДанных);
	Если НЕ КаталогРасположенияДанных.Существует() Тогда
		ДобавитьЗаписьВПротоколОшибок(
			Перечисления.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных,
			НСтр("ru = 'Каталог с расположением файлов данных не найден.';
				|en = 'A directory with data file location is not found.'"));
		Возврат;
	КонецЕсли;
	
	ФорматОбмена = ИсточникДанныхОбъект.ФорматОбмена;
	Если ФорматОбмена = Перечисления.ЗагрузкаНСИФорматы.XML Тогда
		ЧтениеДанных = Новый ЧтениеXML();
	ИначеЕсли ФорматОбмена = Перечисления.ЗагрузкаНСИФорматы.JSON Тогда
		ЧтениеДанных = Новый ЧтениеJSON();
	Иначе
		ДобавитьЗаписьВПротоколОшибок(
			Перечисления.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных,
			СтрШаблон(НСтр("ru = 'Формат обмена, указанный в настройках источника, не поддерживается. %1';
							|en = 'The exchange format specified in the source settings is not supported. %1'")), ФорматОбмена);
		Возврат;
	КонецЕсли;
	
	Попытка
	
		Для каждого ТекущийКлючРаздела Из УправлениеДаннымиОбИзделияхКлиентСервер.ПорядокОбработкиРазделовИсточника(НастройкиИсточникаДанных) Цикл
			
			ПорцияДанных = Новый ДеревоЗначений;
			
			НайденныеФайлы = НайтиФайлы(
				КаталогРасположенияДанных.ПолноеИмя,
				СтрШаблон("%1*.%2", ТекущийКлючРаздела, НРег(ФорматОбмена)),
				Ложь);
			
			Для каждого НайденныйФайл Из НайденныеФайлы Цикл
				
				ОбработатьФайлДанных(ЧтениеДанных, НайденныйФайл);
				
			КонецЦикла;
			
		КонецЦикла;
	
	Исключение
		
		Если НЕ Кэш.ОшибкаЗанесенаВПротокол Тогда
			ДобавитьЗаписьВПротоколОшибокПоИсключению(
				Перечисления.ЗагрузкаНСИТипыПроблем.Прочее,
				НСтр("ru = 'Непредвиденная ошибка. Выполнение действия прервано.';
					|en = 'Unexpected error. The action is terminated.'"),
				ИнформацияОбОшибке());
			Кэш.ОшибкаЗанесенаВПротокол = Истина;
		КонецЕсли;
		
	КонецПопытки
	
КонецПроцедуры

// Результат выполнения действия обработки
// 
// Возвращаемое значение:
//  Структура:
// * КоличествоОшибок - Число
Функция ЗавершитьВыполнениеДействия() Экспорт
	
	ОбработатьЗначенияСчетчиков();
	
	ЗавершитьОбработкуОшибокЗагрузкиДанных();
	
	СтруктураСчетчиков = Кэш.СтруктураСчетчиков.Зафиксированные;
	
	КоличествоОшибок = 0;
	Для каждого КлючИЗначение Из СтруктураСчетчиков.ТипыПроблем Цикл
		КоличествоОшибок = КоличествоОшибок + КлючИЗначение.Значение;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаНачала",         Кэш.НачалоВыполнения);
	Результат.Вставить("ДатаОкончания",      ТекущаяДатаСеанса());
	Результат.Вставить("КоличествоОшибок",   КоличествоОшибок);
	
	Если ТекущееДействие = Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗагрузитьДанные() Тогда
		
		Если КоличествоОшибок = 0 Тогда
			Если Кэш.ОбработанныеФайлы.Количество() > 0 Тогда
				Состояние = Перечисления.ЗагрузкаНСИСостояния.ВыполненаУспешно;
			Иначе
				Состояние = Перечисления.ЗагрузкаНСИСостояния.НетДанных;
			КонецЕсли;
		Иначе
			Если СтруктураСчетчиков.ТипыПроблем.Получить(Перечисления.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных) <> Неопределено
				ИЛИ СтруктураСчетчиков.ТипыПроблем.Получить(Перечисления.ЗагрузкаНСИТипыПроблем.ФорматФайлаДанных) <> Неопределено Тогда
				Состояние = Перечисления.ЗагрузкаНСИСостояния.НеВыполнена;
			Иначе
				Состояние = Перечисления.ЗагрузкаНСИСостояния.ВыполненаСОшибками;
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить("Состояние", Состояние);
		ВыполнитьДействияСФайламиПослеЗагрузки(Состояние);
		
		ДополнительныеПараметры = Новый Структура(СохраняемыеДанныеКэша());
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Кэш);
		
		СтруктураДанных = ОбщегоНазначения.СкопироватьРекурсивно(Результат);
		СтруктураДанных.Вставить("ДополнительныеПараметры", Новый ХранилищеЗначения(ДополнительныеПараметры));
		
		РегистрыСведений.НастройкиВыполненияЗагрузкиНСИ.ЗаписатьНастройкиИсточника(ИсточникДанных, СтруктураДанных);
		
	КонецЕсли;
	
	Результат.Вставить("СтруктураСчетчиков", СтруктураСчетчиков);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИдентификаторы()
	
	ИнициализироватьТаблицыДляЗаполнениеИдентификаторов();
	
	ЗаполнитьТаблицуИдентификаторов(ПорцияДанных.Строки);
	
	ДобавитьИдентификаторыВРегистрСоответствия();
	
КонецПроцедуры

Процедура ЗагрузитьДанные()
	
	ИнициализироватьТаблицыДляЗагрузкиДанных();
	
	ЗаполнитьТаблицуДанных(ПорцияДанных.Строки);
	
	ВыполнитьПакетныйПоискСсылок();
	
	СоздатьОбновитьЗагружаемыеДанные();
	
КонецПроцедуры

Процедура ВыполнитьДействияСФайламиПослеЗагрузки(Состояние)
	
	Если Состояние = Перечисления.ЗагрузкаНСИСостояния.НеВыполнялась
			ИЛИ Кэш.ОбработанныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДействия = Неопределено;
	Если НЕ НастройкиИсточникаДанных.ДействияСФайлами.Свойство(XMLСтрока(Состояние), ОписаниеДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеДействия.Действие = Перечисления.ЗагрузкаНСИДействияСФайлами.Переместить
		И НРег(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОписаниеДействия.Каталог)) =
			НРег(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НастройкиИсточникаДанных.РасположениеДанных)) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВремяОкончанияОбработки = Формат(ТекущаяДатаСеанса(), "ДФ='yyy-MM-dd HHmmss';");
	
	Для каждого Файл Из Кэш.ОбработанныеФайлы Цикл
		
		ПолноеИмя = Файл.ПолноеИмя;
		
		Попытка
		
			Если ОписаниеДействия.Действие = Перечисления.ЗагрузкаНСИДействияСФайлами.Удалить Тогда
				
				УдалитьФайлы(ПолноеИмя);
				
				ЗаписьЖурналаРегистрации(Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
					УровеньЖурналаРегистрации.Информация,,,
					СтрШаблон(НСтр("ru = 'Удален файл: %1';
									|en = 'The file is deleted: %1'"), ПолноеИмя));
				
			ИначеЕсли ОписаниеДействия.Действие = Перечисления.ЗагрузкаНСИДействияСФайлами.Переместить Тогда
				
				ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОписаниеДействия.Каталог);
				СоздатьКаталог(ИмяКаталога);
				
				Найдены = НайтиФайлы(ИмяКаталога, Файл.Имя);
				Если Найдены.Количество() = 0 Тогда
					ПолноеИмяНовое = СтрШаблон("%1%2", ИмяКаталога, Файл.Имя);
				Иначе
					ПолноеИмяНовое = СтрШаблон("%1%2 %3", ИмяКаталога, ДатаВремяОкончанияОбработки, Файл.Имя);
				КонецЕсли;
				
				ПереместитьФайл(ПолноеИмя, ПолноеИмяНовое);
				
				ЗаписьЖурналаРегистрации(ОБработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
					УровеньЖурналаРегистрации.Информация,,,
					СтрШаблон(НСтр("ru = 'Перемещен файл: %1.%2Новое расположение: %3';
									|en = 'The file is moved: %1.%2New location: %3'"), ПолноеИмя, Символы.ПС, ПолноеИмяНовое));
				
			КонецЕсли;
		
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения действия с файлом после загрузки.
										|Действие: %1
										|Имя файла: %2';
										|en = 'An error occurred when performing an action with the file after import.
										|Action: %1
										|File name: %2'"),
								ОписаниеДействия.Действие, ПолноеИмя);
			
			ДобавитьЗаписьВПротоколОшибокПоИсключению(
				Перечисления.ЗагрузкаНСИТипыПроблем.Прочее,
				ТекстОшибки,
				ИнформацияОбОшибке());
			ЗаписатьПротоколОшибок();
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанных

Процедура ОбработатьФайлДанных(ЧтениеДанных, ТекущийФайл)
	
	Попытка
		
		ТекущееИмяФайла = ТекущийФайл.ПолноеИмя;
	
		ЧтениеДанных.ОткрытьФайл(ТекущееИмяФайла);
		ЧтениеДанных.Прочитать();
		
		Пока ПрочитатьПорциюДанных(ЧтениеДанных) Цикл
			
			Если ТекущееДействие = Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗагрузитьДанные() Тогда
				ЗагрузитьДанные();
			ИначеЕсли ТекущееДействие = Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗаполнитьИдентификаторы() Тогда
				ЗаполнитьИдентификаторы();
			КонецЕсли;
			
			ПорцияДанных.Строки.Очистить();
			
		КонецЦикла;
		
		ЧтениеДанных.Закрыть();
		
		ОбработанныеФайлы = Кэш.ОбработанныеФайлы; // Массив
		ОбработанныеФайлы.Добавить(ТекущийФайл);
	
	Исключение
		
		Если НЕ Кэш.ОшибкаЗанесенаВПротокол Тогда
			ДобавитьЗаписьВПротоколОшибокПоИсключению(
				Перечисления.ЗагрузкаНСИТипыПроблем.ФорматФайлаДанных,
				НСтр("ru = 'Непредвиденная ошибка. Обработка файла данных прервана.';
					|en = 'Unexpected error. Data file processing is terminated.'"),
				ИнформацияОбОшибке());
			Кэш.ОшибкаЗанесенаВПротокол = Истина;
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПрочитатьПорциюДанных(ЧтениеДанных)
	
	Если ИсточникДанныхОбъект.ФорматОбмена = Перечисления.ЗагрузкаНСИФорматы.XML Тогда
		Возврат ПрочитатьПорциюДанныхXML(ЧтениеДанных, ПорцияДанных, РазмерПорцииДанных);
	ИначеЕсли ИсточникДанныхОбъект.ФорматОбмена = Перечисления.ЗагрузкаНСИФорматы.JSON Тогда
		Возврат ПрочитатьПорциюДанныхJSON(ЧтениеДанных, ПорцияДанных.Строки, РазмерПорцииДанных);
	КонецЕсли;
		
КонецФункции

Функция ПрочитатьПорциюДанныхXML(ЧтениеXML, СтрокаДерева, РазмерПорции = 0, Знач ИмяТекущегоЭлемента = "")
	
	СтрокиДерева = СтрокаДерева.Строки; // КоллекцияСтрокДереваЗначений
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			НоваяСтрокаДерева = СтрокиДерева.Добавить();
			
			Если НоваяСтрокаДерева.Родитель <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, НоваяСтрокаДерева.Родитель);
			КонецЕсли;
			
			ИмяТекущегоЭлемента = ЧтениеXML.Имя;
			
			УстановитьЗначениеРеквизитаВСтроке(ПорцияДанных, НоваяСтрокаДерева, ИмяТекущегоЭлемента, ЧтениеXML.Значение);
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				УстановитьЗначениеРеквизитаВСтроке(ПорцияДанных, НоваяСтрокаДерева, ЧтениеXML.Имя, ЧтениеXML.Значение);
			КонецЦикла;
			
			ПрочитатьПорциюДанныхXML(ЧтениеXML, НоваяСтрокаДерева, 0, ИмяТекущегоЭлемента);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			УстановитьЗначениеРеквизитаВСтроке(ПорцияДанных, СтрокаДерева, ИмяТекущегоЭлемента, ЧтениеXML.Значение);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ИмяТекущегоЭлемента = "";
			Прервать;
			
		КонецЕсли;
		
		Если РазмерПорции > 0 И СтрокиДерева.Количество() >= РазмерПорции Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат (СтрокиДерева.Количество() > 0);
	
КонецФункции

Функция ПрочитатьПорциюДанныхJSON(ЧтениеJSON, СтрокиДерева, РазмерПорции = 0)
	
	СтрокаДерева = Неопределено;
	
	ИмяСвойства = Неопределено;
	ЗначениеСвойства = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		ТипУзлаJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если ТипУзлаJSON = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Если РазмерПорции > 0 И СтрокиДерева.Количество() >= РазмерПорции Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ТипУзлаJSON = ТипЗначенияJSON.КонецМассива Тогда
			
			Прервать;
			
		ИначеЕсли ТипУзлаJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Продолжить;
			
		ИначеЕсли ТипУзлаJSON = ТипЗначенияJSON.НачалоОбъекта Тогда
			
			СтрокаДерева = СтрокиДерева.Добавить();
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Родитель);
			КонецЕсли;
			Продолжить;
			
		ИначеЕсли ТипУзлаJSON = ТипЗначенияJSON.НачалоМассива Тогда
			
			Если СтрокаДерева <> Неопределено Тогда
				ПрочитатьПорциюДанныхJSON(ЧтениеJSON, СтрокаДерева.Строки);
			КонецЕсли;
			Продолжить;
			
		Иначе
			
			ЗначениеСвойства = ЧтениеJSON.ТекущееЗначение;
			
		КонецЕсли;
		
		УстановитьЗначениеРеквизитаВСтроке(ПорцияДанных, СтрокаДерева, ИмяСвойства, ЗначениеСвойства);
		
	КонецЦикла;
	
	Возврат (СтрокиДерева.Количество() > 0);
	
КонецФункции

Процедура УстановитьЗначениеРеквизитаВСтроке(Таблица, СтрокаТаблицы, ИмяРеквизита, ЗначениеРеквизита)
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
	
		Если Таблица.Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
			Таблица.Колонки.Добавить(ИмяРеквизита);
		КонецЕсли;
		
		СтрокаТаблицы[ИмяРеквизита] = ЗначениеРеквизита;
	
	Исключение
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка установки значения реквизита в строке набора данных.
								|Имя колонки: %1
								|Значение реквизита: %2';
								|en = 'An error occurred when setting an attribute value in the data set row.
								|Column name: %1
								|Attribute value: %2'"),
						ИмяРеквизита, ЗначениеРеквизита);
		ДобавитьЗаписьВПротоколОшибокПоИсключению(
			Перечисления.ЗагрузкаНСИТипыПроблем.ФорматФайлаДанных,
			ТекстСообщения,
			ИнформацияОбОшибке());
		Кэш.ОшибкаЗанесенаВПротокол = Истина;
		
		ВызватьИсключение;
		
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИдентификаторов

Процедура ИнициализироватьТаблицыДляЗаполнениеИдентификаторов()
	
	ТаблицаИдентификаторов.Очистить();
	ТаблицаИдентификаторов.Индексы.Очистить();
	
	НастройкиРеквизитов = НастройкиРеквизитовИсточникаДанных.Скопировать(
		Новый Структура("КлючРаздела,СсылочныйТип", ТекущийКлючРаздела, Истина));
		
	ПроверитьНастройкиРеквизитовИсточникаДанных();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуИдентификаторов(СтрокиПорцииДанных)
	
	Для каждого СтрокаПорцииДанных Из СтрокиПорцииДанных Цикл
		
		ТекущийУровень = СтрокаПорцииДанных.Уровень();
		
		ОбъектХранения = Новый Структура(РеквизитСлужебный());
		РеквизитСлужебныйИнициализировать(ОбъектХранения, СтруктураЗначенийПолейФайла(СтрокаПорцииДанных));
		
		Для каждого НастройкаРеквизита Из НастройкиРеквизитов Цикл
			
			УровеньРеквизита = ОписаниеЗагружаемыхДанных[НастройкаРеквизита.КлючЗагружаемыхДанных].УровеньВФайле;
			Если ТипОбъектаХранения(ТекущийУровень) <> ТипОбъектаХранения(УровеньРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НастройкаРеквизита.СпособУстановкиЗначения <> Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеРеквизита = НастройкаРеквизита.ОписаниеРеквизита;
				
			Значение = ЗначениеРеквизитаПоПолямФайла(ОбъектХранения, НастройкаРеквизита);
			Если ЗначениеЗаполнено(Значение) Тогда
				СвязиСоставногоТипа = Новый Массив;
				Для каждого ОписаниеСсылочногоТипа Из ОписаниеРеквизита.ОписаниеСсылочныхТипов Цикл
					НоваяСтрока = ТаблицаИдентификаторов.Добавить();
					НоваяСтрока.Идентификатор       = Строка(Значение);
					НоваяСтрока.ОбъектМетаданных    = ОписаниеСсылочногоТипа.ОбъектМетаданных;
					НоваяСтрока.СвязиСоставногоТипа = СвязиСоставногоТипа;
					НоваяСтрока.ВладелецЗначений    = ВладелецДополнительныхЗначений(ОписаниеРеквизита);
					СвязиСоставногоТипа.Добавить(НоваяСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьТаблицуИдентификаторов(СтрокаПорцииДанных.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИдентификаторыВРегистрСоответствия()
	
	Если ТаблицаИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов1 = "ОбъектМетаданных,Идентификатор";
	СписокРеквизитов2 = "ОбъектМетаданных,Идентификатор,ИндексТаблицы";
	
	ТаблицаИдентификаторов.Индексы.Добавить(СписокРеквизитов1);
	СтруктураПоиска = Новый Структура(СписокРеквизитов1);
	
	ДанныеДляПоиска = ТаблицаИдентификаторов.Скопировать(, СписокРеквизитов2);
	ДанныеДляПоиска.Свернуть(СписокРеквизитов2);
	ДанныеДляПоиска.Колонки.Добавить("ИндексСтроки",  Новый ОписаниеТипов("Число"));
	Для ИндексСтроки = 0 По ДанныеДляПоиска.Количество() -1 Цикл
		ДанныеДляПоиска[ИндексСтроки].ИндексСтроки = ИндексСтроки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ДанныеДляПоиска);
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.ИндексСтроки     КАК ИндексСтроки,
	|	ТаблицаИдентификаторов.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ТаблицаИдентификаторов.Идентификатор    КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,ОбъектМетаданных
	|";
	Запрос.Выполнить();
	
	ТекстыЗапросов = Новый СписокЗначений();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИдентификаторов.ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыДляЗагрузкиНСИ КАК Регистр
	|	ПО Регистр.ИсточникДанных = &ИсточникДанных
	|		И Регистр.Идентификатор = ТаблицаИдентификаторов.Идентификатор
	|ГДЕ
	|	Регистр.Идентификатор IS NULL
	|	И ТаблицаИдентификаторов.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса, "СоответствиеНоменклатурыДляЗагрузкиНСИ");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИдентификаторов.ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовДляЗагрузкиНСИ КАК Регистр
	|	ПО Регистр.ИсточникДанных = &ИсточникДанных
	|		И Регистр.Идентификатор = ТаблицаИдентификаторов.Идентификатор
	|		И Регистр.ОбъектМетаданных = ТаблицаИдентификаторов.ОбъектМетаданных
	|ГДЕ
	|	Регистр.Идентификатор IS NULL
	|	И НЕ ТаблицаИдентификаторов.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса, "СоответствиеОбъектовДляЗагрузкиНСИ");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов.ВыгрузитьЗначения(), ОбщегоНазначения.РазделительПакетаЗапросов());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для ИндексТаблицы = 1 По 2 Цикл
		Выборка = РезультатыЗапроса[ИндексТаблицы-1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = ДанныеДляПоиска[Выборка.ИндексСтроки];
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
			Для каждого НайденнаяСтрока Из ТаблицаИдентификаторов.НайтиСтроки(СтруктураПоиска) Цикл
				НайденнаяСтрока.Сопоставить = Истина;
				НайденнаяСтрока.ИндексТаблицы = ИндексТаблицы;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеДляПоиска.Очистить();
	Для каждого Строка Из ТаблицаИдентификаторов Цикл
		Если Строка.Сопоставить Тогда
			Для каждого СвязаннаяСтрока Из Строка.СвязиСоставногоТипа Цикл
				Строка.Сопоставить = Мин(Строка.Сопоставить, СвязаннаяСтрока.Сопоставить);
			КонецЦикла;
			Если Строка.Сопоставить Тогда
				ЗаполнитьЗначенияСвойств(ДанныеДляПоиска.Добавить(), Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляПоиска.Свернуть(СписокРеквизитов2);
	Для каждого Строка Из ДанныеДляПоиска Цикл
		ИмяРегистра = ТекстыЗапросов[Строка.ИндексТаблицы-1].Представление;
		РегистрыСведений[ИмяРегистра].ДобавитьЗаписьПоСвойствам(ИсточникДанных, Строка);
		УвеличитьЗначениеСчетчика("ИдентификаторовЗаполнено");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

Процедура ИнициализироватьТаблицыДляЗагрузкиДанных()
	
	ТаблицаПакетногоПоиска.Очистить();
	ТаблицаПакетногоПоиска.Индексы.Очистить();
	
	НастройкиРеквизитов = НастройкиРеквизитовИсточникаДанных.СкопироватьКолонки();
	Для каждого НастройкаРеквизита Из НастройкиРеквизитовИсточникаДанных Цикл
		Если НастройкаРеквизита.КлючРаздела = ТекущийКлючРаздела
			ИЛИ (НастройкаРеквизита.ИмяРеквизита = "ИдентификаторТехнологии"
				И НастройкаРеквизита.КлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий()
				И ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства()) Тогда
			ЗаполнитьЗначенияСвойств(НастройкиРеквизитов.Добавить(), НастройкаРеквизита);
		КонецЕсли;
	КонецЦикла;
	НастройкиРеквизитов.Индексы.Добавить("КлючЗагружаемыхДанных,ЭтоОсновнойИдентификатор");
	НастройкиРеквизитов.Индексы.Добавить("ИмяРеквизита");
	
	ПроверитьНастройкиРеквизитовИсточникаДанных();
	
	ТаблицаДанныхОписание = Новый Структура;
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для каждого НастройкаРеквизита Из НастройкиРеквизитов Цикл
		
		КлючЗагружаемыхДанных = УправлениеДаннымиОбИзделияхКлиентСервер.КлючОписанияЭлементаЗагружаемыхДанных(
			НастройкаРеквизита.ИмяОбъектаМетаданных, НастройкаРеквизита.ИмяТЧ);
			
		УровеньВФайле = ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных].УровеньВФайле;
		
		Если НЕ ТаблицаДанныхОписание.Свойство(КлючЗагружаемыхДанных) Тогда
			ОбъектДляХранения = Новый(ТипОбъектаХранения(УровеньВФайле));
			ТаблицаДанныхОписание.Вставить(КлючЗагружаемыхДанных, ОбъектДляХранения);
		КонецЕсли;
		
		Если НастройкаРеквизита.ОписаниеРеквизита.ЭтоИдентификатор Тогда
			Тип = Неопределено;
			ЗначениеТипа = Неопределено;
		Иначе
			Тип = НастройкаРеквизита.ОписаниеРеквизита.Тип;
			ЗначениеТипа = Тип.ПривестиЗначение(Неопределено);
		КонецЕсли;
		
		Если УровеньВФайле = 0 Тогда
			ОбъектХранения = ТаблицаДанныхОписание[КлючЗагружаемыхДанных]; // Структура
			ОбъектХранения.Вставить(НастройкаРеквизита.ИмяРеквизита, ЗначениеТипа);
		Иначе
			ОбъектХранения = ТаблицаДанныхОписание[КлючЗагружаемыхДанных]; // ТаблицаЗначений
			ОбъектХранения.Колонки.Добавить(НастройкаРеквизита.ИмяРеквизита, Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ТаблицаДанныхОписание Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			ОбъектХранения = КлючИЗначение.Значение; // Структура
			ОбъектХранения.Вставить(РеквизитСлужебный());
		Иначе
			ОбъектХранения = КлючИЗначение.Значение; // ТаблицаЗначений
			ОбъектХранения.Колонки.Добавить(РеквизитСлужебный());
		КонецЕсли;
		ТаблицаДанных.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства() Тогда
		Если Кэш.ТаблицаСвязиМатериалОперация.Индексы.Количество() = 0 Тогда
			Кэш.ТаблицаСвязиМатериалОперация.Индексы.Добавить("ИдентификаторТехнологии");
		КонецЕсли;
		Если Кэш.ТаблицаДополнительныхСвойствСостава.Индексы.Количество() = 0 Тогда
			Кэш.ТаблицаДополнительныхСвойствСостава.Индексы.Добавить("ИдентификаторТехнологии");
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДополнительныхСведений = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
КонецПроцедуры

Функция ПолучитьСтрокуТаблицыДанных(Уровень, СтрокаПорцииДанных)
	
	ЗначенияПолейФайла = СтруктураЗначенийПолейФайла(СтрокаПорцииДанных);
	
	Если Уровень = 0 Тогда
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
			ОбъектХранения = ТаблицаДанныхОписание[Колонка.Имя];
			Если ТипЗнч(ОбъектХранения) = Тип("ТаблицаЗначений") Тогда
				СтрокаТаблицы[Колонка.Имя] = ОбъектХранения.Скопировать();
			Иначе
				СтрокаТаблицы[Колонка.Имя] = ОбщегоНазначения.СкопироватьРекурсивно(ОбъектХранения);
				РеквизитСлужебныйИнициализировать(СтрокаТаблицы[Колонка.Имя], ЗначенияПолейФайла);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДополнительныеСвойства = Неопределено;
		СтрокаТаблицы = ТаблицаДанных[ТаблицаДанных.Количество()-1];
		Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
			Если ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("Структура") Тогда
				ДополнительныеСвойства = ЗначенияДополнительныхСвойств(СтрокаТаблицы[Колонка.Имя]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
			Если ТипЗнч(СтрокаТаблицы[Колонка.Имя]) = Тип("ТаблицаЗначений") Тогда
				ВложеннаяТаблица = СтрокаТаблицы[Колонка.Имя]; // ТаблицаЗначений
				НоваяСтрока = ВложеннаяТаблица.Добавить();
				РеквизитСлужебныйИнициализировать(НоваяСтрока, ЗначенияПолейФайла, ДополнительныеСвойства);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

Процедура ЗаполнитьТаблицуДанных(СтрокиПорцииДанных)
	
	ОтборНастроек = Новый Структура("КлючЗагружаемыхДанных,ЭтоОсновнойИдентификатор");
	
	Для каждого СтрокаПорцииДанных Из СтрокиПорцииДанных Цикл
		
		ТекущийУровень = СтрокаПорцииДанных.Уровень();
		
		Если ТекущийУровень = 0 ИЛИ СтрокаПорцииДанных.Строки.Количество() = 0 Тогда
		
			СтрокаТаблицыДанных = ПолучитьСтрокуТаблицыДанных(ТекущийУровень, СтрокаПорцииДанных);
			
			Для каждого КлючИЗначение Из ТаблицаДанныхОписание Цикл
				
				КлючЗагружаемыхДанных = КлючИЗначение.Ключ;
				
				ОтборНастроек.КлючЗагружаемыхДанных = КлючЗагружаемыхДанных;
				ОписаниеЭлементаЗагружаемыхДанных = ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных];
				
				Если ТипОбъектаХранения(ТекущийУровень) <> ТипОбъектаХранения(ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных].УровеньВФайле) Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектХранения = СтрокаТаблицыДанных[КлючЗагружаемыхДанных];
				Если ТекущийУровень = 0 Тогда
					ТекущийИдентификатор = "";
				Иначе
					ОбъектХранения = ОбъектХранения[ОбъектХранения.Количество()-1];
				КонецЕсли;
				
				ВыполнитьАлгоритмПередЗагрузкойОбъекта = ОписаниеЭлементаЗагружаемыхДанных.ДоступныАлгоритмыОбъекта;
				
				Для Ит = 0 По 1 Цикл
					
					Если Ит = 1 И ВыполнитьАлгоритмПередЗагрузкойОбъекта Тогда
						Если ОписаниеЭлементаЗагружаемыхДанных.КлючРаздела = ТекущийКлючРаздела Тогда
							ВыполнитьАлгоритмПередЗагрузкойОбъекта(ОбъектХранения, КлючЗагружаемыхДанных);
						Иначе
							ВосстановитьДополнительныеСвойстваИзКэша(ОбъектХранения, КлючЗагружаемыхДанных);
						КонецЕсли;
						ВыполнитьАлгоритмПередЗагрузкойОбъекта = Ложь;
					КонецЕсли;
					
					ОтборНастроек.ЭтоОсновнойИдентификатор = ?(Ит=0, Истина, Ложь);
					Для каждого НастройкаРеквизита Из НастройкиРеквизитов.НайтиСтроки(ОтборНастроек) Цикл
						
						Если НЕ ЗначениеЗаполнено(НастройкаРеквизита.Значение)
								И НЕ ЗначениеЗаполнено(НастройкаРеквизита.АлгоритмРасчетаЗначения)
							ИЛИ НастройкаРеквизита.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НеИспользовать Тогда
							Продолжить;
						КонецЕсли;
						
						Если НастройкаРеквизита.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.УстановитьВЗначение Тогда
							ОбъектХранения[НастройкаРеквизита.ИмяРеквизита] = НастройкаРеквизита.Значение;
							Продолжить;
						КонецЕсли;
						
						Если НастройкаРеквизита.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму Тогда
							ОбъектХранения[НастройкаРеквизита.ИмяРеквизита] = ЗначениеРеквизитаПоАлгоритму(ОбъектХранения, НастройкаРеквизита);
							Продолжить;
						КонецЕсли;
						
						ОписаниеРеквизита = НастройкаРеквизита.ОписаниеРеквизита;
						
						Значение = ЗначениеРеквизитаПоПолямФайла(ОбъектХранения, НастройкаРеквизита);
						ЗначенияРеквизитовРасчетные(ОбъектХранения).Вставить(НастройкаРеквизита.ИмяРеквизита, Значение);
						
						Если НастройкаРеквизита.СсылочныйТип Тогда
							Если ЗначениеЗаполнено(Значение) Тогда
								СвязиСоставногоТипа = Новый Массив;
								Для каждого ОписаниеСсылочногоТипа Из ОписаниеРеквизита.ОписаниеСсылочныхТипов Цикл
									НоваяСтрока = ТаблицаПакетногоПоиска.Добавить();
									НоваяСтрока.Идентификатор            = Значение;
									НоваяСтрока.СпособУстановкиЗначения  = НастройкаРеквизита.СпособУстановкиЗначения;
									НоваяСтрока.ОбъектМетаданных         = ОписаниеСсылочногоТипа.ОбъектМетаданных;
									НоваяСтрока.ИмяТаблицы               = ОписаниеСсылочногоТипа.ПолноеИмя;
									НоваяСтрока.ИмяРеквизита             = НастройкаРеквизита.ИмяРеквизита;
									НоваяСтрока.ОбъектХранения           = ОбъектХранения;
									НоваяСтрока.ЭтоИдентификатор         = ОписаниеРеквизита.ЭтоИдентификатор;
									НоваяСтрока.ЭтоОсновнойИдентификатор = ОписаниеРеквизита.ЭтоОсновнойИдентификатор;
									НоваяСтрока.ЕстьКод                  = ОписаниеСсылочногоТипа.ЕстьКод;
									НоваяСтрока.ЕстьНаименование         = ОписаниеСсылочногоТипа.ЕстьНаименование;
									НоваяСтрока.ЕстьНомер                = ОписаниеСсылочногоТипа.ЕстьНомер;
									НоваяСтрока.СвязиСоставногоТипа      = СвязиСоставногоТипа;
									НоваяСтрока.ВладелецЗначений         = ВладелецДополнительныхЗначений(ОписаниеРеквизита);
									СвязиСоставногоТипа.Добавить(НоваяСтрока);
								КонецЦикла;
							КонецЕсли;
						Иначе
							ОбъектХранения[НастройкаРеквизита.ИмяРеквизита] = Значение;
						КонецЕсли;
						
					КонецЦикла;
					
					Если Ит = 0 И ТекущийУровень = 0 Тогда
						УстановитьТекущийИдентификатор(ОбъектХранения);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьТаблицуДанных(СтрокаПорцииДанных.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПакетныйПоискСсылок()
	
	СсылокНайти = ТаблицаПакетногоПоиска.Количество();
	Если СсылокНайти = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УвеличитьЗначениеСчетчика("СсылокНайти", СсылокНайти);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СписокРеквизитов = "СпособУстановкиЗначения,ОбъектМетаданных,Идентификатор,ВладелецЗначений,ЭтоИдентификатор";
	ТаблицаПакетногоПоиска.Индексы.Добавить(СписокРеквизитов);
	СтруктураПоиска = Новый Структура(СписокРеквизитов);
	
	ДанныеДляПоиска = ТаблицаПакетногоПоиска.Скопировать(, СписокРеквизитов);
	ДанныеДляПоиска.Свернуть(СписокРеквизитов);
	ДанныеДляПоиска.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	Для ИндексСтроки = 0 По ДанныеДляПоиска.Количество() -1 Цикл
		ДанныеДляПоиска[ИндексСтроки].ИндексСтроки = ИндексСтроки;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.ИндексСтроки               КАК ИндексСтроки,
	|	Т.СпособУстановкиЗначения    КАК СпособУстановкиЗначения,
	|	Т.ОбъектМетаданных           КАК ОбъектМетаданных,
	|	Т.Идентификатор              КАК Идентификатор,
	|	Т.ВладелецЗначений           КАК ВладелецЗначений
	|ПОМЕСТИТЬ ДанныеДляПоиска
	|ИЗ
	|	&ДанныеДляПоиска КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектМетаданных,Идентификатор
	|";
	
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	Запрос.УстановитьПараметр("ДанныеДляПоиска", ДанныеДляПоиска);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т1.ИндексСтроки                 КАК ИндексСтроки,
	|	Т2.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Т2.Номенклатура                 КАК Номенклатура,
	|	Т2.Характеристика               КАК Характеристика
	|ИЗ
	|	ДанныеДляПоиска КАК Т1
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыДляЗагрузкиНСИ КАК Т2
	|	ПО Т1.Идентификатор = Т2.Идентификатор
	|		И Т1.СпособУстановкиЗначения = ЗНАЧЕНИЕ(Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла)
	|		И Т1.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И Т2.Сопоставлено
	|		И Т2.ИсточникДанных = &ИсточникДанных
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т1.ИндексСтроки                КАК ИндексСтроки,
	|	Т2.СсылкаНаОбъект              КАК СсылкаНаОбъект
	|ИЗ
	|	ДанныеДляПоиска КАК Т1
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовДляЗагрузкиНСИ КАК Т2
	|	ПО Т1.Идентификатор = Т2.Идентификатор
	|		И Т1.СпособУстановкиЗначения = ЗНАЧЕНИЕ(Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла)
	|		И Т1.ОбъектМетаданных = Т2.ОбъектМетаданных
	|		И НЕ Т1.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И Т2.Сопоставлено
	|		И Т2.ИсточникДанных = &ИсточникДанных
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	СписокРеквизитов = "СпособУстановкиЗначения,ОбъектМетаданных,ИмяТаблицы,ЕстьКод,ЕстьНаименование,ЕстьНомер";
	ДанныеДляФормированияЗапроса = ТаблицаПакетногоПоиска.Скопировать(,СписокРеквизитов);
	ДанныеДляФормированияЗапроса.Свернуть(СписокРеквизитов);
	
	Для каждого Строка Из ДанныеДляФормированияЗапроса Цикл
		
		Если Строка.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоКоду И Строка.ЕстьКод Тогда
			РеквизитПоиска     = "Т2.Код";
			РеквизитСортировки = "";
		ИначеЕсли Строка.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоНаименованию И Строка.ЕстьНаименование Тогда
			РеквизитПоиска     = "Т2.Наименование";
			РеквизитСортировки = "";
		ИначеЕсли Строка.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.НайтиПоНомеру И Строка.ЕстьНомер Тогда
			РеквизитПоиска     = "Т2.Номер";
			РеквизитСортировки = "Т2.Дата УБЫВ";
		Иначе
			Продолжить;
		КонецЕсли;
			
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Т1.ИндексСтроки   КАК ИндексСтроки,
		|	Т2.Ссылка         КАК СсылкаНаОбъект
		|ИЗ
		|	ДанныеДляПоиска КАК Т1
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &Таблица КАК Т2
		|	ПО Т1.Идентификатор = &РеквизитПоиска
		|		И Т1.ОбъектМетаданных = &ОбъектМетаданных
		|		И Т1.СпособУстановкиЗначения = &СпособУстановкиЗначения
		|		И &ОтборВладелецЗначений
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", Строка.ИмяТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитПоиска", РеквизитПоиска);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Строка.ИмяТаблицы));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СпособУстановкиЗначения",
			СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.%1)",
			XmlСтрока(Строка.СпособУстановкиЗначения)));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборВладелецЗначений",
			?(Строка.ОбъектМетаданных = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка(),
				"Т1.ВладелецЗначений = Т2.Владелец",
				"ИСТИНА"));
		Если НЕ ПустаяСтрока(РеквизитСортировки) Тогда
			ТекстЗапроса = СтрШаблон("%1 УПОРЯДОЧИТЬ ПО %2", ТекстЗапроса, РеквизитСортировки);
		КонецЕсли;
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = ДанныеДляПоиска[Выборка.ИндексСтроки];
			Если ДанныеСтроки.ОбъектМетаданных = Справочники.Номенклатура.ПустаяСсылка()
					И ДанныеСтроки.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла Тогда
				Если ДанныеСтроки.ЭтоИдентификатор Тогда
					ЗначениеРеквизита = Новый Структура("ВидНоменклатуры,Номенклатура,Характеристика",
											Выборка.ВидНоменклатуры, Выборка.Номенклатура, Выборка.Характеристика);
				Иначе
					ЗначениеРеквизита = Выборка.Номенклатура;
				КонецЕсли;
			Иначе
				ЗначениеРеквизита = Выборка.СсылкаНаОбъект;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
			Для каждого НайденнаяСтрока Из ТаблицаПакетногоПоиска.НайтиСтроки(СтруктураПоиска) Цикл
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ОбъектХранения[НайденнаяСтрока.ИмяРеквизита]) Тогда
					НайденнаяСтрока.ОбъектХранения[НайденнаяСтрока.ИмяРеквизита] = ЗначениеРеквизита;
				КонецЕсли;
				Для каждого Строка Из НайденнаяСтрока.СвязиСоставногоТипа Цикл
					Строка.Найдено = Истина;
				КонецЦикла;
				НайденнаяСтрока.СвязиСоставногоТипа.Очистить();
				УвеличитьЗначениеСчетчика("СсылокНайдено");
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СписокРеквизитов = "Идентификатор,ОбъектМетаданных,ВладелецЗначений,СпособУстановкиЗначения";
	ДанныеДляРегистрацииОшибок = ТаблицаПакетногоПоиска.Скопировать(Новый Структура("Найдено,ЭтоОсновнойИдентификатор", Ложь, Ложь), СписокРеквизитов);
	ДанныеДляРегистрацииОшибок.Свернуть(СписокРеквизитов);
	
	Для каждого Строка Из ДанныеДляРегистрацииОшибок Цикл
		Если Строка.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.ВзятьИзФайла Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Отсутствует сопоставление идентификатора ""%1"" со значением типа ""%2""';
										|en = 'The ""%1"" ID mapping with a value of the ""%2"" type is missing'"),
				Строка.Идентификатор,
				ТипЗнч(Строка.ОбъектМетаданных));
			ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.СопоставлениеОбъектов, ТекстОшибки);
			ЗаписьПротокола.Идентификатор = Строка.Идентификатор;
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка поиска объекта типа ""%1"" по значению ""%2"".
					|Вариант поиска: ""%3""';
					|en = 'An error occurred when searching for an object of the ""%1"" type by the ""%2"" value.
					|Search option: ""%3""'"),
				ТипЗнч(Строка.ОбъектМетаданных),
				Строка.Идентификатор,
				Строка.СпособУстановкиЗначения);
			ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ПоискОбъекта, ТекстОшибки);
		КонецЕсли;
		ЗаписьПротокола.СсылкаНаОбъект   = Строка.ОбъектМетаданных;
		ЗаписьПротокола.ВладелецЗначений = Строка.ВладелецЗначений;
	КонецЦикла;
	
	ОбработатьЗначенияСчетчиков();
	
КонецПроцедуры

#Область ОписаниеТаблицыДанных

Функция ТипОбъектаХранения(Уровень)
	
	Возврат ?(Уровень = 0, "Структура", "ТаблицаЗначений");
	
КонецФункции

Функция РеквизитСлужебный()
	
	Возврат "_Служебный";
	
КонецФункции

Процедура РеквизитСлужебныйИнициализировать(ОбъектХранения, ЗначенияПолейФайла = Неопределено, ДополнительныеСвойства = Неопределено)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЗначенияПолейФайла", ЗначенияПолейФайла);
	Результат.Вставить("ЗначенияРеквизитовРасчетные", Новый Структура);
	Результат.Вставить("ДополнительныеСвойства", ?(ЗначениеЗаполнено(ДополнительныеСвойства), ДополнительныеСвойства, Новый Структура));
	
	ОбъектХранения[РеквизитСлужебный()] = Результат;
	
КонецПроцедуры

Функция ЗначенияРеквизитовРасчетные(ОбъектХранения)
	
	Результат = ОбъектХранения[РеквизитСлужебный()]["ЗначенияРеквизитовРасчетные"]; // Структура
	Возврат Результат;
	
КонецФункции

Функция ЗначенияПолейФайла(ОбъектХранения)
	
	Результат = ОбъектХранения[РеквизитСлужебный()]["ЗначенияПолейФайла"]; // Структура
	Возврат Результат;
	
КонецФункции

Функция ЗначенияДополнительныхСвойств(ОбъектХранения)
	
	Результат = ОбъектХранения[РеквизитСлужебный()]["ДополнительныеСвойства"]; // Структура
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СозданиеОбновлениеОбъектов

Процедура СоздатьОбновитьЗагружаемыеДанные()
	
	Если ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаИзделияИМатериалы() Тогда
		
		СоздатьОбновитьНоменклатуру();
		
	ИначеЕсли ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаПроизводственноеОборудование() Тогда
		
		СоздатьОбновитьОборудование();
		
	ИначеЕсли ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий() Тогда
		
		СоздатьОбновитьРесурсныеСпецификации();
		
	ИначеЕсли ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства() Тогда
		
		СоздатьОбновитьПроизводственныйПроцесс();
		
	ИначеЕсли ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов() Тогда
		
		СоздатьОбновитьЗаменыМатериалов();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбновитьНоменклатуру()
	
	Для каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		ДанныеЗаполнения = СтрокаТаблицыДанных[Ключ_Номенклатура]; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
		
		Если НЕ УстановитьТекущийИдентификатор(ДанныеЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗагружаемыеДанныеНоменклатура   = ЗагружаемыеДанные(ДанныеЗаполнения, Ключ_Номенклатура);
		ЗагружаемыеДанныеХарактеристика = Неопределено;
		
		Если ЗагружаемыеДанныеНоменклатура.Отказ Тогда
			ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанныеНоменклатура);
			Продолжить;
		КонецЕсли;
		
		ТекущийВидНоменклатуры = ДанныеЗаполнения.ВидНоменклатуры;
		
		РеквизитыВидаНоменклатуры = РеквизитыВидаНоменклатуры(ТекущийВидНоменклатуры);
		
		ИспользованиеХарактеристик = ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик)
			И РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать
			И ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.НаборСвойствХарактеристик);
		
		Если ИспользованиеХарактеристик Тогда
				
			ЗагружаемыеДанныеХарактеристика = ЗагружаемыеДанныеКонструктор(ДанныеЗаполнения, Ключ_Номенклатура);
				
			Если РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
				ВладелецХарактеристик = ТекущийВидНоменклатуры;
			ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
				ВладелецХарактеристик = РеквизитыВидаНоменклатуры.ВладелецХарактеристик;
			ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
				ВладелецХарактеристик = ЗагружаемыеДанныеНоменклатура.Ссылка;
			КонецЕсли;
			
			Если ЗагружаемыеДанныеНоменклатура.НайденПоРегиструСоответствия
				И ЗначениеЗаполнено(ДанныеЗаполнения.Идентификатор.Характеристика) Тогда
				ЗагружаемыеДанныеХарактеристика.Ссылка = ДанныеЗаполнения.Идентификатор.Характеристика;
				ЗагружаемыеДанныеХарактеристика.Найден = Истина;
				ЗагружаемыеДанныеХарактеристика.НайденПоРегиструСоответствия = Истина;
			ИначеЕсли НЕ НайтиХарактеристику(ЗагружаемыеДанныеХарактеристика, ВладелецХарактеристик, РеквизитыВидаНоменклатуры) Тогда
				ЗагружаемыеДанныеХарактеристика.Ссылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку();
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПропуститьОбработкуОбъекта(ЗагружаемыеДанныеНоменклатура) Тогда
			
			ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанныеНоменклатура);
			
			Если УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанныеНоменклатура, "ВидНоменклатуры", ТекущийВидНоменклатуры) Тогда
				ЗагружаемыеДанныеНоменклатура.Объект.ДополнительныеСвойства.Вставить("ОтключитьОчисткуРеквизитов", Истина);
				Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ЗагружаемыеДанныеНоменклатура.Объект);
			КонецЕсли;
			
			ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанныеНоменклатура);
			
			ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанныеНоменклатура,
				РеквизитыВидаНоменклатуры.СписокРеквизитов_НаборСвойств);
			
			ВыполнитьАлгоритмПередЗаписьюОбъекта(ЗагружаемыеДанныеНоменклатура);
			
		КонецЕсли;
		
		Если ИспользованиеХарактеристик
			И НЕ ПропуститьОбработкуОбъекта(ЗагружаемыеДанныеХарактеристика) Тогда
			
			ЗагружаемыеДанныеХарактеристика.Объект = ЗагружаемыеДанныеХарактеристика.Ссылка.ПолучитьОбъект();
			Если ЗагружаемыеДанныеХарактеристика.Объект = Неопределено Тогда
				ЗагружаемыеДанныеХарактеристика.Объект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ЗагружаемыеДанныеХарактеристика.Объект.УстановитьСсылкуНового(ЗагружаемыеДанныеХарактеристика.Ссылка);
				ЗагружаемыеДанныеХарактеристика.Объект.Владелец = ВладелецХарактеристик;
				ЗагружаемыеДанныеХарактеристика.Объект.ВидНоменклатуры = ТекущийВидНоменклатуры;
				ЗагружаемыеДанныеХарактеристика.ОбъектИзменен = Истина;
			КонецЕсли;
			
			НаименованиеЗаданоПоСвойствам =
				НаименованиеПоСвойствам(ЗагружаемыеДанныеХарактеристика) = ЗагружаемыеДанныеХарактеристика.Объект.Наименование;
			
			ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанныеХарактеристика,
				РеквизитыВидаНоменклатуры.СписокРеквизитов_НаборСвойствХарактеристик);
			
			ЗаполнитьНаименованиеХарактеристики(ЗагружаемыеДанныеХарактеристика,
				РеквизитыВидаНоменклатуры, НаименованиеЗаданоПоСвойствам);
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ТекущийОбъект = ЗагружаемыеДанныеНоменклатура.Объект;
			ЗаписатьОбъект(ЗагружаемыеДанныеНоменклатура);
			
			Если ИспользованиеХарактеристик
					И ЗагружаемыеДанныеХарактеристика.Объект <> Неопределено Тогда
				ТекущийОбъект = ЗагружаемыеДанныеХарактеристика.Объект;
				ЗаписатьОбъект(ЗагружаемыеДанныеХарактеристика);
			КонецЕсли;
			
			ДобавитьСоответствиеНоменклатуры(ЗагружаемыеДанныеНоменклатура, ЗагружаемыеДанныеХарактеристика);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗагружаемыеДанныеНоменклатура.Отказ = Истина;
			ОбработатьОшибкуЗаписиОбъекта(ТекущийОбъект, ИнформацияОбОшибке(), Ключ_Номенклатура, ДанныеЗаполнения);
		КонецПопытки;
		
		ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанныеНоменклатура);
		
		ОбработатьЗначенияСчетчиков(НЕ ЗагружаемыеДанныеНоменклатура.Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОбновитьОборудование()
	
	Для каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		ДанныеЗаполнения = СтрокаТаблицыДанных[Ключ_Оборудование];
		
		Если НЕ УстановитьТекущийИдентификатор(ДанныеЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗагружаемыеДанные = ЗагружаемыеДанные(ДанныеЗаполнения, Ключ_Оборудование);
		
		Если ПропуститьОбработкуОбъекта(ЗагружаемыеДанные) Тогда
			ДобавитьСоответствиеОбъекта(ЗагружаемыеДанные);
			ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанные);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанные);
		
		ТекущийОбъект = ЗагружаемыеДанные.Объект;
		
		ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанные);
		
		ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанные);
		
		ВыполнитьАлгоритмПередЗаписьюОбъекта(ЗагружаемыеДанные);
		
		НачатьТранзакцию();
		Попытка
			
			ЗаписатьОбъект(ЗагружаемыеДанные);
			
			ДобавитьСоответствиеОбъекта(ЗагружаемыеДанные);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗагружаемыеДанные.Отказ = Истина;
			ОбработатьОшибкуЗаписиОбъекта(ТекущийОбъект, ИнформацияОбОшибке(), Ключ_Оборудование, ДанныеЗаполнения);
		КонецПопытки;
		
		ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанные);
		
		ОбработатьЗначенияСчетчиков(НЕ ЗагружаемыеДанные.Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОбновитьРесурсныеСпецификации()
	
	ТаблицаДополнительныхСвойствСостава = Кэш.ТаблицаДополнительныхСвойствСостава; // ТаблицаЗначений
	
	Для каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		ДанныеЗаполнения = СтрокаТаблицыДанных[Ключ_Спецификация];
		
		Если НЕ УстановитьТекущийИдентификатор(ДанныеЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗагружаемыеДанные = ЗагружаемыеДанные(ДанныеЗаполнения, Ключ_Спецификация);
		
		Если ПропуститьОбработкуОбъекта(ЗагружаемыеДанные) Тогда
			ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанные);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанные);
		
		ТекущийОбъект = ЗагружаемыеДанные.Объект;
		
		ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанные);
		
		ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанные);
		
		ТаблицаПовтИсп = УдалитьЗаписиСоставаИзКэша(ЗагружаемыеДанные);
		
		ВыходныеИзделия = ТекущийОбъект.ВыходныеИзделия.ВыгрузитьКолонки();
		
		ДанныеИзделия = ДанныеЗаполнения.ИдентификаторИзделия;
		Если ЗначениеЗаполнено(ДанныеИзделия) Тогда
			НоваяСтрока = ВыходныеИзделия.Добавить();
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(НоваяСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеИзделия);
			НоваяСтрока.КоличествоУпаковок = 1;
		КонецЕсли;
		
		ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанные, ВыходныеИзделия, "ВыходныеИзделия", "Этап,Операция");
		
		МатериалыИУслуги = ТекущийОбъект.МатериалыИУслуги.ВыгрузитьКолонки();
		
		Для каждого СтрокаМатериал Из СтрокаТаблицыДанных[Ключ_Материалы] Цикл
			
			РеквизитыРасчетные = ЗначенияРеквизитовРасчетные(СтрокаМатериал); // Структура
			
			НоваяСтрока = МатериалыИУслуги.Добавить();
			НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(НоваяСтрока);
			
			ДанныеМатериала = СтрокаМатериал.ИдентификаторМатериала;
			Если ЗначениеЗаполнено(ДанныеМатериала) Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМатериала);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериал);
			
			ИдентификаторВложеннойТехнологии = Неопределено;
			РеквизитыРасчетные.Свойство("ИдентификаторВложеннойТехнологии", ИдентификаторВложеннойТехнологии);
			
			Если ЗначениеЗаполнено(ИдентификаторВложеннойТехнологии)
					ИЛИ (Кэш.ЕстьРасчетПоляПроизводитсяВПроцессе И СтрокаМатериал.ПроизводитсяВПроцессе = Истина) Тогда
				НоваяСтрока.ПроизводитсяВПроцессе = Истина;
				НоваяСтрока.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
				НоваяСтрока.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе;
				НоваяСтрока.Обособленно = Ложь;
				Если ЗначениеЗаполнено(ИдентификаторВложеннойТехнологии) Тогда
					ВложеннаяСпецификация = СтрокаМатериал.ИдентификаторВложеннойТехнологии;
					Если НЕ ЗначениеЗаполнено(ВложеннаяСпецификация) Тогда
						ВложеннаяСпецификация = ПолучитьСоздатьСсылкуНового(
							ИдентификаторВложеннойТехнологии, Ключ_Спецификация);
						РегистрыСведений.СоответствиеОбъектовДляЗагрузкиНСИ.ДобавитьЗапись(
							ИсточникДанных, ИдентификаторВложеннойТехнологии, ВложеннаяСпецификация);
					КонецЕсли;
					НоваяСтрока.ИсточникПолученияПолуфабриката = ВложеннаяСпецификация;
				КонецЕсли;
			Иначе
				УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьСпособПолученияМатериалаПоУмолчанию(НоваяСтрока);
			КонецЕсли;
			
			Если Кэш.ЕстьТочкаМаршрутаМатериала Тогда
				ДобавитьСтрокуКэшаСвязейМатериаловСОперациями(ЗагружаемыеДанные,
					РеквизитыРасчетные.КлючСвязиМатериалОперация,
					НоваяСтрока,
					ТаблицаПовтИсп);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанные, МатериалыИУслуги, "МатериалыИУслуги", "Этап,Операция");
		
		ПроверитьЗаполнитьСтатусСпецификации(ЗагружаемыеДанные);
		
		ДополнительныеСвойстваСостава = ЗначенияДополнительныхСвойств(ДанныеЗаполнения);
		Если ДополнительныеСвойстваСостава.Количество() > 0 Тогда
			СтрокаДополнительныеСвойства = ТаблицаДополнительныхСвойствСостава.Добавить();
			СтрокаДополнительныеСвойства.ДатаЗаписи              = ТекущаяДатаСеанса();
			СтрокаДополнительныеСвойства.ИдентификаторТехнологии = ЗагружаемыеДанные.ИдентификаторРасчетный;
			СтрокаДополнительныеСвойства.ДополнительныеСвойства  = ДополнительныеСвойстваСостава;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ЗаписатьОбъект(ЗагружаемыеДанные);
			
			ДобавитьСоответствиеОбъекта(ЗагружаемыеДанные);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗагружаемыеДанные.Отказ = Истина;
			ОбработатьОшибкуЗаписиОбъекта(ТекущийОбъект, ИнформацияОбОшибке(), Ключ_Спецификация, ДанныеЗаполнения);
		КонецПопытки;
		
		ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанные);
		
		ОбработатьЗначенияСчетчиков(НЕ ЗагружаемыеДанные.Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОбновитьПроизводственныйПроцесс()
	
	Спецификации = Новый Массив;
	Для каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		Спецификация = СтрокаТаблицыДанных[Ключ_Спецификация].ИдентификаторТехнологии;
		Если ЗначениеЗаполнено(Спецификация) Тогда
			Спецификации.Добавить(Спецификация);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Этапы.Владелец            КАК Спецификация,
	|	Этапы.Ссылка              КАК СсылкаНаЭлемент,
	|	Этапы.Наименование        КАК Наименование,
	|	Этапы.НомерЭтапа          КАК НомерЭтапа,
	|	Этапы.Подразделение       КАК Подразделение,
	|	ЛОЖЬ                      КАК Найден
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|ГДЕ
	|	Этапы.Владелец В(&Спецификации)
	|	И НЕ Этапы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спецификация,
	|	НомерЭтапа,
	|	Наименование
	|;
	|
	|ВЫБРАТЬ
	|	Операции.Спецификация     КАК Спецификация,
	|	Операции.Владелец         КАК Этап,
	|	Операции.Ссылка           КАК СсылкаНаЭлемент,
	|	Операции.Наименование     КАК Наименование,
	|	Операции.НомерОперации    КАК НомерОперации,
	|	ЛОЖЬ                      КАК Найден
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Операции
	|ГДЕ
	|	Операции.Спецификация В(&Спецификации)
	|	И НЕ Операции.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спецификация,
	|	Этап,
	|	НомерОперации,
	|	Наименование
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЭтапов   = РезультатыЗапроса[0].Выгрузить();
	ТаблицаЭтапов.Индексы.Добавить("Спецификация");
	ТаблицаОпераций = РезультатыЗапроса[1].Выгрузить();
	ТаблицаОпераций.Индексы.Добавить("Спецификация");
	
	ЭтапыОперацииОбработать = Новый ТаблицаЗначений;
	ЭтапыОперацииОбработать.Колонки.Добавить("Этап");
	ЭтапыОперацииОбработать.Колонки.Добавить("Операции");
	ВидыРаботОбработать = Новый Соответствие;
	КлючиСвязиМатериалОперация = Новый Массив;
	
	Для каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		ДанныеЗаполнения = СтрокаТаблицыДанных[Ключ_Спецификация]; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
		
		Если НЕ УстановитьТекущийИдентификатор(ДанныеЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗагружаемыеДанныеСпецификация = ЗагружаемыеДанные(ДанныеЗаполнения, Ключ_Спецификация);
		
		Если ЗагружаемыеДанныеСпецификация.Найден Тогда
			ЗагружаемыеДанныеСпецификация.Найден =
				ТаблицаЭтапов.Найти(ЗагружаемыеДанныеСпецификация.Ссылка, "Спецификация") <> Неопределено;
		Иначе
			ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.Прочее,
				НСтр("ru = 'Не найдена спецификация для загрузки производственного процесса.';
					|en = 'A bill of materials to import a production process is not found.'"),
				Ключ_Спецификация,
				ДанныеЗаполнения);
			ЗагружаемыеДанныеСпецификация.Отказ = Истина;
		КонецЕсли;
		
		Если ПропуститьОбработкуОбъекта(ЗагружаемыеДанныеСпецификация) Тогда
			ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанныеСпецификация);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанныеСпецификация, Ложь);
		
		Кэш.ОтборСпецификация.Спецификация = ЗагружаемыеДанныеСпецификация.Ссылка;
		
		ТаблицаЭтаповСпецификации    = ТаблицаЭтапов.Скопировать(Кэш.ОтборСпецификация);
		ТаблицаОперацийСпецификации  = ТаблицаОпераций.Скопировать(Кэш.ОтборСпецификация);
		
		ЭтапыОперацииОбработать.Очистить();
		ВидыРаботОбработать.Очистить();
		
		ЗагружаемыеДанныеЭтап     = Неопределено;
		ЗагружаемыеДанныеОперация = Неопределено;
		
		НомерЭтапа = 0;
		НомерОперации = 0;
		КлючиСвязиМатериалОперация.Очистить();
		
		Трудозатраты = ЗагружаемыеДанныеСпецификация.Объект.Трудозатраты.ВыгрузитьКолонки();
		
		Для Индекс = 0 По СтрокаТаблицыДанных[Ключ_Операции].Количество() - 1 Цикл
			
			// Этапы
			ДанныеЭтапа = СтрокаТаблицыДанных[Ключ_Этапы][Индекс];
			
			Если ЗагружаемыеДанныеЭтап = Неопределено
				ИЛИ (ЗначениеЗаполнено(ДанныеЭтапа.Подразделение)
						И ДанныеЭтапа.Подразделение <> ЗагружаемыеДанныеЭтап.Объект.Подразделение) Тогда
				
				НомерЭтапа = ?(Кэш.ЕстьРасчетПоляНомерЭтапа, ДанныеЭтапа.НомерЭтапа, НомерЭтапа + 1);
				НомерОперации = 0;
				
				ЗагружаемыеДанныеЭтап = ЗагружаемыеДанныеКонструктор(ДанныеЭтапа, Ключ_Этапы);
				
				Если НЕ НайтиЭтап(ЗагружаемыеДанныеЭтап, ЗагружаемыеДанныеСпецификация.Ссылка, ТаблицаЭтаповСпецификации, НомерЭтапа) Тогда
					ЗагружаемыеДанныеЭтап.Ссылка = Справочники.ЭтапыПроизводства.ПолучитьСсылку();
				КонецЕсли;
				ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанныеЭтап);
				
				УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанныеЭтап, "Владелец", ЗагружаемыеДанныеСпецификация.Ссылка);
				
				ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанныеЭтап);
				ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанныеЭтап);
				
				УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанныеЭтап, "НомерЭтапа", НомерЭтапа);
				
				НоваяСтрока = ЭтапыОперацииОбработать.Добавить();
				НоваяСтрока.Этап     = ЗагружаемыеДанныеЭтап;
				НоваяСтрока.Операции = Новый Массив;
				
			КонецЕсли;
			
			// Операции
			ДанныеОперации = СтрокаТаблицыДанных[Ключ_Операции][Индекс];
			
			ЗагружаемыеДанныеОперация = ЗагружаемыеДанныеКонструктор(ДанныеОперации, Ключ_Операции);
			
			Если НЕ ЗагружаемыеДанныеЭтап.Объект.ПроизводствоНаСтороне Тогда
				
				НомерОперации = ?(Кэш.ЕстьРасчетПоляНомерОперации, ДанныеОперации.НомерОперации, НомерОперации + 1);
				
				Если НЕ НайтиОперацию(ЗагружаемыеДанныеОперация, ЗагружаемыеДанныеЭтап.Ссылка, ТаблицаОперацийСпецификации, НомерОперации) Тогда
					ЗагружаемыеДанныеОперация.Ссылка = Справочники.ТехнологическиеОперации.ПолучитьСсылку();
				КонецЕсли;
				ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанныеОперация);
				
				УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанныеОперация, "Владелец", ЗагружаемыеДанныеЭтап.Ссылка);
				УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанныеОперация, "Спецификация", ЗагружаемыеДанныеСпецификация.Ссылка);
				
				ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанныеОперация);
				ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанныеОперация);
				
				УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанныеОперация, "НомерОперации", НомерОперации);
				
				Операции = ЭтапыОперацииОбработать[ЭтапыОперацииОбработать.Количество()-1].Операции; // Массив
				Операции.Добавить(ЗагружаемыеДанныеОперация);
				
				// Виды работ
				ДанныеВидаРабот = СтрокаТаблицыДанных[Ключ_ВидыРабот][Индекс];
				
				ЗагружаемыеДанныеВидРабот = ЗагружаемыеДанные(ДанныеВидаРабот, Ключ_ВидыРабот, "Идентификатор");
				Если НЕ ПропуститьОбработкуОбъекта(ЗагружаемыеДанныеВидРабот)
					И ВидыРаботОбработать.Получить(ЗагружаемыеДанныеВидРабот.Ссылка) = Неопределено Тогда
					
					ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанныеВидРабот);
					
					ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанныеВидРабот);
					ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанныеВидРабот);
					
					ВыполнитьАлгоритмПередЗаписьюОбъекта(ЗагружаемыеДанныеВидРабот);
					
					ВидыРаботОбработать.Вставить(ЗагружаемыеДанныеВидРабот.Ссылка, ЗагружаемыеДанныеВидРабот);
					
				КонецЕсли;
				
				// Трудозатраты
				ДанныеТрудозатраты = СтрокаТаблицыДанных[Ключ_Трудозатраты][Индекс];
				
				НоваяСтрока = Трудозатраты.Добавить();
				НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
				НоваяСтрока.ЭтапРедактирование     = ЗагружаемыеДанныеЭтап.Ссылка;
				НоваяСтрока.ОперацияРедактирование = ЗагружаемыеДанныеОперация.Ссылка;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТрудозатраты);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидРабот) Тогда
					НоваяСтрока.ВидРабот = ЗагружаемыеДанныеВидРабот.Ссылка;
				КонецЕсли;
			
			КонецЕсли;
			
			// Привязка операций к материалам спецификации
			Если Кэш.ЕстьТочкаМаршрутаОперации И ЗначениеЗаполнено(ДанныеОперации.КлючСвязиМатериалОперация) Тогда
				Если КлючиСвязиМатериалОперация.Найти(ДанныеОперации.КлючСвязиМатериалОперация) = Неопределено Тогда
					ЗаполнитьСвязиМатериаловСОперациямиВКэше(ЗагружаемыеДанныеСпецификация,
						ДанныеОперации.КлючСвязиМатериалОперация,
						ЗагружаемыеДанныеЭтап.Ссылка,
						ЗагружаемыеДанныеОперация.Ссылка);
					КлючиСвязиМатериалОперация.Добавить(ДанныеОперации.КлючСвязиМатериалОперация);
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Обнаружено дублирование ключа связи с материалом ""%1"".
					|Ключ должен быть уникальным для каждой операции в технологии.';
					|en = 'Duplication of the connection key with the ""%1"" material is detected.
					|The key must be unique for each operation in the technology.'"), ДанныеОперации.КлючСвязиМатериалОперация);
					ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ЗаполнениеПолейВФайлеДанных,
						ТекстОшибки, Ключ_Операции);
					ЗаписьПротокола.СсылкаНаОбъект = ЗагружаемыеДанныеОперация.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанныеСпецификация, Трудозатраты, "Трудозатраты", "Этап,Операция");
		
		// Пост-обработка элементов производственного процесса
		Для ИндексЭтап = 0 По ЭтапыОперацииОбработать.Количество() - 1 Цикл
			
			ТекущиеДанныеЭтап = ЭтапыОперацииОбработать[ИндексЭтап].Этап; // см. ЗагружаемыеДанныеКонструктор
			ТекущийЭтапОбъект = ТекущиеДанныеЭтап.Объект; // СправочникОбъект.ЭтапыПроизводства
			Операции          = ЭтапыОперацииОбработать[ИндексЭтап].Операции; // Массив
			
			Если НЕ Кэш.ЕстьРасчетПоляНомерСледующегоЭтапа Тогда
				Если ИндексЭтап = ЭтапыОперацииОбработать.Количество() - 1 Тогда
					НомерСледующегоЭтапа = 0;
				Иначе
					НомерСледующегоЭтапа = ТекущийЭтапОбъект.НомерЭтапа + 1;
				КонецЕсли;
				УстановитьЗначениеРеквизитаОбъекта(ТекущиеДанныеЭтап, "НомерСледующегоЭтапа", НомерСледующегоЭтапа);
			КонецЕсли;
			
			Если НЕ Кэш.ЕстьРасчетПоляНаименованиеЭтапа Тогда
				УстановитьЗначениеРеквизитаОбъекта(ТекущиеДанныеЭтап, "Наименование", Строка(ТекущийЭтапОбъект.Подразделение));
			КонецЕсли;
			
			ДанныеОперацийДляЗаполненияВРЦ = РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентровПоОперациямКонструктор();
			
			Для ИндексОперация = 0 По Операции.ВГраница() Цикл
				ТекущиеДанныеОперация = Операции[ИндексОперация]; // см. ЗагружаемыеДанныеКонструктор
				ТекущаяОперацияОбъект = ТекущиеДанныеОперация.Объект; // СправочникОбъект.ТехнологическиеОперации
				Если ТекущийЭтапОбъект.ПланироватьРаботуВидовРабочихЦентров Тогда
					НоваяСтрока = ДанныеОперацийДляЗаполненияВРЦ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяОперацияОбъект);
					НоваяСтрока.Заполнена= Истина;
				КонецЕсли;
				Если НЕ Кэш.ЕстьРасчетПоляНомерСледующейОперации Тогда
					Если ИндексОперация = Операции.ВГраница() Тогда
						НомерСледующейОперации = 0;
					Иначе
						НомерСледующейОперации = ТекущаяОперацияОбъект.НомерОперации + 1;
					КонецЕсли;
					УстановитьЗначениеРеквизитаОбъекта(ТекущиеДанныеОперация, "НомерСледующейОперации", НомерСледующейОперации);
				КонецЕсли;
				ВыполнитьАлгоритмПередЗаписьюОбъекта(ТекущиеДанныеОперация);
			КонецЦикла;
			
			ЗаполнитьВидыРабочихЦентровПоОперациям(ТекущиеДанныеЭтап, ДанныеОперацийДляЗаполненияВРЦ);
			
			ВыполнитьАлгоритмПередЗаписьюОбъекта(ТекущиеДанныеЭтап);
				
		КонецЦикла;
		
		// Восстановление связей с материалами
		Если Кэш.ЕстьТочкаМаршрутаОперации Тогда
			ЗаполнитьСвязиМатериаловСОперациямиИзКэша(ЗагружаемыеДанныеСпецификация);
		КонецЕсли;
		
		ПроверитьЗаполнитьСтатусСпецификации(ЗагружаемыеДанныеСпецификация);
		
		Для каждого КлючИЗначение Из ВидыРаботОбработать Цикл
			ТекущиеДанныеВидРабот = КлючИЗначение.Значение; // см. ЗагружаемыеДанныеКонструктор
			ТекущийОбъект = ТекущиеДанныеВидРабот.Объект;
			Если ЗаписатьОбъектВПопытке(ТекущиеДанныеВидРабот) Тогда
				ДобавитьСоответствиеОбъекта(ТекущиеДанныеВидРабот);
			КонецЕсли;
		КонецЦикла;
		
		ВыполнитьАлгоритмПередЗаписьюОбъекта(ЗагружаемыеДанныеСпецификация);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РесурсныеСпецификации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗагружаемыеДанныеСпецификация.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЭтапыПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Владелец", ЗагружаемыеДанныеСпецификация.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ТехнологическиеОперации");
			ЭлементБлокировки.УстановитьЗначение("Спецификация", ЗагружаемыеДанныеСпецификация.Ссылка);
			Блокировка.Заблокировать();
			
			Для каждого ТекущаяСтрока Из ЭтапыОперацииОбработать Цикл
				ТекущиеДанныеЭтап = ТекущаяСтрока.Этап; // см. ЗагружаемыеДанныеКонструктор
				ТекущийОбъект     = ТекущиеДанныеЭтап.Объект;
				ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСтатусВладельца");
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗапретитьРасчетДнейДоОкончания");
				Если ЗаписатьОбъект(ТекущиеДанныеЭтап, Ложь) Тогда
					ЗагружаемыеДанныеСпецификация.ОбъектИзменен = Истина;
				КонецЕсли;
				Для каждого ТекущиеДанныеОперация Из ТекущаяСтрока.Операции Цикл // см. ЗагружаемыеДанныеКонструктор
					ТекущийОбъект = ТекущиеДанныеОперация.Объект;
					ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСтатусВладельца");
					Если ЗаписатьОбъект(ТекущиеДанныеОперация, Ложь) Тогда
						ЗагружаемыеДанныеСпецификация.ОбъектИзменен = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(ТаблицаЭтаповСпецификации);
			МассивТаблиц.Добавить(ТаблицаОперацийСпецификации);
			Для каждого Таблица Из МассивТаблиц Цикл
				Для каждого СтрокаТаблицы Из Таблица Цикл
					Если НЕ СтрокаТаблицы.Найден Тогда
						СсылкаНаЭлемент = СтрокаТаблицы.СсылкаНаЭлемент;
						ТекущийОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
						ТекущийОбъект.ДополнительныеСвойства.Вставить("РазрешитьЗапись");
						ТекущийОбъект.УстановитьПометкуУдаления(Истина);
						ЗагружаемыеДанныеСпецификация.ОбъектИзменен = Истина;
						УвеличитьЗначениеСчетчикаПоСсылке("Удалено", СсылкаНаЭлемент);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ТекущийОбъект = ЗагружаемыеДанныеСпецификация.Объект;
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗапретитьРасчетДлительностиПроизводства");
			Если ЗаписатьОбъект(ЗагружаемыеДанныеСпецификация) Тогда
				РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьЗадание(ТекущийОбъект.Ссылка, Истина, Ложь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗагружаемыеДанныеСпецификация.Отказ = Истина;
			ОбработатьОшибкуЗаписиОбъекта(ТекущийОбъект, ИнформацияОбОшибке(), Ключ_Спецификация, ДанныеЗаполнения);
		КонецПопытки;
		
		ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанныеСпецификация);
		
		ОбработатьЗначенияСчетчиков(НЕ ЗагружаемыеДанныеСпецификация.Отказ);
		
	КонецЦикла;
	
	РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ЗапуститьЗадание();
	
КонецПроцедуры

Процедура СоздатьОбновитьЗаменыМатериалов()
	
	ОписаниеТЧ = Новый ТаблицаЗначений;
	ОписаниеТЧ.Колонки.Добавить("ИмяТЧ");
	ОписаниеТЧ.Колонки.Добавить("ГруппаЗамены");
	ОписаниеТЧ.Колонки.Добавить("ДанныеТЧ");
	
	ГруппыЗамены = СтрРазделить("Материалы,Аналоги", ",");
	Для Индекс = 0 По ГруппыЗамены.ВГраница() Цикл
		НоваяСтрока = ОписаниеТЧ.Добавить();
		НоваяСтрока.ГруппаЗамены = Строка(Индекс);
		НоваяСтрока.ИмяТЧ        = ГруппыЗамены[Индекс];
	КонецЦикла;
	
	Для каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		ДанныеЗаполнения = СтрокаТаблицыДанных[Ключ_Замены];
		
		Если НЕ УстановитьТекущийИдентификатор(ДанныеЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗагружаемыеДанные = ЗагружаемыеДанные(ДанныеЗаполнения, Ключ_Замены);
		
		Если ПропуститьОбработкуОбъекта(ЗагружаемыеДанные) Тогда
			ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанные);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанные);
		
		ТекущийОбъект = ЗагружаемыеДанные.Объект; // ДокументОбъект.РазрешениеНаЗаменуМатериалов
		
		ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанные);
		
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Дата) Тогда
			УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "Дата", ТекущаяДатаСеанса());
		КонецЕсли;
		
		ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанные);
		
		ИдентификаторИзделия = Неопределено;
		Если ДанныеЗаполнения.Свойство("ИдентификаторИзделия", ИдентификаторИзделия)
				И ЗначениеЗаполнено(ИдентификаторИзделия) Тогда
			Изделие = ИдентификаторИзделия.Номенклатура;
			ХарактеристикаИзделия = ИдентификаторИзделия.Характеристика;
		Иначе
			Изделие = Неопределено;
			ХарактеристикаИзделия = Неопределено;
		КонецЕсли;
		
		ИдентификаторТехнологии = Неопределено;
		Если ДанныеЗаполнения.Свойство("ИдентификаторТехнологии", ИдентификаторТехнологии)
				И НЕ ЗначениеЗаполнено(Изделие) Тогда
			Спецификация = ИдентификаторТехнологии;
		Иначе
			Спецификация = Неопределено;
		КонецЕсли;
		
		УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "Изделие", Изделие);
		УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "ХарактеристикаИзделия", ХарактеристикаИзделия);
		УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "Спецификация", Спецификация);
		Если НЕ ДанныеЗаполнения.Свойство("Статус") Тогда
			УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "Статус", Перечисления.СтатусыРазрешенийНаЗаменуМатериалов.Утверждено);
		КонецЕсли;
		
		Для каждого Строка Из ОписаниеТЧ Цикл
			Если Строка.ДанныеТЧ = Неопределено Тогда
				Строка.ДанныеТЧ = ТекущийОбъект[Строка.ИмяТЧ].ВыгрузитьКолонки();
			КонецЕсли;
			Строка.ДанныеТЧ.Очистить();
		КонецЦикла;
		
		Для каждого СтрокаМатериал Из СтрокаТаблицыДанных[Ключ_Замены_Материалы] Цикл
			
			РеквизитыРасчетные = ЗначенияРеквизитовРасчетные(СтрокаМатериал); // Структура
			
			ТекущаяГруппаЗамены = Строка(РеквизитыРасчетные.ГруппаЗамены);
			Если НЕ ЗначениеЗаполнено(ТекущаяГруппаЗамены) Тогда
				ЗагружаемыеДанные.Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			ТекущиеДанныеТЧ = Неопределено;
			Для Индекс = 0 По ОписаниеТЧ.Количество() - 1 Цикл
				Если ОписаниеТЧ[Индекс].ГруппаЗамены = ТекущаяГруппаЗамены Тогда
					ТекущиеДанныеТЧ = ОписаниеТЧ[Индекс].ДанныеТЧ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущиеДанныеТЧ = Неопределено Тогда
				РеквизитыСлужебные = ОписаниеЗагружаемыхДанных[Ключ_Замены_Материалы].РеквизитыСлужебные;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка распределения материалов по табличным частям документа.
						|Неверное значение ""%1"" реквизита ""%2"".';
						|en = 'An error occurred when allocating materials among document tables.
						|Incorrect ""%1"" value of the ""%2"" attribute.'"),
					ТекущаяГруппаЗамены,
					РеквизитыСлужебные.ГруппаЗамены.Представление);
				ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ЗаполнениеПолейВФайлеДанных,
					ТекстОшибки, Ключ_Замены, ДанныеЗаполнения);
				ЗагружаемыеДанные.Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = ТекущиеДанныеТЧ.Добавить();
			
			ДанныеМатериала = СтрокаМатериал.ИдентификаторМатериала;
			Если ЗначениеЗаполнено(ДанныеМатериала) Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеМатериала);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериал);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура("ИдентификаторСтроки", Новый УникальныйИдентификатор()));
			
		КонецЦикла;
		
		Если НЕ ЗагружаемыеДанные.Отказ Тогда
			Для каждого Строка Из ОписаниеТЧ Цикл
				ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанные, Строка.ДанныеТЧ, Строка.ИмяТЧ);
			КонецЦикла;
		КонецЕсли;
		
		ВыполнитьАлгоритмПередЗаписьюОбъекта(ЗагружаемыеДанные);
		
		НачатьТранзакцию();
		Попытка
			
			ЗаписатьОбъект(ЗагружаемыеДанные);
			
			ДобавитьСоответствиеОбъекта(ЗагружаемыеДанные);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ЗагружаемыеДанные.Отказ = Истина;
			ОбработатьОшибкуЗаписиОбъекта(ТекущийОбъект, ИнформацияОбОшибке(), Ключ_Замены, ДанныеЗаполнения);
			
		КонецПопытки;
		
		ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанные);
		
		ОбработатьЗначенияСчетчиков(НЕ ЗагружаемыеДанные.Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетЗначений

Процедура ВыполнитьАлгоритмПередЗагрузкойОбъекта(ОбъектХранения, КлючЗагружаемыхДанных)
	
	ИмяСобытия = УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗагрузкойОбъекта();
	
	КлючАлгоритма = УправлениеДаннымиОбИзделияхКлиентСервер.КлючАлгоритмаОбработкиОбъектаПриЗагрузке(
		ИмяСобытия, КлючЗагружаемыхДанных);
	
	АлгоритмПередЗагрузкойОбъекта = "";
	Если НЕ НастройкиИсточникаДанных.АлгоритмыОбработкиОбъектов.Свойство(КлючАлгоритма, АлгоритмПередЗагрузкойОбъекта)
		ИЛИ НЕ ЗначениеЗаполнено(АлгоритмПередЗагрузкойОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДополнительныеСвойства", ЗначенияДополнительныхСвойств(ОбъектХранения));
	СтруктураПараметров.Вставить("ПоляФайла", ЗначенияПолейФайла(ОбъектХранения));
	СтруктураПараметров.Вставить("ПараметрыАлгоритма", ПараметрыАлгоритмаОбработкиОбъекта(КлючАлгоритма, ИмяСобытия, КлючЗагружаемыхДанных));
	
	ТекстАлгоритма = СтрШаблон("
	|СтруктураПараметров = Параметры;
	|
	|ДополнительныеСвойства = СтруктураПараметров.ДополнительныеСвойства;
	|ПоляФайла = СтруктураПараметров.ПоляФайла;
	|Параметры = СтруктураПараметров.ПараметрыАлгоритма;
	|
	|%1
	|
	|", АлгоритмПередЗагрузкойОбъекта);
	
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ТекстАлгоритма, СтруктураПараметров);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка алгоритма ""%1"".';
									|en = '""%1"" algorithm error.'"),
			УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеВидаАлгоритмаОбработкиОбъекта(ИмяСобытия));
		ДобавитьЗаписьВПротоколОшибокПоИсключению(Перечисления.ЗагрузкаНСИТипыПроблем.ВыполнениеАлгоритма,
			ТекстОшибки,
			ИнформацияОбОшибке(),
			КлючЗагружаемыхДанных,
			ОбъектХранения);
	КонецПопытки;
	
КонецПроцедуры

Функция ЗначениеРеквизитаПоАлгоритму(ОбъектХранения, НастройкаРеквизита)
	
	ОписаниеРеквизита  = НастройкаРеквизита.ОписаниеРеквизита; // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДополнительныеСвойства", ЗначенияДополнительныхСвойств(ОбъектХранения));
	СтруктураПараметров.Вставить("ПоляФайла", ЗначенияПолейФайла(ОбъектХранения));
	СтруктураПараметров.Вставить("ПараметрыАлгоритма", ПараметрыАлгоритмаЗаполненияРеквизита(НастройкаРеквизита));
	СтруктураПараметров.Вставить("Результат", Неопределено);
	
	ТекстАлгоритма = СтрШаблон("
	|СтруктураПараметров = Параметры;
	|Результат = Неопределено;
	|
	|ДополнительныеСвойства = СтруктураПараметров.ДополнительныеСвойства;
	|ПоляФайла = СтруктураПараметров.ПоляФайла;
	|Параметры = СтруктураПараметров.ПараметрыАлгоритма;
	|
	|%1
	|
	|СтруктураПараметров.Результат = Результат;
	|", НастройкаРеквизита.АлгоритмРасчетаЗначения);
	
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ТекстАлгоритма, СтруктураПараметров);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка вычисления значения реквизита ""%1"" по алгоритму.';
									|en = 'An error occurred when calculating a value of the ""%1"" attribute by the algorithm.'"),
			ОписаниеРеквизита.Представление);
		ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибокПоИсключению(Перечисления.ЗагрузкаНСИТипыПроблем.ВыполнениеАлгоритма,
			ТекстОшибки, ИнформацияОбОшибке(), НастройкаРеквизита.КлючЗагружаемыхДанных, ОбъектХранения);
		ЗаписьПротокола.ОписаниеРеквизита = ОписаниеРеквизита;
	КонецПопытки;
	
	Возврат СтруктураПараметров.Результат;
	
КонецФункции

Функция ЗначениеРеквизитаПоПолямФайла(ОбъектХранения, НастройкаРеквизита)
	
	Результат = Неопределено;
	
	ТекстНастройки = НастройкаРеквизита.Значение;
	Если НЕ ЗначениеЗаполнено(ТекстНастройки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеРеквизита  = НастройкаРеквизита.ОписаниеРеквизита; // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
	ЗначенияПолейФайла = ЗначенияПолейФайла(ОбъектХранения);
	
	ПоляНеЗаполнены = Новый Массив;
	ПоляОтсутствуют = Новый Массив;	
	
	Если УправлениеДаннымиОбИзделиях.ЭтоВыражение(ТекстНастройки) Тогда
		
		ТекстВыражения = ТекстНастройки;
		СтруктураПараметров = Новый Структура;
		
		ПозицияНачала = СтрНайти(ТекстНастройки, "[");
		Пока ПозицияНачала > 0 Цикл
			ПозицияОкончание = СтрНайти(ТекстНастройки, "]", НаправлениеПоиска.СНачала, ПозицияНачала + 1);
			Если ПозицияОкончание > 0 Тогда
				Операнд = Сред(ТекстНастройки, ПозицияНачала + 1, ПозицияОкончание - ПозицияНачала - 1);
				Если НЕ ЗначенияПолейФайла.Свойство(Операнд) Тогда
					ПоляОтсутствуют.Добавить(Операнд);
				Иначе
					Значение = ЗначенияПолейФайла[Операнд];
					Если НЕ ЗначениеЗаполнено(Значение) Тогда
						ПоляНеЗаполнены.Добавить(Операнд);
					КонецЕсли;
					СтруктураПараметров.Вставить(Операнд, Значение);
				КонецЕсли;
				ТекстВыражения = СтрЗаменить(ТекстВыражения, СтрШаблон("[%1]", Операнд), СтрШаблон("Параметры.%1", Операнд));
			КонецЕсли;
			ПозицияНачала = СтрНайти(ТекстНастройки, "[", НаправлениеПоиска.СНачала, ПозицияОкончание);
		КонецЦикла;
		
		Попытка
			Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ТекстВыражения, СтруктураПараметров);
		Исключение
			ТекстОшибки = ТекстОшибкиРасчетаЗначенияРеквизита(ОписаниеРеквизита, ПоляНеЗаполнены, ПоляОтсутствуют);
			ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибокПоИсключению(Перечисления.ЗагрузкаНСИТипыПроблем.ЗаполнениеПолейВФайлеДанных,
				ТекстОшибки, ИнформацияОбОшибке(), НастройкаРеквизита.КлючЗагружаемыхДанных, ОбъектХранения);
			ЗаписьПротокола.ОписаниеРеквизита = ОписаниеРеквизита;
			Возврат Результат;
		КонецПопытки;
		
	Иначе
		
		Значение = Неопределено;
		Если НЕ ЗначенияПолейФайла.Свойство(ТекстНастройки, Значение) Тогда
			ПоляОтсутствуют.Добавить(ТекстНастройки);
		ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
			ПоляНеЗаполнены.Добавить(ТекстНастройки);
		Иначе
			Результат = Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат)
			И ОписаниеРеквизита.Обязательный Тогда
		
		ТекстОшибки = ТекстОшибкиРасчетаЗначенияРеквизита(ОписаниеРеквизита, ПоляНеЗаполнены, ПоляОтсутствуют);
		ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ЗаполнениеПолейВФайлеДанных,
			ТекстОшибки, НастройкаРеквизита.КлючЗагружаемыхДанных, ОбъектХранения);
		ЗаписьПротокола.ОписаниеРеквизита = ОписаниеРеквизита; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьАлгоритмПередЗаписьюОбъекта(ЗагружаемыеДанные)
	
	КлючЗагружаемыхДанных = ЗагружаемыеДанные.КлючЗагружаемыхДанных;
	ТекущийОбъект = ЗагружаемыеДанные.Объект;
	ОбъектХранения = ЗагружаемыеДанные.ОбъектХранения;
	
	ИмяСобытия = УправлениеДаннымиОбИзделияхКлиентСервер.ИмяСобытияПередЗаписьюОбъекта();
	
	КлючАлгоритма = УправлениеДаннымиОбИзделияхКлиентСервер.КлючАлгоритмаОбработкиОбъектаПриЗагрузке(
		ИмяСобытия, КлючЗагружаемыхДанных);
	
	АлгоритмПередЗагрузкойОбъекта = "";
	Если НЕ НастройкиИсточникаДанных.АлгоритмыОбработкиОбъектов.Свойство(КлючАлгоритма, АлгоритмПередЗагрузкойОбъекта)
		ИЛИ НЕ ЗначениеЗаполнено(АлгоритмПередЗагрузкойОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекущийОбъект", ТекущийОбъект);
	СтруктураПараметров.Вставить("ДополнительныеСвойства", ЗначенияДополнительныхСвойств(ОбъектХранения));
	СтруктураПараметров.Вставить("ПоляФайла", ЗначенияПолейФайла(ОбъектХранения));
	СтруктураПараметров.Вставить("ПараметрыАлгоритма", ПараметрыАлгоритмаОбработкиОбъекта(КлючАлгоритма, ИмяСобытия, КлючЗагружаемыхДанных));
	
	ТекстАлгоритма = СтрШаблон("
	|СтруктураПараметров = Параметры;
	|ТекущийОбъект = СтруктураПараметров.ТекущийОбъект;
	|
	|ДополнительныеСвойства = СтруктураПараметров.ДополнительныеСвойства;
	|ПоляФайла = СтруктураПараметров.ПоляФайла;
	|Параметры = СтруктураПараметров.ПараметрыАлгоритма;
	|
	|%1
	|
	|", АлгоритмПередЗагрузкойОбъекта);
	
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ТекстАлгоритма, СтруктураПараметров);
		ЗагружаемыеДанные.ОбъектИзменен = ЗагружаемыеДанные.Объект.Модифицированность();
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка алгоритма ""%1"".';
									|en = '""%1"" algorithm error.'"),
			УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеВидаАлгоритмаОбработкиОбъекта(ИмяСобытия));
		ДобавитьЗаписьВПротоколОшибокПоИсключению(Перечисления.ЗагрузкаНСИТипыПроблем.ВыполнениеАлгоритма,
			ТекстОшибки,
			ИнформацияОбОшибке(),
			КлючЗагружаемыхДанных,
			ОбъектХранения);
	КонецПопытки;
	
КонецПроцедуры

Функция ПараметрыАлгоритмаОбработкиОбъекта(КлючАлгоритма, ИмяСобытия, КлючЗагружаемыхДанных)
	
	ОтборПараметров = Новый Структура;
	ОтборПараметров.Вставить("ОбъектМетаданных", ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных].ОбъектМетаданных);
	ОтборПараметров.Вставить("КлючСвязи", УправлениеДаннымиОбИзделияхКлиентСервер.КлючСвязиВидаАлгоритмаОбработкиОбъекта(ИмяСобытия));
	
	Возврат ПараметрыАлгоритма(КлючАлгоритма, ОтборПараметров, КлючЗагружаемыхДанных);
	
КонецФункции

Функция ПараметрыАлгоритмаЗаполненияРеквизита(НастройкаРеквизита)
	
	ОтборПараметров = Новый Структура;
	ОтборПараметров.Вставить("КлючСвязи", НастройкаРеквизита.КлючСвязи);
	
	Возврат ПараметрыАлгоритма(НастройкаРеквизита.КлючСвязи, ОтборПараметров);
	
КонецФункции

Функция ПараметрыАлгоритма(Ключ, ОтборПараметров, КлючЗагружаемыхДанных = "")
	
	ПараметрыАлгоритмов = ПолучитьСоздатьСвойствоКэша("ПараметрыАлгоритмов", "Соответствие");
	
	СтруктураПараметров = ПараметрыАлгоритмов.Получить(Ключ);
	
	Если СтруктураПараметров = Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		
		НайденныеСтроки = ИсточникДанныхОбъект.ПараметрыАлгоритмов.НайтиСтроки(ОтборПараметров);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Попытка
				СтруктураПараметров.Вставить(НайденнаяСтрока.ИмяПараметра, НайденнаяСтрока.Значение);
			Исключение
				ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ВыполнениеАлгоритма,
					СтрШаблон(НСтр("ru = 'Неверное имя параметра алгоритма: %1';
									|en = 'Incorrect algorithm parameter name: %1'"), НайденнаяСтрока.ИмяПараметра),
					КлючЗагружаемыхДанных);
			КонецПопытки;
		КонецЦикла;
		
		ПараметрыАлгоритмов.Вставить(Ключ, СтруктураПараметров);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ТекстОшибкиРасчетаЗначенияРеквизита(ОписаниеРеквизита, ПоляНеЗаполнены, ПоляОтсутствуют)
	
	ШаблонОшибкаВычисления = НСтр("ru = 'Ошибка вычисления значения реквизита ""%1""';
									|en = 'An error occurred when calculating a value of the ""%1"" attribute'");
	ШаблонНеЗаполненыПоля  = НСтр("ru = 'Не заполнены поля файла: %1';
									|en = 'The file fields are not filled: %1'");
	ШаблонОтсутствуютПоля  = НСтр("ru = 'Отсутствуют поля файла: %1';
									|en = 'The file fields are missing: %1'");
	
	ТекстОшибки = СтрШаблон(ШаблонОшибкаВычисления, ОписаниеРеквизита.Представление);
	Если ПоляНеЗаполнены.ВГраница() <> -1 Тогда
		Поля = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ПоляНеЗаполнены);
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(ШаблонНеЗаполненыПоля, СтрСоединить(Поля,", "));
	КонецЕсли;
	Если ПоляОтсутствуют.ВГраница() <> -1 Тогда
		Поля = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ПоляОтсутствуют);
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(ШаблонОтсутствуютПоля, СтрСоединить(Поля,", "));
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеЗагрузки

// Загружаемые данные конструктор.
// Параметры:
// 	ОбъектХранения - Структура
// 	КлючЗагружаемыхДанных - Строка
// 
// Возвращаемое значение:
//  Структура - Загружаемые данные конструктор:
// * Объект - СправочникОбъект, ДокументОбъект
// * Ссылка - СправочникСсылка, СправочникСсылка
// * ОбъектХранения - Структура
// * ОбъектИзменен - Булево
//
Функция ЗагружаемыеДанныеКонструктор(ОбъектХранения, КлючЗагружаемыхДанных)
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючЗагружаемыхДанных", КлючЗагружаемыхДанных);
	Результат.Вставить("Описание", ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных]);
	Результат.Вставить("ОбъектХранения", ОбъектХранения);
	
	Результат.Вставить("Ссылка");
	Результат.Вставить("Объект");
	Результат.Вставить("ОбъектИзменен",  Ложь);
	
	Результат.Вставить("ПолеИдентификатор");
	Результат.Вставить("ИдентификаторРасчетный");
	
	Результат.Вставить("Найден", Ложь);
	Результат.Вставить("НайденПоРегиструСоответствия", Ложь);
	Результат.Вставить("НайденПоКлючевымПолям", Ложь);
	
	Результат.Вставить("ДополнительныеСведения", ТаблицаДополнительныхСведений.СкопироватьКолонки());
	
	Результат.Вставить("Отказ", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру загружаемых данных.
// 
// Параметры:
//  ОбъектХранения - Структура
//  КлючЗагружаемыхДанных - Строка
//  ПолеИдентификатор - Строка
//  СоздаватьОбъект - Булево
// 
// Возвращаемое значение:
//  Структура - см. ЗагружаемыеДанныеКонструктор
Функция ЗагружаемыеДанные(ОбъектХранения, КлючЗагружаемыхДанных, ПолеИдентификатор = Неопределено)
	
	ЗагружаемыеДанные = ЗагружаемыеДанныеКонструктор(ОбъектХранения, КлючЗагружаемыхДанных);
	
	ЗагружаемыеДанные.ПолеИдентификатор = ?(ПолеИдентификатор = Неопределено, ПолеОсновнойИдентификатор(), ПолеИдентификатор);
	ЗагружаемыеДанные.ИдентификаторРасчетный = ЗначенияРеквизитовРасчетные(ОбъектХранения)[ЗагружаемыеДанные.ПолеИдентификатор];
	
	Значение = ОбъектХранения[ЗагружаемыеДанные.ПолеИдентификатор];
	Если ЗначениеЗаполнено(Значение) Тогда
		ЗагружаемыеДанные.Ссылка = ?(ТипЗнч(Значение) = Тип("Структура"), Значение[КлючЗагружаемыхДанных], Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеДанные.Ссылка) Тогда
		ЗагружаемыеДанные.НайденПоРегиструСоответствия = Истина;
	Иначе
		Если ЗагружаемыеДанные.Описание.ДоступенПоиск Тогда
			НайтиПоКлючевымПолям(ЗагружаемыеДанные);
			Если ЗагружаемыеДанные.Отказ Тогда
				Возврат ЗагружаемыеДанные;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЗагружаемыеДанные.Ссылка) Тогда
			ЗагружаемыеДанные.Ссылка = ПолучитьСоздатьСсылкуНового(ЗагружаемыеДанные.ИдентификаторРасчетный, КлючЗагружаемыхДанных);
		КонецЕсли;
	КонецЕсли;
	
	ЗагружаемыеДанные.Найден = (ЗагружаемыеДанные.НайденПоРегиструСоответствия ИЛИ ЗагружаемыеДанные.НайденПоКлючевымПолям);
	
	Возврат ЗагружаемыеДанные;
	
КонецФункции

Функция ЗаполнитьОбъектЗагружаемыхДанных(ЗагружаемыеДанные, СоздаватьОбъект = Истина)
	
	ОбъектПрочитан = ЗагружаемыеДанные.Объект <> Неопределено;
	
	Если НЕ ОбъектПрочитан
		И ЗначениеЗаполнено(ЗагружаемыеДанные.Ссылка) Тогда
		
		ЗагружаемыеДанные.Объект = ЗагружаемыеДанные.Ссылка.ПолучитьОбъект();
		Если ЗагружаемыеДанные.Объект = Неопределено Тогда
			Если СоздаватьОбъект Тогда
				ЗагружаемыеДанные.Объект = ?(ЗагружаемыеДанные.Описание.ЭтоДокумент,
					Документы[ЗагружаемыеДанные.КлючЗагружаемыхДанных].СоздатьДокумент(),
					Справочники[ЗагружаемыеДанные.КлючЗагружаемыхДанных].СоздатьЭлемент());
				ЗагружаемыеДанные.Объект.УстановитьСсылкуНового(ЗагружаемыеДанные.Ссылка);
				ЗагружаемыеДанные.Объект.Заполнить(Неопределено);
				ОбъектПрочитан = Истина;
			КонецЕсли;
		Иначе
			ОбъектПрочитан = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектПрочитан;
	
КонецФункции

Процедура ЗаполнитьРеквизитыОбъекта(ЗагружаемыеДанные, СписокРеквизитов = Неопределено)
	
	ОбъектХранения = ЗагружаемыеДанные.ОбъектХранения;
	
	Если ВариантОбновленияВсегда() Тогда
		ЗаполнитьЗначенияСвойств(ЗагружаемыеДанные.Объект, ОбъектХранения, СписокРеквизитов);
		ЗагружаемыеДанные.ОбъектИзменен = Истина;
	Иначе
		Если СписокРеквизитов = Неопределено Тогда
			СписокРеквизитов = СписокОсновныхРеквизитов(ЗагружаемыеДанные);
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
			Для каждого ИмяРеквизита Из СтрРазделить(СписокРеквизитов,",") Цикл
				УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, ИмяРеквизита, ОбъектХранения[ИмяРеквизита]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанные, Таблица, ИмяТЧ, ИсключитьРеквизиты = "")
	
	Объект = ЗагружаемыеДанные.Объект;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Если ВариантОбновленияВсегда()
		ИЛИ ЗагружаемыеДанные.ОбъектИзменен
		ИЛИ ТабличнаяЧасть.Количество() <> Таблица.Количество() Тогда
		ТабличнаяЧасть.Загрузить(Таблица);
		ЗагружаемыеДанные.ОбъектИзменен = Истина;
	Иначе
		ИсключитьКолонки = СтрРазделить("НомерСтроки,КлючСвязи,ИдентификаторСтроки", ",");
		Если НЕ ПустаяСтрока(ИсключитьРеквизиты) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключитьКолонки, СтрРазделить(ИсключитьРеквизиты,","));
		КонецЕсли;
		Для Индекс = 0 По Таблица.Количество()-1 Цикл
			Для каждого Колонка Из Таблица.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				Если ИсключитьКолонки.Найти(ИмяКолонки) <> Неопределено Тогда
					Продолжить;
				ИначеЕсли ТабличнаяЧасть[Индекс][ИмяКолонки] <> Таблица[Индекс][ИмяКолонки] Тогда
					ЗагружаемыеДанные.ОбъектИзменен = Истина;
					ТабличнаяЧасть.Загрузить(Таблица);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыОбъекта(ЗагружаемыеДанные, СписокРеквизитов = Неопределено)
	
	Объект = ЗагружаемыеДанные.Объект;
	
	Если СписокРеквизитов = Неопределено Тогда
		СписокРеквизитов = СписокДополнительныхРеквизитов(ЗагружаемыеДанные);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СписокРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗначений = Новый Структура(СписокРеквизитов);
	ЗаполнитьЗначенияСвойств(СтруктураЗначений, ЗагружаемыеДанные.ОбъектХранения);
	
	Для каждого КлючИЗначение Из СтруктураЗначений Цикл
		
		ОписаниеРеквизита = ЗагружаемыеДанные.Описание.РеквизитыДополнительные[КлючИЗначение.Ключ]; // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
		ОписаниеСвойства  = ОписаниеРеквизита.ОписаниеСвойства;
		
		Если КлючИЗначение.Значение = Неопределено 
			И (НЕ ОписаниеРеквизита.СоставнойТип
				ИЛИ НастройкиРеквизитов.Найти(ОписаниеРеквизита.Имя, "ИмяРеквизита") = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеЗначение = ОписаниеСвойства.СвойствоТипЗначения.ПривестиЗначение(КлючИЗначение.Значение);
		
		Если ОписаниеСвойства.СвойствоЭтоДополнительноеСведение Тогда
			НоваяЗапись = ЗагружаемыеДанные.ДополнительныеСведения.Добавить();
			НоваяЗапись.Свойство = ОписаниеСвойства.Свойство;
			НоваяЗапись.Значение = НовоеЗначение;
			Продолжить;
		КонецЕсли;
		
		Кэш.ОтборСвойство.Свойство = ОписаниеСвойства.Свойство;
		НайденныеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(Кэш.ОтборСвойство);
		
		Если ЗначениеСвойстваЗаполнено(НовоеЗначение) Тогда
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаСвойства = НайденныеСтроки[0];
			Иначе
				СтрокаСвойства = Объект.ДополнительныеРеквизиты.Добавить();
				СтрокаСвойства.Свойство = Кэш.ОтборСвойство.Свойство;
			КонецЕсли;
			Если НовоеЗначение <> СтрокаСвойства.Значение Тогда
				СтрокаСвойства.Значение = НовоеЗначение;
				ЗагружаемыеДанные.ОбъектИзменен = Истина;
			КонецЕсли;
		ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
			Объект.ДополнительныеРеквизиты.Удалить(НайденныеСтроки[0]);
			ЗагружаемыеДанные.ОбъектИзменен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеХарактеристики(ЗагружаемыеДанные, РеквизитыВидаНоменклатуры, НаименованиеПоСвойствам = Ложь)
	
	Если ПропуститьОбработкуОбъекта(ЗагружаемыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеХарактеристики = "";
	ОбъектХранения = ЗагружаемыеДанные.ОбъектХранения;
	
	Если (НЕ ОбъектХранения.Свойство("НаименованиеХарактеристики", НаименованиеХарактеристики)
				ИЛИ НЕ ЗначениеЗаполнено(НаименованиеХарактеристики))
		И (НЕ ЗагружаемыеДанные.Найден
				ИЛИ НаименованиеПоСвойствам) Тогда
		
		НаименованиеХарактеристики = НаименованиеПоСвойствам(ЗагружаемыеДанные);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
		СоответствиеРеквизитов = Новый Структура;
		СоответствиеРеквизитов.Вставить("Наименование",       "ШаблонРабочегоНаименованияХарактеристики");
		СоответствиеРеквизитов.Вставить("НаименованиеПолное", "ШаблонНаименованияДляПечатиХарактеристики");
		Для каждого КлючИЗначение Из СоответствиеРеквизитов Цикл
			Если ПустаяСтрока(РеквизитыВидаНоменклатуры[КлючИЗначение.Значение]) Тогда
				УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, КлючИЗначение.Ключ, НаименованиеХарактеристики);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеПоСвойствам(ЗагружаемыеДанные)
	
	ЗаголовкиСвойств = ПолучитьСоздатьСвойствоКэша("ЗаголовкиСвойств", "Структура");
	ЗаголовкиСвойствПоКлючу = Неопределено;
	
	Если НЕ ЗаголовкиСвойств.Свойство(ЗагружаемыеДанные.КлючЗагружаемыхДанных, ЗаголовкиСвойствПоКлючу) Тогда
		ЗаголовкиСвойствПоКлючу = Новый Соответствие;
		Для каждого КлючИЗначение Из ЗагружаемыеДанные.Описание.РеквизитыДополнительные Цикл
			ОписаниеСвойства = КлючИЗначение.Значение.ОписаниеСвойства;
			ЗаголовкиСвойствПоКлючу.Вставить(ОписаниеСвойства.Свойство, ОписаниеСвойства.СвойствоЗаголовок);
		КонецЦикла;
		ЗаголовкиСвойств.Вставить(ЗагружаемыеДанные.КлючЗагружаемыхДанных, ЗаголовкиСвойствПоКлючу);
	КонецЕсли;
	
	ЧастиНаименования = Новый СписокЗначений();
	Для каждого Строка Из ЗагружаемыеДанные.Объект.ДополнительныеРеквизиты Цикл
		ЗаголовокСвойства = ЗаголовкиСвойствПоКлючу.Получить(Строка.Свойство);
		Если НЕ ЗначениеЗаполнено(ЗаголовокСвойства) Тогда
			ЗаголовокСвойства = Строка(Строка.Свойство);
		КонецЕсли;
		ЧастиНаименования.Добавить(СтрШаблон("%1: %2", ЗаголовокСвойства, Строка.Значение));
	КонецЦикла;
	ЧастиНаименования.СортироватьПоЗначению();
	
	Возврат СтрСоединить(ЧастиНаименования.ВыгрузитьЗначения(), "; ");
	
КонецФункции

Процедура ЗаполнитьВидыРабочихЦентровПоОперациям(ЗагружаемыеДанные, ДанныеОпераций)
	
	Если ДанныеОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийОбъект = ЗагружаемыеДанные.Объект; // СправочникОбъект.ЭтапыПроизводства
	
	ДанныеЭтапа = Новый Структура;
	ДанныеЭтапа.Вставить("Подразделение",                    ТекущийОбъект.Подразделение);
	ДанныеЭтапа.Вставить("ПорядокРаботыВидовРабочихЦентров", ТекущийОбъект.ПорядокРаботыВидовРабочихЦентров);
	ДанныеЭтапа.Вставить("ВидыРабочихЦентров",               ТекущийОбъект.ВидыРабочихЦентров.ВыгрузитьКолонки());
	ДанныеЭтапа.Вставить("АльтернативныеВидыРабочихЦентров", ТекущийОбъект.АльтернативныеВидыРабочихЦентров.ВыгрузитьКолонки());
	
	РедакторПроизводственногоПроцесса.ЗаполнитьВидыРабочихЦентровПоОперациям(ДанныеЭтапа, ДанныеОпераций);
	
	УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "ПорядокРаботыВидовРабочихЦентров", ДанныеЭтапа.ПорядокРаботыВидовРабочихЦентров);
	ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанные, ДанныеЭтапа.ВидыРабочихЦентров, "ВидыРабочихЦентров");
	ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанные, ДанныеЭтапа.АльтернативныеВидыРабочихЦентров, "АльтернативныеВидыРабочихЦентров");
	
КонецПроцедуры

Функция УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, ИмяРеквизита, Значение)
	
	СтароеЗначение = ЗагружаемыеДанные.Объект[ИмяРеквизита];
	
	Если ЗагружаемыеДанные.ОбъектИзменен Тогда
		ЗагружаемыеДанные.Объект[ИмяРеквизита] = Значение;
		Возврат ЗагружаемыеДанные.Объект[ИмяРеквизита] <> СтароеЗначение;
	КонецЕсли;
	
	ОписаниеРеквизита = Неопределено; // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
	Для каждого ИмяГруппы Из УправлениеДаннымиОбИзделияхПовтИсп.ГруппыРеквизитовШапкиОбъекта(Истина) Цикл
		Если ЗагружаемыеДанные.Описание[ИмяГруппы].Свойство(ИмяРеквизита, ОписаниеРеквизита) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовоеЗначение = ОписаниеРеквизита.Тип.ПривестиЗначение(Значение);
	
	Если НовоеЗначение <> СтароеЗначение Тогда
		ЗагружаемыеДанные.Объект[ИмяРеквизита] = НовоеЗначение;
		ЗагружаемыеДанные.ОбъектИзменен        = Истина;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиПоКлючевымПолям(ЗагружаемыеДанные)
	
	Результат = Неопределено;
	
	КлючЗагружаемыхДанных = ЗагружаемыеДанные.КлючЗагружаемыхДанных;
	Описание = ЗагружаемыеДанные.Описание; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
	ОбъектХранения = ЗагружаемыеДанные.ОбъектХранения;
	
	ДанныеПоискаПоКлючевымПолям = ПолучитьСоздатьСвойствоКэша("ДанныеПоискаПоКлючевымПолям", "Структура");
	ДанныеПоиска = Неопределено;
	
	Если НЕ ДанныеПоискаПоКлючевымПолям.Свойство(КлючЗагружаемыхДанных, ДанныеПоиска) Тогда
		ДанныеПоиска = Новый Структура;
		ДанныеПоиска.Вставить("КлючевыеПоля", Новый Массив);
		ДанныеПоиска.Вставить("ИсторияПоиска", Новый Соответствие);
		ДанныеПоискаПоКлючевымПолям.Вставить(КлючЗагружаемыхДанных, ДанныеПоиска);
		Для каждого НастройкаРеквизита Из НастройкиРеквизитов Цикл
			Если НастройкаРеквизита.ПолеПоиска Тогда
				ДанныеПоиска.КлючевыеПоля.Добавить(НастройкаРеквизита.ОписаниеРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеПоиска.КлючевыеПоля.Количество() > 0 Тогда
		
		ПравилоРегистрироватьОшибку = УправлениеДаннымиОбИзделияхКлиентСервер.ПравилоРазрешенияКонфликтаПриПоискеРегистрироватьОшибку();
		ПравилоСортировать          = УправлениеДаннымиОбИзделияхКлиентСервер.ПравилоРазрешенияКонфликтаПриПоискеСортировать();
		КонфликтПриПоиске           = "3249bd7f-54f5-4261-9918-815769906036";
		
		Запрос = Новый Запрос;
		
		МассивПредставлений = Новый Массив;
		МассивУсловий       = Новый Массив;
		Для каждого ОписаниеРеквизита Из ДанныеПоиска.КлючевыеПоля Цикл // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
			ЗначениеПоля = ОбъектХранения[ОписаниеРеквизита.Имя];
			МассивПредставлений.Добавить(СтрШаблон("%1 (%2)", ОписаниеРеквизита.Представление, ЗначениеПоля));
			МассивУсловий.Добавить(СтрШаблон("Т.%1 = &%1", ОписаниеРеквизита.Имя));
			Запрос.УстановитьПараметр(ОписаниеРеквизита.Имя, ЗначениеПоля);
		КонецЦикла;
		
		ХешСуммаЗначенийКлючевыхПолей = ХешПоЗначениямСтруктуры(Запрос.Параметры).ХешСумма;
		
		Результат = ДанныеПоиска.ИсторияПоиска.Получить(ХешСуммаЗначенийКлючевыхПолей);
		
		Если Результат = Неопределено Тогда
		
			Настройка = Неопределено; // см. УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеНастройкиРазрешенияКонфликтаПриПоискеКонструктор
			Если НЕ НастройкиИсточникаДанных.Свойство("РазрешениеКонфликтовПриПоиске")
				ИЛИ НЕ НастройкиИсточникаДанных.РазрешениеКонфликтовПриПоиске.Свойство(КлючЗагружаемыхДанных, Настройка)
				ИЛИ (Настройка.Правило = ПравилоСортировать
							И Настройка.НастройкиСортировки.Количество() = 0) Тогда
				Настройка = УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеНастройкиРазрешенияКонфликтаПриПоискеКонструктор();
			КонецЕсли;
		
			ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	Т.Ссылка КАК Ссылка
			|ИЗ
			|	&ИмяТаблицы КАК Т
			|
			|ГДЕ
			|	НЕ Т.ПометкаУдаления
			|	И НЕ Т.ЭтоГруппа
			|	И &ОтборПоКлючевымПолям
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", Описание.ПолноеИмя);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоКлючевымПолям", СтрСоединить(МассивУсловий, " И "));
			
			Если Настройка.Правило = ПравилоСортировать Тогда
				ЭлементыСортировки = Новый Массив;
				Для каждого ЭлементСортировки Из Настройка.НастройкиСортировки Цикл // см. УправлениеДаннымиОбИзделияхКлиентСервер.ОписаниеЭлементаСортировкиКонструктор
					ЭлементыСортировки.Добавить(СтрШаблон("Т.%1 %2", ЭлементСортировки.ИмяРеквизита, ЭлементСортировки.Направление));
				КонецЦикла;
				ТекстЗапроса = ТекстЗапроса + СтрШаблон("
				|
				|УПОРЯДОЧИТЬ ПО
				|	%1
				|", СтрСоединить(ЭлементыСортировки, ", "));
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				Если Настройка.Правило = ПравилоСортировать Тогда
					Результат = Выборка.Ссылка;
				ИначеЕсли Настройка.Правило = ПравилоРегистрироватьОшибку
						И Выборка.Количество() = 1 Тогда
					Результат = Выборка.Ссылка;
				ИначеЕсли Настройка.Правило = ПравилоРегистрироватьОшибку
						И Выборка.Количество() > 1 Тогда
					Результат = КонфликтПриПоиске;
				КонецЕсли;
				ДанныеПоиска.ИсторияПоиска.Вставить(ХешСуммаЗначенийКлючевыхПолей, Результат);
			КонецЕсли;
		
		КонецЕсли;
		
		Если Результат = КонфликтПриПоиске Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'При поиске по ключевым полям в справочнике ""%1"" обнаружено более одного элемента.
					|Поля поиска: %2';
					|en = 'More than one item is detected during the search by the key fields in the %1 catalog.
					|Search fields: %2'"),
				Описание.Представление, СтрСоединить(МассивПредставлений, "; "));
			ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ПоискОбъекта,
				ТекстСообщения,
				КлючЗагружаемыхДанных,
				ОбъектХранения);
			ЗаписьПротокола.СсылкаНаОбъект = Описание.ОбъектМетаданныхПустаяСсылка;
			ЗагружаемыеДанные.Отказ = Истина;
			Результат = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ЗагружаемыеДанные.Ссылка = Результат;
		ЗагружаемыеДанные.НайденПоКлючевымПолям = Истина;
	КонецЕсли;
	
	Возврат ЗагружаемыеДанные.НайденПоКлючевымПолям;
	
КонецФункции

Функция НайтиХарактеристику(ЗагружаемыеДанные, ВладелецХарактеристик, РеквизитыВидаНоменклатуры)
	
	ОбъектХранения = ЗагружаемыеДанные.ОбъектХранения;
	
	РеквизитыХарактеристики = Новый Структура(РеквизитыВидаНоменклатуры.СписокРеквизитов_НаборСвойствХарактеристик);
	ЗаполнитьЗначенияСвойств(РеквизитыХарактеристики, ОбъектХранения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецХарактеристик", ВладелецХарактеристик);
	
	ШаблонОтборПоСвойству = "Свойства.Ссылка = &%1 И ЕСТЬNULL(ЗначенияСвойств.Значение, НЕОПРЕДЕЛЕНО) = &%2";
	
	СписокСвойствВсех        = Новый Массив;
	СписокСвойствЗаполненных = Новый Массив;
	СписокОтборов            = Новый Массив;
	Для каждого КлючИЗначение Из РеквизитыХарактеристики Цикл
		
		ОписаниеСвойства = ЗагружаемыеДанные.Описание.РеквизитыДополнительные[КлючИЗначение.Ключ].ОписаниеСвойства;
		
		СписокСвойствВсех.Добавить(ОписаниеСвойства.Свойство);
		
		ИмяПараметраСвойство = СтрШаблон("Свойство_%1",  КлючИЗначение.Ключ);
		ИмяПараметраЗначение = СтрШаблон("Значение_%1" , КлючИЗначение.Ключ);
		
		Запрос.УстановитьПараметр(ИмяПараметраСвойство, ОписаниеСвойства.Свойство);
		
		ЗначениеСвойства = ОписаниеСвойства.СвойствоТипЗначения.ПривестиЗначение(КлючИЗначение.Значение);
		Если ЗначениеСвойстваЗаполнено(ЗначениеСвойства) Тогда
			Запрос.УстановитьПараметр(ИмяПараметраЗначение, ЗначениеСвойства);
			СписокСвойствЗаполненных.Добавить(ОписаниеСвойства.Свойство);
		Иначе
			Запрос.УстановитьПараметр(ИмяПараметраЗначение, Неопределено);
		КонецЕсли;
		
		СписокОтборов.Добавить(СтрШаблон(ШаблонОтборПоСвойству, ИмяПараметраСвойство, ИмяПараметраЗначение));
		
	КонецЦикла;
	
	Если СписокСвойствВсех.ВГраница() = -1 Тогда
		
		НаименованиеХарактеристики = Неопределено;
		Если НЕ ОбъектХранения.Свойство("НаименованиеХарактеристики", НаименованиеХарактеристики)
			ИЛИ НЕ ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
			Возврат Ложь;
		КонецЕсли;
			
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Характеристики.Ссылка КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|
		|ГДЕ
		|	Характеристики.Владелец = &ВладелецХарактеристик
		|	И Характеристики.Наименование = &НаименованиеХарактеристики
		|	И НЕ Характеристики.ПометкаУдаления
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойств
		|		ГДЕ
		|			Характеристики.Ссылка = ЗначенияСвойств.Ссылка)
		|";
		
		Запрос.УстановитьПараметр("НаименованиеХарактеристики", НаименованиеХарактеристики);
		
	Иначе
		
		Если СписокСвойствЗаполненных.ВГраница() = -1 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Характеристики.Ссылка КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
		|	ПО Свойства.Ссылка В (&СписокСвойств)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойств
		|	ПО Характеристики.Ссылка = ЗначенияСвойств.Ссылка
		|		И Свойства.Ссылка = ЗначенияСвойств.Свойство
		|
		|ГДЕ
		|	Характеристики.Владелец = &ВладелецХарактеристик
		|	И НЕ Характеристики.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Характеристики.Ссылка
		|	
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА
		|				&ТекстОтборовПоСвойствам
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) = &КоличествоСвойств
		|
		|";
		
		Запрос.УстановитьПараметр("КоличествоСвойств", СписокСвойствВсех.Количество());
		Запрос.УстановитьПараметр("СписокСвойств",     СписокСвойствВсех);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтборовПоСвойствам", СтрСоединить(СписокОтборов, Символы.ПС + "ИЛИ "));
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗагружаемыеДанные.Ссылка =  Выборка.Характеристика;
		ЗагружаемыеДанные.Найден = Истина;
	КонецЕсли;
	
	Возврат ЗагружаемыеДанные.Найден;
	
КонецФункции

Функция НайтиЭтап(ЗагружаемыеДанные, Спецификация, ТаблицаЭтапов, НомерЭтапа)
	
	ЗаполнитьЗначенияСвойств(Кэш.ОтборЭтапа1, ЗагружаемыеДанные.ОбъектХранения);
	Кэш.ОтборЭтапа1.Спецификация  = Спецификация;
	Кэш.ОтборЭтапа1.НомерЭтапа    = НомерЭтапа;
	Кэш.ОтборЭтапа1.Найден        = Ложь;
	
	ЗаполнитьЗначенияСвойств(Кэш.ОтборЭтапа2, Кэш.ОтборЭтапа1);
	
	СтруктурыПоиска = Новый Массив;
	СтруктурыПоиска.Добавить(Кэш.ОтборЭтапа1);
	СтруктурыПоиска.Добавить(Кэш.ОтборЭтапа2);
	
	Для каждого СтруктураПоиска Из СтруктурыПоиска Цикл
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураПоиска);
		Если ЗначениеЗаполнено(НайденныеСтроки) И НайденныеСтроки.Количество() = 1 Тогда
			НайденныеСтроки[0].Найден = Истина;
			ЗагружаемыеДанные.Найден  = Истина;
			ЗагружаемыеДанные.Ссылка  = НайденныеСтроки[0].СсылкаНаЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗагружаемыеДанные.Найден;
	
КонецФункции

Функция НайтиОперацию(ЗагружаемыеДанные, Этап, ТаблицаОпераций, НомерОперации)
	
	ЗаполнитьЗначенияСвойств(Кэш.ОтборОперации1, ЗагружаемыеДанные.ОбъектХранения);
	Кэш.ОтборОперации1.Этап          = Этап;
	Кэш.ОтборОперации1.НомерОперации = НомерОперации;
	Кэш.ОтборОперации1.Найден        = Ложь;
	
	ЗаполнитьЗначенияСвойств(Кэш.ОтборОперации2, Кэш.ОтборОперации1);
	
	СтруктурыПоиска = Новый Массив;
	СтруктурыПоиска.Добавить(Кэш.ОтборОперации1);
	СтруктурыПоиска.Добавить(Кэш.ОтборОперации2);
	
	Для каждого СтруктураПоиска Из СтруктурыПоиска Цикл
		НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(СтруктураПоиска);
		Если ЗначениеЗаполнено(НайденныеСтроки) И НайденныеСтроки.Количество() = 1 Тогда
			НайденныеСтроки[0].Найден = Истина;
			ЗагружаемыеДанные.Найден  = Истина;
			ЗагружаемыеДанные.Ссылка  = НайденныеСтроки[0].СсылкаНаЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗагружаемыеДанные.Найден;
	
КонецФункции

Функция ЗаписатьОбъект(ЗагружаемыеДанные, ПроверятьЗаполнение = Истина)
	
	ОбъектЗаписан = Ложь;
	
	Если ЗаписыватьОбъект(ЗагружаемыеДанные) Тогда
		
		Объект = ЗагружаемыеДанные.Объект; // СправочникОбъект,ДокументОбъект
		
		КлючЗагружаемыхДанных = ЗагружаемыеДанные.КлючЗагружаемыхДанных;
		Описание = ЗагружаемыеДанные.Описание; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
		ТипЗначения = ТипЗнч(Объект.Ссылка);
		ЭтоНовый = Объект.ЭтоНовый();
	
		Если ПроверятьЗаполнение
				И НЕ Объект.ПроверитьЗаполнение() Тогда
			
			ТекстОшибки = НСтр("ru = 'Не пройдена проверка заполнения объекта.';
								|en = 'Object filling is not checked.'");
			
			Для каждого ИмяРеквизита Из Описание.РеквизитыОбязательные Цикл
				Если Описание.РеквизитыИдентификаторы.Свойство(ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита)
						И НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ПроверкаЗаполненияОбъекта,
				ТекстОшибки, КлючЗагружаемыхДанных, ЗагружаемыеДанные.ОбъектХранения);
			ЗаписьПротокола.СсылкаНаОбъект = ?(ЭтоНовый, Новый (ТипЗначения), Объект.Ссылка);
			
			ПонизитьСтатусОбъекта(Объект);
			
			Если Описание.ЭтоДокумент
				И НЕ ЭтоНовый
				И Объект.Проведен Тогда
				Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				Объект.Записать();
			КонецЕсли;
			
			ЗаписьПротокола.СсылкаНаОбъект = Объект.Ссылка;
			
		ИначеЕсли Описание.ЭтоДокумент Тогда
			
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			Объект.Записать();
			
		КонецЕсли;
		
		УвеличитьЗначениеСчетчикаПоСсылке(?(ЗагружаемыеДанные.Найден, "Обновлено", "Создано"), Объект.Ссылка);
		
		ОбъектЗаписан = Истина;
		
	КонецЕсли;
	
	ЗаписатьДополнительныеСведения(ЗагружаемыеДанные);
	
	Возврат ОбъектЗаписан;
	
КонецФункции

Функция ЗаписатьОбъектВПопытке(ЗагружаемыеДанные, ПроверятьЗаполнение = Истина)
	
	Попытка
	
		Возврат ЗаписатьОбъект(ЗагружаемыеДанные, ПроверятьЗаполнение);
	
	Исключение
		
		ОбработатьОшибкуЗаписиОбъекта(ЗагружаемыеДанные.Объект,
			ИнформацияОбОшибке(),
			ЗагружаемыеДанные.КлючЗагружаемыхДанных,
			ЗагружаемыеДанные.ОбъектХранения);
		Возврат Ложь;
	
	КонецПопытки;
	
КонецФункции

Процедура ЗаписатьДополнительныеСведения(ЗагружаемыеДанные)
	
	Если ПропуститьОбработкуОбъекта(ЗагружаемыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСведения = ЗагружаемыеДанные.ДополнительныеСведения;
	
	Если ДополнительныеСведения.Количество() > 0 Тогда
		
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЗагружаемыеДанные.Ссылка);
		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаСведение Из ДополнительныеСведения Цикл
			Найдено = Ложь;
			Для каждого Запись Из НаборЗаписей Цикл
				Если СтрокаСведение.Свойство = Запись.Свойство Тогда
					Если ЗначениеЗаполнено(СтрокаСведение.Значение) Тогда
						Запись.Значение = СтрокаСведение.Значение;
					Иначе
						НаборЗаписей.Удалить(Запись);
					КонецЕсли;
					Найдено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ Найдено И ЗначениеЗаполнено(СтрокаСведение.Значение) Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Объект   = ЗагружаемыеДанные.Ссылка;
				НоваяЗапись.Свойство = СтрокаСведение.Свойство;
				НоваяЗапись.Значение = СтрокаСведение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураЗначенийПолейФайла(СтрокаПорцииДанных)
	
	ЗначенияПолейФайла = Новый Структура;
	
	Для каждого Колонка Из ПорцияДанных.Колонки Цикл
		Если НЕ СтрокаПорцииДанных[Колонка.Имя] = Неопределено Тогда
			ЗначенияПолейФайла.Вставить(Колонка.Имя, СтрокаПорцииДанных[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(ЗначенияПолейФайла);
	
КонецФункции

Функция ВладелецДополнительныхЗначений(ОписаниеРеквизита)
	
	Результат = Неопределено;
	
	ОписаниеСвойства = ОписаниеРеквизита.ОписаниеСвойства;
	Если ОписаниеСвойства <> Неопределено Тогда
		Результат = ОписаниеСвойства.СвойствоВладелецДополнительныхЗначений;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнитьСтатусСпецификации(ЗагружаемыеДанные)
	
	Объект = ЗагружаемыеДанные.Объект;
	ДополнительныеСвойства = ЗначенияДополнительныхСвойств(ЗагружаемыеДанные.ОбъектХранения);
	
	Если Кэш.ЕстьРасчетПоляСтатус Тогда
		СтатусСпецификаций = ПолучитьСоздатьСвойствоКэша("СтатусСпецификаций", "Структура");
		Если СтатусСпецификаций.Количество() = 0 Тогда
			Отбор = Новый Структура("ИмяРеквизита,КлючЗагружаемыхДанных,СпособУстановкиЗначения",
				"Статус", Ключ_Спецификация, Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.УстановитьВЗначение);
			НайденныеСтроки = НастройкиРеквизитовИсточникаДанных.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗначениеСтатуса = НайденныеСтроки[0].Значение;
			Иначе
				ЗначениеСтатуса = Неопределено;
			КонецЕсли;
			СтатусСпецификаций.Вставить("СтатусКонстанта", ЗначениеСтатуса <> Неопределено);
			СтатусСпецификаций.Вставить("СтатусЗначение",  ЗначениеСтатуса);
		КонецЕсли;
	КонецЕсли;
	
	НовыйСтатус = Неопределено;
	
	Если ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий() Тогда
		
		Если Кэш.ЕстьРасчетПоляСтатус
				И НЕ СтатусСпецификаций.СтатусКонстанта
				И ЗначениеЗаполнено(Объект.Статус) Тогда
			ДополнительныеСвойства.Вставить("СтатусЗначение", Объект.Статус);
		КонецЕсли;
		
	ИначеЕсли ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства() Тогда
		
		Если НЕ Кэш.ЕстьРасчетПоляСтатус И НЕ Объект.ПометкаУдаления Тогда
			НовыйСтатус = Перечисления.СтатусыСпецификаций.Действует;
		ИначеЕсли Кэш.ЕстьРасчетПоляСтатус И СтатусСпецификаций.СтатусКонстанта Тогда
			НовыйСтатус = СтатусСпецификаций.СтатусЗначение;
		ИначеЕсли Кэш.ЕстьРасчетПоляСтатус И НЕ СтатусСпецификаций.СтатусКонстанта Тогда
			Если ДополнительныеСвойства.Свойство("СтатусЗначение") Тогда
				НовыйСтатус = ДополнительныеСвойства.СтатусЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Если НовыйСтатус <> Неопределено Тогда
		УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "Статус", НовыйСтатус);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		УстановитьЗначениеРеквизитаОбъекта(ЗагружаемыеДанные, "Статус", Перечисления.СтатусыСпецификаций.ВРазработке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПонизитьСтатусОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.РесурсныеСпецификации")
			И Объект.Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
		Объект.Статус = Перечисления.СтатусыСпецификаций.ВРазработке;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РазрешениеНаЗаменуМатериалов")
			И Объект.Статус = Перечисления.СтатусыРазрешенийНаЗаменуМатериалов.Утверждено Тогда
		Объект.Статус = Перечисления.СтатусыРазрешенийНаЗаменуМатериалов.Создано;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеОсновнойИдентификатор()
	
	Результат = "";
	
	Если ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаИзделияИМатериалы()
			ИЛИ ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаПроизводственноеОборудование()
			ИЛИ ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаЗаменыМатериалов() Тогда
		Результат = "Идентификатор";
	ИначеЕсли ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаСоставыИзделий()
			ИЛИ ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаТехнологияПроизводства() Тогда
		Результат = "ИдентификаторТехнологии";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСоответствиеОбъекта(ЗагружаемыеДанные)
	
	Если НЕ ЗагружаемыеДанные.Отказ
			И НЕ ЗагружаемыеДанные.НайденПоРегиструСоответствия Тогда
		Если ЗначениеЗаполнено(ЗагружаемыеДанные.ИдентификаторРасчетный) Тогда
			РегистрыСведений.СоответствиеОбъектовДляЗагрузкиНСИ.ДобавитьЗапись(ИсточникДанных,
				ЗагружаемыеДанные.ИдентификаторРасчетный, ЗагружаемыеДанные.Ссылка);
		Иначе
			ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(Перечисления.ЗагрузкаНСИТипыПроблем.ЗаполнениеПолейВФайлеДанных,
				НСтр("ru = 'Ошибка добавления записи в регистр соответствия. Не задан идентификатор объекта.';
					|en = 'Error adding an entry to the mapping register. The object ID is not set.'"),
				ЗагружаемыеДанные.КлючЗагружаемыхДанных,
				ЗагружаемыеДанные.ОбъектХранения);
			ЗаписьПротокола.СсылкаНаОбъект = ЗагружаемыеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьСоответствиеНоменклатуры(ЗагружаемыеДанныеНоменклатура, ЗагружаемыеДанныеХарактеристика = Неопределено)
	
	Номенклатура   = Неопределено;
	Характеристика = Неопределено;
	
	Если НЕ ЗагружаемыеДанныеНоменклатура.Отказ
		И НЕ ЗагружаемыеДанныеНоменклатура.НайденПоРегиструСоответствия Тогда
		Номенклатура = ЗагружаемыеДанныеНоменклатура.Ссылка;
	КонецЕсли;
	
	Если НЕ ЗагружаемыеДанныеХарактеристика = Неопределено
		И НЕ ЗагружаемыеДанныеХарактеристика.Отказ
		И НЕ ЗагружаемыеДанныеХарактеристика.НайденПоРегиструСоответствия Тогда
		Характеристика = ЗагружаемыеДанныеХарактеристика.Ссылка;
	КонецЕсли;
	
	Если Номенклатура <> Неопределено ИЛИ Характеристика <> Неопределено Тогда
		РегистрыСведений.СоответствиеНоменклатурыДляЗагрузкиНСИ.ДобавитьЗапись(ИсточникДанных,
			ЗагружаемыеДанныеНоменклатура.ИдентификаторРасчетный, Номенклатура, Характеристика);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСвойстваЗаполнено(ЗначениеСвойства)
	
	Возврат ЗначениеЗаполнено(ЗначениеСвойства) И НЕ ЗначениеСвойства = Ложь;
	
КонецФункции

Функция ВариантОбновленияВсегда()
	
	Возврат НастройкиИсточникаДанных.ОбновлениеОбъектов.ВариантОбновления =
		Перечисления.ЗагрузкаНСИВариантыОбновленияОбъекта.Всегда;
	
КонецФункции

Функция ВариантОбновленияПриНаличииИзменений()
	
	Возврат НастройкиИсточникаДанных.ОбновлениеОбъектов.ВариантОбновления =
		Перечисления.ЗагрузкаНСИВариантыОбновленияОбъекта.ПриНаличииИзменений;
	
КонецФункции

Функция ВариантОбновленияНикогда()
	
	Возврат НастройкиИсточникаДанных.ОбновлениеОбъектов.ВариантОбновления =
		Перечисления.ЗагрузкаНСИВариантыОбновленияОбъекта.Никогда;
	
КонецФункции

Функция ЗаписыватьОбъект(ЗагружаемыеДанные)
	
	Возврат ЗагружаемыеДанные.Объект <> Неопределено
		И (ВариантОбновленияВсегда()
			ИЛИ (ВариантОбновленияПриНаличииИзменений() И ЗагружаемыеДанные.ОбъектИзменен)
			ИЛИ (ВариантОбновленияНикогда() И НЕ ЗагружаемыеДанные.Найден));
	
КонецФункции

Функция ПропуститьОбработкуОбъекта(ЗагружаемыеДанные)
	
	Возврат ЗагружаемыеДанные = Неопределено
		ИЛИ ЗагружаемыеДанные.Отказ
		ИЛИ (ВариантОбновленияНикогда() И ЗагружаемыеДанные.Найден);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Кэш

Процедура ИнициализироватьКэш()
	
	Кэш = Новый Структура;
	
	Кэш.Вставить("ОшибкаЗанесенаВПротокол", Ложь);
	Кэш.Вставить("ОбработанныеФайлы", Новый Массив);
	Кэш.Вставить("НачалоВыполнения", ТекущаяДатаСеанса());
	
	СтруктураСчетчиков = Новый Структура;
	СтруктураСчетчиков.Вставить("ВОбработке",      СтруктураРазделаСчетчиковКонструктор());
	СтруктураСчетчиков.Вставить("Зафиксированные", СтруктураРазделаСчетчиковКонструктор());
	Кэш.Вставить("СтруктураСчетчиков", СтруктураСчетчиков);
	
	ТаблицаСвязиМатериалОперация = Новый ТаблицаЗначений;
	ТаблицаСвязиМатериалОперация.Колонки.Добавить("ДатаЗаписи",                Новый ОписаниеТипов("Дата"));
	ТаблицаСвязиМатериалОперация.Колонки.Добавить("ИдентификаторТехнологии",   Новый ОписаниеТипов("Строка"));
	ТаблицаСвязиМатериалОперация.Колонки.Добавить("ИндексСтроки",              Новый ОписаниеТипов());
	ТаблицаСвязиМатериалОперация.Колонки.Добавить("КлючСвязиМатериалОперация", Новый ОписаниеТипов("Строка"));
	ТаблицаСвязиМатериалОперация.Колонки.Добавить("Этап",                      Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ТаблицаСвязиМатериалОперация.Колонки.Добавить("Операция",                  Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	Кэш.Вставить("ТаблицаСвязиМатериалОперация", ТаблицаСвязиМатериалОперация);
	
	ТаблицаДополнительныхСвойствСостава = Новый ТаблицаЗначений;
	ТаблицаДополнительныхСвойствСостава.Колонки.Добавить("ДатаЗаписи",              Новый ОписаниеТипов("Дата"));
	ТаблицаДополнительныхСвойствСостава.Колонки.Добавить("ИдентификаторТехнологии", Новый ОписаниеТипов("Строка"));
	ТаблицаДополнительныхСвойствСостава.Колонки.Добавить("ДополнительныеСвойства",  Новый ОписаниеТипов());
	Кэш.Вставить("ТаблицаДополнительныхСвойствСостава", ТаблицаДополнительныхСвойствСостава);
	
	ГраницаАктуальностиЗаписейКэша = ТекущаяДатаСеанса() - 2 * 86400;
	
	Запись = РегистрыСведений.НастройкиВыполненияЗагрузкиНСИ.СоздатьМенеджерЗаписи();
	Запись.ИсточникДанных = ИсточникДанных;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		КэшСохраненный = Запись.ДополнительныеПараметры.Получить();
		Если КэшСохраненный <> Неопределено Тогда
			Попытка
				Если КэшСохраненный.Свойство("ТаблицаСвязиМатериалОперация") Тогда
					Для каждого Строка Из КэшСохраненный.ТаблицаСвязиМатериалОперация Цикл
						Если Строка.ДатаЗаписи > ГраницаАктуальностиЗаписейКэша Тогда
							ЗаполнитьЗначенияСвойств(Кэш.ТаблицаСвязиМатериалОперация.Добавить(), Строка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если КэшСохраненный.Свойство("ТаблицаДополнительныхСвойствСостава") Тогда
					Для каждого Строка Из КэшСохраненный.ТаблицаДополнительныхСвойствСостава Цикл
						Если Строка.ДатаЗаписи > ГраницаАктуальностиЗаписейКэша Тогда
							ЗаполнитьЗначенияСвойств(Кэш.ТаблицаДополнительныхСвойствСостава.Добавить(), Строка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
					УровеньЖурналаРегистрации.Ошибка,,
					ИсточникДанных,
					НСтр("ru = 'Ошибка восстановления данных кэша.';
						|en = 'An error occurred when restoring cache data.'"));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ЗакэшироватьСтруктурыОтборов();
	
	ЗакэшироватьПризнакиНастройкиРеквизитов();
	
КонецПроцедуры

Функция СохраняемыеДанныеКэша()
	
	Возврат "ТаблицаСвязиМатериалОперация,ТаблицаДополнительныхСвойствСостава";
	
КонецФункции

Функция ПолучитьСоздатьСвойствоКэша(ИмяСвойства, ИмяТипа = "")
	
	Свойство = Неопределено;
	Если НЕ Кэш.Свойство(ИмяСвойства, Свойство) Тогда
		Свойство = ?(ПустаяСтрока(ИмяТипа), Неопределено, Новый (ИмяТипа));
		Кэш.Вставить(ИмяСвойства, Свойство);
	КонецЕсли;
	
	Возврат Свойство;
	
КонецФункции

Функция СписокОсновныхРеквизитов(ЗагружаемыеДанные)
	
	Возврат СписокРеквизитов("СпискиОсновныхРеквизитов",
		ЗагружаемыеДанные.ОбъектХранения, ЗагружаемыеДанные.КлючЗагружаемыхДанных, "РеквизитыСтандартные,РеквизитыПрикладные");
	
КонецФункции

Функция СписокДополнительныхРеквизитов(ЗагружаемыеДанные)
	
	Возврат СписокРеквизитов("СпискиДополнительныхРеквизитов",
		ЗагружаемыеДанные.ОбъектХранения, ЗагружаемыеДанные.КлючЗагружаемыхДанных, "РеквизитыДополнительные");
	
КонецФункции

Функция СписокРеквизитов(СвойствоКэша, ОбъектХранения, КлючЗагружаемыхДанных, ГруппыРеквизитов)
	
	СписокРеквизитов = "";
	
	СпискиРеквизитов = ПолучитьСоздатьСвойствоКэша(СвойствоКэша, "Структура");
	Если НЕ СпискиРеквизитов.Свойство(КлючЗагружаемыхДанных) Тогда
		Описание = ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных]; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
		Для каждого ГруппаРеквизитов Из СтрРазделить(ГруппыРеквизитов,",") Цикл
			Для каждого КлючИЗначение Из Описание[ГруппаРеквизитов] Цикл
				ИмяРеквизита = КлючИЗначение.Ключ;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектХранения, ИмяРеквизита) Тогда
					СписокРеквизитов = СтрШаблон("%1%2%3", СписокРеквизитов, ?(ПустаяСтрока(СписокРеквизитов),"",","), ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		СпискиРеквизитов.Вставить(КлючЗагружаемыхДанных, СписокРеквизитов);
	Иначе
		СписокРеквизитов = СпискиРеквизитов[КлючЗагружаемыхДанных];
	КонецЕсли;
	
	Возврат СписокРеквизитов;
	
КонецФункции

Функция РеквизитыВидаНоменклатуры(ВидНоменклатуры)
	
	РеквизитыВидовНоменклатуры = ПолучитьСоздатьСвойствоКэша("РеквизитыВидовНоменклатуры", "Соответствие");
	РеквизитыВидаНоменклатуры  = РеквизитыВидовНоменклатуры.Получить(ВидНоменклатуры);
	
	Если РеквизитыВидаНоменклатуры = Неопределено Тогда
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить("НаборСвойств");
		Реквизиты.Добавить("НаборСвойствХарактеристик");
		Реквизиты.Добавить("ИспользованиеХарактеристик");
		Реквизиты.Добавить("ВладелецХарактеристик");
		Реквизиты.Добавить("ШаблонРабочегоНаименованияНоменклатуры");
		Реквизиты.Добавить("ШаблонРабочегоНаименованияХарактеристики");
		Реквизиты.Добавить("ШаблонНаименованияДляПечатиНоменклатуры");
		Реквизиты.Добавить("ШаблонНаименованияДляПечатиХарактеристики");
		
		РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				?(ВидНоменклатуры = Неопределено, Справочники.ВидыНоменклатуры.ПустаяСсылка(), ВидНоменклатуры),
				Реквизиты);
		
		НаборыСвойств = Новый Структура;
		НаборыСвойств.Вставить("НаборСвойств",
			Новый Структура("Общие,Список", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"), Новый Массив));
		НаборыСвойств.Вставить("НаборСвойствХарактеристик",
			Новый Структура("Общие,Список", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие"), Новый Массив));
		
		Для каждого КлючИЗначениеОписание Из ОписаниеЗагружаемыхДанных["Номенклатура"].РеквизитыДополнительные Цикл
			ОписаниеСвойства = КлючИЗначениеОписание.Значение.ОписаниеСвойства;
			Для каждого КлючИЗначениеНаборы Из НаборыСвойств Цикл
				Если ОписаниеСвойства.НаборыСвойств.Найти(РеквизитыВидаНоменклатуры[КлючИЗначениеНаборы.Ключ]) <> Неопределено
					ИЛИ ОписаниеСвойства.НаборыСвойств.Найти(КлючИЗначениеНаборы.Значение.Общие) <> Неопределено Тогда
						Список = КлючИЗначениеНаборы.Значение.Список; // Массив
						Список.Добавить(ОписаниеСвойства.СвойствоИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого КлючИЗначение Из НаборыСвойств Цикл
			РеквизитыВидаНоменклатуры.Вставить(СтрШаблон("СписокРеквизитов_%1", КлючИЗначение.Ключ), СтрСоединить(КлючИЗначение.Значение.Список, ","));
		КонецЦикла;
		РеквизитыВидаНоменклатуры.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		
		РеквизитыВидовНоменклатуры.Вставить(ВидНоменклатуры, РеквизитыВидаНоменклатуры);
		
	КонецЕсли;
	
	Возврат РеквизитыВидаНоменклатуры;
	
КонецФункции

Функция ПолучитьСоздатьСсылкуНового(Идентификатор, КлючЗагружаемыхДанных)
	
	СсылкиНового = ПолучитьСоздатьСвойствоКэша("СсылкиНового", "Структура");
	
	СсылкиНовогоПоКлючу = Неопределено;
	Если НЕ СсылкиНового.Свойство(КлючЗагружаемыхДанных, СсылкиНовогоПоКлючу) Тогда
		СсылкиНовогоПоКлючу = Новый Соответствие;
		СсылкиНового.Вставить(КлючЗагружаемыхДанных, СсылкиНовогоПоКлючу);
	КонецЕсли;
	
	СсылкаНового = СсылкиНовогоПоКлючу.Получить(Идентификатор);
	Если СсылкаНового = Неопределено Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных].ОбъектМетаданныхПустаяСсылка);
		СсылкаНового = Менеджер.ПолучитьСсылку();
		СсылкиНовогоПоКлючу.Вставить(Идентификатор, СсылкаНового);
	КонецЕсли;
	
	Возврат СсылкаНового;
	
КонецФункции

Процедура ЗакэшироватьСтруктурыОтборов()
	
	Кэш.Вставить("ОтборСпецификация",             Новый Структура("Спецификация"));
	Кэш.Вставить("ОтборТехнология",               Новый Структура("ИдентификаторТехнологии"));
	Кэш.Вставить("ОтборТехнологияКлючСвязи",      Новый Структура("ИдентификаторТехнологии,КлючСвязиМатериалОперация"));
	Кэш.Вставить("ОтборСвойство",                 Новый Структура("Свойство"));
	Кэш.Вставить("ОтборИдентификаторКлючРаздела", Новый Структура("Идентификатор,КлючРаздела"));
	СписокРеквизитов = "Спецификация,Подразделение,Найден";
	Кэш.Вставить("ОтборЭтапа1",                   Новый Структура(СписокРеквизитов+",НомерЭтапа"));
	Кэш.Вставить("ОтборЭтапа2",                   Новый Структура(СписокРеквизитов));
	СписокРеквизитов = "Этап,Наименование,Найден";
	Кэш.Вставить("ОтборОперации1",                Новый Структура(СписокРеквизитов+",НомерОперации"));
	Кэш.Вставить("ОтборОперации2",                Новый Структура(СписокРеквизитов));
	
КонецПроцедуры

Процедура ЗакэшироватьПризнакиНастройкиРеквизитов()
	
	ДобавитьПризнак("ЕстьРасчетПоляСтатус",                 "Статус",                    Ключ_Спецификация);
	ДобавитьПризнак("ЕстьРасчетПоляПроизводитсяВПроцессе",  "ПроизводитсяВПроцессе",     Ключ_Материалы);
	ДобавитьПризнак("ЕстьРасчетПоляНомерЭтапа",             "НомерЭтапа",                Ключ_Этапы);
	ДобавитьПризнак("ЕстьРасчетПоляНомерСледующегоЭтапа",   "НомерСледующегоЭтапа",      Ключ_Этапы);
	ДобавитьПризнак("ЕстьРасчетПоляНаименованиеЭтапа",      "Наименование",              Ключ_Этапы);
	ДобавитьПризнак("ЕстьРасчетПоляНомерОперации",          "НомерОперации",             Ключ_Операции);
	ДобавитьПризнак("ЕстьРасчетПоляНомерСледующейОперации", "НомерСледующейОперации",    Ключ_Операции);
	ДобавитьПризнак("ЕстьТочкаМаршрутаМатериала",           "КлючСвязиМатериалОперация", Ключ_Материалы);
	ДобавитьПризнак("ЕстьТочкаМаршрутаОперации",            "КлючСвязиМатериалОперация", Ключ_Операции);
	
КонецПроцедуры

Процедура ДобавитьПризнак(ИмяПризнака, ИмяРеквизита, КлючЗагружаемыхДанных)
	
	Отбор = Новый Структура("ИмяРеквизита,КлючЗагружаемыхДанных", ИмяРеквизита, КлючЗагружаемыхДанных);

	Кэш.Вставить(ИмяПризнака, НастройкиРеквизитовИсточникаДанных.НайтиСтроки(Отбор).Количество() > 0);
	
КонецПроцедуры

#Область СвязиСоставТехнология

Процедура ДобавитьСтрокуКэшаСвязейМатериаловСОперациями(ЗагружаемыеДанные, КлючСвязиМатериалОперация, ДанныеСтроки, ТаблицаПовтИсп = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(КлючСвязиМатериалОперация) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвязей     = Кэш.ТаблицаСвязиМатериалОперация; // ТаблицаЗначений
	ТаблицаМатериалов = ДанныеСтроки.Владелец(); // ТаблицаЗначений
	
	НоваяСтрока                           = ТаблицаСвязей.Добавить();
	НоваяСтрока.ДатаЗаписи                = ТекущаяДатаСеанса();
	НоваяСтрока.ИдентификаторТехнологии   = ЗагружаемыеДанные.ИдентификаторРасчетный;
	НоваяСтрока.ИндексСтроки              = ТаблицаМатериалов.Индекс(ДанныеСтроки);
	НоваяСтрока.КлючСвязиМатериалОперация = КлючСвязиМатериалОперация;
	
	Если ТаблицаПовтИсп <> Неопределено
		И ТаблицаПовтИсп.Количество() > 0 Тогда
		
		Отбор = Новый Структура("КлючСвязиМатериалОперация", КлючСвязиМатериалОперация);
		
		Для каждого НайденнаяСтрока Из ТаблицаПовтИсп.НайтиСтроки(Отбор) Цикл
			ДанныеСтроки.ЭтапРедактирование     = НайденнаяСтрока.Этап;
			ДанныеСтроки.ОперацияРедактирование = НайденнаяСтрока.Операция;
			НоваяСтрока.Этап     = НайденнаяСтрока.Этап;
			НоваяСтрока.Операция = НайденнаяСтрока.Операция;
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвязиМатериаловСОперациямиВКэше(ЗагружаемыеДанные, КлючСвязиМатериалОперация, Этап, Операция)
	
	Если НЕ ЗначениеЗаполнено(КлючСвязиМатериалОперация) Тогда
		Возврат;
	КонецЕсли;
	
	Кэш.ОтборТехнологияКлючСвязи.ИдентификаторТехнологии   = ЗагружаемыеДанные.ИдентификаторРасчетный;
	Кэш.ОтборТехнологияКлючСвязи.КлючСвязиМатериалОперация = КлючСвязиМатериалОперация;
	
	Для каждого НайденнаяСтрока Из Кэш.ТаблицаСвязиМатериалОперация.НайтиСтроки(Кэш.ОтборТехнологияКлючСвязи) Цикл
		НайденнаяСтрока.Этап     = Этап;
		НайденнаяСтрока.Операция = Операция;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвязиМатериаловСОперациямиИзКэша(ЗагружаемыеДанные)
	
	Кэш.ОтборТехнология.ИдентификаторТехнологии = ЗагружаемыеДанные.ИдентификаторРасчетный;
	
	НайденныеСтроки = Кэш.ТаблицаСвязиМатериалОперация.НайтиСтроки(Кэш.ОтборТехнология);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагружаемыеДанные.ОбъектИзменен Тогда
		МатериалыИУслуги = ЗагружаемыеДанные.Объект.МатериалыИУслуги;
	Иначе
		МатериалыИУслуги = ЗагружаемыеДанные.Объект.МатериалыИУслуги.Выгрузить();
	КонецЕсли;
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.ИндексСтроки < МатериалыИУслуги.Количество() Тогда
			СтрокаТЧ = МатериалыИУслуги[НайденнаяСтрока.ИндексСтроки];
			СтрокаТЧ.ЭтапРедактирование     = НайденнаяСтрока.Этап;
			СтрокаТЧ.ОперацияРедактирование = НайденнаяСтрока.Операция;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗагружаемыеДанные.ОбъектИзменен Тогда
		Возврат;
	Иначе
		ЗаполнитьРеквизитыТабличнойЧасти(ЗагружаемыеДанные, МатериалыИУслуги, "МатериалыИУслуги", "Этап,Операция");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьДополнительныеСвойстваИзКэша(ОбъектХранения, КлючЗагружаемыхДанных)
	
	Если КлючЗагружаемыхДанных <> "РесурсныеСпецификации" Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТехнологии = Неопределено;
	Если НЕ ЗначенияРеквизитовРасчетные(ОбъектХранения).Свойство("ИдентификаторТехнологии", ИдентификаторТехнологии) Тогда
		Возврат;
	КонецЕсли;
	
	Кэш.ОтборТехнология.ИдентификаторТехнологии = ИдентификаторТехнологии;
	
	НайденныеСтроки = Кэш.ТаблицаДополнительныхСвойствСостава.НайтиСтроки(Кэш.ОтборТехнология);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ДополнительныеСвойства = ЗначенияДополнительныхСвойств(ОбъектХранения);
		Для каждого КлючИЗначение Из НайденныеСтроки[0].ДополнительныеСвойства Цикл
			ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьЗаписиСоставаИзКэша(ЗагружаемыеДанные)
	
	Кэш.ОтборТехнология.ИдентификаторТехнологии = ЗагружаемыеДанные.ИдентификаторРасчетный;
	
	Для каждого НайденнаяСтрока Из Кэш.ТаблицаДополнительныхСвойствСостава.НайтиСтроки(Кэш.ОтборТехнология) Цикл
		Кэш.ТаблицаДополнительныхСвойствСостава.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	РеквизитыПовтИсп = "КлючСвязиМатериалОперация,Этап,Операция";
	ТаблицаПовтИсп   = Кэш.ТаблицаСвязиМатериалОперация.СкопироватьКолонки(РеквизитыПовтИсп);
	
	Для каждого НайденнаяСтрока Из Кэш.ТаблицаСвязиМатериалОперация.НайтиСтроки(Кэш.ОтборТехнология) Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПовтИсп.Добавить(), НайденнаяСтрока);
		Кэш.ТаблицаСвязиМатериалОперация.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	ТаблицаПовтИсп.Свернуть(РеквизитыПовтИсп);
	Возврат ТаблицаПовтИсп;
	
КонецФункции

#КонецОбласти

#Область Счетчики

Функция СтруктураРазделаСчетчиковКонструктор()
	
	Результат = Новый Структура;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторовЗаполнено", 0);
	Результат.Вставить("СсылокНайти",              0);
	Результат.Вставить("СсылокНайдено",            0);
	Результат.Вставить("ТипыПроблем",              Новый Соответствие);
	
	Для каждого КлючИЗначение Из ВложенныеСчетчикиФакт() Цикл
		Результат.Вставить(КлючИЗначение.Ключ, Новый Соответствие);
		Результат.Вставить(СчетчикМассив(КлючИЗначение.Ключ), Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВложенныеСчетчикиФакт()
	
	Счетчики = Новый Структура;
	
	Счетчики.Вставить("Создано",    НСтр("ru = 'Создано';
										|en = 'Created'"));
	Счетчики.Вставить("Обновлено",  НСтр("ru = 'Обновлено';
										|en = 'Updated'"));
	Счетчики.Вставить("Удалено",    НСтр("ru = 'Удалено';
										|en = 'Deleted'"));
	Счетчики.Вставить("НеЗаписано", НСтр("ru = 'Не записано';
										|en = 'Not saved'"));
	
	Возврат Счетчики;
	
КонецФункции

Функция СчетчикМассив(ИмяСчетчика)
	
	Возврат СтрШаблон("%1_", ИмяСчетчика);
	
КонецФункции

Процедура УвеличитьЗначениеСчетчика(ИмяСчетчика, Ключ = "", Значение = 1, Раздел = "ВОбработке")
	
	СтруктураСчетчиковРаздела = Кэш.СтруктураСчетчиков[Раздел];
	
	Если ТипЗнч(СтруктураСчетчиковРаздела[ИмяСчетчика]) = Тип("Число") Тогда
		СтруктураСчетчиковРаздела[ИмяСчетчика] = СтруктураСчетчиковРаздела[ИмяСчетчика] + Значение;
	Иначе
		Счетчик = СтруктураСчетчиковРаздела[ИмяСчетчика];
		Если ТипЗнч(Счетчик) = Тип("Соответствие")
				И Счетчик.Получить(Ключ) = Неопределено
			ИЛИ ТипЗнч(Счетчик) = Тип("Структура")
				И НЕ Счетчик.Свойство(Ключ) Тогда
			Счетчик.Вставить(Ключ, 0);
		КонецЕсли;
		Счетчик[Ключ] = Счетчик[Ключ] + Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура УвеличитьЗначениеСчетчикаПоСсылке(ИмяСчетчика, Ссылка, Значение = 1, Раздел = "ВОбработке")
	
	СтруктураСчетчиковРаздела = Кэш.СтруктураСчетчиков[Раздел];
	Если СтруктураСчетчиковРаздела.Свойство(СчетчикМассив(ИмяСчетчика)) Тогда
		СтруктураСчетчиковРаздела[СчетчикМассив(ИмяСчетчика)].Добавить(Ссылка);
	КонецЕсли;
	
	УвеличитьЗначениеСчетчика(ИмяСчетчика, ТипЗнч(Ссылка), Значение, Раздел);
	
КонецПроцедуры

Процедура СброситьЗначенияСчетчиков(Раздел = "ВОбработке")
	
	Кэш.СтруктураСчетчиков[Раздел] = СтруктураРазделаСчетчиковКонструктор();
	
КонецПроцедуры

Процедура ОбработатьЗначенияСчетчиков(Зафиксировать = Истина)
	
	Если Зафиксировать Тогда
	
		СчетчикиВОбработке      = Кэш.СтруктураСчетчиков.ВОбработке;
		СчетчикиЗафиксированные = Кэш.СтруктураСчетчиков.Зафиксированные;
		
		Для каждого КлючИЗначение1 Из СчетчикиВОбработке Цикл
			ТипСчетчика = ТипЗнч(КлючИЗначение1.Значение);
			Если ТипСчетчика = Тип("Число") Тогда
				Если КлючИЗначение1.Значение > 0 Тогда
					СчетчикиЗафиксированные[КлючИЗначение1.Ключ] = СчетчикиЗафиксированные[КлючИЗначение1.Ключ] + КлючИЗначение1.Значение;
				КонецЕсли;
			ИначеЕсли ТипСчетчика = Тип("Массив") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетчикиЗафиксированные[КлючИЗначение1.Ключ], КлючИЗначение1.Значение);
			Иначе
				Для каждого КлючИЗначение2 Из КлючИЗначение1.Значение Цикл
					Если КлючИЗначение2.Значение > 0 Тогда
						СчетчикДобавлен =
							ТипЗнч(СчетчикиЗафиксированные[КлючИЗначение1.Ключ]) = Тип("Соответствие")
								И СчетчикиЗафиксированные[КлючИЗначение1.Ключ].Получить(КлючИЗначение2.Ключ) <> Неопределено
							ИЛИ ТипЗнч(СчетчикиЗафиксированные[КлючИЗначение1.Ключ]) = Тип("Структура")
								И СчетчикиЗафиксированные[КлючИЗначение1.Ключ].Свойство(КлючИЗначение2.Ключ);
						Если СчетчикДобавлен Тогда
							СчетчикиЗафиксированные[КлючИЗначение1.Ключ][КлючИЗначение2.Ключ] =
								СчетчикиЗафиксированные[КлючИЗначение1.Ключ][КлючИЗначение2.Ключ] + КлючИЗначение2.Значение;
						Иначе
							СчетчикиЗафиксированные[КлючИЗначение1.Ключ].ВставитЬ(КлючИЗначение2.Ключ, КлючИЗначение2.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	СброситьЗначенияСчетчиков();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработкаОшибок

Процедура ЗавершитьОбработкуОшибокЗагрузкиДанных()
	
	НаборЗаписей = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсточникДанных.Установить(ИсточникДанных);
	НаборЗаписей.Отбор.ТипПроблемы.Установить(Перечисления.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных);
	НаборЗаписей.Записать();
	
	ЗаписатьПротоколОшибок();
	
	ПроверитьОчиститьОшибкиСопоставленияОбъектов();
	
КонецПроцедуры

Функция ДобавитьЗаписьВПротоколОшибок(ТипПроблемы, ТекстОшибки, КлючЗагружаемыхДанных = "", ОбъектХранения = Неопределено)
	
	ЗаписьПротокола = ТаблицаПротоколОшибок.Добавить();
	
	ЗаписьПротокола.ТипПроблемы           = ТипПроблемы;
	ЗаписьПротокола.ТекстОшибки           = ТекстОшибки;
	
	ЗаписьПротокола.КлючЗагружаемыхДанных = КлючЗагружаемыхДанных;
	ЗаписьПротокола.Идентификатор         = ТекущийИдентификатор;
	
	ЗаписьПротокола.КлючРаздела           = ТекущийКлючРаздела;
	ЗаписьПротокола.ИмяФайла              = ТекущееИмяФайла;
	ЗаписьПротокола.Дата                  = ТекущаяДатаСеанса();
	
	Если ОбъектХранения <> Неопределено Тогда
		ЗаписьПротокола.ПоляФайла = ЗначенияПолейФайла(ОбъектХранения);
	КонецЕсли;
	
	МассивТекстов = Новый Массив;
	Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
		МассивТекстов.Добавить(Сообщение.Текст);
	КонецЦикла;
	ЗаписьПротокола.ТекстСообщенийПользователю = СтрСоединить(МассивТекстов, Символы.ПС);
	
	Возврат ЗаписьПротокола;
	
КонецФункции

Функция ДобавитьЗаписьВПротоколОшибокПоИсключению(ТипПроблемы, ТекстОшибки, ИнформацияОбОшибке, КлючЗагружаемыхДанных = "", ОбъектХранения = Неопределено)
	
	ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибок(ТипПроблемы, ТекстОшибки, КлючЗагружаемыхДанных, ОбъектХранения);
	
	ЗаписьПротокола.ТекстИсключения          = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ЗаписьПротокола.ТекстИсключенияПодробный = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Возврат ЗаписьПротокола;
	
КонецФункции

Функция УстановитьТекущийИдентификатор(СтруктураДанных)
	
	ТекущийИдентификатор = "";
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		ОбъектХранения = СтруктураДанных;
	Иначе
		Для каждого КлючИЗначение Из ТаблицаДанныхОписание Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				ОбъектХранения = СтруктураДанных[КлючИЗначение.Ключ];
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектХранения <> Неопределено Тогда
		ТекущийИдентификатор = ЗначенияРеквизитовРасчетные(ОбъектХранения)[ПолеОсновнойИдентификатор()];
	КонецЕсли;
	
	Возврат НЕ ПустаяСтрока(ТекущийИдентификатор);
	
КонецФункции

Процедура ЗаписатьОшибкиПоТекущемуИдентификатору(ЗагружаемыеДанные)
	
	Если ПустаяСтрока(ТекущийИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкиНаОбъекты = Новый Массив;
	ЭтоСпецификация = ЗагружаемыеДанные.КлючЗагружаемыхДанных = "РесурсныеСпецификации";
	
	СчетчикиВОбработке = Кэш.СтруктураСчетчиков.ВОбработке;
	Для каждого КлючИЗначение Из ВложенныеСчетчикиФакт() Цикл
		Для каждого СсылкаНаОбъект Из СчетчикиВОбработке[СчетчикМассив(КлючИЗначение.Ключ)] Цикл
			СсылкиНаОбъекты.Добавить(СсылкаНаОбъект);
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсточникДанных.Установить(ИсточникДанных);
	НаборЗаписей.Отбор.Идентификатор.Установить(ТекущийИдентификатор);
	Если НЕ ЭтоСпецификация Тогда
		НаборЗаписей.Отбор.КлючРаздела.Установить(ТекущийКлючРаздела);
	КонецЕсли;
	
	Если ЭтоСпецификация
		ИЛИ НЕ (ЭтоСпецификация И ЗагружаемыеДанные.Найден) Тогда
		НаборЗаписей.Прочитать();
	КонецЕсли;
	
	ТаблицаОшибок = НаборЗаписей.ВыгрузитьКолонки();
	
	Для каждого Ошибка Из НаборЗаписей Цикл
		Пропустить = Ложь;
		Если ЗначениеЗаполнено(Ошибка.СсылкаНаОбъект)
			И СсылкиНаОбъекты.Найти(Ошибка.СсылкаНаОбъект) <> Неопределено
			И (Ошибка.КлючРаздела = ТекущийКлючРаздела
				ИЛИ ЭтоСпецификация
					И Ошибка.ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.ПроверкаЗаполненияОбъекта) Тогда
			Пропустить = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Ошибка.СсылкаНаОбъект)
			И Ошибка.КлючРаздела = ТекущийКлючРаздела
			И Ошибка.ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.ЗаписьОбъекта Тогда
			Пропустить = Истина;
		ИначеЕсли Ошибка.КлючРаздела = ТекущийКлючРаздела
				И (Ошибка.ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.ВыполнениеАлгоритма
					ИЛИ Ошибка.ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.ЗаполнениеПолейВФайлеДанных) Тогда
			Пропустить = Истина;
		КонецЕсли;
		Если Пропустить Тогда
			Если Ошибка.ДатаВозникновения >= Кэш.НачалоВыполнения Тогда
				УвеличитьЗначениеСчетчика("ТипыПроблем", Ошибка.ТипПроблемы, -1, "Зафиксированные");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТаблицаОшибок.Добавить(), Ошибка);
	КонецЦикла;
	
	Кэш.ОтборИдентификаторКлючРаздела["Идентификатор"] = ТекущийИдентификатор;
	Кэш.ОтборИдентификаторКлючРаздела["КлючРаздела"]   = ТекущийКлючРаздела;
	
	Для каждого НайденнаяСтрока Из ТаблицаПротоколОшибок.НайтиСтроки(Кэш.ОтборИдентификаторКлючРаздела) Цикл
		Если ОшибкаСоответствуетСвойствамОбъекта(НайденнаяСтрока, ЗагружаемыеДанные) Тогда
			Ошибка = ТаблицаОшибок.Добавить();
			ЗаписьПротоколаОшибокВЗаписьРегистра(Ошибка, НайденнаяСтрока);
		КонецЕсли;
		ТаблицаПротоколОшибок.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаОшибок);
	НаборЗаписей.Записать();
	
	ПолучитьСообщенияПользователю(Истина);
	
КонецПроцедуры

Процедура ЗаписьПротоколаОшибокВЗаписьРегистра(ЗаписьРегистра, ЗаписьПротокола)
	
	ЗаписьРегистра.ИсточникДанных     = ИсточникДанных;
	ЗаписьРегистра.ТипПроблемы        = ЗаписьПротокола.ТипПроблемы;
	ЗаписьРегистра.Идентификатор      = ЗаписьПротокола.Идентификатор;
	ЗаписьРегистра.КлючРаздела        = ЗаписьПротокола.КлючРаздела;
	
	Если ЗаписьПротокола.ТипПроблемы  = Перечисления.ЗагрузкаНСИТипыПроблем.СопоставлениеОбъектов Тогда
		Если ЗначениеЗаполнено(ЗаписьПротокола.ВладелецЗначений) Тогда
			ЗаписьРегистра.КлючУникальности = ЗаписьПротокола.ВладелецЗначений.УникальныйИдентификатор();
			ЗаписьРегистра.ВладелецЗначений = ЗаписьПротокола.ВладелецЗначений;
		КонецЕсли;
	Иначе
		ЗаписьРегистра.КлючУникальности = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	СсылкаНаОбъектТипЗначения         = ТипЗнч(ЗаписьПротокола.СсылкаНаОбъект);
	
	Если ЗаписьПротокола.СсылкаНаОбъект <> Неопределено Тогда
		ЗаписьРегистра.ОбъектМетаданных = Новый(СсылкаНаОбъектТипЗначения);
	ИначеЕсли НЕ ПустаяСтрока(ЗаписьПротокола.КлючЗагружаемыхДанных) Тогда
		Описание = ОписаниеЗагружаемыхДанных[ЗаписьПротокола.КлючЗагружаемыхДанных];
		ЗаписьРегистра.ОбъектМетаданных = Описание.ОбъектМетаданныхПустаяСсылка;
	КонецЕсли;
	
	ЗаписьРегистра.Информация         = ЗаписьПротокола.ТекстОшибки;
	ЗаписьРегистра.СсылкаНаОбъект     = ЗаписьПротокола.СсылкаНаОбъект;
	ЗаписьРегистра.ДатаВозникновения  = ЗаписьПротокола.Дата;
	ЗаписьРегистра.ИмяФайла           = ЗаписьПротокола.ИмяФайла;
	
	Если ЗаписьПротокола.ПоляФайла <> Неопределено Тогда
		ЗаписьРегистра.ПоляФайла = Новый ХранилищеЗначения(ЗаписьПротокола.ПоляФайла);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Если НЕ ПустаяСтрока(ЗаписьПротокола.ТекстСообщенийПользователю) Тогда
		МассивСтрок.Добавить(ЗаписьПротокола.ТекстСообщенийПользователю);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗаписьПротокола.ТекстИсключения) Тогда
		МассивСтрок.Добавить(ЗаписьПротокола.ТекстИсключения);
	КонецЕсли;
	ЗаписьРегистра.ИнформацияДетально = СтрСоединить(МассивСтрок, Символы.ПС);
	
	МассивСтрок.Очистить();
	МассивСтрок.Добавить(ЗаписьРегистра.Информация);
	Если НЕ ПустаяСтрока(ЗаписьРегистра.ИнформацияДетально) Тогда
		МассивСтрок.Добавить(ЗаписьРегистра.ИнформацияДетально);
	КонецЕсли;
	МассивСтрок.Добавить("");
	Если НЕ ПустаяСтрока(ЗаписьРегистра.Идентификатор) Тогда
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Идентификатор: %1';
											|en = 'ID: %1'"), ЗаписьРегистра.Идентификатор));
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗаписьРегистра.ИмяФайла) Тогда
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Файл: %1';
											|en = 'File: %1'"), ЗаписьРегистра.ИмяФайла));
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗаписьПротокола.ТекстИсключенияПодробный) Тогда
		МассивСтрок.Добавить("");
		МассивСтрок.Добавить(ЗаписьПротокола.ТекстИсключенияПодробный);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.НайтиПоТипу(СсылкаНаОбъектТипЗначения),
		ЗаписьРегистра.СсылкаНаОбъект,
		СтрСоединить(МассивСтрок, Символы.ПС));
	
	УвеличитьЗначениеСчетчика("ТипыПроблем", ЗаписьРегистра.ТипПроблемы, 1, "Зафиксированные");
	
КонецПроцедуры

Процедура ЗаписатьПротоколОшибок()
	
	Если ТаблицаПротоколОшибок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЗаписьПротокола Из ТаблицаПротоколОшибок Цикл
		
		ЗаписьРегистра = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьМенеджерЗаписи();
		ЗаписьПротоколаОшибокВЗаписьРегистра(ЗаписьРегистра, ЗаписьПротокола);
		ЗаписьРегистра.Записать();
		
	КонецЦикла;
	
	ТаблицаПротоколОшибок.Очистить();
	
КонецПроцедуры

Функция ОшибкаСоответствуетСвойствамОбъекта(ДанныеОшибки, ЗагружаемыеДанные)
	
	Результат         = Истина;
	ВидНоменклатуры   = Неопределено;
	ОписаниеРеквизита = ДанныеОшибки.ОписаниеРеквизита;
	СсылкаНаОбъект    = ЗагружаемыеДанные.Ссылка;
	
	Если ТекущийКлючРаздела = УправлениеДаннымиОбИзделияхКлиентСервер.КлючРазделаИзделияИМатериалы()
		И ЗначениеЗаполнено(ОписаниеРеквизита)
		И ЗначениеЗаполнено(ОписаниеРеквизита.ОписаниеСвойства)
		И ЗагружаемыеДанные.ОбъектХранения.Свойство("ВидНоменклатуры", ВидНоменклатуры)
		И ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			
		РеквизитыВидаНоменклатуры = РеквизитыВидаНоменклатуры(ВидНоменклатуры);
		ОписаниеСвойства          = ОписаниеРеквизита.ОписаниеСвойства;
		
		Если ОписаниеСвойства.НаборыСвойств.Найти(РеквизитыВидаНоменклатуры.НаборСвойств) <> Неопределено Тогда
			СсылкаНаОбъект = Справочники.Номенклатура.ПустаяСсылка();
		ИначеЕсли ОписаниеСвойства.НаборыСвойств.Найти(РеквизитыВидаНоменклатуры.НаборСвойствХарактеристик) <> Неопределено Тогда
			СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеОшибки.СсылкаНаОбъект = Неопределено Тогда
		ДанныеОшибки.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОшибкуЗаписиОбъекта(ТекущийОбъект, ИнформацияОбОшибке, КлючЗагружаемыхДанных, ОбъектХранения)
	
	ЧастиСообщения = Новый Массив;
	Описание       = ОписаниеЗагружаемыхДанных[КлючЗагружаемыхДанных]; // см. УправлениеДаннымиОбИзделиях.ОписаниеЭлементаЗагружаемыхДанныхКонструктор
	ТипПроблемы    = Перечисления.ЗагрузкаНСИТипыПроблем.ЗаписьОбъекта;
	ТекущаяСсылка  = Неопределено;
	
	Если ТекущийОбъект <> Неопределено Тогда
		ТекущаяСсылка = ТекущийОбъект.Ссылка;
		ЧастиСообщения.Добавить(НСтр("ru = 'Не удалось записать объект (Тип: %1).';
									|en = 'Cannot save the object (Type: %1).'"));
		Если Описание.ЭтоДокумент Тогда
			Если ТекущийОбъект.Проведен Тогда
				ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.ПроведениеДокумента;
				ЧастиСообщения[0] = НСтр("ru = 'Не удалось провести документ(Тип: %1).';
										|en = 'Cannot post the document (Type: %1).'");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущийОбъект.Наименование) Тогда
				ЧастиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Наименование: %1';
														|en = 'Name: %1 '"), ТекущийОбъект.Наименование));
			КонецЕсли;
		КонецЕсли;
		ЧастиСообщения[0] = СтрШаблон(ЧастиСообщения[0], ТипЗнч(ТекущийОбъект));
		УвеличитьЗначениеСчетчикаПоСсылке("НеЗаписано", ТекущаяСсылка);
	Иначе
		ЧастиСообщения.Добавить(НСтр("ru = 'Не удалось записать объект.';
									|en = 'Cannot save the object.'"));
	КонецЕсли;
	
	ЗаписьПротокола = ДобавитьЗаписьВПротоколОшибокПоИсключению(
		ТипПроблемы,
		СтрСоединить(ЧастиСообщения, Символы.ПС),
		ИнформацияОбОшибке,
		КлючЗагружаемыхДанных,
		ОбъектХранения);
	ЗаписьПротокола.СсылкаНаОбъект = ТекущаяСсылка;
	
КонецПроцедуры

Процедура ПроверитьОчиститьОшибкиСопоставленияОбъектов()
	
	Если ТекущееДействие <> Обработки.ЗагрузкаПроизводственнойНСИ.ДействиеЗагрузитьДанные() Тогда
		Возврат;
	КонецЕсли;
	
	ТипПроблемы = Перечисления.ЗагрузкаНСИТипыПроблем.СопоставлениеОбъектов;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ошибки.Идентификатор      КАК Идентификатор,
	|	Ошибки.ОбъектМетаданных   КАК ОбъектМетаданных,
	|	Ошибки.ДатаВозникновения  КАК ДатаВозникновения
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовДляЗагрузкиНСИ КАК Соответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗагрузкиПроизводственнойНСИ КАК Ошибки
	|		ПО Соответствия.ИсточникДанных = Ошибки.ИсточникДанных
	|		И Соответствия.Идентификатор = Ошибки.Идентификатор
	|		И Соответствия.ОбъектМетаданных = Ошибки.ОбъектМетаданных
	|		И Соответствия.Сопоставлено
	|		И Ошибки.ТипПроблемы = &ТипПроблемы
	|ГДЕ
	|	Соответствия.ИсточникДанных = &ИсточникДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Идентификатор      КАК Идентификатор,
	|	Ошибки.ОбъектМетаданных   КАК ОбъектМетаданных,
	|	Ошибки.ДатаВозникновения  КАК ДатаВозникновения
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыДляЗагрузкиНСИ КАК Соответствия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗагрузкиПроизводственнойНСИ КАК Ошибки
	|		ПО Соответствия.ИсточникДанных = Ошибки.ИсточникДанных
	|		И Соответствия.Идентификатор = Ошибки.Идентификатор
	|		И Соответствия.Сопоставлено
	|		И Ошибки.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И Ошибки.ТипПроблемы = &ТипПроблемы
	|ГДЕ
	|	Соответствия.ИсточникДанных = &ИсточникДанных
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	Запрос.УстановитьПараметр("ТипПроблемы", ТипПроблемы);
	
	Набор = РегистрыСведений.ОшибкиЗагрузкиПроизводственнойНСИ.СоздатьНаборЗаписей();
	Набор.Отбор.ИсточникДанных.Установить(ИсточникДанных);
	Набор.Отбор.ТипПроблемы.Установить(ТипПроблемы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		Набор.Отбор.ОбъектМетаданных.Установить(Выборка.ОбъектМетаданных);
		Набор.Записать();
		Если Выборка.ДатаВозникновения >= Кэш.НачалоВыполнения Тогда
			УвеличитьЗначениеСчетчика("ТипыПроблем", ТипПроблемы, -1, "Зафиксированные");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНастройкиРеквизитовИсточникаДанных()
	
	Отказ = Ложь;
	
	Для каждого НастройкаРеквизита Из НастройкиРеквизитов Цикл
		
		ОписаниеРеквизита = НастройкаРеквизита.ОписаниеРеквизита; // см. УправлениеДаннымиОбИзделиях.ОписаниеРеквизитаЗагружаемыхДанныхКонструктор
		Если НЕ ОписаниеРеквизита.Обязательный Тогда
			Продолжить;
		КонецЕсли;
		
		Если НастройкаРеквизита.СпособУстановкиЗначения = Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму
			И ЗначениеЗаполнено(НастройкаРеквизита.АлгоритмРасчетаЗначения) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НастройкаРеквизита.СпособУстановкиЗначения <> Перечисления.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита.РассчитатьПоАлгоритму
			И ЗначениеЗаполнено(НастройкаРеквизита.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не задан способ заполнения обязательного реквизита.
										|Тип загружаемых данных: %1
										|Имя реквизита: %2';
										|en = 'A method to fill the required attribute is not specified.
										|Type of data to import: %1
										|Attribute name: %2'"),
								ОписаниеЗагружаемыхДанных[НастройкаРеквизита.КлючЗагружаемыхДанных].Представление,
								ОписаниеРеквизита.Представление);
		ДобавитьЗаписьВПротоколОшибок(
			Перечисления.ЗагрузкаНСИТипыПроблем.НастройкиИсточникаДанных,
			ТекстСообщения,
			НастройкаРеквизита.КлючЗагружаемыхДанных);
		
		Отказ = Истина;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Кэш.ОшибкаЗанесенаВПротокол = Истина;
		ВызватьИсключение НСтр("ru = 'Проверка настроек заполнения реквизитов не пройдена.';
								|en = 'The check of the attribute filling settings failed.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ХешПоЗначениямСтруктуры(Структура)
	
	Результат = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Для каждого КлючИЗначение Из Структура Цикл
		Значение = КлючИЗначение.Значение;
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение) Тогда
			Результат.Добавить(Строка(Значение.УникальныйИдентификатор()));
		Иначе
			Результат.Добавить(Строка(Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьРезультатВыполненияВЖурнал(Результат)
	
	СтруктураСчетчиков = Результат.СтруктураСчетчиков;
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Время выполнения: %1 сек.
			|Количество ошибок: %2
			|Ссылок найдено: %3';
			|en = 'Execution time: %1 sec.
			|Number of errors: %2
			|References found: %3'"),
		Результат.ДатаОкончания - Результат.ДатаНачала,
		Результат.КоличествоОшибок,
		СтруктураСчетчиков.СсылокНайдено);
	
	Для каждого КлючИЗначение Из ВложенныеСчетчикиФакт() Цикл
		ВложенныеСообщения = Новый Массив;
		Для каждого КлючИЗначениеВложенные Из СтруктураСчетчиков[КлючИЗначение.Ключ] Цикл
			ВложенныеСообщения.Добавить(СтрШаблон("%1: %2", КлючИЗначениеВложенные.Ключ, КлючИЗначениеВложенные.Значение));
		КонецЦикла;
		Если ЗначениеЗаполнено(ВложенныеСообщения) Тогда
			ТекстСообщения = СтрШаблон("%1
				|
				|-------------------
				|%2
				|%3", ТекстСообщения, ВРег(КлючИЗначение.Значение), СтрСоединить(ВложенныеСообщения, Символы.ПС));
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		Обработки.ЗагрузкаПроизводственнойНСИ.КлючСобытияЖурналаРегистрации(ИсточникДанных),
		УровеньЖурналаРегистрации.Информация,,,
		ТекстСообщения);
	
КонецПроцедуры

Процедура ИнициализироватьПеременныеПриСоздании()
	
	РазмерПорцииДанных = 1000;
	
	СсылочныеТипы = УправлениеДаннымиОбИзделияхПовтИсп.ВсеСсылочныеТипыКонфигурации();
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор",               Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	ТаблицаИдентификаторов.Колонки.Добавить("ОбъектМетаданных",            Новый ОписаниеТипов(СсылочныеТипы));
	ТаблицаИдентификаторов.Колонки.Добавить("СвязиСоставногоТипа" ,        Новый ОписаниеТипов("Массив"));
	ТаблицаИдентификаторов.Колонки.Добавить("Сопоставить",                 Новый ОписаниеТипов("Булево"));
	ТаблицаИдентификаторов.Колонки.Добавить("ИндексТаблицы",               Новый ОписаниеТипов("Число"));
	ТаблицаИдентификаторов.Колонки.Добавить("ПредставлениеВнешнейСистемы", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	ТаблицаИдентификаторов.Колонки.Добавить("ВладелецЗначений",            Новый ОписаниеТипов(СсылочныеТипы));
	
	ТаблицаПакетногоПоиска = Новый ТаблицаЗначений;
	ТаблицаПакетногоПоиска.Колонки.Добавить("Идентификатор",               Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ОбъектМетаданных",            Новый ОписаниеТипов(СсылочныеТипы));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ИмяРеквизита",                Новый ОписаниеТипов("Строка"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("СпособУстановкиЗначения",     Новый ОписаниеТипов("ПеречислениеСсылка.ЗагрузкаНСИСпособыУстановкиЗначенияРеквизита"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ИмяТаблицы",                  Новый ОписаниеТипов("Строка"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ОбъектХранения",              Новый ОписаниеТипов());
	ТаблицаПакетногоПоиска.Колонки.Добавить("ЭтоИдентификатор",            Новый ОписаниеТипов("Булево"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ЭтоОсновнойИдентификатор",    Новый ОписаниеТипов("Булево"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("СвязиСоставногоТипа" ,        Новый ОписаниеТипов("Массив"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("Найдено",                     Новый ОписаниеТипов("Булево"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ВладелецЗначений",            Новый ОписаниеТипов(СсылочныеТипы));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ЕстьКод",                     Новый ОписаниеТипов("Булево"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ЕстьНаименование",            Новый ОписаниеТипов("Булево"));
	ТаблицаПакетногоПоиска.Колонки.Добавить("ЕстьНомер",                   Новый ОписаниеТипов("Булево"));
	
	ТаблицаПротоколОшибок = Новый ТаблицаЗначений;
	ТаблицаПротоколОшибок.Колонки.Добавить("ТипПроблемы",                  Новый ОписаниеТипов("ПеречислениеСсылка.ЗагрузкаНСИТипыПроблем"));
	ТаблицаПротоколОшибок.Колонки.Добавить("ТекстОшибки",                  Новый ОписаниеТипов("Строка"));
	ТаблицаПротоколОшибок.Колонки.Добавить("ТекстИсключения",              Новый ОписаниеТипов("Строка"));
	ТаблицаПротоколОшибок.Колонки.Добавить("ТекстИсключенияПодробный",     Новый ОписаниеТипов("Строка"));
	ТаблицаПротоколОшибок.Колонки.Добавить("ТекстСообщенийПользователю",   Новый ОписаниеТипов("Строка"));
	ТаблицаПротоколОшибок.Колонки.Добавить("Идентификатор",                Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	ТаблицаПротоколОшибок.Колонки.Добавить("КлючЗагружаемыхДанных",        Новый ОписаниеТипов("Строка"));
	ТаблицаПротоколОшибок.Колонки.Добавить("ПоляФайла",                    Новый ОписаниеТипов());
	ТаблицаПротоколОшибок.Колонки.Добавить("СсылкаНаОбъект",               Новый ОписаниеТипов(СсылочныеТипы));
	ТаблицаПротоколОшибок.Колонки.Добавить("Дата",                         Новый ОписаниеТипов("Дата"));
	ТаблицаПротоколОшибок.Колонки.Добавить("КлючРаздела",                  Новый ОписаниеТипов("Строка"));
	ТаблицаПротоколОшибок.Колонки.Добавить("ИмяФайла",                     Новый ОписаниеТипов("Строка"));
	ТаблицаПротоколОшибок.Колонки.Добавить("ОписаниеРеквизита",            Новый ОписаниеТипов());
	ТаблицаПротоколОшибок.Колонки.Добавить("ВладелецЗначений",             Новый ОписаниеТипов(СсылочныеТипы));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ИнициализироватьПеременныеПриСоздании();

#КонецОбласти

#КонецЕсли