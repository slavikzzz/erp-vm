//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам");
	ИспользоватьВыпускПоНесколькимРаспоряжениям = ПолучитьФункциональнуюОпцию("ИспользоватьВыпускПоНесколькимРаспоряжениям");
	
	УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ;
	
	ГраницаЗеленойЗоны = 33;
	ГраницаЖелтойЗоны = 66;
	ГраницаКраснойЗоны = 100;

	УстановитьПараметрыДиаграммыПоУмолчанию(ГрафикЗанятостиРЦ);
	
	ИнициализацияНастройкиСписков();
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("УправлениеХодомПроизводства", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
	Иначе
		// По умолчанию установлен отбор по всем возможным проблемам
		ВыбратьВсеОтборыДиспетчированияМЛ(Истина, ЭтаФорма);
		ВыбратьВсеОтборыДиспетчированияРЦ(Истина, ЭтаФорма);
	КонецЕсли;
	
	// Отработаем открытие формы из формы "Текущие дела"
	Если Параметры.Свойство("СтруктураБыстрогоОтбора")
		И Параметры.СтруктураБыстрогоОтбора.Свойство("Подразделение") Тогда
		ОтборПодразделение = Параметры.СтруктураБыстрогоОтбора.Подразделение;
	КонецЕсли; 
	
	ОбновитьШкалу(ВидШкалы);
	
	// Дополнительный отбор по распоряжению
	Если Параметры.Свойство("СписокРаспоряжений") Тогда
		Для каждого Распоряжение Из Параметры.СписокРаспоряжений Цикл
			ОтборРаспоряжения.Добавить(Распоряжение, ПолучитьПредставлениеРаспоряжения(Распоряжение));
		КонецЦикла; 
	КонецЕсли; 
		
	// Дополнительный отбор по этапам
	Если Параметры.Свойство("СписокЭтапов") Тогда
		Для каждого ДанныеЭтапа Из Параметры.СписокЭтапов Цикл
			ЗаполнитьЗначенияСвойств(СписокЭтапов.Добавить(), ДанныеЭтапа);
		КонецЦикла; 
	КонецЕсли; 
	
	Элементы.СписокМаршрутныхЛистов.ОтборСтрок = Новый ФиксированнаяСтруктура("ПоказатьВСписке,НеСоответствуетНастройкеСписка", Истина, Ложь);
	Элементы.ДиспетчированиеРЦ.ОтборСтрок = Новый ФиксированнаяСтруктура("ПоказатьВСписке", Истина);

	СкрытьЭлементыНедоступныеПоПравам();
	
	ОпределитьПараметрыПодразделения();
	
	ОбновитьДанныеПриСозданииФормы();
	
	УправлениеДопПанелью();
	УстановитьПредставлениеОтбора(ЭтаФорма);
	УправлениеВидомДиспетчированияРЦ(ЭтаФорма);
	
	ОтборПодразделениеДоИзменения = ОтборПодразделение;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(Метаданные.Документы.МаршрутныйЛистПроизводства);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = ОбъектыПечати;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_МаршрутныйЛистПроизводства" Тогда
		
		Если Источник <> УникальныйИдентификатор Тогда
			ОбновитьДанныеКогдаФормаСтанетАктивной();
		КонецЕсли;
		
	ИначеЕсли ОперативныйУчетПроизводстваКлиент.СобытиеРасписаниеВидаРабочегоЦентраИзменилось(ИмяСобытия) 
		ИЛИ ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство" 
		ИЛИ ИмяСобытия = "Запись_ВыпускПродукции" 
		ИЛИ ИмяСобытия = "Запись_ВыработкаСотрудников" 
		ИЛИ ИмяСобытия = "Запись_ЗаказНаПроизводство" 
		ИЛИ ИмяСобытия = "Запись_ВозвратМатериаловИзПроизводства" Тогда
		
		ОбновитьДанныеКогдаФормаСтанетАктивной();
		
	КонецЕсли; 
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗаданиеОбновитьДанныеВыполнено Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуДлительнойОперации", 0.1, Истина);
	КонецЕсли; 
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	Если ОтборПодразделениеПриИзмененииНаСервере() Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ОтборПодразделениеПриИзменении");
		СохранитьПараметрыОтбораИОбновитьДанные(СтруктураДействий);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'В выбранном подразделении используется пооперационное планирование.
										|Диспетчирование производства выполняется в рабочем месте ""Пооперационное планирование"".';
										|en = 'Operation planning is used in the selected business unit.
										|Production dispatching is executed in the ""Operation planning"" workplace.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборРаспоряжения) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ОтборРаспоряжения[0].Значение);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборРаспоряжениеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаВыбора", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеНачалоВыбораЗавершение(Распоряжение, ДополнительныеПараметры) Экспорт

	Если Распоряжение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборРаспоряжения.Очистить();
	ОтборРаспоряжения.Добавить(Распоряжение, ПолучитьПредставлениеРаспоряжения(Распоряжение));
	
	УстановитьПредставлениеОтбора(ЭтаФорма, "УстановитьОтборПоРаспоряжению");
	
	СохранитьПараметрыОтбораИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборРаспоряжения.Очистить();
	УстановитьПредставлениеОтбора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеПриИзменении(Элемент)
	
	СохранитьПараметрыОтбораИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	СохранитьПараметрыОтбораИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборРабочийЦентрНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоступныеРабочиеЦентры", ДоступныеРабочиеЦентры);
	ПараметрыФормы.Вставить("ОтборРабочийЦентр", ОтборРабочийЦентр);
	ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма.ОтборРабочихЦентров", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБригадыПриИзменении(Элемент)
	
	СохранитьПараметрыОтбораИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБригадыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборБригадыНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыОтбора = Новый Структура("Подразделение", ОтборПодразделение);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СписокВыбранныхЭлементов", ОтборБригады);
	ОткрытьФорму("Справочник.Бригады.Форма.ФормаМножественногоВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОтборПериодПриИзменении");
	СохранитьПараметрыОтбораИОбновитьДанные(СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьМаршрутныеЛисты1Нажатие(Элемент)
	
	СформироватьМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьМаршрутныеЛисты2Нажатие(Элемент)
	
	СформироватьМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьРасписание1Нажатие(Элемент)
	
	СформироватьРасписание();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСформироватьРасписание2Нажатие(Элемент)
	
	СформироватьРасписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПередатьКВыполнению1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьНачалоВыполнения1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьГотовностьКРаботеКлючевогоРЦ1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьЗавершениеРаботыКлючевогоРЦ1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьВыполненным1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыработкуСотрудников1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыпуск1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПередатьКВыполнению2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьНачалоВыполнения2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьГотовностьКРаботеКлючевогоРЦ2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьЗавершениеРаботыКлючевогоРЦ2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтметитьВыполненным2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыработкуСотрудников2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОформитьВыпуск2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЕстьПросроченныеЗадачи1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусВыполненияВЖелтойЗоне1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусВыполненияВКраснойЗоне1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЕстьОтставаниеОтРасписания1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЕстьПросроченныеЗадачи2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусВыполненияВЖелтойЗоне2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусВыполненияВКраснойЗоне2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоказатьЕслиНеЗавершеныПредыдущиеЭтапы1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоказатьЕслиНеЗавершеныПредыдущиеЭтапы2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЕстьОтставаниеОтРасписания2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочиеЦентрыОтставание1ПриИзменении(Элемент)
	
	УстановитьОтборВДиспетчированииРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочиеЦентрыОпережение1ПриИзменении(Элемент)
	
	УстановитьОтборВДиспетчированииРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочиеЦентрыРасписаниеНеСформировано1ПриИзменении(Элемент)
	
	УстановитьОтборВДиспетчированииРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочиеЦентрыОтставание2ПриИзменении(Элемент)
	
	УстановитьОтборВДиспетчированииРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочиеЦентрыОпережение2ПриИзменении(Элемент)
	
	УстановитьОтборВДиспетчированииРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочиеЦентрыРасписаниеНеСформировано2ПриИзменении(Элемент)
	
	УстановитьОтборВДиспетчированииРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДефицитМатериалов1ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДефицитМатериалов2ПриИзменении(Элемент)
	
	УстановитьОтборВСпискеМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиспетчированияРЦПриИзменении(Элемент)
	
	УправлениеВидомДиспетчированияРЦ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГрафикиРаботыРЦНажатие(Элемент)
	
	ОткрытьГрафикиРаботыРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГрафикиРаботыРЦ2Нажатие(Элемент)
	
	ОткрытьГрафикиРаботыРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяСтрокаСпискаМЛОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьДанные();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокМаршрутныхЛистов

&НаКлиенте
Процедура СписокМаршрутныхЛистовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	
	Если Поле.Имя = "СписокМаршрутныхЛистовТребуетсяСформироватьРасписаниеКартинка"
		ИЛИ Поле.Имя = "СписокМаршрутныхЛистовНачалоРаботыКлючевогоРабочегоЦентра"
		ИЛИ Поле.Имя = "СписокМаршрутныхЛистовОкончаниеРаботыКлючевогоРабочегоЦентра"
		ИЛИ Поле.Имя = "СписокМаршрутныхЛистовСостояниеРаботы" Тогда
		
		Если ТекущиеДанные.ТребуетсяСформироватьРасписание Тогда
			ИзменитьРасписаниеВУправленииМЛ();
		КонецЕсли; 
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовНеЗавершеныПредыдущиеЭтапыКартинка" Тогда
		
		ПараметрыФормы = Новый Структура("МаршрутныйЛист", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ВыполнениеСмежныхЭтапов", ПараметрыФормы);
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовНомерКартинкиМаршрута"
		ИЛИ Поле.Имя = "СписокМаршрутныхЛистовСтатусВыполненияТекст" Тогда
		
		ОтметитьПрохождениеМаршрута(ВыбраннаяСтрока);
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовТребуетсяОформитьВыработкуСотрудников" Тогда
		
		Если ТекущиеДанные.ТребуетсяОформитьВыработкуСотрудников Тогда
			ОформитьВыработкуСотрудников(ВыбраннаяСтрока);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовТребуетсяОформитьВыпуск" Тогда
		
		Если ТекущиеДанные.ТребуетсяОформитьВыпуск Тогда
			ОформитьВыпуск(ВыбраннаяСтрока);
		КонецЕсли; 
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовРаспоряжениеНомер" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Распоряжение);
		ПараметрыФормы.Вставить("АктивироватьСтрокуПродукции", ТекущиеДанные.КодСтроки);
		ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовЭтапСпецификация" Тогда
		
		Если ТекущиеДанные.МногоэтапныйПроизводственныйПроцесс Тогда
			ПоказатьЗначение(,ТекущиеДанные.Этап);
		Иначе
			ПоказатьЗначение(,ТекущиеДанные.Спецификация);
		КонецЕсли; 
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовЭтапСпецификацияПолуфабриката" Тогда
		
		Если ТекущиеДанные.МногоэтапныйПроизводственныйПроцессПолуфабриката Тогда
			ПоказатьЗначение(,ТекущиеДанные.ЭтапПолуфабриката);
		Иначе
			ПоказатьЗначение(,ТекущиеДанные.СпецификацияПолуфабриката);
		КонецЕсли; 
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовСтатус"
		ИЛИ Поле.Имя = "СписокМаршрутныхЛистовНомер"
		ИЛИ Поле.Имя = "СписокМаршрутныхЛистовНачало"
		ИЛИ Поле.Имя = "СписокМаршрутныхЛистовЗапланировано" Тогда
		
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
		
	ИначеЕсли Поле.Имя = "СписокМаршрутныхЛистовДефицитМатериалов" Тогда
		
		Если ТекущиеДанные.ДефицитМатериалов <> 0 Тогда
			ОтгрузитьМатериалы(ВыбраннаяСтрока);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутныхЛистовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутныхЛистовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьВыбранныеМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутныхЛистовПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДиспетчированиеРЦ

&НаКлиенте
Процедура ДиспетчированиеРЦВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ДиспетчированиеРЦ.НайтиПоИдентификатору(ВыбраннаяСтрока);		
	
	Если Поле.Имя = "ДиспетчированиеРЦТребуетсяСформироватьРасписание" Тогда
		Если ДанныеСтроки.ТребуетсяСформироватьРасписание Тогда
			ИзменитьРасписаниеВДиспетчированииРЦ();
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ДиспетчированиеРЦМаршрутныйЛистСтрока" Тогда
		Если ДанныеСтроки.МаршрутныеЛистыВРаботе.Количество() = 1 Тогда
			ВыбратьДокументИзСпискаЗавершение(ДанныеСтроки.МаршрутныеЛистыВРаботе[0], Неопределено);
		ИначеЕсли ДанныеСтроки.МаршрутныеЛистыВРаботе.Количество() > 1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументИзСпискаЗавершение", ЭтотОбъект);
			ПоказатьВыборИзСписка(ОписаниеОповещения, ДанныеСтроки.МаршрутныеЛистыВРаботе);
		КонецЕсли; 
	ИначеЕсли Поле.Имя = "ДиспетчированиеРЦРабочийЦентр" Тогда
		ПоказатьЗначение(,ДанныеСтроки.РабочийЦентр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьМаршрутныйЛист(Команда)
	
	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Запланировано < 2  Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'По маршрутному листу должно быть запланировано произвести не менее двух единиц/партий изделий.';
									|en = 'The route sheet must contain manufacture of at least two units/batches of products.'"));
		Возврат;
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не допускается разбиение выполненного маршрутного листа.';
									|en = 'Splitting a completed route sheet is not allowed.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("МаршрутныйЛист,Количество,ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий",
					ТекущиеДанные.Ссылка,
					ТекущиеДанные.Запланировано,
					ТекущиеДанные.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
					
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьМаршрутныйЛистЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.РазбиениеМаршрутногоЛиста", 
					ПараметрыФормы,,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьМаршрутныйЛист(Команда)
	
	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьМаршрутныеЛисты(Команда)
	
	СформироватьМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьРасписание(Команда)
	
	СформироватьРасписание();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьРасписаниеВУправленииМЛ(Команда)
	
	ИзменитьРасписаниеВУправленииМЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПередатьКВыполнению(Команда)
	
	ПередатьКВыполнению();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьНачалоВыполнения(Команда)
	
	ОтметитьНачалоВыполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьГотовностьКРаботеКлючевогоРЦ(Команда)
	
	ОтметитьГотовностьКРаботеКлючевогоРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьЗавершениеРаботыКлючевогоРЦ(Команда)
	
	ОтметитьЗавершениеРаботыКлючевогоРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьВыполненным(Команда)
	
	ОтметитьВыполненным();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтгрузитьМатериалы(Команда)
	
	ОтгрузитьМатериалы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьВыработкуСотрудников(Команда)

	ОформитьВыработкуСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьВыпуск(Команда)
	
	ОформитьВыпуск();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАрхивМаршрутныхЛистов(Команда)
	
	ОткрытьАрхивМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернутьДопПанель(Команда)
	
	СвернутьДопПанель = Истина;
	УправлениеДопПанелью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьДопПанель(Команда)
	
	СвернутьДопПанель = Ложь;
	УправлениеДопПанелью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПометитьНаУдалениеМаршрутныеЛисты(Команда)
	
	УдалитьВыбранныеМаршрутныеЛисты();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьРасписаниеВДиспетчированииРЦ(Команда)
	
	ИзменитьРасписаниеВДиспетчированииРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГрафикиРаботыРЦ(Команда)
	
	ОткрытьГрафикиРаботыРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодДень(Команда)
	
	ОбновитьШкалу(0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодНеделя(Команда)
	
	ОбновитьШкалу(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодМесяц(Команда)
	
	ОбновитьШкалу(2);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьВсеОтборыДиспетчированиеМЛ(Команда)
	
	ВыбратьВсеОтборыДиспетчированияМЛИОбновить(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьВсеОтборыДиспетчированиеРЦ(Команда)
	
	ВыбратьВсеОтборыДиспетчированияРЦТОбновить(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВыборСоВсехОтборовДиспетчированиеМЛ(Команда)
	
	ВыбратьВсеОтборыДиспетчированияМЛИОбновить(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВыборСоВсехОтборовДиспетчированиеРЦ(Команда)
	
	ВыбратьВсеОтборыДиспетчированияРЦТОбновить(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиОтМаршрутногоЛистаКДиспетчированиюРЦ(Команда)
	
	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("РабочийЦентр", ТекущиеДанные.РабочийЦентр);
 	СписокСтрок = ДиспетчированиеРЦ.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		Если ВидДиспетчированияРЦ <> 0 Тогда
			ВидДиспетчированияРЦ = 0;
			УправлениеВидомДиспетчированияРЦ(ЭтаФорма);
		КонецЕсли; 
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДиспетчированиеРЦ;
		Элементы.ДиспетчированиеРЦ.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не указано какому РЦ назначено выполнение маршрутного листа.';
									|en = 'No work center is assigned for route sheet completion.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаСпискаДиспетчированиеМЛ(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемы", АдресСхемыНастройкаСпискаДиспетчированиеМЛ);
	ПараметрыФормы.Вставить("НастройкиСписка", НастройкиСписокМЛ);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаСпискаДиспетчированиеМЛЗавершение", ЭтотОбъект);
	ОткрытьФорму("Отчет.НастройкаСписка.Форма.НастройкаСписка", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьНастройкиСпискаДиспетчированиеМЛ(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОбъекта", "ДиспетчированиеПроизводства");
	ПараметрыФормы.Вставить("КлючНастроек", "НастройкиСпискаДиспетчированиеМЛ");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьНастройкиСпискаДиспетчированиеМЛЗавершение", ЭтотОбъект);
	ОткрытьФорму("ФормаЗагрузкиПользовательскихНастроекДинамическихСписков", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьНастройкиСпискаДиспетчированиеМЛ(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОбъекта", "ДиспетчированиеПроизводства");
	ПараметрыФормы.Вставить("КлючНастроек", "НастройкиСпискаДиспетчированиеМЛ");
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНастройкиСпискаДиспетчированиеМЛЗавершение", ЭтотОбъект);
	ОткрытьФорму("ФормаСохраненияПользовательскихНастроекДинамическихСписков", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьИнформационнуюСтрокуСпискаМЛ(Элемент)
	
	 Элементы.ГруппаИнформационнаяСтрокаСпискаМЛ.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокМаршрутныхЛистов);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокМаршрутныхЛистов, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокМаршрутныхЛистов);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанными

&НаКлиенте
Процедура СохранитьПараметрыОтбораИОбновитьДанные(СтруктураДействий = Неопределено)

	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли; 
	СтруктураДействий.Вставить("СохранитьПараметрыОтбора");
	ОбновитьДанные(СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(СтруктураДействий = Неопределено)

	ТекущиеФоновыеЗадания.Очистить();
	ДобавитьФоновоеЗадание("ОбновитьДанные", ЭтаФорма);
	
	ПараметрыЗаданий = Новый Соответствие;
	ПараметрыЗаданий.Вставить("ОбновитьДанные", СтруктураДействий);
	ЗапуститьФоновыеЗадания(ПараметрыЗаданий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриСозданииФормы()
	
	ТекущиеФоновыеЗадания.Очистить();
	ДобавитьФоновоеЗадание("ОбновитьДанные", ЭтаФорма);
	ЗаданиеОбновитьДанныеВыполнено = ЗапуститьФоновыеЗаданияНаСервере(Неопределено);

КонецПроцедуры

&НаСервере
Функция ЗапуститьЗаданиеОбновитьДанные(СтруктураДействий)
	
	// Запомним текущую строку, чтобы после обновления сделать ее активной
	ТекущийМаршрутныйЛист = Документы.МаршрутныйЛистПроизводства.ПустаяСсылка();
	ТекущаяСтрока = Элементы.СписокМаршрутныхЛистов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда
			ТекущийМаршрутныйЛист = ДанныеСтроки.Ссылка;
		КонецЕсли;
	КонецЕсли; 
	
	// Запомним текущую строку, чтобы после обновления сделать ее активной
	ТекущийРабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	ТекущаяСтрока = Элементы.ДиспетчированиеРЦ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ДанныеСтроки = ДиспетчированиеРЦ.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда
			ТекущийРабочийЦентр = ДанныеСтроки.РабочийЦентр;
		КонецЕсли;
	КонецЕсли; 
	
	ДатаКонтроля = ТекущаяДатаСеанса();
	
	Если СтруктураДействий <> Неопределено Тогда
		Если СтруктураДействий.Свойство("СохранитьПараметрыОтбора") Тогда
			СохранитьПараметрыОтбора();
		КонецЕсли; 
		Если СтруктураДействий.Свойство("ОтборПодразделениеПриИзменении") Тогда
			ОтборРабочийЦентр.Очистить();
			ОпределитьПараметрыПодразделения();
			ОтборПодразделениеДоИзменения = ОтборПодразделение;
		КонецЕсли; 
		Если СтруктураДействий.Свойство("ОтборПодразделениеПриИзменении") Тогда
			УправлениеДоступностьюКнопокМасштабаДиаграммы();
		КонецЕсли; 
	КонецЕсли; 
	
	ПараметрыЗадания = ПараметрыЗаданияПолучитьДанныеДиспетчирования();
	
	НаименованиеЗадания = НСтр("ru = 'Получение данных для диспетчирования производства';
								|en = 'Receiving data for production dispatching'");
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"Обработки.ДиспетчированиеПроизводства.ВыполнитьЗаданиеОбновитьДанные",
						ПараметрыЗадания,
						НаименованиеЗадания);
						
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ПараметрыЗаданияПолучитьДанныеДиспетчирования()

	ЗаполнитьВыборПериода();
	
	Если ОтборПериод = "Текущий" Тогда
		НачалоПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ДатаКонтроля, ИнтервалПланирования);
		ОкончаниеПериода = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ДатаКонтроля, ИнтервалПланирования);
	ИначеЕсли ОтборПериод = "Следующий" Тогда
		НачалоПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ДатаСледующегоПериода, ИнтервалПланирования);
		ОкончаниеПериода = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ДатаСледующегоПериода, ИнтервалПланирования);
	Иначе
		НачалоПериода = '000101010000';
		ОкончаниеПериода = '000101010000';
	КонецЕсли; 
	
	СписокМаршрутныхЛистов.Очистить();
	ДиспетчированиеРЦ.Очистить();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДатаКонтроля", ДатаКонтроля);
	ПараметрыЗадания.Вставить("ОтборПодразделение", ОтборПодразделение);
	ПараметрыЗадания.Вставить("ОтборРабочийЦентр", ОтборРабочийЦентр);
	ПараметрыЗадания.Вставить("СписокЭтапов", СписокЭтапов.Выгрузить());
	ПараметрыЗадания.Вставить("УправлениеМаршрутнымиЛистами", УправлениеМаршрутнымиЛистами);
	ПараметрыЗадания.Вставить("ОтборПериод", ОтборПериод);
	ПараметрыЗадания.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗадания.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ПараметрыЗадания.Вставить("ИнтервалПланирования", ИнтервалПланирования);
	ПараметрыЗадания.Вставить("ДиспетчированиеРЦ", ДиспетчированиеРЦ.Выгрузить());
	ПараметрыЗадания.Вставить("ГраницаЗеленойЗоны", ГраницаЗеленойЗоны);
	ПараметрыЗадания.Вставить("ГраницаЖелтойЗоны",  ГраницаЖелтойЗоны);
	ПараметрыЗадания.Вставить("ГраницаКраснойЗоны", ГраницаКраснойЗоны);

	Если ЗначениеЗаполнено(ОтборРаспоряжения) Тогда
		ПараметрыЗадания.Вставить("СписокРаспоряжений", ОтборРаспоряжения.ВыгрузитьЗначения());
	Иначе
		ПараметрыЗадания.Вставить("СписокРаспоряжений");
	КонецЕсли;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Процедура ЗавершениеЗаданияОбновитьДанные(Результат)

	ОбновитьИнформационнуюСтрокуСпискаМЛ(Результат);
	ОбновитьНеобходимостьСформироватьМЛ(Результат);
	ОбновитьДиспетчированиеМЛ(Результат);
	ОбновитьДиспетчированиеРЦ(Результат);
	ОбновитьДиаграммуРасписания(Результат);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНеобходимостьСформироватьМЛ(Результат)
	
	Перем КоличествоМЛ;
	
	Если НЕ Результат.Свойство("ТребуетсяСформироватьМЛ", КоличествоМЛ) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоМЛСтрокой = Формат(КоличествоМЛ, "ЧН=0; ЧГ=0");
	
	Элементы.СформироватьМаршрутныеЛисты1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	НСтр("ru = 'Сформировать маршрутные листы (%1)';
																		|en = 'Generate route sheets (%1)'"), 
																	КоличествоМЛСтрокой);
																	
	Элементы.СформироватьМаршрутныеЛисты2.Заголовок = "(" + КоличествоМЛСтрокой + ")"; 
	
	Если КоличествоМЛ = 1 Тогда
		ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Требуется сформировать один маршрутный лист';
										|en = 'It is required to generate one route sheet'"),
									КоличествоМЛСтрокой);
	ИначеЕсли КоличествоМЛ > 1 Тогда
		ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Требуется сформировать %1 маршрутных листов';
										|en = 'It is required to generate %1 route sheets'"),
									КоличествоМЛСтрокой);
	Иначе
		ПодсказкаКоманды = НСтр("ru = 'Формировать маршрутные листы не требуется';
								|en = 'Generation of route sheets is not required'");
	КонецЕсли; 
	Элементы.СформироватьМаршрутныеЛисты1.РасширеннаяПодсказка.Заголовок = ПодсказкаКоманды;
	Элементы.СформироватьМаршрутныеЛисты2.РасширеннаяПодсказка.Заголовок = ПодсказкаКоманды;
	
	Элементы.СформироватьМаршрутныеЛисты1.Доступность = (КоличествоМЛ <> 0);
	Элементы.СформироватьМаршрутныеЛисты2.Доступность = (КоличествоМЛ <> 0);
	Элементы.КартинкаСформироватьМаршрутныеЛисты1.Гиперссылка = (КоличествоМЛ <> 0);
	Элементы.КартинкаСформироватьМаршрутныеЛисты2.Гиперссылка = (КоличествоМЛ <> 0);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДиспетчированиеМЛ(Результат)
	
	Перем ДанныеДиспетчированиеМЛ;
	
	Если НЕ Результат.Свойство("ДиспетчированиеМЛ", ДанныеДиспетчированиеМЛ) Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокЭтапов.Количество() <> 0 Тогда
		// Применим отбор по этапам
		Для каждого ДанныеСтроки Из ДанныеДиспетчированиеМЛ Цикл
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик", ДанныеСтроки.Распоряжение, ДанныеСтроки.КодСтрокиЭтапыГрафик);
   			СписокСтрок = СписокЭтапов.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				ЗаполнитьЗначенияСвойств(СписокМаршрутныхЛистов.Добавить(), ДанныеСтроки);
			КонецЕсли;
		КонецЦикла; 
	Иначе
		СписокМаршрутныхЛистов.Загрузить(ДанныеДиспетчированиеМЛ);
	КонецЕсли; 
	
	ПрименитьОтборПоБригадам();
	
	Для каждого ДанныеСтроки Из СписокМаршрутныхЛистов Цикл
		
		ЗаполнитьНомерКартинкиМаршрута(ДанныеСтроки);
		
		Если ДанныеСтроки.СтатусВыполнения <=100 Тогда
			ДанныеСтроки.СтатусВыполненияТекст = Формат(ДанныеСтроки.СтатусВыполнения);
		Иначе
			ДанныеСтроки.СтатусВыполненияТекст = ">100";
		КонецЕсли; 
		
		ДанныеСтроки.ЕстьПросроченныеЗадачи = Ложь;
		
		ДатаНачалаМЛПройдена = (КонецДня(ДанныеСтроки.Начало) + 1) <= ДатаКонтроля;
		ДатаОкончанияМЛПройдена = (КонецДня(ДанныеСтроки.Окончание) + 1) <= ДатаКонтроля;
		
		Если ДанныеСтроки.ТребуетсяСформироватьРасписание Тогда
			Если ДанныеСтроки.ДатаИнтервалаНачало <= ДатаКонтроля Тогда
				// задача просрочена, если наступил интервал планирования и нет расписания
				ДанныеСтроки.ЕстьПросроченныеЗадачи = Истина;
				ДанныеСтроки.ТребуетсяСформироватьРасписаниеКартинка = 2;
			Иначе
				ДанныеСтроки.ТребуетсяСформироватьРасписаниеКартинка = 1;
			КонецЕсли;
		КонецЕсли; 
		
		Если ДанныеСтроки.ТребуетсяПередатьКВыполнению Тогда
			Если ДатаНачалаМЛПройдена Тогда
				// задача просрочена, если прошло начало МЛ и еще не передали
				ДанныеСтроки.ЕстьПросроченныеЗадачи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОтметитьНачалоВыполнения Тогда
			Если ДатаНачалаМЛПройдена Тогда
				// задача просрочена, если прошло начало МЛ и еще не отметили
				ДанныеСтроки.ЕстьПросроченныеЗадачи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОтметитьВыполненным Тогда
			Если ДатаОкончанияМЛПройдена Тогда
				// задача просрочена, если прошло окончание МЛ
				ДанныеСтроки.ЕстьПросроченныеЗадачи = Истина
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтроки.НеЗавершеныПредыдущиеЭтапы Тогда
			Если ДатаНачалаМЛПройдена Тогда
				ДанныеСтроки.НеЗавершеныПредыдущиеЭтапыКартинка = 2;
			Иначе
				ДанныеСтроки.НеЗавершеныПредыдущиеЭтапыКартинка = 1;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПрименитьНастройкуСпискаКДиспетчированиюМЛ();
	ОбновитьИндикаторыДиспетчированияМЛ();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюСтрокуСпискаМЛ(Результат)
	
	Если Результат.Свойство("АвтоОбновление") И НЕ Результат.АвтоОбновление Тогда
	
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Завершено формирование маршрутных листов, для обновления нажмите';
									|en = 'Route sheets are generated. To update, click '"));
		МассивСтрок.Добавить(" (");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'обновить';
																|en = 'update'"),,,, "#ОбновитьСписокМЛ"));
		МассивСтрок.Добавить(")");
		
		ИнформационнаяСтрокаСпискаМЛ = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.ГруппаИнформационнаяСтрокаСпискаМЛ.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаИнформационнаяСтрокаСпискаМЛ.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндикаторыДиспетчированияМЛ()

	ТребуетсяСформироватьРасписание = 0;
	ТребуетсяПередатьКВыполнению = 0;
	ТребуетсяОтметитьНачалоВыполнения = 0;
	ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ = 0;
	ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ = 0;
	ТребуетсяОтметитьВыполненным = 0;
	ТребуетсяОформитьВыработкуСотрудников = 0;
	ТребуетсяОформитьВыпуск = 0;
	ЕстьПросроченныеЗадачи = 0;
	ЕстьДефицитМатериалов = 0;
	СтатусВыполненияВЖелтойЗоне = 0;
	СтатусВыполненияВКраснойЗоне = 0;
	ЕстьОтставаниеОтРасписания = 0;
	ЕстьОтставаниеОтРасписания = 0;
	НеЗавершеныПредыдущиеЭтапы = 0;
	Для каждого ДанныеСтроки Из СписокМаршрутныхЛистов Цикл
		
		Если ДанныеСтроки.НеСоответствуетНастройкеСписка Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаМЛПройдена = (КонецДня(ДанныеСтроки.Начало) + 1) <= ДатаКонтроля;
		ДатаОкончанияМЛПройдена = (КонецДня(ДанныеСтроки.Окончание) + 1) <= ДатаКонтроля;
		
		Если ДанныеСтроки.ТребуетсяСформироватьРасписание Тогда
			ТребуетсяСформироватьРасписание = ТребуетсяСформироватьРасписание + 1;
		КонецЕсли; 
		
		Если ДанныеСтроки.ТребуетсяПередатьКВыполнению Тогда
			ТребуетсяПередатьКВыполнению = ТребуетсяПередатьКВыполнению + 1;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОтметитьНачалоВыполнения Тогда
			
			ТребуетсяОтметитьНачалоВыполнения = ТребуетсяОтметитьНачалоВыполнения + 1;
			Если ДатаНачалаМЛПройдена Тогда
				// задача просрочена, если прошло начало МЛ и еще не отметили
				ДанныеСтроки.ЕстьПросроченныеЗадачи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ Тогда
			ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ = ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ + 1;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ Тогда
			ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ = ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ + 1;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОтметитьВыполненным Тогда
			ТребуетсяОтметитьВыполненным = ТребуетсяОтметитьВыполненным + 1;
			Если ДатаОкончанияМЛПройдена Тогда
				// задача просрочена, если прошло окончание МЛ
				ДанныеСтроки.ЕстьПросроченныеЗадачи = Истина
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОформитьВыработкуСотрудников Тогда
			ТребуетсяОформитьВыработкуСотрудников = ТребуетсяОформитьВыработкуСотрудников + 1;
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетсяОформитьВыпуск Тогда
			ТребуетсяОформитьВыпуск = ТребуетсяОформитьВыпуск + 1;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусВыполнения > ГраницаЖелтойЗоны Тогда
			СтатусВыполненияВКраснойЗоне = СтатусВыполненияВКраснойЗоне + 1;
		ИначеЕсли ДанныеСтроки.СтатусВыполнения > ГраницаЗеленойЗоны Тогда
			СтатусВыполненияВЖелтойЗоне = СтатусВыполненияВЖелтойЗоне + 1;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.Отставание Тогда
			ЕстьОтставаниеОтРасписания = ЕстьОтставаниеОтРасписания + 1;
		КонецЕсли; 
		
		Если ДанныеСтроки.ЕстьПросроченныеЗадачи Тогда
			ЕстьПросроченныеЗадачи = ЕстьПросроченныеЗадачи + 1;
		КонецЕсли; 
		
		Если ДанныеСтроки.НеЗавершеныПредыдущиеЭтапы Тогда
			НеЗавершеныПредыдущиеЭтапы = НеЗавершеныПредыдущиеЭтапы + 1;
			Если ДатаНачалаМЛПройдена Тогда
				ДанныеСтроки.НеЗавершеныПредыдущиеЭтапыКартинка = 2;
			Иначе
				ДанныеСтроки.НеЗавершеныПредыдущиеЭтапыКартинка = 1;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ДанныеСтроки.ДефицитМатериалов <> 0 Тогда
			ЕстьДефицитМатериалов = ЕстьДефицитМатериалов + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Оформление отборов
	ОформитьЭлементыОтбора("ОтборПередатьКВыполнению", 
							НСтр("ru = 'Передать к выполнению';
								|en = 'Mark as released'"), 
							ТребуетсяПередатьКВыполнению);
							
	ОформитьЭлементыОтбора("ОтборОтметитьНачалоВыполнения", 
							НСтр("ru = 'Отметить начало выполнения';
								|en = 'Mark as started'"), 
							ТребуетсяОтметитьНачалоВыполнения);
							
	ОформитьЭлементыОтбора("ОтборОтметитьГотовностьКРаботеКлючевогоРЦ", 
							НСтр("ru = 'Отметить готовность к работе ключевого РЦ';
								|en = 'Mark key work center as ready for operation'"), 
							ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ);
							
	ОформитьЭлементыОтбора("ОтборОтметитьЗавершениеРаботыКлючевогоРЦ", 
							НСтр("ru = 'Отметить завершение работы ключевого РЦ';
								|en = 'Mark key work center operation as completed'"), 
							ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ);
							
	ОформитьЭлементыОтбора("ОтборОтметитьВыполненным", 
							НСтр("ru = 'Отметить выполненным';
								|en = 'Mark as completed'"), 
							ТребуетсяОтметитьВыполненным);
							
	ОформитьЭлементыОтбора("ОтборОформитьВыработкуСотрудников", 
							НСтр("ru = 'Оформить выработку сотрудников';
								|en = 'Register timesheets charge'"), 
							ТребуетсяОформитьВыработкуСотрудников);
							
	ОформитьЭлементыОтбора("ОтборОформитьВыпуск", 
							НСтр("ru = 'Оформить выпуск или выполнение работ';
								|en = 'Register product release or work completion'"), 
							ТребуетсяОформитьВыпуск);
	
	ОформитьЭлементыОтбора("ОтборЕстьПросроченныеЗадачи", 
							НСтр("ru = 'Есть просроченные задачи';
								|en = 'Overdue tasks'"), 
							ЕстьПросроченныеЗадачи);
							
	ОформитьЭлементыОтбора("ОтборСтатусВыполненияВЖелтойЗоне", 
							НСтр("ru = 'Буфер более 33%';
								|en = 'Buffer exceeding 33% '"), 
							СтатусВыполненияВЖелтойЗоне);
							
	ОформитьЭлементыОтбора("ОтборСтатусВыполненияВКраснойЗоне", 
							НСтр("ru = 'Буфер более 66%';
								|en = 'Buffer exceeding 66% '"), 
							СтатусВыполненияВКраснойЗоне);
							
	ОформитьЭлементыОтбора("ОтборЕстьОтставаниеОтРасписания", 
							НСтр("ru = 'Есть отставание от расписания';
								|en = 'Is behind of schedule'"), 
							ЕстьОтставаниеОтРасписания);
	
	ОформитьЭлементыОтбора("ОтборДефицитМатериалов", 
							НСтр("ru = 'Есть дефицит материалов';
								|en = 'There is a shortage of materials'"), 
							ЕстьДефицитМатериалов);
							
	ОформитьЭлементыОтбора("ОтборПоказатьЕслиНеЗавершеныПредыдущиеЭтапы", 
							НСтр("ru = 'Не завершены предыдущие этапы';
								|en = 'Incomplete previous stages'"), 
							НеЗавершеныПредыдущиеЭтапы);
	
	// Оформление команды Сформировать расписание
	ТребуетсяСформироватьРасписаниеСтрокой = Формат(ТребуетсяСформироватьРасписание, "ЧН=0; ЧГ=0");
	Элементы.СформироватьРасписание1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	НСтр("ru = 'Сформировать расписание (%1)';
																		|en = 'Generate timetable (%1)'"), 
																	ТребуетсяСформироватьРасписаниеСтрокой);
																	
	Элементы.СформироватьРасписание2.Заголовок = "(" + ТребуетсяСформироватьРасписаниеСтрокой + ")";
	
	Если ТребуетсяСформироватьРасписание = 1 Тогда
		ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Требуется сформировать расписание для одного маршрутного листа';
										|en = 'It is required to generate a timetable for one route sheet'"),
									ТребуетсяСформироватьРасписаниеСтрокой);
	ИначеЕсли ТребуетсяСформироватьРасписание > 1 Тогда
		ПодсказкаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Требуется сформировать расписание для %1 маршрутных листов';
										|en = 'It is required to generate a timetable for %1 route sheets'"),
									ТребуетсяСформироватьРасписаниеСтрокой);
	Иначе
		ПодсказкаКоманды = НСтр("ru = 'Нет маршрутных листов, по которым требуется формировать расписание';
								|en = 'No route sheets are found to generate a timetable.'");
	КонецЕсли;
								
	Элементы.СформироватьРасписание1.РасширеннаяПодсказка.Заголовок = ПодсказкаКоманды;
	Элементы.СформироватьРасписание2.РасширеннаяПодсказка.Заголовок = ПодсказкаКоманды; 
								
	Элементы.КартинкаСформироватьРасписание1.Гиперссылка = (ТребуетсяСформироватьРасписание <> 0);
	Элементы.КартинкаСформироватьРасписание2.Гиперссылка = (ТребуетсяСформироватьРасписание <> 0);
	
	// Применим отбор к строкам
	ПоказатьМЛСоответствующиеОтбору();

КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементыОтбора(ИмяОтбора, ЗаголовокОтбора, КоличествоДокументовУдовлетворяющихОтбору)

	КоличествоСтрокой = "(" + Формат(КоличествоДокументовУдовлетворяющихОтбору, "ЧН=0; ЧГ=0") + ")";
	
	Элементы["Декорация" + ИмяОтбора + "1"].Заголовок = ЗаголовокОтбора + " " + КоличествоСтрокой;
	Элементы["Декорация" + ИмяОтбора + "2"].Заголовок = КоличествоСтрокой;

	// Чтобы надпись изменила цвет текста
	ДоступностьНадписи = (КоличествоДокументовУдовлетворяющихОтбору <> 0);
	Если Элементы["Декорация" + ИмяОтбора + "1"].Доступность <> ДоступностьНадписи Тогда
		Элементы["Декорация" + ИмяОтбора + "1"].Доступность = ДоступностьНадписи;
	КонецЕсли;
	Если Элементы["Декорация" + ИмяОтбора + "2"].Доступность <> ДоступностьНадписи Тогда
		Элементы["Декорация" + ИмяОтбора + "2"].Доступность = ДоступностьНадписи;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборПоБригадам()

	Если ОтборБригады.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистПроизводстваТрудозатраты.Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК МаршрутныйЛистПроизводстваТрудозатраты
	|ГДЕ
	|	МаршрутныйЛистПроизводстваТрудозатраты.Бригада В(&СписокБригад)
	|	И МаршрутныйЛистПроизводстваТрудозатраты.Ссылка В(&СписокДокументов)";
	
	Запрос.УстановитьПараметр("СписокБригад", ОтборБригады);
	Запрос.УстановитьПараметр("СписокДокументов", СписокМаршрутныхЛистов.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	МаршрутныеЛистыСОтборомПоБригадам = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СтрокиКУдалению = Новый Массив;
	Для каждого ДанныеСтроки Из СписокМаршрутныхЛистов Цикл
		Если МаршрутныеЛистыСОтборомПоБригадам.Найти(ДанныеСтроки.Ссылка) = Неопределено Тогда
			СтрокиКУдалению.Добавить(ДанныеСтроки);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
		СписокМаршрутныхЛистов.Удалить(ДанныеСтроки);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерКартинкиМаршрута(ДанныеСтроки)

	// ПРИНЦИПЫ ВЫВОДА КАРТИНКИ
	// 1. Устанавливается картинка, соответствующая действию, 
	// которое в данный момент актуально в рамках сценария диспетчирования МЛ.
	//
	// 2. Обязательно нужно отмечать прохождение точек:
	//    - Готовность к работе ключевого рабочего центра
	//    - Завершена работа ключевого рабочего центра (если есть расписание)
	//    - Завершено выполнение маршрутного листа
	//    Поэтому отображается картинка соответствующая самой ранней точке, которую еще не отметили.
	//
	// 3. Статус выполнения вычисляется для буфера который еще не прошли
	
	ГруппаКартинокОтметитьНачалоВыполнения = 2;
	ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ = 6;
	ГруппаКартинокОтметитьЗавершениеРаботыКлючевогоРЦ = 10;
	ГруппаКартинокОтметитьВыполненным = 14;
	
	Если ДанныеСтроки.ПланироватьРаботу Тогда
		
		Если ДатаКонтроля < ДанныеСтроки.Начало Тогда
			ТекущаяТочкаМаршрута = 0; // Передать к выполнению
		ИначеЕсли ДатаКонтроля < ДанныеСтроки.НачалоРаботыКлючевогоРабочегоЦентра Тогда
			ТекущаяТочкаМаршрута = 1; // Предварительный буфер
		ИначеЕсли ДатаКонтроля < ДанныеСтроки.ОкончаниеРаботыКлючевогоРабочегоЦентра Тогда
			ТекущаяТочкаМаршрута = 2; // Работа РЦ
		ИначеЕсли ДатаКонтроля < ДанныеСтроки.Окончание Тогда
			ТекущаяТочкаМаршрута = 3; // Завершающий буфер
		Иначе
			ТекущаяТочкаМаршрута = 4; // Завершение работ
		КонецЕсли; 
		
	Иначе
		
		Если ДатаКонтроля < ДанныеСтроки.Начало Тогда
			ТекущаяТочкаМаршрута = 0; // Передать к выполнению
		ИначеЕсли ДатаКонтроля < ДанныеСтроки.Окончание Тогда
			ТекущаяТочкаМаршрута = 3; // Завершающий буфер
		Иначе
			ТекущаяТочкаМаршрута = 4; // Завершение работ
		КонецЕсли; 
		
	КонецЕсли;
	
	ДанныеСтроки.ТекущаяТочкаМаршрута = 0;
	ДанныеСтроки.НомерКартинкиМаршрута = 0;
	
	Если ТекущаяТочкаМаршрута = 0 Тогда
		
		Если ДанныеСтроки.ТребуетсяПередатьКВыполнению Тогда
			ДанныеСтроки.НомерКартинкиМаршрута = 1;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 1;
			
		ИначеЕсли ДанныеСтроки.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан
			ИЛИ ДанныеСтроки.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.КВыполнению Тогда
			
			ДанныеСтроки.НомерКартинкиМаршрута = 2;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 2;
			
		ИначеЕсли НЕ ДанныеСтроки.ГотовоКРаботеКлючевогоРабочегоЦентра 
			И ДанныеСтроки.ПланироватьРаботу Тогда
			
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 3;
			
		ИначеЕсли НЕ ДанныеСтроки.ЗавершенаРаботаКлючевогоРабочегоЦентра 
			И ДанныеСтроки.ЕстьРасписание
			И ДанныеСтроки.ПланироватьРаботу Тогда
			
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьЗавершениеРаботыКлючевогоРЦ;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 4;
			
		ИначеЕсли НЕ ДанныеСтроки.ЗавершеноВыполнениеМаршрутногоЛиста Тогда
			
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьВыполненным;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 5;
			
		КонецЕсли; 
		
	ИначеЕсли ТекущаяТочкаМаршрута = 1 Тогда
		
		// Предварительный буфер
		
		Если НЕ ДанныеСтроки.ГотовоКРаботеКлючевогоРабочегоЦентра Тогда
			Если ДанныеСтроки.СтатусВыполнения <= ГраницаЗеленойЗоны Тогда
				// Пока буфер в зеленой зоне можно показать картинку предыдущих точек
				Если ДанныеСтроки.ТребуетсяОтметитьНачалоВыполнения Тогда
					ДанныеСтроки.НомерКартинкиМаршрута = 4;
					ДанныеСтроки.ТекущаяТочкаМаршрута = 2;
				Иначе
					КартинкаСУчетомСтатусаРаботы(ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ, ДанныеСтроки);
					ДанныеСтроки.ТекущаяТочкаМаршрута = 3;
				КонецЕсли; 
			Иначе
				КартинкаСУчетомСтатусаРаботы(ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ, ДанныеСтроки);
				ДанныеСтроки.ТекущаяТочкаМаршрута = 3;
			КонецЕсли; 
		ИначеЕсли НЕ ДанныеСтроки.ЗавершенаРаботаКлючевогоРабочегоЦентра Тогда
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьЗавершениеРаботыКлючевогоРЦ;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 4;
		ИначеЕсли НЕ ДанныеСтроки.ЗавершеноВыполнениеМаршрутногоЛиста Тогда
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьВыполненным;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 5;
		КонецЕсли; 
		
	ИначеЕсли ТекущаяТочкаМаршрута = 2 Тогда
		
		// Работа РЦ
		
		Если НЕ ДанныеСтроки.ГотовоКРаботеКлючевогоРабочегоЦентра Тогда
			Если ДанныеСтроки.ДлительностьРаботВМинутах <> 0 Тогда
				КартинкаСУчетомСтатусаРаботы(ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ, ДанныеСтроки);
			Иначе
				ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ + 3;
			КонецЕсли; 
			ДанныеСтроки.ТекущаяТочкаМаршрута = 3;
		ИначеЕсли НЕ ДанныеСтроки.ЗавершенаРаботаКлючевогоРабочегоЦентра Тогда
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьЗавершениеРаботыКлючевогоРЦ;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 4;
		ИначеЕсли НЕ ДанныеСтроки.ЗавершеноВыполнениеМаршрутногоЛиста Тогда
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьВыполненным;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 5;
		КонецЕсли; 
		
	ИначеЕсли ТекущаяТочкаМаршрута = 3 Тогда
		
		// Завершающий буфер
		
		Если НЕ ДанныеСтроки.ГотовоКРаботеКлючевогоРабочегоЦентра 
			И ДанныеСтроки.ПланироватьРаботу Тогда
			
			КартинкаСУчетомСтатусаРаботы(ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ, ДанныеСтроки);
			ДанныеСтроки.ТекущаяТочкаМаршрута = 3;
			
		ИначеЕсли НЕ ДанныеСтроки.ЗавершенаРаботаКлючевогоРабочегоЦентра 
			И ДанныеСтроки.ЕстьРасписание Тогда
			
			Если ДанныеСтроки.СтатусВыполнения <= ГраницаЗеленойЗоны Тогда
				// Пока буфер в зеленой зоне можно показать картинку завершения работы на РЦ
				ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьЗавершениеРаботыКлючевогоРЦ + 2;
				ДанныеСтроки.ТекущаяТочкаМаршрута = 4;
			Иначе
				КартинкаСУчетомСтатусаРаботы(ГруппаКартинокОтметитьВыполненным, ДанныеСтроки);
				ДанныеСтроки.ТекущаяТочкаМаршрута = 5;
			КонецЕсли; 
			
		ИначеЕсли НЕ ДанныеСтроки.ЗавершеноВыполнениеМаршрутногоЛиста Тогда 
			КартинкаСУчетомСтатусаРаботы(ГруппаКартинокОтметитьВыполненным, ДанныеСтроки);
			ДанныеСтроки.ТекущаяТочкаМаршрута = 5;
		КонецЕсли; 
		
	ИначеЕсли ТекущаяТочкаМаршрута = 4 Тогда
		
		// Завершение работ
		Если НЕ ДанныеСтроки.ГотовоКРаботеКлючевогоРабочегоЦентра 
			И ДанныеСтроки.ПланироватьРаботу Тогда
			
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьГотовностьКРаботеКлючевогоРЦ + 3;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 3;
			
		ИначеЕсли НЕ ДанныеСтроки.ЗавершенаРаботаКлючевогоРабочегоЦентра 
			И ДанныеСтроки.ЕстьРасписание Тогда
			
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьЗавершениеРаботыКлючевогоРЦ + 3;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 4;
			
		ИначеЕсли НЕ ДанныеСтроки.ЗавершеноВыполнениеМаршрутногоЛиста Тогда 
			ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинокОтметитьВыполненным + 3;
			ДанныеСтроки.ТекущаяТочкаМаршрута = 5;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура КартинкаСУчетомСтатусаРаботы(ГруппаКартинок, ДанныеСтроки)

	Если ДанныеСтроки.СтатусВыполнения <= ГраницаЗеленойЗоны Тогда
		ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинок; // зеленый
	ИначеЕсли ДанныеСтроки.СтатусВыполнения <= ГраницаЖелтойЗоны Тогда
		ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинок + 1; // желтый
	ИначеЕсли ДанныеСтроки.СтатусВыполнения <= ГраницаКраснойЗоны Тогда
		ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинок + 2; // красный
	Иначе
		ДанныеСтроки.НомерКартинкиМаршрута = ГруппаКартинок + 3; // просрочена
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДиспетчированиеРЦ(Результат)

	Перем ДанныеДиспетчированиеРЦ;
	
	Если НЕ Результат.Свойство("ДанныеДиспетчированиеРЦ", ДанныеДиспетчированиеРЦ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеДиспетчированиеРЦ = Неопределено Тогда
		Элементы.СтраницыДиспетчированиеРЦДанные.ТекущаяСтраница = Элементы.СтраницаДиспетчированиеРЦНетДанных;
		Возврат;
	КонецЕсли; 
	
	ДоступныеРабочиеЦентры = ДанныеДиспетчированиеРЦ.ДоступныеРабочиеЦентры;
	
	Элементы.СтраницыДиспетчированиеРЦДанные.ТекущаяСтраница = Элементы.СтраницаДиспетчированиеРЦЕстьДанные;
	
	ДиспетчированиеРЦ.Загрузить(ДанныеДиспетчированиеРЦ.ДиспетчированиеРЦ);
	
	ОформитьЭлементыОтбора("ОтборРабочиеЦентрыОтставание", НСтр("ru = 'Есть отставание от расписания';
																|en = 'Is behind of schedule'"), ДанныеДиспетчированиеРЦ.ОтставаниеОтРасписания);
	ОформитьЭлементыОтбора("ОтборРабочиеЦентрыОпережение", НСтр("ru = 'Есть опережение расписания';
																|en = 'Is ahead of schedule'"), ДанныеДиспетчированиеРЦ.ОпережениеОтРасписания);
	ОформитьЭлементыОтбора("ОтборРабочиеЦентрыРасписаниеНеСформировано", НСтр("ru = 'Не сформировано расписание';
																				|en = 'Timetable is not created'"), ДанныеДиспетчированиеРЦ.НеСформированоРасписание);
	
	// Применим отбор к строкам
	ПоказатьРЦСоответствующиеОтбору();
	
	// Сделаем активной строку
	Если НЕ ТекущийРабочийЦентр.Пустая() Тогда
		СтруктураПоиска = Новый Структура("РабочийЦентр", ТекущийРабочийЦентр);
  		СписокСтрок = ДиспетчированиеРЦ.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.ДиспетчированиеРЦ.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		ТекущийРабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	КонецЕсли;
	
	ВидыРЦТребующиеВводаГрафикаРаботы = ДанныеДиспетчированиеРЦ.ВидыРЦТребующиеВводаГрафикаРаботы;
	Если ВидыРЦТребующиеВводаГрафикаРаботы = 0 Тогда
		Элементы.ГруппаГрафикиРЦРазвернута.ТекущаяСтраница = Элементы.СтраницаПерейтиКГрафикамРаботыРаботыРЦ;
		Элементы.ГруппаГрафикиРЦСвернута.ТекущаяСтраница = Элементы.СтраницаДопПанельСвернутаяПерейтиКГрафикамРаботыРаботыРЦ;
	Иначе
		Элементы.ГруппаГрафикиРЦРазвернута.ТекущаяСтраница = Элементы.СтраницаЗаполнитьГрафикРаботыРаботыРЦ;
		Элементы.ГруппаГрафикиРЦСвернута.ТекущаяСтраница = Элементы.СтраницаДопПанельСвернутаяЗаполнитьГрафикРаботыРаботыРЦ;
		
		Элементы.ГрафикиРаботыРЦ2.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Заполнить графики работы РЦ (%1)';
															|en = 'Fill in work center schedules (%1)'"),
														ВидыРЦТребующиеВводаГрафикаРаботы);
														
		Элементы.ДекорацияГрафикиРаботыРЦ2.Заголовок = "(" + ВидыРЦТребующиеВводаГрафикаРаботы + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграммуРасписания(Результат)
	
	Перем ТаблицаРасписание;
	
	Если НЕ Результат.Свойство("Расписание", ТаблицаРасписание) Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикЗанятостиРЦ.Обновление = Ложь;
	ГрафикЗанятостиРЦ.Очистить();
	
	Если НачалоПериода = '000101010000' Тогда
		НачалоПолногоПериода    = '000101010000';
		ОкончаниеПолногоПериода = '000101010000';
		Для каждого СтрокаПериод Из ТаблицаРасписание Цикл
			
			НачалоПолногоПериода = ?(НачалоПолногоПериода = '000101010000', 
										СтрокаПериод.Начало,
										Мин(СтрокаПериод.Начало, НачалоПолногоПериода));
			
			ОкончаниеПолногоПериода = ?(ОкончаниеПолногоПериода = '000101010000', 
										СтрокаПериод.Окончание,
										Макс(СтрокаПериод.Окончание, ОкончаниеПолногоПериода));
										
		КонецЦикла; 
	Иначе
		НачалоПолногоПериода    = НачалоПериода;
		ОкончаниеПолногоПериода = ОкончаниеПериода;
	КонецЕсли; 
	
	ТаблицаМаршрутныеЛисты = ТаблицаРасписание.Скопировать(, "МаршрутныйЛист,Номер,Дата");
	ТаблицаМаршрутныеЛисты.Свернуть("МаршрутныйЛист,Номер,Дата");
	
	// Определим начало и окончание периода
	ТаблицаМаршрутныеЛисты.Колонки.Добавить("НачалоПроизводства",    Новый ОписаниеТипов("Дата"));
	ТаблицаМаршрутныеЛисты.Колонки.Добавить("ОкончаниеПроизводства", Новый ОписаниеТипов("Дата"));
	Для каждого СтрокаМаршрутныйЛист Из ТаблицаМаршрутныеЛисты Цикл
		СтруктураПоиска = Новый Структура("МаршрутныйЛист", СтрокаМаршрутныйЛист.МаршрутныйЛист);
		СписокСтрок = ТаблицаРасписание.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаРасписание Из СписокСтрок Цикл
			СтрокаМаршрутныйЛист.НачалоПроизводства    = ?(СтрокаМаршрутныйЛист.НачалоПроизводства = '000101010000',
															СтрокаРасписание.Начало,
															Мин(СтрокаМаршрутныйЛист.НачалоПроизводства, СтрокаРасписание.Начало));
			СтрокаМаршрутныйЛист.ОкончаниеПроизводства = ?(СтрокаМаршрутныйЛист.ОкончаниеПроизводства = '000101010000',
															СтрокаРасписание.Окончание,
															Макс(СтрокаМаршрутныйЛист.ОкончаниеПроизводства, СтрокаРасписание.Окончание));
		КонецЦикла; 
	КонецЦикла;
	ТаблицаМаршрутныеЛисты.Сортировать("НачалоПроизводства");
	
	// Сформируем точки по видам рабочих центров
	СерияДиаграммы = ГрафикЗанятостиРЦ.УстановитьСерию(1);
	
	ТаблицаВидыРабочихЦентров = ТаблицаРасписание.Скопировать(, "ВидРабочегоЦентра");
	ТаблицаВидыРабочихЦентров.Свернуть("ВидРабочегоЦентра");
	ТаблицаВидыРабочихЦентров.Сортировать("ВидРабочегоЦентра");
	Для каждого СтрокаВидРабочегоЦентра Из ТаблицаВидыРабочихЦентров Цикл
		ТочкаВидРабочегоЦентра = ГрафикЗанятостиРЦ.УстановитьТочку(СтрокаВидРабочегоЦентра.ВидРабочегоЦентра);
		ТочкаВидРабочегоЦентра.Расшифровка = СтрокаВидРабочегоЦентра.ВидРабочегоЦентра;
	КонецЦикла;
	
	// Сформируем точки и периоды по рабочим центрам
	ТаблицаРабочиеЦентры = ТаблицаРасписание.Скопировать(, "РабочийЦентр,ВидРабочегоЦентра");
	ТаблицаРабочиеЦентры.Свернуть("РабочийЦентр,ВидРабочегоЦентра");
	ТаблицаРабочиеЦентры.Сортировать("РабочийЦентр");
	Для каждого СтрокаРабочийЦентр Из ТаблицаРабочиеЦентры Цикл
		
		ТочкаДиаграммы = ГрафикЗанятостиРЦ.УстановитьТочку(СтрокаРабочийЦентр.РабочийЦентр, СтрокаРабочийЦентр.ВидРабочегоЦентра);
		ТочкаДиаграммы.Расшифровка = СтрокаРабочийЦентр.РабочийЦентр;
		
		СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаРабочийЦентр.РабочийЦентр);
		СписокСтрок = ТаблицаРасписание.НайтиСтроки(СтруктураПоиска);
		ЗаполнитьПериодыГруппы(СписокСтрок, 
								ТочкаДиаграммы, 
								СерияДиаграммы, 
								ГрафикЗанятостиРЦ, 
								НачалоПолногоПериода, 
								ОкончаниеПолногоПериода);
		
	КонецЦикла;

	// Развернем виды рабочих центров
	Для каждого СтрокаВидРабочегоЦентра Из ТаблицаВидыРабочихЦентров Цикл
		ТочкаДиаграммы = ГрафикЗанятостиРЦ.УстановитьТочку(СтрокаВидРабочегоЦентра.ВидРабочегоЦентра);
		ГрафикЗанятостиРЦ.РазвернутьТочку(ТочкаДиаграммы, Истина);
	КонецЦикла;
	
	// Установим полный интервал диаграмм
	Если НачалоПолногоПериода <> '000101010000' И ОкончаниеПолногоПериода <> '000101010000' Тогда
		ГрафикЗанятостиРЦ.УстановитьПолныйИнтервал(НачалоДня(НачалоПолногоПериода), КонецДня(ОкончаниеПолногоПериода));
	КонецЕсли;

	ВыделитьТекущуюДату(ЭтаФорма);
	
	ГрафикЗанятостиРЦ.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыГруппы(СписокСтрок, ТочкаДиаграммы, СерияДиаграммы, Диаграмма, НачалоПолногоПериода, ОкончаниеПолногоПериода)

	Для каждого СтрокаПериод Из СписокСтрок Цикл
		
		ЗначениеПериод = Диаграмма.ПолучитьЗначение(ТочкаДиаграммы, СерияДиаграммы);
		
		Интервал = ЗначениеПериод.Добавить();
		Интервал.Расшифровка = СтрокаПериод.МаршрутныйЛист;
		Интервал.Начало      = ?(НачалоПолногоПериода <> '000101010000', Макс(СтрокаПериод.Начало, НачалоПолногоПериода), СтрокаПериод.Начало);
		Интервал.Конец       = ?(ОкончаниеПолногоПериода <> '000101010000', Мин(СтрокаПериод.Окончание, ОкончаниеПолногоПериода), СтрокаПериод.Окончание);
		
		Если НачалоДня(СтрокаПериод.Начало) = НачалоДня(СтрокаПериод.Окончание) Тогда
			ПериодСтрока = Формат(СтрокаПериод.Начало, "ДФ=ЧЧ:мм") + " - " 
							+ Формат(СтрокаПериод.Окончание, "ДФ=ЧЧ:мм");
		Иначе	
			
			ПериодСтрока = Формат(СтрокаПериод.Начало, "ДФ='дд.ММ ЧЧ:мм'") + " - "
							+ Формат(СтрокаПериод.Окончание, "ДФ='дд.ММ ЧЧ:мм'");
			
		КонецЕсли; 
		
		Интервал.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Маршрутный лист №%1 от %2 (%3)';
											|en = 'Route sheet # %1 from %2 (%3)'"),
										ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаПериод.Номер, Ложь, Истина),
										Формат(СтрокаПериод.Дата, "ДЛФ=D"),
										ПериодСтрока);
		
		Интервал.Цвет = WebЦвета.Васильковый;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШкалу(НовыйВидШкалы)
	
	ВидШкалы = НовыйВидШкалы;
	
	ШкалаВремениЭлементы = ГрафикЗанятостиРЦ.ОбластьПостроения.ШкалаВремени.Элементы;
	
	ПервыйЭлементШкалы = ШкалаВремениЭлементы[0];
	Для Сч = -ШкалаВремениЭлементы.Количество()+1 По -1 Цикл
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[-Сч]);
	КонецЦикла;
	
	Элементы.УстановитьПериодДень.Пометка   = (ВидШкалы = 0);
	Элементы.УстановитьПериодНеделя.Пометка = (ВидШкалы = 1);
	Элементы.УстановитьПериодМесяц.Пометка  = (ВидШкалы = 2);
	
	Если ВидШкалы = 0 Тогда
		// День, час
		ПервыйЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.День;
		ПервыйЭлементШкалы.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлементШкалы.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
		
		ЭлементШкалы = ШкалаВремениЭлементы.Добавить();
		ЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Час;
		ЭлементШкалы.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
	ИначеЕсли ВидШкалы = 1 Тогда
		// Неделя, день
		ПервыйЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Неделя;
		ПервыйЭлементШкалы.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		ЭлементШкалы = ШкалаВремениЭлементы.Добавить();
		ЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		ЭлементШкалы.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
	Иначе
		
		ПервыйЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ПервыйЭлементШкалы.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
	КонецЕсли; 
	
	ВыделитьТекущуюДату(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьТекущуюДату(Форма)

	Форма.ГрафикЗанятостиРЦ.ИнтервалыФона.Очистить();
	
	ЦветТекущегоДня = WebЦвета.ТопленоеМолоко;
	
	Если Форма.ВидШкалы = 0 Тогда
		// День, час
		ИнтервалТекущегоДня1 = Форма.ГрафикЗанятостиРЦ.ИнтервалыФона.Добавить(НачалоЧаса(Форма.ДатаКонтроля), КонецЧаса(Форма.ДатаКонтроля));
		
		ИнтервалТекущегоДня1.Цвет = ЦветТекущегоДня;
		
	Иначе
		Если НачалоДня(Форма.ГрафикЗанятостиРЦ.НачалоПолногоИнтервала) <> НачалоДня(Форма.ГрафикЗанятостиРЦ.КонецПолногоИнтервала) Тогда
			ИнтервалТекущегоДня = Форма.ГрафикЗанятостиРЦ.ИнтервалыФона.Добавить(НачалоДня(Форма.ДатаКонтроля), КонецДня(Форма.ДатаКонтроля));
			ИнтервалТекущегоДня.Цвет = ЦветТекущегоДня;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДиаграммыПоУмолчанию(Диаграмма)

	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Авто;
	Диаграмма.Окантовка = Истина;
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.ВертикальнаяПрокрутка = Истина;
	Диаграмма.ОтображатьПустыеЗначения = Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;

КонецПроцедуры

&НаСервере
Функция ОтборПодразделениеПриИзмененииНаСервере()

	Если НЕ ОтборПодразделение.Пустая() Тогда
		УправлениеМаршрутнымиЛистами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПодразделение, "УправлениеМаршрутнымиЛистами");
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
			ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
			ОтборПодразделение = ОтборПодразделениеДоИзменения;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
 
&НаСервере
Процедура ОпределитьПараметрыПодразделения()

	Если ОтборПодразделение.Пустая() Тогда
		
		// Определим максимальный интервал планирования
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтруктураПредприятия.ИнтервалПланирования
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.ПустаяСсылка();
		Пока Выборка.Следующий() Цикл
			Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
				Если Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя
					ИЛИ Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
					ИнтервалПланирования = Выборка.ИнтервалПланирования;
				КонецЕсли;
			ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
				Если Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
					ИнтервалПланирования = Выборка.ИнтервалПланирования;
				КонецЕсли;
			Иначе
				ИнтервалПланирования = Выборка.ИнтервалПланирования;
			КонецЕсли;
			
			Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если ИнтервалПланирования.Пустая() Тогда
			ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц;
		КонецЕсли;
		
		Элементы.ОтборПериод.ТолькоПросмотр = Истина;
		
	Иначе
		
		ИнтервалПланирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПодразделение, "ИнтервалПланирования");
		ГрафикРаботыПодразделения = ГрафикРаботыПодразделения();
		Элементы.ОтборПериод.ТолькоПросмотр = Ложь;
		
	КонецЕсли; 

	УправлениеДоступностьюКнопокМасштабаДиаграммы();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюКнопокМасштабаДиаграммы()

	УстановитьПериодДеньДоступность = Истина;
	УстановитьПериодНеделяДоступность = Истина;
	УстановитьПериодМесяцДоступность = Истина;
	
	Если ОтборПериод = "Текущий" ИЛИ  ОтборПериод = "Следующий" Тогда
		// Если выбран только один
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
			ИЛИ ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			
			ОбновитьШкалу(0);
			УстановитьПериодДеньДоступность = Истина; 
			УстановитьПериодНеделяДоступность = Ложь;
			УстановитьПериодМесяцДоступность = Ложь;
			
		ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
			
			Если ВидШкалы = 2 Тогда
				ОбновитьШкалу(1);
			КонецЕсли; 
			УстановитьПериодДеньДоступность = Истина; 
			УстановитьПериодНеделяДоступность = Истина;
			УстановитьПериодМесяцДоступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.УстановитьПериодДень.Доступность = УстановитьПериодДеньДоступность;
	Элементы.УстановитьПериодНеделя.Доступность = УстановитьПериодНеделяДоступность;
	Элементы.УстановитьПериодМесяц.Доступность = УстановитьПериодМесяцДоступность;

КонецПроцедуры

&НаСервере
Функция ГрафикРаботыПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение) КАК ГрафикРаботы
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК ГрафикПодразделения
	|		ПО СтруктураПредприятия.Ссылка = ГрафикПодразделения.Ссылка
	|			И ГрафикПодразделения.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ГрафикРаботы;

КонецФункции

&НаСервере
Процедура ЗаполнитьВыборПериода()
	
	СписокВыбораПериода = Элементы.ОтборПериод.СписокВыбора;
	СписокВыбораПериода.Очистить();

	Если НЕ ОтборПодразделение.Пустая() Тогда
		
		// Текущий
		ДатаПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ДатаКонтроля, ИнтервалПланирования);
		ПериодСтрока = ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(
										ДатаПериода,
										ИнтервалПланирования);
										
		ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Текущий (%1)';
										|en = 'Current (%1)'"),
									ПериодСтрока);
									
		СписокВыбораПериода.Добавить("Текущий", ПредставлениеПериода);
		
		// Следующий
		ДатаСледующегоПериода = '000101010000';
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День
			И НЕ ГрафикРаботыПодразделения.Пустая() Тогда
			// Определим следующий день с учетом графика работы
			ДатаСледующегоПериода = КалендарныеГрафики.ДатаПоКалендарю(ГрафикРаботыПодразделения, ДатаКонтроля, 1, Ложь);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ДатаСледующегоПериода) Тогда
			ДатаСледующегоПериода = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ДатаКонтроля, ИнтервалПланирования) + 1;
		КонецЕсли;
		
		ПериодСтрока = ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(
										ДатаСледующегоПериода,
										ИнтервалПланирования);
										
		ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Следующий (%1)';
										|en = 'Next (%1)'"),
									ПериодСтрока);
									
		СписокВыбораПериода.Добавить("Следующий", ПредставлениеПериода);
		
	Иначе
		
		ОтборПериод = "";
		
	КонецЕсли; 

	СписокВыбораПериода.Добавить("", НСтр("ru = '<без отбора>';
											|en = '<No filter>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.1, Истина);

КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() Тогда
		ОбновитьДанные();
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область СписокМаршрутныхЛистов

&НаКлиенте
Процедура УдалитьВыбранныеМаршрутныеЛисты()

	КоличествоВсего = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки.Количество();
	Если КоличествоВсего = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоВсего = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Пометить на удаление?';
							|en = 'Mark for deletion?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить на удаление выбранные документы?';
							|en = 'Mark the selected documents for deletion?'");
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьВыбранныеМаршрутныеЛистыЗавершение", ЭтотОбъект, КоличествоВсего);
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пометить на удаление';
														|en = 'Mark for deletion'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеМаршрутныеЛистыЗавершение(РезультатВопроса, КоличествоВсего) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = УдалитьВыбранныеМаршрутныеЛистыНаСервере();
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Помечено на удаление %1 из %2 документов';
										|en = '%1 of %2 documents are marked for deletion'"),
									КоличествоОбработанных,
									КоличествоВсего);
		ПоказатьОповещениеПользователя(,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
		ОперативныйУчетПроизводстваКлиент.ОповеститьОЗаписиМаршрутныхЛистов(УникальныйИдентификатор);
		
		ОбновитьДанные();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьВыбранныеМаршрутныеЛистыНаСервере()

	КоличествоПомеченныхНаУдаление = 0;
	
	Для каждого ИдентификаторСтроки Из Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Попытка
			
			ДокОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			КоличествоПомеченныхНаУдаление = КоличествоПомеченныхНаУдаление + 1;
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось пометить на удаление документ: %Ссылка% по причине: %Причина%';
									|en = 'Cannot mark the %Ссылка%  document for deletion due to: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ДанныеСтроки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Маршрутный лист производства';
					|en = 'Production route sheet'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ДанныеСтроки.Ссылка.Метаданные(),
				ДанныеСтроки.Ссылка,
				ТекстСообщения);
			
		КонецПопытки; 
	КонецЦикла;

	Возврат КоличествоПомеченныхНаУдаление;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборВСпискеМаршрутныхЛистов()
	
	СохранитьПараметрыОтбора();
	ПоказатьМЛСоответствующиеОтбору();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьМЛСоответствующиеОтбору()
	
	ВыбранХотябыОдинОтбор = ОтборПередатьКВыполнению
							ИЛИ ОтборОтметитьНачалоВыполнения
							ИЛИ ОтборОтметитьГотовностьКРаботеКлючевогоРЦ
							ИЛИ ОтборОтметитьЗавершениеРаботыКлючевогоРЦ
							ИЛИ ОтборОтметитьВыполненным
							ИЛИ ОтборОформитьВыработкуСотрудников
							ИЛИ ОтборОформитьВыпуск
							ИЛИ ОтборЕстьОтставаниеОтРасписания
							ИЛИ ОтборСтатусВыполненияВКраснойЗоне
							ИЛИ ОтборСтатусВыполненияВЖелтойЗоне
							ИЛИ ОтборЕстьПросроченныеЗадачи
							ИЛИ ОтборПоказатьЕслиНеЗавершеныПредыдущиеЭтапы
							ИЛИ ОтборДефицитМатериалов;
							
	Для каждого ДанныеСтроки Из СписокМаршрутныхЛистов Цикл
		Если НЕ ВыбранХотябыОдинОтбор 
			ИЛИ ОтборПередатьКВыполнению 
				И ДанныеСтроки.ТребуетсяПередатьКВыполнению
			ИЛИ ОтборОтметитьНачалоВыполнения
				И ДанныеСтроки.ТребуетсяОтметитьНачалоВыполнения
			ИЛИ ОтборОтметитьГотовностьКРаботеКлючевогоРЦ
				И ДанныеСтроки.ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ 
			ИЛИ ОтборОтметитьЗавершениеРаботыКлючевогоРЦ
				И ДанныеСтроки.ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ 
			ИЛИ ОтборОтметитьВыполненным
				И ДанныеСтроки.ТребуетсяОтметитьВыполненным
			ИЛИ ОтборОформитьВыработкуСотрудников
				И ДанныеСтроки.ТребуетсяОформитьВыработкуСотрудников
			ИЛИ ОтборОформитьВыпуск
				И ДанныеСтроки.ТребуетсяОформитьВыпуск
			ИЛИ ОтборЕстьОтставаниеОтРасписания
				И ДанныеСтроки.СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.Отставание
			ИЛИ ОтборСтатусВыполненияВКраснойЗоне
				И ДанныеСтроки.СтатусВыполнения > 66 
			ИЛИ ОтборСтатусВыполненияВЖелтойЗоне
				И ДанныеСтроки.СтатусВыполнения > 33
				И ДанныеСтроки.СтатусВыполнения <= 66
			ИЛИ ОтборЕстьПросроченныеЗадачи
				И ДанныеСтроки.ЕстьПросроченныеЗадачи
			ИЛИ ОтборПоказатьЕслиНеЗавершеныПредыдущиеЭтапы
				И ДанныеСтроки.НеЗавершеныПредыдущиеЭтапы
			ИЛИ ОтборДефицитМатериалов
				И ДанныеСтроки.ДефицитМатериалов <> 0 Тогда
			ДанныеСтроки.ПоказатьВСписке = Истина;
		Иначе
			ДанныеСтроки.ПоказатьВСписке = Ложь;
		КонецЕсли;
	КонецЦикла; 

	// Сделаем активной строку
	Если НЕ ТекущийМаршрутныйЛист.Пустая() Тогда
		СтруктураПоиска = Новый Структура("Ссылка", ТекущийМаршрутныйЛист);
  		СписокСтрок = СписокМаршрутныхЛистов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.СписокМаршрутныхЛистов.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		ТекущийМаршрутныйЛист = Документы.МаршрутныйЛистПроизводства.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивМаршрутныхЛистов2Нажатие(Элемент)
	
	ОткрытьАрхивМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАрхивМаршрутныхЛистов1Нажатие(Элемент)
	
	ОткрытьАрхивМаршрутныхЛистов();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьМаршрутныйЛистЗавершение(ДанныеМаршрутныйЛист, ДополнительныеПараметры) Экспорт

	Если ДанныеМаршрутныйЛист <> Неопределено Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДопПанелью()

	Элементы.ПанельМЛРазвернута.Видимость = НЕ СвернутьДопПанель;
	Элементы.ПанельМЛСвернута.Видимость = СвернутьДопПанель;

	Элементы.ПанельРЦРазвернута.Видимость = НЕ СвернутьДопПанель;
	Элементы.ПанельРЦСвернута.Видимость = СвернутьДопПанель;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивМаршрутныхЛистов()

	ПараметрыФормы = Новый Структура("Подразделение,Статус", ОтборПодразделение, ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен"));
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПередатьКВыполнению(ВыбраннаяСтрока = Неопределено)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан") Тогда
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не требуется передавать к выполнению выбранные маршрутные листы.';
									|en = 'It is not required to pass the selected route sheets for completion.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусМЛ("КВыполнению", НСтр("ru = 'К выполнению';
											|en = 'Ready for fulfillment'"), МассивСсылок);

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьНачалоВыполнения(ВыбраннаяСтрока = Неопределено)

	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан")
			ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению") Тогда
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не требуется отмечать начало выполнения.';
									|en = 'It is not required to mark execution start.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьНачалоВыполненияЗавершение", ЭтотОбъект, МассивСсылок);
	ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма.ОтметкаНачалаВыполненияМаршрутногоЛиста",,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьНачалоВыполненияЗавершение(ПараметрыДокумента, МассивСсылок) Экспорт

	Если ПараметрыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДокументыИзменены = ОтметитьНачалоВыполненияНаСервере(ПараметрыДокумента, МассивСсылок);
	
	Если ДокументыИзменены Тогда
		ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОтметитьНачалоВыполненияНаСервере(ПараметрыДокумента, МассивСсылок)
	
	ДатаСобытия = ПараметрыДокумента.ФактическоеНачало;
	
	ДокументыИзменены = Ложь;
	Для каждого Ссылка Из МассивСсылок Цикл
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется 
			ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусДоИзменения = ДокументОбъект.Статус;
		ДокументОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется;
		ДокументОбъект.ПриИзмененииСтатуса(СтатусДоИзменения, ДатаСобытия);
		
		Попытка
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокументыИзменены = Истина;
			КонецЕсли; 
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось отметить начало выполнения документа: %Ссылка% по причине: %Причина%';
									|en = 'Cannot mark the %Ссылка% document execution start due to: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Маршрутный лист производства';
					|en = 'Production route sheet'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Ссылка.Метаданные(),
				Ссылка,
				ТекстСообщения);
			
		КонецПопытки; 
	КонецЦикла; 
	
	Возврат ДокументыИзменены;

КонецФункции

&НаКлиенте
Процедура ОтметитьГотовностьКРаботеКлючевогоРЦ(ВыбраннаяСтрока = Неопределено)

	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.ПланироватьРаботу
			И НЕ ДанныеСтроки.ГотовоКРаботеКлючевогоРабочегоЦентра Тогда
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не требуется отмечать готовность к работе ключевого РЦ.';
									|en = 'It is not required to mark key work center as ready for work.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьГотовностьКРаботеКлючевогоРЦЗавершение", ЭтотОбъект, МассивСсылок);
	ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма.ОтметкаГотовностиКРаботеКлючевогоРабочегоЦентра",,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьГотовностьКРаботеКлючевогоРЦЗавершение(ПараметрыДокумента, МассивСсылок) Экспорт

	Если ПараметрыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДокументыИзменены = ОтметитьГотовностьКРаботеКлючевогоРЦНаСервере(ПараметрыДокумента, МассивСсылок);
	
	Если ДокументыИзменены Тогда
		ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОтметитьГотовностьКРаботеКлючевогоРЦНаСервере(ПараметрыДокумента, МассивСсылок)
	
	ДатаСобытия = ПараметрыДокумента.ДатаВыполненияРаботВПредварительномБуфере;
	ПричинаЗадержки = ПараметрыДокумента.ПричинаЗадержки;

	ДокументыИзменены = Ложь;
	Для каждого Ссылка Из МассивСсылок Цикл
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.ГотовоКРаботеКлючевогоРабочегоЦентра Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект.ГотовоКРаботеКлючевогоРабочегоЦентра = Истина;
		ДокументОбъект.ДатаВыполненияРаботВПредварительномБуфере = ДатаСобытия;
		ДокументОбъект.ПричинаЗадержкиПредварительныйБуфер = ПричинаЗадержки;
		
		ОперативныйУчетПроизводстваКлиентСервер.ПриИзмененииМаршрута(ДокументОбъект, Истина, ДатаСобытия);
		
		Попытка
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокументыИзменены = Истина;
			КонецЕсли; 
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось отметить готовность к работе ключевого РЦ в документе: %Ссылка% по причине: %Причина%';
									|en = 'Cannot mark the key work center as ready for operation in the %Ссылка% document due to: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Маршрутный лист производства';
					|en = 'Production route sheet'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Ссылка.Метаданные(),
				Ссылка,
				ТекстСообщения);
			
		КонецПопытки; 
	КонецЦикла; 
	
	Возврат ДокументыИзменены;

КонецФункции

&НаКлиенте
Процедура ОтметитьЗавершениеРаботыКлючевогоРЦ(ВыбраннаяСтрока = Неопределено)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.ПланироватьРаботу
			И НЕ ДанныеСтроки.ЗавершенаРаботаКлючевогоРабочегоЦентра Тогда
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не требуется отмечать завершение работы ключевого РЦ.';
									|en = 'It is not required to mark key work center work completion.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьЗавершениеРаботыКлючевогоРЦЗавершение", ЭтотОбъект, МассивСсылок);
	ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма.ОтметкаЗавершенияРаботыКлючевогоРабочегоЦентра",,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЗавершениеРаботыКлючевогоРЦЗавершение(ПараметрыДокумента, МассивСсылок) Экспорт

	Если ПараметрыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ДокументыИзменены = ОтметитьЗавершениеРаботыКлючевогоРЦНаСервере(ПараметрыДокумента, МассивСсылок);
	Если ДокументыИзменены Тогда
		ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОтметитьЗавершениеРаботыКлючевогоРЦНаСервере(Знач ПараметрыДокумента, Знач МассивСсылок)

	ДатаСобытия = ПараметрыДокумента.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра;
	
	ДокументыИзменены = Ложь;
	Для каждого Ссылка Из МассивСсылок Цикл
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.ЗавершенаРаботаКлючевогоРабочегоЦентра Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект.ГотовоКРаботеКлючевогоРабочегоЦентра = Истина;
		ДокументОбъект.ЗавершенаРаботаКлючевогоРабочегоЦентра = Истина;
		ДокументОбъект.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра = ДатаСобытия;
		
		ОперативныйУчетПроизводстваКлиентСервер.ПриИзмененииМаршрута(ДокументОбъект, Истина, ДатаСобытия);
		
		Попытка
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокументыИзменены = Истина;
			КонецЕсли; 
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось отметить завершение работы ключевого РЦ в документе: %Ссылка% по причине: %Причина%';
									|en = 'Cannot mark the key work center operation as completed in the %Ссылка% document due to: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Маршрутный лист производства';
					|en = 'Production route sheet'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Ссылка.Метаданные(),
				Ссылка,
				ТекстСообщения);
			
		КонецПопытки; 
		
	КонецЦикла; 

	Возврат ДокументыИзменены;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьВыполненным(ВыбраннаяСтрока = Неопределено)

	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОтметитьЗавершение = Ложь;
	ДанныеДокументов = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен") Тогда
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("Ссылка", ДанныеСтроки.Ссылка);
			ДанныеДокумента.Вставить("ПланироватьРаботу", ДанныеСтроки.ПланироватьРаботу);
			ДанныеДокументов.Добавить(ДанныеДокумента);
			
			Если ДанныеСтроки.ПланироватьРаботу
				И НЕ ДанныеСтроки.ЗавершеноВыполнениеМаршрутногоЛиста Тогда
				// Пользователь должен ввести дату завершения
				ТребуетсяОтметитьЗавершение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДокументов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не требуется отмечать выполненными маршрутные листы.';
									|en = 'It is not required to mark the route sheets as completed.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если ТребуетсяОтметитьЗавершение Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьВыполненнымЗавершение", ЭтотОбъект, ДанныеДокументов);
		ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма.ОтметкаЗавершенияВыполненияМаршрутногоЛиста",,,,,, ОписаниеОповещения);
	Иначе
		ПараметрыДокумента = Новый Структура("ПричинаЗадержки", Неопределено);
		ОтметитьВыполненнымЗавершение(ПараметрыДокумента, ДанныеДокументов);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполненнымЗавершение(ПараметрыДокумента, ДанныеДокументов) Экспорт

	Если ПараметрыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДокументыИзменены = ОтметитьВыполненнымНаСервере(ПараметрыДокумента, ДанныеДокументов);
	
	Если ДокументыИзменены Тогда
		ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОтметитьВыполненнымНаСервере(Знач ПараметрыДокумента, Знач ДанныеДокументов)
	
	Если ПараметрыДокумента.Свойство("ФактическоеОкончание") Тогда
		ФактическоеОкончание = ПараметрыДокумента.ФактическоеОкончание;
	Иначе
		ФактическоеОкончание = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПричинаЗадержки = ПараметрыДокумента.ПричинаЗадержки;
	
	ДокументыИзменены = Ложь;
	Для каждого ДанныеСтроки Из ДанныеДокументов Цикл
		ДокументОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусДоИзменения = ДокументОбъект.Статус;
		ДокументОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;
		ДокументОбъект.ПриИзмененииСтатуса(СтатусДоИзменения, ФактическоеОкончание);
		
		Попытка
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокументыИзменены = Истина;
			КонецЕсли; 
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось отметить выполненным документ: %Ссылка% по причине: %Причина%';
									|en = 'Cannot mark the %Ссылка% document as completed due to: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ДанныеСтроки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Маршрутный лист производства';
					|en = 'Production route sheet'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ДанныеСтроки.Ссылка.Метаданные(),
				ДанныеСтроки.Ссылка,
				ТекстСообщения);
			
		КонецПопытки; 
	КонецЦикла; 
	
	Возврат ДокументыИзменены;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусМЛ(ЗначениеСтатуса, ПредставлениеСтатуса, МассивСсылок = Неопределено)

	Если МассивСсылок = Неопределено Тогда
		МассивСсылок = ВыбранныеМаршрутныеЛисты();
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      ЗначениеСтатуса);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     МассивСсылок);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусМЛЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'У выбранных документов будет установлен статус ""%1"". Продолжить?';
						|en = 'The ""%1"" status will be set for the selected documents. Continue?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
														|en = 'Continue'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусМЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УстановитьСтатусДокументовНаСервере(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
	
	Если КоличествоОбработанных <> 0 Тогда
		ОбновитьДанные();
	КонецЕсли;

	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.СписокМаршрутныхЛистов,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);

КонецПроцедуры

&НаСервере
Функция УстановитьСтатусДокументовНаСервере(Знач ВыделенныеСсылки, Знач ЗначениеСтатуса)

	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
										ВыделенныеСсылки, 
										ЗначениеСтатуса);
										
	Возврат КоличествоОбработанных;
	
КонецФункции

&НаКлиенте
Процедура ОтгрузитьМатериалы(ВыбраннаяСтрока = Неопределено)

	Если НЕ ПравоКорректировкиЗаказаМатериалов Тогда
		Возврат;
	КонецЕсли;

	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	МассивСсылок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокМаршрутныхЛистов", МассивСсылок);
	ПараметрыФормы.Вставить("ЗаполнятьПоСпискуМаршрутныхЛистов", Истина);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВыработкуСотрудников(ВыбраннаяСтрока = Неопределено)

	МассивСсылок = ВыбранныеМаршрутныеЛисты(ВыбраннаяСтрока);
	Если МассивСсылок.Количество() = 0 ИЛИ НЕ ПравоВводаВыработкиСотрудников Тогда
		Возврат;
	КонецЕсли;

	ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоРаспоряжениям(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьВыпуск(ВыбраннаяСтрока = Неопределено)

	МассивСсылок = ВыбранныеМаршрутныеЛисты(ВыбраннаяСтрока);
	Если МассивСсылок.Количество() = 0 ИЛИ НЕ ПравоВводаВыпускПродукции Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСсылок.Количество() > 1 И НЕ ИспользоватьВыпускПоНесколькимРаспоряжениям Тогда
		ТекстПредупреждения = НСтр("ru = 'Оформление одного документа на основании нескольких маршрутных листов отключено.
											|Необходимо выбрать один маршрутный лист.';
											|en = 'Registration of a single document based on multiple route sheets is disabled.
											|Please select one route sheet.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = Неопределено;
	ПараметрыОформления = ПараметрыОформленияВыпуска(МассивСсылок, ОтборПодразделение, ТекстПредупреждения);
	Если ПараметрыОформления = Неопределено Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДанныеРаспоряжений = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		СтруктураРаспоряжения = Новый Структура("Распоряжение", ДанныеСтроки.Ссылка);
		ДанныеРаспоряжений.Добавить(СтруктураРаспоряжения);
	КонецЦикла;
	
	// Откроем форму
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РеквизитыШапки",     ПараметрыОформления);
	ПараметрыОснования.Вставить("ДанныеРаспоряжений", ДанныеРаспоряжений);
	
	ОткрытьФорму("Документ.ВыпускПродукции.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыОформленияВыпуска(Знач МассивСсылок, Знач Подразделение, ТекстПредупреждения)
	
	Возврат Документы.ВыпускПродукции.ПараметрыОформленияВыпуска(МассивСсылок, Подразделение, ТекстПредупреждения);
	
КонецФункции

&НаКлиенте
Процедура ОтметитьПрохождениеМаршрута(ВыбраннаяСтрока)

	ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ДанныеСтроки.ТекущаяТочкаМаршрута = 5 Тогда
		ОтметитьВыполненным(ВыбраннаяСтрока);
	ИначеЕсли ДанныеСтроки.ТекущаяТочкаМаршрута = 4 Тогда
		ОтметитьЗавершениеРаботыКлючевогоРЦ(ВыбраннаяСтрока);
	ИначеЕсли ДанныеСтроки.ТекущаяТочкаМаршрута = 3 Тогда
		ОтметитьГотовностьКРаботеКлючевогоРЦ(ВыбраннаяСтрока);
	ИначеЕсли ДанныеСтроки.ТекущаяТочкаМаршрута = 2 Тогда
		ОтметитьНачалоВыполнения(ВыбраннаяСтрока);
	ИначеЕсли ДанныеСтроки.ТекущаяТочкаМаршрута = 1 Тогда
		ПередатьКВыполнению();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Функция ВыбранныеМаршрутныеЛисты(ВыбраннаяСтрока = Неопределено)

	Если ВыбраннаяСтрока <> Неопределено Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
	Иначе
		ВыделенныеСтроки = Элементы.СписокМаршрутныхЛистов.ВыделенныеСтроки;
	КонецЕсли; 
	
	МассивСсылок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокМаршрутныхЛистов.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла; 

	Возврат МассивСсылок;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьРасписаниеВУправленииМЛ()

	ТекущиеДанные = Элементы.СписокМаршрутныхЛистов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.ПланироватьРаботуРабочихЦентров Тогда
		Возврат;
	КонецЕсли; 

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", ТекущиеДанные.Подразделение);
	ПараметрыФормы.Вставить("ДатаИнтервалаНачало", ТекущиеДанные.ДатаИнтервалаНачало);
	ПараметрыФормы.Вставить("МаршрутныйЛист", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ДиспетчированиеРЦ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидомДиспетчированияРЦ(Форма)

	Если Форма.ВидДиспетчированияРЦ = 0 Тогда
		СтраницаКоманды = Форма.Элементы.СтраницаКомандыДиспетчированиеРЦСписок;
		СтраницаДиспетчированиеРЦ =  Форма.Элементы.СтраницаСписокРЦ;
	Иначе
		СтраницаКоманды = Форма.Элементы.СтраницаКомандыДиспетчированиеРЦДиаграмма;
		СтраницаДиспетчированиеРЦ =  Форма.Элементы.СтраницаГрафикЗанятости;
	КонецЕсли; 
	
	Форма.Элементы.СтраницыКомандыДиспетчированияРЦ.ТекущаяСтраница = СтраницаКоманды;
	Форма.Элементы.СтраницыДиспетчированиеРЦ.ТекущаяСтраница = СтраницаДиспетчированиеРЦ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ПоказатьЗначение(,РезультатЗакрытия.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВДиспетчированииРЦ()
	
	СохранитьПараметрыОтбора();
	ПоказатьРЦСоответствующиеОтбору();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРЦСоответствующиеОтбору()

	ВыбранХотябыОдинОтбор = ОтборРабочиеЦентрыОтставание
							ИЛИ ОтборРабочиеЦентрыОпережение
							ИЛИ ОтборРабочиеЦентрыРасписаниеНеСформировано;
							
	Для каждого ДанныеСтроки Из ДиспетчированиеРЦ Цикл
		Если НЕ ВыбранХотябыОдинОтбор 
			ИЛИ ОтборРабочиеЦентрыОтставание 
				И ДанныеСтроки.СтатусРаботы = Перечисления.СтатусыРаботыРабочихЦентров.Отставание
			ИЛИ ОтборРабочиеЦентрыОпережение
				И ДанныеСтроки.СтатусРаботы = Перечисления.СтатусыРаботыРабочихЦентров.Опережение
			ИЛИ ОтборРабочиеЦентрыРасписаниеНеСформировано
				И ДанныеСтроки.ТребуетсяСформироватьРасписание Тогда
				
			ДанныеСтроки.ПоказатьВСписке = Истина;
		Иначе
			ДанныеСтроки.ПоказатьВСписке = Ложь;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеВДиспетчированииРЦ()

	ТекущиеДанные = Элементы.ДиспетчированиеРЦ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.ПланироватьРаботуРабочихЦентров Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", ТекущиеДанные.Подразделение);
	ПараметрыФормы.Вставить("ВидРабочегоЦентра", ТекущиеДанные.ВидРабочегоЦентра);
	ПараметрыФормы.Вставить("ДатаИнтервалаНачало", ТекущиеДанные.ДатаИнтервалаНачало);
	ПараметрыФормы.Вставить("РабочийЦентр", ТекущиеДанные.РабочийЦентр);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.МаршрутныйЛистПроизводства.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		СтруктураПоиска = Новый Структура("Ссылка", МассивСсылок[0]);
  		СписокСтрок = СписокМаршрутныхЛистов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.СписокМаршрутныхЛистов.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновыеЗадания(ПараметрыЗаданий = Неопределено)

	ВсеЗаданияВыполнены = ЗапуститьФоновыеЗаданияНаСервере(ПараметрыЗаданий);
	
	Если ВсеЗаданияВыполнены Тогда
		ОбработатьЗавершениеЗаданийНаКлиенте();
	Иначе
		ОткрытьФормуДлительнойОперации();
    КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьФоновоеЗадание(ИмяЗадания, Форма)

	ДанныеЗадания = Форма.ТекущиеФоновыеЗадания.Добавить();
	ДанныеЗадания.ИмяЗадания = ИмяЗадания;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновыеЗаданияНаСервере(Знач ПараметрыЗаданий)
	
	ИдентификаторЗадания = Новый УникальныйИдентификатор;
	
	ВсеЗаданияВыполнены = Истина;
	
	Для каждого ДанныеЗадания Из ТекущиеФоновыеЗадания Цикл
		
		ПараметрыЗадания = Неопределено;
		
		Если ПараметрыЗаданий <> Неопределено Тогда
			ПараметрыЗадания = ПараметрыЗаданий.Получить(ДанныеЗадания.ИмяЗадания);
		КонецЕсли; 
		
		Если ДанныеЗадания.ИмяЗадания = "СформироватьМаршрутныеЛисты" Тогда
			
			РезультатЗапускаЗадания = ЗапуститьЗаданиеСформироватьМаршрутныеЛисты(ПараметрыЗадания);
			
		ИначеЕсли ДанныеЗадания.ИмяЗадания = "ОбновитьДанные" Тогда
			
			РезультатЗапускаЗадания = ЗапуститьЗаданиеОбновитьДанные(ПараметрыЗадания);
			
		Иначе
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Неизвестное задание ""%1""';
									|en = 'Unknown job ""%1""'"),
								ДанныеЗадания.ИмяЗадания);
		КонецЕсли;
		
		ДанныеЗадания.ИдентификаторЗадания = РезультатЗапускаЗадания.ИдентификаторЗадания;
		ДанныеЗадания.АдресХранилища = РезультатЗапускаЗадания.АдресХранилища;
		
		Если НЕ РезультатЗапускаЗадания.ЗаданиеВыполнено Тогда
			ВсеЗаданияВыполнены = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеЗаданияВыполнены Тогда
		// Сразу отрабатываем завершение заданий
		ОбработатьЗавершениеЗаданийНаСервере();
	КонецЕсли; 
	
	Возврат ВсеЗаданияВыполнены;

КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданийНаКлиенте()

	Для каждого ДанныеЗадания Из ТекущиеФоновыеЗадания Цикл
		Если ДанныеЗадания.ИмяЗадания = "СформироватьМаршрутныеЛисты" Тогда
			ЗавершениеЗаданияСформироватьМаршрутныеЛисты(ДанныеЗадания.АдресХранилища);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеЗаданийНаСервере()

	Для каждого ДанныеЗадания Из ТекущиеФоновыеЗадания Цикл
		Если ДанныеЗадания.ИмяЗадания = "ОбновитьДанные" Тогда
			Результат = ПолучитьИзВременногоХранилища(ДанныеЗадания.АдресХранилища);
			ЗавершениеЗаданияОбновитьДанные(Результат);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()

	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	// Уменьшим шаг увеличения времени опроса выполнения задания
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			ВсеЗаданияВыполнены = Истина;
			Для каждого ДанныеЗадания Из ТекущиеФоновыеЗадания Цикл
				Если НЕ ЗаданиеВыполнено(ДанныеЗадания.ИдентификаторЗадания) Тогда
					ВсеЗаданияВыполнены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеЗаданияВыполнены Тогда
				ОбработатьЗавершениеЗаданийНаКлиенте();
				ОбработатьЗавершениеЗаданийНаСервере();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область НастройкаСписков

&НаСервере
Процедура ИнициализацияНастройкиСписков()

	НастройкаПолей = Новый Структура;
	
	НедоступныеПоляДляНастройки = Новый Массив;
	НедоступныеПоляДляНастройки.Добавить("УправлениеМаршрутнымиЛистами");
	НедоступныеПоляДляНастройки.Добавить("ПоказатьВСписке");
	НедоступныеПоляДляНастройки.Добавить("НомерКартинкиМаршрута");
	НедоступныеПоляДляНастройки.Добавить("КодСтроки");
	НедоступныеПоляДляНастройки.Добавить("КодСтрокиЭтапыГрафик");
	НедоступныеПоляДляНастройки.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	НедоступныеПоляДляНастройки.Добавить("ХарактеристикиИспользуются");
	НедоступныеПоляДляНастройки.Добавить("ТребуетсяСформироватьРасписаниеКартинка");
	НедоступныеПоляДляНастройки.Добавить("ТекущаяТочкаМаршрута");
	НедоступныеПоляДляНастройки.Добавить("ДлительностьРаботВМинутах");
	НедоступныеПоляДляНастройки.Добавить("МногоэтапныйПроизводственныйПроцесс");
	НедоступныеПоляДляНастройки.Добавить("ПланироватьРаботуРабочихЦентров");
	НедоступныеПоляДляНастройки.Добавить("НеЗавершеныПредыдущиеЭтапыКартинка");
	НедоступныеПоляДляНастройки.Добавить("ДатаИнтервалаНачало");
	НедоступныеПоляДляНастройки.Добавить("ДатаИнтервалаОкончание");
	НастройкаПолей.Вставить("НедоступныеПоля", НедоступныеПоляДляНастройки);
	
	РеквизитыСписка = ПолучитьРеквизиты("СписокМаршрутныхЛистов");
	АдресСхемыНастройкаСпискаДиспетчированиеМЛ = Отчеты.НастройкаСписка.ИнициализацияНастройки(
															РеквизитыСписка,
															НастройкиСписокМЛ,
															УникальныйИдентификатор,
															НастройкаПолей);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаДиспетчированиеМЛЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкаСпискаДиспетчированиеМЛНаСервере(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаСпискаДиспетчированиеМЛНаСервере(Знач КомпоновщикНастроек)

	НастройкиСписокМЛ.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	НастройкиСписокМЛ.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроек.ПользовательскиеНастройки);
	ПрименитьНастройкуСпискаКДиспетчированиюМЛ();
	ОбновитьИндикаторыДиспетчированияМЛ();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуСпискаКДиспетчированиюМЛ()

	Отчеты.НастройкаСписка.ПрименитьНастройкуКСписку(
				СписокМаршрутныхЛистов, 
				АдресСхемыНастройкаСпискаДиспетчированиеМЛ,
				НастройкиСписокМЛ.ПолучитьНастройки(),
				"Начало,Этап,НачалоРаботыКлючевогоРабочегоЦентра");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкиСпискаДиспетчированиеМЛЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("ВыборНастроек") Тогда
		ВыбратьНастройкиСпискаДиспетчированиеМЛНаСервере(РезультатЗакрытия.КлючНастроек);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьНастройкиСпискаДиспетчированиеМЛНаСервере(Знач КлючНастроек)
	
	Отчеты.НастройкаСписка.ЗагрузитьНастройкиИзХранилища("ДиспетчированиеПроизводства", КлючНастроек, НастройкиСписокМЛ);

	ПрименитьНастройкуСпискаКДиспетчированиюМЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиСпискаДиспетчированиеМЛЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("ВыборНастроек") Тогда
		СохранитьНастройкиСпискаДиспетчированиеМЛНаСервере(РезультатЗакрытия.КлючНастроек);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСпискаДиспетчированиеМЛНаСервере(Знач КлючНастроек)

	Отчеты.НастройкаСписка.СохранитьНастройкиВХранилище("ДиспетчированиеПроизводства", КлючНастроек, НастройкиСписокМЛ);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Выделение красным отставания от расписания по МЛ
	#Область ОтставаниеПоМЛ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаршрутныхЛистовСостояниеРаботы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаршрутныхЛистов.СтатусРаботыКлючевогоРЦ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыРаботыРабочихЦентров.Отставание);
	СписокЗначений.Добавить(Перечисления.СтатусыРаботыРабочихЦентров.ЗавершенаСОтставанием);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти

	// Выделение красным отставания от расписания по РЦ
	#Область ОтставаниеПоРЦ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДиспетчированиеРЦСтатусРаботыСтрока.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДиспетчированиеРЦ.СтатусРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыРаботыРабочихЦентров.Отставание;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
	// Выделение серым цветом периода расписания РЦ, если расписание не сформировано
	#Область ПериодРаботыРЦСерымЦветом
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаршрутныхЛистовНачалоРаботыКлючевогоРабочегоЦентра.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокМаршрутныхЛистовОкончаниеРаботыКлючевогоРабочегоЦентра.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаршрутныхЛистов.РабочийЦентр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	#КонецОбласти
		
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()

	ПараметрыОтбора = Новый Структура("ОтборПериод,ОтборПодразделение,ОтборРабочийЦентр,ОтборБригады,
										|ОтборОформитьВыработкуСотрудников,ОтборОтметитьВыполненным,
										|ОтборОтметитьЗавершениеРаботыКлючевогоРЦ,ОтборОтметитьГотовностьКРаботеКлючевогоРЦ,
										|ОтборОтметитьНачалоВыполнения,
										|ОтборПередатьКВыполнению,ОтборОформитьВыпуск,
										|ОтборЕстьПросроченныеЗадачи,ОтборСтатусВыполненияВЖелтойЗоне,
										|ОтборСтатусВыполненияВКраснойЗоне,ОтборЕстьОтставаниеОтРасписания,
										|ОтборРабочиеЦентрыОпережение,ОтборРабочиеЦентрыОтставание,ОтборРабочиеЦентрыРасписаниеНеСформировано,
										|ОтборПоказатьЕслиНеЗавершеныПредыдущиеЭтапы,ОтборДефицитМатериалов,
										|ВидДиспетчированияРЦ,СвернутьДопПанель,ВидШкалы");

	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("УправлениеХодомПроизводства", "ПараметрыОтбора", ПараметрыОтбора);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеОтбора(Форма, Действие = "")
	
	Элементы = Форма.Элементы;
	
	ВсеДействия = ПустаяСтрока(Действие);
	
	Если ВсеДействия ИЛИ Действие = "УстановитьОтборПоРаспоряжению" Тогда
		
		ЕстьОтборПоРаспоряжению = ЗначениеЗаполнено(Форма.ОтборРаспоряжения);
		ЕстьОтборПоЭтапам       = ЗначениеЗаполнено(Форма.СписокЭтапов);
		
		ОтборРаспоряжениеСтрока = "";
		Если ЕстьОтборПоРаспоряжению Тогда
			ОтборРаспоряжениеСтрока = Форма.ОтборРаспоряжения[0].Представление;
		КонецЕсли;
		
		Форма.ОтборРаспоряжениеСтрока = ОтборРаспоряжениеСтрока;
		
		ДопИнформацияДляДиспетчированияМЛ = "";
		Если ЕстьОтборПоРаспоряжению ИЛИ ЕстьОтборПоЭтапам Тогда
			
			ДопИнформацияДляДиспетчированияМЛ = НСтр("ru = 'установлен отбор по';
													|en = 'set filter by'");
			
			Если ЕстьОтборПоРаспоряжению Тогда
				ДопИнформацияДляДиспетчированияМЛ = ДопИнформацияДляДиспетчированияМЛ + " " + НСтр("ru = 'заказу';
																									|en = 'order'");
			КонецЕсли;
			
			Если ЕстьОтборПоЭтапам И ЕстьОтборПоРаспоряжению Тогда
				ДопИнформацияДляДиспетчированияМЛ = ДопИнформацияДляДиспетчированияМЛ + " " + НСтр("ru = 'и';
																									|en = 'and'");
			КонецЕсли;
			
			Если ЕстьОтборПоЭтапам Тогда
				ДопИнформацияДляДиспетчированияМЛ = ДопИнформацияДляДиспетчированияМЛ + " " + НСтр("ru = 'этапам';
																									|en = 'steps'");
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ДопИнформацияДляДиспетчированияМЛ = ДопИнформацияДляДиспетчированияМЛ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеРаспоряжения(Распоряжение)
	
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Номер, Дата");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '№%1 от %2';
											|en = 'No. %1 from %2'"),
										?(ЗначениеЗаполнено(РеквизитыРаспоряжения.Номер), " " + РеквизитыРаспоряжения.Номер, ""),
										Формат(РеквизитыРаспоряжения.Дата, "ДЛФ=D"));
	
КонецФункции

&НаКлиенте
Процедура ОтборРабочийЦентрНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборРабочийЦентр = РезультатЗакрытия.ОтборРабочийЦентр;
	
	СохранитьПараметрыОтбораИОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБригадыНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборБригады = РезультатЗакрытия;
	
	СохранитьПараметрыОтбораИОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыНедоступныеПоПравам()

	ПравоВводаВыпускПродукции = ПравоДоступа("Добавление", Метаданные.Документы.ВыпускПродукции);
	ПравоВводаВыработкиСотрудников = ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство") Тогда
		ПравоКорректировкиЗаказаМатериалов = ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаЗаказаМатериаловВПроизводство);
	Иначе
		ПравоКорректировкиЗаказаМатериалов = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство);
	КонецЕсли; 
	
	Если НЕ ПравоВводаВыпускПродукции Тогда
		Элементы.ОформитьВыпуск.Видимость = Ложь;
		Элементы.СписокМаршрутныхЛистовКонтекстноеМенюОформитьВыпуск.Видимость = Ложь;
	КонецЕсли; 
	Если НЕ ПравоВводаВыработкиСотрудников Тогда
		Элементы.ОформитьВыработкуСотрудников.Видимость = Ложь;
		Элементы.СписокМаршрутныхЛистовКонтекстноеМенюОформитьВыработкуСотрудников.Видимость = Ложь;
	КонецЕсли; 
	Если НЕ ПравоКорректировкиЗаказаМатериалов Тогда
		Элементы.ОтгрузитьМатериалы.Видимость = Ложь;
		Элементы.СписокМаршрутныхЛистовКонтекстноеМенюОтгрузитьМатериалы.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикиРаботыРЦ()
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Подразделение", ОтборПодразделение);
	СтруктураБыстрогоОтбора.Вставить("РежимРаботы", ПредопределенноеЗначение("Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ОткрытьФорму("Обработка.ДоступностьВидовРабочихЦентров.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьМаршрутныеЛисты()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбратьДату", ОкончаниеПериода);
	ПараметрыФормы.Вставить("Подразделение", ОтборПодразделение);
	ПараметрыФормы.Вставить("УправлениеМаршрутнымиЛистами", УправлениеМаршрутнымиЛистами);
	ПараметрыФормы.Вставить("СписокЭтапов", СписокЭтапов);
	ПараметрыФормы.Вставить("СписокРаспоряжений", ОтборРаспоряжения.ВыгрузитьЗначения());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьМаршрутныеЛистыЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ФормированиеМаршрутныхЛистов", 
					ПараметрыФормы,,,,,
					ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьМаршрутныеЛистыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеФоновыеЗадания.Очистить();
	ДобавитьФоновоеЗадание("СформироватьМаршрутныеЛисты", ЭтаФорма);
	
	ПараметрыЗаданий = Новый Соответствие;
	ПараметрыЗаданий.Вставить("СформироватьМаршрутныеЛисты", РезультатЗакрытия);
	ЗапуститьФоновыеЗадания(ПараметрыЗаданий);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьЗаданиеСформироватьМаршрутныеЛисты(ПараметрыЗаданияСформироватьМаршрутныеЛисты)
	
	ПараметрыЗаданияСформироватьМаршрутныеЛисты.Вставить("СписокЭтапов", СписокЭтапов.Выгрузить());
	ПараметрыЗаданияСформироватьМаршрутныеЛисты.Вставить("ТекущееКоличествоМЛ", СписокМаршрутныхЛистов.Количество());
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПараметрыЗаданияСформироватьМаршрутныеЛисты", ПараметрыЗаданияСформироватьМаршрутныеЛисты);
	ПараметрыЗадания.Вставить("ПараметрыЗаданияПолучитьДанныеДиспетчирования", ПараметрыЗаданияПолучитьДанныеДиспетчирования());
	
	НаименованиеЗадания = НСтр("ru = 'Формирование маршрутных листов';
								|en = 'Generate route sheets'");
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Обработки.ДиспетчированиеПроизводства.СформироватьМаршрутныеЛисты",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаКлиенте
Процедура ЗавершениеЗаданияСформироватьМаршрутныеЛисты(АдресХранилища)
	
	Результат = ЗавершениеЗаданияСформироватьМаршрутныеЛистыНаСервере(АдресХранилища);
	
	ОперативныйУчетПроизводстваКлиент.ОповеститьПользователяОФормированииМаршрутныхЛистов(
			Результат.КоличествоОбработанных,
			Результат.КоличествоВсего,
			УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ЗавершениеЗаданияСформироватьМаршрутныеЛистыНаСервере(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЗавершениеЗаданияОбновитьДанные(Результат.ДанныеДляДиспетчированияПроизводства);
	
	Возврат Результат.РезультатФормированияМЛ;
	
КонецФункции 

&НаКлиенте
Процедура СформироватьРасписание()

	ПараметрыФормы = Новый Структура("Подразделение", ОтборПодразделение);
	ПараметрыФормы.Вставить("ОпределитьПериодИВидРабочегоЦентра");
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОтборыДиспетчированияМЛИОбновить(НоваяОтметка)

	ВыбратьВсеОтборыДиспетчированияМЛ(НоваяОтметка, ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("СохранитьПараметрыОтбора");
	ОбновитьДанные(СтруктураДействий);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыбратьВсеОтборыДиспетчированияМЛ(НоваяОтметка, Форма)

	Форма.ОтборПередатьКВыполнению = НоваяОтметка;
	Форма.ОтборОтметитьНачалоВыполнения = НоваяОтметка;
	Форма.ОтборОтметитьГотовностьКРаботеКлючевогоРЦ = НоваяОтметка;
	Форма.ОтборОтметитьЗавершениеРаботыКлючевогоРЦ = НоваяОтметка;
	Форма.ОтборОтметитьВыполненным = НоваяОтметка;
	Форма.ОтборОформитьВыработкуСотрудников = НоваяОтметка;
	Форма.ОтборОформитьВыпуск = НоваяОтметка;
	Форма.ОтборЕстьОтставаниеОтРасписания = НоваяОтметка;
	Форма.ОтборСтатусВыполненияВКраснойЗоне = НоваяОтметка;
	Форма.ОтборСтатусВыполненияВЖелтойЗоне = НоваяОтметка;
	Форма.ОтборЕстьПросроченныеЗадачи = НоваяОтметка;
	Форма.ОтборПоказатьЕслиНеЗавершеныПредыдущиеЭтапы = НоваяОтметка;
	Форма.ОтборДефицитМатериалов = НоваяОтметка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОтборыДиспетчированияРЦТОбновить(НоваяОтметка)

	ВыбратьВсеОтборыДиспетчированияРЦ(НоваяОтметка, ЭтаФорма);
	ОбновитьДанные();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыбратьВсеОтборыДиспетчированияРЦ(НоваяОтметка, Форма)

	Форма.ОтборРабочиеЦентрыОпережение = НоваяОтметка;
	Форма.ОтборРабочиеЦентрыОтставание = НоваяОтметка;
	Форма.ОтборРабочиеЦентрыРасписаниеНеСформировано = НоваяОтметка;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21
