//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует данные по диспетчированию маршрутных листов
//
// Параметры:
//  СтруктураПараметров	- Структура - содержит параметры необходимые для получения данных
//										Обязательные парамеры: Подразделение.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - данные по диспетчированию маршрутных листов.
//
Функция ДиспетчированиеМаршрутныхЛистов(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", СтруктураПараметров.ДатаКонтроля);
	Запрос.УстановитьПараметр("ГраницаЗеленойЗоны", СтруктураПараметров.ГраницаЗеленойЗоны);
	Запрос.УстановитьПараметр("ГраницаЖелтойЗоны",  СтруктураПараметров.ГраницаЖелтойЗоны);
	Запрос.УстановитьПараметр("ГраницаКраснойЗоны", СтруктураПараметров.ГраницаКраснойЗоны);
	
	Запрос.УстановитьПараметр("Подразделение", СтруктураПараметров.Подразделение);
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", СтруктураПараметров.ОкончаниеПериода);
	Запрос.УстановитьПараметр("НеИспользоватьПериод", СтруктураПараметров.НачалоПериода = '000101010000');
	
	Запрос.УстановитьПараметр("СписокРабочихЦентров", СтруктураПараметров.РабочийЦентр);
	
	Запрос.УстановитьПараметр("СписокРаспоряжений", СтруктураПараметров.СписокРаспоряжений);
	Запрос.УстановитьПараметр("ЕстьОтборПоРаспоряжению", ЗначениеЗаполнено(СтруктураПараметров.СписокРаспоряжений));
		
	Запрос.Текст = 
	//0
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка,
	|	МАКСИМУМ(ВложенныйЗапрос.ОформитьВыработку) КАК ОформитьВыработку,
	|	МАКСИМУМ(ВложенныйЗапрос.ОформитьВыпуск) КАК ОформитьВыпуск
	|ПОМЕСТИТЬ ВТ_Задачи
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТрудозатратыКОформлению.Распоряжение КАК Ссылка,
	|		ИСТИНА КАК ОформитьВыработку,
	|		ЛОЖЬ КАК ОформитьВыпуск
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыКОформлению.Остатки(
	|				,
	|				Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И (НЕ &ЕстьОтборПоРаспоряжению ИЛИ &ЕстьОтборПоРаспоряжению И Распоряжение.Распоряжение В (&СписокРаспоряжений))) КАК ТрудозатратыКОформлению
	|	ГДЕ
	|		(&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ИЛИ ТрудозатратыКОформлению.Подразделение = &Подразделение)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускПродукцииКОформлению.Распоряжение,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки КАК ВыпускПродукцииКОформлению
	|	ГДЕ
	|		ВыпускПродукцииКОформлению.КОформлениюОстаток > 0
	|		И (НЕ &ЕстьОтборПоРаспоряжению ИЛИ &ЕстьОтборПоРаспоряжению И ВыпускПродукцииКОформлению.Распоряжение.Распоряжение В (&СписокРаспоряжений))
	|		И (&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ИЛИ ВыпускПродукцииКОформлению.Распоряжение.Подразделение = &Подразделение)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Распоряжение КАК Распоряжение,
	|	ТаблицаДокументов.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаДокументов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику,
	|	ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику
	|ПОМЕСТИТЬ ВТ_МаршрутныйЛистПроизводстваСписок
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Проведен
	|	И (НЕ &ЕстьОтборПоРаспоряжению ИЛИ &ЕстьОтборПоРаспоряжению И ТаблицаДокументов.Распоряжение В (&СписокРаспоряжений))
	|	И ТаблицаДокументов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|									ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|									ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется))
	|	И ТаблицаДокументов.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
	|	И (&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ИЛИ ТаблицаДокументов.Подразделение = &Подразделение)
	|	И (&НеИспользоватьПериод
	|		ИЛИ ТаблицаДокументов.ПланироватьРаботуВидовРабочихЦентров
	|			И ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику <= &ОкончаниеПериода
	|			И ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику >= &НачалоПериода
	|		ИЛИ НЕ ТаблицаДокументов.ПланироватьРаботуВидовРабочихЦентров
	|			И ТаблицаДокументов.Начало <= &ОкончаниеПериода
	|			И ТаблицаДокументов.Окончание >= &НачалоПериода)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Задачи.Ссылка,
	|	ТаблицаДокументов.Распоряжение КАК Распоряжение,
	|	ТаблицаДокументов.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаДокументов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику,
	|	ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику
	|ИЗ
	|	ВТ_Задачи КАК ВТ_Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокументов
	|		ПО (ТаблицаДокументов.Ссылка = ВТ_Задачи.Ссылка)
	|ГДЕ
	|	ТаблицаДокументов.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Распоряжение КАК Распоряжение,
	|	ТаблицаДокументов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаДокументов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	МИНИМУМ(ЕСТЬNULL(РасписаниеРаботыРабочихЦентров.Начало, ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику)) КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	МАКСИМУМ(ЕСТЬNULL(РасписаниеРаботыРабочихЦентров.Окончание, ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику)) КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасписаниеРаботыРабочихЦентров.МаршрутныйЛист ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьРасписание
	|ПОМЕСТИТЬ ВТ_МаршрутныйЛистПроизводства
	|ИЗ
	|	ВТ_МаршрутныйЛистПроизводстваСписок КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ПО (РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = ТаблицаДокументов.Ссылка)
	|			И (РасписаниеРаботыРабочихЦентров.Начало <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (РасписаниеРаботыРабочихЦентров.Окончание <> ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.Распоряжение,
	|	ТаблицаДокументов.КодСтрокиПродукция,
	|	ТаблицаДокументов.КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//3
	|ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|	МаршрутныйЛистПроизводства.Распоряжение КАК Распоряжение,
	|	МаршрутныйЛистПроизводства.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ПредыдущиеЭтапы
	|ИЗ
	|	ВТ_МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = МаршрутныйЛистПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки = МаршрутныйЛистПроизводства.КодСтрокиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = МаршрутныйЛистПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы
	|		ПО (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
	// предыдущий этап этой же спецификации
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПолуфабрикат = ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат
	|					И ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = ЗаказНаПроизводствоЭтапы.НомерЭтапа
	// последний этап спефицикации по которой производится ПФ
	|				ИЛИ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи
	|					И ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.Ссылка = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КлючСвязиЭтапы = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПродукция)
	|ГДЕ
	|	НЕ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыполнениеЭтаповГрафика.Распоряжение КАК Распоряжение,
	|	ВыполнениеЭтаповГрафика.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ВыполнениеЭтаповГрафика.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ВыполнениеЭтаповГрафика.ВыполненоОборот КАК Выполнено
	|ПОМЕСТИТЬ ВыполнениеЭтаповГрафика
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			(Распоряжение, КодСтрокиПродукция, КодСтрокиЭтапыГрафик) В
	|				(ВЫБРАТЬ
	|					ПредыдущиеЭтапы.Распоряжение,
	|					ПредыдущиеЭтапы.КодСтрокиПродукция,
	|					ПредыдущиеЭтапы.КодСтрокиЭтапыГрафик
	|				ИЗ
	|					ПредыдущиеЭтапы)) КАК ВыполнениеЭтаповГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//5
	|ВЫБРАТЬ
	|	ПредыдущиеЭтапы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР 
	|				КОГДА 
	|					ЕСТЬNULL(ВыполнениеЭтаповГрафика.Выполнено, 0) = 0 
	|					ТОГДА ИСТИНА 
	|				ИНАЧЕ ЛОЖЬ 
	|			КОНЕЦ) КАК НеЗавершеныПредыдущиеЭтапы
	|ПОМЕСТИТЬ ВыполнениеПредыдущихЭтаповГрафика
	|ИЗ
	|	ПредыдущиеЭтапы КАК ПредыдущиеЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполнениеЭтаповГрафика КАК ВыполнениеЭтаповГрафика
	|		ПО (ВыполнениеЭтаповГрафика.Распоряжение = ПредыдущиеЭтапы.Распоряжение)
	|			И (ВыполнениеЭтаповГрафика.КодСтрокиПродукция = ПредыдущиеЭтапы.КодСтрокиПродукция)
	|			И (ВыполнениеЭтаповГрафика.КодСтрокиЭтапыГрафик = ПредыдущиеЭтапы.КодСтрокиЭтапыГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредыдущиеЭтапы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//6
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Статус КАК Статус,
	|	ЕСТЬNULL(РасписаниеРаботыРабочихЦентров.РабочийЦентр, ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)) КАК РабочийЦентр,
	|	ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику КАК ДатаИнтервалаНачало,
	|	ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику КАК ДатаИнтервалаОкончание,
	|	ВТ_МаршрутныйЛистПроизводства.НачалоРаботыКлючевогоРабочегоЦентра КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	ВТ_МаршрутныйЛистПроизводства.ОкончаниеРаботыКлючевогоРабочегоЦентра КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.Подразделение КАК Подразделение,
	|	ТаблицаДокументов.ПланироватьРаботуВидовРабочихЦентров КАК ПланироватьРаботу,
	|	ЕСТЬNULL(ВТ_Задачи.ОформитьВыработку, ЛОЖЬ) КАК ОформитьВыработку,
	|	ЕСТЬNULL(ВТ_Задачи.ОформитьВыпуск, ЛОЖЬ) КАК ОформитьВыпуск,
	|	ВТ_МаршрутныйЛистПроизводства.ЕстьРасписание КАК ЕстьРасписание,
	|	ЕСТЬNULL(ВыполнениеПредыдущихЭтаповГрафика.НеЗавершеныПредыдущиеЭтапы, ЛОЖЬ) КАК НеЗавершеныПредыдущиеЭтапы
	|ИЗ
	|	ВТ_МаршрутныйЛистПроизводства КАК ВТ_МаршрутныйЛистПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокументов
	|		ПО (ТаблицаДокументов.Ссылка = ВТ_МаршрутныйЛистПроизводства.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ПО (РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = ТаблицаДокументов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
	|		ПО (ВТ_Задачи.Ссылка = ТаблицаДокументов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполнениеПредыдущихЭтаповГрафика КАК ВыполнениеПредыдущихЭтаповГрафика
	|		ПО (ВыполнениеПредыдущихЭтаповГрафика.Ссылка = ТаблицаДокументов.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//7
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаВидыРабочихЦентров.Ссылка КАК Ссылка,
	|	ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ТаблицаВидыРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
	|	ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра.ПланироватьРаботуРабочихЦентров КАК ПланироватьРаботуРабочихЦентров,
	|	ТаблицаВидыРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК ТаблицаВидыРабочихЦентров
	|ГДЕ
	|	ТаблицаВидыРабочихЦентров.Ссылка В (ВЫБРАТЬ Ссылка ИЗ ВТ_МаршрутныйЛистПроизводства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//8
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.Ссылка В(&СписокРабочихЦентров)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = РезультатЗапроса[6].Выгрузить();
	
	ВидыРабочихЦентровДокументов = РезультатЗапроса[7].Выгрузить();
	ВидыРабочихЦентровДокументов.Индексы.Добавить("Ссылка,ПланироватьРаботуРабочихЦентров");
	
	ОтборВидыРабочихЦентров = РезультатЗапроса[8].Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра");
	
	НачалоПериода    = '000101010000';
	ОкончаниеПериода = '000101010000';
	ТаблицаИнтервалов = ВыборкаДокументов.Скопировать(, "Подразделение,ДатаИнтервалаНачало,ДатаИнтервалаОкончание");
	Для каждого ЭлементКоллекции Из ТаблицаИнтервалов Цикл
		НачалоПериода    = Мин(ЭлементКоллекции.ДатаИнтервалаНачало,     ?(НачалоПериода    = '000101010000', ЭлементКоллекции.ДатаИнтервалаНачало,    НачалоПериода));
		ОкончаниеПериода = Макс(ЭлементКоллекции.ДатаИнтервалаОкончание, ?(ОкончаниеПериода = '000101010000', ЭлементКоллекции.ДатаИнтервалаОкончание, ОкончаниеПериода));
	КонецЦикла; 
	
	// Удаление документов, которые не соответствуют отбору по РЦ
	ОтборРабочийЦентр = СтруктураПараметров.РабочийЦентр;
	ИспользоватьОтборРабочийЦентр = ОтборРабочийЦентр.Количество() <> 0;
	Если ИспользоватьОтборРабочийЦентр Тогда
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаДокумент Из ВыборкаДокументов Цикл
			
			СтруктураПоиска = Новый Структура("Ссылка", СтрокаДокумент.Ссылка);
			СписокВидовРабочихЦентровДокумента = ВидыРабочихЦентровДокументов.НайтиСтроки(СтруктураПоиска);
			
			СоответствуетОтборуПоРЦ = Истина;
			
			Если ЗначениеЗаполнено(СтрокаДокумент.РабочийЦентр)
				И ОтборРабочийЦентр.НайтиПоЗначению(СтрокаДокумент.РабочийЦентр) = Неопределено Тогда
				
				СоответствуетОтборуПоРЦ = Ложь;
			Иначе
				СоответствуетОтборуПоРЦ = Ложь;
				Для каждого СтрокаВидРЦ Из СписокВидовРабочихЦентровДокумента Цикл
					Если ОтборВидыРабочихЦентров.Найти(СтрокаВидРЦ.ВидРабочегоЦентра) <> Неопределено Тогда
						СоответствуетОтборуПоРЦ = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			
			Если НЕ СоответствуетОтборуПоРЦ Тогда
				СтрокиКУдалению.Добавить(СтрокаДокумент);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла; 
		
		Для каждого СтрокаДокумент Из СтрокиКУдалению Цикл
			ВыборкаДокументов.Удалить(СтрокаДокумент);
		КонецЦикла;
	КонецЕсли;
	
	// Определим 
	// - по каким видам РЦ нужно формировать расписание и какой ключевой РЦ
	// - по каким МЛ предыдущие этапы не завершены
	// - дефицит материалов.
	ВыборкаДокументов.Колонки.Добавить("КлючевойРабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров"));
	ВыборкаДокументов.Колонки.Добавить("ПланироватьРаботуРабочихЦентров", Новый ОписаниеТипов("Булево"));
	ВыборкаДокументов.Колонки.Добавить("ДефицитМатериалов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	
	Если ВыборкаДокументов.Количество() <> 0 Тогда
		
		КлючевыеВидыРабочихЦентров = Неопределено;
												
		СписокМаршрутныхЛистов = ВыборкаДокументов.ВыгрузитьКолонку("Ссылка");
		
		ОстаткиМатериалов = Документы.МаршрутныйЛистПроизводства.ОстаткиМатериаловВПодразделенииПоМаршрутнымЛистам(СписокМаршрутныхЛистов);
		ОстаткиМатериалов.Индексы.Добавить("Ссылка");
		
		Для каждого СтрокаДокумент Из ВыборкаДокументов Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДокумент.РабочийЦентр) Тогда
				// - по каким видам РЦ нужно формировать расписание и какой ключевой вид РЦ
				КлючевойВидРЦ = Неопределено;
				СтруктураПоиска = Новый Структура("Ссылка,ПланироватьРаботуРабочихЦентров", СтрокаДокумент.Ссылка, Истина);
				СписокВидовРабочихЦентровДокумента = ВидыРабочихЦентровДокументов.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаВидРЦ Из СписокВидовРабочихЦентровДокумента Цикл
					
					Если КлючевыеВидыРабочихЦентров = Неопределено Тогда
						КлючевыеВидыРабочихЦентров = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
																СтруктураПараметров.Подразделение,
																НачалоПериода,
																ОкончаниеПериода);
																
						КлючевыеВидыРабочихЦентров.Индексы.Добавить("Ключевой,Период,ВидРабочегоЦентра");
					КонецЕсли; 

					СтруктураПоиска = Новый Структура("Ключевой,Период,ВидРабочегоЦентра", Истина, СтрокаВидРЦ.ДатаИнтервала, СтрокаВидРЦ.ВидРабочегоЦентра);
					СписокСтрок = КлючевыеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
					Если СписокСтрок.Количество() <> 0 Тогда
						СтрокаДокумент.ПланироватьРаботуРабочихЦентров = Истина;
						КлючевойВидРЦ = ?(ЗначениеЗаполнено(СтрокаВидРЦ.РабочийЦентр), СтрокаВидРЦ.РабочийЦентр, СтрокаВидРЦ.ВидРабочегоЦентра);
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			Иначе
				КлючевойВидРЦ = СтрокаДокумент.РабочийЦентр;
			КонецЕсли; 
			
			СтрокаДокумент.КлючевойРабочийЦентр = КлючевойВидРЦ;
			
			// - дефицит материалов
			СтруктураПоиска = Новый Структура("Ссылка", СтрокаДокумент.Ссылка);
	  		СписокСтрок = ОстаткиМатериалов.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМатериалМЛ Из СписокСтрок Цикл
				Если СтрокаМатериалМЛ.ДефицитМатериалов = 2 Тогда
					СтрокаДокумент.ДефицитМатериалов = 2;
					Прервать;
				ИначеЕсли СтрокаМатериалМЛ.ДефицитМатериалов = 1 Тогда
					СтрокаДокумент.ДефицитМатериалов = 1;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
												
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыборкаДокументов", ВыборкаДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Ссылка КАК Документ.МаршрутныйЛистПроизводства) КАК Ссылка,
	|	ТаблицаДокументов.Статус КАК Статус,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр,
	|	ТаблицаДокументов.ПланироватьРаботу КАК ПланироватьРаботу,
	|	ТаблицаДокументов.ПланироватьРаботуРабочихЦентров КАК ПланироватьРаботуРабочихЦентров,
	|	ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентра КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентра КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ЕстьРасписание КАК ЕстьРасписание,
	|	ТаблицаДокументов.ОформитьВыработку КАК ОформитьВыработку,
	|	ТаблицаДокументов.ОформитьВыпуск КАК ОформитьВыпуск,
	|	ТаблицаДокументов.НеЗавершеныПредыдущиеЭтапы КАК НеЗавершеныПредыдущиеЭтапы,
	|	ТаблицаДокументов.КлючевойРабочийЦентр КАК КлючевойРабочийЦентр,
	|	ТаблицаДокументов.ДефицитМатериалов КАК ДефицитМатериалов
	|
	|ПОМЕСТИТЬ ВТ_ВыборкаДокументовСОтбором
	|ИЗ
	|	&ВыборкаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику КАК Период,
	|	ТаблицаДокументов.Подразделение КАК Подразделение,
	|	ТаблицаДокументов.Распоряжение КАК Распоряжение,
	|	ТаблицаДокументов.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаДокументов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ВТ_ВыборкаДокументовСОтбором.НачалоРаботыКлючевогоРабочегоЦентра КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	ВТ_ВыборкаДокументовСОтбором.ОкончаниеРаботыКлючевогоРабочегоЦентра КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу КАК ПланироватьРаботу,
	|	ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботуРабочихЦентров КАК ПланироватьРаботуРабочихЦентров,
	|	ВТ_ВыборкаДокументовСОтбором.РабочийЦентр КАК РабочийЦентр,
	|	ВТ_ВыборкаДокументовСОтбором.ЕстьРасписание КАК ЕстьРасписание,
	|	ВТ_ВыборкаДокументовСОтбором.ОформитьВыработку КАК ОформитьВыработку,
	|	ВТ_ВыборкаДокументовСОтбором.ОформитьВыпуск КАК ОформитьВыпуск,
	|	ВТ_ВыборкаДокументовСОтбором.НеЗавершеныПредыдущиеЭтапы КАК НеЗавершеныПредыдущиеЭтапы,
	|	ВТ_ВыборкаДокументовСОтбором.КлючевойРабочийЦентр КАК КлючевойРабочийЦентр,
	|	ВТ_ВыборкаДокументовСОтбором.ДефицитМатериалов КАК ДефицитМатериалов,
	
	// ЗавершеноВыполнениеМаршрутногоЛиста
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.ФактическоеОкончание <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗавершеноВыполнениеМаршрутногоЛиста,
	
	// ОпределитьСтатусВыполнения
	|	ВЫБОР 
			// Контролируем этап целиком, пока не завершены работы
	|		КОГДА НЕ ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу
	|				И ТаблицаДокументов.ФактическоеОкончание = ДАТАВРЕМЯ(1,1,1)
	|				И ТаблицаДокументов.ДлительностьЭтапа <> 0
	|			ТОГДА ИСТИНА
	|
			// Контролируем работы в завершающем буфере, пока в нем не завершены работы
	|		КОГДА ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу
	|				И НЕ ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|				И ТаблицаДокументов.ЗавершающийБуфер <> 0
	|			ТОГДА ИСТИНА
	
			// Контролируем работы в предварительном буфере, пока в нем не завершены работы
	|		КОГДА ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу
	|				И НЕ ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра
	|				И ТаблицаДокументов.ПредварительныйБуфер <> 0
	|			ТОГДА ИСТИНА
	
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ОпределитьСтатусВыполнения,
	
	// СтатусВыполненияПоФакту
	|	ВЫБОР 
			// Контролируем этап целиком
	|		КОГДА НЕ ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу
	|				И ТаблицаДокументов.ФактическоеОкончание <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ТаблицаДокументов.ЗатраченоВремениОтДлительностиЭтапа
	|
			// Контролируем работы в завершающем буфере, пока в нем не завершены работы
	|		КОГДА ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|				И ТаблицаДокументов.ЗавершающийБуфер <> 0
	|			ТОГДА ТаблицаДокументов.ЗатраченоВремениОтЗавершающегоБуфера
	
			// Контролируем работы в предварительном буфере, пока в нем не завершены работы
	|		КОГДА НЕ ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|				И ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра
	|				И ТаблицаДокументов.ПредварительныйБуфер <> 0
	|			ТОГДА ТаблицаДокументов.ЗатраченоВремениОтПредварительногоБуфера
	
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СтатусВыполненияПоФакту,
	
	// СрокРабот
	|	ВЫБОР 
			// Работы просрочены
	|		КОГДА &ТекущаяДата > ТаблицаДокументов.Окончание
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
	
			// Контролируем этап целиком
	|		КОГДА ТаблицаДокументов.ФактическоеОкончание = ДАТАВРЕМЯ(1,1,1)
	|				И (НЕ ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу)
	|			ТОГДА ТаблицаДокументов.Окончание
	|
			// Контролируем работы в предварительном буфере, пока в нем не завершены работы
	|		КОГДА НЕ ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра
	|				И ТаблицаДокументов.ПредварительныйБуфер <> 0
	|			ТОГДА ВТ_ВыборкаДокументовСОтбором.НачалоРаботыКлючевогоРабочегоЦентра
	
			// Контролируем работы в завершающем буфере, пока в нем не завершены работы
	|		КОГДА НЕ ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|				И ТаблицаДокументов.ЗавершающийБуфер <> 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаДокументов.Окончание, СЕКУНДА, 60)
	|		ИНАЧЕ
	|			ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК СрокРабот,
	
	// ДлительностьРабот
	|	ВЫБОР 
			// Контролируем этап целиком
	|		КОГДА ТаблицаДокументов.ФактическоеОкончание = ДАТАВРЕМЯ(1,1,1)
	|				И (НЕ ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу)
	|			ТОГДА ТаблицаДокументов.ДлительностьЭтапа
	|
			// Контролируем работы в предварительном буфере, пока в нем не завершены работы
	|		КОГДА НЕ ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра
	|				И ТаблицаДокументов.ПредварительныйБуфер <> 0
	|			ТОГДА ТаблицаДокументов.ПредварительныйБуфер
	
			// Контролируем работы в завершающем буфере, пока в нем не завершены работы
	|		КОГДА НЕ ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|				И ТаблицаДокументов.ЗавершающийБуфер <> 0
	|			ТОГДА ТаблицаДокументов.ЗавершающийБуфер
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ДлительностьРабот,
	
	// ДлительностьРаботЕдИзм
	|	ВЫБОР 
			// Контролируем этап целиком
	|		КОГДА ТаблицаДокументов.ФактическоеОкончание = ДАТАВРЕМЯ(1,1,1)
	|				И (НЕ ВТ_ВыборкаДокументовСОтбором.ПланироватьРаботу)
	|			ТОГДА ТаблицаДокументов.ЕдиницаИзмеренияДлительностиЭтапа
	|
			// Контролируем работы в предварительном буфере, пока в нем не завершены работы
	|		КОГДА НЕ ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра
	|				И ТаблицаДокументов.ПредварительныйБуфер <> 0
	|			ТОГДА ТаблицаДокументов.ЕдиницаИзмеренияПредварительногоБуфера
	
			// Контролируем работы в завершающем буфере, пока в нем не завершены работы
	|		КОГДА НЕ ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|				И ТаблицаДокументов.ЗавершающийБуфер <> 0
	|			ТОГДА ТаблицаДокументов.ЕдиницаИзмеренияЗавершающегоБуфера
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
	|	КОНЕЦ КАК ДлительностьРаботЕдИзм
	|
	|ПОМЕСТИТЬ ВТ_ВыборкаДокументов
	|ИЗ
	|	ВТ_ВыборкаДокументовСОтбором КАК ВТ_ВыборкаДокументовСОтбором
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Ссылка = ВТ_ВыборкаДокументовСОтбором.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.ПланироватьРаботу,
	|	ТаблицаДокументов.ПланироватьРаботуРабочихЦентров,
	|	ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ОпределитьСтатусВыполнения,
	|	ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста,
	|	ТаблицаДокументов.СтатусВыполненияПоФакту,
	|	ТаблицаДокументов.СрокРабот,
	|	ТаблицаДокументов.ДлительностьРабот,
	|	ТаблицаДокументов.ДлительностьРаботЕдИзм,
	|	ТаблицаДокументов.РабочийЦентр,
	|	ТаблицаДокументов.Подразделение КАК КлючКалендаря,
	|	ТаблицаДокументов.Подразделение,
	|	ТаблицаДокументов.ЕстьРасписание,
	|	ТаблицаДокументов.ОформитьВыработку,
	|	ТаблицаДокументов.ОформитьВыпуск,
	|	ТаблицаДокументов.НеЗавершеныПредыдущиеЭтапы,
	|	ТаблицаДокументов.КлючевойРабочийЦентр,
	|	ТаблицаДокументов.ДефицитМатериалов,
	
	// Календарь
	|	ВЫБОР 
	|		КОГДА ТаблицаДокументов.ПланироватьРаботу
	|			ТОГДА ВЫБОР 
	|					КОГДА ТаблицаДокументов.РабочийЦентр.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|						ТОГДА ТаблицаДокументов.РабочийЦентр.Календарь
	|					КОГДА ТаблицаДокументов.РабочийЦентр.ВидРабочегоЦентра.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|						ТОГДА ТаблицаДокументов.РабочийЦентр.ВидРабочегоЦентра.Календарь
	|					ИНАЧЕ ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ГрафикПодразделения.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
	|	КОНЕЦ КАК Календарь
	|ПОМЕСТИТЬ ВыборкаДокументов
	|ИЗ
	|	ВТ_ВыборкаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК ГрафикПодразделения
	|		ПО ТаблицаДокументов.Подразделение = ГрафикПодразделения.Ссылка
	|			И ГрафикПодразделения.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|	    ПО ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыборкаДокументов.КлючКалендаря КАК КлючКалендаря,
	|	ВыборкаДокументов.Календарь КАК Календарь,
	|	ГрафикТекущегоПериодаИГраницыКонтроля.Год КАК Год,
	|	МАКСИМУМ(ГрафикТекущегоПериодаИГраницыКонтроля.КоличествоДнейВГрафикеСНачалаГода) КАК ДнейВГоду
	|ПОМЕСТИТЬ РабочиеКалендари
	|ИЗ
	|	ВыборкаДокументов КАК ВыборкаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикТекущегоПериодаИГраницыКонтроля
	|		ПО (ГрафикТекущегоПериодаИГраницыКонтроля.Год = ГОД(&ТекущаяДата))
	|			И (ГрафикТекущегоПериодаИГраницыКонтроля.ДеньВключенВГрафик)
	|			И (ГрафикТекущегоПериодаИГраницыКонтроля.Календарь = ВыборкаДокументов.Календарь)
	|СГРУППИРОВАТЬ ПО
	|	ВыборкаДокументов.КлючКалендаря,
	|	ВыборкаДокументов.Календарь,
	|	ГрафикТекущегоПериодаИГраницыКонтроля.Год
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год,
	|	КлючКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ВыборкаДокументов.ПланироватьРаботу,
	|	ВыборкаДокументов.ПланироватьРаботуРабочихЦентров,
	|	ВыборкаДокументов.РабочийЦентр,
	|	ВыборкаДокументов.Подразделение,
	|	ТаблицаДокументов.Распоряжение,
	|	ТаблицаДокументов.КодСтрокиЭтапыГрафик,
	|	ВыборкаДокументов.ОпределитьСтатусВыполнения,
	|	ВыборкаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста,
	|	ВыборкаДокументов.НачалоРаботыКлючевогоРабочегоЦентра,
	|	ВыборкаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ВыборкаДокументов.ДлительностьРаботЕдИзм,
	|	ВыборкаДокументов.СтатусВыполненияПоФакту,
	
	|	ВыборкаДокументов.ЕстьРасписание,
	|	ВыборкаДокументов.ОформитьВыработку,
	|	ВыборкаДокументов.ОформитьВыпуск,
	
	|	ВыборкаДокументов.НеЗавершеныПредыдущиеЭтапы,
	|	ВыборкаДокументов.КлючевойРабочийЦентр,
	|	ВыборкаДокументов.ДефицитМатериалов,
	
	// ДлительностьРаботВМинутах
	|	ВЫБОР
	|		КОГДА ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|				ИЛИ ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|			ТОГДА ВыборкаДокументов.ДлительностьРабот * 1440
	|		КОГДА ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ВыборкаДокументов.ДлительностьРабот * 60
	|		КОГДА ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ВыборкаДокументов.ДлительностьРабот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДлительностьРаботВМинутах,
	
	// ДлительностьРаботВДнях
	|	ВыборкаДокументов.ДлительностьРабот КАК ДлительностьРаботВДнях,
	
	// ТекущаяДатаДень
	|	ВЫБОР 
	|		КОГДА ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|				ИЛИ ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|			ТОГДА ЕСТЬNULL(ГрафикТекущейДаты.КоличествоДнейВГрафикеСНачалаГода, 
	|						ДЕНЬГОДА(&ТекущаяДата))
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ТекущаяДатаДень,
	
	// Срок работ (дата) 
	|	ВЫБОР 
	|		КОГДА ВыборкаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		КОГДА ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|				ИЛИ ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ВыборкаДокументов.СрокРабот
	|		ИНАЧЕ
	|			ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК СрокРаботДата,
	
	// Срок работ (день в году)
	|	ВЫБОР 
	|		КОГДА ВыборкаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|			ТОГДА 0
	|		КОГДА ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|				ИЛИ ВыборкаДокументов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|			ТОГДА 
	|				ЕСТЬNULL(ГрафикСрокаРабот.КоличествоДнейВГрафикеСНачалаГода, ДЕНЬГОДА(ВыборкаДокументов.СрокРабот))
	|				+   ВЫБОР
	|						КОГДА ГОД(&ТекущаяДата) < ГОД(ВыборкаДокументов.СрокРабот)
	|							ТОГДА ЕСТЬNULL(КалендарьРабот.ДнейВГоду, ДЕНЬГОДА(КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)))
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СрокРаботДень
	|
	|ПОМЕСТИТЬ
	|	ДанныеРаботМаршрутныхЛистов
	|ИЗ
	|	ВыборкаДокументов КАК ВыборкаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Ссылка = ВыборкаДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РабочиеКалендари КАК КалендарьТекущегоПериода
	|		ПО (КалендарьТекущегоПериода.КлючКалендаря = ВыборкаДокументов.КлючКалендаря)
	|			И (КалендарьТекущегоПериода.Год = ГОД(&ТекущаяДата))
	|			И (КалендарьТекущегоПериода.Календарь = ВыборкаДокументов.Календарь)
	
	// Для статуса работ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РабочиеКалендари КАК КалендарьРабот
	|		ПО (КалендарьРабот.КлючКалендаря = ВыборкаДокументов.КлючКалендаря)
	|			И (КалендарьРабот.Год = ГОД(&ТекущаяДата))
	|			И (КалендарьРабот.Календарь = ВыборкаДокументов.Календарь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикСрокаРабот
	|		ПО (ГрафикСрокаРабот.Календарь = КалендарьРабот.Календарь)
	|			И (ГрафикСрокаРабот.ДеньВключенВГрафик)
	|			И (ГрафикСрокаРабот.Год = ГОД(ВыборкаДокументов.СрокРабот))
	|			И (ГрафикСрокаРабот.ДатаГрафика = НАЧАЛОПЕРИОДА(ВыборкаДокументов.СрокРабот, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикТекущейДаты
	|		ПО (ГрафикТекущейДаты.Календарь = КалендарьРабот.Календарь)
	|			И (ГрафикТекущейДаты.Год = ГОД(&ТекущаяДата))
	|			И (ГрафикТекущейДаты.ДатаГрафика = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.Дата,
	|	ТаблицаДокументов.Статус,
	|	ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ЗавершенаРаботаКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста,
	|	ТаблицаДокументов.ПланироватьРаботу,
	|	ТаблицаДокументов.ПланироватьРаботуРабочихЦентров,
	|	ТаблицаДокументов.Организация,
	|	ТаблицаДокументов.Подразделение,
	|	ТаблицаДокументов.Организация,
	|	ТаблицаДокументов.Этап,
	|	ТаблицаДокументов.Спецификация,
	|	ТаблицаДокументов.Этап.Представление КАК ЭтапПредставление,
	|	ТаблицаДокументов.Спецификация.Представление КАК СпецификацияПредставление,
	|	ТаблицаДокументов.Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	ТаблицаДокументов.ЭтапПолуфабриката,
	|	ТаблицаДокументов.СпецификацияПолуфабриката,
	|	ЕСТЬNULL(ТаблицаДокументов.ЭтапПолуфабриката.Представление, """") КАК ЭтапПолуфабрикатаПредставление,
	|	ЕСТЬNULL(ТаблицаДокументов.СпецификацияПолуфабриката.Представление, """") КАК СпецификацияПолуфабрикатаПредставление,
	|	ЕСТЬNULL(ТаблицаДокументов.СпецификацияПолуфабриката.МногоэтапныйПроизводственныйПроцесс, ЛОЖЬ) КАК МногоэтапныйПроизводственныйПроцессПолуфабриката,
	|	ТаблицаДокументов.ЭтапВосстановленияБрака КАК ЭтапВосстановленияБрака,
	|	ТаблицаДокументов.Номенклатура,
	|	ТаблицаДокументов.Характеристика,
	|	ТаблицаДокументов.ХарактеристикиИспользуются,
	|	ТаблицаДокументов.НоменклатураПолуфабриката,
	|	ТаблицаДокументов.ХарактеристикаПолуфабриката,
	|	ТаблицаДокументов.Распоряжение,
	|	ТаблицаДокументов.КодСтроки,
	|	ТаблицаДокументов.КодСтрокиЭтапыГрафик,
	|	ТаблицаДокументов.Начало,
	|	ТаблицаДокументов.Окончание,
	|	ТаблицаДокументов.ДатаИнтервалаНачало,
	|	ТаблицаДокументов.ДатаИнтервалаОкончание,
	|	ТаблицаДокументов.Запланировано,
	|	ТаблицаДокументов.Произведено,
	|	ТаблицаДокументов.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	ТаблицаДокументов.РабочийЦентр,
	|	ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ТаблицаДокументов.ФактическоеОкончание,
	|	ТаблицаДокументов.ЕстьРасписание,
	|	ТаблицаДокументов.Диспетчер,
	|	ТаблицаДокументов.РаспоряжениеНомер,
	|	ТаблицаДокументов.РаспоряжениеДата,
	|	ТаблицаДокументов.СтатусВыполнения,
	
	//ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра
	|				И ТаблицаДокументов.ПланироватьРаботу
	|				И ТаблицаДокументов.СтатусВыполнения > &ГраницаЖелтойЗоны
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяОтметитьГотовностьКРаботеКлючевогоРЦ,
	
	//ТребуетсяОтметитьВыполненным
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста
	|				И (ТаблицаДокументов.ПланироватьРаботу
	|						И ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра
	|						И ТаблицаДокументов.СтатусВыполнения > &ГраницаЖелтойЗоны
	|			        ИЛИ ТаблицаДокументов.Окончание <= &ТекущаяДата)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяОтметитьВыполненным,
	
	|	ТаблицаДокументов.ТребуетсяПередатьКВыполнению,
	|	ТаблицаДокументов.ТребуетсяСформироватьРасписание,
	|	ТаблицаДокументов.ТребуетсяОтметитьНачалоВыполнения,
	|	ТаблицаДокументов.ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ,
	|	ТаблицаДокументов.ТребуетсяОформитьВыработкуСотрудников,
	|	ТаблицаДокументов.ТребуетсяОформитьВыпуск,
	|	ТаблицаДокументов.ДлительностьРаботВМинутах,
	|	ТаблицаДокументов.СрокРаботДата,
	|	ТаблицаДокументов.СрокРаботДень,
	|	ТаблицаДокументов.НеЗавершеныПредыдущиеЭтапы,
	|	ТаблицаДокументов.КлючевойРабочийЦентр,
	|	ТаблицаДокументов.ДефицитМатериалов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументов.Ссылка,
	|		ТаблицаДокументов.Номер,
	|		ТаблицаДокументов.Дата,
	|		ТаблицаДокументов.Статус,
	|		ТаблицаДокументов.ГотовоКРаботеКлючевогоРабочегоЦентра,
	|		ТаблицаДокументов.ЗавершенаРаботаКлючевогоРабочегоЦентра,
	|		ТаблицаДокументов.ЗавершеноВыполнениеМаршрутногоЛиста,
	|		ДанныеРаботМаршрутныхЛистов.ПланироватьРаботу,
	|		ДанныеРаботМаршрутныхЛистов.ПланироватьРаботуРабочихЦентров,
	|		ТаблицаДокументов.Организация,
	|		ДанныеРаботМаршрутныхЛистов.Подразделение,
	|		ТаблицаДокументов.Организация,
	|		ВЫБОР 
	|			КОГДА ТаблицаДокументов.ЭтапПродукции <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|				ТОГДА ТаблицаДокументов.ЭтапПродукции
	|			ИНАЧЕ ТаблицаДокументов.Этап 
	|		КОНЕЦ КАК Этап,
	|		ТаблицаДокументов.Спецификация,
	|		ВЫБОР 
	|			КОГДА ТаблицаДокументов.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ТаблицаДокументов.Этап
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) 
	|		КОНЕЦ КАК ЭтапПолуфабриката,
	|		ТаблицаДокументов.СпецификацияПолуфабриката,
	|		ТаблицаДокументов.ЭтапВосстановленияБрака,
	|		ТаблицаДокументов.Номенклатура,
	|		ТаблицаДокументов.Характеристика,
	|		ТаблицаДокументов.НоменклатураПолуфабриката,
	|		ТаблицаДокументов.ХарактеристикаПолуфабриката,
	|		ВЫБОР
	|			КОГДА ТаблицаДокументов.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ТаблицаДокументов.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|				ИЛИ ТаблицаДокументов.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ  КАК ХарактеристикиИспользуются,
	|		ТаблицаДокументов.Распоряжение,
	|		ТаблицаДокументов.КодСтроки,
	|		ТаблицаДокументов.КодСтрокиЭтапыГрафик,
	|		ТаблицаДокументов.Начало,
	|		ТаблицаДокументов.Окончание,
	|		ТаблицаДокументов.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику КАК ДатаИнтервалаНачало,
	|		ТаблицаДокументов.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику КАК ДатаИнтервалаОкончание,
	|		ТаблицаДокументов.Запланировано,
	|		ТаблицаДокументов.Произведено,
	|		ТаблицаДокументов.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|		ДанныеРаботМаршрутныхЛистов.РабочийЦентр,
	|		ВЫБОР
	|			КОГДА ДанныеРаботМаршрутныхЛистов.ПланироватьРаботу
	|				ТОГДА ДанныеРаботМаршрутныхЛистов.НачалоРаботыКлючевогоРабочегоЦентра
	|			ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|		КОНЕЦ КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|		ВЫБОР
	|			КОГДА ДанныеРаботМаршрутныхЛистов.ПланироватьРаботу
	|				ТОГДА ДанныеРаботМаршрутныхЛистов.ОкончаниеРаботыКлючевогоРабочегоЦентра
	|			ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|		КОНЕЦ КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|		ТаблицаДокументов.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра КАК ФактическоеОкончание,
	|		ДанныеРаботМаршрутныхЛистов.ЕстьРасписание КАК ЕстьРасписание,
	|		ТаблицаДокументов.Диспетчер,
	|		ТаблицаДокументов.Распоряжение.Номер КАК РаспоряжениеНомер,
	|		ТаблицаДокументов.Распоряжение.Дата КАК РаспоряжениеДата,
	|		ДанныеРаботМаршрутныхЛистов.ЗавершеноВыполнениеМаршрутногоЛиста,
	|		ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВМинутах,
	|		ДанныеРаботМаршрутныхЛистов.СрокРаботДата,
	|		ДанныеРаботМаршрутныхЛистов.СрокРаботДень,
	|		ДанныеРаботМаршрутныхЛистов.НеЗавершеныПредыдущиеЭтапы,
	|		ДанныеРаботМаршрутныхЛистов.КлючевойРабочийЦентр,
	|		ДанныеРаботМаршрутныхЛистов.ДефицитМатериалов,
	|
	// СтатусВыполнения
	|		ВЫБОР
	|			КОГДА НЕ ДанныеРаботМаршрутныхЛистов.ОпределитьСтатусВыполнения
	|				ТОГДА 0
				// Время работ исчерпано полностью
	|			КОГДА &ТекущаяДата > ТаблицаДокументов.Окончание
	|				ТОГДА 200
	|			КОГДА ДанныеРаботМаршрутныхЛистов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|					ИЛИ ДанныеРаботМаршрутныхЛистов.ДлительностьРаботЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|				ТОГДА ВЫБОР
							// Длительность не задана
	|						КОГДА ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВМинутах = 0
	|							ТОГДА 0
							// Еще не наступило время работ
	|						КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, ДанныеРаботМаршрутныхЛистов.СрокРаботДата, МИНУТА) > ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВМинутах
	|							ТОГДА 0
							// Время работ исчерпано полностью
	|						КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, ДанныеРаботМаршрутныхЛистов.СрокРаботДата, МИНУТА) < 0
	|							ТОГДА 200
							// Вычислим статус по формуле
	|						ИНАЧЕ ВЫРАЗИТЬ((ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВМинутах
	|										- РАЗНОСТЬДАТ(&ТекущаяДата, ДанныеРаботМаршрутныхЛистов.СрокРаботДата, МИНУТА)
	|										) / ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВМинутах * 100 КАК ЧИСЛО (5,0))
	|					КОНЕЦ	
				// Длительность не задана
	|			КОГДА ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВДнях = 0
	|				ТОГДА 0
				// Еще не наступило время работ
	|			КОГДА (ДанныеРаботМаршрутныхЛистов.СрокРаботДень - ДанныеРаботМаршрутныхЛистов.ТекущаяДатаДень) > ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВДнях
	|				ТОГДА 0
				// Время работ исчерпано полностью
	|			КОГДА ДанныеРаботМаршрутныхЛистов.СрокРаботДень < ДанныеРаботМаршрутныхЛистов.ТекущаяДатаДень
	|				ТОГДА 200
				// Вычислим статус по формуле
	|			ИНАЧЕ ВЫРАЗИТЬ((ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВДнях
	|							- (ДанныеРаботМаршрутныхЛистов.СрокРаботДень 
	|									- ДанныеРаботМаршрутныхЛистов.ТекущаяДатаДень)
	|							) / ДанныеРаботМаршрутныхЛистов.ДлительностьРаботВДнях * 100 КАК ЧИСЛО (5,0))
	|	
	|		КОНЕЦ КАК СтатусВыполнения,
	
	// ТребуетсяСформироватьРасписание
	|		ВЫБОР
	|			КОГДА НЕ ДанныеРаботМаршрутныхЛистов.ЕстьРасписание
	|					И ДанныеРаботМаршрутныхЛистов.ПланироватьРаботу
	|					И ДанныеРаботМаршрутныхЛистов.ПланироватьРаботуРабочихЦентров
	|					И ТаблицаДокументов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ТребуетсяСформироватьРасписание,
	 
	// ТребуетсяПередатьКВыполнению
	|		ВЫБОР
	|			КОГДА ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|					И ТаблицаДокументов.Начало <= &ТекущаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ТребуетсяПередатьКВыполнению,
	
	// ТребуетсяОтметитьНачалоВыполнения
	|		ВЫБОР
	|			КОГДА (ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|						ИЛИ ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению))
	|					И ТаблицаДокументов.Начало <= &ТекущаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ТребуетсяОтметитьНачалоВыполнения,
	
	//ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ
	|		ВЫБОР
	|			КОГДА ДанныеРаботМаршрутныхЛистов.ПланироватьРаботу
	|					И НЕ ТаблицаДокументов.ЗавершенаРаботаКлючевогоРабочегоЦентра
	|					И ДанныеРаботМаршрутныхЛистов.ОкончаниеРаботыКлючевогоРабочегоЦентра <= &ТекущаяДата
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ТребуетсяОтметитьЗавершениеРаботыКлючевогоРЦ,
	
	// ТребуетсяОформитьВыработкуСотрудников
	|		ДанныеРаботМаршрутныхЛистов.ОформитьВыработку КАК ТребуетсяОформитьВыработкуСотрудников,
	
	// ТребуетсяОформитьВыпуск
	|		ДанныеРаботМаршрутныхЛистов.ОформитьВыпуск КАК ТребуетсяОформитьВыпуск
	
	|	
	|	ИЗ
	|		ДанныеРаботМаршрутныхЛистов КАК ДанныеРаботМаршрутныхЛистов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокументов
	|			ПО (ТаблицаДокументов.Ссылка = ДанныеРаботМаршрутныхЛистов.Ссылка)
	|
	|	) КАК ТаблицаДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало,
	|	Этап,
	|	НачалоРаботыКлючевогоРабочегоЦентра";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("СостояниеРаботы", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЭтапСпецификация", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЭтапСпецификацияПолуфабриката", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СтатусРаботыКлючевогоРЦ", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыРаботыРабочихЦентров"));
	Для каждого СтрокаМЛ Из Результат Цикл
		
		СтрокаМЛ.ЭтапСпецификация = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЭтапа(
										СтрокаМЛ.СпецификацияПредставление, 
										СтрокаМЛ.ЭтапПредставление, 
										СтрокаМЛ.МногоэтапныйПроизводственныйПроцесс, 
										СтрокаМЛ.ЭтапВосстановленияБрака);
		
		Если ЗначениеЗаполнено(СтрокаМЛ.СпецификацияПолуфабриката) Тогда
			СтрокаМЛ.ЭтапСпецификацияПолуфабриката = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЭтапа(
											СтрокаМЛ.СпецификацияПолуфабрикатаПредставление, 
											СтрокаМЛ.ЭтапПолуфабрикатаПредставление, 
											СтрокаМЛ.МногоэтапныйПроизводственныйПроцессПолуфабриката, 
											СтрокаМЛ.ЭтапВосстановленияБрака);
		КонецЕсли; 
		
		Если СтрокаМЛ.ЕстьРасписание Тогда
			СостояниеРаботы = СостояниеРаботы(СтрокаМЛ.НачалоРаботыКлючевогоРабочегоЦентра,
												СтрокаМЛ.ОкончаниеРаботыКлючевогоРабочегоЦентра, 
												СтрокаМЛ.ФактическоеОкончание,
												СтруктураПараметров.ДатаКонтроля);
													
			СтрокаМЛ.СостояниеРаботы = СостояниеРаботы.СостояниеРаботыСтрокой;
			СтрокаМЛ.СтатусРаботыКлючевогоРЦ = СостояниеРаботы.СостояниеРаботы;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСервер.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Обработки.ДиспетчированиеПроизводства))
		И ПравоДоступа("Добавление", Метаданные.Документы.МаршрутныйЛистПроизводства)
		И ПравоДоступа("Чтение",     Метаданные.Документы.МаршрутныйЛистПроизводства)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыСведений.ГрафикЭтаповПроизводства)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.ЭтапыПроизводства)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыПоПодразделению = Новый Соответствие;
	
	// Расчет показателей
	ТаблицаПоказателя = Новый ТаблицаЗначений;
	ТаблицаПоказателя.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаПоказателя.Колонки.Добавить("ЗначениеПоказателя", Новый ОписаниеТипов("Число"));
	ДанныеМаршрутныхЛистов = ОперативныйУчетПроизводстваВызовСервера.ДанныеДляФормированияМаршрутныхЛистов();
	Для каждого ДанныеНовогоМЛ Из ДанныеМаршрутныхЛистов Цикл
		ЗначениеПоказателя = ТаблицаПоказателя.Добавить();
		ЗначениеПоказателя.Подразделение = ДанныеНовогоМЛ.Подразделение;
		ЗначениеПоказателя.ЗначениеПоказателя = 1;
		Если ДанныеНовогоМЛ.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
			ИЛИ ДанныеНовогоМЛ.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
			ИмяФормыПоПодразделению.Вставить(ЗначениеПоказателя.Подразделение, "Обработка.ДиспетчированиеПроизводстваПооперационное.Форма");
		Иначе
			ИмяФормыПоПодразделению.Вставить(ЗначениеПоказателя.Подразделение, "Обработка.ДиспетчированиеПроизводства.Форма");
		КонецЕсли; 
	КонецЦикла; 
	ТаблицаПоказателя.Свернуть("Подразделение", "ЗначениеПоказателя");

	// Рассчитаем показатели
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоказателя.Подразделение КАК Подразделение,
	|	ТаблицаПоказателя.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ТаблицаПоказателя
	|ИЗ
	|	&ТаблицаПоказателя КАК ТаблицаПоказателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказателя.Подразделение КАК Подразделение,
	|	ТаблицаПоказателя.ЗначениеПоказателя КАК ЗначениеПоказателя
	|ИЗ
	|	ТаблицаПоказателя КАК ТаблицаПоказателя";
	
	Запрос.УстановитьПараметр("ТаблицаПоказателя", ТаблицаПоказателя);
	
	ТекущиеДелаСлужебный.УстановитьОбщиеПараметрыЗапросов(Запрос, ОбщиеПараметрыЗапросов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Заполнение дел.
	// МаршрутныеЛисты
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "МаршрутныеЛисты";
	ДелоРодитель.Представление  = НСтр("ru = 'Маршрутные листы к формированию';
										|en = 'Route sheets to be generated'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Производство;
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		ПараметрыОтбора = Новый Структура;
		
		ПредставлениеДела = "";
		ИдентификаторДела = "";
		ЗначениеДела      = 0;
		Для Каждого КолонкаРезультата Из Результат.Колонки Цикл
			ЗначениеКолонки = СтрокаРезультата[КолонкаРезультата.Имя];
			Если КолонкаРезультата.Имя = "ЗначениеПоказателя" Тогда
				ЗначениеДела = ЗначениеКолонки;
				Продолжить;
			КонецЕсли;
			ПредставлениеДела = ?(ПредставлениеДела = "", "", ", ") + Строка(ЗначениеКолонки);
			ИдентификаторДела = ?(ИдентификаторДела = "", ДелоРодитель.Идентификатор, ИдентификаторДела)
				+ СтрЗаменить(Строка(ЗначениеКолонки), " ", "");
			ПараметрыОтбора.Вставить(КолонкаРезультата.Имя, ЗначениеКолонки);
		КонецЦикла;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = ЗначениеДела > 0;
		Дело.Представление  = ПредставлениеДела;
		Дело.Количество     = ЗначениеДела;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормыПоПодразделению.Получить(СтрокаРезультата.Подразделение);
		Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		Дело.Владелец       = "МаршрутныеЛисты";
		
		Если ЗначениеДела > 0 Тогда
			ДелоРодитель.ЕстьДела = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Документы.МаршрутныйЛистПроизводства.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Документы.МаршрутныйЛистПроизводства.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#Область ДиспетчированиеПроизводства

Функция СформироватьМаршрутныеЛисты(ПараметрыЗадания, АдресХранилища) Экспорт

	КлючеваяОперация = "ВнутрицеховоеУправление.ФормированиеМаршрутныхЛистов.ДиспетчированиеПроизводстваПооперационное";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	Параметры = ПараметрыЗадания.ПараметрыЗаданияСформироватьМаршрутныеЛисты;
	КоличествоДанных = ПрочитатьДанныеДляФормированияМаршрутныхЛистов(Параметры);
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных, "ПрочитатьДанныеДляФормированияМаршрутныхЛистов");
	
	КоличествоДанных = СформироватьМаршрутныеЛистыВнутриЗамераВремени(Параметры);
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных, "СформироватьМаршрутныеЛистыВнутриЗамераВремени");
	
	Результат = РезультатФормированияМаршрутныхЛистов(
		Параметры, ПараметрыЗадания.ПараметрыЗаданияПолучитьДанныеДиспетчирования);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецФункции

Функция ПрочитатьДанныеДляФормированияМаршрутныхЛистов(Параметры)
	
	ДанныеОтбора = Новый Структура;
	ДанныеОтбора.Вставить("Подразделение", Параметры.Подразделение);
	ДанныеОтбора.Вставить("СписокРаспоряжений", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СписокРаспоряжений", Неопределено));
	ДанныеОтбора.Вставить("СписокЭтапов", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "СписокЭтапов", Неопределено));
	ДанныеОтбора.Вставить("УправлениеМаршрутнымиЛистами", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "УправлениеМаршрутнымиЛистами", Неопределено));
	ДанныеДляФормирования = ОперативныйУчетПроизводстваВызовСервера.ДанныеДляФормированияМаршрутныхЛистов(ДанныеОтбора);
		
	Параметры.Вставить("ДанныеДляФормирования", ДанныеДляФормирования);
	
	Возврат ДанныеДляФормирования.Количество();
	
КонецФункции

Функция СформироватьМаршрутныеЛистыВнутриЗамераВремени(Параметры)
	
	ДанныеМаршрутныхЛистов = Новый Массив;
	Для каждого ДанныеЗаполнения Из Параметры.ДанныеДляФормирования Цикл
		// Будем формировать МЛ по этапу если
		// - период работы ключевого РЦ меньше выбранной даты
		// - При УББВ начало этапа меньше выбранной даты.
		Если (НЕ ЗначениеЗаполнено(Параметры.Подразделение) 
				ИЛИ ДанныеЗаполнения.Подразделение = Параметры.Подразделение)
			И (ДанныеЗаполнения.НачалоРаботыКлючевогоРабочегоЦентра <> '000101010000'
					И ДанныеЗаполнения.НачалоРаботыКлючевогоРабочегоЦентра <= Параметры.Окончание
				ИЛИ ДанныеЗаполнения.НачалоРаботыКлючевогоРабочегоЦентра = '000101010000'
					И ДанныеЗаполнения.Начало <= Параметры.Окончание) Тогда
			ДанныеМаршрутныхЛистов.Добавить(ДанныеЗаполнения);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоОбработанных = ОперативныйУчетПроизводстваВызовСервера.СформироватьМаршрутныеЛисты(ДанныеМаршрутныхЛистов);
	
	Параметры.Вставить("ДанныеМаршрутныхЛистов", ДанныеМаршрутныхЛистов);
	Параметры.Вставить("КоличествоОбработанных", КоличествоОбработанных);
	Параметры.Вставить("КоличествоВсего", ДанныеМаршрутныхЛистов.Количество());
	
	Возврат КоличествоОбработанных;
	
КонецФункции

Функция РезультатФормированияМаршрутныхЛистов(ПараметрыФормирования, ПараметрыДанныхДиспетчирования)
	
	Перем ТекущееКоличествоМЛ;
	ПараметрыФормирования.Свойство("ТекущееКоличествоМЛ", ТекущееКоличествоМЛ);
	
	Если ТекущееКоличествоМЛ <> Неопределено Тогда
		АвтоОбновление = (ТекущееКоличествоМЛ + ПараметрыФормирования.КоличествоОбработанных) < 500;
	Иначе
		АвтоОбновление = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПодготовитьТребуетсяСформироватьМЛ");
	
	Если АвтоОбновление Тогда
		СтруктураДействий.Вставить("ПодготовитьДиспетчированиеМЛ");
		СтруктураДействий.Вставить("ПодготовитьДиспетчированиеРЦ");
		СтруктураДействий.Вставить("ПодготовитьРасписание");
	КонецЕсли;
	
	РезультатФормированияМЛ = Новый Структура;
	РезультатФормированияМЛ.Вставить("КоличествоОбработанных", ПараметрыФормирования.КоличествоОбработанных);
	РезультатФормированияМЛ.Вставить("КоличествоВсего", ПараметрыФормирования.КоличествоВсего);
	
	ДанныеДляДиспетчированияПроизводства = ПодготовитьДанныеДляДиспетчированияПроизводства(ПараметрыДанныхДиспетчирования, СтруктураДействий);
	ДанныеДляДиспетчированияПроизводства.Вставить("АвтоОбновление", АвтоОбновление);
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатФормированияМЛ", РезультатФормированияМЛ);
	Результат.Вставить("ДанныеДляДиспетчированияПроизводства", ДанныеДляДиспетчированияПроизводства);
	
	Возврат Результат;
	
КонецФункции

// Подготавливает данные для диспетчирования производства
//
// Параметры:
//  Параметры		- Структура - параметры диспетчирования
//  АдресХранилища	- Строка - адрес хранилища, в которое будет помещен результат.
//
Процедура ВыполнитьЗаданиеОбновитьДанные(Параметры, АдресХранилища) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПодготовитьТребуетсяСформироватьМЛ");
	СтруктураДействий.Вставить("ПодготовитьДиспетчированиеМЛ");
	СтруктураДействий.Вставить("ПодготовитьДиспетчированиеРЦ");
	СтруктураДействий.Вставить("ПодготовитьРасписание");
	
	Результат = ПодготовитьДанныеДляДиспетчированияПроизводства(Параметры, СтруктураДействий);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ПодготовитьДанныеДляДиспетчированияПроизводства(Параметры, СтруктураДействий)

	Результат = Новый Структура;
	
	ПодготовитьТребуетсяСформироватьМЛ(Параметры, Результат, СтруктураДействий);
	ПодготовитьДиспетчированиеМЛ(Параметры, Результат, СтруктураДействий);
	ПодготовитьДиспетчированиеРЦ(Параметры, Результат, СтруктураДействий);
	ПодготовитьРасписание(Параметры, Результат, СтруктураДействий);
	
	Возврат Результат;

КонецФункции

Процедура ПодготовитьТребуетсяСформироватьМЛ(Параметры, Результат, СтруктураДействий)

	Если НЕ СтруктураДействий.Свойство("ПодготовитьТребуетсяСформироватьМЛ") Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСформироватьМЛ = ОперативныйУчетПроизводства.ТребуетсяСформироватьМаршрутныеЛисты(
							Параметры.ОтборПодразделение,
							Параметры.СписокРаспоряжений,
							Параметры.СписокЭтапов, 
							Параметры.УправлениеМаршрутнымиЛистами);
	
	Результат.Вставить("ТребуетсяСформироватьМЛ", ТребуетсяСформироватьМЛ);
	
КонецПроцедуры

Процедура ПодготовитьДиспетчированиеМЛ(Параметры, Результат, СтруктураДействий)

	Если НЕ СтруктураДействий.Свойство("ПодготовитьДиспетчированиеМЛ") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", Параметры.НачалоПериода);
	СтруктураПараметров.Вставить("ОкончаниеПериода", Параметры.ОкончаниеПериода);
	СтруктураПараметров.Вставить("Подразделение", Параметры.ОтборПодразделение);
	СтруктураПараметров.Вставить("СписокРаспоряжений", Параметры.СписокРаспоряжений);
	СтруктураПараметров.Вставить("РабочийЦентр", Параметры.ОтборРабочийЦентр);
	СтруктураПараметров.Вставить("ДатаКонтроля", Параметры.ДатаКонтроля);
	СтруктураПараметров.Вставить("ГраницаЗеленойЗоны", Параметры.ГраницаЗеленойЗоны);
	СтруктураПараметров.Вставить("ГраницаЖелтойЗоны", Параметры.ГраницаЖелтойЗоны);
	СтруктураПараметров.Вставить("ГраницаКраснойЗоны", Параметры.ДатаКонтроля);
	
	ДиспетчированиеМЛ = ДиспетчированиеМаршрутныхЛистов(СтруктураПараметров);
	
	Результат.Вставить("ДиспетчированиеМЛ", ДиспетчированиеМЛ);
	
КонецПроцедуры

Процедура ПодготовитьДиспетчированиеРЦ(Параметры, Результат, СтруктураДействий)

	Если НЕ СтруктураДействий.Свойство("ПодготовитьДиспетчированиеРЦ") Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПодразделение = Параметры.ОтборПодразделение;
	ОтборРабочийЦентр = Параметры.ОтборРабочийЦентр;
	НачалоПериода = Параметры.НачалоПериода;
	ОкончаниеПериода = Параметры.ОкончаниеПериода;
	
	ДиспетчированиеРЦ = Параметры.ДиспетчированиеРЦ;
	
	СписокПодразделений = Новый Массив;
	Если НЕ Параметры.ОтборПодразделение.Пустая() Тогда
		СписокПодразделений.Добавить(ОтборПодразделение);
	КонецЕсли;
	
	// При диспетчировании РЦ прошлый период всегда игнорируем
	Если НачалоПериода <> '000101010000' Тогда
		НачалоПериодаДиспетчирования = НачалоПериода;
	Иначе
		НачалоПериодаДиспетчирования = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
													Параметры.ДатаКонтроля, 
													Параметры.ИнтервалПланирования);
	КонецЕсли;
	Если ОкончаниеПериода <> '000101010000' Тогда
		ОкончаниеПериодаДиспетчирования = ОкончаниеПериода;
	Иначе
		ОкончаниеПериодаДиспетчирования = '000101010000';
	КонецЕсли; 
	
	КлючевыеВидыРабочихЦентров = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
											СписокПодразделений, 
											НачалоПериодаДиспетчирования, 
											ОкончаниеПериодаДиспетчирования,
											Истина);
											
	// Удалим строки, которые не относятся к периоду диспетчирования
	СтрокиКУдалению = Новый Массив;
	Для каждого ДанныеКлючевогоВидаРЦ Из КлючевыеВидыРабочихЦентров Цикл
		Если НЕ ДанныеКлючевогоВидаРЦ.Ключевой
			ИЛИ (ДанныеКлючевогоВидаРЦ.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
					ИЛИ ДанныеКлючевогоВидаРЦ.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День)
				И (ДанныеКлючевогоВидаРЦ.Период < НачалоДня(НачалоПериодаДиспетчирования)
					ИЛИ ОкончаниеПериодаДиспетчирования <> '000101010000'
						И ДанныеКлючевогоВидаРЦ.Период > КонецДня(ОкончаниеПериодаДиспетчирования))
			ИЛИ (ДанныеКлючевогоВидаРЦ.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя)
				И (ДанныеКлючевогоВидаРЦ.Период < НачалоНедели(НачалоПериодаДиспетчирования)
					ИЛИ ОкончаниеПериодаДиспетчирования <> '000101010000'
						И ДанныеКлючевогоВидаРЦ.Период > КонецНедели(ОкончаниеПериодаДиспетчирования))
			ИЛИ (ДанныеКлючевогоВидаРЦ.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц)
				И (ДанныеКлючевогоВидаРЦ.Период < НачалоМесяца(НачалоПериодаДиспетчирования)
					ИЛИ ОкончаниеПериодаДиспетчирования <> '000101010000'
						И ДанныеКлючевогоВидаРЦ.Период > КонецМесяца(ОкончаниеПериодаДиспетчирования)) Тогда
			
			СтрокиКУдалению.Добавить(ДанныеКлючевогоВидаРЦ);
		КонецЕсли;
	КонецЦикла; 
	Для каждого ДанныеКлючевогоВидаРЦ Из СтрокиКУдалению Цикл
		КлючевыеВидыРабочихЦентров.Удалить(ДанныеКлючевогоВидаРЦ);
	КонецЦикла; 
	
	Если КлючевыеВидыРабочихЦентров.Количество() = 0 Тогда
		Результат.Вставить("ДанныеДиспетчированиеРЦ", Неопределено);
		Возврат;
	КонецЕсли; 
	
	ДоступныеРабочиеЦентры = ПодготовитьДоступныеРЦДляОтбора(КлючевыеВидыРабочихЦентров);
	
	// Получим рабочие центры ключевых видов РЦ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
	|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования КАК ПериодДиспетчирования,
	|	РабочиеЦентры.ВидРабочегоЦентра.ПланироватьРаботуРабочихЦентров КАК ПланироватьРаботуРабочихЦентров,
	|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.ВидРабочегоЦентра В(&ВидыРабочихЦентров)
	|	И РабочиеЦентры.ВидРабочегоЦентра.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
	|	И (РабочиеЦентры.Ссылка В (&СписокРабочихЦентров)
	|			ИЛИ &НеИспользоватьСписокРабочихЦентров)
	|	И НЕ РабочиеЦентры.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочиеЦентры.Наименование";
	
	ВидыРабочихЦентров = КлючевыеВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра");
	ВидыРабочихЦентров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ВидыРабочихЦентров);
	Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
	
	Запрос.УстановитьПараметр("СписокРабочихЦентров", ОтборРабочийЦентр);
	Запрос.УстановитьПараметр("НеИспользоватьСписокРабочихЦентров", ОтборРабочийЦентр.Количество() = 0);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДиспетчированиеРЦ.Добавить(), Выборка);
	КонецЦикла;
	
	Если Параметры.ОтборПериод = "" ИЛИ Параметры.ОтборПериод = "Текущий" Тогда
		СостояниеРаботыРЦ = СостояниеРаботыРЦ(Параметры);
	Иначе
		СостояниеРаботыРЦ = Неопределено;
	КонецЕсли; 
	
	ОтставаниеОтРасписания = 0;
	ОпережениеОтРасписания = 0;
	НеСформированоРасписание = 0;
	Для каждого ДанныеСтроки Из ДиспетчированиеРЦ Цикл
		
		ДатаИнтервалаНачало = НачалоПериодаДиспетчирования;
		РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.ПустаяСсылка();															
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ДанныеСтроки.ВидРабочегоЦентра);
  		СписокСтрок = КлючевыеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОКлючевомРЦ Из СписокСтрок Цикл
			Если РасписаниеРаботы.Пустая()
				ИЛИ ДанныеОКлючевомРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано
				ИЛИ ДанныеОКлючевомРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.СформированоЧастично Тогда
				
				РасписаниеРаботы = ДанныеОКлючевомРЦ.РасписаниеРаботы;
			КонецЕсли; 
			Если РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано
				ИЛИ РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.СформированоЧастично Тогда
				ДатаИнтервалаНачало = ДанныеОКлючевомРЦ.Период;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		ДанныеСтроки.ДатаИнтервалаНачало = ДатаИнтервалаНачало;
		
		Если СостояниеРаботыРЦ <> Неопределено Тогда
			
			ДанныеОРаботе = СостояниеРаботыРЦ.ДанныеОРаботеРЦ.Найти(ДанныеСтроки.РабочийЦентр, "КлючевойРабочийЦентр");
			
			Если ДанныеОРаботе <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеОРаботе);
			КонецЕсли;
		
			Если ДанныеСтроки.СтатусРаботы = Перечисления.СтатусыРаботыРабочихЦентров.Отставание
				ИЛИ ДанныеСтроки.СтатусРаботы = Перечисления.СтатусыРаботыРабочихЦентров.Опережение Тогда
				
				ДанныеСтроки.СтатусРаботыСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = '%1 %2ч, %3%';
															|en = '%1 %2 h, %3%'"),
														ДанныеСтроки.СтатусРаботы,
														ДанныеСтроки.Отклонение,
														ДанныеСтроки.ОтклонениеПроцент);
				
			ИначеЕсли ДанныеСтроки.СтатусРаботы = Перечисления.СтатусыРаботыРабочихЦентров.БезОтклонений Тогда
				ДанныеСтроки.СтатусРаботыСтрока = Строка(ДанныеСтроки.СтатусРаботы);
			КонецЕсли; 

			// Определим какие МЛ в работе
			СтруктураПоиска = Новый Структура("РабочийЦентр", ДанныеСтроки.РабочийЦентр);
	  		СписокСтрок = СостояниеРаботыРЦ.МЛВработе.НайтиСтроки(СтруктураПоиска);
			МаршрутныйЛистСтрока = "";
			Для каждого ВыборкаМЛ Из СписокСтрок Цикл
				ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = '№ %1 от %2';
													|en = 'No. %1 from %2'"),
												ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаМЛ.Номер, Ложь, Истина),
												Формат(ВыборкаМЛ.Дата, "ДЛФ=D"));
												
				МаршрутныйЛистСтрока = МаршрутныйЛистСтрока 
										+ ?(МаршрутныйЛистСтрока = "", "", " ")
										+ ПредставлениеДокумента + ";";
										
				ДанныеСтроки.МаршрутныеЛистыВРаботе.Добавить(ВыборкаМЛ.Ссылка, ПредставлениеДокумента);
			КонецЦикла; 
			ДанныеСтроки.МаршрутныйЛистСтрока = МаршрутныйЛистСтрока;
			
		КонецЕсли; 
		
		Если ДанныеСтроки.СтатусРаботы = Перечисления.СтатусыРаботыРабочихЦентров.Отставание Тогда
			ОтставаниеОтРасписания = ОтставаниеОтРасписания + 1;
		КонецЕсли; 
		Если ДанныеСтроки.СтатусРаботы = Перечисления.СтатусыРаботыРабочихЦентров.Опережение Тогда
			ОпережениеОтРасписания = ОпережениеОтРасписания + 1;
		КонецЕсли; 
		Если ДанныеСтроки.ПланироватьРаботуРабочихЦентров
			И (РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано
				ИЛИ РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.СформированоЧастично) Тогда
			НеСформированоРасписание = НеСформированоРасписание + 1;
			ДанныеСтроки.ТребуетсяСформироватьРасписание = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	ВидыРЦТребующиеВводаГрафикаРаботы = Обработки.ДоступностьВидовРабочихЦентров.ВидыРЦТребующиеВводаГрафикаРаботы(ОтборПодразделение);
	
	ДанныеДиспетчированиеРЦ = Новый Структура;
	ДанныеДиспетчированиеРЦ.Вставить("ОтставаниеОтРасписания", ОтставаниеОтРасписания);
	ДанныеДиспетчированиеРЦ.Вставить("ОпережениеОтРасписания", ОпережениеОтРасписания);
	ДанныеДиспетчированиеРЦ.Вставить("НеСформированоРасписание", НеСформированоРасписание);
	ДанныеДиспетчированиеРЦ.Вставить("ДиспетчированиеРЦ", ДиспетчированиеРЦ);
	ДанныеДиспетчированиеРЦ.Вставить("ДоступныеРабочиеЦентры", ДоступныеРабочиеЦентры);
	ДанныеДиспетчированиеРЦ.Вставить("ВидыРЦТребующиеВводаГрафикаРаботы", ВидыРЦТребующиеВводаГрафикаРаботы);
	
	Результат.Вставить("ДанныеДиспетчированиеРЦ", ДанныеДиспетчированиеРЦ);
	
КонецПроцедуры

Функция ПодготовитьДоступныеРЦДляОтбора(КлючевыеВидыРабочихЦентров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК Значение,
	|	РабочиеЦентры.Представление КАК Представление
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.ВидРабочегоЦентра В(&СписокВидовРЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочиеЦентры.Наименование";
	
	Запрос.УстановитьПараметр("СписокВидовРЦ", КлючевыеВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"));
	
	РезультатЗапрос = Запрос.Выполнить();
	Выборка = РезультатЗапрос.Выбрать();
	
	ДоступныеРабочиеЦентры = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ДоступныеРабочиеЦентры.Добавить(Выборка.Значение, Выборка.Представление);
	КонецЦикла;
	
	Возврат ДоступныеРабочиеЦентры;
	
КонецФункции

Функция СостояниеРаботыРЦ(Параметры)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	//0
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|	МаршрутныйЛистПроизводства.Номер КАК Номер,
	|	МаршрутныйЛистПроизводства.Дата КАК Дата,
	|	МаршрутныйЛистПроизводства.Статус КАК Статус,
	|	МаршрутныйЛистПроизводства.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра КАК ОкончаниеФакт,
	|	Расписание.РабочийЦентр КАК РабочийЦентр,
	|	Расписание.Начало КАК НачалоПлан,
	|	Расписание.Окончание КАК ОкончаниеПлан
	|ПОМЕСТИТЬ СписокМаршрутныхЛистов
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК Расписание
	|		ПО (Расписание.МаршрутныйЛист = МаршрутныйЛистПроизводства.Ссылка)
	|			И (Расписание.Начало <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (&НеИспользоватьСписокРабочихЦентров
	|				ИЛИ Расписание.РабочийЦентр В (&СписокРабочихЦентров))
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Проведен
	|	И (МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению)
	|			ИЛИ МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется)
	|			ИЛИ МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|	И ((МаршрутныйЛистПроизводства.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|				ИЛИ МаршрутныйЛистПроизводства.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День))
	|				И (МаршрутныйЛистПроизводства.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику МЕЖДУ &НачалоДня И &КонецДня)
	|			ИЛИ МаршрутныйЛистПроизводства.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|				И (МаршрутныйЛистПроизводства.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику МЕЖДУ &НачалоНедели И &КонецНедели)
	|			ИЛИ МаршрутныйЛистПроизводства.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|				И (МаршрутныйЛистПроизводства.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику МЕЖДУ &НачалоМесяца И &КонецМесяца))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//1
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючевойРабочийЦентр,
	|	ВложенныйЗапрос.ДатаСведений,
	|	ВложенныйЗапрос.ОтработаноФактически КАК Факт,
	|	ВложенныйЗапрос.План,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ОтработаноФактически >= ВложенныйЗапрос.ПланНаДатуПоследнегоФакта
	|			ТОГДА ВложенныйЗапрос.ОтработаноФактически - ВложенныйЗапрос.ПланНаДатуПоследнегоФакта
	|		ИНАЧЕ ВложенныйЗапрос.ПланНаДатуПоследнегоФакта - ВложенныйЗапрос.ОтработаноФактически
	|	КОНЕЦ КАК Отклонение,
	|	ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час) КАК ОтклонениеЕдИзм,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ПланНаДатуПоследнегоФакта = 0
	|			ТОГДА 0
	|		КОГДА ВложенныйЗапрос.ОтработаноФактически >= ВложенныйЗапрос.ПланНаДатуПоследнегоФакта
	|			ТОГДА ВЫРАЗИТЬ((ВложенныйЗапрос.ОтработаноФактически - ВложенныйЗапрос.ПланНаДатуПоследнегоФакта) / ВложенныйЗапрос.ПланНаДатуПоследнегоФакта * 100 КАК ЧИСЛО(10, 0))
	|		ИНАЧЕ ВЫРАЗИТЬ((ВложенныйЗапрос.ПланНаДатуПоследнегоФакта - ВложенныйЗапрос.ОтработаноФактически) / ВложенныйЗапрос.ПланНаДатуПоследнегоФакта * 100 КАК ЧИСЛО(10, 0))
	|	КОНЕЦ КАК ОтклонениеПроцент,
	|	""%"" КАК ОтклонениеПроцентЕдИзм,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ОтработаноФактически = 0
	|				И ВложенныйЗапрос.ПланНаДатуПоследнегоФакта = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРаботыРабочихЦентров.ПустаяСсылка)
	|		КОГДА ВложенныйЗапрос.ОтработаноФактически - ВложенныйЗапрос.ПланНаДатуПоследнегоФакта = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРаботыРабочихЦентров.БезОтклонений)
	|		КОГДА ВложенныйЗапрос.ОтработаноФактически - ВложенныйЗапрос.ПланНаДатуПоследнегоФакта > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРаботыРабочихЦентров.Опережение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыРаботыРабочихЦентров.Отставание)
	|	КОНЕЦ КАК СтатусРаботы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.КлючевойРабочийЦентр КАК КлючевойРабочийЦентр,
	|		МАКСИМУМ(ВложенныйЗапрос.ДатаВыполнения) КАК ДатаСведений,
	|		СУММА(ВложенныйЗапрос.ОтработаноФактически) КАК ОтработаноФактически,
	|		СУММА(ВложенныйЗапрос.ПланНаДатуПоследнегоФакта) КАК ПланНаДатуПоследнегоФакта,
	|		СУММА(ВложенныйЗапрос.План) КАК План
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СписокМаршрутныхЛистов.РабочийЦентр КАК КлючевойРабочийЦентр,
	|			МАКСИМУМ(ЕСТЬNULL(ДанныеПоВыполненнымРаботам.ДатаПоследнегоФакта, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаВыполнения,
	|			СУММА(ВЫБОР
	|					КОГДА СписокМаршрутныхЛистов.ОкончаниеФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА РАЗНОСТЬДАТ(СписокМаршрутныхЛистов.НачалоПлан, СписокМаршрутныхЛистов.ОкончаниеПлан, ЧАС) + 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ОтработаноФактически,
	|			СУММА(ВЫБОР
	|					КОГДА СписокМаршрутныхЛистов.НачалоПлан > ЕСТЬNULL(ДанныеПоВыполненнымРаботам.ДатаПоследнегоФакта, ДАТАВРЕМЯ(1, 1, 1))
	|						ТОГДА 0
	|					КОГДА СписокМаршрутныхЛистов.ОкончаниеПлан <= ЕСТЬNULL(ДанныеПоВыполненнымРаботам.ДатаПоследнегоФакта, ДАТАВРЕМЯ(1, 1, 1))
	|						ТОГДА РАЗНОСТЬДАТ(СписокМаршрутныхЛистов.НачалоПлан, СписокМаршрутныхЛистов.ОкончаниеПлан, ЧАС) + 1
	|					ИНАЧЕ РАЗНОСТЬДАТ(СписокМаршрутныхЛистов.НачалоПлан, ДанныеПоВыполненнымРаботам.ДатаПоследнегоФакта, ЧАС) + 1
	|				КОНЕЦ) КАК ПланНаДатуПоследнегоФакта,
	|			СУММА(ВЫБОР
	|					КОГДА СписокМаршрутныхЛистов.ОкончаниеПлан <= &ТекущаяДата
	|						ТОГДА РАЗНОСТЬДАТ(СписокМаршрутныхЛистов.НачалоПлан, СписокМаршрутныхЛистов.ОкончаниеПлан, ЧАС) + 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК План
	|		ИЗ
	|			СписокМаршрутныхЛистов КАК СписокМаршрутныхЛистов
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокМаршрутныхЛистов.РабочийЦентр КАК РабочийЦентр,
	|					МАКСИМУМ(СписокМаршрутныхЛистов.ОкончаниеФакт) КАК ДатаПоследнегоФакта
	|				ИЗ
	|					СписокМаршрутныхЛистов КАК СписокМаршрутныхЛистов
	|				ГДЕ
	|					СписокМаршрутныхЛистов.ОкончаниеФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|					И СписокМаршрутныхЛистов.ОкончаниеФакт <= &ТекущаяДата
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокМаршрутныхЛистов.РабочийЦентр) КАК ДанныеПоВыполненнымРаботам
	|				ПО (ДанныеПоВыполненнымРаботам.РабочийЦентр = СписокМаршрутныхЛистов.РабочийЦентр)
	|		ГДЕ
	|			(СписокМаршрутныхЛистов.ОкончаниеФакт <= &ТекущаяДата
	|					ИЛИ СписокМаршрутныхЛистов.ОкончаниеФакт = ДАТАВРЕМЯ(1, 1, 1))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокМаршрутныхЛистов.РабочийЦентр) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.КлючевойРабочийЦентр) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//2
	|ВЫБРАТЬ
	|	СписокМаршрутныхЛистов.Ссылка,
	|	СписокМаршрутныхЛистов.Номер,
	|	СписокМаршрутныхЛистов.Дата,
	|	СписокМаршрутныхЛистов.РабочийЦентр
	|ИЗ
	|	СписокМаршрутныхЛистов КАК СписокМаршрутныхЛистов
	|ГДЕ
	|	СписокМаршрутныхЛистов.НачалоПлан <= &ТекущаяДата
	|	И СписокМаршрутныхЛистов.ОкончаниеПлан >= &ТекущаяДата";
	
	Запрос.УстановитьПараметр("ТекущаяДата", Параметры.ДатаКонтроля);
	
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Параметры.ДатаКонтроля));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(Параметры.ДатаКонтроля));
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели(Параметры.ДатаКонтроля));
	Запрос.УстановитьПараметр("КонецНедели", КонецНедели(Параметры.ДатаКонтроля));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Параметры.ДатаКонтроля));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Параметры.ДатаКонтроля));
	
	Запрос.УстановитьПараметр("СписокРабочихЦентров", Параметры.ОтборРабочийЦентр);
	Запрос.УстановитьПараметр("НеИспользоватьСписокРабочихЦентров", Параметры.ОтборРабочийЦентр.Количество() = 0);
	
	Результат = Запрос.ВыполнитьПакет();
	ДанныеОРаботеРЦ = Результат[1].Выгрузить();
	МЛВработе = Результат[2].Выгрузить();

	СостояниеРаботыРЦ = Новый Структура;
	СостояниеРаботыРЦ.Вставить("ДанныеОРаботеРЦ", ДанныеОРаботеРЦ);
	СостояниеРаботыРЦ.Вставить("МЛВработе", МЛВработе);
	
	Возврат СостояниеРаботыРЦ;
	
КонецФункции

Процедура ПодготовитьРасписание(Параметры, Результат, СтруктураДействий)

	Если НЕ СтруктураДействий.Свойство("ПодготовитьРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист КАК МаршрутныйЛист,
	|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Номер КАК Номер,
	|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Дата КАК Дата,
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	РасписаниеРаботыРабочихЦентров.Начало,
	|	РасписаниеРаботыРабочихЦентров.Окончание
	|ИЗ
	|	РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|ГДЕ
	|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Проведен
	|	И (НЕ &ИспользоватьОтборПоПодразделению
	|			ИЛИ РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Подразделение В ИЕРАРХИИ (&Подразделение))
	|	И (НЕ &ИспользоватьОтборРабочийЦентр
	|			ИЛИ РасписаниеРаботыРабочихЦентров.РабочийЦентр В (&РабочийЦентр)
	|			ИЛИ РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра В (&РабочийЦентр))
	|	И (&НеИспользоватьПериод
	|				И ВЫБОР
	|					КОГДА (РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|							ИЛИ РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День))
	|							И РасписаниеРаботыРабочихЦентров.ДатаИнтервала >= &НачалоДня
	|						ТОГДА ИСТИНА
	|					КОГДА РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|							И РасписаниеРаботыРабочихЦентров.ДатаИнтервала >= &НачалоНедели
	|						ТОГДА ИСТИНА
	|					КОГДА РасписаниеРаботыРабочихЦентров.МаршрутныйЛист.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|							И РасписаниеРаботыРабочихЦентров.ДатаИнтервала >= &НачалоМесяца
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|			ИЛИ НЕ &НеИспользоватьПериод
	|				И РасписаниеРаботыРабочихЦентров.Начало <= &ОкончаниеПериода
	|				И РасписаниеРаботыРабочихЦентров.Окончание >= &НачалоПериода)";
	
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Параметры.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Подразделение", Параметры.ОтборПодразделение);
	Запрос.УстановитьПараметр("РабочийЦентр", Параметры.ОтборРабочийЦентр);
	
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Параметры.ДатаКонтроля));
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели(Параметры.ДатаКонтроля));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Параметры.ДатаКонтроля));
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПодразделению", НЕ Параметры.ОтборПодразделение.Пустая());
	Запрос.УстановитьПараметр("ИспользоватьОтборРабочийЦентр",  Параметры.ОтборРабочийЦентр.Количество() <> 0);
	Запрос.УстановитьПараметр("НеИспользоватьПериод",  Параметры.НачалоПериода = '000101010000');
	
	ТаблицаРасписание = Запрос.Выполнить().Выгрузить();

	Результат.Вставить("Расписание", ТаблицаРасписание);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СостояниеРаботы(НачалоПлан, ОкончаниеПлан, ОкончаниеФакт, ДатаКонтроля) Экспорт

	СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.ПустаяСсылка();
	СостояниеРаботыСтрокой = "";
	
	СостояниеРаботы = Новый Структура("СостояниеРаботыСтрокой,СостояниеРаботы", СостояниеРаботыСтрокой, СтатусРаботыКлючевогоРЦ);
	
	Если ОкончаниеПлан = '000101010000' ИЛИ НачалоПлан = '000101010000' Тогда
		Возврат СостояниеРаботы;
	КонецЕсли;
	
	Если ОкончаниеФакт = '000101010000' Тогда
		
		Если КонецМинуты(ОкончаниеПлан) < КонецМинуты(ДатаКонтроля) Тогда
			СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.Отставание;
			ОтклонениеОтВремениВыполнения = КонецМинуты(ОкончаниеПлан) - КонецМинуты(ДатаКонтроля);
		ИначеЕсли КонецМинуты(НачалоПлан) > КонецМинуты(ДатаКонтроля) Тогда
			СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.СтартуетЧерез;
			ОтклонениеОтВремениВыполнения = КонецМинуты(НачалоПлан) - КонецМинуты(ДатаКонтроля);
		Иначе
			СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.ВРаботе;
			ОтклонениеОтВремениВыполнения = КонецМинуты(ДатаКонтроля) - КонецМинуты(НачалоПлан);
		КонецЕсли; 
		
	Иначе
		
		ОтклонениеОтВремениВыполнения = КонецМинуты(ОкончаниеПлан) - КонецМинуты(ОкончаниеФакт);
		Если ОтклонениеОтВремениВыполнения > 0 Тогда
			СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.Опережение;
		ИначеЕсли ОтклонениеОтВремениВыполнения < 0 Тогда
			СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.ЗавершенаСОтставанием;
		Иначе
			СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.БезОтклонений;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ОтклонениеОтВремениВыполнения < 0 Тогда
		ОтклонениеОтВремениВыполнения = -ОтклонениеОтВремениВыполнения;
	КонецЕсли; 
	
	Если ОтклонениеОтВремениВыполнения < 3600 Тогда
		ОтклонениеОтВремениВыполнения = Окр(ОтклонениеОтВремениВыполнения / 60);
		ОтклонениеОтВремениВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Минута;
	ИначеЕсли ОтклонениеОтВремениВыполнения < 86400 Тогда
		ОтклонениеОтВремениВыполнения = Окр(ОтклонениеОтВремениВыполнения / 3600);
		ОтклонениеОтВремениВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Час;
	Иначе
		ОтклонениеОтВремениВыполнения = Окр(ОтклонениеОтВремениВыполнения / 86400);
		ОтклонениеОтВремениВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.День;
	КонецЕсли; 
	
	Если СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.Отставание
		ИЛИ СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.Опережение
		ИЛИ СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.ЗавершенаСОтставанием
		ИЛИ СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.СтартуетЧерез
		ИЛИ СтатусРаботыКлючевогоРЦ = Перечисления.СтатусыРаботыРабочихЦентров.ВРаботе Тогда
		
		СостояниеРаботыСтрокой = Строка(СтатусРаботыКлючевогоРЦ)
										+ " " + Формат(ОтклонениеОтВремениВыполнения, "ЧН=0; ЧГ=0") 
										+ " " + ОтклонениеОтВремениВыполненияЕдИзм;
												
	ИначеЕсли НЕ СтатусРаботыКлючевогоРЦ.Пустая() Тогда
		СостояниеРаботыСтрокой = Строка(СтатусРаботыКлючевогоРЦ);
	КонецЕсли; 

	СостояниеРаботы.СостояниеРаботыСтрокой = СостояниеРаботыСтрокой;
	СостояниеРаботы.СостояниеРаботы = СтатусРаботыКлючевогоРЦ;
	
	Возврат СостояниеРаботы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21