#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем МенеджерРасчетаЗарплаты Экспорт;

Перем МенеджерВременныхТаблиц;
Перем МесяцНачисления;
Перем МесяцыРасчета;
Перем ПериодРасчета;
Перем Организация;
Перем ГоловнаяОрганизация;
Перем ВременныйРегистратор;

Перем Зарплата Экспорт;
Перем ЗарплатаМесяца;

Перем ИсключаемыйРегистратор Экспорт;
Перем ВызыватьИсключение Экспорт;

Перем ИсправленныйДокумент Экспорт;

Перем НастройкиРасчета Экспорт;
Перем НастройкиНачислений Экспорт;

Перем НастройкиПересчета;

Перем ДополнительныеСвойства Экспорт;

Перем Начисления Экспорт;
Перем Взносы;
Перем РасчетРезервов;
Перем ОценочныеОбязательстваПоСотрудникам;
Перем ОценочныеОбязательства;

Перем ФильтрПолученияПериодическихДанныхСотрудников;
Перем ТаблицаПолученияПериодическихДанныхСотрудников;

Перем КэшКадроваяИсторияИнтервалы;

Перем КэшПлановыеНачисленияРезервов;

Перем ПодразделенияСУчетомИерархииОтбор;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнициализацияОбъекта

// Инициализация менеджера расчета зарплаты.
// Предназначен для служебного использования.
// Потребителям вместо него рекомендуется использовать РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета.
//
// Параметры
//	ПериодРасчета - тип СтандартныйПериод, период начисления зарплаты.
//	ОрганизацияПараметр - тип СправочникСсылка.Организации.
//
Процедура Инициализировать(ПериодРасчетаПараметр, ОрганизацияПараметр) Экспорт
	
	ПериодРасчета = ПериодРасчетаПараметр;
	МесяцНачисления = НачалоМесяца(ПериодРасчета.ДатаОкончания);
	МесяцыРасчета.Добавить(МесяцНачисления);
	Пока МесяцНачисления > ПериодРасчета.ДатаНачала Цикл
		МесяцНачисления = НачалоМесяца(МесяцНачисления - 1);
		МесяцыРасчета.Вставить(0, МесяцНачисления);
	КонецЦикла;
	
	Организация = ОрганизацияПараметр; 
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	НастройкиУчета = Новый Структура(
		"ИспользоватьТерриторииУсловияТруда,
		|ИспользоватьТерритории,
		|ИспользоватьСтатьиФинансирования");
	НастройкиУчета.ИспользоватьТерриторииУсловияТруда = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
	НастройкиУчета.ИспользоватьТерритории = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация);
	НастройкиУчета.ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	Зарплата = Новый Структура(
		"Начисления,
		|Взносы,
		|РасчетРезервов,
		|ОценочныеОбязательстваПоСотрудникам,
		|ОценочныеОбязательства");
		
	НастройкиРасчета = Новый Структура(
		"РассчитыватьНачисления,
		|РассчитыватьВзносы, 
		|СохранятьИсправления,
		|Сотрудники, 
		|ФизическиеЛица,
		|РасчетРезервов,
		|НастройкаРезервов");
	
	НастройкиНачислений = Новый Структура(
		"РассчитыватьНачисления");
	
	НастройкиУдержаний = Новый Структура(
		"РассчитыватьТолькоПоТекущемуДокументу");
	
	УстановитьНастройкиРасчетаПоУмолчанию();
	
	Зарплата.Начисления                          = ТаблицаНачислений();
	Зарплата.Взносы                              = ТаблицаВзносы();
	Зарплата.РасчетРезервов                      = ТаблицаРасчетРезервов();
	Зарплата.ОценочныеОбязательстваПоСотрудникам = ТаблицаОценочныеОбязательстваПоСотрудникам();
	Зарплата.ОценочныеОбязательства              = ТаблицаОценочныеОбязательства();
	
	ЗарплатаМесяца = ОбщегоНазначения.СкопироватьРекурсивно(Зарплата);
	
	НастройкиПересчета = Новый Структура(
		"ИсточникИзменений,
		|ВыполнятьПересчет,
		|СоответствиеСтрокНачислений,
		|ФизическиеЛицаРасчетаВзносов");
	НастройкиПересчета.ИсточникИзменений = ТаблицаИсточниковИзменений();
	НастройкиПересчета.ВыполнятьПересчет = Ложь;
	НастройкиПересчета.СоответствиеСтрокНачислений = Новый Соответствие;
	НастройкиПересчета.ФизическиеЛицаРасчетаВзносов = Новый Массив;
	
КонецПроцедуры

// Возвращает структуру НастройкиРасчета, определяющую поведение менеджера расчета, в положение по умолчанию.
//
Процедура УстановитьНастройкиРасчетаПоУмолчанию() Экспорт
		
	НастройкиРасчета.РассчитыватьНачисления = Истина;
	НастройкиРасчета.РассчитыватьВзносы = Истина;
	НастройкиРасчета.РасчетРезервов = Истина;
	НастройкиРасчета.НастройкаРезервов = Неопределено;
	НастройкиРасчета.СохранятьИсправления = Ложь;
	НастройкиРасчета.Сотрудники = Неопределено;
	НастройкиРасчета.ФизическиеЛица = Неопределено;
	
	НастройкиНачислений.РассчитыватьНачисления = Истина;
	
КонецПроцедуры

// Устанавливает менеджер временных таблиц, в том случае если необходимо работать с уже существующими временными таблицами.
//
// Параметры
//	МенеджерВременныхТаблицПараметр - тип МенеджерВременныхТаблиц.
//
Процедура УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблицПараметр) Экспорт
	МенеджерВременныхТаблиц = МенеджерВременныхТаблицПараметр;
КонецПроцедуры

#КонецОбласти

#Область ПересчетРезервов

// Применяется при пересчете резервов в документе после интерактивного изменения пользователем одной или нескольких коллекций.
// Используется для указания причины пересчета.
//
// Параметры:
//	- ИмяКоллекции - Строка, название измененной коллекции, используется один из ключей объекта Зарплата.
//	- ФизическоеЛицо - СправочникСсылка.ФизическиеЛица, физическое лицо, данные которого были изменены.
//	- Сотрудник - СправочникСсылка.Сотрудники (необязательный), сотрудник, данные которого были изменены,
//		Для коллекций, где используется сотрудник обязательный.
//	- ВидРасчета - СправочникСсылка.ВидыРасчетовРезервовПоОплатеТруда (необязательный).
//
Процедура ДобавитьИсточникИзменений(ИмяКоллекции, ФизическоеЛицо, Сотрудник = Неопределено, ВидРасчетаРезерва = Неопределено) Экспорт
	
	ИсточникИзменений = НастройкиПересчета.ИсточникИзменений.Добавить();
	ИсточникИзменений.ИмяКоллекции = ИмяКоллекции;
	ИсточникИзменений.Сотрудник = Сотрудник;
	ИсточникИзменений.ФизическоеЛицо = ФизическоеЛицо;
	ИсточникИзменений.ВидРасчетаРезерва = ВидРасчетаРезерва;
	
	ПроверитьИсточникИзменений(ИсточникИзменений);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеСтрок

// Заполняет требуемые сведения для расчета в строках начислений.
// Перечень заполняемых сведений
// - ПериодРегистрацииВремени,
// - ПериодДействия,
// - ГрафикРаботы,
// - ВремяВЧасах,
// - ВремяВЦеломЗаПериод,
// - Организация,
// - Подразделение,
// - Должность,
// - ДолжностьПоШтатномуРасписанию,
// - Категория,
// - Базовый период.
//
// Параметры
//	Начисления - таблица значений, см. ТаблицаНачислений,
//	Требования - структура, см. ТребованияЗаполненияСведенийНачисленийДляРасчета.
//
Процедура ЗаполнитьСведенияНачисленийДляРасчета(ТаблицаНачислений, Требования = Неопределено) Экспорт
	МенеджерРасчетаЗарплаты.ЗаполнитьСведенияНачисленийДляРасчета(ТаблицаНачислений, Требования);
КонецПроцедуры

#КонецОбласти

#Область КонструкторыКоллекций

// Конструктор таблицы сотрудников, используется для заполнения параметров других методов.
//
Функция ТаблицаСотрудников() Экспорт
	
	Возврат МенеджерРасчетаЗарплаты.ТаблицаСотрудников();
	
КонецФункции

// Конструктор структуры отборов, используется для заполнения параметров других методов.
//
Функция СоздатьОтборы() Экспорт
	
	Отбор = Новый Структура(
		"Организация, Подразделение, Резерв");
		
	Возврат Отбор;
	
КонецФункции

// Конструктор таблицы исходных данных начислений, используется для заполнения параметров других методов.
//
Функция ТаблицаИсходныеДанныеНачисленияЗарплатыПоНачислениям() Экспорт
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("РассчитыватьПоРазовымНачислениямДокумента", Новый ОписаниеТипов("Булево")); 
	Начисления.Колонки.Добавить("РегистраторРазовогоНачисления", Метаданные.ОпределяемыеТипы.РегистраторРазовогоНачисления.Тип);
	
	Начисления.Колонки.Добавить("ИзвестныеПоказатели", Новый ОписаниеТипов("ТаблицаЗначений"));

	Возврат Начисления;
	
КонецФункции

// Конструктор таблицы начислений, используется для заполнения параметров других методов.
//
Функция ТаблицаНачислений() Экспорт
		
	Возврат Обработки.МенеджерРасчетаРезервовПоОплатеТруда.ТаблицаНачислений();
	
КонецФункции

// Конструктор строки таблицы начислений коллекции типа Зарплата.Начисления.
//
Функция СтрокаТаблицыНачислений() Экспорт
	Возврат Обработки.МенеджерРасчетаРезервовПоОплатеТруда.СтрокаТаблицыНачислений(Зарплата.Начисления);
КонецФункции

// Конструктор таблицы показателей, используемой в коллекциях Зарплата.Начисления, Зарплата.Удержания.
//
Функция ТаблицаПоказателей() Экспорт
		
	Возврат Обработки.МенеджерРасчетаРезервовПоОплатеТруда.ТаблицаПоказателей();
	
КонецФункции

// Конструктор таблицы взносы, используемой в коллекциях Зарплата.Взносы.
//
Функция ТаблицаВзносы() Экспорт
		
	Возврат Обработки.МенеджерРасчетаРезервовПоОплатеТруда.ТаблицаВзносы();
	
КонецФункции

// Конструктор таблицы расчета резервов, используемой в коллекциях Зарплата.РасчетРезервов.
//
Функция ТаблицаРасчетРезервов() Экспорт
	
	Возврат Обработки.МенеджерРасчетаРезервовПоОплатеТруда.ТаблицаРасчетРезервов();
	
КонецФункции

// Конструктор таблицы резервов по сотрудникам, используемой в коллекциях Зарплата.ТаблицаОценочныеОбязательстваПоСотрудникам.
//
Функция ТаблицаОценочныеОбязательстваПоСотрудникам() Экспорт
	
	Возврат Обработки.МенеджерРасчетаРезервовПоОплатеТруда.ТаблицаОценочныеОбязательстваПоСотрудникам();
	
КонецФункции

// Конструктор сводной таблицы резервов, используемой в коллекциях Зарплата.ТаблицаОценочныеОбязательства.
//
Функция ТаблицаОценочныеОбязательства() Экспорт
	
	Возврат Обработки.МенеджерРасчетаРезервовПоОплатеТруда.ТаблицаОценочныеОбязательства();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВычеркиваниеСтрокНачислений

Процедура ВычеркнутьНеСоответствующиеКадровомуОтбору(СотрудникиПериоды, Отбор)
	ИнтервалыКадровойИстории = КадроваяИстория();
	МенеджерРасчетаЗарплаты.ВычеркнутьНеСоответствующиеКадровомуОтбору(СотрудникиПериоды, Отбор);
КонецПроцедуры

#КонецОбласти

#Область ЗначенияПоказателей

#Область ЗначенияПоказателейНачислений

#Область РасчетНачислений

#Область ПересчетРезервов

Процедура ПроверитьИсточникИзменений(ИсточникИзменений)
	
	Если Не Зарплата.Свойство(ИсточникИзменений.ИмяКоллекции) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Указано несуществующее имя коллекции (%1) в таблице источников изменений.';
				|en = 'Non-existing name of collection (%1) is specified in the change source table.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СотрудникОбязателен = Новый Массив;
	СотрудникОбязателен.Добавить("Начисления");
	Если СотрудникОбязателен.Найти(ИсточникИзменений.ИмяКоллекции) <> Неопределено 
		И Не ЗначениеЗаполнено(ИсточникИзменений.Сотрудник) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен сотрудник в таблице источников изменений. 
                  |Для коллекции %1 заполнение сотрудника является обязательным.';
                  |en = 'Employee is not populated in the change source table.
                  |Employee is required for the %1 collection.'"), 
			ИсточникИзменений.ИмяКоллекции);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбъединениеСохранениемИсправлений

Процедура ОбъединитьНачисления(Начисления)
	
	ПоляКлюча = 
		"Сотрудник,
		|Начисление,
		|ДокументОснование, 
		|ПериодДействия";
		
	ПоляФиксЗаполнение = 
		"Организация,
		|Подразделение,
		|ГрафикРаботы,
		|ГрафикРаботыНорма,
		|ВремяВЦеломЗаПериод,
		|ОбщийГрафик,
		|ПериодРегистрацииВремени,
		|ВремяВЧасах,
		|Категория,
		|Показатели";
	
	ПризнакиИсправления = Новый Массив;
	ПризнакиИсправления.Добавить("ФиксРасчет");
	ПризнакиИсправления.Добавить("ФиксЗаполнение");
	ПризнакиИсправления.Добавить("ФиксСтрока");
	ПризнакиИсправления.Добавить("ФиксРасчетВремени");
		
	ОбъединитьТаблицыСохраняяИсправления(Начисления, Зарплата.Начисления, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение);
	
	МенеджерРасчетаЗарплаты.Зарплата.Начисления = Зарплата.Начисления;
	
КонецПроцедуры

Процедура ОбъединитьТаблицыСохраняяИсправления(ТаблицаИсточник, ТаблицаПриемник, ПризнакиИсправления, ПоляКлюча, ПоляФиксЗаполнение = Неопределено, ПроверятьФиксЗаполнение = Истина)
	
	ИмяЗамера = "НачислениеЗарплаты.ОбъединениеКоллекцийССохранениемИсправлений";
	Замер = НачатьЗамерВремени();
	
	Если ТаблицаПриемник.Количество() = 0 Тогда
		// Нет исправлений.
		ТаблицаПриемник = ТаблицаИсточник;
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиРасчета.СохранятьИсправления Тогда
		// Не сохраняем исправления.
		ТаблицаПриемник = ТаблицаИсточник;
		Возврат;
	КонецЕсли;
	
	СочетанияОбъединения = ТаблицаПриемник.Скопировать(, ПоляКлюча);
	СочетанияОбъединения.Свернуть(ПоляКлюча);
	
	ОтборСтрок = Новый Структура(ПоляКлюча);
	Для Каждого Сочетание Из СочетанияОбъединения Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
		СтрокиПриемника = ТаблицаПриемник.НайтиСтроки(ОтборСтрок);
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(ОтборСтрок);
		ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, ПоляФиксЗаполнение, ПроверятьФиксЗаполнение);
	КонецЦикла;
	
	ТаблицаПриемник = ТаблицаИсточник;
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура ЗаменитьИсправленныеСтроки(СтрокиПриемника, СтрокиИсточника, ТаблицаИсточник, ПризнакиИсправления, ПоляФиксЗаполнение = Неопределено, ПроверятьФиксЗаполнение = Истина)
	
	УдалитьСтрокиПриемника = Новый Массив;
	ЕстьИсправленныеСтроки = Ложь;
	Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
		Если СтрокаИсправлена(СтрокаПриемника, ПризнакиИсправления) Тогда
			ЕстьИсправленныеСтроки = Истина;
		КонецЕсли;
		Если СтрокиИсточника.Количество() = 0 Тогда 
			// Если в учете уже нет строк с таким ключом, удаляем их, если они только не были добавлены вручную (ФиксСтрока).
			Если Не СтрокаПриемника.ФиксСтрока Тогда
				УдалитьСтрокиПриемника.Добавить(СтрокаПриемника);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПоляФиксЗаполнение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Если строки есть, и в них 
		//	- зафиксировано заполнение - оставляем как есть,
		//	- не зафиксировано заполнение - пытаемся совместить и обновляем заполнение.
		Если ПроверятьФиксЗаполнение И СтрокаПриемника.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
			Если СтрокаИсточника.ДатаНачала = СтрокаПриемника.ДатаНачала Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника, ПоляФиксЗаполнение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьИсправленныеСтроки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из УдалитьСтрокиПриемника Цикл
		ИндексСтроки = СтрокиПриемника.Найти(Строка);
		СтрокиПриемника.Удалить(ИндексСтроки);
	КонецЦикла;
	Для Каждого Строка Из СтрокиИсточника Цикл
		ТаблицаИсточник.Удалить(Строка);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПриемника, ТаблицаИсточник);
	
КонецПроцедуры

Функция СтрокаИсправлена(Строка, ПризнакиИсправления)
	
	Для Каждого Признак Из ПризнакиИсправления Цикл
		Если Строка[Признак] = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьИдентификаторСтроки(ТаблицаСтрокКРасчету)
	
	ИдентификаторСтроки = 1;
	Для Каждого Строка Из ТаблицаСтрокКРасчету Цикл
		Строка.ИдентификаторСтроки = ИдентификаторСтроки;
		Если Строка.Показатели.Количество() > 0 Тогда
			Строка.Показатели.ЗаполнитьЗначения(ИдентификаторСтроки, "ИдентификаторСтроки");
		КонецЕсли;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СервисныеМетодыМенеджераРасчета

Функция ТаблицаИсточниковИзменений()
	
	ТаблицаИсточников = Новый ТаблицаЗначений;
	ТаблицаИсточников.Колонки.Добавить("ИмяКоллекции", Новый ОписаниеТипов("Строка"));
	ТаблицаИсточников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаИсточников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаИсточников.Колонки.Добавить("ВидРасчетаРезерва", Новый ОписаниеТипов("СправочникСсылка.ВидыРасчетовРезервовПоОплатеТруда"));
	
	Возврат ТаблицаИсточников;
	
КонецФункции

#Область ОценкаПроизводительности

Функция ИспользоватьТехнологическиеЗамерыВремени()
	Возврат Ложь;
КонецФункции

Функция НачатьЗамерВремени()
	
	Если Не ИспользоватьТехнологическиеЗамерыВремени() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Возврат Замер;

КонецФункции

Процедура ЗакончитьЗамерВремени(ИмяЗамера, Замер)
	
	Если Не ИспользоватьТехнологическиеЗамерыВремени() Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический(ИмяЗамера, Замер);

КонецПроцедуры

#КонецОбласти

#Область РаботаСЗапросами

Функция НовыйЗапрос()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПолучениеДанныхСотрудников

Процедура УстановитьТаблицуНачисления(ТаблицаНачисления) Экспорт 
	
	УдалитьНекорректныеЗначенияРасчета(ТаблицаНачисления);
	Если Начисления <> Неопределено Тогда
		УдалитьНекорректныеЗначенияРасчета(Начисления);
	КонецЕсли;
	
	Если Не ФильтрПолученияПериодическихДанныхСотрудниковАктуален(ТаблицаНачисления) Тогда
		ТаблицаСотрудников = ТаблицаНачисления.Скопировать(, "Сотрудник, ДатаНачала, ДатаОкончания");
		ТаблицаСотрудников.Свернуть("Сотрудник, ДатаНачала, ДатаОкончания");
		УстановитьТаблицуФильтрСотрудников(ТаблицаСотрудников)	
	КонецЕсли;
	
	Если Начисления = Неопределено Тогда
		Начисления = ТаблицаНачисления;
		ВидыРасчетаНачислений = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление", Истина);
		ВидыРасчетаНачислений = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВидыРасчетаНачислений);
		Возврат;
	КонецЕсли;
	
	ВидыРасчетаНовые = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ТаблицаНачисления.ВыгрузитьКолонку("Начисление"));
	
	Для Каждого НовыйВидРасчета Из ВидыРасчетаНовые Цикл
		Если ВидыРасчетаНачислений = Неопределено
			Или ВидыРасчетаНачислений[НовыйВидРасчета.Ключ] = Неопределено Тогда
			ВидыРасчетаНачислений = ВидыРасчетаНовые;
			Начисления = ТаблицаНачисления;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Начисления = ТаблицаНачисления;
	
КонецПроцедуры

Процедура УстановитьТаблицуВзносы(ТаблицаВзносы) Экспорт 
	
	УдалитьНекорректныеЗначенияВзносов(ТаблицаВзносы);
	Если Взносы <> Неопределено Тогда
		УдалитьНекорректныеЗначенияВзносов(Взносы);
	КонецЕсли;
	Если Взносы = Неопределено Тогда
		Взносы = ТаблицаВзносы;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНекорректныеЗначенияРасчета(ТаблицаРасчета)
	
	Для Каждого СтрокаТаблицы Из ТаблицаРасчета Цикл
		СтрокаТаблицы.Результат   = Макс(0, СтрокаТаблицы.Результат);
		СтрокаТаблицы.РезультатНУ = Макс(0, СтрокаТаблицы.РезультатНУ);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНекорректныеЗначенияВзносов(ТаблицаВзносов)
	
	Для Каждого СтрокаТаблицы Из ТаблицаВзносов Цикл
		СтрокаТаблицы.СуммаСтраховыхВзносов      = Макс(0, СтрокаТаблицы.СуммаСтраховыхВзносов);
		СтрокаТаблицы.СуммаСтраховыхВзносовНУ    = Макс(0, СтрокаТаблицы.СуммаСтраховыхВзносовНУ);
		СтрокаТаблицы.СуммаФССНесчастныеСлучаи   = Макс(0, СтрокаТаблицы.СуммаФССНесчастныеСлучаи);
		СтрокаТаблицы.СуммаФССНесчастныеСлучаиНУ = Макс(0, СтрокаТаблицы.СуммаФССНесчастныеСлучаиНУ);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьТаблицуРасчетРезервов(ТаблицаРасчетРезервов) Экспорт 
	
	Если РасчетРезервов = Неопределено Тогда
		РасчетРезервов = ТаблицаРасчетРезервов;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТаблицуОценочныеОбязательстваПоСотрудникам(ТаблицаОценочныеОбязательстваПоСотрудникам) Экспорт 
	
	Если ОценочныеОбязательстваПоСотрудникам = Неопределено Тогда
		ОценочныеОбязательстваПоСотрудникам = ТаблицаОценочныеОбязательстваПоСотрудникам;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТаблицуОценочныеОбязательства(ТаблицаОценочныеОбязательства) Экспорт 
	
	Если ОценочныеОбязательства = Неопределено Тогда
		ОценочныеОбязательства = ТаблицаОценочныеОбязательства;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТаблицуФильтрСотрудников(ИсточникДанныхФильтра, Замещать = Истина)
	Если Не ФильтрПолученияПериодическихДанныхСотрудниковАктуален(ИсточникДанныхФильтра) Тогда
		КэшКадроваяИсторияИнтервалы = Неопределено;
		КэшУсловияОплатыПособий = Неопределено;
		
		Если Замещать Или
			ТаблицаПолученияПериодическихДанныхСотрудников = Неопределено Тогда
			ТаблицаПолученияПериодическихДанныхСотрудников = ТаблицаФильтрСотрудников(ИсточникДанныхФильтра, "Сотрудник");
		Иначе
			ТаблицаИсточник = ТаблицаФильтрСотрудников(ИсточникДанныхФильтра, "Сотрудник");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПолученияПериодическихДанныхСотрудников);
			ТаблицаПолученияПериодическихДанныхСотрудников.Свернуть("Сотрудник, Месяц, ДатаНачала, ДатаОкончания");
		КонецЕсли;	
							
		ФильтрПолученияПериодическихДанныхСотрудников = Неопределено;
	КонецЕсли;	
КонецПроцедуры	

Функция ТаблицаФильтрСотрудников(ИсточникДанных, ИмяПоляСотрудник)
	ИсточникДанных.Сортировать(ИмяПоляСотрудник + ", ДатаНачала, ДатаОкончания", Новый СравнениеЗначений);
	
	ТаблицаСотрудников = НовыйТаблицаФильтрПоСотрудникам();
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	ТекущийСотрудник = Неопределено;
	ТекущийМесяц = Неопределено;
	ТекущаяСтрокаЗаМесяц = Неопределено;
	Для Каждого СтрокаТаблицыСотрудников Из ИсточникДанных Цикл
		Если ТекущийСотрудник <> СтрокаТаблицыСотрудников[ИмяПоляСотрудник] Тогда
			ТекущийСотрудник = СтрокаТаблицыСотрудников[ИмяПоляСотрудник];
			ТекущийМесяц = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
			ТекущаяСтрокаЗаМесяц = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗаМесяц, СтрокаТаблицыСотрудников);
			ТекущаяСтрокаЗаМесяц.Месяц = ТекущийМесяц;
			ТекущаяСтрокаЗаМесяц.ДатаНачала = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);   
			ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
		ИначеЕсли ТекущийМесяц <> НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала) Тогда 	
			ТекущийМесяц = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
			ТекущаяСтрокаЗаМесяц = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗаМесяц, СтрокаТаблицыСотрудников);
			ТекущаяСтрокаЗаМесяц.Месяц = ТекущийМесяц;
			ТекущаяСтрокаЗаМесяц.ДатаНачала = НачалоМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
			ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(СтрокаТаблицыСотрудников.ДатаНачала);
		КонецЕсли;
		
		Если НачалоМесяца(ТекущаяСтрокаЗаМесяц.ДатаНачала) < НачалоМесяца(СтрокаТаблицыСотрудников.ДатаОкончания) Тогда
			ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(ТекущаяСтрокаЗаМесяц.ДатаНачала);
			
			Пока ТекущийМесяц < НачалоМесяца(СтрокаТаблицыСотрудников.ДатаОкончания) Цикл
				ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
				ТекущаяСтрокаЗаМесяц = ТаблицаСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗаМесяц, СтрокаТаблицыСотрудников);
				ТекущаяСтрокаЗаМесяц.ДатаНачала = ТекущийМесяц;
				ТекущаяСтрокаЗаМесяц.Месяц = ТекущийМесяц;	
				ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(ТекущийМесяц);
			КонецЦикла;
		КонецЕсли;	
		
		ТекущаяСтрокаЗаМесяц.ДатаОкончания = КонецМесяца(Макс(ТекущаяСтрокаЗаМесяц.ДатаОкончания, СтрокаТаблицыСотрудников.ДатаОкончания));	
	КонецЦикла;
	
	Возврат ТаблицаСотрудников;
КонецФункции

Процедура ДополнитьТаблицуСотрудниковДаннымиФизическихЛиц(ТаблицаСотрудников)
	Если ТаблицаСотрудников.Колонки.Найти("ФизическоеЛицо") <> Неопределено
		И ТаблицаСотрудников.Колонки.Найти("ГоловнаяОрганизация") <> Неопределено Тогда
		
		Возврат;
	КонецЕсли;	
	
	ОтборСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник");
	
	Запрос = НовыйЗапрос();
	Запрос.УстановитьПараметр("ОтборСотрудников", ОтборСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОтборСотрудников)";
	
	УстановитьПривилегированныйРежим(Истина);
	ФизическиеЛицаСотрудников = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ФизическиеЛицаСотрудников, "Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	
	Для Каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		Отбор.Сотрудник = СтрокаТаблицыСотрудников.Сотрудник;
		
		СтрокиТаблицыФизическихЛицСотрудников = ФизическиеЛицаСотрудников.НайтиСтроки(Отбор);
		Если СтрокиТаблицыФизическихЛицСотрудников.Количество() > 0 Тогда
			СтрокаТаблицыСотрудников.ФизическоеЛицо = СтрокиТаблицыФизическихЛицСотрудников[0].ФизическоеЛицо;
			СтрокаТаблицыСотрудников.ГоловнаяОрганизация = СтрокиТаблицыФизическихЛицСотрудников[0].ГоловнаяОрганизация;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция КадроваяИстория() Экспорт
	
	Если КэшКадроваяИсторияИнтервалы <> Неопределено Тогда
		Возврат КэшКадроваяИсторияИнтервалы;
	КонецЕсли;	
	
	МенеджерРасчетаЗарплаты.ТаблицаПолученияПериодическихДанныхСотрудников = ТаблицаПолученияПериодическихДанныхСотрудников;
	МенеджерРасчетаЗарплаты.ФильтрПолученияПериодическихДанныхСотрудников = ФильтрПолученияПериодическихДанныхСотрудников;
	КэшКадроваяИсторияИнтервалы = МенеджерРасчетаЗарплаты.КадроваяИстория();
	
	Возврат КэшКадроваяИсторияИнтервалы;
КонецФункции

Функция НовыйТаблицаФильтрПоСотрудникам()
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтр.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФильтр.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаФильтр;
КонецФункции

#КонецОбласти

#Область ПолучениеНабораЗаписейНачислений

Функция СтрокиНачисленийПоИдентификаторам()
	СтрокиНачисленийПоИдентификаторам = Новый Соответствие;
	
	Для Каждого СтрокаТаблицыНачислений Из Начисления Цикл
		СтрокиНачисленийПоИдентификаторам.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений)
	КонецЦикла;
	
	Возврат СтрокиНачисленийПоИдентификаторам;
КонецФункции

#КонецОбласти

#Область НовыеСервисныеМетоды

Функция ФильтрПолученияПериодическихДанныхСотрудниковАктуален(ТаблицаНачислений)
	Если ТаблицаПолученияПериодическихДанныхСотрудников = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаПолученияПериодическихДанныхСотрудников, "Сотрудник, Месяц");
	СтруктураПоиска = Новый Структура("Сотрудник, Месяц");
	
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		СтруктураПоиска.Сотрудник = СтрокаНачислений.Сотрудник;
		ТекущийМесяц = НачалоМесяца(СтрокаНачислений.ДатаНачала);
		
		Пока ТекущийМесяц <= НачалоМесяца(СтрокаНачислений.ДатаОкончания) Цикл
			СтруктураПоиска.Месяц = ТекущийМесяц;
		
			СтрокиФильтра = ТаблицаПолученияПериодическихДанныхСотрудников.НайтиСтроки(СтруктураПоиска);
			Если СтрокиФильтра.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат Истина;	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьРезервыПоОплатеТруда(ТаблицаСотрудников, Отборы = Неопределено) Экспорт
	
	Начисления = НачисленияРезервов(ТаблицаСотрудников, Отборы);
	
	ОбъединитьНачисления(Начисления);
	
КонецПроцедуры

Функция НачисленияРезервов(ТаблицаСотрудников, Знач Отборы = Неопределено)
	
	ИмяЗамера = "НачислениеЗарплаты.ВыявлениеРезервов";
	Замер = НачатьЗамерВремени();
	
	Начисления = ТаблицаНачислений();
	
	ТаблицаПериодовПолученияДанных = ТаблицаСотрудников;
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат Начисления;
	КонецЕсли;
	
	Если ТаблицаПериодовПолученияДанных.Количество() = 0 Тогда
		Возврат Начисления;
	КонецЕсли;
	
	Если Отборы = Неопределено
		Или Отборы.Свойство("Резерв") = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных резерва.';
								|en = 'The filter of payroll fund data receipt is not initialized.'") ;
	КонецЕсли;
	
	УстановитьТаблицуФильтрСотрудников(ТаблицаПериодовПолученияДанных);
	ДополнитьТаблицуСотрудниковДаннымиФизическихЛиц(ТаблицаСотрудников);
	
	Если (Не НастройкиРасчета.НастройкаРезервов.НормативныйМетодБУ
		Или НастройкиРасчета.НастройкаРезервов.Инвентаризация)
		И Не НастройкиРасчета.НастройкаРезервов.Списание
		И Не НастройкиРасчета.НастройкаРезервов.Корректировка Тогда
		ЗаполнитьВыявленнымиРезервами(ТаблицаСотрудников, Начисления, Отборы);
	Иначе
		ЗаполнитьСотрудникамиКРасчету(ТаблицаСотрудников, Начисления, Отборы, НастройкиРасчета.НастройкаРезервов);
	КонецЕсли;
	
	Если Не НастройкиРасчета.НастройкаРезервов.Списание
		И Не НастройкиРасчета.НастройкаРезервов.Корректировка Тогда
		
		РезервыПоОплатеТруда.ВычеркнутьПериодыРанееВыполненныхНачисленийРезервов(ТаблицаСотрудников, Начисления, НастройкиРасчета.НастройкаРезервов);
		
		МенеджерРасчетаЗарплаты.Начисления = Начисления;
		МенеджерРасчетаЗарплаты.ЗаполнитьСведенияНачисленийДляРасчетаСлужебный();
		
		// Удалим строки с начислениями, которых не может быть в документе
		ВычеркнутьСтрокиПоВладельцуВидаРасчетаРезерва(Отборы);
		
		// Заполним показателями, которые относятся исключительно к резервам
		ЗаполнитьЗначенияПоказателейНачислений(Начисления, Отборы);
		
		// Дополняем данными фонда оплаты труда и данными норматива
		ЗаполнитьПоказателиРасчетаДляНормативногоМетода();
		
	КонецЕсли;
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат Начисления;
	
КонецФункции

Процедура ЗаполнитьВыявленнымиРезервами(ТаблицаСотрудников, Начисления, Отборы = Неопределено)
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Начисления, "Сотрудник, Начисление, ДокументОснование, ПериодДействия");
	
	Если Отборы = Неопределено
		Или Отборы.Свойство("Резерв") = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных резерва.';
								|en = 'The filter of payroll fund data receipt is not initialized.'") ;
	КонецЕсли;
	
	Отборы.Вставить("Организация", Организация);
	
	ВычеркнутьНеСоответствующиеКадровомуОтбору(ТаблицаСотрудников, Отборы);
	
	ТаблицаСотрудников.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ЗаполнитьПризнакиПримененияНачисленийРезервов(ТаблицаСотрудников);
	
	ДобавитьПлановыеНачисленияРезервов(ТаблицаСотрудников, Отборы);
	
КонецПроцедуры

Процедура ЗаполнитьСотрудникамиКРасчету(ТаблицаСотрудников, Начисления, Отборы = Неопределено, НастройкаРезервов)
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Начисления, "Сотрудник");
	
	Если Отборы = Неопределено
		Или Отборы.Свойство("Резерв") = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных резерва.';
								|en = 'The filter of payroll fund data receipt is not initialized.'") ;
	КонецЕсли;
	
	Отборы.Вставить("Организация", Организация);
	
	ВычеркнутьНеСоответствующиеКадровомуОтбору(ТаблицаСотрудников, Отборы);
	
	ТаблицаСотрудников.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ЗаполнитьПризнакиПримененияНачисленийРезервов(ТаблицаСотрудников);
	
	Если Не НастройкаРезервов.Списание И Не НастройкаРезервов.Корректировка Тогда
		ДобавитьПлановыеНачисленияРезервов(ТаблицаСотрудников, Отборы);
	Иначе
		ДобавитьСведенияОСотрудниках(ТаблицаСотрудников, Отборы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВычеркнутьСтрокиПоВладельцуВидаРасчетаРезерва(Отборы)
	
	ПлановыеНачисленияРезервов = ПлановыеНачисленияРезервов(Отборы);
	
	МассивСтрокКУдалению = Новый Массив;
	
	ОтборСтрок = Новый Структура("НазначениеПоказателя");
	
	// Для позиции штатного расписания
	МассивСтрокНачисленийДляПозицииШтатногоРасписания = Новый Массив;
	ОтборСтрок.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПозицииШтатногоРасписания;
	МассивСтрок = ПлановыеНачисленияРезервов.НайтиСтроки(ОтборСтрок);
	ОтборНачислений = Новый Структура("ДолжностьПоШтатномуРасписанию, ВидРасчетаРезерва");
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ОтборНачислений.ДолжностьПоШтатномуРасписанию = СтрокаМассива.ВладелецВидаРасчета;
		ОтборНачислений.ВидРасчетаРезерва             = СтрокаМассива.ВидРасчетаРезерва;
		МассивСтрокНачислений = Начисления.НайтиСтроки(ОтборНачислений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокНачисленийДляПозицииШтатногоРасписания, МассивСтрокНачислений);
	КонецЦикла;
	ОтборВидовРасчета = Новый Структура("ВидРасчетаРезерва");
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ОтборВидовРасчета.ВидРасчетаРезерва = СтрокаМассива.ВидРасчетаРезерва;
		МассивСтрокНачислений = Начисления.НайтиСтроки(ОтборВидовРасчета);
		Для Каждого СтрокаМассиваНачислений Из МассивСтрокНачислений Цикл
			Если МассивСтрокНачисленийДляПозицииШтатногоРасписания.Найти(СтрокаМассиваНачислений) = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаМассиваНачислений);
			КонецЕсли;
		КонецЦикла
	КонецЦикла;
	
	// Для подразделения
	МассивСтрокНачисленийДляПодразделения = Новый Массив;
	ОтборСтрок.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПодразделения;
	МассивСтрок = ПлановыеНачисленияРезервов.НайтиСтроки(ОтборСтрок);
	ОтборНачислений = Новый Структура("Подразделение, ВидРасчетаРезерва");
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ОтборНачислений.Подразделение     = СтрокаМассива.ВладелецВидаРасчета;
		ОтборНачислений.ВидРасчетаРезерва = СтрокаМассива.ВидРасчетаРезерва;
		МассивСтрокНачислений = Начисления.НайтиСтроки(ОтборНачислений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокНачисленийДляПодразделения, МассивСтрокНачислений);
	КонецЦикла;
	ОтборВидовРасчета = Новый Структура("ВидРасчетаРезерва");
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ОтборВидовРасчета.ВидРасчетаРезерва = СтрокаМассива.ВидРасчетаРезерва;
		МассивСтрокНачислений = Начисления.НайтиСтроки(ОтборВидовРасчета);
		Для Каждого СтрокаМассиваНачислений Из МассивСтрокНачислений Цикл
			Если МассивСтрокНачисленийДляПодразделения.Найти(СтрокаМассиваНачислений) = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаМассиваНачислений);
			КонецЕсли;
		КонецЦикла
	КонецЦикла;
	
	// Для организации
	МассивСтрокНачисленийДляОрганизации = Новый Массив;
	ОтборСтрок.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации;
	МассивСтрок = ПлановыеНачисленияРезервов.НайтиСтроки(ОтборСтрок);
	ОтборНачислений = Новый Структура("ВидРасчетаРезерва");
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		ОтборНачислений.ВидРасчетаРезерва = СтрокаМассива.ВидРасчетаРезерва;
		МассивСтрокНачислений = Начисления.НайтиСтроки(ОтборНачислений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокНачисленийДляОрганизации, МассивСтрокНачислений);
	КонецЦикла;
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаМассива Из МассивСтрокНачисленийДляПозицииШтатногоРасписания Цикл
		Если МассивСотрудников.Найти(СтрокаМассива.Сотрудник) <> Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаМассива);
		Иначе
			МассивСотрудников.Добавить(СтрокаМассива.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСотрудников);
	
	Для Каждого СтрокаМассива Из МассивСтрокНачисленийДляПодразделения Цикл
		Если МассивСотрудников.Найти(СтрокаМассива.Сотрудник) <> Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаМассива);
		Иначе
			МассивСотрудников.Добавить(СтрокаМассива.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из МассивСтрокНачисленийДляОрганизации Цикл
		Если МассивСотрудников.Найти(СтрокаМассива.Сотрудник) <> Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	МассивСтрокКУдалению = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтрокКУдалению);
	
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл 
		Начисления.Удалить(СтрокаМассива)
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейНачислений(Начисления, Отборы) Экспорт
	УстановитьТаблицуНачисления(Начисления);
	ЗаполнитьЗначенияПоказателейНачисленийСлужебный(Отборы);
КонецПроцедуры

Процедура ДобавитьПлановыеНачисленияРезервов(СотрудникиПериоды, Отборы)
	
	ПараметрыТекущегоРезерва   = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ПараметрыРасчетаРезерва(Отборы.Организация, Отборы.Резерв, МесяцНачисления);
	ПлановыеНачисленияРезервов = ПлановыеНачисленияРезервов(Отборы);
	
	НачисленияСотрудников = НовыйТаблицаДобавляемыхНачислений();
	
	НастройкаРезерва = РезервыПоОплатеТруда.НастройкаРезервов(Отборы.Организация, Отборы.Резерв, МесяцНачисления);
	ЭтоРезервОтпусков = НастройкаРезерва.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	ВидРасчетаОсновнойОтпуск = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
	
	Если ЭтоРезервОтпусков Тогда
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		Для Каждого СтрокаПоСотруднику Из СотрудникиПериоды Цикл 
			НоваяСтрока = ИзмеренияДаты.Добавить();
			НоваяСтрока.Сотрудник = СтрокаПоСотруднику.Сотрудник;
			НоваяСтрока.Период = НачалоМесяца(МесяцНачисления);
			НоваяСтрока = ИзмеренияДаты.Добавить();
			НоваяСтрока.Сотрудник = СтрокаПоСотруднику.Сотрудник;
			НоваяСтрока.Период = КонецМесяца(МесяцНачисления);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ОстаткиОтпусков.СоздатьВТПоложенныеВидыЕжегодныхОтпусков(Запрос.МенеджерВременныхТаблиц, ИзмеренияДаты, , Ложь);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
			|	ПраваНаОтпуска.Используется КАК Используется
			|ИЗ
			|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПраваНаОтпуска";
		
		ТаблицаПраваНаОтпуск = Запрос.Выполнить().Выгрузить();
		
		МассивСотрудников = Новый Массив;
		МассивВидовОтпусков = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаПраваНаОтпуск Цикл
			Если Не СтрокаТаблицы.Используется Тогда
				МассивСотрудников.Добавить(СтрокаТаблицы.Сотрудник);
				МассивВидовОтпусков.Добавить(СтрокаТаблицы.ВидЕжегодногоОтпуска);
			КонецЕсли;
		КонецЦикла;
		МассивСотрудников   = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСотрудников);
		МассивВидовОтпусков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВидовОтпусков);
		
		ОстаткиОтмененныхВидовОтпусков = Новый ТаблицаЗначений;
		Если МассивСотрудников.Количество() <> 0 И МассивВидовОтпусков.Количество() <> 0 Тогда
			ПараметрыОстатков = ОстаткиОтпусков.ОписаниеПараметровДляОстаткиОтпусков();
			ПараметрыОстатков.Сотрудники   = МассивСотрудников;
			ПараметрыОстатков.ВидыОтпусков = МассивВидовОтпусков;
			ПараметрыОстатков.ДатаОстатков = КонецМесяца(МесяцНачисления);
			ОстаткиОтмененныхВидовОтпусков = ОстаткиОтпусков.ОстаткиОтпусков(ПараметрыОстатков);
			ОстаткиОтмененныхВидовОтпусков.Свернуть("Сотрудник, ВидОтпуска", "Дни");
			ОстаткиОтмененныхВидовОтпусков.Колонки.ВидОтпуска.Имя = "ВидЕжегодногоОтпуска";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаПоСотруднику Из СотрудникиПериоды Цикл
		Для Каждого СтрокаТаблицыПоказателей Из ПлановыеНачисленияРезервов Цикл
			
			ДобавитьПоказатель = Истина;
			Если ЭтоРезервОтпусков И ЗначениеЗаполнено(СтрокаТаблицыПоказателей.ВидОтпуска) Тогда
				СтруктурОтбора = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СтрокаПоСотруднику.Сотрудник, СтрокаТаблицыПоказателей.ВидОтпуска);
				ПраваНаОтпускСотрудника = ТаблицаПраваНаОтпуск.НайтиСтроки(СтруктурОтбора);
				Если ПраваНаОтпускСотрудника.Количество() = 0 Тогда
					ДобавитьПоказатель = Ложь;
				Иначе
					Если Не ПраваНаОтпускСотрудника[0].Используется Тогда
						Если ЗначениеЗаполнено(ОстаткиОтмененныхВидовОтпусков) Тогда
							ДобавитьПоказатель = ОстаткиОтмененныхВидовОтпусков.НайтиСтроки(СтруктурОтбора).Количество() <> 0;
						Иначе
							ДобавитьПоказатель = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
			Если ДобавитьПоказатель Тогда
				СтрокаДобавляемыхНачислений = НачисленияСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаПоСотруднику);
				ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаТаблицыПоказателей);
				СтрокаДобавляемыхНачислений.Используется = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	НачисленияСотрудников.Сортировать("Сотрудник, Начисление, ДатаНачала", Новый СравнениеЗначений);
	
	МенеджерРасчетаЗарплаты.Начисления = Начисления;
	МенеджерРасчетаЗарплаты.ТаблицаПолученияПериодическихДанныхСотрудников = ТаблицаПолученияПериодическихДанныхСотрудников;
	МенеджерРасчетаЗарплаты.ФильтрПолученияПериодическихДанныхСотрудников = ФильтрПолученияПериодическихДанныхСотрудников;
	МенеджерРасчетаЗарплаты.ДобавитьНачисленияСотрудников(СотрудникиПериоды, НачисленияСотрудников, "ПлановыеНачисления");
	Начисления = МенеджерРасчетаЗарплаты.Начисления;
	
КонецПроцедуры

Процедура ДобавитьСведенияОСотрудниках(СотрудникиПериоды, Отборы)
	
	Для Каждого СтрокаПоСотруднику Из СотрудникиПериоды Цикл
		СтрокаДобавляемыхНачислений = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДобавляемыхНачислений, СтрокаПоСотруднику);
	КонецЦикла;
	Начисления.Сортировать("Сотрудник", Новый СравнениеЗначений);
	
	МенеджерРасчетаЗарплаты.Начисления = Начисления;
	Начисления = МенеджерРасчетаЗарплаты.Начисления;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПримененияНачисленийРезервов(СотрудникиПериоды)
	СотрудникиПериоды.Колонки.Добавить("ПрименятьПлановыеНачислений", Новый ОписаниеТипов("Булево"));
	СотрудникиПериоды.ЗаполнитьЗначения(Истина, "ПрименятьПлановыеНачислений");
КонецПроцедуры	

Функция ПлановыеНачисленияРезервов(Отборы)
	
	Если Отборы = Неопределено
		Или Отборы.Свойство("Резерв") = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован фильтр получения данных резерва.';
								|en = 'The filter of payroll fund data receipt is not initialized.'") ;
	КонецЕсли;
	
	Если КэшПлановыеНачисленияРезервов <> Неопределено Тогда
		Возврат КэшПлановыеНачисленияРезервов;
	КонецЕсли;
	
	КэшПлановыеНачисленияРезервов = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ПлановыеНачисленияРезервов(Отборы.Организация, Отборы.Резерв, МесяцНачисления);
	
	
	Возврат КэшПлановыеНачисленияРезервов;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоказателейНачисленийСлужебный(Отборы)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерРасчетаЗарплаты.Начисления = Начисления;
	МенеджерРасчетаЗарплаты.ТаблицаПолученияПериодическихДанныхСотрудников = ТаблицаПолученияПериодическихДанныхСотрудников;
	МенеджерРасчетаЗарплаты.ФильтрПолученияПериодическихДанныхСотрудников = ФильтрПолученияПериодическихДанныхСотрудников;
	МенеджерРасчетаЗарплаты.ЗаполнитьЗначенияПоказателейНачисленийСлужебный();
	
	ЗаполнитьИдентификаторСтроки(Начисления);
	СтрокиНачисленийПоИдентификаторам = СтрокиНачисленийПоИдентификаторам();
	
	ПоказателиСотрудников = МенеджерРасчетаЗарплаты.ПоказателиСотрудников();
	ЗаполнитьЗначенияПоказателейПоНастройкеНачисленийРезервов(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам, Отборы);
	
КонецПроцедуры

Функция НовыйТаблицаДобавляемыхНачислений()
	ТаблицаДобавляемыхНачислений = Новый ТаблицаЗначений;
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("Сотрудник");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("ДатаНачала");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("ДатаОкончания");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("Начисление");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("ВидРасчетаРезерва");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("ВидРасчета");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("Используется");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("Организация");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("ГоловнаяОрганизация");
	ТаблицаДобавляемыхНачислений.Колонки.Добавить("ФизическоеЛицо");
	
	Возврат ТаблицаДобавляемыхНачислений;
КонецФункции

Процедура ЗаполнитьЗначенияПоказателейПоНастройкеНачисленийРезервов(ПоказателиСотрудников, СтрокиНачисленийПоИдентификаторам, Отборы)
	
	Если НастройкиРасчета.НастройкаРезервов.Инвентаризация Тогда
		// В этом режиме показатели должны быть введены осознанно
		Возврат;
	КонецЕсли;
	
	ЗначенияПоказателейПоНастройке = РезервыПоОплатеТрудаРасширенный.ЗначенияПоказателейПоНастройке(Отборы.Организация, Отборы.Резерв, МесяцНачисления);
	Если ЗначенияПоказателейПоНастройке.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сначала обработем показатели расчета резервов
	ЗаполняемыеПоказатели = ПоказателиСотрудников.ДополнительныеПоказатели;
	Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
		
		Для ВладелецВидаРасчета = 1 По 3 Цикл
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ВидРасчетаРезерва", СтрокаПоказателя.Начисление);
			Если ВладелецВидаРасчета = 1 Тогда
				СтруктураПоиска.Вставить("ВладелецВидаРасчета", СтрокаПоказателя.ДолжностьПоШтатномуРасписанию);
			ИначеЕсли ВладелецВидаРасчета = 2 Тогда
				СтруктураПоиска.Вставить("ВладелецВидаРасчета", СтрокаПоказателя.Подразделение);
			Иначе
				СтруктураПоиска.Вставить("ВладелецВидаРасчета", СтрокаПоказателя.Организация);
			КонецЕсли;
			НайденныеЗначения = ЗначенияПоказателейПоНастройке.НайтиСтроки(СтруктураПоиска);
			Если НайденныеЗначения.Количество() > 0 Тогда
				Показатель = НайденныеЗначения[0].Показатель;
				Значение   = НайденныеЗначения[0].Значение;
				СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
				МенеджерРасчетаЗарплаты.ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, Показатель, Значение, Истина);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Для прочих показателей возможна ситуация, когда они заданы в других таблицах
	// Заполним их только при условии, что они пустые
	
	МассивТиповВладельцев = Новый Массив;
	МассивТиповВладельцев.Добавить("ДолжностьПоШтатномуРасписанию");
	МассивТиповВладельцев.Добавить("Подразделение");
	МассивТиповВладельцев.Добавить("Организация");
	
	Для Каждого ЗначениеТипа Из МассивТиповВладельцев Цикл
		
		КадроваяИстория = КадроваяИстория();
		
		МассивТаблицЗаполняемыхПоказателей = Новый Массив;
		Если ЗначениеТипа = "ДолжностьПоШтатномуРасписанию" Тогда
			МассивТаблицЗаполняемыхПоказателей.Добавить(ПоказателиСотрудников.РазовыеПоказателиСотрудников);
			МассивТаблицЗаполняемыхПоказателей.Добавить(ПоказателиСотрудников.ПериодическиеПоказателиСотрудников);
		ИначеЕсли ЗначениеТипа = "Подразделение" Тогда
			МассивТаблицЗаполняемыхПоказателей.Добавить(ПоказателиСотрудников.РазовыеПоказателиПодразделений);
			МассивТаблицЗаполняемыхПоказателей.Добавить(ПоказателиСотрудников.ПериодическиеПоказателиПодразделений);
		Иначе
			МассивТаблицЗаполняемыхПоказателей.Добавить(ПоказателиСотрудников.РазовыеПоказателиОрганизаций);
			МассивТаблицЗаполняемыхПоказателей.Добавить(ПоказателиСотрудников.ПериодическиеПоказателиОрганизаций);
		КонецЕсли;
		Для Каждого ЗаполняемыеПоказатели Из МассивТаблицЗаполняемыхПоказателей Цикл
			Для Каждого СтрокаПоказателя Из ЗаполняемыеПоказатели Цикл
				Если ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				ВладелецВидаРасчета = Неопределено;
				
				Если ЗначениеТипа = "ДолжностьПоШтатномуРасписанию" Тогда
					ОтборКадровойИстории = Новый Структура();
					ОтборКадровойИстории.Вставить("Сотрудник",     СтрокаПоказателя.Сотрудник);
					ОтборКадровойИстории.Вставить("Подразделение", СтрокаПоказателя.Подразделение);
					ОтборКадровойИстории.Вставить("Организация",   СтрокаПоказателя.Организация);
					СтрокиКадровойИстории = КадроваяИстория.НайтиСтроки(ОтборКадровойИстории);
					Если СтрокиКадровойИстории.Количество() > 0 Тогда
						ВладелецВидаРасчета = СтрокиКадровойИстории[0][ЗначениеТипа];
					КонецЕсли;
				Иначе
					ВладелецВидаРасчета = СтрокаПоказателя[ЗначениеТипа] 
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВладелецВидаРасчета) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Показатель",          СтрокаПоказателя.Показатель);
				СтруктураПоиска.Вставить("ВладелецВидаРасчета", ВладелецВидаРасчета);
				НайденныеЗначения = ЗначенияПоказателейПоНастройке.НайтиСтроки(СтруктураПоиска);
				Если НайденныеЗначения.Количество() > 0 Тогда
					Показатель = НайденныеЗначения[0].Показатель;
					Значение   = НайденныеЗначения[0].Значение;
					СтрокаНачисления = СтрокиНачисленийПоИдентификаторам[СтрокаПоказателя.ИдентификаторСтроки];
					МенеджерРасчетаЗарплаты.ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаНачисления, Показатель, Значение, Истина);
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиРасчетаДляНормативногоМетода() Экспорт
	
	РезервыПоОплатеТруда.ЗаполнитьПоказателиРасчетаДляНормативногоМетода(Начисления, НастройкиРасчета.НастройкаРезервов);
	
КонецПроцедуры

#Область РассчетРезервов

Процедура РассчитатьРезервы() Экспорт
	
	РассчитатьРезервыСлужебный();
	
КонецПроцедуры

Процедура РассчитатьРезервыСлужебный()
	
	ИмяЗамера = "НачислениеЗарплаты.РасчетРезервов";
	Замер = НачатьЗамерВремени();
	
	РассчитатьРезерв();
	Зарплата.Начисления = Начисления;
	
	РассчитатьСтраховыеВзносы();
	Зарплата.Взносы = Взносы;
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	
КонецПроцедуры

Процедура РассчитатьРезерв()
	
	Если Не НастройкиРасчета.РассчитыватьНачисления Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТаблицуНачисления(Зарплата.Начисления);
	УстановитьТаблицуВзносы(Зарплата.Взносы);
	УстановитьТаблицуРасчетРезервов(Зарплата.РасчетРезервов);
	
	РезервыПоОплатеТруда.ДополнитьТаблицуРасчетаКадровымСостоянием(Начисления, Организация, МесяцНачисления);
	
	Если НастройкиРасчета.НастройкаРезервов.НормативныйМетодБУ
		И Не НастройкиРасчета.НастройкаРезервов.Инвентаризация Тогда
		РезервыПоОплатеТруда.РассчитатьРезервыНормативнымМетодом(Начисления, НастройкиРасчета.НастройкаРезервов);
	КонецЕсли;
	
	Если НастройкиРасчета.НастройкаРезервов.ФормироватьРезервНУ Тогда
		РезервыПоОплатеТруда.РассчитатьРезервыВНалоговомУчете(Начисления, НастройкиРасчета.НастройкаРезервов);
	КонецЕсли;
	
	РезервыПоОплатеТруда.СкорректироватьРасчетСУчетомКадровыхСостояний(Начисления);
	
КонецПроцедуры

Процедура РассчитатьСтраховыеВзносы()
	
	Если Не НастройкиРасчета.РассчитыватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТаблицуНачисления(Зарплата.Начисления);
	
	УстановитьТаблицуВзносы(Зарплата.Взносы);
	
	РезервыПоОплатеТруда.РассчитатьСтраховыеВзносы(Начисления, Взносы, НастройкиРасчета.НастройкаРезервов);
	
	Зарплата.Вставить("Взносы", Взносы);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
МесяцНачисления = Дата(1, 1, 1);
МесяцыРасчета = Новый Массив;
ПериодРасчета = Новый СтандартныйПериод;
Организация = Справочники.Организации.ПустаяСсылка();
ВременныйРегистратор = Документы.НачислениеЗарплаты.ПолучитьСсылку();
ВызыватьИсключение = Истина;

ВидыРасчетаНачислений = Новый Соответствие;

ДополнительныеСвойства = Новый Структура;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли

