#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет расчет пооперационного расписания производства.
//
// Параметры:
//  ПараметрыРасчета - см. ПараметрыРасчетаПооперационногоРасписания
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище, по которому надо поместить
//                                                     результаты расчета расписания.
//
Процедура РассчитатьРасписание(ПараметрыРасчета, АдресХранилища) Экспорт
	
	КлючеваяОперация = "ПооперационноеПланирование.ФормированиеПооперационногоРасписания";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	РезультатыРасчета = РассчитатьРасписаниеВнутриЗамераВремени(ПараметрыРасчета);
	ПоместитьВоВременноеХранилище(РезультатыРасчета, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, РезультатыРасчета.КоличествоДанных);
	
КонецПроцедуры

// Выполняет расчет пооперационного расписания в соответствии с параметрами конкретной модели планирования.
//
// Параметры:
//  ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
//  АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, в которое будет помещен результат работы метода.
//
Процедура РассчитатьРасписаниеМоделиВФоновомРежиме(ПараметрыПланирования, АдресХранилища) Экспорт
	
	РассчитатьРасписаниеМодели(ПараметрыПланирования);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультатыФоновогоРасчета(ПараметрыПланирования), АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Функция-конструктор параметров расчета расписания. Параметры расчета содержат всю исходную
//	 и промежуточную информацию, используемую в процессе расчета расписания, а так же результаты расчета.
// 
// Возвращаемое значение:
// 	Структура - параметры расчета расписания:
// * ТекущийПользователь - СправочникСсылка.Пользователи -
// * НомерСеанса - Число -
// * НачалоСеанса - Дата -
// * ЭтапыПроизводства - СписокЗначений -
// * Распоряжения - СписокЗначений -
// * Подразделение - СправочникСсылка.СтруктураПредприятия -
// * ОперативныйРасчет - Булево -
// * ВремяНаРегистрациюВыполнения - Число -
// * МоделиПланирования - ТаблицаЗначений -
// * ГоризонтПланирования - Число -
// * МоментПланирования - Дата -
Функция ПараметрыРасчетаПооперационногоРасписания() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МоментПланирования", '00010101');
	Результат.Вставить("ГоризонтПланирования", 0);
	Результат.Вставить("МоделиПланирования", Новый ТаблицаЗначений);
	Результат.Вставить("ВремяНаРегистрациюВыполнения", 0);
	Результат.Вставить("ОперативныйРасчет", Ложь);
	
	Результат.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Результат.Вставить("Распоряжения", Новый СписокЗначений);
	Результат.Вставить("ЭтапыПроизводства", Новый СписокЗначений);
	
	Результат.Вставить("НачалоСеанса", '00010101');
	Результат.Вставить("НомерСеанса", 0);
	Результат.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Возврат Результат;
	
КонецФункции

// Инициирует запись рассчитанного пооперационного расписания в БД.
//
// Параметры:
//  ПараметрыЗадания - Структура - содержит реквизиты идентифицирующие множество операций,
//		составляющих записываемого расписания. Элементы структуры:
//		* МодельРасписания - УникальныйИдентификатор - ключ рассчитанного и записываемого расписания.
//		* МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования - модель расписания,
//			данные которой необходимо записать.
//  АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, в которое будет помещен результат работы метода.
//
Процедура ЗаписатьРасписаниеВФоновомРежиме(Знач ПараметрыЗадания, АдресХранилища) Экспорт
	
	МодельРасписания = ПараметрыЗадания.МодельРасписания;
	МодельПланирования = ПараметрыЗадания.МодельПланирования;
	
	ЗаписьВыполнена = Ложь;
	РегистрыСведений.ПооперационноеРасписание2_2.ЗаписатьРасписание(МодельРасписания, МодельПланирования, ЗаписьВыполнена);
	ПоместитьВоВременноеХранилище(ЗаписьВыполнена, АдресХранилища);
	
КонецПроцедуры

// Выполняет расчет пооперационного расписания в соответствии с параметрами моделей планирования.
//		основана на процедуре РассчитатьРасписаниеМоделиВФоновомРежиме.
//
// Параметры:
//  ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
//	РезультатыРасчета - Массив - содержит уникальные идентификаторы - адреса временных хранилищ,
//		в которые будет помещен результат работы метода.
//
Процедура РассчитатьРасписаниеМоделейВФоновомРежиме(ПараметрыПланирования, РезультатыРасчета) Экспорт

	КоличествоХранилищ = РезультатыРасчета.Количество();
	ИндексХранилища = 0;
	Для Каждого МодельПланирования Из ПараметрыПланирования.ПараметрыМоделейПланирования Цикл
		
		ЗаполнитьПараметрыПланированияПоДаннымМоделиПланирования(ПараметрыПланирования, МодельПланирования);
		
		РассчитатьРасписаниеМодели(ПараметрыПланирования);
		
		Если ИндексХранилища < КоличествоХранилищ И ЭтоАдресВременногоХранилища(РезультатыРасчета[ИндексХранилища]) Тогда
			ПоместитьВоВременноеХранилище(РезультатыФоновогоРасчета(ПараметрыПланирования), РезультатыРасчета[ИндексХранилища]);
		КонецЕсли;
		
		ИндексХранилища = ИндексХранилища + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьРасписаниеВнутриЗамераВремени(ПараметрыРасчета)
	
	ПараметрыПланирования = ИнициализироватьПараметрыПланирования();
	ЗаполнитьЗначенияСвойств(ПараметрыПланирования, ПараметрыРасчета);
	
	Отказ = Ложь;
	ЗаполнитьПараметрыПланирования(ПараметрыПланирования, Отказ);
	
	Если Не Отказ Тогда
		
		РассчитатьРасписаниеМоделейПланирования(ПараметрыПланирования);
		
	КонецЕсли;
	
	ЗаполнитьРезультатыРасчета(ПараметрыПланирования);
	
	Возврат ПараметрыПланирования.РезультатыРасчета;
	
КонецФункции

#Область СтадииПланирования

Процедура РассчитатьРасписаниеМоделейПланирования(ПараметрыПланирования)
	
	Файловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	НесколькоМоделей = (ПараметрыПланирования.ПараметрыМоделейПланирования.Количество()>1);
	РасчетВФоновомРежиме = Не Файловая И НесколькоМоделей;
	
	Если РасчетВФоновомРежиме Тогда
		
		РезультатыРасчета = Новый Массив;
		ИмяМетодаЗадания = "ОперативныйУчетПроизводстваПриПланированииСервер.РассчитатьРасписаниеМоделейВФоновомРежиме";
		НаименованиеЗадания = НСтр("ru = 'Расчет расписания по моделям планирования';
									|en = 'Timetable calculation by planning models'");
		Для Каждого МодельПланирования Из ПараметрыПланирования.ПараметрыМоделейПланирования Цикл
			
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
			РезультатыРасчета.Добавить(АдресХранилища);
			
		КонецЦикла;
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ПараметрыПланирования);
		ПараметрыМетода.Добавить(РезультатыРасчета);
		
		Задание = ФоновыеЗадания.Выполнить(ИмяМетодаЗадания, ПараметрыМетода,, НаименованиеЗадания);	
		
		ОжидатьЗавершенияФоновыхЗаданий(ИмяМетодаЗадания, НаименованиеЗадания);
		ПрочитатьРезультатыФоновогоРасчета(ПараметрыПланирования, РезультатыРасчета);
		
	Иначе
		
		Если НесколькоМоделей Тогда
			ПерезаполняемыеПараметры = ПерезаполняемыеПараметрыПланирования(ПараметрыПланирования);
		Иначе
			ПерезаполняемыеПараметры = Неопределено;
		КонецЕсли;
		ПерезаполнитьПараметры = Ложь;
		
		Для Каждого МодельПланирования Из ПараметрыПланирования.ПараметрыМоделейПланирования Цикл
			
			Если ПерезаполнитьПараметры Тогда
				ПерезаполнитьПараметрыПланирования(ПараметрыПланирования, ПерезаполняемыеПараметры);
			Иначе
				ПерезаполнитьПараметры = Истина;
			КонецЕсли;
			
			ЗаполнитьПараметрыПланированияПоДаннымМоделиПланирования(ПараметрыПланирования, МодельПланирования);
			
			РассчитатьРасписаниеМодели(ПараметрыПланирования);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьРасписаниеМодели(ПараметрыПланирования)
	
	ОбработатьПредшествующиеНедоступныеОперацииПоИсключению(ПараметрыПланирования);
	РазместитьФиксированныеПартииОпераций(ПараметрыПланирования);
	
	Для Каждого Приоритет Из ПараметрыПланирования.ПриоритетыЭтапов Цикл
		
		РассчитатьРасписаниеПартииЭтапов(ПараметрыПланирования, Приоритет);
		
	КонецЦикла;
	
	ЗаписатьРезультатыРасчетаМодели(ПараметрыПланирования);
	
КонецПроцедуры

Процедура РассчитатьРасписаниеПартииЭтапов(ПараметрыПланирования, Знач ПриоритетЭтапа)
	
	Пока Истина Цикл
		
		ОперацииОбработаны = Ложь;
		
		Для Каждого Ранг Из ПараметрыПланирования.РангиРабочихЦентров Цикл
			
			Операции = ОперацииТактаПланирования(ПараметрыПланирования, Ранг.ВидРабочегоЦентра, ПриоритетЭтапа);
			
			Если ЗначениеЗаполнено(Операции) Тогда
				
				ВыполнитьТактПланированияОпераций(ПараметрыПланирования, Операции, Ранг.ВидРабочегоЦентра);
				
				ОперацииОбработаны = Истина;
				Прервать;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ОперацииОбработаны Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПеренестиМежоперационныеПереходыВРасписание(ПараметрыПланирования);
	
КонецПроцедуры

Процедура ВыполнитьТактПланированияОпераций(ПараметрыПланирования, Операции, Знач ВидРабочегоЦентра)
	
	ВариантыРасписания = ИнициализироватьВариантыРасписания(ПараметрыПланирования, Операции);
	
	Для Каждого ВариантРасписания Из ВариантыРасписания Цикл
		
		ВыполнитьПланированиеВариантаРасписания(ПараметрыПланирования, ВариантРасписания, ВидРабочегоЦентра);
		
	КонецЦикла;
	
	ЛучшийВариант = ЛучшийВариантРасписания(ПараметрыПланирования, ВариантыРасписания);
	СохранитьВариантРасписания(ПараметрыПланирования, ЛучшийВариант);
	
КонецПроцедуры

Процедура ВыполнитьПланированиеВариантаРасписания(ПараметрыПланирования, ВариантРасписания, Знач ВидРабочегоЦентра)
	
	ДублироватьПараметрыПланирования(ПараметрыПланирования, ВариантРасписания.Операции, ВидРабочегоЦентра);
	
	ПроверятьФиксированныеНомераПартий = ПараметрыПланирования.НомераПартийОпераций.Количество() > 0;
	
	Для Каждого Операция Из ВариантРасписания.Операции Цикл
		
		ВремяШтучноеВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(Операция.ВремяШтучное, Операция.ВремяШтучноеЕдИзм);
		ВремяПЗВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(Операция.ВремяПЗ, Операция.ВремяПЗЕдИзм);
		
		НомерПартии = 0;
		НеразмещенныеФиксированныеПартии = Новый Массив;
		Если ПроверятьФиксированныеНомераПартий Тогда
			СтруктураПоиска = Новый Структура("Этап, Операция, ИдентификаторОперации");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Операция);
			НайденныеСтроки = ПараметрыПланирования.НомераПартийОпераций.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НомерПартии = НайденныеСтроки[0].НомерПартии;
				Операция.КоличествоРазместить = Операция.КоличествоРазместить - НайденныеСтроки[0].КоличествоНеРазмещать;
			КонецЕсли;
			
			НеразмещенныеФиксированныеПартии = ПараметрыПланирования.НеразмещенныеФиксированныеПартии.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Операция.КоличествоРазместить = 0 Тогда 
			Операция.Размещена = Истина;
			ДочерниеОперации = СвязанныеОперации(ПараметрыПланирования, Операция.Этап, Операция.ИдентификаторОперации, Истина, Истина);
			Для Каждого ДочерняяОперация Из ДочерниеОперации Цикл
				ДочерняяОперация.ЗависитОтПредшествующих = Ложь;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		Если Операция.РазмерПартии = 0 Тогда
			РазмерПартии = Операция.ПередаточнаяПартия;
		ИначеЕсли Операция.ПередаточнаяПартия = 0 Тогда
			РазмерПартии = Операция.РазмерПартии;
		Иначе
			РазмерПартии = Мин(Операция.ПередаточнаяПартия, Операция.РазмерПартии);
		КонецЕсли;
		Если РазмерПартии = 0 Тогда 
			КоличествоПартий = 1;
		Иначе
			КоличествоПартий = Операция.КоличествоРазместить / (РазмерПартии * Операция.коэффициент);
			Если КоличествоПартий > Цел(КоличествоПартий) Тогда
				КоличествоПартий = Цел(КоличествоПартий) + 1;
			КонецЕсли;
		КонецЕсли;
		
		ИндексФиксированных = 0;
		Пока Операция.КоличествоРазместить > 0 Цикл
			
			ПартияОперации = ИнициализироватьПартиюОперации();
			ЗаполнитьЗначенияСвойств(ПартияОперации, Операция,, "Количество, ВремяРазместить");
			
			Если НеразмещенныеФиксированныеПартии.Количество() = 0 
				Или ИндексФиксированных = НеразмещенныеФиксированныеПартии.Количество() Тогда
				НомерПартии = НомерПартии + 1;
				ПартияОперации.НомерПартии = НомерПартии;
				Если КоличествоПартий = 1 Тогда 
					ПартияОперации.Количество = Операция.КоличествоРазместить;
					Операция.РазмерПартии = 0;
				Иначе
					ПартияОперации.ПередаточнаяПартия = Операция.ПередаточнаяПартия;
					ПартияОперации.Количество = Мин(РазмерПартии * Операция.Коэффициент, Операция.КоличествоРазместить);
				КонецЕсли;
			Иначе
				ФиксированнаяПартия = НеразмещенныеФиксированныеПартии[ИндексФиксированных];
				ИндексФиксированных = ИндексФиксированных + 1;
				Если ФиксированнаяПартия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПартияОперации.НомерПартии = ФиксированнаяПартия.НомерПартии;
				ПартияОперации.Количество = ФиксированнаяПартия.Количество;
				ПартияОперации.Создано = ФиксированнаяПартия.Создано;
			КонецЕсли;
				
			Если Операция.ПараллельнаяЗагрузка Тогда 
				ПартияОперации.ВремяРазместить = ВремяШтучноеВСекундах;
			ИначеЕсли ВремяШтучноеВСекундах > 0 Тогда 
				ПартияОперации.ВремяРазместить = ПартияОперации.Количество / Операция.Коэффициент * ВремяШтучноеВСекундах + ВремяПЗВСекундах;
			Иначе
				ПартияОперации.ВремяРазместить = 0;
			КонецЕсли;
			ПартияОперации.ВремяПЗПараллельнаяЗагрузка = ВремяПЗВСекундах;
			Операция.КоличествоРазместить = Операция.КоличествоРазместить - ПартияОперации.Количество;
			ПартияОперации.СтрокаОперации = Операция;
			
			ПроверитьДанныеПредшествующихПартий(Операция, ПартияОперации);
			
			ПараметрыРазмещения = РассчитатьПараметрыРазмещенияОперации(ПараметрыПланирования, ПартияОперации, ВариантРасписания.ПравилоВыбораРЦ, Истина);
			
			НоваяСтрока = ВариантРасписания.Расписание.Добавить();
			НоваяСтрока.Этап = Операция.Этап;
			НоваяСтрока.Операция = Операция;
			НоваяСтрока.ПартияОперации = ПартияОперации;
			НоваяСтрока.ИдентификаторОперации = Операция.ИдентификаторОперации;
			НоваяСтрока.НомерПартии = НомерПартии;
			НоваяСтрока.ПараметрыРазмещения = ПараметрыРазмещения;
			
			Если Не ПараметрыРазмещения = Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыРазмещения);
				ОтразитьРазмещениеОперацииВПараметрахПланирования(ПараметрыПланирования, Операция, ПараметрыРазмещения);
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	ВосстановитьДублированныеПараметрыПланирования(ПараметрыПланирования);

КонецПроцедуры

Процедура СохранитьВариантРасписания(ПараметрыПланирования, Знач ВариантРасписания)
	
	Для Каждого ОперацияРасписания Из ВариантРасписания.Расписание Цикл
		
		Если ЗначениеЗаполнено(ОперацияРасписания.ПараметрыРазмещения) Тогда
			
			РазместитьОперацию(ПараметрыПланирования, ОперацияРасписания.ПартияОперации, ОперацияРасписания.ПараметрыРазмещения, Истина);
			ОперацияРасписания.Операция.Размещена = ОперацияРасписания.ПартияОперации.Размещена;
			
		Иначе
			
			ОбработатьНеразмещеннуюОперацию(ПараметрыПланирования, ОперацияРасписания.Операция, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазместитьОперацию(ПараметрыПланирования, Знач Операция, Знач ПараметрыРазмещения, Знач ПрямоеРазмещение)
	
	НачалоОперации = Неопределено;
	ОкончаниеОперации = Неопределено;
	ДлительностьИнтервала = 0;
	МаксимальныйИндекс = ПараметрыРазмещения.Интервалы.ВГраница();
	Для Индекс = 0 По МаксимальныйИндекс Цикл
		
		ИнтервалРазмещения = ПараметрыРазмещения.Интервалы[Индекс];
		
		ЗаполнитьОбщиеСвойстваРазмещения(ПараметрыПланирования, ПараметрыРазмещения); 
		
		Если Индекс = 0 Тогда 
			НачалоОперации = ИнтервалРазмещения.Начало;
			ОкончаниеОперации = ИнтервалРазмещения.Окончание;
		Иначе
			Если НачалоОперации > ИнтервалРазмещения.Начало Тогда 
				НачалоОперации = ИнтервалРазмещения.Начало;
			КонецЕсли;
			Если ОкончаниеОперации < ИнтервалРазмещения.Окончание Тогда 
				ОкончаниеОперации = ИнтервалРазмещения.Окончание;
			КонецЕсли;			
		КонецЕсли;
		
		ДлительностьИнтервала = ДлительностьИнтервала + ИнтервалРазмещения.ВремяПлан;
		
		Если Индекс = МаксимальныйИндекс Тогда 
			ПараметрыРазмещения.Вставить("ДополнительнаяЗапись", Ложь);
			ПараметрыРазмещения.Вставить("ЛеваяГраница", НачалоОперации);
			ПараметрыРазмещения.Вставить("ПраваяГраница", ОкончаниеОперации);
			ПараметрыРазмещения.Вставить("ДлительностьИнтервала", ДлительностьИнтервала);
		Иначе
			ПараметрыРазмещения.Вставить("ДополнительнаяЗапись", Истина);
			ПараметрыРазмещения.Вставить("ЛеваяГраница", Неопределено);
			ПараметрыРазмещения.Вставить("ПраваяГраница", Неопределено);
			ПараметрыРазмещения.Вставить("ДлительностьИнтервала", 0);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнтервалРазмещения.ВремяПереналадки) Тогда   
			ИнтервалПереналадка = ВыделитьИзИнтервалаВремяПереналадки(ИнтервалРазмещения);  
			ПараметрыРазмещения.Вставить("ЭтоПереналадка", Истина);
			ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалПереналадка);   
			
			Если ИнтервалРазмещения.ВремяПлан > ИнтервалРазмещения.ВремяПереналадки Тогда
				ИнтервалОсновное = ВыделитьИзИнтервалаВремяОсновное(ИнтервалРазмещения);                        
				ПараметрыРазмещения.Вставить("ЭтоПереналадка", Ложь);
				ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалОсновное);   
			КонецЕсли;
		Иначе
			ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалРазмещения);       
		КонецЕсли;
		                                                                                                          
		Если ЗначениеЗаполнено(ПараметрыРазмещения.ВспомогательныеРЦ) Тогда
			РазместитьВспомогательныеОперации(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалРазмещения);  
		КонецЕсли;
		
	КонецЦикла;                                                                                                        
	
	Если Не ПараметрыРазмещения.Свойство("ФиксированнаяПартия") Тогда
		Операция.Размещена = Истина;
		Операция.СтрокаОперации.Размещена = Истина;
	КонецЕсли;	
	
	ОтразитьРазмещениеОперацииВПараметрахПланирования(ПараметрыПланирования, Операция, ПараметрыРазмещения);
	
	Если Операция.ТребуетПовторения = 0 Тогда
		
		ИсправитьДочерниеОперацииПослеРазмещенияРодительской(ПараметрыПланирования, Операция, ПараметрыРазмещения, ПрямоеРазмещение);

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПредшествующиеНедоступныеОперацииПоИсключению(ПараметрыПланирования)
	
	Если Не ПараметрыПланирования.Свойство("ПредшествующиеНедоступныеОперацииПоИсключению") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПредшествующей Из ПараметрыПланирования.ПредшествующиеНедоступныеОперацииПоИсключению Цикл
		ИсправитьДочерниеОперацииПослеРазмещенияРодительской(ПараметрыПланирования, СтрокаПредшествующей, Неопределено, Истина);		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазместитьФиксированныеПартииОпераций(ПараметрыПланирования)
	
	ИнтервалыФиксированныхПартий = ПараметрыПланирования.ИнтервалыФиксированныхПартий;
	Границы = ГраницыПланирования(ПараметрыПланирования);
	
	СтруктураПоискаИнтервалов = Новый Структура("Этап, Операция, ИдентификаторОперации, НомерПартии");
	Для Каждого СтрокаПартии Из ПараметрыПланирования.ФиксированныеПартииОпераций Цикл
		
		ПартияТолькоСоздана = СтрокаПартии.Выполняется + СтрокаПартии.Выполнено + СтрокаПартии.ТребуетПовторения + СтрокаПартии.Пропущено = 0;
		
		Если ПартияТолькоСоздана Тогда
			НеразмещеннаяПартия = ПараметрыПланирования.НеразмещенныеФиксированныеПартии.Добавить();
			ЗаполнитьЗначенияСвойств(НеразмещеннаяПартия, СтрокаПартии);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаИнтервалов, СтрокаПартии);
		СтрокиИнтервалов = ИнтервалыФиксированныхПартий.НайтиСтроки(СтруктураПоискаИнтервалов);
		
		Если СтрокаПартии.Количество = (СтрокаПартии.Выполнено + СтрокаПартии.Пропущено - СтрокаПартии.ТребуетПовторения) Тогда
			
			РазместитьВыполненнуюПартиюВРасписании(ПараметрыПланирования, СтрокаПартии, СтрокиИнтервалов, Границы);
		
		ИначеЕсли СтрокиИнтервалов.Количество() <> 0 Тогда
				
			РазместитьФиксированнуюПартиюВРасписании(ПараметрыПланирования, СтрокаПартии, СтрокиИнтервалов, Границы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПланирования

// Возвращаемое значение:
// 	Структура - Описание:
// * НеразмещенныеФиксированныеПартии - см. ИнициализироватьТаблицуНеразмещенныеФиксированныеПартии
// * НомераПартийОпераций - ТаблицаЗначений -
// * ИнтервалыФиксированныхПартий - ТаблицаЗначений - где:
// ** Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// ** Операция - СправочникСсылка.ТехнологическиеОперации -
// ** ИдентификаторОперации - Число -
// ** НомерПартии - Число -
// ** РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры -
// ** Начало - Дата -
// ** Окончание - Дата -
// ** ТактПараллельнойЗагрузки - УникальныйИдентификатор -
// ** ВремяПлан - Число -
// ** Загрузка - Число -
// ** ЭтоПереналадка - Булево -
// ** КоличествоПартии - Число -
// ** Коэффициент - Число -
// ** Создано - Число -
// ** Выполнено - Число -
// ** ТребуетПовторения - Число -
// ** Пропущено - Число -
// ** ВремяПерехода - Число -
// ** Подразделение - СправочникСсылка.СтруктураПредприятия -
// ** Вспомогательная - Булево -
// ** ЛеваяГраница - Дата -
// ** ПраваяГраница - Дата -
// ** ДополнительнаяЗапись - Булево -
// ** ДлительностьИнтервала - Число -
// * ФиксированныеПартииОпераций - ТаблицаЗначений -
// * РангиРабочихЦентров - ТаблицаЗначений - Описание:
// ** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// ** ВремяРазместить - Число -
// ** Загрузка - Булево - 
// ** ВремяДоступно - Число - 
// ** Ранг - Число - 
// * ПроблемыРасписания - см. ИнициализироватьТаблицуПроблемыРасписания
// * ОграниченияЗагрузкиРабочихЦентров - ТаблицаЗначений -
// * ЗанятоеВремяПоСменам - см. ИнициализироватьТаблицуЗанятоеВремяПоСменам
// * ДоступноеВремя - см. ИнициализироватьДоступноеВремяОборудования
// * ТаблицаРабочихЦентров - ТаблицаЗначений -
// * ТаблицаРасписание - см. ИнициализироватьТаблицуРасписание
// * ТаблицаЗависимостейОпераций - см. ИнициализироватьТаблицуЗависимостейОпераций
// * ПараметрыМоделейПланирования - ТаблицаЗначений - где:
// ** МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования -
// ** СценарийПланирования - СправочникСсылка.СценарииПооперационногоПланирования -
// ** ЗадействоватьРезервДоступности - Булево -
// ** ВесМинимизироватьВремя - Число - 
// ** ВесМинимизироватьСтоимость - Число - 
// ** СпособЗагрузки - ПеречислениеСсылка.СпособыЗагрузкиВидаРабочегоЦентра -
// * ВспомогательныеРабочиеЦентры - ТаблицаЗначений - где:
// ** Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// ** Операция - СправочникСсылка.ТехнологическиеОперации -
// ** ИдентификаторОперации - Число -
// ** РабочийЦентр - СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров -
// * ДлительностиПереналадки - ТаблицаЗначений -
// * МежоперационныеПереходы - см. ИнициализироватьТаблицуМежоперационныеПереходы
// * ПараметрыМежоперационныхПереходов - ТаблицаЗначений -
// * ТаблицаОпераций - см. ВыгрузитьТаблицуОпераций
// * Операции - ТаблицаЗначений -
// * СценарийПланирования - СправочникСсылка.СценарииПооперационногоПланирования -
// * МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования -
// * СпособЗагрузки - ПеречислениеСсылка.СпособыЗагрузкиВидаРабочегоЦентра -
// * МассивРабочихЦентров - Массив -
// * ПриоритетыЭтапов - Массив -
// * МассивЭтапов - Массив -
// * ДублированныеПараметры - Структура -
// * ПараметрыОптимизации - Структура -
// * ЗадействоватьРезервДоступности - Булево -
// * СтатусРабочийГрафик - Число -
// * ВесМинимизироватьСтоимость - Число -
// * ВесМинимизироватьВремя - Число -
// * ОперативнаяОтметкаВремени - Дата -
// * НачалоПланирования - Дата -
// * МодельРасписания - УникальныйИдентификатор -
Функция ИнициализироватьПараметрыПланирования()

	Результат = Новый Структура;
	
	// Параметры с типом значения "УникальныйИдентификатор".
	Результат.Вставить("МодельРасписания", Новый УникальныйИдентификатор);
	
	// Параметры с типом "Дата".
	Результат.Вставить("НачалоПланирования", ТекущаяДатаСеанса());
	Результат.Вставить("ОперативнаяОтметкаВремени", ТекущаяДатаСеанса());
	
	// Параметры с типом значения "Число".
	Результат.Вставить("ВесМинимизироватьВремя", 0);
	Результат.Вставить("ВесМинимизироватьСтоимость", 0);
	Результат.Вставить("СтатусРабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	// Параметры с типом значения "Булево".
	Результат.Вставить("ЗадействоватьРезервДоступности", Ложь);
	
	// Параметры с типом значения "Структура".
	Результат.Вставить("ПараметрыОптимизации", Новый Структура);
	Результат.Вставить("РезультатыРасчета", ИнициализироватьРезультатыРасчета());
	Результат.Вставить("ДублированныеПараметры", Новый Структура);
	
	// Параметры с типом значения "Массив".
	Результат.Вставить("МассивЭтапов", Новый Массив);
	Результат.Вставить("ПриоритетыЭтапов", Новый Массив);
	Результат.Вставить("МассивРабочихЦентров", Новый Массив);  
	
	// Параметры с типом значения "ПеречислениеСсылка.СпособыЗагрузкиВидаРабочегоЦентра".
	Результат.Вставить("СпособЗагрузки", Перечисления.СпособыЗагрузкиВидаРабочегоЦентра.ПустаяСсылка());
	
	// Параметры с типом значения "СправочникСсылка.МоделиПооперационногоПланирования".
	Результат.Вставить("МодельПланирования", Справочники.МоделиПооперационногоПланирования.ПустаяСсылка());
	
	// Параметры с типом значения "СправочникСсылка.СценарииПооперационногоПланирования".
	Результат.Вставить("СценарийПланирования", Справочники.СценарииПооперационногоПланирования.ПустаяСсылка());
	
	// Параметры с типом значения "ТаблицаЗначений".
	Результат.Вставить("Операции", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаОпераций", Новый ТаблицаЗначений);
	Результат.Вставить("ПараметрыМежоперационныхПереходов", Новый ТаблицаЗначений);
	Результат.Вставить("МежоперационныеПереходы", ИнициализироватьТаблицуМежоперационныеПереходы());
	Результат.Вставить("ДлительностиПереналадки", Новый ТаблицаЗначений);
	Результат.Вставить("ВспомогательныеРабочиеЦентры", Новый ТаблицаЗначений);
	Результат.Вставить("ПараметрыМоделейПланирования", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаЗависимостейОпераций", ИнициализироватьТаблицуЗависимостейОпераций());
	Результат.Вставить("ТаблицаРасписание", ИнициализироватьТаблицуРасписание());
	Результат.Вставить("ТаблицаРабочихЦентров", Новый ТаблицаЗначений);
	Результат.Вставить("ДоступноеВремя", Новый ТаблицаЗначений);
	Результат.Вставить("ЗанятоеВремяПоСменам", ИнициализироватьТаблицуЗанятоеВремяПоСменам());
	Результат.Вставить("ОграниченияЗагрузкиРабочихЦентров", Новый ТаблицаЗначений);
	Результат.Вставить("ПроблемыРасписания", ИнициализироватьТаблицуПроблемыРасписания());
	Результат.Вставить("РангиРабочихЦентров", Новый ТаблицаЗначений);
	Результат.Вставить("ФиксированныеПартииОпераций", Новый ТаблицаЗначений);
	Результат.Вставить("ИнтервалыФиксированныхПартий", Новый ТаблицаЗначений);
	Результат.Вставить("НомераПартийОпераций", Новый ТаблицаЗначений); 
	Результат.Вставить("НеразмещенныеФиксированныеПартии", ИнициализироватьТаблицуНеразмещенныеФиксированныеПартии());
	
	ПараметрыРасчета = ПараметрыРасчетаПооперационногоРасписания();
	Для Каждого Параметр Из ПараметрыРасчета Цикл
		Результат.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыПланирования(ПараметрыПланирования, Отказ)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПрочитатьОперацииДляПланирования(ПараметрыПланирования, МенеджерВременныхТаблиц, Отказ);
	
	Если Не Отказ Тогда
		
		УдалитьОперацииНеактуальныхЭтапов(ПараметрыПланирования);
		
		ЗафиксироватьСозданныеПартииОпераций(ПараметрыПланирования, МенеджерВременныхТаблиц);
		
		ПараметрыПланирования.Вставить("ТаблицаОпераций", ВыгрузитьТаблицуОпераций(ПараметрыПланирования, МенеджерВременныхТаблиц));
		
		ИсправитьТаблицуОперацийНаОснованииОтсутствующихОпераций(ПараметрыПланирования); 
		
		ИнициализироватьЗависимостиОпераций(ПараметрыПланирования, МенеджерВременныхТаблиц);
		
		ЗаполнитьЗависимостьОтПредшествующихВТаблицеОпераций(ПараметрыПланирования); 
		
		ИнициализироватьПриоритетыЭтаповОпераций(ПараметрыПланирования); 
		
		ЗафиксироватьНеактуальныеОперации(ПараметрыПланирования, МенеджерВременныхТаблиц);
		
		ИнициализироватьПараметрыМоделейПланирования(ПараметрыПланирования);
		
		ИнициализироватьСведенияОРабочихЦентрах(ПараметрыПланирования, МенеджерВременныхТаблиц);
		
		ИнициализироватьПараметрыМежоперационныхПереходов(ПараметрыПланирования);
		
		ИнициализироватьДлительностиПереналадки(ПараметрыПланирования);
		
		ИнициализироватьДоступноеВремя(ПараметрыПланирования);
		
		ИнициализироватьРангиРабочихЦентров(ПараметрыПланирования);
		
		МодифицироватьТипЗначенияРабочихЦентров(ПараметрыПланирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПланированияПоДаннымМоделиПланирования(ПараметрыПланирования, Знач ПараметрыМодели)
	
	ЗаполнитьЗначенияСвойств(ПараметрыПланирования, ПараметрыМодели);
	МодифицироватьПараметрыПланированияПоСценариюПланирования(ПараметрыПланирования);
	
КонецПроцедуры

#Область Операции

Процедура ПрочитатьОперацииДляПланирования(ПараметрыПланирования, МенеджерВременныхТаблиц, Отказ)
	
	НачатьТранзакцию();
	Попытка
		
		МенеджерБлокировок = РегистрыСведений.БлокировкиПооперационногоРасписания2_2;
		МенеджерБлокировок.ЗаблокироватьПодразделение(
			ПараметрыПланирования.Подразделение,
			РежимБлокировкиДанных.Исключительный);
	
		ДанныеЗаблокированы = МенеджерБлокировок.РасписаниеПодразделенияЗаблокировано(ПараметрыПланирования.Подразделение);
		
		Если Не ДанныеЗаблокированы Тогда
			
			Операции = ОперацииДляПланирования(ПараметрыПланирования, МенеджерВременныхТаблиц);
			
			Если ЗначениеЗаполнено(Операции) Тогда
				МенеджерБлокировок.ЗаблокироватьРасчетРасписания(
					ПараметрыПланирования.НомерСеанса,
					ПараметрыПланирования.НачалоСеанса,
					ПараметрыПланирования.Подразделение,
					ПараметрыПланирования.ТекущийПользователь,
					Операции);
				ПараметрыПланирования.Вставить("Операции", Операции);
				ПараметрыПланирования.Вставить("МассивЭтапов", Операции.ВыгрузитьКолонку("Этап"));
			Иначе
				ЗафиксироватьОшибкуОтсутствуютДанныеДляПланирования(ПараметрыПланирования);
				Отказ = Истина;
			КонецЕсли;
			
		Иначе
			
			ЗафиксироватьОшибкуРасписаниеЗаблокировано(ПараметрыПланирования);
			Отказ = Истина;
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
 		ДобавитьЗаписьВЖурналРегистрации(
			УровеньЖурналаРегистрации.Ошибка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Отказ = Истина;
 		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьОперацииНеактуальныхЭтапов(ПараметрыПланирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПооперационноеРасписание2_2.Этап КАК Этап
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК ОчередьПроизводственныхОпераций
	|		ПО ПооперационноеРасписание2_2.Этап = ОчередьПроизводственныхОпераций.Этап
	|ГДЕ
	|	ПооперационноеРасписание2_2.Подразделение = &Подразделение
	|	И ЕСТЬNULL(ОчередьПроизводственныхОпераций.ВАрхиве, ИСТИНА)";
	Запрос.УстановитьПараметр("Подразделение", ПараметрыПланирования.Подразделение);
	
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаЭтапа Из ТаблицаЭтапов Цикл
		
		Набор = РегистрыСведений.ПооперационноеРасписание2_2.СоздатьНаборЗаписей();
		Набор.Отбор.Этап.Установить(СтрокаЭтапа.Этап);
		
		Набор.Записать(Истина);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗафиксироватьСозданныеПартииОпераций(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Документы.ПроизводственнаяОперация2_2.СоздатьВТПартииОпераций(МенеджерВременныхТаблиц, ПараметрыПланирования.МассивЭтапов);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТПартииОпераций.Этап КАК Этап,
	|	ВТПартииОпераций.Операция КАК Операция,
	|	ВТПартииОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ВТПартииОпераций.НомерПартии КАК НомерПартии,
	|	ВТПартииОпераций.Подразделение КАК Подразделение,
	|	ВТПартииОпераций.РабочийЦентр КАК РабочийЦентрПроизводственнойОперации,
	|	ВТПартииОпераций.Операция.Количество КАК Коэффициент,
	|	СУММА(ВЫБОР
	|			КОГДА ВТПартииОпераций.Статус В (&СтатусСоздано, &СтатусВыполняется, &СтатусВыполнено, &СтатусПропущена)
	|				ТОГДА ВТПартииОпераций.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Создано,
	|	СУММА(ВЫБОР
	|			КОГДА ВТПартииОпераций.Статус = &СтатусВыполняется
	|				ТОГДА ВТПартииОпераций.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Выполняется,
	|	СУММА(ВЫБОР
	|			КОГДА ВТПартииОпераций.Статус = &СтатусВыполнено
	|				ТОГДА ВТПартииОпераций.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Выполнено,
	|	СУММА(ВЫБОР
	|			КОГДА ВТПартииОпераций.Статус = &СтатусВыполнено
	|					И ВТПартииОпераций.ТребуетПовторения
	|				ТОГДА ВТПартииОпераций.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТребуетПовторения,
	|	СУММА(ВЫБОР
	|			КОГДА ВТПартииОпераций.Статус = &СтатусПропущена
	|				ТОГДА ВТПартииОпераций.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Пропущено
	|ПОМЕСТИТЬ втФиксированныеПартии
	|ИЗ
	|	ВТПартииОпераций КАК ВТПартииОпераций
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПартииОпераций.Этап,
	|	ВТПартииОпераций.Операция,
	|	ВТПартииОпераций.ИдентификаторОперации,
	|	ВТПартииОпераций.НомерПартии,
	|	ВТПартииОпераций.Подразделение,
	|	ВТПартииОпераций.РабочийЦентр,
	|	ВТПартииОпераций.Операция.Количество
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Операция,
	|	ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПартииОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФиксированныеПартии.Этап КАК Этап,
	|	втФиксированныеПартии.Операция КАК Операция,
	|	втФиксированныеПартии.ИдентификаторОперации КАК ИдентификаторОперации,
	|	СУММА(ВЫБОР
	|			КОГДА втФиксированныеПартии.Выполняется + втФиксированныеПартии.Выполнено + втФиксированныеПартии.Пропущено - втФиксированныеПартии.ТребуетПовторения> 0
	|				ТОГДА
	|					втФиксированныеПартии.Создано - (втФиксированныеПартии.Выполняется + втФиксированныеПартии.Выполнено + втФиксированныеПартии.Пропущено - втФиксированныеПартии.ТребуетПовторения)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНеРазмещать,
	|	МАКСИМУМ(втФиксированныеПартии.НомерПартии) КАК НомерПартии
	|ИЗ
	|	втФиксированныеПартии КАК втФиксированныеПартии
	|
	|СГРУППИРОВАТЬ ПО
	|	втФиксированныеПартии.Этап,
	|	втФиксированныеПартии.ИдентификаторОперации,
	|	втФиксированныеПартии.Операция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииОпераций.Этап КАК Этап,
	|	ПартииОпераций.Операция КАК Операция,
	|	ПартииОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПартииОпераций.НомерПартии КАК НомерПартии,
	|	ПартииОпераций.Операция.ВариантНаладки КАК ВариантНаладки,
	|	ПартииОпераций.Коэффициент КАК Коэффициент,
	|	ПартииОпераций.Создано КАК Создано,
	|	ПартииОпераций.Выполняется КАК Выполняется,
	|	ПартииОпераций.Выполнено КАК Выполнено,
	|	ПартииОпераций.ТребуетПовторения КАК ТребуетПовторения,
	|	ПартииОпераций.Пропущено КАК Пропущено,
	|	ПартииОпераций.Создано КАК Количество,
	|	ПартииОпераций.Операция.ПередаточнаяПартия КАК ПередаточнаяПартия,
	|	ПартииОпераций.Подразделение КАК Подразделение,
	|	ПартииОпераций.РабочийЦентрПроизводственнойОперации КАК РабочийЦентрПроизводственнойОперации,
	|	ПартииОпераций.Операция.Загрузка КАК Загрузка,
	|	0 КАК ВремяРазместить,  
	|	0 КАК ВремяПЗПараллельнаяЗагрузка,
	|	ЛОЖЬ КАК ЗапретитьСоздаватьОперации,
	|	&ТекстРеквизитыИсполнителяОперации,
	|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
	|ИЗ
	|	втФиксированныеПартии КАК ПартииОпераций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выполнено УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФиксированныеПартии.Этап КАК Этап,
	|	втФиксированныеПартии.Операция КАК Операция,
	|	втФиксированныеПартии.ИдентификаторОперации КАК ИдентификаторОперации,
	|	втФиксированныеПартии.НомерПартии КАК НомерПартии,
	|	Расписание.РабочийЦентр КАК РабочийЦентр,
	|	Расписание.Начало КАК Начало,
	|	Расписание.Окончание КАК Окончание,
	|	Расписание.ТактПараллельнойЗагрузки КАК ТактПараллельнойЗагрузки,
	|	Расписание.ВремяПлан КАК ВремяПлан,
	|	Расписание.Загрузка КАК Загрузка,
	|	Расписание.ЭтоПереналадка КАК ЭтоПереналадка,
	|	Расписание.КоличествоПартии КАК КоличествоПартии,
	|	Расписание.Коэффициент КАК Коэффициент,
	|	Расписание.Создано КАК Создано,
	|	Расписание.Выполнено КАК Выполнено,
	|	Расписание.ТребуетПовторения КАК ТребуетПовторения,
	|	Расписание.Пропущено КАК Пропущено,
	|	Расписание.ВремяПерехода КАК ВремяПерехода,
	|	Расписание.Подразделение КАК Подразделение,
	|	Расписание.Вспомогательная КАК Вспомогательная,
	|	Расписание.ЛеваяГраница КАК ЛеваяГраница,
	|	Расписание.ПраваяГраница КАК ПраваяГраница,
	|	Расписание.ДополнительнаяЗапись КАК ДополнительнаяЗапись,
	|	Расписание.ДлительностьИнтервала КАК ДлительностьИнтервала
	|ИЗ
	|	втФиксированныеПартии КАК втФиксированныеПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПооперационноеРасписание2_2 КАК Расписание
	|		ПО втФиксированныеПартии.Этап = Расписание.Этап
	|			И втФиксированныеПартии.Операция = Расписание.Операция
	|			И втФиксированныеПартии.ИдентификаторОперации = Расписание.ИдентификаторОперации
	|			И втФиксированныеПартии.НомерПартии = Расписание.НомерПартии
	|ГДЕ
	|	НЕ Расписание.Моделирование
	|	И НЕ Расписание.ЭтоУдалениеОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочийЦентр,
	|	Начало";
	Запрос.УстановитьПараметр("СтатусСоздано", Перечисления.СтатусыПроизводственныхОпераций.Создана);
	Запрос.УстановитьПараметр("СтатусВыполняется", Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	Запрос.УстановитьПараметр("СтатусВыполнено", Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	Запрос.УстановитьПараметр("СтатусПропущена", Перечисления.СтатусыПроизводственныхОпераций.Пропущена);
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыИсполнителяОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("ПартииОпераций.Операция"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("ПартииОпераций.Операция"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НомераПартий = РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выгрузить(); // ТаблицаЗначений - 
	НомераПартий.Индексы.Добавить("Этап, Операция, ИдентификаторОперации");
	ПараметрыПланирования.Вставить("НомераПартийОпераций", НомераПартий);
	
	ПартииОпераций = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
	ПараметрыПланирования.Вставить("ФиксированныеПартииОпераций", ПартииОпераций);
	
	ИнтервалыПартий = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить(); // ТаблицаЗначений - 
	ИнтервалыПартий.Индексы.Добавить("Этап, Операция, ИдентификаторОперации, НомерПартии");
	ПараметрыПланирования.Вставить("ИнтервалыФиксированныхПартий", ИнтервалыПартий);
	
КонецПроцедуры

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - где:
// * ВремяРазместить - Число - 
// * Загрузка - Булево - 
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки - 
// * ПередаточнаяПартия - Число - 
// * ДатаЗапуска - Дата - 
// * ДатаВыпуска - Дата - 
// * Количество - Число - 
// * КоличествоРазместить - Число - 
// * Коэффициент - Число - 
// * Подразделение - СправочникСсылка.СтруктураПредприятия - 
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 - 
// * Операция - СправочникСсылка.ТехнологическиеОперации - 
// * ИдентификаторОперации - Число - 
// * Порядок - Число - 
// * НачалоЭтапа - Дата - 
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров - 
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров - 
// * ПараллельнаяЗагрузка- Булево - 
// * ВремяШтучное- Число - 
// * ВремяШтучноеЕдИзм- ПеречислениеСсылка.ЕдиницыИзмеренияВремени - 
// * ВремяПЗ- Число - 
// * ВремяПЗЕдИзм- ПеречислениеСсылка.ЕдиницыИзмеренияВремени - 
// * ВремяРазместить - Число -
// * НомерОперации - Число -
// * Загрузка - Булево -
// * Непрерывная - Булево -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПередаточнаяПартия - Число -
// * ДатаЗапуска - Дата -
// * ДатаВыпуска - Дата -
// * Количество - Число -
// * КоличествоРазместить - Число -
// * Коэффициент - Число -
// * Подразделение - СправочникСсылка.СтруктураПредприятия -
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// * Порядок - Число -
// * НачалоЭтапа - Дата -
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * ВремяШтучное - Число -
// * ВремяШтучноеЕдИзм - ПеречислениеСсылка.ЕдиницыИзмеренияВремени -
// * ВремяПЗ - Число -
// * ВремяПЗЕдИзм - ПеречислениеСсылка.ЕдиницыИзмеренияВремени -
// * ПриоритетЭтапа - Число -
// * Размещена - Булево -
// * Размещать - Булево -
// * ЗависитОтПредшествующих - Булево -
// * ДанныеПредшествующихПартий - см. ИнициализироватьДанныеПредшествующихПартий
// * ДанныеПредшествующихОтсортированы - Булево -
// * РазмерПартии - Число -
Функция ВыгрузитьТаблицуОпераций(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Очередь.Операция.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ПараллельнаяЗагрузка, ЛОЖЬ)
	|						ТОГДА Очередь.ВремяШтучное + Очередь.ВремяПЗ
	|					ИНАЧЕ Очередь.ВремяШтучное * (Очередь.Запланировано - Очередь.Выполнено - Очередь.Выполняется - Очередь.Пропущено + Очередь.ТребуетПовторения) + Очередь.ВремяПЗ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Очередь.Операция.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПараллельнаяЗагрузка, ЛОЖЬ)
	|					ТОГДА Очередь.ВремяШтучное + Очередь.ВремяПЗ
	|				ИНАЧЕ Очередь.ВремяШтучное * (Очередь.Запланировано - Очередь.Выполнено - Очередь.Выполняется - Очередь.Пропущено + Очередь.ТребуетПовторения) + Очередь.ВремяПЗ
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Очередь.ВремяЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА 86400
	|		КОГДА Очередь.ВремяЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА 3600
	|		КОГДА Очередь.ВремяЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА 60
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВремяРазместить,
	|	Очередь.Операция.НомерОперации КАК НомерОперации,
	|	Очередь.Операция.Загрузка КАК Загрузка,
	|	Очередь.Операция.Непрерывная КАК Непрерывная,
	|	Очередь.Операция.ВариантНаладки КАК ВариантНаладки,
	|	Очередь.Операция.ПередаточнаяПартия КАК ПередаточнаяПартия,
	|	График.НачалоЭтапа КАК ДатаЗапуска,
	|	График.ОкончаниеЭтапа КАК ДатаВыпуска,
	|	Очередь.Запланировано - Очередь.Выполнено - Очередь.Выполняется - Очередь.Пропущено + Очередь.ТребуетПовторения КАК Количество,
	|	Очередь.Запланировано - Очередь.Выполнено - Очередь.Выполняется - Очередь.Пропущено + Очередь.ТребуетПовторения КАК КоличествоРазместить,
	|	Очередь.Операция.Количество КАК Коэффициент,
	|	Очередь.Подразделение КАК Подразделение,
	|	Очередь.Этап КАК Этап,
	|	Очередь.Операция КАК Операция,
	|	Очередь.ИдентификаторОперации КАК ИдентификаторОперации,
	|	Очередь.Порядок КАК Порядок,
	|	График.НачалоЭтапа КАК НачалоЭтапа,
	|	&ТекстРеквизитыИсполнителяОперации,
	|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|		ПО Очередь.Этап = График.ЭтапПроизводства
	|			И (График.СтатусГрафика = &СтатусРабочийГрафик)
	|ГДЕ
	|	(Очередь.Этап, Очередь.Операция, Очередь.ИдентификаторОперации) В
	|			(ВЫБРАТЬ
	|				Операции.Этап,
	|				Операции.Операция,
	|				Операции.ИдентификаторОперации
	|			ИЗ
	|				ОперацииДляПланирования КАК Операции)
	|	И НЕ Очередь.ВАрхиве";
	
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", ПараметрыПланирования.СтатусРабочийГрафик);
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыИсполнителяОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("Очередь.Операция"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("Очередь.Операция"));
	
	ТаблицаОпераций = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОпераций.Колонки.Добавить("ПриоритетЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5))); 
	ТаблицаОпераций.Колонки.Добавить("Размещена", Новый ОписаниеТипов("Булево")); 
	ТаблицаОпераций.Колонки.Добавить("Размещать", Новый ОписаниеТипов("Булево")); 
	ТаблицаОпераций.Колонки.Добавить("ЗависитОтПредшествующих", Новый ОписаниеТипов("Булево")); 
	ТаблицаОпераций.Колонки.Добавить("ДанныеПредшествующихПартий", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаОпераций.Колонки.Добавить("ДанныеПредшествующихОтсортированы", Новый ОписаниеТипов("Булево"));  
	ТаблицаОпераций.Колонки.Добавить("РазмерПартии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5))); 
	
	ТаблицаОпераций.ЗаполнитьЗначения(Истина, "Размещать"); 
		
	ТаблицаОпераций.Индексы.Добавить("Этап, ИдентификаторОперации"); 
	ТаблицаОпераций.Индексы.Добавить("ВидРабочегоЦентра, ПриоритетЭтапа, Размещать, Размещена, ЗависитОтПредшествующих"); 
	ТаблицаОпераций.Индексы.Добавить("Этап"); 
	
	Возврат ТаблицаОпераций;
	
КонецФункции

Процедура ЗафиксироватьНеактуальныеОперации(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Расписание.Этап КАК Этап,
	|	Расписание.Операция КАК Операция,
	|	Расписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	Расписание.НомерПартии КАК НомерПартии,
	|	Расписание.РабочийЦентр КАК РабочийЦентр,
	|	Расписание.Начало КАК Начало,
	|	Расписание.Окончание КАК Окончание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК Расписание
	|ГДЕ
	|	НЕ Расписание.Моделирование
	|	И ((Расписание.Этап, Расписание.Операция, Расписание.ИдентификаторОперации) В
	|				(ВЫБРАТЬ
	|					Операции.Этап,
	|					Операции.Операция,
	|					Операции.ИдентификаторОперации
	|				ИЗ
	|					ОперацииДляПланирования КАК Операции)
	|			ИЛИ (Расписание.Этап, Расписание.Операция, Расписание.ИдентификаторОперации) В
	|				(ВЫБРАТЬ
	|					ФиксированныеПартии.Этап,
	|					ФиксированныеПартии.Операция,
	|					ФиксированныеПартии.ИдентификаторОперации
	|				ИЗ
	|					втФиксированныеПартии КАК ФиксированныеПартии))";
	НеактуальныеОперации = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(НеактуальныеОперации) Тогда
		
		РегистрыСведений.ПооперационноеРасписание2_2.ЗаписатьОперацииДляУдаления(ПараметрыПланирования.МодельРасписания, НеактуальныеОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОперацииДляПланирования(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	ИмеютсяИсключения = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ИнициализироватьЗапросОперацииДляПланирования(Запрос, ПараметрыПланирования, ИмеютсяИсключения);
		
	Если ИмеютсяИсключения Тогда
		
		РезультатЗапроса = Запрос.Выполнить();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацииРасписания.Этап КАК Этап,
		|	ОперацииРасписания.Операция КАК Операция,
		|	ОперацииРасписания.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ОперацииРасписания.НомерПартии КАК НомерПартии,
		|	ОперацииРасписания.Начало КАК Начало,
		|	ОперацииРасписания.Окончание КАК Окончание,
		|	ОперацииРасписания.Количество КАК Количество,
		|	ОперацииРасписания.Коэффициент КАК Коэффициент,
		|	ОперацииРасписания.ПередаточнаяПартия КАК ПередаточнаяПартия
		|ПОМЕСТИТЬ Исключения
		|ИЗ
		|	ОперацииРасписания КАК ОперацииРасписания
		|ГДЕ
		|	&ИмеютсяИсключения
		|	И ОперацииРасписания.Начало МЕЖДУ &НачалоИсключения И &ОкончаниеИсключения
		|	И НЕ (ОперацииРасписания.Этап, ОперацииРасписания.Операция, ОперацииРасписания.ИдентификаторОперации, ОперацииРасписания.НомерПартии) В
		|				(ВЫБРАТЬ
		|					НедоступныеОперацииПоВыполнению.Этап КАК Этап,
		|					НедоступныеОперацииПоВыполнению.Операция КАК Операция,
		|					НедоступныеОперацииПоВыполнению.ИдентификаторОперации КАК ИдентификаторОперации,
		|					НедоступныеОперацииПоВыполнению.НомерПартии КАК НомерПартии
		|				ИЗ
		|					НедоступныеОперацииПоВыполнению)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	ИдентификаторОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроизводственныеОперацииПредшествующие.Этап КАК Этап,
		|	ПроизводственныеОперацииПредшествующие.Операция КАК ОперацияПредшествующая,
		|	ПроизводственныеОперацииПредшествующие.ИдентификаторОперации КАК ИдентификаторОперацииПредшествующий,
		|	ПроизводственныеОперации.Операция КАК Операция,
		|	ПроизводственныеОперации.ИдентификаторОперации КАК ИдентификаторОперации
		|ПОМЕСТИТЬ ЗависисмостиОпераций
		|ИЗ
		|	втОчередьОпераций КАК ПроизводственныеОперацииПредшествующие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОчередьОпераций КАК ПроизводственныеОперации
		|		ПО ПроизводственныеОперацииПредшествующие.Этап = ПроизводственныеОперации.Этап
		|			И ПроизводственныеОперацииПредшествующие.НомерСледующейОперации = ПроизводственныеОперации.НомерОперации
		|ГДЕ
		|	НЕ ПроизводственныеОперацииПредшествующие.НомерСледующейОперации = 0
		|	И (ПроизводственныеОперации.Этап, ПроизводственныеОперации.ИдентификаторОперации) В
		|			(ВЫБРАТЬ
		|				Исключения.Этап КАК Этап,
		|				Исключения.ИдентификаторОперации КАК ИдентификаторОперации
		|			ИЗ
		|				Исключения)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	ИдентификаторОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДоступныеОперации.Этап КАК Этап,
		|	втДоступныеОперации.Операция КАК Операция,
		|	втДоступныеОперации.ИдентификаторОперации КАК ИдентификаторОперации
		|ПОМЕСТИТЬ ОперацииДляПланирования
		|ИЗ
		|	втДоступныеОперации КАК втДоступныеОперации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Исключения.Этап,
		|	Исключения.Операция,
		|	Исключения.ИдентификаторОперации
		|ИЗ
		|	Исключения КАК Исключения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗависисмостиОпераций КАК ЗависисмостиОпераций
		|		ПО Исключения.Этап = ЗависисмостиОпераций.Этап
		|			И Исключения.ИдентификаторОперации = ЗависисмостиОпераций.ИдентификаторОперации
		|ГДЕ
		|	(ЗависисмостиОпераций.Этап, ЗависисмостиОпераций.ИдентификаторОперацииПредшествующий) В
		|			(ВЫБРАТЬ
		|				втДоступныеОперации.Этап,
		|				втДоступныеОперации.ИдентификаторОперации
		|			ИЗ
		|				втДоступныеОперации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	Операция,
		|	ИдентификаторОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НедоступныеОперацииПоВыполнению
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОперацииРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗависисмостиОпераций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДоступныеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НедоступныеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПроизводственныеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперацииДляПланирования.Этап КАК Этап,
		|	ОперацииДляПланирования.Операция КАК Операция,
		|	ОперацииДляПланирования.ИдентификаторОперации КАК ИдентификаторОперации
		|ИЗ
		|	ОперацииДляПланирования КАК ОперацииДляПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Исключения.Этап КАК Этап,
		|	Исключения.Операция КАК Операция,
		|	Исключения.ИдентификаторОперации КАК ИдентификаторОперации,
		|	Исключения.НомерПартии КАК НомерПартии,
		|	Исключения.Начало КАК Начало,
		|	Исключения.Окончание КАК Окончание,
		|	Исключения.Количество КАК Количество,
		|	Исключения.Коэффициент КАК Коэффициент,
		|	Исключения.ПередаточнаяПартия КАК ПередаточнаяПартия
		|ИЗ
		|	Исключения КАК Исключения";
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаОпераций = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
		Исключения = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
		Если Исключения.Количество() > 0 Тогда
			ПараметрыПланирования.Вставить("ПредшествующиеНедоступныеОперацииПоИсключению", Исключения);
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "втДоступныеОперации", "ОперацииДляПланирования");
		РезультатЗапроса = Запрос.Выполнить();
		Запрос.Текст =
		"УНИЧТОЖИТЬ НедоступныеОперацииПоВыполнению
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОперацииРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НедоступныеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПроизводственныеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперацииДляПланирования.Этап КАК Этап,
		|	ОперацииДляПланирования.Операция КАК Операция,
		|	ОперацииДляПланирования.ИдентификаторОперации КАК ИдентификаторОперации
		|ИЗ
		|	ОперацииДляПланирования КАК ОперацииДляПланирования";
		ТаблицаОпераций = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ТаблицаОпераций.Свернуть("Этап, Операция, ИдентификаторОперации");
	
	Возврат ТаблицаОпераций;
	
КонецФункции

Процедура ИнициализироватьЗапросОперацииДляПланирования(Запрос, Знач ПараметрыПланирования, ИмеютсяИсключения)
	
	Запрос.Текст = ТекстЗапросаОперацииДляПланирования();
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	Запрос.УстановитьПараметр("Окончание", Границы.Окончание);
		
	ИмеютсяИсключения = Не ПараметрыПланирования.ОперативныйРасчет Или ПараметрыПланирования.ВремяНаРегистрациюВыполнения > 0;
						
	Если ИмеютсяИсключения Тогда
		
		Запрос.УстановитьПараметр("ИмеютсяИсключения", Истина);
		НачалоИсключения = ПараметрыПланирования.ОперативнаяОтметкаВремени - ПараметрыПланирования.ВремяНаРегистрациюВыполнения;
		ОкончаниеИсключения = ПараметрыПланирования.МоментПланирования - 1;
		
	Иначе
		
		Запрос.УстановитьПараметр("ИмеютсяИсключения", Ложь);
		НачалоИсключения = '00010101';
		ОкончаниеИсключения = '00010101';
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоИсключения", НачалоИсключения);
	Запрос.УстановитьПараметр("ОкончаниеИсключения", ОкончаниеИсключения);
	Запрос.УстановитьПараметр("ОперативнаяОтметкаВремени", ПараметрыПланирования.ОперативнаяОтметкаВремени);
	
	Запрос.УстановитьПараметр("ОтборПодразделение", ЗначениеЗаполнено(ПараметрыПланирования.Подразделение));
	Запрос.УстановитьПараметр("Подразделение", ПараметрыПланирования.Подразделение);
	
	Запрос.УстановитьПараметр("ОтборРаспоряжения", ЗначениеЗаполнено(ПараметрыПланирования.Распоряжения));
	Запрос.УстановитьПараметр("Распоряжения", ПараметрыПланирования.Распоряжения);
	
	Запрос.УстановитьПараметр("ОтборЭтапыПроизводства", ЗначениеЗаполнено(ПараметрыПланирования.ЭтапыПроизводства));
	Запрос.УстановитьПараметр("ЭтапыПроизводства", ПараметрыПланирования.ЭтапыПроизводства);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", ПараметрыПланирования.СтатусРабочийГрафик);
	
КонецПроцедуры

Функция ТекстЗапросаОперацииДляПланирования()
	
	Результат =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОчередьПроизводственныхОпераций.Этап КАК Этап,
	|	ОчередьПроизводственныхОпераций.Операция КАК Операция,
	|	ОчередьПроизводственныхОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ЕСТЬNULL(ПооперационноеРасписание.НомерПартии, НЕОПРЕДЕЛЕНО) КАК НомерПартии
	|ПОМЕСТИТЬ ПроизводственныеОперации
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК ОчередьПроизводственныхОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|		ПО ОчередьПроизводственныхОпераций.Распоряжение = График.Распоряжение
	|			И ОчередьПроизводственныхОпераций.Этап = График.ЭтапПроизводства
	|			И (График.СтатусГрафика = &СтатусРабочийГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|		ПО ОчередьПроизводственныхОпераций.Этап = ПооперационноеРасписание.Этап
	|			И ОчередьПроизводственныхОпераций.Операция = ПооперационноеРасписание.Операция
	|			И ОчередьПроизводственныхОпераций.ИдентификаторОперации = ПооперационноеРасписание.ИдентификаторОперации
	|			И (НЕ ПооперационноеРасписание.ЭтоУдалениеОперации)
	|			И (НЕ ПооперационноеРасписание.Моделирование)
	|			И (НЕ ПооперационноеРасписание.ДополнительнаяЗапись)
	|			И (НЕ ПооперационноеРасписание.Вспомогательная)
	|			И (НЕ ПооперационноеРасписание.ЭтоПереналадка)
	|ГДЕ
	|	(НЕ &ОтборПодразделение
	|			ИЛИ ОчередьПроизводственныхОпераций.Подразделение = &Подразделение)
	|	И (НЕ &ОтборРаспоряжения
	|			ИЛИ ОчередьПроизводственныхОпераций.Распоряжение В (&Распоряжения))
	|	И (НЕ &ОтборЭтапыПроизводства
	|			ИЛИ ОчередьПроизводственныхОпераций.Этап В (&ЭтапыПроизводства))
	|	И ОчередьПроизводственныхОпераций.Этап.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И ОчередьПроизводственныхОпераций.Запланировано - ОчередьПроизводственныхОпераций.Пропущено - ОчередьПроизводственныхОпераций.Выполнено + ОчередьПроизводственныхОпераций.ТребуетПовторения > 0
	|	И График.НачалоЭтапа <= &Окончание
	|	И НЕ ОчередьПроизводственныхОпераций.ВАрхиве
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Операция,
	|	ИдентификаторОперации,
	|	НомерПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.Этап КАК Этап,
	|	ПооперационноеРасписание.Операция КАК Операция,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.НомерПартии КАК НомерПартии,
	|	ПооперационноеРасписание.Подразделение КАК Подразделение,
	//++ Устарело_Производство21
	|	ВЫБОР
	|		КОГДА ПооперационноеРасписание.КоличествоПартии - ПооперационноеРасписание.Выполнено - ПооперационноеРасписание.Пропущено + ПооперационноеРасписание.ТребуетПовторения = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|		КОГДА НЕ ПооперационноеРасписание.Выполняется = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|	КОНЕЦ КАК СтатусВыполнения,
	//-- Устарело_Производство21
	|	ПооперационноеРасписание.ЛеваяГраница КАК Начало,
	|	ПооперационноеРасписание.ПраваяГраница КАК Окончание,
	|	ПооперационноеРасписание.КоличествоПартии КАК Количество,
	|	ПооперационноеРасписание.Коэффициент КАК Коэффициент,
	|	ПооперационноеРасписание.Операция.ПередаточнаяПартия КАК ПередаточнаяПартия
	|ПОМЕСТИТЬ ОперацииРасписания
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|ГДЕ
	|	(ПооперационноеРасписание.Этап, ПооперационноеРасписание.Операция, ПооперационноеРасписание.ИдентификаторОперации) В
	|			(ВЫБРАТЬ
	|				ПроизводственныеОперации.Этап КАК Этап,
	|				ПроизводственныеОперации.Операция КАК Операция,
	|				ПроизводственныеОперации.ИдентификаторОперации КАК ИдентификаторОперации
	|			ИЗ
	|				ПроизводственныеОперации)
	|	И НЕ ПооперационноеРасписание.ЭтоУдалениеОперации
	|	И НЕ ПооперационноеРасписание.Моделирование
	|	И НЕ ПооперационноеРасписание.ДополнительнаяЗапись
	|	И НЕ ПооперационноеРасписание.Вспомогательная
	|	И НЕ ПооперационноеРасписание.ЭтоПереналадка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Начало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка) КАК Этап,
	|	ЗНАЧЕНИЕ(Справочник.ТехнологическиеОперации.ПустаяСсылка) КАК Операция,
	|	0 КАК ИдентификаторОперации,
	|	0 КАК НомерПартии
	|ПОМЕСТИТЬ НедоступныеОперацииПоВыполнению
	|ГДЕ
	|		ЛОЖЬ
	|
	//++ Устарело_Производство21
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацииРасписания.Этап КАК Этап,
	|	ОперацииРасписания.Операция КАК Операция,
	|	ОперацииРасписания.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ОперацииРасписания.НомерПартии КАК НомерПартии
	|ИЗ
	|	ОперацииРасписания КАК ОперацииРасписания
	|ГДЕ
	|	ОперацииРасписания.Начало < &ОперативнаяОтметкаВремени
	|	И ОперацииРасписания.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|	И ОперацииРасписания.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений)
	//-- Устарело_Производство21
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Операция,
	|	ИдентификаторОперации,
	|	НомерПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НедоступныеОперацииПоВыполнению.Этап КАК Этап,
	|	НедоступныеОперацииПоВыполнению.Операция КАК Операция,
	|	НедоступныеОперацииПоВыполнению.ИдентификаторОперации КАК ИдентификаторОперации,
	|	НедоступныеОперацииПоВыполнению.НомерПартии КАК НомерПартии
	|ПОМЕСТИТЬ НедоступныеОперации
	|ИЗ
	|	НедоступныеОперацииПоВыполнению КАК НедоступныеОперацииПоВыполнению
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацииРасписания.Этап,
	|	ОперацииРасписания.Операция,
	|	ОперацииРасписания.ИдентификаторОперации,
	|	ОперацииРасписания.НомерПартии
	|ИЗ
	|	ОперацииРасписания КАК ОперацииРасписания
	|ГДЕ
	|	&ИмеютсяИсключения
	|	И ОперацииРасписания.Начало МЕЖДУ &НачалоИсключения И &ОкончаниеИсключения
	|	И НЕ (ОперацииРасписания.Этап, ОперацииРасписания.Операция, ОперацииРасписания.ИдентификаторОперации, ОперацииРасписания.НомерПартии) В
	|				(ВЫБРАТЬ
	|					НедоступныеОперацииПоВыполнению.Этап КАК Этап,
	|					НедоступныеОперацииПоВыполнению.Операция КАК Операция,
	|					НедоступныеОперацииПоВыполнению.ИдентификаторОперации КАК ИдентификаторОперации,
	|					НедоступныеОперацииПоВыполнению.НомерПартии КАК НомерПартии
	|				ИЗ
	|					НедоступныеОперацииПоВыполнению)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Операция,
	|	ИдентификаторОперации,
	|	НомерПартии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныеОперации.Этап КАК Этап,
	|	ПроизводственныеОперации.Операция КАК Операция,
	|	ПроизводственныеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПроизводственныеОперации.НомерПартии КАК НомерПартии,
	|	МИНИМУМ(ГрафикЭтаповПроизводства2_2.НачалоЭтапа) КАК ДатаЗапуска,
	|	МАКСИМУМ(ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа) КАК ДатаВыпуска
	|ПОМЕСТИТЬ втДоступныеОперации
	|ИЗ
	|	ПроизводственныеОперации КАК ПроизводственныеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ПО ПроизводственныеОперации.Этап = ГрафикЭтаповПроизводства2_2.ЭтапПроизводства
	|ГДЕ
	|	НЕ (ПроизводственныеОперации.Этап, ПроизводственныеОперации.Операция, ПроизводственныеОперации.ИдентификаторОперации, ПроизводственныеОперации.НомерПартии) В
	|				(ВЫБРАТЬ
	|					НедоступныеОперации.Этап КАК Этап,
	|					НедоступныеОперации.Операция КАК Операция,
	|					НедоступныеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
	|					НедоступныеОперации.НомерПартии КАК НомерПартии
	|				ИЗ
	|					НедоступныеОперации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственныеОперации.Этап,
	|	ПроизводственныеОперации.Операция,
	|	ПроизводственныеОперации.ИдентификаторОперации,
	|	ПроизводственныеОперации.НомерПартии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Операция,
	|	ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОчередьПроизводственныхОпераций.Этап КАК Этап,
	|	ОчередьПроизводственныхОпераций.Операция КАК Операция,
	|	ОчередьПроизводственныхОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ОчередьПроизводственныхОпераций.НомерОперации КАК НомерОперации,
	|	ОчередьПроизводственныхОпераций.НомерСледующейОперации КАК НомерСледующейОперации
	|ПОМЕСТИТЬ втОчередьОпераций
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК ОчередьПроизводственныхОпераций
	|ГДЕ
	|	ОчередьПроизводственныхОпераций.Этап В
	|			(ВЫБРАТЬ
	|				втДоступныеОперации.Этап
	|			ИЗ
	|				втДоступныеОперации)
	|	И НЕ ОчередьПроизводственныхОпераций.ВАрхиве
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	НомерОперации,
	|	НомерСледующейОперации";	
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 - 
// * Выполнено - Число -
// * ТребуетПовторения - Число -
// * Создано - Число -
// * СтрокаОперации - СтрокаТаблицыЗначений - 
// * Размещена - Булево -
// * Размещать - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров - 
// * ПриоритетЭтапа  - Число -
// * Порядок - Число - 
// * Подразделение - СправочникСсылка.СтруктураПредприятия - 
// * ПередаточнаяПартия - Число - 
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * НомерПартии - Число -
// * НомерОперации - Число -
// * Непрерывная - Булево -
// * Коэффициент - Число - 
// * Количество - Число -
// * ИдентификаторОперации - Число -
// * Загрузка - Булево -
// * ЗависитОтПредшествующих - Булево -
// * ДанныеПредшествующихПартий - см. ИнициализироватьДанныеПредшествующихПартий
// * ДатаЗапуска - Дата - 
// * ДатаВыпуска - Дата - 
// * ВремяРазместить - Число -
// * ВремяПЗПараллельнаяЗагрузка - Число - 
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров - 
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
Функция ИнициализироватьПартиюОперации()
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантНаладки");
	Результат.Вставить("ВидРабочегоЦентра");
	Результат.Вставить("ВремяПЗПараллельнаяЗагрузка");
	Результат.Вставить("ВремяРазместить");
	Результат.Вставить("ДатаВыпуска");
	Результат.Вставить("ДатаЗапуска");
	Результат.Вставить("ДанныеПредшествующихПартий");
	Результат.Вставить("ЗависитОтПредшествующих");
	Результат.Вставить("Загрузка");
	Результат.Вставить("ИдентификаторОперации");
	Результат.Вставить("Количество");
	Результат.Вставить("Коэффициент");
	Результат.Вставить("Непрерывная");
	Результат.Вставить("НомерОперации");
	Результат.Вставить("НомерПартии");
	Результат.Вставить("Операция");
	Результат.Вставить("ПередаточнаяПартия");
	Результат.Вставить("Подразделение");
	Результат.Вставить("Порядок");
	Результат.Вставить("ПриоритетЭтапа");
	Результат.Вставить("РабочийЦентр");
	Результат.Вставить("Размещать");
	Результат.Вставить("Размещена");
	Результат.Вставить("СтрокаОперации");
	Результат.Вставить("Создано", 0);
	Результат.Вставить("ТребуетПовторения", 0);
	Результат.Вставить("Выполнено", 0);
	Результат.Вставить("Этап");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПараметры

Процедура ИнициализироватьПараметрыМоделейПланирования(ПараметрыПланирования)

	Если ЗначениеЗаполнено(ПараметрыПланирования.МоделиПланирования) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаМоделей.МодельПланирования КАК МодельПланирования,
		|	ТаблицаМоделей.СценарийПланирования КАК СценарийПланирования,
		|	ТаблицаМоделей.ЗадействоватьРезервДоступности КАК ЗадействоватьРезервДоступности
		|ПОМЕСТИТЬ ТаблицаМоделей
		|ИЗ
		|	&ТаблицаМоделей КАК ТаблицаМоделей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаМоделей.МодельПланирования КАК МодельПланирования,
		|	ТаблицаМоделей.СценарийПланирования КАК СценарийПланирования,
		|	ТаблицаМоделей.ЗадействоватьРезервДоступности КАК ЗадействоватьРезервДоступности,
		|	МоделиПооперационногоПланирования.ВесМинимизироватьВремя КАК ВесМинимизироватьВремя,
		|	МоделиПооперационногоПланирования.ВесМинимизироватьСтоимость КАК ВесМинимизироватьСтоимость,
		|	МоделиПооперационногоПланирования.СпособЗагрузки КАК СпособЗагрузки
		|ИЗ
		|	ТаблицаМоделей КАК ТаблицаМоделей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МоделиПооперационногоПланирования КАК МоделиПооперационногоПланирования
		|		ПО ТаблицаМоделей.МодельПланирования = МоделиПооперационногоПланирования.Ссылка");
		Запрос.УстановитьПараметр("ТаблицаМоделей", ПараметрыПланирования.МоделиПланирования);
		
		Параметры = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Параметры = Новый ТаблицаЗначений;
		Параметры.Колонки.Добавить("МодельПланирования", Новый ОписаниеТипов("СправочникСсылка.МоделиПооперационногоПланирования"));
		Параметры.Колонки.Добавить("СценарийПланирования", Новый ОписаниеТипов("СправочникСсылка.СценарииПооперационногоПланирования"));
		Параметры.Колонки.Добавить("ЗадействоватьРезервДоступности", Новый ОписаниеТипов("Булево"));
		Параметры.Колонки.Добавить("ВесМинимизироватьВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
		Параметры.Колонки.Добавить("ВесМинимизироватьСтоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
		Параметры.Колонки.Добавить("СпособЗагрузки", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыЗагрузкиВидаРабочегоЦентра"));
		
		НоваяСтрока = Параметры.Добавить();
		НоваяСтрока.ВесМинимизироватьВремя = 1;
		
	КонецЕсли;
	
	ПараметрыПланирования.Вставить("ПараметрыМоделейПланирования", Параметры);
	
КонецПроцедуры

// Инициализирует таблицу для хранения ошибок и предупреждений, зафиксированных в процессе расчета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица с колонками:
//		* НомерСтроки - Число - номер строки.
//		* Категория - ПеречислениеСсылка.КатегорииПроблемПооперационногоРасписания - категория проблемы.
//		* Тип - Число - тип проблемы, где 1 - предупреждение, 2 - ошибка.
//		* Текст - Строка - описание проблемы для пользователя.
//		* ЧтоДелатьДальше - Строка - рекомендации по исправлению проблемы.
//		* Свойства - Структура - произвольные данные, относящиеся к проблеме.
//		* Ключ - Произвольный - значение, однозначно идентифицирующее данную проблему. Используется для
//			исключения многократной регистрации идентичных проблем.
//
Функция ИнициализироватьТаблицуПроблемыРасписания()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	Результат.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииПроблемПооперационногоРасписания"));
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	Результат.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	Результат.Колонки.Добавить("ЧтоДелатьДальше", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	Результат.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Структура"));
	Результат.Колонки.Добавить("Ключ");
	
	Результат.Индексы.Добавить("Категория");
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьСведенияОРабочихЦентрах(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	ИнициализироватьВспомогательныеРабочиеЦентры(ПараметрыПланирования, МенеджерВременныхТаблиц);
	ИнициализироватьРабочиеЦентры(ПараметрыПланирования, МенеджерВременныхТаблиц);
	ИнициализироватьОграниченияЗагрузкиРабочихЦентров(ПараметрыПланирования, МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИнициализироватьВспомогательныеРабочиеЦентры(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацииДляПланирования.Этап КАК Этап,
	|	ОперацииДляПланирования.Операция КАК Операция,
	|	ОперацииДляПланирования.ИдентификаторОперации КАК ИдентификаторОперации
	|ПОМЕСТИТЬ ТаблицаОпераций
	|ИЗ
	|	ОперацииДляПланирования КАК ОперацииДляПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаОпераций.Этап КАК Этап,
	|	ТаблицаОпераций.Операция КАК Операция,
	|	ТаблицаОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ТехнологическиеОперацииВспомогательныеРабочиеЦентры.РабочийЦентр КАК РабочийЦентр
	|ПОМЕСТИТЬ втВспомогательныеРабочиеЦентры
	|ИЗ
	|	ТаблицаОпераций КАК ТаблицаОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации.ВспомогательныеРабочиеЦентры КАК ТехнологическиеОперацииВспомогательныеРабочиеЦентры
	|		ПО ТаблицаОпераций.Операция = ТехнологическиеОперацииВспомогательныеРабочиеЦентры.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВспомогательныеРабочиеЦентры.Этап КАК Этап,
	|	втВспомогательныеРабочиеЦентры.Операция КАК Операция,
	|	втВспомогательныеРабочиеЦентры.ИдентификаторОперации КАК ИдентификаторОперации,
	|	втВспомогательныеРабочиеЦентры.РабочийЦентр КАК РабочийЦентр
	|ИЗ
	|	втВспомогательныеРабочиеЦентры КАК втВспомогательныеРабочиеЦентры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОпераций";
		
	ПараметрыПланирования.Вставить("ВспомогательныеРабочиеЦентры", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ИнициализироватьРабочиеЦентры(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ТекстРеквизитыИсполнителяОперации
	|ПОМЕСТИТЬ втРабочиеЦентрыОпераций
	|ИЗ
	|	ОперацииДляПланирования КАК Операции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстРеквизитыИсполнителяОперации
	|ПОМЕСТИТЬ втРабочиеЦентрыФиксированныхОпераций
	|ИЗ
	|	втФиксированныеПартии КАК Операции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр
	|ПОМЕСТИТЬ втРабочиеЦентры
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	(РабочиеЦентры.Ссылка В
	|				(ВЫБРАТЬ
	|					РабочиеЦентры.РабочийЦентр
	|				ИЗ
	|					втРабочиеЦентрыОпераций КАК РабочиеЦентры)
	|			ИЛИ РабочиеЦентры.Ссылка В
	|				(ВЫБРАТЬ
	|					РабочиеЦентры.РабочийЦентр
	|				ИЗ
	|					втРабочиеЦентрыФиксированныхОпераций КАК РабочиеЦентры)
	|			ИЛИ РабочиеЦентры.Ссылка В
	|				(ВЫБРАТЬ
	|					РабочиеЦентры.РабочийЦентр
	|				ИЗ
	|					втВспомогательныеРабочиеЦентры КАК РабочиеЦентры))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РабочиеЦентры.Ссылка
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	(РабочиеЦентры.ВидРабочегоЦентра В
	|				(ВЫБРАТЬ
	|					РабочиеЦентры.РабочийЦентр
	|				ИЗ
	|					втРабочиеЦентрыОпераций КАК РабочиеЦентры)
	|			ИЛИ РабочиеЦентры.ВидРабочегоЦентра В
	|				(ВЫБРАТЬ
	|					РабочиеЦентры.РабочийЦентр
	|				ИЗ
	|					втРабочиеЦентрыФиксированныхОпераций КАК РабочиеЦентры)
	|			ИЛИ РабочиеЦентры.ВидРабочегоЦентра В
	|				(ВЫБРАТЬ
	|					РабочиеЦентры.РабочийЦентр
	|				ИЗ
	|					втВспомогательныеРабочиеЦентры КАК РабочиеЦентры))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение КАК Подразделение,
	|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
	|	РабочиеЦентры.КоэффициентВремениРаботы КАК КоэффициентВремениРаботы,
	|	РабочиеЦентры.РасценкаРабота КАК РасценкаРабота,
	|	РабочиеЦентры.РасценкаПереналадка КАК РасценкаПереналадка,
	|	РабочиеЦентры.МаксимальнаяЗагрузка КАК МаксимальнаяЗагрузка,
	|	РабочиеЦентры.ВидРабочегоЦентра.ПараллельнаяЗагрузка КАК ПараллельнаяЗагрузка,
	|	ВЫБОР
	|		КОГДА РабочиеЦентры.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СинхроннаяЗагрузка
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.Ссылка В
	|			(ВЫБРАТЬ
	|				втРабочиеЦентры.РабочийЦентр КАК Ссылка
	|			ИЗ
	|				втРабочиеЦентры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРабочиеЦентрыОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВспомогательныеРабочиеЦентры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРабочиеЦентрыФиксированныхОпераций";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыИсполнителяОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("Операции.Операция"));
		
	ТаблицаРабочихЦентров = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРабочихЦентров.Индексы.Добавить("ВидРабочегоЦентра");
	ТаблицаРабочихЦентров.Индексы.Добавить("РабочийЦентр");
	ТаблицаРабочихЦентров.Индексы.Добавить("Подразделение");
	
	ПараметрыПланирования.Вставить("ТаблицаРабочихЦентров", ТаблицаРабочихЦентров);
	ПараметрыПланирования.Вставить("МассивРабочихЦентров", 	ТаблицаРабочихЦентров.ВыгрузитьКолонку("РабочийЦентр"));
	
КонецПроцедуры

Процедура ИнициализироватьОграниченияЗагрузкиРабочихЦентров(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.Ссылка КАК ВидРабочегоЦентра,
	|	ВидыРабочихЦентров.РезервДоступности КАК РезервДоступности,
	|	100 - ВидыРабочихЦентров.РезервДоступности КАК ПроцентМаксЗагрузки
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра
	|			ИЗ
	|				Справочник.РабочиеЦентры КАК РабочиеЦентры
	|			ГДЕ
	|				РабочиеЦентры.Ссылка В
	|					(ВЫБРАТЬ
	|						РабочиеЦентры.РабочийЦентр
	|					ИЗ
	|						втРабочиеЦентры КАК РабочиеЦентры))";
		
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("ВидРабочегоЦентра");
	
	ПараметрыПланирования.Вставить("ОграниченияЗагрузкиРабочихЦентров", Результат);
	
КонецПроцедуры

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * ОперацияПредшествующая - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперацииПредшествующий - Число -
// * ПредшествующаяОперацияУчаствуетВРасчете - Булево -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// * ОперацияУчаствуетВРасчете - Булево -
Функция ИнициализироватьТаблицуЗависимостейОпераций()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Результат.Колонки.Добавить("ОперацияПредшествующая", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	Результат.Колонки.Добавить("ИдентификаторОперацииПредшествующий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("ПредшествующаяОперацияУчаствуетВРасчете", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	Результат.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("ОперацияУчаствуетВРасчете", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьЗависимостиОпераций(ПараметрыПланирования, МенеджерВременныхТаблиц)
	
	ТаблицаЗависимостей = ПараметрыПланирования.ТаблицаЗависимостейОпераций;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Очередь.Этап КАК Этап,
	|	Очередь.Операция КАК Операция,
	|	Очередь.ИдентификаторОперации КАК ИдентификаторОперации,
	|	Очередь.НомерОперации КАК НомерОперации,
	|	Очередь.НомерСледующейОперации КАК НомерСледующейОперации,
	|	ВЫБОР
	|		КОГДА (Очередь.Этап, Очередь.ИдентификаторОперации) В
	|				(ВЫБРАТЬ
	|					Операции.Этап,
	|					Операции.ИдентификаторОперации
	|				ИЗ
	|					ОперацииДляПланирования КАК Операции)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОперацияУчаствуетВРасчете
	|ИЗ
	|	втОчередьОпераций КАК Очередь";
	ПроизводственныеОперации = Запрос.Выполнить().Выгрузить();
	ПроизводственныеОперации.Индексы.Добавить("Этап, НомерОперации");
	
	СтруктураПоискаСледующихОпераций = Новый Структура("Этап, НомерОперации");
	Для Каждого СтрокаПроизводственнойОперации Из ПроизводственныеОперации Цикл
		
		Если СтрокаПроизводственнойОперации.НомерСледующейОперации = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоискаСледующихОпераций.Этап = СтрокаПроизводственнойОперации.Этап;
		СтруктураПоискаСледующихОпераций.НомерОперации = СтрокаПроизводственнойОперации.НомерСледующейОперации;
		
		СтрокиСледующихОпераций = ПроизводственныеОперации.НайтиСтроки(СтруктураПоискаСледующихОпераций);
		Для Каждого СтрокаСледующейОперации Из СтрокиСледующихОпераций Цикл
			СтрокаЗависимостей = ТаблицаЗависимостей.Добавить();
			СтрокаЗависимостей.Этап = СтрокаПроизводственнойОперации.Этап;
			СтрокаЗависимостей.ОперацияПредшествующая = СтрокаПроизводственнойОперации.Операция;
			СтрокаЗависимостей.ИдентификаторОперацииПредшествующий = СтрокаПроизводственнойОперации.ИдентификаторОперации;
			СтрокаЗависимостей.ПредшествующаяОперацияУчаствуетВРасчете = СтрокаПроизводственнойОперации.ОперацияУчаствуетВРасчете;
			СтрокаЗависимостей.Операция = СтрокаСледующейОперации.Операция;
			СтрокаЗависимостей.ИдентификаторОперации = СтрокаСледующейОперации.ИдентификаторОперации;
			СтрокаЗависимостей.ОперацияУчаствуетВРасчете = СтрокаСледующейОперации.ОперацияУчаствуетВРасчете
		КонецЦикла;		
		
	КонецЦикла;
	
	ТаблицаЗависимостей.Индексы.Добавить("Этап, ИдентификаторОперацииПредшествующий");
	ТаблицаЗависимостей.Индексы.Добавить("Этап, ИдентификаторОперации");
	ТаблицаЗависимостей.Индексы.Добавить("Этап, ИдентификаторОперации, ПредшествующаяОперацияУчаствуетВРасчете");
	
КонецПроцедуры

Функция СвязанныеОперацииНеУчаствующиеВРасчете(Знач ТаблицаЗависимостейОпераций)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	Результат.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	
	Результат.Индексы.Добавить("Этап, Операция, ИдентификаторОперации");
	
	СтруктураПоиска = Новый Структура("Этап, Операция, ИдентификаторОперации");
	Для Каждого СтрокаЗависимостей Из ТаблицаЗависимостейОпераций Цикл
		
		СтруктураПоиска.Этап = СтрокаЗависимостей.Этап;
		СтруктураПоиска.Операция = СтрокаЗависимостей.Операция;
		СтруктураПоиска.ИдентификаторОперации = СтрокаЗависимостей.ИдентификаторОперации;
		
		Если Не СтрокаЗависимостей.ОперацияУчаствуетВРасчете
			И Результат.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтруктураПоиска);
			
		КонецЕсли;
		
		СтруктураПоиска.Операция = СтрокаЗависимостей.ОперацияПредшествующая;
		СтруктураПоиска.ИдентификаторОперации = СтрокаЗависимостей.ИдентификаторОперацииПредшествующий;
		
		Если Не СтрокаЗависимостей.ПредшествующаяОперацияУчаствуетВРасчете
			И Результат.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтруктураПоиска);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Операции - ТаблицаЗначений - Описание:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// * Начало - Дата - 
// * Окончание - Дата - 
// * РабочийЦентрНазначенный - Строка, СправочникСсылка.РабочиеЦентры -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров -
// * ВремяШтучное - Число - 
// * ВремяПЗ - Число - 
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки - 
// * Подразделение - СправочникСсылка.СтруктураПредприятия -
// * Запланировано - Число -
// * Создано - Число -
// * ОжиданиеПредшествующих - Число -
// * НачатыПредшествующие - Число -
// * МожноВыполнять - Число -
// * Выполняется - Число -
// * Выполнено - Число -
// * ТребуетПовторения - Число -
// * Пропущено - Число -
// * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 -
// * МаршрутнаяКарта - СправочникСсылка.МаршрутныеКарты -
// * КоэффициентМаршрутнойКарты - Число -
// * ВремяОбщее - Число -
// * ВремяЕдИзм - ПеречислениеСсылка.ЕдиницыИзмеренияВремени -
// * НомерОперации - Число -
// * НомерСледующейОперации - Число -
// * Порядок - Число -
Функция ДанныеОтсутствующихОпераций(Операции)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Операции.Этап КАК Этап,
	|	Операции.Операция КАК Операция,
	|	Операции.ИдентификаторОперации КАК ИдентификаторОперации
	|ПОМЕСТИТЬ ТаблицаОпераций
	|ИЗ
	|	&Операции КАК Операции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.Этап КАК Этап,
	|	ПооперационноеРасписание.Операция КАК Операция,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.РабочийЦентр КАК РабочийЦентрНазначенный,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание
	|ПОМЕСТИТЬ ДанныеРасписания
	|ИЗ
	|	ТаблицаОпераций КАК ТаблицаОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|		ПО ТаблицаОпераций.Этап = ПооперационноеРасписание.Этап
	|			И ТаблицаОпераций.Операция = ПооперационноеРасписание.Операция
	|			И ТаблицаОпераций.ИдентификаторОперации = ПооперационноеРасписание.ИдентификаторОперации
	|ГДЕ
	|	ПооперационноеРасписание.Вспомогательная = ЛОЖЬ
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.Этап,
	|	ПооперационноеРасписание.Операция,
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.РабочийЦентр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Операция,
	|	ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеРасписания.Этап КАК Этап,
	|	ДанныеРасписания.Операция КАК Операция,
	|	ДанныеРасписания.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ДанныеРасписания.Начало КАК Начало,
	|	ДанныеРасписания.Окончание КАК Окончание,
	|	ДанныеРасписания.РабочийЦентрНазначенный КАК РабочийЦентрНазначенный,
	|	ДанныеРасписания.Операция.РабочийЦентр КАК РабочийЦентр,
	|	ДанныеРасписания.Операция.ВремяШтучное * ВЫБОР
	|		КОГДА ДанныеРасписания.Операция.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА 86400
	|		КОГДА ДанныеРасписания.Операция.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА 3600
	|		КОГДА ДанныеРасписания.Операция.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА 60
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВремяШтучное,
	|	ДанныеРасписания.Операция.ВремяПЗ * ВЫБОР
	|		КОГДА ДанныеРасписания.Операция.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА 86400
	|		КОГДА ДанныеРасписания.Операция.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА 3600
	|		КОГДА ДанныеРасписания.Операция.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА 60
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВремяПЗ,
	|	ДанныеРасписания.Операция.ВариантНаладки КАК ВариантНаладки,
	|	Очередь.Подразделение КАК Подразделение,
	|	Очередь.Запланировано КАК Запланировано,
	|	Очередь.Создано КАК Создано,
	|	Очередь.ОжиданиеПредшествующих КАК ОжиданиеПредшествующих,
	|	Очередь.НачатыПредшествующие КАК НачатыПредшествующие,
	|	Очередь.МожноВыполнять КАК МожноВыполнять,
	|	Очередь.Выполняется КАК Выполняется,
	|	Очередь.Выполнено КАК Выполнено,
	|	Очередь.ТребуетПовторения КАК ТребуетПовторения,
	|	Очередь.Пропущено КАК Пропущено,
	|	Очередь.Распоряжение КАК Распоряжение,
	|	Очередь.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	Очередь.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|	Очередь.ВремяОбщее КАК ВремяВыполнения,
	|	Очередь.ВремяЕдИзм КАК ВремяВыполненияЕдИзм,
	|	Очередь.НомерОперации КАК НомерОперации,
	|	Очередь.НомерСледующейОперации КАК НомерСледующейОперации,
	|	Очередь.Порядок КАК Порядок
	|ИЗ
	|	ДанныеРасписания КАК ДанныеРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
	|		ПО ДанныеРасписания.Этап = Очередь.Этап
	|			И ДанныеРасписания.Операция = Очередь.Операция
	|			И ДанныеРасписания.ИдентификаторОперации = Очередь.ИдентификаторОперации";
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ИнициализироватьПараметрыМежоперационныхПереходов(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМежоперационныхПереходов.Подразделение КАК Подразделение,
	|	ПараметрыМежоперационныхПереходов.ВидРабочегоЦентраИсточник КАК Источник,
	|	ПараметрыМежоперационныхПереходов.ВидРабочегоЦентраПриемник КАК Приемник,
	|	ВЫБОР
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода * 60
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода * 3600
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|				ИЛИ ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода * 86400
	|		ИНАЧЕ ПараметрыМежоперационныхПереходов.ВремяПерехода
	|	КОНЕЦ КАК Время
	|ИЗ
	|	РегистрСведений.ПараметрыМежоперационныхПереходов КАК ПараметрыМежоперационныхПереходов
	|ГДЕ
	|	ПараметрыМежоперационныхПереходов.Подразделение В(&Подразделения)");
	
	Запрос.УстановитьПараметр("Подразделения", ПараметрыПланирования.Подразделение);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Подразделение, Источник, Приемник");
	
	ПараметрыПланирования.Вставить("ПараметрыМежоперационныхПереходов", Результат);
	
КонецПроцедуры

Процедура ИнициализироватьДлительностиПереналадки(ПараметрыПланирования)
	
	МассивВидыРабочихЦентров = ПараметрыПланирования.ТаблицаРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДлительностьПереналадки.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ДлительностьПереналадки.ТекущийВариантНаладки КАК ТекущийВариантНаладки,
	|	ДлительностьПереналадки.СледующийВариантНаладки КАК СледующийВариантНаладки,
	|	ВЫБОР
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки * 60
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки * 3600
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|				ИЛИ ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки * 86400
	|		ИНАЧЕ ДлительностьПереналадки.ВремяПереналадки
	|	КОНЕЦ КАК Время
	|ИЗ
	|	РегистрСведений.ДлительностьПереналадки КАК ДлительностьПереналадки
	|ГДЕ
	|	ДлительностьПереналадки.ВидРабочегоЦентра В(&ВидыРабочихЦентров)");
	
	Запрос.УстановитьПараметр("ВидыРабочихЦентров", МассивВидыРабочихЦентров);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("ВидРабочегоЦентра, ТекущийВариантНаладки, СледующийВариантНаладки");
	
	ПараметрыПланирования.Вставить("ДлительностиПереналадки", Результат);
	
КонецПроцедуры

Процедура ИнициализироватьДоступноеВремя(ПараметрыПланирования)
	
	ДоступноеВремя = ДоступноеВремяОборудования(ПараметрыПланирования);
	ЗаполнитьДанныеПредшествованияСледованияДоступногоВремени(ПараметрыПланирования, ДоступноеВремя);
	
	СортироватьТаблицуДоступноеВремя(ДоступноеВремя);
	
	ДоступноеВремя.Индексы.Добавить("РабочийЦентр, Период");
	ДоступноеВремя.Индексы.Добавить("РабочийЦентр, НачалоСмены");
	ДоступноеВремя.Индексы.Добавить("РабочийЦентр");
	ДоступноеВремя.Индексы.Добавить("ВидРабочегоЦентра");
	
	ПараметрыПланирования.Вставить("ДоступноеВремя", ДоступноеВремя);
	
КонецПроцедуры

// Возвращаемое значение:
// 	ТаблицаЗначений - см. РегистрСведений.ПооперационноеРасписание2_2. Обязательные поля:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * ИдентификаторОперации - Число - 
// * РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры - 
// * Начало - Дата - 
// * Окончание - Дата - 
// * ВремяПлан - Число - 
// * КоличествоПартии - Число - 
// * Выполнено - Число - 
// * ВремяПерехода - Число - 
// * Вспомогательная - Булево - 
// * ЛеваяГраница - Дата - 
// * ПраваяГраница- Дата - 
// * ДополнительнаяЗапись - Булево - 
// * ДлительностьИнтервала - Число - 
Функция ИнициализироватьТаблицуРасписание()
	
	Результат = Новый ТаблицаЗначений;
	
	ОперативныйУчетПроизводстваПриПланированииСервер.ЗаполнитьСтруктуруТаблицыПоМетаданнымРегистра("РегистрыСведений", "ПооперационноеРасписание2_2", Результат);
	
	Результат.Индексы.Добавить("ИдентификаторОперации, Вспомогательная");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * НачалоСмены - Дата -
// * ВремяЗанято - Число - 
// * ВремяСмены - Число - 
Функция ИнициализироватьТаблицуЗанятоеВремяПоСменам()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	Результат.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	Результат.Колонки.Добавить("НачалоСмены", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ВремяЗанято", ОписаниеТиповВремяОперацииУвеличинное());
	Результат.Колонки.Добавить("ВремяСмены", ОписаниеТиповВремяОперацииУвеличинное());
	
	Результат.Индексы.Добавить("РабочийЦентр, НачалоСмены");
	Результат.Индексы.Добавить("РабочийЦентр");
	Результат.Индексы.Добавить("ВидРабочегоЦентра");
	
	Возврат Результат;
	
КонецФункции

Процедура МодифицироватьТипЗначенияРабочихЦентров(ПараметрыПланирования)
	
	Если СценарииИспользуются(ПараметрыПланирования) Тогда
		
		ДобавляемыеТипы = "Строка";
		КвалификаторыСтроки = Новый КвалификаторыСтроки(100);
		
		Для Каждого Параметр Из ПараметрыПланирования Цикл
			
			Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
				
				ТаблицаИзПараметровПланирования = Параметр.Значение;//ТаблицаЗначений - 
				
				Для Каждого Колонка Из ТаблицаИзПараметровПланирования.Колонки Цикл
					
					Если Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.РабочиеЦентры"))
						И Не Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
						
						ДобавитьТипВТипЗначенияКолонкиТаблицы(Параметр.Значение, Колонка.Имя, ДобавляемыеТипы,, КвалификаторыСтроки);
							
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СценарииИспользуются(Знач ПараметрыПланирования)
	
	Результат = Ложь;
	
	Для Каждого Строка Из ПараметрыПланирования.ПараметрыМоделейПланирования Цикл
		Если ЗначениеЗаполнено(Строка.СценарийПланирования) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьРангиРабочихЦентров(ПараметрыПланирования)
	
	Ранги = ПараметрыПланирования.ТаблицаОпераций.Скопировать(, "ВидРабочегоЦентра, ВремяРазместить, Загрузка");
	
	Для Каждого Строка Из Ранги Цикл
		Если ЗначениеЗаполнено(Строка.Загрузка) Тогда
			Строка.ВремяРазместить = Строка.ВремяРазместить * Строка.Загрузка;
		КонецЕсли;
	КонецЦикла;
	
	Ранги.Свернуть("ВидРабочегоЦентра", "ВремяРазместить");
	Ранги.Колонки.ВремяРазместить.Имя = "ВремяЗагрузка";
	Ранги.Колонки.Добавить("ВремяДоступно", ОписаниеТиповВремяОперацииУвеличинное());
	Ранги.Колонки.Добавить("Ранг", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 5)));
	
	РассчитатьРангиРабочихЦентров(ПараметрыПланирования, Ранги);
	
	Ранги.Индексы.Добавить("ВидРабочегоЦентра");

	ПараметрыПланирования.Вставить("РангиРабочихЦентров", Ранги);
	
КонецПроцедуры

Процедура РассчитатьРангиРабочихЦентров(Знач ПараметрыПланирования, Ранги)
	
	ВремяДоступно = ПараметрыПланирования.ЗанятоеВремяПоСменам.Скопировать(, "ВидРабочегоЦентра, ВремяЗанято, ВремяСмены");
	ВремяДоступно.Свернуть("ВидРабочегоЦентра", "ВремяЗанято, ВремяСмены");
	ВремяДоступно.Индексы.Добавить("ВидРабочегоЦентра");
	
	Для Каждого Строка Из Ранги Цикл
		
		СтрокаПоиска = ВремяДоступно.Найти(Строка.ВидРабочегоЦентра, "ВидРабочегоЦентра");
		Если СтрокаПоиска = Неопределено Тогда
			
			Строка.Ранг = 0;
			
		Иначе
			
			Строка.ВремяДоступно = СтрокаПоиска.ВремяСмены - СтрокаПоиска.ВремяЗанято;
			
			Если Не Строка.ВремяДоступно = 0 Тогда
				
				Строка.Ранг = Строка.ВремяЗагрузка / Строка.ВремяДоступно;
				
			Иначе
				Строка.Ранг = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Ранги.Сортировать("Ранг Возр");
	
КонецПроцедуры

Процедура ИнициализироватьПриоритетыЭтаповОпераций(ПараметрыПланирования)
	
	Приоритеты = ПриоритетыЭтаповОпераций(ПараметрыПланирования);
	
	УсловиеПоиска = Новый Структура("Этап");
	Для Каждого Строка Из Приоритеты Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
		СтрокиПоиска = ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(УсловиеПоиска);
		Для Каждого Операция Из СтрокиПоиска Цикл
			Операция.ПриоритетЭтапа = Строка.Приоритет;
		КонецЦикла;
		
	КонецЦикла;
	
	Приоритеты.Свернуть("Приоритет");
	ПараметрыПланирования.Вставить("ПриоритетыЭтапов", Приоритеты.ВыгрузитьКолонку("Приоритет"));
	
КонецПроцедуры

Функция ПриоритетыЭтаповОпераций(ПараметрыПланирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	График.ЭтапПроизводства КАК Этап,
	|	График.Распоряжение.Приоритет.РеквизитДопУпорядочивания КАК РаспоряжениеПриоритет,
	|	МИНИМУМ(График.НачалоЭтапа) КАК Начало,
	|	МАКСИМУМ(График.ОкончаниеЭтапа) КАК Окончание
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|ГДЕ
	|	График.ЭтапПроизводства В(&Этапы)
	|	И График.СтатусГрафика = &СтатусРабочийГрафик
	|
	|СГРУППИРОВАТЬ ПО
	|	График.ЭтапПроизводства,
	|	График.Распоряжение.Приоритет.РеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("Этапы", ПараметрыПланирования.МассивЭтапов);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", ПараметрыПланирования.СтатусРабочийГрафик);
	Этапы = Запрос.Выполнить().Выгрузить();
	
	Этапы.Колонки.Добавить("Категория", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	Этапы.Колонки.Добавить("Напряженность", Новый ОписаниеТипов("Число"));
	Этапы.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	РассчитатКатегориюИНапряженностьЭтапов(ПараметрыПланирования, Этапы);
	Этапы.Сортировать("Категория Возр, Напряженность Убыв, Начало Возр, РаспоряжениеПриоритет Возр");
	РассчитатьПриоритетЭтапов(Этапы);
	
	Возврат Этапы;
	
КонецФункции

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	Этапы - ТаблицаЗначений - где:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * РаспоряжениеПриоритет - Число -
// * Начало - Дата - 
// * Окончание - Дата - 
Процедура РассчитатКатегориюИНапряженностьЭтапов(Знач ПараметрыПланирования, Этапы)
	
	Для Каждого Строка Из Этапы Цикл
		
		Если Строка.Окончание <= ПараметрыПланирования.МоментПланирования Тогда
			
			Строка.Категория = 1;
			Строка.Напряженность = ПараметрыПланирования.МоментПланирования - Строка.Окончание;
			
		ИначеЕсли Строка.Начало < ПараметрыПланирования.МоментПланирования Тогда
			
			Строка.Категория = 2;
			ОстатокОпераций = ВремяНеразмещенныхОперацийЭтапа(ПараметрыПланирования, Строка.Этап);
			ОстатокВремени = Строка.Окончание - ПараметрыПланирования.МоментПланирования;
			Строка.Напряженность = ОстатокОпераций / ОстатокВремени;
			
		Иначе
			
			Строка.Категория = 3;
			Строка.Напряженность = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВремяНеразмещенныхОперацийЭтапа(Знач ПараметрыПланирования, Знач Этап)
	
	Результат = 0;
	
	УсловиеПоиска = Новый Структура("Этап", Этап);
	СтрокиПоиска = ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(УсловиеПоиска);
	Для Каждого Строка Из СтрокиПоиска Цикл
		Результат = Результат + Строка.ВремяРазместить;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьПриоритетЭтапов(Этапы)
	
	КолЭтапов = Этапы.Количество();
	
	Если КолЭтапов > 0 Тогда
		КолПартий = Окр(Log(КолЭтапов));
		КолПартий = ?(КолПартий > 0, КолПартий, 1);
	Иначе
		КолПартий = 1;
	КонецЕсли;
	
	РазмерПартии = Окр(КолЭтапов/КолПартий);
	
	СчЭтапов = 0;
	НомерПартии = 1;
	Для Каждого Строка Из Этапы Цикл
		Строка.Приоритет = НомерПартии;
		СчЭтапов = СчЭтапов + 1;
		
		Если СчЭтапов = РазмерПартии Тогда
			СчЭтапов = 0;
			НомерПартии = НомерПартии + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2
// * ИдентификаторОперации - Число
// * ВремяПерехода - Число
Функция ИнициализироватьТаблицуМежоперационныеПереходы()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Этап");
	Результат.Колонки.Добавить("ИдентификаторОперации");
	Результат.Колонки.Добавить("ВремяПерехода");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// * НомерПартии - Число -
// * Количество - Число -
// * Создано - Число -
Функция ИнициализироватьТаблицуНеразмещенныеФиксированныеПартии()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	Результат.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("НомерПартии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("Создано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	
	Результат.Индексы.Добавить("Этап, Операция, ИдентификаторОперации");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДоступноеВремяРабочихЦентров

Функция ДоступноеВремяОборудования(ПараметрыПланирования)
	
	ДоступноеВремя = ИнициализироватьДоступноеВремяОборудования();
	
	ФондВремени = ФондВремениОборудования(ПараметрыПланирования);
	ВыборкаРЦ = ФондВремени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРЦ.Следующий() Цикл
		
		ВыборкаСмена = ВыборкаРЦ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСмена.Следующий() Цикл
			
			Если ВыборкаСмена.ПараллельнаяЗагрузка Тогда
				ВремяЗанято = ВыборкаСмена.ВремяЗанятоПараллельнаяЗагрузка;
				ВремяСмены = ВыборкаСмена.ВремяСмены * ВыборкаСмена.МаксимальнаяЗагрузка;
			Иначе
				ВремяЗанято = ВыборкаСмена.ВремяЗанято;
				ВремяСмены = ВыборкаСмена.ВремяСмены;
			КонецЕсли;
			
			ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ВыборкаСмена, ВремяЗанято, ВремяСмены);
			
			Если ВремяЗанято < ВремяСмены Тогда
				Выборка = ВыборкаСмена.Выбрать();
				
				Если ВыборкаСмена.ПараллельнаяЗагрузка Тогда
					ЗаполнитьДоступноеВремяСменыПараллельнаяЗагрузка(ДоступноеВремя, Выборка, ВыборкаСмена);
				Иначе
					ЗаполнитьДоступноеВремяСмены(ДоступноеВремя, Выборка, ВыборкаСмена.НачалоСмены, ВыборкаСмена.ОкончаниеСмены);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДоступноеВремя;
	
КонецФункции

Процедура ЗаполнитьДоступноеВремяСменыПараллельнаяЗагрузка(ДоступноеВремя, Выборка, ВыборкаСмена)
	
	Выборка.Следующий();
	ЗафиксироватьДоступноеВремя(
		ДоступноеВремя,
		Выборка,
		ВыборкаСмена.НачалоСмены,
		ВыборкаСмена.ОкончаниеСмены,
		ВыборкаСмена.МаксимальнаяЗагрузка,
		ВыборкаСмена.ВремяСмены);
	
	ЕстьЗанятыеИнтервалы = Выборка.ВремяЗанятоПараллельнаяЗагрузка > 0;
	
	Если ЕстьЗанятыеИнтервалы Тогда

		ДобавленнаяСтрока = ПоследняяСтрокаТаблицыДоступноеВремя(ДоступноеВремя);

		ДобавленнаяСтрока.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();

		ДоступныеИнтервалы = Новый Массив; //Массив из см. ПоследняяСтрокаТаблицыДоступноеВремя
		ДоступныеИнтервалы.Добавить(ДобавленнаяСтрока);
		
		ИнтервалыИсключить = Новый Массив;
		
		Выборка.Сбросить();
	    Пока Выборка.Следующий() Цикл
			
			ЗанятоНачало = Выборка.ЗанятоНачало;
			ЗанятоОкончание = Выборка.ЗанятоОкончание;
			
			ТекущийИндекс = 0;
			Пока ТекущийИндекс <= ДоступныеИнтервалы.ВГраница() Цикл
				
				ДоступныйИнтервал = ДоступныеИнтервалы[ТекущийИндекс]; 
				
				Если ЗанятоНачало = ДоступныйИнтервал.Начало 
					И ЗанятоОкончание = ДоступныйИнтервал.Окончание Тогда
					
					// Занятый интервал идентичен доступному.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						ДоступныеИнтервалы.Удалить(ТекущийИндекс);
					Иначе
						ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
						ДоступныйИнтервал.ВариантНаладки = Выборка.ВариантНаладки;
					КонецЕсли;
					Прервать;
					
				ИначеЕсли ЗанятоНачало = ДоступныйИнтервал.Начало Тогда
					
					// Занятый интервал прижат к левой границе доступного.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						
						Если ЗанятоОкончание >= ДоступныйИнтервал.Окончание Тогда
							ЗанятоНачало = ДоступныйИнтервал.Окончание;
							ДоступныеИнтервалы.Удалить(ТекущийИндекс);
						Иначе
							ДоступныйИнтервал.Начало = ЗанятоОкончание;
							ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
							Прервать;
						КонецЕсли;
						
					Иначе
						
						Если ЗанятоОкончание >= ДоступныйИнтервал.Окончание Тогда
							ЗанятоНачало = ДоступныйИнтервал.Окончание;
							ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
							ДоступныйИнтервал.ВариантНаладки = Выборка.ВариантНаладки;
							ТекущийИндекс = ТекущийИндекс + 1;
						Иначе
							ЗафиксироватьДоступноеВремя(ДоступноеВремя, ДоступныйИнтервал, ЗанятоОкончание, ДоступныйИнтервал.Окончание, ДоступныйИнтервал.ДоступнаяЗагрузка);
							ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицыДоступноеВремя(ДоступноеВремя));
							
							ДоступныйИнтервал.Окончание = ЗанятоОкончание;
							ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
							ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
							ДоступныйИнтервал.ВариантНаладки = Выборка.ВариантНаладки;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
						
				ИначеЕсли ЗанятоНачало < ДоступныйИнтервал.Окончание 
					И ЗанятоОкончание >= ДоступныйИнтервал.Окончание Тогда
					
					// Занятый интервал прижат к правой границе доступного.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						ОкончаниеДоИзменения = ДоступныйИнтервал.Окончание;
						ДоступныйИнтервал.Окончание = ЗанятоНачало;
						ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
						ТекущийИндекс = ТекущийИндекс + 1;
					Иначе
						ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, ЗанятоНачало, ДоступныйИнтервал.Окончание, ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицыДоступноеВремя(ДоступноеВремя));
						
						ТекущийИндекс = ТекущийИндекс + 2;
						
						ОкончаниеДоИзменения = ДоступныйИнтервал.Окончание;
						ДоступныйИнтервал.Окончание = ЗанятоНачало;
						ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
					КонецЕсли;
					
					Если ЗанятоОкончание > ОкончаниеДоИзменения Тогда
						ЗанятоНачало = ОкончаниеДоИзменения;
					Иначе
						Прервать;
					КонецЕсли;
				
				ИначеЕсли ЗанятоНачало > ДоступныйИнтервал.Начало 
					И ЗанятоОкончание < ДоступныйИнтервал.Окончание Тогда
					
					// Занятый интервал находится внутри доступного.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, ДоступныйИнтервал, ЗанятоОкончание, ДоступныйИнтервал.Окончание, ДоступныйИнтервал.ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицыДоступноеВремя(ДоступноеВремя));
					Иначе
						ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, ЗанятоНачало, ЗанятоОкончание, ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицыДоступноеВремя(ДоступноеВремя));
						
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, ДоступныйИнтервал, ЗанятоОкончание, ДоступныйИнтервал.Окончание, ДоступныйИнтервал.ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 2, ПоследняяСтрокаТаблицыДоступноеВремя(ДоступноеВремя));
					КонецЕсли;
					
					ДоступныйИнтервал.Окончание = ЗанятоНачало;
					ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
					Прервать;
					
				Иначе
					ТекущийИндекс = ТекущийИндекс + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоступноеВремяСмены(ДоступноеВремя, Выборка, НачалоСмены, ОкончаниеСмены)
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.ЗанятоНачало) Тогда
			
			Если Не Выборка.НачалоСмены = Выборка.ЗанятоНачало Тогда
				ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Выборка.НачалоСмены, Выборка.ЗанятоНачало);
			КонецЕсли;
			
			Если Не Выборка.ЗанятоОкончание = Выборка.ОкончаниеСмены Тогда
				ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Выборка.ЗанятоОкончание, Выборка.ОкончаниеСмены);
			КонецЕсли;
			
		Иначе
			ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Выборка.НачалоСмены, Выборка.ОкончаниеСмены, , Выборка.ВремяСмены);
		КонецЕсли;
		
	Иначе
		
		Начало = НачалоСмены;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЗанятоНачало = Начало Тогда
				Начало = Выборка.ЗанятоОкончание;
				Продолжить;
			Иначе
				ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Начало, Выборка.ЗанятоНачало);
				Начало = Выборка.ЗанятоОкончание;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Начало = ОкончаниеСмены Тогда
			Выборка.Сбросить();
			Выборка.Следующий();
			ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Начало, ОкончаниеСмены);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
Функция ИнициализироватьДоступноеВремяОборудования()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	Результат.Колонки.Добавить("ПараллельнаяЗагрузка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СинхроннаяЗагрузка", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	Результат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	Результат.Колонки.Добавить("НачалоСмены", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	Результат.Колонки.Добавить("Время", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ВремяСмены", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Результат.Колонки.Добавить("МаксимальнаяЗагрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ДоступнаяЗагрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Результат.Колонки.Добавить("ВариантНаладки", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	
	Результат.Колонки.Добавить("ПредшествуетЗагрузка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВариантНаладкиПредшествует", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	
	Результат.Колонки.Добавить("СледуетЗагрузка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВариантНаладкиСледует", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	
	Возврат Результат;
	
КонецФункции

Функция ФондВремениОборудования(ПараметрыПланирования)
	
	ТекстЗапроса = ТекстЗапросаФондВремениОборудования();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	
	Запрос.УстановитьПараметр("Начало", Границы.Начало);
	Запрос.УстановитьПараметр("Окончание",  Границы.Окончание);
	Запрос.УстановитьПараметр("РабочиеЦентры", ПараметрыПланирования.МассивРабочихЦентров);
	Запрос.УстановитьПараметр("МодельРасписания", ПараметрыПланирования.МодельРасписания);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТекстЗапросаФондВремениОборудования()
	
	Результат = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.Этап КАК Этап,
	|	ПооперационноеРасписание.Операция КАК Операция,
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.НомерПартии КАК НомерПартии
	|ПОМЕСТИТЬ НеактуальныеОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступностьРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
	|	ДоступностьРабочихЦентров.Начало КАК Начало,
	|	ДоступностьРабочихЦентров.Окончание КАК Окончание,
	|	РАЗНОСТЬДАТ(ДоступностьРабочихЦентров.Начало, ДоступностьРабочихЦентров.Окончание, СЕКУНДА) КАК Время
	|ПОМЕСТИТЬ СвободноеВремя
	|ИЗ
	|	РегистрСведений.ДоступностьРабочихЦентров КАК ДоступностьРабочихЦентров
	|ГДЕ
	|	(ДоступностьРабочихЦентров.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ ДоступностьРабочихЦентров.Окончание МЕЖДУ &Начало И &Окончание)
	|	И ДоступностьРабочихЦентров.РабочийЦентр В(&РабочиеЦентры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр,
	|	Начало,
	|	Окончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РемонтыРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
	|	РемонтыРабочихЦентров.ДатаНачала КАК Начало,
	|	РемонтыРабочихЦентров.ДатаЗавершения КАК Окончание,
	|	РемонтыРабочихЦентров.РабочийЦентр.МаксимальнаяЗагрузка КАК Загрузка,
	|	ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка) КАК ВариантНаладки
	|ПОМЕСТИТЬ ЗанятыеИнтервалы
	|ИЗ
	|	РегистрСведений.РемонтыРабочихЦентров КАК РемонтыРабочихЦентров
	|ГДЕ
	|	(РемонтыРабочихЦентров.ДатаНачала МЕЖДУ &Начало И &Окончание
	|			ИЛИ РемонтыРабочихЦентров.ДатаЗавершения МЕЖДУ &Начало И &Окончание)
	|	И РемонтыРабочихЦентров.РабочийЦентр В(&РабочиеЦентры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры),
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ПооперационноеРасписание.Загрузка,
	|	ПооперационноеРасписание.Операция.ВариантНаладки
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|ГДЕ
	|	(ПооперационноеРасписание.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ ПооперационноеРасписание.Окончание МЕЖДУ &Начало И &Окончание)
	|	И ПооперационноеРасписание.РабочийЦентр В(&РабочиеЦентры)
	|	И НЕ (ПооперационноеРасписание.Этап, ПооперационноеРасписание.Операция, ПооперационноеРасписание.ИдентификаторОперации, ПооперационноеРасписание.НомерПартии) В
	|				(ВЫБРАТЬ
	|					НеактуальныеОперации.Этап,
	|					НеактуальныеОперации.Операция,
	|					НеактуальныеОперации.ИдентификаторОперации,
	|					НеактуальныеОперации.НомерПартии
	|				ИЗ
	|					НеактуальныеОперации)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И ПооперационноеРасписание.КоличествоПартии <> (ПооперационноеРасписание.Выполнено + ПооперационноеРасписание.Пропущено - ПооперационноеРасписание.ТребуетПовторения)
	|	И (ПооперационноеРасписание.Создано = 0
	|			ИЛИ ПооперационноеРасписание.Создано <> (ПооперационноеРасписание.Выполнено + ПооперационноеРасписание.Пропущено - ПооперационноеРасписание.ТребуетПовторения))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр,
	|	Начало,
	|	Окончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр КАК РабочийЦентр,
	|	ЗанятыеИнтервалы.Начало КАК Начало,
	|	ЗанятыеИнтервалы.Окончание КАК Окончание,
	|	ЗанятыеИнтервалы.Загрузка КАК Загрузка,
	|	ЗанятыеИнтервалы.ВариантНаладки КАК ВариантНаладки
	|ПОМЕСТИТЬ ЗанятыеИнтервалыПриведенные
	|ИЗ
	|	ЗанятыеИнтервалы КАК ЗанятыеИнтервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободноеВремя КАК СвободноеВремя
	|		ПО ЗанятыеИнтервалы.РабочийЦентр = СвободноеВремя.РабочийЦентр
	|			И (ЗанятыеИнтервалы.Начало МЕЖДУ СвободноеВремя.Начало И СвободноеВремя.Окончание)
	|			И (ЗанятыеИнтервалы.Окончание МЕЖДУ СвободноеВремя.Начало И СвободноеВремя.Окончание)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалы.Начало >= СвободноеВремя.Начало
	|			ТОГДА ЗанятыеИнтервалы.Начало
	|		ИНАЧЕ СвободноеВремя.Начало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалы.Окончание <= СвободноеВремя.Окончание
	|			ТОГДА ЗанятыеИнтервалы.Окончание
	|		ИНАЧЕ СвободноеВремя.Окончание
	|	КОНЕЦ,
	|	ЗанятыеИнтервалы.Загрузка,
	|	ЗанятыеИнтервалы.ВариантНаладки
	|ИЗ
	|	ЗанятыеИнтервалы КАК ЗанятыеИнтервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободноеВремя КАК СвободноеВремя
	|		ПО ЗанятыеИнтервалы.РабочийЦентр = СвободноеВремя.РабочийЦентр
	|			И (ЗанятыеИнтервалы.Начало >= СвободноеВремя.Начало
	|					И ЗанятыеИнтервалы.Начало < СвободноеВремя.Окончание
	|					И ЗанятыеИнтервалы.Окончание > СвободноеВремя.Окончание
	|				ИЛИ ЗанятыеИнтервалы.Окончание > СвободноеВремя.Начало
	|					И ЗанятыеИнтервалы.Окончание <= СвободноеВремя.Окончание
	|					И ЗанятыеИнтервалы.Начало < СвободноеВремя.Начало)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр,
	|	СвободноеВремя.Начало,
	|	СвободноеВремя.Окончание,
	|	ЗанятыеИнтервалы.Загрузка,
	|	ЗанятыеИнтервалы.ВариантНаладки
	|ИЗ
	|	ЗанятыеИнтервалы КАК ЗанятыеИнтервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободноеВремя КАК СвободноеВремя
	|		ПО ЗанятыеИнтервалы.РабочийЦентр = СвободноеВремя.РабочийЦентр
	|			И ЗанятыеИнтервалы.Начало < СвободноеВремя.Начало
	|			И ЗанятыеИнтервалы.Окончание > СвободноеВремя.Окончание
	|			И (СвободноеВремя.Начало МЕЖДУ ЗанятыеИнтервалы.Начало И ЗанятыеИнтервалы.Окончание)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр,
	|	Начало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр КАК РабочийЦентр,
	|	СвободноеВремя.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	СвободноеВремя.РабочийЦентр.МаксимальнаяЗагрузка КАК МаксимальнаяЗагрузка,
	|	СвободноеВремя.РабочийЦентр.ВидРабочегоЦентра.ПараллельнаяЗагрузка КАК ПараллельнаяЗагрузка,
	|	ВЫБОР
	|		КОГДА СвободноеВремя.РабочийЦентр.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СинхроннаяЗагрузка,
	|	СвободноеВремя.Начало КАК НачалоСмены,
	|	СвободноеВремя.Окончание КАК ОкончаниеСмены,
	|	СвободноеВремя.Время КАК ВремяСмены,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Начало, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗанятоНачало,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Окончание, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗанятоОкончание,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалыПриведенные.Начало ЕСТЬ НЕ NULL 
	|			ТОГДА РАЗНОСТЬДАТ(ЗанятыеИнтервалыПриведенные.Начало, ЗанятыеИнтервалыПриведенные.Окончание, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяЗанято,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалыПриведенные.Начало ЕСТЬ НЕ NULL 
	|			ТОГДА РАЗНОСТЬДАТ(ЗанятыеИнтервалыПриведенные.Начало, ЗанятыеИнтервалыПриведенные.Окончание, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Загрузка, 0) КАК ВремяЗанятоПараллельнаяЗагрузка,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Загрузка, 0) КАК Загрузка,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.ВариантНаладки, ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка)) КАК ВариантНаладки
	|ИЗ
	|	СвободноеВремя КАК СвободноеВремя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗанятыеИнтервалыПриведенные КАК ЗанятыеИнтервалыПриведенные
	|		ПО СвободноеВремя.РабочийЦентр = ЗанятыеИнтервалыПриведенные.РабочийЦентр
	|			И (ЗанятыеИнтервалыПриведенные.Начало >= СвободноеВремя.Начало)
	|			И (ЗанятыеИнтервалыПриведенные.Начало < СвободноеВремя.Окончание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоСмены,
	|	ЗанятоНачало
	|ИТОГИ
	|	МАКСИМУМ(МаксимальнаяЗагрузка),
	|	МАКСИМУМ(ОкончаниеСмены),
	|	МАКСИМУМ(ВремяСмены),
	|	СУММА(ВремяЗанято),
	|	СУММА(ВремяЗанятоПараллельнаяЗагрузка),
	|	СУММА(Загрузка)
	|ПО
	|	РабочийЦентр,
	|	НачалоСмены";
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ДоступноеВремя - ТаблицаЗначений - Описание:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
// 	ЗначенияЗаполнения - Структура, ВыборкаИзРезультатаЗапроса - Описание:
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - Строка -
// 	Начало - Дата - 
// 	Окончание - Дата - 
// 	ДоступнаяЗагрузка - Число - 
// 	Время - Число - 
Процедура ЗафиксироватьДоступноеВремя(ДоступноеВремя, Знач ЗначенияЗаполнения, Знач Начало, Знач Окончание, Знач ДоступнаяЗагрузка=0, Знач Время=0)
	
	НоваяСтрока = ДоступноеВремя.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
	
	НоваяСтрока.Период = НачалоДня(Начало);
	НоваяСтрока.Начало = Начало;
	НоваяСтрока.Окончание = Окончание;
	
	Если ЗначениеЗаполнено(Время) Тогда
		НоваяСтрока.Время = Время;
	Иначе
		НоваяСтрока.Время = НоваяСтрока.Окончание - НоваяСтрока.Начало;
	КонецЕсли;
	
	НоваяСтрока.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ВариантНаладки) 
		И (Не НоваяСтрока.ПараллельнаяЗагрузка
		Или НоваяСтрока.ДоступнаяЗагрузка = НоваяСтрока.МаксимальнаяЗагрузка) Тогда
		
		НоваяСтрока.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	ДанныеЗаполнения - Структура, ВыборкаИзРезультатаЗапроса - Описание:
// * СинхроннаяЗагрузка - Булево -
// * ПараллельнаяЗагрузка - Булево -
// * МаксимальнаяЗагрузка - Число -
// * ВремяСмены - Число -
// * РабочийЦентр - Произвольный -
// 	ВремяЗанято - Число - Описание
// 	ВремяСмены - Число - Описание
Процедура ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, Знач ДанныеЗаполнения, Знач ВремяЗанято, Знач ВремяСмены)
	
	НоваяСтрока = ПараметрыПланирования.ЗанятоеВремяПоСменам.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.ВремяЗанято = ВремяЗанято;
	НоваяСтрока.ВремяСмены = ВремяСмены;
	
КонецПроцедуры

Функция ЗаполнитьДанныеПредшествованияСледованияДоступногоВремени(Знач ПараметрыПланирования, ДоступноеВремя)
	
	ДоступноеВремяКопия = ДоступноеВремя.Скопировать();
	ДоступноеВремяКопия.Колонки.Добавить("Свободен");
	ДоступноеВремяКопия.ЗаполнитьЗначения(Истина, "Свободен");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.Начало КАК Начало,
	|	ПооперационноеРасписание.Окончание КАК Окончание,
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр
	|ПОМЕСТИТЬ НеактуальныеОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Начало,
	|	Окончание,
	|	РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расписание.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	Расписание.РабочийЦентр КАК РабочийЦентр,
	|	Расписание.Начало КАК Начало,
	|	Расписание.Окончание КАК Окончание,
	|	Расписание.Операция.ВариантНаладки КАК ВариантНаладки,
	|	ЛОЖЬ КАК Свободен
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание2_2 КАК Расписание
	|ГДЕ
	|	(Расписание.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ Расписание.Окончание МЕЖДУ &Начало И &Окончание)
	|	И Расписание.РабочийЦентр В(&РабочиеЦентры)
	|	И НЕ (Расписание.Начало, Расписание.Окончание, Расписание.РабочийЦентр) В
	|				(ВЫБРАТЬ
	|					НеактуальныеОперации.Начало КАК Начало,
	|					НеактуальныеОперации.Окончание КАК Окончание,
	|					НеактуальныеОперации.РабочийЦентр КАК РабочийЦентр
	|				ИЗ
	|					НеактуальныеОперации)
	|	И Расписание.Моделирование = ЛОЖЬ
	|	И Расписание.КоличествоПартии <> (Расписание.Выполнено + Расписание.Пропущено - Расписание.ТребуетПовторения)
	|	И (Расписание.Создано = 0
	|			ИЛИ Расписание.Создано <> (Расписание.Выполнено + Расписание.Пропущено - Расписание.ТребуетПовторения))";
	
	Запрос.УстановитьПараметр("МодельРасписания", ПараметрыПланирования.МодельРасписания);
	Запрос.УстановитьПараметр("РабочиеЦентры", ПараметрыПланирования.МассивРабочихЦентров);
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	Запрос.УстановитьПараметр("Начало", Границы.Начало);
	Запрос.УстановитьПараметр("Окончание",  Границы.Окончание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = ДоступноеВремяКопия.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;
	
	ДоступноеВремяКопия.Сортировать("РабочийЦентр, Начало Возр, Окончание Возр", Новый СравнениеЗначений);
	
	ДоступноеВремя.Очистить();
	Для Каждого Строка Из ДоступноеВремяКопия Цикл
		
		Если Не Строка.Свободен Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = ДоступноеВремя.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка);
		ДоступноеВремяЗаполнитьДанныеПредшествования(ДоступноеВремяКопия, Строка, НовСтр);
		ДоступноеВремяЗаполнитьДанныеСледования(ДоступноеВремяКопия, Строка, НовСтр);
		
	КонецЦикла;
	
КонецФункции

Процедура ДоступноеВремяЗаполнитьДанныеПредшествования(Знач Таблица, Знач ТекущаяСтрока, НоваяСтрока)
	
	ПредшествующаяСтрока = ПредшествующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока);
	
	Если ПредшествующаяСтрока = Неопределено
		Или ПредшествующаяСтрока.Свободен
		И (Не ПредшествующаяСтрока.ПараллельнаяЗагрузка
		Или ПредшествующаяСтрока.ДоступнаяЗагрузка = ПредшествующаяСтрока.МаксимальнаяЗагрузка) Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.ПредшествуетЗагрузка = Истина;
	НоваяСтрока.ВариантНаладкиПредшествует = ПредшествующаяСтрока.ВариантНаладки;
	
КонецПроцедуры

// Параметры:
// 	Таблица - см. ИнициализироватьДоступноеВремяОборудования
// 	ТекущаяСтрока - СтрокаТаблицыЗначений - где:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры -
// * Начало - Дата -
// * Окончание - Дата -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений - 
Функция ПредшествующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока)
	
	Результат = Неопределено;
	
	Если ТекущаяСтрока.ПараллельнаяЗагрузка Тогда
		
		ИндексПредшествующей = Таблица.Индекс(ТекущаяСтрока) - 1;
		Пока Истина Цикл
			
			Если ИндексПредшествующей >= 0 Тогда
				
				ПредшествующаяСтрока = Таблица[ИндексПредшествующей];
				Если ПредшествующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
					
					Если ПредшествующаяСтрока.Начало = ТекущаяСтрока.Начало
						И ПредшествующаяСтрока.Окончание = ТекущаяСтрока.Окончание Тогда
						
						ИндексПредшествующей = ИндексПредшествующей - 1;
						
					Иначе
						
						Результат = ПредшествующаяСтрока;
						Прервать;
						
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ИндексПредшествующей = Таблица.Индекс(ТекущаяСтрока) - 1;
		Если ИндексПредшествующей >= 0 Тогда
			
			ПредшествующаяСтрока = Таблица[ИндексПредшествующей];
			Если ПредшествующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
				Результат = ПредшествующаяСтрока;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДоступноеВремяЗаполнитьДанныеСледования(Знач Таблица, Знач ТекущаяСтрока, НоваяСтрока)
	
	СледующаяСтрока = СледующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока);
	
	Если СледующаяСтрока = Неопределено
		Или СледующаяСтрока.Свободен
		И (Не СледующаяСтрока.ПараллельнаяЗагрузка
		Или СледующаяСтрока.ДоступнаяЗагрузка = СледующаяСтрока.МаксимальнаяЗагрузка) Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.СледуетЗагрузка = Истина;
	НоваяСтрока.ВариантНаладкиСледует = СледующаяСтрока.ВариантНаладки;
	
КонецПроцедуры

Функция СледующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока)
	
	Результат = Неопределено;
	НевалидныйИндекс = Таблица.Количество();
	
	Если ТекущаяСтрока.ПараллельнаяЗагрузка Тогда
		
		ИндексСледующей = Таблица.Индекс(ТекущаяСтрока)+1;
		Пока Истина Цикл
			
			Если ИндексСледующей < НевалидныйИндекс Тогда
				
				СледующаяСтрока = Таблица[ИндексСледующей];
				Если СледующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
					
					Если СледующаяСтрока.Начало = ТекущаяСтрока.Начало
						И СледующаяСтрока.Окончание = ТекущаяСтрока.Окончание Тогда
						
						ИндексСледующей = ИндексСледующей + 1;
						
					Иначе
						
						Результат = СледующаяСтрока;
						Прервать;
						
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ИндексСледующей = Таблица.Индекс(ТекущаяСтрока) + 1;
		Если ИндексСледующей < НевалидныйИндекс Тогда
			СледующаяСтрока = Таблица[ИндексСледующей];
			Если СледующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
				Результат = СледующаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СценарииПланирования

Процедура МодифицироватьПараметрыПланированияПоСценариюПланирования(ПараметрыПланирования)
	
	СценарийПланирования = ПараметрыПланирования.СценарийПланирования;
	
	Если ЗначениеЗаполнено(СценарийПланирования) Тогда
		
		СтруктураРеквизитов = Новый Структура("РабочиеЦентрыДобавить, РабочиеЦентрыИсключить, ГрафикиРаботы");
		ДанныеМодели = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СценарийПланирования, СтруктураРеквизитов);
		
		УменьшитьПаркОборудования(ПараметрыПланирования, ДанныеМодели);
		ИзменитьГрафикиРаботыОборудования(ПараметрыПланирования, ДанныеМодели);
		УвеличитьПаркОборудования(ПараметрыПланирования, ДанныеМодели);
		
		РассчитатьРангиРабочихЦентров(ПараметрыПланирования, ПараметрыПланирования.РангиРабочихЦентров);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УвеличитьПаркОборудования(ПараметрыПланирования, Знач ДанныеМодели)
	
	ТаблицаРабочиеЦентрыДобавить = ДанныеМодели.РабочиеЦентрыДобавить.Выгрузить();
	Если ТаблицаРабочиеЦентрыДобавить.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаРабочиеЦентрыДобавить Цикл
		
		УвеличитьПаркОборудованияВТаблицеРабочихЦентров(
			ПараметрыПланирования, Строка.Аналог, Строка.Количество);
		
		УвеличитьПаркОборудованияВТаблицахДоступноеВремяИЗанятоеВремяПоСменам(
			ПараметрыПланирования, Строка.ВидРабочегоЦентра, Строка.Аналог, Строка.Количество);
		
	КонецЦикла;
	
	СортироватьТаблицуДоступноеВремя(ПараметрыПланирования.ДоступноеВремя);
	
КонецПроцедуры

Функция НаименованиеДополнительногоРЦ(Аналог, ПорядковыйНомер)

	АналогНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Аналог, "Наименование");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 (доп. %2)';
			|en = '%1 (addit.%2)'"),
		АналогНаименование,
		ПорядковыйНомер);
		
КонецФункции

Процедура УвеличитьПаркОборудованияВТаблицеРабочихЦентров(ПараметрыПланирования, Знач Аналог, КоличествоРЦ)
	
	ЗначенияЗаполнения = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(Аналог, "РабочийЦентр");
	
	Если Не ЗначенияЗаполнения = Неопределено Тогда
		
		Для Сч = 1 По КоличествоРЦ Цикл
			
			НаименованиеДоп = НаименованиеДополнительногоРЦ(Аналог, Сч);
		 
			НоваяСтрока = ПараметрыПланирования.ТаблицаРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
			НоваяСтрока.РабочийЦентр = НаименованиеДоп;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвеличитьПаркОборудованияВТаблицахДоступноеВремяИЗанятоеВремяПоСменам(
		ПараметрыПланирования, Знач ВидРабочегоЦентра, Знач Аналог, Знач КоличествоРЦ)
	
	ДоступноеВремяАналога = ДоступноеВремяРабочегоЦентраАналога(ПараметрыПланирования, Аналог);
	ПараметрыЗагрузки = ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, ВидРабочегоЦентра);
	ЗначенияЗаполнения = Новый Структура;
	
	Для Сч = 1 По КоличествоРЦ Цикл
		
		НаименованиеДоп = НаименованиеДополнительногоРЦ(Аналог, Сч);
		Для Каждого Строка Из ДоступноеВремяАналога Цикл
			
			ЗначенияЗаполнения.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
			ЗначенияЗаполнения.Вставить("РабочийЦентр", НаименованиеДоп);
			ЗначенияЗаполнения.Вставить("НачалоСмены", Строка.Начало);
			ЗначенияЗаполнения.Вставить("ВремяСмены", Строка.Время);
			ЗначенияЗаполнения.Вставить("МаксимальнаяЗагрузка", ПараметрыЗагрузки.МаксимальнаяЗагрузка);
			ЗначенияЗаполнения.Вставить("ПараллельнаяЗагрузка", ПараметрыЗагрузки.ПараллельнаяЗагрузка);
			ЗначенияЗаполнения.Вставить("СинхроннаяЗагрузка", ПараметрыЗагрузки.СинхроннаяЗагрузка);
			
			ЗафиксироватьДоступноеВремя(
				ПараметрыПланирования.ДоступноеВремя,
				ЗначенияЗаполнения,
				Строка.Начало,
				Строка.Окончание,
				ПараметрыЗагрузки.МаксимальнаяЗагрузка,
				Строка.Время);
				
			Если Не ПараметрыЗагрузки.ПараллельнаяЗагрузка Тогда
				ВремяСмены = Строка.Время;
			Иначе
				ВремяСмены = Строка.Время * ПараметрыЗагрузки.МаксимальнаяЗагрузка;
			КонецЕсли;
			
			ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ЗначенияЗаполнения, 0, ВремяСмены);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДоступноеВремяРабочегоЦентраАналога(Знач ПараметрыПланирования, Знач Аналог)
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	МассивРабочийЦентров = Новый Массив;
	МассивРабочийЦентров.Добавить(Аналог);
	
	Результат = ДоступноеВремяРабочихЦентровПоГрафику(Границы.Начало, Границы.Окончание, МассивРабочийЦентров);
	
	Возврат Результат;
	
КонецФункции

Процедура УменьшитьПаркОборудования(ПараметрыПланирования, Знач ДанныеМодели)

	ТаблицаРабочиеЦентрыИсключить = ДанныеМодели.РабочиеЦентрыИсключить.Выгрузить();
	Если ТаблицаРабочиеЦентрыИсключить.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаРабочиеЦентрыИсключить Цикл
		
		УменьшитьПаркОборудованияВТаблицеРабочихЦентров(ПараметрыПланирования, Строка.РабочийЦентр);
		УменьшитьПаркОборудованияВТаблицеДоступноеВремя(ПараметрыПланирования, Строка.РабочийЦентр);
		УменьшитьПаркОборудованияВТаблицеЗанятоеВремяПоСменам(ПараметрыПланирования, Строка.РабочийЦентр);
		
	КонецЦикла;
	
	СортироватьТаблицуДоступноеВремя(ПараметрыПланирования.ДоступноеВремя);
	
КонецПроцедуры

Процедура УменьшитьПаркОборудованияВТаблицеРабочихЦентров(ПараметрыПланирования, Знач РабочийЦентр)
	
	УсловиеПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	УдалитьСтрокиТаблицыПоУсловию(ПараметрыПланирования.ТаблицаРабочихЦентров, УсловиеПоиска);
	
КонецПроцедуры

Процедура УменьшитьПаркОборудованияВТаблицеДоступноеВремя(ПараметрыПланирования, Знач РабочийЦентр)
	
	УсловиеПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	УдалитьСтрокиТаблицыПоУсловию(ПараметрыПланирования.ДоступноеВремя, УсловиеПоиска);
	
КонецПроцедуры

Процедура УменьшитьПаркОборудованияВТаблицеЗанятоеВремяПоСменам(ПараметрыПланирования, Знач РабочийЦентр)
	
	УсловиеПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	УдалитьСтрокиТаблицыПоУсловию(ПараметрыПланирования.ЗанятоеВремяПоСменам, УсловиеПоиска);
	
КонецПроцедуры

Процедура ИзменитьГрафикиРаботыОборудования(ПараметрыПланирования, Знач ДанныеМодели)

	ТаблицаГрафикиРаботы = ДанныеМодели.ГрафикиРаботы.Выгрузить(); // ТаблицаЗначений - 
	Если ТаблицаГрафикиРаботы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Строка Из ТаблицаГрафикиРаботы Цикл
		
		Границы = ГраницыПланирования(ПараметрыПланирования);
		РасписаниеРаботы = РасписаниеРаботыПоГрафику(Строка.График, Границы.Начало, Границы.Окончание);
		РабочиеЦентры = РабочиеЦентрыДляИзмененияГрафика(ПараметрыПланирования, ТаблицаГрафикиРаботы, Строка);
		
		Для Каждого РабочийЦентр Из РабочиеЦентры Цикл
			
			ВидРабочегоЦентра = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
			ПараметрыЗагрузки = ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, РабочийЦентр);
			
			УменьшитьПаркОборудованияВТаблицеДоступноеВремя(ПараметрыПланирования, РабочийЦентр);
			УменьшитьПаркОборудованияВТаблицеЗанятоеВремяПоСменам(ПараметрыПланирования, РабочийЦентр);
			
			Для Каждого ЗаписьРасписания Из РасписаниеРаботы Цикл
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
				ЗначенияЗаполнения.Вставить("РабочийЦентр", РабочийЦентр);
				ЗначенияЗаполнения.Вставить("НачалоСмены", 	ЗаписьРасписания.Начало);
				ЗначенияЗаполнения.Вставить("ВремяСмены", 	ЗаписьРасписания.Время);
				ЗначенияЗаполнения.Вставить("МаксимальнаяЗагрузка", ПараметрыЗагрузки.МаксимальнаяЗагрузка);
				ЗначенияЗаполнения.Вставить("ПараллельнаяЗагрузка", ПараметрыЗагрузки.ПараллельнаяЗагрузка);
				ЗначенияЗаполнения.Вставить("СинхроннаяЗагрузка", ПараметрыЗагрузки.СинхроннаяЗагрузка);
				
				ЗафиксироватьДоступноеВремя(
				ПараметрыПланирования.ДоступноеВремя,
				ЗначенияЗаполнения,
				ЗаписьРасписания.Начало,
				ЗаписьРасписания.Окончание,
				ПараметрыЗагрузки.МаксимальнаяЗагрузка,
				ЗаписьРасписания.Время);
				
				Если Не ПараметрыЗагрузки.ПараллельнаяЗагрузка Тогда
					ВремяСмены = ЗаписьРасписания.Время;
				Иначе
					ВремяСмены = ЗаписьРасписания.Время * ПараметрыЗагрузки.МаксимальнаяЗагрузка;
				КонецЕсли;
				ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ЗначенияЗаполнения, 0, ВремяСмены);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СортироватьТаблицуДоступноеВремя(ПараметрыПланирования.ДоступноеВремя);
	
КонецПроцедуры

Функция РасписаниеРаботыПоГрафику(График, Начало, Окончание)
	
	Календари = Новый Массив;
	Календари.Добавить(График);
	
	Результат = ПланированиеПроизводства.РасписаниеРаботыПоГрафику(
		Календари, Начало, Окончание);
		
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Время", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Результат.Колонки.ДатаГрафика.Имя = "Период";
	
	Для Каждого Строка Из Результат Цикл
		
		Строка.Начало = Строка.Период + ВремяДатыВСекунды(Строка.ВремяНачала);
		Строка.Окончание = Строка.Начало + Строка.Длительность;
		Строка.Время = Строка.Длительность;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РабочиеЦентрыДляИзмененияГрафика(Знач ПараметрыПланирования, Знач НастройкиМодели, Знач ТекущаяНастройка)
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(ТекущаяНастройка.РабочийЦентр) Тогда
		Результат = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, ТекущаяНастройка.РабочийЦентр);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяНастройка.ВидРабочегоЦентра) Тогда
		РабочиеЦентры = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, ТекущаяНастройка.ВидРабочегоЦентра);
		
		Для Каждого РабочийЦентр Из РабочиеЦентры Цикл
			ИмеетсяУточняющаяСтрока = Ложь;
			Для Каждого Настройка Из НастройкиМодели Цикл
				Если Настройка = ТекущаяНастройка Тогда
					Продолжить;
				ИначеЕсли Настройка.РабочийЦентр = РабочийЦентр Тогда
					ИмеетсяУточняющаяСтрока = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ИмеетсяУточняющаяСтрока Тогда
				Результат.Добавить(РабочийЦентр);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяНастройка.Подразделение) Тогда
		РабочиеЦентры = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, ТекущаяНастройка.Подразделение);
		
		Для Каждого РабочийЦентр Из РабочиеЦентры Цикл
			ИмеетсяУточняющаяСтрока = Ложь;
			ВидРабочегоЦентра = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
			Для Каждого Настройка Из НастройкиМодели Цикл
				Если Настройка = ТекущаяНастройка Тогда
					Продолжить;
				ИначеЕсли Настройка.РабочийЦентр = РабочийЦентр
					Или (Настройка.ВидРабочегоЦентра = ВидРабочегоЦентра
					И Не ЗначениеЗаполнено(Настройка.РабочийЦентр)) Тогда
					ИмеетсяУточняющаяСтрока = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ИмеетсяУточняющаяСтрока Тогда
				Результат.Добавить(РабочийЦентр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПодборРабочихЦентров

Функция РассчитатьПараметрыРазмещенияОперации(ПараметрыПланирования, Операция, ПравилоВыбораРЦ, ПрямоеРазмещение)
	
	Если ЗначениеЗаполнено(Операция.РабочийЦентр) Тогда
		
		ТаблицаАльтернатив = ИнициализироватьТаблицуАльтернативныхРЦ();
		
		РабочиеЦентры = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, Операция.РабочийЦентр);
		Если ЗначениеЗаполнено(РабочиеЦентры) Тогда
			
			// Сначала исключим РЦ, которые нам не подходят по максимальной загрузке.
			РабочиеЦентры = ПроверитьИИсключитьРабочиеЦентрыПоЗагрузке(ПараметрыПланирования, РабочиеЦентры, Операция);
			
			Если РабочиеЦентры = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Для Каждого РабочийЦентр Из РабочиеЦентры Цикл
				
				ПараметрыРазмещения = ПодобратьИнтервалыРазмещенияНаРабочемЦентре(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение);
				
				Если ПараметрыРазмещения = Неопределено Тогда
					Продолжить;
				Иначе
					НоваяСтрока = ТаблицаАльтернатив.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыРазмещения);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТаблицаАльтернатив) Тогда
				
				Результат = ИнициализироватьПараметрыРазмещения();
				ЛучшаяАльтернатива = ЛучшийРабочийЦентрДляРазмещения(ПараметрыПланирования, ТаблицаАльтернатив, ПравилоВыбораРЦ);
				ЗаполнитьЗначенияСвойств(Результат, ЛучшаяАльтернатива);
				
			Иначе
				Результат = Неопределено;
			КонецЕсли;
			
		Иначе
			
			ЗафиксироватьОшибкуНеОпределеныРабочиеЦентры(ПараметрыПланирования, Операция.РабочийЦентр);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ПараметрыРазмещенияОперацииБезРабочегоЦентра(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИИсключитьРабочиеЦентрыПоЗагрузке(ПараметрыПланирования, РабочиеЦентры, Операция)
	
	Если НЕ ЗначениеЗаполнено(Операция.Загрузка) Тогда
		Возврат РабочиеЦентры; // Проверка не требуется.
	КонецЕсли;
	
	РезультатРабочиеЦентры = Новый Массив;
	
	Для Каждого РабочийЦентр Из РабочиеЦентры Цикл
		
		РеквизитыРабочийЦентр = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочийЦентр, "ВидРабочегоЦентра.ПараллельнаяЗагрузка, МаксимальнаяЗагрузка");
		
		Если РеквизитыРабочийЦентр.ВидРабочегоЦентраПараллельнаяЗагрузка 
			И Операция.Загрузка > РеквизитыРабочийЦентр.МаксимальнаяЗагрузка  Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатРабочиеЦентры.добавить(РабочийЦентр);
		
	КонецЦикла;	
	
	Если РезультатРабочиеЦентры.Количество() = 0 Тогда // Не подходит ни один РЦ по максимальной загрузке.
		ЗафиксироватьОшибкуРабочиеЦентрыНеПодошлиПоЗагрузке(ПараметрыПланирования, Операция.РабочийЦентр, Операция);
		Возврат Неопределено;
	Иначе
		Возврат РезультатРабочиеЦентры;
	КонецЕсли;
	
КонецФункции

Функция ПодобратьИнтервалыРазмещенияНаРабочемЦентре(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение)
	
	Результат = ИнициализироватьПараметрыРазмещения();
	ПараметрыПодбора = ИнициализироватьПараметрыПодбораИнтерваловРазмещения(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение);
	
	НулевоеВремя = Операция.ВремяРазместить = 0;
	Пока ПараметрыПодбора.ВремяПлан > 0 ИЛИ НулевоеВремя Цикл
		
		НулевоеВремя = Ложь;
		Отказ = Ложь;
		ПодобратьДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора, Результат, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОпределитьИнтервалРазмещения(ПараметрыПланирования, ПараметрыПодбора, Результат, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ОпределитьИнтервалРазмещенияВспомогательных(ПараметрыПланирования, ПараметрыПодбора, Результат, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		СохранитьИнтервалРазмещения(ПараметрыПланирования, ПараметрыПодбора, Результат);
		
	КонецЦикла;
	
	Результат.РабочийЦентр = РабочийЦентр;
	РассчитатьПоказателиРазмещенияОперацииНаРЦ(ПараметрыПланирования, Результат);
	
	ВосстановитьИсходныеПараметрыПланирования(ПараметрыПланирования, ПараметрыПодбора);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодобратьДоступныйДляРазмещенияИнтервал(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	ПараметрыПодбора.ДоступныйИнтервал = ДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
	
	Если ПараметрыПодбора.ДоступныйИнтервал = Неопределено Тогда
		
		ЗафиксироватьОшибкуНедоступенОснОблсужРЦ(ПараметрыПланирования, ПараметрыПодбора);
		Отказ = Истина;
		
	ИначеЕсли ПараметрыПодбора.ПервыйИнтервал Тогда
		
		ВремяПереналадки = ВремяПереналадкиОперации(ПараметрыПланирования, ПараметрыПодбора.ДоступныйИнтервал, ПараметрыПодбора.Операция);
		
		ПараметрыПодбора.ВремяПереналадки = ВремяПереналадки;
		ПараметрыПодбора.ВремяПлан =  ПараметрыПодбора.ВремяПлан + ВремяПереналадки;
		ПараметрыПодбора.ПервыйИнтервал = Ложь;
		
		ПараметрыРазмещения.ВремяПереналадки = ВремяПереналадки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьИнтервалРазмещения(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	ИнтервалРазмещения = ИнтервалРазмещенияОперации(ПараметрыПланирования, ПараметрыПодбора);
	
	Если ИнтервалРазмещения = Неопределено Тогда
		
		ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, Ложь);
		Отказ = Истина;
		
	Иначе
		
		ПараметрыПодбора.ИнтервалРазмещения = ИнтервалРазмещения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьИнтервалРазмещенияВспомогательных(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	Если ПараметрыПодбора.РазмещатьВспомогательные Тогда
		
		РазмещениеВозможно = ВозможноРазмещениеВспомогательныхРЦНаИнтервале(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
		
		Если РазмещениеВозможно Тогда
				
			ПараметрыПодбора.НедоступныеВспомогательныеРЦ.Очистить();
			
		Иначе
			
			ЗаполнитьНедоступныеВспомогательныеРЦ(ПараметрыРазмещения, ПараметрыПодбора.НедоступныеВспомогательныеРЦ);
			ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, РазмещениеВозможно);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьИнтервалРазмещения(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	ИзменитьПараметрыПланирования = Истина;
	Если ПоследнийИнтервалРазмещения(ПараметрыПодбора) Тогда
		
		МодифицироватьПараметрыПодбораПриСохраненииИнтервала(ПараметрыПодбора, Истина);
		СохранитьНайденныйИнтервал(ПараметрыРазмещения, ПараметрыПодбора.ДоступныйИнтервал, ПараметрыПодбора.ИнтервалРазмещения);
		
	Иначе
		
		Если ДопустимоРазмещениеПромежуточногоИнтервала(ПараметрыПланирования, ПараметрыПодбора) Тогда
			
			МодифицироватьПараметрыПодбораПриСохраненииИнтервала(ПараметрыПодбора, Ложь);
			СохранитьНайденныйИнтервал(ПараметрыРазмещения, ПараметрыПодбора.ДоступныйИнтервал, ПараметрыПодбора.ИнтервалРазмещения);
			
		Иначе
			
			ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения,, Ложь);
			ИзменитьПараметрыПланирования = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменитьПараметрыПланирования Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПодбора.ИнтервалРазмещения.Загрузка) Тогда
			ЗанятоеВремя = ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан * ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
		Иначе
			ЗанятоеВремя = ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
		КонецЕсли;
		
		ОтразитьЗанятоеВремяПоСменам(
			ПараметрыПланирования,
			ПараметрыПодбора.ДоступныйИнтервал,
			ПараметрыПодбора.РабочийЦентр,
			ЗанятоеВремя);
		
		РассчитатьИндексСледующегоДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора);
		
		ПустыеИнтервалы = Новый Массив;
		ИсправитьДоступноеВремя(
			ПараметрыПланирования,
			ПараметрыПодбора.Операция,
			ПараметрыПодбора.ДоступныйИнтервал,
			ПустыеИнтервалы,
			ПараметрыПодбора.ИнтервалРазмещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	ПараметрыПодбора - см. ИнициализироватьПараметрыПодбораИнтерваловРазмещения
Процедура РассчитатьИндексСледующегоДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	ИнтервалРазмещения = ПараметрыПодбора.ИнтервалРазмещения;
	ТекущийИндекс = ДоступноеВремя.Индекс(ДоступныйИнтервал);
	
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если ИнтервалРазмещения.ВремяПлан = ДоступныйИнтервал.Время Тогда
			
			// Занят весь доступный интервал.
			Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
				И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
				СледующийИндекс = ТекущийИндекс;
			Иначе
				Если ПараметрыПодбора.ПрямоеРазмещение Тогда
					СледующийИндекс = ТекущийИндекс + 1;
				Иначе
					СледующийИндекс = ТекущийИндекс - 1;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало Тогда
				
				// Занята левая часть доступного интервала.
				Если ДоступнаяЗагрузка = 0 Тогда
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						СледующийИндекс = ТекущийИндекс;
					Иначе
						СледующийИндекс = ТекущийИндекс - 1;
					КонецЕсли;
				Иначе
					Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
						И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
						СледующийИндекс = ТекущийИндекс;
					Иначе
						Если ПараметрыПодбора.ПрямоеРазмещение Тогда
							СледующийИндекс = ТекущийИндекс + 1;
						Иначе
							СледующийИндекс = ТекущийИндекс - 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание Тогда
				
				// Занята правая часть доступного интервала.
				Если ДоступнаяЗагрузка = 0 Тогда
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						СледующийИндекс = ТекущийИндекс;
					КонецЕсли;
				Иначе
					Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
						И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						Если ПараметрыПодбора.ПрямоеРазмещение Тогда
							СледующийИндекс = ТекущийИндекс + 2;
						Иначе
							СледующийИндекс = ТекущийИндекс;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				// Занята часть внутри доступного интервала.
				Если ДоступнаяЗагрузка = 0 Тогда
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						СледующийИндекс = ТекущийИндекс;
					КонецЕсли;
				Иначе
					Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
						И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						Если ПараметрыПодбора.ПрямоеРазмещение Тогда
							СледующийИндекс = ТекущийИндекс + 2;
						Иначе
							СледующийИндекс = ТекущийИндекс;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			СледующийИндекс = ТекущийИндекс + 1;
		Иначе
			СледующийИндекс = ТекущийИндекс - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИндексСледующегоДоступногоИнтервала", СледующийИндекс);
	
КонецПроцедуры

Функция ПоследнийИнтервалРазмещения(ПараметрыПодбора)
	
	ВсеВремяРазмещено = (ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан = ПараметрыПодбора.ВремяПлан);
	
	Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
		
		ВсяЗагрузкаРазмещена = (ПараметрыПодбора.ИнтервалРазмещения.Загрузка = ПараметрыПодбора.Загрузка)
								И (ПараметрыПодбора.ПараметрыПараллельнойЗагрузки.Количество() = 1);
		Результат = ВсеВремяРазмещено И ВсяЗагрузкаРазмещена;
		
	Иначе
		
		Результат = ВсеВремяРазмещено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДопустимоРазмещениеПромежуточногоИнтервала(ПараметрыПланирования, ПараметрыПодбора)
	
	Результат = Истина;
	
	ВсеВремяРазмещено = (ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан = ПараметрыПодбора.ВремяПлан);
	Если Не ВсеВремяРазмещено Тогда
	
		Если СледующийИнтервалЗагружен(ПараметрыПланирования, ПараметрыПодбора, ПараметрыПодбора.ДоступныйИнтервал) Тогда
			
			Результат = Ложь;
			
		Иначе
			
			ВыполнениеПрерывается = ВыполнениеОперацииПрерывается(ПараметрыПланирования, ПараметрыПодбора, ПараметрыПодбора.ДоступныйИнтервал);
			Если ВыполнениеПрерывается Тогда
				
				ПрерываниеДопустимо = ПрерываниеОперацииДопустимо(ПараметрыПланирования, ПараметрыПодбора);
				Если Не ПрерываниеДопустимо Тогда
					Результат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СледующийИнтервалЗагружен(ПараметрыПланирования, ПараметрыПодбора, ДоступныйИнтервал)
	
	Если ПараметрыПодбора.ПрямоеРазмещение Тогда
		СледуетЗагрузка = ДоступныйИнтервал.СледуетЗагрузка;
	Иначе
		СледуетЗагрузка = ДоступныйИнтервал.ПредшествуетЗагрузка;
	КонецЕсли;
	
	Если СледуетЗагрузка Тогда
		
		Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
			
			СледующийИнтервал = СледующийДоступныйИнтервалПоИндексу(ПараметрыПланирования, ДоступныйИнтервал, ПараметрыПодбора.ПрямоеРазмещение);
			
			Если СледующийИнтервал = Неопределено Тогда
				Результат = Истина;
			Иначе
				
				Если ПараметрыПодбора.ЗагрузкаКратность > СледующийИнтервал.ДоступнаяЗагрузка Тогда
					Результат = Истина;
				Иначе
					Результат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	Иначе
		Результат = Ложь;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнениеОперацииПрерывается(ПараметрыПланирования, ПараметрыПодбора, ДоступныйИнтервал)
	
	СледующийИнтервал = СледующийДоступныйИнтервалПоИндексу(ПараметрыПланирования, ДоступныйИнтервал, ПараметрыПодбора.ПрямоеРазмещение);
	
	Если СледующийИнтервал = Неопределено Тогда
		
		Результат = Истина;
		
	Иначе
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			
			Если ДоступныйИнтервал.Окончание = СледующийИнтервал.Начало Тогда
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДоступныйИнтервал.Начало = СледующийИнтервал.Окончание Тогда
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	ТекущийИнтервал - СтрокаТаблицыЗначений, Произвольный - Описание:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
// 	ПрямоеРазмещение - Булево - Описание
// Возвращаемое значение:
// 	Неопределено, СтрокаТаблицыЗначений - где:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
Функция СледующийДоступныйИнтервалПоИндексу(ПараметрыПланирования, ТекущийИнтервал, ПрямоеРазмещение)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	ТекущийИндекс = ДоступноеВремя.Индекс(ТекущийИнтервал);
	МаксимальныйИндекс = ДоступноеВремя.Количество();
	
	СледующийИндекс = Неопределено;
	Если ПрямоеРазмещение Тогда
		СледующийИндекс = ТекущийИндекс + 1;
		Если СледующийИндекс = МаксимальныйИндекс Тогда
			СледующийИндекс = Неопределено;
		КонецЕсли;
	Иначе
		СледующийИндекс = ТекущийИндекс - 1;
		Если СледующийИндекс = -1 Тогда
			СледующийИндекс = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СледующийИндекс = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		СледующийИнтервал = ДоступноеВремя[СледующийИндекс];
		
		Если СледующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр Тогда
			Результат = СледующийИнтервал;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура МодифицироватьПараметрыПодбораПриСохраненииИнтервала(ПараметрыПодбора, Знач ПоследнийИнтервал)
	
	Если ЗначениеЗаполнено(ПараметрыПодбора.ВремяПереналадки) Тогда
		
		ПараметрыПодбора.ИнтервалРазмещения.ВремяПереналадки = Мин(ПараметрыПодбора.ВремяПереналадки, ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан);
		ПараметрыПодбора.ВремяПереналадки = ПараметрыПодбора.ВремяПереналадки - ПараметрыПодбора.ИнтервалРазмещения.ВремяПереналадки;
		
	КонецЕсли;
	
	Если ПоследнийИнтервал Тогда
		
		ПараметрыПодбора.ВремяПлан = 0;
		ПараметрыПодбора.Загрузка = 0;
		
	Иначе
		
		Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
			ЗачестьРазмещенноеВремяИЗагрузкуВПараметрахПодбора(ПараметрыПодбора);
		Иначе
			ЗачестьРазмещенноеВремяВПараметрахПодбора(ПараметрыПодбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗачестьРазмещенноеВремяВПараметрахПодбора(ПараметрыПодбора)
	
	ПараметрыПодбора.ВремяПлан = ПараметрыПодбора.ВремяПлан - ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
	
КонецПроцедуры

Процедура ЗачестьРазмещенноеВремяИЗагрузкуВПараметрахПодбора(ПараметрыПодбора)
	
	ТекущийПараметр = ПараметрыПодбора.ПараметрыПараллельнойЗагрузки[0];
	
	Если ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан = ПараметрыПодбора.ВремяПлан Тогда
		
		// "Такт" параллельной загрузки не прерывается интервалом недоступности.
		Если ПараметрыПодбора.ИнтервалРазмещения.Загрузка = ПараметрыПодбора.Загрузка Тогда
			ПараметрыПодбора.ПараметрыПараллельнойЗагрузки.Удалить(ТекущийПараметр);
			ТекущийПараметр = ПараметрыПодбора.ПараметрыПараллельнойЗагрузки[0];
		Иначе
			ТекущийПараметр.Загрузка = ТекущийПараметр.Загрузка - ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			ТекущийПараметр.ВремяПлан = ТекущийПараметр.ВремяПлан - ТекущийПараметр.ВремяПЗ;
			ТекущийПараметр.ВремяПЗ = 0;
			ТекущийПараметр.ТактПараллельнойЗагрузки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыПодбора.ИнтервалРазмещения.Загрузка = ПараметрыПодбора.Загрузка Тогда
			
			ТекущийПараметр.ЗагрузкаКратность = ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			ТекущийПараметр.ВремяПлан = ПараметрыПодбора.ВремяПлан - ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
			ТекущийПараметр.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал = Ложь;
			
		Иначе
			
			// "Такт" параллельной загрузки прерывается интервалом недоступности.
			НовыйПараметр = ПараметрыПодбора.ПараметрыПараллельнойЗагрузки.Вставить(0);
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекущийПараметр);
			НовыйПараметр.Загрузка = ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			НовыйПараметр.ЗагрузкаКратность = ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			НовыйПараметр.ВремяПлан = ПараметрыПодбора.ВремяПлан - ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
			НовыйПараметр.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал = Ложь;
			
			ТекущийПараметр.Загрузка = ТекущийПараметр.Загрузка - НовыйПараметр.Загрузка;
			ТекущийПараметр.ВремяПлан = ТекущийПараметр.ВремяПлан - ТекущийПараметр.ВремяПЗ;
			ТекущийПараметр.ВремяПЗ = 0;
			ТекущийПараметр.ТактПараллельнойЗагрузки = Новый УникальныйИдентификатор;
			
			ТекущийПараметр = НовыйПараметр;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ПараметрыПодбора,
		ТекущийПараметр,
		"Загрузка, ЗагрузкаКратность, ВремяПлан, ТактПараллельнойЗагрузки, ДопустимаЗагрузкаВПолученныйДоступныйИнтервал");
	
КонецПроцедуры

// Параметры:
// 	ПараметрыРазмещения - см. ИнициализироватьПараметрыРазмещения
// 	ДоступныйИнтервал - СтрокаТаблицыЗначений - см. ИнициализироватьДоступноеВремяОборудования где:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
// 	ИнтервалРазмещения - см. ИнициализироватьИнтервалРазмещения
Процедура СохранитьНайденныйИнтервал(ПараметрыРазмещения, Знач ДоступныйИнтервал, Знач ИнтервалРазмещения)
	
	ПараметрыРазмещения.Интервалы.Добавить(ИнтервалРазмещения);
	
	КэшироватьДоступныйИнтервал(ПараметрыРазмещения, ДоступныйИнтервал, ИнтервалРазмещения);
	
	Если ЗначениеЗаполнено(ПараметрыРазмещения.Начало) Тогда
		ПараметрыРазмещения.Начало = Мин(ПараметрыРазмещения.Начало, ИнтервалРазмещения.Начало);
	Иначе
		ПараметрыРазмещения.Начало = ИнтервалРазмещения.Начало;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРазмещения.Окончание) Тогда
		ПараметрыРазмещения.Окончание = Макс(ПараметрыРазмещения.Окончание, ИнтервалРазмещения.Окончание);
	Иначе
		ПараметрыРазмещения.Окончание = ИнтервалРазмещения.Окончание;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныйДляРазмещенияИнтервал(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	Если ПараметрыПодбора.ДоступныйИнтервал = Неопределено Тогда
		
		Результат = ПервичныйДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора);
		
	Иначе
		
		Результат = СледующийДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПервичныйДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора)
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	МоментРазмещения = ПараметрыПодбора.МоментРазмещения;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
		
	УсловиеПоиска = Новый Структура;
    УсловиеПоиска.Вставить("РабочийЦентр", ПараметрыПодбора.РабочийЦентр);
    
	Результат = Неопределено;
	Пока Истина Цикл
		
		УсловиеПоиска.Вставить("Период", НачалоДня(МоментРазмещения));
		НайденныеСтроки = НайтиСтрокиВТаблицеССохранениемПорядка(ПараметрыПланирования.ДоступноеВремя, УсловиеПоиска);
		
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			
			Если ПараметрыПодбора.ПрямоеРазмещение Тогда
				Индекс = 0;
			Иначе
				Индекс = НайденныеСтроки.Количество()-1;
			КонецЕсли;
			
			Для Ит = 1 По НайденныеСтроки.Количество() Цикл
				
				Интервал = НайденныеСтроки[Индекс];
				ИнтервалПригоден = ИнтервалПригоденДляРазмещенияОперации(ПараметрыПланирования, Интервал, ПараметрыПодбора);
				Если ИнтервалПригоден Тогда
					Результат = Интервал;
					Прервать;
				Иначе
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						Индекс = Индекс + 1;
					Иначе
						Индекс = Индекс - 1;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			
			Если ПрямоеРазмещение Тогда
				
				МоментРазмещения = КонецДня(МоментРазмещения) + 1;
				
				Если Не МоментРазмещения > Границы.Окончание Тогда
					Продолжить;
				Иначе
					Прервать;
				КонецЕсли;
			Иначе
				
				МоментРазмещения = НачалоДня(МоментРазмещения) - 1;
				Если Не МоментРазмещения < Границы.Начало Тогда
					Продолжить;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Прервать;			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СледующийДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	Результат = Неопределено;
	
	ТекущийИндекс = ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала;
	МаксимальныйИндекс = ПараметрыПланирования.ДоступноеВремя.Количество();
	
	Пока Истина Цикл
		
		Если ТекущийИндекс >= МаксимальныйИндекс
			ИЛИ ТекущийИндекс = -1 Тогда
			Прервать;
		КонецЕсли;
		
		СледующийИнтервал = ПараметрыПланирования.ДоступноеВремя[ТекущийИндекс];
		Если СледующийИнтервал.РабочийЦентр = ПараметрыПодбора.РабочийЦентр Тогда
			
			Пригоден = ИнтервалПригоденДляРазмещенияОперации(ПараметрыПланирования, СледующийИнтервал, ПараметрыПодбора);
			Если Пригоден Тогда
				Результат = СледующийИнтервал;
				Прервать;
			ИначеЕсли Не ПараметрыПодбора.Свойство("ФиксированнаяПартия") Тогда
				ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
			КонецЕсли;
			
		Иначе
			Прервать;			
		КонецЕсли;
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			ТекущийИндекс = ТекущийИндекс + 1;
		Иначе
			ТекущийИндекс = ТекущийИндекс - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнтервалПригоденДляРазмещенияОперации(ПараметрыПланирования, ДоступныйИнтервал, ПараметрыПодбора)
	
	Результат = Истина;
	
	ВыполнениеПрерывается = ДоступныйИнтервал.Время < ПараметрыПодбора.ВремяПлан;
	Если ВыполнениеПрерывается Тогда
		
		Если ДоступныйИнтервал.Время < МинимальноеВремяОперации() Тогда
			Результат = Ложь;
		ИначеЕсли СледующийИнтервалЗагружен(ПараметрыПланирования, ПараметрыПодбора, ДоступныйИнтервал) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтервалЗагруженСинхронно = ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал);
	Если ИнтервалЗагруженСинхронно 
		И Не ДоступныйИнтервал.Время = ПараметрыПодбора.ВремяПлан + ВремяПереналадкиОперации(ПараметрыПланирования, ДоступныйИнтервал, ПараметрыПодбора.Операция) Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ПараметрыПодбора.ПараллельнаяЗагрузка
		И ЗначениеЗаполнено(ДоступныйИнтервал.ВариантНаладки)
		И Не ПараметрыПодбора.ВариантНаладки = ДоступныйИнтервал.ВариантНаладки Тогда
		
		Результат = Ложь;
		
	ИначеЕсли ПараметрыПодбора.ПараллельнаяЗагрузка
		И ПараметрыПодбора.ЗагрузкаКратность > ДоступныйИнтервал.ДоступнаяЗагрузка
		И ПараметрыПодбора.ЗагрузкаКратность <= ПараметрыПодбора.МаксимальнаяЗагрузка Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал)
	
	Если ДоступныйИнтервал.СинхроннаяЗагрузка Тогда
		Результат = Не ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяПереналадкиОперации(Знач ПараметрыПланирования, Знач ДоступныйИнтервал, Знач Операция)
	
	ПредшествующийВариантНаладки = ПредшествующийВариантНаладки(ПараметрыПланирования, ДоступныйИнтервал);
	ИзменилсяВариантНаладки = ЗначениеЗаполнено(ПредшествующийВариантНаладки) И Не ПредшествующийВариантНаладки = Операция.ВариантНаладки;
	
	Если ИзменилсяВариантНаладки Тогда
		
		Время = ВремяПереналадкиПриСменеВариантаНаладки(ПараметрыПланирования, ДоступныйИнтервал.ВидРабочегоЦентра,
														ПредшествующийВариантНаладки, Операция.ВариантНаладки);
		
		Результат = ВремяСПоправкойНаКоэфВремениРаботы(ПараметрыПланирования, ДоступныйИнтервал.РабочийЦентр, Время);
		
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяПереналадкиПриСменеВариантаНаладки(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач ТекущийВариантНаладки, Знач СледующийВариантНаладки)
	
	Если ТипЗначенияРабочийЦентр(РабочийЦентр) Тогда
		РабочийЦентр = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
	КонецЕсли;
	
	Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр, ТекущийВариантНаладки, СледующийВариантНаладки);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		
		Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр,, СледующийВариантНаладки);
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			
			Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр, ТекущийВариантНаладки);
			
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиВремяПереналадки(Знач ПараметрыПланирования, Знач ВидРабочегоЦентра,
	Знач ТекущийВариантНаладки = Неопределено, Знач СледующийВариантНаладки = Неопределено)
		
	Если ЗначениеЗаполнено(ПараметрыПланирования.ДлительностиПереналадки) Тогда
		
		Если Не ЗначениеЗаполнено(ТекущийВариантНаладки) Тогда
			ТекущийВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СледующийВариантНаладки) Тогда
			СледующийВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		КонецЕсли;
		
		УсловиеПоиска = Новый Структура;
		УсловиеПоиска.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
		УсловиеПоиска.Вставить("ТекущийВариантНаладки", ТекущийВариантНаладки);
		УсловиеПоиска.Вставить("СледующийВариантНаладки", СледующийВариантНаладки);
		
		СтрокиПоиска = ПараметрыПланирования.ДлительностиПереналадки.НайтиСтроки(УсловиеПоиска);
		Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
			Возврат СтрокиПоиска[0].Время;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ИнтервалРазмещенияОперации(Знач ПараметрыПланирования, ПараметрыПодбора)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыПодбора.ДоступныйИнтервал);
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыПодбора, "ТактПараллельнойЗагрузки");
	
	РассчитатьГраницыИнтервалаРазмещенияОперации(ПараметрыПодбора, Результат);
	
	Если Не Результат = Неопределено Тогда
		
		РассчитатьЗагрузкуИнтервалаРазмещенияОперации(ПараметрыПодбора, Результат);
		ПроверитьСоблюдениеОграниченийЗагрузкиРабочихЦентров(ПараметрыПланирования, ПараметрыПодбора, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ПараметрыПодбора - см. ИнициализироватьПараметрыПодбораИнтерваловРазмещения
// 	ИнтервалРазмещения - см. ИнициализироватьИнтервалРазмещения
Процедура РассчитатьГраницыИнтервалаРазмещенияОперации(ПараметрыПодбора, ИнтервалРазмещения)
	
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	МоментРазмещения = ПараметрыПодбора.МоментРазмещения;
	ВремяПлан = ПараметрыПодбора.ВремяПлан;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	// Первая граница (левая при прямом, правая при обратном размещении).
	Если ПрямоеРазмещение Тогда
		ИнтервалРазмещения.Начало = Макс(ДоступныйИнтервал.Начало, МоментРазмещения);
	Иначе
		ИнтервалРазмещения.Окончание = Мин(ДоступныйИнтервал.Окончание, МоментРазмещения);
	КонецЕсли;
	
	Если ИнтервалРазмещения.Начало < ИнтервалРазмещения.Окончание Тогда
		
		// Вторая граница (правая при прямом, левая при обратном размещении).
		ВремяИнтервала = ИнтервалРазмещения.Окончание - ИнтервалРазмещения.Начало;
		Если ВремяИнтервала > ВремяПлан Тогда
			ВремяИнтервала = ВремяПлан;
			Если ПрямоеРазмещение Тогда
				ИнтервалРазмещения.Окончание = ИнтервалРазмещения.Начало + ВремяИнтервала;
			Иначе
				ИнтервалРазмещения.Начало = ИнтервалРазмещения.Окончание - ВремяИнтервала;
			КонецЕсли;
		КонецЕсли;
	    ИнтервалРазмещения.ВремяПлан = ВремяИнтервала;
		
		ИнтервалЗагруженСинхронно = ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал);
		Если ИнтервалЗагруженСинхронно
			И (Не ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало
			Или Не ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание) Тогда
			
			ИнтервалРазмещения = Неопределено;
			
		КонецЕсли;
		
	Иначе
		ИнтервалРазмещения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьЗагрузкуИнтервалаРазмещенияОперации(ПараметрыПодбора, ИнтервалРазмещения)
	
	Если ПараметрыПодбора.ПараллельнаяЗагрузка 
		И ЗначениеЗаполнено(ПараметрыПодбора.Загрузка) Тогда
		
		Доступно = ПараметрыПодбора.ДоступныйИнтервал.ДоступнаяЗагрузка;
		ЗагрузкаОстаток = ПараметрыПодбора.Загрузка;
		ЗагрузкаКратность = ПараметрыПодбора.ЗагрузкаКратность;
		
		Если ЗагрузкаОстаток <= Доступно Тогда
			ИнтервалРазмещения.Загрузка = ЗагрузкаОстаток;
		Иначе
			
			Если ЗагрузкаКратность <= ПараметрыПодбора.МаксимальнаяЗагрузка Тогда
				КоличествоЗагрузок = Цел(Доступно/ЗагрузкаКратность);
				ИнтервалРазмещения.Загрузка = КоличествоЗагрузок * ЗагрузкаКратность;
			Иначе
				ИнтервалРазмещения.Загрузка = Доступно;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоблюдениеОграниченийЗагрузкиРабочихЦентров(Знач ПараметрыПланирования, ПараметрыПодбора, ИнтервалРазмещения)
	
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	Операция = ПараметрыПодбора.Операция;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	ПроцентМаксЗагрузки = ПроцентМаксЗагрузкиРабочегоЦентра(ПараметрыПланирования, ДоступныйИнтервал.ВидРабочегоЦентра);
	
	Если ЗначениеЗаполнено(ПроцентМаксЗагрузки) 
		И Не ПроцентМаксЗагрузки = 100 Тогда
		
		ДопустимаяЗагрузка = ВремяСменыДоступногоИнтервала(ПараметрыПланирования, ДоступныйИнтервал);
		ТекущаяЗагрузка = ЗанятоеВремяСмены(ПараметрыПланирования, ДоступныйИнтервал.РабочийЦентр, ДоступныйИнтервал.НачалоСмены);
		ЗагрузкаПослеРазмещения = ТекущаяЗагрузка + ИнтервалРазмещения.ВремяПлан;
		
		Если ЗагрузкаПослеРазмещения <= ДопустимаяЗагрузка Тогда
			Возврат;
		Иначе
			
			Если ТекущаяЗагрузка >= ДопустимаяЗагрузка Тогда
				ИнтервалРазмещения = Неопределено;
			Иначе
				
				ИнтервалПригоден = ПрерываниеОперацииДопустимо(ПараметрыПланирования, ПараметрыПодбора);
				
				Если ИнтервалПригоден Тогда
					
					ВремяДоступное = ДопустимаяЗагрузка - ТекущаяЗагрузка;
					Если ВремяДоступное < ИнтервалРазмещения.ВремяПлан Тогда
						
						Если ПрямоеРазмещение Тогда
							ИнтервалРазмещения.Окончание = ИнтервалРазмещения.Начало + ВремяДоступное;
						Иначе
							ИнтервалРазмещения.Начало = ИнтервалРазмещения.Окончание - ВремяДоступное;
						КонецЕсли;
						
						ИнтервалРазмещения.ВремяПлан = ВремяДоступное;
						
					Иначе
						ИнтервалРазмещения = Неопределено;
					КонецЕсли;
					
				Иначе
					ИнтервалРазмещения = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроцентМаксЗагрузкиРабочегоЦентра(Знач ПараметрыПланирования, Знач ВидРабочегоЦентра)
	
	Если ПараметрыПланирования.ЗадействоватьРезервДоступности Тогда
		Результат = 100;
	Иначе
		
		СтрокаПоиска = ПараметрыПланирования.ОграниченияЗагрузкиРабочихЦентров.Найти(ВидРабочегоЦентра, "ВидРабочегоЦентра");
		Если СтрокаПоиска = Неопределено Тогда
			Результат = 100;
		Иначе
			Результат = СтрокаПоиска.ПроцентМаксЗагрузки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяСменыДоступногоИнтервала(Знач ПараметрыПланирования, Знач ДоступныйИнтервал)
	
	ПроцентМаксЗагрузки = ПроцентМаксЗагрузкиРабочегоЦентра(ПараметрыПланирования, ДоступныйИнтервал.ВидРабочегоЦентра);
	
	Если ЗначениеЗаполнено(ПроцентМаксЗагрузки) 
		И Не ПроцентМаксЗагрузки = 100 Тогда
		Результат = ОКР(ДоступныйИнтервал.ВремяСмены * (ПроцентМаксЗагрузки / 100));
	Иначе
		Результат = ДоступныйИнтервал.ВремяСмены;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВозможноРазмещениеВспомогательныхРЦНаИнтервале(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	Операция = ПараметрыПодбора.Операция;
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	ИнтервалРазмещения = ПараметрыПодбора.ИнтервалРазмещения;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	Если ЗначениеЗаполнено(ПараметрыРазмещения.ВспомогательныеРЦ) Тогда
		
		ПроверитьОбсуживающиеРЦСвободныНаИнтервале(ПараметрыПланирования, ПараметрыРазмещения.ВспомогательныеРЦ, ИнтервалРазмещения);
		
	Иначе
		
		ПодобратьВспомогательныеРЦДляОперации(ПараметрыПланирования, Операция, ПараметрыРазмещения.ВспомогательныеРЦ,
			ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
		
	КонецЕсли;
	
	ВспомогательныеРЦСвободны = БулевоЗначениеТаблицы(ПараметрыРазмещения.ВспомогательныеРЦ, "Свободен");
	
	Если ВспомогательныеРЦСвободны Тогда
		
		Отказ = Ложь;
		КэшироватьДоступныеИнтервалыВспомогательныхРЦ(ПараметрыПодбора, ПараметрыРазмещения, Отказ);
		
		Возврат НЕ Отказ;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;
	
КонецФункции

Процедура ПодобратьВспомогательныеРЦДляОперации(Знач ПараметрыПланирования, Знач Операция, Результат,
		Знач ДоступныйИнтервал, ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	ТаблицаДоступность = ИнициализироватьТаблицуДоступностиВспомогательныхРЦ();
	ВспомогательныеРЦ = ВспомогательныеРЦОперации(ПараметрыПланирования, Операция.Этап, Операция.ИдентификаторОперации);
	
	Для Каждого РабочийЦентр Из ВспомогательныеРЦ Цикл
		
		Если ТипЗначенияРабочийЦентр(РабочийЦентр) Тогда
			ПрочитатьДоступностьВспомогательногоРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, РабочийЦентр, ПрямоеРазмещение);
		Иначе
			ПрочитатьДоступностьГруппыВспомогательныхРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, РабочийЦентр, ПрямоеРазмещение);
		КонецЕсли;
			
	КонецЦикла;
	
	ВсеРЦСвободны = БулевоЗначениеТаблицы(ТаблицаДоступность, "Свободен");
	Если Не ВсеРЦСвободны 
		И НЕ ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал) Тогда
			
		ПодобратьДоступныйИнтервалВспомогательныхРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
			
	КонецЕсли;
	
	Результат = ТаблицаДоступность;
	
КонецПроцедуры

Процедура ПрочитатьДоступностьВспомогательногоРЦ(Знач ПараметрыПланирования, Знач Операция, Результат,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач РабочийЦентр, Знач ПрямоеРазмещение)
	
	Интервалы = ИнтервалыДоступногоВремени(ПараметрыПланирования, РабочийЦентр, ИнтервалРазмещения.Начало, ИнтервалРазмещения.Окончание);
	
	ДоступныеИнтервалы = ИнициализироватьТаблицуДоступныеИнтервалыРЦ();
	
	Если ПрямоеРазмещение Тогда
		
		ПодобратьДоступноеВремяРЦНаИнтервале(
			ПараметрыПланирования,
			РабочийЦентр,
			ИнтервалРазмещения.Начало,
			ДоступныйИнтервал.Окончание,
			ДоступныеИнтервалы,
			Интервалы);
			
	Иначе
			
		ПодобратьДоступноеВремяРЦНаИнтервале(
			ПараметрыПланирования,
			РабочийЦентр,
			ДоступныйИнтервал.Начало,
			ИнтервалРазмещения.Окончание,
			ДоступныеИнтервалы,
			Интервалы);
			
	КонецЕсли;
	
	Свободен = ПериодПринадлежитИнтервалам(ПараметрыПланирования, ИнтервалРазмещения.Начало, ИнтервалРазмещения.Окончание, Интервалы);
	
	СтрокаРезультат = Результат.Добавить();
	СтрокаРезультат.РабочийЦентр = РабочийЦентр;
	СтрокаРезультат.Свободен = Свободен;
	СтрокаРезультат.ДоступныеИнтервалы = ДоступныеИнтервалы;
	СтрокаРезультат.ДоступноеВремя = ДоступныеИнтервалы.Итог("Время");
	
КонецПроцедуры

Процедура ПрочитатьДоступностьГруппыВспомогательныхРЦ(Знач ПараметрыПланирования, Знач Операция, Результат,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач ГруппаРабочихЦентров, Знач ПрямоеРазмещение)
		
	ТаблицаДоступность = ИнициализироватьТаблицуДоступностиВспомогательныхРЦ();
	
	РабочиеЦентры = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, ГруппаРабочихЦентров);
	Для Каждого РабочийЦентр Из РабочиеЦентры Цикл
		ПрочитатьДоступностьВспомогательногоРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, РабочийЦентр, ПрямоеРазмещение);
	КонецЦикла;
	
	ТаблицаДоступность.Сортировать("Свободен Убыв, ДоступноеВремя Убыв");
	
	СтрокаНайдена = Ложь;
	Для Каждого Строка Из ТаблицаДоступность Цикл
		
		Если Строка.Свободен Тогда
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			СтрокаНайдена = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаНайдена 
		И ЗначениеЗаполнено(ТаблицаДоступность) Тогда
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаДоступность[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьДоступныйИнтервалВспомогательныхРЦ(Знач ПараметрыПланирования, Знач Операция, ТаблицаДоступность,
		Знач ДоступныйИнтервал, ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	Для Каждого Строка Из ТаблицаДоступность Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ДоступноеВремя) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ПрямоеРазмещение 
		И ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание)
		ИЛИ (НЕ ПрямоеРазмещение 
		И ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало) Тогда
		
		НовыйИнтервал = ПодобратьДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
			ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
	Иначе
		
		НовыйИнтервал = ПодобратьДоступныйИнтервалВспомогательныхРЦИдентичнаяДлина(ПараметрыПланирования, ТаблицаДоступность, 
			ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
			
		Если НовыйИнтервал = Неопределено Тогда
			НовыйИнтервал = ПодобратьДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не НовыйИнтервал = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ИнтервалРазмещения, НовыйИнтервал);
		ТаблицаДоступность.ЗаполнитьЗначения(Истина, "Свободен");
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьДоступныйИнтервалВспомогательныхРЦКрайний(Знач ПараметрыПланирования, Знач ТаблицаДоступность,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	Если ПрямоеРазмещение Тогда
		
		Начало = ИнтервалРазмещения.Начало;
		Окончание = ДоступныйИнтервал.Окончание;
		
		Время = ВремяДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
			Начало, Окончание, ПрямоеРазмещение);
		
		Если ЗначениеЗаполнено(Время) Тогда
			
			Результат = ИнициализироватьИнтервалРазмещения();
			Результат.Начало = Окончание - Время;
			Результат.Окончание = Окончание;
			Результат.ВремяПлан = Время;
			Возврат Результат;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Начало = ДоступныйИнтервал.Начало;
		Окончание = ИнтервалРазмещения.Окончание ;
				
		Время = ВремяДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
			Начало, Окончание, ПрямоеРазмещение);
		
		Если ЗначениеЗаполнено(Время) Тогда
			
			Результат = ИнициализироватьИнтервалРазмещения();
			Результат.Начало = Начало;
			Результат.Окончание = Начало + Время;
			Результат.ВремяПлан = Время;
			Возврат Результат;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

Функция ВремяДоступныйИнтервалВспомогательныхРЦКрайний(Знач ПараметрыПланирования, Знач ТаблицаДоступность,
		Знач Начало, Знач Окончание, Знач ПрямоеРазмещение)
	
	Время = 0;
	
	Если ПрямоеРазмещение Тогда
		
		Для Каждого СтрокаДоступностьРЦ Из ТаблицаДоступность Цикл
			
			ВремяРЦ = 0;
			
			Для Каждого Интервал Из СтрокаДоступностьРЦ.ДоступныеИнтервалы Цикл
				
				Если Интервал.Окончание = Окончание
					Или (Интервал.Окончание > Окончание 
					И Интервал.Начало < Окончание) Тогда
					
					Начало = Макс(Начало, Интервал.Начало);
					Окончание = Окончание;
					ВремяИнтервала = Окончание - Начало;
					
					ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал.СтрокаДоступноеВремя);
					
					ВремяРЦ = Мин(ВремяИнтервала, ДоступноеВремя);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ВремяРЦ) Тогда
				
				Возврат Неопределено;
				
			ИначеЕсли ЗначениеЗаполнено(Время) Тогда
				
				Время = Мин(Время, ВремяРЦ);
				
			Иначе
				Время = ВремяРЦ;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДоступностьРЦ Из ТаблицаДоступность Цикл
			
			ВремяРЦ = 0;
			
			Для каждого Интервал Из СтрокаДоступностьРЦ.ДоступныеИнтервалы Цикл
				
				Если Интервал.Начало = Начало
					Или (Интервал.Начало < Начало 
					И Интервал.Окончание > Начало) Тогда
					
					Начало = Начало;
					Окончание = Мин(Окончание, Интервал.Окончание);
					ВремяИнтервала = Окончание - Начало;
					
					ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал.СтрокаДоступноеВремя);
					
					ВремяРЦ = Мин(ВремяИнтервала, ДоступноеВремя);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(ВремяРЦ) Тогда
				
				Возврат Неопределено;
				
			ИначеЕсли ЗначениеЗаполнено(Время) Тогда
				
				Время = Мин(Время, ВремяРЦ);
				
			Иначе
				Время = ВремяРЦ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

Функция ПодобратьДоступныйИнтервалВспомогательныхРЦИдентичнаяДлина(Знач ПараметрыПланирования, Знач ТаблицаДоступность,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	Время = ИнтервалРазмещения.Окончание - ИнтервалРазмещения.Начало;
	Если ПрямоеРазмещение Тогда
		Граница = ДоступныйИнтервал.Окончание;
	Иначе
		Граница = ДоступныйИнтервал.Начало;
	КонецЕсли;
	
	Интервал = ПодобратьИдентичныйИнтервалРекурсивно(ПараметрыПланирования, ТаблицаДоступность, Граница, Время,
		ИнтервалРазмещения.Начало, ИнтервалРазмещения.Окончание, Справочники.РабочиеЦентры.ПустаяСсылка(), ПрямоеРазмещение);
	Возврат Интервал;
	
КонецФункции

Функция ПодобратьИдентичныйИнтервалРекурсивно(Знач ПараметрыПланирования, Знач ТаблицаДоступность, Знач Граница,
		Знач Время, Знач Начало, Знач Окончание, Знач РабочийЦентр, Знач ПрямоеРазмещение)
	
	Для Каждого СтрокаДоступностьРЦ Из ТаблицаДоступность Цикл
		
		Если СтрокаДоступностьРЦ.РабочийЦентр = РабочийЦентр Тогда
			Продолжить;
		Иначе
			
			Свободен = ПериодПринадлежитИнтервалам(
				ПараметрыПланирования, Начало, Окончание,, СтрокаДоступностьРЦ.ДоступныеИнтервалы);
				
			Если Свободен Тогда
				Продолжить;
			Иначе
				
				Отказ = Ложь;
				СместитьМоментРазмещаемогоИнтервала(Граница, Время, Начало, Окончание,
					СтрокаДоступностьРЦ.ДоступныеИнтервалы, ПрямоеРазмещение, Отказ);
					
				Если Отказ Тогда
					Возврат Неопределено;
				Иначе
					
					Свободен = ПериодПринадлежитИнтервалам(
						ПараметрыПланирования, Начало, Окончание,, СтрокаДоступностьРЦ.ДоступныеИнтервалы);
						
					Если Свободен Тогда
						Возврат ПодобратьИдентичныйИнтервалРекурсивно(ПараметрыПланирования, ТаблицаДоступность, Граница, Время,
							Начало, Окончание, СтрокаДоступностьРЦ.РабочийЦентр, ПрямоеРазмещение);
					Иначе
						Возврат Неопределено;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = ИнициализироватьИнтервалРазмещения();
	Результат.Начало = Начало;
	Результат.Окончание = Окончание;
	Результат.ВремяПлан = Время;
	
	Возврат Результат;
	
КонецФункции

Процедура СместитьМоментРазмещаемогоИнтервала(Знач Граница, Знач Время, Начало, Окончание, Знач ДоступныеИнтервалы, Знач ПрямоеРазмещение, Отказ)
		
	Для Каждого Интервал Из ДоступныеИнтервалы Цикл
		
		Если ПрямоеРазмещение Тогда
			НовНачало = Макс(Начало, Интервал.Начало);
			НовОкончание = НовНачало + Время;
			
			Если НовОкончание <= Интервал.Окончание 
				И НовОкончание <= Граница Тогда
				
				Начало = НовНачало;
				Окончание = НовОкончание;
				Возврат;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			НовОкончание = Мин(Окончание, Интервал.Окончание);
			НовНачало = НовОкончание - Время;
			
			Если НовНачало >= Интервал.Начало 
				И НовНачало >= Граница Тогда
				
				Начало = НовНачало;
				Окончание = НовОкончание;
				Возврат;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Истина;
	
КонецПроцедуры

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Стоимость - Число -
// * ВремяПереналадки - Число -
// * КоэфЗагрузки - Число -
// * КэшДоступныхИнтервалов - см. ИнициализироватьТаблицуКэшДоступныхИнтервалов
// * ВспомогательныеРЦ - см. ИнициализироватьТаблицуДоступностиВспомогательныхРЦ
// * Интервалы - Массив -
// * Окончание - Дата -
// * Начало - Дата -
// * РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры -
// * ОценкаВремя - Число -
// * ВзвешеннаяОценка - Число -
Функция ИнициализироватьТаблицуАльтернативныхРЦ()
	
	Параметры = ИнициализироватьПараметрыРазмещения();
	
	Результат = Новый ТаблицаЗначений;
	Для Каждого Параметр Из Параметры Цикл
		Результат.Колонки.Добавить(Параметр.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * Стоимость - Число -
// * ВремяПереналадки - Число -
// * КоэфЗагрузки - Число -
// * КэшДоступныхИнтервалов - см. ИнициализироватьТаблицуКэшДоступныхИнтервалов
// * ВспомогательныеРЦ - см. ИнициализироватьТаблицуДоступностиВспомогательныхРЦ
// * Интервалы - Массив из см. ИнициализироватьИнтервалРазмещенияФиксированнойПартии -
// * Окончание - Дата -
// * Начало - Дата -
// * РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры -
Функция ИнициализироватьПараметрыРазмещения()
	
	Результат = Новый Структура;
	Результат.Вставить("РабочийЦентр");
	Результат.Вставить("Начало", 	'00010101');
	Результат.Вставить("Окончание", '00010101');
	Результат.Вставить("Интервалы", Новый Массив);
	Результат.Вставить("КэшДоступныхИнтервалов", ИнициализироватьТаблицуКэшДоступныхИнтервалов());
	Результат.Вставить("ВспомогательныеРЦ", ИнициализироватьТаблицуДоступностиВспомогательныхРЦ());
	Результат.Вставить("КоэфЗагрузки", 0);
	Результат.Вставить("ВремяПереналадки", 0);
	Результат.Вставить("Стоимость", 0);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	Операция - см. ВыгрузитьТаблицуОпераций
// 	РабочийЦентр - Произвольный - 
// 	ПрямоеРазмещение - Булево - 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИсходныеПараметрыПланирования - Структура -:
// ** ЗанятоеВремяПоСменам - см. ИнициализироватьТаблицуЗанятоеВремяПоСменам
// ** ДоступноеВремя - ТаблицаЗначений -
// * МаксимальнаяЗагрузка - Число -
// * СинхроннаяЗагрузка - Булево -
// * ПараллельнаяЗагрузка - Булево -
// * МоментРазмещения - Дата -
// * РазмещатьВспомогательные - Булево -
// * НедоступныеВспомогательныеРЦ - Массив -
// * ИнтервалРазмещения - см. ИнициализироватьИнтервалРазмещения
// * ДоступныйИнтервал - СтрокаТаблицыЗначений - см. ИнициализироватьДоступноеВремяОборудования где:
// ** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// ** ПараллельнаяЗагрузка - Булево -
// ** СинхроннаяЗагрузка - Булево -
// ** РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// ** Период - Дата -
// ** Начало - Дата -
// ** Окончание - Дата -
// ** НачалоСмены - Дата -
// ** Время - Число -
// ** ВремяСмены - Число -
// ** МаксимальнаяЗагрузка - Число -
// ** ДоступнаяЗагрузка - Число -
// ** ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// ** ПредшествуетЗагрузка - Булево -
// ** ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// ** СледуетЗагрузка - Булево -
// ** ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
// * КоэффициентВремениРаботы - Число -
// * ВремяПлан - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * Операция - см. ИнициализироватьПартиюОперации
// * ПрямоеРазмещение - Булево -
// * ПараметрыПараллельнойЗагрузки - Неопределено, ТаблицаЗначений - Описание:
// ** Загрузка - Число - 
// ** ЗагрузкаКратность - Число - 
// ** ВремяПлан - Число - 
// ** ВремяПЗ - Число - 
// ** ТактПараллельнойЗагрузки - УникальныйИдентификатор - 
// ** ДопустимаЗагрузкаВПолученныйДоступныйИнтервал - Булево - 
// * Загрузка - Число - 
// * ЗагрузкаКратность - Число - 
// * ТактПараллельнойЗагрузки - Неопределено, УникальныйИдентификатор - 
// * ДопустимаЗагрузкаВПолученныйДоступныйИнтервал - Булево - 
Функция ИнициализироватьПараметрыПодбораИнтерваловРазмещения(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение)
	
	РазмещатьВспомогательные = ОперацияИмеетВспомогательныеРЦ(ПараметрыПланирования, Операция.Этап, Операция.ИдентификаторОперации);
	МоментРазмещения = МоментРазмещенияОперации(ПараметрыПланирования, Операция, ПрямоеРазмещение);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Операция", Операция);
	Результат.Вставить("ВариантНаладки", Операция.ВариантНаладки);
	Результат.Вставить("РабочийЦентр", РабочийЦентр);
	Результат.Вставить("ПрямоеРазмещение", ПрямоеРазмещение);
	Результат.Вставить("КоэффициентВремениРаботы", КоэффициентВремениРаботыРЦ(ПараметрыПланирования, РабочийЦентр));
	
	Результат.Вставить("ДоступныйИнтервал", Неопределено);
	Результат.Вставить("ИнтервалРазмещения", Неопределено);
	Результат.Вставить("НедоступныеВспомогательныеРЦ", Новый Массив);
	Результат.Вставить("РазмещатьВспомогательные", РазмещатьВспомогательные);
	Результат.Вставить("МоментРазмещения", МоментРазмещения);
	
	Результат.Вставить("ИндексСледующегоДоступногоИнтервала", Неопределено);
	
	Результат.Вставить("ПараллельнаяЗагрузка");
	Результат.Вставить("СинхроннаяЗагрузка");
	Результат.Вставить("МаксимальнаяЗагрузка");
	ПараметрыЗагрузки = ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, РабочийЦентр);
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыЗагрузки);
	
	ИсходныеПараметрыПланирования = Новый Структура;
	ИсходныеПараметрыПланирования.Вставить("ДоступноеВремя", ПараметрыПланирования.ДоступноеВремя.Скопировать());
	ИсходныеПараметрыПланирования.Вставить("ЗанятоеВремяПоСменам", ПараметрыПланирования.ЗанятоеВремяПоСменам.Скопировать());
	Результат.Вставить("ИсходныеПараметрыПланирования", ИсходныеПараметрыПланирования);
	
	ИнициализироватьПерезаполняемыеПараметрыПодбораИнтервалов(ПараметрыПланирования, Операция, РабочийЦентр, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьПерезаполняемыеПараметрыПодбораИнтервалов(Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр, ПараметрыПодбора)
	
	ПараметрыПодбора.Вставить("ВремяПлан", ОперацияВремяПлан(ПараметрыПланирования, Операция, РабочийЦентр));
	ПараметрыПодбора.Вставить("ВремяПереналадки", 0);
	ПараметрыПодбора.Вставить("ПервыйИнтервал", Истина);
	ПараметрыПодбора.Вставить("ПрерываниеОперацииДопустимо", Неопределено);
	
	ИнициализироватьПараметрыПараллельнойЗагрузки(ПараметрыПланирования, Операция, РабочийЦентр, ПараметрыПодбора);
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыПараллельнойЗагрузки(Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр, ПараметрыПодбора)
	
	Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
		
		ПараметрыЗагрузки = Новый ТаблицаЗначений;
		ПараметрыЗагрузки.Колонки.Добавить("Загрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ЗагрузкаКратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ВремяПлан", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ВремяПЗ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ТактПараллельнойЗагрузки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ПараметрыЗагрузки.Колонки.Добавить("ДопустимаЗагрузкаВПолученныйДоступныйИнтервал", Новый ОписаниеТипов("Булево"));
		
		НоваяСтрока = ПараметрыЗагрузки.Добавить();
		НоваяСтрока.Загрузка = Операция.Загрузка * Операция.Количество / Операция.Коэффициент;
		НоваяСтрока.ЗагрузкаКратность = Операция.Загрузка;
		НоваяСтрока.ВремяПлан = ПараметрыПодбора.ВремяПлан;
		НоваяСтрока.ВремяПЗ = ОперацияВремяПЗПараллельнаяЗагрузка(ПараметрыПланирования, Операция, РабочийЦентр);
		НоваяСтрока.ТактПараллельнойЗагрузки = Новый УникальныйИдентификатор;
		НоваяСтрока.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал = Истина;
		
		ПараметрыПодбора.Вставить("ПараметрыПараллельнойЗагрузки", ПараметрыЗагрузки);
		
		ПараметрыПодбора.Вставить("Загрузка", НоваяСтрока.Загрузка);
		ПараметрыПодбора.Вставить("ЗагрузкаКратность", НоваяСтрока.ЗагрузкаКратность);
		ПараметрыПодбора.Вставить("ТактПараллельнойЗагрузки", НоваяСтрока.ТактПараллельнойЗагрузки);
		ПараметрыПодбора.Вставить("ДопустимаЗагрузкаВПолученныйДоступныйИнтервал",
			НоваяСтрока.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал);
		
	Иначе
		
		ПараметрыПодбора.Вставить("ПараметрыПараллельнойЗагрузки", Неопределено);
		
		ПараметрыПодбора.Вставить("Загрузка", 0);
		ПараметрыПодбора.Вставить("ЗагрузкаКратность", 0);
		ПараметрыПодбора.Вставить("ТактПараллельнойЗагрузки", Неопределено);
		ПараметрыПодбора.Вставить("ДопустимаЗагрузкаВПолученныйДоступныйИнтервал", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * ТактПараллельнойЗагрузки - Неопределено -
// * Загрузка - Число -
// * ВремяПереналадки - Число -
// * ВремяПлан - Число -
// * Окончание - Дата -
// * Начало - Дата -
Функция ИнициализироватьИнтервалРазмещения()
	
	Результат = Новый Структура;
	Результат.Вставить("Начало", '00010101');
	Результат.Вставить("Окончание", '00010101');
	Результат.Вставить("ВремяПлан", 0); // Включает в т.ч. время переналадки.
	Результат.Вставить("ВремяПереналадки", 0);
	Результат.Вставить("Загрузка", 0);
	Результат.Вставить("ТактПараллельнойЗагрузки", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Начало - Дата -
// * НачалоСмены - Дата -
// * ВремяСмены - Число -
Функция ИнициализироватьТаблицуКэшДоступныхИнтервалов()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("РабочийЦентр");
	Результат.Колонки.Добавить("Начало");
	Результат.Колонки.Добавить("НачалоСмены");
	Результат.Колонки.Добавить("ВремяСмены");
	
	Результат.Индексы.Добавить("РабочийЦентр, НачалоСмены");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров -
// * Свободен - Булево - 
// * ДоступныеИнтервалы - см. ИнициализироватьТаблицуДоступныеИнтервалыРЦ
// * ДоступноеВремя - Неопределено, Число - 
Функция ИнициализироватьТаблицуДоступностиВспомогательныхРЦ()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("РабочийЦентр");
	Результат.Колонки.Добавить("Свободен");
	Результат.Колонки.Добавить("ДоступныеИнтервалы");
	Результат.Колонки.Добавить("ДоступноеВремя");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Начало - Дата - 
// * Окончание - Дата -
// * Время - Дата -
// * СтрокаДоступноеВремя - СтрокаТаблицыЗначений -:
// ** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// ** ПараллельнаяЗагрузка - Булево -
// ** СинхроннаяЗагрузка - Булево -
// ** РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// ** Период - Дата -
// ** Начало - Дата -
// ** Окончание - Дата -
// ** НачалоСмены - Дата -
// ** Время - Число -
// ** ВремяСмены - Число -
// ** МаксимальнаяЗагрузка - Число -
// ** ДоступнаяЗагрузка - Число -
// ** ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// ** ПредшествуетЗагрузка - Булево -
// ** ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// ** СледуетЗагрузка - Булево -
// ** ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
Функция ИнициализироватьТаблицуДоступныеИнтервалыРЦ()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Начало");
	Результат.Колонки.Добавить("Окончание");
	Результат.Колонки.Добавить("Время");
	Результат.Колонки.Добавить("СтрокаДоступноеВремя");
	
	Возврат Результат;
	
КонецФункции

Функция МоментРазмещенияОперации(ПараметрыПланирования, Операция, ПрямоеРазмещение)
	
	Если ПрямоеРазмещение Тогда
		МоментРазмещения = Операция.ДатаЗапуска;
	Иначе
		МоментРазмещения = Операция.ДатаВыпуска;
	КонецЕсли;
	МоментРазмещения = Макс(МоментРазмещения, ПараметрыПланирования.МоментПланирования);
	
	Возврат МоментРазмещения;
	
КонецФункции

Процедура ЗаполнитьНедоступныеВспомогательныеРЦ(Знач ПараметрыРазмещения, Результат)
	
	Для Каждого Строка Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
		
		Если Не Строка.Свободен Тогда
			
			Результат.Добавить(Строка.РабочийЦентр);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, РазмещениеВозможно = Истина, ПрерываниеДопустимо = Истина)
	
	ПараметрыРазмещения = ИнициализироватьПараметрыРазмещения();
	
	ИнициализироватьПерезаполняемыеПараметрыПодбораИнтервалов(
		ПараметрыПланирования, ПараметрыПодбора.Операция, ПараметрыПодбора.РабочийЦентр, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИнтервалРазмещения = Неопределено
		Или ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала = Неопределено
		Или ПараметрыПодбора.ПрямоеРазмещение
		И ПараметрыПодбора.ИнтервалРазмещения.Окончание >= ПараметрыПодбора.ДоступныйИнтервал.Окончание 
		Или Не ПараметрыПодбора.ПрямоеРазмещение 
		И ПараметрыПодбора.ИнтервалРазмещения.Начало <= ПараметрыПодбора.ДоступныйИнтервал.Начало 
		Или Не ПрерываниеДопустимо
		И ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан < ПараметрыПодбора.ВремяПлан
		Или Не РазмещениеВозможно Тогда
		УвеличитьИндексСледующегоДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора);
	КонецЕсли;
	
	ВосстановитьИсходныеПараметрыПланирования(ПараметрыПланирования, ПараметрыПодбора);
	
КонецФункции

Процедура УвеличитьИндексСледующегоДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора)
	
	Если ЗначениеЗаполнено(ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала) Тогда
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала = ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала + 1;
		Иначе
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала = ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала - 1;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПодбора.ДоступныйИнтервал) Тогда
		
		ТекущийИндекс = ПараметрыПланирования.ДоступноеВремя.Индекс(ПараметрыПодбора.ДоступныйИнтервал);
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала = ТекущийИндекс + 1;
		Иначе
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтервала = ТекущийИндекс - 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьИсходныеПараметрыПланирования(ПараметрыПланирования, ПараметрыПодбора)
	
	Для Каждого Параметр Из ПараметрыПодбора.ИсходныеПараметрыПланирования Цикл
		
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
			ПараметрыПланирования[Параметр.Ключ] = Параметр.Значение.Скопировать();
		Иначе
			ПараметрыПланирования[Параметр.Ключ] = Параметр.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МинимальноеВремяОперации()
	
	Возврат 10;	
	
КонецФункции

Функция ПрерываниеОперацииДопустимо(Знач ПараметрыПланирования, ПараметрыПодбора)
	
	Если ПараметрыПодбора.ПрерываниеОперацииДопустимо = Неопределено Тогда
		
		Результат = Истина;
		
		Непрерывная = ПараметрыПодбора.Операция.Непрерывная;
		ВремяОперации = ПараметрыПодбора.ВремяПлан + ПараметрыПодбора.ВремяПереналадки;
		ВремяСмены = ВремяСменыДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора.ДоступныйИнтервал);
		
		Если Непрерывная И ВремяОперации <= ВремяСмены Тогда
			Результат = Ложь;
		КонецЕсли;
		
		ПараметрыПодбора.ПрерываниеОперацииДопустимо = Результат;
		
	Иначе
		
		Результат = ПараметрыПодбора.ПрерываниеОперацииДопустимо;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияИмеетВспомогательныеРЦ(Знач ПараметрыПланирования, Знач Этап, Знач ИдентификаторОперации)
	
	ВспомогательныеРЦ = ВспомогательныеРЦОперации(ПараметрыПланирования, Этап, ИдентификаторОперации);
	Возврат ЗначениеЗаполнено(ВспомогательныеРЦ);
	
КонецФункции

Функция ВспомогательныеРЦОперации(Знач ПараметрыПланирования, Знач Этап, Знач ИдентификаторОперации)
	
	Результат = Новый Массив;
	
	УсловиеПоиска = Новый Структура("Этап, ИдентификаторОперации", Этап, ИдентификаторОперации);
	СтрокиПоиска = ПараметрыПланирования.ВспомогательныеРабочиеЦентры.НайтиСтроки(УсловиеПоиска);
	Для Каждого Строка Из СтрокиПоиска Цикл
		Результат.Добавить(Строка.РабочийЦентр);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьОбсуживающиеРЦСвободныНаИнтервале(Знач ПараметрыПланирования, ВспомогательныеРЦ, Знач ИнтервалРазмещения)
	
	Для Каждого Строка Из ВспомогательныеРЦ Цикл
		
		Начало = ИнтервалРазмещения.Начало;
		Окончание = ИнтервалРазмещения.Окончание;
		
		Интервалы = ИнтервалыДоступногоВремени(ПараметрыПланирования, Строка.РабочийЦентр, Начало, Окончание);
		
		Если ЗначениеЗаполнено(Интервалы) Тогда
			
			Строка.Свободен = ПериодПринадлежитИнтервалам(ПараметрыПланирования, Начало, Окончание, Интервалы);
			
			ДоступныеИнтервалы = ИнициализироватьТаблицуДоступныеИнтервалыРЦ();
			
			ПодобратьДоступноеВремяРЦНаИнтервале(
				ПараметрыПланирования,
				Строка.РабочийЦентр,
				ИнтервалРазмещения.Начало,
				ИнтервалРазмещения.Окончание,
				ДоступныеИнтервалы,
				Интервалы);
				
			Строка.ДоступныеИнтервалы = ДоступныеИнтервалы;
			
		Иначе
			Строка.Свободен = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	Начало - Дата - Описание
// 	Окончание - Дата - Описание
// 	ДоступноеВремяИнтервалы - Неопределено, Массив из СтрокаТаблицыЗначений - где:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
// 	ДоступныеИнтервалыРЦ - см. ИнициализироватьТаблицуДоступныеИнтервалыРЦ
// Возвращаемое значение:
// 	Булево - Описание
Функция ПериодПринадлежитИнтервалам(Знач ПараметрыПланирования, Знач Начало, Знач Окончание, Знач ДоступноеВремяИнтервалы = Неопределено, Знач ДоступныеИнтервалыРЦ = Неопределено)
		
	Если Не ДоступноеВремяИнтервалы = Неопределено Тогда
		
		Интервалы = ДоступноеВремяИнтервалы;
		ИнтервалыДоступноеВремя = Истина;
		
	ИначеЕсли Не ДоступныеИнтервалыРЦ = Неопределено Тогда
		
		Интервалы = ДоступныеИнтервалыРЦ;
		ИнтервалыДоступноеВремя = Ложь;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ВремяОстаток = Окончание - Начало;
	
	Для Каждого Интервал Из Интервалы Цикл
		
		Если (Начало <= Интервал.Начало 
			И Окончание > Интервал.Начало)
			Или (Окончание >= Интервал.Окончание 
			И Начало < Интервал.Окончание)
			Или (Начало >= Интервал.Начало 
			И Окончание <= Интервал.Окончание) Тогда
			
			ЗачетНачало = Макс(Начало, Интервал.Начало);
			ЗачетОкончание = Мин(Окончание, Интервал.Окончание);
			
			Если ИнтервалыДоступноеВремя Тогда
				ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал);
			Иначе
				ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал.СтрокаДоступноеВремя);
			КонецЕсли;
			
			ВремяЗачет = Мин(ДоступноеВремя, (ЗачетОкончание - ЗачетНачало));
			ВремяОстаток = ВремяОстаток - ВремяЗачет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не (ВремяОстаток > 0);
	
КонецФункции

Функция ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, ДоступныйИнтервал)
	
	ДопустимаяЗагрузка = ВремяСменыДоступногоИнтервала(ПараметрыПланирования, ДоступныйИнтервал);
	ТекущаяЗагрузка = ЗанятоеВремяСмены(ПараметрыПланирования, ДоступныйИнтервал.РабочийЦентр, ДоступныйИнтервал.НачалоСмены);
	
	Результат = ДопустимаяЗагрузка - ТекущаяЗагрузка;
	
	Возврат Результат;
	
КонецФункции

Функция ИнтервалыДоступногоВремени(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач ПериодНачало, Знач ПериодОкончание)
    
    Результат = Новый Массив;
	    
    УсловиеПоиска = Новый Структура;
    УсловиеПоиска.Вставить("РабочийЦентр", РабочийЦентр);
    УсловиеПоиска.Вставить("Период");
	
	ПериодПоиска = НачалоДня(ПериодНачало);
	Пока ПериодПоиска < ПериодОкончание Цикл
		
		УсловиеПоиска.Период = ПериодПоиска;
		
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ПараметрыПланирования.ДоступноеВремя, УсловиеПоиска);
		
		Для Каждого Строка Из СтрокиПоиска Цикл
			Результат.Добавить(Строка);
		КонецЦикла;
		
		ПериодПоиска = КонецДня(ПериодПоиска) + 1;
		
	КонецЦикла;
	
    Возврат Результат;
	
КонецФункции

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	РабочийЦентр - СправочникСсылка.ВидыРабочихЦентров, СправочникСсылка.РабочиеЦентры, Произвольный - Описание
// 	ИнтервалНачало - Дата - Описание
// 	ИнтервалОкончание - Дата - Описание
// 	Результат - ТаблицаЗначений - Описание:
// * Начало - Дата -
// * Окончание - Дата -
// * Время - Дата -
// * СтрокаДоступноеВремя - СтрокаТаблицыЗначений -:
// ** ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// ** ПараллельнаяЗагрузка - Булево -
// ** СинхроннаяЗагрузка - Булево -
// ** РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// ** Период - Дата -
// ** Начало - Дата -
// ** Окончание - Дата -
// ** НачалоСмены - Дата -
// ** Время - Число -
// ** ВремяСмены - Число -
// ** МаксимальнаяЗагрузка - Число -
// ** ДоступнаяЗагрузка - Число -
// ** ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// ** ПредшествуетЗагрузка - Булево -
// ** ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// ** СледуетЗагрузка - Булево -
// ** ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
// 	Интервалы - Неопределено, Массив из СтрокаТаблицыЗначений - где:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
Процедура ПодобратьДоступноеВремяРЦНаИнтервале(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач ИнтервалНачало, Знач ИнтервалОкончание, Результат, Знач Интервалы = Неопределено)
		
	Если Интервалы = Неопределено Тогда
		Интервалы = ИнтервалыДоступногоВремени(ПараметрыПланирования, РабочийЦентр, ИнтервалНачало, ИнтервалОкончание);
	КонецЕсли;
	
	Для Каждого ДоступныйИнтервал Из Интервалы Цикл
		
		Если ДоступныйИнтервал.Начало >= ИнтервалОкончание Тогда
			Прервать;
		ИначеЕсли ДоступныйИнтервал.Окончание < ИнтервалНачало Тогда
			Продолжить;
			
		ИначеЕсли ДоступныйИнтервал.Начало <= ИнтервалНачало 
			И ДоступныйИнтервал.Окончание >= ИнтервалОкончание Тогда
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Начало = ИнтервалНачало;
			НоваяСтрока.Окончание = ИнтервалОкончание;
			НоваяСтрока.Время = ИнтервалОкончание - ИнтервалНачало;
			НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
			
		ИначеЕсли ДоступныйИнтервал.Начало > ИнтервалНачало 
			И ДоступныйИнтервал.Окончание < ИнтервалОкончание Тогда
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Начало = ДоступныйИнтервал.Начало;
			НоваяСтрока.Окончание = ДоступныйИнтервал.Окончание;
			НоваяСтрока.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
			НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
			
		ИначеЕсли ДоступныйИнтервал.Начало >= ИнтервалНачало 
			И ДоступныйИнтервал.Начало < ИнтервалОкончание Тогда 
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Начало = ДоступныйИнтервал.Начало;
			НоваяСтрока.Окончание = Мин(ДоступныйИнтервал.Окончание, ИнтервалОкончание);
			НоваяСтрока.Время = НоваяСтрока.Окончание - НоваяСтрока.Начало;
			НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
			
		ИначеЕсли ДоступныйИнтервал.Окончание > ИнтервалНачало 
			И ДоступныйИнтервал.Окончание <= ИнтервалОкончание Тогда
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Начало = Макс(ДоступныйИнтервал.Начало, ИнтервалНачало);
			НоваяСтрока.Окончание = ДоступныйИнтервал.Окончание;
			НоваяСтрока.Время = НоваяСтрока.Окончание - НоваяСтрока.Начало;
			НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция БулевоЗначениеТаблицы(Знач Таблица, Знач ИмяКолонки)
	
	Результат = Истина;
	Для Каждого Строка Из Таблица Цикл
		
		Если Не Строка[ИмяКолонки] Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьПоказателиРазмещенияОперацииНаРЦ(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	РассчитатьКоэффЗагрузкиРазмещения(ПараметрыПланирования, ПараметрыРазмещения);
	РассчитатьСтоимостьРазмещения(ПараметрыПланирования, ПараметрыРазмещения);
	
КонецПроцедуры

Процедура РассчитатьКоэффЗагрузкиРазмещения(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	ВремяСмен = 0;
	ВремяЗанято = 0;
	
	Для Каждого ЗаписьКэша Из ПараметрыРазмещения.КэшДоступныхИнтервалов Цикл
		
		ВремяСмен = ВремяСмен + ЗаписьКэша.ВремяСмены;
		
		ИнтервалЗанято = ЗанятоеВремяСмены(ПараметрыПланирования, ЗаписьКэша.РабочийЦентр, ЗаписьКэша.НачалоСмены);
		ВремяЗанято = ВремяЗанято + ИнтервалЗанято;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВремяСмен) Тогда
		ПараметрыРазмещения.КоэфЗагрузки = ВремяЗанято / ВремяСмен;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтоимостьРазмещения(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	Стоимость = 0;
	Расценки = РасценкиРабочегоЦентра(ПараметрыПланирования, ПараметрыРазмещения.РабочийЦентр);
	
	Если ЗначениеЗаполнено(Расценки) Тогда
		
		ВремяПереналадки = 0;
		ВремяПлан = 0;
		
		Для Каждого Интервал Из ПараметрыРазмещения.Интервалы Цикл
			
			ВремяПереналадки = ВремяПереналадки + Интервал.ВремяПереналадки;
			ВремяПлан = ВремяПлан + (Интервал.ВремяПлан - Интервал.ВремяПереналадки);
			
		КонецЦикла;
		
		СтоимостьРабота = (ВремяПлан / 3600) * Расценки.РасценкаРабота;
		СтоимостьПереналадка = (ВремяПереналадки / 3600) * Расценки.РасценкаПереналадка;
		Стоимость = СтоимостьРабота + СтоимостьПереналадка;
		
	КонецЕсли;
	
	ПараметрыРазмещения.Стоимость = Стоимость;
	
КонецПроцедуры

Функция РасценкиРабочегоЦентра(Знач ПараметрыПланирования, Знач РабочийЦентр)
	
	СтрокаПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "РабочийЦентр");
	
	Если СтрокаПоиска = Неопределено Тогда
		
		Результат = Неопределено;
		
	Иначе
		
		Результат = Новый Структура("РасценкаРабота, РасценкаПереналадка");
		ЗаполнитьЗначенияСвойств(Результат, СтрокаПоиска);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура КэшироватьДоступныеИнтервалыВспомогательныхРЦ(Знач ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	Для Каждого ДанныеВспомогательногоРЦ Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
		
		ДоступныйИнтервал =	ДоступныйИнтервалВспомогательногоРЦ(ДанныеВспомогательногоРЦ.ДоступныеИнтервалы, ПараметрыПодбора.ИнтервалРазмещения);
		
		Если ДоступныйИнтервал = Неопределено Тогда
			
			Отказ = Истина;
			
		Иначе
			
			КэшироватьДоступныйИнтервал(ПараметрыРазмещения, ДоступныйИнтервал, ПараметрыПодбора.ИнтервалРазмещения);
			
		КонецЕсли;
		
	КонецЦикла;                                                   
	
КонецПроцедуры

Процедура КэшироватьДоступныйИнтервал(ПараметрыРазмещения, Знач ДоступныйИнтервал, Знач ИнтервалРазмещения)
	
	КэшДоступныйИнтервал = ПараметрыРазмещения.КэшДоступныхИнтервалов.Добавить();
	ЗаполнитьЗначенияСвойств(КэшДоступныйИнтервал, ДоступныйИнтервал);
	КэшДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало;
	
КонецПроцедуры

Функция ЛучшийРабочийЦентрДляРазмещения(Знач ПараметрыПланирования, ТаблицаАльтернатив, Знач ПравилоВыбораРЦ)
	
	Если ТаблицаАльтернатив.Количество() > 1 Тогда
		
		Если ПараметрыПланирования.СпособЗагрузки = Перечисления.СпособыЗагрузкиВидаРабочегоЦентра.ЗагружатьРавномерно Тогда
			ДопПравило = ",КоэфЗагрузки ВОЗР";
		Иначе
			ДопПравило = ",КоэфЗагрузки УБЫВ";
		КонецЕсли;
		
		Если ПравилоВыбораРЦ = ПравилоРЦНастройкиМодели() Тогда
			
			ТаблицаАльтернатив.Колонки.Добавить("ОценкаВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
			ТаблицаАльтернатив.Колонки.Добавить("ВзвешеннаяОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
			
			РассчитатьОценкуВремениАльтернативныхРЦ(ТаблицаАльтернатив);
			КритерииОценки = КритерииОценкиМоделиПланирования(ПараметрыПланирования);
			РассчитатьВзвешеннуюОценку(ТаблицаАльтернатив, КритерииОценки);
			
			ПравилаСортировки = "ВзвешеннаяОценка ВОЗР" + ДопПравило;
			
		ИначеЕсли ПравилоВыбораРЦ = ПравилоРЦМинимизироватьПереналадки() Тогда
			
			ПравилаСортировки = "ВремяПереналадки ВОЗР" + ДопПравило;
			
		КонецЕсли;
		
		ТаблицаАльтернатив.Сортировать(ПравилаСортировки);
		
	КонецЕсли;
	
	Возврат ТаблицаАльтернатив[0];
	
КонецФункции

Процедура РассчитатьОценкуВремениАльтернативныхРЦ(ТаблицаАльтернатив)
	
	НачальнаяТочка = '00010101';
	
	Для Каждого Строка Из ТаблицаАльтернатив Цикл
		НачальнаяТочка = ?(ЗначениеЗаполнено(НачальнаяТочка), Мин(НачальнаяТочка, Строка.Начало), Строка.Начало);
	КонецЦикла;
	
	МинОтклонение = 0;
	
	Для Каждого Строка Из ТаблицаАльтернатив Цикл
		Отклонение = Строка.Окончание - НачальнаяТочка;
		Строка.ОценкаВремя = Отклонение;
		МинОтклонение = ?(ЗначениеЗаполнено(МинОтклонение), Мин(МинОтклонение, Отклонение), Отклонение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МинОтклонение) Тогда
		
		Для Каждого Строка Из ТаблицаАльтернатив Цикл
			Строка.ОценкаВремя = Строка.ОценкаВремя/МинОтклонение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредшествующийВариантНаладки(Знач ПараметрыПланирования, Знач ТекущийИнтервал)
	
	Результат = Неопределено;
	
	Если ТекущийИнтервал.ПредшествуетЗагрузка Тогда
		
		Результат = ТекущийИнтервал.ВариантНаладкиПредшествует;
		
	Иначе
		
		ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
		ТекущийИндекс = ДоступноеВремя.Индекс(ТекущийИнтервал);
		
		Пока Истина Цикл
			
			ТекущийИндекс = ТекущийИндекс - 1;
			Если ТекущийИндекс = -1 Тогда
				
				Прервать;
				
			Иначе
				
				ПредшествующийИнтервал = ДоступноеВремя[ТекущийИндекс];
				Если ПредшествующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр Тогда
					
					Если ПредшествующийИнтервал.ПредшествуетЗагрузка Тогда
						Результат = ПредшествующийИнтервал.ВариантНаладкиПредшествует;
						Прервать;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	СтрокаПартии - СтрокаТаблицыЗначений - Описание
// 	СтрокиИнтервалов - Массив из СтрокаТаблицыЗначений - где:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// * НомерПартии - Число -
// * РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры -
// * Начало - Дата -
// * Окончание - Дата -
// * ТактПараллельнойЗагрузки - УникальныйИдентификатор -
// * ВремяПлан - Число -
// * Загрузка - Число -
// * ЭтоПереналадка - Булево -
// * КоличествоПартии - Число -
// * Коэффициент - Число -
// * Создано - Число -
// * Выполнено - Число -
// * ТребуетПовторения - Число -
// * Пропущено - Число -
// * ВремяПерехода - Число -
// * Подразделение - СправочникСсылка.СтруктураПредприятия -
// * Вспомогательная - Булево -
// * ЛеваяГраница - Дата -
// * ПраваяГраница - Дата -
// * ДополнительнаяЗапись - Булево -
// * ДлительностьИнтервала - Число -
// 	Границы - Структура - Описание:
// * Начало - Дата -
// * Окончание - Дата -
// Возвращаемое значение:
// 	Булево - Описание
Функция РазместитьВыполненнуюПартиюВРасписании(ПараметрыПланирования, СтрокаПартии, СтрокиИнтервалов, Границы)
	
	ПараметрыРазмещения = ИнициализироватьПараметрыРазмещения();
	ПараметрыРазмещения.Вставить("СтрокаОперации", СтрокаПартии);
	ПараметрыРазмещения.Вставить("ФиксированнаяПартия", Истина);
	ПараметрыРазмещения.Вставить("Начало", Границы.Окончание);
	ПараметрыРазмещения.Вставить("Окончание", Границы.Начало);
	ПараметрыРазмещения.Вставить("РабочийЦентр", СтрокаПартии.РабочийЦентр);
	ИсправитьДочерниеОперацииПослеРазмещенияРодительской(ПараметрыПланирования, СтрокаПартии, ПараметрыРазмещения, Истина);
	
	СтруктураПоиска = Новый Структура("Этап, Операция, ИдентификаторОперации");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПартии);
	НайденныеСтроки = ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ПроверитьДанныеПредшествующихПартий(НайденныеСтроки[0], СтрокаПартии, Ложь);
	КонецЕсли;
	
	
	Если СтрокиИнтервалов.Количество() = 0 Тогда
		СтрокаРасписания = ПараметрыПланирования.ТаблицаРасписание.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасписания, ПараметрыПланирования);
		ЗаполнитьЗначенияСвойств(СтрокаРасписания, СтрокаПартии,, "РабочийЦентр");
		СтрокаРасписания.КоличествоПартии = СтрокаПартии.Выполнено + СтрокаПартии.Пропущено - СтрокаПартии.ТребуетПовторения;
		СтрокаРасписания.РабочийЦентр = СтрокаПартии.РабочийЦентрПроизводственнойОперации;
		Возврат Истина;
	КонецЕсли;
	
	Если СтрокиИнтервалов[0].КоличествоПартии = (СтрокаПартии.Выполнено + СтрокаПартии.Пропущено - СтрокаПартии.ТребуетПовторения) Тогда
		
		Для Каждого СтрокаИнтервала Из СтрокиИнтервалов Цикл
			СтрокаРасписания = ПараметрыПланирования.ТаблицаРасписание.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасписания, СтрокаИнтервала);
		КонецЦикла;
		
	Иначе
		
		ВремяШтучноеВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(СтрокаПартии.ВремяШтучное, СтрокаПартии.ВремяШтучноеЕдИзм);
		ВремяПЗВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(СтрокаПартии.ВремяПЗ, СтрокаПартии.ВремяПЗЕдИзм);
		
		Если СтрокаПартии.ПараллельнаяЗагрузка Тогда 
			ВремяРазместить = ВремяШтучноеВСекундах;
		ИначеЕсли ВремяШтучноеВСекундах > 0 Тогда 
			ВремяРазместить = СтрокаПартии.Количество / СтрокаПартии.Коэффициент * ВремяШтучноеВСекундах + ВремяПЗВСекундах;
		Иначе
			ВремяРазместить = 0;
		КонецЕсли;
		
		ИндекссИнтервала = 0;
		
		ВремяРабочихЦентров = Новый Соответствие;
		НачалоОперации = СтрокиИнтервалов[0].Начало;
		ОкончаниеОперации = Неопределено;
		Для Каждого СтрокаИнтервала Из СтрокиИнтервалов Цикл
			ТекущийРабочийЦентр = СтрокаИнтервала.РабочийЦентр;
			Если ТекущийРабочийЦентр = Неопределено Тогда
				ТекущийРабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
			КонецЕсли;
			Если ВремяРабочихЦентров.Получить(ТекущийРабочийЦентр) = Неопределено Тогда
				ВремяРабочихЦентров.Вставить(ТекущийРабочийЦентр, ВремяРазместить);
			КонецЕсли;
			
			ВремяПлан = ВремяРабочихЦентров.Получить(ТекущийРабочийЦентр);
			Если ВремяПлан = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРасписания = ПараметрыПланирования.ТаблицаРасписание.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасписания, СтрокаИнтервала);
			СтрокаРасписания.КоличествоПартии = СтрокаРасписания.Выполнено + СтрокаПартии.Пропущено - СтрокаПартии.ТребуетПовторения;
			
			ДлительностьИнтервала = Мин(ВремяПлан, СтрокаИнтервала.ВремяПлан);
			ВремяПлан = ВремяПлан - ДлительностьИнтервала;
			ВремяРабочихЦентров.Вставить(СтрокаИнтервала.РабочийЦентр, ВремяПлан);
			
			Если СтрокаРасписания.ВремяПлан > ДлительностьИнтервала Тогда
				СтрокаРасписания.ВремяПлан = ДлительностьИнтервала;
				СтрокаРасписания.Окончание = СтрокаРасписания.Начало + ДлительностьИнтервала;
			КонецЕсли;
			
			Если ОкончаниеОперации = Неопределено Тогда 
				ОкончаниеОперации = СтрокаИнтервала.Окончание;
			Иначе
				Если НачалоОперации > СтрокаИнтервала.Начало Тогда 
					НачалоОперации = СтрокаИнтервала.Начало;
				КонецЕсли;
				Если ОкончаниеОперации < СтрокаИнтервала.Окончание Тогда 
					ОкончаниеОперации = СтрокаИнтервала.Окончание;
				КонецЕсли;			
			КонецЕсли;
			
			Если ВремяПлан = 0 Тогда 
				СтрокаРасписания.ДополнительнаяЗапись = Ложь;
				СтрокаРасписания.ЛеваяГраница = НачалоОперации;
				СтрокаРасписания.ПраваяГраница = ОкончаниеОперации;
				СтрокаРасписания.ДлительностьИнтервала = ВремяРазместить;
			Иначе
				СтрокаРасписания.ДополнительнаяЗапись = Истина;
				СтрокаРасписания.ЛеваяГраница = '00010101';
				СтрокаРасписания.ПраваяГраница = '00010101';
				СтрокаРасписания.ДлительностьИнтервала = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецФункции

Функция РазместитьФиксированнуюПартиюВРасписании(ПараметрыПланирования, СтрокаПартии, СтрокиИнтервалов, Границы)
	
	ВремяШтучноеВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(СтрокаПартии.ВремяШтучное, СтрокаПартии.ВремяШтучноеЕдИзм);
	ВремяПЗВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(СтрокаПартии.ВремяПЗ, СтрокаПартии.ВремяПЗЕдИзм);
	
	Если СтрокаПартии.ПараллельнаяЗагрузка Тогда 
		ВремяРазместить = ВремяШтучноеВСекундах;
	ИначеЕсли ВремяШтучноеВСекундах > 0 Тогда 
		ВремяРазместить = СтрокаПартии.Количество / СтрокаПартии.Коэффициент * ВремяШтучноеВСекундах + ВремяПЗВСекундах;
	Иначе
		ВремяРазместить = 0;
	КонецЕсли;
	ВспомогательноеВремя = ВремяРазместить;
	
	ПараметрыРазмещения = ИнициализироватьПараметрыРазмещения();
	ПараметрыРазмещения.Вставить("СтрокаОперации", СтрокаПартии);
	ПараметрыРазмещения.Вставить("ФиксированнаяПартия", Истина);
	
	ТребуетРазмещения = Истина;		
	Для Индекс = 0 По СтрокиИнтервалов.ВГраница() Цикл
		СтрокаИнтервала = СтрокиИнтервалов[Индекс];
		
		Если СтрокаИнтервала.КоличествоПартии = (СтрокаИнтервала.Выполнено + СтрокаПартии.Пропущено - СтрокаПартии.ТребуетПовторения) Тогда
			ТребуетРазмещения = Ложь;
			Прервать;				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыРазмещения.Начало) Тогда
			ПараметрыРазмещения.Начало = СтрокаИнтервала.Начало;
		КонецЕсли;                                                   
		Если Не ЗначениеЗаполнено(ПараметрыРазмещения.РабочийЦентр) Тогда
			ПараметрыРазмещения.РабочийЦентр = СтрокаИнтервала.РабочийЦентр;
		КонецЕсли;
		
		Если СтрокаИнтервала.ЭтоПереналадка Тогда
			ВремяПереналадки = СтрокаИнтервала.ВремяПлан;
			ВремяПлан = 0;
		Иначе
			ВремяПереналадки = 0;
			ВремяПлан = Мин(ВремяРазместить, СтрокаИнтервала.ВремяПлан);
		КонецЕсли;
		
		Если СтрокаПартии.ТребуетПовторения >0 Тогда
			
			СтрокаПартии.ЗапретитьСоздаватьОперации = Истина;
			
		КонецЕсли;	
		
		Если ВремяРазместить > 0
			И Не СтрокаИнтервала.Вспомогательная Тогда 
			
			Интервал = ИнициализироватьИнтервалРазмещенияФиксированнойПартии();
			ЗаполнитьЗначенияСвойств(Интервал, СтрокаИнтервала);
			Интервал.ВремяПереналадки = ВремяПереналадки;
			Интервал.ВремяПлан = ?(ВремяПереналадки > 0, ВремяПереналадки, ВремяПлан);
			Интервал.Окончание = Интервал.Начало + ВремяПереналадки + ВремяПлан;
			
			ПараметрыРазмещения.Интервалы.Добавить(Интервал);
			ПараметрыРазмещения.Окончание = Интервал.Окончание;
			
			ВремяРазместить = ВремяРазместить - ВремяПлан;
			
			СтрокаПартии.ВремяРазместить = ВремяПлан;
			СтрокаПартии.ВремяПЗПараллельнаяЗагрузка = ВремяПЗВСекундах;
			
			ПодобратьИнтервалРазмещенияФиксированнойПартии(ПараметрыПланирования, ПараметрыРазмещения, Интервал);
									
		КонецЕсли;
		
		Если ВспомогательноеВремя > 0
			И СтрокаИнтервала.Вспомогательная Тогда 
			
			Интервалы = ИнтервалыДоступногоВремени(ПараметрыПланирования, СтрокаИнтервала.РабочийЦентр, СтрокаИнтервала.Начало, СтрокаИнтервала.Окончание);
			
			СтрокаРЦ = ПараметрыРазмещения.ВспомогательныеРЦ.Найти(СтрокаИнтервала.РабочийЦентр, "РабочийЦентр");
			Если СтрокаРЦ = Неопределено Тогда
				ДоступныеИнтервалы = ИнициализироватьТаблицуДоступныеИнтервалыРЦ();
				СтрокаРЦ = ПараметрыРазмещения.ВспомогательныеРЦ.Добавить();
				СтрокаРЦ.РабочийЦентр = СтрокаИнтервала.РабочийЦентр;
				СтрокаРЦ.Свободен = Истина;
			Иначе
				ДоступныеИнтервалы = СтрокаРЦ.ДоступныеИнтервалы;
			КонецЕсли;				
			
			ПодобратьДоступноеВремяРЦНаИнтервале(ПараметрыПланирования, СтрокаИнтервала.РабочийЦентр,
					СтрокаИнтервала.Начало, СтрокаИнтервала.Окончание, ДоступныеИнтервалы, Интервалы);
			
			СтрокаРЦ.ДоступныеИнтервалы = ДоступныеИнтервалы;
			СтрокаРЦ.ДоступноеВремя = ДоступныеИнтервалы.Итог("Время");
			
			ДоступныйИнтервал =	ДоступныйИнтервалВспомогательногоРЦ(ДоступныеИнтервалы, СтрокаИнтервала);
			Если ДоступныйИнтервал <> Неопределено Тогда
				КэшироватьДоступныйИнтервал(ПараметрыРазмещения, ДоступныйИнтервал, СтрокаИнтервала);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетРазмещения Тогда
		
		РассчитатьПоказателиРазмещенияОперацииНаРЦ(ПараметрыПланирования, ПараметрыРазмещения);
		
		РазместитьОперацию(ПараметрыПланирования, СтрокаПартии, ПараметрыРазмещения, Истина);
		
		СтруктураПоиска = Новый Структура("Этап, Операция, ИдентификаторОперации");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПартии);
		НайденныеСтроки = ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ПроверитьДанныеПредшествующихПартий(НайденныеСтроки[0], СтрокаПартии, Ложь);
		КонецЕсли;
		
	Иначе
		
		ПараметрыРазмещения.Вставить("Начало", Границы.Окончание);
		ПараметрыРазмещения.Вставить("Окончание", Границы.Начало);
		ПараметрыРазмещения.Вставить("РабочийЦентр", СтрокиИнтервалов[0].РабочийЦентр);
		
		ИсправитьДочерниеОперацииПослеРазмещенияРодительской(ПараметрыПланирования, СтрокаПартии, ПараметрыРазмещения, Истина);
		
	КонецЕсли;
	
КонецФункции

Функция ПодобратьИнтервалРазмещенияФиксированнойПартии(ПараметрыПланирования, ПараметрыРазмещения, Интервал)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ПрямоеРазмещение", Истина);
	ПараметрыПодбора.Вставить("МоментРазмещения", Интервал.Начало);
	ПараметрыПодбора.Вставить("Операция", ПараметрыРазмещения.СтрокаОперации);
	ПараметрыПодбора.Вставить("ВариантНаладки", ПараметрыРазмещения.СтрокаОперации.ВариантНаладки); 
	ПараметрыПодбора.Вставить("ПараллельнаяЗагрузка");
	ПараметрыПодбора.Вставить("СинхроннаяЗагрузка");
	ПараметрыПодбора.Вставить("МаксимальнаяЗагрузка");
	ПараметрыЗагрузки = ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, Интервал.РабочийЦентр);
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, ПараметрыЗагрузки);
	ИнициализироватьПерезаполняемыеПараметрыПодбораИнтервалов(ПараметрыПланирования, ПараметрыРазмещения.СтрокаОперации, Интервал.РабочийЦентр, ПараметрыПодбора);
	
	УсловиеПоиска = Новый Структура;
    УсловиеПоиска.Вставить("РабочийЦентр", Интервал.РабочийЦентр);
    УсловиеПоиска.Вставить("Период", НачалоДня(Интервал.Начало));
	НайденныеСтроки = НайтиСтрокиВТаблицеССохранениемПорядка(ПараметрыПланирования.ДоступноеВремя, УсловиеПоиска);
	
	ДоступныйИнтервал = Неопределено;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.Начало <= Интервал.Начало
			И НайденнаяСтрока.Окончание >= Интервал.Окончание
			И ИнтервалПригоденДляРазмещенияОперации(ПараметрыПланирования, НайденнаяСтрока, ПараметрыПодбора) Тогда
			ДоступныйИнтервал = НайденнаяСтрока;
			Прервать;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если Не ДоступныйИнтервал = Неопределено Тогда
		ПараметрыПодбора.Вставить("ДоступныйИнтервал", ДоступныйИнтервал);
		ИнтервалРазмещения = ИнтервалРазмещенияОперации(ПараметрыПланирования, ПараметрыПодбора);
		КэшироватьДоступныйИнтервал(ПараметрыРазмещения, ДоступныйИнтервал, ИнтервалРазмещения);
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * Загрузка - Число -
// * ВремяПлан - Число -
// * ВремяПереналадки - Число -
// * Окончание - Дата -
// * Начало - Дата -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры - 
// * Подразделение - СправочникСсылка.СтруктураПредприятия - 
Функция ИнициализироватьИнтервалРазмещенияФиксированнойПартии()
	
	Результат = Новый Структура;
	Результат.Вставить("Подразделение");
	Результат.Вставить("РабочийЦентр");
	Результат.Вставить("Начало", 	'00010101');
	Результат.Вставить("Окончание", '00010101');
	Результат.Вставить("ВремяПереналадки", 0);
	Результат.Вставить("ВремяПлан", 0); 
	Результат.Вставить("Загрузка", 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АлгоритмыПланирования

Функция ОперацииТактаПланирования(Знач ПараметрыПланирования, Знач ВидРабочегоЦентра, Знач ПриоритетЭтапа)
	
	УсловиеПоиска = Новый Структура;
	УсловиеПоиска.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
	УсловиеПоиска.Вставить("ПриоритетЭтапа", ПриоритетЭтапа);
	УсловиеПоиска.Вставить("Размещать", Истина);
	УсловиеПоиска.Вставить("Размещена", Ложь);
	УсловиеПоиска.Вставить("ЗависитОтПредшествующих", Ложь);
	
	Возврат ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(УсловиеПоиска);
	
КонецФункции

Функция ПерезаполняемыеПараметрыПланирования(Знач ПараметрыПланирования)
	
	Результат = Новый Структура;
	
	ИменаПараметров = ИменаПерезаполняемыхПараметровПланирования();
	Для Каждого Параметр Из ИменаПараметров Цикл
		
		Если ПараметрыПланирования.Свойство(Параметр) Тогда
			ЗначениеПараметра = ПараметрыПланирования[Параметр];
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
				Результат.Вставить(Параметр, ЗначениеПараметра.Скопировать());
			Иначе
				Результат.Вставить(Параметр, ЗначениеПараметра);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПерезаполнитьПараметрыПланирования(ПараметрыПланирования, Знач ПерезаполняемыеПараметры)
	
	Для Каждого Параметр Из ПерезаполняемыеПараметры Цикл
		
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
			ПараметрыПланирования.Вставить(Параметр.Ключ, Параметр.Значение.Скопировать());
		Иначе
			ПараметрыПланирования.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаПерезаполняемыхПараметровПланирования()
	
	Результат = Новый Массив;
	
	Результат.Добавить("ТаблицаОпераций");
	Результат.Добавить("ЗанятоеВремяПоСменам");
	
	Результат.Добавить("МежоперационныеПереходы");
	Результат.Добавить("ТаблицаРасписание");
	
	Результат.Добавить("ТаблицаРабочихЦентров");
	Результат.Добавить("РангиРабочихЦентров");
	
	Результат.Добавить("ДоступноеВремя");
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалРазмещения)
	
	СтрокаЗагрузки = ПараметрыПланирования.ТаблицаРасписание.Добавить(); //см. ИнициализироватьТаблицуРасписание 
	
	ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, Операция);
	ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, ПараметрыРазмещения);
	ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, ИнтервалРазмещения);
	
	СтрокаЗагрузки.КоличествоПартии = Операция.Количество;
	
КонецФункции

Процедура ЗаполнитьОбщиеСвойстваРазмещения(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	ПараметрыРазмещения.Вставить("Вспомогательная", Ложь);
	ПараметрыРазмещения.Вставить("ЭтоПереналадка", Ложь);
	ПараметрыРазмещения.Вставить("МодельПланирования", ПараметрыПланирования.МодельПланирования);
	
КонецПроцедуры

Процедура РазместитьВспомогательныеОперации(Знач ПараметрыПланирования, Знач Операция, Знач ПараметрыРазмещения, Знач ИнтервалРазмещения)
	
	ПараметрыРазмещенияОбсл = ПараметрыРазмещенияВспомогательныхРЦ(ПараметрыПланирования, ПараметрыРазмещения);
	ИнтервалРазмещенияОбсл = ИнтервалРазмещенияВспомогательныхРЦ(ИнтервалРазмещения);
	
	Для Каждого ДанныеВспомогательногоРЦ Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыРазмещенияОбсл, ДанныеВспомогательногоРЦ);
		ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещенияОбсл, ИнтервалРазмещенияОбсл);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыРазмещенияВспомогательныхРЦ(ПараметрыПланирования, ПараметрыРазмещенияОсн)
	
	Результат = ИнициализироватьПараметрыРазмещения();
	
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыРазмещенияОсн);
	ЗаполнитьОбщиеСвойстваРазмещения(ПараметрыПланирования, Результат);
	
	Результат.Вспомогательная = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныйИнтервалВспомогательногоРЦ(Знач ДоступныеИнтервалы, Знач ИнтервалРазмещенияОсн)
	
	Результат = Неопределено;
	
	Для Каждого Интервал Из ДоступныеИнтервалы Цикл
		
		Если Интервал.Начало <= ИнтервалРазмещенияОсн.Начало
			И Интервал.Окончание >= ИнтервалРазмещенияОсн.Окончание Тогда
			
			Результат = Интервал.СтрокаДоступноеВремя;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнтервалРазмещенияВспомогательныхРЦ(Знач ИнтервалРазмещения)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ИнтервалРазмещения);
	Результат.ВремяПереналадки = 0;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьНеразмещеннуюОперацию(ПараметрыПланирования, Знач Операция, Знач ПрямоеРазмещение)
	
	Операция.Размещать = Ложь;
	ОтменитьРазмещениеДочернихОперацийРекурсивно(ПараметрыПланирования, Операция, ПрямоеРазмещение);
	
КонецПроцедуры

Процедура ОтменитьРазмещениеДочернихОперацийРекурсивно(ПараметрыПланирования, Знач ОперацияРодитель, Знач ПрямоеРазмещение)
	
	ДочерниеОперации = СвязанныеОперации(ПараметрыПланирования, ОперацияРодитель.Этап, ОперацияРодитель.ИдентификаторОперации, Истина, ПрямоеРазмещение);
	
	Для Каждого ДочерняяОперация Из ДочерниеОперации Цикл
		
		Если ДочерняяОперация.Этап = ОперацияРодитель.Этап 
			И Не ДочерняяОперация.Размещена 
			И ДочерняяОперация.Размещать Тогда
			
			ДочерняяОперация.Размещать = Ложь;
			ОтменитьРазмещениеДочернихОперацийРекурсивно(ПараметрыПланирования, ДочерняяОперация, ПрямоеРазмещение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьДоступноеВремя(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения)
	
	ЗанятыйИнтервалВремя = ИнтервалРазмещения.ВремяПлан;
	Если ЗанятыйИнтервалВремя = ДоступныйИнтервал.Время Тогда
		
		ЗачестьЗагрузкуИдентичныйИнтервал(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения);
		
	ИначеЕсли ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало Тогда
		
		ЗачестьЗагрузкуИнтервалСлева(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения);
		
	ИначеЕсли ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание Тогда
		
		ЗачестьЗагрузкуИнтервалСправа(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения);
		
	Иначе
		
		ЗачестьЗагрузкуИнтервалВнутри(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИдентичныйИнтервал(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения)
	
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		ДоступныйИнтервал.ВариантНаладки = Операция.ВариантНаладки;
		Если ДоступныйИнтервал.ДоступнаяЗагрузка = 0 Тогда
			
			ДоступныйИнтервал.Время = 0;
			ПустыеИнтервалы.Добавить(ДоступныйИнтервал);
			
		КонецЕсли;
		
	Иначе
		
		ДоступныйИнтервал.Время = 0;
		ПустыеИнтервалы.Добавить(ДоступныйИнтервал);
		
	КонецЕсли;
	
	ИсправитьПредшествующийИнтервалДоступногоВремени(ПараметрыПланирования.ДоступноеВремя, Операция, ДоступныйИнтервал);
	ИсправитьПоследующийИнтервалДоступногоВремени(ПараметрыПланирования.ДоступноеВремя, Операция, ДоступныйИнтервал);
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИнтервалСлева(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	
	ДоступныйИнтервал.Начало = ИнтервалРазмещения.Окончание;
	ДоступныйИнтервал.Время = ДоступныйИнтервал.Время - ИнтервалРазмещения.ВремяПлан;
		
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если ДоступнаяЗагрузка = 0 Тогда
			
			ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
			
		Иначе
			
			ИнтервалДоТекущего = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал));
			ЗаполнитьЗначенияСвойств(ИнтервалДоТекущего, ДоступныйИнтервал);
			ИнтервалДоТекущего.Начало = ИнтервалРазмещения.Начало;
			ИнтервалДоТекущего.Окончание = ИнтервалРазмещения.Окончание;
			ИнтервалДоТекущего.Время = ИнтервалРазмещения.ВремяПлан;
			ИнтервалДоТекущего.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
			ИнтервалДоТекущего.ВариантНаладки = Операция.ВариантНаладки;
			
			ИнтервалДоТекущего.СледуетЗагрузка = Не (ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ИнтервалДоТекущего.ВариантНаладкиСледует = ДоступныйИнтервал.ВариантНаладки;
			
			ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ИнтервалДоТекущего);
			
		КонецЕсли;
		
	Иначе
		ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
	КонецЕсли;
	
	УстановитьИнтервалуФлагПредшествуетЗагрузка(ДоступныйИнтервал, Операция);
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИнтервалСправа(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	
	ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Начало;
	ДоступныйИнтервал.Время = ДоступныйИнтервал.Время - ИнтервалРазмещения.ВремяПлан;
	
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если ДоступнаяЗагрузка = 0 Тогда
			
			ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
			
		Иначе
			
			ИнтервалПослеТекущего = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал)+1);
			ЗаполнитьЗначенияСвойств(ИнтервалПослеТекущего, ДоступныйИнтервал);
			ИнтервалПослеТекущего.Начало = ИнтервалРазмещения.Начало;
			ИнтервалПослеТекущего.Окончание = ИнтервалРазмещения.Окончание;
			ИнтервалПослеТекущего.Время = ИнтервалРазмещения.ВремяПлан;
			ИнтервалПослеТекущего.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
			ИнтервалПослеТекущего.ВариантНаладки = Операция.ВариантНаладки;
			
			ИнтервалПослеТекущего.ПредшествуетЗагрузка = Не (ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ИнтервалПослеТекущего.ВариантНаладкиПредшествует = ДоступныйИнтервал.ВариантНаладки;
			
			ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ИнтервалПослеТекущего);
			
		КонецЕсли;
		
	Иначе
		ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
	КонецЕсли;
	
	УстановитьИнтервалуФлагСледуетЗагрузка(ДоступныйИнтервал, Операция);
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИнтервалВнутри(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	
	ИнтервалДоЗанятого = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал));
	ЗаполнитьЗначенияСвойств(ИнтервалДоЗанятого, ДоступныйИнтервал);
	ИнтервалДоЗанятого.Окончание = ИнтервалРазмещения.Начало;
	ИнтервалДоЗанятого.Время = ИнтервалДоЗанятого.Окончание - ИнтервалДоЗанятого.Начало;
	УстановитьИнтервалуФлагСледуетЗагрузка(ИнтервалДоЗанятого, Операция);
	
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если Не ДоступнаяЗагрузка = 0 Тогда
			
			ЗагруженныйИнтервал = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал));
			ЗаполнитьЗначенияСвойств(ЗагруженныйИнтервал, ДоступныйИнтервал);
			ЗагруженныйИнтервал.Начало = ИнтервалРазмещения.Начало;
			ЗагруженныйИнтервал.Окончание = ИнтервалРазмещения.Окончание;
			ЗагруженныйИнтервал.Время = ИнтервалРазмещения.ВремяПлан;
			ЗагруженныйИнтервал.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
			ЗагруженныйИнтервал.ВариантНаладки = Операция.ВариантНаладки;
			
			ЗагруженныйИнтервал.ПредшествуетЗагрузка = Не (ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ЗагруженныйИнтервал.ВариантНаладкиПредшествует = ДоступныйИнтервал.ВариантНаладки;
			ЗагруженныйИнтервал.СледуетЗагрузка = Не (ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ЗагруженныйИнтервал.ВариантНаладкиСледует = ДоступныйИнтервал.ВариантНаладки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтервалПослеЗанятого = ДоступныйИнтервал;
	ИнтервалПослеЗанятого.Начало = ИнтервалРазмещения.Окончание;
	ИнтервалПослеЗанятого.Время = ИнтервалПослеЗанятого.Окончание - ИнтервалПослеЗанятого.Начало;
	УстановитьИнтервалуФлагПредшествуетЗагрузка(ИнтервалПослеЗанятого, Операция);
	
КонецПроцедуры

Процедура ОтразитьЗанятоеВремяПоСменам(ПараметрыПланирования, Знач ДоступныйИнтервал, Знач РабочийЦентр, Знач Время)
	
	ТаблицаЗанятоеВремя = ПараметрыПланирования.ЗанятоеВремяПоСменам;
	УсловиеПоиска = Новый Структура("РабочийЦентр, НачалоСмены", РабочийЦентр, ДоступныйИнтервал.НачалоСмены);
	
	СтрокиПоиска = ТаблицаЗанятоеВремя.НайтиСтроки(УсловиеПоиска);
	Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
		
		НайденнаяСтрока = СтрокиПоиска[0];
		НайденнаяСтрока.ВремяЗанято = НайденнаяСтрока.ВремяЗанято + Время;
		
	Иначе
		
		НоваяСтрока = ТаблицаЗанятоеВремя.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДоступныйИнтервал);
		НоваяСтрока.РабочийЦентр = РабочийЦентр;
		НоваяСтрока.ВремяЗанято = Время;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Знач Операция, Знач ТекущийИнтервал)
	
	ИндексПредшествующего = ДоступноеВремя.Индекс(ТекущийИнтервал) - 1;
	
	Если ИндексПредшествующего >= 0 Тогда
		
		ПредшествующийИнтервал = ДоступноеВремя[ИндексПредшествующего];
		
		Если ПредшествующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр
			И Не ПредшествующийИнтервал.СледуетЗагрузка Тогда
			
			УстановитьИнтервалуФлагСледуетЗагрузка(ПредшествующийИнтервал, Операция);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Знач Операция, Знач ТекущийИнтервал)
	
	ИндексСледующего = ДоступноеВремя.Индекс(ТекущийИнтервал) + 1;
	
	Если ИндексСледующего < ДоступноеВремя.Количество() Тогда
		
		СледующийИнтервал = ДоступноеВремя[ИндексСледующего];
		
		Если СледующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр
			И Не СледующийИнтервал.ПредшествуетЗагрузка Тогда
			
			УстановитьИнтервалуФлагПредшествуетЗагрузка(СледующийИнтервал, Операция);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИнтервалуФлагСледуетЗагрузка(Интервал, Знач Операция)
	
	Интервал.СледуетЗагрузка = Истина;
	Интервал.ВариантНаладкиСледует = Операция.ВариантНаладки;
	
КонецПроцедуры

Процедура УстановитьИнтервалуФлагПредшествуетЗагрузка(Интервал, Знач Операция)
	
	Интервал.ПредшествуетЗагрузка = Истина;
	Интервал.ВариантНаладкиПредшествует = Операция.ВариантНаладки;
	
КонецПроцедуры

Процедура УдалитьПустыеИнтервалыДоступногоВремени(ПараметрыПланирования, ПустыеИнтервалы)
	
	Для Каждого Интервал Из ПустыеИнтервалы Цикл
		ПараметрыПланирования.ДоступноеВремя.Удалить(Интервал);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыделитьИзИнтервалаВремяПереналадки(Знач ИнтервалРазмещения)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ИнтервалРазмещения);
	
	Если ИнтервалРазмещения.ВремяПереналадки < ИнтервалРазмещения.ВремяПлан Тогда
		Результат.Окончание = ИнтервалРазмещения.Начало + ИнтервалРазмещения.ВремяПереналадки;
		Результат.ВремяПлан = ИнтервалРазмещения.ВремяПереналадки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыделитьИзИнтервалаВремяОсновное(Знач ИнтервалРазмещения)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ИнтервалРазмещения);
	
	Результат.Начало = ИнтервалРазмещения.Начало + ИнтервалРазмещения.ВремяПереналадки;
	Результат.ВремяПлан = ИнтервалРазмещения.ВремяПлан - ИнтервалРазмещения.ВремяПереналадки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗанятоеВремяСмены(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач НачалоСмены)
	
	УсловиеПоиска = Новый Структура;
	УсловиеПоиска.Вставить("РабочийЦентр", РабочийЦентр);
	УсловиеПоиска.Вставить("НачалоСмены", НачалоСмены);
	
	СтрокиПоиска = ПараметрыПланирования.ЗанятоеВремяПоСменам.НайтиСтроки(УсловиеПоиска);
	Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
		Результат = СтрокиПоиска[0].ВремяЗанято;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияВремяПлан(Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр = Неопределено)
	
	РабочийЦентрДляПоиска = ?(ЗначениеЗаполнено(РабочийЦентр), РабочийЦентр, Операция.РабочийЦентр);
	
	Если ТипЗначенияРабочийЦентр(РабочийЦентрДляПоиска) Тогда
		
		Результат = ВремяСПоправкойНаКоэфВремениРаботы(ПараметрыПланирования, РабочийЦентрДляПоиска, Операция.ВремяРазместить);
		
	Иначе
		
		Результат = Операция.ВремяРазместить;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияВремяПЗПараллельнаяЗагрузка(Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр = Неопределено)
	
	РабочийЦентрДляПоиска = ?(ЗначениеЗаполнено(РабочийЦентр), РабочийЦентр, Операция.РабочийЦентр);
	
	Если ТипЗначенияРабочийЦентр(РабочийЦентрДляПоиска) Тогда
		
		Результат = ВремяСПоправкойНаКоэфВремениРаботы(ПараметрыПланирования, РабочийЦентрДляПоиска, Операция.ВремяПЗПараллельнаяЗагрузка);
		
	Иначе
		
		Результат = Операция.ВремяПЗПараллельнаяЗагрузка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяСПоправкойНаКоэфВремениРаботы(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач Время)
	
	Коэф = КоэффициентВремениРаботыРЦ(ПараметрыПланирования, РабочийЦентр);
	Возврат Окр(Время * Коэф);
	
КонецФункции

Функция КоэффициентВремениРаботыРЦ(ПараметрыПланирования, РабочийЦентр)
	
	СтрокаПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "РабочийЦентр");
	
	Если СтрокаПоиска = Неопределено Тогда
		Результат = 1;
	Иначе
		Результат = ?(ЗначениеЗаполнено(СтрокаПоиска.КоэффициентВремениРаботы), СтрокаПоиска.КоэффициентВремениРаботы, 1)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ПараметрыПланирования см. ИнициализироватьПараметрыПланирования
// 	Операция - СтрокаТаблицыЗначений - где:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// * НомерПартии - Число -
// * РабочийЦентр - Строка, СправочникСсылка.РабочиеЦентры -
// * Начало - Дата -
// * Окончание - Дата -
// * ТактПараллельнойЗагрузки - УникальныйИдентификатор -
// * ВремяПлан - Число -
// * Загрузка - Число -
// * ЭтоПереналадка - Булево -
// * КоличествоПартии - Число -
// * Коэффициент - Число -
// * Создано - Число -
// * Выполнено - Число -
// * ТребуетПовторения - Число -
// * Пропущено - Число -
// * ВремяПерехода - Число -
// * Подразделение - СправочникСсылка.СтруктураПредприятия -
// * Вспомогательная - Булево -
// * ЛеваяГраница - Дата -
// * ПраваяГраница - Дата -
// * ДополнительнаяЗапись - Булево -
// * ДлительностьИнтервала - Число -
// 	ПараметрыРазмещения - см. ИнициализироватьПараметрыРазмещения
// 	ПрямоеРазмещение - Булево - 
Процедура ИсправитьДочерниеОперацииПослеРазмещенияРодительской(ПараметрыПланирования, Операция, Знач ПараметрыРазмещения, Знач ПрямоеРазмещение)
	
	ДочерниеОперации = СвязанныеОперации(ПараметрыПланирования, Операция.Этап, Операция.ИдентификаторОперации, Истина, ПрямоеРазмещение);
	
	Для Каждого ДочерняяОперация Из ДочерниеОперации Цикл
		
		ДочерняяОперация.ЗависитОтПредшествующих = Не РодительскиеОперацииРазмещены(ПараметрыПланирования, ДочерняяОперация, ПрямоеРазмещение);
		
		Если ДочерняяОперация.ДанныеПредшествующихПартий.Колонки.Количество() = 0 Тогда
 			ИнициализироватьДанныеПредшествующихПартий(ДочерняяОперация.ДанныеПредшествующихПартий);
			ДочерняяОперация.ДанныеПредшествующихОтсортированы = Ложь;
		КонецЕсли;
		ДанныеПредшествующейПартии = ДочерняяОперация.ДанныеПредшествующихПартий.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеПредшествующейПартии, Операция,, "Количество");
		ДанныеПредшествующейПартии.Количество = Операция.Количество / Операция.Коэффициент;
		Если ДочерняяОперация.РазмерПартии = 0
			Или ДочерняяОперация.РазмерПартии > Операция.ПередаточнаяПартия Тогда
			ДочерняяОперация.РазмерПартии = Операция.ПередаточнаяПартия;
		КонецЕсли;
		
		Если ПараметрыРазмещения = Неопределено Тогда
			ДанныеПредшествующейПартии.Дата = ?(ПрямоеРазмещение, Операция.Окончание, Операция.Начало);
		Иначе
			Если ПрямоеРазмещение Тогда
				ДочерняяОперация.ДатаЗапуска = ДатаЗапускаДочернейОперации(
					ПараметрыПланирования, Операция, ПараметрыРазмещения.Окончание, ДочерняяОперация);
				ДанныеПредшествующейПартии.Дата = ПараметрыРазмещения.Окончание;
			Иначе
				ДочерняяОперация.ДатаВыпуска = ДатаВыпускаДочернейОперации(
					ПараметрыПланирования, Операция, ПараметрыРазмещения.Начало, ДочерняяОперация);
				ДанныеПредшествующейПартии.Дата = ПараметрыРазмещения.Начало;
			КонецЕсли;
		КонецЕсли;	
		
		//ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(ПараметрыПланирования, Операция, ДочерняяОперация, ПараметрыРазмещения.РабочийЦентр, ПрямоеРазмещение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РодительскиеОперацииРазмещены(Знач ПараметрыПланирования, Знач Операция, Знач ПрямоеРазмещение)
	
	Результат = Истина;
	
	РодительскиеОперации = СвязанныеОперации(ПараметрыПланирования, Операция.Этап, Операция.ИдентификаторОперации, Ложь, ПрямоеРазмещение);
	
	Для Каждого РодительскаяОперация Из РодительскиеОперации Цикл
		
		Если Не РодительскаяОперация.Размещена Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования
// 	Операции - Массив из СтрокаТаблицыЗначений - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Операции - Массив -
// * Расписание - см. НовыйОбъектРасписаниеВарианта
// * ПравилоВыбораРЦ - Строка -
Функция ИнициализироватьВариантыРасписания(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = НовыйОбъектВариантыРасписания();
	
	Если Операции.Количество() = 1 Тогда
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Операции = Операции;
		НоваяСтрока.Расписание = НовыйОбъектРасписаниеВарианта();
		НоваяСтрока.ПравилоВыбораРЦ = ПравилоРЦНастройкиМодели();
		
	Иначе
		
		ОчередьОпераций = ОчередьОпераций(ПараметрыПланирования, Операции);
		
		ПравилаОперации = ПравилаОчередиОпераций(ОчередьОпераций);
		ПравилаРЦ = ПравилаВыбораРЦ(ПараметрыПланирования, Операции);
		
		Для каждого ПравилоОперации Из ПравилаОперации Цикл
			
			ОперацииУп = ОперацииОчередиУпорядоченныеПоПравилу(ОчередьОпераций, ПравилоОперации);
			
			Для каждого ПравилоРЦ Из ПравилаРЦ Цикл
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Операции = ОперацииУп;
				НоваяСтрока.Расписание = НовыйОбъектРасписаниеВарианта();
				НоваяСтрока.ПравилоВыбораРЦ = ПравилоРЦ;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацииИмеютРазличныеВариантыНаладки(Операции)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Операции) Тогда
		
		ТекущийВН = Операции[0].ВариантНаладки;
		Для Каждого Операция Из Операции Цикл
			
			Если Не Операция.ВариантНаладки = ТекущийВН Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйОбъектВариантыРасписания()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Операции", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Расписание", Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Колонки.Добавить("ПравилоВыбораРЦ", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	
	Возврат Результат;
	
КонецФункции

Функция ОчередьОпераций(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = ИнициализироватьОчередьОпераций();
	
	Для Каждого Операция Из Операции Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Операция);
		НоваяСтрока.Операция = Операция;
	КонецЦикла;
	
	НесколькоВН = ОперацииИмеютРазличныеВариантыНаладки(Операции);
	Если НесколькоВН Тогда
		
		ЗаполнитьДанныеЦепочекВОчередиОпераций(ПараметрыПланирования, Результат);
		
	Иначе
		
		Для каждого Строка Из Результат Цикл
			Строка.ДатаЗапускаЦепочка = Строка.ДатаЗапуска;
			Строка.ВремяРазместитьЦепочка = Строка.ВремяРазместить;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеЦепочекВОчередиОпераций(Знач ПараметрыПланирования, ОчередьОпераций)
	
	ОчередьОпераций.Сортировать("ДатаЗапуска Возр, ВремяРазместить Возр");
	
	НомерЦепочки = 1;
	
	Для Каждого Операция Из ОчередьОпераций Цикл
		
		Если Не ЗначениеЗаполнено(Операция.НомерЦепочки) Тогда
			
			ОперацииЦепочки = ОперацииЦепочки(ОчередьОпераций, Операция);
			
			ВремяРазместитьЦепочка = 0;
			Для Каждого ОперацияЦепочки Из ОперацииЦепочки Цикл
				ВремяРазместитьЦепочка = ВремяРазместитьЦепочка + ОперацияЦепочки.ВремяРазместить;
			КонецЦикла;
							
			Для Каждого ОперацияЦепочки Из ОперацииЦепочки Цикл
				ОперацияЦепочки.НомерЦепочки = НомерЦепочки;
				ОперацияЦепочки.ДатаЗапускаЦепочка = Операция.ДатаЗапуска;
				ОперацияЦепочки.ВремяРазместитьЦепочка = ВремяРазместитьЦепочка;
			КонецЦикла;
			
		    НомерЦепочки = НомерЦепочки + 1;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОперацииЦепочки(Знач ОчередьОпераций, Знач ПерваяОперация)
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПерваяОперация);
	ЗавершениеЦепочки = ПерваяОперация.ДатаЗапуска + ПерваяОперация.ВремяРазместить;
	
	Для Индекс = ОчередьОпераций.Индекс(ПерваяОперация)+1 По ОчередьОпераций.Количество()-1 Цикл
		
		СледующаяОперация = ОчередьОпераций[Индекс];
		
		Если СледующаяОперация.ДатаЗапуска <= ЗавершениеЦепочки Тогда
			
			Если СледующаяОперация.ВариантНаладки = ПерваяОперация.ВариантНаладки Тогда
				
				Результат.Добавить(СледующаяОперация);
				
				ЗавершениеСледующей = СледующаяОперация.ДатаЗапуска + СледующаяОперация.ВремяРазместить;
				ЗавершениеЦепочки = Макс(ЗавершениеЦепочки, ЗавершениеСледующей);
				
			КонецЕсли;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацииОчередиУпорядоченныеПоПравилу(ОчередьОпераций, Знач Правило)
	
	Если Правило = ПравилоОпДатаЗапускаВозр() Тогда
		ПоляСортировки = "ДатаЗапускаЦепочка ВОЗР, ВариантНаладки, ДатаЗапуска ВОЗР";
	ИначеЕсли Правило = ПравилоОпБольшиеЗатемМаленькие() Тогда
		ПоляСортировки = "ВремяРазместитьЦепочка УБЫВ, ДатаЗапускаЦепочка ВОЗР, ВариантНаладки, ДатаЗапуска ВОЗР";
	Иначе
		ПоляСортировки = "ДатаЗапускаЦепочка ВОЗР, ВариантНаладки, ДатаЗапуска ВОЗР";
	КонецЕсли;
	
	ОчередьОпераций.Сортировать(ПоляСортировки);
	
	Результат = Новый Массив;
	Для Каждого Строка Из ОчередьОпераций Цикл
		Результат.Добавить(Строка.Операция);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьОчередьОпераций()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Результат.Колонки.Добавить("НомерЦепочки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Результат.Колонки.Добавить("ВариантНаладки", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	Результат.Колонки.Добавить("ДатаЗапуска", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ДатаЗапускаЦепочка", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ВремяРазместить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Результат.Колонки.Добавить("ВремяРазместитьЦепочка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));

	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Операция - СтрокаТаблицыЗначений -
// * ПартияОперации - Структура -
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * ИдентификаторОперации - Число -
// * НомерПартии - Число -
// * ПараметрыРазмещения - Структура -
// * Начало - Дата -
// * Окончание - Дата -
// * ОценкаВремя - см. ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля
// * Стоимость - см. ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля
Функция НовыйОбъектРасписаниеВарианта()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Результат.Колонки.Добавить("ПартияОперации", Новый ОписаниеТипов("Структура"));
	Результат.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Результат.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("НомерПартии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ПараметрыРазмещения", Новый ОписаниеТипов("Структура"));
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ОценкаВремя", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	Результат.Колонки.Добавить("Стоимость", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	Результат.Индексы.Добавить("Этап, ИдентификаторОперации");
	
	Возврат Результат;
	
КонецФункции

Функция ЛучшийВариантРасписания(Знач ПараметрыПланирования, Знач ВариантыРасписания)
	
	Если ВариантыРасписания.Количество() = 1 Тогда
		
		Возврат ВариантыРасписания[0];
		
	Иначе
		
		РассчитатьОценкуВремениВариантовРасписания(ВариантыРасписания);
		
		ТаблицаОценки = ТаблицаОценкиВариантовРасписания(ВариантыРасписания);
		КритерииОценки = КритерииОценкиМоделиПланирования(ПараметрыПланирования);
		РассчитатьВзвешеннуюОценку(ТаблицаОценки, КритерииОценки);
		
		ТаблицаОценки.Сортировать("ВзвешеннаяОценка Возр");
		
		Возврат ВариантыРасписания[ТаблицаОценки[0].Индекс];
		
	КонецЕсли;
	
КонецФункции

Процедура ДублироватьПараметрыПланирования(ПараметрыПланирования, Знач Операции, Знач ВидРабочегоЦентра)
	
	Для Каждого Операция Из Операции Цикл
		Операция.КоличествоРазместить = Операция.Количество;
	КонецЦикла;
	
	ПараметрыПланирования.Вставить("ДублированныеПараметры", Новый Структура);
	
	ВспомогательныеВРЦ = ВидыВспомогательныхРабочихЦентровОпераций(ПараметрыПланирования, Операции);
	
	ДублироватьДоступноеВремя(ПараметрыПланирования, ВидРабочегоЦентра, ВспомогательныеВРЦ);
	ДублироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ВидРабочегоЦентра, ВспомогательныеВРЦ);
	
КонецПроцедуры

Процедура ДублироватьДоступноеВремя(ПараметрыПланирования, Знач ОсновнойВРЦ, Знач ВспомогательныеВРЦ)
	
	УсловиеПоиска = Новый Структура("ВидРабочегоЦентра", ОсновнойВРЦ);
	
	ТаблицаИсх = ПараметрыПланирования.ДоступноеВремя;
	ПараметрыПланирования.ДублированныеПараметры.Вставить("ДоступноеВремя", ТаблицаИсх);
	
	ТаблицаДубль = ТаблицаИсх.Скопировать(НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска));
	
	Для Каждого ВспомогательныйВРЦ Из ВспомогательныеВРЦ Цикл
		
		УсловиеПоиска.ВидРабочегоЦентра = ВспомогательныйВРЦ;
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска);
			
		Для Каждого Строка Из СтрокиПоиска Цикл
			НоваяСтрока = ТаблицаДубль.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	СвернутьТаблицу(ТаблицаДубль);	
	ПараметрыПланирования.ДоступноеВремя = ТаблицаДубль;
	
КонецПроцедуры

Процедура ДублироватьЗанятоеВремяПоСменам(ПараметрыПланирования, Знач ОсновнойВРЦ, Знач ВспомогательныеВРЦ)
	
	УсловиеПоиска = Новый Структура("ВидРабочегоЦентра", ОсновнойВРЦ);
	
	ТаблицаИсх = ПараметрыПланирования.ЗанятоеВремяПоСменам;
	ПараметрыПланирования.ДублированныеПараметры.Вставить("ЗанятоеВремяПоСменам", ТаблицаИсх);
	
	ТаблицаДубль = ТаблицаИсх.Скопировать(НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска));
	
	Для Каждого ВспомогательныйВРЦ Из ВспомогательныеВРЦ Цикл
		
		УсловиеПоиска.ВидРабочегоЦентра = ВспомогательныйВРЦ;
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска);
			
		Для Каждого Строка Из СтрокиПоиска Цикл
			НоваяСтрока = ТаблицаДубль.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	СвернутьТаблицу(ТаблицаДубль);
	ПараметрыПланирования.ЗанятоеВремяПоСменам = ТаблицаДубль;
	
КонецПроцедуры

Процедура ВосстановитьДублированныеПараметрыПланирования(ПараметрыПланирования)
	
	Для Каждого Параметр Из ПараметрыПланирования.ДублированныеПараметры Цикл
		
		ПараметрыПланирования[Параметр.Ключ] = Параметр.Значение;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьРазмещениеОперацииВПараметрахПланирования(ПараметрыПланирования, Знач Операция, Знач ПараметрыРазмещения)
	
	Если ЗначениеЗаполнено(ПараметрыРазмещения.РабочийЦентр) Тогда
			
		ПустыеИнтервалы = Новый Массив;
		
		РабочиеЦентры = Новый Массив;
		РабочиеЦентры.Добавить(ПараметрыРазмещения.РабочийЦентр);
		Для Каждого Строка Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
			РабочиеЦентры.Добавить(Строка.РабочийЦентр);
		КонецЦикла;
		
		Для Каждого ИнтервалРазмещения Из ПараметрыРазмещения.Интервалы Цикл
			
			Для Каждого РабочийЦентр Из РабочиеЦентры Цикл
				
				ДоступныйИнтервал = ДоступныйИнтервалПоДаннымКэша(ПараметрыПланирования,
					ПараметрыРазмещения.КэшДоступныхИнтервалов, ИнтервалРазмещения, РабочийЦентр);
				
				Если Не ДоступныйИнтервал = Неопределено Тогда
					
					Если Не ЗначениеЗаполнено(ИнтервалРазмещения.Загрузка) Тогда
						ЗанятоеВремя = ИнтервалРазмещения.ВремяПлан;
					Иначе
						ЗанятоеВремя = ИнтервалРазмещения.ВремяПлан * ИнтервалРазмещения.Загрузка;
					КонецЕсли;
					ОтразитьЗанятоеВремяПоСменам(ПараметрыПланирования, ДоступныйИнтервал, РабочийЦентр, ЗанятоеВремя);
					
					ИсправитьДоступноеВремя(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		УдалитьПустыеИнтервалыДоступногоВремени(ПараметрыПланирования, ПустыеИнтервалы);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныйИнтервалПоДаннымКэша(Знач ПараметрыПланирования, Знач КэшДоступныхИнтервалов, Знач ИнтервалРазмещения, Знач РабочийЦентр)
	
	Результат = Неопределено;
	
	УсловиеПоискаКэш = Новый Структура("РабочийЦентр, Начало", РабочийЦентр, ИнтервалРазмещения.Начало);
	СтрокиПоискаКэш = КэшДоступныхИнтервалов.НайтиСтроки(УсловиеПоискаКэш);
	
	Если ЗначениеЗаполнено(СтрокиПоискаКэш) Тогда
		
		ДанныеКэша = СтрокиПоискаКэш[0];
		
		УсловиеПоиска = Новый Структура("РабочийЦентр, НачалоСмены");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, ДанныеКэша);
		
		СтрокиПоиска = ПараметрыПланирования.ДоступноеВремя.НайтиСтроки(УсловиеПоиска);
		Для каждого Строка Из СтрокиПоиска Цикл
			
			Если Строка.Начало <= ИнтервалРазмещения.Начало И Строка.Окончание >= ИнтервалРазмещения.Окончание Тогда
				
				Результат = Строка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидыВспомогательныхРабочихЦентровОпераций(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = Новый Массив;
	ОбработанныеОбъекты = Новый Массив;
	
	Для Каждого Операция Из Операции Цикл
		
		ВспомогательныеРЦ = ВспомогательныеРЦОперации(ПараметрыПланирования, Операция.Этап, Операция.ИдентификаторОперации);
		
		Для Каждого РабочийЦентр Из ВспомогательныеРЦ Цикл
			
			Если ОбработанныеОбъекты.Найти(РабочийЦентр) = Неопределено Тогда
				
				Если ТипЗначенияРабочийЦентр(РабочийЦентр) Тогда
					
					ВидРабочегоЦентра = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
					Если ОбработанныеОбъекты.Найти(ВидРабочегоЦентра) = Неопределено Тогда
						Результат.Добавить(ВидРабочегоЦентра);
						ОбработанныеОбъекты.Добавить(ВидРабочегоЦентра);
					КонецЕсли;
					
				Иначе
					
					Результат.Добавить(РабочийЦентр);
					
				КонецЕсли;
				
				ОбработанныеОбъекты.Добавить(РабочийЦентр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПравилаОчередиОпераций(Знач ОчередьОпераций)
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПравилоОпДатаЗапускаВозр());
	
	Если РазбросВремениОперацийОчередиПревышаетКонстанту(ОчередьОпераций, 0.25) Тогда
		
		Результат.Добавить(ПравилоОпБольшиеЗатемМаленькие());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравилаВыбораРЦ(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПравилоРЦНастройкиМодели());
	
	НесколькоВН = ОперацииИмеютРазличныеВариантыНаладки(Операции);
	Если НесколькоВН Тогда
		Результат.Добавить(ПравилоРЦМинимизироватьПереналадки());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравилоОпДатаЗапускаВозр()
	
	Возврат "ДатаЗапускаВозрастание";
	
КонецФункции

Функция ПравилоОпБольшиеЗатемМаленькие()
	
	Возврат "ДлительностьУбывание";
	
КонецФункции

Функция ПравилоРЦНастройкиМодели()
	
	Возврат "НастройкиМоделиПланирования";
	
КонецФункции

Функция ПравилоРЦМинимизироватьПереналадки()
	
	Возврат "МинимизироватьВремяПереналадки";
	
КонецФункции

Функция РазбросВремениОперацийОчередиПревышаетКонстанту(Знач ОчередьОпераций, Знач Конст)
	
	Результат = Ложь;
	
	Если ОчередьОпераций.Количество() > 1 Тогда
		
		МинЗначение = ОчередьОпераций[0].ВремяРазместить;
		МаксЗначение = ОчередьОпераций[0].ВремяРазместить;
		
		Для Каждого Операция Из ОчередьОпераций Цикл
			
			МинЗначение = Мин(МинЗначение, Операция.ВремяРазместить);
			МаксЗначение = Макс(МаксЗначение, Операция.ВремяРазместить);
			
			Если МинЗначение > 0 Тогда
				
				Отклонение = (МаксЗначение - МинЗначение) / МинЗначение;
				Если Отклонение >= Конст Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьОценкуВремениВариантовРасписания(ВариантыРасписания)
	
	Если ВариантыРасписания.Количество() > 1 Тогда
		
		Для Каждого ВариантРасписания Из ВариантыРасписания Цикл
			ВариантРасписания.Расписание.Сортировать("ИдентификаторОперации Возр");
		КонецЦикла;
		
		Для Индекс = 0 По ВариантыРасписания[0].Расписание.Количество()-1 Цикл
			
			НачальнаяТочка = '00010101';
			Для Каждого ВариантРасписания Из ВариантыРасписания Цикл
				ТекНачало = ВариантРасписания.Расписание[Индекс].Начало;
				Если ЗначениеЗаполнено(ТекНачало) Тогда
					НачальнаяТочка = ?(ЗначениеЗаполнено(НачальнаяТочка), Мин(НачальнаяТочка, ТекНачало), ТекНачало);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(НачальнаяТочка) Тогда
				
				МинимальноеОтклонение = 0;
				Для Каждого ВариантРасписания Из ВариантыРасписания Цикл
					
					ЗаписьРасписания = ВариантРасписания.Расписание[Индекс];
					
					Если ЗначениеЗаполнено(ЗаписьРасписания.Окончание) Тогда
						
						Отклонение = ЗаписьРасписания.Окончание - НачальнаяТочка;
						ЗаписьРасписания.ОценкаВремя = Отклонение;
						МинимальноеОтклонение = ?(ЗначениеЗаполнено(МинимальноеОтклонение), Мин(МинимальноеОтклонение, Отклонение), Отклонение);
						
					КонецЕсли;
					
				КонецЦикла;
				
				МаксимальнаяОценка = 0;
				ЕстьНеразмещенныеОперации = Ложь;
				Для Каждого ВариантРасписания Из ВариантыРасписания Цикл
					
					ЗаписьРасписания = ВариантРасписания.Расписание[Индекс];
					
					Если ЗначениеЗаполнено(ЗаписьРасписания.ОценкаВремя) Тогда
						
						ЗаписьРасписания.ОценкаВремя = ЗаписьРасписания.ОценкаВремя/МинимальноеОтклонение;
						МаксимальнаяОценка = ?(ЗначениеЗаполнено(МаксимальнаяОценка), Макс(МаксимальнаяОценка, ЗаписьРасписания.ОценкаВремя), ЗаписьРасписания.ОценкаВремя);
						
					Иначе
						ЕстьНеразмещенныеОперации = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьНеразмещенныеОперации Тогда
					
					Для Каждого ВариантРасписания Из ВариантыРасписания Цикл
						
						ЗаписьРасписания = ВариантРасписания.Расписание[Индекс];
						
						Если Не ЗначениеЗаполнено(ЗаписьРасписания.ОценкаВремя) Тогда
							// Неразмещенным операциям присваивается штрафная оценка в двухкратном размере относительно худшего размещения.
							ЗаписьРасписания.ОценкаВремя = МаксимальнаяОценка * 2;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаОценкиВариантовРасписания(Знач ВариантыРасписания)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ОценкаВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ВзвешеннаяОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для Каждого ВариантРасписания Из ВариантыРасписания Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Индекс = ВариантыРасписания.Индекс(ВариантРасписания);
		НоваяСтрока.ОценкаВремя = ВариантРасписания.Расписание.Итог("ОценкаВремя");
		НоваяСтрока.Стоимость = ВариантРасписания.Расписание.Итог("Стоимость");
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КритерииОценкиМоделиПланирования(Знач ПараметрыПланирования)
	
	Результат = ОбъектКритерииВзвешеннойОценки();
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Вес = ПараметрыПланирования.ВесМинимизироватьВремя;
	НоваяСтрока.Оптимум = "Минимум";
	НоваяСтрока.ИмяКолонки = "ОценкаВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Вес = ПараметрыПланирования.ВесМинимизироватьСтоимость;
	НоваяСтрока.Оптимум = "Минимум";
	НоваяСтрока.ИмяКолонки = "Стоимость";
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиМежоперационныеПереходыВРасписание(ПараметрыПланирования)
	
	Для Каждого Строка Из ПараметрыПланирования.МежоперационныеПереходы Цикл
		
		УсловиеПоиска = Новый Структура("Этап, ИдентификаторОперации, Вспомогательная", Строка.Этап, Строка.ИдентификаторОперации, Ложь);
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ПараметрыПланирования.ТаблицаРасписание, УсловиеПоиска);
		Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
			СтрокиПоиска[СтрокиПоиска.ВГраница()].ВремяПерехода = Строка.ВремяПерехода;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектКритерииВзвешеннойОценки()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Вес");
	Результат.Колонки.Добавить("Оптимум");
	Результат.Колонки.Добавить("ИмяКолонки");
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьВзвешеннуюОценку(Знач ТаблицаОценки, Знач КритерииОценки)
	
	Если Не ЗначениеЗаполнено(ТаблицаОценки) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Критерий Из КритерииОценки Цикл
		
		Итог = ТаблицаОценки.Итог(Критерий.ИмяКолонки);
		Если Итог > 0 Тогда
			
			Для Каждого СтрокаОценки Из ТаблицаОценки Цикл
				Оценка = СтрокаОценки[Критерий.ИмяКолонки] / Итог;
				СтрокаОценки.ВзвешеннаяОценка = СтрокаОценки.ВзвешеннаяОценка + (Оценка * Критерий.Вес);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	Результат - ТаблицаЗначений - 
// Возвращаемое значение:
// 	ТаблицаЗначений - где:
// * Этап - ДокументСсылка.ЭтапПроизводства2_2 -
// * Операция - СправочникСсылка.ТехнологическиеОперации -
// * ИдентификаторОперации - Число -
// * НомерПартии -  Число -
// * Количество -  Число -
// * Дата -  Дата -
Функция ИнициализироватьДанныеПредшествующихПартий(Результат)
	
	Результат.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	Результат.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("НомерПартии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	Результат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
		
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДанныеПредшествующихПартий(Операция, ПартияОперации, ИзменятьДату = Истина)
	
	Если Операция.ДанныеПредшествующихПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоРазместить = ПартияОперации.Количество / ПартияОперации.Коэффициент;
	
	Если Не Операция.ДанныеПредшествующихОтсортированы Тогда
		Операция.ДанныеПредшествующихПартий.Сортировать("Количество Убыв, Дата Возр");
		Операция.ДанныеПредшествующихОтсортированы = Истина;
	КонецЕсли;
	
	ДатаЗапуска = Операция.НачалоЭтапа;
	ДатаЗапускаНайдена = Истина;
	
	ПредшествующиеОперации = Операция.ДанныеПредшествующихПартий.Скопировать(, "Этап, Операция, ИдентификаторОперации"); // см. ИнициализироватьДанныеПредшествующихПартий
	ПредшествующиеОперации.Свернуть("Этап, Операция, ИдентификаторОперации");
	
	СтруктураОтбораПредшествующих = Новый Структура("Этап, Операция, ИдентификаторОперации");
	Для Каждого ПредшествующаяОперация Из ПредшествующиеОперации Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбораПредшествующих, ПредшествующаяОперация);
		НайденныеСтроки = Операция.ДанныеПредшествующихПартий.НайтиСтроки(СтруктураОтбораПредшествующих);
		
		Дата = '00010101';
		Количество = КоличествоРазместить;
		ОстатокПредшествующихДостаточен = Ложь;
		
		Для Каждого ДанныеПредшествующейПартии Из НайденныеСтроки Цикл
			Если ДанныеПредшествующейПартии.Количество = 0 Тогда
				Продолжить;
			ИначеЕсли Количество <= ДанныеПредшествующейПартии.Количество Тогда
				ОстатокПредшествующихДостаточен = Истина;
				ДанныеПредшествующейПартии.Количество = ДанныеПредшествующейПартии.Количество - Количество;
				Количество = 0;
			Иначе
				Количество = Количество - ДанныеПредшествующейПартии.Количество;
				ДанныеПредшествующейПартии.Количество = 0;
			КонецЕсли;
			Если ДанныеПредшествующейПартии.Дата > Дата Тогда
				Дата = ДанныеПредшествующейПартии.Дата;
			КонецЕсли;
			Если Количество = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОстатокПредшествующихДостаточен
			Или Не ЗначениеЗаполнено(Дата) Тогда
			ДатаЗапускаНайдена = Ложь;
		КонецЕсли;
		
		Если ДатаЗапускаНайдена
			И Дата > ДатаЗапуска Тогда
			ДатаЗапуска = Дата;
		КонецЕсли;			
		
	КонецЦикла;
	
	Если ИзменятьДату
		И ДатаЗапускаНайдена Тогда
		ПартияОперации.ДатаЗапуска = ДатаЗапуска;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроблемыРасписания

Процедура ЗафиксироватьОшибкуНедоступенОснОблсужРЦ(ПараметрыПланирования, Знач ПараметрыПодбора)
	
	РабочийЦентр = ПараметрыПодбора.РабочийЦентр;
	ВспомогательныеРЦ = ПараметрыПодбора.НедоступныеВспомогательныеРЦ;
	Операция = ПараметрыПодбора.Операция;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	Если ЗначениеЗаполнено(ВспомогательныеРЦ) Тогда
		
		Для каждого ВспомогательныйРабочийЦентр Из ВспомогательныеРЦ Цикл
			ЗафиксироватьОшибкуНедоступенРабочийЦентр(ПараметрыПланирования.ПроблемыРасписания, ВспомогательныйРабочийЦентр, ПараметрыПодбора);
		КонецЦикла;
		
	Иначе
		ЗафиксироватьОшибкуНедоступенРабочийЦентр(ПараметрыПланирования.ПроблемыРасписания, РабочийЦентр, ПараметрыПодбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуНедоступенРабочийЦентр(ПроблемыРасписания, Знач РабочийЦентр, Знач ПараметрыПодбора)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.НедоступенРабочийЦентр;
	Ключ = РабочийЦентр;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПроблемыРасписания, Категория, Ключ);
	
	Если Не ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 2;
		
		Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно доступного времени рабочего центра ""%1"" вида ""%2"".';
					|en = 'There is not enough available time of the ""%1"" work center of the ""%2"" type.'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "Представление"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра.Представление"));
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно доступного времени вида рабочего центра ""%1"".';
					|en = 'There is not enough available time of the ""%1"" work center type.'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "Представление"));
		КонецЕсли;
		НоваяСтрока.Текст = Текст;
		
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Заполните доступность видов рабочих центров или увеличьте горизонт планирования.';
											|en = 'Fill in type of work centers capacity or increase the planning horizon.'");
		
		Свойства = Новый Структура;
		Свойства.Вставить("РабочийЦентр", РабочийЦентр);
		Свойства.Вставить("ВидРабочегоЦентра", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра"));
		Свойства.Вставить("Период", ПараметрыПодбора.МоментРазмещения);
		НоваяСтрока.Свойства = Свойства;
		
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуРасписаниеЗаблокировано(ПараметрыПланирования)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.РасписаниеЗаблокировано;
	Ключ = ПараметрыПланирования.Подразделение;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если НЕ ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 1;
		
		Текст = НСтр("ru = 'Планирование не может быть выполнено по причине: расписание находится в состоянии расчета';
					|en = 'Cannot perform planning. Reason: the timetable is being calculated.'");
		Пользователь = РегистрыСведений.БлокировкиПооперационногоРасписания2_2.РасписаниеПодразделенияАвторБлокировки(
			ПараметрыПланирования.Подразделение);
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ПользовательПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Представление");
			Текст = Текст + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(пользователь: %1 )';
					|en = '(user: %1 )'"), ПользовательПредставление);
		КонецЕсли;
		НоваяСтрока.Текст = Текст;
		
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Дождитесь окончания расчета расписания.';
											|en = 'Please wait while the schedule is being generated.'");
		НоваяСтрока.Свойства = Новый Структура("Подразделение", ПараметрыПланирования.Подразделение);
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуОтсутствуютДанныеДляПланирования(ПараметрыПланирования)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.ОтсутствуютОперацииДляПланирования;
	Ключ = ПараметрыПланирования.Подразделение;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если НЕ ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 1;
		НоваяСтрока.Текст = НСтр("ru = 'Планирование не может быть выполнено по причине: отсутствуют операции для планирования.';
								|en = 'Cannot perform planning. Reason: no operations to plan.'");
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Создайте этапы производства, либо измените параметры планирования.';
											|en = 'Create production stages or change planning parameters.'");
		НоваяСтрока.Свойства = Новый Структура("Подразделение", ПараметрыПланирования.Подразделение);
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуНеОпределеныРабочиеЦентры(ПараметрыПланирования, ВидРабочегоЦентра)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.НеОпределеныРабочиеЦентры;
	Ключ = ВидРабочегоЦентра;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если Не ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 2;
		
		СтрокаПодстановки = НСтр("ru = 'Не созданы рабочие центры вида ""%1""';
								|en = 'Work centers of the ""%1"" type are not created'");
		ПредставлениеВРЦ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРабочегоЦентра, "Представление");
		НоваяСтрока.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ПредставлениеВРЦ);
		
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Создайте рабочие центры.';
											|en = 'Create work centers.'");
		НоваяСтрока.Свойства = Новый ХранилищеЗначения(ПараметрыПланирования.Подразделение);
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуРабочиеЦентрыНеПодошлиПоЗагрузке(ПараметрыПланирования, РабочийЦентр, Операция)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.РабочиеЦентрыНеПодошлиПоЗагрузке;
	Ключ = РабочийЦентр;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если Не ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 2;
		
		
		Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Рабочий центр ""%1"" не подходит по максимальной загрузке для операции ""%2"" маршрута ""%3""';
					|en = '""%1"" work center does not fit maximum load for the ""%2"" operation of the ""%3"" route'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "Представление"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция.Операция, "Наименование"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция.Этап, "МаршрутнаяКарта.Наименование"));
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Рабочие центры вида ""%1"" не подходят по максимальной загрузке для операции ""%2"" маршрута ""%3""';
					|en = 'Work centers of the ""%1"" type do not fit maximum load for the ""%2"" operation of the ""%3"" route'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "Представление"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция.Операция, "Наименование"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция.Этап, "МаршрутнаяКарта.Наименование"));
		КонецЕсли;
		
		НоваяСтрока.Текст = Текст;
		
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Заменить рабочий центр в маршруте.';
											|en = 'Replace work center in route.'");
		
		Свойства = Новый Структура;
		Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
			Свойства.Вставить("РабочийЦентр", РабочийЦентр);
			Свойства.Вставить("ВидРабочегоЦентра", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра"));
		Иначе
			Свойства.Вставить("ВидРабочегоЦентра", РабочийЦентр);
		КонецЕсли;
		НоваяСтрока.Свойства = Свойства;
		
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроблемаЗафиксирована(Знач ПроблемыРасписания, Знач Категория, Знач Ключ)
	
	Результат = Ложь;
	
	УсловиеПоиска = Новый Структура("Категория", Категория);
	СтрокиПоиска = ПроблемыРасписания.НайтиСтроки(УсловиеПоиска);
	
	Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
		
		Если СтрокаПоиска.Ключ = Ключ Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьПроблемыИзРезультатовФоновогоРасчета(ПараметрыПланирования, ПроблемыРасписания)
	
	Для Каждого Строка Из ПроблемыРасписания Цикл
		
		Если Не ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Строка.Категория, Строка.Ключ) Тогда
			
			НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатРасчета

Процедура ЗаписатьРезультатыРасчетаМодели(Знач ПараметрыПланирования)
	
	РегистрыСведений.ПооперационноеРасписание2_2.ЗаписатьВариантРасписания(
		ПараметрыПланирования.МодельРасписания,
		ПараметрыПланирования.МодельПланирования,
		ПараметрыПланирования.ТаблицаРасписание);
	
КонецПроцедуры

Функция ИнициализироватьРезультатыРасчета()
	
	Результат = Новый Структура;
	
	Результат.Вставить("МодельРасписания", Неопределено);
	Результат.Вставить("ОптимальнаяМодельПланирования", Справочники.МоделиПооперационногоПланирования.ПустаяСсылка());
	Результат.Вставить("РазмещеноОпераций", 0);
	Результат.Вставить("КоличествоДанных", 0);
	Результат.Вставить("РасчетВыполнен", Ложь);
	Результат.Вставить("СценарииИспользуются", Ложь);
	Результат.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Результат.Вставить("ПроблемыРасписания", ИнициализироватьТаблицуПроблемырасписания());
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРезультатыРасчета(ПараметрыПланирования)
	
	РезультатыРасчета = ПараметрыПланирования.РезультатыРасчета;
	ЗаполнитьЗначенияСвойств(РезультатыРасчета, ПараметрыПланирования);
	
	РазмещеноОпераций = КоличествоРазмещенныхОпераций(ПараметрыПланирования);
	РезультатыРасчета.РазмещеноОпераций = РазмещеноОпераций;
	РезультатыРасчета.РасчетВыполнен = Не (РазмещеноОпераций = 0);
	
	СценарииИспользуются = СценарииИспользуются(ПараметрыПланирования);
	РезультатыРасчета.СценарииИспользуются = СценарииИспользуются;
	
	Если Не СценарииИспользуются
		И ЗначениеЗаполнено(ПараметрыПланирования.ПараметрыМоделейПланирования) Тогда
		ОптимальнаяМодель = ПараметрыПланирования.ПараметрыМоделейПланирования[0].МодельПланирования;
		РезультатыРасчета.ОптимальнаяМодельПланирования = ОптимальнаяМодель;
	КонецЕсли;
	
	КоличествоОпераций = ПараметрыПланирования.Операции.Количество();
	КоличествоМоделей = ПараметрыПланирования.ПараметрыМоделейПланирования.Количество();
	РезультатыРасчета.КоличествоДанных = КоличествоОпераций * КоличествоМоделей;
	
КонецПроцедуры

Процедура ДобавитьЗаписьВЖурналРегистрации(Знач Уровень, Знач Комментарий, Знач ОбъектМетаданных=Неопределено, Знач Данные=Неопределено)
	
	ИмяСобытия = НСтр(
		"ru = 'Пооперационное планирование 2.2';
		|en = 'Manufacturing execution system 2.2'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий);
	
КонецПроцедуры

Функция КоличествоРазмещенныхОпераций(Знач ПараметрыПланирования)
	
	Возврат РегистрыСведений.ПооперационноеРасписание2_2.КоличествоУникальныхОперацийМоделиРасписания(ПараметрыПланирования.МодельРасписания);
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция НайтиСтрокиВТаблицеССохранениемПорядка(Таблица, УсловиеПоиска) Экспорт
	
	СтрокиПоискаБезПорядка = Таблица.НайтиСтроки(УсловиеПоиска);
	
	Если СтрокиПоискаБезПорядка.Количество() > 1 Тогда
		
		ТаблицаИндексы = ИндексыТаблицыИНайденныхСтрокТаблицы(Таблица, СтрокиПоискаБезПорядка);
		СтрокиУпорядочены = ТаблицаИндексовУпорядочена(ТаблицаИндексы);
		
		Если СтрокиУпорядочены Тогда
			Возврат СтрокиПоискаБезПорядка;
		Иначе
			ТаблицаИндексы.Сортировать("ИндексТаблицы ВОЗР");
			СтрокиПоискаСПорядком = Новый Массив;
			Для Каждого Строка Из ТаблицаИндексы Цикл
				СтрокиПоискаСПорядком.Добавить(СтрокиПоискаБезПорядка[Строка.ИндексМассива]);
			КонецЦикла;
			
			Возврат СтрокиПоискаСПорядком;
		КонецЕсли;
		
	Иначе
		Возврат СтрокиПоискаБезПорядка;
	КонецЕсли;
	
КонецФункции

Функция ИндексыТаблицыИНайденныхСтрокТаблицы(Таблица, СтрокиПоискаБезПорядка)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИндексМассива", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ИндексТаблицы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Индекс = 0;
	Для Каждого Строка Из СтрокиПоискаБезПорядка Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ИндексМассива = Индекс;
		НоваяСтрока.ИндексТаблицы = Таблица.Индекс(Строка);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИндексовУпорядочена(ТаблицаИндексы)
	
	Результат = Истина;
	
	ПредшествующаяСтрока = Неопределено;
	Для каждого Строка Из ТаблицаИндексы Цикл
		
		Если НЕ ПредшествующаяСтрока = Неопределено Тогда
			
			Если Строка.ИндексТаблицы < ПредшествующаяСтрока.ИндексТаблицы Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ПредшествующаяСтрока = Строка;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОжидатьЗавершенияФоновыхЗаданий(Знач ИмяМетодаЗадания, Знач НаименованиеЗадания)
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("ИмяМетода", ИмяМетодаЗадания);
	ОтборЗаданий.Вставить("Наименование", НаименованиеЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Если ЗначениеЗаполнено(Задания) Тогда
		ФоновыеЗадания.ОжидатьЗавершения(Задания);
	КонецЕсли;
	
КонецПроцедуры

Функция ТипЗначенияРабочийЦентр(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.РабочиеЦентры")
		Или ТипЗнч(Значение) = Тип("Строка") Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидРабочегоЦентра(Знач ПараметрыПланирования, Знач РабочийЦентр)
	
	СтрокаПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "РабочийЦентр");
	
	Если СтрокаПоиска = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = СтрокаПоиска.ВидРабочегоЦентра;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИсправитьТаблицуОперацийНаОснованииОтсутствующихОпераций(ПараметрыПланирования)
	
	УсловиеПоиска = Новый Структура("Этап, ИдентификаторОперации");
	УсловиеПоискаПредш = Новый Структура("Этап, ИдентификаторОперацииПредшествующий");
	
	ОтсутствующиеОперации = СвязанныеОперацииНеУчаствующиеВРасчете(ПараметрыПланирования.ТаблицаЗависимостейОпераций);
	Если Не ЗначениеЗаполнено(ОтсутствующиеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОпераций = ДанныеОтсутствующихОпераций(ОтсутствующиеОперации);
	Для Каждого ОтсутствОперация Из ДанныеОпераций Цикл
		
		УсловиеПоиска.Этап = ОтсутствОперация.Этап;
		УсловиеПоиска.ИдентификаторОперации = ОтсутствОперация.ИдентификаторОперации;
		СтрокиЗависимостей = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоиска);
		Для Каждого Зависимость Из СтрокиЗависимостей Цикл
			
			СтрокаОперации = ОперацияТаблицыОпераций(ПараметрыПланирования, 
							Зависимость.Этап, Зависимость.ИдентификаторОперацииПредшествующий);
				
			Если ЗначениеЗаполнено(СтрокаОперации) Тогда
				
				СтрокаОперации.ДатаВыпуска = ДатаВыпускаДочернейОперации(
					ПараметрыПланирования, ОтсутствОперация, ОтсутствОперация.Начало, СтрокаОперации);
					
				ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
					ПараметрыПланирования, ОтсутствОперация, СтрокаОперации, ОтсутствОперация.РабочийЦентрНазначенный, Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
		УсловиеПоискаПредш.ИдентификаторОперацииПредшествующий = ОтсутствОперация.ИдентификаторОперации;
		СтрокиЗависимостей = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоискаПредш);
		Для Каждого Зависимость Из СтрокиЗависимостей Цикл
			
			СтрокаОперации = ОперацияТаблицыОпераций(ПараметрыПланирования, 
							Зависимость.Этап, Зависимость.ИдентификаторОперации);
				
			Если ЗначениеЗаполнено(СтрокаОперации) Тогда
				
				СтрокаОперации.ДатаЗапуска = ДатаЗапускаДочернейОперации(
					ПараметрыПланирования, ОтсутствОперация, ОтсутствОперация.Окончание, СтрокаОперации);
				
				ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
					ПараметрыПланирования, ОтсутствОперация, СтрокаОперации, ОтсутствОперация.РабочийЦентрНазначенный, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиВремяМежоперационногоПерехода(Знач ПараметрыПланирования, Знач Подразделение,
	Знач Источник = Неопределено, Знач Приемник = Неопределено)
	
	Если ЗначениеЗаполнено(ПараметрыПланирования.ПараметрыМежоперационныхПереходов) Тогда
		
		Если Не ЗначениеЗаполнено(Источник) Тогда
			Источник = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Приемник) Тогда
			Приемник = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
		КонецЕсли;
		
		УсловиеПоиска = Новый Структура;
		УсловиеПоиска.Вставить("Подразделение", Подразделение);
		УсловиеПоиска.Вставить("Источник", Источник);
		УсловиеПоиска.Вставить("Приемник", Приемник);
		
		СтрокиПоиска = ПараметрыПланирования.ПараметрыМежоперационныхПереходов.НайтиСтроки(УсловиеПоиска);
		Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
			Возврат СтрокиПоиска[0].Время;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьЗависимостьОтПредшествующихВТаблицеОпераций(ПараметрыПланирования)
	
	ТаблицаОпераций = ПараметрыПланирования.ТаблицаОпераций;
	ТаблицаЗависимостей = ПараметрыПланирования.ТаблицаЗависимостейОпераций;
	
	ТаблицаОпераций.ЗаполнитьЗначения(Истина, "ЗависитОтПредшествующих");
	
	УсловиеПоиска = Новый Структура("ПредшествующаяОперацияУчаствуетВРасчете, ИдентификаторОперации, Этап", Истина);
	Для Каждого Строка Из ТаблицаОпераций Цикл
		
		УсловиеПоиска.Этап = Строка.Этап;
		УсловиеПоиска.ИдентификаторОперации = Строка.ИдентификаторОперации;
		
		СтрокиПоиска = ТаблицаЗависимостей.НайтиСтроки(УсловиеПоиска);
		Если Не ЗначениеЗаполнено(СтрокиПоиска) Тогда
			Строка.ЗависитОтПредшествующих = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеТиповВремяОперацииУвеличинное()
	
	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1));
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьТипВТипЗначенияКолонкиТаблицы(Таблица, Знач ИмяКолонки, Знач ДобавляемыеТипы,
	Знач КвалификаторыЧисла=Неопределено, Знач КвалификаторыСтроки=Неопределено, Знач КвалификаторыДаты=Неопределено)
	
	Если КвалификаторыЧисла = Неопределено Тогда
		КвалификаторыЧисла = Новый КвалификаторыЧисла;
	КонецЕсли;
	
	Если КвалификаторыСтроки = Неопределено Тогда
		КвалификаторыСтроки = Новый КвалификаторыСтроки;
	КонецЕсли;
	
	Если КвалификаторыДаты = Неопределено Тогда
		КвалификаторыДаты = Новый КвалификаторыДаты;
	КонецЕсли;
	
	ОписаниеТиповНов = Новый ОписаниеТипов(Таблица.Колонки[ИмяКолонки].ТипЗначения,
		ДобавляемыеТипы,, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	ИмяКолонкиНов = ИмяКолонки + "Копия";
	Таблица.Колонки.Добавить(ИмяКолонкиНов, ОписаниеТиповНов);
	
	Для Каждого Строка Из Таблица Цикл
		Строка[ИмяКолонкиНов] = Строка[ИмяКолонки];
	КонецЦикла;
	
	Таблица.Колонки.Удалить(ИмяКолонки);
	Таблица.Колонки[ИмяКолонкиНов].Имя = ИмяКолонки;
	
КонецПроцедуры

// Параметры:
// 	Начало - Дата -
// 	Окончание - Дата -
// 	РабочиеЦентры - Массив -
// Возвращаемое значение:
// 	ТаблицаЗначений - где:
// * Начало - Дата -
// * Окончание - Дата -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Время - Дата -
Функция ДоступноеВремяРабочихЦентровПоГрафику(Начало, Окончание, РабочиеЦентры)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступностьРабочихЦентров.Начало КАК Начало,
	|	ДоступностьРабочихЦентров.Окончание КАК Окончание,
	|	ДоступностьРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
	|	РАЗНОСТЬДАТ(ДоступностьРабочихЦентров.Начало, ДоступностьРабочихЦентров.Окончание, СЕКУНДА) КАК Время
	|ИЗ
	|	РегистрСведений.ДоступностьРабочихЦентров КАК ДоступностьРабочихЦентров
	|ГДЕ
	|	(ДоступностьРабочихЦентров.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ ДоступностьРабочихЦентров.Окончание МЕЖДУ &Начало И &Окончание)
	|	И ДоступностьРабочихЦентров.РабочийЦентр В(&РабочиеЦентры)");
	
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("РабочиеЦентры", РабочиеЦентры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СортироватьТаблицуДоступноеВремя(Таблица)
	
	Таблица.Сортировать("РабочийЦентр, Начало Возр, Окончание Возр", Новый СравнениеЗначений);
	
КонецПроцедуры

Процедура УдалитьСтрокиТаблицыПоУсловию(Таблица, Знач УсловиеПоиска)
	
	СтрокиПоиска = Таблица.НайтиСтроки(УсловиеПоиска);
	Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
		Таблица.Удалить(СтрокаПоиска);
	КонецЦикла;
	
КонецПроцедуры

Функция ВремяДатыВСекунды(ДатаВремя)
	
	Результат = Час(ДатаВремя)*3600 + Минута(ДатаВремя)*60 + Секунда(ДатаВремя);
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьВремяМежоперационногоПерехода(ПараметрыПланирования, Знач ОперацияОтправитель, Знач Время)
	
	НоваяСтрока = ПараметрыПланирования.МежоперационныеПереходы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОперацияОтправитель);
	НоваяСтрока.ВремяПерехода = Время;
	
КонецПроцедуры

Функция ГраницыПланирования(Знач ПараметрыПланирования)
	
	Горизонт = ПараметрыПланирования.ГоризонтПланирования;
	Начало = НачалоДня(ПараметрыПланирования.МоментПланирования);
	Окончание = КонецДня(ПараметрыПланирования.МоментПланирования + (86400 * Горизонт));
	
	Возврат Новый Структура("Начало, Окончание", Начало, Окончание);
	
КонецФункции

Функция ДатаЗапускаДочернейОперации(ПараметрыПланирования, Знач ОперацияРодитель, Знач РодительВыпуск, Знач ОперацияПотомок)
	
	ВремяПерехода = ВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияРодитель.Подразделение,
		ОперацияРодитель.РабочийЦентр, ОперацияПотомок.РабочийЦентр);
	Если ЗначениеЗаполнено(ВремяПерехода) Тогда
		ЗафиксироватьВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияРодитель, ВремяПерехода);
	КонецЕсли;
	
	ПотомокЗапуск = РодительВыпуск + ВремяПерехода;
	Результат = Макс(ОперацияПотомок.ДатаЗапуска, ПотомокЗапуск);
	
	Возврат Результат;
	
КонецФункции

Функция ДатаВыпускаДочернейОперации(ПараметрыПланирования, Знач ОперацияРодитель, Знач РодительЗапуск, Знач ОперацияПотомок)
	
	ВремяПерехода = ВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияПотомок.Подразделение,
		ОперацияПотомок.РабочийЦентр, ОперацияРодитель.РабочийЦентр);
	Если ЗначениеЗаполнено(ВремяПерехода) Тогда
		ЗафиксироватьВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияПотомок, ВремяПерехода);
	КонецЕсли;
	
	ПотомокВыпуск = РодительЗапуск - ВремяПерехода;
	Результат = Мин(ОперацияПотомок.ДатаВыпуска, ПотомокВыпуск);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(ПараметрыПланирования, Знач Операция, ЗависимаяОперация, Знач РабочийЦентр, Знач ПрямоеРазмещение)
	
	Если ТипЗнч(Операция.РабочийЦентр) = Тип("СправочникСсылка.ВидыРабочихЦентров")
		И ЗначениеЗаполнено(Операция.РабочийЦентр)
		И ТипЗнч(ЗависимаяОперация.РабочийЦентр) = Тип("СправочникСсылка.ВидыРабочихЦентров")
		И Операция.РабочийЦентр = ЗависимаяОперация.РабочийЦентр Тогда
		
		ЗависимыеОперации = СвязанныеОперации(ПараметрыПланирования, 
							ЗависимаяОперация.Этап, ЗависимаяОперация.ИдентификаторОперации, Истина, ПрямоеРазмещение);
		Для Каждого ЗависимаяЗависимойОперация Из ЗависимыеОперации Цикл
			ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
				ПараметрыПланирования, ЗависимаяОперация, ЗависимаяЗависимойОперация, РабочийЦентр, ПрямоеРазмещение);
		КонецЦикла;
		
		ЗависимаяОперация.РабочийЦентр = РабочийЦентр;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция СвязанныеОперации(Знач ПараметрыПланирования, Знач Этап, Знач ИдентификаторОперации, Знач Дочерние, Знач ПрямоеРазмещение)
	
	Если (ПрямоеРазмещение И Дочерние) 
		ИЛИ (НЕ ПрямоеРазмещение И НЕ Дочерние)	Тогда
		
		ЗависимыеОперации = ПоследующиеОперации(ПараметрыПланирования, Этап, ИдентификаторОперации);
		
	Иначе
		
		ЗависимыеОперации = ПредшествующиеОперации(ПараметрыПланирования, Этап, ИдентификаторОперации);
		
	КонецЕсли;
	
	Возврат ЗависимыеОперации;
	
КонецФункции

Функция ОперацияТаблицыОпераций(Знач ПараметрыПланирования, Знач Этап, Знач ИдентификаторОперации)
	
	СтруктураПоиска = Новый Структура("Этап, ИдентификаторОперации");
	СтруктураПоиска.Этап = Этап;
	СтруктураПоиска.ИдентификаторОперации = ИдентификаторОперации;
	
	Операции = ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(СтруктураПоиска);
	
	Если Операции.Количество() = 0 Тогда
		Операция = Неопределено;
	Иначе
		Операция = Операции[0];
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Функция ПоследующиеОперации(Знач ПараметрыПланирования, Знач Этап, Знач ИдентификаторОперации)
	
	Результат = Новый Массив;
	
	УсловиеПоиска = Новый Структура("Этап, ИдентификаторОперацииПредшествующий", Этап, ИдентификаторОперации);
	СтрокиПоиска = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоиска);
	Для Каждого Строка Из СтрокиПоиска Цикл
		
		Операция = ОперацияТаблицыОпераций(ПараметрыПланирования, Строка.Этап, Строка.ИдентификаторОперации);
		Если Не Операция = Неопределено Тогда
			Результат.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредшествующиеОперации(Знач ПараметрыПланирования, Знач Этап, Знач ИдентификаторОперации)
	
	Результат = Новый Массив;
	
	УсловиеПоиска = Новый Структура("Этап, ИдентификаторОперации", Этап, ИдентификаторОперации);
	СтрокиПоиска = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоиска);
	Для Каждого Строка Из СтрокиПоиска Цикл
		
		Операция = ОперацияТаблицыОпераций(ПараметрыПланирования, Строка.Этап, Строка.ИдентификаторОперацииПредшествующий);
		Если Не Операция = Неопределено Тогда
			Результат.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяМежоперационногоПерехода(Знач ПараметрыПланирования, Знач Подразделение, Знач Источник, Знач Приемник)
	
	Если ТипЗначенияРабочийЦентр(Источник) Тогда
		Источник = ВидРабочегоЦентра(ПараметрыПланирования, Источник);
	КонецЕсли;
	Если ТипЗначенияРабочийЦентр(Приемник) Тогда
		Приемник = ВидРабочегоЦентра(ПараметрыПланирования, Приемник);
	КонецЕсли;
	
	Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение, Источник, Приемник);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение,, Приемник);
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение, Источник);
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция РабочиеЦентрыПоЗначениюИзмерения(Знач ПараметрыПланирования, Знач Измерение)
	
	Результат = Новый Массив;
	
	Если ТипЗначенияРабочийЦентр(Измерение) Тогда
		
		Результат.Добавить(Измерение);
		
	ИначеЕсли ТипЗнч(Измерение) = Тип("СправочникСсылка.ВидыРабочихЦентров")
		Или ТипЗнч(Измерение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Если ТипЗнч(Измерение) = Тип("СправочникСсылка.ВидыРабочихЦентров") Тогда
			УсловиеПоиска = Новый Структура("ВидРабочегоЦентра", Измерение);
		ИначеЕсли ТипЗнч(Измерение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			УсловиеПоиска = Новый Структура("Подразделение", Измерение);
		КонецЕсли;
		
		СтрокиПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.НайтиСтроки(УсловиеПоиска);
		Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
			Результат.Добавить(СтрокаПоиска.РабочийЦентр);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатыФоновогоРасчета(ПараметрыПланирования)
	
	Результат = Новый Структура;
	Результат.Вставить("ПроблемыРасписания", ПараметрыПланирования.ПроблемыРасписания);
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьРезультатыФоновогоРасчета(ПараметрыПланирования, Результаты)
	
	Для Каждого АдресХранилища Из Результаты Цикл
		
		Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
			
			Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
			
			Если ТипЗнч(Результат) = Тип("Структура") 
				И Результат.Свойство("ПроблемыРасписания") Тогда
				
				ПрочитатьПроблемыИзРезультатовФоновогоРасчета(ПараметрыПланирования, Результат.ПроблемыРасписания);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыРазмещенияОперацииБезРабочегоЦентра(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение)
	
	МоментРазмещения = МоментРазмещенияОперации(ПараметрыПланирования, Операция, ПрямоеРазмещение);
	ВремяОперации = Операция.ВремяРазместить;
	
	Результат = ИнициализироватьПараметрыРазмещения();
	Если ПрямоеРазмещение Тогда
		Результат.Начало = МоментРазмещения;
		Результат.Окончание = МоментРазмещения + ВремяОперации;
	Иначе
		Результат.Начало = МоментРазмещения - ВремяОперации;
		Результат.Окончание = МоментРазмещения;
	КонецЕсли;
	
	Интервал = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Интервал, Результат);
	Интервал.ВремяПлан = ВремяОперации;
	
	Результат.Интервалы.Добавить(Интервал);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, РабочийЦентр)
	
	Результат = Новый Структура;
	Результат.Вставить("ПараллельнаяЗагрузка", Ложь);
	Результат.Вставить("СинхроннаяЗагрузка", Ложь);
	Результат.Вставить("МаксимальнаяЗагрузка", 0);
	
	Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.ВидыРабочихЦентров") Тогда
		НайденнаяСтрока = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "ВидРабочегоЦентра");
	Иначе
		НайденнаяСтрока = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "РабочийЦентр");
	КонецЕсли;
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, НайденнаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Таблица - см. ИнициализироватьДоступноеВремяОборудования
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений - где:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров -
// * ПараллельнаяЗагрузка - Булево -
// * СинхроннаяЗагрузка - Булево -
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры -
// * Период - Дата -
// * Начало - Дата -
// * Окончание - Дата -
// * НачалоСмены - Дата -
// * Время - Число -
// * ВремяСмены - Число -
// * МаксимальнаяЗагрузка - Число -
// * ДоступнаяЗагрузка - Число -
// * ВариантНаладки - СправочникСсылка.ВариантыНаладки -
// * ПредшествуетЗагрузка - Булево -
// * ВариантНаладкиПредшествует - СправочникСсылка.ВариантыНаладки -
// * СледуетЗагрузка - Булево -
// * ВариантНаладкиСледует - СправочникСсылка.ВариантыНаладки -
Функция ПоследняяСтрокаТаблицыДоступноеВремя(Таблица)
	
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[Таблица.Количество()-1];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СвернутьТаблицу(Таблица)
	
	КолонкиСтрокой = "";
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если Не КолонкиСтрокой = "" Тогда
			КолонкиСтрокой = КолонкиСтрокой + ", ";
		КонецЕсли;
		КолонкиСтрокой = КолонкиСтрокой + Колонка.Имя;
	КонецЦикла;			
	Таблица.Свернуть(КолонкиСтрокой);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
