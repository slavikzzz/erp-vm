
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("УникальныйИдентификатор") Тогда
		ИдентификаторВызывающейФормы = Параметры.УникальныйИдентификатор;
	Иначе
		ИдентификаторВызывающейФормы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ВосстановитьНастройкиФормы();
	
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
	КонецЕсли;
	Если Параметры.Свойство("Распоряжения") Тогда
		Распоряжения = Параметры.Распоряжения;
	КонецЕсли;
	Если Параметры.Свойство("ЭтапыПроизводства") Тогда
		ЭтапыПроизводства = Параметры.ЭтапыПроизводства;
	КонецЕсли;
	
	ОбновитьПредставлениеМоделейПланирования();
	УправлениеВидимостьюМоментаПланирования(ЭтотОбъект);
	ЗаполнитьВремяНаРегистрациюВыполнения(ЭтотОбъект);
	
	Элементы.МоделиПланированияПредставление.ПодсказкаВвода = Отчеты.ДиаграммаПооперационногоРасписания2_2.ПредставлениеПустойМодели();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МоментПланированияВариантыПриИзменении(Элемент)
	
	СохранитьНастройкиФормы();
	УправлениеВидимостьюМоментаПланирования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МоделиПланированияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеМоделейПланированияЗавершение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресМоделиПланирования", ПоместитьВХранилищеМоделиПланирования());
	
	ОткрытьФорму("Обработка.ПооперационноеПланирование2_2.Форма.ВыборМоделейПланирования",
		ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МоделиПланированияПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	МоделиПланирования.Очистить();
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьВремяНаРегистрациюВыполнения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоризонтПланированияПриИзменении(Элемент)
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура МоментПланированияПриИзменении(Элемент)
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если Не ПроверитьЗаполнение() Тогда	
		Возврат;	
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РаспоряженияНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Распоряжения", Распоряжения.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.ПооперационноеПланирование2_2.Форма.ВыборРаспоряжений",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		
		ЭтапыПроизводства.Очистить();
		Распоряжения.ЗагрузитьЗначения(РезультатЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапыНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("Распоряжения", Распоряжения.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Этапы", ЭтапыПроизводства.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.ПооперационноеПланирование2_2.Форма.ВыборЭтапов",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЭтапыНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		
		ЭтапыПроизводства.ЗагрузитьЗначения(РезультатЗакрытия);
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьРасписание(Команда)
	
	Отказ = Ложь;
	ПроверитьПараметрыПередРасчетом(Отказ);
	
	Если НЕ Отказ Тогда
		Результат = ПараметрыРасчета();
		Закрыть (Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	НастройкиФормы = ХранилищеНастроекДанныхФорм.Загрузить(НастройкиФормыКлючОбъекта(), "НастройкиФормы");
	Если ЗначениеЗаполнено(НастройкиФормы) И ТипЗнч(НастройкиФормы) = Тип("Структура") Тогда
		Для каждого Настройка Из НастройкиФормы Цикл
			Если Настройка.Ключ = "МоделиПланирования" Тогда
				МоделиПланирования.Загрузить(Настройка.Значение);
			Иначе
				ЭтотОбъект[Настройка.Ключ] = Настройка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	СтруктураНастроек = СохраняемыеНастройки();
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтаФорма);
	Если СтруктураНастроек.Свойство("МоделиПланирования") Тогда
		СтруктураНастроек.Вставить("МоделиПланирования", МоделиПланирования.Выгрузить());
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить(НастройкиФормыКлючОбъекта(), "НастройкиФормы", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыКлючОбъекта()
	
	Возврат "ПооперационноеПланированиеПараметрыРасчета";
	
КонецФункции

&НаСервере
Функция СохраняемыеНастройки()
	
	Результат = Новый Структура;
	Результат.Вставить("ГоризонтПланирования");
	Результат.Вставить("МоделиПланирования");
	Результат.Вставить("МоментПланирования");
	Результат.Вставить("МоментПланированияВариант");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюМоментаПланирования(Форма)
	
	Если Форма.МоментПланированияВариант = 0 Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ТекущееДатаВремя = ТекущаяДатаСеанса();
		#Иначе
			ТекущееДатаВремя = ОбщегоНазначенияКлиент.ДатаСеанса();
		#КонецЕсли
		
		ФорматДатаВремя = "ДЛФ=DT";
		Форма.Элементы.МоментПланированияТекущееВремя.Заголовок = Формат(ТекущееДатаВремя, ФорматДатаВремя);
	КонецЕсли;
	
	Форма.Элементы.МоментПланированияТекущееВремя.Видимость = (Форма.МоментПланированияВариант = 0);
	Форма.Элементы.МоментПланирования.Видимость = НЕ (Форма.МоментПланированияВариант = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеМоделейПланированияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РедактированиеМоделейПланированияЗавершениеНаСервере(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеМоделейПланированияЗавершениеНаСервере(РезультатЗакрытия) 
	
	Если ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		РезультатИзХранилища = ПолучитьИзВременногоХранилища(РезультатЗакрытия);
		Если ТипЗнч(РезультатИзХранилища) = Тип("ТаблицаЗначений") Тогда
			
			МоделиПланирования.Загрузить(РезультатИзХранилища);
			СохранитьНастройкиФормы();
			
			ОбновитьПредставлениеМоделейПланирования();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеМоделейПланирования()
	
	Если ЗначениеЗаполнено(МоделиПланирования) Тогда
		
		Представление = "";
		Для каждого Строка Из МоделиПланирования Цикл
			
			Если Строка.ЗадействоватьРезервДоступности Тогда
				ПредставлениеРезерва = НСтр("ru = 'с резервом';
											|en = 'with reserve'");
			Иначе
				ПредставлениеРезерва = НСтр("ru = 'без резерва';
											|en = 'no reserve'");
			КонецЕсли;
			ПредставлениеСценария = ?(ЗначениеЗаполнено(Строка.СценарийПланирования), Строка.СценарийПланирования, "");
			
			Представление = Представление
				+ ?(ЗначениеЗаполнено(Представление), "; ", "")
				+ Строка.МодельПланирования
				+ " ("
				+ ПредставлениеСценария
				+ ?(ЗначениеЗаполнено(ПредставлениеСценария), ",", "")
				+ ПредставлениеРезерва
				+ ")";
			
		КонецЦикла;
		
	Иначе
		Представление = "";
	КонецЕсли;
	
	МоделиПланированияПредставление = Представление;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасчета()
	
	ПараметрыРасчета = Обработки.ПооперационноеПланирование2_2.ПараметрыРасчетаПооперационногоРасписания();
	
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, ЭтотОбъект);
	
	ЗаполнитьПараметрыРасчетаСроки(ПараметрыРасчета);
	ЗаполнитьПараметрыРасчетаСеанс(ПараметрыРасчета);
	
	Для каждого Параметр Из ПараметрыРасчета Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("ДанныеФормыКоллекция") Тогда
			ПараметрыРасчета.Вставить(Параметр.Ключ, Параметр.Значение.Выгрузить());
		КонецЕсли;
	КонецЦикла;
	
	Результат = ПоместитьВоВременноеХранилище(ПараметрыРасчета, ИдентификаторВызывающейФормы);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыРасчетаСроки(ПараметрыРасчета)
	
	Если МоментПланированияВариант = 0 Тогда
		ПараметрыРасчета.Вставить("МоментПланирования", ТекущаяДатаСеанса());
		ПараметрыРасчета.Вставить("ОперативныйРасчет", Истина);
	Иначе
		ПараметрыРасчета.Вставить("МоментПланирования", МоментПланирования.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяНаРегистрациюВыполнения)
		И ЗначениеЗаполнено(ВремяНаРегистрациюВыполненияЕдИзм) Тогда
		ВремяНаРегистрациюСекунды = 
			ВремяНаРегистрациюВыполнения * ЕдИзмВремениВСекунды(ВремяНаРегистрациюВыполненияЕдИзм);
		ПараметрыРасчета.Вставить("ВремяНаРегистрациюВыполнения", ВремяНаРегистрациюСекунды);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРасчетаСеанс(ПараметрыРасчета)
	
	ПараметрыРасчета.Вставить("НомерСеанса", НомерСеансаИнформационнойБазы());
	ПараметрыРасчета.Вставить("НачалоСеанса", НачалоСеанса());
	ПараметрыРасчета.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
КонецПроцедуры

Функция НачалоСеанса()
	
	НомерСеанса = НомерСеансаИнформационнойБазы();
	НачалоСеанса = '00010101';
	
	УстановитьПривилегированныйРежим(Истина);
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			НачалоСеанса = Сеанс.НачалоСеанса;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НачалоСеанса;
	
КонецФункции

&НаСервере
Функция ПоместитьВХранилищеМоделиПланирования()
	
	МоделиТаблица = МоделиПланирования.Выгрузить();
	Результат = ПоместитьВоВременноеХранилище(МоделиТаблица);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПараметрыПередРасчетом(Отказ)
	
	ПроверитьУстановленныеОтборы(Отказ);
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановленныеОтборы(Отказ)
	
	ОтборРаспоряженияУстановлен = ЗначениеЗаполнено(Распоряжения);
	ОтборЭтапыУстановлен = ЗначениеЗаполнено(ЭтапыПроизводства);
	СценарииИспользуются = СценарииИспользуются();
	
	Ошибки = Неопределено;
	
	Если ОтборРаспоряженияУстановлен И СценарииИспользуются Тогда
		
		ПолеПредставление = НСтр("ru = 'Распоряжения';
								|en = 'References'");
		ТекстСообщения = НСтр("ru = 'При расчете с использованием сценариев планирования отбор не может быть установлен.';
								|en = 'Filter cannot be set while calculating using planning scenarios.'");
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", ПолеПредставление,,, ТекстСообщения);
		
		Поле = "Распоряжения";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки, Поле, ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если ОтборЭтапыУстановлен И СценарииИспользуются Тогда
		
		ПолеПредставление = НСтр("ru = 'Этапы производства';
								|en = 'Production stages'");
		ТекстСообщения = НСтр("ru = 'При расчете с использованием сценариев планирования отбор не может быть установлен.';
								|en = 'Filter cannot be set while calculating using planning scenarios.'");
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", ПолеПредставление,,, ТекстСообщения);
		
		Поле = "ЭтапыПроизводства";
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки, Поле, ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

&НаКлиенте
Функция СценарииИспользуются()
	
	Результат = Ложь;
	
	Для каждого Строка Из МоделиПланирования Цикл
		Если ЗначениеЗаполнено(Строка.СценарийПланирования) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодразделениеВремяНаРегистрацию(Подразделение)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Подразделение, "ВремяНаРегистрациюВыполнения, ВремяНаРегистрациюВыполненияЕдИзм");
	
КонецФункции

&НаСервере
Функция ЕдИзмВремениВСекунды(ЕдИзм)
	
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		Если ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Секунда Тогда
			Результат = 1;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Минута Тогда
			Результат = 60;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
			Результат = 3600;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.День
			ИЛИ ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда
			Результат = 86400;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Месяц Тогда
			Результат = 86400 * 30;
		ИначеЕсли ЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Год Тогда
			Результат = 86400 * 365;
		Иначе
			Результат = 0;
		КонецЕсли;
	Иначе
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВремяНаРегистрациюВыполнения(Форма)
	
	Если ЗначениеЗаполнено(Форма.Подразделение) Тогда
		ЗначенияЗаполнения = ПодразделениеВремяНаРегистрацию(Форма.Подразделение);
		ЗаполнитьЗначенияСвойств(Форма, ЗначенияЗаполнения);
	Иначе
		Форма.ВремяНаРегистрациюВыполнения = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
