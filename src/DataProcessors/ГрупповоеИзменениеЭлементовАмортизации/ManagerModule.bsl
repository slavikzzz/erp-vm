#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ЗагрузкаИзФайлаВТЧ

// Переопределяет параметры загрузки данных из файла.
//
// Параметры:
//  Параметры - Структура:
//   * ИмяМакетаСШаблоном - Строка - наименование макета. Например, "ЗагрузкаИзФайла".
//   * ИмяТабличнойЧасти - Строка - Полное имя табличной части. Например, "Документ._ДемоСчетНаОплатуПокупателю.ТабличнаяЧасть.Товары"
//   * ОбязательныеКолонки - Массив из Строка - наименования обязательных для заполнения колонок.
//   * ТипДанныхКолонки - Соответствие из КлючИЗначение:
//      * Ключ - Строка - имя колонки;
//      * Значение - ОписаниеТипов - тип колонки загружаемых данных.
//   * ДополнительныеПараметры - Структура
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт

КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ОсновныеСредства = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеДляСопоставления.ИнвентарныйНомер КАК СТРОКА(15)) КАК ИнвентарныйНомер,
		|	ДанныеДляСопоставления.ОсновноеСредство КАК ОсновноеСредство,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ
		|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИнвентарныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|	ОбъектыЭксплуатации.Ссылка.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоИнвентарномуНомеру
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ПО (ОбъектыЭксплуатации.Ссылка.ИнвентарныйНомер = ДанныеДляСопоставления.ИнвентарныйНомер)
		|		И (ДанныеДляСопоставления.ИнвентарныйНомер <> """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляСопоставления.ОсновноеСредство КАК ОсновноеСредство,
		|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоИнвентарномуНомеру КАК СопоставленнаяНоменклатураПоИнвентарномуНомеру
		|		ПО ДанныеДляСопоставления.Идентификатор = СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор
		|ГДЕ
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ОбъектыЭксплуатации.Ссылка) КАК Ссылка,
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор КАК Идентификатор,
		|	КОЛИЧЕСТВО(ДанныеДляСопоставленияПоНаименованию.Идентификатор) КАК Количество
		|ИЗ
		|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ПО (ОбъектыЭксплуатации.Наименование = (ВЫРАЗИТЬ(ДанныеДляСопоставленияПоНаименованию.ОсновноеСредство КАК
		|			СТРОКА(500))))
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляСопоставленияПоНаименованию.Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СопоставленнаяНоменклатураПоИнвентарномуНомеру.Ссылка),
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор,
		|	КОЛИЧЕСТВО(СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор)
		|ИЗ
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру КАК СопоставленнаяНоменклатураПоИнвентарномуНомеру
		|СГРУППИРОВАТЬ ПО
		|	СопоставленнаяНоменклатураПоИнвентарномуНомеру.Идентификатор";

	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса
	
	ТаблицаОС = РезультатыЗапросов[3].Выгрузить(); // ТаблицаЗначений

	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		ОС = ОсновныеСредства.Добавить();
		ОС.Идентификатор = СтрокаТаблицы.Идентификатор;
		ОС.СрокИспользованияБУ = СтрокаТаблицы.СрокИспользованияБУ;
		ОС.СрокИспользованияУУ = СтрокаТаблицы.СрокИспользованияУУ;
		ОС.ОбъемНаработки = СтрокаТаблицы.ОбъемНаработки;
		ОС.ЛиквидационнаяСтоимостьРегл = СтрокаТаблицы.ЛиквидационнаяСтоимостьРегл;
		ОС.ЛиквидационнаяСтоимость = СтрокаТаблицы.ЛиквидационнаяСтоимость;
		
		СтрокаОС = ТаблицаОС.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаОС <> Неопределено Тогда 
			Если СтрокаОС.Количество = 1 Тогда 
				ОС.ОсновноеСредство = СтрокаОС.Ссылка;
				ОС.ИнвентарныйНомер = СтрокаТаблицы.ИнвентарныйНомер;
			ИначеЕсли СтрокаОС.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор;
				ЗаписьОНеоднозначности.Колонка = "ОсновноеСредство";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ОсновныеСредства, АдресТаблицыСопоставления);
	
КонецПроцедуры

#КонецОбласти

// Возвращает параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
//	См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатьиИАналитики = Новый Массив;
	
	// СтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи = "СтатьяРасходовТипСтатьи";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаАктивовПассивов");
	
	ПараметрыВыбораСтатьиИАналитики.Добавить(ПараметрыВыбора);
	
	// СтатьяДоходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяДоходов";
	ПараметрыВыбора.ТипСтатьи = "СтатьяДоходовТипСтатьи";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиДоходов = Истина;
	ПараметрыВыбора.АналитикаДоходов = "АналитикаДоходов";

	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивовДоходов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяДоходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов.Добавить("АналитикаДоходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаАктивовПассивовДоходов");
	
	ПараметрыВыбораСтатьиИАналитики.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатьиИАналитики;
	
КонецФункции

// Возвращает параметры настройки счетов учета.
//  
// Возвращаемое значение:
//	См. НастройкаСчетовУчетаСервер.ПараметрыНастройки
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	МассивПараметров = Новый Массив();
	
	#Область НастройкаПредставлениеОтраженияРасходовВРеглУчете
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ПутьКДанным = "Объект";
	ПараметрыНастройки.НастройкаСчетовУчета = "НастройкаСчетовУчета";
	ПараметрыНастройки.СтатьяАктивовПассивов = "СтатьяРасходов";
	ПараметрыНастройки.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
	ПараметрыНастройки.Представление = "ПредставлениеОтраженияРасходовВРеглУчете";
	ПараметрыНастройки.ТипСтатьи     = "СтатьяРасходовТипСтатьи";
	
	ПараметрыНастройки.Организация = "Объект.Организация";

	ПараметрыНастройки.ЭлементыФормы.Добавить("ПредставлениеОтраженияРасходовВРеглУчете");
	МассивПараметров.Добавить(ПараметрыНастройки);
	#КонецОбласти
	
		
	#Область НастройкаПредставлениеОтраженияРасходовВРеглУчете
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ПутьКДанным = "Объект";
	ПараметрыНастройки.НастройкаСчетовУчета = "НастройкаСчетовУчетаДоходов";
	ПараметрыНастройки.СтатьяАктивовПассивов = "СтатьяДоходов";
	ПараметрыНастройки.АналитикаАктивовПассивов = "АналитикаАктивовПассивовДоходов";
	ПараметрыНастройки.Представление = "ПредставлениеОтраженияДоходовВРеглУчете";
	ПараметрыНастройки.ТипСтатьи     = "СтатьяДоходовТипСтатьи";

	ПараметрыНастройки.Организация = "Объект.Организация";

	ПараметрыНастройки.ЭлементыФормы.Добавить("ПредставлениеОтраженияДоходовВРеглУчете");
	МассивПараметров.Добавить(ПараметрыНастройки);
	#КонецОбласти
	
	Возврат МассивПараметров;
	
КонецФункции

Процедура СоздатьДокументыВФонеНаСервере(Параметры) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Строка Из Параметры.ОсновныеСредства Цикл
			
			ОтражатьВБУДляСтроки = (Строка.СостояниеБУ <> Перечисления.СостоянияОС.СнятоСУчета
										И Строка.СостояниеБУ <> Перечисления.СостоянияОС.НеПринятоКУчету
										И Строка.СостояниеБУ <> Перечисления.СостоянияОС.ЗаключенДоговорАренды
										И Строка.СостояниеБУ <> Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
										И Параметры.ОтражатьВБУ);
			ОтражатьВУУДляСтроки = (Строка.СостояниеУУ <> Перечисления.СостоянияОС.СнятоСУчета
										И Строка.СостояниеУУ <> Перечисления.СостоянияОС.НеПринятоКУчету
										И Строка.СостояниеУУ <> Перечисления.СостоянияОС.ЗаключенДоговорАренды
										И Строка.СостояниеУУ <> Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
										И Параметры.ОтражатьВУУ);

			Если ЗначениеЗаполнено(Строка.ДокументКорректировкиСтоимости)
				Или Строка.Организация <> Параметры.Организация
				Или (Не ОтражатьВБУДляСтроки И Не ОтражатьВУУДляСтроки)
				Или Не (ЗначениеЗаполнено(Строка.СрокИспользованияБУ)
					Или ЗначениеЗаполнено(Строка.СрокИспользованияБУ)
					Или ЗначениеЗаполнено(Строка.СрокИспользованияУУ)
					Или ЗначениеЗаполнено(Строка.ОбъемНаработки)
					Или ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимостьРегл)
					Или ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимость)) Тогда
				Продолжить;
			Иначе
				НачатьТранзакцию();
				
				Попытка
					// Cоздаем документ ИзменениеПараметровОС2_4
					НовыйДокументИзменениеПараметровОС = Документы.ИзменениеПараметровОС2_4.СоздатьДокумент();
					НовыйДокументИзменениеПараметровОС.Дата = КонецДня(Параметры.Дата);
					НовыйДокументИзменениеПараметровОС.Организация = Параметры.Организация;
					НовыйДокументИзменениеПараметровОС.ОтражатьВБУ = ОтражатьВБУДляСтроки;
					НовыйДокументИзменениеПараметровОС.СобытиеОС = Параметры.Событие;
					НовыйДокументИзменениеПараметровОС.ОтражатьВУпрУчете = ОтражатьВУУДляСтроки;
					НовыйДокументИзменениеПараметровОС.ОтражатьВРеглУчете = ОтражатьВБУДляСтроки;
					НовыйДокументИзменениеПараметровОС.Ответственный = Пользователи.ТекущийПользователь();
					НовыйДокументИзменениеПараметровОС.Комментарий =
						НСтр("ru = 'Документ сформирован автоматически при групповом изменении элементов амортизации';
							|en = 'The document is generated automatically upon bulk modification of depreciation items'");
					
					Стр = НовыйДокументИзменениеПараметровОС.ОС.Добавить();
					Стр.ОсновноеСредство = Строка.ОсновноеСредство;
					
					Если ЗначениеЗаполнено(Строка.СрокИспользованияБУ) Тогда
						НовыйДокументИзменениеПараметровОС.СрокИспользованияБУФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.СрокИспользованияБУ = Строка.СрокИспользованияБУ;
						НовыйДокументИзменениеПараметровОС.УказанОстаточныйСрокБУ = Истина;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.СрокИспользованияУУ) Тогда
						НовыйДокументИзменениеПараметровОС.СрокИспользованияУУФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.СрокИспользованияУУ = Строка.СрокИспользованияУУ;
						НовыйДокументИзменениеПараметровОС.УказанОстаточныйСрокУУ = Истина;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.ОбъемНаработки) Тогда
						НовыйДокументИзменениеПараметровОС.ОбъемНаработкиФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.ОбъемНаработки = Строка.ОбъемНаработки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимостьРегл) Тогда
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимостьРеглФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимостьРегл = Строка.ЛиквидационнаяСтоимостьРегл;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.ЛиквидационнаяСтоимость) Тогда
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимостьФлаг = Истина;
						НовыйДокументИзменениеПараметровОС.ЛиквидационнаяСтоимость = Строка.ЛиквидационнаяСтоимость;
					КонецЕсли;
					
					НовыйДокументИзменениеПараметровОС.Записать(РежимЗаписиДокумента.Проведение);
					
					Если Параметры.КорректироватьНакопленнуюАмортизацию Тогда
						// Cоздаем документ КорректировкаСтоимостиИАмортизацииОС
						НовыйДокументКорректировкаСтоимости = Документы.КорректировкаСтоимостиИАмортизацииОС.СоздатьДокумент();
						НовыйДокументКорректировкаСтоимости.Дата = КонецДня(Параметры.Дата);
						НовыйДокументКорректировкаСтоимости.Организация = Параметры.Организация;
						НовыйДокументКорректировкаСтоимости.ОтражатьВРеглУчете = НовыйДокументИзменениеПараметровОС.ОтражатьВРеглУчете;
						НовыйДокументКорректировкаСтоимости.ОтражатьВУпрУчете = НовыйДокументИзменениеПараметровОС.ОтражатьВУпрУчете;
						НовыйДокументКорректировкаСтоимости.Комментарий =
							НСтр("ru = 'Документ сформирован автоматически при групповом изменении элементов амортизации';
								|en = 'The document is generated automatically upon bulk modification of depreciation items'");
						НовыйДокументКорректировкаСтоимости.Подразделение = Строка.Подразделение;
						НовыйДокументКорректировкаСтоимости.СобытиеОС = Параметры.Событие;
						НовыйДокументКорректировкаСтоимости.СтатьяДоходов = Параметры.СтатьяДоходов;
						НовыйДокументКорректировкаСтоимости.АналитикаДоходов = Параметры.АналитикаДоходов;
						НовыйДокументКорректировкаСтоимости.АналитикаАктивовПассивовДоходов = Параметры.АналитикаАктивовПассивовДоходов;
						НовыйДокументКорректировкаСтоимости.СтатьяРасходов = Параметры.СтатьяРасходов;
						НовыйДокументКорректировкаСтоимости.АналитикаРасходов = Параметры.АналитикаРасходов;
						НовыйДокументКорректировкаСтоимости.АналитикаАктивовПассивовРасходов = Параметры.АналитикаАктивовПассивов;
						НовыйДокументКорректировкаСтоимости.НастройкаСчетовУчетаРасходов = Параметры.НастройкаСчетовУчета;
						НовыйДокументКорректировкаСтоимости.НастройкаСчетовУчетаДоходов = Параметры.НастройкаСчетовУчетаДоходов;
						НовыйДокументКорректировкаСтоимости.КорректировкаВСвязиСИзменениемУчетнойПолитики = Параметры.КорректировкаВСвязиСИзменениемУчетнойПолитики;
						НовыйДокументКорректировкаСтоимости.Заполнить(НовыйДокументИзменениеПараметровОС.Ссылка);
						
						НовыйДокументКорректировкаСтоимости.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать документы по причине: %1';
													|en = 'Cannot create documents due to: %1'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Предупреждение, 
						, 
						, 
						ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли