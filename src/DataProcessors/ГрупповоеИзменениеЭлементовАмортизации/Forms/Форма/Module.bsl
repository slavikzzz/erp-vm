
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьУсловноеОформление();
	
	Дата = КонецГода(ТекущаяДатаСеанса());
	
	ПараметрыВыбораСтатейИАналитик = Обработки.ГрупповоеИзменениеЭлементовАмортизации.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройки = Обработки.ГрупповоеИзменениеЭлементовАмортизации.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияДоходовВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБУПриИзменении(Элемент)
	
	Элементы.КорректировкаВСвязиСИзменениемУчетнойПолитики.Доступность = ОтражатьВБУ;
	Элементы.КорректироватьНакопленнуюАмортизацию.Доступность = ОтражатьВБУ;
	Элементы.ОсновныеСредстваСостояниеБУ.Видимость = ОтражатьВБУ;
	Элементы.ОсновныеСредстваСрокИспользованияБУ.Видимость = ОтражатьВБУ;
	Элементы.ОсновныеСредстваЛиквидационнаяСтоимостьРегл.Видимость = ОтражатьВБУ;
	Если Не ОтражатьВБУ Тогда
		КорректировкаВСвязиСИзменениемУчетнойПолитики = Ложь;
		КорректироватьНакопленнуюАмортизацию = Ложь;
	КонецЕсли;
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУУПриИзменении(Элемент)
	
	Элементы.ОсновныеСредстваСостояниеУУ.Видимость = ОтражатьВУУ;
	Элементы.ОсновныеСредстваСрокИспользованияУУ.Видимость = ОтражатьВУУ;
	Элементы.ОсновныеСредстваЛиквидационнаяСтоимость.Видимость = ОтражатьВУУ;
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаВСвязиСИзменениемУчетнойПолитикиПриИзменении(Элемент)
	
	Если КорректировкаВСвязиСИзменениемУчетнойПолитики Тогда
		КорректироватьНакопленнуюАмортизацию = Истина;
		Элементы.КорректироватьНакопленнуюАмортизацию.Доступность = Ложь;
	Иначе
		Элементы.КорректироватьНакопленнуюАмортизацию.Доступность = Истина;
	КонецЕсли;
	ЗаполнитьТекущиеЗначенияПараметров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОсновныеСредстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВнеоборотныеАктивыКлиентСервер.ОбработкаВыбораЭлемента(Объект.ОсновныеСредства, "ОсновноеСредство", ВыбранноеЗначение).Количество() <> 0 Тогда
		ЗаполнитьТекущиеЗначенияПараметров(Ложь, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ЗаполнитьТекущиеЗначенияПараметров(Ложь, Элементы.ОсновныеСредства.ТекущиеДанные.ОсновноеСредство);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "Обработка.ГрупповоеИзменениеЭлементовАмортизации.ОсновныеСредства";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка из файла';
										|en = 'Import from file'");
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ОСДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОсновноеСредство) Тогда 
			Продолжить;
		КонецЕсли;
	
		НоваяСтрокаТовары = Объект.ОсновныеСредства.Добавить();
		НоваяСтрокаТовары.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		НоваяСтрокаТовары.СрокИспользованияБУ = СтрокаТаблицы.СрокИспользованияБУ;
		НоваяСтрокаТовары.СрокИспользованияУУ = СтрокаТаблицы.СрокИспользованияУУ;
		НоваяСтрокаТовары.ОбъемНаработки = СтрокаТаблицы.ОбъемНаработки;
		НоваяСтрокаТовары.ЛиквидационнаяСтоимостьРегл = СтрокаТаблицы.ЛиквидационнаяСтоимостьРегл;
		НоваяСтрокаТовары.ЛиквидационнаяСтоимость = СтрокаТаблицы.ЛиквидационнаяСтоимость;
		
		ОСДобавлены = Истина;
	КонецЦикла;
	
	Если ОСДобавлены Тогда
		Модифицированность = Истина;
		ЗаполнитьТекущиеЗначенияПараметров();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокументыВФонеНаСервере()
	
	НастройкаСчетовУчетаСервер.ЗаписатьНастройкиСчетовУчетаФормы(ЭтотОбъект);
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Организация", Объект.Организация);
	ПараметрыФункции.Вставить("СтатьяДоходов", Объект.СтатьяДоходов);
	ПараметрыФункции.Вставить("АналитикаДоходов", Объект.АналитикаДоходов);
	ПараметрыФункции.Вставить("СтатьяРасходов", Объект.СтатьяРасходов);
	ПараметрыФункции.Вставить("АналитикаРасходов", Объект.АналитикаРасходов);
	ПараметрыФункции.Вставить("АналитикаАктивовПассивов", Объект.АналитикаАктивовПассивов);
	ПараметрыФункции.Вставить("АналитикаАктивовПассивовДоходов", Объект.АналитикаАктивовПассивовДоходов);
	ПараметрыФункции.Вставить("НастройкаСчетовУчета", Объект.НастройкаСчетовУчета);
	ПараметрыФункции.Вставить("НастройкаСчетовУчетаДоходов", Объект.НастройкаСчетовУчетаДоходов);
	ПараметрыФункции.Вставить("ОтражатьВБУ", ОтражатьВБУ);
	ПараметрыФункции.Вставить("ОтражатьВУУ", ОтражатьВУУ);
	ПараметрыФункции.Вставить("Дата", Дата);
	ПараметрыФункции.Вставить("Событие", Событие);
	ПараметрыФункции.Вставить("КорректировкаВСвязиСИзменениемУчетнойПолитики", КорректировкаВСвязиСИзменениемУчетнойПолитики);
	ПараметрыФункции.Вставить("КорректироватьНакопленнуюАмортизацию", КорректироватьНакопленнуюАмортизацию);
	ПараметрыФункции.Вставить("ОсновныеСредства", Объект.ОсновныеСредства.Выгрузить());
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения, "Обработки.ГрупповоеИзменениеЭлементовАмортизации.СоздатьДокументыВФонеНаСервере", ПараметрыФункции);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	ОчиститьСообщения();
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.СтатьяДоходов)
		Или Не ЗначениеЗаполнено(Объект.СтатьяРасходов)
		Или Не ЗначениеЗаполнено(Дата) Тогда
			ТекстСообщения = НСтр("ru = 'Заполните обязательные реквизиты';
									|en = 'Fill in required attributes'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
	ИначеЕсли Не ОтражатьВБУ И Не ОтражатьВУУ Тогда
		ТекстСообщения = НСтр("ru = 'Заполните признак отражения в учете';
								|en = 'Fill in the flag of recording in accounting'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		СоздатьДокументыВФоне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = ОбщегоНазначенияУТКлиентСервер.ПараметрыПодбора(Элементы.ОсновныеСредстваОсновноеСредство, ЭтотОбъект);
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("БУОрганизация", Объект.Организация);
	ПараметрыПодбора.Вставить("Отбор", ПараметрыОтбор);
	ПараметрыПодбора.Вставить("ДатаСведений", Дата);

	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора",
					ПараметрыПодбора, Элементы.ОсновныеСредства,,,,,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		РеглУчетВНАВедетсяНезависимоНастройка = НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо(Объект.Организация, Дата);
		
		Если РеглУчетВНАВедетсяНезависимо <> РеглУчетВНАВедетсяНезависимоНастройка Тогда
			
			РеглУчетВНАВедетсяНезависимо = РеглУчетВНАВедетсяНезависимоНастройка;
			
			Элементы.ОтражатьВБУ.Видимость = РеглУчетВНАВедетсяНезависимо;
			Элементы.ОтражатьВУУ.Видимость = РеглУчетВНАВедетсяНезависимо;
			
			Если НЕ РеглУчетВНАВедетсяНезависимо Тогда
				ОтражатьВБУ = Истина;
				ОтражатьВУУ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьТекущиеЗначенияПараметров();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Дата");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьТекущиеЗначенияПараметров();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваНомерСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОсновноеСредство.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваИнвентарныйНомер.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОрганизация.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОбъемНаработки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимостьРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимость.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваДокументКорректировкиСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОсновныеСредства.ДокументКорректировкиСтоимости");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ДобавленныйРеквизитФон);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваНомерСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОсновноеСредство.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваИнвентарныйНомер.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОрганизация.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСостояниеУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияБУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваСрокИспользованияУУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваОбъемНаработки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимостьРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваЛиквидационнаяСтоимость.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОсновныеСредстваДокументКорректировкиСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОсновныеСредства.ДокументКорректировкиСтоимости");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПравоСозданияФон);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеЗначенияПараметров(ТолькоДополнительнаяИнформация = Истина, ВыбранноеОсновноеСредство = Неопределено)
	
	Если Объект.ОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка                                         КАК ОсновноеСредство,
	|	ОбъектыЭксплуатации.Ссылка.ИнвентарныйНомер                        КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокПолезногоИспользованияБУ, 0) КАК СрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.СрокИспользования, 0)            КАК СрокИспользованияУУ,
	|	ЕСТЬNULL(ПорядокУчетаОС.ОбъемНаработки, НЕОПРЕДЕЛЕНО)              КАК ОбъемНаработки,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимостьРегл, 0)  КАК ЛиквидационнаяСтоимостьРегл,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0)      КАК ЛиквидационнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ПорядокУчетаОСБУ.СостояниеБУ <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)
	|			ТОГДА ПорядокУчетаОСБУ.СостояниеБУ
	|		ИНАЧЕ ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету))
	|	КОНЕЦ                                                                                    КАК СостояниеБУ,
	|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(МестонахождениеОС.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))   КАК Организация,
	|	ЕСТЬNULL(МестонахождениеОС.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(КорректировкаСтоимостиИАмортизацииОСОС.Ссылка, ИзменениеПараметровОС2_4.Ссылка)            КАК ДокументКорректировкиСтоимости,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ПараметрыАмортизацииОСУУ.ДатаПоследнегоИзменения, МЕСЯЦ), &Период, МЕСЯЦ) КАК ЧИСЛО(20,8)),0) КАК КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеУУ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ПараметрыАмортизацииОСБУ.ДатаПоследнегоИзменения, МЕСЯЦ), &Период, МЕСЯЦ) КАК ЧИСЛО(20,8)),0) КАК КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеБУ
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСУУ
	|		ПО (ПараметрыАмортизацииОСУУ.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБУ
	|		ПО (ПараметрыАмортизацииОСБУ.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОС
	|		ПО (ПорядокУчетаОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
	|		ПО (ПорядокУчетаОСУУ.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСБУ
	|		ПО (ПорядокУчетаОСБУ.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
	|		ПО (МестонахождениеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаСтоимостиИАмортизацииОС.ОС КАК КорректировкаСтоимостиИАмортизацииОСОС
	|		ПО (КорректировкаСтоимостиИАмортизацииОСОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|			И (КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.Проведен)
	|			И (&ОтражатьВБУ = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.ОтражатьВРеглУчете)
	|			И (&ОтражатьВУУ = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.ОтражатьВУпрУчете)
	|			И (&КорректировкаВСвязиСИзменениемУчетнойПолитики = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.КорректировкаВСвязиСИзменениемУчетнойПолитики)
	|			И (&Период = КорректировкаСтоимостиИАмортизацииОСОС.Ссылка.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровОС2_4.ОС КАК ИзменениеПараметровОС2_4
	|		ПО (ИзменениеПараметровОС2_4.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
	|			И (ИзменениеПараметровОС2_4.Ссылка.Проведен)
	|			И (&ОтражатьВБУ = ИзменениеПараметровОС2_4.Ссылка.ОтражатьВРеглУчете)
	|			И (&ОтражатьВУУ = ИзменениеПараметровОС2_4.Ссылка.ОтражатьВУпрУчете)
	|			И (&Период = ИзменениеПараметровОС2_4.Ссылка.Дата)
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Если ВыбранноеОсновноеСредство = Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОС", Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Иначе
		Запрос.УстановитьПараметр("СписокОС", ВыбранноеОсновноеСредство);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", КонецДня(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("ОтражатьВБУ", ОтражатьВБУ);
	Запрос.УстановитьПараметр("ОтражатьВУУ", ОтражатьВУУ);
	Запрос.УстановитьПараметр("КорректировкаВСвязиСИзменениемУчетнойПолитики", КорректировкаВСвязиСИзменениемУчетнойПолитики);
	
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеСтроки Из Объект.ОсновныеСредства Цикл
		ТекущиеЗначения = Результат.Найти(ДанныеСтроки.ОсновноеСредство, "ОсновноеСредство");
		Если ТекущиеЗначения <> Неопределено Тогда
			Если ТолькоДополнительнаяИнформация Тогда
				ДанныеСтроки.ИнвентарныйНомер = ТекущиеЗначения.ИнвентарныйНомер;
				ДанныеСтроки.СостояниеБУ = ТекущиеЗначения.СостояниеБУ;
				ДанныеСтроки.СостояниеУУ = ТекущиеЗначения.СостояниеУУ;
				ДанныеСтроки.Организация = ТекущиеЗначения.Организация;
				ДанныеСтроки.Подразделение = ТекущиеЗначения.Подразделение;
				ДанныеСтроки.ДокументКорректировкиСтоимости = ТекущиеЗначения.ДокументКорректировкиСтоимости;
			Иначе
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеЗначения);
				Если ТекущиеЗначения.СрокИспользованияБУ - ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеБУ > 0
					И (ТекущиеЗначения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
						Или ТекущиеЗначения.СостояниеБУ = Перечисления.СостоянияОС.ВАренде
						Или ТекущиеЗначения.СостояниеБУ = Перечисления.СостоянияОС.ПереданоВАренду) Тогда
							ДанныеСтроки.СрокИспользованияБУ = ТекущиеЗначения.СрокИспользованияБУ
												- ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеБУ;
				Иначе
					ДанныеСтроки.СрокИспользованияБУ = 0;
				КонецЕсли;
				Если ТекущиеЗначения.СрокИспользованияУУ - ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеУУ > 0
					И (ТекущиеЗначения.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету
						Или ТекущиеЗначения.СостояниеУУ = Перечисления.СостоянияОС.ВАренде
						Или ТекущиеЗначения.СостояниеУУ = Перечисления.СостоянияОС.ПереданоВАренду) Тогда
							ДанныеСтроки.СрокИспользованияУУ = ТекущиеЗначения.СрокИспользованияУУ
											- ТекущиеЗначения.КоличествоМесяцевПослеПринятияКУчетуДоДатыВОбработкеУУ;
				Иначе
					ДанныеСтроки.СрокИспользованияУУ = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВФоне()
	
	ДлительнаяОперация = СоздатьДокументыВФонеНаСервере();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СозданиеДокументовВФонеЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры 

&НаКлиенте
Процедура СозданиеДокументовВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // Пользователь отменил задание.
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
		ПоказатьПредупреждение(,НСтр("ru = 'Документы не были созданы по причине:';
									|en = 'Documents were not created due to:'") + Символы.ПС + ТекстСообщения);
	Иначе
		ЗаполнитьТекущиеЗначенияПараметров();
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти
