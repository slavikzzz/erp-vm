//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет расчет пооперационного расписания производства.
//
// Параметры:
//  ПараметрыРасчета - см. ПараметрыРасчетаПооперационногоРасписания.
//  АдресХранилища - УникальныйИдентификатор, Строка - адрес во временном хранилище, по которому надо поместить
//                                                     результаты расчета расписания.
//
Процедура РассчитатьРасписание(ПараметрыРасчета, АдресХранилища) Экспорт
	
	КлючеваяОперация = "ВнутрицеховоеУправление.ФормированиеПооперационногоРасписания";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	РезультатыРасчета = РассчитатьРасписаниеВнутриЗамераВремени(ПараметрыРасчета);
	ПоместитьВоВременноеХранилище(РезультатыРасчета, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, РезультатыРасчета.КоличествоДанных);
	
КонецПроцедуры

// Выполняет расчет пооперационного расписания в соответствии с параметрами конкретной модели планирования.
//
// Параметры:
//  ПараметрыПланирования - см. ИнициализироватьПараметрыПланирования.
//  АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, в которое будет помещен результат работы метода.
//
Процедура РассчитатьРасписаниеМоделиВФоновомРежиме(ПараметрыПланирования, АдресХранилища) Экспорт
	
	РассчитатьРасписаниеМодели(ПараметрыПланирования);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультатыФоновогоРасчета(ПараметрыПланирования), АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Функция-конструктор параметров расчета расписания. Параметры расчета содержат всю исходную
//	 и промежуточную информацию, используемую в процессе расчета расписания, а так же результаты расчета.
//
// Возвращаемое значение:
//	Структура - параметры расчета расписания.
//
Функция ПараметрыРасчетаПооперационногоРасписания() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МоментПланирования", '00010101');
	Результат.Вставить("ГоризонтПланирования", 0);
	Результат.Вставить("МоделиПланирования", Новый ТаблицаЗначений);
	Результат.Вставить("ВремяНаРегистрациюВыполнения", 0);
	Результат.Вставить("ОперативныйРасчет", Ложь);
	
	Результат.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Результат.Вставить("Распоряжения", Новый СписокЗначений);
	Результат.Вставить("МаршрутныеЛисты", Новый СписокЗначений);
	
	Результат.Вставить("НачалоСеанса", '00010101');
	Результат.Вставить("НомерСеанса", 0);
	Результат.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Возврат Результат;
	
КонецФункции

// Инициирует запись рассчитанного пооперационного расписания в БД.
//
// Параметры:
//  ПараметрыЗадания - Структура - содержит реквизиты идентифицирующие множество операций,
//		составляющих записываемого расписания. Элементы структуры:
//		* МодельРасписания - УникальныйИдентификатор - ключ рассчитанного и записываемого расписания.
//		* МодельПланирования - СправочникСсылка.МоделиПооперационногоПланирования - модель расписания,
//			данные которой необходимо записать.
//  АдресХранилища - УникальныйИдентификатор - адрес временного хранилища, в которое будет помещен результат работы метода.
//
Процедура ЗаписатьРасписаниеВФоновомРежиме(Знач ПараметрыЗадания, АдресХранилища) Экспорт
	
	МодельРасписания = ПараметрыЗадания.МодельРасписания;
	МодельПланирования = ПараметрыЗадания.МодельПланирования;
	
	ЗаписьВыполнена = Ложь;
	РегистрыСведений.ПооперационноеРасписание.ЗаписатьРасписание(МодельРасписания, МодельПланирования, ЗаписьВыполнена);
	ПоместитьВоВременноеХранилище(ЗаписьВыполнена, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьРасписаниеВнутриЗамераВремени(ПараметрыРасчета)
	
	ПараметрыПланирования = ИнициализироватьПараметрыПланирования();
	ЗаполнитьЗначенияСвойств(ПараметрыПланирования, ПараметрыРасчета);
	
	Отказ = Ложь;
	ЗаполнитьПараметрыПланирования(ПараметрыПланирования, Отказ);
	
	Если НЕ Отказ Тогда
		РассчитатьРасписаниеМоделейПланирования(ПараметрыПланирования);
	КонецЕсли;
	
	ЗаполнитьРезультатыРасчета(ПараметрыПланирования);
	
	Возврат ПараметрыПланирования.РезультатыРасчета;
	
КонецФункции

#Область СтадииПланирования

Процедура РассчитатьРасписаниеМоделейПланирования(ПараметрыПланирования)
	
	Файловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	НесколькоМоделей = (ПараметрыПланирования.ПараметрыМоделейПланирования.Количество()>1);
	РасчетВФоновомРежиме = НЕ Файловая И НесколькоМоделей;
	
	Если РасчетВФоновомРежиме Тогда
		
		ИмяМетодаЗадания = "ОперативныйУчетПроизводства.РассчитатьПооперационноеРасписаниеМоделиВФоновомРежиме";
		НаименованиеЗадания = НСтр("ru = 'Расчет расписания по модели планирования';
									|en = 'Estimate the timetable according to the planning model'");
		РезультатыРасчета = Новый Массив;
		
		Для каждого МодельПланирования Из ПараметрыПланирования.ПараметрыМоделейПланирования Цикл
			
			ЗаполнитьПараметрыПланированияПоДаннымМоделиПланирования(ПараметрыПланирования, МодельПланирования);
			
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
			РезультатыРасчета.Добавить(АдресХранилища);
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ПараметрыПланирования);
			ПараметрыМетода.Добавить(АдресХранилища);
			Задание = ФоновыеЗадания.Выполнить(ИмяМетодаЗадания, ПараметрыМетода,, НаименованиеЗадания);
			
		КонецЦикла;
		
		ОжидатьЗавершенияФоновыхЗаданий(ИмяМетодаЗадания, НаименованиеЗадания);
		ПрочитатьРезультатыФоновогоРасчета(ПараметрыПланирования, РезультатыРасчета);
		
	Иначе
		
		Если НесколькоМоделей Тогда
			ПерезаполняемыеПараметры = ПерезаполняемыеПараметрыПланирования(ПараметрыПланирования);
		Иначе
			ПерезаполняемыеПараметры = Неопределено;
		КонецЕсли;
		ПерезаполнитьПараметры = Ложь;
		
		Для каждого МодельПланирования Из ПараметрыПланирования.ПараметрыМоделейПланирования Цикл
			
			Если ПерезаполнитьПараметры Тогда
				ПерезаполнитьПараметрыПланирования(ПараметрыПланирования, ПерезаполняемыеПараметры);
			Иначе
				ПерезаполнитьПараметры = Истина;
			КонецЕсли;
			
			ЗаполнитьПараметрыПланированияПоДаннымМоделиПланирования(ПараметрыПланирования, МодельПланирования);
			
			РассчитатьРасписаниеМодели(ПараметрыПланирования);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьРасписаниеМодели(ПараметрыПланирования)
	
	Для каждого Приоритет Из ПараметрыПланирования.ПриоритетыМаршрутов Цикл
		РассчитатьРасписаниеПартииМаршрутов(ПараметрыПланирования, Приоритет);
	КонецЦикла;
	
	ЗаписатьРезультатыРасчетаМодели(ПараметрыПланирования);
	
КонецПроцедуры

Процедура РассчитатьРасписаниеПартииМаршрутов(ПараметрыПланирования, Знач ПриоритетМаршрута)
	
	Пока Истина Цикл
		
		ОперацииОбработаны = Ложь;
		
		Для каждого Ранг Из ПараметрыПланирования.РангиРабочихЦентров Цикл
			
			Операции = ОперацииТактаПланирования(ПараметрыПланирования, Ранг.ВидРабочегоЦентра, ПриоритетМаршрута);
			
			Если ЗначениеЗаполнено(Операции) Тогда
				
				ВыполнитьТактПланированияОпераций(ПараметрыПланирования, Операции, Ранг.ВидРабочегоЦентра);
				
				ОперацииОбработаны = Истина;
				Прервать;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОперацииОбработаны Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПеренестиМежоперационныеПереходыВРасписание(ПараметрыПланирования);
	
КонецПроцедуры

Процедура ВыполнитьТактПланированияОпераций(ПараметрыПланирования, Операции, Знач ВидРабочегоЦентра)
	
	ВариантыРасписания = ИнициализироватьВариантыРасписания(ПараметрыПланирования, Операции);
	
	Для каждого ВариантРасписания Из ВариантыРасписания Цикл
		
		ВыполнитьПланированиеВариантаРасписания(ПараметрыПланирования, ВариантРасписания, ВидРабочегоЦентра);
		
	КонецЦикла;
	
	ЛучшийВариант = ЛучшийВариантРасписания(ПараметрыПланирования, ВариантыРасписания);
	СохранитьВариантРасписания(ПараметрыПланирования, ЛучшийВариант);
	
КонецПроцедуры

Процедура ВыполнитьПланированиеВариантаРасписания(ПараметрыПланирования, ВариантРасписания, Знач ВидРабочегоЦентра)
	
	ДублироватьПараметрыПланирования(ПараметрыПланирования, ВариантРасписания.Операции, ВидРабочегоЦентра);
	
	Для каждого Операция Из ВариантРасписания.Операции Цикл
		
		ПараметрыРазмещения = РассчитатьПараметрыРазмещенияОперации(
			ПараметрыПланирования, Операция, ВариантРасписания.ПравилоВыбораРЦ, Истина);
		
		НоваяСтрока = ВариантРасписания.Расписание.Добавить();
		НоваяСтрока.Операция = Операция;
		НоваяСтрока.ИдентификаторОперации = Операция.ИдентификаторОперации;
		НоваяСтрока.ПараметрыРазмещения = ПараметрыРазмещения;
		
		Если НЕ ПараметрыРазмещения = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыРазмещения);
			ОтразитьРазмещениеОперацииВПараметрахПланирования(ПараметрыПланирования, Операция, ПараметрыРазмещения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьДублированныеПараметрыПланирования(ПараметрыПланирования);
	
КонецПроцедуры

Процедура СохранитьВариантРасписания(ПараметрыПланирования, Знач ВариантРасписания)
	
	Для каждого ОперацияРасписания Из ВариантРасписания.Расписание Цикл
		
		Если ЗначениеЗаполнено(ОперацияРасписания.ПараметрыРазмещения) Тогда
			
			РазместитьОперацию(ПараметрыПланирования, ОперацияРасписания.Операция, ОперацияРасписания.ПараметрыРазмещения, Истина);
			
		Иначе
			
			ОбработатьНеразмещеннуюОперацию(ПараметрыПланирования, ОперацияРасписания.Операция, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазместитьОперацию(ПараметрыПланирования, Знач Операция, Знач ПараметрыРазмещения, Знач ПрямоеРазмещение)
	
	Для каждого ИнтервалРазмещения Из ПараметрыРазмещения.Интервалы Цикл
		
		ЗаполнитьОбщиеСвойстваРазмещения(ПараметрыПланирования, ПараметрыРазмещения);
		
		Если НЕ ЗначениеЗаполнено(ИнтервалРазмещения.ВремяПереналадки) Тогда
			ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалРазмещения);
		Иначе
			ИнтервалПереналадка = ВыделитьИзИнтервалаВремяПереналадки(ИнтервалРазмещения);
			ПараметрыРазмещения.Вставить("ЭтоПереналадка", Истина);
			ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалПереналадка);
			
			Если ИнтервалРазмещения.ВремяПлан > ИнтервалРазмещения.ВремяПереналадки Тогда
				ИнтервалОсновное = ВыделитьИзИнтервалаВремяОсновное(ИнтервалРазмещения);
				ПараметрыРазмещения.Вставить("ЭтоПереналадка", Ложь);
				ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалОсновное);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыРазмещения.ВспомогательныеРЦ) Тогда
			РазместитьВспомогательныеОперации(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалРазмещения);
		КонецЕсли;
		
	КонецЦикла;
	
	Операция.Размещена = Истина;
	
	ОтразитьРазмещениеОперацииВПараметрахПланирования(ПараметрыПланирования, Операция, ПараметрыРазмещения);
	
	ИсправитьДочерниеОперацииПослеРазмещенияРодительской(ПараметрыПланирования, Операция,
		ПараметрыРазмещения, ПрямоеРазмещение);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПланирования

Функция ИнициализироватьПараметрыПланирования()

	Результат = Новый Структура;
	
	// Параметры с типом значения "УникальныйИдентификатор".
	Результат.Вставить("МодельРасписания", Новый УникальныйИдентификатор);
	
	// Параметры с типом "Дата".
	Результат.Вставить("НачалоПланирования", ТекущаяДатаСеанса());
	Результат.Вставить("ОперативнаяОтметкаВремени", ТекущаяДатаСеанса());
	
	// Параметры с типом значения "Число".
	Результат.Вставить("ВесМинимизироватьВремя", 0);
	Результат.Вставить("ВесМинимизироватьСтоимость", 0);
	
	// Параметры с типом значения "Булево".
	Результат.Вставить("ЗадействоватьРезервДоступности", Ложь);
	
	// Параметры с типом значения "Структура".
	Результат.Вставить("ПараметрыОптимизации", Новый Структура);
	Результат.Вставить("РезультатыРасчета", ИнициализироватьРезультатыРасчета());
	Результат.Вставить("ДублированныеПараметры", Новый Структура);
	
	// Параметры с типом значения "Массив".
	Результат.Вставить("Операции", Новый Массив);
	Результат.Вставить("ПриоритетыМаршрутов", Новый Массив);
	Результат.Вставить("МассивРабочихЦентров", Новый Массив);
	
	// Параметры с типом значения "ПеречислениеСсылка.СпособыЗагрузкиВидаРабочегоЦентра".
	Результат.Вставить("СпособЗагрузки", Перечисления.СпособыЗагрузкиВидаРабочегоЦентра.ПустаяСсылка());
	
	// Параметры с типом значения "СправочникСсылка.МоделиПооперационногоПланирования".
	Результат.Вставить("МодельПланирования", Справочники.МоделиПооперационногоПланирования.ПустаяСсылка());
	
	// Параметры с типом значения "СправочникСсылка.СценарииПооперационногоПланирования".
	Результат.Вставить("СценарийПланирования", Справочники.СценарииПооперационногоПланирования.ПустаяСсылка());
	
	// Параметры с типом значения "ТаблицаЗначений".
	Результат.Вставить("КритерииОценкиРасписаний", Новый ТаблицаЗначений);
	Результат.Вставить("ВремяПереналадки", Новый ТаблицаЗначений);
	Результат.Вставить("ПараметрыМежоперационныхПереходов", Новый ТаблицаЗначений);
	Результат.Вставить("МежоперационныеПереходы",
		ИнициализироватьТаблицуМежоперационныеПереходы());
	Результат.Вставить("ДлительностиПереналадки", Новый ТаблицаЗначений);
	Результат.Вставить("КритерииОптимизации", Новый ТаблицаЗначений);
	Результат.Вставить("МетодыПостроенияОчередей", Новый ТаблицаЗначений);
	Результат.Вставить("НедоступноеВремяРасписания", Новый ТаблицаЗначений);
	Результат.Вставить("ВспомогательныеРабочиеЦентры", Новый ТаблицаЗначений);
	Результат.Вставить("ПараметрыМоделейПланирования", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаЗависимостейОпераций", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаРасписание",
		ИнициализироватьТаблицуРасписание());
	Результат.Вставить("ТаблицаОпераций", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаРабочихЦентров", Новый ТаблицаЗначений);
	Результат.Вставить("ДоступноеВремя", Новый ТаблицаЗначений);
	Результат.Вставить("ЗанятоеВремяПоСменам",
		ИнициализироватьТаблицуЗанятоеВремяПоСменам());
	Результат.Вставить("ОграниченияЗагрузкиРабочихЦентров", Новый ТаблицаЗначений);
	Результат.Вставить("ПроблемыРасписания", ИнициализироватьТаблицуПроблемырасписания());
	Результат.Вставить("РангиРабочихЦентров", Новый ТаблицаЗначений);
	
	ПараметрыРасчета = ПараметрыРасчетаПооперационногоРасписания();
	Для каждого Параметр Из ПараметрыРасчета Цикл
		Результат.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыПланирования(ПараметрыПланирования, Отказ)
	
	ПрочитатьОперацииДляПланирования(ПараметрыПланирования, Отказ);
	
	Если НЕ Отказ Тогда
		
		ИнициализироватьТаблицуОпераций(ПараметрыПланирования);
		
		ЗафиксироватьНеактуальныеОперации(ПараметрыПланирования);
		
		ИнициализироватьЗависимостиОпераций(ПараметрыПланирования);
		
		ИнициализироватьПараметрыМоделейПланирования(ПараметрыПланирования);
		
		ИнициализироватьСведенияОРабочихЦентрах(ПараметрыПланирования);
		
		ИнициализироватьПараметрыМежоперационныхПереходов(ПараметрыПланирования);
		
		ИнициализироватьДлительностиПереналадки(ПараметрыПланирования);
		
		ИнициализироватьДоступноеВремя(ПараметрыПланирования);
		
		ИнициализироватьРангиРабочихЦентров(ПараметрыПланирования);
		
		МодифицироватьТаблицуОпераций(ПараметрыПланирования);
		
		МодифицироватьТипЗначенияПараметровПланирования(ПараметрыПланирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПланированияПоДаннымМоделиПланирования(ПараметрыПланирования, Знач ПараметрыМодели)
	
	ЗаполнитьЗначенияСвойств(ПараметрыПланирования, ПараметрыМодели);
	МодифицироватьПараметрыПланированияПоСценариюПланирования(ПараметрыПланирования);
	
КонецПроцедуры

#Область Операции

Процедура ПрочитатьОперацииДляПланирования(ПараметрыПланирования, Отказ)
	
	НачатьТранзакцию();
	Попытка
		
		МенеджерБлокировок = РегистрыСведений.БлокировкиПооперационногоРасписания;
		МенеджерБлокировок.ЗаблокироватьПодразделение(
			ПараметрыПланирования.Подразделение,
			РежимБлокировкиДанных.Исключительный);
	
		ДанныеЗаблокированы = МенеджерБлокировок.РасписаниеПодразделенияЗаблокировано(ПараметрыПланирования.Подразделение);
		
		Если НЕ ДанныеЗаблокированы Тогда
			
			Операции = ОперацииДляПланирования(ПараметрыПланирования);
			
			Если ЗначениеЗаполнено(Операции) Тогда
				МенеджерБлокировок.ЗаблокироватьРасчетРасписания(
					ПараметрыПланирования.НомерСеанса,
					ПараметрыПланирования.НачалоСеанса,
					ПараметрыПланирования.Подразделение,
					ПараметрыПланирования.ТекущийПользователь,
					Операции);
				ПараметрыПланирования.Вставить("Операции", Операции);
			Иначе
				ЗафиксироватьОшибкуОтсутствуютДанныеДляПланирования(ПараметрыПланирования);
				Отказ = Истина;
			КонецЕсли;
			
		Иначе
			
			ЗафиксироватьОшибкуРасписаниеЗаблокировано(ПараметрыПланирования);
			Отказ = Истина;
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
 		ДобавитьЗаписьВЖурналРегистрации(
			УровеньЖурналаРегистрации.Ошибка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Отказ = Истина;
 		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ИнициализироватьТаблицуОпераций(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ОперацииМаршрутов.РабочийЦентрМаршрута ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ОперацииМаршрутов.РабочийЦентрМаршрута КАК Справочник.ВидыРабочихЦентров).ПараллельнаяЗагрузка
	|						ТОГДА ОперацииМаршрутов.ВремяШтучное + ОперацииМаршрутов.ВремяПЗ
	|					ИНАЧЕ (ОперацииМаршрутов.ВремяШтучное * ОперацииМаршрутов.Количество) + ОперацииМаршрутов.ВремяПЗ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ОперацииМаршрутов.РабочийЦентрМаршрута КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|					ТОГДА ОперацииМаршрутов.ВремяШтучное + ОперацииМаршрутов.ВремяПЗ
	|				ИНАЧЕ (ОперацииМаршрутов.ВремяШтучное * ОперацииМаршрутов.Количество) + ОперацииМаршрутов.ВремяПЗ
	|			КОНЕЦ
	|	КОНЕЦ КАК ВремяРазместить,
	|	ВЫБОР
	|		КОГДА ОперацииМаршрутов.РабочийЦентрМаршрута ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ОперацииМаршрутов.РабочийЦентрМаршрута КАК Справочник.ВидыРабочихЦентров).ПараллельнаяЗагрузка
	|						ТОГДА ОперацииМаршрутов.ВремяПЗ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ОперацииМаршрутов.РабочийЦентрМаршрута КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|					ТОГДА ОперацииМаршрутов.ВремяПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ВремяПЗПараллельнаяЗагрузка,
	|	ВЫБОР
	|		КОГДА ОперацииМаршрутов.РабочийЦентрМаршрута ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ОперацииМаршрутов.РабочийЦентрМаршрута
	|		ИНАЧЕ ВЫРАЗИТЬ(ОперацииМаршрутов.РабочийЦентрМаршрута КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра
	|	КОНЕЦ КАК ВидРабочегоЦентра,
	|	ОперацииМаршрутов.*
	|ИЗ
	|	РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутов
	|ГДЕ
	|	ОперацииМаршрутов.ИдентификаторОперации В(&Операции)");
	Запрос.УстановитьПараметр("Операции", ПараметрыПланирования.Операции);
	ПараметрыПланирования.Вставить("ТаблицаОпераций", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗафиксироватьНеактуальныеОперации(ПараметрыПланирования)
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.ТактПараллельнойЗагрузки,
	|	ПооперационноеРасписание.РабочийЦентр,
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ПооперационноеРасписание.МаршрутныйЛист
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.ИдентификаторОперации В(&Операции)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ");
	Запрос.УстановитьПараметр("Операции", ПараметрыПланирования.Операции);
	
	НеактуальныеОперации = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(НеактуальныеОперации) Тогда
		РегистрыСведений.ПооперационноеРасписание.ЗаписатьОперацииДляУдаления(
			ПараметрыПланирования.МодельРасписания, НеактуальныеОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция ОперацииДляПланирования(Знач ПараметрыПланирования)
	
	ИмеютсяИсключения = Ложь;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапросОперацииДляПланирования(Запрос, ПараметрыПланирования, ИмеютсяИсключения);
	ТаблицаОпераций = Запрос.Выполнить().Выгрузить();
	
	Если ИмеютсяИсключения Тогда
		
		Запрос.Текст = "ВЫБРАТЬ * ИЗ НедоступныеОперацииПоИсключению";
		Исключения = Запрос.Выполнить().Выгрузить();
		ПроверитьИсключенияОперацийПоПредшествованиям(ТаблицаОпераций, Исключения);
		
	КонецЕсли;
	
	Возврат ТаблицаОпераций.ВыгрузитьКолонку("ИдентификаторОперации");
	
КонецФункции

Процедура ИнициализироватьЗапросОперацииДляПланирования(Запрос, Знач ПараметрыПланирования, ИмеютсяИсключения)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаОперацииДляПланирования();
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	Запрос.УстановитьПараметр("Окончание", Границы.Окончание);
		
	ИмеютсяИсключения = НЕ ПараметрыПланирования.ОперативныйРасчет ИЛИ ПараметрыПланирования.ВремяНаРегистрациюВыполнения > 0;
	Если ИмеютсяИсключения Тогда
		Запрос.УстановитьПараметр("ИмеютсяИсключения", Истина);
		НачалоИсключения = ПараметрыПланирования.ОперативнаяОтметкаВремени - ПараметрыПланирования.ВремяНаРегистрациюВыполнения;
		ОкончаниеИсключения = ПараметрыПланирования.МоментПланирования - 1;
	Иначе
		Запрос.УстановитьПараметр("ИмеютсяИсключения", Ложь);
		НачалоИсключения = '00010101';
		ОкончаниеИсключения = '00010101';
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоИсключения", НачалоИсключения);
	Запрос.УстановитьПараметр("ОкончаниеИсключения", ОкончаниеИсключения);
	Запрос.УстановитьПараметр("ОперативнаяОтметкаВремени", ПараметрыПланирования.ОперативнаяОтметкаВремени);
	
	Запрос.УстановитьПараметр("ОтборПодразделение", ЗначениеЗаполнено(ПараметрыПланирования.Подразделение));
	Запрос.УстановитьПараметр("Подразделение", ПараметрыПланирования.Подразделение);
	
	Запрос.УстановитьПараметр("ОтборРаспоряжения", ЗначениеЗаполнено(ПараметрыПланирования.Распоряжения));
	Запрос.УстановитьПараметр("Распоряжения", ПараметрыПланирования.Распоряжения);
	
	Запрос.УстановитьПараметр("ОтборМаршрутныеЛисты", ЗначениеЗаполнено(ПараметрыПланирования.МаршрутныеЛисты));
	Запрос.УстановитьПараметр("МаршрутныеЛисты", ПараметрыПланирования.МаршрутныеЛисты);
	
КонецПроцедуры

Функция ТекстЗапросаОперацииДляПланирования()
	
	Результат =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацииМаршрутов.ИдентификаторОперации КАК ИдентификаторОперации
	|ПОМЕСТИТЬ ОперацииМаршрутов
	|ИЗ
	|	РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутов
	|ГДЕ
	|	ОперацииМаршрутов.ДатаЗапуска <= &Окончание
	|	И (НЕ &ОтборПодразделение
	|			ИЛИ ОперацииМаршрутов.Подразделение = &Подразделение)
	|	И (НЕ &ОтборРаспоряжения
	|			ИЛИ ОперацииМаршрутов.Распоряжение В (&Распоряжения))
	|	И (НЕ &ОтборМаршрутныеЛисты
	|			ИЛИ ОперацииМаршрутов.МаршрутныйЛист В (&МаршрутныеЛисты))
	|	И ОперацииМаршрутов.МаршрутныйЛист.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|	И ОперацииМаршрутов.СтатусВыполнения В (ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ПооперационноеРасписание.Подразделение КАК Подразделение,
	|	ПооперационноеРасписание.СтатусВыполнения,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало
	|ПОМЕСТИТЬ ОперацииРасписания
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.ИдентификаторОперации В
	|			(ВЫБРАТЬ
	|				ОперацииМаршрутов.ИдентификаторОперации
	|			ИЗ
	|				ОперацииМаршрутов)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И ПооперационноеРасписание.Вспомогательная = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.МаршрутныйЛист,
	|	ПооперационноеРасписание.Подразделение,
	|	ПооперационноеРасписание.СтатусВыполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииРасписания.ИдентификаторОперации
	|ПОМЕСТИТЬ НедоступныеОперацииПоВыполнению
	|ИЗ
	|	ОперацииРасписания КАК ОперацииРасписания
	|ГДЕ
	|	(ОперацииРасписания.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|			ИЛИ ОперацииРасписания.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацииРасписания.ИдентификаторОперации
	|ИЗ
	|	ОперацииРасписания КАК ОперацииРасписания
	|ГДЕ
	|	ОперацииРасписания.Начало < &ОперативнаяОтметкаВремени
	|	И ОперацииРасписания.СтатусВыполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|	И ОперацииРасписания.Подразделение.СпособПооперационногоУправления = ЗНАЧЕНИЕ(Перечисление.СпособыУправленияОперациями.РегистрацияОтклонений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацииРасписания.ИдентификаторОперации,
	|	ОперацииРасписания.МаршрутныйЛист,
	|	ОперацииРасписания.Начало
	|ПОМЕСТИТЬ НедоступныеОперацииПоИсключению
	|ИЗ
	|	ОперацииРасписания КАК ОперацииРасписания
	|ГДЕ
	|	&ИмеютсяИсключения
	|	И ОперацииРасписания.Начало МЕЖДУ &НачалоИсключения И &ОкончаниеИсключения
	|	И НЕ ОперацииРасписания.ИдентификаторОперации В
	|				(ВЫБРАТЬ
	|					НедоступныеОперацииПоВыполнению.ИдентификаторОперации
	|				ИЗ
	|					НедоступныеОперацииПоВыполнению)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НедоступныеОперацииПоВыполнению.ИдентификаторОперации
	|ПОМЕСТИТЬ НедоступныеОперации
	|ИЗ
	|	НедоступныеОперацииПоВыполнению КАК НедоступныеОперацииПоВыполнению
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НедоступныеОперацииПоИсключению.ИдентификаторОперации
	|ИЗ
	|	НедоступныеОперацииПоИсключению КАК НедоступныеОперацииПоИсключению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииМаршрутов.ИдентификаторОперации КАК ИдентификаторОперации
	|ИЗ
	|	ОперацииМаршрутов КАК ОперацииМаршрутов
	|ГДЕ
	|	НЕ ОперацииМаршрутов.ИдентификаторОперации В
	|				(ВЫБРАТЬ
	|					НедоступныеОперации.ИдентификаторОперации
	|				ИЗ
	|					НедоступныеОперации)";
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьИсключенияОперацийПоПредшествованиям(ТаблицаОпераций, Знач Исключения)
	
	ТаблицаОпераций.Индексы.Добавить("ИдентификаторОперации");
	Исключения.Сортировать("МаршрутныйЛист, Начало");
	
	Запрос = Новый Запрос(ТекстЗапросаЗависисмостиОпераций());
	Запрос.УстановитьПараметр("МаршрутныеЛисты", Исключения.ВыгрузитьКолонку("МаршрутныйЛист"));
	Запрос.УстановитьПараметр("ИдентификаторыОпераций", Новый Массив);
	Зависимости = Запрос.Выполнить().Выгрузить();
	Зависимости.Индексы.Добавить("ИдентификаторОперации");
	
	СтруктураПоиска = Новый Структура("ИдентификаторОперации");
	Для каждого СтрокаИсключение Из Исключения Цикл
		
		СтруктураПоиска.ИдентификаторОперации = СтрокаИсключение.ИдентификаторОперации;
		СписокСтрок = Зависимости.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЗависимость Из СписокСтрок Цикл
			
			СтрокаПоиска = ТаблицаОпераций.Найти(СтрокаЗависимость.ИдентификаторОперацииПредшествующий, "ИдентификаторОперации");
			Если НЕ СтрокаПоиска = Неопределено Тогда
				НоваяСтрока = ТаблицаОпераций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсключение);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПараметры

Процедура ИнициализироватьПараметрыМоделейПланирования(ПараметрыПланирования)

	Если ЗначениеЗаполнено(ПараметрыПланирования.МоделиПланирования) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаМоделей.МодельПланирования,
		|	ТаблицаМоделей.СценарийПланирования,
		|	ТаблицаМоделей.ЗадействоватьРезервДоступности
		|ПОМЕСТИТЬ ТаблицаМоделей
		|ИЗ
		|	&ТаблицаМоделей КАК ТаблицаМоделей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаМоделей.МодельПланирования КАК МодельПланирования,
		|	ТаблицаМоделей.СценарийПланирования КАК СценарийПланирования,
		|	ТаблицаМоделей.ЗадействоватьРезервДоступности КАК ЗадействоватьРезервДоступности,
		|	МоделиПооперационногоПланирования.ВесМинимизироватьВремя,
		|	МоделиПооперационногоПланирования.ВесМинимизироватьСтоимость,
		|	МоделиПооперационногоПланирования.СпособЗагрузки
		|ИЗ
		|	ТаблицаМоделей КАК ТаблицаМоделей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МоделиПооперационногоПланирования КАК МоделиПооперационногоПланирования
		|		ПО ТаблицаМоделей.МодельПланирования = МоделиПооперационногоПланирования.Ссылка");
		Запрос.УстановитьПараметр("ТаблицаМоделей", ПараметрыПланирования.МоделиПланирования);
		
		Параметры = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Параметры = Новый ТаблицаЗначений;
		Параметры.Колонки.Добавить("МодельПланирования", Новый ОписаниеТипов("СправочникСсылка.МоделиПооперационногоПланирования"));
		Параметры.Колонки.Добавить("СценарийПланирования", Новый ОписаниеТипов("СправочникСсылка.СценарииПооперационногоПланирования"));
		Параметры.Колонки.Добавить("ЗадействоватьРезервДоступности", Новый ОписаниеТипов("Булево"));
		Параметры.Колонки.Добавить("ВесМинимизироватьВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
		Параметры.Колонки.Добавить("ВесМинимизироватьСтоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
		Параметры.Колонки.Добавить("СпособЗагрузки", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыЗагрузкиВидаРабочегоЦентра"));
		
		НоваяСтрока = Параметры.Добавить();
		НоваяСтрока.ВесМинимизироватьВремя = 1;
		
	КонецЕсли;
	
	ПараметрыПланирования.Вставить("ПараметрыМоделейПланирования", Параметры);
	
КонецПроцедуры

// Инициализирует таблицу для хранения ошибок и предупреждений, зафиксированных в процессе расчета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица с колонками:
//		* НомерСтроки - Число - номер строки.
//		* Категория - ПеречислениеСсылка.КатегорииПроблемПооперационногоРасписания - категория проблемы.
//		* Тип - Число - тип проблемы, где 1 - предупреждение, 2 - ошибка.
//		* Текст - Строка - описание проблемы для пользователя.
//		* ЧтоДелатьДальше - Строка - рекомендации по исправлению проблемы.
//		* Свойства - Структура - произвольные данные, относящиеся к проблеме.
//		* Ключ - Произвольный - значение, однозначно идентифицирующее данную проблему. Используется для
//			исключения многократной регистрации идентичных проблем.
//
Функция ИнициализироватьТаблицуПроблемыРасписания()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	Результат.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииПроблемПооперационногоРасписания"));
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	Результат.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	Результат.Колонки.Добавить("ЧтоДелатьДальше", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
	Результат.Колонки.Добавить("Свойства", Новый ОписаниеТипов("Структура"));
	Результат.Колонки.Добавить("Ключ");
	
	Результат.Индексы.Добавить("Категория");
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьСведенияОРабочихЦентрах(ПараметрыПланирования)
	
	ИнициализироватьВспомогательныеРабочиеЦентры(ПараметрыПланирования);
	ИнициализироватьРабочиеЦентры(ПараметрыПланирования);
	ИнициализироватьОграниченияЗагрузкиРабочихЦентров(ПараметрыПланирования);
	
КонецПроцедуры	//ПараметрыПланированияПодготовитьСведенияОРабочихЦентрах

Процедура ИнициализироватьВспомогательныеРабочиеЦентры(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистПроизводстваВспомогательныеРабочиеЦентры.КлючСвязиОперации КАК ИдентификаторОперации,
	|	МаршрутныйЛистПроизводстваВспомогательныеРабочиеЦентры.РабочийЦентр КАК РабочийЦентр
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВспомогательныеРабочиеЦентры КАК МаршрутныйЛистПроизводстваВспомогательныеРабочиеЦентры
	|ГДЕ
	|	МаршрутныйЛистПроизводстваВспомогательныеРабочиеЦентры.Ссылка В(&МаршрутныеЛисты)");
	
	Запрос.УстановитьПараметр("МаршрутныеЛисты",
		ПараметрыПланирования.ТаблицаОпераций.ВыгрузитьКолонку("МаршрутныйЛист"));
		
	ПараметрыПланирования.Вставить("ВспомогательныеРабочиеЦентры", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ИнициализироватьРабочиеЦентры(ПараметрыПланирования)
	
	МассивРЦиВРЦ = ПараметрыПланирования.ТаблицаОпераций.ВыгрузитьКолонку("РабочийЦентрМаршрута");
	Для каждого Строка Из ПараметрыПланирования.ВспомогательныеРабочиеЦентры Цикл
		МассивРЦиВРЦ.Добавить(Строка.РабочийЦентр);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр
	|ПОМЕСТИТЬ ВТ_РабочиеЦентры
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.Ссылка В(&МассивРЦиВРЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РабочиеЦентры.Ссылка
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.ВидРабочегоЦентра В(&МассивРЦиВРЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение КАК Подразделение,
	|	РабочиеЦентры.ВидРабочегоЦентра,
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
	|	РабочиеЦентры.КоэффициентВремениРаботы,
	|	РабочиеЦентры.РасценкаРабота,
	|	РабочиеЦентры.РасценкаПереналадка,
	|	РабочиеЦентры.МаксимальнаяЗагрузка,
	|	РабочиеЦентры.ВидРабочегоЦентра.ПараллельнаяЗагрузка КАК ПараллельнаяЗагрузка,
	|	ВЫБОР
	|		КОГДА РабочиеЦентры.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СинхроннаяЗагрузка
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|ГДЕ
	|	РабочиеЦентры.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_РабочиеЦентры.РабочийЦентр КАК Ссылка
	|			ИЗ
	|				ВТ_РабочиеЦентры)");
	
	Запрос.УстановитьПараметр("МассивРЦиВРЦ", МассивРЦиВРЦ);
	ТаблицаРабочихЦентров = Запрос.Выполнить().Выгрузить();
	
	ДобавитьИндексыВТаблицуРабочихЦентров(ТаблицаРабочихЦентров);
	
	ПараметрыПланирования.Вставить("ТаблицаРабочихЦентров", ТаблицаРабочихЦентров);
	ПараметрыПланирования.Вставить("МассивРабочихЦентров", 	ТаблицаРабочихЦентров.ВыгрузитьКолонку("РабочийЦентр"));
	
КонецПроцедуры

Процедура ИнициализироватьОграниченияЗагрузкиРабочихЦентров(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.Ссылка КАК ВидРабочегоЦентра,
	|	ВидыРабочихЦентров.РезервДоступности,
	|	100 - ВидыРабочихЦентров.РезервДоступности КАК ПроцентМаксЗагрузки
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РабочиеЦентры.ВидРабочегоЦентра
	|			ИЗ
	|				Справочник.РабочиеЦентры КАК РабочиеЦентры
	|			ГДЕ
	|				РабочиеЦентры.Ссылка В (&РабочиеЦентры))");
	Запрос.УстановитьПараметр("РабочиеЦентры", ПараметрыПланирования.МассивРабочихЦентров);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ДобавитьИндексыВТаблицуОграниченияЗагрузкиРабочихЦентров(Результат);
	
	ПараметрыПланирования.Вставить("ОграниченияЗагрузкиРабочихЦентров", Результат);
	
КонецПроцедуры

Процедура ИнициализироватьЗависимостиОпераций(ПараметрыПланирования)
	
	// Зависимости операций.
	
	Запрос = Новый Запрос(ТекстЗапросаЗависисмостиОпераций());
	
	Запрос.УстановитьПараметр("МаршрутныеЛисты",
		ПараметрыПланирования.ТаблицаОпераций.ВыгрузитьКолонку("МаршрутныйЛист"));
	Запрос.УстановитьПараметр("ИдентификаторыОпераций",
		ПараметрыПланирования.ТаблицаОпераций.ВыгрузитьКолонку("ИдентификаторОперации"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДобавитьИндексыВТаблицуЗависимостейОпераций(Результат);
	
	ПараметрыПланирования.Вставить("ТаблицаЗависимостейОпераций", Результат);
	
КонецПроцедуры

Функция ТекстЗапросаЗависисмостиОпераций()
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ОперацииМаршрутовПроизводства.ИдентификаторОперации,
	|	ОперацииМаршрутовПроизводства.НомерОперации КАК НомерОперации,
	|	ОперацииМаршрутовПроизводства.НомерСледующейОперации КАК НомерСледующейОперации
	|ПОМЕСТИТЬ ОперацииМаршрутов
	|ИЗ
	|	РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|ГДЕ
	|	ОперацииМаршрутовПроизводства.МаршрутныйЛист В(&МаршрутныеЛисты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист,
	|	НомерОперации,
	|	НомерСледующейОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииМаршрутовПредшествующие.МаршрутныйЛист,
	|	ОперацииМаршрутовПредшествующие.ИдентификаторОперации КАК ИдентификаторОперацииПредшествующий,
	|	ВЫБОР
	|		КОГДА ОперацииМаршрутовПредшествующие.ИдентификаторОперации В (&ИдентификаторыОпераций)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПредшествующаяОперацияУчествуетВРасчете,
	|	ОперацииМаршрутов.ИдентификаторОперации,
	|	ВЫБОР
	|		КОГДА ОперацииМаршрутов.ИдентификаторОперации В (&ИдентификаторыОпераций)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОперацияУчествуетВРасчете
	|ИЗ
	|	ОперацииМаршрутов КАК ОперацииМаршрутовПредшествующие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОперацииМаршрутов КАК ОперацииМаршрутов
	|		ПО ОперацииМаршрутовПредшествующие.МаршрутныйЛист = ОперацииМаршрутов.МаршрутныйЛист
	|			И ОперацииМаршрутовПредшествующие.НомерСледующейОперации = ОперацииМаршрутов.НомерОперации
	|ГДЕ
	|	ОперацииМаршрутовПредшествующие.НомерСледующейОперации <> 0";
	
КонецФункции

Функция СвязанныеОперацииНеУчаствующиеВРасчете(Знач ТаблицаЗависимостейОпераций)
	
	Результат = Новый Массив;
	
	Для каждого Строка Из ТаблицаЗависимостейОпераций Цикл
		
		Если НЕ Строка.ОперацияУчествуетВРасчете
			И Результат.Найти(Строка.ИдентификаторОперации) = Неопределено Тогда
			Результат.Добавить(Строка.ИдентификаторОперации);
		КонецЕсли;
		
		Если НЕ Строка.ПредшествующаяОперацияУчествуетВРасчете
			И Результат.Найти(Строка.ИдентификаторОперацииПредшествующий) = Неопределено Тогда
			Результат.Добавить(Строка.ИдентификаторОперацииПредшествующий);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОтсутствующихОпераций(Операции)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ПооперационноеРасписание.РабочийЦентр КАК РабочийЦентрНазначенный,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	МАКСИМУМ(ПооперационноеРасписание.Окончание) КАК Окончание
	|ПОМЕСТИТЬ ДанныеРасписания
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.ИдентификаторОперации В (&Операции)
	|	И ПооперационноеРасписание.Вспомогательная = ЛОЖЬ
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.ИдентификаторОперации,
	|	ПооперационноеРасписание.РабочийЦентр
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеРасписания.ИдентификаторОперации,
	|	ДанныеРасписания.Начало,
	|	ДанныеРасписания.Окончание,
	|	ДанныеРасписания.РабочийЦентрНазначенный,
	|	ОперацииМаршрутовПроизводства.*
	|ИЗ
	|	ДанныеРасписания КАК ДанныеРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|		ПО ДанныеРасписания.ИдентификаторОперации = ОперацииМаршрутовПроизводства.ИдентификаторОперации");
	Запрос.УстановитьПараметр("Операции", Операции);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ИнициализироватьПараметрыМежоперационныхПереходов(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМежоперационныхПереходов.Подразделение,
	|	ПараметрыМежоперационныхПереходов.ВидРабочегоЦентраИсточник КАК Источник,
	|	ПараметрыМежоперационныхПереходов.ВидРабочегоЦентраПриемник КАК Приемник,
	|	ВЫБОР
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода * 60
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода * 3600
	|		КОГДА ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|				ИЛИ ПараметрыМежоперационныхПереходов.ВремяПереходаЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ПараметрыМежоперационныхПереходов.ВремяПерехода * 86400
	|		ИНАЧЕ ПараметрыМежоперационныхПереходов.ВремяПерехода
	|	КОНЕЦ КАК Время
	|ИЗ
	|	РегистрСведений.ПараметрыМежоперационныхПереходов КАК ПараметрыМежоперационныхПереходов
	|ГДЕ
	|	ПараметрыМежоперационныхПереходов.Подразделение В(&Подразделения)");
	
	Запрос.УстановитьПараметр("Подразделения", ПодразделенияТаблицыОпераций(ПараметрыПланирования));
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДобавитьИндексыВТаблицуПараметрыМежоперационныхПереходов(Результат);
	ПараметрыПланирования.Вставить("ПараметрыМежоперационныхПереходов", Результат);
	
КонецПроцедуры

Процедура ИнициализироватьДлительностиПереналадки(ПараметрыПланирования)
	
	МассивВидыРабочихЦентров = ПараметрыПланирования.ТаблицаРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДлительностьПереналадки.ВидРабочегоЦентра,
	|	ДлительностьПереналадки.ТекущийВариантНаладки,
	|	ДлительностьПереналадки.СледующийВариантНаладки,
	|	ВЫБОР
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки * 60
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки * 3600
	|		КОГДА ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|				ИЛИ ДлительностьПереналадки.ВидРабочегоЦентра.ЕдиницаВремениПереналадки = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ДлительностьПереналадки.ВремяПереналадки * 86400
	|		ИНАЧЕ ДлительностьПереналадки.ВремяПереналадки
	|	КОНЕЦ КАК Время
	|ИЗ
	|	РегистрСведений.ДлительностьПереналадки КАК ДлительностьПереналадки
	|ГДЕ
	|	ДлительностьПереналадки.ВидРабочегоЦентра В(&ВидыРабочихЦентров)");
	
	Запрос.УстановитьПараметр("ВидыРабочихЦентров", МассивВидыРабочихЦентров);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДобавитьИндексыВТаблицуДлительностиПереналадки(Результат);
	ПараметрыПланирования.Вставить("ДлительностиПереналадки", Результат);
	
КонецПроцедуры

Процедура ИнициализироватьДоступноеВремя(ПараметрыПланирования)
	
	ДоступноеВремя = ДоступноеВремяОборудования(ПараметрыПланирования);
	ЗаполнитьДанныеПредшествованияСледованияДоступногоВремени(ПараметрыПланирования, ДоступноеВремя);
	
	СортироватьТаблицуДоступноеВремя(ДоступноеВремя);
	ДобавитьИндексыВТаблицуДоступноеВремя(ДоступноеВремя);
	
	ПараметрыПланирования.Вставить("ДоступноеВремя", ДоступноеВремя);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуРасписание()
	
	Результат = Новый ТаблицаЗначений;
	
	ЗаполнитьСтруктуруТаблицыПоМетаданнымРегистра("РегистрыСведений", "ПооперационноеРасписание", Результат);
	
	ДобавитьИндексыВТаблицуРасписание(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтруктуруТаблицыПоМетаданнымРегистра(Знач ТипРегистра, Знач ИмяРегистра, Таблица)
	
	Основание = Метаданные[ТипРегистра][ИмяРегистра];
	
	Для каждого Измерение Из Основание.Измерения Цикл
		Если Таблица.Колонки.Найти(Измерение.Имя) = Неопределено Тогда
			Таблица.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
		КонецЕсли;
	КонецЦикла;
	Для каждого Ресурс Из Основание.Ресурсы Цикл
		Если Таблица.Колонки.Найти(Ресурс.Имя) = Неопределено Тогда
			Таблица.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
		КонецЕсли;
	КонецЦикла;
	Для каждого Реквизит Из Основание.Реквизиты Цикл
		Если Таблица.Колонки.Найти(Реквизит.Имя) = Неопределено Тогда
			Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуЗанятоеВремяПоСменам()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	Результат.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	Результат.Колонки.Добавить("НачалоСмены", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ВремяЗанято", ОписаниеТиповВремяОперацииУвеличинное());
	Результат.Колонки.Добавить("ВремяСмены", ОписаниеТиповВремяОперацииУвеличинное());
	
	ДобавитьИндексыВТаблицуЗанятоеВремяПоСменам(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура МодифицироватьТаблицуОпераций(ПараметрыПланирования)
	
	ДобавитьВТаблицуОперацийСлужебныеКолонки(ПараметрыПланирования);
	ДобавитьИндексыВТаблицуОпераций(ПараметрыПланирования.ТаблицаОпераций);
	
	ИсправитьТаблицуОперацийНаОснованииОтсутствующихОпераций(ПараметрыПланирования);
	ЗаполнитьЗависимостьОтПредшествующихВТаблицеОпераций(ПараметрыПланирования);
	ИнициализироватьПриоритетыМаршрутовОпераций(ПараметрыПланирования);
	
КонецПроцедуры

Процедура ДобавитьВТаблицуОперацийСлужебныеКолонки(ПараметрыПланирования)
	
	ТаблицаОпераций = ПараметрыПланирования.ТаблицаОпераций;
	
	ТаблицаОпераций.Колонки.Добавить("ПриоритетМаршрута", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОпераций.Колонки.Добавить("Размещена", Новый ОписаниеТипов("Булево"));
	ТаблицаОпераций.Колонки.Добавить("Размещать", Новый ОписаниеТипов("Булево"));
	ТаблицаОпераций.Колонки.Добавить("ЗависитОтПредшествующих", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОпераций.ЗаполнитьЗначения(Истина, "Размещать");
	
КонецПроцедуры

Процедура МодифицироватьТипЗначенияПараметровПланирования(ПараметрыПланирования)
	
	МодифицироватьТипЗначенияРабочихЦентров(ПараметрыПланирования);
	
КонецПроцедуры

Процедура МодифицироватьТипЗначенияРабочихЦентров(ПараметрыПланирования)
	
	Если СценарииИспользуются(ПараметрыПланирования) Тогда
		
		ДобавляемыеТипы = "Строка";
		КвалификаторыСтроки = КвалификаторыСтрокиДополнительныйРабочийЦентр();
		
		Для каждого Параметр Из ПараметрыПланирования Цикл
			Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
				Для каждого Колонка Из Параметр.Значение.Колонки Цикл
					
					Если Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.РабочиеЦентры"))
						И НЕ Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
						
						ДобавитьТипВТипЗначенияКолонкиТаблицы(
							Параметр.Значение, Колонка.Имя, ДобавляемыеТипы,, КвалификаторыСтроки);
							
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СценарииИспользуются(Знач ПараметрыПланирования)
	
	Результат = Ложь;
	
	Для каждого Строка Из ПараметрыПланирования.ПараметрыМоделейПланирования Цикл
		Если ЗначениеЗаполнено(Строка.СценарийПланирования) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьРангиРабочихЦентров(ПараметрыПланирования)
	
	Ранги = ПараметрыПланирования.ТаблицаОпераций.Скопировать(, "ВидРабочегоЦентра, ВремяРазместить, Загрузка");
	Для каждого Строка Из Ранги Цикл
		Если ЗначениеЗаполнено(Строка.Загрузка) Тогда
			Строка.ВремяРазместить = Строка.ВремяРазместить * Строка.Загрузка;
		КонецЕсли;
	КонецЦикла;
	
	Ранги.Свернуть("ВидРабочегоЦентра", "ВремяРазместить");
	Ранги.Колонки.ВремяРазместить.Имя = "ВремяЗагрузка";
	Ранги.Колонки.Добавить("ВремяДоступно", ОписаниеТиповВремяОперацииУвеличинное());
	Ранги.Колонки.Добавить("Ранг", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 5)));
	
	РассчитатьРангиРабочихЦентров(ПараметрыПланирования, Ранги);
	
	ДобавитьИндексыВТаблицуРангиРабочихЦентров(Ранги);

	ПараметрыПланирования.Вставить("РангиРабочихЦентров", Ранги);
	
КонецПроцедуры

Процедура РассчитатьРангиРабочихЦентров(Знач ПараметрыПланирования, Ранги)
	
	ВремяДоступно = ПараметрыПланирования.ЗанятоеВремяПоСменам.Скопировать(, "ВидРабочегоЦентра, ВремяЗанято, ВремяСмены");
	ВремяДоступно.Свернуть("ВидРабочегоЦентра", "ВремяЗанято, ВремяСмены");
	ВремяДоступно.Индексы.Добавить("ВидРабочегоЦентра");
	
	Для каждого Строка Из Ранги Цикл
		
		СтрокаПоиска = ВремяДоступно.Найти(Строка.ВидРабочегоЦентра, "ВидРабочегоЦентра");
		Если НЕ СтрокаПоиска = Неопределено Тогда
			
			Строка.ВремяДоступно = СтрокаПоиска.ВремяСмены - СтрокаПоиска.ВремяЗанято;
			
			Если НЕ Строка.ВремяДоступно = 0 Тогда
				Строка.Ранг = Строка.ВремяЗагрузка/Строка.ВремяДоступно;
			Иначе
				Строка.Ранг = 0;
			КонецЕсли;
			
		Иначе
			Строка.Ранг = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Ранги.Сортировать("Ранг Возр");
	
КонецПроцедуры

Процедура ИнициализироватьПриоритетыМаршрутовОпераций(ПараметрыПланирования)
	
	Приоритеты = ПриоритетыМаршутовОпераций(ПараметрыПланирования);
	
	УсловиеПоиска = Новый Структура("МаршрутныйЛист");
	Для каждого Строка Из Приоритеты Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
		СтрокиПоиска = ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(УсловиеПоиска);
		Для каждого Операция Из СтрокиПоиска Цикл
			Операция.ПриоритетМаршрута = Строка.Приоритет;
		КонецЦикла;
		
	КонецЦикла;
	
	Приоритеты.Свернуть("Приоритет");
	ПараметрыПланирования.Вставить("ПриоритетыМаршрутов", Приоритеты.ВыгрузитьКолонку("Приоритет"));
	
КонецПроцедуры

Функция ПриоритетыМаршутовОпераций(ПараметрыПланирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Ссылка КАК МаршрутныйЛист,
	|	МаршрутныйЛистПроизводства.Начало,
	|	МаршрутныйЛистПроизводства.Окончание,
	|	МаршрутныйЛистПроизводства.Распоряжение.Приоритет.РеквизитДопУпорядочивания КАК РаспоряжениеПриоритет
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка В(&МаршрутныеЛисты)");
	Запрос.УстановитьПараметр("МаршрутныеЛисты", ПараметрыПланирования.ТаблицаОпераций.ВыгрузитьКолонку("МаршрутныйЛист"));
	Маршруты = Запрос.Выполнить().Выгрузить();
	
	Маршруты.Колонки.Добавить("Категория", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	Маршруты.Колонки.Добавить("Напряженность", Новый ОписаниеТипов("Число"));
	Маршруты.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	РассчитатКатегориюИНапряженностьМаршрутов(ПараметрыПланирования, Маршруты);
	Маршруты.Сортировать("Категория Возр, Напряженность Убыв, Начало Возр, РаспоряжениеПриоритет Возр");
	РассчитатьПриоритетМаршрутов(Маршруты);
	
	Возврат Маршруты;
	
КонецФункции

Процедура РассчитатКатегориюИНапряженностьМаршрутов(Знач ПараметрыПланирования, Маршруты)
	
	Для каждого Строка Из Маршруты Цикл
		
		Если Строка.Окончание <= ПараметрыПланирования.МоментПланирования Тогда
			
			Строка.Категория = 1;
			Строка.Напряженность = ПараметрыПланирования.МоментПланирования - Строка.Окончание;
			
		ИначеЕсли Строка.Начало < ПараметрыПланирования.МоментПланирования Тогда
			
			Строка.Категория = 2;
			ОстатокОпераций = ВремяНеразмещенныхОперацийМаршрута(ПараметрыПланирования, Строка.МаршрутныйЛист);
			ОстатокВремени = Строка.Окончание - ПараметрыПланирования.МоментПланирования;
			Строка.Напряженность = ОстатокОпераций/ОстатокВремени;
			
		Иначе
			
			Строка.Категория = 3;
			Строка.Напряженность = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВремяНеразмещенныхОперацийМаршрута(Знач ПараметрыПланирования, Знач МаршутныйЛист)
	
	Результат = 0;
	
	УсловиеПоиска = Новый Структура("МаршрутныйЛист", МаршутныйЛист);
	СтрокиПоиска = ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(УсловиеПоиска);
	Для каждого Строка Из СтрокиПоиска Цикл
		Результат = Результат + Строка.ВремяРазместить;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьПриоритетМаршрутов(Маршруты)
	
	КолМаршрутов = Маршруты.Количество();
	
	Если КолМаршрутов > 0 Тогда
		КолПартий = Окр(Log(КолМаршрутов));
		КолПартий = ?(КолПартий > 0, КолПартий, 1);
	Иначе
		КолПартий = 1;
	КонецЕсли;
	
	РазмерПартии = Окр(КолМаршрутов/КолПартий);
	
	СчМаршрутов = 0;
	НомерПартии = 1;
	Для каждого Строка Из Маршруты Цикл
		Строка.Приоритет = НомерПартии;
		СчМаршрутов = СчМаршрутов + 1;
		
		Если СчМаршрутов = РазмерПартии Тогда
			СчМаршрутов = 0;
			НомерПартии = НомерПартии + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуМежоперационныеПереходы()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИдентификаторОперации");
	Результат.Колонки.Добавить("ВремяПерехода");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДоступноеВремяРабочихЦентров

Функция ДоступноеВремяОборудования(ПараметрыПланирования)
	
	ДоступноеВремя = ИнициализироватьДоступноеВремяОборудования();
	
	ФондВремени = ФондВремениОборудования(ПараметрыПланирования);
	ВыборкаРЦ = ФондВремени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРЦ.Следующий() Цикл
		ВыборкаСмена = ВыборкаРЦ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСмена.Следующий() Цикл
			
			Если НЕ ВыборкаСмена.ПараллельнаяЗагрузка Тогда
				ВремяЗанято = ВыборкаСмена.ВремяЗанято;
				ВремяСмены = ВыборкаСмена.ВремяСмены;
			Иначе
				ВремяЗанято = ВыборкаСмена.ВремяЗанятоПараллельнаяЗагрузка;
				ВремяСмены = ВыборкаСмена.ВремяСмены * ВыборкаСмена.МаксимальнаяЗагрузка;
			КонецЕсли;
			ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ВыборкаСмена, ВремяЗанято, ВремяСмены);
			
			Если ВремяЗанято < ВремяСмены Тогда
				Выборка = ВыборкаСмена.Выбрать();
				
				Если НЕ ВыборкаСмена.ПараллельнаяЗагрузка Тогда
					ЗаполнитьДоступноеВремяСмены(ДоступноеВремя, Выборка, ВыборкаСмена.НачалоСмены, ВыборкаСмена.ОкончаниеСмены);
				Иначе
					ЗаполнитьДоступноеВремяСменыПараллельнаяЗагрузка(ДоступноеВремя, Выборка, ВыборкаСмена);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДоступноеВремя;
	
КонецФункции

Процедура ЗаполнитьДоступноеВремяСмены(ДоступноеВремя, Выборка, НачалоСмены, ОкончаниеСмены)
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Если НЕ ЗначениеЗаполнено(Выборка.ЗанятоНачало) Тогда
			ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Выборка.НачалоСмены, Выборка.ОкончаниеСмены, , Выборка.ВремяСмены);
		Иначе
			Если НЕ Выборка.НачалоСмены = Выборка.ЗанятоНачало Тогда
				ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Выборка.НачалоСмены, Выборка.ЗанятоНачало);
			КонецЕсли;
			Если НЕ Выборка.ЗанятоОкончание = Выборка.ОкончаниеСмены Тогда
				ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Выборка.ЗанятоОкончание, Выборка.ОкончаниеСмены);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Начало = НачалоСмены;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЗанятоНачало = Начало Тогда
				Начало = Выборка.ЗанятоОкончание;
				Продолжить;
			Иначе
				ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Начало, Выборка.ЗанятоНачало);
				Начало = Выборка.ЗанятоОкончание;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Начало = ОкончаниеСмены Тогда
			Выборка.Сбросить();
			Выборка.Следующий();
			ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, Начало, ОкончаниеСмены);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоступноеВремяСменыПараллельнаяЗагрузка(ДоступноеВремя, Выборка, ВыборкаСмена)
	
	Выборка.Следующий();
	ЗафиксироватьДоступноеВремя(
		ДоступноеВремя,
		Выборка,
		ВыборкаСмена.НачалоСмены,
		ВыборкаСмена.ОкончаниеСмены,
		ВыборкаСмена.МаксимальнаяЗагрузка,
		ВыборкаСмена.ВремяСмены);
	
	ЕстьЗанятыеИнтервалы = Выборка.ВремяЗанятоПараллельнаяЗагрузка > 0;
	
	Если ЕстьЗанятыеИнтервалы Тогда
		
		ДобавленнаяСтрока = ПоследняяСтрокаТаблицы(ДоступноеВремя);
		ДобавленнаяСтрока.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		ДобавленнаяСтрока.ПолноеВремяСинхроннойЗагрузкиБезПереналадки = 0;
		ДобавленнаяСтрока.НачалоСинхроннойЗагрузки = '00010101';
		
		СписокСвойств = "ВариантНаладки, ПолноеВремяСинхроннойЗагрузкиБезПереналадки, НачалоСинхроннойЗагрузки";
		
		ДоступныеИнтервалы = Новый Массив;
		ДоступныеИнтервалы.Добавить(ДобавленнаяСтрока);
		
		ИнтервалыИсключить = Новый Массив;
		
		Выборка.Сбросить();
	    Пока Выборка.Следующий() Цикл
			
			ЗанятоНачало = Выборка.ЗанятоНачало;
			ЗанятоОкончание = Выборка.ЗанятоОкончание;
			
			ТекущийИндекс = 0;
			Пока ТекущийИндекс <= ДоступныеИнтервалы.ВГраница() Цикл
				
				ДоступныйИнтервал = ДоступныеИнтервалы[ТекущийИндекс];
				
				Если ЗанятоНачало = ДоступныйИнтервал.Начало И ЗанятоОкончание = ДоступныйИнтервал.Окончание Тогда
					
					// Занятый интервал идентичен доступному.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						ДоступноеВремя.Удалить(ДоступныйИнтервал);
					Иначе
						ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
						ЗаполнитьЗначенияСвойств(ДоступныйИнтервал, Выборка, СписокСвойств);
					КонецЕсли;
					Прервать;
					
				ИначеЕсли ЗанятоНачало = ДоступныйИнтервал.Начало Тогда
					
					// Занятый интервал прижат к левой границе доступного.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						Если ЗанятоОкончание >= ДоступныйИнтервал.Окончание Тогда
							ЗанятоНачало = ДоступныйИнтервал.Окончание;
							ДоступноеВремя.Удалить(ДоступныйИнтервал);
						Иначе
							ДоступныйИнтервал.Начало = ЗанятоОкончание;
							ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
							Прервать;
						КонецЕсли;
					Иначе
						Если ЗанятоОкончание >= ДоступныйИнтервал.Окончание Тогда
							ЗанятоНачало = ДоступныйИнтервал.Окончание;
							ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
							ЗаполнитьЗначенияСвойств(ДоступныйИнтервал, Выборка, СписокСвойств);
							ТекущийИндекс = ТекущийИндекс + 1;
						Иначе
							ЗафиксироватьДоступноеВремя(ДоступноеВремя, ДоступныйИнтервал, ЗанятоОкончание, ДоступныйИнтервал.Окончание, ДоступныйИнтервал.ДоступнаяЗагрузка);
							ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицы(ДоступноеВремя));
							
							ДоступныйИнтервал.Окончание = ЗанятоОкончание;
							ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
							ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
							ЗаполнитьЗначенияСвойств(ДоступныйИнтервал, Выборка, СписокСвойств);
							Прервать;
						КонецЕсли;
					КонецЕсли;
						
				ИначеЕсли ЗанятоНачало < ДоступныйИнтервал.Окончание И ЗанятоОкончание >= ДоступныйИнтервал.Окончание Тогда
					
					// Занятый интервал прижат к правой границе доступного.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						ОкончаниеДоИзменения = ДоступныйИнтервал.Окончание;
						ДоступныйИнтервал.Окончание = ЗанятоНачало;
						ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
						ТекущийИндекс = ТекущийИндекс + 1;
					Иначе
						ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, ЗанятоНачало, ДоступныйИнтервал.Окончание, ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицы(ДоступноеВремя));
						
						ТекущийИндекс = ТекущийИндекс + 2;
						
						ОкончаниеДоИзменения = ДоступныйИнтервал.Окончание;
						ДоступныйИнтервал.Окончание = ЗанятоНачало;
						ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
					КонецЕсли;
					Если ЗанятоОкончание > ОкончаниеДоИзменения Тогда
						ЗанятоНачало = ОкончаниеДоИзменения;
					Иначе
						Прервать;
					КонецЕсли;
				
				ИначеЕсли ЗанятоНачало > ДоступныйИнтервал.Начало И ЗанятоОкончание < ДоступныйИнтервал.Окончание Тогда
					
					// Занятый интервал находится внутри доступного.
					Если Выборка.Загрузка >= ДоступныйИнтервал.ДоступнаяЗагрузка Тогда
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, ДоступныйИнтервал, ЗанятоОкончание, ДоступныйИнтервал.Окончание, ДоступныйИнтервал.ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицы(ДоступноеВремя));
					Иначе
						ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - Выборка.Загрузка;
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, Выборка, ЗанятоНачало, ЗанятоОкончание, ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 1, ПоследняяСтрокаТаблицы(ДоступноеВремя));
						
						ЗафиксироватьДоступноеВремя(ДоступноеВремя, ДоступныйИнтервал, ЗанятоОкончание, ДоступныйИнтервал.Окончание, ДоступныйИнтервал.ДоступнаяЗагрузка);
						ДоступныеИнтервалы.Вставить(ТекущийИндекс + 2, ПоследняяСтрокаТаблицы(ДоступноеВремя));
					КонецЕсли;
					ДоступныйИнтервал.Окончание = ЗанятоНачало;
					ДоступныйИнтервал.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
					Прервать;
					
				Иначе
					ТекущийИндекс = ТекущийИндекс + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьДоступноеВремяОборудования()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	Результат.Колонки.Добавить("ПараллельнаяЗагрузка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СинхроннаяЗагрузка", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	Результат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	Результат.Колонки.Добавить("НачалоСмены", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	Результат.Колонки.Добавить("Время", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ВремяСмены", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Результат.Колонки.Добавить("МаксимальнаяЗагрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ДоступнаяЗагрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Результат.Колонки.Добавить("ВариантНаладки", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	
	Результат.Колонки.Добавить("ПредшествуетЗагрузка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВариантНаладкиПредшествует", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	
	Результат.Колонки.Добавить("СледуетЗагрузка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВариантНаладкиСледует", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	
	Результат.Колонки.Добавить("ПолноеВремяСинхроннойЗагрузкиБезПереналадки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("НачалоСинхроннойЗагрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	Возврат Результат;
	
КонецФункции

Функция ФондВремениОборудования(ПараметрыПланирования)
	
	ТекстЗапроса = ТекстЗапросаФондВремениОборудования();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	
	Запрос.УстановитьПараметр("Начало", Границы.Начало);
	Запрос.УстановитьПараметр("Окончание",  Границы.Окончание);
	Запрос.УстановитьПараметр("РабочиеЦентры", ПараметрыПланирования.МассивРабочихЦентров);
	Запрос.УстановитьПараметр("МодельРасписания", ПараметрыПланирования.МодельРасписания);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТекстЗапросаФондВремениОборудования()
	
	Результат = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации
	|ПОМЕСТИТЬ НеактуальныеОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступностьРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
	|	ДоступностьРабочихЦентров.Начало КАК Начало,
	|	ДоступностьРабочихЦентров.Окончание КАК Окончание,
	|	РАЗНОСТЬДАТ(ДоступностьРабочихЦентров.Начало, ДоступностьРабочихЦентров.Окончание, СЕКУНДА) КАК Время
	|ПОМЕСТИТЬ СвободноеВремя
	|ИЗ
	|	РегистрСведений.ДоступностьРабочихЦентров КАК ДоступностьРабочихЦентров
	|ГДЕ
	|	(ДоступностьРабочихЦентров.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ ДоступностьРабочихЦентров.Окончание МЕЖДУ &Начало И &Окончание)
	|	И ДоступностьРабочихЦентров.РабочийЦентр В(&РабочиеЦентры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр,
	|	Начало,
	|	Окончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр,
	|	ПооперационноеРасписание.Начало КАК Начало,
	|	ПооперационноеРасписание.Окончание КАК Окончание,
	|	ПооперационноеРасписание.Загрузка КАК Загрузка,
	|	ПооперационноеРасписание.ВремяПлан КАК ВремяПлан,
	|	ПооперационноеРасписание.ЭтоПереналадка КАК ЭтоПереналадка
	|ПОМЕСТИТЬ ПооперационноеРасписание
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	(ПооперационноеРасписание.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ ПооперационноеРасписание.Окончание МЕЖДУ &Начало И &Окончание)
	|	И ПооперационноеРасписание.РабочийЦентр В(&РабочиеЦентры)
	|	И НЕ ПооперационноеРасписание.ИдентификаторОперации В
	|				(ВЫБРАТЬ
	|					НеактуальныеОперации.ИдентификаторОперации
	|				ИЗ
	|					НеактуальныеОперации)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПооперационноеРасписание.ИдентификаторОперации КАК ИдентификаторОперации,
	|	МИНИМУМ(ПооперационноеРасписание.Начало) КАК Начало,
	|	СУММА(ВЫБОР
	|			КОГДА ПооперационноеРасписание.ЭтоПереналадка
	|				ТОГДА 0
	|			ИНАЧЕ ПооперационноеРасписание.ВремяПлан
	|		КОНЕЦ) КАК Время
	|ПОМЕСТИТЬ СинхроннаяЗагрузка
	|ИЗ
	|	ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.РабочийЦентр.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПооперационноеРасписание.ИдентификаторОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РемонтыРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
	|	РемонтыРабочихЦентров.ДатаНачала КАК Начало,
	|	РемонтыРабочихЦентров.ДатаЗавершения КАК Окончание,
	|	РемонтыРабочихЦентров.РабочийЦентр.МаксимальнаяЗагрузка КАК Загрузка,
	|	ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка) КАК ВариантНаладки,
	|	0 КАК ПолноеВремяСинхроннойЗагрузкиБезПереналадки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоСинхроннойЗагрузки
	|ПОМЕСТИТЬ ЗанятыеИнтервалы
	|ИЗ
	|	РегистрСведений.РемонтыРабочихЦентров КАК РемонтыРабочихЦентров
	|ГДЕ
	|	(РемонтыРабочихЦентров.ДатаНачала МЕЖДУ &Начало И &Окончание
	|			ИЛИ РемонтыРабочихЦентров.ДатаЗавершения МЕЖДУ &Начало И &Окончание)
	|	И РемонтыРабочихЦентров.РабочийЦентр В(&РабочиеЦентры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПооперационноеРасписание.РабочийЦентр,
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ПооперационноеРасписание.Загрузка,
	|	ОперацииМаршрутовПроизводства.ВариантНаладки,
	|	ЕСТЬNULL(СинхроннаяЗагрузка.Время, 0),
	|	ЕСТЬNULL(СинхроннаяЗагрузка.Начало, ДАТАВРЕМЯ(1, 1, 1))
	|ИЗ
	|	ПооперационноеРасписание КАК ПооперационноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|		ПО ПооперационноеРасписание.ИдентификаторОперации = ОперацииМаршрутовПроизводства.ИдентификаторОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ СинхроннаяЗагрузка КАК СинхроннаяЗагрузка
	|		ПО ПооперационноеРасписание.ИдентификаторОперации = СинхроннаяЗагрузка.ИдентификаторОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр,
	|	Начало,
	|	Окончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр КАК РабочийЦентр,
	|	ЗанятыеИнтервалы.Начало КАК Начало,
	|	ЗанятыеИнтервалы.Окончание КАК Окончание,
	|	ЗанятыеИнтервалы.Загрузка КАК Загрузка,
	|	ЗанятыеИнтервалы.ВариантНаладки КАК ВариантНаладки,
	|	ЗанятыеИнтервалы.ПолноеВремяСинхроннойЗагрузкиБезПереналадки КАК ПолноеВремяСинхроннойЗагрузкиБезПереналадки,
	|	ЗанятыеИнтервалы.НачалоСинхроннойЗагрузки КАК НачалоСинхроннойЗагрузки
	|ПОМЕСТИТЬ ЗанятыеИнтервалыПриведенные
	|ИЗ
	|	ЗанятыеИнтервалы КАК ЗанятыеИнтервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободноеВремя КАК СвободноеВремя
	|		ПО ЗанятыеИнтервалы.РабочийЦентр = СвободноеВремя.РабочийЦентр
	|			И (ЗанятыеИнтервалы.Начало МЕЖДУ СвободноеВремя.Начало И СвободноеВремя.Окончание)
	|			И (ЗанятыеИнтервалы.Окончание МЕЖДУ СвободноеВремя.Начало И СвободноеВремя.Окончание)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалы.Начало >= СвободноеВремя.Начало
	|			ТОГДА ЗанятыеИнтервалы.Начало
	|		ИНАЧЕ СвободноеВремя.Начало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалы.Окончание <= СвободноеВремя.Окончание
	|			ТОГДА ЗанятыеИнтервалы.Окончание
	|		ИНАЧЕ СвободноеВремя.Окончание
	|	КОНЕЦ,
	|	ЗанятыеИнтервалы.Загрузка,
	|	ЗанятыеИнтервалы.ВариантНаладки,
	|	ЗанятыеИнтервалы.ПолноеВремяСинхроннойЗагрузкиБезПереналадки,
	|	ЗанятыеИнтервалы.НачалоСинхроннойЗагрузки
	|ИЗ
	|	ЗанятыеИнтервалы КАК ЗанятыеИнтервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободноеВремя КАК СвободноеВремя
	|		ПО ЗанятыеИнтервалы.РабочийЦентр = СвободноеВремя.РабочийЦентр
	|			И (ЗанятыеИнтервалы.Начало >= СвободноеВремя.Начало
	|					И ЗанятыеИнтервалы.Начало < СвободноеВремя.Окончание
	|					И ЗанятыеИнтервалы.Окончание > СвободноеВремя.Окончание
	|				ИЛИ ЗанятыеИнтервалы.Окончание > СвободноеВремя.Начало
	|					И ЗанятыеИнтервалы.Окончание <= СвободноеВремя.Окончание
	|					И ЗанятыеИнтервалы.Начало < СвободноеВремя.Начало)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр,
	|	СвободноеВремя.Начало,
	|	СвободноеВремя.Окончание,
	|	ЗанятыеИнтервалы.Загрузка,
	|	ЗанятыеИнтервалы.ВариантНаладки,
	|	ЗанятыеИнтервалы.ПолноеВремяСинхроннойЗагрузкиБезПереналадки,
	|	ЗанятыеИнтервалы.НачалоСинхроннойЗагрузки
	|ИЗ
	|	ЗанятыеИнтервалы КАК ЗанятыеИнтервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободноеВремя КАК СвободноеВремя
	|		ПО ЗанятыеИнтервалы.РабочийЦентр = СвободноеВремя.РабочийЦентр
	|			И ЗанятыеИнтервалы.Начало < СвободноеВремя.Начало
	|			И ЗанятыеИнтервалы.Окончание > СвободноеВремя.Окончание
	|			И (СвободноеВремя.Начало МЕЖДУ ЗанятыеИнтервалы.Начало И ЗанятыеИнтервалы.Окончание)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РабочийЦентр,
	|	Начало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободноеВремя.РабочийЦентр КАК РабочийЦентр,
	|	СвободноеВремя.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	СвободноеВремя.РабочийЦентр.МаксимальнаяЗагрузка КАК МаксимальнаяЗагрузка,
	|	СвободноеВремя.РабочийЦентр.ВидРабочегоЦентра.ПараллельнаяЗагрузка КАК ПараллельнаяЗагрузка,
	|	ВЫБОР
	|		КОГДА СвободноеВремя.РабочийЦентр.ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СинхроннаяЗагрузка,
	|	СвободноеВремя.Начало КАК НачалоСмены,
	|	СвободноеВремя.Окончание КАК ОкончаниеСмены,
	|	СвободноеВремя.Время КАК ВремяСмены,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Начало, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗанятоНачало,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Окончание, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗанятоОкончание,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалыПриведенные.Начало ЕСТЬ НЕ NULL 
	|			ТОГДА РАЗНОСТЬДАТ(ЗанятыеИнтервалыПриведенные.Начало, ЗанятыеИнтервалыПриведенные.Окончание, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяЗанято,
	|	ВЫБОР
	|		КОГДА ЗанятыеИнтервалыПриведенные.Начало ЕСТЬ НЕ NULL 
	|			ТОГДА РАЗНОСТЬДАТ(ЗанятыеИнтервалыПриведенные.Начало, ЗанятыеИнтервалыПриведенные.Окончание, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Загрузка, 0) КАК ВремяЗанятоПараллельнаяЗагрузка,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.Загрузка, 0) КАК Загрузка,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.ВариантНаладки, ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка)) КАК ВариантНаладки,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.ПолноеВремяСинхроннойЗагрузкиБезПереналадки, 0) КАК ПолноеВремяСинхроннойЗагрузкиБезПереналадки,
	|	ЕСТЬNULL(ЗанятыеИнтервалыПриведенные.НачалоСинхроннойЗагрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоСинхроннойЗагрузки
	|ИЗ
	|	СвободноеВремя КАК СвободноеВремя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗанятыеИнтервалыПриведенные КАК ЗанятыеИнтервалыПриведенные
	|		ПО СвободноеВремя.РабочийЦентр = ЗанятыеИнтервалыПриведенные.РабочийЦентр
	|			И (ЗанятыеИнтервалыПриведенные.Начало >= СвободноеВремя.Начало)
	|			И (ЗанятыеИнтервалыПриведенные.Начало < СвободноеВремя.Окончание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоСмены,
	|	ЗанятоНачало
	|ИТОГИ
	|	МАКСИМУМ(МаксимальнаяЗагрузка),
	|	МАКСИМУМ(ОкончаниеСмены),
	|	МАКСИМУМ(ВремяСмены),
	|	СУММА(ВремяЗанято),
	|	СУММА(ВремяЗанятоПараллельнаяЗагрузка),
	|	СУММА(Загрузка)
	|ПО
	|	РабочийЦентр,
	|	НачалоСмены";
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьДоступноеВремя(ДоступноеВремя, Знач ЗначенияЗаполнения, Знач Начало, Знач Окончание, Знач ДоступнаяЗагрузка=0, Знач Время=0)
	
	НоваяСтрока = ДоступноеВремя.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
	
	НоваяСтрока.Период = НачалоДня(Начало);
	НоваяСтрока.Начало = Начало;
	НоваяСтрока.Окончание = Окончание;
	
	Если ЗначениеЗаполнено(Время) Тогда
		НоваяСтрока.Время = Время;
	Иначе
		НоваяСтрока.Время = НоваяСтрока.Окончание - НоваяСтрока.Начало;
	КонецЕсли;
	
	НоваяСтрока.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ВариантНаладки) Тогда
		
		Если НЕ НоваяСтрока.ПараллельнаяЗагрузка
			ИЛИ НоваяСтрока.ДоступнаяЗагрузка = НоваяСтрока.МаксимальнаяЗагрузка Тогда
			НоваяСтрока.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, Знач ДанныеЗаполнения, Знач ВремяЗанято, Знач ВремяСмены)
	
	НоваяСтрока = ПараметрыПланирования.ЗанятоеВремяПоСменам.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.ВремяЗанято = ВремяЗанято;
	НоваяСтрока.ВремяСмены = ВремяСмены;
	
КонецПроцедуры

Функция ЗаполнитьДанныеПредшествованияСледованияДоступногоВремени(Знач ПараметрыПланирования, ДоступноеВремя)
	
	ДоступноеВремяКопия = ДоступноеВремя.Скопировать();
	ДоступноеВремяКопия.Колонки.Добавить("Свободен");
	ДоступноеВремяКопия.ЗаполнитьЗначения(Истина, "Свободен");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.Начало КАК Начало,
	|	ПооперационноеРасписание.Окончание КАК Окончание,
	|	ВЫРАЗИТЬ(ПооперационноеРасписание.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр
	|ПОМЕСТИТЬ НеактуальныеОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.МодельРасписания = &МодельРасписания
	|	И ПооперационноеРасписание.ЭтоУдалениеОперации = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Начало,
	|	Окончание,
	|	РабочийЦентр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПооперационноеРасписание.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ПооперационноеРасписание.РабочийЦентр,
	|	ПооперационноеРасписание.Начало,
	|	ПооперационноеРасписание.Окончание,
	|	ЕСТЬNULL(ОперацииМаршрутовПроизводства.ВариантНаладки, ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка)) КАК ВариантНаладки,
	|	ЛОЖЬ КАК Свободен
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииМаршрутовПроизводства КАК ОперацииМаршрутовПроизводства
	|		ПО ПооперационноеРасписание.ИдентификаторОперации = ОперацииМаршрутовПроизводства.ИдентификаторОперации
	|ГДЕ
	|	(ПооперационноеРасписание.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ ПооперационноеРасписание.Окончание МЕЖДУ &Начало И &Окончание)
	|	И ПооперационноеРасписание.РабочийЦентр В(&РабочиеЦентры)
	|	И НЕ (ПооперационноеРасписание.Начало, ПооперационноеРасписание.Окончание, ПооперационноеРасписание.РабочийЦентр) В
	|				(ВЫБРАТЬ
	|					НеактуальныеОперации.Начало,
	|					НеактуальныеОперации.Окончание,
	|					НеактуальныеОперации.РабочийЦентр
	|				ИЗ
	|					НеактуальныеОперации)
	|	И ПооперационноеРасписание.Моделирование = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("МодельРасписания", ПараметрыПланирования.МодельРасписания);
	Запрос.УстановитьПараметр("РабочиеЦентры", ПараметрыПланирования.МассивРабочихЦентров);
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	Запрос.УстановитьПараметр("Начало", Границы.Начало);
	Запрос.УстановитьПараметр("Окончание",  Границы.Окончание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = ДоступноеВремяКопия.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;
	
	ДоступноеВремяКопия.Сортировать("РабочийЦентр, Начало Возр, Окончание Возр", Новый СравнениеЗначений);
	
	ДоступноеВремя.Очистить();
	Для каждого Строка Из ДоступноеВремяКопия Цикл
		Если НЕ Строка.Свободен Тогда
			Продолжить;
		Иначе
			НовСтр = ДоступноеВремя.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
			ДоступноеВремяЗаполнитьДанныеПредшествования(ДоступноеВремяКопия, Строка, НовСтр);
			ДоступноеВремяЗаполнитьДанныеСледования(ДоступноеВремяКопия, Строка, НовСтр);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ДоступноеВремяЗаполнитьДанныеПредшествования(Знач Таблица, Знач ТекущаяСтрока, НоваяСтрока)
	
	ПредшествующаяСтрока = ПредшествующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока);
	
	Если НЕ ПредшествующаяСтрока = Неопределено Тогда
		
		Если НЕ ПредшествующаяСтрока.Свободен
			ИЛИ (ПредшествующаяСтрока.ПараллельнаяЗагрузка
			И НЕ ПредшествующаяСтрока.ДоступнаяЗагрузка = ПредшествующаяСтрока.МаксимальнаяЗагрузка) Тогда
			
			НоваяСтрока.ПредшествуетЗагрузка = Истина;
			НоваяСтрока.ВариантНаладкиПредшествует = ПредшествующаяСтрока.ВариантНаладки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредшествующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока)
	
	Результат = Неопределено;
	
	Если НЕ ТекущаяСтрока.ПараллельнаяЗагрузка Тогда
		
		ИндексПредшествующей = Таблица.Индекс(ТекущаяСтрока)-1;
		Если ИндексПредшествующей >= 0 Тогда
			ПредшествующаяСтрока = Таблица[ИндексПредшествующей];
			Если ПредшествующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
				Результат = ПредшествующаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ИндексПредшествующей = Таблица.Индекс(ТекущаяСтрока)-1;
		Пока Истина Цикл
			Если ИндексПредшествующей >= 0 Тогда
				ПредшествующаяСтрока = Таблица[ИндексПредшествующей];
				Если ПредшествующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
					Если ПредшествующаяСтрока.Начало = ТекущаяСтрока.Начало
						И ПредшествующаяСтрока.Окончание = ТекущаяСтрока.Окончание Тогда
						
						ИндексПредшествующей = ИндексПредшествующей - 1;
						
					Иначе
						
						Результат = ПредшествующаяСтрока;
						Прервать;
						
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДоступноеВремяЗаполнитьДанныеСледования(Знач Таблица, Знач ТекущаяСтрока, НоваяСтрока)
	
	СледующаяСтрока = СледующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока);
	
	Если НЕ СледующаяСтрока = Неопределено Тогда
		
		Если НЕ СледующаяСтрока.Свободен
			ИЛИ (СледующаяСтрока.ПараллельнаяЗагрузка
			И НЕ СледующаяСтрока.ДоступнаяЗагрузка = СледующаяСтрока.МаксимальнаяЗагрузка) Тогда
			
			НоваяСтрока.СледуетЗагрузка = Истина;
			НоваяСтрока.ВариантНаладкиСледует = СледующаяСтрока.ВариантНаладки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СледующаяСтрокаДоступногоИнтервала(Таблица, ТекущаяСтрока)
	
	Результат = Неопределено;
	НевалидныйИндекс = Таблица.Количество();
	
	Если НЕ ТекущаяСтрока.ПараллельнаяЗагрузка Тогда
		
		ИндексСледующей = Таблица.Индекс(ТекущаяСтрока)+1;
		Если ИндексСледующей < НевалидныйИндекс Тогда
			СледующаяСтрока = Таблица[ИндексСледующей];
			Если СледующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
				Результат = СледующаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ИндексСледующей = Таблица.Индекс(ТекущаяСтрока)+1;
		Пока Истина Цикл
			Если ИндексСледующей < НевалидныйИндекс Тогда
				СледующаяСтрока = Таблица[ИндексСледующей];
				Если СледующаяСтрока.РабочийЦентр = ТекущаяСтрока.РабочийЦентр Тогда
					Если СледующаяСтрока.Начало = ТекущаяСтрока.Начало
						И СледующаяСтрока.Окончание = ТекущаяСтрока.Окончание Тогда
						
						ИндексСледующей = ИндексСледующей + 1;
						
					Иначе
						
						Результат = СледующаяСтрока;
						Прервать;
						
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СценарииПланирования

Процедура МодифицироватьПараметрыПланированияПоСценариюПланирования(ПараметрыПланирования)
	
	СценарийПланирования = ПараметрыПланирования.СценарийПланирования;
	
	Если ЗначениеЗаполнено(СценарийПланирования) Тогда
		
		ДанныеМодели = ЗначенияРеквизитовЭлементаСправочника(СценарийПланирования);
		
		УменьшитьПаркОборудования(ПараметрыПланирования, ДанныеМодели);
		ИзменитьГрафикиРаботыОборудования(ПараметрыПланирования, ДанныеМодели);
		УвеличитьПаркОборудования(ПараметрыПланирования, ДанныеМодели);
		
		РассчитатьРангиРабочихЦентров(ПараметрыПланирования, ПараметрыПланирования.РангиРабочихЦентров);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура УвеличитьПаркОборудования(ПараметрыПланирования, Знач ДанныеМодели)
	
	Если ЗначениеЗаполнено(ДанныеМодели.РабочиеЦентрыДобавить) Тогда
		
		Для каждого Строка Из ДанныеМодели.РабочиеЦентрыДобавить Цикл
			
			УвеличитьПаркОборудованияВТаблицеРабочихЦентров(
				ПараметрыПланирования, Строка.Аналог, Строка.Количество);
			
			УвеличитьПаркОборудованияВТаблицахДоступноеВремяИЗанятоеВремяПоСменам(
				ПараметрыПланирования, Строка.ВидРабочегоЦентра, Строка.Аналог, Строка.Количество);
			
		КонецЦикла;
		
		СортироватьТаблицуДоступноеВремя(ПараметрыПланирования.ДоступноеВремя);
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеДополнительногоРЦ(Аналог, ПорядковыйНомер)

	АналогНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Аналог, "Наименование");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 (доп. %2)';
			|en = '%1 (addit.%2)'"),
		АналогНаименование,
		ПорядковыйНомер);
		
КонецФункции

Процедура УвеличитьПаркОборудованияВТаблицеРабочихЦентров(ПараметрыПланирования, Знач Аналог, КоличествоРЦ)
	
	ЗначенияЗаполнения = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(Аналог, "РабочийЦентр");
	
	Если НЕ ЗначенияЗаполнения = Неопределено Тогда
		
		Для Сч = 1 По КоличествоРЦ Цикл
			
			НаименованиеДоп = НаименованиеДополнительногоРЦ(Аналог, Сч);
		 
			НоваяСтрока = ПараметрыПланирования.ТаблицаРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения);
			НоваяСтрока.РабочийЦентр = НаименованиеДоп;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвеличитьПаркОборудованияВТаблицахДоступноеВремяИЗанятоеВремяПоСменам(
		ПараметрыПланирования, Знач ВидРабочегоЦентра, Знач Аналог, Знач КоличествоРЦ)
	
	ДоступноеВремяАналога = ДоступноеВремяРабочегоЦентраАналога(ПараметрыПланирования, Аналог);
	ПараметрыЗагрузки = ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, ВидРабочегоЦентра);
	ЗначенияЗаполнения = Новый Структура;
	
	Для Сч = 1 По КоличествоРЦ Цикл
		
		НаименованиеДоп = НаименованиеДополнительногоРЦ(Аналог, Сч);
		Для каждого Строка Из ДоступноеВремяАналога Цикл
			
			ЗначенияЗаполнения.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
			ЗначенияЗаполнения.Вставить("РабочийЦентр", НаименованиеДоп);
			ЗначенияЗаполнения.Вставить("НачалоСмены", Строка.Начало);
			ЗначенияЗаполнения.Вставить("ВремяСмены", Строка.Время);
			ЗначенияЗаполнения.Вставить("МаксимальнаяЗагрузка", ПараметрыЗагрузки.МаксимальнаяЗагрузка);
			ЗначенияЗаполнения.Вставить("ПараллельнаяЗагрузка", ПараметрыЗагрузки.ПараллельнаяЗагрузка);
			ЗначенияЗаполнения.Вставить("СинхроннаяЗагрузка", ПараметрыЗагрузки.СинхроннаяЗагрузка);
			
			ЗафиксироватьДоступноеВремя(
				ПараметрыПланирования.ДоступноеВремя,
				ЗначенияЗаполнения,
				Строка.Начало,
				Строка.Окончание,
				ПараметрыЗагрузки.МаксимальнаяЗагрузка,
				Строка.Время);
				
			Если НЕ ПараметрыЗагрузки.ПараллельнаяЗагрузка Тогда
				ВремяСмены = Строка.Время;
			Иначе
				ВремяСмены = Строка.Время * ПараметрыЗагрузки.МаксимальнаяЗагрузка;
			КонецЕсли;
			ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ЗначенияЗаполнения, 0, ВремяСмены);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДоступноеВремяРабочегоЦентраАналога(Знач ПараметрыПланирования, Знач Аналог)
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	МассивРабочийЦентров = Новый Массив;
	МассивРабочийЦентров.Добавить(Аналог);
	
	Результат = ДоступноеВремяРабочихЦентровПоГрафику(Границы.Начало, Границы.Окончание, МассивРабочийЦентров);
	
	Возврат Результат;
	
КонецФункции

Процедура УменьшитьПаркОборудования(ПараметрыПланирования, Знач ДанныеМодели)

	Если ЗначениеЗаполнено(ДанныеМодели.РабочиеЦентрыИсключить) Тогда
		
		Для каждого Строка Из ДанныеМодели.РабочиеЦентрыИсключить Цикл
			
			УменьшитьПаркОборудованияВТаблицеРабочихЦентров(ПараметрыПланирования, Строка.РабочийЦентр);
			УменьшитьПаркОборудованияВТаблицеДоступноеВремя(ПараметрыПланирования, Строка.РабочийЦентр);
			УменьшитьПаркОборудованияВТаблицеЗанятоеВремяПоСменам(ПараметрыПланирования, Строка.РабочийЦентр);
			
		КонецЦикла;
		
		СортироватьТаблицуДоступноеВремя(ПараметрыПланирования.ДоступноеВремя);
	КонецЕсли;
	
КонецПроцедуры

Процедура УменьшитьПаркОборудованияВТаблицеРабочихЦентров(ПараметрыПланирования, Знач РабочийЦентр)
	
	УсловиеПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	УдалитьСтрокиТаблицыПоУсловию(ПараметрыПланирования.ТаблицаРабочихЦентров, УсловиеПоиска);
	
КонецПроцедуры

Процедура УменьшитьПаркОборудованияВТаблицеДоступноеВремя(ПараметрыПланирования, Знач РабочийЦентр)
	
	УсловиеПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	УдалитьСтрокиТаблицыПоУсловию(ПараметрыПланирования.ДоступноеВремя, УсловиеПоиска);
	
КонецПроцедуры

Процедура УменьшитьПаркОборудованияВТаблицеЗанятоеВремяПоСменам(ПараметрыПланирования, Знач РабочийЦентр)
	
	УсловиеПоиска = Новый Структура("РабочийЦентр", РабочийЦентр);
	УдалитьСтрокиТаблицыПоУсловию(ПараметрыПланирования.ЗанятоеВремяПоСменам, УсловиеПоиска);
	
КонецПроцедуры

Процедура ИзменитьГрафикиРаботыОборудования(ПараметрыПланирования, Знач ДанныеМодели)

	Если ЗначениеЗаполнено(ДанныеМодели.ГрафикиРаботы) Тогда
		
		Для каждого Строка Из ДанныеМодели.ГрафикиРаботы Цикл
			
			Границы = ГраницыПланирования(ПараметрыПланирования);
			РасписаниеРаботы = РасписаниеРаботыПоГрафику(Строка.График, Границы.Начало, Границы.Окончание);
			РабочиеЦентры = РабочиеЦентрыДляИзмененияГрафика(ПараметрыПланирования, ДанныеМодели.ГрафикиРаботы, Строка);
			
			Для каждого РабочийЦентр Из РабочиеЦентры Цикл
				
				ВидРабочегоЦентра = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
				ПараметрыЗагрузки = ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, РабочийЦентр);
				
				УменьшитьПаркОборудованияВТаблицеДоступноеВремя(ПараметрыПланирования, РабочийЦентр);
				УменьшитьПаркОборудованияВТаблицеЗанятоеВремяПоСменам(ПараметрыПланирования, РабочийЦентр);
				
				Для каждого ЗаписьРасписания Из РасписаниеРаботы Цикл
					
					ЗначенияЗаполнения = Новый Структура;
					ЗначенияЗаполнения.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
					ЗначенияЗаполнения.Вставить("РабочийЦентр", РабочийЦентр);
					ЗначенияЗаполнения.Вставить("НачалоСмены", 	ЗаписьРасписания.Начало);
					ЗначенияЗаполнения.Вставить("ВремяСмены", 	ЗаписьРасписания.Время);
					ЗначенияЗаполнения.Вставить("МаксимальнаяЗагрузка", ПараметрыЗагрузки.МаксимальнаяЗагрузка);
					ЗначенияЗаполнения.Вставить("ПараллельнаяЗагрузка", ПараметрыЗагрузки.ПараллельнаяЗагрузка);
					ЗначенияЗаполнения.Вставить("СинхроннаяЗагрузка", ПараметрыЗагрузки.СинхроннаяЗагрузка);
					
					ЗафиксироватьДоступноеВремя(
						ПараметрыПланирования.ДоступноеВремя,
						ЗначенияЗаполнения,
						ЗаписьРасписания.Начало,
						ЗаписьРасписания.Окончание,
						ПараметрыЗагрузки.МаксимальнаяЗагрузка,
						ЗаписьРасписания.Время);
					
					Если НЕ ПараметрыЗагрузки.ПараллельнаяЗагрузка Тогда
						ВремяСмены = ЗаписьРасписания.Время;
					Иначе
						ВремяСмены = ЗаписьРасписания.Время * ПараметрыЗагрузки.МаксимальнаяЗагрузка;
					КонецЕсли;
					ЗафиксироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ЗначенияЗаполнения, 0, ВремяСмены);
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
		СортироватьТаблицуДоступноеВремя(ПараметрыПланирования.ДоступноеВремя);
	КонецЕсли;
	
КонецПроцедуры

Функция РасписаниеРаботыПоГрафику(График, Начало, Окончание)
	
	Календари = Новый Массив;
	Календари.Добавить(График);
	
	Результат = ПланированиеПроизводства.РасписаниеРаботыПоГрафику(
		Календари, Начало, Окончание);
		
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Время", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Результат.Колонки.ДатаГрафика.Имя = "Период";
	
	Для каждого Строка Из Результат Цикл
		
		Строка.Начало = Строка.Период + ВремяДатыВСекунды(Строка.ВремяНачала);
		Строка.Окончание = Строка.Начало + Строка.Длительность;
		Строка.Время = Строка.Длительность;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РабочиеЦентрыДляИзмененияГрафика(Знач ПараметрыПланирования, Знач НастройкиМодели, Знач ТекущаяНастройка)
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(ТекущаяНастройка.РабочийЦентр) Тогда
		Результат = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, ТекущаяНастройка.РабочийЦентр);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяНастройка.ВидРабочегоЦентра) Тогда
		РабочиеЦентры = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, ТекущаяНастройка.ВидРабочегоЦентра);
		
		Для каждого РабочийЦентр Из РабочиеЦентры Цикл
			ИмеетсяУточняющаяСтрока = Ложь;
			Для каждого Настройка Из НастройкиМодели Цикл
				Если Настройка = ТекущаяНастройка Тогда
					Продолжить;
				ИначеЕсли Настройка.РабочийЦентр = РабочийЦентр Тогда
					ИмеетсяУточняющаяСтрока = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ИмеетсяУточняющаяСтрока Тогда
				Результат.Добавить(РабочийЦентр);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяНастройка.Подразделение) Тогда
		РабочиеЦентры = РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, ТекущаяНастройка.Подразделение);
		
		Для каждого РабочийЦентр Из РабочиеЦентры Цикл
			ИмеетсяУточняющаяСтрока = Ложь;
			ВидРабочегоЦентра = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
			Для каждого Настройка Из НастройкиМодели Цикл
				Если Настройка = ТекущаяНастройка Тогда
					Продолжить;
				ИначеЕсли Настройка.РабочийЦентр = РабочийЦентр
					ИЛИ (Настройка.ВидРабочегоЦентра = ВидРабочегоЦентра
					И НЕ ЗначениеЗаполнено(Настройка.РабочийЦентр)) Тогда
					ИмеетсяУточняющаяСтрока = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ИмеетсяУточняющаяСтрока Тогда
				Результат.Добавить(РабочийЦентр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИндексацияПараметровПланирования

Процедура ДобавитьИндексыВТаблицуРасписание(Таблица)
	
	Таблица.Индексы.Добавить("ИдентификаторОперации, Вспомогательная");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуОпераций(Таблица)
	
	Таблица.Индексы.Добавить("ИдентификаторОперации");
	Таблица.Индексы.Добавить("ВидРабочегоЦентра, ПриоритетМаршрута, Размещать, Размещена, ЗависитОтПредшествующих");
	Таблица.Индексы.Добавить("МаршрутныйЛист");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуЗависимостейОпераций(Таблица)
	
	Таблица.Индексы.Добавить("ИдентификаторОперацииПредшествующий");
	Таблица.Индексы.Добавить("ИдентификаторОперации");
	Таблица.Индексы.Добавить("ИдентификаторОперации, ПредшествующаяОперацияУчествуетВРасчете");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуРабочихЦентров(Таблица);
	
	Таблица.Индексы.Добавить("ВидРабочегоЦентра");
	Таблица.Индексы.Добавить("РабочийЦентр");
	Таблица.Индексы.Добавить("Подразделение");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуПараметрыМежоперационныхПереходов(Таблица)
	
	Таблица.Индексы.Добавить("Подразделение, Источник, Приемник");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуДлительностиПереналадки(Таблица);
	
	Таблица.Индексы.Добавить("ВидРабочегоЦентра, ТекущийВариантНаладки, СледующийВариантНаладки");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуДоступноеВремя(Таблица)
	
	Таблица.Индексы.Добавить("РабочийЦентр, Период");
	Таблица.Индексы.Добавить("РабочийЦентр, НачалоСмены");
	Таблица.Индексы.Добавить("РабочийЦентр");
	Таблица.Индексы.Добавить("ВидРабочегоЦентра");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуЗанятоеВремяПоСменам(Таблица)
	
	Таблица.Индексы.Добавить("РабочийЦентр, НачалоСмены");
	Таблица.Индексы.Добавить("РабочийЦентр");
	Таблица.Индексы.Добавить("ВидРабочегоЦентра");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуОграниченияЗагрузкиРабочихЦентров(Таблица)

	Таблица.Индексы.Добавить("ВидРабочегоЦентра");
	
КонецПроцедуры

Процедура ДобавитьИндексыВТаблицуРангиРабочихЦентров(Таблица)
	
	Таблица.Индексы.Добавить("ВидРабочегоЦентра");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодборРабочихЦентров

Функция РассчитатьПараметрыРазмещенияОперации(ПараметрыПланирования, Операция, ПравилоВыбораРЦ, ПрямоеРазмещение)
	
	Если ЗначениеЗаполнено(Операция.РабочийЦентрМаршрута) Тогда
		
		Если ЗначениеЗаполнено(ОперацияВремяПлан(ПараметрыПланирования, Операция)) Тогда
			
			ТаблицаАльтернатив = ИнициализироватьТаблицуАльтернативныхРЦ();
			
			РабочиеЦентры = РабочиеЦентрыМаршрута(ПараметрыПланирования, Операция.РабочийЦентрМаршрута);
			Если ЗначениеЗаполнено(РабочиеЦентры) Тогда
				Для каждого РабочийЦентр Из РабочиеЦентры Цикл
					ПараметрыРазмещения = ПодобратьИнтервалыРазмещенияНаРабочемЦентре(
						ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение);
					Если ПараметрыРазмещения = Неопределено Тогда
						Продолжить;
					Иначе
						НоваяСтрока = ТаблицаАльтернатив.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыРазмещения);
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеЗаполнено(ТаблицаАльтернатив) Тогда
					Результат = Неопределено;
				Иначе
					Результат = ИнициализироватьПараметрыРазмещения();
					ЛучшаяАльтернатива = ЛучшийРабочийЦентрДляРазмещения(ПараметрыПланирования, ТаблицаАльтернатив, ПравилоВыбораРЦ);
					ЗаполнитьЗначенияСвойств(Результат, ЛучшаяАльтернатива);
				КонецЕсли;
			Иначе
				ЗафиксироватьОшибкуНеОпределеныРабочиеЦентры(ПараметрыПланирования, Операция.РабочийЦентрМаршрута);
			КонецЕсли;
			
		Иначе
			
			ЗафиксироватьОшибкуНеЗаданоВремяОперации(ПараметрыПланирования, Операция);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ПараметрыРазмещенияОперацииБезРабочегоЦентра(
			ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодобратьИнтервалыРазмещенияНаРабочемЦентре(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение)
	
	Результат = ИнициализироватьПараметрыРазмещения();
	ПараметрыПодбора = ИнициализироватьПараметрыПодбораИнтерваловРазмещения(
		ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение);
	
	Пока ПараметрыПодбора.ВремяПлан > 0 Цикл
		
		Отказ = Ложь;
		ПодобратьДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора, Результат, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОпределитьИнтервалРазмещения(ПараметрыПланирования, ПараметрыПодбора, Результат, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ОпределитьИнтервалРазмещенияВспомогательных(ПараметрыПланирования, ПараметрыПодбора, Результат, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		СохранитьИнтервалРазмещения(ПараметрыПланирования, ПараметрыПодбора, Результат);
		
	КонецЦикла;
	
	Результат.РабочийЦентр = РабочийЦентр;
	РассчитатьПоказателиРазмещенияОперацииНаРЦ(ПараметрыПланирования, Результат);
	
	ВосстановитьИсходныеПараметрыПланирования(ПараметрыПланирования, ПараметрыПодбора);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодобратьДоступныйДляРазмещенияИнтервал(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	ПараметрыПодбора.ДоступныйИнтервал = ДоступныйДляРазмещенияИнтервал(
		ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
	
	Если НЕ ПараметрыПодбора.ДоступныйИнтервал = Неопределено Тогда
	
		Если ПараметрыПодбора.ПервыйИнтервал Тогда
			
			ВремяПереналадки = ВремяПереналадкиОперации(
				ПараметрыПланирования, ПараметрыПодбора.ДоступныйИнтервал, ПараметрыПодбора.Операция);
			
			ПараметрыПодбора.ВремяПереналадки = ВремяПереналадки;
			ПараметрыПодбора.ВремяПлан =  ПараметрыПодбора.ВремяПлан + ВремяПереналадки;
			ПараметрыПодбора.ПервыйИнтервал = Ложь;
			
			ПараметрыРазмещения.ВремяПереналадки = ВремяПереналадки;
			
		КонецЕсли;
		
	Иначе
		
		ЗафиксироватьОшибкуНедоступенОснОблсужРЦ(ПараметрыПланирования, ПараметрыПодбора);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьИнтервалРазмещения(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	ИнтервалРазмещения = ИнтервалРазмещенияОперации(ПараметрыПланирования, ПараметрыПодбора);
	
	Если НЕ ИнтервалРазмещения = Неопределено Тогда
		
		ПараметрыПодбора.ИнтервалРазмещения = ИнтервалРазмещения;
		
	Иначе
		
		ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьИнтервалРазмещенияВспомогательных(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	Если ПараметрыПодбора.РазмещатьВспомогательные Тогда
		
		РазмещениеВозможно = ВозможноРазмещениеВспомогательныхРЦНаИнтервале(
			ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
		
		Если РазмещениеВозможно Тогда
				
			ПараметрыПодбора.НедоступныеВспомогательныеРЦ.Очистить();
			
		Иначе
			
			ЗаполнитьНедоступныеВспомогательныеРЦ(ПараметрыРазмещения, ПараметрыПодбора.НедоступныеВспомогательныеРЦ);
			ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьИнтервалРазмещения(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	ИзменитьПараметрыПланирования = Истина;
	Если ПоследнийИнтервалРазмещения(ПараметрыПодбора) Тогда
		
		МодифицироватьПараметрыПодбораПриСохраненииИнтервала(ПараметрыПодбора, Истина);
		СохранитьНайденныйИнтервал(ПараметрыРазмещения, ПараметрыПодбора.ДоступныйИнтервал, ПараметрыПодбора.ИнтервалРазмещения);
		
	Иначе
		
		Если ДопустимоРазмещениеПромежуточногоИнтервала(ПараметрыПланирования, ПараметрыПодбора) Тогда
			
			МодифицироватьПараметрыПодбораПриСохраненииИнтервала(ПараметрыПодбора, Ложь);
			СохранитьНайденныйИнтервал(ПараметрыРазмещения, ПараметрыПодбора.ДоступныйИнтервал, ПараметрыПодбора.ИнтервалРазмещения);
			
		Иначе
			
			ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
			ИзменитьПараметрыПланирования = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменитьПараметрыПланирования Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыПодбора.ИнтервалРазмещения.Загрузка) Тогда
			ЗанятоеВремя = ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
		Иначе
			ЗанятоеВремя = ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан * ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
		КонецЕсли;
		ОтразитьЗанятоеВремяПоСменам(
			ПараметрыПланирования,
			ПараметрыПодбора.ДоступныйИнтервал,
			ПараметрыПодбора.РабочийЦентр,
			ЗанятоеВремя);
		
		РассчитатьИндексСледующегоДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора);
		
		ПустыеИнтервалы = Новый Массив;
		ИсправитьДоступноеВремя(
			ПараметрыПланирования,
			ПараметрыПодбора.Операция,
			ПараметрыПодбора.ДоступныйИнтервал,
			ПустыеИнтервалы,
			ПараметрыПодбора.ИнтервалРазмещения,
			ПараметрыРазмещения.Начало);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьИндексСледующегоДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	ИнтервалРазмещения = ПараметрыПодбора.ИнтервалРазмещения;
	ТекущийИндекс = ДоступноеВремя.Индекс(ДоступныйИнтервал);
	
	Если НЕ ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			СледующийИндекс = ТекущийИндекс + 1;
		Иначе
			СледующийИндекс = ТекущийИндекс - 1;
		КонецЕсли;
		
	Иначе
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если ИнтервалРазмещения.ВремяПлан = ДоступныйИнтервал.Время Тогда
			
			// Занят весь доступный интервал.
			Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
				И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
				СледующийИндекс = ТекущийИндекс;
			Иначе
				Если ПараметрыПодбора.ПрямоеРазмещение Тогда
					СледующийИндекс = ТекущийИндекс + 1;
				Иначе
					СледующийИндекс = ТекущийИндекс - 1;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало Тогда
				
				// Занята левая часть доступного интервала.
				Если ДоступнаяЗагрузка = 0 Тогда
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						СледующийИндекс = ТекущийИндекс;
					Иначе
						СледующийИндекс = ТекущийИндекс - 1;
					КонецЕсли;
				Иначе
					Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
						И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
						СледующийИндекс = ТекущийИндекс;
					Иначе
						Если ПараметрыПодбора.ПрямоеРазмещение Тогда
							СледующийИндекс = ТекущийИндекс + 1;
						Иначе
							СледующийИндекс = ТекущийИндекс - 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание Тогда
				
				// Занята правая часть доступного интервала.
				Если ДоступнаяЗагрузка = 0 Тогда
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						СледующийИндекс = ТекущийИндекс;
					КонецЕсли;
				Иначе
					Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
						И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						Если ПараметрыПодбора.ПрямоеРазмещение Тогда
							СледующийИндекс = ТекущийИндекс + 2;
						Иначе
							СледующийИндекс = ТекущийИндекс;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				// Занята часть внутри доступного интервала.
				Если ДоступнаяЗагрузка = 0 Тогда
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						СледующийИндекс = ТекущийИндекс;
					КонецЕсли;
				Иначе
					Если ДоступнаяЗагрузка >= ПараметрыПодбора.ЗагрузкаКратность
						И ПараметрыПодбора.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал Тогда
						СледующийИндекс = ТекущийИндекс + 1;
					Иначе
						Если ПараметрыПодбора.ПрямоеРазмещение Тогда
							СледующийИндекс = ТекущийИндекс + 2;
						Иначе
							СледующийИндекс = ТекущийИндекс;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИндексСледующегоДоступногоИнтарвала", СледующийИндекс);
	
КонецПроцедуры

Функция ПоследнийИнтервалРазмещения(ПараметрыПодбора)
	
	ВсеВремяРазмещено = (ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан = ПараметрыПодбора.ВремяПлан);
	
	Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
		
		ВсяЗагрузкаРазмещена = (ПараметрыПодбора.ИнтервалРазмещения.Загрузка = ПараметрыПодбора.Загрузка)
			И (ПараметрыПодбора.ПараметрыПараллельнойЗагрузки.Количество() = 1);
		Результат = ВсеВремяРазмещено И ВсяЗагрузкаРазмещена;
		
	Иначе
		
		Результат = ВсеВремяРазмещено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДопустимоРазмещениеПромежуточногоИнтервала(ПараметрыПланирования, ПараметрыПодбора)
	
	Результат = Истина;
	
	ВсеВремяРазмещено = (ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан = ПараметрыПодбора.ВремяПлан);
	Если НЕ ВсеВремяРазмещено Тогда
	
		Если СледующийИнтервалЗагружен(ПараметрыПланирования, ПараметрыПодбора, ПараметрыПодбора.ДоступныйИнтервал) Тогда
			
			Результат = Ложь;
			
		Иначе
			
			ВыполнениеПрерывается = ВыполнениеОперацииПрерывается(ПараметрыПланирования, ПараметрыПодбора, ПараметрыПодбора.ДоступныйИнтервал);
			Если ВыполнениеПрерывается Тогда
				
				ПрерываниеДопустимо = ПрерываниеОперацииДопустимо(ПараметрыПланирования, ПараметрыПодбора);
				Если НЕ ПрерываниеДопустимо Тогда
					Результат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СледующийИнтервалЗагружен(ПараметрыПланирования, ПараметрыПодбора, ДоступныйИнтервал)
	
	Если ПараметрыПодбора.ПрямоеРазмещение Тогда
		СледуетЗагрузка = ДоступныйИнтервал.СледуетЗагрузка;
	Иначе
		СледуетЗагрузка = ДоступныйИнтервал.ПредшествуетЗагрузка;
	КонецЕсли;
	
	Если НЕ СледуетЗагрузка Тогда
		Результат = Ложь;
	Иначе
		
		Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
			
			СледующийИнтервал = СледующийДоступныйИнтервалПоИндексу(
				ПараметрыПланирования, ДоступныйИнтервал, ПараметрыПодбора.ПрямоеРазмещение);
			Если СледующийИнтервал = Неопределено Тогда
				Результат = Истина;
			Иначе
				
				Если ПараметрыПодбора.ЗагрузкаКратность > СледующийИнтервал.ДоступнаяЗагрузка Тогда
					Результат = Истина;
				Иначе
					Результат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнениеОперацииПрерывается(ПараметрыПланирования, ПараметрыПодбора, ДоступныйИнтервал)
	
	СледующийИнтервал = СледующийДоступныйИнтервалПоИндексу(
		ПараметрыПланирования, ДоступныйИнтервал, ПараметрыПодбора.ПрямоеРазмещение);
	
	Если СледующийИнтервал = Неопределено Тогда
		
		Результат = Истина;
		
	Иначе
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			
			Если ДоступныйИнтервал.Окончание = СледующийИнтервал.Начало Тогда
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДоступныйИнтервал.Начало = СледующийИнтервал.Окончание Тогда
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СледующийДоступныйИнтервалПоИндексу(ПараметрыПланирования, ТекущийИнтервал, ПрямоеРазмещение)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	ТекущийИндекс = ДоступноеВремя.Индекс(ТекущийИнтервал);
	МаксимальныйИндекс = ДоступноеВремя.Количество();
	
	СледующийИндекс = Неопределено;
	Если ПрямоеРазмещение Тогда
		СледующийИндекс = ТекущийИндекс + 1;
		Если СледующийИндекс = МаксимальныйИндекс Тогда
			СледующийИндекс = Неопределено;
		КонецЕсли;
	Иначе
		СледующийИндекс = ТекущийИндекс - 1;
		Если СледующийИндекс = -1 Тогда
			СледующийИндекс = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СледующийИндекс = Неопределено Тогда
		СледующийИнтервал = ДоступноеВремя[СледующийИндекс];
		Если НЕ СледующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр Тогда
			Результат = Неопределено;
		Иначе
			Результат = СледующийИнтервал;
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура МодифицироватьПараметрыПодбораПриСохраненииИнтервала(ПараметрыПодбора, Знач ПоследнийИнтервал)
	
	Если ЗначениеЗаполнено(ПараметрыПодбора.ВремяПереналадки) Тогда
		
		ПараметрыПодбора.ИнтервалРазмещения.ВремяПереналадки =
			МИН(ПараметрыПодбора.ВремяПереналадки, ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан);
		ПараметрыПодбора.ВремяПереналадки = ПараметрыПодбора.ВремяПереналадки - ПараметрыПодбора.ИнтервалРазмещения.ВремяПереналадки;
		
	КонецЕсли;
	
	Если ПоследнийИнтервал Тогда
		
		ПараметрыПодбора.ВремяПлан = 0;
		ПараметрыПодбора.Загрузка = 0;
		
	Иначе
		
		Если НЕ ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
			ЗачестьРазмещенноеВремяВПараметрахПодбора(ПараметрыПодбора);
		Иначе
			ЗачестьРазмещенноеВремяИЗагрузкуВПараметрахПодбора(ПараметрыПодбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗачестьРазмещенноеВремяВПараметрахПодбора(ПараметрыПодбора)
	
	ПараметрыПодбора.ВремяПлан = ПараметрыПодбора.ВремяПлан - ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
	
КонецПроцедуры

Процедура ЗачестьРазмещенноеВремяИЗагрузкуВПараметрахПодбора(ПараметрыПодбора)
	
	ТекущийПараметр = ПараметрыПодбора.ПараметрыПараллельнойЗагрузки[0];
	
	Если ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан = ПараметрыПодбора.ВремяПлан Тогда
		
		// "Такт" параллельной загрузки не прерывается интервалом недоступности.
		Если ПараметрыПодбора.ИнтервалРазмещения.Загрузка = ПараметрыПодбора.Загрузка Тогда
			ПараметрыПодбора.ПараметрыПараллельнойЗагрузки.Удалить(ТекущийПараметр);
			ТекущийПараметр = ПараметрыПодбора.ПараметрыПараллельнойЗагрузки[0];
		Иначе
			ТекущийПараметр.Загрузка = ТекущийПараметр.Загрузка - ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			ТекущийПараметр.ВремяПлан = ТекущийПараметр.ВремяПлан - ТекущийПараметр.ВремяПЗ;
			ТекущийПараметр.ВремяПЗ = 0;
			ТекущийПараметр.ТактПараллельнойЗагрузки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыПодбора.ИнтервалРазмещения.Загрузка = ПараметрыПодбора.Загрузка Тогда
			
			ТекущийПараметр.ЗагрузкаКратность = ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			ТекущийПараметр.ВремяПлан = ПараметрыПодбора.ВремяПлан - ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
			ТекущийПараметр.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал = Ложь;
			
		Иначе
			
			// "Такт" параллельной загрузки прерывается интервалом недоступности.
			НовыйПараметр = ПараметрыПодбора.ПараметрыПараллельнойЗагрузки.Вставить(0);
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекущийПараметр);
			НовыйПараметр.Загрузка = ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			НовыйПараметр.ЗагрузкаКратность = ПараметрыПодбора.ИнтервалРазмещения.Загрузка;
			НовыйПараметр.ВремяПлан = ПараметрыПодбора.ВремяПлан - ПараметрыПодбора.ИнтервалРазмещения.ВремяПлан;
			НовыйПараметр.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал = Ложь;
			
			ТекущийПараметр.Загрузка = ТекущийПараметр.Загрузка - НовыйПараметр.Загрузка;
			ТекущийПараметр.ВремяПлан = ТекущийПараметр.ВремяПлан - ТекущийПараметр.ВремяПЗ;
			ТекущийПараметр.ВремяПЗ = 0;
			ТекущийПараметр.ТактПараллельнойЗагрузки = Новый УникальныйИдентификатор;
			
			ТекущийПараметр = НовыйПараметр;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ПараметрыПодбора,
		ТекущийПараметр,
		"Загрузка, ЗагрузкаКратность, ВремяПлан, ТактПараллельнойЗагрузки, ДопустимаЗагрузкаВПолученныйДоступныйИнтервал");
	
КонецПроцедуры

Процедура СохранитьНайденныйИнтервал(ПараметрыРазмещения, Знач ДоступныйИнтервал, Знач ИнтервалРазмещения)
	
	ПараметрыРазмещения.Интервалы.Добавить(ИнтервалРазмещения);
	
	КэшироватьДоступныйИнтервал(ПараметрыРазмещения, ДоступныйИнтервал, ИнтервалРазмещения);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРазмещения.Начало) Тогда
		ПараметрыРазмещения.Начало = ИнтервалРазмещения.Начало;
	Иначе
		ПараметрыРазмещения.Начало = МИН(ПараметрыРазмещения.Начало, ИнтервалРазмещения.Начало);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРазмещения.Окончание) Тогда
		ПараметрыРазмещения.Окончание = ИнтервалРазмещения.Окончание;
	Иначе
		ПараметрыРазмещения.Окончание = МАКС(ПараметрыРазмещения.Окончание, ИнтервалРазмещения.Окончание);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныйДляРазмещенияИнтервал(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	Если ПараметрыПодбора.ДоступныйИнтервал = Неопределено Тогда
		Результат = ПервичныйДоступныйДляРазмещенияИнтервал(
			ПараметрыПланирования, ПараметрыПодбора);
	Иначе
		Результат = СледующийДоступныйДляРазмещенияИнтервал(
			ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПервичныйДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора)
	
	Границы = ГраницыПланирования(ПараметрыПланирования);
	МоментРазмещения = ПараметрыПодбора.МоментРазмещения;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
		
	УсловиеПоиска = Новый Структура;
    УсловиеПоиска.Вставить("РабочийЦентр", ПараметрыПодбора.РабочийЦентр);
    
	Результат = Неопределено;
	Пока Истина Цикл
		
		УсловиеПоиска.Вставить("Период", НачалоДня(МоментРазмещения));
		НайденныеСтроки = НайтиСтрокиВТаблицеССохранениемПорядка(ПараметрыПланирования.ДоступноеВремя, УсловиеПоиска);
		
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			
			Если ПараметрыПодбора.ПрямоеРазмещение Тогда
				Индекс = 0;
			Иначе
				Индекс = НайденныеСтроки.Количество()-1;
			КонецЕсли;
			
			Для сч = 1 По НайденныеСтроки.Количество() Цикл
				
				Интервал = НайденныеСтроки[Индекс];
				ИнтервалПригоден = ИнтервалПригоденДляРазмещенияОперации(ПараметрыПланирования, Интервал, ПараметрыПодбора);
				Если ИнтервалПригоден Тогда
					Результат = Интервал;
					Прервать;
				Иначе
					Если ПараметрыПодбора.ПрямоеРазмещение Тогда
						Индекс = Индекс + 1;
					Иначе
						Индекс = Индекс - 1;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ Результат = Неопределено Тогда
			Прервать;
		Иначе
			
			Если ПрямоеРазмещение Тогда
				МоментРазмещения = КонецДня(МоментРазмещения) + 1;
				Если НЕ МоментРазмещения > Границы.Окончание Тогда
					Продолжить;
				Иначе
					Прервать;
				КонецЕсли;
			Иначе
				МоментРазмещения = НачалоДня(МоментРазмещения) - 1;
				Если НЕ МоментРазмещения < Границы.Начало Тогда
					Продолжить;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СледующийДоступныйДляРазмещенияИнтервал(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	Результат = Неопределено;
	
	ТекущийИндекс = ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала;
	МаксимальныйИндекс = ПараметрыПланирования.ДоступноеВремя.Количество();
	
	Пока Истина Цикл
		
		Если ТекущийИндекс >= МаксимальныйИндекс
			ИЛИ ТекущийИндекс = -1 Тогда
			Прервать;
		КонецЕсли;
		
		СледующийИнтервал = ПараметрыПланирования.ДоступноеВремя[ТекущийИндекс];
		Если НЕ СледующийИнтервал.РабочийЦентр = ПараметрыПодбора.РабочийЦентр Тогда
			Прервать;
		Иначе
			
			Пригоден = ИнтервалПригоденДляРазмещенияОперации(ПараметрыПланирования, СледующийИнтервал, ПараметрыПодбора);
			Если Пригоден Тогда
				Результат = СледующийИнтервал;
				Прервать;
			Иначе
				ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			ТекущийИндекс = ТекущийИндекс + 1;
		Иначе
			ТекущийИндекс = ТекущийИндекс - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнтервалПригоденДляРазмещенияОперации(ПараметрыПланирования, ДоступныйИнтервал, ПараметрыПодбора)
	
	Результат = Истина;
	
	ВыполнениеПрерывается = ДоступныйИнтервал.Время < ПараметрыПодбора.ВремяПлан;
	Если ВыполнениеПрерывается Тогда
		
		Если ДоступныйИнтервал.Время < МинимальноеВремяОперации() Тогда
			Результат = Ложь;
		ИначеЕсли СледующийИнтервалЗагружен(ПараметрыПланирования, ПараметрыПодбора, ДоступныйИнтервал) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
		
		Если ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал) Тогда
			
			ПолноеВремяОперации = ОперацияВремяПлан(
				ПараметрыПланирования, ПараметрыПодбора.Операция, ДоступныйИнтервал.РабочийЦентр);
				
			Если НЕ ДоступныйИнтервал.ПолноеВремяСинхроннойЗагрузкиБезПереналадки = ПолноеВремяОперации Тогда
				Результат = Ложь;
			ИначеЕсли ПараметрыПодбора.ПервыйИнтервал
				И НЕ ДоступныйИнтервал.Начало = ДоступныйИнтервал.НачалоСинхроннойЗагрузки Тогда
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоступныйИнтервал.ВариантНаладки)
			И НЕ ПараметрыПодбора.ВариантНаладки = ДоступныйИнтервал.ВариантНаладки Тогда
			
			Результат = Ложь;
			
		ИначеЕсли ПараметрыПодбора.ЗагрузкаКратность > ДоступныйИнтервал.ДоступнаяЗагрузка
			И ПараметрыПодбора.ЗагрузкаКратность <= ПараметрыПодбора.МаксимальнаяЗагрузка Тогда
			
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал)
	
	Если ДоступныйИнтервал.СинхроннаяЗагрузка Тогда
		Результат = НЕ(ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяПереналадкиОперации(Знач ПараметрыПланирования, Знач ДоступныйИнтервал, Знач Операция)
	
	ПредшествующийВариантНаладки = ПредшествующийВариантНаладки(ПараметрыПланирования, ДоступныйИнтервал);
	ИзменилсяВариантНаладки = ЗначениеЗаполнено(ПредшествующийВариантНаладки)
		И НЕ(ПредшествующийВариантНаладки = Операция.ВариантНаладки);
	
	Если ИзменилсяВариантНаладки Тогда
		
		Время = ВремяПереналадкиПриСменеВариантаНаладки(
			ПараметрыПланирования, ДоступныйИнтервал.ВидРабочегоЦентра,
			ПредшествующийВариантНаладки, Операция.ВариантНаладки);
		
		Результат = ВремяСПоправкойНаКоэфВремениРаботы(ПараметрыПланирования, ДоступныйИнтервал.РабочийЦентр, Время);
		
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяПереналадкиПриСменеВариантаНаладки(
	Знач ПараметрыПланирования, Знач РабочийЦентр, Знач ТекущийВариантНаладки, Знач СледующийВариантНаладки)
	
	Если ТипЗначенияРабочийЦентр(РабочийЦентр) Тогда
		РабочийЦентр = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
	КонецЕсли;
	
	Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр, ТекущийВариантНаладки, СледующийВариантНаладки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр,, СледующийВариантНаладки);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр, ТекущийВариантНаладки);
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = НайтиВремяПереналадки(ПараметрыПланирования, РабочийЦентр);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиВремяПереналадки(Знач ПараметрыПланирования, Знач ВидРабочегоЦентра,
	Знач ТекущийВариантНаладки = Неопределено, Знач СледующийВариантНаладки = Неопределено)
		
	Если ЗначениеЗаполнено(ПараметрыПланирования.ДлительностиПереналадки) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущийВариантНаладки) Тогда
			ТекущийВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СледующийВариантНаладки) Тогда
			СледующийВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		КонецЕсли;
		
		УсловиеПоиска = Новый Структура;
		УсловиеПоиска.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
		УсловиеПоиска.Вставить("ТекущийВариантНаладки", ТекущийВариантНаладки);
		УсловиеПоиска.Вставить("СледующийВариантНаладки", СледующийВариантНаладки);
		
		СтрокиПоиска = ПараметрыПланирования.ДлительностиПереналадки.НайтиСтроки(УсловиеПоиска);
		Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
			Возврат СтрокиПоиска[0].Время;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ИнтервалРазмещенияОперации(Знач ПараметрыПланирования, ПараметрыПодбора)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыПодбора.ДоступныйИнтервал);
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыПодбора, "ТактПараллельнойЗагрузки");
	
	РассчитатьГраницыИнтервалаРазмещенияОперации(ПараметрыПодбора, Результат);
	
	Если НЕ Результат = Неопределено Тогда
		
		РассчитатьЗагрузкуИнтервалаРазмещенияОперации(ПараметрыПодбора, Результат);
		ПроверитьСоблюдениеОграниченийЗагрузкиРабочихЦентров(ПараметрыПланирования, ПараметрыПодбора, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьГраницыИнтервалаРазмещенияОперации(ПараметрыПодбора, ИнтервалРазмещения)
	
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	МоментРазмещения = ПараметрыПодбора.МоментРазмещения;
	ВремяПлан = ПараметрыПодбора.ВремяПлан;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	// Первая граница (левая при прямом, правая при обратном размещении).
	Если ПрямоеРазмещение Тогда
		ИнтервалРазмещения.Начало = МАКС(ДоступныйИнтервал.Начало, МоментРазмещения);
	Иначе
		ИнтервалРазмещения.Окончание = МИН(ДоступныйИнтервал.Окончание, МоментРазмещения);
	КонецЕсли;
	
	Если ИнтервалРазмещения.Начало < ИнтервалРазмещения.Окончание Тогда
		
		// Вторая граница (правая при прямом, левая при обратном размещении).
		ВремяИнтервала = ИнтервалРазмещения.Окончание - ИнтервалРазмещения.Начало;
		Если ВремяИнтервала > ВремяПлан Тогда
			ВремяИнтервала = ВремяПлан;
			Если ПрямоеРазмещение Тогда
				ИнтервалРазмещения.Окончание = ИнтервалРазмещения.Начало + ВремяИнтервала;
			Иначе
				ИнтервалРазмещения.Начало = ИнтервалРазмещения.Окончание - ВремяИнтервала;
			КонецЕсли;
		КонецЕсли;
	    ИнтервалРазмещения.ВремяПлан = ВремяИнтервала;
		
		ИнтервалЗагруженСинхронно = ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал);
		Если ИнтервалЗагруженСинхронно
			И (НЕ ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало
			ИЛИ НЕ ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание) Тогда
			
			ИнтервалРазмещения = Неопределено;
			
		КонецЕсли;
		
	Иначе
		ИнтервалРазмещения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьЗагрузкуИнтервалаРазмещенияОперации(ПараметрыПодбора, ИнтервалРазмещения)
	
	Если ПараметрыПодбора.ПараллельнаяЗагрузка И ЗначениеЗаполнено(ПараметрыПодбора.Загрузка) Тогда
		
		Доступно = ПараметрыПодбора.ДоступныйИнтервал.ДоступнаяЗагрузка;
		ЗагрузкаОстаток = ПараметрыПодбора.Загрузка;
		ЗагрузкаКратность = ПараметрыПодбора.ЗагрузкаКратность;
		
		Если ЗагрузкаОстаток <= Доступно Тогда
			ИнтервалРазмещения.Загрузка = ЗагрузкаОстаток;
		Иначе
			Если ЗагрузкаКратность <= ПараметрыПодбора.МаксимальнаяЗагрузка Тогда
				КоличествоЗагрузок = Цел(Доступно/ЗагрузкаКратность);
				ИнтервалРазмещения.Загрузка = КоличествоЗагрузок * ЗагрузкаКратность;
			Иначе
				ИнтервалРазмещения.Загрузка = Доступно;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоблюдениеОграниченийЗагрузкиРабочихЦентров(
		Знач ПараметрыПланирования, ПараметрыПодбора, ИнтервалРазмещения)
	
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	Операция = ПараметрыПодбора.Операция;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	ПроцентМаксЗагрузки = ПроцентМаксЗагрузкиРабочегоЦентра(ПараметрыПланирования, ДоступныйИнтервал.ВидРабочегоЦентра);
	
	Если ЗначениеЗаполнено(ПроцентМаксЗагрузки) И НЕ ПроцентМаксЗагрузки = 100 Тогда
		
		ДопустимаяЗагрузка = ВремяСменыДоступногоИнтервала(ПараметрыПланирования, ДоступныйИнтервал);
		ТекущаяЗагрузка = ЗанятоеВремяСмены(ПараметрыПланирования, ДоступныйИнтервал.РабочийЦентр,
			ДоступныйИнтервал.НачалоСмены);
		ЗагрузкаПослеРазмещения = ТекущаяЗагрузка + ИнтервалРазмещения.ВремяПлан;
		
		Если ЗагрузкаПослеРазмещения <= ДопустимаяЗагрузка Тогда
			Возврат;
		Иначе
			Если ТекущаяЗагрузка >= ДопустимаяЗагрузка Тогда
				ИнтервалРазмещения = Неопределено;
			Иначе
				ИнтервалПригоден = ПрерываниеОперацииДопустимо(ПараметрыПланирования, ПараметрыПодбора);
				
				Если ИнтервалПригоден Тогда
					
					ВремяДоступное = ДопустимаяЗагрузка - ТекущаяЗагрузка;
					Если ВремяДоступное < ИнтервалРазмещения.ВремяПлан Тогда
						
						Если ПрямоеРазмещение Тогда
							ИнтервалРазмещения.Окончание = ИнтервалРазмещения.Начало + ВремяДоступное;
						Иначе
							ИнтервалРазмещения.Начало = ИнтервалРазмещения.Окончание - ВремяДоступное;
						КонецЕсли;
						ИнтервалРазмещения.ВремяПлан = ВремяДоступное;
						
					Иначе
						ИнтервалРазмещения = Неопределено;
					КонецЕсли;
					
				Иначе
					ИнтервалРазмещения = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроцентМаксЗагрузкиРабочегоЦентра(Знач ПараметрыПланирования, Знач ВидРабочегоЦентра)
	
	Если ПараметрыПланирования.ЗадействоватьРезервДоступности Тогда
		Результат = 100;
	Иначе
		СтрокаПоиска = ПараметрыПланирования.ОграниченияЗагрузкиРабочихЦентров.Найти(ВидРабочегоЦентра, "ВидРабочегоЦентра");
		Если СтрокаПоиска = Неопределено Тогда
			Результат = 100;
		Иначе
			Результат = СтрокаПоиска.ПроцентМаксЗагрузки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяСменыДоступногоИнтервала(Знач ПараметрыПланирования, Знач ДоступныйИнтервал)
	
	ПроцентМаксЗагрузки = ПроцентМаксЗагрузкиРабочегоЦентра(ПараметрыПланирования, ДоступныйИнтервал.ВидРабочегоЦентра);
	
	Если ЗначениеЗаполнено(ПроцентМаксЗагрузки) И НЕ ПроцентМаксЗагрузки = 100 Тогда
		Результат = ОКР(ДоступныйИнтервал.ВремяСмены * (ПроцентМаксЗагрузки/100));
	Иначе
		Результат = ДоступныйИнтервал.ВремяСмены;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВозможноРазмещениеВспомогательныхРЦНаИнтервале(Знач ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	Операция = ПараметрыПодбора.Операция;
	ДоступныйИнтервал = ПараметрыПодбора.ДоступныйИнтервал;
	ИнтервалРазмещения = ПараметрыПодбора.ИнтервалРазмещения;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРазмещения.ВспомогательныеРЦ) Тогда
		
		ПодобратьВспомогательныеРЦДляОперации(ПараметрыПланирования, Операция, ПараметрыРазмещения.ВспомогательныеРЦ,
			ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
		
	Иначе
		
		ПроверитьОбсуживающиеРЦСвободныНаИнтервале(
			ПараметрыПланирования, ПараметрыРазмещения.ВспомогательныеРЦ, ИнтервалРазмещения);
		
	КонецЕсли;
	
	ВспомогательныеРЦСвободны = БулевоЗначениеТаблицы(ПараметрыРазмещения.ВспомогательныеРЦ, "Свободен");
	
	Если ВспомогательныеРЦСвободны Тогда
		
		Отказ = Ложь;
		КэшироватьДоступныеИнтервалыВспомогательныхРЦ(ПараметрыПодбора, ПараметрыРазмещения, Отказ);
		
		Возврат НЕ Отказ;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;
	
КонецФункции

Процедура ПодобратьВспомогательныеРЦДляОперации(Знач ПараметрыПланирования, Знач Операция, Результат,
		Знач ДоступныйИнтервал, ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	ТаблицаДоступность = ИнициализироватьТаблицуДоступностиВспомогательныхРЦ();
	ВспомогательныеРЦ = ВспомогательныеРЦОперации(ПараметрыПланирования, Операция.ИдентификаторОперации);
	Для каждого РабочийЦентр Из ВспомогательныеРЦ Цикл
		Если ТипЗначенияРабочийЦентр(РабочийЦентр) Тогда
			ПрочитатьДоступностьВспомогательногоРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, РабочийЦентр, ПрямоеРазмещение);
		Иначе
			ПрочитатьДоступностьГруппыВспомогательныхРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, РабочийЦентр, ПрямоеРазмещение);
		КонецЕсли;
	КонецЦикла;
	
	ВсеРЦСвободны = БулевоЗначениеТаблицы(ТаблицаДоступность, "Свободен");
	Если НЕ ВсеРЦСвободны Тогда
		
		Если НЕ ДоступныйИнтервалЗагруженСинхронно(ДоступныйИнтервал) Тогда
			
			ПодобратьДоступныйИнтервалВспомогательныхРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ТаблицаДоступность;
	
КонецПроцедуры

Процедура ПрочитатьДоступностьВспомогательногоРЦ(Знач ПараметрыПланирования, Знач Операция, Результат,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач РабочийЦентр, Знач ПрямоеРазмещение)
	
	Интервалы = ИнтервалыДоступногоВремени(ПараметрыПланирования, РабочийЦентр,
		ИнтервалРазмещения.Начало, ИнтервалРазмещения.Окончание);
	
	ДоступныеИнтервалы = ИнициализироватьТаблицуДоступныеИнтервалыРЦ();
	Если ПрямоеРазмещение Тогда
		
		ПодобратьДоступноеВремяРЦНаИнтервале(
			ПараметрыПланирования,
			РабочийЦентр,
			ИнтервалРазмещения.Начало,
			ДоступныйИнтервал.Окончание,
			ДоступныеИнтервалы,
			Интервалы);
			
	Иначе
			
		ПодобратьДоступноеВремяРЦНаИнтервале(
			ПараметрыПланирования,
			РабочийЦентр,
			ДоступныйИнтервал.Начало,
			ИнтервалРазмещения.Окончание,
			ДоступныеИнтервалы,
			Интервалы);
			
	КонецЕсли;
	
	Свободен = ПериодПринадлежитИнтервалам(
		ПараметрыПланирования, ИнтервалРазмещения.Начало, ИнтервалРазмещения.Окончание, Интервалы);
	
	СтрокаРезультат = Результат.Добавить();
	СтрокаРезультат.РабочийЦентр = РабочийЦентр;
	СтрокаРезультат.Свободен = Свободен;
	СтрокаРезультат.ДоступныеИнтервалы = ДоступныеИнтервалы;
	СтрокаРезультат.ДоступноеВремя = ДоступныеИнтервалы.Итог("Время");
	
КонецПроцедуры

Процедура ПрочитатьДоступностьГруппыВспомогательныхРЦ(Знач ПараметрыПланирования, Знач Операция, Результат,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач ГруппаРабочихЦентров, Знач ПрямоеРазмещение)
		
	ТаблицаДоступность = ИнициализироватьТаблицуДоступностиВспомогательныхРЦ();
	
	РабочиеЦентры = РабочиеЦентрыМаршрута(ПараметрыПланирования, ГруппаРабочихЦентров);
	Для каждого РабочийЦентр Из РабочиеЦентры Цикл
		ПрочитатьДоступностьВспомогательногоРЦ(ПараметрыПланирования, Операция, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, РабочийЦентр, ПрямоеРазмещение);
	КонецЦикла;
	
	ТаблицаДоступность.Сортировать("Свободен Убыв, ДоступноеВремя Убыв");
	
	СтрокаНайдена = Ложь;
	Для каждого Строка Из ТаблицаДоступность Цикл
		Если Строка.Свободен Тогда
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			СтрокаНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаНайдена И ЗначениеЗаполнено(ТаблицаДоступность) Тогда
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаДоступность[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьДоступныйИнтервалВспомогательныхРЦ(Знач ПараметрыПланирования, Знач Операция, ТаблицаДоступность,
		Знач ДоступныйИнтервал, ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	Для каждого Строка Из ТаблицаДоступность Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДоступноеВремя) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если (ПрямоеРазмещение И ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание)
		ИЛИ (НЕ ПрямоеРазмещение И ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало) Тогда
		НовыйИнтервал = ПодобратьДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
			ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
	Иначе
		НовыйИнтервал = ПодобратьДоступныйИнтервалВспомогательныхРЦИдентичнаяДлина(ПараметрыПланирования, ТаблицаДоступность, 
			ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
		Если НовыйИнтервал = Неопределено Тогда
			НовыйИнтервал = ПодобратьДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
				ДоступныйИнтервал, ИнтервалРазмещения, ПрямоеРазмещение);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НовыйИнтервал = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ИнтервалРазмещения, НовыйИнтервал);
		ТаблицаДоступность.ЗаполнитьЗначения(Истина, "Свободен");
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьДоступныйИнтервалВспомогательныхРЦКрайний(Знач ПараметрыПланирования, Знач ТаблицаДоступность,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	Если ПрямоеРазмещение Тогда
		
		Начало = ИнтервалРазмещения.Начало;
		Окончание = ДоступныйИнтервал.Окончание;
		
		Время = ВремяДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
			Начало, Окончание, ПрямоеРазмещение);
		
		Если НЕ ЗначениеЗаполнено(Время) Тогда
			Возврат Неопределено;
		Иначе
			Результат = ИнициализироватьИнтервалРазмещения();
			Результат.Начало = Окончание - Время;
			Результат.Окончание = Окончание;
			Результат.ВремяПлан = Время;
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		
		Начало = ДоступныйИнтервал.Начало;
		Окончание = ИнтервалРазмещения.Окончание ;
				
		Время = ВремяДоступныйИнтервалВспомогательныхРЦКрайний(ПараметрыПланирования, ТаблицаДоступность,
			Начало, Окончание, ПрямоеРазмещение);
		
		Если НЕ ЗначениеЗаполнено(Время) Тогда
			Возврат Неопределено;
		Иначе
			Результат = ИнициализироватьИнтервалРазмещения();
			Результат.Начало = Начало;
			Результат.Окончание = Начало + Время;
			Результат.ВремяПлан = Время;
			Возврат Результат;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

Функция ВремяДоступныйИнтервалВспомогательныхРЦКрайний(Знач ПараметрыПланирования, Знач ТаблицаДоступность,
		Знач Начало, Знач Окончание, Знач ПрямоеРазмещение)
	
	Время = 0;
	
	Если ПрямоеРазмещение Тогда
		
		Для каждого СтрокаДоступностьРЦ Из ТаблицаДоступность Цикл
			ВремяРЦ = 0;
			Для каждого Интервал Из СтрокаДоступностьРЦ.ДоступныеИнтервалы Цикл
				Если Интервал.Окончание = Окончание
					ИЛИ (Интервал.Окончание > Окончание И Интервал.Начало < Окончание) Тогда
					
					Начало = МАКС(Начало, Интервал.Начало);
					Окончание = Окончание;
					ВремяИнтервала = Окончание - Начало;
					
					ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал.СтрокаДоступноеВремя);
					
					ВремяРЦ = МИН(ВремяИнтервала, ДоступноеВремя);
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ВремяРЦ) Тогда
				Возврат Неопределено;
			Иначе
				Если НЕ ЗначениеЗаполнено(Время) Тогда
					Время = ВремяРЦ;
				Иначе
					Время = МИН(Время, ВремяРЦ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаДоступностьРЦ Из ТаблицаДоступность Цикл
			ВремяРЦ = 0;
			Для каждого Интервал Из СтрокаДоступностьРЦ.ДоступныеИнтервалы Цикл
				Если Интервал.Начало = Начало
					ИЛИ (Интервал.Начало < Начало И Интервал.Окончание > Начало) Тогда
					
					Начало = Начало;
					Окончание = МИН(Окончание, Интервал.Окончание);
					ВремяИнтервала = Окончание - Начало;
					
					ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал.СтрокаДоступноеВремя);
					
					ВремяРЦ = МИН(ВремяИнтервала, ДоступноеВремя);
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ВремяРЦ) Тогда
				Возврат Неопределено;
			Иначе
				Если НЕ ЗначениеЗаполнено(Время) Тогда
					Время = ВремяРЦ;
				Иначе
					Время = МИН(Время, ВремяРЦ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

Функция ПодобратьДоступныйИнтервалВспомогательныхРЦИдентичнаяДлина(Знач ПараметрыПланирования, Знач ТаблицаДоступность,
		Знач ДоступныйИнтервал, Знач ИнтервалРазмещения, Знач ПрямоеРазмещение)
	
	Время = ИнтервалРазмещения.Окончание - ИнтервалРазмещения.Начало;
	Если ПрямоеРазмещение Тогда
		Граница = ДоступныйИнтервал.Окончание;
	Иначе
		Граница = ДоступныйИнтервал.Начало;
	КонецЕсли;
	
	Интервал = ПодобратьИдентичныйИнтервалРекурсивно(ПараметрыПланирования, ТаблицаДоступность, Граница, Время,
		ИнтервалРазмещения.Начало, ИнтервалРазмещения.Окончание, Справочники.РабочиеЦентры.ПустаяСсылка(), ПрямоеРазмещение);
	Возврат Интервал;
	
КонецФункции

Функция ПодобратьИдентичныйИнтервалРекурсивно(Знач ПараметрыПланирования, Знач ТаблицаДоступность, Знач Граница,
		Знач Время, Знач Начало, Знач Окончание, Знач РабочийЦентр, Знач ПрямоеРазмещение)
	
	Для каждого СтрокаДоступностьРЦ Из ТаблицаДоступность Цикл
		Если СтрокаДоступностьРЦ.РабочийЦентр = РабочийЦентр Тогда
			Продолжить;
		Иначе
			Свободен = ПериодПринадлежитИнтервалам(
				ПараметрыПланирования, Начало, Окончание,, СтрокаДоступностьРЦ.ДоступныеИнтервалы);
			Если Свободен Тогда
				Продолжить;
			Иначе
				Отказ = Ложь;
				СместитьМоментРазмещаемогоИнтервала(Граница, Время, Начало, Окончание,
					СтрокаДоступностьРЦ.ДоступныеИнтервалы, ПрямоеРазмещение, Отказ);
				Если Отказ Тогда
					Возврат Неопределено;
				Иначе
					
					Свободен = ПериодПринадлежитИнтервалам(
						ПараметрыПланирования, Начало, Окончание,, СтрокаДоступностьРЦ.ДоступныеИнтервалы);
					Если Свободен Тогда
						Возврат ПодобратьИдентичныйИнтервалРекурсивно(ПараметрыПланирования, ТаблицаДоступность, Граница, Время,
							Начало, Окончание, СтрокаДоступностьРЦ.РабочийЦентр, ПрямоеРазмещение);
					Иначе
						Возврат Неопределено;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ИнициализироватьИнтервалРазмещения();
	Результат.Начало = Начало;
	Результат.Окончание = Окончание;
	Результат.ВремяПлан = Время;
	
	Возврат Результат;
	
КонецФункции

Процедура СместитьМоментРазмещаемогоИнтервала(Знач Граница, Знач Время, Начало, Окончание,
		Знач ДоступныеИнтервалы, Знач ПрямоеРазмещение, Отказ)
		
	Для каждого Интервал Из ДоступныеИнтервалы Цикл
		Если ПрямоеРазмещение Тогда
			НовНачало = МАКС(Начало, Интервал.Начало);
			НовОкончание = НовНачало + Время;
			
			Если НовОкончание <= Интервал.Окончание И НовОкончание <= Граница Тогда
				Начало = НовНачало;
				Окончание = НовОкончание;
				Возврат;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			НовОкончание = МИН(Окончание, Интервал.Окончание);
			НовНачало = НовОкончание - Время;
			
			Если НовНачало >= Интервал.Начало И НовНачало >= Граница Тогда
				Начало = НовНачало;
				Окончание = НовОкончание;
				Возврат;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Истина;
	
КонецПроцедуры

Функция ИнициализироватьТаблицуАльтернативныхРЦ()
	
	Параметры = ИнициализироватьПараметрыРазмещения();
	
	Результат = Новый ТаблицаЗначений;
	Для каждого Параметр Из Параметры Цикл
		Результат.Колонки.Добавить(Параметр.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьПараметрыРазмещения()
	
	Результат = Новый Структура;
	Результат.Вставить("РабочийЦентр");
	Результат.Вставить("Начало", 	'00010101');
	Результат.Вставить("Окончание", '00010101');
	Результат.Вставить("Интервалы", Новый Массив);
	Результат.Вставить("КэшДоступныхИнтервалов", ИнициализироватьТаблицуКэшДоступныхИнтервалов());
	Результат.Вставить("ВспомогательныеРЦ", ИнициализироватьТаблицуДоступностиВспомогательныхРЦ());
	Результат.Вставить("КоэфЗагрузки", 0);
	Результат.Вставить("ВремяПереналадки", 0);
	Результат.Вставить("Стоимость", 0);
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьПараметрыПодбораИнтерваловРазмещения(
		ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение)
	
	РазмещатьВспомогательные = ОперацияИмеетВспомогательныеРЦ(ПараметрыПланирования, Операция.ИдентификаторОперации);
	МоментРазмещения = МоментРазмещенияОперации(ПараметрыПланирования, Операция, ПрямоеРазмещение);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Операция", Операция);
	Результат.Вставить("ВариантНаладки", Операция.ВариантНаладки);
	Результат.Вставить("РабочийЦентр", РабочийЦентр);
	Результат.Вставить("ПрямоеРазмещение", ПрямоеРазмещение);
	Результат.Вставить("КоэффициентВремениРаботы", КоэффициентВремениРаботыРЦ(ПараметрыПланирования, РабочийЦентр));
	
	Результат.Вставить("ДоступныйИнтервал", Неопределено);
	Результат.Вставить("ИнтервалРазмещения", Неопределено);
	Результат.Вставить("НедоступныеВспомогательныеРЦ", Новый Массив);
	Результат.Вставить("РазмещатьВспомогательные", РазмещатьВспомогательные);
	Результат.Вставить("МоментРазмещения", МоментРазмещения);
	
	Результат.Вставить("ИндексСледующегоДоступногоИнтарвала", Неопределено);
	
	Результат.Вставить("ПараллельнаяЗагрузка");
	Результат.Вставить("СинхроннаяЗагрузка");
	Результат.Вставить("МаксимальнаяЗагрузка");
	ПараметрыЗагрузки = ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, РабочийЦентр);
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыЗагрузки);
	
	ИсходныеПараметрыПланирования = Новый Структура;
	ИсходныеПараметрыПланирования.Вставить("ДоступноеВремя", ПараметрыПланирования.ДоступноеВремя.Скопировать());
	ИсходныеПараметрыПланирования.Вставить("ЗанятоеВремяПоСменам", ПараметрыПланирования.ЗанятоеВремяПоСменам.Скопировать());
	Результат.Вставить("ИсходныеПараметрыПланирования", ИсходныеПараметрыПланирования);
	
	ИнициализироватьПерезаполняемыеПараметрыПодбораИнтервалов(ПараметрыПланирования, Операция, РабочийЦентр, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьПерезаполняемыеПараметрыПодбораИнтервалов(
		Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр, ПараметрыПодбора)
	
	ПараметрыПодбора.Вставить("ВремяПлан", ОперацияВремяПлан(ПараметрыПланирования, Операция, РабочийЦентр));
	ПараметрыПодбора.Вставить("ВремяПереналадки", 0);
	ПараметрыПодбора.Вставить("ПервыйИнтервал", Истина);
	ПараметрыПодбора.Вставить("ПрерываниеОперацииДопустимо", Неопределено);
	
	ИнициализироватьПараметрыПараллельнойЗагрузки(ПараметрыПланирования, Операция, РабочийЦентр, ПараметрыПодбора);
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыПараллельнойЗагрузки(
		Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр, ПараметрыПодбора)
	
	Если ПараметрыПодбора.ПараллельнаяЗагрузка Тогда
		
		ПараметрыЗагрузки = Новый ТаблицаЗначений;
		ПараметрыЗагрузки.Колонки.Добавить("Загрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ЗагрузкаКратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ВремяПлан", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ВремяПЗ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		ПараметрыЗагрузки.Колонки.Добавить("ТактПараллельнойЗагрузки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ПараметрыЗагрузки.Колонки.Добавить("ДопустимаЗагрузкаВПолученныйДоступныйИнтервал", Новый ОписаниеТипов("Булево"));
		
		НоваяСтрока = ПараметрыЗагрузки.Добавить();
		НоваяСтрока.Загрузка = Операция.Загрузка*Операция.Количество;
		НоваяСтрока.ЗагрузкаКратность = Операция.Загрузка;
		НоваяСтрока.ВремяПлан = ПараметрыПодбора.ВремяПлан;
		НоваяСтрока.ВремяПЗ = ОперацияВремяПЗПараллельнаяЗагрузка(ПараметрыПланирования, Операция, РабочийЦентр);
		НоваяСтрока.ТактПараллельнойЗагрузки = Новый УникальныйИдентификатор;
		НоваяСтрока.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал = Истина;
		
		ПараметрыПодбора.Вставить("ПараметрыПараллельнойЗагрузки", ПараметрыЗагрузки);
		
		ПараметрыПодбора.Вставить("Загрузка", НоваяСтрока.Загрузка);
		ПараметрыПодбора.Вставить("ЗагрузкаКратность", НоваяСтрока.ЗагрузкаКратность);
		ПараметрыПодбора.Вставить("ТактПараллельнойЗагрузки", НоваяСтрока.ТактПараллельнойЗагрузки);
		ПараметрыПодбора.Вставить("ДопустимаЗагрузкаВПолученныйДоступныйИнтервал",
			НоваяСтрока.ДопустимаЗагрузкаВПолученныйДоступныйИнтервал);
		
	Иначе
		
		ПараметрыПодбора.Вставить("ПараметрыПараллельнойЗагрузки", Неопределено);
		
		ПараметрыПодбора.Вставить("Загрузка", 0);
		ПараметрыПодбора.Вставить("ЗагрузкаКратность", 0);
		ПараметрыПодбора.Вставить("ТактПараллельнойЗагрузки", Неопределено);
		ПараметрыПодбора.Вставить("ДопустимаЗагрузкаВПолученныйДоступныйИнтервал", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьИнтервалРазмещения()
	
	Результат = Новый Структура;
	Результат.Вставить("Начало", '00010101');
	Результат.Вставить("Окончание", '00010101');
	Результат.Вставить("ВремяПлан", 0); // Включает в т.ч. время переналадки.
	Результат.Вставить("ВремяПереналадки", 0);
	Результат.Вставить("Загрузка", 0);
	Результат.Вставить("ТактПараллельнойЗагрузки", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьТаблицуКэшДоступныхИнтервалов()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("РабочийЦентр");
	Результат.Колонки.Добавить("Начало");
	Результат.Колонки.Добавить("НачалоСмены");
	Результат.Колонки.Добавить("ВремяСмены");
	
	Результат.Индексы.Добавить("РабочийЦентр, НачалоСмены");
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьТаблицуДоступностиВспомогательныхРЦ()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("РабочийЦентр");
	Результат.Колонки.Добавить("Свободен");
	Результат.Колонки.Добавить("ДоступныеИнтервалы");
	Результат.Колонки.Добавить("ДоступноеВремя");
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьТаблицуДоступныеИнтервалыРЦ()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Начало");
	Результат.Колонки.Добавить("Окончание");
	Результат.Колонки.Добавить("Время");
	Результат.Колонки.Добавить("СтрокаДоступноеВремя");
	
	Возврат Результат;
	
КонецФункции

Функция РабочиеЦентрыМаршрута(ПараметрыПланирования, РабочийЦентрМаршрута)
	
	Возврат РабочиеЦентрыПоЗначениюИзмерения(ПараметрыПланирования, РабочийЦентрМаршрута);
	
КонецФункции

Функция МоментРазмещенияОперации(ПараметрыПланирования, Операция, ПрямоеРазмещение)
	
	Если ПрямоеРазмещение Тогда
		МоментРазмещения = Операция.ДатаЗапуска;
	Иначе
		МоментРазмещения = Операция.ДатаВыпуска;
	КонецЕсли;
	МоментРазмещения = МАКС(МоментРазмещения, ПараметрыПланирования.МоментПланирования);
	
	Возврат МоментРазмещения;
	
КонецФункции

Процедура ЗаполнитьНедоступныеВспомогательныеРЦ(Знач ПараметрыРазмещения, Результат)
	
	Для каждого Строка Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
		Если НЕ Строка.Свободен Тогда
			
			Результат.Добавить(Строка.РабочийЦентр);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьПараметрыРазмещенияИПодбора(ПараметрыПланирования, ПараметрыПодбора, ПараметрыРазмещения)
	
	ПараметрыРазмещения = ИнициализироватьПараметрыРазмещения();
	
	ИнициализироватьПерезаполняемыеПараметрыПодбораИнтервалов(
		ПараметрыПланирования, ПараметрыПодбора.Операция, ПараметрыПодбора.РабочийЦентр, ПараметрыПодбора);
	
	УвеличитьИндексСледующегоДоступногоИнтарвала(ПараметрыПланирования, ПараметрыПодбора);
	
	ВосстановитьИсходныеПараметрыПланирования(ПараметрыПланирования, ПараметрыПодбора);
	
КонецФункции

Процедура УвеличитьИндексСледующегоДоступногоИнтарвала(ПараметрыПланирования, ПараметрыПодбора)
	
	Если ЗначениеЗаполнено(ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала) Тогда
		
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала = ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала + 1;
		Иначе
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала = ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала - 1;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПодбора.ДоступныйИнтервал) Тогда
		
		ТекущийИндекс = ПараметрыПланирования.ДоступноеВремя.Индекс(ПараметрыПодбора.ДоступныйИнтервал);
		Если ПараметрыПодбора.ПрямоеРазмещение Тогда
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала = ТекущийИндекс + 1;
		Иначе
			ПараметрыПодбора.ИндексСледующегоДоступногоИнтарвала = ТекущийИндекс - 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьИсходныеПараметрыПланирования(ПараметрыПланирования, ПараметрыПодбора)
	
	Для каждого Параметр Из ПараметрыПодбора.ИсходныеПараметрыПланирования Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
			ПараметрыПланирования[Параметр.Ключ] = Параметр.Значение.Скопировать();
		Иначе
			ПараметрыПланирования[Параметр.Ключ] = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция МинимальноеВремяОперации()
	
	Возврат 10;	
	
КонецФункции

Функция ПрерываниеОперацииДопустимо(Знач ПараметрыПланирования, ПараметрыПодбора)
	
	Если ПараметрыПодбора.ПрерываниеОперацииДопустимо = Неопределено Тогда
		
		Результат = Истина;
		
		Непрерывная = ПараметрыПодбора.Операция.Непрерывная;
		ВремяОперации = ПараметрыПодбора.ВремяПлан + ПараметрыПодбора.ВремяПереналадки;
		ВремяСмены = ВремяСменыДоступногоИнтервала(ПараметрыПланирования, ПараметрыПодбора.ДоступныйИнтервал);
		
		Если Непрерывная И ВремяОперации <= ВремяСмены Тогда
			Результат = Ложь;
		КонецЕсли;
		
		ПараметрыПодбора.ПрерываниеОперацииДопустимо = Результат;
		
	Иначе
		
		Результат = ПараметрыПодбора.ПрерываниеОперацииДопустимо;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияИмеетВспомогательныеРЦ(Знач ПараметрыПланирования, Знач ИдентификаторОперации)
	
	ВспомогательныеРЦ = ВспомогательныеРЦОперации(ПараметрыПланирования, ИдентификаторОперации);
	Возврат ЗначениеЗаполнено(ВспомогательныеРЦ);
	
КонецФункции

Функция ВспомогательныеРЦОперации(Знач ПараметрыПланирования, Знач ИдентификаторОперации)
	
	Результат = Новый Массив;
	
	УсловиеПоиска = Новый Структура("ИдентификаторОперации", ИдентификаторОперации);
	СтрокиПоиска = ПараметрыПланирования.ВспомогательныеРабочиеЦентры.НайтиСтроки(УсловиеПоиска);
	Для каждого Строка Из СтрокиПоиска Цикл
		Результат.Добавить(Строка.РабочийЦентр);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьОбсуживающиеРЦСвободныНаИнтервале(Знач ПараметрыПланирования, ВспомогательныеРЦ, Знач ИнтервалРазмещения)
	
	Для каждого Строка Из ВспомогательныеРЦ Цикл
		
		Начало = ИнтервалРазмещения.Начало;
		Окончание = ИнтервалРазмещения.Окончание;
		
		Интервалы = ИнтервалыДоступногоВремени(ПараметрыПланирования, Строка.РабочийЦентр, Начало, Окончание);
		
		Если НЕ ЗначениеЗаполнено(Интервалы) Тогда
			Строка.Свободен = Ложь;
		Иначе
			
			Строка.Свободен = ПериодПринадлежитИнтервалам(ПараметрыПланирования, Начало, Окончание, Интервалы);
			
			ДоступныеИнтервалы = ИнициализироватьТаблицуДоступныеИнтервалыРЦ();
			
			ПодобратьДоступноеВремяРЦНаИнтервале(
				ПараметрыПланирования,
				Строка.РабочийЦентр,
				ИнтервалРазмещения.Начало,
				ИнтервалРазмещения.Окончание,
				ДоступныеИнтервалы,
				Интервалы);
				
			Строка.ДоступныеИнтервалы = ДоступныеИнтервалы;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодПринадлежитИнтервалам(Знач ПараметрыПланирования, Знач Начало, Знач Окончание, Знач ДоступноеВремяИнтервалы = Неопределено, Знач ДоступныеИнтервалыРЦ = Неопределено)
		
	Если НЕ ДоступноеВремяИнтервалы = Неопределено Тогда
		Интервалы = ДоступноеВремяИнтервалы;
		ИнтервалыДоступноеВремя = Истина;
	ИначеЕсли НЕ ДоступныеИнтервалыРЦ = Неопределено Тогда
		Интервалы = ДоступныеИнтервалыРЦ;
		ИнтервалыДоступноеВремя = Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ВремяОстаток = Окончание - Начало;
	
	Для каждого Интервал Из Интервалы Цикл
		
		Если (Начало <= Интервал.Начало И Окончание > Интервал.Начало)
			ИЛИ (Окончание >= Интервал.Окончание И Начало < Интервал.Окончание)
			ИЛИ (Начало >= Интервал.Начало И Окончание <= Интервал.Окончание) Тогда
			
			ЗачетНачало = МАКС(Начало, Интервал.Начало);
			ЗачетОкончание = МИН(Окончание, Интервал.Окончание);
			Если ИнтервалыДоступноеВремя Тогда
				ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал);
			Иначе
				ДоступноеВремя = ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, Интервал.СтрокаДоступноеВремя);
			КонецЕсли;
			
			ВремяЗачет = МИН(ДоступноеВремя, (ЗачетОкончание - ЗачетНачало));
			ВремяОстаток = ВремяОстаток - ВремяЗачет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НЕ (ВремяОстаток > 0);
	
КонецФункции

Функция ДоступноеВремяСменыСУчетомЗагрузки(ПараметрыПланирования, ДоступныйИнтервал)
	
	ДопустимаяЗагрузка = ВремяСменыДоступногоИнтервала(ПараметрыПланирования, ДоступныйИнтервал);
	ТекущаяЗагрузка = ЗанятоеВремяСмены(ПараметрыПланирования, ДоступныйИнтервал.РабочийЦентр,
		ДоступныйИнтервал.НачалоСмены);
	
	Результат = ДопустимаяЗагрузка - ТекущаяЗагрузка;
	
	Возврат Результат;
	
КонецФункции

Функция ИнтервалыДоступногоВремени(Знач ПараметрыПланирования, Знач РабочийЦентр,
		Знач ПериодНачало, Знач ПериодОкончание)
    
    Результат = Новый Массив;
	    
    УсловиеПоиска = Новый Структура;
    УсловиеПоиска.Вставить("РабочийЦентр", РабочийЦентр);
    УсловиеПоиска.Вставить("Период");
	
	ПериодПоиска = НачалоДня(ПериодНачало);
	Пока ПериодПоиска < ПериодОкончание Цикл
		
		УсловиеПоиска.Период = ПериодПоиска;
		
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ПараметрыПланирования.ДоступноеВремя, УсловиеПоиска);
		
		Для каждого Строка Из СтрокиПоиска Цикл
			Результат.Добавить(Строка);
		КонецЦикла;
		
		ПериодПоиска = КонецДня(ПериодПоиска)+1;
	КонецЦикла;
	
    Возврат Результат;
	
КонецФункции

Процедура ПодобратьДоступноеВремяРЦНаИнтервале(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач ИнтервалНачало, Знач ИнтервалОкончание, Результат, Знач Интервалы = Неопределено)
		
	Если Интервалы = Неопределено Тогда
		Интервалы = ИнтервалыДоступногоВремени(ПараметрыПланирования, РабочийЦентр, ИнтервалНачало, ИнтервалОкончание);
	КонецЕсли;
	
	Для каждого ДоступныйИнтервал Из Интервалы Цикл
		Если ДоступныйИнтервал.Начало >= ИнтервалОкончание Тогда
			Прервать;
		ИначеЕсли ДоступныйИнтервал.Окончание < ИнтервалНачало Тогда
			Продолжить;
		Иначе
			Если ДоступныйИнтервал.Начало <= ИнтервалНачало И ДоступныйИнтервал.Окончание >= ИнтервалОкончание Тогда
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Начало = ИнтервалНачало;
				НоваяСтрока.Окончание = ИнтервалОкончание;
				НоваяСтрока.Время = ИнтервалОкончание - ИнтервалНачало;
				НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
				
			ИначеЕсли ДоступныйИнтервал.Начало > ИнтервалНачало И ДоступныйИнтервал.Окончание < ИнтервалОкончание Тогда
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Начало = ДоступныйИнтервал.Начало;
				НоваяСтрока.Окончание = ДоступныйИнтервал.Окончание;
				НоваяСтрока.Время = ДоступныйИнтервал.Окончание - ДоступныйИнтервал.Начало;
				НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
					
			ИначеЕсли ДоступныйИнтервал.Начало >= ИнтервалНачало И ДоступныйИнтервал.Начало < ИнтервалОкончание Тогда 
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Начало = ДоступныйИнтервал.Начало;
				НоваяСтрока.Окончание = МИН (ДоступныйИнтервал.Окончание, ИнтервалОкончание);
				НоваяСтрока.Время = НоваяСтрока.Окончание - НоваяСтрока.Начало;
				НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
				
			ИначеЕсли ДоступныйИнтервал.Окончание > ИнтервалНачало И ДоступныйИнтервал.Окончание <= ИнтервалОкончание Тогда
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Начало = МАКС(ДоступныйИнтервал.Начало, ИнтервалНачало);
				НоваяСтрока.Окончание = ДоступныйИнтервал.Окончание;
				НоваяСтрока.Время = НоваяСтрока.Окончание - НоваяСтрока.Начало;
				НоваяСтрока.СтрокаДоступноеВремя = ДоступныйИнтервал;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция БулевоЗначениеТаблицы(Знач Таблица, Знач ИмяКолонки)
	
	Результат = Истина;
	Для каждого Строка Из Таблица Цикл
		Если НЕ Строка[ИмяКолонки] Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьПоказателиРазмещенияОперацииНаРЦ(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	РассчитатьКоэффЗагрузкиРазмещения(ПараметрыПланирования, ПараметрыРазмещения);
	РассчитатьСтоимостьРазмещения(ПараметрыПланирования, ПараметрыРазмещения);
	
КонецПроцедуры

Процедура РассчитатьКоэффЗагрузкиРазмещения(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	ВремяСмен = 0;
	ВремяЗанято = 0;
	
	Для каждого ЗаписьКэша Из ПараметрыРазмещения.КэшДоступныхИнтервалов Цикл
		
		ВремяСмен = ВремяСмен + ЗаписьКэша.ВремяСмены;
		
		ИнтервалЗанято = ЗанятоеВремяСмены(ПараметрыПланирования, ЗаписьКэша.РабочийЦентр, ЗаписьКэша.НачалоСмены);
		ВремяЗанято = ВремяЗанято + ИнтервалЗанято;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВремяСмен) Тогда
		ПараметрыРазмещения.КоэфЗагрузки = ВремяЗанято/ВремяСмен;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСтоимостьРазмещения(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	Стоимость = 0;
	Расценки = РасценкиРабочегоЦентра(ПараметрыПланирования, ПараметрыРазмещения.РабочийЦентр);
	
	Если ЗначениеЗаполнено(Расценки) Тогда
		
		ВремяПереналадки = 0;
		ВремяПлан = 0;
		
		Для каждого Интервал Из ПараметрыРазмещения.Интервалы Цикл
			
			ВремяПереналадки = ВремяПереналадки + Интервал.ВремяПереналадки;
			ВремяПлан = ВремяПлан + (Интервал.ВремяПлан - Интервал.ВремяПереналадки);
			
		КонецЦикла;
		
		СтоимостьРабота = (ВремяПлан/3600) * Расценки.РасценкаРабота;
		СтоимостьПереналадка = (ВремяПереналадки/3600) * Расценки.РасценкаПереналадка;
		Стоимость = СтоимостьРабота + СтоимостьПереналадка;
		
	КонецЕсли;
	
	ПараметрыРазмещения.Стоимость = Стоимость;
	
КонецПроцедуры

Функция РасценкиРабочегоЦентра(Знач ПараметрыПланирования, Знач РабочийЦентр)
	
	СтрокаПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "РабочийЦентр");
	
	Если НЕ СтрокаПоиска = Неопределено Тогда
		
		Результат = Новый Структура("РасценкаРабота, РасценкаПереналадка");
		ЗаполнитьЗначенияСвойств(Результат, СтрокаПоиска);
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура КэшироватьДоступныеИнтервалыВспомогательныхРЦ(Знач ПараметрыПодбора, ПараметрыРазмещения, Отказ)
	
	Для каждого ДанныеВспомогательногоРЦ Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
		
		ДоступныйИнтервал =	ДоступныйИнтервалВспомогательногоРЦ(ДанныеВспомогательногоРЦ.ДоступныеИнтервалы, ПараметрыПодбора.ИнтервалРазмещения);
		
		Если НЕ ДоступныйИнтервал = Неопределено Тогда
			
			КэшироватьДоступныйИнтервал(ПараметрыРазмещения, ДоступныйИнтервал, ПараметрыПодбора.ИнтервалРазмещения);
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КэшироватьДоступныйИнтервал(ПараметрыРазмещения, Знач ДоступныйИнтервал, Знач ИнтервалРазмещения)
	
	КэшДоступныйИнтервал = ПараметрыРазмещения.КэшДоступныхИнтервалов.Добавить();
	ЗаполнитьЗначенияСвойств(КэшДоступныйИнтервал, ДоступныйИнтервал);
	КэшДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало;
	
КонецПроцедуры

Функция ЛучшийРабочийЦентрДляРазмещения(Знач ПараметрыПланирования, ТаблицаАльтернатив, Знач ПравилоВыбораРЦ)
	
	Если ТаблицаАльтернатив.Количество() > 1 Тогда
		
		Если ПараметрыПланирования.СпособЗагрузки = Перечисления.СпособыЗагрузкиВидаРабочегоЦентра.ЗагружатьРавномерно Тогда
			ДопПравило = ",КоэфЗагрузки ВОЗР";
		Иначе
			ДопПравило = ",КоэфЗагрузки УБЫВ";
		КонецЕсли;
		
		Если ПравилоВыбораРЦ = ПравилоРЦНастройкиМодели() Тогда
			
			ТаблицаАльтернатив.Колонки.Добавить("ОценкаВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
			ТаблицаАльтернатив.Колонки.Добавить("ВзвешеннаяОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
			
			РассчитатьОценкуВремениАльтернативныхРЦ(ТаблицаАльтернатив);
			КритерииОценки = КритерииОценкиМоделиПланирования(ПараметрыПланирования);
			РассчитатьВзвешеннуюОценку(ТаблицаАльтернатив, КритерииОценки);
			
			ПравилаСортировки = "ВзвешеннаяОценка ВОЗР" + ДопПравило;
			
		ИначеЕсли ПравилоВыбораРЦ = ПравилоРЦМинимизироватьПереналадки() Тогда
			
			ПравилаСортировки = "ВремяПереналадки ВОЗР" + ДопПравило;
			
		КонецЕсли;
		
		ТаблицаАльтернатив.Сортировать(ПравилаСортировки);
		
	КонецЕсли;
	
	Возврат ТаблицаАльтернатив[0];
	
КонецФункции

Процедура РассчитатьОценкуВремениАльтернативныхРЦ(ТаблицаАльтернатив)
	
	НачальнаяТочка = '00010101';
	Для каждого Строка Из ТаблицаАльтернатив Цикл
		НачальнаяТочка = ?(ЗначениеЗаполнено(НачальнаяТочка), МИН(НачальнаяТочка, Строка.Начало), Строка.Начало);
	КонецЦикла;
	
	МинОтклонение = 0;
	Для каждого Строка Из ТаблицаАльтернатив Цикл
		Отклонение = Строка.Окончание - НачальнаяТочка;
		Строка.ОценкаВремя = Отклонение;
		МинОтклонение = ?(ЗначениеЗаполнено(МинОтклонение), МИН(МинОтклонение, Отклонение), Отклонение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МинОтклонение) Тогда
		Для каждого Строка Из ТаблицаАльтернатив Цикл
			Строка.ОценкаВремя = Строка.ОценкаВремя/МинОтклонение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредшествующийВариантНаладки(Знач ПараметрыПланирования, Знач ТекущийИнтервал)
	
	Результат = Неопределено;
	
	Если ТекущийИнтервал.ПредшествуетЗагрузка Тогда
		
		Результат = ТекущийИнтервал.ВариантНаладкиПредшествует;
		
	Иначе
		
		ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
		ТекущийИндекс = ДоступноеВремя.Индекс(ТекущийИнтервал);
		
		Пока Истина Цикл
			
			ТекущийИндекс = ТекущийИндекс - 1;
			Если НЕ ТекущийИндекс = -1 Тогда
				
				ПредшествующийИнтервал = ДоступноеВремя[ТекущийИндекс];
				Если ПредшествующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр Тогда
					
					Если ПредшествующийИнтервал.ПредшествуетЗагрузка Тогда
						Результат = ПредшествующийИнтервал.ВариантНаладкиПредшествует;
						Прервать;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АлгоритмыСтадийПланирования

Функция ОперацииТактаПланирования(Знач ПараметрыПланирования, Знач ВидРабочегоЦентра, Знач ПриоритетМаршрута)
	
	УсловиеПоиска = Новый Структура;
	УсловиеПоиска.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
	УсловиеПоиска.Вставить("ПриоритетМаршрута", ПриоритетМаршрута);
	УсловиеПоиска.Вставить("Размещать", Истина);
	УсловиеПоиска.Вставить("Размещена", Ложь);
	УсловиеПоиска.Вставить("ЗависитОтПредшествующих", Ложь);
	
	Возврат ПараметрыПланирования.ТаблицаОпераций.НайтиСтроки(УсловиеПоиска);
	
КонецФункции

Функция ПерезаполняемыеПараметрыПланирования(Знач ПараметрыПланирования)
	
	Результат = Новый Структура;
	
	ИменаПараметров = ИменаПерезаполняемыхПараметровПланирования();
	Для каждого Параметр Из ИменаПараметров Цикл
		Если ПараметрыПланирования.Свойство(Параметр) Тогда
			ЗначениеПараметра = ПараметрыПланирования[Параметр];
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
				Результат.Вставить(Параметр, ЗначениеПараметра.Скопировать());
			Иначе
				Результат.Вставить(Параметр, ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПерезаполнитьПараметрыПланирования(ПараметрыПланирования, Знач ПерезаполняемыеПараметры)
	
	Для каждого Параметр Из ПерезаполняемыеПараметры Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
			ПараметрыПланирования.Вставить(Параметр.Ключ, Параметр.Значение.Скопировать());
		Иначе
			ПараметрыПланирования.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаПерезаполняемыхПараметровПланирования()
	
	Результат = Новый Массив;
	
	Результат.Добавить("ТаблицаОпераций");
	Результат.Добавить("ЗанятоеВремяПоСменам");
	
	Результат.Добавить("МежоперационныеПереходы");
	Результат.Добавить("ТаблицаРасписание");
	
	Результат.Добавить("ТаблицаРабочихЦентров");
	Результат.Добавить("РангиРабочихЦентров");
	
	Результат.Добавить("ДоступноеВремя");
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещения, ИнтервалРазмещения)
	
	СтрокаЗагрузки = ПараметрыПланирования.ТаблицаРасписание.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, Операция);
	ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, ПараметрыРазмещения);
	ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, ИнтервалРазмещения);
	
КонецФункции

Процедура ЗаполнитьОбщиеСвойстваРазмещения(Знач ПараметрыПланирования, ПараметрыРазмещения)
	
	ПараметрыРазмещения.Вставить("Вспомогательная", Ложь);
	ПараметрыРазмещения.Вставить("ЭтоПереналадка", Ложь);
	ПараметрыРазмещения.Вставить("МодельПланирования", ПараметрыПланирования.МодельПланирования);
	
КонецПроцедуры

Процедура РазместитьВспомогательныеОперации(Знач ПараметрыПланирования, Знач Операция,
		Знач ПараметрыРазмещения, Знач ИнтервалРазмещения)
	
	ПараметрыРазмещенияОбсл = ПараметрыРазмещенияВспомогательныхРЦ(ПараметрыПланирования, ПараметрыРазмещения);
	ИнтервалРазмещенияОбсл = ИнтервалРазмещенияВспомогательныхРЦ(ИнтервалРазмещения);
	
	Для каждого ДанныеВспомогательногоРЦ Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыРазмещенияОбсл, ДанныеВспомогательногоРЦ);
		ДобавитьЗаписьЗагрузки(ПараметрыПланирования, Операция, ПараметрыРазмещенияОбсл, ИнтервалРазмещенияОбсл);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыРазмещенияВспомогательныхРЦ(ПараметрыПланирования, ПараметрыРазмещенияОсн)
	
	Результат = ИнициализироватьПараметрыРазмещения();
	
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыРазмещенияОсн);
	ЗаполнитьОбщиеСвойстваРазмещения(ПараметрыПланирования, Результат);
	
	Результат.Вспомогательная = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныйИнтервалВспомогательногоРЦ(Знач ДоступныеИнтервалы, Знач ИнтервалРазмещенияОсн)
	
	Результат = Неопределено;
	
	Для каждого Интервал Из ДоступныеИнтервалы Цикл
		
		Если Интервал.Начало <= ИнтервалРазмещенияОсн.Начало
			И Интервал.Окончание >= ИнтервалРазмещенияОсн.Окончание Тогда
			
			Результат = Интервал.СтрокаДоступноеВремя;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнтервалРазмещенияВспомогательныхРЦ(Знач ИнтервалРазмещения)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ИнтервалРазмещения);
	Результат.ВремяПереналадки = 0;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьНеразмещеннуюОперацию(ПараметрыПланирования, Знач Операция, Знач ПрямоеРазмещение)
	
	Операция.Размещать = Ложь;
	ОтменитьРазмещениеДочернихОперацийРекурсивно(ПараметрыПланирования, Операция, ПрямоеРазмещение);
	
КонецПроцедуры

Процедура ОтменитьРазмещениеДочернихОперацийРекурсивно(ПараметрыПланирования, Знач ОперацияРодитель, Знач ПрямоеРазмещение)
	
	ДочерниеОперации = СвязанныеОперации(ПараметрыПланирования, ОперацияРодитель.ИдентификаторОперации, Истина, ПрямоеРазмещение);
	
	Для каждого ДочерняяОперация Из ДочерниеОперации Цикл
		
		Если ДочерняяОперация.МаршрутныйЛист = ОперацияРодитель.МаршрутныйЛист Тогда
			
			Если НЕ ДочерняяОперация.Размещена И ДочерняяОперация.Размещать Тогда
				
				ДочерняяОперация.Размещать = Ложь;
				ОтменитьРазмещениеДочернихОперацийРекурсивно(ПараметрыПланирования, ДочерняяОперация, ПрямоеРазмещение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьДоступноеВремя(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки)
	
	ЗанятыйИнтервалВремя = ИнтервалРазмещения.ВремяПлан;
	Если ЗанятыйИнтервалВремя = ДоступныйИнтервал.Время Тогда
		
		ЗачестьЗагрузкуИдентичныйИнтервал(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки);
		
	Иначе
		Если ДоступныйИнтервал.Начало = ИнтервалРазмещения.Начало Тогда
			
			ЗачестьЗагрузкуИнтервалСлева(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки);
			
		ИначеЕсли ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Окончание Тогда
			
			ЗачестьЗагрузкуИнтервалСправа(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки);
			
		Иначе
			
			ЗачестьЗагрузкуИнтервалВнутри(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИдентичныйИнтервал(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки)
	
	Если НЕ ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступныйИнтервал.Время = 0;
		ПустыеИнтервалы.Добавить(ДоступныйИнтервал);
		
	Иначе
		
		ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		ДоступныйИнтервал.ВариантНаладки = Операция.ВариантНаладки;
		
		Если ДоступныйИнтервал.СинхроннаяЗагрузка Тогда
			
			ДоступныйИнтервал.ПолноеВремяСинхроннойЗагрузкиБезПереналадки = ОперацияВремяПлан(
				ПараметрыПланирования, Операция, ДоступныйИнтервал.РабочийЦентр);
			ДоступныйИнтервал.НачалоСинхроннойЗагрузки = НачалоЗагрузки;
			
		КонецЕсли;
		
		Если ДоступныйИнтервал.ДоступнаяЗагрузка = 0 Тогда
			
			ДоступныйИнтервал.Время = 0;
			ПустыеИнтервалы.Добавить(ДоступныйИнтервал);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИсправитьПредшествующийИнтервалДоступногоВремени(ПараметрыПланирования.ДоступноеВремя, Операция, ДоступныйИнтервал);
	ИсправитьПоследующийИнтервалДоступногоВремени(ПараметрыПланирования.ДоступноеВремя, Операция, ДоступныйИнтервал);
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИнтервалСлева(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	
	ДоступныйИнтервал.Начало = ИнтервалРазмещения.Окончание;
	ДоступныйИнтервал.Время = ДоступныйИнтервал.Время - ИнтервалРазмещения.ВремяПлан;
		
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если НЕ ДоступнаяЗагрузка = 0 Тогда
			
			ИнтервалДоТекущего = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал));
			ЗаполнитьЗначенияСвойств(ИнтервалДоТекущего, ДоступныйИнтервал);
			ИнтервалДоТекущего.Начало = ИнтервалРазмещения.Начало;
			ИнтервалДоТекущего.Окончание = ИнтервалРазмещения.Окончание;
			ИнтервалДоТекущего.Время = ИнтервалРазмещения.ВремяПлан;
			ИнтервалДоТекущего.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
			ИнтервалДоТекущего.ВариантНаладки = Операция.ВариантНаладки;
			
			Если ДоступныйИнтервал.СинхроннаяЗагрузка Тогда
				
				ИнтервалДоТекущего.ПолноеВремяСинхроннойЗагрузкиБезПереналадки = ОперацияВремяПлан(
					ПараметрыПланирования, Операция, ДоступныйИнтервал.РабочийЦентр);
				ИнтервалДоТекущего.НачалоСинхроннойЗагрузки = НачалоЗагрузки;
					
			КонецЕсли;
			
			ИнтервалДоТекущего.СледуетЗагрузка = НЕ(ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ИнтервалДоТекущего.ВариантНаладкиСледует = ДоступныйИнтервал.ВариантНаладки;
			
			ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ИнтервалДоТекущего);
			
		Иначе
			ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
		КонецЕсли;
		
	Иначе
		ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
	КонецЕсли;
	
	УстановитьИнтервалуФлагПредшествуетЗагрузка(ДоступныйИнтервал, Операция);
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИнтервалСправа(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	
	ДоступныйИнтервал.Окончание = ИнтервалРазмещения.Начало;
	ДоступныйИнтервал.Время = ДоступныйИнтервал.Время - ИнтервалРазмещения.ВремяПлан;
	
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если НЕ ДоступнаяЗагрузка = 0 Тогда
			
			ИнтервалПослеТекущего = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал)+1);
			ЗаполнитьЗначенияСвойств(ИнтервалПослеТекущего, ДоступныйИнтервал);
			ИнтервалПослеТекущего.Начало = ИнтервалРазмещения.Начало;
			ИнтервалПослеТекущего.Окончание = ИнтервалРазмещения.Окончание;
			ИнтервалПослеТекущего.Время = ИнтервалРазмещения.ВремяПлан;
			ИнтервалПослеТекущего.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
			ИнтервалПослеТекущего.ВариантНаладки = Операция.ВариантНаладки;
			
			Если ДоступныйИнтервал.СинхроннаяЗагрузка Тогда
				
				ИнтервалПослеТекущего.ПолноеВремяСинхроннойЗагрузкиБезПереналадки = ОперацияВремяПлан(
					ПараметрыПланирования, Операция, ДоступныйИнтервал.РабочийЦентр);
				ИнтервалПослеТекущего.НачалоСинхроннойЗагрузки = НачалоЗагрузки;
				
			КонецЕсли;
			
			ИнтервалПослеТекущего.ПредшествуетЗагрузка = НЕ(ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ИнтервалПослеТекущего.ВариантНаладкиПредшествует = ДоступныйИнтервал.ВариантНаладки;
			
			ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ИнтервалПослеТекущего);
			
		Иначе
			ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
		КонецЕсли;
		
	Иначе
		ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Операция, ДоступныйИнтервал);
	КонецЕсли;
	
	УстановитьИнтервалуФлагСледуетЗагрузка(ДоступныйИнтервал, Операция);
	
КонецПроцедуры

Процедура ЗачестьЗагрузкуИнтервалВнутри(ПараметрыПланирования, Операция, ДоступныйИнтервал, ПустыеИнтервалы, ИнтервалРазмещения, НачалоЗагрузки)
	
	ДоступноеВремя = ПараметрыПланирования.ДоступноеВремя;
	
	ИнтервалДоЗанятого = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал));
	ЗаполнитьЗначенияСвойств(ИнтервалДоЗанятого, ДоступныйИнтервал);
	ИнтервалДоЗанятого.Окончание = ИнтервалРазмещения.Начало;
	ИнтервалДоЗанятого.Время = ИнтервалДоЗанятого.Окончание - ИнтервалДоЗанятого.Начало;
	УстановитьИнтервалуФлагСледуетЗагрузка(ИнтервалДоЗанятого, Операция);
	
	Если ДоступныйИнтервал.ПараллельнаяЗагрузка Тогда
		
		ДоступнаяЗагрузка = ДоступныйИнтервал.ДоступнаяЗагрузка - ИнтервалРазмещения.Загрузка;
		Если НЕ ДоступнаяЗагрузка = 0 Тогда
			
			ЗагруженныйИнтервал = ДоступноеВремя.Вставить(ДоступноеВремя.Индекс(ДоступныйИнтервал));
			ЗаполнитьЗначенияСвойств(ЗагруженныйИнтервал, ДоступныйИнтервал);
			ЗагруженныйИнтервал.Начало = ИнтервалРазмещения.Начало;
			ЗагруженныйИнтервал.Окончание = ИнтервалРазмещения.Окончание;
			ЗагруженныйИнтервал.Время = ИнтервалРазмещения.ВремяПлан;
			ЗагруженныйИнтервал.ДоступнаяЗагрузка = ДоступнаяЗагрузка;
			ЗагруженныйИнтервал.ВариантНаладки = Операция.ВариантНаладки;
			
			Если ДоступныйИнтервал.СинхроннаяЗагрузка Тогда
				
				ЗагруженныйИнтервал.ПолноеВремяСинхроннойЗагрузкиБезПереналадки = ОперацияВремяПлан(
					ПараметрыПланирования, Операция, ДоступныйИнтервал.РабочийЦентр);
				ЗагруженныйИнтервал.НачалоСинхроннойЗагрузки = НачалоЗагрузки;
				
			КонецЕсли;
			
			ЗагруженныйИнтервал.ПредшествуетЗагрузка = НЕ(ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ЗагруженныйИнтервал.ВариантНаладкиПредшествует = ДоступныйИнтервал.ВариантНаладки;
			ЗагруженныйИнтервал.СледуетЗагрузка = НЕ(ДоступныйИнтервал.ДоступнаяЗагрузка = ДоступныйИнтервал.МаксимальнаяЗагрузка);
			ЗагруженныйИнтервал.ВариантНаладкиСледует = ДоступныйИнтервал.ВариантНаладки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтервалПослеЗанятого = ДоступныйИнтервал;
	ИнтервалПослеЗанятого.Начало = ИнтервалРазмещения.Окончание;
	ИнтервалПослеЗанятого.Время = ИнтервалПослеЗанятого.Окончание - ИнтервалПослеЗанятого.Начало;
	УстановитьИнтервалуФлагПредшествуетЗагрузка(ИнтервалПослеЗанятого, Операция);
	
КонецПроцедуры

Процедура ОтразитьЗанятоеВремяПоСменам(ПараметрыПланирования, Знач ДоступныйИнтервал, Знач РабочийЦентр, Знач Время)
	
	ТаблицаЗанятоеВремя = ПараметрыПланирования.ЗанятоеВремяПоСменам;
	УсловиеПоиска = Новый Структура("РабочийЦентр, НачалоСмены", РабочийЦентр, ДоступныйИнтервал.НачалоСмены);
	
	СтрокиПоиска = ТаблицаЗанятоеВремя.НайтиСтроки(УсловиеПоиска);
	Если НЕ ЗначениеЗаполнено(СтрокиПоиска) Тогда
		
		НоваяСтрока = ТаблицаЗанятоеВремя.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДоступныйИнтервал);
		НоваяСтрока.РабочийЦентр = РабочийЦентр;
		НоваяСтрока.ВремяЗанято = Время;
		
	Иначе
		
		НайденнаяСтрока = СтрокиПоиска[0];
		НайденнаяСтрока.ВремяЗанято = НайденнаяСтрока.ВремяЗанято + Время;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьПредшествующийИнтервалДоступногоВремени(ДоступноеВремя, Знач Операция, Знач ТекущийИнтервал)
	
	ИндексПредшествующего = ДоступноеВремя.Индекс(ТекущийИнтервал) - 1;
	
	Если ИндексПредшествующего >= 0 Тогда
		
		ПредшествующийИнтервал = ДоступноеВремя[ИндексПредшествующего];
		
		Если ПредшествующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр
			И НЕ ПредшествующийИнтервал.СледуетЗагрузка Тогда
			
			УстановитьИнтервалуФлагСледуетЗагрузка(ПредшествующийИнтервал, Операция);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьПоследующийИнтервалДоступногоВремени(ДоступноеВремя, Знач Операция, Знач ТекущийИнтервал)
	
	ИндексСледующего = ДоступноеВремя.Индекс(ТекущийИнтервал) + 1;
	
	Если ИндексСледующего < ДоступноеВремя.Количество() Тогда
		
		СледующийИнтервал = ДоступноеВремя[ИндексСледующего];
		
		Если СледующийИнтервал.РабочийЦентр = ТекущийИнтервал.РабочийЦентр
			И НЕ СледующийИнтервал.ПредшествуетЗагрузка Тогда
			
			УстановитьИнтервалуФлагПредшествуетЗагрузка(СледующийИнтервал, Операция);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИнтервалуФлагСледуетЗагрузка(Интервал, Знач Операция)
	
	Интервал.СледуетЗагрузка = Истина;
	Интервал.ВариантНаладкиСледует = Операция.ВариантНаладки;
	
КонецПроцедуры

Процедура УстановитьИнтервалуФлагПредшествуетЗагрузка(Интервал, Знач Операция)
	
	Интервал.ПредшествуетЗагрузка = Истина;
	Интервал.ВариантНаладкиПредшествует = Операция.ВариантНаладки;
	
КонецПроцедуры

Процедура УдалитьПустыеИнтервалыДоступногоВремени(ПараметрыПланирования, ПустыеИнтервалы)
	
	Для каждого Интервал Из ПустыеИнтервалы Цикл
		ПараметрыПланирования.ДоступноеВремя.Удалить(Интервал);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыделитьИзИнтервалаВремяПереналадки(Знач ИнтервалРазмещения)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ИнтервалРазмещения);
	
	Если ИнтервалРазмещения.ВремяПереналадки < ИнтервалРазмещения.ВремяПлан Тогда
		Результат.Окончание = ИнтервалРазмещения.Начало + ИнтервалРазмещения.ВремяПереналадки;
		Результат.ВремяПлан = ИнтервалРазмещения.ВремяПереналадки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыделитьИзИнтервалаВремяОсновное(Знач ИнтервалРазмещения)
	
	Результат = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Результат, ИнтервалРазмещения);
	
	Результат.Начало = ИнтервалРазмещения.Начало + ИнтервалРазмещения.ВремяПереналадки;
	Результат.ВремяПлан = ИнтервалРазмещения.ВремяПлан - ИнтервалРазмещения.ВремяПереналадки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗанятоеВремяСмены(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач НачалоСмены)
	
	УсловиеПоиска = Новый Структура;
	УсловиеПоиска.Вставить("РабочийЦентр", РабочийЦентр);
	УсловиеПоиска.Вставить("НачалоСмены", НачалоСмены);
	
	СтрокиПоиска = ПараметрыПланирования.ЗанятоеВремяПоСменам.НайтиСтроки(УсловиеПоиска);
	Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
		Результат = СтрокиПоиска[0].ВремяЗанято;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияВремяПлан(Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр = Неопределено)
	
	РабочийЦентрДляПоиска = ?(ЗначениеЗаполнено(РабочийЦентр), РабочийЦентр, Операция.РабочийЦентрМаршрута);
	
	Если ТипЗначенияРабочийЦентр(РабочийЦентрДляПоиска) Тогда
		
		Результат = ВремяСПоправкойНаКоэфВремениРаботы(
			ПараметрыПланирования, РабочийЦентрДляПоиска, Операция.ВремяРазместить);
		
	Иначе
		
		Результат = Операция.ВремяРазместить;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияВремяПЗПараллельнаяЗагрузка(Знач ПараметрыПланирования, Знач Операция, Знач РабочийЦентр = Неопределено)
	
	РабочийЦентрДляПоиска = ?(ЗначениеЗаполнено(РабочийЦентр), РабочийЦентр, Операция.РабочийЦентрМаршрута);
	
	Если ТипЗначенияРабочийЦентр(РабочийЦентрДляПоиска) Тогда
		
		Результат = ВремяСПоправкойНаКоэфВремениРаботы(
			ПараметрыПланирования, РабочийЦентрДляПоиска, Операция.ВремяПЗПараллельнаяЗагрузка);
		
	Иначе
		
		Результат = Операция.ВремяПЗПараллельнаяЗагрузка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяСПоправкойНаКоэфВремениРаботы(Знач ПараметрыПланирования, Знач РабочийЦентр, Знач Время)
	
	Коэф = КоэффициентВремениРаботыРЦ(ПараметрыПланирования, РабочийЦентр);
	Возврат ОКР(Время * Коэф);
	
КонецФункции

Функция КоэффициентВремениРаботыРЦ(ПараметрыПланирования, РабочийЦентр)
	
	СтрокаПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "РабочийЦентр");
	
	Если НЕ СтрокаПоиска = Неопределено Тогда
		Результат = ?(ЗначениеЗаполнено(СтрокаПоиска.КоэффициентВремениРаботы), СтрокаПоиска.КоэффициентВремениРаботы, 1)
	Иначе
		Результат = 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИсправитьДочерниеОперацииПослеРазмещенияРодительской(ПараметрыПланирования, Операция,
		Знач ПараметрыРазмещения, Знач ПрямоеРазмещение)
	
	ДочерниеОперации = СвязанныеОперации(ПараметрыПланирования, Операция.ИдентификаторОперации, Истина, ПрямоеРазмещение);
	
	Для каждого ДочерняяОперация Из ДочерниеОперации Цикл
		
		ДочерняяОперация.ЗависитОтПредшествующих =
			НЕ РодительскиеОперацииРазмещены(ПараметрыПланирования, ДочерняяОперация, ПрямоеРазмещение);
		
		Если ПрямоеРазмещение Тогда
			ДочерняяОперация.ДатаЗапуска = ДатаЗапускаДочернейОперации(
				ПараметрыПланирования, Операция, ПараметрыРазмещения.Окончание, ДочерняяОперация);
		Иначе
			ДочерняяОперация.ДатаВыпуска = ДатаВыпускаДочернейОперации(
				ПараметрыПланирования, Операция, ПараметрыРазмещения.Начало, ДочерняяОперация);
		КонецЕсли;
		
		ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
			ПараметрыПланирования, Операция, ДочерняяОперация, ПараметрыРазмещения.РабочийЦентр, ПрямоеРазмещение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РодительскиеОперацииРазмещены(Знач ПараметрыПланирования, Знач Операция, Знач ПрямоеРазмещение)
	
	Результат = Истина;
	
	РодительскиеОперации = СвязанныеОперации(
		ПараметрыПланирования, Операция.ИдентификаторОперации, Ложь, ПрямоеРазмещение);
	
	Для каждого РодительскаяОперация Из РодительскиеОперации Цикл
		
		Если НЕ РодительскаяОперация.Размещена Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьВариантыРасписания(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = НовыйОбъектВариантыРасписания();
	
	Если Операции.Количество() = 1 Тогда
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Операции = Операции;
		НоваяСтрока.Расписание = НовыйОбъектРасписаниеВарианта();
		НоваяСтрока.ПравилоВыбораРЦ = ПравилоРЦНастройкиМодели();
		
	Иначе
		
		ОчередьОпераций = ОчередьОпераций(ПараметрыПланирования, Операции);
		
		ПравилаОперации = ПравилаОчередиОпераций(ОчередьОпераций);
		ПравилаРЦ = ПравилаВыбораРЦ(ПараметрыПланирования, Операции);
		
		Для каждого ПравилоОперации Из ПравилаОперации Цикл
			
			ОперацииУп = ОперацииОчередиУпорядоченныеПоПравилу(ОчередьОпераций, ПравилоОперации);
			
			Для каждого ПравилоРЦ Из ПравилаРЦ Цикл
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Операции = ОперацииУп;
				НоваяСтрока.Расписание = НовыйОбъектРасписаниеВарианта();
				НоваяСтрока.ПравилоВыбораРЦ = ПравилоРЦ;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацииИмеютРазличныеВариантыНаладки(Операции)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Операции) Тогда
		
		ТекущийВН = Операции[0].ВариантНаладки;
		Для каждого Операция Из Операции Цикл
			Если НЕ Операция.ВариантНаладки = ТекущийВН Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйОбъектВариантыРасписания()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Операции", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Расписание", Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Колонки.Добавить("ПравилоВыбораРЦ", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	
	Возврат Результат;
	
КонецФункции

Функция ОчередьОпераций(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = ИнициализироватьОчередьОпераций();
	
	Для каждого Операция Из Операции Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Операция);
		НоваяСтрока.Операция = Операция;
	КонецЦикла;
	
	НесколькоВН = ОперацииИмеютРазличныеВариантыНаладки(Операции);
	Если НесколькоВН Тогда
		
		ЗаполнитьДанныеЦепочекВОчередиОпераций(ПараметрыПланирования, Результат);
		
	Иначе
		
		Для каждого Строка Из Результат Цикл
			Строка.ДатаЗапускаЦепочка = Строка.ДатаЗапуска;
			Строка.ВремяРазместитьЦепочка = Строка.ВремяРазместить;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьОчередьОпераций()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Результат.Колонки.Добавить("НомерЦепочки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Результат.Колонки.Добавить("ВариантНаладки", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	Результат.Колонки.Добавить("ДатаЗапуска", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ДатаЗапускаЦепочка", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ВремяРазместить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Результат.Колонки.Добавить("ВремяРазместитьЦепочка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));

	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеЦепочекВОчередиОпераций(Знач ПараметрыПланирования, ОчередьОпераций)
	
	ОчередьОпераций.Сортировать("ДатаЗапуска Возр, ВремяРазместить Возр");
	
	НомерЦепочки = 1;
	
	Для каждого Операция Из ОчередьОпераций Цикл
		
		Если НЕ ЗначениеЗаполнено(Операция.НомерЦепочки) Тогда
			
			ОперацииЦепочки = ОперацииЦепочки(ОчередьОпераций, Операция);
			
			ВремяРазместитьЦепочка = 0;
			Для каждого ОперацияЦепочки Из ОперацииЦепочки Цикл
				ВремяРазместитьЦепочка = ВремяРазместитьЦепочка + ОперацияЦепочки.ВремяРазместить;
			КонецЦикла;
							
			Для каждого ОперацияЦепочки Из ОперацииЦепочки Цикл
				ОперацияЦепочки.НомерЦепочки = НомерЦепочки;
				ОперацияЦепочки.ДатаЗапускаЦепочка = Операция.ДатаЗапуска;
				ОперацияЦепочки.ВремяРазместитьЦепочка = ВремяРазместитьЦепочка;
			КонецЦикла;
			
		    НомерЦепочки = НомерЦепочки + 1;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОперацииЦепочки(Знач ОчередьОпераций, Знач ПерваяОперация)
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПерваяОперация);
	ЗавершениеЦепочки = ПерваяОперация.ДатаЗапуска + ПерваяОперация.ВремяРазместить;
	
	Для Индекс = ОчередьОпераций.Индекс(ПерваяОперация)+1 По ОчередьОпераций.Количество()-1 Цикл
		
		СледующаяОперация = ОчередьОпераций[Индекс];
		
		Если СледующаяОперация.ДатаЗапуска <= ЗавершениеЦепочки Тогда
			
			Если СледующаяОперация.ВариантНаладки = ПерваяОперация.ВариантНаладки Тогда
				
				Результат.Добавить(СледующаяОперация);
				
				ЗавершениеСледующей = СледующаяОперация.ДатаЗапуска + СледующаяОперация.ВремяРазместить;
				ЗавершениеЦепочки = МАКС(ЗавершениеЦепочки, ЗавершениеСледующей);
				
			КонецЕсли;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацииОчередиУпорядоченныеПоПравилу(ОчередьОпераций, Знач Правило)
	
	Если Правило = ПравилоОпДатаЗапускаВозр() Тогда
		ПоляСортировки = "ДатаЗапускаЦепочка ВОЗР, ВариантНаладки, ДатаЗапуска ВОЗР";
	ИначеЕсли Правило = ПравилоОпБольшиеЗатемМаленькие() Тогда
		ПоляСортировки = "ВремяРазместитьЦепочка УБЫВ, ДатаЗапускаЦепочка ВОЗР, ВариантНаладки, ДатаЗапуска ВОЗР";
	Иначе
		ПоляСортировки = "ДатаЗапускаЦепочка ВОЗР, ВариантНаладки, ДатаЗапуска ВОЗР";
	КонецЕсли;
	
	ОчередьОпераций.Сортировать(ПоляСортировки);
	
	Результат = Новый Массив;
	Для каждого Строка Из ОчередьОпераций Цикл
		Результат.Добавить(Строка.Операция);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйОбъектРасписаниеВарианта()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Операция", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Результат.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ПараметрыРазмещения", Новый ОписаниеТипов("Структура"));
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	Результат.Колонки.Добавить("ОценкаВремя", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	Результат.Колонки.Добавить("Стоимость", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	Результат.Индексы.Добавить("ИдентификаторОперации");
	
	Возврат Результат;
	
КонецФункции

Функция ЛучшийВариантРасписания(Знач ПараметрыПланирования, Знач ВариантыРасписания)
	
	Если ВариантыРасписания.Количество() = 1 Тогда
		
		Возврат ВариантыРасписания[0];
		
	Иначе
		
		РассчитатьОценкуВремениВариантовРасписания(ВариантыРасписания);
		
		ТаблицаОценки = ТаблицаОценкиВариантовРасписания(ВариантыРасписания);
		КритерииОценки = КритерииОценкиМоделиПланирования(ПараметрыПланирования);
		РассчитатьВзвешеннуюОценку(ТаблицаОценки, КритерииОценки);
		
		ТаблицаОценки.Сортировать("ВзвешеннаяОценка Возр");
		
		Возврат ВариантыРасписания[ТаблицаОценки[0].Индекс];
		
	КонецЕсли;
	
КонецФункции

Процедура ДублироватьПараметрыПланирования(ПараметрыПланирования, Знач Операции, Знач ВидРабочегоЦентра)
	
	ПараметрыПланирования.Вставить("ДублированныеПараметры", Новый Структура);
	
	ВспомогательныеВРЦ = ВидыВспомогательныхРабочихЦентровОпераций(ПараметрыПланирования, Операции);
	
	ДублироватьДоступноеВремя(ПараметрыПланирования, ВидРабочегоЦентра, ВспомогательныеВРЦ);
	ДублироватьЗанятоеВремяПоСменам(ПараметрыПланирования, ВидРабочегоЦентра, ВспомогательныеВРЦ);
	
КонецПроцедуры

Процедура ДублироватьДоступноеВремя(ПараметрыПланирования, Знач ОсновнойВРЦ, Знач ВспомогательныеВРЦ)
	
	УсловиеПоиска = Новый Структура("ВидРабочегоЦентра", ОсновнойВРЦ);
	
	ТаблицаИсх = ПараметрыПланирования.ДоступноеВремя;
	ПараметрыПланирования.ДублированныеПараметры.Вставить("ДоступноеВремя", ТаблицаИсх);
	
	ТаблицаДубль = ТаблицаИсх.Скопировать(НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска));
	
	Для каждого ВспомогательныйВРЦ Из ВспомогательныеВРЦ Цикл
		
		УсловиеПоиска.ВидРабочегоЦентра = ВспомогательныйВРЦ;
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска);
			
		Для каждого Строка Из СтрокиПоиска Цикл
			НоваяСтрока = ТаблицаДубль.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПланирования.ДоступноеВремя = ТаблицаДубль;
	
КонецПроцедуры

Процедура ДублироватьЗанятоеВремяПоСменам(ПараметрыПланирования, Знач ОсновнойВРЦ, Знач ВспомогательныеВРЦ)
	
	УсловиеПоиска = Новый Структура("ВидРабочегоЦентра", ОсновнойВРЦ);
	
	ТаблицаИсх = ПараметрыПланирования.ЗанятоеВремяПоСменам;
	ПараметрыПланирования.ДублированныеПараметры.Вставить("ЗанятоеВремяПоСменам", ТаблицаИсх);
	
	ТаблицаДубль = ТаблицаИсх.Скопировать(НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска));
	
	Для каждого ВспомогательныйВРЦ Из ВспомогательныеВРЦ Цикл
		
		УсловиеПоиска.ВидРабочегоЦентра = ВспомогательныйВРЦ;
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ТаблицаИсх, УсловиеПоиска);
			
		Для каждого Строка Из СтрокиПоиска Цикл
			НоваяСтрока = ТаблицаДубль.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПланирования.ЗанятоеВремяПоСменам = ТаблицаДубль;
	
КонецПроцедуры

Процедура ВосстановитьДублированныеПараметрыПланирования(ПараметрыПланирования)
	
	Для каждого Параметр Из ПараметрыПланирования.ДублированныеПараметры Цикл
		
		ПараметрыПланирования[Параметр.Ключ] = Параметр.Значение;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыВспомогательныхРабочихЦентровОпераций(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = Новый Массив;
	ОбработанныеОбъекты = Новый Массив;
	
	Для каждого Операция Из Операции Цикл
		
		ВспомогательныеРЦ = ВспомогательныеРЦОперации(ПараметрыПланирования, Операция.ИдентификаторОперации);
		
		Для каждого РабочийЦентр Из ВспомогательныеРЦ Цикл
			
			Если ОбработанныеОбъекты.Найти(РабочийЦентр) = Неопределено Тогда
				
				Если НЕ ТипЗначенияРабочийЦентр(РабочийЦентр) Тогда
					
					Результат.Добавить(РабочийЦентр);
					
				Иначе
					
					ВидРабочегоЦентра = ВидРабочегоЦентра(ПараметрыПланирования, РабочийЦентр);
					Если ОбработанныеОбъекты.Найти(ВидРабочегоЦентра) = Неопределено Тогда
						Результат.Добавить(ВидРабочегоЦентра);
						ОбработанныеОбъекты.Добавить(ВидРабочегоЦентра);
					КонецЕсли;
					
				КонецЕсли;
				
				ОбработанныеОбъекты.Добавить(РабочийЦентр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтразитьРазмещениеОперацииВПараметрахПланирования(ПараметрыПланирования, Знач Операция, Знач ПараметрыРазмещения)
	
	Если ЗначениеЗаполнено(ПараметрыРазмещения.РабочийЦентр) Тогда
			
		ПустыеИнтервалы = Новый Массив;
		
		РабочиеЦентры = Новый Массив;
		РабочиеЦентры.Добавить(ПараметрыРазмещения.РабочийЦентр);
		Для каждого Строка Из ПараметрыРазмещения.ВспомогательныеРЦ Цикл
			РабочиеЦентры.Добавить(Строка.РабочийЦентр);
		КонецЦикла;
		
		Для каждого ИнтервалРазмещения Из ПараметрыРазмещения.Интервалы Цикл
			
			Для каждого РабочийЦентр Из РабочиеЦентры Цикл
				
				ДоступныйИнтервал = ДоступныйИнтервалПоДаннымКэша(ПараметрыПланирования,
					ПараметрыРазмещения.КэшДоступныхИнтервалов, ИнтервалРазмещения, РабочийЦентр);
				
				Если НЕ ДоступныйИнтервал = Неопределено Тогда
					
					Если НЕ ЗначениеЗаполнено(ИнтервалРазмещения.Загрузка) Тогда
						ЗанятоеВремя = ИнтервалРазмещения.ВремяПлан;
					Иначе
						ЗанятоеВремя = ИнтервалРазмещения.ВремяПлан * ИнтервалРазмещения.Загрузка;
					КонецЕсли;
					ОтразитьЗанятоеВремяПоСменам(ПараметрыПланирования, ДоступныйИнтервал, РабочийЦентр, ЗанятоеВремя);
					
					ИсправитьДоступноеВремя(
						ПараметрыПланирования,
						Операция,
						ДоступныйИнтервал,
						ПустыеИнтервалы,
						ИнтервалРазмещения,
						ПараметрыРазмещения.Начало);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		УдалитьПустыеИнтервалыДоступногоВремени(ПараметрыПланирования, ПустыеИнтервалы);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныйИнтервалПоДаннымКэша(Знач ПараметрыПланирования, Знач КэшДоступныхИнтервалов, Знач ИнтервалРазмещения, Знач РабочийЦентр)
	
	Результат = Неопределено;
	
	УсловиеПоискаКэш = Новый Структура("РабочийЦентр, Начало", РабочийЦентр, ИнтервалРазмещения.Начало);
	СтрокиПоискаКэш = КэшДоступныхИнтервалов.НайтиСтроки(УсловиеПоискаКэш);
	
	Если ЗначениеЗаполнено(СтрокиПоискаКэш) Тогда
		
		ДанныеКэша = СтрокиПоискаКэш[0];
		
		УсловиеПоиска = Новый Структура("РабочийЦентр, НачалоСмены");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, ДанныеКэша);
		
		СтрокиПоиска = ПараметрыПланирования.ДоступноеВремя.НайтиСтроки(УсловиеПоиска);
		Для каждого Строка Из СтрокиПоиска Цикл
			
			Если Строка.Начало <= ИнтервалРазмещения.Начало И Строка.Окончание >= ИнтервалРазмещения.Окончание Тогда
				
				Результат = Строка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравилаОчередиОпераций(Знач ОчередьОпераций)
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПравилоОпДатаЗапускаВозр());
	
	Если РазбросВремениОперацийОчередиПревышаетКонстанту(ОчередьОпераций, 0.25) Тогда
		
		Результат.Добавить(ПравилоОпБольшиеЗатемМаленькие());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравилаВыбораРЦ(Знач ПараметрыПланирования, Знач Операции)
	
	Результат = Новый Массив;
	
	Результат.Добавить(ПравилоРЦНастройкиМодели());
	
	НесколькоВН = ОперацииИмеютРазличныеВариантыНаладки(Операции);
	Если НесколькоВН Тогда
		Результат.Добавить(ПравилоРЦМинимизироватьПереналадки());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравилоОпДатаЗапускаВозр()
	
	Возврат "ДатаЗапускаВозрастание";
	
КонецФункции

Функция ПравилоОпБольшиеЗатемМаленькие()
	
	Возврат "ДлительностьУбывание";
	
КонецФункции

Функция ПравилоРЦНастройкиМодели()
	
	Возврат "НастройкиМоделиПланирования";
	
КонецФункции

Функция ПравилоРЦМинимизироватьПереналадки()
	
	Возврат "МинимизироватьВремяПереналадки";
	
КонецФункции

Функция РазбросВремениОперацийОчередиПревышаетКонстанту(Знач ОчередьОпераций, Знач Конст)
	
	Результат = Ложь;
	
	Если ОчередьОпераций.Количество() > 1 Тогда
		
		МинЗначение = ОчередьОпераций[0].ВремяРазместить;
		МаксЗначение = ОчередьОпераций[0].ВремяРазместить;
		
		Для каждого Операция Из ОчередьОпераций Цикл
			
			МинЗначение = МИН(МинЗначение, Операция.ВремяРазместить);
			МаксЗначение = МАКС(МаксЗначение,  Операция.ВремяРазместить);
			
			Если МинЗначение > 0 Тогда
				
				Отклонение = (МаксЗначение-МинЗначение)/МинЗначение;
				Если Отклонение >= Конст Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьОценкуВремениВариантовРасписания(ВариантыРасписания)
	
	Если ВариантыРасписания.Количество() > 1 Тогда
		
		Для каждого ВариантРасписания Из ВариантыРасписания Цикл
			ВариантРасписания.Расписание.Сортировать("ИдентификаторОперации Возр");
		КонецЦикла;
		
		Для Индекс = 0 По ВариантыРасписания[0].Расписание.Количество()-1 Цикл
			
			НачальнаяТочка = '00010101';
			Для каждого ВариантРасписания Из ВариантыРасписания Цикл
				ТекНачало = ВариантРасписания.Расписание[Индекс].Начало;
				Если ЗначениеЗаполнено(ТекНачало) Тогда
					НачальнаяТочка = ?(ЗначениеЗаполнено(НачальнаяТочка), МИН(НачальнаяТочка, ТекНачало), ТекНачало);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(НачальнаяТочка) Тогда
				
				МинимальноеОтклонение = 0;
				Для каждого ВариантРасписания Из ВариантыРасписания Цикл
					ЗаписьРасписания = ВариантРасписания.Расписание[Индекс];
					Если ЗначениеЗаполнено(ЗаписьРасписания.Окончание) Тогда
						Отклонение = ЗаписьРасписания.Окончание - НачальнаяТочка;
						ЗаписьРасписания.ОценкаВремя = Отклонение;
						МинимальноеОтклонение = 
							?(ЗначениеЗаполнено(МинимальноеОтклонение), МИН(МинимальноеОтклонение, Отклонение), Отклонение);
					КонецЕсли;
				КонецЦикла;
				
				МаксимальнаяОценка = 0;
				ЕстьНеразмещенныеОперации = Ложь;
				Для каждого ВариантРасписания Из ВариантыРасписания Цикл
					ЗаписьРасписания = ВариантРасписания.Расписание[Индекс];
					Если ЗначениеЗаполнено(ЗаписьРасписания.ОценкаВремя) Тогда
						ЗаписьРасписания.ОценкаВремя = ЗаписьРасписания.ОценкаВремя/МинимальноеОтклонение;
						МаксимальнаяОценка = 
							?(ЗначениеЗаполнено(МаксимальнаяОценка), МАКС(МаксимальнаяОценка, ЗаписьРасписания.ОценкаВремя), ЗаписьРасписания.ОценкаВремя);
					Иначе
						ЕстьНеразмещенныеОперации = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьНеразмещенныеОперации Тогда
					Для каждого ВариантРасписания Из ВариантыРасписания Цикл
						ЗаписьРасписания = ВариантРасписания.Расписание[Индекс];
						Если НЕ ЗначениеЗаполнено(ЗаписьРасписания.ОценкаВремя) Тогда
							// Неразмещенным операциям присваивается штрафная оценка в двухкратном размере относительно худшего размещения.
							ЗаписьРасписания.ОценкаВремя = МаксимальнаяОценка * 2;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаОценкиВариантовРасписания(Знач ВариантыРасписания)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ОценкаВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ВзвешеннаяОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для каждого ВариантРасписания Из ВариантыРасписания Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Индекс = ВариантыРасписания.Индекс(ВариантРасписания);
		НоваяСтрока.ОценкаВремя = ВариантРасписания.Расписание.Итог("ОценкаВремя");
		НоваяСтрока.Стоимость = ВариантРасписания.Расписание.Итог("Стоимость");
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КритерииОценкиМоделиПланирования(Знач ПараметрыПланирования)
	
	Результат = ОбъектКритерииВзвешеннойОценки();
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Вес = ПараметрыПланирования.ВесМинимизироватьВремя;
	НоваяСтрока.Оптимум = "Минимум";
	НоваяСтрока.ИмяКолонки = "ОценкаВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.Вес = ПараметрыПланирования.ВесМинимизироватьСтоимость;
	НоваяСтрока.Оптимум = "Минимум";
	НоваяСтрока.ИмяКолонки = "Стоимость";
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиМежоперационныеПереходыВРасписание(ПараметрыПланирования)
	
	Для каждого Строка Из ПараметрыПланирования.МежоперационныеПереходы Цикл
		
		УсловиеПоиска = Новый Структура("ИдентификаторОперации, Вспомогательная", Строка.ИдентификаторОперации, Ложь);
		СтрокиПоиска = НайтиСтрокиВТаблицеССохранениемПорядка(ПараметрыПланирования.ТаблицаРасписание, УсловиеПоиска);
		Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
			СтрокиПоиска[СтрокиПоиска.ВГраница()].ВремяПерехода = Строка.ВремяПерехода;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВзвешеннаяОценка

Функция ОбъектКритерииВзвешеннойОценки()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Вес");
	Результат.Колонки.Добавить("Оптимум");
	Результат.Колонки.Добавить("ИмяКолонки");
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьВзвешеннуюОценку(Знач ТаблицаОценки, Знач КритерииОценки)
	
	Если ЗначениеЗаполнено(ТаблицаОценки) Тогда
		
		Для каждого Критерий Из КритерииОценки Цикл
			
			Итог = ТаблицаОценки.Итог(Критерий.ИмяКолонки);
			Если Итог > 0 Тогда
				
				Для каждого Строка Из ТаблицаОценки Цикл
					Оценка = Строка[Критерий.ИмяКолонки]/Итог;
					Строка.ВзвешеннаяОценка = Строка.ВзвешеннаяОценка + (Оценка*Критерий.Вес);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроблемыРасписания

Процедура ЗафиксироватьОшибкуНедоступенОснОблсужРЦ(ПараметрыПланирования, Знач ПараметрыПодбора)
	
	РабочийЦентр = ПараметрыПодбора.РабочийЦентр;
	ВспомогательныеРЦ = ПараметрыПодбора.НедоступныеВспомогательныеРЦ;
	Операция = ПараметрыПодбора.Операция;
	ПрямоеРазмещение = ПараметрыПодбора.ПрямоеРазмещение;
	
	Если ЗначениеЗаполнено(ВспомогательныеРЦ) Тогда
		Для каждого ВспомогательныйРабочийЦентр Из ВспомогательныеРЦ Цикл
			ЗафиксироватьОшибкуНедоступенРабочийЦентр(ПараметрыПланирования.ПроблемыРасписания, ВспомогательныйРабочийЦентр, ПараметрыПодбора);
		КонецЦикла;
	Иначе
		ЗафиксироватьОшибкуНедоступенРабочийЦентр(ПараметрыПланирования.ПроблемыРасписания, РабочийЦентр, ПараметрыПодбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуНедоступенРабочийЦентр(ПроблемыРасписания, Знач РабочийЦентр, Знач ПараметрыПодбора)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.НедоступенРабочийЦентр;
	Ключ = РабочийЦентр;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПроблемыРасписания, Категория, Ключ);
	
	Если НЕ ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 2;
		
		Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно доступного времени рабочего центра ""%1"" вида ""%2"".';
					|en = 'There is not enough available time of the ""%1"" work center of the ""%2"" type.'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "Представление"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра.Представление"));
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно доступного времени вида рабочего центра ""%1"".';
					|en = 'There is not enough available time of the ""%1"" work center type.'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "Представление"));
		КонецЕсли;
		НоваяСтрока.Текст = Текст;
		
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Заполните доступность видов рабочих центров или увеличьте горизонт планирования.';
											|en = 'Fill in type of work centers capacity or increase the planning horizon.'");
		
		Свойства = Новый Структура;
		Свойства.Вставить("РабочийЦентр", РабочийЦентр);
		Свойства.Вставить("ВидРабочегоЦентра", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра"));
		Свойства.Вставить("Период", ПараметрыПодбора.МоментРазмещения);
		НоваяСтрока.Свойства = Свойства;
		
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуРасписаниеЗаблокировано(ПараметрыПланирования)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.РасписаниеЗаблокировано;
	Ключ = ПараметрыПланирования.Подразделение;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если НЕ ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 1;
		
		Текст = НСтр("ru = 'Планирование не может быть выполнено по причине: расписание находится в состоянии расчета';
					|en = 'Cannot perform planning. Reason: the timetable is being calculated.'");
		Пользователь = РегистрыСведений.БлокировкиПооперационногоРасписания.РасписаниеПодразделенияАвторБлокировки(
			ПараметрыПланирования.Подразделение);
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ПользовательПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Представление");
			Текст = Текст + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(пользователь: %1 )';
					|en = '(user: %1 )'"), ПользовательПредставление);
		КонецЕсли;
		НоваяСтрока.Текст = Текст;
		
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Дождитесь окончания расчета расписания.';
											|en = 'Please wait while the schedule is being generated.'");
		НоваяСтрока.Свойства = Новый Структура("Подразделение", ПараметрыПланирования.Подразделение);
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуНеЗаданоВремяОперации(ПараметрыПланирования, Знач Операция)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.НеЗаданоВремяВыполненияОперации;
	Ключ = Операция.ИдентификаторОперации;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если НЕ ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 2;
		НоваяСтрока.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У операции %1 документа %2 не заполнено время выполнения.';
				|en = 'Execution time is not specified for operation %1 in document %2.'"),
			Операция.НомерОперации,
			Операция.МаршрутныйЛист);
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Заполните время выполнения операции.';
											|en = 'Fill in operation time.'");
		НоваяСтрока.Свойства = Новый Структура("МаршрутныйЛист", Операция.МаршрутныйЛист);
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуОтсутствуютДанныеДляПланирования(ПараметрыПланирования)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.ОтсутствуютОперацииДляПланирования;
	Ключ = ПараметрыПланирования.Подразделение;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если НЕ ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 1;
		НоваяСтрока.Текст = НСтр("ru = 'Планирование не может быть выполнено по причине: отсутствуют операции для планирования.';
								|en = 'Cannot perform planning. Reason: no operations to plan.'");
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Создайте маршрутные листы либо измените параметры планирования.';
											|en = 'Create route sheets, or change planning parameters.'");
		НоваяСтрока.Свойства = Новый Структура("Подразделение", ПараметрыПланирования.Подразделение);
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуНеОпределеныРабочиеЦентры(ПараметрыПланирования, ВидРабочегоЦентра)
	
	Категория = Перечисления.КатегорииПроблемПооперационногоРасписания.НеОпределеныРабочиеЦентры;
	Ключ = ВидРабочегоЦентра;
	
	ПроблемаЗафиксирована = ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Категория, Ключ);
	
	Если НЕ ПроблемаЗафиксирована Тогда
		
		НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
		НоваяСтрока.Категория = Категория;
		НоваяСтрока.Тип = 2;
		
		СтрокаПодстановки = НСтр("ru = 'Не созданы рабочие центры вида ""%1""';
								|en = 'Work centers of the ""%1"" type are not created'");
		ПредставлениеВРЦ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРабочегоЦентра, "Представление");
		НоваяСтрока.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ПредставлениеВРЦ);
		
		НоваяСтрока.ЧтоДелатьДальше = НСтр("ru = 'Создайте рабочие центры.';
											|en = 'Create work centers.'");
		НоваяСтрока.Свойства = Новый ХранилищеЗначения(ПараметрыПланирования.Подразделение);
		НоваяСтрока.Ключ = Ключ;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроблемаЗафиксирована(Знач ПроблемыРасписания, Знач Категория, Знач Ключ)
	
	Результат = Ложь;
	
	УсловиеПоиска = Новый Структура("Категория", Категория);
	СтрокиПоиска = ПроблемыРасписания.НайтиСтроки(УсловиеПоиска);
	
	Для каждого Строка Из СтрокиПоиска Цикл
		
		Если Строка.Ключ = Ключ Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьПроблемыИзРезультатовФоновогоРасчета(ПараметрыПланирования, ПроблемыРасписания)
	
	Для каждого Строка Из ПроблемыРасписания Цикл
		Если НЕ ПроблемаЗафиксирована(ПараметрыПланирования.ПроблемыРасписания, Строка.Категория, Строка.Ключ) Тогда
			НоваяСтрока = ПараметрыПланирования.ПроблемыРасписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыРасчета

Процедура ЗаписатьРезультатыРасчетаМодели(Знач ПараметрыПланирования)
	
	РегистрыСведений.ПооперационноеРасписание.ЗаписатьВариантРасписания(
		ПараметрыПланирования.МодельРасписания,
		ПараметрыПланирования.МодельПланирования,
		ПараметрыПланирования.ТаблицаРасписание);
	
КонецПроцедуры

Функция ИнициализироватьРезультатыРасчета()
	
	Результат = Новый Структура;
	
	Результат.Вставить("МодельРасписания", Неопределено);
	Результат.Вставить("ОптимальнаяМодельПланирования",
		Справочники.МоделиПооперационногоПланирования.ПустаяСсылка());
	Результат.Вставить("РазмещеноОпераций", 0);
	Результат.Вставить("КоличествоДанных", 0);
	Результат.Вставить("РасчетВыполнен", Ложь);
	Результат.Вставить("СценарииИспользуются", Ложь);
	Результат.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Результат.Вставить("ПроблемыРасписания", ИнициализироватьТаблицуПроблемырасписания());
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРезультатыРасчета(ПараметрыПланирования)
	
	РезультатыРасчета = ПараметрыПланирования.РезультатыРасчета;
	ЗаполнитьЗначенияСвойств(РезультатыРасчета, ПараметрыПланирования);
	
	РазмещеноОпераций = КоличествоРазмещенныхОпераций(ПараметрыПланирования);
	РезультатыРасчета.РазмещеноОпераций = РазмещеноОпераций;
	РезультатыРасчета.РасчетВыполнен = НЕ(РазмещеноОпераций = 0);
	
	СценарииИспользуются = СценарииИспользуются(ПараметрыПланирования);
	РезультатыРасчета.СценарииИспользуются = СценарииИспользуются;
	
	Если НЕ СценарииИспользуются
		И ЗначениеЗаполнено(ПараметрыПланирования.ПараметрыМоделейПланирования) Тогда
		ОптимальнаяМодель = ПараметрыПланирования.ПараметрыМоделейПланирования[0].МодельПланирования;
		РезультатыРасчета.ОптимальнаяМодельПланирования = ОптимальнаяМодель;
	КонецЕсли;
	
	КоличествоОпераций = ПараметрыПланирования.Операции.Количество();
	КоличествоМоделей = ПараметрыПланирования.ПараметрыМоделейПланирования.Количество();
	РезультатыРасчета.КоличествоДанных = КоличествоОпераций * КоличествоМоделей;
	
КонецПроцедуры

Процедура ДобавитьЗаписьВЖурналРегистрации(Знач Уровень, Знач Комментарий, Знач ОбъектМетаданных=Неопределено, Знач Данные=Неопределено)
	
	ИмяСобытия = НСтр(
		"ru = 'Пооперационное планирование';
		|en = 'Manufacturing execution system'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий);
	
КонецПроцедуры

Функция КоличествоРазмещенныхОпераций(Знач ПараметрыПланирования)
	
	Возврат РегистрыСведений.ПооперационноеРасписание.КоличествоУникальныхОперацийМоделиРасписания(
		ПараметрыПланирования.МодельРасписания);
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция НайтиСтрокиВТаблицеССохранениемПорядка(Таблица, УсловиеПоиска)
	
	СтрокиПоискаБезПорядка = Таблица.НайтиСтроки(УсловиеПоиска);
	
	Если СтрокиПоискаБезПорядка.Количество() > 1 Тогда
		
		ТаблицаИндексы = ИндексыТаблицыИНайденныхСтрокТаблицы(Таблица, СтрокиПоискаБезПорядка);
		СтрокиУпорядочены = ТаблицаИндексовУпорядочена(ТаблицаИндексы);
		
		Если СтрокиУпорядочены Тогда
			Возврат СтрокиПоискаБезПорядка;
		Иначе
			ТаблицаИндексы.Сортировать("ИндексТаблицы ВОЗР");
			СтрокиПоискаСПорядком = Новый Массив;
			Для каждого Строка Из ТаблицаИндексы Цикл
				СтрокиПоискаСПорядком.Добавить(СтрокиПоискаБезПорядка[Строка.ИндексМассива]);
			КонецЦикла;
			
			Возврат СтрокиПоискаСПорядком;
		КонецЕсли;
		
	Иначе
		Возврат СтрокиПоискаБезПорядка;
	КонецЕсли;
	
КонецФункции

Функция ИндексыТаблицыИНайденныхСтрокТаблицы(Таблица, СтрокиПоискаБезПорядка)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИндексМассива", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	Результат.Колонки.Добавить("ИндексТаблицы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Индекс = 0;
	Для каждого Строка Из СтрокиПоискаБезПорядка Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ИндексМассива = Индекс;
		НоваяСтрока.ИндексТаблицы = Таблица.Индекс(Строка);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИндексовУпорядочена(ТаблицаИндексы)
	
	Результат = Истина;
	
	ПредшествующаяСтрока = Неопределено;
	Для каждого Строка Из ТаблицаИндексы Цикл
		
		Если НЕ ПредшествующаяСтрока = Неопределено Тогда
			
			Если Строка.ИндексТаблицы < ПредшествующаяСтрока.ИндексТаблицы Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ПредшествующаяСтрока = Строка;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОжидатьЗавершенияФоновыхЗаданий(Знач ИмяМетодаЗадания, Знач НаименованиеЗадания)
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("ИмяМетода", ИмяМетодаЗадания);
	ОтборЗаданий.Вставить("Наименование", НаименованиеЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Если ЗначениеЗаполнено(Задания) Тогда
		ФоновыеЗадания.ОжидатьЗавершения(Задания);
	КонецЕсли;
	
КонецПроцедуры

Функция ТипЗначенияРабочийЦентр(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.РабочиеЦентры")
		ИЛИ ТипЗнч(Значение) = Тип("Строка") Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидРабочегоЦентра(Знач ПараметрыПланирования, Знач РабочийЦентр)
	
	СтрокаПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(
		РабочийЦентр, "РабочийЦентр");
	
	Если НЕ СтрокаПоиска = Неопределено Тогда
		Результат = СтрокаПоиска.ВидРабочегоЦентра;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИсправитьТаблицуОперацийНаОснованииОтсутствующихОпераций(ПараметрыПланирования)
	
	УсловиеПоиска = Новый Структура("ИдентификаторОперации");
	УсловиеПоискаПредш = Новый Структура("ИдентификаторОперацииПредшествующий");
	
	ОтсутствующиеОперации = СвязанныеОперацииНеУчаствующиеВРасчете(ПараметрыПланирования.ТаблицаЗависимостейОпераций);
	Если НЕ ЗначениеЗаполнено(ОтсутствующиеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОпераций = ДанныеОтсутствующихОпераций(ОтсутствующиеОперации);
	Для каждого ОтсутствОперация Из ДанныеОпераций Цикл
		
		УсловиеПоиска.ИдентификаторОперации = ОтсутствОперация.ИдентификаторОперации;
		СтрокиЗависимостей = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоиска);
		Для каждого Зависимость Из СтрокиЗависимостей Цикл
			СтрокаОперации = ОперацияТаблицыОпераций(
				ПараметрыПланирования, Зависимость.ИдентификаторОперацииПредшествующий);
			Если ЗначениеЗаполнено(СтрокаОперации) Тогда
				
				СтрокаОперации.ДатаВыпуска = ДатаВыпускаДочернейОперации(
					ПараметрыПланирования, ОтсутствОперация, ОтсутствОперация.Начало, СтрокаОперации);
					
				ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
					ПараметрыПланирования, ОтсутствОперация, СтрокаОперации, ОтсутствОперация.РабочийЦентрНазначенный, Ложь);
				
			КонецЕсли;
		КонецЦикла;
		
		УсловиеПоискаПредш.ИдентификаторОперацииПредшествующий = ОтсутствОперация.ИдентификаторОперации;
		СтрокиЗависимостей = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоискаПредш);
		Для каждого Зависимость Из СтрокиЗависимостей Цикл
			СтрокаОперации = ОперацияТаблицыОпераций(
				ПараметрыПланирования, Зависимость.ИдентификаторОперации);
			Если ЗначениеЗаполнено(СтрокаОперации) Тогда
				
				СтрокаОперации.ДатаЗапуска = ДатаЗапускаДочернейОперации(
					ПараметрыПланирования, ОтсутствОперация, ОтсутствОперация.Окончание, СтрокаОперации);
				
				ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
					ПараметрыПланирования, ОтсутствОперация, СтрокаОперации, ОтсутствОперация.РабочийЦентрНазначенный, Истина);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеТиповВремяОперацииУвеличинное()
	
	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 1));
	Возврат Результат;
	
КонецФункции

Функция ПодразделенияТаблицыОпераций(ПараметрыПланирования)
	
	ТаблицаОпераций = ПараметрыПланирования.ТаблицаОпераций;
	Результат = ТаблицаОпераций.ВыгрузитьКолонку("Подразделение");
	
	Возврат Результат;
	
КонецФункции

Функция НайтиВремяМежоперационногоПерехода(Знач ПараметрыПланирования, Знач Подразделение,
	Знач Источник = Неопределено, Знач Приемник = Неопределено)
	
	Если ЗначениеЗаполнено(ПараметрыПланирования.ПараметрыМежоперационныхПереходов) Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник) Тогда
			Источник = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Приемник) Тогда
			Приемник = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
		КонецЕсли;
		
		УсловиеПоиска = Новый Структура;
		УсловиеПоиска.Вставить("Подразделение", Подразделение);
		УсловиеПоиска.Вставить("Источник", Источник);
		УсловиеПоиска.Вставить("Приемник", Приемник);
		
		СтрокиПоиска = ПараметрыПланирования.ПараметрыМежоперационныхПереходов.НайтиСтроки(УсловиеПоиска);
		Если ЗначениеЗаполнено(СтрокиПоиска) Тогда
			Возврат СтрокиПоиска[0].Время;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьЗависимостьОтПредшествующихВТаблицеОпераций(ПараметрыПланирования)
	
	ТаблицаОпераций = ПараметрыПланирования.ТаблицаОпераций;
	ТаблицаЗависимостей = ПараметрыПланирования.ТаблицаЗависимостейОпераций;
	
	ТаблицаОпераций.ЗаполнитьЗначения(Истина, "ЗависитОтПредшествующих");
	
	УсловиеПоиска = Новый Структура("ПредшествующаяОперацияУчествуетВРасчете, ИдентификаторОперации", Истина);
	Для каждого Строка Из ТаблицаОпераций Цикл
		
		УсловиеПоиска.ИдентификаторОперации = Строка.ИдентификаторОперации;
		СтрокиПоиска = ТаблицаЗависимостей.НайтиСтроки(УсловиеПоиска);
		Если НЕ ЗначениеЗаполнено(СтрокиПоиска) Тогда
			Строка.ЗависитОтПредшествующих = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначенияРеквизитовЭлементаСправочника(Знач СправочникСсылка)
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СправочникСсылка)) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИмяСправочника.*
		|ИЗ
		|	Справочник.%1 КАК ИмяСправочника
		|ГДЕ
		|	ИмяСправочника.Ссылка = &Ссылка";
		
		ИмяСправочника = СправочникСсылка.Метаданные().Имя;
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяСправочника);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", СправочникСсылка);
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ИсточникЗаполнения = ТаблицаРезультат[0];
		
		Результат = Новый Структура;
		Для каждого Колонка Из ТаблицаРезультат.Колонки Цикл
			Результат.Вставить(Колонка.Имя, ИсточникЗаполнения[Колонка.Имя]);
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьТипВТипЗначенияКолонкиТаблицы(Таблица, Знач ИмяКолонки, Знач ДобавляемыеТипы,
	Знач КвалификаторыЧисла=Неопределено, Знач КвалификаторыСтроки=Неопределено, Знач КвалификаторыДаты=Неопределено)
	
	Если КвалификаторыЧисла = Неопределено Тогда
		КвалификаторыЧисла = Новый КвалификаторыЧисла;
	КонецЕсли;
	Если КвалификаторыСтроки = Неопределено Тогда
		КвалификаторыСтроки = Новый КвалификаторыСтроки;
	КонецЕсли;
	Если КвалификаторыДаты = Неопределено Тогда
		КвалификаторыДаты = Новый КвалификаторыДаты;
	КонецЕсли;
	
	ОписаниеТиповНов = Новый ОписаниеТипов(Таблица.Колонки[ИмяКолонки].ТипЗначения,
		ДобавляемыеТипы,, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	ИмяКолонкиНов = ИмяКолонки + "Копия";
	Таблица.Колонки.Добавить(ИмяКолонкиНов, ОписаниеТиповНов);
	
	Для каждого Строка Из Таблица Цикл
		Строка[ИмяКолонкиНов] = Строка[ИмяКолонки];
	КонецЦикла;
	
	Таблица.Колонки.Удалить(ИмяКолонки);
	Таблица.Колонки[ИмяКолонкиНов].Имя = ИмяКолонки;
	
КонецПроцедуры

Функция ДоступноеВремяРабочихЦентровПоГрафику(Начало, Окончание, РабочиеЦентры)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступностьРабочихЦентров.Начало,
	|	ДоступностьРабочихЦентров.Окончание,
	|	ДоступностьРабочихЦентров.РабочийЦентр,
	|	РАЗНОСТЬДАТ(ДоступностьРабочихЦентров.Начало, ДоступностьРабочихЦентров.Окончание, СЕКУНДА) КАК Время
	|ИЗ
	|	РегистрСведений.ДоступностьРабочихЦентров КАК ДоступностьРабочихЦентров
	|ГДЕ
	|	(ДоступностьРабочихЦентров.Начало МЕЖДУ &Начало И &Окончание
	|			ИЛИ ДоступностьРабочихЦентров.Окончание МЕЖДУ &Начало И &Окончание)
	|	И ДоступностьРабочихЦентров.РабочийЦентр В(&РабочиеЦентры)");
	
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("РабочиеЦентры", РабочиеЦентры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СортироватьТаблицуДоступноеВремя(Таблица)
	
	Таблица.Сортировать("РабочийЦентр, Начало Возр, Окончание Возр", Новый СравнениеЗначений);
	
КонецПроцедуры

Функция КвалификаторыСтрокиДополнительныйРабочийЦентр()
	
	Возврат Новый КвалификаторыСтроки(100);
	
КонецФункции

Процедура УдалитьСтрокиТаблицыПоУсловию(Таблица, Знач УсловиеПоиска)
	
	СтрокиПоиска = Таблица.НайтиСтроки(УсловиеПоиска);
	Для каждого Строка Из СтрокиПоиска Цикл
		Таблица.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВремяДатыВСекунды(ДатаВремя)
	
	Результат = Час(ДатаВремя)*3600 + Минута(ДатаВремя)*60 + Секунда(ДатаВремя);
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьВремяМежоперационногоПерехода(ПараметрыПланирования, Знач ОперацияОтправитель, Знач Время)
	
	НоваяСтрока = ПараметрыПланирования.МежоперационныеПереходы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОперацияОтправитель);
	НоваяСтрока.ВремяПерехода = Время;
	
КонецПроцедуры

Функция ГраницыПланирования(Знач ПараметрыПланирования)
	
	Горизонт = ПараметрыПланирования.ГоризонтПланирования;
	Начало = НачалоДня(ПараметрыПланирования.МоментПланирования);
	Окончание = КонецДня(ПараметрыПланирования.МоментПланирования + (86400 * Горизонт));
	
	Возврат Новый Структура("Начало, Окончание", Начало, Окончание);
	
КонецФункции

Функция ДатаЗапускаДочернейОперации(
		ПараметрыПланирования, Знач ОперацияРодитель, Знач РодительВыпуск, Знач ОперацияПотомок)
	
	ВремяПерехода = ВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияРодитель.Подразделение,
		ОперацияРодитель.РабочийЦентрМаршрута, ОперацияПотомок.РабочийЦентрМаршрута);
	Если ЗначениеЗаполнено(ВремяПерехода) Тогда
		ЗафиксироватьВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияРодитель, ВремяПерехода);
	КонецЕсли;
	
	ПотомокЗапуск = РодительВыпуск + ВремяПерехода;
	Результат = МАКС(ОперацияПотомок.ДатаЗапуска, ПотомокЗапуск);
	
	Возврат Результат;
	
КонецФункции

Функция ДатаВыпускаДочернейОперации(
		ПараметрыПланирования, Знач ОперацияРодитель, Знач РодительЗапуск, Знач ОперацияПотомок)
	
	ВремяПерехода = ВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияПотомок.Подразделение,
		ОперацияПотомок.РабочийЦентрМаршрута, ОперацияРодитель.РабочийЦентрМаршрута);
	Если ЗначениеЗаполнено(ВремяПерехода) Тогда
		ЗафиксироватьВремяМежоперационногоПерехода(ПараметрыПланирования, ОперацияПотомок, ВремяПерехода);
	КонецЕсли;
	
	ПотомокВыпуск = РодительЗапуск - ВремяПерехода;
	Результат = МИН(ОперацияПотомок.ДатаВыпуска, ПотомокВыпуск);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
		ПараметрыПланирования, Знач Операция, ЗависимаяОперация, Знач РабочийЦентр, Знач ПрямоеРазмещение)
	
	Если ТипЗнч(Операция.РабочийЦентрМаршрута) = Тип("СправочникСсылка.ВидыРабочихЦентров")
		И ЗначениеЗаполнено(Операция.РабочийЦентрМаршрута)
		И ТипЗнч(ЗависимаяОперация.РабочийЦентрМаршрута) = Тип("СправочникСсылка.ВидыРабочихЦентров")
		И Операция.РабочийЦентрМаршрута = ЗависимаяОперация.РабочийЦентрМаршрута Тогда
		
		ЗависимыеОперации = СвязанныеОперации(
			ПараметрыПланирования, ЗависимаяОперация.ИдентификаторОперации, Истина, ПрямоеРазмещение);
		Для каждого ЗависимаяЗависимойОперация Из ЗависимыеОперации Цикл
			ЗаменитьРабочийЦентрДочернихОперацийРекурсивно(
				ПараметрыПланирования, ЗависимаяОперация, ЗависимаяЗависимойОперация, РабочийЦентр, ПрямоеРазмещение);
		КонецЦикла;
		
		ЗависимаяОперация.РабочийЦентрМаршрута = РабочийЦентр;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция СвязанныеОперации(Знач ПараметрыПланирования, Знач ИдентификаторОперации, Знач Дочерние, Знач ПрямоеРазмещение)
	
	Если (ПрямоеРазмещение И Дочерние) ИЛИ (НЕ ПрямоеРазмещение И НЕ Дочерние)	Тогда
		
		ЗависимыеОперации = ПоследующиеОперации(ПараметрыПланирования, ИдентификаторОперации);
		
	Иначе
		
		ЗависимыеОперации = ПредшествующиеОперации(ПараметрыПланирования, ИдентификаторОперации);
		
	КонецЕсли;
	
	Возврат ЗависимыеОперации;
	
КонецФункции

Функция ОперацияТаблицыОпераций(Знач ПараметрыПланирования, Знач ИдентификаторОперации)
	
	Операция = ПараметрыПланирования.ТаблицаОпераций.Найти(ИдентификаторОперации, "ИдентификаторОперации");
	Возврат Операция;
	
КонецФункции

Функция ПоследующиеОперации(Знач ПараметрыПланирования, Знач ИдентификаторОперации)
	
	Результат = Новый Массив;
	
	УсловиеПоиска = Новый Структура("ИдентификаторОперацииПредшествующий", ИдентификаторОперации);
	СтрокиПоиска = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоиска);
	Для каждого Строка Из СтрокиПоиска Цикл
		
		Операция = ОперацияТаблицыОпераций(ПараметрыПланирования, Строка.ИдентификаторОперации);
		Если НЕ Операция = Неопределено Тогда
			Результат.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредшествующиеОперации(Знач ПараметрыПланирования, Знач ИдентификаторОперации)
	
	Результат = Новый Массив;
	
	УсловиеПоиска = Новый Структура("ИдентификаторОперации", ИдентификаторОперации);
	СтрокиПоиска = ПараметрыПланирования.ТаблицаЗависимостейОпераций.НайтиСтроки(УсловиеПоиска);
	Для каждого Строка Из СтрокиПоиска Цикл
		
		Операция = ОперацияТаблицыОпераций(ПараметрыПланирования, Строка.ИдентификаторОперацииПредшествующий);
		Если НЕ Операция = Неопределено Тогда
			Результат.Добавить(Операция);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВремяМежоперационногоПерехода(Знач ПараметрыПланирования, Знач Подразделение, Знач Источник, Знач Приемник)
	
	Если ТипЗначенияРабочийЦентр(Источник) Тогда
		Источник = ВидРабочегоЦентра(ПараметрыПланирования, Источник);
	КонецЕсли;
	Если ТипЗначенияРабочийЦентр(Приемник) Тогда
		Приемник = ВидРабочегоЦентра(ПараметрыПланирования, Приемник);
	КонецЕсли;
	
	Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение, Источник, Приемник);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение,, Приемник);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение, Источник);
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = НайтиВремяМежоперационногоПерехода(ПараметрыПланирования, Подразделение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция РабочиеЦентрыПоЗначениюИзмерения(Знач ПараметрыПланирования, Знач Измерение)
	
	Результат = Новый Массив;
	
	Если ТипЗначенияРабочийЦентр(Измерение) Тогда
		
		Результат.Добавить(Измерение);
		
	ИначеЕсли ТипЗнч(Измерение) = Тип("СправочникСсылка.ВидыРабочихЦентров")
		ИЛИ ТипЗнч(Измерение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Если ТипЗнч(Измерение) = Тип("СправочникСсылка.ВидыРабочихЦентров") Тогда
			УсловиеПоиска = Новый Структура("ВидРабочегоЦентра", Измерение);
		ИначеЕсли ТипЗнч(Измерение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			УсловиеПоиска = Новый Структура("Подразделение", Измерение);
		КонецЕсли;
		
		СтрокиПоиска = ПараметрыПланирования.ТаблицаРабочихЦентров.НайтиСтроки(УсловиеПоиска);
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			Результат.Добавить(СтрокаПоиска.РабочийЦентр);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатыФоновогоРасчета(ПараметрыПланирования)
	
	Результат = Новый Структура;
	Результат.Вставить("ПроблемыРасписания", ПараметрыПланирования.ПроблемыРасписания);
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьРезультатыФоновогоРасчета(ПараметрыПланирования, Результаты)
	
	Для каждого АдресХранилища Из Результаты Цикл
		
		Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
			
			Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
			
			Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ПроблемыРасписания") Тогда
				ПрочитатьПроблемыИзРезультатовФоновогоРасчета(ПараметрыПланирования, Результат.ПроблемыРасписания);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыРазмещенияОперацииБезРабочегоЦентра(ПараметрыПланирования, Операция, РабочийЦентр, ПрямоеРазмещение)
	
	МоментРазмещения = МоментРазмещенияОперации(ПараметрыПланирования, Операция, ПрямоеРазмещение);
	ВремяОперации = Операция.ВремяРазместить;
	
	Результат = ИнициализироватьПараметрыРазмещения();
	Если ПрямоеРазмещение Тогда
		Результат.Начало = МоментРазмещения;
		Результат.Окончание = МоментРазмещения + ВремяОперации;
	Иначе
		Результат.Начало = МоментРазмещения - ВремяОперации;
		Результат.Окончание = МоментРазмещения;
	КонецЕсли;
	
	Интервал = ИнициализироватьИнтервалРазмещения();
	ЗаполнитьЗначенияСвойств(Интервал, Результат);
	Интервал.ВремяПлан = ВремяОперации;
	
	Результат.Интервалы.Добавить(Интервал);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПараллельнойЗагрузкиВРЦ(ПараметрыПланирования, РабочийЦентр)
	
	Результат = Новый Структура;
	Результат.Вставить("ПараллельнаяЗагрузка", Ложь);
	Результат.Вставить("СинхроннаяЗагрузка", Ложь);
	Результат.Вставить("МаксимальнаяЗагрузка", 0);
	
	Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.ВидыРабочихЦентров") Тогда
		НайденнаяСтрока = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "ВидРабочегоЦентра");
	Иначе
		НайденнаяСтрока = ПараметрыПланирования.ТаблицаРабочихЦентров.Найти(РабочийЦентр, "РабочийЦентр");
	КонецЕсли;
	
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, НайденнаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоследняяСтрокаТаблицы(Таблица)
	
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[Таблица.Количество()-1];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21