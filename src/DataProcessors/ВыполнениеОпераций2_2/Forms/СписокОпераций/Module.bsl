
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеСпискаОпераций();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеквизитыФормыСпискаОперацийПоПараметрам() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокОпераций();
	
	НачалоУчетаТрудозатратПоСотрудникам = Дата(1,1,1);
	//++ Локализация
	НачалоУчетаТрудозатратПоСотрудникам = ПолучитьФункциональнуюОпцию("УчетТрудозатратВРазрезеСотрудников");
	//-- Локализация
	
	УстановитьЗаголовокФормыСпискаОпераций();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Параметры:
// 	ИмяСобытия - Строка - 
// 	Параметр - Структура - Описание:
// * Ссылка - ДокументСсылка.ПроизводственнаяОперация2_2 - 
// * Подразделение - СправочникСсылка.СтруктураПредприятия - Передается всегда
// * КлючОперации - см. УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации
// * ИзмененныеДокументы - Массив из ДокументСсылка.ПроизводственнаяОперация2_2 -
// 	Источник - УникальныйИдентификатор - 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПроизводственнаяОперация2_2"
		И Тип(Параметр) = Тип("Структура")
		И Параметр.Свойство("КлючОперации")
		И ЭтоКлючОперацииТекущейФормы(
			Параметр.КлючОперации,
			Параметры.КлючОперации) Тогда
		
		Если Параметр.Свойство("Ссылка") Тогда
			НоваяСсылка = ОтображаемыеОперации.НайтиПоЗначению(Параметр.Ссылка) = Неопределено;
			Если Источник = ЭтаФорма.УникальныйИдентификатор
				И НоваяСсылка Тогда
				ОтображаемыеОперации.Добавить(Параметр.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьДанныеНаСервере(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИнформационнаяНадписьДобавитьОперациюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыНазначения = Новый Структура("Количество", КоличествоСоздать);
	
	УстанавливаемыйСтатус = ?(РежимРаботы = РежимРаботыПринятьВРаботу(),
		ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполняется"),
		ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполнена"));
	
	СписокДанныхЗаполнения = ОперативныйУчетПроизводстваВызовСервера.ДанныеЗаполненияНовыхПроизводственныхОпераций(
		Параметры.КлючОперации, ПараметрыНазначения, УстанавливаемыйСтатус, Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СписокДанныхЗаполнения[0]);
	
	ОткрытьФорму("Документ.ПроизводственнаяОперация2_2.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОперации

&НаКлиенте
Процедура СписокОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(Поле.Имя,"СписокОпераций","");
	Если Найти("ВидРабочегоЦентра,РабочийЦентр,Исполнитель,Статус", ИмяПоля) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = СписокОпераций.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтрокиДоИзменения = ДанныеСтрокиСтруктурой(Элементы.СписокОпераций.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеСтрокиСтруктурой(ТекущиеДанные);
	
	Если Не ДанныеСтрокиИзменены(ДанныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИзменитьОперациюПриОкончанииРедактированияНаСервере(ТекущиеДанные.Ссылка, ДанныеСтроки) Тогда
		
		ОтменаРедактирования = Истина;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиДоИзменения);
		Возврат;
		
	КонецЕсли;
	
	ОповеститьОбИзмененииОпераций(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполняется(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Выполняется"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to ""In progress"". Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "Выполняется");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Выполняется';
														|en = 'In progress'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыполнена(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Выполнена"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to Completed. Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "Выполнена");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Выполнена';
														|en = 'Completed'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеВыполнена(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Не выполнена"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to Failed. Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "НеВыполнена");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Не выполнена';
														|en = 'Failed'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПропущена(Команда)
	
	ВыделенныеСтроки = ВыделенныеОперации();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке операций будет установлен статус ""Пропущена"". Продолжить?';
						|en = 'Status of the operations selected in the list will be set to Skipped. Continue?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	ДопПараметры.Вставить("Статус", "Пропущена");
	ДопПараметры.Вставить("СтатусПредставление", НСтр("ru = 'Пропущена';
														|en = 'Skipped'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусЗавершение", 
		ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УстановитьСтатусНаСервере(ДопПараметры.Операции, ДопПараметры.Статус);
	
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		Элементы.СписокОпераций,
		КоличествоОбработанных,
		ДопПараметры.Операции.Количество(),
		ДопПараметры.СтатусПредставление);
	
	ОповеститьОбИзмененииОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	
	УчетТрудозатратВРазрезеСотрудников = ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам)
		И НачалоУчетаТрудозатратПоСотрудникам <= ТекущиеДанные.Дата;
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		ТекущиеДанные.Исполнитель,
		ИспользоватьБригадныеНаряды,
		УчетТрудозатратВРазрезеСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокОперацийИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Организация,
		Подразделение,
		ТекущиеДанные.Исполнитель,
		ТекущиеДанные.Дата,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийИсполнительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
		
		ТекущиеДанные.Исполнитель = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Организация, Подразделение, Элементы.СписокОпераций.ТекущиеДанные.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Организация, Подразделение, Элементы.СписокОпераций.ТекущиеДанные.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИзменитьОперациюПриОкончанииРедактированияНаСервере(Операция, ДанныеОперации) 
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Операция);
		
		Если ТребуетсяИзменитьОперацию(Операция, ДанныеОперации) Тогда
			
			ОперацияОбъект = Операция.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(ОперацияОбъект, ДанныеОперации, "Исполнитель, ВидРабочегоЦентра, РабочийЦентр");
			
			Если ОперацияОбъект.Статус <> ДанныеОперации.Статус Тогда
				
				ОперацияОбъект.Статус = ДанныеОперации.Статус;
				
				Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкеСтатуса(ОперацияОбъект);
				
			КонецЕсли;
			
			Если ОперацияОбъект.ПроверитьЗаполнение() Тогда
				
				ОперацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Ошибка изменения производственной операции';
						|en = 'An error occurred when changing the routing operation'"),,,,
					Отказ);
	 			
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка изменения производственной операции';
				|en = 'An error occurred when changing the routing operation'"),,,,
			Отказ);
		
	КонецПопытки;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяИзменитьОперацию(Операция, ДанныеОперации)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка = &Ссылка
		|	И (Операции.Статус <> &Статус
		|			ИЛИ Операции.ВидРабочегоЦентра <> &ВидРабочегоЦентра
		|			ИЛИ Операции.РабочийЦентр <> &РабочийЦентр
		|			ИЛИ Операции.Исполнитель <> &Исполнитель)");
		
	Запрос.УстановитьПараметр("Ссылка", Операция);
	Запрос.УстановитьПараметр("Исполнитель", ДанныеОперации.Исполнитель);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ДанныеОперации.ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("РабочийЦентр", ДанныеОперации.РабочийЦентр);
	Запрос.УстановитьПараметр("Статус", ДанныеОперации.Статус);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Функция ВыделенныеОперации()
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.СписокОпераций.ВыделенныеСтроки;
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокОпераций.НайтиПоИдентификатору(Идентификатор);
		Результат.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСтрокиСтруктурой(ТекущиеДанные)

	ДанныеСтроки = Новый Структура("
		|Ссылка,
		|Исполнитель,
		|ВидРабочегоЦентра,
		|РабочийЦентр,
		|Статус");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтрокиИзменены(ДанныеСтроки)
	
	Возврат Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
						ДанныеСтроки, 
						ДанныеСтрокиДоИзменения,
						"Ссылка,Исполнитель,ВидРабочегоЦентра,РабочийЦентр,Статус");
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОпераций(ДокументСсылка = Неопределено)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Подразделение", ЭтаФорма.Подразделение);
	ПараметрОповещения.Вставить("КлючОперации", Параметры.КлючОперации);
	
	Если ДокументСсылка <> Неопределено Тогда
		ПараметрОповещения.Вставить("Ссылка", ДокументСсылка);
	КонецЕсли;
	
	Оповестить("Запись_ПроизводственнаяОперация2_2", ПараметрОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(ПеречитатьСписокОпераций = Истина)
	
	ЗаполнитьРеквизитыФормыСпискаПоДаннымОперации();
	Если ПеречитатьСписокОпераций Тогда
		ПеречитатьСписокОпераций();
	КонецЕсли;
	
КонецПроцедуры

// Установка заголовка формы "Список операций".
&НаСервере
Процедура УстановитьЗаголовокФормыСпискаОпераций()
	
	// Установка заголовка формы
	#Область ЗаголовокФормы
	
	Если РежимРаботы = РежимРаботыПринятьВРаботу() Тогда
		
		ТекстЗаголовок = НСтр("ru = 'Принять операции в работу';
								|en = 'Accept operations for processing'");
		
	ИначеЕсли РежимРаботы = РежимРаботыОтметитьВыполнение() Тогда
		
		ТекстЗаголовок = НСтр("ru = 'Отметить выполнение операций';
								|en = 'Mark operation execution'");
		
	КонецЕсли;
	
	РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Этап, "Номер,НаименованиеЭтапа"); 
	ПредставлениеЭтапа = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(РеквизитыЭтапа);
	
	ТекстЗаголовок = ТекстЗаголовок + " (" + ПредставлениеЭтапа + ", " + Операция + ")";
	
	АвтоЗаголовок = Ложь;
	Заголовок = ТекстЗаголовок;
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьСписокОпераций()
	
	Перем Идентификатор, ВыбраннаяОперация;
	
	ТекущаяСтрока = Элементы.СписокОпераций.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = СписокОпераций.НайтиПоИдентификатору(ТекущаяСтрока);
		ВыбраннаяОперация = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	СписокОпераций.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.ПроизводственнаяОперация2_2.ТекстЗапросаСписокОпераций();
	Запрос.УстановитьПараметр("СписокОпераций", ОтображаемыеОперации.ВыгрузитьЗначения());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СписокОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ЕдиницаИзмеренияПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
			Выборка.ЕдиницаИзмерения,
			Выборка.Количество);
			
		Если Выборка.Ссылка = ВыбраннаяОперация Тогда
			Идентификатор = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	Если Идентификатор <> Неопределено Тогда
		Элементы.СписокОпераций.ТекущаяСтрока = Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Установка условного оформления формы "Список операций".
//
&НаСервере
Процедура УстановитьУсловноеОформлениеСпискаОпераций()
	
	// Оформление поля "Исполнитель"
	#Область ОформлениеПоля_Исполнитель
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОперацийИсполнитель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОпераций.Исполнитель");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти 
	
	// Оформление поля "ВидРабочегоЦентра"
	#Область ОформлениеПоля_ВидРабочегоЦентра
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОперацийВидРабочегоЦентра.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОпераций.ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	// Оформление поля "РабочийЦентр"
	#Область ОформлениеПоля_РабочийЦентр
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОперацийРабочийЦентр.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОпераций.РабочийЦентр");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
		
КонецПроцедуры

// Заполнение реквизитов формы "Список операций".
//
&НаСервере
Функция ЗаполнитьРеквизитыФормыСпискаОперацийПоПараметрам()
	
	Если Не ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.КлючОперации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.Свойство("РежимРаботы", РежимРаботы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Подразделение       = Параметры.Подразделение;
	ИспользоватьУчастки = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводственныеУчастки", Новый Структура("Подразделение", Подразделение));
	
	ЗаполнитьРеквизитыФормыСпискаПоДаннымОперации();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыСпискаПоДаннымОперации()
	
	ДанныеОперации = ОперативныйУчетПроизводстваВызовСервера.ДанныеОперацииИзОчереди(Параметры.КлючОперации);
	
	Если ДанныеОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеОперации, "Организация,Этап,Операция,ЕдиницаИзмерения");
	
	КоличествоЗапланировано  = ДанныеОперации.Запланировано;
	КоличествоМожноВыполнять = ДанныеОперации.МожноВыполнять;
	КоличествоВыполняется    = ДанныеОперации.Выполняется;
	
	// Добавить операцию
	КоличествоСоздать = ДанныеОперации.ОжиданиеСоздания;
	
	ИспользоватьБригадныеНаряды = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(
		Подразделение, Неопределено).ИспользоватьБригадныеНаряды;
	
	Если КоличествоСоздать > 0 Тогда
		Элементы.ИнформационнаяНадписьДобавитьОперацию.Видимость = Истина;
		ИнформационнаяНадписьДобавитьОперацию = ФорматированнаяСтрокаДобавитьОперацию();
	Иначе
		Элементы.ИнформационнаяНадписьДобавитьОперацию.Видимость = Ложь;
	КонецЕсли;
	
	// Управление видимостью
	Элементы.УстановитьСтатусВыполняется.Видимость = (РежимРаботы = РежимРаботыПринятьВРаботу());
	Элементы.УстановитьСтатусВыполнена.Видимость   = (РежимРаботы = РежимРаботыОтметитьВыполнение());
	Элементы.УстановитьСтатусНеВыполнена.Видимость = (РежимРаботы = РежимРаботыОтметитьВыполнение());
	Элементы.УстановитьСтатусПропущена.Видимость   = (РежимРаботы = РежимРаботыОтметитьВыполнение())
		И ДанныеОперации.МожноПропустить;
	Элементы.ГруппаВыполняется.Видимость           = (РежимРаботы = РежимРаботыОтметитьВыполнение());
	
	// Доступные статусы операций
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Создана);
	Статусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	
	Если РежимРаботы <> РежимРаботыПринятьВРаботу() Тогда
		Статусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
		Статусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена);
		Если ДанныеОперации.МожноПропустить Тогда
			Статусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Пропущена);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокОперацийСтатус.СписокВыбора.ЗагрузитьЗначения(Статусы);
	
	// Представление единиц измерения
	ЕдиницаИзмеренияЗапланированоПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ЕдиницаИзмерения,
		КоличествоЗапланировано);
	
	ЕдиницаИзмеренияМожноВыполнятьПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ЕдиницаИзмерения,
		КоличествоМожноВыполнять);

	ЕдиницаИзмеренияВыполняетсяПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
		ЕдиницаИзмерения,
		КоличествоВыполняется);
		
	РеквизитыМаршрута = Справочники.ТехнологическиеОперации.РеквизитыМаршрутаОперации(ДанныеОперации.ОперацияВладелец);
	Маршрут = РеквизитыМаршрута.Маршрут;
	Элементы.Маршрут.Гиперссылка = РеквизитыМаршрута.МаршрутДоступен;
	
КонецПроцедуры

&НаСервере
Функция ФорматированнаяСтрокаДобавитьОперацию()
	
	МассивСтрок = Новый Массив;
	
	Если РежимРаботы = РежимРаботыПринятьВРаботу() Тогда
		МассивСтрок.Добавить(НСтр("ru = 'принять в работу';
									|en = 'accept for processing'"));
	ИначеЕсли РежимРаботы = РежимРаботыОтметитьВыполнение() Тогда
		МассивСтрок.Добавить(НСтр("ru = 'отметить выполнение';
									|en = 'mark as completed'"));
	КонецЕсли;
	
	МассивСтрок.Добавить(" ");
	
	МассивСтрок.Добавить(НСтр("ru = 'еще';
								|en = 'more'"));
	
	МассивСтрок.Добавить(" ");
	
	ПредставлениеКоличества = Формат(КоличествоСоздать, "ЧЦ=15; ЧДЦ=3; ЧН=");
	МассивСтрок.Добавить(ПредставлениеКоличества);
	
	МассивСтрок.Добавить(" ");
	
	ПредставлениеЕдиницыИзмерения = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		КоличествоСоздать,
		НСтр("ru = 'операции';
			|en = 'operations'"),
		НСтр("ru = 'операций';
			|en = 'operations'"),
		НСтр("ru = 'операций';
			|en = 'operations'"),
		НСтр("ru = 'ж';
			|en = 'f'"));
	МассивСтрок.Добавить(ПредставлениеЕдиницыИзмерения);
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок,,,,"#ДобавитьОперацию");

КонецФункции

// Заполнение списка операций формы "Список операций".
//
&НаСервере
Процедура ЗаполнитьСписокОпераций()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Операции.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Этап = &Этап
		|	И Операции.Операция = &Операция
		|	И Операции.ИдентификаторОперации = &ИдентификаторОперации
		|	И Операции.Статус В (&ДоступныеСтатусы)
		|	И Операции.Проведен");
	
	Запрос.УстановитьПараметр("Этап", Параметры.КлючОперации.Этап);
	Запрос.УстановитьПараметр("Операция", Параметры.КлючОперации.Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации", Параметры.КлючОперации.ИдентификаторОперации);
	
	ДоступныеСтатусы = Новый Массив;
	ДоступныеСтатусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Создана);
	Если РежимРаботы = РежимРаботыОтметитьВыполнение() Тогда
		ДоступныеСтатусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоступныеСтатусы", ДоступныеСтатусы);
	
	МассивОпераций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	ОтображаемыеОперации.ЗагрузитьЗначения(МассивОпераций);
	
	ПеречитатьСписокОпераций();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Организация, Подразделение, Дата)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПараметрыОтбора = Новый Структура("Организация, Подразделение, Дата",
										Организация, Подразделение, Дата);
	
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, ПараметрыОтбора);
	
КонецПроцедуры

&НаСервере
Функция УстановитьСтатусНаСервере(Операции, Статус)

	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(Операции, Статус);
	
	Если КоличествоОбработанных <> 0 Тогда
		
		ОбновитьДанныеНаСервере();
		
	КонецЕсли;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыПринятьВРаботу()
	
	Возврат "ПринятьВРаботу";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыОтметитьВыполнение()
	
	Возврат "ОтметитьВыполнение";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоКлючОперацииТекущейФормы(КлючОперации, КлючОперацииФормы)
	
	Если КлючОперации.Этап                   = КлючОперацииФормы.Этап
		И КлючОперации.Операция              = КлючОперацииФормы.Операция
		И КлючОперации.ИдентификаторОперации = КлючОперацииФормы.ИдентификаторОперации Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
