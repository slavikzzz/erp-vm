
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
		ПрочитатьПараметрыПодразделения();
	КонецЕсли;
	
	АктивныеСостояния = АктивныеСостояния();
	Состояние.ЗагрузитьЗначения(АктивныеСостояния);
	
	УстановитьТипРабочегоЦентра(ЭтаФорма);
	УстановитьТипИсполнителя();
	
	УстановитьСвойстваДинамическогоСпискаВыполнениеОпераций();
	УстановитьСвойстваДинамическогоСпискаОперации();
	
	УстановитьОтборПоПодразделениюУчастку();
	УстановитьОтборПоРабочемуЦентру();
	УстановитьОтборПоСостоянию();
	
	Если Параметры.Свойство("ОтборПоЭтапам") Тогда
		УстановитьОтборПоЭтапам(Параметры.ОтборПоЭтапам);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеУчастки КАК ПроизводственныеУчастки
		|		ПО СтруктураПредприятия.Ссылка = ПроизводственныеУчастки.Владелец
		|ГДЕ
		|	СтруктураПредприятия.ИспользоватьПооперационноеУправление
		|	И НЕ СтруктураПредприятия.ИспользоватьПооперационноеПланирование
		|	И СтруктураПредприятия.ИспользоватьПроизводственныеУчастки");
		
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьУчастки = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ОтборПодразделениеЗаголовок.Видимость = НЕ ИспользоватьУчастки;
	Элементы.ТипОтбораПодразделение.Видимость = ИспользоватьУчастки;
	
	НастроитьЭлементыФормы();
	
	РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
	
	#Область СтандартныеМеханизмы
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = Операции.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КомандыОперации;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.КомандыОперацииГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПроизводственнаяОперация2_2"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Подразделение")
		И Параметр.Подразделение = Подразделение
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыполнениеОпераций Тогда
		
		Элементы.ВыполнениеОпераций.Обновить();
		Если ИспользоватьКонтрольВыполненияОпераций Тогда
			Элементы.ОперацииНаКонтроле.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		// Отборы установлены через параметры, сохраненные настройки не используются
		
		Настройки.Удалить("Подразделение");
		Настройки.Удалить("Участок");
		Настройки.Удалить("РабочийЦентр");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["Подразделение"] <> Неопределено Тогда
		
		ТипОтбораПодразделение = ?(НЕ Участок.Пустая() И ИспользоватьУчастки, 1, 0);
		
		Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.ВидыРабочихЦентров")
				ИЛИ НЕ ЗначениеЗаполнено(РабочийЦентр) Тогда
			ТипОтбораРабочийЦентр = 0;
		Иначе
			ТипОтбораРабочийЦентр = 1;
		КонецЕсли;
		
		ПодразделениеПриИзмененииНаСервере(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ВыполнениеОпераций

&НаКлиенте
Процедура ВыполнениеОпераций_Обновить(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ВыполнениеОпераций2_2.РабочееМесто.Команда.ОбновитьСписок");
	
	Элементы.ВыполнениеОпераций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций_Назначить(Команда)
	
	КлючиОпераций = ПроверитьПолучитьВыделенныеВСпискеОперации(Элементы.ВыполнениеОпераций.ВыделенныеСтроки);
	
	Если КлючиОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КлючиОпераций.Количество() = 1
		И Элементы.ВыполнениеОпераций.ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(Элементы.ВыполнениеОпераций.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
			Или Элементы.ВыполнениеОпераций.ТекущиеДанные.ОжиданиеСоздания = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выбранной строки.';
											|en = 'Command cannot be executed for the selected line.'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФормуНазначениеОпераций(КлючиОпераций, "Назначить");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций_ПринятьВРаботу(Команда)
	
	КлючиОпераций = ПроверитьПолучитьВыделенныеВСпискеОперации(Элементы.ВыполнениеОпераций.ВыделенныеСтроки);
	
	Если КлючиОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСписка = Ложь;
	
	Если КлючиОпераций.Количество() = 1
		И Элементы.ВыполнениеОпераций.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.ВыполнениеОпераций.ТекущиеДанные;
		
		Если ТипЗнч(Элементы.ВыполнениеОпераций.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
			Или ТекущиеДанные.МожноВыполнять = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выбранной строки.';
											|en = 'Command cannot be executed for the selected line.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуСписка = (ТекущиеДанные.Создано
			- ТекущиеДанные.Выполняется
			- ТекущиеДанные.Выполнено
			- ТекущиеДанные.Пропущено
			- ТекущиеДанные.НаКонтроле
			- ТекущиеДанные.НаДоработке
			- ТекущиеДанные.Брак) > 0;
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для нескольких строк.';
										|en = 'Command cannot be executed for multiple lines.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ОткрытьФормуСписка Тогда
		
		ОткрытьФормуСпискаОпераций(КлючиОпераций, "ПринятьВРаботу");
		
	Иначе
		
		ОткрытьФормуНазначениеОпераций(КлючиОпераций, "ПринятьВРаботу");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций_ОтметитьВыполнение(Команда)
	
	КлючиОпераций = ПроверитьПолучитьВыделенныеВСпискеОперации(Элементы.ВыполнениеОпераций.ВыделенныеСтроки);
	
	Если КлючиОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСписка = Ложь;
	
	Если КлючиОпераций.Количество() = 1
		И Элементы.ВыполнениеОпераций.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.ВыполнениеОпераций.ТекущиеДанные;
		
		Если ТипЗнч(Элементы.ВыполнениеОпераций.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
			Или (ТекущиеДанные.МожноВыполнять + ТекущиеДанные.Выполняется + ТекущиеДанные.НаДоработке) = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для выбранной строки.';
											|en = 'Command cannot be executed for the selected line.'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуСписка = (ТекущиеДанные.Создано
			- ТекущиеДанные.Выполнено
			- ТекущиеДанные.Пропущено
			- ТекущиеДанные.НаКонтроле
			- ТекущиеДанные.Брак) > 0;
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для нескольких строк.';
										|en = 'Command cannot be executed for multiple lines.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ОткрытьФормуСписка Тогда
		
		ОткрытьФормуСпискаОпераций(КлючиОпераций, "ОтметитьВыполнение");
		
	Иначе
		
		ОткрытьФормуНазначениеОпераций(КлючиОпераций, "ОтметитьВыполнение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций_Пропустить(Команда)
	
	КлючиОпераций = ПроверитьПолучитьВыделенныеВСпискеОперации(Элементы.ВыполнениеОпераций.ВыделенныеСтроки);
	
	Если КлючиОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МожноПропустить = Истина;
	
	Для каждого КлючОперации Из КлючиОпераций Цикл
		ДанныеСтроки = Элементы.ВыполнениеОпераций.ДанныеСтроки(КлючОперации); 
		Если НЕ ДанныеСтроки.МожноПропустить
				ИЛИ ДанныеСтроки.МожноВыполнять = 0 Тогда
			МожноПропустить = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МожноПропустить Тогда
		
		ОперативныйУчетПроизводстваКлиент.СформироватьПроизводственныеОперации(
			Подразделение,
			КлючиОпераций,
			Новый Структура,
			ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Пропущена"));
		
	Иначе
		
		ПоказатьПредупреждение(, ?(КлючиОпераций.Количество() > 1,
			НСтр("ru = 'Команда не может быть выполнена для выбранных строк.';
				|en = 'Command cannot be executed for the selected lines.'"),
			НСтр("ru = 'Команда не может быть выполнена для выбранной строки.';
				|en = 'Command cannot be executed for the selected line.'")));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура Операции_НазначитьРабочийЦентр(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Операции);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидРабочегоЦентра = Неопределено;
	ОтборПоУчастку    = Неопределено;
	
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Операции.ДанныеСтроки(Ссылка);
			
		Если НЕ ДанныеСтроки.ВидРабочегоЦентра.Пустая() Тогда
			
			Если ВидРабочегоЦентра = Неопределено Тогда
				
				ВидРабочегоЦентра = ДанныеСтроки.ВидРабочегоЦентра;
				
			ИначеЕсли ВидРабочегоЦентра <> ДанныеСтроки.ВидРабочегоЦентра Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Выбраны операции с различными видами рабочих центров.';
												|en = 'Operations with different work center types are selected.'"));
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.Участок.Пустая() Тогда
			
			Если ОтборПоУчастку = Неопределено Тогда
				
				ОтборПоУчастку = ДанныеСтроки.Участок;
				
			ИначеЕсли ОтборПоУчастку <> ДанныеСтроки.Участок Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Выбраны операции с различными участками.';
												|en = 'Operations with different areas are selected.'"));
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Подразделение", Подразделение);
	Если ОтборПоУчастку <> Неопределено Тогда
		Отбор.Вставить("Участок", ОтборПоУчастку);
	КонецЕсли;
	Если ВидРабочегоЦентра <> Неопределено Тогда
		Отбор.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыбиратьВариантНаладки", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Операции", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОперацииНазначитьРабочийЦентрЗавершение",
		ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.РабочиеЦентры.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНазначитьРабочийЦентрЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
			ОперацииНазначитьРабочийЦентрНаСервере(ДопПараметры.Операции,
				РезультатЗакрытия.РабочийЦентр,
				РезультатЗакрытия.ВариантНаладки);
		Иначе
			ОперацииНазначитьРабочийЦентрНаСервере(ДопПараметры.Операции, РезультатЗакрытия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_ОтменитьНазначениеРабочегоЦентра(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Операции);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииНазначитьРабочийЦентрНаСервере(
		ВыделенныеСтроки,
		ПредопределенноеЗначение("Справочник.РабочиеЦентры.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_УстановитьСтатусВыполняется(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Операции);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОперативныйУчетПроизводстваКлиент.УстановитьСтатусПроизводственнойОперации(
		ВыделенныеСтроки,
		"Выполняется",
		Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_УстановитьСтатусВыполнена(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Операции);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОперативныйУчетПроизводстваКлиент.УстановитьСтатусПроизводственнойОперации(
		ВыделенныеСтроки,
		"Выполнена",
		Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_УстановитьСтатусНеВыполнена(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Операции);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОперативныйУчетПроизводстваКлиент.УстановитьСтатусПроизводственнойОперации(
		ВыделенныеСтроки,
		"НеВыполнена",
		Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура Операции_УстановитьСтатусПропущена(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Операции);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПодтверждение = Ложь;
	
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Операции.ДанныеСтроки(Ссылка);
		Если НЕ ДанныеСтроки.МожноПропустить Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выделенные операции не могут быть пропущены.';
											|en = 'Selected operations cannot be skipped.'"));
			Возврат;
		ИначеЕсли ОперативныйУчетПроизводстваКлиент.ПодтвердитьПриУстановкеСтатусаОперации(
			ДанныеСтроки, ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Пропущена")) Тогда
			ЗапросПодтверждение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗапросПодтверждение Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодтверждениеСтатусПриИзмененииЗавершение",
			ЭтотОбъект,
			Новый Структура("ВыделенныеСтроки,НовыйСтатус", ВыделенныеСтроки, "Пропущена"));
		ПоказатьВопрос(ОписаниеОповещения,
			ОперативныйУчетПроизводстваКлиент.ТекстВопросаПриУстановкеСтатусаПропущена(ВыделенныеСтроки.Количество() > 1),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОперативныйУчетПроизводстваКлиент.УстановитьСтатусПроизводственнойОперации(
		ВыделенныеСтроки,
		"Пропущена",
		Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Операции.ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииНаКонтроле

&НаКлиенте
Процедура КонтрольОпераций_Проконтролировать(Команда)
	
	Если НЕ ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.ОперацииНаКонтроле) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ОперацииНаКонтроле.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоНаКонтроле", ТекущиеДанные.КоличествоНаКонтроле);
	ПараметрыФормы.Вставить("Операция",             ТекущиеДанные.Операция);
	ПараметрыФормы.Вставить("ОперацияНаименование", ТекущиеДанные.ОперацияНаименование);
	ПараметрыФормы.Вставить("НаОснованииНСИ",       ТекущиеДанные.НаОснованииНСИ);
	ПараметрыФормы.Вставить("ОперацияКакРаспоряжениеВыработки", ТекущиеДанные.ОперацияКакРаспоряжениеВыработки);
	
	ПараметрыОповещения = Новый Структура("ДокументСсылка", Элементы.ОперацииНаКонтроле.ТекущаяСтрока);
	Оповещение = Новый ОписаниеОповещения("ПроконтролироватьЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Документ.ПроизводственнаяОперация2_2.Форма.КонтрольОперации",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Операции);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Операции, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Операции);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Операции);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаЖурналОпераций Тогда
		Элементы.Операции.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыполнениеОпераций Тогда
		Элементы.ВыполнениеОпераций.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУчастокПриИзменении(Элемент)
	
	УчастокПриИзмененииНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОтбораПодразделениеПриИзменении(Элемент)
	
	Если ТипОтбораПодразделение = 1 Тогда
		
		Подразделение = Неопределено;
		ПодразделениеПриИзмененииНаСервере(Истина);
		
	Иначе
		
		Участок = Неопределено;
		УчастокПриИзмененииНаСервере(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОтбораРабочийЦентрПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(РабочийЦентр) Тогда
		ЗначениеОтбораДоИзменения = РабочийЦентр;
	Иначе
		ЗначениеОтбораДоИзменения = Неопределено;
	КонецЕсли;
	
	УстановитьТипРабочегоЦентра(ЭтаФорма);
	
	Если ЗначениеОтбораДоИзменения <> Неопределено
		И ЗначениеОтбораДоИзменения <> РабочийЦентр Тогда
		УстановитьОтборПоРабочемуЦентру();
	КонецЕсли;
	
	ВариантНаладки = ПредопределенноеЗначение("Справочник.ВариантыНаладки.ПустаяСсылка");
	УстановитьОтборПоВариантуНаладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	УстановитьОтборПоРабочемуЦентру();
	
	ВариантНаладки = ПредопределенноеЗначение("Справочник.ВариантыНаладки.ПустаяСсылка");
	УстановитьОтборПоВариантуНаладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНаладкиПриИзменении(Элемент)
	
	УстановитьОтборПоВариантуНаладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСостояниеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Перечисление", Тип("ПеречислениеСсылка.СостоянияВыполненияОпераций"));
	ПараметрыФормы.Вставить("ВыбранныеЗначения", Состояние.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.ВыборЗначенийПеречисления",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено 
		И РезультатЗакрытия <> КодВозвратаДиалога.Отмена Тогда
		
		Состояние.ЗагрузитьЗначения(РезультатЗакрытия);
		УстановитьОтборПоСостоянию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОчистка(Элемент, СтандартнаяОбработка)
	
	Если Состояние.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние.Очистить();
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

#Область ВыполнениеОпераций

&НаКлиенте
Процедура ВыполнениеОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ВыполнениеОперацийОперация" Тогда
			ПоказатьЗначение(, ТекущиеДанные.Операция);
		ИначеЕсли Найти("ВыполнениеОперацийЭтап,ВыполнениеОперацийПредставлениеЭтапа" ,Поле.Имя) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Этап);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОперацийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационноеСообщениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьОтборПоЭтапу" Тогда
		
		СтандартнаяОбработка = Ложь;
		УстановитьОтборПоЭтапам();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	УстановитьОтборПоИсполнителю();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Неопределено,
		Подразделение,
		Исполнитель,
		Неопределено,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСтатусНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Перечисление", Тип("ПеречислениеСсылка.СтатусыПроизводственныхОпераций"));
	ПараметрыФормы.Вставить("ВыбранныеЗначения", Статус.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.ВыборЗначенийПеречисления",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено 
		И РезультатЗакрытия <> КодВозвратаДиалога.Отмена Тогда
		
		Статус.ЗагрузитьЗначения(РезультатЗакрытия);
		УстановитьОтборПоСтатусу();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСменаПриИзменении(Элемент)
	
	УстановитьОтборПоСменномуЗаданию(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОперацииПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если НЕ Настройки.ДополнительныеСвойства.Свойство("ИспользоватьКонтрольВыполненияОпераций")
		ИЛИ НЕ Настройки.ДополнительныеСвойства.ИспользоватьКонтрольВыполненияОпераций Тогда
		Возврат;
	КонецЕсли;
	
	ОперативныйУчетПроизводства.УстановитьОформлениеСтатусаВСпискеПроизводственныхОпераций(Строки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборПоСостоянию()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ВыполнениеОпераций.Отбор,, "ГруппаОтбораПоСостоянию");
		
	НаборСостояний = Состояние.ВыгрузитьЗначения();
	
	Если НаборСостояний.ВГраница() <> -1 Тогда
		
		ОтборГруппа = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ВыполнениеОпераций.Отбор.Элементы, "ГруппаОтбораПоСостоянию", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		Для каждого СостояниеЗначение Из НаборСостояний Цикл
			
			Если СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.ОжиданиеПредшествующих Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "ОжиданиеПредшествующих", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.НачатаПредшествующая Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "НачатыПредшествующие", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.МожноВыполнять Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "МожноВыполнять", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.Выполняется Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "Выполняется", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "НаДоработке", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "НаКонтроле", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.Пропущена Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппа, "Пропущено", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);
			ИначеЕсли СостояниеЗначение = Перечисления.СостоянияВыполненияОпераций.Завершена Тогда
				ОтборГруппаВыполнено = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ОтборГруппа.Элементы, "ГруппаОтбораПоСостояниюВыполнено", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппаВыполнено, "Выполнено", 0, ВидСравненияКомпоновкиДанных.Больше,, Истина);	
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппаВыполнено, "ОжиданиеПредшествующих", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппаВыполнено, "НачатыПредшествующие", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппаВыполнено, "МожноВыполнять", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппаВыполнено, "Выполняется", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппаВыполнено, "НаДоработке", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборГруппаВыполнено, "НаКонтроле", 0, ВидСравненияКомпоновкиДанных.Равно,, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы("Состояние");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоИсполнителю()
	
	Списки = Новый Массив;
	Списки.Добавить(Операции);
	Списки.Добавить(ОперацииНаКонтроле);
	
	Для каждого ТекущийСписок Из Списки Цикл // ДинамическийСписок
		
		ОтборПоИсполнителю = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ТекущийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
			НСтр("ru = 'Отбор по исполнителю';
				|en = 'Filter by assignee'"),
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		Если ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(ТекущаяДатаСеанса()) Тогда
			
			ФизЛицо = ?(ЗначениеЗаполнено(Исполнитель),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель, "ФизическоеЛицо"),
				Неопределено);
			
			Исполнители = Новый Массив;
			Исполнители.Добавить(Исполнитель);
			Исполнители.Добавить(ФизЛицо);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОтборПоИсполнителю,
				"Ссылка.Исполнитель",
				ВидСравненияКомпоновкиДанных.ВСписке,
				Исполнители,
				,
				ЗначениеЗаполнено(Исполнитель));
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОтборПоИсполнителю,
				"Ссылка.Трудозатраты.Исполнитель",
				ВидСравненияКомпоновкиДанных.ВСписке,
				Исполнители,
				,
				ЗначениеЗаполнено(Исполнитель));
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОтборПоИсполнителю,
				"Ссылка.Исполнитель",
				ВидСравненияКомпоновкиДанных.Равно,
				Исполнитель,
				,
				ЗначениеЗаполнено(Исполнитель));
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОтборПоИсполнителю,
				"Ссылка.Трудозатраты.Исполнитель",
				ВидСравненияКомпоновкиДанных.Равно,
				Исполнитель,
				,
				ЗначениеЗаполнено(Исполнитель));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСтатусу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции,
		"Статус",
		Статус,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(Статус));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ОперацииНаКонтроле,
		"Статус",
		Статус,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСменномуЗаданию(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Операции,
		"СменноеЗадание",
		Форма.Смена,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.Смена));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ОперацииНаКонтроле,
		"СменноеЗадание",
		Форма.Смена,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.Смена));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоЭтапам(СписокЭтапов = Неопределено)
	
	УстановленОтбор = ЗначениеЗаполнено(СписокЭтапов);
	
	Если УстановленОтбор Тогда
		
		ЗначениеОтбора  = ?(СписокЭтапов.Количество() = 1, СписокЭтапов[0], СписокЭтапов);
		ВидСравненияСКД = ?(СписокЭтапов.Количество() = 1,
			ВидСравненияКомпоновкиДанных.Равно,
			ВидСравненияКомпоновкиДанных.ВСписке);
			
	Иначе
		
		ЗначениеОтбора = Неопределено;
		ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно;
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ВыполнениеОпераций,
			"Этап",
			ЗначениеОтбора,
			ВидСравненияСКД,
			,
			УстановленОтбор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Операции,
			"Этап",
			ЗначениеОтбора,
			ВидСравненияСКД,
			,
			УстановленОтбор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ОперацииНаКонтроле,
			"Этап",
			ЗначениеОтбора,
			ВидСравненияСКД,
			,
			УстановленОтбор);
	
	Если УстановленОтбор Тогда
		СформироватьНадписьУстановленОтборПоЭтапам(СписокЭтапов);
	Иначе
		ОчиститьИнформационноеСообщение();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРабочемуЦентру()
	
	УстановленОтбор = ЗначениеЗаполнено(РабочийЦентр);
	
	Если УстановленОтбор И ТипОтбораРабочийЦентр = 1 Тогда
		ЗначениеОтбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра");
	Иначе
		ЗначениеОтбора = РабочийЦентр;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ВыполнениеОпераций, 
			"ВидРабочегоЦентра", 
			ЗначениеОтбора, 
			ВидСравненияКомпоновкиДанных.Равно,
			, 
			УстановленОтбор);
		
	УстановитьОтборПоРабочемуЦентруВСписке(Операции, УстановленОтбор);
	УстановитьОтборПоРабочемуЦентруВСписке(ОперацииНаКонтроле, УстановленОтбор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРабочемуЦентруВСписке(Список, УстановленОтбор)
	
	Если ТипОтбораРабочийЦентр = 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, 
				"РабочийЦентр", 
				РабочийЦентр, 
				ВидСравненияКомпоновкиДанных.Равно,
				, 
				УстановленОтбор);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, 
				"ВидРабочегоЦентра", 
				,
				,
				,
				Ложь);
				
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, 
				"РабочийЦентр", 
				,
				,
				,
				Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, 
				"ВидРабочегоЦентра", 
				РабочийЦентр, 
				ВидСравненияКомпоновкиДанных.Равно,
				, 
				УстановленОтбор);
				
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы("ВариантНаладки");
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьОтборПоВариантуНаладки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ВыполнениеОпераций, 
		"ВариантНаладки", 
		ВариантНаладки, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(ВариантНаладки));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"ВариантНаладки", 
		ВариантНаладки, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(ВариантНаладки));
		
КонецПроцедуры
&НаСервере
Процедура УстановитьОтборПоПодразделениюУчастку()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ВыполнениеОпераций,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	УстановитьСвойстваДинамическогоСпискаВыполнениеОпераций(); // Отбор дс ВыполнениеОпераций по участку
	
	УстановитьОтборПоПодразделениюУчасткуВСписке(Операции);
	УстановитьОтборПоПодразделениюУчасткуВСписке(ОперацииНаКонтроле);
	
	ПараметрыФО = Новый Структура(
		"Подразделение",
		?(ЗначениеЗаполнено(Подразделение), Подразделение, Неопределено));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюУчасткуВСписке(Список)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Участок",
		Участок,
		ВидСравненияКомпоновкиДанных.Равно,,
		ТипОтбораПодразделение = 1);
	
КонецПроцедуры

&НаСервере
Процедура УчастокПриИзмененииНаСервере(ИзмененТипОтбора)
	
	Подразделение = ?(Участок.Пустая(),
		Неопределено,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Участок, "Владелец"));
		
	ПодразделениеПриИзмененииНаСервере(ИзмененТипОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере(ИзмененТипОтбора)
	
	ПрочитатьПараметрыПодразделения();
	
	УстановитьТипРабочегоЦентра(ЭтаФорма);
	УстановитьТипИсполнителя();
	
	УстановитьОтборПоПодразделениюУчастку();
	УстановитьОтборПоРабочемуЦентру();
	УстановитьОтборПоИсполнителю();
	УстановитьОтборПоСменномуЗаданию(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы("Подразделение" + ?(ИзмененТипОтбора, ",ТипОтбораПодразделение", ""));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипИсполнителя()
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(Исполнитель, ИспользоватьБригадныеНаряды,
		ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(ТекущаяДатаСеанса()));
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИнформационноеСообщение()
	
	ИнформационноеСообщение = Неопределено;
	НастроитьЗависимыеЭлементыФормы("ИнформационноеСообщение");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьУстановленОтборПоЭтапам(СписокЭтапов)
	
	МассивСтрок = Новый Массив;
	
	Если СписокЭтапов.Количество() > 1 Тогда
		
		МассивСтрок.Добавить(НСтр("ru = 'Установлен отбор по списку этапов';
									|en = 'Filter by stage list is set'"));
		
	Иначе
		
		РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СписокЭтапов[0], "Номер, НаименованиеЭтапа"); 
		ПредставлениеЭтапа = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(РеквизитыЭтапа);
		
		МассивСтрок.Добавить(НСтр("ru = 'Установлен отбор по этапу';
									|en = 'Stage filter is set'"));
		МассивСтрок.Добавить(" ");
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			ПредставлениеЭтапа,
			,
			,
			,
			ПолучитьНавигационнуюСсылку(СписокЭтапов[0])));
		
	КонецЕсли;
	
	МассивСтрок.Добавить(" (");
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить';
															|en = 'disable'"),,,, "ОтключитьОтборПоЭтапу"));
	
	МассивСтрок.Добавить(") ");
	
	ИнформационноеСообщение = Новый ФорматированнаяСтрока(МассивСтрок);
	
	НастроитьЗависимыеЭлементыФормы("ИнформационноеСообщение");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление цветом ожидающих предшествующие операции
	#Область ВыполнениеОпераций_ОжиданиеПредшествующих
	
	Элемент = ВыполнениеОпераций.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НачатыПредшествующие");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОжиданиеПредшествующих");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
		
	
	#КонецОбласти 
	
	// Оформление поля Дата в списке операций
	#Область Операции_Дата
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "Операции.Дата", Элементы.ОперацииДата.Имя);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаОперации()
	
	ТекстЗапроса = Операции.ТекстЗапроса;
	
	Документы.ЭтапПроизводства2_2.ВыполнитьПодстановкуПоляПредставлениеЭтапа(ТекстЗапроса, "&ПредставлениеЭтапа", "ОперацииПереопределяемый.Этап");

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	СвойстваСписка.ОсновнаяТаблица              = Операции.ОсновнаяТаблица;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Операции, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваДинамическогоСпискаВыполнениеОпераций()
	
	Если СтрНайти(ВыполнениеОпераций.ТекстЗапроса, "&ПредставлениеЭтапа") <> 0
		ИЛИ СтрНайти(ВыполнениеОпераций.ТекстЗапроса, "&Участок") <> 0
			И ТипОтбораПодразделение = 0
		ИЛИ СтрНайти(ВыполнениеОпераций.ТекстЗапроса, "&Участок") = 0
			И ТипОтбораПодразделение = 1 Тогда
			
		ТекстЗапроса = ТекстЗапросаСпискаВыполнениеОпераций();
		
		Документы.ЭтапПроизводства2_2.ВыполнитьПодстановкуПоляПредставлениеЭтапа(
			ТекстЗапроса,
			"&ПредставлениеЭтапа",
			"Очередь.Этап");
		
		СвойстваСписка              = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ВыполнениеОпераций, СвойстваСписка);
		
		ВыполнениеОпераций.Параметры.УстановитьЗначениеПараметра(
			"ИспользуетсяГрафикПроизводства",
			УправлениеПроизводством.ИспользуетсяГрафикПроизводства());
			
		ВыполнениеОпераций.Параметры.УстановитьЗначениеПараметра(
			"СтатусРабочийГрафик",
			РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
			
	КонецЕсли;
	
	Если ТипОтбораПодразделение = 1 Тогда
		
		ВыполнениеОпераций.Параметры.УстановитьЗначениеПараметра("Участок", Участок);
		
	КонецЕсли;
	
	ВыполнениеОпераций.Порядок.Элементы.Очистить();
	
	Если УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
	
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Порядок");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НачалоЭтапа");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НачалоСледующегоЭтапа");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НомерОперации");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НаименованиеОперации");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
	Иначе
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Порядок");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Распоряжение.Приоритет");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Распоряжение.Подразделение.РеквизитДопУпорядочивания");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("Распоряжение.Очередь");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("ДлительностьДоВыпуска");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НомерОперации");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
		
		ПорядокСписка = ВыполнениеОпераций.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокСписка.Поле = Новый ПолеКомпоновкиДанных("НаименованиеОперации");
		ПорядокСписка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПорядокСписка.Использование = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСпискаВыполнениеОпераций()
	
	Результат =
		"ВЫБРАТЬ
		|	Очередь.Распоряжение КАК Распоряжение,
		|	Очередь.Этап КАК Этап,
		|	Очередь.Операция КАК Операция,
		|	Очередь.ИдентификаторОперации КАК ИдентификаторОперации,
		|	Очередь.МаршрутнаяКарта КАК МаршрутнаяКарта,
		|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
		|	Очередь.Запланировано КАК Запланировано,
		|	Очередь.Создано КАК Создано,
		|	ВЫБОР
		|		КОГДА Очередь.Запланировано + Очередь.ТребуетПовторения > Очередь.Создано
		|			ТОГДА Очередь.Запланировано + Очередь.ТребуетПовторения - Очередь.Создано
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОжиданиеСоздания,
		|		ВЫБОР
		|			КОГДА Очередь.Запланировано + Очередь.ТребуетПовторения > Очередь.Создано
		|				ТОГДА
		|					ВЫБОР 
		|						КОГДА
		|							ВЫБОР
		|							КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|								ТОГДА ЕСТЬNULL(Очередь.Операция.РабочийЦентр.ПараллельнаяЗагрузка, ЛОЖЬ)
		|							ИНАЧЕ ЕСТЬNULL(Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра.ПараллельнаяЗагрузка, ЛОЖЬ)
		|						КОНЕЦ
		|					ТОГДА Очередь.ВремяШтучное
		|				ИНАЧЕ Очередь.ВремяШтучное * (Очередь.Запланировано + Очередь.ТребуетПовторения - Очередь.Создано) / Очередь.Операция.Количество
		|			КОНЕЦ + Очередь.ВремяПЗ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВремяВыполненияОжиданиеСоздания,
		|	Очередь.ОжиданиеПредшествующих КАК ОжиданиеПредшествующих,
		|	Очередь.НачатыПредшествующие КАК НачатыПредшествующие,
		|	Очередь.МожноВыполнять КАК МожноВыполнять,
		|	Очередь.Выполняется КАК Выполняется,
		|	Операции.МожноПропустить КАК МожноПропустить,
		|	Очередь.Выполнено КАК Выполнено,
		|	Очередь.Пропущено КАК Пропущено,
		|	Очередь.ТребуетПовторения КАК ТребуетПовторения,
		|	Очередь.НаКонтроле КАК НаКонтроле,
		|	Очередь.НаДоработке КАК НаДоработке,
		|	Очередь.Брак КАК Брак,
		|	Операции.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Очередь.Этап.ПартияПроизводства.ОсновноеИзделиеНоменклатура КАК Номенклатура,
		|	Очередь.Этап.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|			ТОГДА Операции.РабочийЦентр
		|		ИНАЧЕ Операции.РабочийЦентр.ВидРабочегоЦентра
		|	КОНЕЦ КАК ВидРабочегоЦентра,
		|	Операции.ВариантНаладки КАК ВариантНаладки,
		|	Очередь.ВремяОбщее КАК ВремяВыполнения,
		|	Очередь.ВремяЕдИзм КАК ВремяЕдИзм,
		|	Очередь.Порядок КАК Порядок,
		|	ВЫБОР
		|		КОГДА &ИспользуетсяГрафикПроизводства
		|				И НЕ График.ЭтапПроизводства ЕСТЬ NULL
		|			ТОГДА График.НачалоЭтапа
		|		КОГДА НормативныйГрафикСтруктурыЗаказа.Начало ЕСТЬ НЕ NULL
		|			ТОГДА НормативныйГрафикСтруктурыЗаказа.Начало
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Очередь.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, 0))
		|	КОНЕЦ КАК ДатаНачала,
		|	Очередь.Операция.Наименование КАК НаименованиеОперации,
		|	Очередь.НомерОперации КАК НомерОперации,
		|	Очередь.НомерСледующейОперации КАК НомерСледующейОперации,
		|	График.НачалоЭтапа КАК НачалоЭтапа,
		|	График.НачалоСледующегоЭтапа КАК НачалоСледующегоЭтапа,
		|	ЕСТЬNULL(НормативныйГрафик.ДлительностьДоВыпуска, Очередь.Этап.ДлительностьДоВыпуска) КАК ДлительностьДоВыпуска
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК Операции
		|		ПО Очередь.Операция = Операции.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
		|		ПО Очередь.Распоряжение = График.Распоряжение
		|			И Очередь.Этап = График.ЭтапПроизводства
		|			И (График.СтатусГрафика = &СтатусРабочийГрафик)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
		|		ПО Очередь.Этап = НормативныйГрафик.ЭтапПроизводства
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафикСтруктурыЗаказа
		|		ПО Очередь.Этап = НормативныйГрафикСтруктурыЗаказа.Этап
		|ГДЕ
		|	НЕ Очередь.ВАрхиве
		|	И НЕ Очередь.Этап.Организация ЕСТЬ NULL
		|	И &ТекстОтборПоУчастку";
	
	Результат = СтрЗаменить(Результат, "И &ТекстОтборПоУчастку",
		?(ТипОтбораПодразделение = 0, "",
			"	И (Операции.РабочийЦентр = НЕОПРЕДЕЛЕНО
			|		ИЛИ Операции.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
			|		ИЛИ Операции.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
			|		ИЛИ Операции.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
			|			И Операции.РабочийЦентр.Участок = &Участок
			|		ИЛИ Операции.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			|			И ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					Справочник.РабочиеЦентры КАК Т
			|				ГДЕ
			|					Т.ВидРабочегоЦентра = Операции.РабочийЦентр
			|					И Т.Участок = &Участок))
			|		ИЛИ Операции.Участок = &Участок"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ПравоДобавлениеОпераций = ПравоДоступа("Добавление", Метаданные.Документы.ПроизводственнаяОперация2_2);
	ПравоИзменениеОпераций  = ПравоДоступа("Изменение", Метаданные.Документы.ПроизводственнаяОперация2_2);
	
	Элементы.КомандыВыполнениеОперацийДействия.Доступность = ПравоДобавлениеОпераций И ПравоИзменениеОпераций;
	Элементы.КомандыОперацииДействия1.Доступность = ПравоИзменениеОпераций;
	Элементы.КомандыОперацииДействия2.Доступность = ПравоИзменениеОпераций;
	
	ИспользоватьКонтрольВыполненияОпераций = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольВыполненияОпераций");
	
	Элементы.ВыполнениеОперацийГруппаКонтроль.Видимость = ИспользоватьКонтрольВыполненияОпераций;
	
	Операции.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
		"ИспользоватьКонтрольВыполненияОпераций", ИспользоватьКонтрольВыполненияОпераций);
	
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормы(СписокРеквизитов = "")
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("Подразделение") Тогда
		
		Элементы.СтраницаВыполнениеОпераций.Видимость       = Не ИспользоватьСменныеЗадания;
		Элементы.ОперацииСменноеЗадание.Видимость           = ИспользоватьСменныеЗадания;
		Элементы.ОперацииНаКонтролеСменноеЗадание.Видимость = ИспользоватьСменныеЗадания;
		Элементы.ОтборСменаЗаголовок.Видимость              = ИспользоватьСменныеЗадания;
		Элементы.ОтборСмена.Видимость                       = ИспользоватьСменныеЗадания;
		
		Элементы.СтраницаКонтрольВыполненияОпераций.Видимость = ИспользоватьКонтрольВыполненияОпераций;
		
		ОтборИсполнительСтатусВШапке = ИспользоватьСменныеЗадания И НЕ ИспользоватьКонтрольВыполненияОпераций;
		Элементы.ОтборИсполнительЗаголовок.Видимость  = ОтборИсполнительСтатусВШапке;
		Элементы.Исполнитель1.Видимость               = ОтборИсполнительСтатусВШапке;
		Элементы.ОтборСтатусЗаголовок.Видимость       = ОтборИсполнительСтатусВШапке;
		Элементы.ОтборСтатус1.Видимость               = ОтборИсполнительСтатусВШапке;
		Элементы.Исполнитель.Видимость                = Не ОтборИсполнительСтатусВШапке;
		Элементы.ОтборСтатус.Видимость                = Не ОтборИсполнительСтатусВШапке;
		
		Если ИспользоватьСменныеЗадания Тогда
			
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ?(ИспользоватьКонтрольВыполненияОпераций,
				ОтображениеСтраницФормы.ЗакладкиСверху,
				ОтображениеСтраницФормы.Нет);
			Если НЕ Элементы.ГруппаСтраницы.ТекущаяСтраница.Видимость Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЖурналОпераций;
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("ТипОтбораПодразделение") Тогда
		
		Элементы.ОтборПодразделение.Видимость = (ТипОтбораПодразделение = 0);
		Элементы.ОтборУчасток.Видимость       = (ТипОтбораПодразделение = 1);
		
		Связи = Новый Массив;
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Подразделение", "Подразделение"));
		Если ТипОтбораПодразделение = 1 Тогда
			Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Участок", "Участок"));
		КонецЕсли;
		
		Элементы.ОтборРабочийЦентр.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
		Элементы.ОтборСмена.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
		
	КонецЕсли;
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("Состояние") Тогда
		
		Если ТолькоАктивныеСостояния(Состояние) Тогда
			СостояниеСтрока = НСтр("ru = 'Незавершенные';
									|en = 'Unfinished'");
		Иначе
			СостояниеСтрока = СтрСоединить(Состояние.ВыгрузитьЗначения(), ";");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("ВариантНаладки") Тогда
		
		Элементы.ГруппаОтборВариантНаладки.Видимость = Ложь;
		
		Если ЗначениеЗаполнено(РабочийЦентр) Тогда
			
			ПараметрыВыбора = Новый Массив();
			Реквизит = "";
			Если ТипОтбораРабочийЦентр = 1 Тогда
				Реквизит = "ВидРабочегоЦентра.ИспользуютсяВариантыНаладки";
				ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра")));
			Иначе
				Реквизит = "ИспользуютсяВариантыНаладки";
				ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", РабочийЦентр));
			КонецЕсли;
			
			Элементы.ГруппаОтборВариантНаладки.Видимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр,Реквизит);
			Элементы.ВариантНаладки.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ИнформационноеСообщение") Тогда
		
		ЗаполненоИнформационноеСообщение = ЗначениеЗаполнено(ИнформационноеСообщение);
		
		Элементы.ИнформационноеСообщение1.Видимость = ЗаполненоИнформационноеСообщение;
		Элементы.ИнформационноеСообщение2.Видимость = ЗаполненоИнформационноеСообщение;
		Элементы.ИнформационноеСообщение3.Видимость = ЗаполненоИнформационноеСообщение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуНазначениеОпераций(КлючиОпераций, РежимРаботы)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
	ПараметрыФормы.Вставить("КлючиОпераций", КлючиОпераций);
	
	Если ТипОтбораРабочийЦентр = 1 И ЗначениеЗаполнено(РабочийЦентр) Тогда
		ПараметрыФормы.Вставить("РабочийЦентр", РабочийЦентр);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантНаладки) Тогда
		ПараметрыФормы.Вставить("ВариантНаладки", ВариантНаладки);
	КонецЕсли;
	
	Если ТипОтбораПодразделение = 1 И ЗначениеЗаполнено(Участок) Тогда
		ПараметрыФормы.Вставить("Участок", Участок);
	КонецЕсли;
	
	СтатусОперации = Неопределено;
	Если РежимРаботы = "Назначить" Тогда
		СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Создана");
	ИначеЕсли РежимРаботы = "ПринятьВРаботу" Тогда
		СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполняется");
	ИначеЕсли РежимРаботы = "ОтметитьВыполнение" Тогда
		СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполнена");
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КлючиОпераций", КлючиОпераций);
	ДопПараметры.Вставить("СтатусОперации", СтатусОперации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуНазначениеОперацийЗавершение",
		ЭтотОбъект,
		ДопПараметры);
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.НазначениеОпераций",
		ПараметрыФормы,
		ЭтаФорма,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНазначениеОперацийЗавершение(ПараметрыНазначения, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыНазначения <> Неопределено Тогда
		
		ОперативныйУчетПроизводстваКлиент.СформироватьПроизводственныеОперации(
			Подразделение, ДополнительныеПараметры.КлючиОпераций, ПараметрыНазначения, ДополнительныеПараметры.СтатусОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуСпискаОпераций(КлючиОпераций, РежимРаботы)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
	ПараметрыФормы.Вставить("КлючОперации", КлючиОпераций[0]);
	
	ОткрытьФорму("Обработка.ВыполнениеОпераций2_2.Форма.СписокОпераций",
		ПараметрыФормы,
		ЭтаФорма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

&НаКлиенте
Процедура ИсполнительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Исполнитель = Результат;
		УстановитьОтборПоИсполнителю();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПараметрыОтбора = Новый Структура("Организация, Подразделение, Дата");
	ПараметрыОтбора.Подразделение = Подразделение;
	ПараметрыОтбора.Дата = ТекущаяДатаСеанса();
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипРабочегоЦентра(Форма)
	
	Если Форма.ТипОтбораРабочийЦентр = 0 Тогда
		ДопустимыйТип = Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров");
	Иначе
		ДопустимыйТип = Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры");
	КонецЕсли;
	
	Форма.РабочийЦентр = ДопустимыйТип.ПривестиЗначение(Форма.РабочийЦентр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыполнениеОпераций Тогда
			ПоказатьЗначение(Неопределено, МассивСсылок[0]);
		Иначе
			Элементы.Операции.ТекущаяСтрока = МассивСсылок[0];
			Если Элементы.Операции.ТекущаяСтрока = Неопределено Тогда
				ПоказатьЗначение(Неопределено, МассивСсылок[0]);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПроизводственнаяОперация2_2.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаСервере
Процедура ОперацииНазначитьРабочийЦентрНаСервере(Операции, РабочийЦентр, ВариантНаладки = Неопределено)
	
	Документы.ПроизводственнаяОперация2_2.НазначитьРабочийЦентрОперациям(Операции, РабочийЦентр, ВариантНаладки);
	
	Элементы.Операции.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АктивныеСостояния()
	
	Состояния = Новый Массив;
	
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.ОжиданиеПредшествующих"));
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.НачатаПредшествующая"));
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.МожноВыполнять"));
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВыполненияОпераций.Выполняется"));
	
	Возврат Состояния;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоАктивныеСостояния(СписокСостояний)
	
	АктивныеСостояния = АктивныеСостояния();
	
	Если АктивныеСостояния.Количество() <> СписокСостояний.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из СписокСостояний Цикл
		Если АктивныеСостояния.Найти(ЭлементКоллекции.Значение) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПараметрыПодразделения()
	
	Если Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ЭтаФорма,
		ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение),
		"ИспользоватьСменныеЗадания,ИспользоватьБригадныеНаряды");
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПолучитьВыделенныеВСпискеОперации(ВыделенныеСтроки)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		Результат = Неопределено;
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны операции для выполнения действия';
										|en = 'Operations to execute the action are not selected'"));
		
	Иначе
		
		Результат = Новый Массив;
		
		Для каждого Строка Из ВыделенныеСтроки Цикл
			
			Если ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Действие не может быть выполнено для строки группировки списка';
												|en = 'Action cannot be executed for the list grouping row'"));
				
				Результат = Неопределено;
				Прервать;
				
			Иначе
				
				Результат.Добавить(Строка);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроконтролироватьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	
	ПроконтролироватьЗавершениеНаСервере(Результат.ЗаписиПротокола, Результат.ПересчитатьНормативы, ДокументСсылка);
	
	ОповеститьОбИзменении(ДокументСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ПроконтролироватьЗавершениеНаСервере(ЗаписиПротокола, ПересчитатьНормативы, ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект(); // ДокументОбъект.ПроизводственнаяОперация2_2
	
	Для каждого ЗаписьПротокола Из ЗаписиПротокола Цикл // см. ДокументМенеджер.ПроизводственнаяОперация2_2.ЗаписьПротоколаКонструктор
		
		Документы.ПроизводственнаяОперация2_2.ДобавитьЗаписьПротокола(
			ДокументОбъект,
			ЗаписьПротокола);
		
	КонецЦикла;
	
	Если ПересчитатьНормативы Тогда
		ДокументОбъект.ЗаполнитьПоНормативамОперации(,Истина,Истина);
	КонецЕсли;
	
	Документы.ПроизводственнаяОперация2_2.РассчитатьСтатусПриИзмененииРеквизитов(ДокументОбъект);
	
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеСтатусПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
	ОперативныйУчетПроизводстваКлиент.УстановитьСтатусПроизводственнойОперации(
		ДополнительныеПараметры.ВыделенныеСтроки,
		ДополнительныеПараметры.НовыйСтатус,
		Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
