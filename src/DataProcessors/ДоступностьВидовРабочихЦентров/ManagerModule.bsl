#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область СлужебныеЭкспортныеПроцедурыИФункции

// Функция-конструктор таблицы расписания графиков работы РЦ
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров - вид рабочего центра
// * РабочийЦентр - СправочникСсылка.РабочиеЦентры - рабочий центр
// * ДатаГрафика - Дата - дата по графику
// * ВремяНачала - Дата - время начала по графику
// * ВремяОкончания - Дата - время окончания по графику
// * Количество - Число - количество
// * ВнесеныРучныеИзменения - Булево - признак, в расписание внесены ручные изменения
//
Функция СоздатьТаблицуРасписаниеГрафиковРаботыРЦ() Экспорт

	РасписаниеГрафиковРаботыРЦ = Новый ТаблицаЗначений;
	РасписаниеГрафиковРаботыРЦ.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	РасписаниеГрафиковРаботыРЦ.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	РасписаниеГрафиковРаботыРЦ.Колонки.Добавить("ДатаГрафика", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	РасписаниеГрафиковРаботыРЦ.Колонки.Добавить("ВремяНачала", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	РасписаниеГрафиковРаботыРЦ.Колонки.Добавить("ВремяОкончания", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	РасписаниеГрафиковРаботыРЦ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)));
	РасписаниеГрафиковРаботыРЦ.Колонки.Добавить("ВнесеныРучныеИзменения", Новый ОписаниеТипов("Булево"));

	Возврат РасписаниеГрафиковРаботыРЦ;
	
КонецФункции

Функция ЗаполнитьГрафикиРаботыРЦ(ВидРабочегоЦентра, ДанныеПоРЦ, НачалоПериода, ОкончаниеПериода, РасписаниеГрафиковРаботыРЦ) Экспорт
	
	РасписаниеГрафиковРаботыРЦКопия = РасписаниеГрафиковРаботыРЦ.Скопировать();
	
	// Удалим старые данные по указанным РЦ
	СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
 	СтарыеДанныеПоВидуРЦ = РасписаниеГрафиковРаботыРЦ.НайтиСтроки(СтруктураПоиска);
	
	// Получим расписания работы
	СписокГрафиков = Новый Массив;
	Для каждого СтрокаРЦ Из ДанныеПоРЦ Цикл
		Для каждого ГрафикРаботы Из СтрокаРЦ.ГрафикиРаботы Цикл
			Если СписокГрафиков.Найти(ГрафикРаботы) = Неопределено Тогда
				СписокГрафиков.Добавить(ГрафикРаботы);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	РасписанияРаботы = ПланированиеПроизводства.РасписаниеРаботыПоГрафику(СписокГрафиков, НачалоПериода, ОкончаниеПериода);
	
	СведенияОНовойДоступности = Новый ТаблицаЗначений;
	СведенияОНовойДоступности.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	СведенияОНовойДоступности.Колонки.Добавить("ДатаГрафика", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	СведенияОНовойДоступности.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)));
	СведенияОНовойДоступности.Колонки.Добавить("КоэффициентВремениРаботы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный)));
	
	Для каждого СтрокаРЦ Из ДанныеПоРЦ Цикл
		
		// Удалим старые данные по РЦ
		МассивУдаленныхСтрок = Новый Массив;
		Для ИндексСтроки = 0 По СтарыеДанныеПоВидуРЦ.ВГраница() Цикл
			СтрокаРасписание = СтарыеДанныеПоВидуРЦ[ИндексСтроки];
			Если СтрокаРасписание.ДатаГрафика >= НачалоПериода 
				И СтрокаРасписание.ДатаГрафика <= ОкончаниеПериода 
				И СтрокаРасписание.РабочийЦентр = СтрокаРЦ.РабочийЦентр Тогда
				
				РасписаниеГрафиковРаботыРЦ.Удалить(СтрокаРасписание);
				МассивУдаленныхСтрок.Добавить(ИндексСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Для ИндексСтроки = -МассивУдаленныхСтрок.ВГраница() По 0 Цикл
			СтарыеДанныеПоВидуРЦ.Удалить(МассивУдаленныхСтрок[-ИндексСтроки]);
		КонецЦикла; 
		
		// Добавим новые
		ДатаПериода = НачалоПериода;
		Пока ДатаПериода <= ОкончаниеПериода Цикл
			
			Интервалы = Новый Массив;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ДатаГрафика", ДатаПериода);
			
			Для каждого ГрафикРаботы Из СтрокаРЦ.ГрафикиРаботы Цикл
				
				СтруктураПоиска.Вставить("ГрафикРаботы", ГрафикРаботы);
	  			РасписаниеПоГрафику = РасписанияРаботы.НайтиСтроки(СтруктураПоиска);
				
				Для каждого СтрокаИнтервал Из РасписаниеПоГрафику Цикл
					
					// Проверка пересечения интервалов
					Для каждого Интервал Из Интервалы Цикл
						Если СтрокаИнтервал.ВремяНачала >= Интервал.ВремяНачала И СтрокаИнтервал.ВремяНачала < Интервал.ВремяОкончания
							ИЛИ СтрокаИнтервал.ВремяОкончания > Интервал.ВремяНачала И СтрокаИнтервал.ВремяОкончания <= Интервал.ВремяОкончания
							ИЛИ СтрокаИнтервал.ВремяНачала < Интервал.ВремяНачала И СтрокаИнтервал.ВремяОкончания > Интервал.ВремяОкончания Тогда
							
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Графики работы рабочего центра ""%1"" пересекаются %2.';
															|en = 'Work schedules of the ""%1"" work center overlap %2.'"),
								СтрокаРЦ.РабочийЦентр,
								Формат(ДатаПериода, "ДЛФ=D"));
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаРЦ.РабочийЦентр);
							
							РасписаниеГрафиковРаботыРЦ = РасписаниеГрафиковРаботыРЦКопия;
							Возврат Неопределено;
							
						КонецЕсли;
					КонецЦикла;
					
					СтрокаРасписание = РасписаниеГрафиковРаботыРЦ.Добавить();
					СтрокаРасписание.ВидРабочегоЦентра = ВидРабочегоЦентра;
					СтрокаРасписание.РабочийЦентр = СтрокаРЦ.РабочийЦентр;
					СтрокаРасписание.ДатаГрафика = СтрокаИнтервал.ДатаГрафика;
					СтрокаРасписание.ВремяНачала = СтрокаИнтервал.ВремяНачала;
					СтрокаРасписание.ВремяОкончания = СтрокаИнтервал.ВремяОкончания;
					СтрокаРасписание.Количество = СтрокаИнтервал.Длительность;
					
					Интервалы.Добавить(СтрокаРасписание);
					
					НоваяДоступность = СведенияОНовойДоступности.Добавить();
					НоваяДоступность.РабочийЦентр = СтрокаРЦ.РабочийЦентр;
					НоваяДоступность.ДатаГрафика = СтрокаИнтервал.ДатаГрафика;
					НоваяДоступность.Количество = СтрокаИнтервал.Длительность;
					НоваяДоступность.КоэффициентВремениРаботы = СтрокаРЦ.КоэффициентВремениРаботы;
				КонецЦикла;
				
			КонецЦикла;
			
			Если Интервалы.Количество() = 0 Тогда
				
				СтрокаРасписание = РасписаниеГрафиковРаботыРЦ.Добавить();
				СтрокаРасписание.ВидРабочегоЦентра = ВидРабочегоЦентра;
				СтрокаРасписание.РабочийЦентр = СтрокаРЦ.РабочийЦентр;
				СтрокаРасписание.ДатаГрафика = ДатаПериода;
				СтрокаРасписание.Количество = 0;
				
				НоваяДоступность = СведенияОНовойДоступности.Добавить();
				НоваяДоступность.РабочийЦентр = СтрокаРЦ.РабочийЦентр;
				НоваяДоступность.ДатаГрафика = ДатаПериода;
				НоваяДоступность.Количество = 0;
				НоваяДоступность.КоэффициентВремениРаботы = СтрокаРЦ.КоэффициентВремениРаботы;
				
			КонецЕсли; 
			
			ДатаПериода = КонецДня(ДатаПериода) + 1;
			
		КонецЦикла; 
		
	КонецЦикла; 

	Возврат СведенияОНовойДоступности;
	
КонецФункции

Функция ВидыРЦТребующиеВводаГрафикаРаботы(Подразделение) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоказательВводДоступностиДляРасписанияРЦ();
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ЗначениеПоказателя;

КонецФункции

#КонецОбласти

#Область ТекущиеДела


// Заполняет список текущих дел пользователя.
// Параметры: 
//     ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСервер.ОбщиеПараметрыЗапросов();
	
	ДелоВводДоступностиДляГрафикаПроизводства(ТекущиеДела, ОбщиеПараметрыЗапросов);
	
	ДелоВводДоступностиДляРасписанияРЦ(ТекущиеДела, ОбщиеПараметрыЗапросов);
	
КонецПроцедуры


Процедура ДелоВводДоступностиДляГрафикаПроизводства(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Обработка.ДоступностьВидовРабочихЦентров.Форма";
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность = ПраваПользователяПовтИсп.ПравоНаВводДоступностиВидовРЦ()
					И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоказательВводДоступностиДляГрафикаПроизводства();
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	ТекущиеДелаСлужебный.УстановитьОбщиеПараметрыЗапросов(Запрос, ОбщиеПараметрыЗапросов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Заполнение дел.
	// ВидыРЦТребующиеВводаДоступности
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ВидыРЦТребующиеВводаДоступности";
	ДелоРодитель.Представление  = НСтр("ru = 'Виды рабочих центров, требующие ввода доступности';
										|en = 'Work center types with manual capacity'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Производство;
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РежимРаботы", Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства);
		ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		
		ПредставлениеДела = "";
		ИдентификаторДела = "";
		ЗначениеДела      = 0;
		Для Каждого КолонкаРезультата Из Результат.Колонки Цикл
			ЗначениеКолонки = СтрокаРезультата[КолонкаРезультата.Имя];
			Если КолонкаРезультата.Имя = "ЗначениеПоказателя" Тогда
				ЗначениеДела = ЗначениеКолонки;
				Продолжить;
			КонецЕсли;
			ПредставлениеДела = ?(ПредставлениеДела = "", "", ", ") + Строка(ЗначениеКолонки);
			ИдентификаторДела = ?(ИдентификаторДела = "", ДелоРодитель.Идентификатор, ИдентификаторДела)
				+ СтрЗаменить(Строка(ЗначениеКолонки), " ", "");
			ПараметрыОтбора.Вставить(КолонкаРезультата.Имя, ЗначениеКолонки);
		КонецЦикла;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = ЗначениеДела > 0;
		Дело.Представление  = ПредставлениеДела;
		Дело.Количество     = ЗначениеДела;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		Дело.Владелец       = "ВидыРЦТребующиеВводаДоступности";
		
		Если ЗначениеДела > 0 Тогда
			ДелоРодитель.ЕстьДела = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДелоВводДоступностиДляРасписанияРЦ(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Обработка.ДоступностьВидовРабочихЦентров.Форма";
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность = ПраваПользователяПовтИсп.ПравоНаВводГрафиковРаботыРЦ()
					И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоказательВводДоступностиДляРасписанияРЦ();
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ТекущиеДелаСлужебный.УстановитьОбщиеПараметрыЗапросов(Запрос, ОбщиеПараметрыЗапросов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Заполнение дел.
	// РЦТребующиеВводаГрафикаРаботы
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "РЦТребующиеВводаГрафикаРаботы";
	ДелоРодитель.Представление  = НСтр("ru = 'Рабочие центры, требующие ввода графика работы';
										|en = 'Work centers which require entering the work schedule'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Производство;
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РежимРаботы", Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ);
		ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		
		ПредставлениеДела = "";
		ИдентификаторДела = "";
		ЗначениеДела      = 0;
		Для Каждого КолонкаРезультата Из Результат.Колонки Цикл
			ЗначениеКолонки = СтрокаРезультата[КолонкаРезультата.Имя];
			Если КолонкаРезультата.Имя = "ЗначениеПоказателя" Тогда
				ЗначениеДела = ЗначениеКолонки;
				Продолжить;
			КонецЕсли;
			ПредставлениеДела = ?(ПредставлениеДела = "", "", ", ") + Строка(ЗначениеКолонки);
			ИдентификаторДела = ?(ИдентификаторДела = "", ДелоРодитель.Идентификатор, ИдентификаторДела)
				+ СтрЗаменить(Строка(ЗначениеКолонки), " ", "");
			ПараметрыОтбора.Вставить(КолонкаРезультата.Имя, ЗначениеКолонки);
		КонецЦикла;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = ЗначениеДела > 0;
		Дело.Представление  = ПредставлениеДела;
		Дело.Количество     = ЗначениеДела;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		Дело.Владелец       = "РЦТребующиеВводаГрафикаРаботы";
		
		Если ЗначениеДела > 0 Тогда
			ДелоРодитель.ЕстьДела = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаПоказательВводДоступностиДляГрафикаПроизводства()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыЗаполнения.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ДатыЗаполнения.ВидРабочегоЦентра), 0) КАК ЗначениеПоказателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыРабочихЦентров.Подразделение КАК Подразделение,
	|		ВидыРабочихЦентров.Ссылка КАК ВидРабочегоЦентра,
	|		ЕСТЬNULL(МАКСИМУМ(ДоступностьВидовРабочихЦентров.ДатаИнтервала), ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаполненоПо
	|	ИЗ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|			ПО ВидыРабочихЦентров.Подразделение = СтруктураПредприятия.Ссылка
	|				И ВидыРабочихЦентров.УчитыватьДоступностьПоГрафикуРаботы
	|				И НЕ ВидыРабочихЦентров.ПометкаУдаления
	|				И НЕ ВидыРабочихЦентров.ЭтоГруппа
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
	|			ПО (ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра = ВидыРабочихЦентров.Ссылка)
	|				И (ДоступностьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности)
	|				И (ВидыРабочихЦентров.ВводитьДоступностьДляВидаРЦ
	|						И ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьВидаРабочихЦентров
	|					ИЛИ НЕ ВидыРабочихЦентров.ВводитьДоступностьДляВидаРЦ
	|						И ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьРабочихЦентров)
	|	ГДЕ
	|		СтруктураПредприятия.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВидыРабочихЦентров.Ссылка,
	|		ВидыРабочихЦентров.Подразделение) КАК ДатыЗаполнения
	|ГДЕ
	|	ДатыЗаполнения.ЗаполненоПо < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ДатыЗаполнения.Подразделение.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней - 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыЗаполнения.Подразделение";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоказательВводДоступностиДляРасписанияРЦ()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыЗаполнения.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ДатыЗаполнения.ВидРабочегоЦентра), 0) КАК ЗначениеПоказателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВидыРабочихЦентров.Подразделение КАК Подразделение,
	|		ВидыРабочихЦентров.Ссылка КАК ВидРабочегоЦентра,
	|		ЕСТЬNULL(МАКСИМУМ(ДоступностьВидовРабочихЦентров.ДатаИнтервала), ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаполненоПо
	|	ИЗ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|			ПО ВидыРабочихЦентров.Подразделение = СтруктураПредприятия.Ссылка
	|				И ВидыРабочихЦентров.ПланироватьРаботуРабочихЦентров
	|				И НЕ ВидыРабочихЦентров.ПометкаУдаления
	|				И НЕ ВидыРабочихЦентров.ЭтоГруппа
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
	|			ПО (ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра = ВидыРабочихЦентров.Ссылка)
	|				И (ДоступностьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности)
	|				И (ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьРабочихЦентров)
	|	ГДЕ
	|		СтруктураПредприятия.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней <> 0
	|		И (СтруктураПредприятия.Ссылка = &Подразделение
	|				ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВидыРабочихЦентров.Ссылка,
	|		ВидыРабочихЦентров.Подразделение) КАК ДатыЗаполнения
	|ГДЕ
	|	ДатыЗаполнения.ЗаполненоПо < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ДатыЗаполнения.Подразделение.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней - 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыЗаполнения.Подразделение";

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли