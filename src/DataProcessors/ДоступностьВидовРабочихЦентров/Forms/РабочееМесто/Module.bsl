#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	НеЗагружатьПараметрыОтбора = "";
	Если НЕ ОбработатьПараметрыФормы(НеЗагружатьПараметрыОтбора) Тогда
		
		ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ДоступностьВидовРабочихЦентров", "ПараметрыОтбора");
		Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора,, НеЗагружатьПараметрыОтбора);
		КонецЕсли;
		
		СохранятьПараметрыОтбора = Истина;
		
	КонецЕсли; 
	
	Элементы.ДоступностьВидовРЦ.ОтборСтрок = Новый ФиксированнаяСтруктура("НеПоказывать", Ложь);
	
	НастроитьФормуНаОснованииПравДоступа();
	
	Если УправлениеДоступом.ЧтениеРазрешено(ОтборПодразделение) Тогда
		
		ПрочитатьПараметрыПодразделения();
		
		// Даты должны соответствовать интервалу
		НачалоПериода = НачалоИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
		ОкончаниеПериода = ОкончаниеИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
		
		ЗаполнитьДанные();
		
	КонецЕсли;
	
	ПриИзмененииРежимаРедактированияДоступности();
	
	ТекущееРежимРедактированияДоступности = РежимРедактированияДоступности;
	ТекущееПодразделение = ОтборПодразделение;
	ТекущееНачалоПериода = НачалоПериода;
	ТекущееОкончаниеПериода = ОкончаниеПериода;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НужноЗаписатьНастройку() Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.';
										|en = 'All changes made to the data will be lost.'");
			Возврат;
		КонецЕсли;
		
		ПоказатьВопросЗаписатьНастройку("ЗаписатьНастройкуИЗакрыть");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство" Тогда
		Если НЕ НужноЗаписатьНастройку() Тогда
			ОбновитьДанныеКогдаФормаСтанетАктивной();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимРедактированияДоступностиПриИзменении(Элемент)
	
	Если РежимРедактированияДоступности <> ТекущееРежимРедактированияДоступности Тогда
	 	ПоказатьВопросЗаписатьНастройку("ЗаписатьНастройкуИИзменитьРежимРаботы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	Если ОтборПодразделение <> ТекущееПодразделение Тогда
	 	ПоказатьВопросЗаписатьНастройку("ЗаписатьНастройкуИИзменитьПодразделение");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НачалоПериода <> ТекущееНачалоПериода Тогда
		ПоказатьВопросЗаписатьНастройку("ЗаписатьНастройкуИИзменитьНачалоПериода");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Если ОкончаниеПериода <> ТекущееОкончаниеПериода Тогда
		ПоказатьВопросЗаписатьНастройку("ЗаписатьНастройкуИИзменитьОкончаниеПериода");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступностьВидовРЦ

&НаКлиенте
Процедура ДоступностьВидовРЦВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДоступностьВидовРЦ.ТекущиеДанные;
	
	Если Поле.Имя = "ДоступностьВидовРЦВидРабочегоЦентра" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.ВидРабочегоЦентра);
		
	ИначеЕсли Лев(Поле.Имя, 1) = "_" Тогда
		
		Если СтрНайти(Поле.Имя, "Доступность") <> 0 Тогда
			
			НомерОтображаемойДоступности = Число(Прав(Поле.Имя, 1));
			
			Если ТекущиеДанные["ОтображениеДоступности" + НомерОтображаемойДоступности] 
					= ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ") Тогда
				ДатаПериода = ДатаСвязаннаяСКолонкой(Поле.Имя);
				ВводГрафиковРаботыРабочихЦентров(ДатаПериода, НомерОтображаемойДоступности);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Подключаемый обработчик события ПриИзменении для реквизита Доступность1..N
// 
// Параметры:
// 	Элемент - ПолеФормы - поле ввода реквизита Доступность 
&НаКлиенте
Процедура Подключаемый_ДоступностьВидовРЦДоступностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоступностьВидовРЦ.ТекущиеДанные;
	ДатаПериода = ДатаСвязаннаяСКолонкой(Элемент.Имя); // 
	ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
	НомерОтображаемойДоступности = Число(Прав(Элемент.Имя, 1));
	ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьСекунд" + НомерОтображаемойДоступности] = ТекущиеДанные[ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности] * 3600;
	
	ПриИзмененииДоступностиВСтроке(ТекущиеДанные, ДатаПериода, НомерОтображаемойДоступности);
	
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	ЗаполнитьИтогоВСтроке(ТекущиеДанные, НомерОтображаемойДоступности, ДатыВыбранногоПериода, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСохранитьИзменения(Команда)
	
	ЗаписатьНастройку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьДоступностьДляФормированияРасписания(Команда)
	
	Если Элементы.ДоступностьВидовРЦ.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать виды рабочих центров.';
										|en = 'Select work center types.'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДоступностьДляФормированияРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьДоступностьДляФормированияГрафика(Команда)
	
	ЗаполнитьДоступностьДляФормированияГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьКудаВнесеныРучныеИзменения(Команда)
	
	ПоказатьКудаВнесеныРучныеИзменения = НЕ ПоказатьКудаВнесеныРучныеИзменения;
	
	Элементы.ВидыРЦПоказатьКудаВнесеныРучныеИзменения1.Пометка = ПоказатьКудаВнесеныРучныеИзменения;
	Элементы.ВидыРЦПоказатьКудаВнесеныРучныеИзменения2.Пометка = ПоказатьКудаВнесеныРучныеИзменения;

	ПоказатьКудаВнесеныРучныеИзмененияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
 	ПоказатьВопросЗаписатьНастройку("ЗаписатьНастройкуИОбновитьДанные");
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодДляВводаДоступности(Команда)
	
 	ПоказатьВопросЗаписатьНастройку("ЗаписатьНастройкуИУстановитьПериодДляВводаДоступности");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанных

&НаСервере
Процедура ЗаполнитьДанные(СохранитьПараметрыОтбора = Ложь)

	Если СохранитьПараметрыОтбора Тогда
		СохранитьПараметрыОтбора();
	КонецЕсли;
	
	// Запомним текущий вид РЦ чтобы потом сделать нужную строку активной
	Если ТекущийВидРабочегоЦентраВСтроке.Пустая() Тогда
		ТекущаяСтрока = Элементы.ДоступностьВидовРЦ.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = ДоступностьВидовРЦ.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущийВидРабочегоЦентраВСтроке = ТекущиеДанные.ВидРабочегоЦентра;
		КонецЕсли; 
	КонецЕсли; 
	
	РасписаниеГрафиковРаботыРЦ = Обработки.ДоступностьВидовРабочихЦентров.СоздатьТаблицуРасписаниеГрафиковРаботыРЦ();
	АдресДанныхГрафикиРаботыРЦ = ПоместитьВоВременноеХранилище(РасписаниеГрафиковРаботыРЦ, УникальныйИдентификатор);
	
	ОтображаетсяДоступностьПоВидуРЦ = Ложь;
	ОтображаетсяДоступностьПоГрафикуРаботыРЦ = Ложь;
	ОтображаетсяДоступностьПоГрафикуПроизводства = Ложь;
	
	ГрафикРаботыРЦЗаполненПо = '000101010000';
	ДоступностьДляГрафикаЗаполненаПо = '000101010000';
	
	ДоступностьВидовРЦ.Очистить();
	
	ОбновитьСоставКолонокДоступности();
	УстановитьУсловноеОформлениеТаблицы();
	ЗаполнитьДоступность();
	ПоказатьКудаВнесеныРучныеИзмененияНаСервере();
	
	Если РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства
		И ОкончаниеИнтервалаПланирования(ДоступностьДляГрафикаЗаполненаПо, ИнтервалПланирования) < ДоступностьДляГрафикаНужноЗаполнитьПо Тогда
		
		ИнформацияКРежимуРаботы = НадписьДоступностьДляГрафикаНужноЗаполнитьПо;
		
	ИначеЕсли РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ 
		И ОкончаниеИнтервалаПланирования(ГрафикРаботыРЦЗаполненПо, ИнтервалПланирования) < ГрафикРаботыРЦНужноЗаполнитьПо Тогда
		
		ИнформацияКРежимуРаботы = НадписьГрафикРаботыРЦНужноЗаполнитьПо;
		
	Иначе
		ИнформацияКРежимуРаботы = "";
	КонецЕсли; 
	
	Если НЕ ТекущийВидРабочегоЦентраВСтроке.Пустая() Тогда
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ТекущийВидРабочегоЦентраВСтроке);
		СписокСтрок = ДоступностьВидовРЦ.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.ДоступностьВидовРЦ.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли; 
		ТекущийВидРабочегоЦентраВСтроке = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставКолонокДоступности()

	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	
	СписокНовыхДат = Новый Массив;
	
	// Колонки нужно добавлять в порядке расположения их на форме
	ТипЧасы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный));
	ТипСекунды = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0, ДопустимыйЗнак.Неотрицательный));
	СписокКолонок = Новый Массив;
	ДобавитьОписаниеКолонки("Отображать", Новый ОписаниеТипов("Булево"), Ложь, 3, СписокКолонок);
	ДобавитьОписаниеКолонки("ВнесеныРучныеИзменения", Новый ОписаниеТипов("Булево"), Ложь, 3, СписокКолонок);
	ДобавитьОписаниеКолонки("ДефицитДоступности", Новый ОписаниеТипов("Булево"), Истина, 3, СписокКолонок);
	ДобавитьОписаниеКолонки("Доступность", ТипЧасы, Истина, 3, СписокКолонок);
	ДобавитьОписаниеКолонки("ДоступностьСекунд", ТипСекунды, Ложь, 3, СписокКолонок);
	ДобавитьОписаниеКолонки("ДоступностьВидРЦ", ТипСекунды, Ложь, 1, СписокКолонок);
	ДобавитьОписаниеКолонки("ДоступностьРЦ", ТипСекунды, Ложь, 1, СписокКолонок);
	ДобавитьОписаниеКолонки("ДоступностьГрафик", ТипСекунды, Ложь, 1, СписокКолонок);
	ДобавитьОписаниеКолонки("ДанныеИзменены", Новый ОписаниеТипов("Булево"), Ложь, 3, СписокКолонок);
	ДобавитьОписаниеКолонки("ДоступностьЗаполнена", Новый ОписаниеТипов("Булево"), Ложь, 3, СписокКолонок);
	
	// Заполняем массив добавляемых реквизитов только новыми колонками.
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
		
		Если СписокОтображаемыхДат.НайтиПоЗначению(ДатаПериода) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		
		СписокНовыхДат.Добавить(ДатаПериода);
		
		Для каждого ОписаниеКолонки Из СписокКолонок Цикл
			Для НомерОтображаемойДоступности = 1 По ОписаниеКолонки.КоличествоКопий Цикл
				ИмяКолонки = ИмяКолонкиПериода + ОписаниеКолонки.Имя + НомерОтображаемойДоступности;
				НоваяКолонка = Новый РеквизитФормы(ИмяКолонки, ОписаниеКолонки.Тип, "ДоступностьВидовРЦ");
				МассивДобавляемыхРеквизитов.Добавить(НоваяКолонка);
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	// Удалим ненужные даты
	МассивУдаляемыхРеквизитов = Новый Массив;
	СписокНенужныхДат = Новый Массив;
	Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
		ДатаПериода = ЭлДата.Значение;
		
		Если ДатыВыбранногоПериода.Найти(ДатаПериода) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		
		Для каждого ОписаниеКолонки Из СписокКолонок Цикл
			Для НомерОтображаемойДоступности = 1 По ОписаниеКолонки.КоличествоКопий Цикл
				ИмяКолонки = ИмяКолонкиПериода + ОписаниеКолонки.Имя + НомерОтображаемойДоступности;
				МассивУдаляемыхРеквизитов.Добавить("ДоступностьВидовРЦ." + ИмяКолонки);
				Если ОписаниеКолонки.ЕстьНаФорме Тогда
					Элементы.Удалить(Элементы.Найти(ИмяКолонки));
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
		
		Элементы.Удалить(Элементы.Найти(ИмяКолонкиПериода + "ГруппаДоступность1"));
		Элементы.Удалить(Элементы.Найти(ИмяКолонкиПериода + "ГруппаДоступность2"));
		Элементы.Удалить(Элементы.Найти(ИмяКолонкиПериода + "ГруппаДоступность3"));
		Элементы.Удалить(Элементы.Найти(ИмяКолонкиПериода + "ГруппаПериод"));
		
		СписокНенужныхДат.Добавить(ЭлДата);
	КонецЦикла;
	
	Для каждого ЭлДата Из СписокНенужныхДат Цикл
		СписокОтображаемыхДат.Удалить(ЭлДата);
	КонецЦикла; 
	
	// Удаляем и добавляем реквизиты формы.
	Если МассивДобавляемыхРеквизитов.Количество() > 0 ИЛИ МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	// Добавляем элементы формы, если таких еще нет.
	Для Каждого НоваяДата Из СписокНовыхДат Цикл
		
		СписокОтображаемыхДат.Добавить(НоваяДата);
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(НоваяДата);
		
		// Найдем колонку перед которой нужно добавить новую
		ЭлементСледующийПериод = Элементы.ДоступностьВидовРЦПоследняяПустаяКолонка;
		Для Каждого СуществующаяКолонка Из Элементы.ДоступностьВидовРЦ.ПодчиненныеЭлементы Цикл
			
			Если СтрНайти(СуществующаяКолонка.Имя, "ГруппаПериод") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующаяКолонкаДата = ДатаСвязаннаяСКолонкой(СуществующаяКолонка.Имя);
			Если СуществующаяКолонкаДата > НоваяДата Тогда
				
				ЭлементСледующийПериод = СуществующаяКолонка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим группу в которой будут размещены новые элементы
		ГруппаПериода = Элементы.Вставить(ИмяКолонкиПериода + "ГруппаПериод", 
											Тип("ГруппаФормы"), 
											Элементы.ДоступностьВидовРЦ, 
											ЭлементСледующийПериод);
											
		ГруппаПериода.Группировка = ГруппировкаКолонок.Вертикальная;
		ГруппаПериода.ОтображатьВШапке = Истина;
		ГруппаПериода.ОтображатьЗаголовок = Истина;
		
		// Добавим элементы
		Для НомерОтображаемойДоступности = 1 По 3 Цикл
			
			ИмяНовогоЭлемента = ИмяКолонкиПериода + "ГруппаДоступность" + НомерОтображаемойДоступности;
			ГруппаДоступности = Элементы.Добавить(ИмяНовогоЭлемента, Тип("ГруппаФормы"), ГруппаПериода);
			ГруппаДоступности.Группировка = ГруппировкаКолонок.ВЯчейке;
			
			Для каждого ОписаниеКолонки Из СписокКолонок Цикл
				
				ИмяНовогоЭлемента = ИмяКолонкиПериода + ОписаниеКолонки.Имя + НомерОтображаемойДоступности;
				
				НовыйЭлемент = Неопределено;
				Если ОписаниеКолонки.Имя = "Доступность" Тогда
					НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, Тип("ПолеФормы"), ГруппаДоступности);
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.Ширина = 5;
					НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ДоступностьВидовРЦДоступностьПриИзменении");
					
				ИначеЕсли ОписаниеКолонки.Имя = "ДефицитДоступности" Тогда
					НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, Тип("ПолеФормы"), ГруппаДоступности);
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
					НовыйЭлемент.КартинкаЗначений = БиблиотекаКартинок.ДефицитДоступности;
				КонецЕсли; 
				
				// Одинаковые свойства для всех добавляемых элементов
				Если НовыйЭлемент <> Неопределено Тогда
					НовыйЭлемент.ПутьКДанным = "ДоступностьВидовРЦ." + ИмяКолонкиПериода + ОписаниеКолонки.Имя + НомерОтображаемойДоступности;
					НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
					НовыйЭлемент.ОтображатьВШапке = Ложь;
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЦикла;

	// Обновим заголовки дат
	Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
		ДатаПериода = ЭлДата.Значение;
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		ГруппаПериода = Элементы[ИмяКолонкиПериода + "ГруппаПериод"]; // ГруппаФормы
		ГруппаПериода.Заголовок = ЗаголовокКолонкиПериода(ДатаПериода);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицы()

	УсловноеОформление.Элементы.Очистить();
	
	// Скрыть поля если ОтображениеДоступности не заполнено
	#Область СкрытьЕслиОтображениеДоступностиНеЗаполнено
	Для НомерОтображаемойДоступности = 1 По 3 Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦОтображениеДоступностиКартинка" + НомерОтображаемойДоступности);

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦОтображениеРедактированиеДоступности" + НомерОтображаемойДоступности);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦДоступностьВведенаПо" + НомерОтображаемойДоступности);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦИтогоДоступно" + НомерОтображаемойДоступности);
		
		Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
			
			ДатаПериода = ЭлДата.Значение;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ИмяПоля = ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности;
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ИмяПоля = ИмяКолонкиПериода + "ДефицитДоступности" + НомерОтображаемойДоступности;
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;	
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ОтображениеДоступности" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЦикла; 
	#КонецОбласти
	
	// Запрет редактирования полей где отображается доступность по РЦ и по графику производства.
	#Область ЗапретРедактированияПолей
	Для НомерОтображаемойДоступности = 1 По 3 Цикл
	
		Элемент = УсловноеОформление.Элементы.Добавить();

		Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
			
			ДатаПериода = ЭлДата.Значение;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			ИмяПоляДоступность = ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности;
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДоступность);
			
		КонецЦикла;	
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ОтображениеДоступности" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ОтображениеДоступности" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЦикла; 
	#КонецОбласти

	// Вывод нолей в полях где вводится доступность
	#Область ПоказыватьНольЕслиВводитсяДоступность
	Для НомерОтображаемойДоступности = 1 По 3 Цикл
	
		Элемент = УсловноеОформление.Элементы.Добавить();
			
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ОтображениеРедактированиеДоступности" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2; ЧН=0");
		
		// В полях дат
		Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
			
			ДатаПериода = ЭлДата.Значение;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			ИмяПоляДоступность = ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности;
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДоступность);
			
		КонецЦикла;	
		
		// Итоговая доступность
		ИмяПоляДоступность = "ДоступностьВидовРЦИтогоДоступно" + НомерОтображаемойДоступности;
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДоступность);
		
	КонецЦикла;
	#КонецОбласти
		
	// Выделение красным даты заполнения доступности при вводе доступности для графика
	#Область КраснымДоступностьЗаполненаПоДляГрафика
	Для НомерОтображаемойДоступности = 1 По 3 Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();

		ИмяПоля = "ДоступностьВидовРЦДоступностьВведенаПо" + НомерОтображаемойДоступности;
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
		// Должен быть режим ввода доступности для графика
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимРедактированияДоступности");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ДоступностьВведенаПо" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьДляГрафикаНужноЗаполнитьПо");
		
		ГруппаОтборИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		// Если доступность вводится для вида РЦ
		ГруппаОтборИ = ГруппаОтборИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтборИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ВводитьДоступностьДляВидаРЦ");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтборИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ОтображениеДоступности" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ;
		
		// Если доступность вводится для РЦ
		ГруппаОтборИ = ГруппаОтборИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтборИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ВводитьДоступностьДляВидаРЦ");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтборИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ОтображениеДоступности" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	КонецЦикла;
	#КонецОбласти
	
	// Выделение красным даты заполнения доступности при вводе доступности для формирования расписания.
	#Область КраснымДоступностьЗаполненаПоДлярасписания
	Для НомерОтображаемойДоступности = 1 По 3 Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();

		ИмяПоля = "ДоступностьВидовРЦДоступностьВведенаПо" + НомерОтображаемойДоступности;
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
		// Должен быть режим ввода доступности для расписания
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимРедактированияДоступности");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ДоступностьВведенаПо" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикРаботыРЦНужнозаполнитьПо");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ.ОтображениеДоступности" + НомерОтображаемойДоступности);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	КонецЦикла;
	#КонецОбласти
	
	// Выделение жирным ручных изменений
	#Область ВнесеныРучныеИзменения
	Для НомерОтображаемойДоступности = 1 По 3 Цикл
	
		// В полях дат
		Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ДатаПериода = ЭлДата.Значение;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			ИмяПоляДоступность = ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности;
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДоступность);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоступностьВидовРЦ." + ИмяКолонкиПериода + "ВнесеныРучныеИзменения" + НомерОтображаемойДоступности);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
			
		КонецЦикла;	
		
	КонецЦикла;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступность()

	Если ОтборПодразделение.Пустая() 
		ИЛИ НачалоПериода = '000101010000' 
		ИЛИ ОкончаниеПериода = '000101010000' Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыРабочихЦентров.Ссылка,
	|	ВидыРабочихЦентров.ВводитьДоступностьДляВидаРЦ,
	|	ВидыРабочихЦентров.ПланироватьРаботуРабочихЦентров,
	|	ВидыРабочихЦентров.УчитыватьДоступностьПоГрафикуРаботы
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Подразделение = &Подразделение
	|	И НЕ ВидыРабочихЦентров.ЭтоГруппа
	|	И НЕ ВидыРабочихЦентров.ПометкаУдаления
	|	И (&РежимРедактированияДоступности = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства)
	|				И ВидыРабочихЦентров.УчитыватьДоступностьПоГрафикуРаботы
	|			ИЛИ &РежимРедактированияДоступности = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ)
	|				И ВидыРабочихЦентров.ПланироватьРаботуРабочихЦентров
	|			ИЛИ &РежимРедактированияДоступности = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ТолькоПросмотр))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыРабочихЦентров.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьВидовРабочихЦентровОбороты.ЗанятоОборот КАК ЗанятоОборот,
	|	ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоВидуРЦОборот КАК ДоступностьПоВидуРЦОборот,
	|	ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоРЦОборот КАК ДоступностьПоРЦОборот,
	|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала КАК ДатаИнтервала
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров.Обороты(
	|			,
	|			,
	|			,
	|			ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|				И ВидРабочегоЦентра.Подразделение = &Подразделение) КАК ДоступностьВидовРабочихЦентровОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ДатыЗаполненияДоступности.ДоступностьДляГрафикаЗаполненаПо), ДАТАВРЕМЯ(1, 1, 1)) КАК ДоступностьДляГрафикаЗаполненаПо,
	|	ЕСТЬNULL(МАКСИМУМ(ДатыЗаполненияДоступности.ГрафикРаботыРЦЗаполненПо), ДАТАВРЕМЯ(1, 1, 1)) КАК ГрафикРаботыРЦЗаполненПо
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|						И ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьВидаРабочихЦентров
	|					ИЛИ НЕ ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|						И ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьРабочихЦентров
	|				ТОГДА ДоступностьВидовРабочихЦентров.ДатаИнтервала
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ КАК ДоступностьДляГрафикаЗаполненаПо,
	|		ВЫБОР
	|			КОГДА ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьРабочихЦентров
	|				ТОГДА ДоступностьВидовРабочихЦентров.ДатаИнтервала
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ КАК ГрафикРаботыРЦЗаполненПо
	|	ИЗ
	|		РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
	|	ГДЕ
	|		ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.Подразделение = &Подразделение
	|		И ДоступностьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности) КАК ДатыЗаполненияДоступности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступностьРабочихЦентров.ДатаГрафика,
	|	ДоступностьРабочихЦентров.ВидРабочегоЦентра
	|ИЗ
	|	Документ.ДоступностьРабочихЦентров КАК ДоступностьРабочихЦентров
	|ГДЕ
	|	ДоступностьРабочихЦентров.Проведен
	|	И ДоступностьРабочихЦентров.ДатаГрафика МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ДоступностьРабочихЦентров.ВидРабочегоЦентра.Подразделение = &Подразделение
	|	И ДоступностьРабочихЦентров.ВнесеныРучныеИзменения";
	
	Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("РежимРедактированияДоступности", РежимРедактированияДоступности);
	
	Результат = Запрос.ВыполнитьПакет();  
	ВыборкаВидовРЦ = Результат[0].Выбрать();
	
	ТаблицаДоступностьВидовРЦ = Результат[1].Выгрузить();
	Для каждого ДанныеОДоступностиВидаРЦ Из ТаблицаДоступностьВидовРЦ Цикл
		ДанныеОДоступностиВидаРЦ.ДатаИнтервала = НачалоДня(ДанныеОДоступностиВидаРЦ.ДатаИнтервала);
	КонецЦикла;
	ТаблицаДоступностьВидовРЦ.Свернуть("ВидРабочегоЦентра,ДатаИнтервала", "ЗанятоОборот,ДоступностьПоВидуРЦОборот,ДоступностьПоРЦОборот");
	ТаблицаДоступностьВидовРЦ.Индексы.Добавить("ВидРабочегоЦентра");
	
	ТаблицаРучныеИзменения = Результат[3].Выгрузить();
	ТаблицаРучныеИзменения.Индексы.Добавить("ВидРабочегоЦентра");
	
	ДатыЗаполненияДоступности = Результат[2].Выбрать();
	ДатыЗаполненияДоступности.Следующий();
	ДоступностьДляГрафикаЗаполненаПо = ДатыЗаполненияДоступности.ДоступностьДляГрафикаЗаполненаПо;
	ГрафикРаботыРЦЗаполненПо = ДатыЗаполненияДоступности.ГрафикРаботыРЦЗаполненПо;
	
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	
	Пока ВыборкаВидовРЦ.Следующий() Цикл
		
		СтрокаДоступность = ДоступностьВидовРЦ.Добавить();
		СтрокаДоступность.ВидРабочегоЦентра = ВыборкаВидовРЦ.Ссылка;
		СтрокаДоступность.ВводитьДоступностьДляВидаРЦ = ВыборкаВидовРЦ.ВводитьДоступностьДляВидаРЦ;
		
		// Определим какую нужно показать доступность
		Если ВыборкаВидовРЦ.УчитыватьДоступностьПоГрафикуРаботы 
			И ВыборкаВидовРЦ.ПланироватьРаботуРабочихЦентров
			И ВыборкаВидовРЦ.ВводитьДоступностьДляВидаРЦ Тогда
			
			СтрокаДоступность.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ;
			СтрокаДоступность.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства;
			СтрокаДоступность.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
			
			ОтображаетсяДоступностьПоВидуРЦ = Истина;
			ОтображаетсяДоступностьПоГрафикуРаботыРЦ = Истина;
			ОтображаетсяДоступностьПоГрафикуПроизводства = Истина;
			
		ИначеЕсли ВыборкаВидовРЦ.УчитыватьДоступностьПоГрафикуРаботы
			И НЕ ВыборкаВидовРЦ.ВводитьДоступностьДляВидаРЦ Тогда

			СтрокаДоступность.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
			СтрокаДоступность.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства;
			
			ОтображаетсяДоступностьПоГрафикуРаботыРЦ = Истина;
			ОтображаетсяДоступностьПоГрафикуПроизводства = Истина;
			
		ИначеЕсли ВыборкаВидовРЦ.УчитыватьДоступностьПоГрафикуРаботы
			И ВыборкаВидовРЦ.ВводитьДоступностьДляВидаРЦ Тогда

			СтрокаДоступность.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ;
			СтрокаДоступность.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства;
			
			ОтображаетсяДоступностьПоВидуРЦ = Истина;
			ОтображаетсяДоступностьПоГрафикуПроизводства = Истина;
			
		Иначе
			
			СтрокаДоступность.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
			
			ОтображаетсяДоступностьПоГрафикуРаботыРЦ = Истина;
			
		КонецЕсли; 
		
		ЗаполнитьНомерКартинкиДоступности(СтрокаДоступность, 1);
		ЗаполнитьНомерКартинкиДоступности(СтрокаДоступность, 2);
		ЗаполнитьНомерКартинкиДоступности(СтрокаДоступность, 3);
		
		// Заполнение доступности
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", СтрокаДоступность.ВидРабочегоЦентра);
  		ДоступностьВидаРЦ = ТаблицаДоступностьВидовРЦ.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОДоступностиВидаРЦ Из ДоступностьВидаРЦ Цикл
			ЗаполнитьДоступностьВСтроке(ДанныеОДоступностиВидаРЦ.ДатаИнтервала, 1, ДанныеОДоступностиВидаРЦ, СтрокаДоступность);
			ЗаполнитьДоступностьВСтроке(ДанныеОДоступностиВидаРЦ.ДатаИнтервала, 2, ДанныеОДоступностиВидаРЦ, СтрокаДоступность);
			ЗаполнитьДоступностьВСтроке(ДанныеОДоступностиВидаРЦ.ДатаИнтервала, 3, ДанныеОДоступностиВидаРЦ, СтрокаДоступность);
		КонецЦикла;
		
		// Заполнение ручных изменений
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", СтрокаДоступность.ВидРабочегоЦентра);
  		РучныеИзмененияВидаРЦ = ТаблицаРучныеИзменения.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОРучныхИзменениях Из РучныеИзмененияВидаРЦ Цикл
			ДатаИнтервала = НачалоИнтервалаПланирования(ДанныеОРучныхИзменениях.ДатаГрафика, ИнтервалПланирования);
			ЗаполнитьРучныеИзмененияВСтроке(ДатаИнтервала, 1, Истина, СтрокаДоступность);
			ЗаполнитьРучныеИзмененияВСтроке(ДатаИнтервала, 2, Истина, СтрокаДоступность);
			ЗаполнитьРучныеИзмененияВСтроке(ДатаИнтервала, 3, Истина, СтрокаДоступность);
		КонецЦикла;
		
		ЗаполнитьИтогоВСтроке(СтрокаДоступность, 1, ДатыВыбранногоПериода, ЭтаФорма);
		ЗаполнитьИтогоВСтроке(СтрокаДоступность, 2, ДатыВыбранногоПериода, ЭтаФорма);
		ЗаполнитьИтогоВСтроке(СтрокаДоступность, 3, ДатыВыбранногоПериода, ЭтаФорма);
		
	КонецЦикла;

КонецПроцедуры
 
&НаСервере
Функция ОбработатьПараметрыФормы(НеЗагружатьПараметрыОтбора)

	ПараметрыОбработаны = Ложь;
	
	Если Параметры.Свойство("РежимРаботы") Тогда
		
		РежимРедактированияДоступности = Параметры.РежимРаботы;
		
	КонецЕсли;
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора")
		И Параметры.СтруктураБыстрогоОтбора.Свойство("Подразделение") Тогда
		
		// Открытие формы из формы "Текущие дела"
		ОтборПодразделение = Параметры.СтруктураБыстрогоОтбора.Подразделение;
		РежимРедактированияДоступности = Параметры.СтруктураБыстрогоОтбора.РежимРаботы;
		
		ЗаполнитьПериодДляВводаНедостающейДоступности();
		
		ПараметрыОбработаны = Истина;
		
	ИначеЕсли Параметры.Свойство("Подразделение") Тогда
		
		ОтборПодразделение = Параметры.Подразделение;
		РежимРедактированияДоступности = Параметры.РежимРаботы;
		
		Если Параметры.Свойство("ВводНедостающейДоступности")
			И Параметры.ВводНедостающейДоступности Тогда
			
			ЗаполнитьПериодДляВводаНедостающейДоступности();
		КонецЕсли;
		
		ПараметрыОбработаны = Истина;
		
	ИначеЕсли Параметры.Свойство("ВидРабочегоЦентра") Тогда
		
		// Открытие формы для ввода доступности по виду РЦ
		ТекущийВидРабочегоЦентраВСтроке = Параметры.ВидРабочегоЦентра;
		
		РеквизитыПодразделения = Новый Структура;
		РеквизитыПодразделения.Вставить("Подразделение", "Подразделение");
		РеквизитыПодразделения.Вставить("ИнтервалПланирования", "Подразделение.ИнтервалПланирования");
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийВидРабочегоЦентраВСтроке, РеквизитыПодразделения);
		УстановитьПривилегированныйРежим(Ложь);
		ОтборПодразделение = РеквизитыПодразделения.Подразделение;
		ИнтервалПланирования = РеквизитыПодразделения.ИнтервалПланирования;
		
		НачалоПериода = НачалоИнтервалаПланирования(Параметры.НачалоПериода, ИнтервалПланирования);
		ОкончаниеПериода = ОкончаниеИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
		
		ПараметрыОбработаны = Истина;
		
	КонецЕсли;
		
	Возврат ПараметрыОбработаны;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования)
	
	ДатыВыбранногоПериода = Новый Массив;
	
	Если НачалоПериода = '000101010000' ИЛИ ОкончаниеПериода = '000101010000' Тогда
		Возврат ДатыВыбранногоПериода;
	КонецЕсли;
	
	ДатаПериода = НачалоПериода;
	Пока ДатаПериода <= ОкончаниеПериода Цикл
		
		ДатыВыбранногоПериода.Добавить(ДатаПериода);
		ДатаПериода = КонецДня(ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ДатаПериода, ИнтервалПланирования)) + 1;
		
	КонецЦикла;
	
	Возврат ДатыВыбранногоПериода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиПериода(ТекущийПериод)

	Возврат "_" + Формат(ТекущийПериод, "ДФ=yyyyMMdd");

КонецФункции

&НаСервере
Функция ЗаголовокКолонкиПериода(ДатаПериода)
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Возврат ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(ДатаПериода, Перечисления.ТочностьГрафикаПроизводства.День);
	Иначе
		Возврат ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(ДатаПериода, ИнтервалПланирования);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаСвязаннаяСКолонкой(ИмяКолонки)

	Возврат Дата(Сред(ИмяКолонки,2,8));

КонецФункции

&НаСервере
Процедура ДобавитьОписаниеКолонки(ИмяКолонки, ОписаниеТипа, ЕстьНаФорме, КоличествоКопий, СписокДополнительныхКолонок)

	ОписаниеКолонки = Новый Структура;
	ОписаниеКолонки.Вставить("Имя", ИмяКолонки);
	ОписаниеКолонки.Вставить("Тип", ОписаниеТипа);
	ОписаниеКолонки.Вставить("ЕстьНаФорме", ЕстьНаФорме);
	ОписаниеКолонки.Вставить("КоличествоКопий", КоличествоКопий); 
	СписокДополнительныхКолонок.Добавить(ОписаниеКолонки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерКартинкиДоступности(СтрокаДоступность, НомерОтображаемойДоступности)

	ИмяПоля = "ОтображениеДоступности" + НомерОтображаемойДоступности;
	РедактированиеДоступности = Ложь;
	
	Если СтрокаДоступность[ИмяПоля] = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
		НомерКартинки = 1;
		Если РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства Тогда
			РедактированиеДоступности = Истина;
		КонецЕсли;
	ИначеЕсли СтрокаДоступность[ИмяПоля] = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
		НомерКартинки = 2;
		Если РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ 
			ИЛИ РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства
				И НЕ СтрокаДоступность.ВводитьДоступностьДляВидаРЦ Тогда
			РедактированиеДоступности = Истина;
		КонецЕсли; 
	ИначеЕсли СтрокаДоступность[ИмяПоля] = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства Тогда
		НомерКартинки = 3;
	Иначе
		НомерКартинки = 0;
	КонецЕсли; 

	СтрокаДоступность["ОтображениеДоступностиКартинка" + НомерОтображаемойДоступности] = НомерКартинки;
	СтрокаДоступность["ОтображениеРедактированиеДоступности" + НомерОтображаемойДоступности] = РедактированиеДоступности;
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДоступностьВСтроке(ДатаИнтервала, НомерОтображаемойДоступности, ДанныеОДоступностиВидаРЦ, СтрокаДоступность)

	Если НачалоИнтервалаПланирования(ДатаИнтервала, ИнтервалПланирования) <> ДатаИнтервала Тогда
		// В регистре данные не соответствуют интервалу планирования
		// Такое могло произойти при смене интервала планирования.
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаИнтервала);
	
	ИмяПоляДоступность = ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности;
	ИмяПоляДоступностьСекунд = ИмяКолонкиПериода + "ДоступностьСекунд" + НомерОтображаемойДоступности;
	ИмяПоляОтображениеДоступности = "ОтображениеДоступности" + НомерОтображаемойДоступности;
	
	ДоступностьВСтроке = 0;
	
	Если СтрокаДоступность[ИмяПоляОтображениеДоступности] = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
		ДоступностьВСтроке = ДанныеОДоступностиВидаРЦ.ДоступностьПоВидуРЦОборот;
	ИначеЕсли СтрокаДоступность[ИмяПоляОтображениеДоступности] = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
		ДоступностьВСтроке = ДанныеОДоступностиВидаРЦ.ДоступностьПоРЦОборот;
	ИначеЕсли СтрокаДоступность[ИмяПоляОтображениеДоступности] = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства Тогда
		ДоступностьВСтроке = ДанныеОДоступностиВидаРЦ.ЗанятоОборот;
	КонецЕсли;
	
	Если ДоступностьВСтроке <> 0 Тогда
		СтрокаДоступность[ИмяПоляДоступность] = ДоступностьВСтроке / 3600;
		СтрокаДоступность[ИмяПоляДоступностьСекунд] = ДоступностьВСтроке;
	КонецЕсли; 
	
	ПриИзмененииДоступностиВСтроке(СтрокаДоступность, ДатаИнтервала, НомерОтображаемойДоступности, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРучныеИзмененияВСтроке(ДатаИнтервала, НомерОтображаемойДоступности, ВнесеныРучныеИзменения, СтрокаДоступность)

	ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаИнтервала);
	
	ИмяПоляОтображениеДоступности = "ОтображениеДоступности" + НомерОтображаемойДоступности;
	
	Если СтрокаДоступность[ИмяПоляОтображениеДоступности] = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
		ИмяПоля = ИмяКолонкиПериода + "ВнесеныРучныеИзменения" + НомерОтображаемойДоступности;
		СтрокаДоступность[ИмяПоля] = ВнесеныРучныеИзменения;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтогоВСтроке(СтрокаДоступность, НомерОтображаемойДоступности, ДатыВыбранногоПериода, Форма)

	ИтогоДоступно = 0;
	ИтогоДоступностьВидРЦ = 0;
	ИтогоДоступностьГрафик = 0;
	ИтогоДоступностьРЦ = 0;
	ДоступностьВведенаПо = '000101010000';
	
	Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		
		ИмяПоляДоступностьСекунд = ИмяКолонкиПериода + "ДоступностьСекунд" + НомерОтображаемойДоступности;
		ИтогоДоступно = ИтогоДоступно + СтрокаДоступность[ИмяПоляДоступностьСекунд];
		
		ИмяПоля = ИмяКолонкиПериода + "ДоступностьВидРЦ1";
		ИтогоДоступностьВидРЦ = ИтогоДоступностьВидРЦ + СтрокаДоступность[ИмяПоля];
		
		ИмяПоля = ИмяКолонкиПериода + "ДоступностьРЦ1";
		ИтогоДоступностьРЦ = ИтогоДоступностьРЦ + СтрокаДоступность[ИмяПоля];
		
		ИмяПоля = ИмяКолонкиПериода + "ДоступностьГрафик1";
		ИтогоДоступностьГрафик = ИтогоДоступностьГрафик + СтрокаДоступность[ИмяПоля];
		
		Если СтрокаДоступность[ИмяКолонкиПериода + "ДоступностьЗаполнена" + НомерОтображаемойДоступности] Тогда
			ДоступностьВведенаПо = Макс(ДатаПериода, ДоступностьВведенаПо);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаДоступность["ИтогоДоступно" + НомерОтображаемойДоступности] = ИтогоДоступно / 3600;
	
	ИмяПоляОтображениеДоступности = "ОтображениеДоступности" + НомерОтображаемойДоступности;
	ИмяПоляДоступностьВведенаПо = "ДоступностьВведенаПо" + НомерОтображаемойДоступности;
	Если СтрокаДоступность[ИмяПоляОтображениеДоступности] = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоВидуРЦ") Тогда
		СтрокаДоступность[ИмяПоляДоступностьВведенаПо] = Макс(ДоступностьВведенаПо, Форма.ДоступностьДляГрафикаЗаполненаПо);
	ИначеЕсли СтрокаДоступность[ИмяПоляОтображениеДоступности] = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ") Тогда
		СтрокаДоступность[ИмяПоляДоступностьВведенаПо] = Макс(ДоступностьВведенаПо, Форма.ГрафикРаботыРЦЗаполненПо);
	Иначе
		СтрокаДоступность[ИмяПоляДоступностьВведенаПо] = ДоступностьВведенаПо;
	КонецЕсли; 
	
	СтрокаДоступность.ИтогоДоступностьВидРЦ = ИтогоДоступностьВидРЦ;
	СтрокаДоступность.ИтогоДоступностьГрафик = ИтогоДоступностьГрафик;
	СтрокаДоступность.ИтогоДоступностьРЦ = ИтогоДоступностьРЦ;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыПодразделения()

	ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.ПустаяСсылка();
	ДоступностьДляГрафикаНужноЗаполнитьПо = '000101010000';
	ГрафикРаботыРЦНужнозаполнитьПо = '000101010000';
	НадписьДоступностьДляГрафикаНужноЗаполнитьПо = "";
	НадписьГрафикРаботыРЦНужнозаполнитьПо = "";
	
	Если ОтборПодразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = "ИнтервалПланирования";
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтборПодразделение, СписокРеквизитов);	
	ИнтервалПланирования = РеквизитыПодразделения.ИнтервалПланирования;
	
	// Определим по какую дату нужно заполнить доступность
	ДоступностьТребуетсяЗаполнитьПо = Справочники.СтруктураПредприятия.ДоступностьТребуетсяЗаполнитьПо(ОтборПодразделение);
	ДоступностьДляГрафикаНужноЗаполнитьПо = ДоступностьТребуетсяЗаполнитьПо.ДоступностьДляГрафикаНужноЗаполнитьПо;
	Если ДоступностьДляГрафикаНужноЗаполнитьПо <> '000101010000' Тогда
		ДоступностьДляГрафикаНужноЗаполнитьПо = ОкончаниеИнтервалаПланирования(
			ДоступностьДляГрафикаНужноЗаполнитьПо, ИнтервалПланирования);
		НадписьДоступностьДляГрафикаНужноЗаполнитьПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = '(требуется заполнить по %1)';
													|en = '(required to fill in by %1)'"),
												Формат(ДоступностьДляГрафикаНужноЗаполнитьПо, "ДЛФ=D"));
	КонецЕсли;

	ГрафикРаботыРЦНужнозаполнитьПо = ДоступностьТребуетсяЗаполнитьПо.ГрафикРаботыРЦНужнозаполнитьПо;
	Если ГрафикРаботыРЦНужнозаполнитьПо <> '000101010000' Тогда
		ГрафикРаботыРЦНужнозаполнитьПо = ОкончаниеИнтервалаПланирования(
			ГрафикРаботыРЦНужнозаполнитьПо, ИнтервалПланирования);
		НадписьГрафикРаботыРЦНужнозаполнитьПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = '(требуется заполнить по %1)';
													|en = '(required to fill in by %1)'"),
												Формат(ГрафикРаботыРЦНужнозаполнитьПо, "ДЛФ=D"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.1, Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодДляВводаНедостающейДоступности()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыЗаполнения.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ЕСТЬNULL(МИНИМУМ(ДатыЗаполнения.ЗаполненоПо), &ТекущаяДата) КАК НачалоПериода,
	|	ЕСТЬNULL(МАКСИМУМ(ДатыЗаполнения.КоличествоИнтервалов), 0) КАК КоличествоИнтервалов
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтруктураПредприятия.ИнтервалПланирования КАК ИнтервалПланирования,
	|		ВЫБОР
	|			КОГДА &РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства)
	|				ТОГДА ВидыРабочихЦентров.Подразделение.ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтервалов
	|			ИНАЧЕ ВидыРабочихЦентров.Подразделение.ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтервалов
	|		КОНЕЦ КАК КоличествоИнтервалов,
	|		ЕСТЬNULL(МАКСИМУМ(ДоступностьВидовРабочихЦентров.ДатаИнтервала), &ТекущаяДата) КАК ЗаполненоПо
	|	ИЗ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|			ПО (ВидыРабочихЦентров.Подразделение = СтруктураПредприятия.Ссылка)
	|				И (&РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства)
	|						И ВидыРабочихЦентров.УчитыватьДоступностьПоГрафикуРаботы
	|					ИЛИ &РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ)
	|						И ВидыРабочихЦентров.ПланироватьРаботуРабочихЦентров)
	|				И (НЕ ВидыРабочихЦентров.ПометкаУдаления)
	|				И (НЕ ВидыРабочихЦентров.ЭтоГруппа)
	|				И (ВидыРабочихЦентров.Подразделение = &Подразделение)
	|				И (&РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства)
	|						И СтруктураПредприятия.ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтервалов <> 0
	|					ИЛИ &РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ)
	|						И СтруктураПредприятия.ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтервалов <> 0)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
	|			ПО (ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра = ВидыРабочихЦентров.Ссылка)
	|				И (ДоступностьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности)
	|				И (&РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства)
	|						И (ВидыРабочихЦентров.ВводитьДоступностьДляВидаРЦ
	|								И ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьВидаРабочихЦентров
	|							ИЛИ НЕ ВидыРабочихЦентров.ВводитьДоступностьДляВидаРЦ
	|								И ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьРабочихЦентров)
	|					ИЛИ &РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ)
	|						И ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ДоступностьРабочихЦентров)
	|	ГДЕ
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА &РежимРаботы = ЗНАЧЕНИЕ(Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства)
	|				ТОГДА ВидыРабочихЦентров.Подразделение.ЗаполнениеДоступностиДляГрафикаПроизводстваКоличествоИнтервалов
	|			ИНАЧЕ ВидыРабочихЦентров.Подразделение.ЗаполнениеДоступностиДляРасписанияРЦКоличествоИнтервалов
	|		КОНЕЦ,
	|		ВидыРабочихЦентров.Ссылка,
	|		СтруктураПредприятия.ИнтервалПланирования) КАК ДатыЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыЗаполнения.ИнтервалПланирования";
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("Подразделение", ОтборПодразделение);
	Запрос.УстановитьПараметр("РежимРаботы", РежимРедактированияДоступности);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	НачалоПериода = Макс(Выборка.НачалоПериода, ТекущаяДатаСеанса());
	
	Если Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
		ИЛИ Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		
		НачалоПериода = НачалоДня(НачалоПериода);
		ОкончаниеПериода = КонецДня(ТекущаяДата + Выборка.КоличествоИнтервалов * 86400);
		
	ИначеЕсли Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		
		НачалоПериода = НачалоНедели(НачалоПериода);
		ОкончаниеПериода = КонецНедели(ТекущаяДата + Выборка.КоличествоИнтервалов * 86400 * 7);
		
	ИначеЕсли Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		
		НачалоПериода = НачалоМесяца(НачалоПериода);
		ОкончаниеПериода = КонецМесяца(ДобавитьМесяц(ТекущаяДата, Выборка.КоличествоИнтервалов));
		
	КонецЕсли;
	
	ОкончаниеПериода = Макс(ОкончаниеПериода,  ОкончаниеИнтервалаПланирования(НачалоПериода, ИнтервалПланирования));
	
	ТекущееНачалоПериода = НачалоПериода;
	ТекущееОкончаниеПериода = ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() Тогда
		ЗаполнитьДанные();
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИнформацияКРежимуРаботы");
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ЗаписьДоступности

&НаКлиенте
Функция НужноЗаписатьНастройку()

	Возврат (Модифицированность И ДоступностьВидовРЦ.Количество() <> 0);

КонецФункции

&НаКлиенте
Процедура ПоказатьВопросЗаписатьНастройку(ИмяПроцедурыДляОбработкиРезультата)

	Если НужноЗаписатьНастройку() Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?';
							|en = 'Data has changed. Save the changes?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВопросЗаписатьНастройкуЗавершение", ЭтаФорма, ИмяПроцедурыДляОбработкиРезультата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		Модифицированность = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыДляОбработкиРезультата, ЭтаФорма);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаписатьНастройкуЗавершение(РезультатВопроса, ИмяПроцедурыДляОбработкиРезультата) Экспорт

	РезультатЗаписи = Истина;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РезультатЗаписи =  ЗаписатьНастройку();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		РезультатЗаписи = Ложь
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыДляОбработкиРезультата, ЭтаФорма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатЗаписи);

КонецПроцедуры

&НаКлиенте
Функция ЗаписатьНастройку()

	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗаписатьНастройкуНаСервере() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось записать настройку.';
									|en = 'Cannot save the settings.'"));
		Возврат Ложь;
	КонецЕсли; 
	
	Оповестить("Запись_ДоступностьВидовРабочихЦентров");
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция ЗаписатьНастройкуНаСервере()

	// Запись доступности по виду РЦ
	Для каждого СтрокаДоступность Из ДоступностьВидовРЦ Цикл
		Если НЕ ЗаписатьДоступностьПоВидуРЦ(СтрокаДоступность, 1) 
			ИЛИ НЕ ЗаписатьДоступностьПоВидуРЦ(СтрокаДоступность, 2)
			ИЛИ НЕ ЗаписатьДоступностьПоВидуРЦ(СтрокаДоступность, 3) Тогда
			Возврат Ложь
		КонецЕсли;
	КонецЦикла;
	
	// Запись расписания работы
	РасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресДанныхГрафикиРаботыРЦ); // см. Обработки.ДоступностьВидовРабочихЦентров.СоздатьТаблицуРасписаниеГрафиковРаботыРЦ
	РасписаниеПоДатам = РасписаниеГрафиковРаботыРЦ.Скопировать(); 
	РасписаниеПоДатам.Свернуть("ВидРабочегоЦентра,ДатаГрафика");
	Для каждого ДатаИВидРЦ Из РасписаниеПоДатам Цикл
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,ДатаГрафика", ДатаИВидРЦ.ВидРабочегоЦентра, ДатаИВидРЦ.ДатаГрафика);
   		РасписаниеВидаРЦ = РасписаниеГрафиковРаботыРЦ.НайтиСтроки(СтруктураПоиска);
		Если НЕ ЗаписатьДоступностьПоРЦ(РасписаниеВидаРЦ, ДатаИВидРЦ.ВидРабочегоЦентра, ДатаИВидРЦ.ДатаГрафика) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Контроль исполнимости сущуствующего графика производства
	Если РежимРедактированияДоступности =
		Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства Тогда
		ПроверитьЗагрузкаНеПревышаетДоступностьГрафика();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьДоступностьПоВидуРЦ(СтрокаДоступность, НомерОтображаемойДоступности)
	
	ИмяПоляОтображениеДоступности = "ОтображениеДоступности" + НомерОтображаемойДоступности;
	Если СтрокаДоступность[ИмяПоляОтображениеДоступности] <> Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
		Возврат Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Заблокируем документы по данному виду РЦ, для записи данных
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДоступностьВидаРабочихЦентров");
		ЭлементБлокировки.УстановитьЗначение("ВидРабочегоЦентра", СтрокаДоступность.ВидРабочегоЦентра);
		ЭлементБлокировки.УстановитьЗначение("ДатаИнтервала", Новый Диапазон(НачалоПериода, ОкончаниеПериода));
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступностьВидаРабочихЦентров.Ссылка КАК Ссылка,
		|	ДоступностьВидаРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала
		|ИЗ
		|	Документ.ДоступностьВидаРабочихЦентров КАК ДоступностьВидаРабочихЦентров
		|ГДЕ
		|	ДоступностьВидаРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра
		|	И ДоступностьВидаРабочихЦентров.Проведен
		|	И ДоступностьВидаРабочихЦентров.ДатаИнтервала МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
		
		Запрос.УстановитьПараметр("ВидРабочегоЦентра", СтрокаДоступность.ВидРабочегоЦентра);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		
		СписокДокументов = Запрос.Выполнить().Выгрузить();
		
		Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
			
			ДатаПериода = ЭлДата.Значение;
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			
			Если НЕ СтрокаДоступность[ИмяКолонкиПериода + "ДанныеИзменены" + НомерОтображаемойДоступности] Тогда
				Продолжить;
			КонецЕсли; 
			
			ДокументОбъект = Неопределено;
			
			СтрокаДокумент = СписокДокументов.Найти(ДатаПериода, "ДатаИнтервала"); // ДокументСсылка - 
			Если СтрокаДокумент <> Неопределено Тогда
				ДокументОбъект = СтрокаДокумент.Ссылка.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.ДоступностьВидаРабочихЦентров.СоздатьДокумент();
				ДокументОбъект.Дата = ДатаПериода;
				ДокументОбъект.ВидРабочегоЦентра = СтрокаДоступность.ВидРабочегоЦентра;
				ДокументОбъект.ДатаИнтервала = ДатаПериода;
			КонецЕсли;
			
			ДокументОбъект.Количество = СтрокаДоступность[ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности];
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
		СтрокаДоступность[ИмяКолонкиПериода + "ДанныеИзменены" + НомерОтображаемойДоступности] = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьДоступностьПоРЦ(РасписаниеВидаРЦ, ВидРабочегоЦентра, ДатаГрафика)

	НачатьТранзакцию();
	
	Попытка
		
		// Заблокируем документы по данному виду РЦ, для записи данных
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДоступностьРабочихЦентров");
		ЭлементБлокировки.УстановитьЗначение("ВидРабочегоЦентра", ВидРабочегоЦентра);
		ЭлементБлокировки.УстановитьЗначение("ДатаГрафика", ДатаГрафика);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		Блокировка.Заблокировать();

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступностьРабочихЦентров.Ссылка
		|ИЗ
		|	Документ.ДоступностьРабочихЦентров КАК ДоступностьРабочихЦентров
		|ГДЕ
		|	ДоступностьРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра
		|	И ДоступностьРабочихЦентров.Проведен
		|	И ДоступностьРабочихЦентров.ДатаГрафика = &ДатаГрафика";
		
		Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
		Запрос.УстановитьПараметр("ДатаГрафика", ДатаГрафика);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Удаление старых данных
			Для каждого СтрокаРасписание Из РасписаниеВидаРЦ Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
				СтруктураПоиска.Вставить("ДатаГрафика", ДатаГрафика);
				СписокСтрок = ДокументОбъект.Интервалы.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаИнтервал Из СписокСтрок Цикл
					ДокументОбъект.Интервалы.Удалить(СтрокаИнтервал);
				КонецЦикла; 
				
				СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
	   			СписокСтрок = ДокументОбъект.Доступность.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаДоступность Из СписокСтрок Цикл
					ДокументОбъект.Доступность.Удалить(СтрокаДоступность);
				КонецЦикла; 
			КонецЦикла;
			
		Иначе
			ДокументОбъект = Документы.ДоступностьРабочихЦентров.СоздатьДокумент();
			ДокументОбъект.Дата = ДатаГрафика;
			ДокументОбъект.ВидРабочегоЦентра = ВидРабочегоЦентра;
			ДокументОбъект.ДатаГрафика = ДатаГрафика;
		КонецЕсли; 
		
		ВнесеныРучныеИзменения = Ложь;
		Для каждого СтрокаРасписание Из РасписаниеВидаРЦ Цикл
			Если СтрокаРасписание.Количество <> 0 Тогда
				СтрокаИнтервал = ДокументОбъект.Интервалы.Добавить();
				СтрокаИнтервал.РабочийЦентр = СтрокаРасписание.РабочийЦентр;
				СтрокаИнтервал.ДатаГрафика = ДатаГрафика;
				СтрокаИнтервал.ВремяНачала = СтрокаРасписание.ВремяНачала;
				СтрокаИнтервал.ВремяОкончания = СтрокаРасписание.ВремяОкончания;
				СтрокаИнтервал.Количество = СтрокаРасписание.Количество;
			КонецЕсли;
			
			СтрокаДоступность = ДокументОбъект.Доступность.Добавить();
			СтрокаДоступность.РабочийЦентр = СтрокаРасписание.РабочийЦентр;
			СтрокаДоступность.Количество = СтрокаРасписание.Количество;
			
			Если СтрокаРасписание.ВнесеныРучныеИзменения Тогда
				ВнесеныРучныеИзменения = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		ДокументОбъект.ВнесеныРучныеИзменения = ВнесеныРучныеИзменения;
		
		ДокументОбъект.Доступность.Свернуть("РабочийЦентр", "Количество");
		// Заполним ВнесеныРучныеИзменения в ТЧ Доступность
		Для каждого СтрокаДоступность Из ДокументОбъект.Доступность Цикл
			ВнесеныРучныеИзменения = Ложь;
			Для каждого СтрокаРасписание Из РасписаниеВидаРЦ Цикл
				Если СтрокаРасписание.РабочийЦентр = СтрокаДоступность.РабочийЦентр
					И СтрокаРасписание.ВнесеныРучныеИзменения Тогда
					ВнесеныРучныеИзменения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаДоступность.ВнесеныРучныеИзменения = ВнесеныРучныеИзменения;
		КонецЦикла; 
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
		
	КонецПопытки;

	Возврат Истина
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНастройкуИЗакрыть(РезультатЗаписи, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗаписи Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкуИОбновитьДанные(РезультатЗаписи, ДополнительныеПараметры = Неопределено) Экспорт

	ОчиститьСообщения();
	
	Если РезультатЗаписи И ПроверитьЗаполнение() Тогда
		ЗаполнитьДанные();
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИнформацияКРежимуРаботы");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкуИИзменитьРежимРаботы(РезультатЗаписи, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗаписи Тогда
		РежимРаботыПриИзмененииНаСервере();
	Иначе
		РежимРедактированияДоступности = ТекущееРежимРедактированияДоступности;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкуИИзменитьПодразделение(РезультатЗаписи, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗаписи Тогда
		ОтборПодразделениеПриИзмененииНаСервере();
	Иначе
		ОтборПодразделение = ТекущееПодразделение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РежимРаботыПриИзмененииНаСервере()

	СохранитьПараметрыОтбора();
	
	ЗаполнитьПериодДляВводаНедостающейДоступности();
	
	ЗаполнитьДанные();
	
	ПриИзмененииРежимаРедактированияДоступности();
	
	ТекущееРежимРедактированияДоступности = РежимРедактированияДоступности;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИнформацияКРежимуРаботы");
	
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеПриИзмененииНаСервере()

	ПрочитатьПараметрыПодразделения();
	
	ЗаполнитьПериодДляВводаНедостающейДоступности();
	
	СохранитьПараметрыОтбора();
	ЗаполнитьДанные();
	ТекущееПодразделение = ОтборПодразделение;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИнформацияКРежимуРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкуИИзменитьНачалоПериода(РезультатЗаписи, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗаписи Тогда
		
		НачалоПериода = НачалоИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
		Если НачалоПериода > ОкончаниеПериода Тогда
			ОкончаниеПериода = ОкончаниеИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
		КонецЕсли; 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПериодаПриИзмененииЗавершение", ЭтотОбъект);
		ПроверитьСлишкомБольшойПериод("НачалоПериода", ОписаниеОповещения);
		
	Иначе
		НачалоПериода = ТекущееНачалоПериода;
		ОкончаниеПериода = ТекущееОкончаниеПериода;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкуИИзменитьОкончаниеПериода(РезультатЗаписи, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗаписи Тогда
		
		ОкончаниеПериода = ОкончаниеИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
		Если ОкончаниеПериода < НачалоПериода Тогда
			НачалоПериода = НачалоИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеПериодаПриИзмененииЗавершение", ЭтотОбъект);
		ПроверитьСлишкомБольшойПериод("ОкончаниеПериода", ОписаниеОповещения);
		
	Иначе
		НачалоПериода = ТекущееНачалоПериода;
		ОкончаниеПериода = ТекущееОкончаниеПериода;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкуИУстановитьПериодДляВводаДоступности(РезультатЗаписи, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатЗаписи Тогда
		УстановитьПериодДляВводаДоступностиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗагрузкаНеПревышаетДоступностьГрафика()
	
	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	Интервалы.Колонки.Добавить("ДатаИнтервала", Новый ОписаниеТипов("Дата"));
	
	Для каждого Строка Из ДоступностьВидовРЦ Цикл
		Для каждого Элемент Из СписокОтображаемыхДат Цикл
			Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
				Для Час = 0 По 23 Цикл
					НоваяСтрока = Интервалы.Добавить();
					НоваяСтрока.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
					НоваяСтрока.ДатаИнтервала = Элемент.Значение + (3600 * Час);
				КонецЦикла;
			Иначе
				НоваяСтрока = Интервалы.Добавить();
				НоваяСтрока.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
				НоваяСтрока.ДатаИнтервала = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РегистрыНакопления.ДоступностьВидовРабочихЦентров.ПроверитьЗагрузкаНеПревышаетДоступностьГрафика(Интервалы);
	
КонецПроцедуры

#КонецОбласти

#Область ВводДоступностиРабочихЦентров

&НаКлиенте
Процедура ВводГрафиковРаботыРабочихЦентров(ДатаПериода, НомерОтображаемойДоступности)

	ТекущиеДанные = Элементы.ДоступностьВидовРЦ.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаПериода", ДатаПериода);
	ПараметрыФормы.Вставить("ИнтервалПланирования", ИнтервалПланирования);
	ПараметрыФормы.Вставить("ВидРабочегоЦентра", ТекущиеДанные.ВидРабочегоЦентра);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ПараметрыФормы.Вставить("АдресДанныхГрафикиРаботыРЦ", АдресДанныхГрафикиРаботыРЦ);
	ПараметрыФормы.Вставить("СведенияОДоступности", СведенияОДоступностиВТекущейСтроке());
	ПараметрыФормы.Вставить("РежимРедактированияДоступности", РежимРедактированияДоступности);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомерОтображаемойДоступности", НомерОтображаемойДоступности);
	ДополнительныеПараметры.Вставить("Идентификатор", ТекущиеДанные.ПолучитьИдентификатор());
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводДоступностиРабочихЦентровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ДоступностьВидовРабочихЦентров.Форма.ВводГрафиковРаботыРабочихЦентров", ПараметрыФормы,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Функция СведенияОДоступностиВТекущейСтроке()

	ДоступностьЗаПериод = Новый Массив;
	
	ТекущиеДанные = Элементы.ДоступностьВидовРЦ.ТекущиеДанные;
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
		ДоступностьПериода = Новый Структура;
		ДоступностьПериода.Вставить("ДатаПериода", ДатаПериода);
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		Для НомерОтображаемойДоступности = 1 По 3 Цикл
			ИмяКолонкиДоступность = ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности;
			ДоступностьПериода.Вставить("Доступность" + НомерОтображаемойДоступности, ТекущиеДанные[ИмяКолонкиДоступность]);
		КонецЦикла;
		ДоступностьЗаПериод.Добавить(ДоступностьПериода);
	КонецЦикла;
	
	СведенияОДоступности = Новый Структура;
	СведенияОДоступности.Вставить("ДоступностьЗаПериод", ДоступностьЗаПериод);
	СведенияОДоступности.Вставить("ОтображениеДоступности1", ТекущиеДанные.ОтображениеДоступности1);
	СведенияОДоступности.Вставить("ОтображениеДоступности2", ТекущиеДанные.ОтображениеДоступности2);
	СведенияОДоступности.Вставить("ОтображениеДоступности3", ТекущиеДанные.ОтображениеДоступности2);
	
	Возврат СведенияОДоступности;
	
КонецФункции


// Обработчик завершения ввода доступности рабочих центров
// 
// Параметры:
// 	СведенияОНовойДоступности - ТаблицаЗначений - сведения о новой доступности
// 	ДополнительныеПараметры - Структура - содержит:
//  * НомерОтображаемойДоступности - Число - номер колонки.
//  * Идентификатор - Число - идентификатор строки.
&НаКлиенте
Процедура ВводДоступностиРабочихЦентровЗавершение(СведенияОНовойДоступности, ДополнительныеПараметры) Экспорт

	Если СведенияОНовойДоступности <> Неопределено Тогда
		ВводДоступностиРабочихЦентровЗавершениеНаСервере(СведенияОНовойДоступности, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВводДоступностиРабочихЦентровЗавершениеНаСервере(СведенияОНовойДоступности, ДополнительныеПараметры)

	СтрокаДоступность = ДоступностьВидовРЦ.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
	Если СтрокаДоступность = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Данные нужно свернуть
	СведенияОНовойДоступностиТаблица = СведенияОНовойДоступности.Выгрузить();
	Для каждого НоваяДоступность Из СведенияОНовойДоступностиТаблица Цикл
		НоваяДоступность.ДатаГрафика = НачалоИнтервалаПланирования(НоваяДоступность.ДатаГрафика, ИнтервалПланирования);
	КонецЦикла;
	ТаблицаРучныеИзменения = СведенияОНовойДоступностиТаблица.Скопировать();
	
	СведенияОНовойДоступностиТаблица.Свернуть("ДатаГрафика", "Количество");
	ТаблицаРучныеИзменения.Свернуть("ДатаГрафика,ВнесеныРучныеИзменения");
	
	Для каждого НоваяДоступность Из СведенияОНовойДоступностиТаблица Цикл
		ИмяКолонкиПериода = ИмяКолонкиПериода(НоваяДоступность.ДатаГрафика);
		СтрокаДоступность[ИмяКолонкиПериода + "Доступность" + ДополнительныеПараметры.НомерОтображаемойДоступности] = НоваяДоступность.Количество / 3600;
		СтрокаДоступность[ИмяКолонкиПериода + "ДоступностьСекунд" + ДополнительныеПараметры.НомерОтображаемойДоступности] = НоваяДоступность.Количество;
		
		// Определим есть ли ручные изменения расписания
		ВнесеныРучныеИзменения = Ложь;
		СтруктураПоиска = Новый Структура("ДатаГрафика",НоваяДоступность.ДатаГрафика);
  		РучныеИзмененияНаДату = ТаблицаРучныеИзменения.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОРучныхИзменениях Из РучныеИзмененияНаДату Цикл
			Если ДанныеОРучныхИзменениях.ВнесеныРучныеИзменения Тогда
				ВнесеныРучныеИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьРучныеИзмененияВСтроке(НоваяДоступность.ДатаГрафика, ДополнительныеПараметры.НомерОтображаемойДоступности, ВнесеныРучныеИзменения, СтрокаДоступность);
		
		ПриИзмененииДоступностиВСтроке(СтрокаДоступность, НоваяДоступность.ДатаГрафика, ДополнительныеПараметры.НомерОтображаемойДоступности);
	КонецЦикла; 
	
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	ЗаполнитьИтогоВСтроке(СтрокаДоступность, ДополнительныеПараметры.НомерОтображаемойДоступности, ДатыВыбранногоПериода, ЭтаФорма);
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРасписанияПоГрафику

&НаКлиенте
Процедура ЗаполнитьДоступностьДляФормированияРасписания()

	Если Элементы.ДоступностьВидовРЦ.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ЗаполнитьДоступностьДляФормированияРасписанияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступностьДляФормированияРасписанияНаСервере()

	// Получим выбранные виды РЦ
	СписокВидовРЦ = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.ДоступностьВидовРЦ.ВыделенныеСтроки Цикл
		СтрокаВидРЦ = ДоступностьВидовРЦ.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаВидРЦ.ОтображениеДоступности1 <> Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ
			И СтрокаВидРЦ.ОтображениеДоступности2 <> Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ 
			И СтрокаВидРЦ.ОтображениеДоступности3 <> Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
			
			Продолжить;
		КонецЕсли;
		
		СписокВидовРЦ.Добавить(СтрокаВидРЦ.ВидРабочегоЦентра);
		
	КонецЦикла; 
	
	ЗаполнитьДоступностьПоГрафикамРаботы(СписокВидовРЦ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступностьПоГрафикамРаботы(СписокВидовРЦ)

	Если СписокВидовРЦ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	РасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресДанныхГрафикиРаботыРЦ);

	// Получим данные выбранных видов РЦ
	
	ГрафикиРаботыРабочихЦентров = ПроизводствоСервер.ГрафикиРаботыРЦ(СписокВидовРЦ, Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
		|	РабочиеЦентры.Наименование КАК РабочийЦентрПредставление,
		|	РабочиеЦентры.КоэффициентВремениРаботы КАК КоэффициентВремениРаботы
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.ВидРабочегоЦентра В(&СписокВидовРЦ)
		|	И НЕ РабочиеЦентры.ПометкаУдаления");
	Запрос.УстановитьПараметр("СписокВидовРЦ", СписокВидовРЦ);
	ДанныеРабочихЦентров = Запрос.Выполнить().Выгрузить();
	 
	// Заполним графики работы
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	Для каждого ВидРабочегоЦентра Из СписокВидовРЦ Цикл
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
  		СтрокаВидРЦ = ДоступностьВидовРЦ.НайтиСтроки(СтруктураПоиска)[0];
		
		Если СтрокаВидРЦ.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
			НомерОтображаемойДоступности = 1;
		ИначеЕсли СтрокаВидРЦ.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
			НомерОтображаемойДоступности = 2;
		ИначеЕсли СтрокаВидРЦ.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
			НомерОтображаемойДоступности = 3;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
  		СписокСтрок = ДанныеРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Для вида рабочих центров ""%1"" не введены рабочие центры.';
											|en = 'No work centers are specified for the ""%1"" work center type.'"),
				ВидРабочегоЦентра);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВидРабочегоЦентра); 
			Продолжить;
		КонецЕсли;
		
		ДанныеПоРЦ = Новый Массив;
		Для каждого ДанныеРЦ Из СписокСтрок Цикл
			
			МассивГрафиков = Новый Массив;
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеРЦ.РабочийЦентр);
			СтрокиГрафики = ГрафикиРаботыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаГрафик Из СтрокиГрафики Цикл
				Если ЗначениеЗаполнено(СтрокаГрафик.ГрафикРаботы) Тогда
					МассивГрафиков.Добавить(СтрокаГрафик.ГрафикРаботы);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивГрафиков.Количество() > 0 Тогда
				ОписаниеРЦ = Новый Структура;
				ОписаниеРЦ.Вставить("РабочийЦентр", ДанныеРЦ.РабочийЦентр);
				ОписаниеРЦ.Вставить("ГрафикиРаботы", МассивГрафиков);
				ОписаниеРЦ.Вставить("КоэффициентВремениРаботы", ДанныеРЦ.КоэффициентВремениРаботы);
				ДанныеПоРЦ.Добавить(ОписаниеРЦ);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для рабочего центра ""%1"" не указан график работы.';
												|en = 'Schedule is not specified for work center ""%1"".'"),
					ДанныеРЦ.РабочийЦентрПредставление);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДанныеРЦ.РабочийЦентр); 
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеПоРЦ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОНовойДоступности = Обработки.ДоступностьВидовРабочихЦентров.ЗаполнитьГрафикиРаботыРЦ(
											ВидРабочегоЦентра, 
											ДанныеПоРЦ, 
											НачалоПериода, 
											ОкончаниеПериода, 
											РасписаниеГрафиковРаботыРЦ);
		Если СведенияОНовойДоступности = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Обновим данные на форме
		Для каждого НоваяДоступность Из СведенияОНовойДоступности Цикл
			НоваяДоступность.ДатаГрафика = НачалоИнтервалаПланирования(НоваяДоступность.ДатаГрафика, ИнтервалПланирования);
		КонецЦикла;
		ТаблицаДатаПериода = СведенияОНовойДоступности.Скопировать();
		ТаблицаДатаПериода.Свернуть("ДатаГрафика");
		СписокДатаПериода = ТаблицаДатаПериода.ВыгрузитьКолонку("ДатаГрафика");
		
		Для каждого ДатаПериода Из СписокДатаПериода Цикл
			
			ДоступностьСекунд = 0;
			СтруктураПоиска = Новый Структура("ДатаГрафика", ДатаПериода);
   			СписокСтрок = СведенияОНовойДоступности.НайтиСтроки(СтруктураПоиска);
			Для каждого НоваяДоступность Из СписокСтрок Цикл
				ДоступностьСекунд = ДоступностьСекунд + НоваяДоступность.Количество / НоваяДоступность.КоэффициентВремениРаботы;
			КонецЦикла;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			
			СтрокаВидРЦ[ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности] = ДоступностьСекунд / 3600;
			СтрокаВидРЦ[ИмяКолонкиПериода + "ДоступностьСекунд" + НомерОтображаемойДоступности] = ДоступностьСекунд;
			
			ЗаполнитьРучныеИзмененияВСтроке(ДатаПериода, НомерОтображаемойДоступности, Ложь, СтрокаВидРЦ);
			
			ПриИзмененииДоступностиВСтроке(СтрокаВидРЦ, ДатаПериода, НомерОтображаемойДоступности);
			
		КонецЦикла;
		
		ЗаполнитьИтогоВСтроке(СтрокаВидРЦ, НомерОтображаемойДоступности, ДатыВыбранногоПериода, ЭтаФорма);
		
	КонецЦикла; 
	
	ПоместитьВоВременноеХранилище(РасписаниеГрафиковРаботыРЦ, АдресДанныхГрафикиРаботыРЦ);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДоступностиПоНормативам

&НаКлиенте
Процедура ЗаполнитьДоступностьДляФормированияГрафика()

	Если Элементы.ДоступностьВидовРЦ.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ЗаполнитьДоступностьДляФормированияГрафикаНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступностьДляФормированияГрафикаНаСервере()
	
	// Получим выбранные виды РЦ
	ВидыРЦЗаполнениеДоступностиПоВидуРЦ = Новый Массив;
	ВидыРЦЗаполнениеДоступностиПоГрафикуРаботы = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.ДоступностьВидовРЦ.ВыделенныеСтроки Цикл
		
		СтрокаВидРЦ = ДоступностьВидовРЦ.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаВидРЦ.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ
			ИЛИ СтрокаВидРЦ.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ 
			ИЛИ СтрокаВидРЦ.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			
			ВидыРЦЗаполнениеДоступностиПоВидуРЦ.Добавить(СтрокаВидРЦ.ВидРабочегоЦентра);
		
		ИначеЕсли НЕ СтрокаВидРЦ.ВводитьДоступностьДляВидаРЦ
			И (СтрокаВидРЦ.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ
				ИЛИ СтрокаВидРЦ.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ 
				ИЛИ СтрокаВидРЦ.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ) Тогда
			
			ВидыРЦЗаполнениеДоступностиПоГрафикуРаботы.Добавить(СтрокаВидРЦ.ВидРабочегоЦентра);
		
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗаполнитьДоступностьПоВидамРЦ(ВидыРЦЗаполнениеДоступностиПоВидуРЦ);
	ЗаполнитьДоступностьПоГрафикамРаботы(ВидыРЦЗаполнениеДоступностиПоГрафикуРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступностьПоВидамРЦ(СписокВидовРЦ)

	Если СписокВидовРЦ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим данные выбранных видов РЦ
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПроизводствоСервер.СоздатьВТГрафикиРаботыВидовРЦ(СписокВидовРЦ, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРабочихЦентров.Ссылка КАК ВидРабочегоЦентра,
		|	ВидыРабочихЦентров.КоличествоРабочихЦентров КАК КоличествоРабочихЦентров,
		|	ВЫБОР ВидыРабочихЦентров.ЕдиницаИзмеренияДоступностиРЦ
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|			ТОГДА 60
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|			ТОГДА 3600
		|		ИНАЧЕ 86400
		|	КОНЕЦ * ВидыРабочихЦентров.МаксимальнаяДоступностьРЦ КАК МаксимальнаяДоступностьРЦ
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|ГДЕ
		|	ВидыРабочихЦентров.Ссылка В(&СписокВидовРЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТГрафикиРаботы.Ссылка КАК ВидРабочегоЦентра,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы";
	
	Запрос.УстановитьПараметр("СписокВидовРЦ", СписокВидовРЦ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеВидовРЦ = МассивРезультатов[0].Выгрузить();
	ГрафикиВидовРЦ = МассивРезультатов[1].Выгрузить();
	
	РасписанияРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(
		МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("ГрафикРаботы"),
		НачалоПериода,
		ОкончаниеПериода);
	РасписанияРаботы.Свернуть("ГрафикРаботы,ДатаГрафика");
	РасписанияРаботы.Индексы.Добавить("ГрафикРаботы,ДатаГрафика");
	
	// Заполним доступность
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	Для каждого ВидРабочегоЦентра Из СписокВидовРЦ Цикл
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
		
		СтрокаВидРЦ = ДоступностьВидовРЦ.НайтиСтроки(СтруктураПоиска)[0];
		РеквизитыВидаРЦ = ДанныеВидовРЦ.НайтиСтроки(СтруктураПоиска)[0];
		ГрафикиВидаРЦ = ГрафикиВидовРЦ.НайтиСтроки(СтруктураПоиска);
		
		Если РеквизитыВидаРЦ.КоличествоРабочихЦентров = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'У вида рабочих центров ""%1"" не указано количество рабочих центров.';
											|en = 'Number of the work centers is not specified for the ""%1"" work center type.'"),
										ВидРабочегоЦентра);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВидРабочегоЦентра); 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаВидРЦ.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			НомерОтображаемойДоступности = 1;
		ИначеЕсли СтрокаВидРЦ.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			НомерОтображаемойДоступности = 2;
		ИначеЕсли СтрокаВидРЦ.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			НомерОтображаемойДоступности = 3;
		КонецЕсли;
		
		Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
			
			ЕстьРабочиеДниВПериоде = Ложь;
			Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
				
				Для каждого СтрокаГрафик Из ГрафикиВидаРЦ Цикл
					
					СтруктураПоиска = Новый Структура("ДатаГрафика,ГрафикРаботы", ДатаПериода, СтрокаГрафик.ГрафикРаботы);
	   				СписокСтрок = РасписанияРаботы.НайтиСтроки(СтруктураПоиска);
					Если СписокСтрок.Количество() <> 0 Тогда
						ЕстьРабочиеДниВПериоде = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
					ДатыИнтервала = ДатыВыбранногоПериода(ДатаПериода, КонецНедели(ОкончаниеПериода), Перечисления.ТочностьГрафикаПроизводства.День);
				Иначе
					ДатыИнтервала = ДатыВыбранногоПериода(ДатаПериода, КонецМесяца(ОкончаниеПериода), Перечисления.ТочностьГрафикаПроизводства.День);
				КонецЕсли;
				
				Для каждого ДатаИнтервала Из ДатыИнтервала Цикл
					
					Для каждого СтрокаГрафик Из ГрафикиВидаРЦ Цикл
						
						СтруктураПоиска = Новый Структура("ДатаГрафика,ГрафикРаботы", ДатаИнтервала, СтрокаГрафик.ГрафикРаботы);
		   				СписокСтрок = РасписанияРаботы.НайтиСтроки(СтруктураПоиска);
						Если СписокСтрок.Количество() <> 0 Тогда
							ЕстьРабочиеДниВПериоде = Истина;
							Прервать;
						КонецЕсли;
					
					КонецЦикла;
				
					Если ЕстьРабочиеДниВПериоде Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли; 
			
			Если ЕстьРабочиеДниВПериоде Тогда
				ДоступностьСекунд = РеквизитыВидаРЦ.КоличествоРабочихЦентров * РеквизитыВидаРЦ.МаксимальнаяДоступностьРЦ;
			Иначе
				ДоступностьСекунд = 0;
			КонецЕсли;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			
			СтрокаВидРЦ[ИмяКолонкиПериода + "Доступность" + НомерОтображаемойДоступности] = ДоступностьСекунд / 3600;
			СтрокаВидРЦ[ИмяКолонкиПериода + "ДоступностьСекунд" + НомерОтображаемойДоступности] = ДоступностьСекунд;
			
			ПриИзмененииДоступностиВСтроке(СтрокаВидРЦ, ДатаПериода, НомерОтображаемойДоступности);
			
		КонецЦикла;
		
		ЗаполнитьИтогоВСтроке(СтрокаВидРЦ, НомерОтображаемойДоступности, ДатыВыбранногоПериода, ЭтаФорма);
		
	КонецЦикла;	

КонецПроцедуры
 
#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		Элементы.СохранитьИзменения.Доступность = Форма.РежимРедактированияДоступности <> ПредопределенноеЗначение(
			"Перечисление.РежимыРедактированияДоступностиВидовРЦ.ТолькоПросмотр");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ИнформацияКРежимуРаботы")
		Или Инициализация Тогда
		Элементы.УстановитьПериодДляВводаДоступности.Видимость = ЗначениеЗаполнено(Форма.ИнформацияКРежимуРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуНаОснованииПравДоступа()

	СписокВыбораРежимаРаботы = Элементы.РежимРедактированияДоступности.СписокВыбора;
	СписокВыбораРежимаРаботы.Очистить();
	
	Если ПраваПользователяПовтИсп.ПравоНаВводДоступностиВидовРЦ() Тогда
		СписокВыбораРежимаРаботы.Добавить(Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства,
											НСтр("ru = 'Для формирования графика производства';
												|en = 'To generate a production schedule'"));
	КонецЕсли;
	
	Если ПраваПользователяПовтИсп.ПравоНаВводГрафиковРаботыРЦ() Тогда
		СписокВыбораРежимаРаботы.Добавить(Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ,
											НСтр("ru = 'Для формирования расписания работы РЦ';
												|en = 'To generate a work center schedule'"));
	КонецЕсли;

	Если СписокВыбораРежимаРаботы.Количество() = 0 Тогда
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		
		Элементы.ДоступностьВидовРЦ.ТолькоПросмотр = Истина;
		
		Элементы.СтраницыКомандыСписка.ТекущаяСтраница = Элементы.СтраницаКомандыТолькоПросмотр;
		
		РежимРедактированияДоступности = 0;
		СписокВыбораРежимаРаботы.Добавить(Перечисления.РежимыРедактированияДоступностиВидовРЦ.ТолькоПросмотр);
	КонецЕсли;
	
	Если СписокВыбораРежимаРаботы.НайтиПоЗначению(РежимРедактированияДоступности) = Неопределено Тогда
		РежимРедактированияДоступности = СписокВыбораРежимаРаботы[0].Значение;
	КонецЕсли;
	
	Если СписокВыбораРежимаРаботы.Количество() = 1 Тогда
		Элементы.РежимРедактированияДоступности.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаРедактированияДоступности()

	Если РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства Тогда
		Элементы.СтраницыКомандыСписка.ТекущаяСтраница = Элементы.СтраницаКомандыВводДоступностиДляГрафика;
	ИначеЕсли РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ Тогда
		Элементы.СтраницыКомандыСписка.ТекущаяСтраница = Элементы.СтраницаКомандыДоступностьДляРасписания;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()
	
	ПараметрыОтбора = Новый Структура("ОтборПодразделение,ОкончаниеПериода,НачалоПериода");
										
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ДоступностьВидовРабочихЦентров", "ПараметрыОтбора", ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачалоИнтервалаПланирования(ДатаПериода, ИнтервалПланирования)

	Если ДатаПериода <> '000101010000' Тогда
		Возврат НачалоДня(ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ДатаПериода, ИнтервалПланирования));
	Иначе
		Возврат '000101010000';
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкончаниеИнтервалаПланирования(ДатаПериода, ИнтервалПланирования)

	Если ДатаПериода <> '000101010000' Тогда
		Возврат КонецДня(ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ДатаПериода, ИнтервалПланирования));
	Иначе
		Возврат '000101010000';
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииДоступностиВСтроке(ТекущиеДанные, ДатаПериода, НомерОтображаемойДоступности, ДанныеИзменены = Истина)
	
	ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
	
	Если ДанныеИзменены Тогда
		ТекущиеДанные[ИмяКолонкиПериода + "ДанныеИзменены" + НомерОтображаемойДоступности] = Истина;
	КонецЕсли;
	
	ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьЗаполнена" + НомерОтображаемойДоступности] = Истина;
	
	ДоступностьСекунд = ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьСекунд" + НомерОтображаемойДоступности];
	Если ТекущиеДанные["ОтображениеДоступности" + НомерОтображаемойДоступности] = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоВидуРЦ") Тогда
		ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьВидРЦ1"] = ДоступностьСекунд;
	ИначеЕсли ТекущиеДанные["ОтображениеДоступности" + НомерОтображаемойДоступности] = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ") Тогда
		ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьРЦ1"] = ДоступностьСекунд;
	ИначеЕсли ТекущиеДанные["ОтображениеДоступности" + НомерОтображаемойДоступности] = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоГрафикуПроизводства") Тогда
		ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьГрафик1"] = ДоступностьСекунд;
	КонецЕсли;
	
	Для Сч = 1 По 3 Цикл
		ИмяПоляДефицит = ИмяКолонкиПериода + "ДефицитДоступности" + Сч;
	
		Если ТекущиеДанные["ОтображениеДоступности" + Сч] = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоВидуРЦ") Тогда
			ТекущиеДанные[ИмяПоляДефицит] = (ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьВидРЦ1"] < ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьГрафик1"]);
			
		ИначеЕсли ТекущиеДанные["ОтображениеДоступности" + Сч] = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ") Тогда
			ТекущиеДанные[ИмяПоляДефицит] = (ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьРЦ1"] < ТекущиеДанные[ИмяКолонкиПериода + "ДоступностьГрафик1"]);
			
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКудаВнесеныРучныеИзмененияНаСервере()

	Если НачалоПериода = '000101010000' ИЛИ ОкончаниеПериода = '000101010000' Тогда
		Возврат
	КонецЕсли;
	
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	
	Если ПоказатьКудаВнесеныРучныеИзменения Тогда
		
		// Определим какие колонки нужно показать
		Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			
			ВидимостьПериода = Ложь;
			Для каждого СтрокаДоступность Из ДоступностьВидовРЦ Цикл
				Если СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения1"]
					ИЛИ СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения2"]
					ИЛИ СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения3"] Тогда
					ВидимостьПериода = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Элементы[ИмяКолонкиПериода + "ГруппаПериод"].Видимость <> ВидимостьПериода Тогда
				Элементы[ИмяКолонкиПериода + "ГруппаПериод"].Видимость = ВидимостьПериода;
			КонецЕсли;
			
		КонецЦикла; 
		
		// Определим нужно ли показывать строку
		Для каждого СтрокаДоступность Из ДоступностьВидовРЦ Цикл
			ВнесеныРучныеИзменения = Ложь;
			Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
				ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
				Если СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения1"]
					ИЛИ СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения2"]
					ИЛИ СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения3"] Тогда
					ВнесеныРучныеИзменения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаДоступность.НеПоказывать = НЕ ВнесеныРучныеИзменения;
		КонецЦикла; 
		
	Иначе

		// Все колонки нужно показать
		Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			Если НЕ Элементы[ИмяКолонкиПериода + "ГруппаПериод"].Видимость Тогда
				Элементы[ИмяКолонкиПериода + "ГруппаПериод"].Видимость = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		// Все строки нужно показать
		Для каждого СтрокаДоступность Из ДоступностьВидовРЦ Цикл
			СтрокаДоступность.НеПоказывать = Ложь;
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьПериодДляВводаДоступностиНаСервере()
	
	ОкончаниеПериода = ?(РежимРедактированияДоступности
			= Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства,
		ДоступностьДляГрафикаНужноЗаполнитьПо,
		ГрафикРаботыРЦНужнозаполнитьПо);
	
	РекомендуемыйПериод = РекомендуемыйПериод("ОкончаниеПериода", НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
	
	Если НачалоПериода > ОкончаниеПериода
		Или НачалоПериода < РекомендуемыйПериод.НачалоПериода Тогда
		НачалоПериода = НачалоИнтервалаПланирования(ТекущаяДатаСеанса(), ИнтервалПланирования);
	КонецЕсли;
	
	ЗаполнитьДанные();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИнформацияКРежимуРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСлишкомБольшойПериод(ИмяИзменяемойДаты, ОписаниеОповещенияПриЗавершении)

	Если НЕ ИнтервалПланирования.Пустая() 
		И НачалоПериода <> '000101010000'
		И ОкончаниеПериода <> '000101010000' Тогда
		
		РекомендуемыйПериод = РекомендуемыйПериод(ИмяИзменяемойДаты, НачалоПериода, ОкончаниеПериода, ИнтервалПланирования);
		Если НачалоПериода < РекомендуемыйПериод.НачалоПериода
			ИЛИ ОкончаниеПериода > РекомендуемыйПериод.ОкончаниеПериода Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
			ДополнительныеПараметры.Вставить("РекомендуемыйПериод", РекомендуемыйПериод);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСлишкомБольшойПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Получение данных за выбранный период может занять длительное время.
													|Рекомендуется выбрать период %1.
													|Продолжить?';
													|en = 'Data receipt for the selected period may take a long time.
													|It is recommended that you select a period %1.
													|Continue?'"),
										РекомендуемыйПериод.РекомендуемыйПериодСтрока);
										
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
																|en = 'Continue'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Выбрать рекомендуемый период';
																|en = 'Select the recommended period'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
			Возврат;
		КонецЕсли; 
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, Неопределено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РекомендуемыйПериод(ИмяИзменяемойДаты, НачалоПериода, ОкончаниеПериода, ИнтервалПланирования)

	РекомендуемыйПериод = Новый Структура;
	Если ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час") 
		ИЛИ ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День") Тогда
		
		// Два месяца
		Если ИмяИзменяемойДаты = "НачалоПериода" Тогда
			РекомендуемоеНачалоПериода = НачалоПериода;
			РекомендуемоеОкончаниеПериода = ДобавитьМесяц(РекомендуемоеНачалоПериода, 2);
		Иначе
			РекомендуемоеОкончаниеПериода = ОкончаниеПериода;
			РекомендуемоеНачалоПериода = ДобавитьМесяц(РекомендуемоеОкончаниеПериода, -2);
		КонецЕсли;
		
	ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Неделя") Тогда
		
		// 60 недель
		Если ИмяИзменяемойДаты = "НачалоПериода" Тогда
			РекомендуемоеНачалоПериода = НачалоИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
			РекомендуемоеОкончаниеПериода = ОкончаниеИнтервалаПланирования(РекомендуемоеНачалоПериода + 86400 * 420, ИнтервалПланирования);
		Иначе
			РекомендуемоеОкончаниеПериода = ОкончаниеИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
			РекомендуемоеНачалоПериода = НачалоИнтервалаПланирования(РекомендуемоеОкончаниеПериода - (86400 * 420), ИнтервалПланирования);
		КонецЕсли;
		
	ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Месяц") Тогда
		
		// 24 месяца
		Если ИмяИзменяемойДаты = "НачалоПериода" Тогда
			РекомендуемоеНачалоПериода = НачалоИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
			РекомендуемоеОкончаниеПериода = ОкончаниеИнтервалаПланирования(ДобавитьМесяц(РекомендуемоеНачалоПериода, 24), ИнтервалПланирования);
		Иначе
			РекомендуемоеОкончаниеПериода = ОкончаниеИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
			РекомендуемоеНачалоПериода = НачалоИнтервалаПланирования(ДобавитьМесяц(РекомендуемоеОкончаниеПериода, -24), ИнтервалПланирования);
		КонецЕсли;
		
	КонецЕсли; 
	
	РекомендуемыйПериод.Вставить("НачалоПериода", РекомендуемоеНачалоПериода);
	РекомендуемыйПериод.Вставить("ОкончаниеПериода", РекомендуемоеОкончаниеПериода);
	
	РекомендуемыйПериодСтрока = Формат(РекомендуемоеНачалоПериода, "ДФ=dd.MM.yy") 
								+ " - " 
								+ Формат(РекомендуемоеОкончаниеПериода, "ДФ=dd.MM.yy");
								
	РекомендуемыйПериод.Вставить("РекомендуемыйПериодСтрока", РекомендуемыйПериодСтрока);
	
	Возврат РекомендуемыйПериод;

КонецФункции

&НаКлиенте
Процедура ПроверитьСлишкомБольшойПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
	 	НачалоПериода = ДополнительныеПараметры.РекомендуемыйПериод.НачалоПериода;
	 	ОкончаниеПериода = ДополнительныеПараметры.РекомендуемыйПериод.ОкончаниеПериода;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении);
	Иначе
		НачалоПериода = ТекущееНачалоПериода;
		ОкончаниеПериода = ТекущееОкончаниеПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаполнитьДанные(Истина);
	ТекущееНачалоПериода = НачалоПериода;
	ТекущееОкончаниеПериода = ОкончаниеПериода;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИнформацияКРежимуРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаполнитьДанные(Истина);
	ТекущееНачалоПериода = НачалоПериода;
	ТекущееОкончаниеПериода = ОкончаниеПериода;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ИнформацияКРежимуРаботы");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
