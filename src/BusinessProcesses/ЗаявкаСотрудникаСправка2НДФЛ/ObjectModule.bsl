#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа.
//
// Параметры:
//   Таблица - см. УправлениеДоступом.ТаблицаНаборыЗначенийДоступа
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	ЗаполнитьНаборыЗначенийДоступаПоУмолчанию(Таблица);	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса.

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ФизическоеЛицо") Тогда
			Наименование = СтрШаблон(НСтр("ru = 'Запрос справки 2-НДФЛ для %1';
											|en = '2-NDFL certificate request for %1'"), Строка(ДанныеЗаполнения.ФизическоеЛицо));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Автор <> Неопределено И Не Автор.Пустая() Тогда
		АвторСтрокой = Строка(Автор);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ГруппаИсполнителейЗадач = ?(ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"),
		БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации),
		Исполнитель);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Предмет") <> Предмет Тогда
		ИзменитьПредметЗадач();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ДатаЗавершения = '00010101000000';	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута.

// Параметры:
// 	ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка.Задание - 
// 	ФормируемыеЗадачи - Массив из ЗадачаОбъект - 
// 	Отказ - Булево - 
// 
Процедура ВыполнитьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Записать();
	
	// Устанавливаем реквизиты адресации и доп. реквизиты для каждой задачи.
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Задача.РольИсполнителя = Исполнитель;
			Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
			Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
			Задача.Исполнитель = Неопределено;
		Иначе	
			Задача.Исполнитель = Исполнитель;
		КонецЕсли;
		Задача.Наименование = НаименованиеЗадачиДляВыполнения();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляВыполнения();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	Если Предмет = Неопределено Или Предмет.Пустая() Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	ОтправитьПочтовоеСообщение();
	ДатаЗавершения = БизнесПроцессыИЗадачиСервер.ДатаЗавершенияБизнесПроцесса(Ссылка);
	Выполнено = Истина;
	Записать();	
КонецПроцедуры

Процедура СогласоватьЗаявкуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает доступность действий в рамках заявки сотрудника
//	Параметры:
//		Действия - Массив из Строка - список действий для которых требуется получить доступность.
//		Форма - ФормаКлиентскогоПриложения, Неопределено - форма из которой требуется выполнить проверку. 
//	Возвращаемое значение:
//		Соответствие - соответствие действия и его доступности.
Функция ДоступностьДействий(Действия, Форма = Неопределено) Экспорт
	
	ДоступностьДействий = Новый Соответствие;
	
	ДанныеДляПроверкиДоступности = НовыйДанныеДляПроверкиДоступности();
	Если Форма = Неопределено Тогда
		ДанныеДляПроверкиДоступности.ЗадачаВыполнена = Выполнено;
		ДанныеДляПроверкиДоступности.ТребуетсяЭП = 
			(ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		ДанныеДляПроверкиДоступности.ТребуютсяФайлы = 
			(ВариантФормированияФайлаОтвета <> Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	Иначе
		ДанныеДляПроверкиДоступности.ЗадачаВыполнена = Форма.Объект.Выполнена;
		ДанныеДляПроверкиДоступности.ТребуетсяЭП = 
			(Форма.Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		ДанныеДляПроверкиДоступности.ТребуютсяФайлы = 
			(Форма.Задание.ВариантФормированияФайлаОтвета <> Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	КонецЕсли;
	ДанныеДляПроверкиДоступности.ВключенаФОДляДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СправкаНДФЛПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.СправкаНДФЛПрисоединенныеФайлы.ПустаяСсылка)) КАК ПрисоединенныйФайл,
	               |	СправкаНДФЛ.Ссылка КАК Ссылка,
	               |	СправкаНДФЛПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП
	               |ИЗ
	               |	Документ.СправкаНДФЛ КАК СправкаНДФЛ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СправкаНДФЛПрисоединенныеФайлы КАК СправкаНДФЛПрисоединенныеФайлы
	               |			ПО ДокументКадровогоЭДО.ЭлектронныйДокумент = СправкаНДФЛПрисоединенныеФайлы.Ссылка
	               |				И (СправкаНДФЛПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ)
	               |		ПО СправкаНДФЛ.Ссылка = ДокументКадровогоЭДО.ОснованиеДокумента
	               |			И (ДокументКадровогоЭДО.ПометкаУдаления = ЛОЖЬ)
	               |ГДЕ
	               |	СправкаНДФЛ.Ссылка В(&СправкиНДФЛ)";
	
	ТаблицаЗначенийСправкиНДФЛ = СправкиНДФЛ.Выгрузить();
	Запрос.УстановитьПараметр("СправкиНДФЛ", ТаблицаЗначенийСправкиНДФЛ.ВыгрузитьКолонку("СправкаНДФЛ"));
	
	ДанныеДляПроверкиДоступности.СформированыДокументы = (ТаблицаЗначенийСправкиНДФЛ.Количество() > 0);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеДляПроверкиДоступности.ЕстьФайлы = Истина;
		ДанныеДляПроверкиДоступности.ЕстьЭП = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПрисоединенныйФайл.Пустая() Тогда
				ДанныеДляПроверкиДоступности.ЕстьФайлы = Ложь;
				ДанныеДляПроверкиДоступности.ЕстьЭП = Ложь;
				Прервать;
			КонецЕсли;
			ДанныеДляПроверкиДоступности.ЕстьЭП = ДанныеДляПроверкиДоступности.ЕстьЭП И Выборка.ПодписанЭП; 		
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Действие Из Действия Цикл
		ДоступностьДействия = Ложь;
		Если Действие = "Выполнено" Тогда
			РольИсполнителя = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗаявокПоТипамЗапросов()[ЭтотОбъект.Метаданные().Имя];
	       	ТребуетсяПодпись = БизнесПроцессыЗаявокСотрудников.ТребуетсяПодписьНаЭтапе(
				РольИсполнителя,
				ОсновнойОбъектАдресации,
				БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.ПервыйЭтап());
			Если Форма <> Неопределено Или Не ТребуетсяПодпись Тогда
				ДоступностьДействия = ДоступноВыполнено(ДанныеДляПроверкиДоступности);			
			КонецЕсли;
		ИначеЕсли Действие = "Отказать" Тогда
			ДоступностьДействия = ДоступноОтказать(ДанныеДляПроверкиДоступности);
		ИначеЕсли Действие = "СформироватьФайлы" Тогда
			ДоступностьДействия = ДоступноСформироватьФайл(ДанныеДляПроверкиДоступности);
		ИначеЕсли Действие = "ПодписатьЭП" Тогда
			ДоступностьДействия = ДоступноПодписатьЭП(ДанныеДляПроверкиДоступности);
		ИначеЕсли Действие = "ВыбратьФайл" Тогда	
		    ДоступностьДействия = ДоступноВыбратьФайл(ДанныеДляПроверкиДоступности);
		КонецЕсли;
		ДоступностьДействий.Вставить(Действие, ДоступностьДействия);
	КонецЦикла;
	
	Возврат ДоступностьДействий;
	
КонецФункции

Функция ДоступноВыполнение() Экспорт
	Возврат ДоступностьДействий(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Выполнено"))["Выполнено"];	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоступностьДействий

Функция НовыйДанныеДляПроверкиДоступности()
	
	ДанныеДляПроверкиДоступности = Новый Структура;
	ДанныеДляПроверкиДоступности.Вставить("ЗадачаВыполнена", 	Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ТребуетсяЭП",		Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ТребуютсяФайлы",		Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ЕстьЭП",				Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ЕстьФайлы",			Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ВключенаФОДляДокументов", Ложь);
	ДанныеДляПроверкиДоступности.Вставить("СформированыДокументы", Ложь);
	
	Возврат ДанныеДляПроверкиДоступности;
	
КонецФункции

Функция ДоступноВыполнено(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Не Данные.ВключенаФОДляДокументов Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ((Данные.ТребуетсяЭП = Данные.ЕстьЭП) И (Данные.ТребуютсяФайлы = Данные.ЕстьФайлы));
	
КонецФункции

Функция ДоступноОтказать(Данные)
	Возврат Не Данные.ЗадачаВыполнена;	
КонецФункции

Функция ДоступноСформироватьФайл(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Не Данные.ВключенаФОДляДокументов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Данные.СформированыДокументы И Данные.ТребуютсяФайлы И Не Данные.ЕстьФайлы;
	
КонецФункции

Функция ДоступноПодписатьЭП(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Не Данные.ВключенаФОДляДокументов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Данные.ТребуетсяЭП И Не Данные.ЕстьЭП И Данные.ЕстьФайлы;
	
КонецФункции

Функция ДоступноВыбратьФайл(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если Не Данные.ВключенаФОДляДокументов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Данные.СформированыДокументы И Данные.ТребуютсяФайлы;
	
КонецФункции
	
#КонецОбласти

Процедура ИзменитьПредметЗадач()

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Ссылка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс");

		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект(); // ЗадачаОбъект
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.Предмет = Предмет;
			// Не выполняем предварительную блокировку данных для редактирования, т.к.
			// Это изменение имеет более высокий приоритет над открытыми формами задач.
			ЗадачаОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

Функция НаименованиеЗадачиДляВыполнения()
	Возврат Наименование;		
КонецФункции

Функция СрокИсполненияЗадачиДляВыполнения()
	Возврат СрокИсполнения;		
КонецФункции

Процедура ЗаполнитьНаборыЗначенийДоступаПоУмолчанию(Таблица)
	
	// Логика ограничения по умолчанию для
	// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
	// - изменения: Автор.
	
	// Если предмет не задан (т.е. бизнес-процесс без основания), тогда предмет не участвует в логике ограничения.
	
	// Чтение, Изменение: набор № 1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор № 2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
	
КонецПроцедуры

Процедура ОтправитьПочтовоеСообщение()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправкаНДФЛПрисоединенныеФайлы.Ссылка КАК Ссылка
	               |ИЗ
	               |	БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ.СправкиНДФЛ КАК ЗаявкаСотрудникаСправка2НДФЛСправкиНДФЛ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СправкаНДФЛПрисоединенныеФайлы КАК СправкаНДФЛПрисоединенныеФайлы
	               |		ПО ЗаявкаСотрудникаСправка2НДФЛСправкиНДФЛ.СправкаНДФЛ = СправкаНДФЛПрисоединенныеФайлы.ВладелецФайла
	               |ГДЕ
	               |	ЗаявкаСотрудникаСправка2НДФЛСправкиНДФЛ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ФайлыОтветы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	БизнесПроцессыЗаявокСотрудников.ОтправитьПочтовоеСообщение(ЭтотОбъект,
															   НСтр("ru = 'Справка 2-НДФЛ.';
																	|en = '2-NDFL statement.'"),
															   ФайлыОтветы);
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли