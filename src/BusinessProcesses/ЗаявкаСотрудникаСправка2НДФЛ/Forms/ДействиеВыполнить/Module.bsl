#Область ОписаниеПеременных

&НаКлиенте
Перем СправкаКУдалению;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Ссылка = Объект.Ссылка;
	Если Ссылка.Пустая() Тогда
		ИнициализироватьФормуЗадачи();
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
			
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Ссылка, , УникальныйИдентификатор);
	Исключение
		ТолькоПросмотр = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заявка редактируется другим пользователем, форма открыта в режиме только для просмотра.';
													|en = 'The request is being edited by another user, the form is opened in the read-only mode.'"));
	КонецПопытки;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		ПараметрыГиперссылки = МодульРаботаСФайлами.ГиперссылкаФайлов();
		ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
		ПараметрыГиперссылки.Владелец = "Объект.БизнесПроцесс";
		МодульРаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ФайлыНеПеренесены() Тогда
		ВызватьИсключение НСтр("ru = 'Заявка не доступна до окончания обновления.';
								|en = 'The request is not available till the update is finished.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	БизнесПроцессыИЗадачиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗавершениеРаботы Тогда
		ПередЗакрытиемНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	БизнесПроцессыЗаявокСотрудниковФормы.ЗаписатьРеквизитыБизнесПроцесса(ЭтотОбъект, ТекущийОбъект);
	
	ВыполнитьЗадачу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ВыполнитьЗадачу", Ложь);
	Если НЕ ВыполнитьЗадачу Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаданиеВыполнено И НЕ ЗначениеЗаполнено(ТекущийОбъект.РезультатВыполнения) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Укажите причину, по которой задача отклоняется.';
				|en = 'Please tell why you decline the task.'"),,
			"Объект.РезультатВыполнения",,
			Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	Если ИмяСобытия = "Запись_Задание" Тогда
		Если (Источник = Объект.БизнесПроцесс ИЛИ (ТипЗнч(Источник) = Тип("Массив") 
			И Источник.Найти(Объект.БизнесПроцесс) <> Неопределено)) Тогда
			Прочитать();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаявкиСотрудниковЗаписанДокумент" Тогда
		Если (Источник = ЭтотОбъект) Тогда
			ЗаписанДокументСправкаНДФЛ(Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ШаблонОтветаЗаписанСправочник" Тогда
		Если (Источник = ЭтотОбъект) Тогда
			ШаблонОтвета = Параметр;
			Элементы.ШаблонОтвета.Видимость = Истина;
			ШаблонОтветаПриИзмененииНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьПечатныхФормСЭЦП" Тогда
		Отбор = Новый Структура("СправкаНДФЛ", Источник);
		Если Задание.СправкиНДФЛ.НайтиСтроки(Отбор).Количество() > 0 Тогда
			ОтветПоЗаявке = Задание.ОтветПоЗаявке;
			Комментарий = Задание.Комментарий;
			Прочитать();
			ПоместитьДанныеИзБуфера(ОтветПоЗаявке, Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализироватьФормуЗадачи();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШаблонОтветаПриИзменении(Элемент)
	ШаблонОтветаПриИзмененииНаСервере();	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаданиеСправкиНДФЛ

&НаКлиенте
Процедура ЗаданиеСправкиНДФЛПередУдалением(Элемент, Отказ)
	СправкаКУдалению = Элементы.ЗаданиеСправкиНДФЛ.ТекущиеДанные.СправкаНДФЛ;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеСправкиНДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаданиеСправкиНДФЛПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеСправкиНДФЛПослеУдаления(Элемент)
	ЗаданиеСправкиНДФЛПриОкончанииРедактированияНаСервере(СправкаКУдалению);
КонецПроцедуры

&НаСервере
Процедура ЗаданиеСправкиНДФЛПриОкончанииРедактированияНаСервере(СправкаКУдалению = Неопределено)
	
	ЗаданиеОбъект = РеквизитФормыВЗначение("Задание");
	
	Если ЗначениеЗаполнено(СправкаКУдалению) Тогда
		ПометитьНаУдалениеДокументКЭДОСправкиНДФЛ(СправкаКУдалению);
		Если Задание.ОжидаетПодписания И Задание.СправкиНДФЛ.Количество() = 0 Тогда
			БизнесПроцессыЗаявокСотрудников.ОтметитьОжидаетПодписаниеЗаявкиСотрудника(
				ЗаданиеОбъект,
				Ложь);
			ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
		КонецЕсли;
	КонецЕсли;	
		
	ЗаданиеОбъект.СправкиНДФЛ.Очистить();
	Для Каждого Запись Из Задание.СправкиНДФЛ Цикл
		Если НЕ ЗначениеЗаполнено(Запись.СправкаНДФЛ) Тогда
			Продолжить;	
		КонецЕсли;
		НоваяЗапись = ЗаданиеОбъект.СправкиНДФЛ.Добавить();
		НоваяЗапись.СправкаНДФЛ = Запись.СправкаНДФЛ;
	КонецЦикла;
	ЗаданиеОбъект.Записать();
	ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Задание");
	
	ОтразитьФайлыОтвета();
	ПроставитьСтатусДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполненоВыполнить(Команда)
	Если ПодписыватьЗаявкиСотрудника Тогда
		БизнесПроцессыЗаявокСотрудниковКлиент.ПодписатьЗаявкуЭП(ЭтотОбъект, "ВыполненоВыполнитьЗавершение");
	Иначе
		ВыполненоВыполнитьЗавершение(Неопределено, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отказать(Команда)
	
	Отказ = Ложь;
	ОтказатьНаСервере(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ПодписыватьЗаявкиСотрудника Тогда
		БизнесПроцессыЗаявокСотрудниковКлиент.ПодписатьЗаявкуЭП(ЭтотОбъект, "ОтказатьЗавершение");
	Иначе
		ОтказатьЗавершение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	ГодСправкиНДФЛ = Год(Задание.НачалоПериода);
	ОткрытьФормуСозданияДокумента(НаименованиеФормыДокумента(), ПараметрыЗаполненияДокумента());
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	БизнесПроцессыИЗадачиКлиент.ОткрытьДопИнформациюОЗадаче(Объект.Ссылка);	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	БизнесПроцессыЗаявокСотрудниковКлиент.ПринятьЗадачуКИсполнению(ЭтотОбъект, ТекущийПользователь);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтотОбъект);
	Прочитать();
	БизнесПроцессыИЗадачиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗадание(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	ПоказатьЗначение(,Объект.БизнесПроцесс);	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьФайлОтвета(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ЗавершениеВыбратьФайлОтвета", ЭтотОбъект,
										  Новый Структура("НомерФайла", Число(СтрЗаменить(Команда.Имя,
										  												  "ВыбратьФайлОтвета",
										  												  ""))));
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = 
		НСтр("ru = 'Файлы MS Word (*.doc;*.docx)|*.doc;*.docx|Файлы PDF(*.pdf;*.PDF)|*.pdf;*.PDF|
			 |Архив (*.zip;*.rar;*.7z)|*.zip;*.rar;*.7z';
			 |en = 'MS Word files (*.doc;*.docx)|*.doc;*.docx|PDF files(*.pdf;*.PDF)|*.pdf;*.PDF|
			 |Archive (*.zip;*.rar;*.7z)|*.zip;*.rar;*.7z'");

	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;

	ФайловаяСистемаКлиент.ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьФайлНажатие(Элемент)
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита", СтрЗаменить(Элемент.Имя, "Удалить", ""));
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьПрисоединенныйФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Справка будет удалена. Удалить?';
											|en = 'The statement will be deleted. Delete?'"), РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФайлНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПрисоединенныйФайл(ЭтотОбъект[Элемент.Имя]);	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьФайлы(Команда)
	СформироватьФайлыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонОтвета(Команда)
	БизнесПроцессыЗаявокСотрудниковКлиент.СохранитьШаблонОтвета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭП(Команда)
	
	МассивФайловСправок = МассивФайловСправокНаПодпись();
	Если МассивФайловСправок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыбранныхФайловСправок = Новый Массив;
	МассивСформированныхФайловСправок = Новый Массив;
	
	Для Каждого ФайлСправки Из МассивФайловСправок Цикл
		Если ЭтоФайлПечатнойФормы(ФайлСправки) Тогда
			МассивСформированныхФайловСправок.Добавить(ФайлСправки);
		Иначе
			МассивВыбранныхФайловСправок.Добавить(ФайлСправки);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПечатныеФормыОбъектов");
	ДополнительныеПараметры.Вставить("МассивФайловСправок");
	
	Если МассивСформированныхФайловСправок.Количество() > 0 Тогда
		ДополнительныеПараметры.МассивФайловСправок = МассивСформированныхФайловСправок;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьПодписатьЭП",
													  ЭтотОбъект,
													  ДополнительныеПараметры);
													  
		БизнесПроцессыЗаявокСотрудниковКлиент.ПодписатьЭПФайлыОтвета(ЭтотОбъект, 
																	 ОписаниеОповещения,
																	 МассивСформированныхФайловСправок,
																	 Истина);
	КонецЕсли;
																 
	Если МассивВыбранныхФайловСправок.Количество() > 0 Тогда
		ДополнительныеПараметры.МассивФайловСправок = МассивВыбранныхФайловСправок;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьПодписатьЭП",
													  ЭтотОбъект,
													  ДополнительныеПараметры);
													  
		БизнесПроцессыЗаявокСотрудниковКлиент.ПодписатьЭПФайлыОтвета(ЭтотОбъект, 
																	 ОписаниеОповещения,
																	 МассивВыбранныхФайловСправок);
	КонецЕсли;															 
																 
КонецПроцедуры
															 
// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	КонецЕсли;	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СерверныеОбработчикиСобытийФормы

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);	
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ШаблонОтветаПриИзмененииНаСервере()
	БизнесПроцессыЗаявокСотрудниковФормы.ПослеВыбораШаблона(ЭтотОбъект, ШаблонОтвета, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиКомандФормы

&НаСервере
Процедура ОтказатьНаСервере(Отказ)
	Если ПустаяСтрока(Задание.ОтветПоЗаявке)
		 И КабинетСотрудника.ИспользоватьФормат302() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена причина отказа.';
													|en = 'The refusal reason is not filled in.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьФайлыНаСервере()

	НачатьТранзакцию();
	Попытка
		Для Каждого СтрокаТЧ Из Задание.СправкиНДФЛ Цикл	
			
			ТабДок = Документы.СправкаНДФЛ.СформироватьПечатнуюФорму2НДФЛ(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТЧ.СправкаНДФЛ),
					Новый СписокЗначений);
			
			ФайлыСправок = Новый Массив;
			РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СтрокаТЧ.СправкаНДФЛ, ФайлыСправок);

			РеквизитыФайлыСправок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ФайлыСправок, "ПометкаУдаления");
			ФайлыСправок.Очистить();
			Для Каждого РеквизитФайлаСправки Из РеквизитыФайлыСправок Цикл
				Если Не РеквизитФайлаСправки.Значение Тогда
					ФайлыСправок.Добавить(РеквизитФайлаСправки.Ключ);	
				КонецЕсли;
			КонецЦикла;
			
			Если ИспользуетсяКадровыйЭДО Тогда
			
				Если ФайлыСправок.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПечатнойФормы = КадровыйЭДОВызовСервера.ДобавитьПечатнуюФорму(
					ТабДок,
					СтрокаТЧ.СправкаНДФЛ,
					"Форма2НДФЛ",
					НСтр("ru = 'Форма 2НДФЛ';
						|en = '2-NDFL form'"),
					Задание.Организация,
					Задание.ФизическоеЛицо);
				
				РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечатнойФормы.ФайлОбъекта),
						Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
						
			Иначе
			
				Если ФайлыСправок.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Поток = Новый ПотокВПамяти();
				ТабДок.Записать(Поток, КадровыйЭДОВызовСервера.ТипФайлаЭлектронногоДокумента());
				ДвоичныеДанные =  Поток.ЗакрытьИПолучитьДвоичныеДанные();
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
							
				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание");
				ПараметрыФайла.ВладелецФайлов = СтрокаТЧ.СправкаНДФЛ;
				ПараметрыФайла.ИмяБезРасширения = НСтр("ru = 'Справка 2-НДФЛ';
														|en = '2-NDFL statement'");
				ПараметрыФайла.РасширениеБезТочки = "pdf";
				ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
				ПараметрыФайла.Описание = НСтр("ru = 'Приложение к заявке:';
												|en = 'Attachment to application:'") + " " + Строка(Задание.Ссылка);
				
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
				
				БизнесПроцессыЗаявокСотрудников.СоздатьИзменитьДокументКЭДОСправкаСотруднику(ПрисоединенныйФайл, СтрокаТЧ.СправкаНДФЛ);
				
			КонецЕсли;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заявка сотрудника справка 2-НДФЛ.Ошибка формирования файла справки';
										|en = 'Employee request 2-NDFL statement. An error occurred while generating the statement file'", ОбщегоНазначения.КодОсновногоЯзыка()),
       							 УровеньЖурналаРегистрации.Ошибка,
        						 ,
        						 ,
        						 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать файлы';
													|en = 'Cannot generate files'"));
		Возврат;
	КонецПопытки;
	
	ОтразитьФайлыОтвета();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещения

&НаКлиенте
Процедура ВыполненоВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	БизнесПроцессыЗаявокСотрудниковКлиент.ВыполненоВыполнитьЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	БизнесПроцессыЗаявокСотрудниковКлиент.ОтказатьЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьПрисоединенныйФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьПрисоединенныйФайлЗавершениеНаСервере(ДополнительныеПараметры.ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбратьФайлОтвета(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	Если Данные.Размер() > ИнтеграцияУправлениеПерсоналомКлиентСервер.МаксимальныйРазмерПринимаемогоФайла() Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Сервис не может принять файлы размером более 5Мб. Выберите другой файл.';
				|en = 'The service cannot accept files larger than 5MB. Choose another file.'"));
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗавершениеВыбратьФайлОтветаНаСервере(ПомещенныйФайл, ДополнительныеПараметры.НомерФайла);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодписатьЭП(Результат, ДополнительныеПараметры) Экспорт
	ЗавершитьПодписатьЭПНаСервере(ДополнительныеПараметры.МассивФайловСправок);	 	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеФормДокументов

&НаКлиенте
Процедура ОткрытьФормуСозданияДокумента(НаименованиеФормы, ПараметрыЗаполненияДокумента)
	Если НаименованиеФормы <> "" Тогда
		ОткрытьФорму(НаименованиеФормы, ПараметрыЗаполненияДокумента, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияДокумента()
	
	ПараметрыЗаполнения = Новый Структура;
	
	ЗаполнитьПараметрыЗаполненияСправка2НДФЛ(ПараметрыЗаполнения);
		
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыЗаполненияСправка2НДФЛ(ПараметрыЗаполнения)
	
	Данные = Новый Структура;
	Данные.Вставить("ФизическоеЛицо", Задание.ФизическоеЛицо);
	Данные.Вставить("Организация", Задание.Организация);
	Если ЗначениеЗаполнено(Задание.НалоговыйПериод) Тогда
		Данные.Вставить("НалоговыйПериод", Задание.НалоговыйПериод);
	ИначеЕсли ЗначениеЗаполнено(Задание.НачалоПериода) И ЗначениеЗаполнено(Задание.ОкончаниеПериода) Тогда
		Данные.Вставить("НалоговыйПериод", ГодСправкиНДФЛ);
	Иначе
		Данные.Вставить("НалоговыйПериод", Год(ТекущаяДатаСеанса()));
	КонецЕсли;
	Данные.Вставить("СпособФормирования", Задание.СпособФормирования);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Действие", "ОбработкаЗапросаКабинетСотрудника");
	ДанныеЗаполнения.Вставить("Данные", Данные);
	
	ПараметрыЗаполнения.Вставить("Основание", ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Функция НаименованиеФормыДокумента()
	Возврат "Документ.СправкаНДФЛ.Форма.ФормаДокумента";
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

&НаСервере
Процедура ОтразитьФайлыОтвета()
	
	Если Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде Тогда
		УстановитьВидимостьКнопокДействий();
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаФайловОтвета(Задание.СправкиНДФЛ.Выгрузить().ВыгрузитьКолонку("СправкаНДФЛ"));
	ТаблицаФайловОтвета = РезультатЗапроса.Выгрузить();
	
	ДобавляемыеРеквизиты = Новый Массив;
	ЗначенияРеквизитов = Новый Структура;
	Счетчик = 0;
	Пока Элементы.Найти("ГруппаФайлОтвета" + (Счетчик +  1)) <> Неопределено 
		 ИЛИ Счетчик < Задание.СправкиНДФЛ.Количество() Цикл
		
		Счетчик = Счетчик + 1;		
		ИмяГруппы = "ГруппаФайлОтвета" + Счетчик;
		ИмяРеквизита = "ФайлОтвета" + Счетчик;
		
		СтруктураРеквизита = БизнесПроцессыЗаявокСотрудниковФормы.НовыйСтруктураРеквизитаФайлаОтвета();
		СтруктураРеквизита.ИмяРеквизита						= ИмяРеквизита;
		СтруктураРеквизита.ИмяТаблицыПрисоединенногоФайла	= "СправкаНДФЛПрисоединенныеФайлы";
		
		ГруппаФайлОтвета = Элементы.Найти(ИмяГруппы);
		Если ГруппаФайлОтвета <> Неопределено Тогда
			ГруппаФайлОтвета.Видимость = (Счетчик <= Задание.СправкиНДФЛ.Количество());
			Если Счетчик > Задание.СправкиНДФЛ.Количество() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ГруппаФайлОтвета = Неопределено Тогда
			ДобавитьЭлементыФайлаОтвета(ИмяГруппы, СтруктураРеквизита, ДобавляемыеРеквизиты);
		КонецЕсли;																 

		СтрокиФайловОтвета = ТаблицаФайловОтвета.НайтиСтроки(Новый Структура("Ссылка", Задание.СправкиНДФЛ[Счетчик-1].СправкаНДФЛ));
		ФайлОтвета = Элементы[ИмяРеквизита];
		ЗаполнитьЭлементыФайлаОтвета(ФайлОтвета,
									 ?(СтрокиФайловОтвета.Количество() = 0,
									   Справочники.СправкаНДФЛПрисоединенныеФайлы.ПустаяСсылка(),
									   СтрокиФайловОтвета.Получить(0).ПрисоединенныйФайл),
									 ИмяРеквизита,
									 ЗначенияРеквизитов);
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов);
	
	УстановитьВидимостьКнопокДействий();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыФайлаОтвета(ИмяГруппы, СтруктураРеквизита, ДобавляемыеРеквизиты)
	
	ГруппаФайлОтвета = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПрисоединитьФайл);
	ГруппаФайлОтвета.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФайлОтвета.ОтображатьЗаголовок = Ложь;
	
	ИмяРеквизита = СтруктураРеквизита.ИмяРеквизита;
	ИмяКоманды = "Выбрать" + ИмяРеквизита;
		
	НоваяКоманда = Команды.Добавить(ИмяКоманды );
	НоваяКоманда.Действие = "Подключаемый_ВыбратьФайлОтвета";
	НоваяКоманда.Заголовок = НСтр("ru = 'Выберите файл...';
									|en = 'Select file...'");
		
	НоваяКнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаФайлОтвета);
	НоваяКнопка.ИмяКоманды = ИмяКоманды ;
	
	НоваяДекорацияВидДокумента = Элементы.Добавить("ВидДокумента" + ИмяРеквизита,
											   		 Тип("ДекорацияФормы"),
											   		 ГруппаФайлОтвета);
	НоваяДекорацияВидДокумента.Вид = ВидДекорацииФормы.Картинка;
	НоваяДекорацияВидДокумента.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	НовыйЭлемент = Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаФайлОтвета);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	
	НоваяДекорацияУдаления = Элементы.Добавить("Удалить" + ИмяРеквизита,
											   Тип("ДекорацияФормы"),
											   ГруппаФайлОтвета);
	НоваяДекорацияУдаления.Вид = ВидДекорацииФормы.Картинка;
	НоваяДекорацияУдаления.Картинка = БиблиотекаКартинок.Закрыть;
	НоваяДекорацияУдаления.Гиперссылка = Не Объект.Выполнена;
	НоваяДекорацияУдаления.УстановитьДействие("Нажатие", "Подключаемый_УдалитьФайлНажатие");
	
	Реквизит = Новый РеквизитФормы(ИмяРеквизита,
								   Новый ОписаниеТипов("СправочникСсылка." + СтруктураРеквизита.ИмяТаблицыПрисоединенногоФайла));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	ФайлПодписан = Элементы.Добавить(ИмяРеквизита + "Подписан", Тип("ДекорацияФормы"), ГруппаФайлОтвета);
	ФайлПодписан.Вид = ВидДекорацииФормы.Надпись;
	
	ГруппаФайлОтвета.Видимость = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыФайлаОтвета(ФайлОтветаЭлемент, ФайлОтветаСсылка, ИмяРеквизита, ЗначенияРеквизитов)
	
	ФайлПустой = Не ЗначениеЗаполнено(ФайлОтветаСсылка);
	ФайлСодержитЭП = Ложь;	
	
	Если ФайлПустой Тогда
		ФайлОтветаЭлемент.Гиперссылка = Ложь;
		ФайлОтветаЭлемент.Заголовок = НСтр("ru = '<Файл не выбран>';
											|en = '<File is not selected>'");
		
	Иначе
		 				
		ФайлОтветаЭлемент.Гиперссылка = Истина;
		РеквизитыФайлаЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлОтветаСсылка,
																		  "Наименование,Расширение,Размер,ПодписанЭП");
		ФайлОтветаЭлемент.Заголовок = СтрШаблон("%1.%2 (%3)",
										  		РеквизитыФайлаЗаявки.Наименование,
										   		РеквизитыФайлаЗаявки.Расширение,
										   		БизнесПроцессыЗаявокСотрудниковКлиентСервер.РазмерФайлаСтрокой(РеквизитыФайлаЗаявки.Размер));
		ФайлОтветаЭлемент.УстановитьДействие("Нажатие", "Подключаемый_ФайлНажатие");
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ФайлОтветаСсылка);
		Элементы[ИмяРеквизита + "Подписан"].Заголовок = ?(РеквизитыФайлаЗаявки.ПодписанЭП,
															НСтр("ru = 'Файл подписан';
																|en = 'File is signed'"),
															НСтр("ru = 'Файл не подписан';
																|en = 'File is not signed'"));
		Элементы["ВидДокумента" + ИмяРеквизита].Картинка = БизнесПроцессыЗаявокСотрудниковФормы.КартинкаПоРасширениюФайла(РеквизитыФайлаЗаявки.Расширение);
		
		ФайлСодержитЭП = РеквизитыФайлаЗаявки.ПодписанЭП;
		
	КонецЕсли;
	
	ВБумажномВиде =
		(Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	ФайлСЭП =
		(Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
				
	Элементы["ВидДокумента" + ИмяРеквизита].Видимость = Не ФайлПустой;
	
	ЭлементВыбрать = Элементы["Выбрать" + ИмяРеквизита]; 
	ЭлементВыбрать.Видимость = Не ВБумажномВиде И Не Объект.Выполнена;
	ЭлементВыбрать.Доступность = ФайлПустой; 

	Элементы["Удалить" + ИмяРеквизита].Видимость = Не (ФайлПустой Или Объект.Выполнена Или ФайлСодержитЭП);
	Элементы[ИмяРеквизита + "Подписан"].Видимость = Не ФайлПустой И (ИспользуетсяКадровыйЭДО Или ФайлСЭП); 
													   		
КонецПроцедуры

&НаСервере
Процедура ЗавершениеВыбратьФайлОтветаНаСервере(ПомещенныйФайл, НомерФайла)
		
	СтруктураИмениФайла = БизнесПроцессыЗаявокСотрудниковФормы.СтруктураИмениФайла(ПомещенныйФайл.Имя);
	Если СтруктураИмениФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		АдресХранилища = ПомещенныйФайл.Хранение;
		СправкаНДФЛ = Задание.СправкиНДФЛ[НомерФайла - 1].СправкаНДФЛ;
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание");
		ПараметрыФайла.ВладелецФайлов = СправкаНДФЛ;
		ПараметрыФайла.ИмяБезРасширения = СтруктураИмениФайла.ИмяФайлаОтветаБезРасширения;
		ПараметрыФайла.РасширениеБезТочки = СтруктураИмениФайла.РасширениеФайлаОтветаБезТочки;
		ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ПараметрыФайла.Описание = НСтр("ru = 'Приложение к заявке:';
										|en = 'Attachment to request:'") + " " + Строка(Задание.Ссылка);
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);		
		БизнесПроцессыЗаявокСотрудников.СоздатьИзменитьДокументКЭДОСправкаСотруднику(ПрисоединенныйФайл, СправкаНДФЛ);
		Если ИспользуетсяКадровыйЭДО Тогда
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайл),
				Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заявка сотрудника справка 2-НДФЛ.Ошибка прикрепления файла справки';
										|en = 'Employee request 2-NDFL statement. An error occurred while attaching the statement file'", ОбщегоНазначения.КодОсновногоЯзыка()),
       							 УровеньЖурналаРегистрации.Ошибка,
        						 ,
        						 ,
        						 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось прикрепить файл';
													|en = 'Cannot attach file'"));
		Возврат;
	КонецПопытки;
	
	ОтразитьФайлыОтвета();
		
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПодписатьЭПНаСервере(МассивФайловСправок)
	
	НачатьТранзакцию();
	Попытка
		
		РеквизитыСправокНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивФайловСправок, "ВладелецФайла");
		
		Для Каждого ФайлСправки Из МассивФайловСправок Цикл
			БизнесПроцессыЗаявокСотрудников.СоздатьИзменитьДокументКЭДОСправкаСотруднику(ФайлСправки, РеквизитыСправокНДФЛ[ФайлСправки]);
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлСправки),
				Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заявка сотрудника справка с места работы.Ошибка подписания файла справки';
										|en = 'Employee request statement of employment. An error occurred while signing the statement file'", ОбщегоНазначения.КодОсновногоЯзыка()),
	   							 УровеньЖурналаРегистрации.Ошибка,
	    						 ,
	    						 ,
	    						 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось подписать файл';
													|en = 'Cannot sign file'"));
		Возврат;
	КонецПопытки;
		
	ОтветПоЗаявке = Задание.ОтветПоЗаявке;
	Комментарий = Задание.Комментарий;
	Прочитать();
	ПоместитьДанныеИзБуфера(ОтветПоЗаявке, Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПрисоединенныйФайлЗавершениеНаСервере(ИмяРеквизита)
	
	НомерПрисоединенногоФайла = Число(СтрЗаменить(ИмяРеквизита, "ФайлОтвета", ""));
	МассивСправок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задание.СправкиНДФЛ[НомерПрисоединенногоФайла-1].СправкаНДФЛ);
	РезультатЗапроса = РезультатЗапросаФайловОтвета(МассивСправок);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ФайлОтветаОбъект = Выборка.ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОтветаОбъект.ПометкаУдаления = Истина;
		ФайлОтветаОбъект.Записать();
		
		ДокументКЭДО = Выборка.ДокументКЭДО.ПолучитьОбъект();
		ДокументКЭДО.ПометкаУдаления = Истина;
		ДокументКЭДО.ДополнительныеСвойства.Вставить("РазрешенаПометкаУдаления", Истина);
		ДокументКЭДО.Записать();
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Задание.ОжидаетПодписания Тогда
		ЗаданиеОбъект = РеквизитФормыВЗначение("Задание");
		БизнесПроцессыЗаявокСотрудников.ОтметитьОжидаетПодписаниеЗаявкиСотрудника(ЗаданиеОбъект, Ложь);
		ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
		ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Задание");
	КонецЕсли;
	
	ОтразитьФайлыОтвета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатЗапросаФайловОтвета(СправкиНДФЛ, ТолькоНеподписанные = Ложь)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СправкаНДФЛПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.СправкаНДФЛПрисоединенныеФайлы.ПустаяСсылка)) КАК ПрисоединенныйФайл,
	               |	СправкаНДФЛ.Ссылка КАК Ссылка,
	               |	СправкаНДФЛПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
	               |	ДокументКадровогоЭДО.Ссылка КАК ДокументКЭДО
	               |ИЗ
	               |	Документ.СправкаНДФЛ КАК СправкаНДФЛ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СправкаНДФЛПрисоединенныеФайлы КАК СправкаНДФЛПрисоединенныеФайлы
	               |			ПО ДокументКадровогоЭДО.ЭлектронныйДокумент = СправкаНДФЛПрисоединенныеФайлы.Ссылка
	               |		ПО СправкаНДФЛ.Ссылка = ДокументКадровогоЭДО.ОснованиеДокумента
	               |ГДЕ
	               |	СправкаНДФЛ.Ссылка В(&СправкиНДФЛ)
	               |	И СправкаНДФЛПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	               |	И ДокументКадровогоЭДО.ПометкаУдаления = ЛОЖЬ
	               |	И (СправкаНДФЛПрисоединенныеФайлы.ПодписанЭП = ЛОЖЬ
	               |			ИЛИ НЕ &ТолькоНеподписанные)";
	
	Запрос.УстановитьПараметр("ТолькоНеподписанные", ТолькоНеподписанные);
	Запрос.УстановитьПараметр("СправкиНДФЛ", СправкиНДФЛ);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаСервере
Функция МассивФайловСправокНаПодпись()
	МассивСправок = Задание.СправкиНДФЛ.Выгрузить().ВыгрузитьКолонку("СправкаНДФЛ");
	РезультатЗапроса = РезультатЗапросаФайловОтвета(МассивСправок, Истина);
	МассивФайловСправок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПрисоединенныйФайл");
	Возврат МассивФайловСправок;
КонецФункции

&НаКлиенте
Процедура ОткрытьПрисоединенныйФайл(ПрисоединенныйФайл)
	БизнесПроцессыЗаявокСотрудниковКлиент.ОткрытьПрисоединенныйФайл(ЭтотОбъект, ПрисоединенныйФайл);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоФайлПечатнойФормы(ПрисоединенныйФайл)
	Возврат КадровыйЭДО.ЭтоФайлПечатнойФормы(ПрисоединенныйФайл);	
КонецФункции

#КонецОбласти 

&НаСервере
Процедура ИнициализироватьФормуЗадачи()
	
	БизнесПроцессыЗаявокСотрудниковФормы.ИнициализироватьФормуЗадачи(ЭтотОбъект, Элементы.ЗаданиеСправкиНДФЛ);
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	ОтразитьФайлыОтвета();
	ПроставитьСтатусДокументов();
	
	СканСПодписьюИПечатью = 
		(Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.СканСПодписьюИПечатью);
	ВБумажномВиде =
		(Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде);
	ФайлСЭП =
		(Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	
	Элементы.ЗаданиеСправкиНДФЛ.Видимость = Истина;
	Элементы.СформироватьФайлы.Видимость = Не СканСПодписьюИПечатью И Не ВБумажномВиде;
	Элементы.ПодписатьЭП.Видимость = ФайлСЭП;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокДействий()
	
	Действия = Новый Массив;
	Действия.Добавить("Выполнено");
	Действия.Добавить("Отказать");
	Действия.Добавить("СформироватьФайлы");
	Действия.Добавить("ПодписатьЭП");
	Действия.Добавить("ВыбратьФайл");
	
	ДоступностьДействий = РеквизитФормыВЗначение("Задание").ДоступностьДействий(Действия, ЭтотОбъект);
	
	Элементы.Выполнено.Доступность 			= ДоступностьДействий["Выполнено"];
	Элементы.Отказать.Доступность			= ДоступностьДействий["Отказать"];
	Элементы.СформироватьФайлы.Доступность	= ДоступностьДействий["СформироватьФайлы"];
	Элементы.ПодписатьЭП.Доступность		= ДоступностьДействий["ПодписатьЭП"];
	Элементы.СоздатьДокумент.Доступность	= Не Объект.Выполнена;
	
	Индекс = 1;
	ДоступностьВыбратьФайл = ДоступностьДействий["ВыбратьФайл"];
	Пока Элементы.Найти("ВыбратьФайлОтвета" + Индекс) <> Неопределено Цикл
		Если ДоступностьВыбратьФайл Тогда
			Прервать;
		КонецЕсли;
		Элементы["ВыбратьФайлОтвета" + Индекс].Доступность = Ложь;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписанДокументСправкаНДФЛНаСервере(СправкаНДФЛ)
	
	ЗаданиеОбъект = РеквизитФормыВЗначение("Задание");
	Если ЗаданиеОбъект.СправкиНДФЛ.Найти(СправкаНДФЛ) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	НоваяЗапись = ЗаданиеОбъект.СправкиНДФЛ.Добавить();
	НоваяЗапись.СправкаНДФЛ = СправкаНДФЛ;
	ЗаданиеОбъект.Записать();
	ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Задание");
	
	ОтразитьФайлыОтвета();
	ПроставитьСтатусДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписанДокументСправкаНДФЛ(Результат)
	
	СправкаНДФЛ = Неопределено;
	Если Результат <> Неопределено Тогда
		СправкаНДФЛ = Результат;
	КонецЕсли;
		
	Если СправкаНДФЛ = Неопределено ИЛИ СправкаНДФЛ.Пустая() Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаписанДокументСправкаНДФЛНаСервере(СправкаНДФЛ);
	
	Если НЕ (ЗначениеЗаполнено(Задание.НачалоПериода) И ЗначениеЗаполнено(Задание.НачалоПериода)) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ГодСправкиНДФЛ < Год(Задание.ОкончаниеПериода) Тогда
		ГодСправкиНДФЛ = ГодСправкиНДФЛ + 1;
		ОткрытьФормуСозданияДокумента(НаименованиеФормыДокумента(), ПараметрыЗаполненияДокумента());
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ФайлыНеПеренесены()
	
	Для Каждого СправкаНДФЛ Из Задание.СправкиНДФЛ Цикл
		Если ЗначениеЗаполнено(СправкаНДФЛ.УдалитьФайл) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеДокументКЭДОСправкиНДФЛ(СправкаНДФЛ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументКадровогоЭДО.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |ГДЕ
	               |	ДокументКадровогоЭДО.ОснованиеДокумента В(&СправкаНДФЛ)
	               |	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.СправкаСотруднику)
	               |	И ДокументКадровогоЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СправкаНДФЛ", СправкаНДФЛ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументКЭДООбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументКЭДООбъект.ПометкаУдаления = Истина;
		ДокументКЭДООбъект.ДополнительныеСвойства.Вставить("РазрешенаПометкаУдаления");
		ДокументКЭДООбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьСтатусДокументов()
	ВыгрузкаСправкиНДФЛ = Задание.СправкиНДФЛ.Выгрузить();
	Для Каждого ЗаписьСправкаНДФЛ Из ВыгрузкаСправкиНДФЛ Цикл
		БизнесПроцессыЗаявокСотрудниковФормы.УстановитьСтатусДокумента(ЗаписьСправкаНДФЛ);	
	КонецЦикла;
	Задание.СправкиНДФЛ.Загрузить(ВыгрузкаСправкиНДФЛ);
КонецПроцедуры

&НаСервере
Процедура ПоместитьДанныеИзБуфера(ОтветПоЗаявке, Комментарий)
	ЗаданиеОбъект = РеквизитФормыВЗначение("Задание");
	ЗаданиеОбъект.ОтветПоЗаявке = ОтветПоЗаявке;
	ЗаданиеОбъект.Комментарий = Комментарий;
	ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Задание");
КонецПроцедуры

#КонецОбласти


