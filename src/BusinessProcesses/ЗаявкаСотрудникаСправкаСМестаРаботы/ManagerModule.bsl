#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру для инициализации бизнес-процесса.
//	Возвращаемое значение:
//		Структура - структура используемая при создании заявки сотрудника.
Функция СтруктураИнициализацииЗаявки() Экспорт
	
	СтруктураИнициализации = БизнесПроцессыЗаявокСотрудников.СтруктураИнициализацииЗаявки();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураИнициализации, БизнесПроцессыЗаявокСотрудников.СтруктураСпособаПолученияОтвета());
	
	СтруктураИнициализации.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
	СтруктураИнициализации.Вставить("КомментарийСотрудника",	"");
	СтруктураИнициализации.Вставить("НазначениеСправки",		"");
	СтруктураИнициализации.Вставить("ВидСправки",				Неопределено);
	
	Возврат СтруктураИнициализации
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив Из Строка
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("Автор");
	Результат.Добавить("Важность");
	Результат.Добавить("Исполнитель");
	Результат.Добавить("ПроверитьВыполнение");
	Результат.Добавить("Проверяющий");
	Результат.Добавить("СрокИсполнения");
	Результат.Добавить("СрокПроверки");
	Возврат Результат;	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// СтандартныеПодсистемы.БизнесПроцессыИЗадачи

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры:
//   ЗадачаСсылка                - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", "БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы.Форма.ДействиеВыполнить");
	Возврат Результат;	
КонецФункции

// Вызывается при перенаправлении задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	БизнесПроцессыЗаявокСотрудников.ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка);
КонецПроцедуры

// Вызывается при выполнении задачи из формы списка.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   БизнесПроцессСсылка - БизнесПроцессСсылка - бизнес-процесс, по которому сформирована задача ЗадачаСсылка.
//   ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута.
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	БизнесПроцессыЗаявокСотрудников.ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка,
																   БизнесПроцессСсылка,
																   ТочкаМаршрутаБизнесПроцесса);	
КонецПроцедуры	

// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Задание
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ПО
	|	ИсполнителиЗадач.РольИсполнителя = Задание.Исполнитель
	|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = Задание.ОсновнойОбъектАдресации
	|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Задание.ДополнительныйОбъектАдресации
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ПроверяющиеЗадач
	|ПО
	|	ПроверяющиеЗадач.РольИсполнителя = Задание.Проверяющий
	|	И ПроверяющиеЗадач.ОсновнойОбъектАдресации = Задание.ОсновнойОбъектАдресацииПроверяющий
	|	И ПроверяющиеЗадач.ДополнительныйОбъектАдресации = Задание.ДополнительныйОбъектАдресацииПроверяющий
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)
	|	ИЛИ ЗначениеРазрешено(Исполнитель КРОМЕ Справочник.РолиИсполнителей)
	|	ИЛИ ЗначениеРазрешено(ИсполнителиЗадач.Исполнитель)
	|	ИЛИ ЗначениеРазрешено(Проверяющий КРОМЕ Справочник.РолиИсполнителей)
	|	ИЛИ ЗначениеРазрешено(ПроверяющиеЗадач.Исполнитель)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Автор)";	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
// Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульСозданиеНаОсновании = ОбщегоНазначения.ОбщийМодуль("СозданиеНаОсновании");
		Команда = МодульСозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.БизнесПроцессы.Задание);
		Если Команда <> Неопределено Тогда
			Команда.ФункциональныеОпции = "ИспользоватьБизнесПроцессыИЗадачи";
		КонецЕсли;
		Возврат Команда;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает флаг ожидает подписания по файлу справки с места работы.
//	Параметры:
//		СправкаСМестаРаботы - СправочникСсылка.ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы - присоединенный файл справки 2-НДФЛ;
//		Удаление - булево - удаляется запись о файле.
Процедура ОтметитьОжидаетПодписание(СправкаСМестаРаботы, Удаление) Экспорт
	
	РеквизитыСправкиСМестаРаботы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										СправкаСМестаРаботы, 
										"ВладелецФайла, ПодписанЭП");
	ЗаявкаСотрудника = РеквизитыСправкиСМестаРаботы.ВладелецФайла.ПолучитьОбъект();
	
	Если Удаление <> ЗаявкаСотрудника.ОжидаетПодписания Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыЗаявокСотрудников.ОтметитьОжидаетПодписаниеЗаявкиСотрудника(ЗаявкаСотрудника, Не Удаление);
											
КонецПроцедуры

// Возвращает первый этап бизнес-процесса.
//	Возвращаемое значение:
//		СправочникСсылка.ЭтапыЗаявок - первый этап бизнес-процесса
Функция ПервыйЭтап() Экспорт
	Возврат Справочники.ЭтапыЗаявокСотрудников.ФормированиеСправкаСМестаРаботы;	
КонецФункции

Функция ИдентификаторПечатнойФормы() Экспорт
	Возврат "ПФ_MXL_СправкаСМестаРаботы";
КонецФункции

Процедура ЗаполнитьДокументыПоЗаявке(Заявка, ДокументыПоЗаявке) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает состояние элементов формы задачи.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//   * Элементы - ВсеЭлементыФормы:
//    ** Предмет - РасширениеПоляФормыДляПоляНадписи
// 
Процедура УстановитьСостояниеЭлементовФормыЗадачи(Форма) Экспорт
	
	Если Форма.Элементы.Найти("РезультатВыполнения") <> Неопределено 
		И Форма.Элементы.Найти("ИсторияВыполнения") <> Неопределено Тогда
			Форма.Элементы.ИсторияВыполнения.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Форма.ЗаданиеРезультатВыполнения);
	КонецЕсли;
	
	Форма.Элементы.Предмет.Гиперссылка = Форма.Объект.Предмет <> Неопределено И НЕ Форма.Объект.Предмет.Пустая();
	Форма.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Форма.Объект.Предмет);	
	
КонецПроцедуры

#Область ОбработчикиОбновленияИнформационнойБазы

#Область ОбновлениеДляИспользованияКЭДО

Процедура ОбновлениеДляИспользованияКЭДО(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаЗаявокОбновлениеДляИспользованияКЭДО();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаЗавершена = Истина; 
	Пока Выборка.Следующий() Цикл
		ОписаниеОшибки = "";
		НачатьТранзакцию();
		Попытка
			
			Если ПараметрыОбновления <> Неопределено Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				
				Если ЗначениеЗаполнено(Выборка.УдалитьФайлОтвета) Тогда 
					ЭлементБлокировки = Блокировка.Добавить("Справочник.ФизическиеЛицаПрисоединенныеФайлы");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.УдалитьФайлОтвета);
				КонецЕсли;
				
				Попытка 
					Блокировка.Заблокировать();
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки';
													|en = 'Updating the infobase.Lock error'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , Выборка.Ссылка, НСтр("ru = 'БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы';
																					|en = 'БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы'"));
					Продолжить;                                                                                                              
				КонецПопытки;
				
			КонецЕсли;	
					
			ПеренестиИСоздатьДокументыКЭДОФайловОтветаЗаявки(Выборка, ОписаниеОшибки);
			БизнесПроцессыЗаявокСотрудников.СоздатьИЗаписатьДокументКЭДООбновление(Выборка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбработкаЗавершена = Ложь;
						
			Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ОписаниеОшибки();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			
		КонецПопытки;
	КонецЦикла;
	
	Если Не ОбработкаЗавершена И ПараметрыОбновления <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка обработки заявок сотрудников.';
								|en = 'An error occurred while processing employee requests.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатЗапросаЗаявокОбновлениеДляИспользованияКЭДО()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаСотрудника.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	               |	ЗаявкаСотрудника.УдалитьФайлОтвета КАК УдалитьФайлОтвета,
	               |	ЗаявкаСотрудника.Ссылка КАК Ссылка,
	               |	ЗаявкаСотрудника.Организация КАК Организация,
	               |	ЗаявкаСотрудника.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗаявкаСотрудника.Дата КАК Дата,
	               |	ЗаявкаСотрудника.Выполнено КАК Выполнено,
	               |	НЕ Изменения.ПредметПубликации ЕСТЬ NULL КАК ЗарегистрированаКПубликации,
	               |	ЗаявкаСотрудника.ИдентификаторЗаявки КАК ИдентификаторЗаявки
	               |ИЗ
	               |	БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы КАК ЗаявкаСотрудника
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |		ПО ЗаявкаСотрудника.Ссылка = ДокументКадровогоЭДО.ОснованиеДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьИзмененияЗаявокДляСервисаКабинетСотрудника КАК Изменения
	               |		ПО ЗаявкаСотрудника.Ссылка = Изменения.ПредметПубликации
	               |ГДЕ
	               |	ДокументКадровогоЭДО.Ссылка ЕСТЬ NULL
	               |	И ЗаявкаСотрудника.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
		
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПеренестиИСоздатьДокументыКЭДОФайловОтветаЗаявки(Заявка, ОписаниеОшибки)

	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Заявка.УдалитьФайлОтвета, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ВызватьИсключение;
	КонецПопытки;
		
	ПараметрыНовогоФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание, ФайлОтвета");
	ПараметрыНовогоФайла.ИмяБезРасширения = 	ДанныеФайла.Наименование;
	ПараметрыНовогоФайла.РасширениеБезТочки = 	ДанныеФайла.Расширение;
	ПараметрыНовогоФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	ПараметрыНовогоФайла.Служебный = Истина;
	ПараметрыНовогоФайла.ВладелецФайлов = Заявка.Ссылка;
	ПараметрыНовогоФайла.ФайлОтвета = Истина;
			
	Попытка
		ФайлПослеПереноса = РаботаСФайлами.ДобавитьФайл(ПараметрыНовогоФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ВызватьИсключение;
	КонецПопытки;
		
	ФайлКУдалению = Заявка.УдалитьФайлОтвета.ПолучитьОбъект();
	ФайлКУдалению.ПометкаУдаления = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФайлКУдалению);
		
	ДокументКЭДО = Документы.ДокументКадровогоЭДО.СоздатьДокумент();
	ДокументКЭДО.ЭлектронныйДокумент 	= ФайлПослеПереноса;
	ДокументКЭДО.Дата					= Заявка.Дата;
	ДокументКЭДО.Организация 			= Заявка.Организация;
	ДокументКЭДО.КатегорияДокумента 	= Перечисления.КатегорииДокументовКадровогоЭДО.СправкаСотруднику;
	ДокументКЭДО.ОснованиеДокумента 	= Заявка.Ссылка;
	ДокументКЭДО.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияКабинетСотрудника", Заявка.ЗарегистрированаКПубликации);
	ДокументКЭДО.ВнешниеПодписанты.Добавить().ФизическоеЛицо = Заявка.ФизическоеЛицо;
		
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументКЭДО,, Истина);

	ЗаявкаОбъект = Заявка.Ссылка.ПолучитьОбъект();
	ЗаявкаОбъект.УдалитьФайлОтвета = Справочники.ФизическиеЛицаПрисоединенныеФайлы.ПустаяСсылка();
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаявкаОбъект);
	
КонецПроцедуры

#КонецОбласти

Процедура ПеренестиПрисоединенныеФайлыВложений(ПараметрыОбновления = Неопределено) Экспорт
	БизнесПроцессыЗаявокСотрудников.ПеренестиПрисоединенныеФайлыВложений("БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы",
																		 ПараметрыОбновления);	
КонецПроцедуры

Процедура ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	БизнесПроцессыЗаявокСотрудников.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников(
		"БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы",
		ПараметрыОбновления);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли