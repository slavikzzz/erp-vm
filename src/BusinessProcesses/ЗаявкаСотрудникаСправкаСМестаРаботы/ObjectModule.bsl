#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа.
//
// Параметры:
//   Таблица - см. УправлениеДоступом.ТаблицаНаборыЗначенийДоступа
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	ЗаполнитьНаборыЗначенийДоступаПоУмолчанию(Таблица);	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса.

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);	
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ФизическоеЛицо") Тогда
			Если ДанныеЗаполнения.Свойство("ВидСправки") И ЗначениеЗаполнено(ДанныеЗаполнения.ВидСправки) Тогда
				
				ПредставлениеСправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ВидСправки, "ПредставлениеСправки");
				ПредставлениеСправки = НРег(Лев(ПредставлениеСправки, 1)) + Прав(ПредставлениеСправки, СтрДлина(ПредставлениеСправки)-1);
				
				СтрокиНаименование = Новый Массив;
				СтрокиНаименование.Добавить(НСтр("ru = 'Справка';
												|en = 'Statement'"));
				СтрокиНаименование.Добавить(ПредставлениеСправки);
				СтрокиНаименование.Добавить(ДанныеЗаполнения.ФизическоеЛицо);
				Наименование = СтрСоединить(СтрокиНаименование, " "); 
				
			Иначе
				Наименование = СтрШаблон(НСтр("ru = 'Справка с места работы %1';
												|en = 'Statement of employment %1'"), Строка(ДанныеЗаполнения.ФизическоеЛицо));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ГруппаИсполнителейЗадач = ?(ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"),
		БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации),
		Исполнитель);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Предмет") <> Предмет Тогда
		ИзменитьПредметЗадач();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ДатаЗавершения = '00010101000000';	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута.

// Параметры:
// 	ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка.Задание
// 	ФормируемыеЗадачи - Массив из ЗадачаОбъект
// 	Отказ - Булево
// 
Процедура ВыполнитьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Записать();
	
	// Устанавливаем реквизиты адресации и доп. реквизиты для каждой задачи.
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Задача.РольИсполнителя = Исполнитель;
			Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
			Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
			Задача.Исполнитель = Неопределено;
		Иначе	
			Задача.Исполнитель = Исполнитель;
		КонецЕсли;
		Задача.Наименование = НаименованиеЗадачиДляВыполнения();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляВыполнения();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	Если Предмет = Неопределено Или Предмет.Пустая() Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	ОтправитьПочтовоеСообщение();
	ДатаЗавершения = БизнесПроцессыИЗадачиСервер.ДатаЗавершенияБизнесПроцесса(Ссылка);
	Выполнено = Истина;
	Записать();	
КонецПроцедуры

Процедура СогласоватьЗаявкуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
КонецПроцедуры

Процедура АвтоматическоеВыполнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Если ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлДляВыводаНаПринтер
			И ЗначениеЗаполнено(ВидСправки) Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда		
			МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			Результат = МодульСамообслуживаниеСотрудников.ФормироватьСправкуАвтоматически(ВидСправки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Результат = Ложь;
КонецПроцедуры

Процедура СформироватьСправкуОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	МодульСамообслуживаниеСотрудников = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.КадровыеДанные = "Организация,ВидСобытия";
	ПараметрыПолучения.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолучения.ОкончаниеПериода = Дата;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
	УстановитьПривилегированныйРежим(Ложь);
	КадровыеДанные.Индексы.Добавить("ФизическоеЛицо,Организация");
	
	Отбор = Новый Структура("ФизическоеЛицо,Организация", ФизическоеЛицо, Организация);
	НайденныеСтроки = КадровыеДанные.НайтиСтроки(Отбор);
		
	СотрудникиФизическогоЛица = Новый Массив;
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			Продолжить;
		КонецЕсли;
		СотрудникиФизическогоЛица.Добавить(СтрокаТЗ.Сотрудник);
	КонецЦикла;

	Если СотрудникиФизическогоЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияСправок = МодульСамообслуживаниеСотрудников.НовыеПараметрыПолученияСправок();
	СтрокаТаблицыПараметров = ПараметрыПолученияСправок.Добавить();
	СтрокаТаблицыПараметров.ИдентификаторЗапроса = ИдентификаторЗаявки;
	СтрокаТаблицыПараметров.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаТаблицыПараметров.Организация = Организация;
	СтрокаТаблицыПараметров.ВидСправки = ВидСправки;
	СтрокаТаблицыПараметров.ДатаАктуальности = Дата;
	ТабличныеДокументыСправок = 
			МодульСамообслуживаниеСотрудников.ПечатныеФормыПредоставляемыхСотрудникамСправок(ПараметрыПолученияСправок);
			
	ТабличныйДокументСправки = ТабличныеДокументыСправок.Найти(
		ИдентификаторЗаявки,
		"ИдентификаторЗапроса").Результат.ТабличныйДокумент;
		
	НачатьТранзакцию();
	Попытка
		
		Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
						
			ДанныеПечатнойФормы = КадровыйЭДОВызовСервера.ДобавитьПечатнуюФорму(
				ТабличныйДокументСправки,
				Ссылка,
				БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.ИдентификаторПечатнойФормы(),
				НСтр("ru = 'Справка с места работы';
					|en = 'Statement of employment'"),
				Организация,
				ФизическоеЛицо);
				
			ФайлОтветаПоЗаявке = ДанныеПечатнойФормы.ФайлОбъекта.ПолучитьОбъект();
			ФайлОтветаПоЗаявке.ФайлОтвета = Истина;
			ФайлОтветаПоЗаявке.Записать();
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечатнойФормы.ФайлОбъекта),
						Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
			
		Иначе
			
			Поток = Новый ПотокВПамяти();
			ТабличныйДокументСправки.Записать(Поток, КадровыйЭДОВызовСервера.ТипФайлаЭлектронногоДокумента());
			ДвоичныеДанные =  Поток.ЗакрытьИПолучитьДвоичныеДанные();
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание, ФайлОтвета");
			ПараметрыФайла.ВладелецФайлов = Ссылка;
			ПараметрыФайла.ИмяБезРасширения = НСтр("ru = 'Справка с места работы';
													|en = 'Statement of employment'");
			ПараметрыФайла.РасширениеБезТочки = "pdf";
			ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
			ПараметрыФайла.Служебный = Истина;
			ПараметрыФайла.ФайлОтвета = Истина;
			ПараметрыФайла.Описание = НСтр("ru = 'Приложение к заявке:';
											|en = 'Attachment to application:'") + " " + Строка(ЭтотОбъект);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			БизнесПроцессыЗаявокСотрудников.СоздатьИзменитьДокументКЭДОСправкаСотруднику(ПрисоединенныйФайл, Ссылка);
			
		КонецЕсли;
		
		СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заявка сотрудника справка с места работы.Ошибка формирования файла справки';
										|en = 'Employee request statement of employment. An error occurred while generating the statement file'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
		
КонецПроцедуры

Процедура СправкаПодготовленаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = (ФайлыОтвета().Количество() > 0);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает доступность действий в рамках заявки сотрудника
//	Параметры:
//		Действия - Массив из Строка - список действий для которых требуется получить доступность.
//		Форма - ФормаКлиентскогоПриложения, Неопределено - форма из которой требуется выполнить проверку. 
//	Возвращаемое значение:
//		Соответствие - соответствие действия и его доступности.
Функция ДоступностьДействий(Действия, Форма = Неопределено) Экспорт
	
	ДоступностьДействий = Новый Соответствие;
	
	ФайлСЭП = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП;
	ВБумажномВиде = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде;
	СканСПодписьюИПечатью = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.СканСПодписьюИПечатью;
	
	ДанныеДляПроверкиДоступности = НовыйДанныеДляПроверкиДоступности();
	ВидСправкиСотрудника = Неопределено;
	Если Форма = Неопределено Тогда
		
		ДанныеДляПроверкиДоступности.ЗадачаВыполнена = Выполнено;
		ДанныеДляПроверкиДоступности.ТребуетсяЭП = 
			(ВариантФормированияФайлаОтвета = ФайлСЭП);
		ДанныеДляПроверкиДоступности.ТребуетсяФайл = 
			(ВариантФормированияФайлаОтвета <> ВБумажномВиде);
		ДанныеДляПроверкиДоступности.ТребуетсяПечатать = 
			(ВариантФормированияФайлаОтвета = СканСПодписьюИПечатью)
			Или (ВариантФормированияФайлаОтвета = ВБумажномВиде);
		ФайлыОтвета = ФайлыОтвета();
		Если ФайлыОтвета.Количество() = 1 Тогда
			ДанныеДляПроверкиДоступности.ЕстьЭП = ФайлыОтвета[0].ПодписанЭП;
			ДанныеДляПроверкиДоступности.ЕстьФайл = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидСправки) Тогда
			ВидСправкиСотрудника = ВидСправки;
		КонецЕсли;
		
	Иначе
		
		ДанныеДляПроверкиДоступности.ЗадачаВыполнена = Форма.Объект.Выполнена;
		ДанныеДляПроверкиДоступности.ТребуетсяЭП = 
			(Форма.Задание.ВариантФормированияФайлаОтвета = ФайлСЭП);
		ДанныеДляПроверкиДоступности.ТребуетсяФайл = 
			(Форма.Задание.ВариантФормированияФайлаОтвета <> ВБумажномВиде);
		ДанныеДляПроверкиДоступности.ТребуетсяПечатать = 
			(Форма.Задание.ВариантФормированияФайлаОтвета = СканСПодписьюИПечатью)
			Или (Форма.Задание.ВариантФормированияФайлаОтвета = ВБумажномВиде);
		Если ЗначениеЗаполнено(Форма.ФайлОтвета) Тогда	
			ДанныеДляПроверкиДоступности.ЕстьЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ФайлОтвета, "ПодписанЭП");
			ДанныеДляПроверкиДоступности.ЕстьФайл = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидСправки) Тогда
			ВидСправкиСотрудника = ВидСправки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников")
		 И ЗначениеЗаполнено(ВидСправкиСотрудника) Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");  
		ВидСправкиВМассиве = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидСправкиСотрудника);
		ДанныеВидовСправок = МодульСамообслуживаниеСотрудников.ДанныеВидовСправокПредоставляемыхСотрудникам(ВидСправкиВМассиве);
		ДанныеДляПроверкиДоступности.МакетЗадан = ДанныеВидовСправок.Количество() > 0 И ДанныеВидовСправок[0].ЕстьМакет;
	КонецЕсли;
	
	Для Каждого Действие Из Действия Цикл
		ДоступностьДействия = Ложь;
		Если Действие = "Выполнено" Тогда
			РольИсполнителя = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗаявокПоТипамЗапросов()[ЭтотОбъект.Метаданные().Имя];
	       	ТребуетсяПодпись = БизнесПроцессыЗаявокСотрудников.ТребуетсяПодписьНаЭтапе(
				РольИсполнителя,
				ОсновнойОбъектАдресации,
				БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков.ПервыйЭтап());
			Если Форма <> Неопределено Или Не ТребуетсяПодпись Тогда
				ДоступностьДействия = ДоступноВыполнено(ДанныеДляПроверкиДоступности);			
			КонецЕсли;
		ИначеЕсли Действие = "Отказать" Тогда
			ДоступностьДействия = ДоступноОтказать(ДанныеДляПроверкиДоступности);
		ИначеЕсли Действие = "СформироватьФайл" Тогда
			ДоступностьДействия = ДоступноСформироватьФайл(ДанныеДляПроверкиДоступности);
		ИначеЕсли Действие = "ПодписатьЭП" Тогда
			ДоступностьДействия = ДоступноПодписатьЭП(ДанныеДляПроверкиДоступности);
		ИначеЕсли Действие = "ВыбратьФайл" Тогда	
		    ДоступностьДействия = ДоступноВыбратьФайл(ДанныеДляПроверкиДоступности);
		ИначеЕсли Действие = "Распечатать" Тогда
			ДоступностьДействия = ДоступноРаспечатать(ДанныеДляПроверкиДоступности);
		КонецЕсли;
		ДоступностьДействий.Вставить(Действие, ДоступностьДействия);
	КонецЦикла;
	
	Возврат ДоступностьДействий;
	
КонецФункции

Функция ДоступноВыполнение() Экспорт
	Возврат ДоступностьДействий(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Выполнено"))["Выполнено"];
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоступностьДействий

Функция НовыйДанныеДляПроверкиДоступности()
	
	ДанныеДляПроверкиДоступности = Новый Структура;
	ДанныеДляПроверкиДоступности.Вставить("ЗадачаВыполнена", 	Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ТребуетсяЭП",		Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ТребуетсяФайл",		Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ЕстьЭП",				Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ЕстьФайл",			Ложь);
	ДанныеДляПроверкиДоступности.Вставить("ТребуетсяПечатать",	Ложь);
	ДанныеДляПроверкиДоступности.Вставить("МакетЗадан",			Истина);
	
	Возврат ДанныеДляПроверкиДоступности;
	
КонецФункции

Функция ДоступноВыполнено(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат ((Данные.ТребуетсяЭП = Данные.ЕстьЭП) И (Данные.ТребуетсяФайл = Данные.ЕстьФайл));
	
КонецФункции

Функция ДоступноОтказать(Данные)
	Возврат Не Данные.ЗадачаВыполнена;	
КонецФункции

Функция ДоступноСформироватьФайл(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Данные.ТребуетсяФайл И Не Данные.ЕстьФайл И Не Данные.ТребуетсяПечатать И Данные.МакетЗадан;
	
КонецФункции

Функция ДоступноПодписатьЭП(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Данные.ТребуетсяЭП И Не Данные.ЕстьЭП И Данные.ЕстьФайл;
	
КонецФункции

Функция ДоступноВыбратьФайл(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Данные.ТребуетсяФайл И Не Данные.ЕстьФайл;
	
КонецФункции

Функция ДоступноРаспечатать(Данные)
	
	Если Данные.ЗадачаВыполнена Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Данные.ТребуетсяПечатать и Данные.МакетЗадан;
	
КонецФункции

#КонецОбласти

Процедура ИзменитьПредметЗадач()

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Ссылка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс");

		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект(); // ЗадачаОбъект
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.Предмет = Предмет;
			// Не выполняем предварительную блокировку данных для редактирования, т.к.
			// Это изменение имеет более высокий приоритет над открытыми формами задач.
			ЗадачаОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

Функция НаименованиеЗадачиДляВыполнения()
	Возврат Наименование;		
КонецФункции

Функция СрокИсполненияЗадачиДляВыполнения()
	Возврат СрокИсполнения;		
КонецФункции

Процедура ЗаполнитьНаборыЗначенийДоступаПоУмолчанию(Таблица)
	
	// Логика ограничения по умолчанию для
	// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
	// - изменения: Автор.
	
	// Если предмет не задан (т.е. бизнес-процесс без основания), тогда предмет не участвует в логике ограничения.
	
	// Чтение, Изменение: набор № 1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор № 2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
	
КонецПроцедуры

Процедура ОтправитьПочтовоеСообщение()
	БизнесПроцессыЗаявокСотрудников.ОтправитьПочтовоеСообщение(ЭтотОбъект,
															   НСтр("ru = 'Справка с места работы.';
																	|en = 'Statement of employment.'"),
															   ФайлыОтвета());													   
КонецПроцедуры

Функция ФайлыОтвета()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.Ссылка КАК Ссылка,
	               |	ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП
	               |ИЗ
	               |	Справочник.ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы КАК ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы
	               |ГДЕ
	               |	ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	               |	И ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ФайлОтвета = ИСТИНА
	               |	И ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли