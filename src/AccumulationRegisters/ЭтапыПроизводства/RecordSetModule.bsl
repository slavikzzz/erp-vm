//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	#Область РасчетИтоговГрафикаЭтаповПроизводства
	
	ИнициализироватьПорциюДанныхКРасчетуГрафика();
	
	УстановитьБлокировкиДанныхДляРасчетаГрафика();
	
	#КонецОбласти
	
	#Область ПодготовкаТаблицыИзменений
	
	Если ПроведениеДокументов.РассчитыватьИзменения(ДополнительныеСвойства) Тогда
		
		// Текущее состояние набора помещается во временную таблицу "ДвиженияЭтапыПроизводстваПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно текущего.
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("ЭтоНовый",    ДополнительныеСвойства.СвойстваДокумента.ЭтоНовый);
		
		Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Распоряжение               КАК Распоряжение,
		|	Т.КодСтрокиПродукция         КАК КодСтрокиПродукция,
		|	Т.КодСтрокиЭтапыГрафик       КАК КодСтрокиЭтапыГрафик,
		|	Т.Этап                       КАК Этап,
		|	Т.Подразделение              КАК Подразделение,
		|
		|	Т.ЗапланированоЗаказом       КАК ЗапланированоЗаказом,
		|	Т.ЗапланированоПроизводством КАК ЗапланированоПроизводством,
		|	Т.КВыполнению                КАК КВыполнению,
		|	Т.Выполнено                  КАК Выполнено,
		|	Т.Брак                       КАК Брак
		|
		|ПОМЕСТИТЬ ДвиженияЭтапыПроизводстваПередЗаписью
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства КАК Т
		|ГДЕ
		|	Т.Регистратор = &Регистратор
		|	И НЕ &ЭтоНовый";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область РасчетИтоговГрафикаЭтаповПроизводства
	
	ПараметрыРасчета = Новый Структура("ПоЗаказу, ТребуетсяПроверкаГрафика",
		ДополнительныеСвойства.ПоЗаказу, ДополнительныеСвойства.ТребуетсяПроверкаГрафика);
	
	РегистрыНакопления.ЭтапыПроизводства.РассчитатьИтогиРегистраГрафикЭтаповПроизводства(
		ПараметрыРасчета, ДополнительныеСвойства.ПорцияДанных);
	
	#КонецОбласти
	
	#Область ПодготовкаТаблицыИзменений
	
	Если ПроведениеДокументов.РассчитыватьИзменения(ДополнительныеСвойства) Тогда
		
		// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
		// и помещается во временную таблицу.
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		
		Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаИзменений.Распоряжение                      КАК Распоряжение,
		|	ТаблицаИзменений.КодСтрокиПродукция                КАК КодСтрокиПродукция,
		|	ТаблицаИзменений.КодСтрокиЭтапыГрафик              КАК КодСтрокиЭтапыГрафик,
		|	ТаблицаИзменений.Этап                              КАК Этап,
		|	ТаблицаИзменений.Подразделение                     КАК Подразделение,
		|
		|	СУММА(ТаблицаИзменений.ЗапланированоЗаказом)       КАК ЗапланированоЗаказомИзменение,
		|	СУММА(ТаблицаИзменений.ЗапланированоПроизводством) КАК ЗапланированоПроизводствомИзменение,
		|	СУММА(ТаблицаИзменений.КВыполнению)                КАК КВыполнениюИзменение,
		|	СУММА(ТаблицаИзменений.Выполнено)                  КАК ВыполненоИзменение,
		|	СУММА(ТаблицаИзменений.Брак)                       КАК БракИзменение
		|
		|ПОМЕСТИТЬ ДвиженияЭтапыПроизводстваИзменение
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Распоряжение               КАК Распоряжение,
		|		Т.КодСтрокиПродукция         КАК КодСтрокиПродукция,
		|		Т.КодСтрокиЭтапыГрафик       КАК КодСтрокиЭтапыГрафик,
		|		Т.Этап                       КАК Этап,
		|		Т.Подразделение              КАК Подразделение,
		|
		|		Т.ЗапланированоЗаказом       КАК ЗапланированоЗаказом,
		|		Т.ЗапланированоПроизводством КАК ЗапланированоПроизводством,
		|		Т.КВыполнению                КАК КВыполнению,
		|		Т.Выполнено                  КАК Выполнено,
		|		Т.Брак                       КАК Брак
		|	ИЗ
		|		ДвиженияЭтапыПроизводстваПередЗаписью КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Распоряжение                 КАК Распоряжение,
		|		Т.КодСтрокиПродукция           КАК КодСтрокиПродукция,
		|		Т.КодСтрокиЭтапыГрафик         КАК КодСтрокиЭтапыГрафик,
		|		Т.Этап                         КАК Этап,
		|		Т.Подразделение                КАК Подразделение,
		|
		|		- Т.ЗапланированоЗаказом       КАК ЗапланированоЗаказом,
		|		- Т.ЗапланированоПроизводством КАК ЗапланированоПроизводством,
		|		- Т.КВыполнению                КАК КВыполнению,
		|		- Т.Выполнено                  КАК Выполнено,
		|		- Т.Брак                       КАК Брак
		|	ИЗ
		|		РегистрНакопления.ЭтапыПроизводства КАК Т
		|	ГДЕ
		|		Т.Регистратор = &Регистратор) КАК ТаблицаИзменений
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИзменений.Распоряжение,
		|	ТаблицаИзменений.КодСтрокиПродукция,
		|	ТаблицаИзменений.КодСтрокиЭтапыГрафик,
		|	ТаблицаИзменений.Этап,
		|	ТаблицаИзменений.Подразделение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаИзменений.ЗапланированоЗаказом) <> 0
		|		ИЛИ СУММА(ТаблицаИзменений.ЗапланированоПроизводством)
		|				+ СУММА(ТаблицаИзменений.КВыполнению)
		|				+ СУММА(ТаблицаИзменений.Выполнено)
		|				+ СУММА(ТаблицаИзменений.Брак) <> 0
		|;
		|УНИЧТОЖИТЬ ДвиженияЭтапыПроизводстваПередЗаписью
		|";
		
		Выборка = Запрос.ВыполнитьПакет()[0].Выбрать();
		ПроведениеДокументов.ЗарегистрироватьТаблицуКонтроля(ДополнительныеСвойства,
			"ДвиженияЭтапыПроизводстваИзменение", Выборка.Следующий() И Выборка.Количество > 0);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьПорциюДанныхКРасчетуГрафика()
	
	ПоЗаказу = ТипЗнч(Отбор.Регистратор.Значение) = Тип("ДокументСсылка.ЗаказНаПроизводство");
	
	Если ПоЗаказу Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Распоряжение КАК Распоряжение
			|ИЗ
			|	РегистрНакопления.ЭтапыПроизводства КАК Таблица
			|ГДЕ
			|	Таблица.Регистратор = &Регистратор");
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		
		ПорцияДанных = Запрос.Выполнить().Выгрузить();
		ПорцияДанных.Индексы.Добавить("Распоряжение");
		
		ПараметрыОтбора = Новый Структура("Распоряжение");
		
		ТаблицаНовыхРаспоряжений = ЭтотОбъект.Выгрузить(, "Распоряжение");
		ТаблицаНовыхРаспоряжений.Свернуть("Распоряжение");
		
		Для Каждого Запись Из ТаблицаНовыхРаспоряжений Цикл
			
			ПараметрыОтбора.Распоряжение = Запись.Распоряжение;
			
			Если ПорцияДанных.НайтиСтроки(ПараметрыОтбора).ВГраница() = -1 Тогда
				
				ПорцияДанных.Добавить().Распоряжение = Запись.Распоряжение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
	
		КлючСвязи = "Распоряжение, КодСтрокиПродукция, КодСтрокиЭтапыГрафик";
		
		ПараметрыОтбора = Новый Структура(КлючСвязи);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Распоряжение         КАК Распоряжение,
			|	Таблица.КодСтрокиПродукция   КАК КодСтрокиПродукция,
			|	Таблица.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
			|ИЗ
			|	РегистрНакопления.ЭтапыПроизводства КАК Таблица
			|ГДЕ
			|	Таблица.Регистратор = &Регистратор");
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		
		ПорцияДанных = Запрос.Выполнить().Выгрузить();
		ПорцияДанных.Индексы.Добавить(КлючСвязи);
		
		Для Каждого Запись Из ЭтотОбъект Цикл
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Запись, КлючСвязи);
			
			Если ПорцияДанных.НайтиСтроки(ПараметрыОтбора).ВГраница() = -1 Тогда
				
				ЗаполнитьЗначенияСвойств(ПорцияДанных.Добавить(), Запись, КлючСвязи);
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПоЗаказу", ПоЗаказу);
	ДополнительныеСвойства.Вставить("ПорцияДанных", ПорцияДанных);
	
	Если НЕ ДополнительныеСвойства.Свойство("ТребуетсяПроверкаГрафика") Тогда
		ДополнительныеСвойства.Вставить("ТребуетсяПроверкаГрафика", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировкиДанныхДляРасчетаГрафика()

	Блокировка = Новый БлокировкаДанных;
	
	// Блокировка регистра для подсчета остатков по распоряжениям.
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЭтапыПроизводства");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ПорцияДанных;
	
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Распоряжение", "Распоряжение");
	
	Блокировка.Заблокировать();

КонецПроцедуры

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21