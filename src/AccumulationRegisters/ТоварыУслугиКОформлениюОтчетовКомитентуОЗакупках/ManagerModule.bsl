#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках);
		
	КонецЕсли;
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках);
	КонецЕсли;
			
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках");
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	ЕстьИзмененияДвиженийКОформлению = ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ,
		"ДвиженияТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках");

	Если ЕстьИзмененияДвиженийКОформлению Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Организация          КАК Организация,
			|	ТаблицаОстатков.Назначение          КАК Назначение,
			|	ТаблицаОстатков.Номенклатура        КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика      КАК Характеристика,
			|	ТаблицаОстатков.НомерГТД       КАК НомерГТД,
			|	ТаблицаОстатков.КоличествоОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.Остатки(,
			|			(Организация, Назначение, Номенклатура, Характеристика, НомерГТД) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Назначение,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.НомерГТД
			|				ИЗ
			|					ДвиженияТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках КАК Таблица)
			|	) КАК ТаблицаОстатков
			|
			|ГДЕ
			|	ТаблицаОстатков.КоличествоОстаток < 0";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиКОформлениюОтчетовКомитентуОЗакупках");

	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1 %2
			|Превышено количество по товарам и услугам к оформлению отчета комитента о закупках на %3 %4';
			|en = 'Items %1 %2
			|The number of goods and services to register the purchasing report to consignor is exceeded by %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиКОформлениюОтчетовКомитентуОЗакупках Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика);
			Назначение = ?(ЗначениеЗаполнено(СтрокаОшибки.Назначение), "(" + Строка(СтрокаОшибки.Назначение) + ")", "");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеНоменклатуры, Назначение,
				-СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			
			Если Не Документ.ДополнительныеСвойства.Свойство("ОтключитьКонтрольТоваровКОформлениюОтчетовКомитентуОЗакупках") Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ДвиженияТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках", 
		РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.Имя;
	ИмяТаблицыИзменений = "ДвиженияТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ НЕ УТ

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ПутьКДаннымВалюта = "Валюта";
	ПараметрыОтражения.РесурсыУпр.Добавить("0");
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("0");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаРегл");
	ПараметрыОтражения.РесурсыВал.Добавить("СуммаСНДС");
	ПараметрыОтражения.РесурсыКоличество.Добавить("Количество");
	ПараметрыОтражения.ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Номенклатура;
	ПараметрыОтражения.СтруктураАналитики = ОбщегоНазначения.СкопироватьРекурсивно(
		ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(ПараметрыОтражения.ТипДанныхУчета));
	ПараметрыОтражения.СтруктураАналитики.Номенклатура.ПутьКДанным = "Номенклатура";
	ПараметрыОтражения.СтруктураАналитики.Склад.Вставить("Значение", Неопределено);
	ПараметрыОтражения.СтруктураАналитики.ВидЗапасов.Вставить("Значение", Неопределено);
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	//++ НЕ УТКА
	МеждународныйУчетПоДаннымФинансовыхРегистров.ИспользоватьНомерСтрокиКакИдентификаторСтроки(ПараметрыОтражения);
	//-- НЕ УТКА
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли

