#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура ЗаполнитьОрганизацию(ПараметрыОбновления = Неопределено) Экспорт
	
	Пока Истина Цикл
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ВыполненныеРаботыСотрудников.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.УдалитьВыполненныеРаботыСотрудников КАК ВыполненныеРаботыСотрудников
		|ГДЕ
		|	ВыполненныеРаботыСотрудников.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
			Возврат;
		Иначе
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		КонецЕсли;
		
		Регистраторы = Результат.Выгрузить().ВыгрузитьКолонку("Регистратор");
		ОрганизацииДокументов = ОбщегоНазначенияБЗК.ЗначениеРеквизитаОбъектов(Регистраторы, "Организация");
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВыполненныеРаботыСотрудников.Период КАК Период,
			|	ВыполненныеРаботыСотрудников.Регистратор КАК Регистратор,
			|	ВыполненныеРаботыСотрудников.НомерСтроки КАК НомерСтроки,
			|	ВыполненныеРаботыСотрудников.Активность КАК Активность,
			|	ВыполненныеРаботыСотрудников.Сотрудник КАК Сотрудник,
			|	ВыполненныеРаботыСотрудников.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВыполненныеРаботыСотрудников.ВидРабот КАК ВидРабот,
			|	ВыполненныеРаботыСотрудников.ОбъемВыполненныхРабот КАК ОбъемВыполненныхРабот,
			|	ВыполненныеРаботыСотрудников.Сторно КАК Сторно,
			|	ВыполненныеРаботыСотрудников.Организация КАК Организация
			|ИЗ
			|	РегистрНакопления.УдалитьВыполненныеРаботыСотрудников КАК ВыполненныеРаботыСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
			|		ПО ВыполненныеРаботыСотрудников.Регистратор = ВТРегистраторы.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВыполненныеРаботыСотрудников.Регистратор";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.УдалитьВыполненныеРаботыСотрудников.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыНакопления.УдалитьВыполненныеРаботыСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Организация = ОрганизацииДокументов[Выборка.Регистратор];
				Если Не ЗначениеЗаполнено(НоваяСтрока.Организация) Тогда
					НоваяСтрока.Организация = Выборка.ГоловнаяОрганизация;
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЦикла;
		Если ПараметрыОбновления <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли