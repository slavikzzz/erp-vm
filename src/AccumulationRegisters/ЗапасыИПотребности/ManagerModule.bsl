#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Склад)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Запрос - Запрос -
//  ИмяТаблицы - Строка - 
//  Заказы - Массив Из ОпределяемыйТип.ОжидаемаяОтгрузкаИлиПоступление
//  ПодключаемыйНабор - РегистрНакопленияНаборЗаписей.ЗапасыИПотребности - набор, из которого нужно взять незаписанные
//                                                                          в базу движения
// Возвращаемое значение:
//  Соответствие Из Структура:
//   * ЕстьИзмененияПоЗаказу- Булево
//   * ЕстьИзмененияПоСлужебномуРегистратору - Булево
Функция РассчитатьГрафикПоЗаказамВоВременнуюТаблицу(Запрос, ИмяТаблицы, Заказы, ПодключаемыйНабор = Неопределено) Экспорт
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Неопределено);
	
	ТекстДвижений =
		"ВЫБРАТЬ
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.Поступит КАК Поступит,
		|	Движения.Заказано КАК Заказано,
		|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	Движения.КОбеспечению КАК КОбеспечению,
		|	Движения.НеОбеспечивать КАК НеОбеспечивать,
		|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности КАК Движения
		|ГДЕ
		|	Движения.Заказ В(&Заказы)
		|		И НЕ Движения.Регистратор = &ИсключаемыйРегистратор
		|		И Движения.Активность
		|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)";
	
	Если ПодключаемыйНабор <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ПодключаемыйНабор", ПодключаемыйНабор.Выгрузить());
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ПодключаемыйНабор.Отбор.Регистратор.Значение);
		
		Тексты = Новый Массив();
		Тексты.Добавить(ТекстДвижений);
		Текст =
			"ВЫБРАТЬ
			|	Набор.Период КАК Период,
			|	Набор.ВидДвижения КАК ВидДвижения,
			|	Набор.Номенклатура КАК Номенклатура,
			|	Набор.Характеристика КАК Характеристика,
			|	Набор.Склад КАК Склад,
			|	Набор.Назначение КАК Назначение,
			|	Набор.Заказ КАК Заказ,
			|	Набор.ДатаСобытия КАК ДатаСобытия,
			|	Набор.Поступит КАК Поступит,
			|	Набор.Заказано КАК Заказано,
			|	Набор.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Набор.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Набор.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Набор.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Набор.КОбеспечению КАК КОбеспечению,
			|	Набор.НеОбеспечивать КАК НеОбеспечивать,
			|	Набор.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|ИЗ
			|	ПодключаемыйНабор КАК Набор";
		
		Тексты.Добавить(Текст);
		ТекстДвижений = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
		ТекстВременнойТаблицы =
			"ВЫБРАТЬ
			|	Набор.Период КАК Период,
			|	Набор.ВидДвижения КАК ВидДвижения,
			|	Набор.Номенклатура КАК Номенклатура,
			|	Набор.Характеристика КАК Характеристика,
			|	Набор.Склад КАК Склад,
			|	Набор.Назначение КАК Назначение,
			|	Набор.Заказ КАК Заказ,
			|	Набор.ДатаСобытия КАК ДатаСобытия,
			|	Набор.Поступит КАК Поступит,
			|	Набор.Заказано КАК Заказано,
			|	Набор.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Набор.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Набор.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Набор.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Набор.КОбеспечению КАК КОбеспечению,
			|	Набор.НеОбеспечивать КАК НеОбеспечивать,
			|	Набор.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|ПОМЕСТИТЬ ПодключаемыйНабор
			|ИЗ
			|	&ПодключаемыйНабор КАК Набор
			|ГДЕ
			|	Набор.Заказ В(&Заказы)
			|		И Набор.Активность
			|		И Набор.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)";
		
	КонецЕсли;
	
	ТекстДвижений = СтрШаблон("(%1)", ТекстДвижений);
	Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Движения.Период) КАК Период,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.Поступит
		|				ИНАЧЕ - Движения.Поступит
		|			КОНЕЦ) КАК Поступит,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.Заказано
		|				ИНАЧЕ - Движения.Заказано
		|			КОНЕЦ) КАК Заказано,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.ЗакрытьГрафикПоступления
		|				ИНАЧЕ - Движения.ЗакрытьГрафикПоступления
		|			КОНЕЦ) КАК ЗакрытьГрафикПоступления,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.РезервироватьНаСкладе
		|				ИНАЧЕ - Движения.РезервироватьНаСкладе
		|			КОНЕЦ) КАК РезервироватьНаСкладе,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.РезервироватьПоМереПоступления
		|				ИНАЧЕ - Движения.РезервироватьПоМереПоступления
		|			КОНЕЦ) КАК РезервироватьПоМереПоступления,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.ОтложитьРезервирование
		|				ИНАЧЕ - Движения.ОтложитьРезервирование
		|			КОНЕЦ) КАК ОтложитьРезервирование,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.КОбеспечению
		|				ИНАЧЕ - Движения.КОбеспечению
		|			КОНЕЦ) КАК КОбеспечению,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.НеОбеспечивать
		|				ИНАЧЕ - Движения.НеОбеспечивать
		|			КОНЕЦ) КАК НеОбеспечивать,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.ЗакрытьГрафикОтгрузки
		|				ИНАЧЕ - Движения.ЗакрытьГрафикОтгрузки
		|			КОНЕЦ) КАК ЗакрытьГрафикОтгрузки
		|ПОМЕСТИТЬ ОборотыГрафика
		|ИЗ
		|	НаборПереопределяемый КАК Движения
		|СГРУППИРОВАТЬ ПО
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Склад,
		|	Движения.Назначение,
		|	Движения.Заказ,
		|	Движения.ДатаСобытия
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, Заказ
		|;
		|ВЫБРАТЬ
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	СУММА(Движения.ЗакрытьГрафикПоступления) КАК ЗакрытьГрафикПоступления,
		|	СУММА(Движения.ЗакрытьГрафикОтгрузки) КАК ЗакрытьГрафикОтгрузки
		|ПОМЕСТИТЬ ОстаткиГрафика
		|ИЗ
		|	ОборотыГрафика КАК Движения
		|СГРУППИРОВАТЬ ПО
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Склад,
		|	Движения.Назначение,
		|	Движения.Заказ
		|ИМЕЮЩИЕ
		|	СУММА(Движения.ЗакрытьГрафикПоступления) > 0
		|		ИЛИ СУММА(Движения.ЗакрытьГрафикОтгрузки) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, Заказ
		|;
		|ВЫБРАТЬ
		|	ОборотыГрафика.Период КАК Период,
		|	ОстаткиГрафика.Номенклатура КАК Номенклатура,
		|	ОстаткиГрафика.Характеристика КАК Характеристика,
		|	ОстаткиГрафика.Склад КАК Склад,
		|	ОстаткиГрафика.Назначение КАК Назначение,
		|	ОстаткиГрафика.Заказ КАК Заказ,
		|	ОборотыГрафика.ДатаСобытия КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1) И ОборотыГрафика.Заказано > 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПорядокДляОжидаемыхПоступлений,
		|	ОстаткиГрафика.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	ОстаткиГрафика.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.Поступит < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.Поступит
		|	КОНЕЦ КАК Поступит,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.Заказано < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.Заказано
		|	КОНЕЦ КАК Заказано,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.РезервироватьНаСкладе < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.РезервироватьНаСкладе
		|	КОНЕЦ КАК РезервироватьНаСкладе,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.РезервироватьПоМереПоступления < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.РезервироватьПоМереПоступления
		|	КОНЕЦ КАК РезервироватьПоМереПоступления,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.ОтложитьРезервирование < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.ОтложитьРезервирование
		|	КОНЕЦ КАК ОтложитьРезервирование,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.КОбеспечению < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.КОбеспечению
		|	КОНЕЦ КАК КОбеспечению,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.НеОбеспечивать < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.НеОбеспечивать
		|	КОНЕЦ КАК НеОбеспечивать
		|ИЗ
		|	ОстаткиГрафика КАК ОстаткиГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыГрафика КАК ОборотыГрафика
		|		ПО ОборотыГрафика.Номенклатура = ОстаткиГрафика.Номенклатура
		|		 И ОборотыГрафика.Характеристика = ОстаткиГрафика.Характеристика
		|		 И ОборотыГрафика.Склад = ОстаткиГрафика.Склад
		|		 И ОборотыГрафика.Назначение = ОстаткиГрафика.Назначение
		|		 И ОборотыГрафика.Заказ = ОстаткиГрафика.Заказ
		|		 И (ОборотыГрафика.Поступит > 0
		|			ИЛИ ОборотыГрафика.Заказано > 0
		|			ИЛИ ОборотыГрафика.РезервироватьНаСкладе > 0
		|			ИЛИ ОборотыГрафика.РезервироватьПоМереПоступления > 0
		|			ИЛИ ОборотыГрафика.ОтложитьРезервирование > 0
		|			ИЛИ ОборотыГрафика.КОбеспечению > 0
		|			ИЛИ ОборотыГрафика.НеОбеспечивать > 0)
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение,
		|	Заказ,
		|	ПорядокДляОжидаемыхПоступлений,
		|	ДатаСобытия,
		|	Период,
		|	Поступит УБЫВ,
		|	РезервироватьНаСкладе УБЫВ,
		|	РезервироватьПоМереПоступления УБЫВ,
		|	ОтложитьРезервирование УБЫВ,
		|	КОбеспечению УБЫВ";
	
	Текст = СтрЗаменить(Текст, "НаборПереопределяемый", ТекстДвижений);
	Если ПодключаемыйНабор <> Неопределено Тогда
		
		Тексты = Новый Массив();
		Тексты.Добавить(ТекстВременнойТаблицы);
		Тексты.Добавить(Текст);
		Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	КонецЕсли;
	Запрос.Текст = Текст;
	
	График = Запрос.Выполнить().Выгрузить(); // ТаблицаЗначений -
	График.Колонки.Добавить("ЕстьГрафик", Новый ОписаниеТипов("Булево"));
	График.Колонки.Добавить("Регистратор", Метаданные.РегистрыНакопления.ЗапасыИПотребности.СтандартныеРеквизиты.Регистратор.Тип);
	
	Номенклатура = Неопределено;
	Характеристика = Неопределено;
	Склад = Неопределено;
	Назначение = Неопределено;
	Заказ = Неопределено;
	
	Расчеты = Новый Соответствие();
	Регистраторы = Документы.РегистраторЗапасыИПотребности.РегистраторыПоРаспоряжениям(Заказы);
	Для Индекс = 0 По График.Количество() - 1 Цикл
		
		ТекСтрока = График[Индекс];
		Если ТекСтрока.Номенклатура <> Номенклатура
				Или ТекСтрока.Характеристика <> Характеристика
				Или ТекСтрока.Склад <> Склад
				Или ТекСтрока.Назначение <> Назначение
				Или ТекСтрока.Заказ <> Заказ Тогда
				
				Номенклатура = ТекСтрока.Номенклатура;
				Характеристика = ТекСтрока.Характеристика;
				Склад = ТекСтрока.Склад;
				Назначение = ТекСтрока.Назначение;
				Заказ = ТекСтрока.Заказ;
				ЗакрытьГрафикПоступленияПоступит = ТекСтрока.ЗакрытьГрафикПоступления;
				ЗакрытьГрафикПоступленияЗаказано = ТекСтрока.ЗакрытьГрафикПоступления;
				ЗакрытьГрафикОтгрузки = ТекСтрока.ЗакрытьГрафикОтгрузки;
		КонецЕсли;
		
		Поступит = Мин(ТекСтрока.Поступит, ЗакрытьГрафикПоступленияПоступит);
		ЗакрытьГрафикПоступленияПоступит = ЗакрытьГрафикПоступленияПоступит - Поступит;
		ТекСтрока.Поступит = -Поступит;
		
		Заказано = Мин(ТекСтрока.Заказано, ЗакрытьГрафикПоступленияЗаказано);
		ЗакрытьГрафикПоступленияЗаказано = ЗакрытьГрафикПоступленияЗаказано - Заказано;
		ТекСтрока.Заказано = -Заказано;
		
		Потребность = Мин(ТекСтрока.РезервироватьНаСкладе, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.РезервироватьНаСкладе = -Потребность;
		
		Потребность = Мин(ТекСтрока.РезервироватьПоМереПоступления, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.РезервироватьПоМереПоступления = -Потребность;
		
		Потребность = Мин(ТекСтрока.ОтложитьРезервирование, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.ОтложитьРезервирование = -Потребность;
		
		Потребность = Мин(ТекСтрока.КОбеспечению, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.КОбеспечению = -Потребность;
		
		Потребность = Мин(ТекСтрока.НеОбеспечивать, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.НеОбеспечивать = -Потребность;
		
		ТекСтрока.Регистратор = Регистраторы.Получить(ТекСтрока.Заказ);
		ЕстьИзмененияПоСлужебномуРегистратору = Ложь;
		ЕстьИзмененияПоЗаказу = ТекСтрока.РезервироватьНаСкладе < 0
			Или ТекСтрока.РезервироватьПоМереПоступления < 0 Или ТекСтрока.ОтложитьРезервирование < 0
			Или ТекСтрока.КОбеспечению < 0 Или ТекСтрока.НеОбеспечивать < 0;
			
		Если ТекСтрока.Поступит < 0 Или ТекСтрока.Заказано < 0 Тогда
			Если ТекСтрока.Регистратор = ТекСтрока.Заказ Тогда
				ЕстьИзмененияПоЗаказу = Истина;
			Иначе
				ЕстьИзмененияПоСлужебномуРегистратору = Истина;
			КонецЕсли;
		КонецЕсли;
		ТекСтрока.ЕстьГрафик = ЕстьИзмененияПоСлужебномуРегистратору Или ЕстьИзмененияПоЗаказу;
		
		Если ТекСтрока.ЕстьГрафик И Расчеты.Получить(ТекСтрока.Заказ) = Неопределено Тогда
			Расчет = Новый Структура();
			Расчет.Вставить("ЕстьИзмененияПоЗаказу", ЕстьИзмененияПоЗаказу);
			Расчет.Вставить("ЕстьИзмененияПоСлужебномуРегистратору", ЕстьИзмененияПоСлужебномуРегистратору);
			Расчет.Вставить("Регистратор", Регистраторы.Получить(Заказ));
			Расчеты.Вставить(ТекСтрока.Заказ, Расчет);
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого Заказ Из Заказы Цикл
		Если Расчеты.Получить(Заказ) = Неопределено Тогда
			Расчет = Новый Структура();
			Расчет.Вставить("ЕстьИзмененияПоЗаказу", Регистраторы.Получить(Заказ) = Заказ);
			Расчет.Вставить("ЕстьИзмененияПоСлужебномуРегистратору", Регистраторы.Получить(Заказ) <> Заказ);
			Расчет.Вставить("Регистратор", Регистраторы.Получить(Заказ));
			Расчеты.Вставить(Заказ, Расчет);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ТаблицаГрафикПоступления", График.Скопировать(Новый Структура("ЕстьГрафик", Истина)));
	
	Текст =
		"ВЫБРАТЬ
		|	График.Регистратор КАК Регистратор,
		|	График.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ИСТИНА КАК Активность,
		|	График.Номенклатура КАК Номенклатура,
		|	График.Характеристика КАК Характеристика,
		|	График.Склад КАК Склад,
		|	График.Назначение КАК Назначение,
		|	График.Заказ КАК Заказ,
		|	График.ДатаСобытия КАК ДатаСобытия,
		|	0 КАК ВНаличии,
		|	График.Поступит КАК Поступит,
		|	График.Заказано КАК Заказано,
		|	График.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	График.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	График.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	График.КОбеспечению КАК КОбеспечению,
		|	График.НеОбеспечивать КАК НеОбеспечивать,
		|	0 КАК ЗакрытьГрафикПоступления,
		|	0 КАК ЗакрытьГрафикОтгрузки,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.РасчетГрафика) КАК ТипЗаписи,
		|	ЛОЖЬ КАК Сторно
		|ПОМЕСТИТЬ ТаблицаПереопределяемый
		|ИЗ
		|	&ТаблицаГрафикПоступления КАК График";
	Запрос.Текст = СтрЗаменить(Текст, "ТаблицаПереопределяемый", ИмяТаблицы);
	Запрос.Выполнить();
	
	Возврат Расчеты;
	
КонецФункции

// Параметры:
//  Запрос - Запрос -
//  Расчеты - См. РегистрыНакопления.ЗапасыИПотребности.РассчитатьГрафикПоЗаказамВоВременнуюТаблицу
Процедура ЗаписатьРезультатРасчетаГрафика(Запрос, Расчеты) Экспорт

	НаборЗаписейГрафик = СоздатьНаборЗаписей();
	НаборЗаписейГрафик.ОбменДанными.Загрузка = Истина;
	Для Каждого Расчет Из Расчеты Цикл
		
		Заказ = Расчет.Ключ;
		ЕстьИзмененияПоЗаказу = Расчет.Значение.ЕстьИзмененияПоЗаказу;
		ЕстьИзмененияПоСлужебномуРегистратору = Расчет.Значение.ЕстьИзмененияПоСлужебномуРегистратору;
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоЗаказу", ЕстьИзмененияПоЗаказу);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоСлужебномуРегистратору", ЕстьИзмененияПоСлужебномуРегистратору);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Движения.Регистратор КАК Регистратор,
			|	Движения.Период КАК Период,
			|	Движения.ВидДвижения КАК ВидДвижения,
			|	Движения.Активность КАК Активность,
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад,
			|	Движения.Назначение КАК Назначение,
			|	Движения.Заказ КАК Заказ,
			|	Движения.ДатаСобытия КАК ДатаСобытия,
			|	Движения.ВНаличии КАК ВНаличии,
			|	Движения.Поступит КАК Поступит,
			|	Движения.Заказано КАК Заказано,
			|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Движения.КОбеспечению КАК КОбеспечению,
			|	Движения.НеОбеспечивать КАК НеОбеспечивать,
			|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	Движения.ОтгружаемыйЗаказ КАК ОтгружаемыйЗаказ,
			|	Движения.ТипЗаписи КАК ТипЗаписи,
			|	Движения.Сторно КАК Сторно
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И Движения.Регистратор = &Заказ
			|		И Движения.ТипЗаписи В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РезультатыРасчета.Заказ КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	НЕОПРЕДЕЛЕНО КАК ОтгружаемыйЗаказ,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор = &Заказ
			|;
			|
			|///////////////////////////////////////////
			|ВЫБРАТЬ
			|	РезультатыРасчета.Регистратор КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	НЕОПРЕДЕЛЕНО КАК ОтгружаемыйЗаказ,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоСлужебномуРегистратору
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор <> &Заказ";
			
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		Если ЕстьИзмененияПоЗаказу И ЗначениеЗаполнено(Расчет.Значение.Регистратор) Тогда
			Таблица = ПакетРезультатов[0].Выгрузить();
			НаборЗаписейГрафик.Отбор.Регистратор.Установить(Расчет.Значение.Регистратор);
			НаборЗаписейГрафик.Загрузить(Таблица);
			НаборЗаписейГрафик.Записать();
		КонецЕсли;
		Если ЕстьИзмененияПоСлужебномуРегистратору Тогда
			Таблица = ПакетРезультатов[1].Выгрузить();
			НаборЗаписейГрафик.Отбор.Регистратор.Установить(Расчет.Значение.Регистратор);
			НаборЗаписейГрафик.Загрузить(Таблица);
			НаборЗаписейГрафик.Записать();
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

// Параметры:
//  Набор - РегистрНакопленияНаборЗаписей.ЗапасыИПотребности -
Процедура ДополнитьНаборЗаписямиОтложенногоОбеспечения(Набор) Экспорт
	
	Если Набор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаТоваров", Набор.Выгрузить());
	Запрос.УстановитьПараметр("Регистратор", Набор[0].Регистратор);
	
	Тексты = Новый Массив();
	Текст =
		"ВЫБРАТЬ
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.ВНаличии КАК ВНаличии,
		|	Движения.Поступит КАК Поступит,
		|	Движения.Заказано КАК Заказано,
		|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	Движения.КОбеспечению КАК КОбеспечению,
		|	Движения.НеОбеспечивать КАК НеОбеспечивать,
		|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
		|ПОМЕСТИТЬ ДвиженияПриЗаписи
		|ИЗ
		|	&ТаблицаТоваров КАК Движения";
	Тексты.Добавить(Текст);
	
	Если Набор.ДополнительныеСвойства.Свойство("АктуализацияОтложенногоОбеспечения") Тогда
		Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ПОМЕСТИТЬ ТребуетсяПересчет";
	Иначе
		Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ПОМЕСТИТЬ ТребуетсяПересчет
			|ИЗ(
			|	ВЫБРАТЬ
			|		Движения.Регистратор КАК Регистратор,
			|		Движения.Период КАК Период,
			|		Движения.ВидДвижения КАК ВидДвижения,
			|		Движения.Номенклатура КАК Номенклатура,
			|		Движения.Характеристика КАК Характеристика,
			|		Движения.Склад КАК Склад,
			|		Движения.Назначение КАК Назначение,
			|		Движения.Заказ КАК Заказ,
			|		Движения.ДатаСобытия КАК ДатаСобытия,
			|		Движения.ВНаличии КАК ВНаличии,
			|		Движения.Поступит КАК Поступит,
			|		Движения.Заказано КАК Заказано,
			|		Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|		Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|		Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|		Движения.КОбеспечению КАК КОбеспечению,
			|		Движения.НеОбеспечивать КАК НеОбеспечивать,
			|		Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|		Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|	ИЗ
			|		ДвиженияПриЗаписи КАК Движения
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Движения.Регистратор КАК Регистратор,
			|		Движения.Период КАК Период,
			|		Движения.ВидДвижения КАК ВидДвижения,
			|		Движения.Номенклатура КАК Номенклатура,
			|		Движения.Характеристика КАК Характеристика,
			|		Движения.Склад КАК Склад,
			|		Движения.Назначение КАК Назначение,
			|		Движения.Заказ КАК Заказ,
			|		Движения.ДатаСобытия КАК ДатаСобытия,
			|		-Движения.ВНаличии КАК ВНаличии,
			|		-Движения.Поступит КАК Поступит,
			|		-Движения.Заказано КАК Заказано,
			|		-Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|		-Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|		-Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|		-Движения.КОбеспечению КАК КОбеспечению,
			|		-Движения.НеОбеспечивать КАК НеОбеспечивать,
			|		-Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|		-Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|	ИЗ
			|		РегистрНакопления.ЗапасыИПотребности КАК Движения
			|	ГДЕ
			|		Движения.Регистратор = &Регистратор
			|			И Движения.Активность
			|			И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)) КАК Изменения
			|СГРУППИРОВАТЬ ПО
			|	Изменения.Регистратор,
			|	Изменения.Период,
			|	Изменения.ВидДвижения,
			|	Изменения.Номенклатура,
			|	Изменения.Характеристика,
			|	Изменения.Склад,
			|	Изменения.Назначение,
			|	Изменения.Заказ,
			|	Изменения.ДатаСобытия
			|ИМЕЮЩИЕ
			|	СУММА(Изменения.ВНаличии) <> 0
			|		ИЛИ СУММА(Изменения.Поступит) <> 0
			|		ИЛИ СУММА(Изменения.Заказано) <> 0
			|		ИЛИ СУММА(Изменения.РезервироватьНаСкладе) <> 0
			|		ИЛИ СУММА(Изменения.РезервироватьПоМереПоступления) <> 0
			|		ИЛИ СУММА(Изменения.ОтложитьРезервирование) <> 0
			|		ИЛИ СУММА(Изменения.КОбеспечению) <> 0
			|		ИЛИ СУММА(Изменения.НеОбеспечивать) <> 0
			|		ИЛИ СУММА(Изменения.ЗакрытьГрафикПоступления) <> 0
			|		ИЛИ СУММА(Изменения.ЗакрытьГрафикОтгрузки) <> 0";
	КонецЕсли;
	Тексты.Добавить(Текст);
	
	Текст =
		"ВЫБРАТЬ
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления
		|ПОМЕСТИТЬ Строки
		|ИЗ
		|	ДвиженияПриЗаписи КАК Движения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТребуетсяПересчет КАК ТребуетсяПересчет
		|		ПО ТребуетсяПересчет.ЕстьЗаписи
		|ГДЕ
		|	Движения.РезервироватьПоМереПоступления <> 0
		|		И Движения.ДатаСобытия > &НачалоТекущегоДня
		|		И НЕ ТребуетсяПересчет.ЕстьЗаписи ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Строки.Номенклатура КАК Номенклатура,
		|	Строки.Характеристика КАК Характеристика,
		|	Строки.Склад КАК Склад
		|ПОМЕСТИТЬ РазличныеТоварыБезНазначений
		|ИЗ
		|	Строки КАК Строки
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	РасчетПереопределяемый.ГраницаПериода КАК ГраницаПериода
		|ПОМЕСТИТЬ ГраницыПериодаОбеспечения
		|ИЗ
		|	РазличныеТоварыБезНазначений КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Регистратор КАК Регистратор,
		|	ТаблицаТоваров.Период КАК Период,
		|	ТаблицаТоваров.ВидДвижения КАК ВидДвижения,
		|	ИСТИНА КАК Активность,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Склад КАК Склад,
		|	ТаблицаТоваров.Назначение КАК Назначение,
		|	ТаблицаТоваров.Заказ КАК Заказ,
		|	ТаблицаТоваров.ДатаСобытия КАК ДатаСобытия,
		|	0 КАК ВНаличии,
		|	0 КАК Поступит,
		|	0 КАК Заказано,
		|	0 КАК РезервироватьНаСкладе,
		|	-ТаблицаТоваров.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	ТаблицаТоваров.РезервироватьПоМереПоступления КАК ОтложитьРезервирование,
		|	0 КАК КОбеспечению,
		|	0 КАК НеОбеспечивать,
		|	0 КАК ЗакрытьГрафикПоступления,
		|	0 КАК ЗакрытьГрафикОтгрузки,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование) КАК ТипЗаписи,
		|	ЛОЖЬ КАК Сторно
		|ИЗ
		|	Строки КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГраницыПериодаОбеспечения КАК Границы
		|		ПО Границы.Номенклатура = ТаблицаТоваров.Номенклатура
		|		 И Границы.Характеристика = ТаблицаТоваров.Характеристика
		|		 И Границы.Склад = ТаблицаТоваров.Склад
		|		 И Границы.ГраницаПериода < ТаблицаТоваров.ДатаСобытия
		|		 И Границы.ГраницаПериода > ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	ИСТИНА КАК Активность,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.ВНаличии КАК ВНаличии,
		|	Движения.Поступит КАК Поступит,
		|	Движения.Заказано КАК Заказано,
		|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	Движения.КОбеспечению КАК КОбеспечению,
		|	Движения.НеОбеспечивать КАК НеОбеспечивать,
		|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
		|	Движения.ТипЗаписи КАК ТипЗаписи,
		|	Движения.Сторно КАК Сторно
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности КАК Движения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТребуетсяПересчет КАК ТребуетсяПересчет
		|		ПО ТребуетсяПересчет.ЕстьЗаписи
		|ГДЕ
		|	Движения.Регистратор = &Регистратор
		|		И Движения.Активность
		|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование)
		|		И ТребуетсяПересчет.ЕстьЗаписи ЕСТЬ NULL";
		
	Подстановки = ОбеспечениеВДокументахСервер.ПодстановкиГраницыОбеспечиваемогоПериода(
		"Товары.Номенклатура", "Товары.Характеристика", "Товары.Склад", "&НачалоТекущегоДня", "ИСТИНА");
	
	Текст = СтрЗаменить(Текст, "РасчетПереопределяемый.ГраницаПериода", Подстановки.Поле);
	Текст = СтрЗаменить(Текст, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА", Подстановки.Соединения);
	Тексты.Добавить(Текст);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТаблицаОтложенногоОбеспечения = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ТаблицаОтложенногоОбеспечения, Набор);
	
КонецПроцедуры

// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей.ЗапасыИПотребности - записываемый набор
//  Ссылка - ЛюбаяСсылка - записываемый документ
//  ЭтоОбновлениеИБ - Булево - признак, что блокировки нужно установить из обработчика обновления регистра ЗапасыИПотребности
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ОжидаемаяОтгрузкаИлиПоступление
Функция УстановитьБлокировкиЗаказовИТоваров(НаборЗаписей, Ссылка, ЭтоОбновлениеИБ) Экспорт
	
	Запрос = Новый Запрос();
	Заказы = НаборЗаписей.Выгрузить(, "Заказ");
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Заказ КАК Заказ
		|ПОМЕСТИТЬ ЗаказыПриЗаписи
		|ИЗ
		|	&Заказы КАК Заказы
		|ГДЕ
		|	Заказы.Заказ <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////
		// Разделяемая блокировка на документ уже установлена, значит можно читать движения документа из базы
		// так как, документ не могут записать/изменить, а значит не могут изменить его движения.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.Заказ КАК Заказ
		|ПОМЕСТИТЬ РазличныеЗаказы
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности КАК Движения
		|ГДЕ
		|	Движения.Регистратор = &Регистратор
		|		И Движения.Активность
		|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|		И Движения.Заказ <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Движения.Заказ КАК Заказ
		|ИЗ
		|	ЗаказыПриЗаписи КАК Движения
		|ИНДЕКСИРОВАТЬ ПО
		|Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазличныеЗаказы.Заказ КАК Заказ,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
		|ИЗ
		|	РазличныеЗаказы КАК РазличныеЗаказы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Таблица.Ссылка) КАК Регистратор
		|ИЗ
		|	РазличныеЗаказы КАК Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторЗапасыИПотребности КАК Таблица
		|		ПО Таблица.Распоряжение = Заказы.Заказ
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Распоряжение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Заказы.Заказ КАК Регистратор
		|ИЗ
		|	РазличныеЗаказы КАК Заказы
		|ГДЕ
		|	НЕ ТИПЗНАЧЕНИЯ(Заказы.Заказ) В(
		|		ТИП(Справочник.СоглашенияСПоставщиками),
		|		ТИП(Справочник.ДоговорыКонтрагентов))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор";
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Регистраторы = ПакетРезультатов[ПакетРезультатов.ВГраница()];
	Заказы = ПакетРезультатов[ПакетРезультатов.ВГраница() - 1];
	Результат = Заказы.Выгрузить();
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ЗапасыИПотребности");
	
	// Ждут регистраторы с такими же заказами как у текущего регистратора.
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	// Нужно ответственно прочитать номенклатуру указанную в заказах нашего документа, а затем подложить под заказы расчетные записи.
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ЗапасыИПотребности.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Регистраторы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
	
	//@skip-check lock-out-of-try
	БлокировкаДанных.Заблокировать();
	
	Регистраторы = Регистраторы.Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Запрос.УстановитьПараметр("ТаблицаТовары", НаборЗаписей.Выгрузить());
	
	ТекстыЗапроса = Новый Массив();
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Заказ КАК Заказ,
		|	Товары.ДатаСобытия КАК ДатаСобытия
		|ПОМЕСТИТЬ ДвиженияПриЗаписи
		|ИЗ
		|	&ТаблицаТовары КАК Товары
		|ГДЕ
		|	Товары.Активность");
	
	ТекстыИзмерений = Новый Массив();
	
	ТекстыИзмерений.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Заказ КАК Заказ,
		|	Товары.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	ДвиженияПриЗаписи КАК Товары");
	
	РегистраторыПоТипам = РегистраторыПоТипам(Регистраторы);
	Для Каждого Элемент Из РегистраторыПоТипам Цикл
		
		ТекстПоТипуРегистратора =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад,
			|	Движения.Назначение КАК Назначение,
			|	Движения.Заказ КАК Заказ,
			|	Движения.ДатаСобытия КАК ДатаСобытия
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	Движения.Регистратор В(&РегистраторыПереопределяемый)
			|		И Движения.Активность";
		ТекстПоТипуРегистратора = СтрЗаменить(ТекстПоТипуРегистратора, "РегистраторыПереопределяемый", Элемент.ИмяПараметра);
		ТекстыИзмерений.Добавить(ТекстПоТипуРегистратора);
		Запрос.УстановитьПараметр(Элемент.ИмяПараметра, Элемент.Регистраторы);
		
	КонецЦикла;
	
	ТекстРазличныеИзмерения = СтрСоединить(ТекстыИзмерений, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	ТекстыЗапроса.Добавить(ТекстРазличныеИзмерения);
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Товары = Запрос.Выполнить();
	
	// Блокируем фактические измерения, которые могут быть затронуты при записи наборов по текущему регистратору и по заказам.
	БлокировкаДанных = Новый БлокировкаДанных();
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ЗапасыИПотребности");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Назначение", "Назначение");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаСобытия", "ДатаСобытия");
	//@skip-check lock-out-of-try
	БлокировкаДанных.Заблокировать();
	
	Если Не ЭтоОбновлениеИБ Тогда
		ДосчитыватьРегистрРегламентнымЗаданием = РаспределениеЗапасов.ДосчитыватьРегистрРегламентнымЗаданием();
		Если Не ДосчитыватьРегистрРегламентнымЗаданием Тогда
			
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Склад КАК Склад
			|ПОМЕСТИТЬ ДвиженияПриЗаписи
			|ИЗ
			|	&ТаблицаТовары КАК Товары
			|ГДЕ
			|	Товары.Активность
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Склад КАК Склад
			|ИЗ
			|	ДвиженияПриЗаписи КАК Товары
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	Движения.Регистратор = &Регистратор
			|		И Движения.Активность";
			
			Товары = Запрос.Выполнить();
			БлокировкаДанных = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РаспределениеЗапасов");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = Товары;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
			//@skip-check lock-out-of-try
			БлокировкаДанных.Заблокировать();
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьЗаказыСогласноРасчетам(Запрос, Расчеты)
	
	НаборЗаписейГрафик = СоздатьНаборЗаписей();
	Для Каждого Расчет Из Расчеты Цикл
		
		Заказ = Расчет.Ключ;
		ЕстьИзмененияПоЗаказу = Расчет.Значение.ЕстьИзмененияПоЗаказу;
		ЕстьИзмененияПоСлужебномуРегистратору = Расчет.Значение.ЕстьИзмененияПоСлужебномуРегистратору;
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоЗаказу", ЕстьИзмененияПоЗаказу);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоСлужебномуРегистратору", ЕстьИзмененияПоСлужебномуРегистратору);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Движения.Регистратор КАК Регистратор,
			|	Движения.Период КАК Период,
			|	Движения.ВидДвижения КАК ВидДвижения,
			|	Движения.Активность КАК Активность,
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад,
			|	Движения.Назначение КАК Назначение,
			|	Движения.Заказ КАК Заказ,
			|	Движения.ДатаСобытия КАК ДатаСобытия,
			|	Движения.ВНаличии КАК ВНаличии,
			|	Движения.Поступит КАК Поступит,
			|	Движения.Заказано КАК Заказано,
			|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Движения.КОбеспечению КАК КОбеспечению,
			|	Движения.НеОбеспечивать КАК НеОбеспечивать,
			|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	Движения.ТипЗаписи КАК ТипЗаписи,
			|	Движения.Сторно КАК Сторно
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И Движения.Регистратор = &Заказ
			|		И Движения.ТипЗаписи В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РезультатыРасчета.Заказ КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор = &Заказ
			|;
			|
			|///////////////////////////////////////////
			|ВЫБРАТЬ
			|	РезультатыРасчета.Регистратор КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоСлужебномуРегистратору
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор <> &Заказ";
			
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		
		Для Каждого Элемент Из ПакетРезультатов Цикл
			
			Таблица = Элемент.Выгрузить();
			
			Если Таблица.Количество() > 0 Тогда
				НаборЗаписейГрафик.Отбор.Регистратор.Установить(Таблица[0].Регистратор);
				НаборЗаписейГрафик.Загрузить(Таблица);
				НаборЗаписейГрафик.ОбменДанными.Загрузка = Истина;
				НаборЗаписейГрафик.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ");
				НаборЗаписейГрафик.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				НаборЗаписейГрафик.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РегистраторыПоТипам(Регистраторы)
	
	ТипыРегистраторов = Новый Соответствие();
	РегистраторыПоТипам = Новый Массив();
	
	Для Каждого Ссылка Из Регистраторы Цикл
		
		ТипРегистратора = ТипЗнч(Ссылка);
		ЭлементыМассива = ТипыРегистраторов[ТипРегистратора]; 
		Если ЭлементыМассива = Неопределено Тогда
			МетаданныеДокумента = Ссылка.Метаданные(); // ОбъектМетаданных
			ИмяПараметра = "Регистраторы" + МетаданныеДокумента.Имя;
			ЭлементыМассива = Новый Массив();
			ТипыРегистраторов.Вставить(ТипРегистратора, ЭлементыМассива);
			РегистраторыПоТипам.Добавить(Новый Структура("Регистраторы,ИмяПараметра", ЭлементыМассива, ИмяПараметра));
		КонецЕсли;
		
		ЭлементыМассива.Добавить(Ссылка);
		
	КонецЦикла;
	
	Возврат РегистраторыПоТипам;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ЗапасыИПотребности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.95";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("33f66ffc-24cb-4c62-952f-d0b839908d27");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ЗапасыИПотребности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Удаляет движения документов ""Пересчетов товаров"" с незаполненными ресурсами.
		|Исправляет движения исправительных документов и документа ""Сторно""
		|Исправляет движения документов закупки при неотфактурованных поставках товаров и работ.
		|Исправляет движения актов о расхождениях в операциях не признания излишков и недостач и возврата товара без оформления.
		|Удаляет ошибочные движения документов ""Отчет давальцу 2.5"".';
		|en = 'Deletes register records of the ""Inventory count"" documents with blank resources.
		|Corrects register records of correction documents and the ""Storno"" document.
		|Corrects register records of purchase documents for goods and works received but not invoiced.
		|Corrects register records of discrepancy reports in transactions of not recognizing surpluses and shortages and of returning goods without registration.
		|Deletes incorrect register records of the ""Consumption report — Subcontracting services delivered 2.5"" documents.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	//++ НЕ УТКА
	Читаемые.Добавить(Метаданные.Документы.ОтчетДавальцу2_5.ПолноеИмя());
	//-- НЕ УТКА
	
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя();
	
	МассивТиповРегистраторов = Новый Массив();
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ПересчетТоваров.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.СборкаТоваров.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя());
	//++ НЕ УТ
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ПроизводствоБезЗаказа.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя());
	//-- НЕ УТ
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.Сторно.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	//++ НЕ УТКА
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ОтчетДавальцу2_5.ПолноеИмя());
	//-- НЕ УТКА
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(МассивТиповРегистраторов, ",");
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Акты.Ссылка КАК Ссылка,
		|	Акты.СкладПолучатель КАК СкладПолучатель
		|ПОМЕСТИТЬ АктыВозвратБезОформления
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПеремещения КАК Акты
		|ГДЕ
		|	Акты.Проведен
		|	И Акты.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано))
		|	И Акты.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|	И Акты.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= Акты.Дата
		// Исправляется ситуация, когда акт о расхождениях после перемещения не списывал возвращаемый излишек товара со склада оприходованный по ордерной схеме приемки.
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьВозвратБезОформления
		|		ИЗ
		|			Документ.АктОРасхожденияхПослеПеремещения.Товары КАК ТабЧасть
		|		ГДЕ
		|			ТабЧасть.Ссылка = Акты.Ссылка
		|			И ТабЧасть.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас))
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|/////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Заказ КАК Заказ
		|ПОМЕСТИТЬ ОтрицательныеОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		Остатки.Номенклатура КАК Номенклатура,
		|		Остатки.Характеристика КАК Характеристика,
		|		Остатки.Склад КАК Склад,
		|		Остатки.Назначение КАК Назначение,
		|		Остатки.Заказ КАК Заказ,
		|		Остатки.ДатаСобытия КАК ДатаСобытия
		|	ИЗ
		|		РегистрНакопления.ЗапасыИПотребности.Остатки КАК Остатки
		|	ГДЕ
		|		Остатки.ЗаказаноОстаток < 0
		|			ИЛИ Остатки.ПоступитОстаток < 0) КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтрицательныеОстатки КАК ОтрицательныеОстатки
		|		ПО ОтрицательныеОстатки.Заказ = Движения.Заказ
		|ГДЕ
		|	Движения.Активность
		|		И Движения.Заказ <> НЕОПРЕДЕЛЕНО
		|		И Движения.Сторно
		|		И (Движения.Заказано < 0 ИЛИ Движения.Поступит < 0)
		|		И ТИПЗНАЧЕНИЯ(Движения.Регистратор) В(
		|			ТИП(Документ.СборкаТоваров),
		|			ТИП(Документ.ПоступлениеТоваровОтХранителя),
		|			ТИП(Документ.ПриемкаТоваровНаХранение),
		//++ НЕ УТ
		|			ТИП(Документ.ПроизводствоБезЗаказа),
		|			ТИП(Документ.ДвижениеПродукцииИМатериалов),
		//-- НЕ УТ
		|			ТИП(Документ.ПрочееОприходованиеТоваров),
		|			ТИП(Документ.ПеремещениеТоваров),
		|			ТИП(Документ.Сторно))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СторноДокументы.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.Сторно КАК СторноДокументы
		|ГДЕ
		|	СторноДокументы.СторнируемыйДокумент.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровОтХранителя.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкиТоваров
		|				ПО ДанныеРегистра.Заказ = СборкиТоваров.Ссылка
		|				 И СборкиТоваров.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.СборкаТоваров.ПустаяСсылка)
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя КАК ПоступленияТоваровОтХранителя
		|				ПО ДанныеРегистра.Заказ = ПоступленияТоваровОтХранителя.Ссылка
		|				 И ПоступленияТоваровОтХранителя.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровОтХранителя.ПустаяСсылка)
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемкаТоваровНаХранение КАК ПриемкиТоваровНаХранение
		|				ПО ДанныеРегистра.Заказ = ПриемкиТоваровНаХранение.Ссылка
		|				 И ПриемкиТоваровНаХранение.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПриемкаТоваровНаХранение.ПустаяСсылка)
		|				
		//++ НЕ УТ
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа КАК ПроизводстваБезЗаказа
		|				ПО ДанныеРегистра.Заказ = ПроизводстваБезЗаказа.Ссылка
		|				 И ПроизводстваБезЗаказа.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПроизводствоБезЗаказа.ПустаяСсылка)
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДвижениеПродукцииИМатериалов КАК ДвиженияПродукцииИМатериалов
		|				ПО ДанныеРегистра.Заказ = ДвиженияПродукцииИМатериалов.Ссылка
		|				 И ДвиженияПродукцииИМатериалов.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ДвижениеПродукцииИМатериалов.ПустаяСсылка)
		//-- НЕ УТ
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочиеОприходованиеТоваров
		|				ПО ДанныеРегистра.Заказ = ПрочиеОприходованиеТоваров.Ссылка
		|				 И ПрочиеОприходованиеТоваров.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПрочееОприходованиеТоваров.ПустаяСсылка)
		|				
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещенияТоваров
		|				ПО ДанныеРегистра.Заказ = ПеремещенияТоваров.Ссылка
		|				 И ПеремещенияТоваров.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = СторноДокументы.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ НЕ СборкиТоваров.Ссылка ЕСТЬ NULL
		|				ИЛИ НЕ ПоступленияТоваровОтХранителя.Ссылка ЕСТЬ NULL
		|				ИЛИ НЕ ПриемкиТоваровНаХранение.Ссылка ЕСТЬ NULL
		//++ НЕ УТ
		|				ИЛИ НЕ ПроизводстваБезЗаказа.Ссылка ЕСТЬ NULL
		|				ИЛИ НЕ ДвиженияПродукцииИМатериалов.Ссылка ЕСТЬ NULL
		//-- НЕ УТ
		|				ИЛИ НЕ ПрочиеОприходованиеТоваров.Ссылка ЕСТЬ NULL
		|				ИЛИ НЕ ПеремещенияТоваров.Ссылка ЕСТЬ NULL))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СборкиТоваров.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.СборкаТоваров КАК СборкиТоваров
		|	
		|ГДЕ
		|	СборкиТоваров.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.СборкаТоваров.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = СборкиТоваров.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Заказ) = ТИП(Документ.СборкаТоваров)
		|					И ДанныеРегистра.Заказ <> ЗНАЧЕНИЕ(Документ.СборкаТоваров.ПустаяСсылка)
		|					И ДанныеРегистра.Заказ <> СборкиТоваров.ИсправляемыйДокумент))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступленияТоваровОтХранителя.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПоступлениеТоваровОтХранителя КАК ПоступленияТоваровОтХранителя
		|	
		|ГДЕ
		|	ПоступленияТоваровОтХранителя.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровОтХранителя.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = ПоступленияТоваровОтХранителя.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Заказ) = ТИП(Документ.ПоступлениеТоваровОтХранителя)
		|					И ДанныеРегистра.Заказ <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровОтХранителя.ПустаяСсылка)
		|					И ДанныеРегистра.Заказ <> ПоступленияТоваровОтХранителя.ИсправляемыйДокумент))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемкиТоваровНаХранение.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПриемкаТоваровНаХранение КАК ПриемкиТоваровНаХранение
		|	
		|ГДЕ
		|	ПриемкиТоваровНаХранение.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПриемкаТоваровНаХранение.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = ПриемкиТоваровНаХранение.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Заказ) = ТИП(Документ.ПриемкаТоваровНаХранение)
		|					И ДанныеРегистра.Заказ <> ЗНАЧЕНИЕ(Документ.ПриемкаТоваровНаХранение.ПустаяСсылка)
		|					И ДанныеРегистра.Заказ <> ПриемкиТоваровНаХранение.ИсправляемыйДокумент))
		|
		//++ НЕ УТ
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроизводстваБезЗаказа.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПроизводствоБезЗаказа КАК ПроизводстваБезЗаказа
		|	
		|ГДЕ
		|	ПроизводстваБезЗаказа.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПроизводствоБезЗаказа.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = ПроизводстваБезЗаказа.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Заказ) = ТИП(Документ.ПроизводствоБезЗаказа)
		|					И ДанныеРегистра.Заказ <> ЗНАЧЕНИЕ(Документ.ПроизводствоБезЗаказа.ПустаяСсылка)
		|					И ДанныеРегистра.Заказ <> ПроизводстваБезЗаказа.ИсправляемыйДокумент))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияПродукцииИМатериалов.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ДвижениеПродукцииИМатериалов КАК ДвиженияПродукцииИМатериалов
		|	
		|ГДЕ
		|	ДвиженияПродукцииИМатериалов.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ДвижениеПродукцииИМатериалов.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = ДвиженияПродукцииИМатериалов.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Заказ) = ТИП(Документ.ДвижениеПродукцииИМатериалов)
		|					И ДанныеРегистра.Заказ <> ЗНАЧЕНИЕ(Документ.ДвижениеПродукцииИМатериалов.ПустаяСсылка)
		|					И ДанныеРегистра.Заказ <> ДвиженияПродукцииИМатериалов.ИсправляемыйДокумент))
		//-- НЕ УТ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрочиеОприходованиеТоваров.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПрочееОприходованиеТоваров КАК ПрочиеОприходованиеТоваров
		|	
		|ГДЕ
		|	ПрочиеОприходованиеТоваров.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПрочееОприходованиеТоваров.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = ПрочиеОприходованиеТоваров.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Заказ) = ТИП(Документ.ПрочееОприходованиеТоваров)
		|					И ДанныеРегистра.Заказ <> ЗНАЧЕНИЕ(Документ.ПрочееОприходованиеТоваров.ПустаяСсылка)
		|					И ДанныеРегистра.Заказ <> ПрочиеОприходованиеТоваров.ИсправляемыйДокумент))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещенияТоваров.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещенияТоваров
		|	
		|ГДЕ
		|	ПеремещенияТоваров.ИсправляемыйДокумент <> ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьЗаписи
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК ДанныеРегистра
		|		ГДЕ
		|			ДанныеРегистра.Регистратор = ПеремещенияТоваров.Ссылка
		// Исправляется ситуация, когда сторнировались расчетные записи
		|		 	И (ДанныеРегистра.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|					И ДанныеРегистра.Сторно
		// Исправляется ошибка в тексте запроса движений, когда в качестве распоряжения в графике бралась ссылка на документ, а не на исправляемый документ
		|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Заказ) = ТИП(Документ.ПеремещениеТоваров)
		|					И ДанныеРегистра.Заказ <> ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
		|					И ДанныеРегистра.Заказ <> ПеремещенияТоваров.ИсправляемыйДокумент))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПересчетыТоваров.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПересчетТоваров КАК ПересчетыТоваров
		|ГДЕ
		|	ПересчетыТоваров.Проведен
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьПустыеДвижения
		|			ИЗ
		|				РегистрНакопления.ЗапасыИПотребности КАК Движения
		|			ГДЕ
		|				Движения.Регистратор = ПересчетыТоваров.Ссылка
		// Исправляется ситуация, когда пересчет делал пустые движения, если расхождений по факту и по учету нет
		|				И Движения.ВНаличии = 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретенияТоваровУслуг.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ПриобретенияТоваровУслуг
		|ГДЕ
		|	ПриобретенияТоваровУслуг.Проведен
		|		И ПриобретенияТоваровУслуг.ХозяйственнаяОперация В(
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути))
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьНеверныеДвижения
		|			ИЗ
		|				РегистрНакопления.ЗапасыИПотребности КАК Движения
		|			ГДЕ
		|				Движения.Регистратор = ПриобретенияТоваровУслуг.Ссылка
		// Исправляется ситуация, когда при двухходовой схеме оформления закупок документ приобретения делал движения по работам
		|				И (Движения.Склад = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|						И Движения.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		// Исправляется ситуация, когда при двухходовой схеме вариант приемки по договорам или соглашениям а график открывался по заказу или накладной
		|					ИЛИ ПриобретенияТоваровУслуг.ВариантПриемкиТоваров В(
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
		|						И Движения.Заказано > 0
		|						И Движения.Заказ <> ПриобретенияТоваровУслуг.Соглашение
		|					ИЛИ ПриобретенияТоваровУслуг.ВариантПриемкиТоваров В(
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|						И Движения.Заказано > 0
		|						И Движения.Заказ <> ПриобретенияТоваровУслуг.Договор))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретенияТоваровУслуг.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ПриобретенияТоваровУслуг
		|ГДЕ
		|	ПриобретенияТоваровУслуг.Проведен
		|		И ПриобретенияТоваровУслуг.ПоступлениеПоЗаказам
		|		И ПриобретенияТоваровУслуг.ХозяйственнаяОперация В(
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки))
		|		И ПриобретенияТоваровУслуг.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьСтроки
		|			ИЗ
		|				Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = ПриобретенияТоваровУслуг.Ссылка
		|				И НЕ Товары.СписатьНаРасходы
		|				И Товары.КодСтроки <> 0
		|				И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И НЕ ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьДвижения
		|			ИЗ
		|				РегистрНакопления.ЗапасыИПотребности КАК Движения
		|			ГДЕ
		|				Движения.Регистратор = ПриобретенияТоваровУслуг.Ссылка
		// Исправляется ситуация, когда при двухходовой схеме оформления закупок нет движения по открытию графика поступления работы при приемке по накладным
		|				И Движения.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|				И Движения.Заказано > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыПоставщику.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказыПоставщику
		|ГДЕ
		|	ЗаказыПоставщику.Проведен
		|		И ЗаказыПоставщику.ХозяйственнаяОперация В(
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути))
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьНеверныеДвижения
		|			ИЗ
		|				РегистрНакопления.ЗапасыИПотребности КАК Движения
		|			ГДЕ
		|				Движения.Регистратор = ЗаказыПоставщику.Ссылка
		// Исправляется ситуация, когда при двухходовой схеме вариант приемки по договорам или соглашениям а график открывался по заказу
		|				И (ЗаказыПоставщику.ВариантПриемкиТоваров В(
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
		|						И Движения.Заказано > 0
		|						И Движения.Заказ <> ЗаказыПоставщику.Соглашение
		|					ИЛИ ЗаказыПоставщику.ВариантПриемкиТоваров В(
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|						И Движения.Заказано > 0
		|						И Движения.Заказ <> ЗаказыПоставщику.Договор))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СторноДокументы.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.Сторно КАК СторноДокументы
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Приобретения
		|		ПО Приобретения.Ссылка = СторноДокументы.СторнируемыйДокумент
		|		И Приобретения.ХозяйственнаяОперация В(
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути))
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СторноДокументы.СторнируемыйДокумент) = ТИП(Документ.ПриобретениеТоваровУслуг)
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьДвиженияСПустымПодразделением
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК Движения
		|		ГДЕ
		|			Движения.Регистратор = СторноДокументы.СторнируемыйДокумент
		// Исправляется ситуация, когда при двухходовой схеме оформления закупок документ приобретения делал движения по работам
		|				И (Движения.Склад = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|						И Движения.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		// Исправляется ситуация, когда при двухходовой схеме вариант приемки по договорам или соглашениям а график открывался по заказу или накладной
		|					ИЛИ Приобретения.ВариантПриемкиТоваров В(
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
		|						И Движения.Заказано > 0
		|						И Движения.Заказ <> Приобретения.Соглашение
		|					ИЛИ Приобретения.ВариантПриемкиТоваров В(
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных),
		|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных))
		|						И Движения.Заказано > 0
		|						И Движения.Заказ <> Приобретения.Договор))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СторноДокументы.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.Сторно КАК СторноДокументы
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Приобретения
		|		ПО Приобретения.Ссылка = СторноДокументы.СторнируемыйДокумент
		|		И Приобретения.ХозяйственнаяОперация В(
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки))
		|		И Приобретения.ПоступлениеПоЗаказам
		|		И Приобретения.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
		|ГДЕ
		|	СторноДокументы.Проведен
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьСтроки
		|			ИЗ
		|				Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|			ГДЕ
		|				Товары.Ссылка = СторноДокументы.СторнируемыйДокумент
		|				И НЕ Товары.СписатьНаРасходы
		|				И Товары.КодСтроки <> 0
		|				И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И НЕ ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК ЕстьДвижения
		|			ИЗ
		|				РегистрНакопления.ЗапасыИПотребности КАК Движения
		|			ГДЕ
		|				Движения.Регистратор = СторноДокументы.СторнируемыйДокумент
		// Исправляется ситуация, когда при двухходовой схеме оформления закупок нет движения по открытию графика поступления работы при приемке по накладным
		|				И Движения.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|				И Движения.Заказано > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Акты.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПеремещения КАК Акты
		|ГДЕ
		|	Акты.Проведен
		|	И Акты.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано))
		|	И Акты.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|	И Акты.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении <= Акты.Дата
		// Исправляется ситуация, когда акт о расхождениях после перемещения не корректировал график поступления на ордерный склад
		|	И ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьСтрокиДляЗакрытияГрафика
		|		ИЗ
		|			Документ.АктОРасхожденияхПослеПеремещения.Товары КАК ТабЧасть
		|		ГДЕ
		|			ТабЧасть.Ссылка = Акты.Ссылка
		|			И ТабЧасть.Действие В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас)))
		|	И НЕ ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьДвиженияПоЗакрытиюГрафика
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности КАК Движения
		|		ГДЕ
		|			Движения.Регистратор = Акты.Ссылка
		|			И Движения.Склад = Акты.СкладПолучатель
		|			И Движения.Активность
		|			И Движения.ЗакрытьГрафикПоступления <> 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расхождения.Регистратор КАК Регистратор
		|ИЗ (
		|	ВЫБРАТЬ
		|		Акты.Ссылка КАК Регистратор,
		|		ТабЧасть.Номенклатура КАК Номенклатура,
		|		ТабЧасть.Характеристика КАК Характеристика,
		|		ТабЧасть.Назначение КАК Назначение,
		|		-(ТабЧасть.Количество - ТабЧасть.КоличествоПоДокументу) КАК ПриходПоДокументу,
		|		0 КАК ПриходПоРегистру
		|	ИЗ
		|		АктыВозвратБезОформления КАК Акты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПеремещения.Товары КАК ТабЧасть
		|			ПО ТабЧасть.Ссылка = Акты.Ссылка
		|			 И ТабЧасть.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Акты.Ссылка КАК Регистратор,
		|		ТабЧасть.Номенклатура КАК Номенклатура,
		|		ТабЧасть.Характеристика КАК Характеристика,
		|		ТабЧасть.Назначение КАК Назначение,
		|		ТабЧасть.КоличествоПоДокументу - ТабЧасть.Количество КАК ПриходПоДокументу,
		|		0 КАК ПриходПоРегистру
		|	ИЗ
		|		АктыВозвратБезОформления КАК Акты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПеремещения.Товары КАК ТабЧасть
		|			ПО ТабЧасть.Ссылка = Акты.Ссылка
		|	ГДЕ
		|		(НЕ Акты.СкладПолучатель.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
		|			ИЛИ Акты.СкладПолучатель.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач > ТабЧасть.Ссылка.Дата)
		|		И ТабЧасть.Действие В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Движения.Регистратор КАК Регистратор,
		|		Движения.Номенклатура КАК Номенклатура,
		|		Движения.Характеристика КАК Характеристика,
		|		Движения.Назначение КАК Назначение,
		|		0 КАК ПриходПоДокументу,
		|		ВЫБОР
		|			КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА Движения.ВНаличии
		|			ИНАЧЕ - Движения.ВНаличии
		|		КОНЕЦ КАК ПриходПоРегистру
		|	ИЗ
		|		АктыВозвратБезОформления КАК Акты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыИПотребности КАК Движения
		|			ПО Движения.Регистратор = Акты.Ссылка
		|			 И Движения.Активность
		|			 И Движения.ВНаличии <> 0
		|			 И Движения.Склад = Акты.СкладПолучатель) КАК Расхождения
		|СГРУППИРОВАТЬ ПО
		|	Расхождения.Регистратор,
		|	Расхождения.Номенклатура,
		|	Расхождения.Характеристика,
		|	Расхождения.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Расхождения.ПриходПоДокументу) <> СУММА(Расхождения.ПриходПоРегистру)
		//++ НЕ УТКА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.Регистратор КАК Регистратор
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТабЧасть.Ссылка         КАК Регистратор,
		|		ТабЧасть.Номенклатура   КАК Номенклатура,
		|		ТабЧасть.Характеристика КАК Характеристика,
		|		ТабЧасть.Подразделение  КАК Склад,
		|		ТабЧасть.Назначение     КАК Назначение,
		|		ТабЧасть.Количество     КАК Количество
		|	ИЗ
		|		Документ.ОтчетДавальцу2_5.Продукция КАК ТабЧасть
		|	ГДЕ
		|		ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		И (ТабЧасть.КодСтроки = 0
		|			ИЛИ НЕ ТабЧасть.Ссылка.ОтчетПоЗаказам)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Движения.Регистратор    КАК Регистратор,
		|		Движения.Номенклатура   КАК Номенклатура,
		|		Движения.Характеристика КАК Характеристика,
		|		Движения.Склад          КАК Склад,
		|		Движения.Назначение     КАК Назначение,
		|		-Движения.ВНаличии      КАК Количество
		|	ИЗ
		|		РегистрНакопления.ЗапасыИПотребности КАК Движения
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(Движения.Регистратор) = ТИП(Документ.ОтчетДавальцу2_5)
		|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|	) КАК Движения
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Регистратор,
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Склад,
		|	Движения.Назначение
		|	
		|ИМЕЮЩИЕ
		|	СУММА(Движения.Количество) < 0
		//-- НЕ УТКА
		|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	ТипыРегистраторов = Новый Массив();
	ТипыРегистраторов.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	ТипыРегистраторов.Добавить("Документ.ПриобретениеТоваровУслуг");
	ТипыРегистраторов.Добавить("Документ.ЗаказПоставщику");
	ТипыРегистраторов.Добавить("Документ.Сторно");
	//++ НЕ УТКА
	ТипыРегистраторов.Добавить("Документ.ОтчетДавальцу2_5");
	//-- НЕ УТКА
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;

	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		ТипыРегистраторов, "РегистрНакопления.ЗапасыИПотребности", Параметры.Очередь, ДополнительныеПараметры);
	
	ТипЗаписиПервичная = Перечисления.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись;
	Для Каждого ТекущиеДанные Из ОбновляемыеДанные Цикл
		
		Если ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗапасыИПотребности.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ТекущиеДанные.Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыНакопления.ЗапасыИПотребности.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ТекущиеДанные.Регистратор);
				
				// Исправляется ситуация, когда пересчет делал пустые движения, если расхождений по факту и по учету нет
				НаборЗаписей.Прочитать();
				ВсегоЗаписей = НаборЗаписей.Количество();
				Для Счетчик = 1 По ВсегоЗаписей Цикл
					ТекущаяЗапись = НаборЗаписей[ВсегоЗаписей - Счетчик];
					Если ТекущаяЗапись.ВНаличии = 0 Тогда
						НаборЗаписей.Удалить(ТекущаяЗапись);
					КонецЕсли;
				КонецЦикла;
					
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущиеДанные.Регистратор);
			КонецПопытки;
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения")
			Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.Сторно")
			//++ НЕ УТКА
			Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ОтчетДавальцу2_5")
			//-- НЕ УТКА
			Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			Продолжить;
			
		Иначе
			
			Если ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.СборкаТоваров")
				Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя")
				Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение")
				//++ НЕ УТ
				Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ПроизводствоБезЗаказа")
				Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")
				//-- НЕ УТ
				Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
				Или ТипЗнч(ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				
				НачатьТранзакцию();
				
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					
					ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗапасыИПотребности.НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", ТекущиеДанные.Регистратор);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					
					ЭлементБлокировки = Блокировка.Добавить(ТекущиеДанные.Регистратор.Метаданные().ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущиеДанные.Регистратор);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					
					Блокировка.Заблокировать();
					
					ИсправляемыйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Регистратор,
						"ИсправляемыйДокумент");
					
					НаборЗаписей = РегистрыНакопления.ЗапасыИПотребности.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ТекущиеДанные.Регистратор);
					НаборЗаписей.Прочитать();
					
					УстановитьБлокировкиЗаказовИТоваров(НаборЗаписей, ТекущиеДанные.Регистратор, Истина);
				
					ТаблицаЗаказов = НаборЗаписей.Выгрузить(, "Заказ");
					
					ВсегоЗаписей = НаборЗаписей.Количество();
					ОбъектИзменен = Ложь;
					Для Счетчик = 1 По ВсегоЗаписей Цикл
						ТекущаяЗапись = НаборЗаписей[ВсегоЗаписей - Счетчик];
						Если ЗначениеЗаполнено(ИсправляемыйДокумент)
								И ЗначениеЗаполнено(ТекущаяЗапись.Заказ)
								И ТекущаяЗапись.Заказ <> ИсправляемыйДокумент
								И (ТипЗнч(ТекущаяЗапись.Заказ) = Тип("ДокументСсылка.СборкаТоваров")
									Или ТипЗнч(ТекущаяЗапись.Заказ) = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя")
									Или ТипЗнч(ТекущаяЗапись.Заказ) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение")
									//++ НЕ УТ
									Или ТипЗнч(ТекущаяЗапись.Заказ) = Тип("ДокументСсылка.ПроизводствоБезЗаказа")
									Или ТипЗнч(ТекущаяЗапись.Заказ) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")
									//-- НЕ УТ
									Или ТипЗнч(ТекущаяЗапись.Заказ) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
									Или ТипЗнч(ТекущаяЗапись.Заказ) = Тип("ДокументСсылка.ПеремещениеТоваров")) Тогда
							ТекущаяЗапись.Заказ = ИсправляемыйДокумент;
							НоваяСтрока = ТаблицаЗаказов.Добавить();
							НоваяСтрока.Заказ = ИсправляемыйДокумент;
							ОбъектИзменен = Истина;
						КонецЕсли;
						Если ТекущаяЗапись.Сторно И ТекущаяЗапись.ТипЗаписи <> ТипЗаписиПервичная Тогда
							НаборЗаписей.Удалить(ТекущаяЗапись);
							ОбъектИзменен = Истина;
						КонецЕсли;
					КонецЦикла;
					ТаблицаЗаказов.Свернуть("Заказ");
					
					Если ОбъектИзменен Тогда
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
						
						Запрос = Новый Запрос();
						Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
						ВсеЗаказы = ТаблицаЗаказов.ВыгрузитьКолонку("Заказ");
						Расчеты = РассчитатьГрафикПоЗаказамВоВременнуюТаблицу(Запрос, "РезультатыРасчетаГрафика", ВсеЗаказы);
						ЗаписатьЗаказыСогласноРасчетам(Запрос, Расчеты);
						
					Иначе
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
					КонецЕсли;
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущиеДанные.Регистратор);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура СформироватьИЗаписатьДвижения(НаборЗаписей, Ссылка, ЗаписатьДвижения) Экспорт
	
	Если ЗаписатьДвижения Тогда
		
		// Получение первичных движений.
		ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, "ЗапасыИПотребности");
		ТаблицаДанных = ТаблицыДляДвижений["Таблица" + "ЗапасыИПотребности"];
		НаборЗаписей.Загрузить(ТаблицаДанных);
		
		УстановитьБлокировкиЗаказовИТоваров(НаборЗаписей, Ссылка, Истина);
		
		МассивСтрокПоЗаказам = Новый Массив();
		ВозможноОтложенноеОбеспечение = Ложь;
		Для Каждого Строка Из ТаблицаДанных Цикл
			Если ЗначениеЗаполнено(Строка.Заказ) Тогда
				МассивСтрокПоЗаказам.Добавить(Строка);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДатаСобытия) И Строка.РезервироватьПоМереПоступления <> 0 Тогда
				ВозможноОтложенноеОбеспечение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Расчет отложенного резервирования.
		Если ВозможноОтложенноеОбеспечение Тогда
			
			ДополнитьНаборЗаписямиОтложенногоОбеспечения(НаборЗаписей);
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		// Расчет графика поступления и графика отгрузки.
		Если МассивСтрокПоЗаказам.Количество() > 0 Тогда
			
			ТаблицаЗаказов = ТаблицаДанных.Скопировать(МассивСтрокПоЗаказам, "Заказ"); // ТаблицаЗначений -
			ТаблицаЗаказов.Свернуть("Заказ");
			
			Запрос = Новый Запрос();
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
			ВсеЗаказы = ТаблицаЗаказов.ВыгрузитьКолонку("Заказ");
			Расчеты = РассчитатьГрафикПоЗаказамВоВременнуюТаблицу(Запрос, "РезультатыРасчетаГрафика", ВсеЗаказы);
			
			ЗаписатьЗаказыСогласноРасчетам(Запрос, Расчеты);
		КонецЕсли;
		
	Иначе
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
