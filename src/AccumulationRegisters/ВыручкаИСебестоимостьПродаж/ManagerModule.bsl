#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
//++ НЕ УТ

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	ПараметрыОтражения.ПутьКДаннымОрганизация = "АналитикаУчетаПоПартнерам.Организация";
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "НаправлениеДеятельностиНоменклатуры";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "Подразделение";
	//++ НЕ УТКА
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки =
		МеждународныйУчетПоДаннымФинансовыхРегистров.ПолеВыборкиГФУНоменклатуры(ПараметрыОтражения.ПсевдонимИсточникаДанных);
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "Подразделение";
	//-- НЕ УТКА
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаВыручки");
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаВыручкиБезНДС");
	ПараметрыОтражения.РесурсыУпр.Добавить("СтоимостьУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ДопРасходыУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ТрудозатратыУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("РасходыНаПродажуУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("РезервПодОбесценениеУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаВыручкиСНДСРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаВыручкиРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("СтоимостьРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ДопРасходыРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ТрудозатратыРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("РасходыНаПродажуРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("РезервПодОбесценениеРегл");
	ПараметрыОтражения.РесурсыКоличество.Добавить("Количество");
	ПараметрыОтражения.ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Номенклатура;
	ПараметрыОтражения.ПутьКДаннымДопНастройкаХозОперации = СтрЗаменить(
		"ВЫБОР
		|		КОГДА ПсевдонимИсточникаДанных.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫБОР
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВозвратТоваровОтКлиентаПрошлыхПериодов)
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионераПрошлыхПериодов)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВозвратТоваровЧерезКомиссионераПрошлыхПериодов)
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноРеализации)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноРеализации)
		|				ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|			КОНЕЦ
		|		КОГДА ПсевдонимИсточникаДанных.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			И ВЫРАЗИТЬ(ПсевдонимИсточникаДанных.Регистратор КАК Документ.КорректировкаПриобретения).ТипКорректировки <> ЗНАЧЕНИЕ(Перечисление.ТипыКорректировки.ОбычнаяКорректировка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.КорректировкаПриобретенияПрошлогоПериода)
		|		КОГДА ПсевдонимИсточникаДанных.Регистратор ССЫЛКА Документ.ОтчетКомиссионера
		|			ТОГДА ВЫБОР
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомиссионера)
		|					И (ПсевдонимИсточникаДанных.РасходыНаПродажуУпр <> 0 ИЛИ ПсевдонимИсточникаДанных.РасходыНаПродажуРегл <> 0)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетКомиссионераКомиссия)
		|				ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|			КОНЕЦ
		|		ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|	КОНЕЦ",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	ОпределитьПоказатели(ПараметрыОтражения);
	
	ПараметрыОтражения.ДополнительныйОтбор = СтрЗаменить(
		"НЕ ПсевдонимИсточникаДанных.ТипЗапасов В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга))",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);

	Возврат ПараметрыОтражения;
	
КонецФункции
//-- НЕ УТ

//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
//
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник
//                               уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатуры,
		Новый Структура(СвойстваИсточника, "ГФУНоменклатуры"));
		
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов,
		Новый Структура(СвойстваИсточника, "ГФУРасчетов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
//
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаНоменклатуры, "СкладПодразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.Заказ, "ЗаказПодразделение");

	Возврат ИсточникиПодразделений;

КонецФункции

// Определяет источники направлений регистра и их свойства.
//
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиКонтрагента, "НаправлениеДеятельностиКонтрагента");
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиНоменклатуры, "НаправлениеДеятельностиНоменклатуры");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
//
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("Номенклатура");
	МассивСубконто.Добавить("Характеристика");
	МассивСубконто.Добавить("Склад");
	МассивСубконто.Добавить("ТипЗапасов");
	МассивСубконто.Добавить("ВидЗапасов");
	МассивСубконто.Добавить("Партнер");
	МассивСубконто.Добавить("Контрагент");
	МассивСубконто.Добавить("Поставщик");
	МассивСубконто.Добавить("Соглашение");
	МассивСубконто.Добавить("Договор");
	МассивСубконто.Добавить("ЗаказКлиента");
	МассивСубконто.Добавить("ГФУНоменклатуры");
	МассивСубконто.Добавить("ТипНоменклатуры");
	МассивСубконто.Добавить("Хранитель");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);
	
КонецФункции

// Определяет показатели в валюте регистра.
//
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалютеВзаиморасчетов, Новый Структура(СвойстваПоказателей, "ВалютаВзаиморасчетов"));
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалютеДокумента, Новый Структура(СвойстваПоказателей, "ВалютаДокумента"));
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет показатели в валюте регистра.
//
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиКоличества() Экспорт

	ПоказателиКоличества = Новый Соответствие;
	
	ПоказателиКоличества.Вставить(Перечисления.ПоказателиАналитическихРегистров.Количество, "Количество");
	
	Возврат ПоказателиКоличества;

КонецФункции

//-- НЕ УТКА

//++ НЕ УТ

// Определяет показатели регистра.
//
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручки", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручкиСНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручкиБезНДС", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВыручкиРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДС", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеВзаиморасчетов", "ВалютаВзаиморасчетов"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСВВалютеДокумента", "ВалютаДокумента"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Стоимость, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Себестоимость, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьРегл, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ДопРасходыУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ДопРасходыРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходов, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ДопРасходыБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходовБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСДополнительныхРасходов", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСДопРасходов, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "РезервПодОбесценениеУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "РезервПодОбесценениеРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.РезервПодОбесценение, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "РасходыНаПродажуУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "РасходыНаПродажуРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажу, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "РасходыНаПродажуБезНДС", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажуБезНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

//-- НЕ УТ

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийВыручкаИСебестоимостьПродаж"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		Таблица.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, "ФинансовыйКонтур");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)
	|	И ЗначениеРазрешено(Т.Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

// Определяет показатели регистра
//
// Параметры:
//  ПараметрыОтражения - см. ПараметрыОтраженияДвиженийВФинансовомУчете()
//
Процедура ОпределитьПоказатели(ПараметрыОтражения)
	
	// Сумма выручки без НДС
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("СуммаВыручкиБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("СуммаВыручкиРегл");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "&ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ПутьКДаннымИдентификаторФинЗаписи = СтрЗаменить(
			"ВЫБОР
			|		КОГДА ПсевдонимИсточникаДанных.ИсточникГФУРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
			|			ТОГДА ПсевдонимИсточникаДанных.ИсточникГФУРасчетов.УникальныйИдентификатор
			|		ИНАЧЕ ПсевдонимИсточникаДанных.ИдентификаторФинЗаписи
			|	КОНЕЦ",
			"ПсевдонимИсточникаДанных",
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию());
	ПараметрыОтраженияПоказателя.ПутьКДаннымИдентификаторСтроки = "ИдентификаторФинЗаписи";
	ПараметрыОтраженияПоказателя.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС, ПараметрыОтраженияПоказателя);
	
	// Стоимость
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("СтоимостьУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("СтоимостьРегл");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтраженияПоказателя.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Стоимость, ПараметрыОтраженияПоказателя);
	
	// Стоимость без НДС
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("СтоимостьБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС, ПараметрыОтраженияПоказателя);
	
	// НДС стоимости
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("Стоимость");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-СтоимостьБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДССтоимости, ПараметрыОтраженияПоказателя);
	
	// Доп расходы
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ДопРасходыУпр");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ТрудозатратыУпр");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ДопРасходыРегл");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ТрудозатратыРегл");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтраженияПоказателя.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходов, ПараметрыОтраженияПоказателя);
	
	// Доп расходы без НДС
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ДопРасходыБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("Трудозатраты");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПостоянныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПеременныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходовБезНДС, ПараметрыОтраженияПоказателя);
	
	// Сумма НДС доп расходов
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ДопРасходы");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПостоянныеСНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПеременныеСНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-ДопРасходыБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-ПостатейныеПостоянныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-ПостатейныеПеременныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСДопРасходов, ПараметрыОтраженияПоказателя);
	
	// Резерв под обесценение
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("РезервПодОбесценениеУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("РезервПодОбесценениеРегл");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтраженияПоказателя.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.РезервПодОбесценение, ПараметрыОтраженияПоказателя);
	
	// Расходы на продажу
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("РасходыНаПродажуУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("РасходыНаПродажуРегл");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтраженияПоказателя.ВыражениеЭтоДебет = "НЕ &ЭтоСторно";
	ПараметрыОтраженияПоказателя.ВыражениеЭтоКредит = "&ЭтоСторно";
	ПараметрыОтраженияПоказателя.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя);
	ПараметрыОтраженияПоказателя.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя);
	ПараметрыОтраженияПоказателя.КорИсточникиДанных.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.Имя);
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажу, ПараметрыОтраженияПоказателя);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецЕсли
