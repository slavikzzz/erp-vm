#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("Сценарий", Сценарий);
	Параметры.Свойство("СпособРасчетаПотребностейВМатериалах", СпособРасчетаПотребностейВМатериалах);
	
	ПрочитатьДанные();
	
	УстановитьПараметрыВыбораСпецификаций();
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.СписокКорректировок);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для ИндексСтроки = 0 По СписокКорректировок.Количество() - 1 Цикл
		
		ДанныеСтроки = СписокКорректировок[ИндексСтроки];
		
		НомерСтроки = ИндексСтроки + 1;
		ПутьКДанным = СтрШаблон("СписокКорректировок[%1].Номенклатура", Формат(ИндексСтроки, "ЧН=0; ЧГ=0"));
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнено поле ""Спецификация"" в строке %1.';
											|en = '""BOM"" is required in line %1.'"), НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ДатаЗапускаВыпуска) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена поле ""Дата запуска"" в строке %1.';
											|en = '""Launch date"" field in line %1 is not filled in.'"), НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Период) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнена поле ""Дата выпуска"" в строке %1.';
											|en = '""Release date"" field in line %1 is not filled in.'"), НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
		КонецЕсли;
		
		Если ДанныеСтроки.ДатаЗапускаВыпуска > ДанныеСтроки.Период
			И Не Отказ Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Некорректно поле ""Дата выпуска"" в строке %1.';
											|en = '""Launch date"" field in line %1 is incorrect.'"), НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗакрытьБезВопроса И Модифицированность Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.';
										|en = 'All changes made to the data will be lost.'");
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Закрыть';
													|en = 'Close'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена';
														|en = 'Cancel'"));
		
		ТекстВопроса = НСтр("ru = 'Внесенные изменения будут потеряны. Продолжить?';
							|en = 'Changes will be lost. Continue?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОЗакрытии", ЭтотОбъект), ТекстВопроса, Кнопки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗакрытии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗакрытьБезВопроса = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

//++ НЕ УТКА

&НаСервере
Процедура ЗаписатьКорректировкуНаСервере()
	
	ИзмененныеСтроки = ИзмененныеСтроки();
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
	
		НачатьТранзакцию();
		Попытка
			
			РегистрыСведений.СодержаниеКорректировокПланаПроизводства.ДобавитьВОчередь(Параметры.ПланПроизводства, ИзмененныеСтроки);
			
			РегистрыСведений.ОчередьРасчетаПланаПроизводства.ДобавитьЗадание(Сценарий , Параметры.ПланПроизводства);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТКА

&НаКлиенте
Процедура ЗаписатьКорректировку(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
//++ НЕ УТКА
	ЗаписатьКорректировкуНаСервере();
//-- НЕ УТКА
	
	ЗакрытьБезВопроса = Истина;
	Закрыть(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокКорректировок.ТекущиеДанные;
	
	ПриИзмененииДанныхСтроки(ТекущиеДанные);
	
	РассчитатьДатуЗапуска(ЭтаФорма, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗапускаВыпускаПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтроки(Элементы.СписокКорректировок.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокКорректировок.ТекущиеДанные;
	
	ПриИзмененииДанныхСтроки(ТекущиеДанные);
	
	ПериодПриИзмененииНаСервере(Элементы.СписокКорректировок.ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтроки(Элементы.СписокКорректировок.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтроки(Элементы.СписокКорректировок.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКорректировок

&НаКлиенте
Процедура СписокКорректировокПриАктивизацииСтроки(Элемент)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.СписокКорректировок, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПериодПриИзмененииНаСервере(ИдентификаторСтроки, КэшированныеЗначения)
	
	ТекущиеДанные = СписокКорректировок.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Неопределено, ТекущиеДанные, ПараметрыВыбораСпецификаций, ЭтаФорма);
	ПараметрыЗаполнения.ДанныеОбИзделии.НачалоПроизводства = ТекущиеДанные.Период;
		
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьДатуЗапуска(ЭтаФорма, ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
																			"СписокКорректировокХарактеристика",
																			"СписокКорректировок.ХарактеристикиИспользуются");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
																			"СписокКорректировокНазначение",
																			"СписокКорректировок.ТипНоменклатуры",
																			Ложь);
																			
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанные()
	
	Если НЕ ЗначениеЗаполнено(Параметры.Идентификаторы) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтборСтрок.Регистратор КАК Регистратор,
	|	ОтборСтрок.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ОтборСтрок
	|ИЗ
	|	&ОтборСтрок КАК ОтборСтрок
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ПланыПроизводства
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|ГДЕ
	|	(ПланыПроизводства.Регистратор, ПланыПроизводства.НомерСтроки) В
	|			(ВЫБРАТЬ
	|				ОтборСтрок.Регистратор,
	|				ОтборСтрок.НомерСтроки
	|			ИЗ
	|				ОтборСтрок КАК ОтборСтрок)
	|	
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	ПланыПроизводства.ПланПроизводства         КАК ПланПроизводства,
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.Назначение               КАК Назначение,
	|	ПланыПроизводства.Номенклатура             КАК Номенклатура,
	|	ПланыПроизводства.Характеристика           КАК Характеристика,
	|	
	|	СУММА(ISNULL(ПланыПотребленияМатериалов.Количество, 0)) КАК Количество,
	|	СУММА(ISNULL(ПланыПотребленияМатериалов.КЗаказу, 0)) КАК КЗаказу
	|	
	|ПОМЕСТИТЬ ПланыПотребления
	|ИЗ
	|	ПланыПроизводства КАК ПланыПроизводства
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
	|		   ПО ПланыПроизводства.ПланПроизводства         = ПланыПотребленияМатериалов.ПланПроизводства
	|			И ПланыПроизводства.ДатаВыпускаПолуфабриката = ПланыПотребленияМатериалов.Период
	|			И ПланыПроизводства.Назначение               = ПланыПотребленияМатериалов.Назначение
	|			И ПланыПроизводства.Номенклатура             = ПланыПотребленияМатериалов.Номенклатура
	|			И ПланыПроизводства.Характеристика           = ПланыПотребленияМатериалов.Характеристика
	|	
	|СГРУППИРОВАТЬ ПО
	|	ПланыПроизводства.ПланПроизводства,
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.Назначение,
	|	ПланыПроизводства.Номенклатура,
	|	ПланыПроизводства.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ISNULL(ПланыПотребленияМатериалов.Количество, 0)) <> 0 ИЛИ СУММА(ISNULL(ПланыПотребленияМатериалов.КЗаказу, 0)) <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*,
	|
	|	ПланыПроизводства.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПланыПроизводства.Спецификация КАК СпецификацияДоИзменения,
	|	ПланыПроизводства.Период КАК ПериодДоИзменения,
	|	ПланыПроизводства.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпускаДоИзменения,
	|
	|	ISNULL(ПланыПотребления.Количество, 0) КАК ИсходнаяПотребность,
	|	ISNULL(ПланыПотребления.КЗаказу, 0) КАК ИсходнаяПотребностьКЗаказу
	|ИЗ
	|	ПланыПроизводства КАК ПланыПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланыПотребления КАК ПланыПотребления
	|		   ПО ПланыПроизводства.ДатаВыпускаПолуфабриката = ПланыПотребления.ДатаВыпускаПолуфабриката
	|			И ПланыПроизводства.ПланПроизводства         = ПланыПотребления.ПланПроизводства
	|			И ПланыПроизводства.Назначение               = ПланыПотребления.Назначение
	|			И ПланыПроизводства.Номенклатура             = ПланыПотребления.Номенклатура
	|			И ПланыПроизводства.Характеристика           = ПланыПотребления.Характеристика
	|	
	|");
	
	ОтборСтрок = Новый ТаблицаЗначений();
	ОтборСтрок.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.РегистраторПланаПроизводства"));
	ОтборСтрок.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

	Для каждого КлючЗаписи Из Параметры.Идентификаторы Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок.Добавить(), КлючЗаписи);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ОтборСтрок", ОтборСтрок);
	
	УстановитьПривилегированныйРежим(Истина);
	СписокКорректировок.Загрузить(Запрос.Выполнить().Выгрузить());
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",            Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(СписокКорректировок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ПараметрыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Сценарий,
		"ПланированиеПоНазначениям");
	
	ЕстьДанныеДляКорректировки = ( СписокКорректировок.Количество() > 0 );
	
	Если ЕстьДанныеДляКорректировки Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибка;
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность = ЕстьДанныеДляКорректировки;
	
	ПоказыватьНазначения = ПараметрыСценария.ПланированиеПоНазначениям И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	Элементы.СписокКорректировокНазначение.Видимость = ПоказыватьНазначения;
	
	СтатусПлана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПланПроизводства, "Статус");
	Элементы.ГруппаКЗаказу.Видимость = СтатусПлана = Перечисления.СтатусыПланов.Утвержден;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСпецификаций()
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = "СписокКорректировок.Номенклатура";
	СвязиПараметровВыбора.Характеристика          = "СписокКорректировок.Характеристика";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "СписокКорректировок.Подразделение";
	СвязиПараметровВыбора.НаправлениеДеятельности = "СписокКорректировок.НаправлениеДеятельности";
	СвязиПараметровВыбора.НачалоПроизводства      = "НачалоПериодаПлана";
	
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Вставить("Элементы.СписокКорректировок.ТекущиеДанные.Спецификация", СвязиПараметровВыбора);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.Спецификация, ПараметрыВыбораСпецификаций);
	
	НачалоПериодаПлана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ПланПроизводства, "НачалоПериода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДанныхСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ЕстьИзменения = Истина;
	ДанныеСтроки.РучнаяКорректировка = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьДатуЗапуска(Форма, ТекущиеДанные)
	
	Если ЗначениеЗаполнено(Форма.Сценарий)
		И ЗначениеЗаполнено(ТекущиеДанные.Период)
		И ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		
		ИменаПолей = Новый Структура("ДатаВыпуска, ДатаЗапуска", "Период", "ДатаЗапускаВыпуска");
		
		ТекущиеДанные.ДатаЗапускаВыпуска = РассчитатьДатуЗапускаСервер(Форма.Сценарий,
																		ТекущиеДанные.Спецификация,
																		ТекущиеДанные.Период,
																		ТекущиеДанные.ДатаЗапускаВыпуска,
																		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Форма.Элементы.СписокКорректировок, Форма),
																		ИменаПолей,
																		Форма.СпособРасчетаПотребностейВМатериалах);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьДатуЗапускаСервер(Сценарий, Спецификация, ДатаВыпуска, ДатаЗапуска, ДанныеДоИзменения, ИменаПолей, СпособРасчетаМатериалов)
	
	Если ЗначениеЗаполнено(ДанныеДоИзменения[ИменаПолей.ДатаЗапуска])
		И ЗначениеЗаполнено(ДанныеДоИзменения[ИменаПолей.ДатаВыпуска])
		И ЗначениеЗаполнено(ДанныеДоИзменения.Спецификация) Тогда
		
		НормативнаяДатаЗапускаДоИзменения = Планирование.РассчитатьДатуЗапуска(
			Сценарий,
			ДанныеДоИзменения[ИменаПолей.ДатаВыпуска],
			ДанныеДоИзменения.Спецификация,
			СпособРасчетаМатериалов);
			
		Если НормативнаяДатаЗапускаДоИзменения <> ДанныеДоИзменения[ИменаПолей.ДатаЗапуска] Тогда
			
			Возврат ДатаЗапуска;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Планирование.РассчитатьДатуЗапуска(Сценарий, ДатаВыпуска, Спецификация, СпособРасчетаМатериалов);
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Функция ИзмененныеСтроки()
	
	ДатаСобытия = ТекущаяДатаСеанса();
	Автор = Пользователи.ТекущийПользователь();
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("КолонкиПоЗначению", Новый Структура("ДатаКорректировки, АвторКорректировки", ДатаСобытия, Автор));
	СтруктураВыгрузки.Вставить("ДругиеИменаКолонок", Новый Структура("ДатаЗапускаВыпуска, Период", "ДатаЗапуска", "ДатаВыпуска"));
	СтруктураВыгрузки.Вставить("ОтборСтрок", Новый Структура("ЕстьИзменения", Истина));
	
	ИзмененныеСтроки = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		СписокКорректировок,
		СтруктураВыгрузки.ОтборСтрок,
		"ПланПроизводства,
		|
		|Номенклатура,
		|Характеристика,
		|Назначение,
		|ДатаВыпускаПолуфабриката,
		|
		|Спецификация,
		|
		|ДатаЗапускаВыпуска,
		|Период,
		|
		|Количество,
		|КЗаказу,
		|
		|ИсходнаяПотребность,
		|ИсходнаяПотребностьКЗаказу,
		|
		|Комментарий
		|",
		СтруктураВыгрузки.КолонкиПоЗначению,
		СтруктураВыгрузки.ДругиеИменаКолонок);
	
	Возврат ИзмененныеСтроки;

КонецФункции

//-- НЕ УТКА

#КонецОбласти

