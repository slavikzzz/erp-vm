
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТ
#Область ОписаниеИсточника

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	ПараметрыОтражения.ПутьКДаннымОрганизация = "АналитикаУчетаПоПартнерам.Организация";
	ПараметрыОтражения.ПутьКДаннымРегистратор = "ДокументРегистратор";
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "АналитикаУчетаПоПартнерам.НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "ОбъектРасчетов.Подразделение";
	//++ НЕ УТКА
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки = "ОбъектРасчетов.ГруппаФинансовогоУчета";
	ПараметрыОтражения.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	ПараметрыОтражения.ПутьКДаннымДатаПогашения = "ДатаПлановогоПогашения";
	//-- НЕ УТКА
	ПараметрыОтражения.ПутьКДаннымВалюта = "Валюта";
	ПараметрыОтражения.РесурсыУпр.Добавить("ПредоплатаУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ДолгУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПредоплатаРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ДолгРегл");
	ПараметрыОтражения.РесурсыВал.Добавить("Предоплата");
	ПараметрыОтражения.РесурсыВал.Добавить("Долг");
	ПараметрыОтражения.ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Контрагенты;
	ОпределитьПоказатели(ПараметрыОтражения);
	
	ПараметрыОтражения.УсловиеДебет = СтрЗаменить(
		"ВЫБОР
		|		КОГДА ПсевдонимИсточникаДанных.Долг <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ДолгУпр <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ДолгРегл <> 0
		|			ТОГДА ПсевдонимИсточникаДанных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		КОГДА ПсевдонимИсточникаДанных.Предоплата <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ПредоплатаУпр <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ПредоплатаРегл <> 0
		|			ТОГДА ПсевдонимИсточникаДанных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	
	ПараметрыОтражения.УсловиеКредит = СтрЗаменить(
		"ВЫБОР
		|		КОГДА ПсевдонимИсточникаДанных.Долг <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ДолгУпр <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ДолгРегл <> 0
		|			ТОГДА ПсевдонимИсточникаДанных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		КОГДА ПсевдонимИсточникаДанных.Предоплата <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ПредоплатаУпр <> 0
		|		  ИЛИ ПсевдонимИсточникаДанных.ПредоплатаРегл <> 0
		|			ТОГДА ПсевдонимИсточникаДанных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов,
		Новый Структура(СвойстваИсточника, "ГФУРасчетов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.Заказ, "Подразделение");

	Возврат ИсточникиПодразделений;

КонецФункции

// Определяет источники направлений регистра и их свойства.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельностиКонтрагента, "НаправлениеДеятельностиКонтрагента");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("Партнер");
	МассивСубконто.Добавить("Контрагент");
	МассивСубконто.Добавить("Заказ");
	МассивСубконто.Добавить("Договор");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);

КонецФункции

// Определяет показатели в валюте регистра.
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалютеВзаиморасчетов, Новый Структура(СвойстваПоказателей, "Валюта"));
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет показатели в валюте регистра.
//
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиКоличества() Экспорт

	ПоказателиКоличества = Новый Соответствие;
	Возврат ПоказателиКоличества;

КонецФункции

//-- НЕ УТКА

// Определяет показатели регистра.
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "ПредоплатаРегл", "ВалютаРегл"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Предоплата", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

// Определяет показатели регистра
//
// Параметры:
//  ПараметрыОтражения - см. ПараметрыОтраженияДвиженийВФинансовомУчете()
//
Процедура ОпределитьПоказатели(ПараметрыОтражения)
	
	// Сумма предоплаты
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПредоплатаУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ПредоплатаРегл");
	ПараметрыОтраженияПоказателя.РесурсыВал.Добавить("Предоплата");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПредоплаты, ПараметрыОтраженияПоказателя);
	
	// Сумма постоплаты
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ДолгУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ДолгРегл");
	ПараметрыОтраженияПоказателя.РесурсыВал.Добавить("Долг");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПостоплаты, ПараметрыОтраженияПоказателя);
	
КонецПроцедуры

//-- НЕ УТ

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.183";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1d87b923-d170-44ae-9550-190d1f7da828");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет хозяйственную операцию для документа ""Взаимозачет задолженности"" с видом операции ""Перенос долга"",""Перенос аванса"".
	|Исправляет хозяйственную операцию ""Погашение задолженности"" на ""Перенос аванса"" для движений зачета оплат периодом даты платежа.
	|Изменение операции ""Оплата самозанятому"" на операцию ""Оплата поставщику"".
	|Исправляет время проведения документов ""Бронирование""
	|';
	|en = 'Перезаполняет хозяйственную операцию для документа ""Взаимозачет задолженности"" с видом операции ""Перенос долга"",""Перенос аванса"".
	|Исправляет хозяйственную операцию ""Погашение задолженности"" на ""Перенос аванса"" для движений зачета оплат периодом даты платежа.
	|Изменение операции ""Оплата самозанятому"" на операцию ""Оплата поставщику"".
	|Исправляет время проведения документов ""Бронирование""
	|'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра	= "РегистрНакопления.РасчетыСПоставщикамиПоСрокам";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщикамиПоСрокам.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|ГДЕ
	|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		И ВЫРАЗИТЬ(РасчетыСПоставщикамиПоСрокам.ДокументРегистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОпераций)
	|		И РасчетыСПоставщикамиПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|	ИЛИ
	|		РасчетыСПоставщикамиПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента)
	|		И НАЧАЛОПЕРИОДА(РасчетыСПоставщикамиПоСрокам.Период, ДЕНЬ) <> НАЧАЛОПЕРИОДА(РасчетыСПоставщикамиПоСрокам.ДатаВозникновения, ДЕНЬ)
	|		И РасчетыСПоставщикамиПоСрокам.Предоплата > 0 
	|		И РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И &ЗачетОплатПоДатеПлатежа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДвиженияРегистра
	|ГДЕ
	|	ДвиженияРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
	|
	// Исправить время движений документов ""Бронирование""
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Бронирование КАК Бронирование
	|	ПО Расчеты.ДокументРегистратор = Бронирование.Ссылка
	|ГДЕ
	|	ГОД(Расчеты.Период) = ГОД(Бронирование.Дата)
	|	И МЕСЯЦ(Расчеты.Период) = МЕСЯЦ(Бронирование.Дата)
	|	И ДЕНЬ(Расчеты.Период) = ДЕНЬ(Бронирование.Дата)
	|	И (ЧАС(Расчеты.Период) <> ЧАС(Бронирование.Дата)
	|		ИЛИ МИНУТА(Расчеты.Период) <> МИНУТА(Бронирование.Дата)
	|		ИЛИ СЕКУНДА(Расчеты.Период) <> СЕКУНДА(Бронирование.Дата))
	|";
	Запрос.УстановитьПараметр("ВидыОпераций", РегистрыНакопления.РасчетыСКлиентами.ВидыОпераций());
	Запрос.УстановитьПараметр("ЗачетОплатПоДатеПлатежа", Константы.ЗачетОплатПоДатеПлатежа.Получить() = 1);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	НастройкаХозяйственнойОперации = 
		Справочники.НастройкиХозяйственныхОпераций.НайтиПоРеквизиту("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	НеИспользуемаяНастройкаОперации = 
		Справочники.НастройкиХозяйственныхОпераций.НайтиПоРеквизиту("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому);
	
	Если ОбновляемыеДанные.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.ДокументРегистратор КАК Взаимозачет
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Движения
		|ГДЕ
		|	Движения.Регистратор В (&Регистраторы)
		|	И ВЫРАЗИТЬ(Движения.ДокументРегистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоДолгу)
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.ДокументРегистратор КАК Взаимозачет
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Движения
		|ГДЕ
		|	Движения.Регистратор В (&Регистраторы)
		|	И ВЫРАЗИТЬ(Движения.ДокументРегистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоАвансу)
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Движения
		|ГДЕ
		|	Движения.Регистратор В (&Регистраторы)
		|";
		Запрос.УстановитьПараметр("Регистраторы", ОбновляемыеДанные.ВыгрузитьКолонку("Регистратор"));
		Запрос.УстановитьПараметр("ВидыОперацийПоДолгу", РегистрыНакопления.РасчетыСКлиентами.ВидыОперацийПоДолгу());
		Запрос.УстановитьПараметр("ВидыОперацийПоАвансу", РегистрыНакопления.РасчетыСКлиентами.ВидыОперацийПоАвансу());
		Результаты = Запрос.ВыполнитьПакет();
		
		ПроблемныйРегистратор = Неопределено;
		ЗачетОплатПоДатеПлатежа = Константы.ЗачетОплатПоДатеПлатежа.Получить();
		ДанныеЗаменыОперации = РегистрыНакопления.РасчетыСКлиентами.ДанныеЗаменыОперации();
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.ИсточникДанных = ОбновляемыеДанные;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			ВзаимозачетПереносДолга = Результаты[0].Выгрузить().ВыгрузитьКолонку("Взаимозачет");
			ВзаимозачетПереносАванса = Результаты[1].Выгрузить().ВыгрузитьКолонку("Взаимозачет");
			ВыборкаПоРегистратору = Результаты[2].Выбрать();
			Пока ВыборкаПоРегистратору.Следующий() Цикл
				
				ПроблемныйРегистратор = ВыборкаПоРегистратору.Регистратор;
				
				Набор = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
				Набор.Прочитать();
				НаборТЗ = Набор.Выгрузить();
				КэшРеквизитов = Новый Соответствие;
				
				ЕстьИзменения = Ложь;
				Для Каждого Запись Из НаборТЗ Цикл
					#Область ЗаменаОперацииВзаимозачетЗадолженности
					Если Запись.ХозяйственнаяОперация = ДанныеЗаменыОперации.ОперацияВзаимозачет
						ИЛИ Запись.НастройкаХозяйственнойОперации = ДанныеЗаменыОперации.НастройкаВзаимозачет Тогда
						Если ВзаимозачетПереносДолга.Найти(Запись.ДокументРегистратор) <> Неопределено Тогда
							Запись.ХозяйственнаяОперация = ДанныеЗаменыОперации.ОперацияПереносДолга;
							Запись.НастройкаХозяйственнойОперации = ДанныеЗаменыОперации.НастройкаПереносДолга;
							ЕстьИзменения = Истина;
						ИначеЕсли ВзаимозачетПереносАванса.Найти(Запись.ДокументРегистратор) <> Неопределено Тогда
							Запись.ХозяйственнаяОперация = ДанныеЗаменыОперации.ОперацияПереносАванса;
							Запись.НастройкаХозяйственнойОперации = ДанныеЗаменыОперации.НастройкаПереносАванса;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЕсли;
					#КонецОбласти
					
					#Область ЗаменаОперацииПогашениеЗадолженностиКлиента
					Если Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента
						И НачалоДня(Запись.Период) <> НачалоДня(Запись.ДатаВозникновения)
						И Запись.Предоплата > 0 
						И Запись.ВидДвижения = ВидДвиженияНакопления.Расход
						И ЗачетОплатПоДатеПлатежа Тогда
						
						Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносАванса;
						Запись.НастройкаХозяйственнойОперации = ДанныеЗаменыОперации.НастройкаПереносАванса;
						
						СтруктураПоиска = Новый Структура("ДокументРегистратор,ВидДвижения,Долг",
							Запись.ДокументРегистратор,Запись.ВидДвижения,Запись.Предоплата);
						СтрокиДолга = НаборТЗ.НайтиСтроки(СтруктураПоиска);
						СтрокиДолга[0].ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносАванса;
						СтрокиДолга[0].НастройкаХозяйственнойОперации = ДанныеЗаменыОперации.НастройкаПереносАванса;
						
						ЕстьИзменения = Истина;
					КонецЕсли;
					#КонецОбласти
					
					#Область ЗаменаОперацииУдалитьОплатаСамозанятому
					Если Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому Тогда
						
						ЕстьИзменения = Истина;
						Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
						
						Если ЗначениеЗаполнено(Запись.НастройкаХозяйственнойОперации)
							И Запись.НастройкаХозяйственнойОперации = НеИспользуемаяНастройкаОперации Тогда
							Запись.НастройкаХозяйственнойОперации = НастройкаХозяйственнойОперации;
						КонецЕсли;
						
					КонецЕсли;
					#КонецОбласти
					
					#Область ИсправлениеВремениОперацииБронирования
					Если ТипЗнч(Запись.ДокументРегистратор) = Тип("ДокументСсылка.Бронирование") Тогда
						ДатаДокумента = КэшРеквизитов[Запись.ДокументРегистратор];
						Если ДатаДокумента = Неопределено Тогда
							ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ДокументРегистратор, "Дата");
							КэшРеквизитов.Вставить(Запись.ДокументРегистратор, ДатаДокумента);
						КонецЕсли;
						Если РегистрыНакопления.РасчетыСПоставщиками.ПроверитьИУстановитьВремяПериодаЗаписи(Запись, ДатаДокумента) Тогда
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЕсли;
					#КонецОбласти
					
				КонецЦикла;
				
				ИзменилисьИтоги = Ложь;
				Если ЕстьИзменения Тогда
					Набор.Загрузить(НаборТЗ);
					Если Набор.Количество() > 0 Тогда
						ИзменилисьИтоги = РегистрыНакопления.РасчетыСКлиентами.ЕстьИзмененияИтоговНабора(Набор);
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьИзменения И НЕ ИзменилисьИтоги Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Если ЗначениеЗаполнено(ПроблемныйРегистратор) Тогда
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ПроблемныйРегистратор);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
					ПроблемныйРегистратор,
					РегистрыНакопления.РасчетыСКлиентами.ТекстСообщенияОбОшибке(ИнформацияОбОшибке(), ПроблемныйРегистратор));
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить обработку данных регистра накопления ""Расчеты с поставщиками по срокам"", при обновлении по причине: %Причина%';
										|en = 'Cannot process data of the ""Vendor AR/AP by deadlines"" accumulation register when updating. Reason: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					МетаданныеРегистра,
					ТекстСообщения);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли