#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "Договор.НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "Договор.Подразделение";
	//++ НЕ УТКА
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки = "ГруппаФинансовогоУчета";
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "Договор.Подразделение";
	//-- НЕ УТКА
	ПараметрыОтражения.ПутьКДаннымВалюта = "Валюта";
	ПараметрыОтражения.РесурсыУпр.Добавить("АрендныеПлатежиУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("НГЛСУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ПроцентныйДисконтУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("АрендныеПлатежиРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("НГЛСРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПроцентныйДисконтРегл");
	ПараметрыОтражения.РесурсыВал.Добавить("АрендныеПлатежи");
	ПараметрыОтражения.РесурсыВал.Добавить("ПроцентныйДисконт");
	ПараметрыОтражения.ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
	ПараметрыОтражения.СтруктураАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(ПараметрыОтражения.ТипДанныхУчета));
	ПараметрыОтражения.СтруктураАналитики.СтатьяАктивовПассивов.Вставить("Значение", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ИнвестицииВАренду);
	ПараметрыОтражения.СтруктураАналитики.АналитикаАктивовПассивов.ПутьКДанным = "ОсновноеСредство";
	ПараметрыОтражения.СтруктураАналитики.Контрагент.ПутьКДанным = "Договор.Контрагент";
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - См. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
//
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ОбесценениеВНА.Имя;
	ИмяТаблицыИзменений = "ИнвестицииВАрендуИзменение"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
