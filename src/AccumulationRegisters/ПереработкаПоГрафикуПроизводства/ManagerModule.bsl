//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ Устарело_Переработка24

// Процедура отражает в регистре ЭтапыПроизводства факт оформления заказа переработчику.
//
// Параметры:
//  ТаблицаЭтаповГрафика - ТаблицаЗначений - таблица этапов производства на стороне, по которым необходимо
//                                             зафиксировать факт оформления заказа переработчику:
//    * Распоряжение - ДокументСсылка.ЗаказНаПроизводство - заказ на производство
//    * КодСтрокиЭтапыГрафик - Число - код строки этапа графика производства
//  ВызовИзОбработчикаОбновления - Булево - признак, что вызов выполняется из обработчика обновления.
//
Процедура ЗафиксироватьВводЗаказаПереработчикуПоЭтапамПроизводства(ТаблицаЭтаповГрафика, ВызовИзОбработчикаОбновления = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТаблицаЭтаповГрафика) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Распоряжение         КАК Распоряжение,
	|	Т.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ВТ_ЭтапыПереработки
	|ИЗ
	|	&ТаблицаЭтаповГрафика КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиЭтапыГрафик
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПроизводства.Распоряжение                         КАК Распоряжение,
	|	ЭтапыПроизводства.КодСтрокиПродукция                   КАК КодСтрокиПродукция,
	|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик                 КАК КодСтрокиЭтапыГрафик,
	|	ЭтапыПроизводства.Этап                                 КАК Этап,
	|	ЭтапыПроизводства.Подразделение                        КАК Подразделение,
	|	СУММА(ЭтапыПроизводства.ЗапланированоЗаказом)
	|	 - СУММА(ЭтапыПроизводства.Выполнено)                  КАК ЗапланированоОстаток
	|
	|ПОМЕСТИТЬ ВТ_ОстаткиЭтапов
	|
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭтапыПереработки КАК ЭтапыПереработки
	|		ПО ЭтапыПроизводства.Распоряжение = ЭтапыПереработки.Распоряжение
	|			И ЭтапыПроизводства.КодСтрокиЭтапыГрафик = ЭтапыПереработки.КодСтрокиЭтапыГрафик
	|
	|ГДЕ
	|	ЭтапыПроизводства.ПроизводствоНаСтороне
	|	И ЭтапыПроизводства.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводства.Распоряжение,
	|	ЭтапыПроизводства.КодСтрокиПродукция,
	|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик,
	|	ЭтапыПроизводства.Этап,
	|	ЭтапыПроизводства.Подразделение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЭтапыПроизводства.ЗапланированоЗаказом)
	|	 - СУММА(ЭтапыПроизводства.Выполнено) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереработкаПоГрафикуПроизводства.Распоряжение         КАК Распоряжение,
	|	ПереработкаПоГрафикуПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ПереработкаПоГрафикуПроизводства.Регистратор          КАК Регистратор,
	|	ЗаказПереработчику.Дата                               КАК Период
	|ПОМЕСТИТЬ ВТ_ПереработкаПоГрафикуПроизводства
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПереработкаПоГрафикуПроизводства.ЗаказНаПроизводство КАК Распоряжение,
	|		ПереработкаПоГрафикуПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|		МИНИМУМ(ПереработкаПоГрафикуПроизводства.Регистратор) КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.ПереработкаПоГрафикуПроизводства КАК ПереработкаПоГрафикуПроизводства
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭтапыПереработки КАК ЭтапыПереработки
	|			ПО ПереработкаПоГрафикуПроизводства.ЗаказНаПроизводство = ЭтапыПереработки.Распоряжение
	|				И ПереработкаПоГрафикуПроизводства.КодСтрокиЭтапыГрафик = ЭтапыПереработки.КодСтрокиЭтапыГрафик
	|	ГДЕ
	|		ПереработкаПоГрафикуПроизводства.Активность
	|		И ПереработкаПоГрафикуПроизводства.Регистратор ССЫЛКА Документ.ЗаказПереработчику
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПереработкаПоГрафикуПроизводства.ЗаказНаПроизводство,
	|		ПереработкаПоГрафикуПроизводства.КодСтрокиЭтапыГрафик) КАК ПереработкаПоГрафикуПроизводства
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|	ПО ПереработкаПоГрафикуПроизводства.Регистратор = ЗаказПереработчику.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереработкаПоГрафикуПроизводства.Регистратор КАК Регистратор,
	|	ПереработкаПоГрафикуПроизводства.Период      КАК Период,
	|	ОстаткиЭтапов.Распоряжение                   КАК Распоряжение,
	|	ОстаткиЭтапов.КодСтрокиПродукция             КАК КодСтрокиПродукция,
	|	ОстаткиЭтапов.КодСтрокиЭтапыГрафик           КАК КодСтрокиЭтапыГрафик,
	|	ОстаткиЭтапов.Этап                           КАК Этап,
	|	ОстаткиЭтапов.Подразделение                  КАК Подразделение,
	|	ОстаткиЭтапов.ЗапланированоОстаток           КАК ЗапланированоОстаток
	|ИЗ
	|	ВТ_ПереработкаПоГрафикуПроизводства КАК ПереработкаПоГрафикуПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиЭтапов КАК ОстаткиЭтапов
	|		ПО ПереработкаПоГрафикуПроизводства.Распоряжение = ОстаткиЭтапов.Распоряжение
	|			И ПереработкаПоГрафикуПроизводства.КодСтрокиЭтапыГрафик = ОстаткиЭтапов.КодСтрокиЭтапыГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Распоряжение,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик,
	|	Этап,
	|	Подразделение");
	
	Запрос.УстановитьПараметр("ТаблицаЭтаповГрафика", ТаблицаЭтаповГрафика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	
	НаборЗаписей = РегистрыНакопления.ЭтапыПроизводства.СоздатьНаборЗаписей();
	
	Пока ЕстьЗаписиВВыборке Цикл

		ТекРегистратор = Выборка.Регистратор;
		
		// Чтение существующего набора
		НаборЗаписей.Отбор.Регистратор.Установить(ТекРегистратор);
		НаборЗаписей.Прочитать();
		
		Пока ЕстьЗаписиВВыборке И Выборка.Регистратор = ТекРегистратор Цикл
			
			Запись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, Выборка, "Период,Распоряжение,КодСтрокиПродукция,КодСтрокиЭтапыГрафик,Этап,Подразделение");
			
			Запись.ПроизводствоНаСтороне = Истина;
			Запись.Выполнено             = Выборка.ЗапланированоОстаток;
			
			// Переход к следующей записи в выборке.
			ЕстьЗаписиВВыборке = Выборка.Следующий();

		КонецЦикла;
		
		// Запись и очистка набора.
		Если ВызовИзОбработчикаОбновления Тогда

			Попытка

				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

			Исключение

				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
				ВызватьИсключение;

			КонецПопытки;

		Иначе
			
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

//-- Устарело_Переработка24

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21