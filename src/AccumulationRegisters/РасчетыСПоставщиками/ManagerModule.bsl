#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.202";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("489f7d26-6bd5-7043-a55c-3d06d445974a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщиками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = СтрШаблон(НСтр("ru = 'Добавляет записи по увеличению и уменьшению ""К оплате"" в накладные по заказам и по графику договора.
	|Исправляет период движений по ресурсу ""%1"".
	|Для движения переноса задолженности:
	| - заполняет новые реквизиты ""Объект расчетов приемник"", ""Аналитика учета по партнерам приемник"", ""Сумма приемник""
	| - перезаполняет идентификаторы фин.записи.
	| - заменяет хозяйственную операцию ""Оплата самозанятому"" на операцию ""Оплата поставщику"".
	|Очищает движения ресурса ""Оплачивается"" по Заявкам на расходование средств с пустыми объектами расчетов.
	|Исправляет порядок операции движений по ресурсу ""%2""
	|Сбрасывает реквизит ""По данным объекта расчетов источника"" в случае если в движениях документа не заполнены реквизиты приемника.
	|Исправляет хозяйственную операцию для движения документов ""Взаимозачет задолженности"".
	|Заполняет реквизит ""По данным объекта расчетов источника"" в расчетах по срокам.
	|Исправляет время проведения документов ""Бронирование""
	|Исправление кор. аналитики для движений документов ""Взаимозачет задолженности"".
	|';
	|en = 'Добавляет записи по увеличению и уменьшению ""К оплате"" в накладные по заказам и по графику договора.
	|Исправляет период движений по ресурсу ""%1"".
	|Для движения переноса задолженности:
	| - заполняет новые реквизиты ""Объект расчетов приемник"", ""Аналитика учета по партнерам приемник"", ""Сумма приемник""
	| - перезаполняет идентификаторы фин.записи.
	| - заменяет хозяйственную операцию ""Оплата самозанятому"" на операцию ""Оплата поставщику"".
	|Очищает движения ресурса ""Оплачивается"" по Заявкам на расходование средств с пустыми объектами расчетов.
	|Исправляет порядок операции движений по ресурсу ""%2""
	|Сбрасывает реквизит ""По данным объекта расчетов источника"" в случае если в движениях документа не заполнены реквизиты приемника.
	|Исправляет хозяйственную операцию для движения документов ""Взаимозачет задолженности"".
	|Заполняет реквизит ""По данным объекта расчетов источника"" в расчетах по срокам.
	|Исправляет время проведения документов ""Бронирование""
	|Исправление кор. аналитики для движений документов ""Взаимозачет задолженности"".
	|'"),
	Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Ресурсы.КОплате.Представление(),
	Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Ресурсы.КПоступлению.Представление());
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.РасчетыСПоставщиками";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВтНакладныеПоГрафикам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО Аналитика.КлючАналитики = Регистр.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|			ПО Договоры.Ссылка = Аналитика.Договор
	|			И Договоры.ЗаданГрафикИсполнения
	|ГДЕ
	|	(Регистр.ЗакупкаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы)
	|		ИЛИ Договоры.Ссылка ЕСТЬ НЕ NULL)
	|	И НЕ Регистр.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистр.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Регистр.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Регистр.КПоступлению
	|			ИНАЧЕ - Регистр.КПоступлению
	|		КОНЕЦ) < 0	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная
	|ПОМЕСТИТЬ ВтОбъектыРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (РасчетыСПоставщиками.Регистратор = ОбъектыРасчетов.Объект)
	|ГДЕ
	|	РасчетыСПоставщиками.Сумма <> 0
	|	И НЕ РасчетыСПоставщиками.ЗакупкаПоЗаказу В (&ПустыеСсылкиНаЗаказы)
	|	И РасчетыСПоставщиками.ЗакупкаПоЗаказу.ПорядокРасчетов В(&ПорядкиРасчетов)
	|	И НЕ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРасчетовНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Накладные.Ссылка КАК Регистратор
	|ИЗ
	|	ВтНакладныеПоГрафикам КАК Накладные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК ЗаписиКОплате
	|			ПО ЗаписиКОплате.Регистратор = Накладные.Ссылка
	|				И ЗаписиКОплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ЗаписиКОплате.КОплате > 0
	|				И ЗаписиКОплате.АналитикаУчетаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК ЗаписиСумм
	|			ПО ЗаписиСумм.Регистратор = Накладные.Ссылка
	|				И ЗаписиСумм.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И ЗаписиСумм.Сумма > 0
	|ГДЕ
	|	ЗаписиКОплате.Регистратор ЕСТЬ NULL
	|	И ЗаписиСумм.Регистратор ЕСТЬ НЕ NULL
	|
	// Исправление кор.аналитики
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК КорРасчеты
	|	ПО Расчеты.Регистратор = КорРасчеты.Регистратор
	|		И Расчеты.КорАналитикаУчетаПоПартнерам = КорРасчеты.АналитикаУчетаПоПартнерам
	|		И Расчеты.КорОбъектРасчетов = КорРасчеты.ОбъектРасчетов
	|ГДЕ
	| 	Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	| 	И Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И КорРасчеты.ОбъектРасчетов ЕСТЬ NULL
	|
	// Исправление периода движения "К оплате"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.КОплате > 0
	|	И НАЧАЛОПЕРИОДА(Расчеты.Период,ДЕНЬ) < НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|
	// Заполнение идентификаторов и приемников
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемник.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Приемник
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Источник
	|	ПО Приемник.Регистратор = Источник.Регистратор
	|		И Приемник.КорАналитикаУчетаПоПартнерам = Источник.АналитикаУчетаПоПартнерам
	|		И Приемник.КорОбъектРасчетов = Источник.ОбъектРасчетов
	|		И Приемник.ХозяйственнаяОперация = Источник.ХозяйственнаяОперация
	| 		И Приемник.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	| 		И Источник.НастройкаХозяйственнойОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|ГДЕ
	| 	Приемник.ИдентификаторФинЗаписи <> Источник.ИдентификаторФинЗаписи
	| 	И НЕ Приемник.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК Взаимозачеты
	|	ПО Расчеты.Регистратор = Взаимозачеты.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Взаимозачеты.ОбъектРасчетовИнтеркампани,ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				И Расчеты.КорАналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И НЕ МАКСИМУМ(Расчеты.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|					И Расчеты.АналитикаУчетаПоПартнерамПриемник  <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДвиженияРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияРегистра
	|ГДЕ
	|	ДвиженияРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
	|
	// Очистка ресурса "Оплачивается"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Оплачивается <> 0
	|	И (Расчеты.ЗаявкаНаРасходованиеДенежныхСредств В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеРасшифровки.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровки
	|		ГДЕ
	|			ДанныеРасшифровки.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			И ДанныеРасшифровки.ОбъектРасчетов.Объект = Неопределено)
	|		ИЛИ НЕ Расчеты.ЗаявкаНаРасходованиеДенежныхСредств.КонтролироватьОплатуПоОбъектамРасчетов)
	|
	//Исправление порядка операции "КПоступлению"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.КПоступлению <> 0
	|	И НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ) <> НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|	И ПОДСТРОКА(Расчеты.ПорядокОперации, 0, 8) <> ПОДСТРОКА(Расчеты.ПорядокЗачетаПоДатеПлатежа, 0, 8)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ЗаказПоставщику)
	
	//++ НЕ УТКА
	|										,
	
	//++ Локализация
	|										ТИП(Документ.ЗаказПереработчику),
	//-- Локализация
	
	|										ТИП(Документ.ЗаказПереработчику2_5)
	//-- НЕ УТКА
	
	|										)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыПриемники
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК НеПустыеПриемники
	|	ПО РасчетыПриемники.Регистратор = НеПустыеПриемники.Регистратор
	|		И НеПустыеПриемники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НеПустыеПриемники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И НеПустыеПриемники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И НеПустыеПриемники.СуммаПриемник <> 0
	|ГДЕ
	|	НеПустыеПриемники.Регистратор ЕСТЬ NULL
	|	И РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И ТИПЗНАЧЕНИЯ(РасчетыПриемники.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
	|
	// Исправление остатков К оплате
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОбъектыРасчетов.Регистратор КАК Регистратор
	|ИЗ
	|	ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ОбъектРасчетов В
	|					(ВЫБРАТЬ
	|						Т.ОбъектРасчетовНакладная
	|					ИЗ
	|						ВтОбъектыРасчетов КАК Т)) КАК РасчетыСПоставщикамиОбороты
	|		ПО (ВтОбъектыРасчетов.Регистратор = РасчетыСПоставщикамиОбороты.Регистратор)
	|			И (ВтОбъектыРасчетов.ОбъектРасчетовНакладная = РасчетыСПоставщикамиОбороты.ОбъектРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОбъектыРасчетов.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.СуммаОборот, 0)) <> СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеОборот, 0))
	|
	// Исправление хозяйственной операции взаимозачета задолженности
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОпераций)
	|		И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|
	// Заполнение флага ПоДаннымОбъектаРасчетовИсточника в расчетах по срокам
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыИсточники.ДокументРегистратор КАК Регистратор,
	|		РасчетыИсточники.ОбъектРасчетовПриемник КАК ОбъектРасчетов,
	|		РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерам,
	|		РасчетыИсточники.ВалютаПриемник КАК Валюта,
	|		РасчетыИсточники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		
	|		РасчетыИсточники.СуммаПриемник КАК СуммаПриемник,
	|		0 КАК СуммаДолгПредлоплата
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыИсточники
	|	ГДЕ
	|		РасчетыИсточники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И РасчетыИсточники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|		И НЕ РасчетыИсточники.ПоДаннымОбъектаРасчетовИсточника
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПриемники.ДокументРегистратор КАК Регистратор,
	|		РасчетыПриемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыПриемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПриемники.Валюта КАК Валюта,
	|		РасчетыПриемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		
	|		0 КАК СуммаПриемник,
	|		РасчетыПриемники.Долг+РасчетыПриемники.Предоплата КАК СуммаДолгПредлоплата
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПриемники
	|	ГДЕ
	|		РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника) ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.СуммаПриемник) <> СУММА(ВложенныйЗапрос.СуммаДолгПредлоплата)
	|
	// Исправить время движений документов ""Бронирование""
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Бронирование КАК Бронирование
	|	ПО Расчеты.Регистратор = Бронирование.Ссылка
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|	И ГОД(Расчеты.Период) = ГОД(Бронирование.Дата)
	|	И МЕСЯЦ(Расчеты.Период) = МЕСЯЦ(Бронирование.Дата)
	|	И ДЕНЬ(Расчеты.Период) = ДЕНЬ(Бронирование.Дата)
	|	И (ЧАС(Расчеты.Период) <> ЧАС(Бронирование.Дата)
	|		ИЛИ МИНУТА(Расчеты.Период) <> МИНУТА(Бронирование.Дата)
	|		ИЛИ СЕКУНДА(Расчеты.Период) <> СЕКУНДА(Бронирование.Дата))
	|
	// Исправление кор. аналитики расчетов для взаимозачета задолженности
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника
	|	И (Расчеты.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ИЛИ Расчеты.КорАналитикаУчетаПопартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	МассивПорядковРасчетов = Новый Массив;
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	Запрос.УстановитьПараметр("ПорядкиРасчетов", МассивПорядковРасчетов);
	Запрос.УстановитьПараметр("ВидыОпераций", РегистрыНакопления.РасчетыСКлиентами.ВидыОпераций());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрНакопления.РасчетыСПоставщиками";
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".")[1];
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	#Область ТекстЗапроса
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО Аналитика.КлючАналитики = Регистр.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|			ПО Договоры.Ссылка = Аналитика.Договор
	|			И Договоры.ЗаданГрафикИсполнения
	|ГДЕ
	|	Регистр.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Регистр.КПоступлению > 0 
	|	И (Регистр.ЗакупкаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы)
	|		ИЛИ Договоры.Ссылка ЕСТЬ НЕ NULL)
	|	И Регистр.Регистратор В (ВЫБРАТЬ ВТДляОбработки.Регистратор ИЗ ВТДляОбработки)";
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	НакладныеПоГрафикам = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(КлючиАналитики.Организация, НЕОПРЕДЕЛЕНО) КАК Организация,
	|	ЕСТЬNULL(КлючиАналитики.Партнер, НЕОПРЕДЕЛЕНО) КАК Партнер,
	|	ЕСТЬNULL(КлючиАналитики.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	|	ЕСТЬNULL(КлючиАналитики.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ЕСТЬNULL(КлючиАналитики.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельности,
	|
	|	ДанныеРегистра.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	ДанныеРегистра.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(КорКлючиАналитики.Организация, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	ЕСТЬNULL(КорКлючиАналитики.Партнер, НЕОПРЕДЕЛЕНО) КАК КорПартнер,
	|	ЕСТЬNULL(КорКлючиАналитики.Контрагент, НЕОПРЕДЕЛЕНО) КАК КорКонтрагент,
	|	ЕСТЬNULL(КорКлючиАналитики.Договор, НЕОПРЕДЕЛЕНО) КАК КорДоговор,
	|	ЕСТЬNULL(КорКлючиАналитики.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК КорНаправлениеДеятельности
	|ИЗ 
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО ДанныеРегистра.Регистратор = СсылкиДляОбработки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КорКлючиАналитики
	|		ПО ДанныеРегистра.КорАналитикаУчетаПоПартнерам = КорКлючиАналитики.КлючАналитики
	|ГДЕ
	| 	ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|;
	|
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор,
	|	СсылкиДляОбработки.Регистратор.Номер КАК РегистраторНомер
	|ИЗ 
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыПриемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО РасчетыПриемники.Регистратор = СсылкиДляОбработки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК НеПустыеПриемники
	|	ПО РасчетыПриемники.Регистратор = НеПустыеПриемники.Регистратор
	|		И НеПустыеПриемники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НеПустыеПриемники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И НеПустыеПриемники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И НеПустыеПриемники.СуммаПриемник <> 0
	|ГДЕ
	|	НеПустыеПриемники.Регистратор ЕСТЬ NULL
	|	И РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И ТИПЗНАЧЕНИЯ(РасчетыПриемники.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная
	|ПОМЕСТИТЬ ВтОбъектыРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (РасчетыСПоставщиками.Регистратор = ОбъектыРасчетов.Объект)
	|ГДЕ
	|	РасчетыСПоставщиками.Сумма <> 0
	|	И НЕ РасчетыСПоставщиками.ЗакупкаПоЗаказу В (&ПустыеСсылкиНаЗаказы)
	|	И РасчетыСПоставщиками.ЗакупкаПоЗаказу.ПорядокРасчетов В(&ПорядкиРасчетов)
	|	И НЕ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРасчетовНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОбъектыРасчетов.Регистратор КАК Ссылка
	|ИЗ
	|	ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ОбъектРасчетов В
	|					(ВЫБРАТЬ
	|						Т.ОбъектРасчетовНакладная
	|					ИЗ
	|						ВтОбъектыРасчетов КАК Т)) КАК РасчетыСПоставщикамиОбороты
	|		ПО (ВтОбъектыРасчетов.Регистратор = РасчетыСПоставщикамиОбороты.Регистратор)
	|			И (ВтОбъектыРасчетов.ОбъектРасчетовНакладная = РасчетыСПоставщикамиОбороты.ОбъектРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОбъектыРасчетов.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.СуммаОборот, 0)) <> СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеОборот, 0))
	|;
	|
	// Исправление хозяйственных операций
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоДолгу)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоАвансу)
	|;
	// Заполнение флага ПоДаннымОбъектаРасчетовИсточника в расчетах по срокам
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.ДокументРегистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО РасчетыИсточники.ДокументРегистратор = СсылкиДляОбработки.Регистратор
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	НЕ РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|;
	|
	// Исправление кор. аналитики расчетов для взаимозачета задолженности
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника
	|	И (Расчеты.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ИЛИ Расчеты.КорАналитикаУчетаПопартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|";
	#КонецОбласти
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	МассивПорядковРасчетов = Новый Массив;
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	Запрос.УстановитьПараметр("ПорядкиРасчетов", МассивПорядковРасчетов);
	Запрос.УстановитьПараметр("ВидыОперацийПоДолгу", РегистрыНакопления.РасчетыСКлиентами.ВидыОперацийПоДолгу());
	Запрос.УстановитьПараметр("ВидыОперацийПоАвансу", РегистрыНакопления.РасчетыСКлиентами.ВидыОперацийПоАвансу());
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПоляКлючаАналитики =  РезультатыЗапроса[0].Выгрузить();
	ПоляПоискаКорАналитики = "Регистратор,КорОбъектРасчетов,КорАналитикаУчетаПоПартнерам";
	ПоляПоискаАналитики = "Регистратор,ОбъектРасчетов,Организация,Контрагент,Договор,НаправлениеДеятельности";
	ПоляКлючаАналитики.Индексы.Добавить(ПоляПоискаКорАналитики);
	ПоляКлючаАналитики.Индексы.Добавить(ПоляПоискаАналитики);
	
	ОбновляемыеДанные =  РезультатыЗапроса[1].Выбрать();
	ОчисткаФлагаПоДаннымИсточника = РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ИсправлениеОстатковКОплате = РезультатыЗапроса[4].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетПереносДолга = РезультатыЗапроса[5].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетПереносАванса = РезультатыЗапроса[6].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ЗаполнениеФлагаВРасчетахПоСрокам = РезультатыЗапроса[7].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетКорАналитика = РезультатыЗапроса[8].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	ЗапросВспомогательныхДанных = РегистрыНакопления.РасчетыСКлиентами.ЗапросВспомогательныхДанных(Ложь);
	ЗапросДанныхОперативногоРегистра = РегистрыНакопления.РасчетыСКлиентами.ЗапросДанныхОперативногоРегистра(Ложь);
	ЗапросКорАналитики = РегистрыНакопления.РасчетыСКлиентами.ЗапросКорАналитики();
	
	НастройкаХозяйственнойОперации = 
		Справочники.НастройкиХозяйственныхОпераций.НайтиПоРеквизиту("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	НеИспользуемаяНастройкаОперации = 
		Справочники.НастройкиХозяйственныхОпераций.НайтиПоРеквизиту("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому);
	ДанныеЗаменыОперации = РегистрыНакопления.РасчетыСКлиентами.ДанныеЗаменыОперации();
	
	Пока ОбновляемыеДанные.Следующий() Цикл
		
		ПроблемныйРегистратор = ОбновляемыеДанные.Регистратор;
		
		Если НоваяАрхитектураВзаиморасчетов Тогда
			ЗапросВспомогательныхДанных.УстановитьПараметр("Ссылка", ПроблемныйРегистратор);
			ВспомогательныеДанные = ЗапросВспомогательныхДанных.ВыполнитьПакет();
			РегистраторыРасчетов = ВспомогательныеДанные[0].Выгрузить();
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = "Блокировка";
			#Область Блокировки
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ПроблемныйРегистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если НоваяАрхитектураВзаиморасчетов Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.ИсточникДанных = РегистраторыРасчетов;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщикамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.ИсточникДанных = РегистраторыРасчетов;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			КонецЕсли;
			
			Блокировка.Заблокировать();
			#КонецОбласти
			
			ПричинаИсключения = "ПлохиеДанные";
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ПроблемныйРегистратор);
			НаборЗаписей.Прочитать();

			#Область ИсправлениеКорАналитики
			ДанныеНабора = НаборЗаписей.Выгрузить();
			СтарыеДанныеНабора = НаборЗаписей.Выгрузить();
			ОтметитьОбработку = Истина;
			ЕстьИзменения = Ложь;
			ДанныеНабора.Индексы.Добавить("АналитикаУчетаПоПартнерам,ОбъектРасчетов,НастройкаХозяйственнойОперации");
			ТаблицыДвижений = Неопределено;
			НовыеДанныеНабора = Неопределено;
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
				Для Каждого Запись Из ДанныеНабора Цикл
					
					Если НЕ ЗначениеЗаполнено(Запись.КорОбъектРасчетов) Тогда
						Продолжить;
					КонецЕсли;
					
					Отбор = Новый Структура("АналитикаУчетаПоПартнерам,ОбъектРасчетов");
					Отбор.ОбъектРасчетов = Запись.КорОбъектРасчетов;
					Отбор.АналитикаУчетаПоПартнерам = Запись.КорАналитикаУчетаПоПартнерам;
					СтрокиИсточники = ДанныеНабора.НайтиСтроки(Отбор);
					Если СтрокиИсточники.Количество() <> 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОтборКорАналитики = Новый Структура(ПоляПоискаКорАналитики);
					ОтборКорАналитики.Регистратор = ПроблемныйРегистратор;
					ОтборКорАналитики.КорОбъектРасчетов = Запись.КорОбъектРасчетов;
					ОтборКорАналитики.КорАналитикаУчетаПоПартнерам = Запись.КорАналитикаУчетаПоПартнерам;
					КорАналитика = ПоляКлючаАналитики.НайтиСтроки(ОтборКорАналитики);
					
					Если КорАналитика.Количество() = 0 Тогда
						ОтметитьОбработку = Ложь;
						Прервать;
					КонецЕсли;
					
					ОтборАналитики = Новый Структура(ПоляПоискаАналитики);
					ОтборАналитики.Регистратор = ПроблемныйРегистратор;
					ОтборАналитики.ОбъектРасчетов = Запись.КорОбъектРасчетов;
					ОтборАналитики.Организация = КорАналитика[0].КорОрганизация;
					ОтборАналитики.Контрагент = КорАналитика[0].КорКонтрагент;
					ОтборАналитики.Договор = КорАналитика[0].КорДоговор;
					ОтборАналитики.НаправлениеДеятельности = КорАналитика[0].КорНаправлениеДеятельности;
				
					Аналитика = ПоляКлючаАналитики.НайтиСтроки(ОтборАналитики);
					Если Аналитика.Количество() = 1 Тогда
						Запись.КорАналитикаУчетаПоПартнерам = Аналитика[0].АналитикаУчетаПоПартнерам;
						ЕстьИзменения = Истина;
					Иначе
						Если ТаблицыДвижений = Неопределено Тогда
							ТаблицыДвижений = Документы.ВзаимозачетЗадолженности.ДанныеДокументаДляПроведения(ПроблемныйРегистратор, ИмяОбъекта);
						КонецЕсли;
						НовыеДанныеНабора = ТаблицыДвижений.ТаблицаРасчетыСПоставщиками;
						Для Каждого Строка Из НовыеДанныеНабора Цикл
							НоваяСтрока = СтарыеДанныеНабора.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							НоваяСтрока.Сумма = -Строка.Сумма;
							НоваяСтрока.КОплате = -Строка.КОплате;
							НоваяСтрока.СуммаРегл = -Строка.СуммаРегл;
							НоваяСтрока.СуммаУпр = -Строка.СуммаУпр;
						КонецЦикла;
						КопияНабора = НовыеДанныеНабора.Скопировать();
						КопияНабора.Свернуть("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта","Сумма,КОплате,СуммаРегл,СуммаУпр");
						СтарыеДанныеНабора.Свернуть("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта","Сумма,КОплате,СуммаРегл,СуммаУпр");
						ОтборНулей = Новый Структура("Сумма,КОплате,СуммаРегл,СуммаУпр",0,0,0,0);
						СтрокиСНулями = СтарыеДанныеНабора.НайтиСтроки(ОтборНулей);
						Если СтрокиСНулями.Количество() <> КопияНабора.Количество() Тогда
							НовыеДанныеНабора = Неопределено;
							ОтметитьОбработку = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если НовыеДанныеНабора <> Неопределено Тогда
				НаборЗаписей.Загрузить(НовыеДанныеНабора);
			ИначеЕсли ЕстьИзменения Тогда
				НаборЗаписей.Загрузить(ДанныеНабора);
			КонецЕсли;
			#КонецОбласти

			#Область ИсправлениеХозяйственнойОперацииВзаимозачета
			Если ВзаимозачетПереносДолга.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				РегистрыНакопления.РасчетыСКлиентами.ЗаменитьХозяйственнуюОперацию(ДанныеЗаменыОперации, НаборЗаписей, Истина);
			ИначеЕсли ВзаимозачетПереносАванса.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				РегистрыНакопления.РасчетыСКлиентами.ЗаменитьХозяйственнуюОперацию(ДанныеЗаменыОперации, НаборЗаписей, Ложь);
			КонецЕсли;
			#КонецОбласти
			
			ТребуетсяЗаполнениеПриемников = Истина;
			#Область ЗаполнениеФлагаПоДаннымИсточникаВРасчетахПоСрокам
			Если ЗаполнениеФлагаВРасчетахПоСрокам.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ТребуетсяЗаполнениеПриемников = Ложь;
				РегистрыНакопления.РасчетыСКлиентами.ЗаполнитьФлагВРасчетахПоСрокам(НаборЗаписей, ВспомогательныеДанные, РегистраторыРасчетов);
			КонецЕсли;
			#КонецОбласти
			
			#Область ЗаполнениеПриемниковВОперативномРегистре
			Если ТребуетсяЗаполнениеПриемников Тогда
				ЕстьОшибка = Ложь;
				РегистрыНакопления.РасчетыСКлиентами.ЗаполнитьПриемникиВОперативномРегистре(НаборЗаписей, ЗапросДанныхОперативногоРегистра, ЕстьОшибка);
			КонецЕсли;//это новая архитектура взаиморасчетов
			#КонецОбласти
			
			#Область ОчисткаФлагаПоДаннымИсточника
			Если ОчисткаФлагаПоДаннымИсточника.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ТребуетсяЗаполнениеПриемников = Ложь;
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.ПоДаннымОбъектаРасчетовИсточника = Ложь;
				КонецЦикла;
			КонецЕсли;//это новая архитектура взаиморасчетов
			#КонецОбласти
			
			#Область ЗаполнитьРеквизитыПриемникиВРасчетахПоСрокам
			Если НоваяАрхитектураВзаиморасчетов И ТребуетсяЗаполнениеПриемников И НаборЗаписей.Модифицированность() И НЕ ЕстьОшибка Тогда
				ДанныеРаспределения = Новый Структура("НаборЗаписей,ВспомогательныеДанные,РегистраторыРасчетов",
						НаборЗаписей, ВспомогательныеДанные, РегистраторыРасчетов);
				РегистрыНакопления.РасчетыСКлиентами.ЗаполнитьПриемникиВРасчетахПоСрокам(ДанныеРаспределения, ЕстьОшибка);
			КонецЕсли;//был измен набор оперативного регистра
			#КонецОбласти
			
			ЕстьЗаявкиНаРасходованиеДенежныхСредств = Ложь;
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход
					И Запись.КОплате > 0 
					И НачалоДня(Запись.Период) < НачалоДня(Запись.ДатаРегистратора)
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатков")
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
					Запись.Период = Запись.ДатаРегистратора;
				КонецЕсли;
				
				Если Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому Тогда
					
					Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
					
					Если ЗначениеЗаполнено(Запись.НастройкаХозяйственнойОперации)
						И Запись.НастройкаХозяйственнойОперации = НеИспользуемаяНастройкаОперации Тогда
						Запись.НастройкаХозяйственнойОперации = НастройкаХозяйственнойОперации;
					КонецЕсли;
					
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
					ЕстьЗаявкиНаРасходованиеДенежныхСредств = Истина;
				КонецЕсли;
			КонецЦикла;
			
			#Область ОчисткаРесурсаОплачиваетсяПоЗаявкамНаРасходованиеСредств
			Если ЕстьЗаявкиНаРасходованиеДенежныхСредств Тогда
				ЗаявкиНаРасходованиеДенежныхСредств = НаборЗаписей.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
				РеквизитыЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаявкиНаРасходованиеДенежныхСредств,"КонтролироватьОплатуПоОбъектамРасчетов");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств)
						И Запись.Оплачивается <> 0 
						И НЕ РеквизитыЗаявок[Запись.ЗаявкаНаРасходованиеДенежныхСредств] Тогда
						Запись.Оплачивается = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			#Область ИсправлениеПорядкаОперации
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказПоставщику")
				//++ НЕ УТКА
				
				//++ Локализация
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказПереработчику")
				//-- Локализация
				
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказПереработчику2_5")
				//-- НЕ УТКА
				
				Тогда
				НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроблемныйРегистратор, "Номер");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.КПоступлению <> 0 Тогда
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(
							Запись.ДатаРегистратора,
							НомерДокумента,
							ТипЗнч(Запись.Регистратор),
							1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			#Область ИсправлениеОстатковКОплате
			Если НакладныеПоГрафикам.Найти(ПроблемныйРегистратор) <> Неопределено 
				Или ИсправлениеОстатковКОплате.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				
				ИмяРегистраРасчетов = Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Имя;
				ДанныеДляПроведения = ПроведениеДокументов.ДанныеДокументаДляПроведения(ПроблемныйРегистратор, ИмяРегистраРасчетов);
				НовыеДвижения = ДанныеДляПроведения["Таблица" + ИмяРегистраРасчетов];
				ВзаиморасчетыСервер.ДобавитьЗаполнитьПорядокРасчетовСПоставщиками(НовыеДвижения, ТипЗнч(ПроблемныйРегистратор));
				
				КолонкиИзмерений = "АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта,ВидДвижения";
				// Для контроля неизменности движений по ресурсам, кроме КОплате
				КолонкиРесурсов = "Сумма,Оплачивается,КПоступлению";
				ТаблицаДвижений = НаборЗаписей.Выгрузить();
				
				СтарыеДвижения = ТаблицаДвижений.Скопировать(,КолонкиИзмерений+","+КолонкиРесурсов);
				СтарыеДвижения.Свернуть(КолонкиИзмерений, КолонкиРесурсов);
				СтарыеДвижения.Сортировать(КолонкиИзмерений+","+КолонкиРесурсов);
				Индекс = СтарыеДвижения.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если СтарыеДвижения[Индекс].Сумма = 0
						И СтарыеДвижения[Индекс].Оплачивается = 0
						И СтарыеДвижения[Индекс].КПоступлению = 0 Тогда
						СтарыеДвижения.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
				
				ИдентификаторФинЗаписиКОплате = "";
				ЕстьИзменения = Ложь;
				Индекс = ТаблицаДвижений.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если ТаблицаДвижений[Индекс].КОплате <> 0 Тогда
						ТаблицаДвижений[Индекс].КОплате = 0;
						Если ТаблицаДвижений[Индекс].ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносАванса Тогда
							ИдентификаторФинЗаписиКОплате = ТаблицаДвижений[Индекс].ИдентификаторФинЗаписи;
						КонецЕсли;
						Если ТаблицаДвижений[Индекс].Сумма = 0
							И ТаблицаДвижений[Индекс].Оплачивается = 0
							И ТаблицаДвижений[Индекс].КПоступлению = 0 Тогда
							ТаблицаДвижений.Удалить(Индекс);
						КонецЕсли;
						ЕстьИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаКОплате Из НовыеДвижения Цикл
					Если СтрокаКОплате.КОплате <> 0 Тогда
						ЕстьИзменения = Истина;
						НоваяЗапись = ТаблицаДвижений.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаКОплате);
						НоваяЗапись.Сумма = 0;
						НоваяЗапись.СуммаУпр = 0;
						НоваяЗапись.СуммаРегл = 0;
						НоваяЗапись.ИдентификаторФинЗаписи = "";
						НоваяЗапись.Оплачивается = 0;
						НоваяЗапись.КПоступлению = 0;
						НоваяЗапись.Регистратор = ПроблемныйРегистратор;
						НоваяЗапись.Активность = Истина;
					КонецЕсли;
				КонецЦикла;
				
				НовыеДвижения = ТаблицаДвижений.Скопировать(,КолонкиИзмерений+","+КолонкиРесурсов);
				НовыеДвижения.Свернуть(КолонкиИзмерений, КолонкиРесурсов);
				НовыеДвижения.Сортировать(КолонкиИзмерений+","+КолонкиРесурсов);
				Индекс = НовыеДвижения.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если НовыеДвижения[Индекс].Сумма = 0
						И НовыеДвижения[Индекс].Оплачивается = 0
						И НовыеДвижения[Индекс].КПоступлению = 0 Тогда
						НовыеДвижения.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
				
				#Область КонтрольИтогов
				Если ЕстьИзменения И ТаблицыРавны(СтарыеДвижения, НовыеДвижения) Тогда
				
					ЗапросСвертки = Новый Запрос;
					ЗапросСвертки.Текст = 
					"ВЫБРАТЬ
					|	&ВсеПоля
					|ПОМЕСТИТЬ ВтДвижения
					|ИЗ
					|	&ТаблицаДвижений КАК ТаблицаДвижений
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	&ПоляГруппировки,
					|	&ПоляРесурсов
					|ИЗ
					|	ВтДвижения КАК Т
					|СГРУППИРОВАТЬ ПО
					|	&ПоляГруппировки";
					ЗапросСвертки.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
					КолонкиДляГруппировки = Новый Массив;
					ВсеКолонки = Новый Массив;
					КолонкиРесурсов = КолонкиРесурсов + ",КОплате";
					Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
						Если СтрНайти(КолонкиРесурсов, Колонка.Имя) = 0 
							И Колонка.Имя <> "СуммаУпр"
							И Колонка.Имя <> "СуммаРегл"
							И Колонка.Имя <> "ИдентификаторФинЗаписи"
							И Колонка.Имя <> "НомерСтроки"
							И Колонка.Имя <> "МоментВремени" Тогда
							КолонкиДляГруппировки.Добавить(Колонка.Имя);
						КонецЕсли;
						Если Колонка.Имя <> "МоментВремени" Тогда
							ВсеКолонки.Добавить(Колонка.Имя);
						КонецЕсли;
					КонецЦикла;
					КолонкиДляСуммирования = СтрРазделить(КолонкиРесурсов, ",");
					Индекс = 0;
					Пока Индекс < КолонкиДляСуммирования.Количество() Цикл
						КолонкиДляСуммирования[Индекс] = СтрШаблон("СУММА(%1) КАК %1", КолонкиДляСуммирования[Индекс]);
						Индекс = Индекс + 1;
					КонецЦикла;
					КолонкиДляСуммирования.Добавить("СУММА(СуммаУпр) КАК СуммаУпр");
					КолонкиДляСуммирования.Добавить("СУММА(СуммаРегл) КАК СуммаРегл");
					КолонкиДляСуммирования.Добавить("МАКСИМУМ(ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи");
					КолонкиДляСуммирования.Добавить("МАКСИМУМ(НомерСтроки) КАК НомерСтроки");
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ПоляГруппировки", СтрСоединить(КолонкиДляГруппировки,","));
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ВсеПоля", СтрСоединить(ВсеКолонки,","));
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ПоляРесурсов", СтрСоединить(КолонкиДляСуммирования,","));
					
					ТаблицаДвижений = ЗапросСвертки.Выполнить().Выгрузить();
					Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
						Если СтрокаДвижения.КОплате <> 0 
							И СтрокаДвижения.Сумма = 0
							И Не ЗначениеЗаполнено(СтрокаДвижения.ИдентификаторФинЗаписи) Тогда
							СтрокаДвижения.ИдентификаторФинЗаписи = ИдентификаторФинЗаписиКОплате;
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Загрузить(ТаблицаДвижений);
					
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'При выполнении обработчика обновления регистра накопления ""%1"" 
							|по исправлению остатков ""%2""изменились итоги остальных ресурсов в движениях документа 
							|%3, обработка документа не выполнена';
							|en = 'When running the update handler of the ""%1"" accumulation register 
							|to correct the ""%2"" balance, the totals of other resources in the 
							|""%3"" document records changed. The document is not processed'"),
						Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Представление(),
						Метаданные.РегистрыНакопления.РасчетыСПоставщиками.Ресурсы.КОплате.Представление(),
						ПроблемныйРегистратор);
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегистрыНакопления.РасчетыСПоставщиками, ,
						ТекстСообщения);
					
				КонецЕсли;
				#КонецОбласти
			КонецЕсли;
			#КонецОбласти
			
			#Область ИсправлениеВремениПроведенияБронирования
			Если НоваяАрхитектураВзаиморасчетов И ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.Бронирование") Тогда
				ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроблемныйРегистратор, "Дата");
				Для Каждого Запись Из НаборЗаписей Цикл
					ПроверитьИУстановитьВремяПериодаЗаписи(Запись, ДатаДокумента);
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			#Область ИсправлениеАналитикиРасчетовВзаимозачета
			Если ВзаимозачетКорАналитика.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				РегистрыНакопления.РасчетыСКлиентами.ИсправитьКорАналитикуВзаимозачета(ЗапросКорАналитики, НаборЗаписей);
			КонецЕсли;
			#КонецОбласти
			
			ИзменилисьИтоги = Ложь;
			Если НаборЗаписей.Количество() > 0 Тогда
				ИзменилисьИтоги = РегистрыНакопления.РасчетыСКлиентами.ЕстьИзмененияИтоговНабора(НаборЗаписей);
			КонецЕсли;
			Если НаборЗаписей.Модифицированность() И НЕ ИзменилисьИтоги Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ИначеЕсли ОтметитьОбработку Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Если ПричинаИсключения = "ПлохиеДанные" Тогда
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ПроблемныйРегистратор);
				Если ЗначениеЗаполнено(ПроблемныйРегистратор) Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
					ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
						ПроблемныйРегистратор,
						РегистрыНакопления.РасчетыСКлиентами.ТекстСообщенияОбОшибке(ИнформацияОбОшибке(), ПроблемныйРегистратор)
						+ Символы.ПС + РегистрыНакопления.РасчетыСКлиентами.ТекстПерепроведитеДокументВРучную());
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ТаблицыРавны(Таблица1, Таблица2)
	
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из Таблица1.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Результат = Истина;
	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		Результат = Ложь;
	КонецЕсли;
	Если Результат Тогда
		Для Счетчик = 0 По Таблица1.Количество() - 1 Цикл
			Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
						Таблица1[Счетчик],
						Таблица2[Счетчик],
						МассивКолонок) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

// Проверить и установить время периода записи.
// 
// Параметры:
//  Запись - РегистрНакопленияЗапись.РасчетыСПоставщиками - Запись
//  ДатаДокумента - Дата - Дата документа
// 
// Возвращаемое значение:
//  Булево - Истина если время было изменено
//
Функция ПроверитьИУстановитьВремяПериодаЗаписи(Запись, ДатаДокумента) Экспорт
	
	ЕстьИзменения = Ложь;
	Если Год(Запись.Период) = Год(ДатаДокумента)
		И Месяц(Запись.Период) = Месяц(ДатаДокумента)
		И День(Запись.Период) = День(ДатаДокумента)
		И (Час(Запись.Период) <> Час(ДатаДокумента)
			ИЛИ Минута(Запись.Период) <> Минута(ДатаДокумента)
			ИЛИ Секунда(Запись.Период) <> Секунда(ДатаДокумента))Тогда
		Запись.Период = Дата(
			Год(ДатаДокумента),
			Месяц(ДатаДокумента),
			День(ДатаДокумента),
			Час(ДатаДокумента),
			Минута(ДатаДокумента),
			Секунда(ДатаДокумента));
		ЕстьИзменения = Истина;
	КонецЕсли;
		
	Возврат ЕстьИзменения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли