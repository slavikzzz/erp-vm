#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует текст запроса для формирования движений по регистру "Активы и пассивы".
// 
// Параметры:
// 	ЕстьВтПартииПрочихРасходов - Булево
// Возвращаемое значение:
// 	Строка - 
//
Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(ЕстьВтПартииПрочихРасходов = Истина) Экспорт
	
	ТекстЗапроса = "
	// Отражение уменьшения пассивов у организации - источника.
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	Строки.Организация КАК Аналитика,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|СГРУППИРОВАТЬ ПО
	|	Строки.Период,
	|	Строки.Организация,
	|	Строки.Подразделение,
	|	Строки.НаправлениеДеятельности
	|
	// Отражение увеличения пассивов учете у организации - получателя.
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Строки.ОрганизацияПолучатель КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	Строки.ОрганизацияПолучатель КАК Аналитика,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|СГРУППИРОВАТЬ ПО
	|	Строки.Период,
	|	Строки.ОрганизацияПолучатель,
	|	Строки.Подразделение,
	|	Строки.НаправлениеДеятельности
	|";
	Если ЕстьВтПартииПрочихРасходов Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
		// Отражение уменьшения пассивов у организации - источника.
		|ВЫБРАТЬ
		|	Строки.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	Строки.Организация КАК Организация,
		|	Строки.Подразделение КАК Подразделение,
		|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
		|	Строки.Организация КАК Аналитика,
		|	СУММА(Строки.Стоимость) КАК Сумма
		|ИЗ
		|	ВтПартииПрочихРасходов КАК Строки
		|ГДЕ
		|	Строки.ОрганизацияПолучатель <> Строки.Организация
		|СГРУППИРОВАТЬ ПО
		|	Строки.Период,
		|	Строки.Организация,
		|	Строки.Подразделение,
		|	Строки.НаправлениеДеятельности
		|
		// Отражение увеличения пассивов учете у организации - получателя.
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Строки.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	Строки.ОрганизацияПолучатель КАК Организация,
		|	Строки.Подразделение КАК Подразделение,
		|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
		|	Строки.ОрганизацияПолучатель КАК Аналитика,
		|	СУММА(Строки.Стоимость) КАК Сумма
		|ИЗ
		|	ВтПартииПрочихРасходов КАК Строки
		|ГДЕ
		|	Строки.ОрганизацияПолучатель <> Строки.Организация
		|СГРУППИРОВАТЬ ПО
		|	Строки.Период,
		|	Строки.ОрганизацияПолучатель,
		|	Строки.Подразделение,
		|	Строки.НаправлениеДеятельности
		|";
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийПрочиеАктивыПассивы";
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|ГДЕ
	|	НЕ Таблица.РасчетСебестоимости
	|	И Таблица.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиУправленческогоБаланса.ПустаяСсылка)
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, "ФинансовыйКонтур");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);

	Возврат СтруктураТекстовЗапросов

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.13.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7920b57b-af75-4d1b-bd3a-8a9f8fc9dcbf");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеАктивыПассивы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет пустое значение измерения ""Аналитика"".';
									|en = 'Fixes an empty value of the Dimension dimension.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаОбъектов = ТипыДокументовКОбработке();
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПараметрыВыборки.ПолныеИменаРегистров;
	
	МассивПустыхСсылок = Новый Массив;
	Для Каждого ТипСсылки Из Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип.Типы() Цикл
		МассивПустыхСсылок.Добавить(Новый(ТипСсылки));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыПассивы КАК Движения
	|ГДЕ
	|	Движения.Аналитика В (&МассивПустыхСсылок)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РазмерПорции = 10000;
	Регистраторы = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Регистраторы.Добавить(Выборка.Регистратор);
		Если Регистраторы.Количество() = РазмерПорции Тогда
			ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
			Регистраторы.Очистить();
		КонецЕсли;
	КонецЦикла;
	Если Регистраторы.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	// Обработка данных по 10 000 наборов за транзакцию повышает вероятность ожидания блокировки при работе 
	// пользователей с обрабатываемыми регистраторами. Сделано дробление по 100 наборов за транзакцию
	РазмерПорции = 100;
	ОбновляемыеДанные.Колонки.Добавить("НомерПорции", Новый ОписаниеТипов("Число"));
	ОбновляемыеДанные.Индексы.Добавить("НомерПорции");
	КоличествоПорций = 1;
	Для Каждого СтрокаДанных Из ОбновляемыеДанные Цикл
		СтрокаДанных.НомерПорции = КоличествоПорций;
		Если (ОбновляемыеДанные.Индекс(СтрокаДанных) + 1) % РазмерПорции = 0 Тогда
			КоличествоПорций = КоличествоПорций + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновляемыеДанные.Количество() > 0 Тогда
		
		Для СчетчикПорции = 1 По КоличествоПорций Цикл
			
			ПорцияОбновляемыхДанных = ОбновляемыеДанные.Скопировать(Новый Структура("НомерПорции", СчетчикПорции));
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления.ПрочиеАктивыПассивы КАК Движения
			|ГДЕ
			|	Движения.Регистратор В (&Регистраторы)
			|ИТОГИ ПО
			|	Регистратор
			|";
			
			Запрос.УстановитьПараметр("Регистраторы", ПорцияОбновляемыхДанных.ВыгрузитьКолонку("Регистратор"));
			ПроблемныйРегистратор = Неопределено;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.ИсточникДанных = ПорцияОбновляемыхДанных;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
				Блокировка.Заблокировать();
				
				Результат = Запрос.Выполнить();
				ВыборкаПоРегистратору = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоРегистратору.Следующий() Цикл
					
					ПроблемныйРегистратор = ВыборкаПоРегистратору.Регистратор;
					ВыборкаДетальныеЗаписи = ВыборкаПоРегистратору.Выбрать();
					ЕстьИзменения = Ложь;
					Набор = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						НоваяЗапись = Набор.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
						Если Не ЗначениеЗаполнено(НоваяЗапись.Аналитика)
							И НоваяЗапись.Аналитика <> Неопределено Тогда
							НоваяЗапись.Аналитика = Неопределено;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
					
					Если ЕстьИзменения Тогда
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
					Иначе
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоРегистратору.Регистратор, ДополнительныеПараметры);
					КонецЕсли;
					
					СтрокаДанных = ПорцияОбновляемыхДанных.Найти(ВыборкаПоРегистратору.Регистратор, "Регистратор");
					Если СтрокаДанных <> Неопределено Тогда
						ПорцияОбновляемыхДанных.Удалить(СтрокаДанных);
					КонецЕсли;
				
				КонецЦикла;
		
				// Если у регистратора, зарегистрированного к обработке записи удалены.
				Для Каждого СтрокаДанных Из ПорцияОбновляемыхДанных Цикл
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаДанных.Регистратор, ДополнительныеПараметры);
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Если ЗначениеЗаполнено(ПроблемныйРегистратор) Тогда
					ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ПроблемныйРегистратор);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось выполнить обработку данных регистра накопления Активы и пассивы, при обновлении по причине: %Причина%';
											|en = 'Cannot process data of the Assets and liabilities accumulation register when updating. Reason: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы,
						ТекстСообщения);
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;

	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТипыДокументовКОбработке()
	
	СписокТипов = Новый Массив;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если Документ.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы) Тогда
			СписокТипов.Добавить(Документ.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(СписокТипов, ",");
		
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
