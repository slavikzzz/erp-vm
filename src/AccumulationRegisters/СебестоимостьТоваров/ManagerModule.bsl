#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийСебестоимостьТоваров"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ НЕ УТ

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = СтрЗаменить(
		"ВЫБОР
		|		КОГДА ПсевдонимИсточникаДанных.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
		|			И ПсевдонимИсточникаДанных.Партия ССЫЛКА Справочник.ПартииПроизводства
		|			ТОГДА ВЫРАЗИТЬ(ПсевдонимИсточникаДанных.Партия КАК Справочник.ПартииПроизводства).НаправлениеДеятельности
		|		ИНАЧЕ ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
		|	КОНЕЦ",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	ПараметрыОтражения.ПутьКДаннымПодразделение = СтрЗаменить(
		"ВЫБОР
		|		КОГДА ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения ССЫЛКА Справочник.СтруктураПредприятия
		|			ТОГДА ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения
		|		КОГДА ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения ССЫЛКА Справочник.Склады
		|			ТОГДА ВЫРАЗИТЬ(ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.МестоХранения КАК Справочник.Склады).Подразделение
		|		ИНАЧЕ ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.Подразделение
		|	КОНЕЦ",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
		
	//++ НЕ УТКА
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "АналитикаУчетаНоменклатуры.МестоХранения";
	//-- НЕ УТКА
	ПараметрыОтражения.РесурсыУпр.Добавить("СтоимостьУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ДопРасходыУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ТрудозатратыУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	ПараметрыОтражения.РесурсыУпр.Добавить("РезервПодОбесценениеУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СтоимостьРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ДопРасходыРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ТрудозатратыРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	ПараметрыОтражения.РесурсыРегл.Добавить("РезервПодОбесценениеРегл");
	ПараметрыОтражения.РесурсыКоличество.Добавить("Количество");
	ПараметрыОтражения.ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Номенклатура;
	ПараметрыОтражения.ПутьКДаннымДопНастройкаХозОперации = СтрЗаменить(
		"ВЫБОР
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.РеализацияБезПереходаПраваСобственности)
		|			ТОГДА ВЫБОР
		|				КОГДА ПсевдонимИсточникаДанных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИЛИ ПсевдонимИсточникаДанных.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтгрузкаБезПереходаПраваСобственности)
		|				ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|			КОНЕЦ
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации В (ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииПостатейные),
		|			ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииТрудозатраты))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукции)
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетКомитентуОСписании)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтражениеЗадолженностиПередКомитентом)
		|		КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВнутреннееПоступлениеТоваров)
		|		КОГДА ПсевдонимИсточникаДанных.АналитикаУчетаНоменклатуры.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПоставкаПодПринципала)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПриемкаПодПринципала)
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетДавальцу2_5)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаДавальцу2_5)
		|		КОГДА ПсевдонимИсточникаДанных.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|			ТОГДА ВЫБОР
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноПоступления)
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПриобретенияПрошлогоПериода)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗакупкаУПоставщика)
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПриобретенияСоСписаниемНаРасходы)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию)
		|				ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|			КОНЕЦ
		|		КОГДА ПсевдонимИсточникаДанных.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫБОР
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВозвратТоваровОтКлиентаПрошлыхПериодов)
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионераПрошлыхПериодов)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВозвратТоваровЧерезКомиссионераПрошлыхПериодов)
		|				КОГДА ПсевдонимИсточникаДанных.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноРеализации)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноРеализации)
		|				ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|			КОНЕЦ
		|		ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|	КОНЕЦ",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	ОпределитьПоказатели(ПараметрыОтражения);
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

// Определяет показатели регистра
//
// Параметры:
//  ПараметрыОтражения - см. ПараметрыОтраженияДвиженийВФинансовомУчете()
//
Процедура ОпределитьПоказатели(ПараметрыОтражения)
	
	// Стоимость
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("СтоимостьУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("СтоимостьРегл");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Стоимость, ПараметрыОтраженияПоказателя);
	
	// Стоимость без НДС
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("СтоимостьБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС, ПараметрыОтраженияПоказателя);
	
	// Сумма НДС стоимости
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("Стоимость");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-СтоимостьБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДССтоимости, ПараметрыОтраженияПоказателя);
	
	// Доп расходы
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ДопРасходыУпр");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ТрудозатратыУпр");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ДопРасходыРегл");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ТрудозатратыРегл");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходов, ПараметрыОтраженияПоказателя);
	
	// Доп расходы без НДС
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ДопРасходыБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("Трудозатраты");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПостоянныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПеременныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходовБезНДС, ПараметрыОтраженияПоказателя);
	
	// Сумма НДС доп расходов
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ДопРасходы");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПостоянныеСНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("ПостатейныеПеременныеСНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-ДопРасходыБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-ПостатейныеПостоянныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("-ПостатейныеПеременныеБезНДС");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("0");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСДопРасходов, ПараметрыОтраженияПоказателя);
	
	// Резерв под обесценение
	ПараметрыОтраженияПоказателя = Перечисления.ПоказателиАналитическихРегистров.ПараметрыОтраженияПоказателя();
	ПараметрыОтраженияПоказателя.РесурсыУпр.Добавить("РезервПодОбесценениеУпр");
	ПараметрыОтраженияПоказателя.РесурсыРегл.Добавить("РезервПодОбесценениеРегл");
	ПараметрыОтраженияПоказателя.РесурсыКоличество.Добавить("0");
	ПараметрыОтражения.Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.РезервПодОбесценение, ПараметрыОтраженияПоказателя);
	
КонецПроцедуры

//-- НЕ УТ

#Область СохранениеДвижений

// Добавляет в дополнительные свойства документа служебное свойство,
// в котором сохраняются дата начала и окончания периода,
// за который необходимо сохранить движения из ИБ в записываемый набор записей регистра.
//
Процедура ИнициализироватьСохранениеДвиженийДокументаЗаПериод(ДополнительныеСвойстваДокумента,
			НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	ДополнительныеСвойстваДокумента.Вставить("ДополнитьДвижениямиИзИБЗаПериод", Новый Структура);
	
	ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод.Вставить(
		"НачалоПериода",
		?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, Дата(1,1,1)));
	
	ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод.Вставить(
		"КонецПериода", 
		?(ЗначениеЗаполнено(КонецПериода),  КонецПериода,  ДобавитьМесяц(КонецМесяца(ТекущаяДатаСеанса()), 12*100)));
	
КонецПроцедуры

Процедура ИнициализироватьСохранениеДвиженийНабораЗаписейЗаПериод(Движение, ДополнительныеСвойстваДокумента) Экспорт
	
	Если ДополнительныеСвойстваДокумента.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		
		Движение.ДополнительныеСвойства.Вставить(
			"ДополнитьДвижениямиИзИБЗаПериод",
			ДополнительныеСвойстваДокумента.ДополнитьДвижениямиИзИБЗаПериод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
