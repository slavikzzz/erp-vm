#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ПО АналитикаУчетаПоПартнерам.КлючАналитики = ЭтотСписок.АналитикаУчетаПоПартнерам
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = АналитикаУчетаПоПартнерам.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонтрольИтогов

// Есть изменения итогов набора.
// 
// Параметры:
//  Набор - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами,
//          РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками,
//          РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоСрокам,
//          РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоСрокам.
// 
// Возвращаемое значение:
//  Булево - Есть изменения итогов набора
Функция ЕстьИзмененияИтоговНабора(Набор) Экспорт
	
	Если НЕ Набор.Модифицированность() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоРасчетыСКлиентами = 
		ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами")
		ИЛИ ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоСрокам");
		
	Если ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентами")
		ИЛИ ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками") Тогда
		ТекстЗапроса = ТекстЗапросаРасчеты(ЭтоРасчетыСКлиентами);
		
	ИначеЕсли ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСКлиентамиПоСрокам")
		ИЛИ ТипЗнч(Набор) = Тип("РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоСрокам") Тогда
		ТекстЗапроса = ТекстЗапросаРасчетыПоСрокам(ЭтоРасчетыСКлиентами);
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось определить таблицу для сравнения итогов набора записей.';
							|en = 'Не удалось определить таблицу для сравнения итогов набора записей.'");
		ВызватьИсключение(ТекстОшибки, КатегорияОшибки.ОшибкаКонфигурации);
	КонецЕсли;
	ПроблемныйРегистратор = Набор.Отбор.Регистратор.Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", ПроблемныйРегистратор);
	Запрос.УстановитьПараметр("НовыеДвижения", Набор.Выгрузить());
	РезультатСравнения = Запрос.Выполнить().Выгрузить();
	
	ЕстьИзменения = РезультатСравнения.Количество() > 0;
	Если ЕстьИзменения Тогда
		РезультатСравнения.Свернуть("Регистратор");
		Для Каждого Запись Из РезультатСравнения Цикл
			СтрокиТекста = Новый Массив;
			СтрокиТекста.Добавить(НСтр("ru = 'После обновления изменились итоги ресурсов в движениях документа. Обновление документа отменено.';
										|en = 'После обновления изменились итоги ресурсов в движениях документа. Обновление документа отменено.'"));
			СтрокиТекста.Добавить(ТекстПерепроведитеДокументВРучную());
			ТекстРекомендации = СтрСоединить(СтрокиТекста, Символы.ПС);
			ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
				Запись.Регистратор,
				ТекстРекомендации);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

Функция ТекстЗапросаРасчеты(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.ВидДвижения КАК ВидДвижения,
	|	Расчеты.Регистратор КАК Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Сумма КАК Сумма
	|ПОМЕСТИТЬ втНовыеДвижения
	|ИЗ
	|	&НовыеДвижения КАК Расчеты
	|;
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта КАК Валюта,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.Регистратор КАК Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		-ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Сумма
	|			ИНАЧЕ Расчеты.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Регистратор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НовыеДвижения.Регистратор КАК Регистратор,
	|		НовыеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		НовыеДвижения.ОбъектРасчетов КАК ОбъектРасчетов,
	|		НовыеДвижения.Валюта КАК Валюта,
	|		ВЫБОР КОГДА НовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -НовыеДвижения.Сумма
	|			ИНАЧЕ НовыеДвижения.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		втНовыеДвижения КАК НовыеДвижения
	|	) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Сумма) <> 0
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрНакопления.РасчетыСКлиентами",
			"РегистрНакопления.РасчетыСПоставщиками"
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыПоСрокам(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.ВидДвижения КАК ВидДвижения,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.Предоплата КАК Предоплата,
	|	Расчеты.Долг КАК Долг
	|ПОМЕСТИТЬ втНовыеДвижения
	|ИЗ
	|	&НовыеДвижения КАК Расчеты
	|;
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта КАК Валюта,
	|	СУММА(ВложенныйЗапрос.Предоплата) КАК Предоплата,
	|	СУММА(ВложенныйЗапрос.Долг) КАК Долг
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.ДокументРегистратор КАК Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.Валюта КАК Валюта,
	|		-ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Предоплата
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -Расчеты.Долг
	|			ИНАЧЕ Расчеты.Долг
	|		КОНЕЦ КАК Долг
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Регистратор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НовыеДвижения.ДокументРегистратор КАК Регистратор,
	|		НовыеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		НовыеДвижения.ОбъектРасчетов КАК ОбъектРасчетов,
	|		НовыеДвижения.Валюта КАК Валюта,
	|		ВЫБОР КОГДА НовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -НовыеДвижения.Предоплата
	|			ИНАЧЕ НовыеДвижения.Предоплата
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР КОГДА НовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -НовыеДвижения.Долг
	|			ИНАЧЕ НовыеДвижения.Долг
	|		КОНЕЦ КАК Долг
	|	ИЗ
	|		втНовыеДвижения КАК НовыеДвижения
	|	) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Предоплата) <> 0
	|	ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
			"РегистрНакопления.РасчетыСПоставщикамиПоСрокам"
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст рекомендации для документа в случае не удачного обновления регистра
//
Функция ТекстПерепроведитеДокументВРучную() Экспорт
	
	Возврат НСтр("ru = 'Перепроведите документ вручную.';
				|en = 'Перепроведите документ вручную.'");
	
КонецФункции

// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//  ПроблемныйРегистратор - ДокументСсылка - Проблемный регистратор
// 
// Возвращаемое значение:
//  Строка - Текст сообщения об ошибке
Функция ТекстСообщенияОбОшибке(ИнформацияОбОшибке, ПроблемныйРегистратор) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Не удалось обновить документ: %Объект% по причине: %Причина%';
							|en = 'Не удалось обновить документ: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", ПроблемныйРегистратор);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Возврат ТекстСообщения;
	
Конецфункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.205";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("489f7d26-6bd5-7943-a55c-3d06d445974a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = СтрШаблон(НСтр("ru = 'Добавляет записи по увеличению и уменьшению ""К оплате"" в накладные по заказам и по графику договора.
	|Исправляет период движений по ресурсу ""%1"".
	|Удаляет движения по заказам по передаче на хранение в регистре ""Расчеты с клиентами"".
	|Для движения переноса задолженности:
	| - заполняет новые реквизиты ""Объект расчетов приемник"", ""Аналитика учета по партнерам приемник"", ""Сумма приемник""
	| - перезаполняет идентификаторы фин.записи.
	|Очищает движения ресурса ""Оплачивается"" по Заявкам на расходование средств с пустыми объектами расчетов.
	|Исправляет порядок операции движений по ресурсу ""%2"" 
	|Перезаполняет поле ""Порядок зачета по дате платежа"" для платежных документов.
	|Сбрасывает реквизит ""По данным объекта расчетов источника"" в случае если в движениях документа не заполнены реквизиты приемника.
	|Исправляет хозяйственную операцию для движения документов ""Взаимозачет задолженности"". 
	|Заполняет реквизит ""По данным объекта расчетов источника"" в расчетах по срокам.
	|Исправление кор. аналитики для движений документов ""Взаимозачет задолженности"".
	|';
	|en = 'Добавляет записи по увеличению и уменьшению ""К оплате"" в накладные по заказам и по графику договора.
	|Исправляет период движений по ресурсу ""%1"".
	|Удаляет движения по заказам по передаче на хранение в регистре ""Расчеты с клиентами"".
	|Для движения переноса задолженности:
	| - заполняет новые реквизиты ""Объект расчетов приемник"", ""Аналитика учета по партнерам приемник"", ""Сумма приемник""
	| - перезаполняет идентификаторы фин.записи.
	|Очищает движения ресурса ""Оплачивается"" по Заявкам на расходование средств с пустыми объектами расчетов.
	|Исправляет порядок операции движений по ресурсу ""%2"" 
	|Перезаполняет поле ""Порядок зачета по дате платежа"" для платежных документов.
	|Сбрасывает реквизит ""По данным объекта расчетов источника"" в случае если в движениях документа не заполнены реквизиты приемника.
	|Исправляет хозяйственную операцию для движения документов ""Взаимозачет задолженности"". 
	|Заполняет реквизит ""По данным объекта расчетов источника"" в расчетах по срокам.
	|Исправление кор. аналитики для движений документов ""Взаимозачет задолженности"".
	|'"), 
	Метаданные.РегистрыНакопления.РасчетыСКлиентами.Ресурсы.КОплате.Представление(),
	Метаданные.РегистрыНакопления.РасчетыСКлиентами.Ресурсы.КОтгрузке.Представление());
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.РасчетыСКлиентами";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВтНакладныеПоГрафикам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО Аналитика.КлючАналитики = Регистр.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|			ПО Договоры.Ссылка = Аналитика.Договор
	|			И Договоры.ЗаданГрафикИсполнения
	|ГДЕ
	|	(Регистр.ПродажаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы)
	|		ИЛИ Договоры.Ссылка ЕСТЬ НЕ NULL)
	|	И НЕ Регистр.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистр.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Регистр.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Регистр.КОтгрузке
	|			ИНАЧЕ - Регистр.КОтгрузке
	|		КОНЕЦ) > 0	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная
	|ПОМЕСТИТЬ ВтОбъектыРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (РасчетыСКлиентами.Регистратор = ОбъектыРасчетов.Объект)
	|ГДЕ
	|	РасчетыСКлиентами.Сумма <> 0
	|	И НЕ РасчетыСКлиентами.ПродажаПоЗаказу В (&ПустыеСсылкиНаЗаказы)
	|	И РасчетыСКлиентами.ПродажаПоЗаказу.ПорядокРасчетов В(&ПорядкиРасчетов)
	|	И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРасчетовНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Накладные.Ссылка КАК Регистратор
	|ИЗ
	|	ВтНакладныеПоГрафикам КАК Накладные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК ЗаписиКОплате
	|			ПО ЗаписиКОплате.Регистратор = Накладные.Ссылка
	|				И ЗаписиКОплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И ЗаписиКОплате.КОплате > 0
	|				И ЗаписиКОплате.АналитикаУчетаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК ЗаписиСумм
	|			ПО ЗаписиСумм.Регистратор = Накладные.Ссылка
	|				И ЗаписиСумм.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ЗаписиСумм.Сумма > 0
	|ГДЕ
	|	ЗаписиКОплате.Регистратор ЕСТЬ NULL
	|	И (ЗаписиСумм.Регистратор ЕСТЬ НЕ NULL
	|		ИЛИ ВЫРАЗИТЬ(Накладные.Ссылка КАК Документ.РеализацияТоваровУслуг).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|		ИЛИ ВЫРАЗИТЬ(Накладные.Ссылка КАК Документ.РеализацияУслугПрочихАктивов).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|		ИЛИ ВЫРАЗИТЬ(Накладные.Ссылка КАК Документ.РеализацияТоваровУслуг).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате))
	|
	// исправление кор.аналитики
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК КорРасчеты
	|	ПО Расчеты.Регистратор = КорРасчеты.Регистратор
	|		И Расчеты.КорАналитикаУчетаПоПартнерам = КорРасчеты.АналитикаУчетаПоПартнерам
	|		И Расчеты.КорОбъектРасчетов = КорРасчеты.ОбъектРасчетов
	|ГДЕ
	| 	Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	| 	И Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И КорРасчеты.ОбъектРасчетов ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	| 	ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ПередачаТоваровМеждуОрганизациями),
	|										ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|										ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании),
	|										ТИП(Документ.РасходныйКассовыйОрдер),
	|										ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
	|										ТИП(Документ.ОперацияПоПлатежнойКарте))
	| 	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.КОплате > 0
	|	И Расчеты.ИсключатьПриКонтроле = ЛОЖЬ
	|
	// Исправление периода движения "К оплате"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.КОплате > 0
	|	И НАЧАЛОПЕРИОДА(Расчеты.Период,ДЕНЬ) < НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора,ДЕНЬ)
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатков
	|	И НЕ Расчеты.Регистратор ССЫЛКА Документ.ВводОстатковВзаиморасчетов
	|
	// Удаление записей по заказам отвественного хранения
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ПО РасчетыСКлиентами.Регистратор = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.ХозяйственнаяОперация = &ХозяйственнаяОперацияПередачаНаХранение
	|
	// Заполнение приемников
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемник.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Приемник
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Источник
	|	ПО Приемник.Регистратор = Источник.Регистратор
	|		И Приемник.КорАналитикаУчетаПоПартнерам = Источник.АналитикаУчетаПоПартнерам
	|		И Приемник.КорОбъектРасчетов = Источник.ОбъектРасчетов
	|		И Приемник.ХозяйственнаяОперация = Источник.ХозяйственнаяОперация
	| 		И Приемник.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	| 		И Источник.НастройкаХозяйственнойОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|ГДЕ
	| 	Приемник.ИдентификаторФинЗаписи <> Источник.ИдентификаторФинЗаписи
	| 	И НЕ Приемник.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности КАК Взаимозачеты
	|	ПО Расчеты.Регистратор = Взаимозачеты.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Взаимозачеты.ОбъектРасчетовИнтеркампани,ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|				И Расчеты.КорАналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И НЕ МАКСИМУМ(Расчеты.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|					И Расчеты.АналитикаУчетаПоПартнерамПриемник  <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|
	// Очистка ресурса "Оплачивается"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Оплачивается <> 0
	|	И (Расчеты.ЗаявкаНаРасходованиеДенежныхСредств В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеРасшифровки.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровки
	|		ГДЕ
	|			ДанныеРасшифровки.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|			И ДанныеРасшифровки.ОбъектРасчетов.Объект = Неопределено)
	|		ИЛИ НЕ Расчеты.ЗаявкаНаРасходованиеДенежныхСредств.КонтролироватьОплатуПоОбъектамРасчетов)
	|
	//Исправление порядка операции "КОтгрузке"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.КОтгрузке <> 0
	|	И НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ) <> НАЧАЛОПЕРИОДА(Расчеты.ДатаРегистратора, ДЕНЬ)
	|	И ПОДСТРОКА(Расчеты.ПорядокОперации, 0, 8) <> ПОДСТРОКА(Расчеты.ПорядокЗачетаПоДатеПлатежа, 0, 8)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ЗаказКлиента),
	//++ НЕ УТКА
	
	//++ Локализация
	|										ТИП(Документ.ЗаказДавальца),
	//-- Локализация
	
	|										ТИП(Документ.ЗаказДавальца2_5),
	//-- НЕ УТКА
	
	|										ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|
	// Очистка флага ПоДаннымОбъектаРасчетовИсточника если в движениях документа не заполнены реквизиты приемника
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыПриемники
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК НеПустыеПриемники
	|	ПО РасчетыПриемники.Регистратор = НеПустыеПриемники.Регистратор
	|		И НеПустыеПриемники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НеПустыеПриемники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И НеПустыеПриемники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И НеПустыеПриемники.СуммаПриемник <> 0
	|ГДЕ
	|	НеПустыеПриемники.Регистратор ЕСТЬ NULL
	|	И РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И ТИПЗНАЧЕНИЯ(РасчетыПриемники.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
	|
	// Исправление остатков К оплате
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОбъектыРасчетов.Регистратор КАК Регистратор
	|ИЗ
	|	ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ОбъектРасчетов В
	|					(ВЫБРАТЬ
	|						Т.ОбъектРасчетовНакладная
	|					ИЗ
	|						ВтОбъектыРасчетов КАК Т)) КАК РасчетыСКлиентамиОбороты
	|		ПО (ВтОбъектыРасчетов.Регистратор = РасчетыСКлиентамиОбороты.Регистратор)
	|			И (ВтОбъектыРасчетов.ОбъектРасчетовНакладная = РасчетыСКлиентамиОбороты.ОбъектРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОбъектыРасчетов.Регистратор
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаОборот, 0)) <> СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеОборот, 0))
	|
	// Исправление хозяйственной операции взаимозачета задолженности
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		И ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОпераций)
	|		И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности) 
	|
	// Заполнение флага ПоДаннымОбъектаРасчетовИсточника в расчетах по срокам
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыИсточники.ДокументРегистратор КАК Регистратор,
	|		РасчетыИсточники.ОбъектРасчетовПриемник КАК ОбъектРасчетов,
	|		РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерам,
	|		РасчетыИсточники.ВалютаПриемник КАК Валюта,
	|		РасчетыИсточники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		
	|		РасчетыИсточники.СуммаПриемник КАК СуммаПриемник,
	|		0 КАК СуммаДолгПредлоплата
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ГДЕ
	|		РасчетыИсточники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И РасчетыИсточники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|		И НЕ РасчетыИсточники.ПоДаннымОбъектаРасчетовИсточника
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПриемники.ДокументРегистратор КАК Регистратор,
	|		РасчетыПриемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыПриемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыПриемники.Валюта КАК Валюта,
	|		РасчетыПриемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		
	|		0 КАК СуммаПриемник,
	|		РасчетыПриемники.Долг+РасчетыПриемники.Предоплата КАК СуммаДолгПредлоплата
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПриемники
	|	ГДЕ
	|		РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника) ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.СуммаПриемник) <> СУММА(ВложенныйЗапрос.СуммаДолгПредлоплата)
	|
	// Исправление кор. объектов расчетов для взаимозачета задолженности
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника
	|	И (Расчеты.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ИЛИ Расчеты.КорАналитикаУчетаПопартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияПередачаНаХранение", Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	МассивПорядковРасчетов = Новый Массив;
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	Запрос.УстановитьПараметр("ПорядкиРасчетов", МассивПорядковРасчетов);
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрНакопления.РасчетыСКлиентами";
	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".")[1];
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	#Область ТекстЗапроса
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновляемыеДанные.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО Аналитика.КлючАналитики = Регистр.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|			ПО Договоры.Ссылка = Аналитика.Договор
	|			И Договоры.ЗаданГрафикИсполнения
	|ГДЕ
	|	Регистр.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Регистр.КОтгрузке > 0 
	|	И (Регистр.ПродажаПоЗаказу НЕ В (&ПустыеСсылкиНаЗаказы)
	|		ИЛИ Договоры.Ссылка ЕСТЬ НЕ NULL)
	|	И Регистр.Регистратор В (ВЫБРАТЬ ВТДляОбработки.Регистратор ИЗ ВТДляОбработки)";
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	НакладныеПоГрафикам = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(КлючиАналитики.Организация, НЕОПРЕДЕЛЕНО) КАК Организация,
	|	ЕСТЬNULL(КлючиАналитики.Партнер, НЕОПРЕДЕЛЕНО) КАК Партнер,
	|	ЕСТЬNULL(КлючиАналитики.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	|	ЕСТЬNULL(КлючиАналитики.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ЕСТЬNULL(КлючиАналитики.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельности,
	|
	|	ДанныеРегистра.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	ДанныеРегистра.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(КорКлючиАналитики.Организация, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	ЕСТЬNULL(КорКлючиАналитики.Партнер, НЕОПРЕДЕЛЕНО) КАК КорПартнер,
	|	ЕСТЬNULL(КорКлючиАналитики.Контрагент, НЕОПРЕДЕЛЕНО) КАК КорКонтрагент,
	|	ЕСТЬNULL(КорКлючиАналитики.Договор, НЕОПРЕДЕЛЕНО) КАК КорДоговор,
	|	ЕСТЬNULL(КорКлючиАналитики.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК КорНаправлениеДеятельности
	|ИЗ 
	|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО ДанныеРегистра.Регистратор = СсылкиДляОбработки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КорКлючиАналитики
	|		ПО ДанныеРегистра.КорАналитикаУчетаПоПартнерам = КорКлючиАналитики.КлючАналитики
	|ГДЕ
	| 	ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|;
	|
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор,
	|	СсылкиДляОбработки.Регистратор.Номер КАК РегистраторНомер
	|ИЗ 
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ПО Регистр.Регистратор = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.ХозяйственнаяОперация = &ХозяйственнаяОперацияПередачаНаХранение
	|	И Регистр.Регистратор В (ВЫБРАТЬ ВТДляОбработки.Регистратор ИЗ ВТДляОбработки)
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыПриемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО РасчетыПриемники.Регистратор = СсылкиДляОбработки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК НеПустыеПриемники
	|	ПО РасчетыПриемники.Регистратор = НеПустыеПриемники.Регистратор
	|		И НеПустыеПриемники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НеПустыеПриемники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|		И НеПустыеПриемники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И НеПустыеПриемники.СуммаПриемник <> 0
	|ГДЕ
	|	НеПустыеПриемники.Регистратор ЕСТЬ NULL
	|	И РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|	И ТИПЗНАЧЕНИЯ(РасчетыПриемники.Регистратор) <> ТИП(Документ.ВзаимозачетЗадолженности)
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Регистратор,
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная
	|ПОМЕСТИТЬ ВтОбъектыРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (РасчетыСКлиентами.Регистратор = ОбъектыРасчетов.Объект)
	|ГДЕ
	|	РасчетыСКлиентами.Сумма <> 0
	|	И НЕ РасчетыСКлиентами.ПродажаПоЗаказу В (&ПустыеСсылкиНаЗаказы)
	|	И РасчетыСКлиентами.ПродажаПоЗаказу.ПорядокРасчетов В(&ПорядкиРасчетов)
	|	И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОбъектРасчетовНакладная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОбъектыРасчетов.Регистратор КАК Ссылка
	|ИЗ
	|	ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ОбъектРасчетов В
	|					(ВЫБРАТЬ
	|						Т.ОбъектРасчетовНакладная
	|					ИЗ
	|						ВтОбъектыРасчетов КАК Т)) КАК РасчетыСКлиентамиОбороты
	|		ПО (ВтОбъектыРасчетов.Регистратор = РасчетыСКлиентамиОбороты.Регистратор)
	|			И (ВтОбъектыРасчетов.ОбъектРасчетовНакладная = РасчетыСКлиентамиОбороты.ОбъектРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОбъектыРасчетов.Регистратор
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаОборот, 0)) <> СУММА(ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеОборот, 0))
	|;
	// Исправление хозяйственных операций
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоДолгу)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	ВЫРАЗИТЬ(Расчеты.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (&ВидыОперацийПоАвансу)
	|;
	|
	// Заполнение флага ПоДаннымОбъектаРасчетовИсточника в расчетах по срокам
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.ДокументРегистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО РасчетыИсточники.ДокументРегистратор = СсылкиДляОбработки.Регистратор
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	НЕ РасчетыПриемники.ПоДаннымОбъектаРасчетовИсточника
	|;
	|
	// Исправление кор. объектов расчетов для взаимозачета задолженности
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК СсылкиДляОбработки
	|		ПО Расчеты.Регистратор = СсылкиДляОбработки.Регистратор
	|ГДЕ
	|	Расчеты.ПоДаннымОбъектаРасчетовИсточника
	|	И (Расчеты.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		ИЛИ Расчеты.КорАналитикаУчетаПопартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка))
	|	И Расчеты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияПередачаНаХранение", Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	Запрос.УстановитьПараметр("ТипРасчетыСКлиентом", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	Запрос.УстановитьПараметр("ПустыеСсылкиНаЗаказы", ОперативныеВзаиморасчетыСервер.ПустыеСсылкиНаЗаказы());
	МассивПорядковРасчетов = Новый Массив;
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамНакладным);
	МассивПорядковРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	Запрос.УстановитьПараметр("ПорядкиРасчетов", МассивПорядковРасчетов);
	Запрос.УстановитьПараметр("ВидыОперацийПоДолгу", ВидыОперацийПоДолгу());
	Запрос.УстановитьПараметр("ВидыОперацийПоАвансу", ВидыОперацийПоАвансу());
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПоляКлючаАналитики =  РезультатыЗапроса[0].Выгрузить();
	ПоляПоискаКорАналитики = "Регистратор,КорОбъектРасчетов,КорАналитикаУчетаПоПартнерам";
	ПоляПоискаАналитики = "Регистратор,ОбъектРасчетов,Организация,Контрагент,Договор,НаправлениеДеятельности";
	ПоляКлючаАналитики.Индексы.Добавить(ПоляПоискаКорАналитики);
	ПоляКлючаАналитики.Индексы.Добавить(ПоляПоискаАналитики);
	
	ОбновляемыеДанные =  РезультатыЗапроса[1].Выбрать();
	ЗаказыНаОтветХранение = РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОчисткаФлагаПоДаннымИсточника = РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ИсправлениеОстатковКОплате = РезультатыЗапроса[5].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетПереносДолга = РезультатыЗапроса[6].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетПереносАванса = РезультатыЗапроса[7].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ЗаполнениеФлагаВРасчетахПоСрокам = РезультатыЗапроса[8].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ВзаимозачетКорАналитика = РезультатыЗапроса[9].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	ЗапросВспомогательныхДанных = ЗапросВспомогательныхДанных(Истина);
	ЗапросДанныхОперативногоРегистра = ЗапросДанныхОперативногоРегистра(Истина);
	ЗапросКорАналитики = ЗапросКорАналитики();
	ДанныеЗаменыОперации = ДанныеЗаменыОперации();
	
	Пока ОбновляемыеДанные.Следующий() Цикл
		
		ПроблемныйРегистратор = ОбновляемыеДанные.Регистратор;
		
		Если НоваяАрхитектураВзаиморасчетов Тогда
			ЗапросВспомогательныхДанных.УстановитьПараметр("Ссылка", ПроблемныйРегистратор);
			ВспомогательныеДанные = ЗапросВспомогательныхДанных.ВыполнитьПакет();
			РегистраторыРасчетов = ВспомогательныеДанные[0].Выгрузить();
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = "Блокировка";
			#Область Блокировки
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентами.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ПроблемныйРегистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Если НоваяАрхитектураВзаиморасчетов Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.ИсточникДанных = РегистраторыРасчетов;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщикамиПоСрокам.НаборЗаписей");
				ЭлементБлокировки.ИсточникДанных = РегистраторыРасчетов;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			КонецЕсли;
			
			Блокировка.Заблокировать();
			#КонецОбласти
			
			ПричинаИсключения = "ПлохиеДанные";
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ПроблемныйРегистратор);
			НаборЗаписей.Прочитать();

			Если ЗаказыНаОтветХранение.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			#Область ИсключатьПриКонтроле
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") 
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании") 
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") 
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
			Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход
						И Запись.КОплате > 0 ИЛИ Запись.Сумма > 0 Тогда
						Запись.ИсключатьПриКонтроле = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			ОтметитьОбработку = Истина;
			#Область ИсправлениеКорАналитики
			ДанныеНабора = НаборЗаписей.Выгрузить();
			СтарыеДанныеНабора = НаборЗаписей.Выгрузить();
			ЕстьИзменения = Ложь;
			
			ДанныеНабора.Индексы.Добавить("АналитикаУчетаПоПартнерам,ОбъектРасчетов,НастройкаХозяйственнойОперации");
			ТаблицыДвижений = Неопределено;
			НовыеДанныеНабора = Неопределено;
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
				Для Каждого Запись Из ДанныеНабора Цикл
					
					Если НЕ ЗначениеЗаполнено(Запись.КорОбъектРасчетов) Тогда
						Продолжить;
					КонецЕсли;
					
					Отбор = Новый Структура("АналитикаУчетаПоПартнерам,ОбъектРасчетов");
					Отбор.ОбъектРасчетов = Запись.КорОбъектРасчетов;
					Отбор.АналитикаУчетаПоПартнерам = Запись.КорАналитикаУчетаПоПартнерам;
					СтрокиИсточники = ДанныеНабора.НайтиСтроки(Отбор);
					Если СтрокиИсточники.Количество() <> 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОтборКорАналитики = Новый Структура(ПоляПоискаКорАналитики);
					ОтборКорАналитики.Регистратор = ПроблемныйРегистратор;
					ОтборКорАналитики.КорОбъектРасчетов = Запись.КорОбъектРасчетов;
					ОтборКорАналитики.КорАналитикаУчетаПоПартнерам = Запись.КорАналитикаУчетаПоПартнерам;
					КорАналитика = ПоляКлючаАналитики.НайтиСтроки(ОтборКорАналитики);
					
					Если КорАналитика.Количество() = 0 Тогда
						ОтметитьОбработку = Ложь;
						Прервать;
					КонецЕсли;
					
					ОтборАналитики = Новый Структура(ПоляПоискаАналитики);
					ОтборАналитики.Регистратор = ПроблемныйРегистратор;
					ОтборАналитики.ОбъектРасчетов = Запись.КорОбъектРасчетов;
					ОтборАналитики.Организация = КорАналитика[0].КорОрганизация;
					ОтборАналитики.Контрагент = КорАналитика[0].КорКонтрагент;
					ОтборАналитики.Договор = КорАналитика[0].КорДоговор;
					ОтборАналитики.НаправлениеДеятельности = КорАналитика[0].КорНаправлениеДеятельности;
				
					Аналитика = ПоляКлючаАналитики.НайтиСтроки(ОтборАналитики);
					Если Аналитика.Количество() = 1 Тогда
						Запись.КорАналитикаУчетаПоПартнерам = Аналитика[0].АналитикаУчетаПоПартнерам;
						ЕстьИзменения = Истина;
					Иначе
						Если ТаблицыДвижений = Неопределено Тогда
							ТаблицыДвижений = Документы.ВзаимозачетЗадолженности.ДанныеДокументаДляПроведения(ПроблемныйРегистратор, ИмяОбъекта);
						КонецЕсли;
						НовыеДанныеНабора = ТаблицыДвижений.ТаблицаРасчетыСКлиентами;
						Для Каждого Строка Из НовыеДанныеНабора Цикл
							НоваяСтрока = СтарыеДанныеНабора.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							НоваяСтрока.Сумма = -Строка.Сумма;
							НоваяСтрока.КОплате = -Строка.КОплате;
							НоваяСтрока.СуммаРегл = -Строка.СуммаРегл;
							НоваяСтрока.СуммаУпр = -Строка.СуммаУпр;
						КонецЦикла;
						КопияНабора = НовыеДанныеНабора.Скопировать();
						КопияНабора.Свернуть("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта","Сумма,КОплате,СуммаРегл,СуммаУпр");
						СтарыеДанныеНабора.Свернуть("АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта","Сумма,КОплате,СуммаРегл,СуммаУпр");
						ОтборНулей = Новый Структура("Сумма,КОплате,СуммаРегл,СуммаУпр",0,0,0,0);
						СтрокиСНулями = СтарыеДанныеНабора.НайтиСтроки(ОтборНулей);
						Если СтрокиСНулями.Количество() <> КопияНабора.Количество() Тогда
							НовыеДанныеНабора = Неопределено;
							ОтметитьОбработку = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			Если НовыеДанныеНабора <> Неопределено Тогда
				НаборЗаписей.Загрузить(НовыеДанныеНабора);
			ИначеЕсли ЕстьИзменения Тогда
				НаборЗаписей.Загрузить(ДанныеНабора);
			КонецЕсли;
			#КонецОбласти

			#Область ИсправлениеХозяйственнойОперацииВзаимозачета
			Если ВзаимозачетПереносДолга.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ЗаменитьХозяйственнуюОперацию(ДанныеЗаменыОперации, НаборЗаписей, Истина);
			ИначеЕсли ВзаимозачетПереносАванса.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ЗаменитьХозяйственнуюОперацию(ДанныеЗаменыОперации, НаборЗаписей, Ложь);
			КонецЕсли;
			#КонецОбласти
			
			ТребуетсяЗаполнениеПриемников = Истина;
			#Область ЗаполнениеФлагаПоДаннымИсточникаВРасчетахПоСрокам
			Если ЗаполнениеФлагаВРасчетахПоСрокам.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ТребуетсяЗаполнениеПриемников = Ложь;
				ЗаполнитьФлагВРасчетахПоСрокам(НаборЗаписей, ВспомогательныеДанные, РегистраторыРасчетов);
			КонецЕсли;
			#КонецОбласти
			
			#Область ЗаполнениеПриемниковВОперативномРегистре
			Если ТребуетсяЗаполнениеПриемников Тогда
				ЕстьОшибка = Ложь;
				ЗаполнитьПриемникиВОперативномРегистре(НаборЗаписей, ЗапросДанныхОперативногоРегистра, ЕстьОшибка);
			КонецЕсли;//это новая архитектура взаиморасчетов
			#КонецОбласти
			
			#Область ОчисткаФлагаПоДаннымИсточника
			Если ОчисткаФлагаПоДаннымИсточника.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ТребуетсяЗаполнениеПриемников = Ложь;
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.ПоДаннымОбъектаРасчетовИсточника = Ложь;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			Если НоваяАрхитектураВзаиморасчетов И ТребуетсяЗаполнениеПриемников И НаборЗаписей.Модифицированность() И НЕ ЕстьОшибка Тогда
				ДанныеРаспределения = Новый Структура("НаборЗаписей,ВспомогательныеДанные,РегистраторыРасчетов",
						НаборЗаписей, ВспомогательныеДанные, РегистраторыРасчетов);
				ЗаполнитьПриемникиВРасчетахПоСрокам(ДанныеРаспределения, ЕстьОшибка);
			КонецЕсли;//был измен набор оперативного регистра
			
			ЕстьЗаявкиНаРасходованиеДенежныхСредств = Ложь;
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход
					И Запись.КОплате > 0 
					И НачалоДня(Запись.Период) < НачалоДня(Запись.ДатаРегистратора) 
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатков")
					И НЕ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов") Тогда
					Запись.Период = Запись.ДатаРегистратора;
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
					ЕстьЗаявкиНаРасходованиеДенежныхСредств = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// Очистка ресурса "Оплачивается"
			Если ЕстьЗаявкиНаРасходованиеДенежныхСредств Тогда
				ЗаявкиНаРасходованиеДенежныхСредств = НаборЗаписей.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
				РеквизитыЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаявкиНаРасходованиеДенежныхСредств,"КонтролироватьОплатуПоОбъектамРасчетов");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если ЗначениеЗаполнено(Запись.ЗаявкаНаРасходованиеДенежныхСредств)
						И Запись.Оплачивается <> 0 
						И НЕ РеквизитыЗаявок[Запись.ЗаявкаНаРасходованиеДенежныхСредств] Тогда
						Запись.Оплачивается = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			#Область ИсправлениеПорядкаОперации
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказКлиента")
				//++ НЕ УТКА
				
				//++ Локализация
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказДавальца")
				//-- Локализация
				
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаказДавальца2_5")
				//-- НЕ УТКА
				
				ИЛИ ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроблемныйРегистратор, "Номер");
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.КОтгрузке <> 0 Тогда
						Запись.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(
							Запись.ДатаРегистратора,
							НомерДокумента,
							ТипЗнч(Запись.Регистратор),
							1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
			
			#Область ИсправлениеОстатковКОплате
			Если НакладныеПоГрафикам.Найти(ПроблемныйРегистратор) <> Неопределено 
				Или ИсправлениеОстатковКОплате.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				
				ИмяРегистраРасчетов = Метаданные.РегистрыНакопления.РасчетыСКлиентами.Имя;
				ДанныеДляПроведения = ПроведениеДокументов.ДанныеДокументаДляПроведения(ПроблемныйРегистратор, ИмяРегистраРасчетов);
				НовыеДвижения = ДанныеДляПроведения["Таблица" + ИмяРегистраРасчетов];
				ВзаиморасчетыСервер.ДобавитьЗаполнитьПорядокРасчетовСКлиентами(НовыеДвижения, ТипЗнч(ПроблемныйРегистратор));
				
				КолонкиИзмерений = "АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта,ВидДвижения";
				// Для контроля неизменности движений по ресурсам, кроме КОплате
				КолонкиРесурсов = "Сумма,Оплачивается,КОтгрузке,Отгружается";
				ТаблицаДвижений = НаборЗаписей.Выгрузить();
				
				СтарыеДвижения = ТаблицаДвижений.Скопировать(,КолонкиИзмерений+","+КолонкиРесурсов);
				СтарыеДвижения.Свернуть(КолонкиИзмерений, КолонкиРесурсов);
				СтарыеДвижения.Сортировать(КолонкиИзмерений+","+КолонкиРесурсов);
				Индекс = СтарыеДвижения.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если СтарыеДвижения[Индекс].Сумма = 0
						И СтарыеДвижения[Индекс].Оплачивается = 0
						И СтарыеДвижения[Индекс].КОтгрузке = 0
						И СтарыеДвижения[Индекс].Отгружается = 0 Тогда
						СтарыеДвижения.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
				
				ИдентификаторФинЗаписиКОплате = "";
				ЕстьИзменения = Ложь;
				Индекс = ТаблицаДвижений.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если ТаблицаДвижений[Индекс].КОплате <> 0 Тогда
						ТаблицаДвижений[Индекс].КОплате = 0;
						Если ТаблицаДвижений[Индекс].ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПереносАванса Тогда
							ИдентификаторФинЗаписиКОплате = ТаблицаДвижений[Индекс].ИдентификаторФинЗаписи;
						КонецЕсли;
						Если ТаблицаДвижений[Индекс].Сумма = 0
							И ТаблицаДвижений[Индекс].Оплачивается = 0
							И ТаблицаДвижений[Индекс].КОтгрузке = 0
							И ТаблицаДвижений[Индекс].Отгружается = 0 Тогда
							ТаблицаДвижений.Удалить(Индекс);
						КонецЕсли;
						ЕстьИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаКОплате Из НовыеДвижения Цикл
					Если СтрокаКОплате.КОплате <> 0 Тогда
						ЕстьИзменения = Истина;
						НоваяЗапись = ТаблицаДвижений.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаКОплате);
						НоваяЗапись.Сумма = 0;
						НоваяЗапись.СуммаУпр = 0;
						НоваяЗапись.СуммаРегл = 0;
						НоваяЗапись.ИдентификаторФинЗаписи = "";
						НоваяЗапись.Оплачивается = 0;
						НоваяЗапись.КОтгрузке = 0;
						НоваяЗапись.Отгружается = 0;
						НоваяЗапись.Регистратор = ПроблемныйРегистратор;
						НоваяЗапись.Активность = Истина;
					КонецЕсли;
				КонецЦикла;
					
				НовыеДвижения = ТаблицаДвижений.Скопировать(,КолонкиИзмерений+","+КолонкиРесурсов);
				НовыеДвижения.Свернуть(КолонкиИзмерений, КолонкиРесурсов);
				НовыеДвижения.Сортировать(КолонкиИзмерений+","+КолонкиРесурсов);
				Индекс = НовыеДвижения.Количество();
				Пока Индекс > 0 Цикл
					Индекс = Индекс - 1;
					Если НовыеДвижения[Индекс].Сумма = 0
						И НовыеДвижения[Индекс].Оплачивается = 0
						И НовыеДвижения[Индекс].КОтгрузке = 0
						И НовыеДвижения[Индекс].Отгружается = 0 Тогда
						НовыеДвижения.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
				#Область КонтрольИтогов
				
				Если ЕстьИзменения И ТаблицыРавны(СтарыеДвижения, НовыеДвижения) Тогда
					
					ЗапросСвертки = Новый Запрос;
					ЗапросСвертки.Текст = 
					"ВЫБРАТЬ
					|	&ВсеПоля
					|ПОМЕСТИТЬ ВтДвижения
					|ИЗ
					|	&ТаблицаДвижений КАК ТаблицаДвижений
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	&ПоляГруппировки,
					|	&ПоляРесурсов
					|ИЗ
					|	ВтДвижения КАК Т
					|СГРУППИРОВАТЬ ПО
					|	&ПоляГруппировки";
					ЗапросСвертки.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
					КолонкиДляГруппировки = Новый Массив;
					ВсеКолонки = Новый Массив;
					КолонкиРесурсов = КолонкиРесурсов + ",КОплате";
					Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
						Если СтрНайти(КолонкиРесурсов, Колонка.Имя) = 0 
							И Колонка.Имя <> "СуммаУпр"
							И Колонка.Имя <> "СуммаРегл"
							И Колонка.Имя <> "ИдентификаторФинЗаписи"
							И Колонка.Имя <> "НомерСтроки"
							И Колонка.Имя <> "МоментВремени" Тогда
							КолонкиДляГруппировки.Добавить(Колонка.Имя);
						КонецЕсли;
						Если Колонка.Имя <> "МоментВремени" Тогда
							ВсеКолонки.Добавить(Колонка.Имя);
						КонецЕсли;
					КонецЦикла;
					КолонкиДляСуммирования = СтрРазделить(КолонкиРесурсов, ",");
					Индекс = 0;
					Пока Индекс < КолонкиДляСуммирования.Количество() Цикл
						КолонкиДляСуммирования[Индекс] = СтрШаблон("СУММА(%1) КАК %1", КолонкиДляСуммирования[Индекс]);
						Индекс = Индекс + 1;
					КонецЦикла;
					КолонкиДляСуммирования.Добавить("СУММА(СуммаУпр) КАК СуммаУпр");
					КолонкиДляСуммирования.Добавить("СУММА(СуммаРегл) КАК СуммаРегл");
					КолонкиДляСуммирования.Добавить("МАКСИМУМ(ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи");
					КолонкиДляСуммирования.Добавить("МАКСИМУМ(НомерСтроки) КАК НомерСтроки");
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ПоляГруппировки", СтрСоединить(КолонкиДляГруппировки,","));
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ВсеПоля", СтрСоединить(ВсеКолонки,","));
					ЗапросСвертки.Текст = СтрЗаменить(ЗапросСвертки.Текст, "&ПоляРесурсов", СтрСоединить(КолонкиДляСуммирования,","));
					
					ТаблицаДвижений = ЗапросСвертки.Выполнить().Выгрузить();
					Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
						Если СтрокаДвижения.КОплате <> 0 
							И СтрокаДвижения.Сумма = 0
							И Не ЗначениеЗаполнено(СтрокаДвижения.ИдентификаторФинЗаписи) Тогда
							СтрокаДвижения.ИдентификаторФинЗаписи = ИдентификаторФинЗаписиКОплате;
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Загрузить(ТаблицаДвижений);
					
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'При выполнении обработчика обновления регистра накопления ""%1"" 
							|по исправлению остатков ""%2"" изменились итоги остальных ресурсов в движениях документа 
							|%3, обработка документа не выполнена';
							|en = 'When running the update handler of the ""%1"" accumulation register 
							|to correct the ""%2"" balance, the totals of other resources in the 
							|""%3"" document records changed. The document is not processed'"),
						Метаданные.РегистрыНакопления.РасчетыСКлиентами.Представление(),
						Метаданные.РегистрыНакопления.РасчетыСКлиентами.Ресурсы.КОплате.Представление(),
						ПроблемныйРегистратор);
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.РегистрыНакопления.РасчетыСКлиентами, ,
						ТекстСообщения);
					
				КонецЕсли;
				#КонецОбласти
			КонецЕсли;
			#КонецОбласти
			
			#Область ИсправлениеКорАналитикиВзаимозачета
			Если ВзаимозачетКорАналитика.Найти(ПроблемныйРегистратор) <> Неопределено Тогда
				ИсправитьКорАналитикуВзаимозачета(ЗапросКорАналитики, НаборЗаписей);
			КонецЕсли;
			#КонецОбласти
			
			ИзменилисьИтоги = Ложь;
			Если НаборЗаписей.Количество() > 0 Тогда
				ИзменилисьИтоги = ЕстьИзмененияИтоговНабора(НаборЗаписей);
			КонецЕсли;
			Если НаборЗаписей.Модифицированность() И НЕ ИзменилисьИтоги Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ИначеЕсли ОтметитьОбработку Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Если ПричинаИсключения = "ПлохиеДанные" Тогда
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ПроблемныйРегистратор);
				Если ЗначениеЗаполнено(ПроблемныйРегистратор) Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
					ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
						ПроблемныйРегистратор,
						ТекстСообщенияОбОшибке(ИнформацияОбОшибке(), ПроблемныйРегистратор)
						+ Символы.ПС + ТекстПерепроведитеДокументВРучную());
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#Область ЗаполнениеИденитификаторовИПриемников

// Запрос вспомогательных данных.
// 
// Параметры:
//  ЭтоРасчетыСКлиентами - Булево - Это расчеты с клиентами.
//  ЗаполнитьФлагПоСрокам - Булево - Заполнение флага в расчетах по срокам.
// 
// Возвращаемое значение:
//  Запрос - Запрос вспомогательных данных
Функция ЗапросВспомогательныхДанных(ЭтоРасчетыСКлиентами) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаРегистраторовЗапроса(ЭтоРасчетыСКлиентами));
	ТекстыЗапросов.Добавить(ТекстЗапросаПриемниковИсточниковПоСрокам(ЭтоРасчетыСКлиентами));
	ТекстыЗапросов.Добавить(ТекстЗапросаРегистраторовДляЗаполненияФлага(ЭтоРасчетыСКлиентами));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат Запрос;
	
КонецФункции

// Запрос данных оперативного регистра.
// 
// Параметры:
//  ЭтоРасчетыСКлиентами - Булево - Это расчеты с клиентами
// 
// Возвращаемое значение:
//  Запрос - Запрос данных оперативного регистра
Функция ЗапросДанныхОперативногоРегистра(ЭтоРасчетыСКлиентами) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаПриемниковИсточников(ЭтоРасчетыСКлиентами));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаРегистраторовЗапроса(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСрокам.ДокументРегистратор КАК ДокументРегистратор,
	|	РасчетыПоСрокам.Регистратор КАК Регистратор,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|ГДЕ
	|	РасчетыПоСрокам.ДокументРегистратор = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСрокам.ДокументРегистратор КАК ДокументРегистратор,
	|	РасчетыПоСрокам.Регистратор КАК Регистратор,
	|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокам
	|ГДЕ
	|	РасчетыПоСрокам.ДокументРегистратор = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПриемниковИсточников(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Приемники.Регистратор КАК Регистратор,
	|	Приемники.ВидДвижения КАК ВидДвижения,
	|	Приемники.Сумма КАК Сумма,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ПОМЕСТИТЬ втДанныеНабора
	|ИЗ
	|	&ДанныеНабора КАК Приемники
	|;
	|
	|ВЫБРАТЬ
	|	Приемники.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР КОГДА Приемники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Приемники.Сумма
	|		ИНАЧЕ -Приемники.Сумма
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Приемники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Приемники.Сумма
	|		ИНАЧЕ -Приемники.Сумма
	|	КОНЕЦ) > 0 КАК ПоложительнаяСумма,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорОбъектРасчетов.ВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.Валюта <> Приемники.КорОбъектРасчетов.Валюта
	|		И ТИПЗНАЧЕНИЯ(Приемники.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
	|		И ВЫРАЗИТЬ(Приемники.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В(
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера)) КАК ВалютаНеСовпадает,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ПОМЕСТИТЬ втПриемники
	|ИЗ
	|	втДанныеНабора КАК Приемники
	|ГДЕ
	|	Приемники.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И Приемники.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	И Приемники.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|СГРУППИРОВАТЬ ПО
	|	Приемники.Регистратор,
	|	Приемники.ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам,
	|	Приемники.Валюта,
	|	Приемники.КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам,
	|	Приемники.ХозяйственнаяОперация,
	|	Приемники.Сторно
	|;
	|
	|ВЫБРАТЬ
	|	Приемники.Регистратор КАК Регистратор,
	|	Приемники.Сумма КАК Сумма,
	|	Приемники.ПоложительнаяСумма КАК ПоложительнаяСумма,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ВалютаНеСовпадает КАК ВалютаНеСовпадает,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ИЗ
	|	втПриемники КАК Приемники
	|;
	|
	|ВЫБРАТЬ
	|	Источники.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР КОГДА Источники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА -Источники.Сумма
	|		ИНАЧЕ Источники.Сумма
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Источники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Источники.Сумма
	|		ИНАЧЕ -Источники.Сумма
	|	КОНЕЦ) > 0 КАК ПоложительнаяСумма,
	|	Источники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Источники.Сторно КАК Сторно,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	втДанныеНабора КАК Источники
	|ГДЕ
	|	(Регистратор, ОбъектРасчетов, АналитикаУчетаПоПартнерам, ХозяйственнаяОперация, Сторно) В 
	|		(ВЫБРАТЬ
	|			Регистратор, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам, ХозяйственнаяОперация, Сторно
	|		ИЗ
	|			втПриемники)
	|СГРУППИРОВАТЬ ПО
	|	Источники.Регистратор,
	|	Источники.ОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам,
	|	Источники.ХозяйственнаяОперация,
	|	Источники.Сторно";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
							"РегистрНакопления.РасчетыСКлиентами",
							"РегистрНакопления.РасчетыСПоставщиками");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПриемниковИсточниковПоСрокам(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Приемники.ДокументРегистратор КАК ДокументРегистратор,
	|	Приемники.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР КОГДА Приемники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Приемники.Долг - Приемники.Предоплата
	|		ИНАЧЕ Приемники.Предоплата - Приемники.Долг
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Приемники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Приемники.Долг - Приемники.Предоплата
	|		ИНАЧЕ Приемники.Предоплата - Приемники.Долг
	|	КОНЕЦ) > 0 КАК ПоложительнаяСумма,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорОбъектРасчетов.ВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.Валюта <> Приемники.КорОбъектРасчетов.ВалютаВзаиморасчетов
	|		И ТИПЗНАЧЕНИЯ(Приемники.ДокументРегистратор) = ТИП(Документ.ВзаимозачетЗадолженности)
	|		И ВЫРАЗИТЬ(Приемники.ДокументРегистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В(
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеОплатыЧерезКомиссионера),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ОтражениеВозвратаОплатыЧерезКомиссионера)) КАК ВалютаНеСовпадает,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ПОМЕСТИТЬ втПриемникиПоСрокам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Приемники
	|ГДЕ
	|	Приемники.ДокументРегистратор = &Ссылка
	|	И Приемники.КорОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И Приемники.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И Приемники.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	И Приемники.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|СГРУППИРОВАТЬ ПО
	|	Приемники.ДокументРегистратор,
	|	Приемники.Регистратор,
	|	Приемники.ОбъектРасчетов,
	|	Приемники.Валюта,
	|	Приемники.АналитикаУчетаПоПартнерам,
	|	Приемники.КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам,
	|	Приемники.ХозяйственнаяОперация,
	|	Приемники.Сторно
	|;
	|
	|ВЫБРАТЬ
	|	Приемники.ДокументРегистратор КАК ДокументРегистратор,
	|	Приемники.Регистратор КАК Регистратор,
	|	Приемники.Сумма КАК Сумма,
	|	Приемники.ПоложительнаяСумма КАК ПоложительнаяСумма,
	|	Приемники.Валюта КАК Валюта,
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Приемники.КорВалютаВзаиморасчетов КАК КорВалюта,
	|	Приемники.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Приемники.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ВалютаНеСовпадает КАК ВалютаНеСовпадает,
	|	Приемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Приемники.Сторно КАК Сторно
	|ИЗ
	|	втПриемникиПоСрокам КАК Приемники
	|;
	|
	|ВЫБРАТЬ
	|	Источники.ДокументРегистратор КАК ДокументРегистратор,
	|	Источники.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР КОГДА Источники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Источники.Предоплата - Источники.Долг
	|		ИНАЧЕ Источники.Долг - Источники.Предоплата
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Источники.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА Источники.Долг - Источники.Предоплата
	|		ИНАЧЕ Источники.Предоплата - Источники.Долг
	|	КОНЕЦ) > 0 КАК ПоложительнаяСумма,
	|	Источники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Источники.Сторно КАК Сторно,
	|	ИСТИНА КАК ЭтоРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Источники
	|ГДЕ
	|	(ДокументРегистратор, ОбъектРасчетов, АналитикаУчетаПоПартнерам, ХозяйственнаяОперация, Сторно) В 
	|		(ВЫБРАТЬ
	|			ДокументРегистратор, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам, ХозяйственнаяОперация, Сторно
	|		ИЗ
	|			втПриемникиПоСрокам)
	|СГРУППИРОВАТЬ ПО
	|	Источники.ДокументРегистратор,
	|	Источники.Регистратор,
	|	Источники.ОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам,
	|	Источники.ХозяйственнаяОперация,
	|	Источники.Сторно";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
							"РегистрНакопления.РасчетыСКлиентамиПоСрокам",
							"РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРегистраторовДляЗаполненияФлага(ЭтоРасчетыСКлиентами)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор,
	|	РасчетыИсточники.ВидДвижения КАК ВидДвижения,
	|	РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерам,
	|	РасчетыИсточники.ОбъектРасчетовПриемник КАК ОбъектРасчетов,
	|	РасчетыИсточники.ВалютаПриемник КАК Валюта,
	|	РасчетыИсточники.СуммаПриемник КАК СуммаПриемник,
	|	РасчетыИсточники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	РасчетыИсточники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерамИсточник,
	|	РасчетыИсточники.ОбъектРасчетов КАК ОбъектРасчетовИсточник,
	|	РасчетыИсточники.Валюта КАК ВалютаИсточник,
	|	РасчетыИсточники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыИсточники.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыИсточники.ДокументРегистратор КАК ДокументРегистратор
	|ПОМЕСТИТЬ втРегистраторыПриемников
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	РасчетыИсточники.ДокументРегистратор = &Ссылка	
	|	И РасчетыИсточники.ОбъектРасчетовПриемник <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|	И РасчетыИсточники.ВалютаПриемник <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор,
	|	РасчетыИсточники.ВидДвижения КАК ВидДвижения,
	|	РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник КАК АналитикаУчетаПоПартнерам,
	|	РасчетыИсточники.ОбъектРасчетовПриемник КАК ОбъектРасчетов,
	|	РасчетыИсточники.ВалютаПриемник КАК Валюта,
	|	РасчетыИсточники.СуммаПриемник КАК СуммаПриемник,
	|	РасчетыИсточники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	НЕ &ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	РасчетыИсточники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерамИсточник,
	|	РасчетыИсточники.ОбъектРасчетов КАК ОбъектРасчетовИсточник,
	|	РасчетыИсточники.Валюта КАК ВалютаИсточник,
	|	РасчетыИсточники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыИсточники.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПриемники.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыИсточники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПриемники
	|	ПО РасчетыИсточники.ДокументРегистратор = РасчетыПриемники.ДокументРегистратор
	|		И РасчетыИсточники.ОбъектРасчетовПриемник = РасчетыПриемники.ОбъектРасчетов
	|		И РасчетыИсточники.АналитикаУчетаПоПартнерамПриемник = РасчетыПриемники.АналитикаУчетаПоПартнерам
	|		И РасчетыИсточники.ВалютаПриемник = РасчетыПриемники.Валюта
	|		И РасчетыИсточники.СуммаПриемник <> 0
	|ГДЕ
	|	РасчетыПриемники.ДокументРегистратор = &Ссылка
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПриемники.Регистратор КАК Регистратор,
	|	РасчетыПриемники.ВидДвижения КАК ВидДвижения,
	|	РасчетыПриемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПриемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыПриемники.Валюта КАК Валюта,
	|	РасчетыПриемники.СуммаПриемник КАК Сумма,
	|	РасчетыПриемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыПриемники.ЭтоРасчетыСКлиентами КАК ЭтоРасчетыСКлиентами,
	|	РасчетыПриемники.АналитикаУчетаПоПартнерамИсточник КАК АналитикаУчетаПоПартнерамИсточник,
	|	РасчетыПриемники.ОбъектРасчетовИсточник КАК ОбъектРасчетовИсточник,
	|	РасчетыПриемники.ВалютаИсточник КАК ВалютаИсточник,
	|	РасчетыПриемники.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасчетыПриемники.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасчетыПриемники.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	втРегистраторыПриемников КАК РасчетыПриемники
	|ГДЕ
	|	РасчетыПриемники.ДокументРегистратор = &Ссылка
	|";
	
	Если НЕ ЭтоРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСКлиентамиПоСрокам", "%1");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыСПоставщикамиПоСрокам", "РегистрНакопления.РасчетыСКлиентамиПоСрокам");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%1", "РегистрНакопления.РасчетыСПоставщикамиПоСрокам");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Наборы регистраторов расчетов.
// 
// Параметры:
//  РегистраторыРасчетов - ТаблицаЗначений - Регистраторы расчетов
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Наборы регистраторов расчетов:
//  * Ключ - ДокументСсылка - Регистратор набора.
//  * Значение - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами,РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоСрокам 
//
Функция НаборыРегистраторовРасчетов(РегистраторыРасчетов) Экспорт
	
	Результат = Новый Соответствие;
	Для Каждого Запись Из РегистраторыРасчетов Цикл
		
		Если Запись.ЭтоРасчетыСКлиентами Тогда
			Набор = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			Набор = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		Набор.Отбор.Регистратор.Установить(Запись.Регистратор);
		Набор.Прочитать();
		ТаблицаНабора = Набор.Выгрузить();
		ТаблицаНабора.Индексы.Добавить(ПоляПоиска());
		ТаблицаНабора.Индексы.Добавить(ПоляПоискаИсточника());
		Данные = Новый Структура("ЭтоРасчетыСКлиентами, Набор, КэшНабора",
						Запись.ЭтоРасчетыСКлиентами,ТаблицаНабора,ТаблицаНабора.Скопировать());
		Результат.Вставить(Запись.Регистратор, Данные);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПоляПоиска()
	
	Возврат "ДокументРегистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,"
			+ "КорАналитикаУчетаПоПартнерам,КорОбъектРасчетов,"
			+ "ХозяйственнаяОперация,Сторно,ПоДаннымОбъектаРасчетовИсточника";
	
КонецФункции

Процедура ЗаполнитьПриемникиВОперативномРегистре(НаборЗаписей, ЗапросДанныхОперативногоРегистра, ЕстьОшибка) Экспорт
	
	ЗапросДанныхОперативногоРегистра.УстановитьПараметр("ДанныеНабора", НаборЗаписей.Выгрузить());
	ВспомогательныеДанные = ЗапросДанныхОперативногоРегистра.ВыполнитьПакет();
	ПриемникиДокумента = ВспомогательныеДанные[2].Выгрузить();
	ИсточникиДокумента = ВспомогательныеДанные[3].Выгрузить();
	
	МассивОтборов = Новый Массив;
	МассивОтборов.Добавить(Новый Структура("Регистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
	МассивОтборов.Добавить(Новый Структура("Регистратор,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
	МассивОтборов.Добавить(Новый Структура("Регистратор,ХозяйственнаяОперация,Сторно"));
	Для Каждого Приемник Из ПриемникиДокумента Цикл
		Если Приемник.ВалютаНеСовпадает Тогда
			Отбор = МассивОтборов[0];
			ЗаполнитьЗначенияСвойств(Отбор,Приемник);
			Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
			Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
			РаспределитьПриемникПоИсточникам(НаборЗаписей, Приемник, Отбор, ЕстьОшибка);
		Иначе
			Для Каждого Отбор Из МассивОтборов Цикл
				
				ЗаполнитьЗначенияСвойств(Отбор,Приемник);
				Если Отбор.Свойство("АналитикаУчетаПоПартнерам") Тогда
					Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
				КонецЕслИ;
				Если Отбор.Свойство("ОбъектРасчетов") Тогда
					Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
				КонецЕсли;
				Источники = ИсточникиДокумента.Скопировать(Отбор);
				СуммаИсточников = Источники.Итог("Сумма");
				Если Макс(Приемник.Сумма,-Приемник.Сумма) > Макс(СуммаИсточников,-СуммаИсточников) Тогда
					ЕстьОшибка = Истина;
					Прервать;
				ИначеЕсли Макс(Приемник.Сумма,-Приемник.Сумма) < Макс(СуммаИсточников,-СуммаИсточников) Тогда
					Продолжить;
				Иначе
					РаспределитьПриемникПоИсточникам(НаборЗаписей, Приемник, Отбор, ЕстьОшибка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Распределить приемник по источникам.
// 
// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами - Набор записей
//  КортежПриемник - СтрокаТаблицыЗначений - Кортеж приемник
//  ОтборИсточников - Произвольный, Структура - Отбор источников:
// * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам
// * ОбъектРасчетов  - СправочникСсылка.ОбъектыРасчетов
//  ЕстьОшибка - Булево - Взводится, если не удалось выполнить распределение
//
Процедура РаспределитьПриемникПоИсточникам(НаборЗаписей, КортежПриемник, ОтборИсточников, ЕстьОшибка) Экспорт
	
	НаборЗаписейТЗ= НаборЗаписей.Выгрузить();
	
	ИдентификаторФинЗаписи = Новый УникальныйИдентификатор;
	СуммаКРаспределению = Макс(КортежПриемник.Сумма,-КортежПриемник.Сумма);
	СуммаОтмечено = 0;
	Для Каждого Запись Из НаборЗаписейТЗ Цикл
		Если ЭтоЗаписьПриемник(Запись, КортежПриемник, ОтборИсточников) Тогда
			Запись.ПоДаннымОбъектаРасчетовИсточника = Истина;
			Запись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
			СуммаОтмечено = СуммаОтмечено + ?(Запись.Сумма < 0,-Запись.Сумма,Запись.Сумма);
		ИначеЕсли ЭтоЗаписьИсточник(Запись, ОтборИсточников, КортежПриемник) Тогда
			
			СуммаИсточника = ?(Запись.Сумма > 0,Запись.Сумма,-Запись.Сумма);
			СуммаПриемник = Мин(СуммаИсточника, СуммаКРаспределению);
			Запись.СуммаПриемник = СуммаПриемник;
			СуммаКРаспределению = СуммаКРаспределению - СуммаПриемник;
		
			Запись.АналитикаУчетаПоПартнерамПриемник = КортежПриемник.АналитикаУчетаПоПартнерам;
			Запись.ОбъектРасчетовПриемник = КортежПриемник.ОбъектРасчетов;
			Запись.ВалютаПриемник = КортежПриемник.Валюта;
			Запись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
			
		КонецЕсли;
		
	КонецЦикла;
	Если СуммаКРаспределению <> 0 
		ИЛИ СуммаОтмечено <> Макс(КортежПриемник.Сумма,-КортежПриемник.Сумма) Тогда
		ЕстьОшибка = Истина;
	Иначе
		НаборЗаписей.Загрузить(НаборЗаписейТЗ);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЗаписьПриемник(Запись, КортежПриемник, ОтборИсточников)
	
	АналитикаУчетаПоПартнерамИсточника = Неопределено;
	ОтборИсточников.Свойство("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерамИсточника);
	ОбъектРасчетовИсточника = Неопределено;
	ОтборИсточников.Свойство("ОбъектРасчетов", ОбъектРасчетовИсточника);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "Сумма") Тогда
		ПоложительнаяСумма = Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма > 0
			ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма < 0;
	Иначе
		ПоложительнаяСумма = ?(Запись.ВидДвижения = ВидДвиженияНакопления.Приход, Запись.Долг - Запись.Предоплата,
			Запись.Предоплата - Запись.Долг) > 0;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "ДокументРегистратор") Тогда
		ПодходитПоРегистратору = Запись.ДокументРегистратор = ОтборИсточников.ДокументРегистратор;
	Иначе
		ПодходитПоРегистратору = Запись.Регистратор = ОтборИсточников.Регистратор;
	КонецЕсли;
	
	Возврат НЕ Запись.ПоДаннымОбъектаРасчетовИсточника
			И ПодходитПоРегистратору
			И Запись.ХозяйственнаяОперация = КортежПриемник.ХозяйственнаяОперация
			И Запись.Сторно = КортежПриемник.Сторно
			И Запись.АналитикаУчетаПоПартнерам = КортежПриемник.АналитикаУчетаПоПартнерам 
			И Запись.ОбъектРасчетов = КортежПриемник.ОбъектРасчетов
			И (Запись.КорАналитикаУчетаПоПартнерам = АналитикаУчетаПоПартнерамИсточника ИЛИ АналитикаУчетаПоПартнерамИсточника = Неопределено)
			И (Запись.КорОбъектРасчетов = ОбъектРасчетовИсточника ИЛИ ОбъектРасчетовИсточника = Неопределено)
			И ПоложительнаяСумма = КортежПриемник.ПоложительнаяСумма;
	
КонецФункции

Функция ЭтоЗаписьИсточник(Запись, ОтборИсточников, КортежПриемник)
	
	АналитикаУчетаПоПартнерам = Неопределено;
	ОтборИсточников.Свойство("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	ОбъектРасчетов = Неопределено;
	ОтборИсточников.Свойство("ОбъектРасчетов", ОбъектРасчетов);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "Сумма") Тогда
		ПодходитПоЗнаку = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма > 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма < 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Сумма > 0 И КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Сумма < 0 И КортежПриемник.ПоложительнаяСумма);
	Иначе
		ПодходитПоЗнаку = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Долг > 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Предоплата > 0 И НЕ КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Расход И Запись.Долг > 0 И КортежПриемник.ПоложительнаяСумма
				ИЛИ Запись.ВидДвижения = ВидДвиженияНакопления.Приход И Запись.Предоплата > 0 И КортежПриемник.ПоложительнаяСумма);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, "ДокументРегистратор") Тогда
		ПодходитПоРегистратору = Запись.ДокументРегистратор = ОтборИсточников.ДокументРегистратор;
	Иначе
		ПодходитПоРегистратору = Запись.Регистратор = ОтборИсточников.Регистратор;
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетовПриемник)
			И Запись.ХозяйственнаяОперация = ОтборИсточников.ХозяйственнаяОперация
			И ПодходитПоРегистратору
			И Запись.Сторно = ОтборИсточников.Сторно
			И (Запись.АналитикаУчетаПоПартнерам = АналитикаУчетаПоПартнерам ИЛИ АналитикаУчетаПоПартнерам = Неопределено)
			И (Запись.ОбъектРасчетов = ОбъектРасчетов ИЛИ ОбъектРасчетов = Неопределено)
			И ПодходитПоЗнаку;
	
КонецФункции

Процедура ЗаполнитьПриемникиВРасчетахПоСрокам(ДанныеРаспределения, ЕстьОшибка) Экспорт
	
	НаборЗаписей = ДанныеРаспределения.НаборЗаписей;
	ВспомогательныеДанные = ДанныеРаспределения.ВспомогательныеДанные;
	РегистраторыРасчетов = ДанныеРаспределения.РегистраторыРасчетов;
	
	МассивОтборов = Новый Массив;
	МассивОтборов.Добавить(Новый Структура("ДокументРегистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
	МассивОтборов.Добавить(Новый Структура("ДокументРегистратор,ОбъектРасчетов,ХозяйственнаяОперация,Сторно"));
	МассивОтборов.Добавить(Новый Структура("ДокументРегистратор,ХозяйственнаяОперация,Сторно"));
	
	НаборыРегистраторовРасчетов = НаборыРегистраторовРасчетов(РегистраторыРасчетов);
	ПриемникиДокументаПоСрокам = ВспомогательныеДанные[2].Выгрузить();
	ИсточникиДокументаПоСрокам = ВспомогательныеДанные[3].Выгрузить();
	Для Каждого Приемник Из ПриемникиДокументаПоСрокам Цикл
		Если Приемник.ВалютаНеСовпадает Тогда
			Отбор = МассивОтборов[0];
			ЗаполнитьЗначенияСвойств(Отбор,Приемник);
			Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
			Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
			РаспределитьПриемникПоИсточникамПоСрокам(НаборыРегистраторовРасчетов, Приемник, Отбор, ЕстьОшибка);
		Иначе
			Для Каждого Отбор Из МассивОтборов Цикл
				ЗаполнитьЗначенияСвойств(Отбор,Приемник);
				Если Отбор.Свойство("АналитикаУчетаПоПартнерам") Тогда
					Отбор.АналитикаУчетаПоПартнерам = Приемник.КорАналитикаУчетаПоПартнерам;
				КонецЕсли;
				Если Отбор.Свойство("ОбъектРасчетов") Тогда
					Отбор.ОбъектРасчетов = Приемник.КорОбъектРасчетов;
				КонецЕсли;
				Источники = ИсточникиДокументаПоСрокам.Скопировать(Отбор);
				СуммаИсточников = Источники.Итог("Сумма");
				Если Макс(Приемник.Сумма,-Приемник.Сумма) > Макс(СуммаИсточников,-СуммаИсточников) Тогда
					ЕстьОшибка = Истина;
					Прервать;
				ИначеЕсли Макс(Приемник.Сумма,-Приемник.Сумма) < Макс(СуммаИсточников,-СуммаИсточников) Тогда
					Продолжить;
				Иначе
					РаспределитьПриемникПоИсточникамПоСрокам(НаборыРегистраторовРасчетов, Приемник, Отбор, ЕстьОшибка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОшибка Тогда
		ЗаписатьНаборыРегистраторов(НаборЗаписей, НаборыРегистраторовРасчетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНаборыРегистраторов(НаборЗаписей, НаборыРегистраторовРасчетов)
	
	Для Каждого Описание Из НаборыРегистраторовРасчетов Цикл
		ОчиститьКорЧастьДляПустыхПриемников(Описание.Значение.Набор);
		Если Описание.Значение.ЭтоРасчетыСКлиентами Тогда
			Набор = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.СоздатьНаборЗаписей();
		Иначе
			Набор = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.СоздатьНаборЗаписей();
		КонецЕсли;
		Набор.Отбор.Регистратор.Установить(Описание.Ключ);
		Набор.Загрузить(Описание.Значение.Набор);
		Если Набор.Количество() > 0 Тогда
			ИзменилисьИтоги = ЕстьИзмененияИтоговНабора(Набор);
		КонецЕсли;
		Если НЕ ИзменилисьИтоги Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Распределить приемник по источникам по срокам.
// 
// Параметры:
//  НаборыРегистраторовРасчетов - Соответствие Из КлючИЗначение- Наборы регистраторов расчетов:
//  * Ключ - ДокументСсылка - Регистратор набора.
//  * Значение - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами,РегистрНакопленияНаборЗаписей.РасчетыСПоставщикамиПоСрокам
//  КортежПриемник - СтрокаТаблицыЗначений - Кортеж приемник
//  ОтборИсточников - Произвольный - Отбор источников:
// 	* АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам
// 	* ОбъектРасчетов  - СправочникСсылка.ОбъектыРасчетов
// 	ЕстьОшибка - Булево - Взводится, если не удалось выполнить распределение
//  
Процедура РаспределитьПриемникПоИсточникамПоСрокам(НаборыРегистраторовРасчетов, КортежПриемник, ОтборИсточников, ЕстьОшибка) Экспорт
	
	ИдентификаторФинЗаписи = Новый УникальныйИдентификатор;
	СуммаКРаспределению = Макс(КортежПриемник.Сумма,-КортежПриемник.Сумма);
	Для Каждого Описание Из НаборыРегистраторовРасчетов Цикл
		
		Если СуммаКРаспределению = 0 Тогда
			Отбор = Новый Структура(ПоляПоиска());
			ЗаполнитьЗначенияСвойств(Отбор, КортежПриемник);
			Отбор.ПоДаннымОбъектаРасчетовИсточника = Ложь;
			НайденныеСтроки = Описание.Значение.Набор.НайтиСтроки(Отбор);
			Для Каждого Запись Из НайденныеСтроки Цикл
				Запись.ПоДаннымОбъектаРасчетовИсточника = Истина;
				Запись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
			КонецЦикла;
			
		Иначе
			сч = 0;
			Пока сч < Описание.Значение.Набор.Количество() Цикл
				
				Запись = Описание.Значение.Набор[сч];
				Если ЭтоЗаписьПриемник(Запись, КортежПриемник, ОтборИсточников) Тогда
					
					Запись.ПоДаннымОбъектаРасчетовИсточника = Истина;
					Запись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
				
				ИначеЕсли ЭтоЗаписьИсточник(Запись, ОтборИсточников, КортежПриемник) 
					И СуммаКРаспределению > 0 Тогда
					
					СуммаИсточника = Запись.Долг + Запись.Предоплата;
					СуммаПриемник = Мин(СуммаИсточника, СуммаКРаспределению);
					Если СуммаПриемник = СуммаИсточника Тогда
						Запись.СуммаПриемник = СуммаПриемник;
						Запись.АналитикаУчетаПоПартнерамПриемник = КортежПриемник.АналитикаУчетаПоПартнерам;
						Запись.ОбъектРасчетовПриемник = КортежПриемник.ОбъектРасчетов;
						Запись.ВалютаПриемник = КортежПриемник.Валюта;
						Запись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
					Иначе
						НоваяЗапись = Описание.Значение.Набор.Вставить(сч);
						ЗаполнитьЗначенияСвойств(НоваяЗапись,Запись);
						Если Запись.Долг > 0 Тогда
							СуммаРегл = Окр(Запись.ДолгРегл/Запись.Долг*СуммаПриемник,2);
							СуммаУпр = Окр(Запись.ДолгУпр/Запись.Долг*СуммаПриемник,2);
							Запись.ДолгРегл = Запись.ДолгРегл - СуммаРегл;
							Запись.ДолгУпр = Запись.ДолгУпр - СуммаУпр;
							Запись.Долг = Запись.Долг - СуммаПриемник;
							НоваяЗапись.ДолгРегл = СуммаРегл;
							НоваяЗапись.ДолгУпр = СуммаУпр;
							НоваяЗапись.Долг = СуммаПриемник;
						Иначе
							СуммаРегл = Окр(Запись.ПредоплатаРегл/Запись.Предоплата*СуммаПриемник,2);
							СуммаУпр = Окр(Запись.ПредоплатаУпр/Запись.Предоплата*СуммаПриемник,2);
							Запись.ПредоплатаРегл = Запись.ПредоплатаРегл - СуммаРегл;
							Запись.ПредоплатаУпр = Запись.ПредоплатаУпр - СуммаУпр;
							Запись.Предоплата = Запись.Предоплата - СуммаПриемник;
							НоваяЗапись.ПредоплатаРегл = СуммаРегл;
							НоваяЗапись.ПредоплатаУпр = СуммаУпр;
							НоваяЗапись.Предоплата = СуммаПриемник;
						КонецЕсли;
						НоваяЗапись.АналитикаУчетаПоПартнерамПриемник = КортежПриемник.АналитикаУчетаПоПартнерам;
						НоваяЗапись.ОбъектРасчетовПриемник = КортежПриемник.ОбъектРасчетов;
						НоваяЗапись.ВалютаПриемник = КортежПриемник.Валюта;
						
						НоваяЗапись.ИдентификаторФинЗаписи = ИдентификаторФинЗаписи;
						НоваяЗапись.СуммаПриемник = СуммаПриемник;
						
					КонецЕсли;
					СуммаКРаспределению = СуммаКРаспределению - СуммаПриемник;
					
				КонецЕсли;
				сч = сч + 1;
			КонецЦикла;//по записям набора
		КонецЕсли;// СуммаКРаспределению = 0
	КонецЦикла;//по наборам регистраторов
	Если СуммаКРаспределению <> 0 Тогда
		ЕстьОшибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеКорАналитикиВзаимозачета

// Запрос кор. объект расчетов.
// 
// Параметры:
//  ЭтоРасчетыСКлиентами - Булево - Это расчеты с клиентами.
//  ЗаполнитьФлагПоСрокам - Булево - Заполнение флага в расчетах по срокам.
// 
// Возвращаемое значение:
//  Запрос - Запрос вспомогательных данных
Функция ЗапросКорАналитики() Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаКорАналитики());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаКорАналитики()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приемники.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Приемники.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Источники.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	Источники.АналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Приемники.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Источники
	|	ПО Приемники.Регистратор = Источники.Регистратор
	|		И Приемники.ОбъектРасчетов = Источники.ОбъектРасчетовПриемник
	|		И Приемники.АналитикаУчетаПоПартнерам = Источники.АналитикаУчетаПоПартнерамПриемник
	|		И Приемники.ИдентификаторФинЗаписи = Источники.ИдентификаторФинЗаписи
	|ГДЕ
	|	Приемники.Регистратор = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИсправитьКорАналитикуВзаимозачета(Запрос, НаборЗаписей) Экспорт
	
	ПроблемныйРегистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	Запрос.УстановитьПараметр("Ссылка", ПроблемныйРегистратор);
	КорАналитикаДокумента = Запрос.Выполнить().Выгрузить();
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ПоДаннымОбъектаРасчетовИсточника Тогда
			Отбор = Новый Структура("ОбъектРасчетов,АналитикаУчетаПоПартнерам,ИдентификаторФинЗаписи");
			ЗаполнитьЗначенияСвойств(Отбор, Запись);
			НайденныеСтроки = КорАналитикаДокумента.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				КорАналитика = НайденныеСтроки[0];
				Запись.КорОбъектРасчетов = КорАналитика.КорОбъектРасчетов;
				Запись.КорАналитикаУчетаПоПартнерам = КорАналитика.КорАналитикаУчетаПоПартнерам;
			Иначе
				СтрокиТекста = Новый Массив;
				СтрокиТекста.Добавить(НСтр("ru = 'Не удалось актуализировать кор. аналитику. Обновление документа отменено.';
											|en = 'Не удалось актуализировать кор. аналитику. Обновление документа отменено.'"));
				СтрокиТекста.Добавить(ТекстПерепроведитеДокументВРучную());
				ТекстРекомендации = СтрСоединить(СтрокиТекста, Символы.ПС);
				ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(
					ПроблемныйРегистратор,
					ТекстРекомендации);
			КонецЕсли;
		Иначе
			Запись.КорОбъектРасчетов = Неопределено;
			Запись.КорАналитикаУчетаПоПартнерам = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Заполнить флаг в расчетах по срокам.
// 
// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей.РасчетыСКлиентами,РегистрНакопленияНаборЗаписей.РасчетыСПоставщиками
//  ВспомогательныеДанные - Массив Из ТаблицаЗначений - 
//  РегистраторыРасчетов - Массив из ДокументСсылка -
//
Процедура ЗаполнитьФлагВРасчетахПоСрокам(НаборЗаписей, ВспомогательныеДанные, РегистраторыРасчетов) Экспорт
	
	НаборыРегистраторовРасчетов = НаборыРегистраторовРасчетов(РегистраторыРасчетов);
	Приемники = ВспомогательныеДанные[5].Выгрузить();
	Для Каждого Приемник Из Приемники Цикл
		
		СведенияНабора = НаборыРегистраторовРасчетов[Приемник.Регистратор];
		Если СведенияНабора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеНабора = СведенияНабора.Набор;
		
		Отбор = Новый Структура(ПоляПоискаИсточника());
		ЗаполнитьЗначенияСвойств(Отбор, Приемник);
		НайденныеЗаписи = ДанныеНабора.НайтиСтроки(Отбор);
		Для Каждого Запись Из НайденныеЗаписи Цикл
			Если Запись.Долг + Запись.Предоплата = Приемник.Сумма
				И НЕ Запись.ПоДаннымОбъектаРасчетовИсточника
				И НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетовПриемник)
				И НЕ ЗначениеЗаполнено(Запись.АналитикаУчетаПоПартнерамПриемник)
				И НЕ ЗначениеЗаполнено(Запись.ВалютаПриемник)
				И Запись.СуммаПриемник = 0 Тогда
				Запись.КорАналитикаУчетаПоПартнерам = Приемник.АналитикаУчетаПоПартнерамИсточник;
				Запись.КорОбъектРасчетов = Приемник.ОбъектРасчетовИсточник;
				Запись.ИдентификаторФинЗаписи = Приемник.ИдентификаторФинЗаписи;
				Запись.ПоДаннымОбъектаРасчетовИсточника = Истина;
				Приемник.Сумма = Макс(0,Приемник.Сумма - Запись.Долг - Запись.Предоплата);
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;
	
	ЗаписатьНаборыРегистраторов(НаборЗаписей, НаборыРегистраторовРасчетов);
	
КонецПроцедуры

Процедура ОчиститьКорЧастьДляПустыхПриемников(НаборЗаписей)
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ Запись.ПоДаннымОбъектаРасчетовИсточника
				И НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетовПриемник)
				И НЕ ЗначениеЗаполнено(Запись.АналитикаУчетаПоПартнерамПриемник)
				И НЕ ЗначениеЗаполнено(Запись.ВалютаПриемник)
				И Запись.СуммаПриемник = 0 Тогда
			Запись.КорАналитикаУчетаПоПартнерам = Неопределено;
			Запись.КорОбъектРасчетов = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляПоискаИсточника()
	
	Возврат "ДокументРегистратор,АналитикаУчетаПоПартнерам,ОбъектРасчетов,Валюта,ХозяйственнаяОперация";
	
КонецФункции

Функция ТаблицыРавны(Таблица1, Таблица2)
	
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из Таблица1.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Результат = Истина;
	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		Результат = Ложь;
	КонецЕсли;
	Если Результат Тогда
		Для Счетчик = 0 По Таблица1.Количество() - 1 Цикл
			Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
						Таблица1[Счетчик],
						Таблица2[Счетчик],
						МассивКолонок) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Функция ДанныеЗаменыОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОперацияПереносДолга", Перечисления.ХозяйственныеОперации.ПереносДолга);
	Результат.Вставить("ОперацияПереносАванса", Перечисления.ХозяйственныеОперации.ПереносАванса);
	Результат.Вставить("ОперацияВзаимозачет", Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности);
	Результат.Вставить("НастройкаПереносДолга", Справочники.НастройкиХозяйственныхОпераций.ПереносДолга);
	Результат.Вставить("НастройкаПереносАванса", Справочники.НастройкиХозяйственныхОпераций.ПереносАванса);
	Результат.Вставить("НастройкаВзаимозачет", Справочники.НастройкиХозяйственныхОпераций.ВзаимозачетЗадолженности);
	Результат.Вставить("ВидыОперацийПоДолгу", ВидыОперацийПоДолгу());
	Результат.Вставить("ВидыОперацийПоАвансу", ВидыОперацийПоАвансу());
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаменитьХозяйственнуюОперацию(ДанныеЗамены, НаборЗаписей, ЭтоПереносДолга) Экспорт
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ХозяйственнаяОперация = ДанныеЗамены.ОперацияВзаимозачет Тогда
			Если ЭтоПереносДолга Тогда
				Запись.ХозяйственнаяОперация = ДанныеЗамены.ОперацияПереносДолга;
				Запись.НастройкаХозяйственнойОперации = ДанныеЗамены.НастройкаПереносДолга;
			Иначе
				Запись.ХозяйственнаяОперация = ДанныеЗамены.ОперацияПереносАванса;
				Запись.НастройкаХозяйственнойОперации = ДанныеЗамены.НастройкаПереносАванса;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыОпераций() Экспорт
	
	Результат = ВидыОперацийПоДолгу();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ВидыОперацийПоАвансу());
	Возврат Результат;
	
КонецФункции

Функция ВидыОперацийПоДолгу() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуОрганизациями);
	
	Возврат Массив;
	
КонецФункции

Функция ВидыОперацийПоАвансу() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуОрганизацияКонтрагент);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуКонтрагентами);
	Массив.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуОрганизациями);
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли