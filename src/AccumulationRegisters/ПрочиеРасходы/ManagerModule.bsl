#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
//++ НЕ УТ

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//  РегистрацияКОтражению - Булево - Признак получения параметров для регистрации к отражению в учете
//
// Возвращаемое значение:
// 	см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра = Неопределено, РегистрацияКОтражению = Ложь) Экспорт
	
	ПараметрыОтражения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете(РегистрацияКОтражению);
	
	Если РегистрацияКОтражению Тогда
		Возврат ПараметрыОтражения;
	КонецЕсли;
	
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "Подразделение";
	//++ НЕ УТКА
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки = "СтатьяРасходов.ГруппаФинансовогоУчета";
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "Подразделение";
	//-- НЕ УТКА
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаРегл");
	ПараметрыОтражения.ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
	ПараметрыОтражения.СтруктураАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(ПараметрыОтражения.ТипДанныхУчета));
	ПараметрыОтражения.СтруктураАналитики.СтатьяДоходовРасходов.ПутьКДанным = "СтатьяРасходов";
	ПараметрыОтражения.СтруктураАналитики.АналитикаДоходов.Вставить("Значение", Неопределено);
	ПараметрыОтражения.ПутьКДаннымДопНастройкаХозОперации = СтрЗаменить(
		"ВЫБОР
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗакупкаУПоставщика)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПоступлениеУслуг)
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗакупкаУПоставщикаРеглУчет)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПоступлениеУслугРеглУчет)
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОформлениеГТДБрокером)
		|			ИЛИ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОформлениеГТДСамостоятельно)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.РасходыНаТаможенныеСборыШтрафы)
		|		КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПрочаяВыдачаДенежныхСредств)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПрочиеРасходы)
		|		КОГДА ПсевдонимИсточникаДанных.Регистратор ССЫЛКА Документ.КорректировкаРеализации
		|			ТОГДА ВЫБОР
		|				КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.РеализацияКлиенту)
		|					ИЛИ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.КорректировкаЗадолженности)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.КорректировкаРеализацииСоСписаниемНаРасходы)
		|				ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|			КОНЕЦ
		|		КОГДА ПсевдонимИсточникаДанных.Регистратор ССЫЛКА Документ.РаспределениеПрочихЗатрат
		|			ТОГДА ВЫБОР
		|				КОГДА ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукции)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ТранзитРасходовМеждуОВЗ)
		|				ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|			КОНЕЦ
		|		ИНАЧЕ ПсевдонимИсточникаДанных.НастройкаХозяйственнойОперации
		|	КОНЕЦ",
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//-- НЕ УТ

//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
//
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник
//                               уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов,
		Новый Структура(СвойстваИсточника, "ГФУДоходовРасходов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
//
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");

	Возврат ИсточникиПодразделений;

КонецФункции

// Определяет источники направлений регистра и их свойства.
//
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельности, "НаправлениеДеятельности");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
//
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("СтатьяРасходов");
	МассивСубконто.Добавить("АналитикаРасходов");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);

КонецФункции

// Определяет показатели в валюте регистра.
//
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет показатели в валюте регистра.
//
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиКоличества() Экспорт

	ПоказателиКоличества = Новый Соответствие;
	Возврат ПоказателиКоличества;

КонецФункции

//-- НЕ УТКА

// Определяет показатели регистра.
//
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаУпрСНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

// Возвращает текст запроса с типовой структурой временной таблицы "ВтИсходныеПрочиеРасходы".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования временной таблицы ВтИсходныеПрочиеРасходы.
//
Функция ТекстОписаниеВтИсходныеПрочиеРасходы(ДополнительныеПоля = "") Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	Строки.Период,
	|	Строки.ВидДвижения,
	|	Строки.Организация,
	|	Строки.Подразделение,
	|	Строки.СтатьяРасходов,
	|	Строки.АналитикаРасходов,
	|	Строки.НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДС,
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаБезНДСУпр,
	|	0 КАК СуммаСНДСРегл,
	|	0 КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	Строки.ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры,
	|	
	|	Строки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	Строки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|	
	|	,&ДополнительныеПоля
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК Строки
	|";
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текст запроса для формирования временной таблицы "ВтПрочиеРасходы".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
//  ВозможныРазныеПериодыВДвижениях - Булево - определяет где хранятся параметры партионного учета, в параметрах запроса или во временной таблице ВТПараметрыПартионногоУчетаДляПроведения
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования временной таблицы ВтПрочиеРасходы.
//
Функция ТекстЗапросаТаблицаВтПрочиеРасходы(ДополнительныеПоля = "", ВозможныРазныеПериодыВДвижениях = Ложь) Экспорт
	
	// Условия для заполнения ресурсов регистра аналогичны условиям в функции ТекстСписанияРасходовНаВыбытиеТоваровРегистрПрочиеРасходы() общего модуля ПартионныйУчет22
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	ВтИсходныеПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	МАКСИМУМ(РеестрДокументов.Организация) КАК Организация
	|
	|ПОМЕСТИТЬ ВтРеестрДокументовПрочиеРасходы
	|ИЗ 
	|	ВтИсходныеПрочиеРасходы КАК ВтИсходныеПрочиеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ВтИсходныеПрочиеРасходы.АналитикаРасходов = РеестрДокументов.Ссылка
	|ГДЕ
	|	(РеестрДокументов.Ссылка ССЫЛКА Документ.АктВыполненныхРабот
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ВводОстатков
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ВводОстатковПрочиеРасходы
	|
	//++ НЕ УТКА
	|
	//++ Устарело_Переработка24
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказДавальца
	//-- Устарело_Переработка24
	|
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказДавальца2_5
	|
	//++ Устарело_Производство21
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказНаПроизводство
	//-- Устарело_Производство21
	|
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказНаПроизводство2_2
	|
	//-- НЕ УТКА
	|
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказКлиента
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказНаПеремещение
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказНаСборку
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаказПоставщику
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.РеализацияТоваровУслуг
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.РеализацияУслугПрочихАктивов
	//++ НЕ УТКА
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ОтчетДавальцуМеждуОрганизациями
	//-- НЕ УТКА
	|	ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.СборкаТоваров)
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтИсходныеПрочиеРасходы.АналитикаРасходов
	|;
	|
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	Строки.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(НаправленияДеятельности.УчетЗатрат, ЛОЖЬ)
	|			ТОГДА Строки.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КОНЕЦ) КАК НаправлениеДеятельности,
	|
	|	Строки.СуммаСНДС КАК Сумма,
	// Условия по сумме без НДС должны совпадать с условиями в:
	// - см. РасчетСебестоимостиКорректировкаСтоимости.СкорректироватьСтоимостьСписанияЗапасов и вызываемых методах.
	// - см. РасчетСебестоимостиКорректировкаСтоимости.СформироватьДвиженияПрочиеРасходыДопРасходыЗапросом в приходном движении.
	|	(ВЫБОР
	|		КОГДА НЕ Статья.ВариантРаспределенияРасходовУпр В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы))
	|			ТОГДА Строки.СуммаБезНДС
	|		ИНАЧЕ 0 КОНЕЦ) КАК СуммаБезНДС,
	|	(ВЫБОР
	|		КОГДА НЕ &УправленческийУчетОрганизаций И НЕ &ЭтоВводОстатковВНА_2_4
	|			ТОГДА 0
	|		КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И Статья.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента)
	|				И НЕ (&ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|					ИЛИ &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|						И НЕ Статья.ПринятиеКНалоговомуУчету)
	|			ТОГДА Строки.СуммаБезНДСУпр + (Строки.СуммаСНДС - Строки.СуммаБезНДС)
	|		ИНАЧЕ Строки.СуммаБезНДСУпр КОНЕЦ) КАК СуммаУпр,
	// Если изменяется условие расчета поля, то внести изменения в ПеренестиДанныеРегистраПартииПрочихРасходовВРегистрПрочиеРасходы()
	// и см. РасчетСебестоимостиНДД.ИзменитьТекстЗапросаПрочиеРасходы
	|	(ВЫБОР 
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА 0
	|		КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И Статья.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента)
	|				И НЕ (&ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|					ИЛИ &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|						И НЕ Статья.ПринятиеКНалоговомуУчету)
	|				И НЕ &ПартионныйУчетНеИспользуется
	|			ТОГДА Строки.СуммаСНДСРегл
	|		ИНАЧЕ Строки.СуммаБезНДСРегл КОНЕЦ) КАК СуммаРегл,
	|
	|	(ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА 0
	|		КОГДА НЕ Статья.ПринятиеКналоговомуУчету И (Строки.СуммаСНДСРегл <> 0 ИЛИ Строки.ВременнаяРазница <> 0) ТОГДА
	|			(ВЫБОР КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И Статья.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента)
	|				И НЕ (&ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|					ИЛИ &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|						И НЕ Статья.ПринятиеКНалоговомуУчету)
	|				И НЕ &ПартионныйУчетНеИспользуется
	|			ТОГДА Строки.СуммаСНДСРегл
	|			ИНАЧЕ Строки.СуммаБезНДСРегл КОНЕЦ)
	|			- Строки.ВременнаяРазница
	|		ИНАЧЕ Строки.ПостояннаяРазница КОНЕЦ) КАК ПостояннаяРазница,
	|	(ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0
	|		ИНАЧЕ Строки.ВременнаяРазница КОНЕЦ) КАК ВременнаяРазница,
	|	Строки.ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Справочник.Организации)
	|		 И Строки.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Строки.АналитикаРасходов
	//++ НЕ УТ
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Справочник.ОбъектыВозникновенияЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Справочник.ОбъектыВозникновенияЗатрат).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Справочник.ПартииПроизводства)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Справочник.ПартииПроизводства).Организация
	//-- НЕ УТ
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПередачаТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПеремещениеТоваров)
	|		 И ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПеремещениеТоваров).ХозяйственнаяОперация
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПеремещениеТоваров).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПеремещениеТоваров)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПеремещениеТоваров).Организация
	|		КОГДА ЕСТЬNULL(ВтРеестрДокументов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) 
	|				<> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВтРеестрДокументов.Организация
	|		ИНАЧЕ Строки.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|
	|	Строки.ИдентификаторФинЗаписи         КАК ИдентификаторФинЗаписи,
	|	Строки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ПОМЕСТИТЬ ВтПрочиеРасходы
	|ИЗ
	|	ВтИсходныеПрочиеРасходы КАК Строки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|	ПО
	|		Статья.Ссылка = Строки.СтатьяРасходов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО НаправленияДеятельности.Ссылка = Строки.НаправлениеДеятельности
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтРеестрДокументовПрочиеРасходы КАК ВтРеестрДокументов
	|		ПО Строки.АналитикаРасходов = ВтРеестрДокументов.АналитикаРасходов
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|				И НЕ Статья.ПринятиеКНалоговомуУчету
	|			ТОГДА &СтатьяРасходовСписаниеНДС
	|		ИНАЧЕ Строки.СтатьяРасходов 
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|				И НЕ Статья.ПринятиеКНалоговомуУчету
	|			ТОГДА &АналитикаРасходовСписаниеНДС
	|		ИНАЧЕ Строки.АналитикаРасходов 
	|	КОНЕЦ КАК АналитикаРасходов,
	|	Строки.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(НаправленияДеятельности.УчетЗатрат, ЛОЖЬ)
	|			ТОГДА Строки.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КОНЕЦ) КАК НаправлениеДеятельности,
	|
	|	0 КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	(ВЫБОР
	|		КОГДА НЕ &УправленческийУчетОрганизаций И НЕ &ЭтоВводОстатковВНА_2_4
	|			ТОГДА 0
	|		КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И Статья.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента)
	|				И &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|				И НЕ &ПартионныйУчетНеИспользуется
	|					ИЛИ &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|				И НЕ Статья.ПринятиеКНалоговомуУчету
	|				И НЕ &ПартионныйУчетНеИспользуется
	|			ТОГДА (Строки.СуммаСНДС - Строки.СуммаБезНДС)
	|		ИНАЧЕ 0 КОНЕЦ) КАК СуммаУпр,
	// Если изменяется условие расчета поля, то внести изменения в ПеренестиДанныеРегистраПартииПрочихРасходовВРегистрПрочиеРасходы()
	// и см. РасчетСебестоимостиНДД.ИзменитьТекстЗапросаПрочиеРасходы
	|	(ВЫБОР 
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА 0
	|		КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И Статья.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента)
	|				И НЕ &ПартионныйУчетНеИспользуется
	|				И &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|					ИЛИ &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|				И НЕ Статья.ПринятиеКНалоговомуУчету
	|				И НЕ &ПартионныйУчетНеИспользуется
	|			ТОГДА Строки.СуммаСНДСРегл - Строки.СуммаБезНДСРегл
	|		ИНАЧЕ 0 КОНЕЦ) КАК СуммаРегл,
	|
	|	(ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА 0
	|		КОГДА Статья.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И НЕ &ИспользуетсяУправлениеВНА_2_4
	|			ТОГДА 0
	|		КОГДА НЕ Статья.ПринятиеКналоговомуУчету И (Строки.СуммаСНДСРегл <> 0) ТОГДА
	|			(ВЫБОР КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И Статья.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента)
	|				И НЕ &ПартионныйУчетНеИспользуется
	|				И &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|					ИЛИ &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|				И НЕ Статья.ПринятиеКНалоговомуУчету
	|				И НЕ &ПартионныйУчетНеИспользуется
	|			ТОГДА Строки.СуммаСНДСРегл - Строки.СуммаБезНДСРегл
	|			ИНАЧЕ 0 КОНЕЦ)
	|		ИНАЧЕ 0 КОНЕЦ) КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	Строки.ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Справочник.Организации)
	|		 И Строки.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Строки.АналитикаРасходов
	//++ НЕ УТ
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Справочник.ОбъектыВозникновенияЗатрат)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Справочник.ОбъектыВозникновенияЗатрат).Организация
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Справочник.ПартииПроизводства)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Справочник.ПартииПроизводства).Организация
	//-- НЕ УТ
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПередачаТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.АналитикаРасходов) = ТИП(Документ.ПеремещениеТоваров)
	|			ТОГДА ВЫРАЗИТЬ(Строки.АналитикаРасходов КАК Документ.ПеремещениеТоваров).Организация
	|		КОГДА ЕСТЬNULL(ВтРеестрДокументов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) 
	|				<> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВтРеестрДокументов.Организация
	|		ИНАЧЕ Строки.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|
	|	&Идентификатор КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|				И НЕ Статья.ПринятиеКНалоговомуУчету
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНДСПоПриобретеннымЦенностям)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВключениеНДСВСтоимость)
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ИЗ
	|	ВтИсходныеПрочиеРасходы КАК Строки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|	ПО
	|		Статья.Ссылка = Строки.СтатьяРасходов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО НаправленияДеятельности.Ссылка = Строки.НаправлениеДеятельности
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтРеестрДокументовПрочиеРасходы КАК ВтРеестрДокументов
	|		ПО Строки.АналитикаРасходов = ВтРеестрДокументов.АналитикаРасходов
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И(&ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|		И Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|	ИЛИ &СписыватьНДСПоРасходамНеПринимаемымВНУ
	|		И НЕ Статья.ПринятиеКНалоговомуУчету
	|		И Строки.СуммаСНДСРегл - Строки.СуммаБезНДСРегл <> 0)
	|";
	
	// При изменении логики по ВозможныРазныеПериодыВДвижениях, так же исправить в РасчетСебестоимостиНДД.ИзменитьТекстЗапросаПрочиеРасходы.
	ТекстСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты ПО ИСТИНА";
	
	Если НЕ ВозможныРазныеПериодыВДвижениях Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстСоединения, "");
		
	Иначе
		
		// Параметры партионного учета хранятся не в параметрах запроса, а в одноименных полях временной таблицы ВТПараметрыПартионногоУчетаДляПроведения.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстСоединения,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ПараметрыПартионногоУчета
			|	ПО ПараметрыПартионногоУчета.Период = НАЧАЛОПЕРИОДА(Строки.Период, МЕСЯЦ)
			|	 И ПараметрыПартионногоУчета.Организация = Строки.Организация");
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить("ИспользоватьУчетПрочихДоходовРасходовРегл");
		МассивПараметров.Добавить("ИспользоватьУчетПрочихДоходовРасходов");
		МассивПараметров.Добавить("УправленческийУчетОрганизаций");
		МассивПараметров.Добавить("ЭтоВводОстатковВНА_2_4");
		МассивПараметров.Добавить("ИспользуетсяУправлениеВНА_2_4");
		МассивПараметров.Добавить("ФормироватьНДСПредъявленныйПриВключенииВСтоимость");
		МассивПараметров.Добавить("СписыватьНДСПоРасходамНеПринимаемымВНУ");
		МассивПараметров.Добавить("СтатьяРасходовСписаниеНДС");
		МассивПараметров.Добавить("АналитикаРасходовСписаниеНДС");
		
		МассивПараметров.Добавить("ПартионныйУчетНеИспользуется");
		
		Для Каждого ТекущийПараметр Из МассивПараметров Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ТекущийПараметр, "ПараметрыПартионногоУчета." + ТекущийПараметр);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрНайти(ДополнительныеПоля, "ИдентификаторСтроки") <> 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Идентификатор", "Строки.ИдентификаторСтроки");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Идентификатор", "Строки.ИдентификаторФинЗаписи");
	КонецЕсли;
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для формирования движений по регистру "Прочие расходы".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
//  ВозможныРазныеПериодыВДвижениях - Булево - определяет где хранятся параметры партионного учета, в параметрах запроса или во временной таблице ВТПараметрыПартионногоУчетаДляПроведения
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования движений в регистре ПрочиеРасходы.
//
Функция ТекстЗапросаТаблицаПрочиеРасходы(ДополнительныеПоля = "", ВозможныРазныеПериодыВДвижениях = Ложь) Экспорт
	
	ТекстЗапросаУчетнаяПолитикаПоНДД = РасчетСебестоимостиЛокализация.ТекстЗапросаНастроекНДД("ВтПрочиеРасходы", 
		"ПрочиеРасходы_ТекстЗапросаТаблицаПрочиеРасходы", 
		Неопределено, 
		ВозможныРазныеПериодыВДвижениях);
	
	ТекстЗапросаПрочиеРасходы = "
	// Формирование таблицы для записи в регистр "ПрочиеРасходы".
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(НД.УчетЗатрат, ЛОЖЬ) ТОГДА
	|			Строки.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	Строки.Сумма КАК Сумма,
	|	Строки.СуммаБезНДС КАК СуммаБезНДС,
	|	Строки.СуммаУпр КАК СуммаУпр,
	|
	|	Строки.СуммаРегл КАК СуммаРегл,
	|	Строки.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Строки.ВременнаяРазница КАК ВременнаяРазница,
	|	&СуммаНДД КАК СуммаНДД,
	|
	|	Строки.ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры,
	|
	|	Строки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Строки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО НД.Ссылка = Строки.НаправлениеДеятельности
	|	ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаПоНДДПрочиеРасходы КАК УчетнаяПолитикаПоНДД
	|		ПО Строки.Организация = УчетнаяПолитикаПоНДД.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты ПО ИСТИНА
	|ГДЕ
	|	(Строки.Сумма <> 0 ИЛИ Строки.СуммаБезНДС <> 0 ИЛИ Строки.СуммаУпр <> 0
	|	ИЛИ Строки.СуммаРегл <> 0 ИЛИ Строки.ПостояннаяРазница <> 0 ИЛИ Строки.ВременнаяРазница <> 0
	|	ИЛИ &УсловиеСуммаНДД
	|	)
	|
	// Сторнирование расходов в упр. учете у организации - источника.
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(НД.УчетЗатрат, ЛОЖЬ) ТОГДА
	|			Строки.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	-Строки.Сумма КАК Сумма,
	|	-Строки.СуммаБезНДС КАК СуммаБезНДС,
	|	-Строки.СуммаУпр КАК СуммаУпр,
	|	0 КАК СуммаРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК СуммаНДД,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторнированиеРасходовУУ) КАК ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры,
	|
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Строки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО НД.Ссылка = Строки.НаправлениеДеятельности
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|	И Строки.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И (Строки.Сумма <> 0 ИЛИ Строки.СуммаБезНДС <> 0 ИЛИ Строки.СуммаУпр <> 0)
	|	И Строки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутреннееПоступлениеРасходов)
	|
	// Регистрация расходов в упр. учете у организации - получателя.
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.ВидДвижения КАК ВидДвижения,
	|	Строки.ОрганизацияПолучатель КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(НД.УчетЗатрат, ЛОЖЬ) ТОГДА
	|			Строки.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	Строки.Сумма КАК Сумма,
	|	Строки.СуммаБезНДС КАК СуммаБезНДС,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК СуммаНДД,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РегистрацияРасходовУУ) КАК ХозяйственнаяОперация,
	|	Строки.АналитикаУчетаНоменклатуры,
	|
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Строки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО НД.Ссылка = Строки.НаправлениеДеятельности
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|	И Строки.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И (Строки.Сумма <> 0 ИЛИ Строки.СуммаБезНДС <> 0 ИЛИ Строки.СуммаУпр <> 0)
	|	И Строки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутреннееПоступлениеРасходов)
	|";
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаУчетнаяПолитикаПоНДД);
	ТекстыЗапроса.Добавить(ТекстЗапросаПрочиеРасходы);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РасчетСебестоимостиЛокализация.ИзменитьТекстЗапросаПрочиеРасходы(ТекстЗапроса, 
		"Строки", 
		ДополнительныеПоля, 
		ВозможныРазныеПериодыВДвижениях);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаНДД", "0");
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийПрочиеРасходы"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработкаПереходаСРегистраПартииПрочихРасходовНаРегистрПрочиеРасходы

// Процедура конвертирует записи регистра ПартииПрочихРасходов по статьям расходов, распределяемые на себестоимость
// товаров, в регистр ПрочиеРасходы.
// 
// Параметры:
// 	Регистратор - ДокументСсылка.ПриобретениеТоваровУслуг - документ-регистратор
// 	Набор - РегистрНакопленияНаборЗаписей.ПартииПрочихРасходов - набор записей регистра для обработки
// 	ВыборкаЗаписей - ВыборкаИзРезультатаЗапроса - записи набора с рассчитанными дополнительными полями
// 
// Возвращаемое значение:
// 	РегистрНакопленияНаборЗаписей.ПрочиеРасходы - набор записей нового регистра
//
Функция ПеренестиДанныеРегистраПартииПрочихРасходовВРегистрПрочиеРасходы(Регистратор, Набор, ВыборкаЗаписей) Экспорт
	
	НаборПрочиеРасходы = РегистрыНакопления.ПрочиеРасходы.СоздатьНаборЗаписей();
	НаборПрочиеРасходы.ОбменДанными.Загрузка = Истина;
	НаборПрочиеРасходы.Отбор.Регистратор.Установить(Регистратор);
	НаборПрочиеРасходы.Прочитать();
	
	НомераСтрокНабора = Набор.ВыгрузитьКолонку("НомерСтроки");
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если Не ВыборкаЗаписей.ПереноситьЗаписьВПрочиеРасходыРегл
			И Не ВыборкаЗаписей.ПереноситьЗаписьВПрочиеРасходыУпр Тогда
			Продолжить
		КонецЕсли;
		
		ЗаписьПрочиеРасходы = НаборПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьПрочиеРасходы, ВыборкаЗаписей);

		Если ВыборкаЗаписей.ПереноситьЗаписьВПрочиеРасходыРегл Тогда
			
			Если (ВыборкаЗаписей.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
				Или ВыборкаЗаписей.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
				И ВыборкаЗаписей.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента Тогда
				ЗаписьПрочиеРасходы.СуммаРегл = ВыборкаЗаписей.СтоимостьРегл + ВыборкаЗаписей.НДСРегл;
			Иначе
				ЗаписьПрочиеРасходы.СуммаРегл = ВыборкаЗаписей.СтоимостьРегл;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаЗаписей.ПереноситьЗаписьВПрочиеРасходыУпр Тогда
			
			Если ВыборкаЗаписей.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НДСНалоговогоАгента
			 И ВыборкаЗаписей.Стоимость = 0 Тогда
			 	ЗаписьПрочиеРасходы.Сумма = ?(ВыборкаЗаписей.НДСУпр <> 0, ВыборкаЗаписей.НДСУпр, ВыборкаЗаписей.НДСРегл);
			Иначе
				ЗаписьПрочиеРасходы.Сумма = ВыборкаЗаписей.Стоимость;
			КонецЕсли;
			ЗаписьПрочиеРасходы.СуммаБезНДС = ВыборкаЗаписей.СтоимостьБезНДС;
			
			Если (ВыборкаЗаписей.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
				Или ВыборкаЗаписей.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
				И ВыборкаЗаписей.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента Тогда
				ЗаписьПрочиеРасходы.СуммаУпр = ВыборкаЗаписей.Стоимость;
			Иначе
				ЗаписьПрочиеРасходы.СуммаУпр = ВыборкаЗаписей.СтоимостьБезНДС;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗаписьПрочиеРасходы.Сумма = 0
			И ЗаписьПрочиеРасходы.СуммаБезНДС = 0
			И ЗаписьПрочиеРасходы.СуммаРегл = 0
			И ЗаписьПрочиеРасходы.СуммаУпр = 0
			И ЗаписьПрочиеРасходы.ПостояннаяРазница = 0
			И ЗаписьПрочиеРасходы.ВременнаяРазница = 0 Тогда
			НаборПрочиеРасходы.Удалить(ЗаписьПрочиеРасходы);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборПрочиеРасходы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса)

	Если НЕ ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", "");
		Возврат;
	КонецЕсли; 
	
	ТекстДополнительныеПоля = "";
	
	СписокПолей = СтрРазделить(ДополнительныеПоля, ",");
	Для каждого ИмяПоля Из СписокПолей Цикл
		ТекстДополнительныеПоля = ТекстДополнительныеПоля + "
		|	,Строки." + ИмяПоля;
	КонецЦикла; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", ТекстДополнительныеПоля); 

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.183";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a907ff4c-3fce-487a-873b-c160322c7464");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеРасходы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает время записей для документов ""Бронирование"".';
									|en = 'Устанавливает время записей для документов ""Бронирование"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра	= "РегистрНакопления.ПрочиеРасходы";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	// Исправить время движений документов ""Бронирование""
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Бронирование КАК Бронирование
	|	ПО ПрочиеРасходы.Регистратор = Бронирование.Ссылка
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|	И ГОД(ПрочиеРасходы.Период) = ГОД(Бронирование.Дата)
	|	И МЕСЯЦ(ПрочиеРасходы.Период) = МЕСЯЦ(Бронирование.Дата)
	|	И ДЕНЬ(ПрочиеРасходы.Период) = ДЕНЬ(Бронирование.Дата)
	|	И (ЧАС(ПрочиеРасходы.Период) <> ЧАС(Бронирование.Дата)
	|		ИЛИ МИНУТА(ПрочиеРасходы.Период) <> МИНУТА(Бронирование.Дата)
	|		ИЛИ СЕКУНДА(ПрочиеРасходы.Период) <> СЕКУНДА(Бронирование.Дата))
	|";
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось установить время записей для документов ""Бронирование"" в регистре накопления ""Прочие расходы"".';
								|en = 'Не удалось установить время записей для документов ""Бронирование"" в регистре накопления ""Прочие расходы"".'"));
	
	Для Каждого СтрокаТаблицы Из ОбновляемыеДанные Цикл
		
		ПроблемныйРегистратор = СтрокаТаблицы.Регистратор;
		ПричинаИсключения = "";
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = "Блокировка";
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ПроблемныйРегистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
				
			ПричинаИсключения = "ПлохиеДанные";
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.';
								|en = 'Перепроведите документ вручную.'");
			
			НаборЗаписей = РегистрыНакопления.ПрочиеРасходы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ПроблемныйРегистратор);
			НаборЗаписей.Прочитать();
			
			#Область ИсправлениеВремениОперацииБронирования
			ДатаДокумента = Дата(1,1,1);
			Если ТипЗнч(ПроблемныйРегистратор) = Тип("ДокументСсылка.Бронирование") Тогда
				ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроблемныйРегистратор, "Дата");
			КонецЕсли;
			#КонецОбласти
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				#Область ИсправлениеВремениОперацииБронирования
				Если ТипЗнч(Запись.Регистратор) = Тип("ДокументСсылка.Бронирование")
					И ЗначениеЗаполнено(ДатаДокумента) Тогда
					РегистрыНакопления.РасчетыСПоставщиками.ПроверитьИУстановитьВремяПериодаЗаписи(Запись, ДатаДокумента);
				КонецЕсли;
				#КонецОбласти
				
			КонецЦикла;
			
			ПричинаИсключения = "Запись";
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей, ДополнительныеПараметры);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ПроблемныйРегистратор);
			
			Если ПричинаИсключения = "ПлохиеДанные" Тогда
				
				ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(ПроблемныйРегистратор, Рекомендация, Параметры);
				
			ИначеЕсли ПричинаИсключения = "Запись" Тогда
				
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
