#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОбъектаСГоловнойОрганизациейИФизическимЛицом(Настройки);
КонецПроцедуры

#КонецОбласти

#Область РегистрацияФизическихЛиц

Функция РеквизитГоловнаяОрганизация() Экспорт
	Возврат Метаданные.РегистрыНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Измерения.ГоловнаяОрганизация.Имя;
КонецФункции

Функция РеквизитФизическоеЛицо() Экспорт
	Возврат Метаданные.РегистрыНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Измерения.ФизическоеЛицо.Имя;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Выполняет регистрацию данных для расчета среднего заработка, поступивших от другого работодателя (страхователя).
//
// Параметры:
//   Движения
//   Отказ
//   Дата - Дата регистрации данных.
//   Регистратор - Ссылка документа, выполняющего движения.
//   Сотрудник
//   Страхователь
//   ДанныеПоГодам - ТаблицаЗначений
//       * Год
//       * Сумма
//       * ДнейБолезниУходаЗаДетьми
//   НачалоПериода
//   ОкончаниеПериода
//
Процедура ЗарегистрироватьДанныеСтрахователей(Движения, Отказ, Дата, Регистратор, Сотрудник, Страхователь, ДанныеПоГодам, НачалоПериода = Неопределено, ОкончаниеПериода = Неопределено) Экспорт
	
	Если ДанныеПоГодам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ГоловнаяОрганизация,ФизическоеЛицо", Неопределено)[0];
	
	// Проверяем наличие данных этого страхователя за указанный год.
	ПроверитьНаличиеЗарегистрированныхДанныхСтрахователя(
		Отказ,
		Страхователь,
		ДанныеСотрудника.ФизическоеЛицо,
		ДанныеСотрудника.ГоловнаяОрганизация,
		ДанныеПоГодам.ВыгрузитьКолонку("Год"),
		Регистратор);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем движения
	ДанныеПоГодам.Свернуть("Год", "Сумма,ДнейБолезниУходаЗаДетьми");
	Для Каждого СтрокаПоГодам Из ДанныеПоГодам Цикл
		Запись = Движения.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Добавить();
		Запись.Период              = Дата;
		Запись.Страхователь        = Страхователь;
		Запись.НачалоПериода       = НачалоПериода;
		Запись.ОкончаниеПериода    = ОкончаниеПериода;
		Запись.ФизическоеЛицо      = ДанныеСотрудника.ФизическоеЛицо;
		Запись.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		Запись.Год                      = СтрокаПоГодам.Год;
		Запись.Сумма                    = СтрокаПоГодам.Сумма;
		Запись.ДнейБолезниУходаЗаДетьми = СтрокаПоГодам.ДнейБолезниУходаЗаДетьми;
	КонецЦикла;
	
	Движения.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Записывать = Истина;
	
КонецПроцедуры

// Метод проверяет наличие зарегистрированных данных за указанные годы.
// При наличии данных выводится сообщение об ошибке.
//
// Параметры:
//   Отказ
//   Сотрудник
//   Страхователь
//   ФизическоеЛицо
//   ГоловнаяОрганизация
//   Годы - Массив
//   Регистратор
//
Процедура ПроверитьНаличиеЗарегистрированныхДанныхСтрахователя(Отказ, Страхователь, ФизическоеЛицо, ГоловнаяОрганизация, Годы, Регистратор)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуществующиеДанные.Год
	|ИЗ
	|	РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС КАК СуществующиеДанные
	|ГДЕ
	|	СуществующиеДанные.Страхователь = &Страхователь
	|	И СуществующиеДанные.ФизическоеЛицо = &ФизическоеЛицо
	|	И СуществующиеДанные.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СуществующиеДанные.Год В(&Годы)
	|	И СуществующиеДанные.Регистратор <> &Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Годы", Годы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Данные уже зарегистрированы.
	ПредставлениеГодов = "";
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеГодов = ПредставлениеГодов + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, ", Формат(Выборка.Год, "ЧГ="));
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеГодов, 2);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'За %1 %2 данные о заработке уже зарегистрированы другим документом.';
			|en = 'Data on earnings as of %1 %2 is already registered using another document.'"),
		ПредставлениеГодов, ?(Выборка.Количество() > 1, НСтр("ru = 'годы';
															|en = 'years'"), НСтр("ru = 'год';
																					|en = 'year'")));
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Регистратор, , , Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
