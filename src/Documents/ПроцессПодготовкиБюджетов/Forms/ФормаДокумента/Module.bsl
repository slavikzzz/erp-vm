#Область ОписаниеПеременных

&НаКлиенте
Перем ФлагЗакрытия;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.НеЗапущен;
		Объект.Ответственный = Пользователи.АвторизованныйПользователь();
		Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
			Объект.ГруппаЭтапов = Параметры.Основание;
			Объект.МодельБюджетирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Основание, "Владелец");
			Ошибка = ОшибкаВыбраннойМоделиБюджетирования(Объект.МодельБюджетирования, Объект.КонецПериода);
			Если Не ПустаяСтрока(Ошибка) Тогда
				ВызватьИсключение(Ошибка);
			КонецЕсли;
			ГруппаШаговПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	ЗаполнитьДеревоШагов();
	ОтобразитьПериод();
	ОбновитьСтатусыНаСервере();
	УправлениеФормой();
	
	АдресПередачиНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если Не ФлагЗакрытия = Истина
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Завершен")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Отменен") Тогда
		Если ВсеЗадачиВыполнены() Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтаФорма, Новый Структура("ЗакрытьФорму", ПараметрыЗаписи.ПринудительноЗакрытьФорму)), НСтр(
				"ru = 'Все задачи выполнены. Завершить процесс?';
				|en = 'All tasks are completed. End the process?'"), РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусыНаСервере();
	УправлениеФормой();
	
	Идентификатор = НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1));
	Если Идентификатор <> Неопределено Тогда
		Элементы.ДеревоШаговБюджетногоПроцесса.ТекущаяСтрока = Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;
	
	Если Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.НеЗапущен Тогда
		Ошибка = ОшибкаВыбраннойМоделиБюджетирования(Объект.МодельБюджетирования, Объект.КонецПериода);
		Если Не ПустаяСтрока(Ошибка) Тогда
			ОбщегоНазначения.СообщитьПользователю(Ошибка, , , , Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДеревоПроверки = РеквизитФормыВЗначение("ДеревоШаговБюджетногоПроцесса");
	СтруктураПоиска = Новый Структура("ЭтоГруппа, ВыполнятьАвтоматически", Ложь, Ложь);
	
	СтруктураПоискаНезаполненных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
	СтруктураПоискаНезаполненных.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	НайденныеСтроки = ДеревоПроверки.Строки.НайтиСтроки(СтруктураПоискаНезаполненных, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТекстСоообщения = НСтр("ru = 'Не заполнен ответственный для этапа %1 от %2';
								|en = 'Person responsible for step %1 from %2 is not filled in'");
		ТекстСоообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоообщения, 
								НайденнаяСтрока.Наименование, Формат(НайденнаяСтрока.Период, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ДеревоШаговБюджетногоПроцесса", ТекстСоообщения, "");
	КонецЦикла;
	
	СтруктураПоискаНезаполненных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
	СтруктураПоискаНезаполненных.Вставить("Длительность", 0);
	НайденныеСтроки = ДеревоПроверки.Строки.НайтиСтроки(СтруктураПоискаНезаполненных, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТекстСоообщения = НСтр("ru = 'Не заполнена длительность для этапа %1 от %2';
								|en = 'Duration is required for step %1 dated %2'");
		ТекстСоообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоообщения, 
								НайденнаяСтрока.Наименование, Формат(НайденнаяСтрока.Период, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ДеревоШаговБюджетногоПроцесса", ТекстСоообщения, "");
	КонецЦикла;
	
	СтруктураПоискаНезаполненных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
	СтруктураПоискаНезаполненных.Вставить("ТипДлительности", Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ПустаяСсылка());
	НайденныеСтроки = ДеревоПроверки.Строки.НайтиСтроки(СтруктураПоискаНезаполненных, Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ТекстСоообщения = НСтр("ru = 'Не заполнен тип длительности для этапа %1 от %2';
								|en = 'Duration type is required for step %1 dated %2'");
		ТекстСоообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоообщения, 
								НайденнаяСтрока.Наименование, Формат(НайденнаяСтрока.Период, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ДеревоШаговБюджетногоПроцесса", ТекстСоообщения, "");
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСтатусыЗадач", 15);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.Отменен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетнаяЗадача.Ссылка
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов
		|	И НЕ БюджетнаяЗадача.Выполнена";
		
		Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов", ТекущийОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектЗадача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектЗадача.Выполнена = Истина;
			ОбъектЗадача.ДополнительныеСвойства.Вставить("РежимФормированияЗадач", Истина);
			ОбъектЗадача.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытияОповещения, Параметр, Источник)
		
	Если ИмяСобытияОповещения = "Запись_БюджетнаяЗадача" Тогда
		
		ИДСледующейСтроки = ОбработкаОповещенияЗадачиНаСервере();
		Если ИДСледующейСтроки <> Неопределено Тогда
			Элементы.ДеревоШаговБюджетногоПроцесса.ТекущаяСтрока = ИДСледующейСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФлагЗакрытия = Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Завершен");
	КонецЕсли;
	
	Записать();
	Если ДополнительныеПараметры.Свойство("ЗакрытьФорму")
		И ДополнительныеПараметры.ЗакрытьФорму = Истина Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МодельБюджетированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Ошибка = ОшибкаВыбраннойМоделиБюджетирования(ВыбранноеЗначение, Объект.КонецПериода);
	Если Не ПустаяСтрока(Ошибка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, Ошибка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаШаговПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГруппаЭтапов) Тогда
		ГруппаШаговПриИзмененииНаСервере();
		РазвернутьДеревоШагов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ВидПериода = ОпределитьВидПериода(Объект.Периодичность);
	ОбщегоНазначенияУТКлиент.ВыбратьПериодИзСписка(
				ЭтаФорма,
				Элемент,
				ВидПериода,
				Объект.НачалоПериода,
				ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ПривестиЗначениеПериода();
	РазвернутьДеревоШагов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеКОписаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.ДополнениеКОписанию");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаНеВыполняетсяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	ТекущаяСтрока.ИндексСтатуса = ?(ТекущаяСтрока.НеВыполняется, -1, 0);
	
	УстановитьЗначениеТабличнойЧасти("НеВыполняется");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаОтветственныйПриИзменении(Элемент)
	
	УстановитьЗначениеТабличнойЧасти("Ответственный");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаДлительностьПриИзменении(Элемент)
	
	УстановитьЗначениеТабличнойЧасти("Длительность");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаТипДлительностиПриИзменении(Элемент)
	
	УстановитьЗначениеТабличнойЧасти("ТипДлительности");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийЭлементПоля = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущийЭлемент;
	Если ТекущийЭлементПоля.ТолькоПросмотр Тогда
		ОткрытьЗадачу();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Конец МенюОтчеты


&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	
	ОбновитьСтатусыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ОбновитьСтатусыНаСервере();
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установите курсор на этап подготовки бюджетов для создания задачи';
										|en = 'Select a budgeting step to create the task'"));
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Задача еще не началась';
										|en = 'Task is not started yet'"));
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 2 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Задача уже выполнена';
										|en = 'Task is already completed'"));
	Иначе
		ПараметрыТекущейЗадачи = ПараметрыТекущейЗадачи(
										Объект.Ссылка, ТекущиеДанные.ЭтапПодготовкиБюджетов, 
										ТекущиеДанные.ЭтапПодготовкиБюджетовОснование, ТекущиеДанные.Период,
										АдресПередачиНастроек);
		Если ПараметрыТекущейЗадачи = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Задача еще не сформирована';
											|en = 'Task is not generated yet'"));
			Возврат;
		КонецЕсли;
		ВыполнитьДействиеКлиент(ПараметрыТекущейЗадачи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗаписатьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Запустить(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцесса = Новый Структура;
	ПараметрыПроцесса.Вставить("МодельБюджетирования", Объект.МодельБюджетирования);
	ПараметрыПроцесса.Вставить("ГруппаЭтапов", Объект.ГруппаЭтапов);
	ПараметрыПроцесса.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыПроцесса.Вставить("КонецПериода", Объект.КонецПериода);
	ПараметрыПроцесса.Вставить("Ссылка", Объект.Ссылка);
	
	ИнформацияОДублях = НаличиеЗапущенныхДублейПроцессов(ПараметрыПроцесса);
	Если НЕ ИнформацияОДублях = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьДублирующийПроцесс", ЭтаФорма);
		
		ТекстыПредупреждения = Новый Массив;
		ТекстыПредупреждения.Добавить(
			НСтр("ru = 'Для текущей модели, группы этапов в периоде действия бюджетного процесса уже есть дублирующиеся объекты:';
				|en = 'Duplicate objects already exist for the current model of stage group in budget process validity period:'"));
		Если ИнформацияОДублях.ЕстьДублиПроцессов Тогда
			ТекстыПредупреждения.Добавить(
				НСтр("ru = 'не завершенные документы ""Процесс подготовки бюджетов"".';
					|en = 'unfinished ""Budgeting process"" documents.'"));
		КонецЕсли;
		Если ИнформацияОДублях.ЕстьДублиЗадач Тогда
			Если ТекстыПредупреждения.Количество() > 1 Тогда
				ТекстыПредупреждения[ТекстыПредупреждения.Количество()-1] =
					СтрЗаменить(ТекстыПредупреждения[ТекстыПредупреждения.Количество()-1], ".", "");
				ТекстыПредупреждения.Добавить(НСтр("ru = 'и';
													|en = 'and'"));
			КонецЕсли;
			ТекстыПредупреждения.Добавить(НСтр("ru = 'не выполненные задачи.';
												|en = 'not performed tasks.'"));
		КонецЕсли;
		ТекстыПредупреждения.Добавить(НСтр("ru = 'Запустить дублирующий процесс?';
											|en = 'Run duplicating process?'"));
		ТекстВопроса = СтрСоединить(ТекстыПредупреждения, " ");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	Иначе
		ЗапускПроцессаЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаличиеЗапущенныхДублейПроцессов(ПараметрыПроцесса)
	
	Ответ = Неопределено;
	
	ДатыПериода = Новый ТаблицаЗначений;
	ДатыПериода.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Период = ПараметрыПроцесса.НачалоПериода;
	Пока Период <= ПараметрыПроцесса.КонецПериода Цикл
		СтрокаДаты = ДатыПериода.Добавить();
		СтрокаДаты.ДатаНачала = Период;
		
		Период = Период + 86400;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаЭтапов", ПараметрыПроцесса.ГруппаЭтапов);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка КАК Ссылка,
	|	ЭтапыПодготовкиБюджетов.Родитель КАК Родитель1,
	|	ЭтапыПодготовкиБюджетов.Родитель.Родитель КАК Родитель2,
	|	ЭтапыПодготовкиБюджетов.Родитель.Родитель.Родитель КАК Родитель3,
	|	ЭтапыПодготовкиБюджетов.Родитель.Родитель.Родитель.Родитель КАК Родитель4,
	|	ЭтапыПодготовкиБюджетов.Родитель.Родитель.Родитель.Родитель.Родитель КАК Родитель5,
	|	ЭтапыПодготовкиБюджетов.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель КАК Родитель6,
	|	ЭтапыПодготовкиБюджетов.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель КАК Родитель7
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Ссылка = &ГруппаЭтапов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВышестоящиеГруппыЭтапов = Новый Массив;
	
	Для НомерВышестоящейГруппыВЗапросе = 1 По 7 Цикл
		ГруппаЭтаповРодитель = Выборка["Родитель" + Формат(7-НомерВышестоящейГруппыВЗапросе+1, "ЧН=0; ЧГ=0")];
		Если ЗначениеЗаполнено(ГруппаЭтаповРодитель) Тогда
			ВышестоящиеГруппыЭтапов.Добавить(ГруппаЭтаповРодитель);
		КонецЕсли;
	КонецЦикла;
	
	ГруппаЭтаповРодитель = Выборка.Родитель7;
	Пока ЗначениеЗаполнено(ГруппаЭтаповРодитель) Цикл
		ГруппаЭтаповРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаЭтаповРодитель, "Родитель");
		
		Если ЗначениеЗаполнено(ГруппаЭтаповРодитель) Тогда
			ВышестоящиеГруппыЭтапов.Добавить(ГруппаЭтаповРодитель);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаЭтапов",            ПараметрыПроцесса.ГруппаЭтапов);
	Запрос.УстановитьПараметр("ВышестоящиеГруппыЭтапов", ВышестоящиеГруппыЭтапов);
	Запрос.УстановитьПараметр("ДатыПериода",             ДатыПериода);
	Запрос.УстановитьПараметр("МодельБюджетирования",    ПараметрыПроцесса.МодельБюджетирования);
	Запрос.УстановитьПараметр("ТекущийПроцесс",          ПараметрыПроцесса.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДатыПериода.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ДатыПериода
	|ИЗ
	|	&ДатыПериода КАК ДатыПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПересекающиесяЭтапы
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Ссылка В ИЕРАРХИИ(&ГруппаЭтапов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Ссылка В(&ВышестоящиеГруппыЭтапов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""Процесс"" КАК ВидОбъекта,
	|	ИСТИНА КАК ЕстьДубли
	|ИЗ
	|	ДатыПериода КАК ДатыПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроцессПодготовкиБюджетов КАК ПроцессПодготовкиБюджетов
	|		ПО (ДатыПериода.ДатаНачала МЕЖДУ ПроцессПодготовкиБюджетов.НачалоПериода И ПроцессПодготовкиБюджетов.КонецПериода)
	|			И (ПроцессПодготовкиБюджетов.МодельБюджетирования = &МодельБюджетирования)
	|			И (НЕ ПроцессПодготовкиБюджетов.ПометкаУдаления)
	|			И (ПроцессПодготовкиБюджетов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроцессовПодготовкиБюджетов.Выполняется))
	|			И (НЕ ПроцессПодготовкиБюджетов.Ссылка = &ТекущийПроцесс)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПересекающиесяЭтапы КАК ПересекающиесяЭтапы
	|		ПО (ПроцессПодготовкиБюджетов.ГруппаЭтапов = ПересекающиесяЭтапы.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Задача"",
	|	ИСТИНА
	|ИЗ
	|	ДатыПериода КАК ДатыПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|		ПО ДатыПериода.ДатаНачала = БюджетнаяЗадача.Период
	|			И (НЕ БюджетнаяЗадача.ПометкаУдаления)
	|			И (НЕ БюджетнаяЗадача.Выполнена)
	|			И (НЕ БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &ТекущийПроцесс)
	|			И (БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПересекающиесяЭтапы КАК ПересекающиесяЭтапы
	|		ПО (БюджетнаяЗадача.ЭтапПодготовкиБюджетов = ПересекающиесяЭтапы.Ссылка)";
	
	Результат = Запрос.Выполнить();
	
	Ответ = Неопределено;
	Если НЕ Результат.Пустой() Тогда
		Ответ = Новый Структура("ЕстьДублиПроцессов, ЕстьДублиЗадач", Ложь, Ложь);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидОбъекта = "Процесс" Тогда
				Ответ.Вставить("ЕстьДублиПроцессов", Выборка.ЕстьДубли);
			ИначеЕсли Выборка.ВидОбъекта = "Задача" Тогда
				Ответ.Вставить("ЕстьДублиЗадач", Выборка.ЕстьДубли);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура ЗапускПроцессаЗавершение()
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Выполняется");
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьДублирующийПроцесс(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗапускПроцессаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Прекратить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрекратитьЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Процесс будет прекращен. Продолжить?';
											|en = 'The process will be aborted. Continue?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Отменен");
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБюджет(Команда)
	
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекущейЗадачи = ПараметрыТекущейЗадачи(
										Объект.Ссылка, ТекущиеДанные.ЭтапПодготовкиБюджетов, 
										ТекущиеДанные.ЭтапПодготовкиБюджетовОснование, ТекущиеДанные.Период,
										АдресПередачиНастроек);
	
	Если Не ЗначениеЗаполнено(ПараметрыТекущейЗадачи) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Задача еще не создана';
									|en = 'Task is not created yet'"));
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыТекущейЗадачи.ТекущийДокумент) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Бюджет в рамках задачи не создавался';
									|en = 'Budget within the task was not created'"));
	Иначе
		ПоказатьЗначение(,ПараметрыТекущейЗадачи.ТекущийДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу()
	
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекущейЗадачи = ПараметрыТекущейЗадачи(
										Объект.Ссылка, ТекущиеДанные.ЭтапПодготовкиБюджетов, 
										ТекущиеДанные.ЭтапПодготовкиБюджетовОснование, ТекущиеДанные.Период,
										АдресПередачиНастроек);
	
	Если Не ЗначениеЗаполнено(ПараметрыТекущейЗадачи) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Задача еще не создана';
									|en = 'Task is not created yet'"));
	Иначе
		ПоказатьЗначение(,ПараметрыТекущейЗадачи.Задача);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИсполнителя(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Перед выполнением операции необходимо записать документ';
										|en = 'Before performing the operation, save the document'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьИсполнителяЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ПроцессПодготовкиБюджетов.Форма.ЗаменаИсполнителяЗадач", , ЭтотОбъект,
		УникальныйИдентификатор, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИсполнителяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьИсполнителяЗадач(Результат.ТекущийИсполнитель, Результат.НовыйИсполнитель);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьДействиеКлиент(ПараметрыТекущейЗадачи)
	
	Если Модифицированность Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		Записать();
	КонецЕсли;
	
	Если ПараметрыТекущейЗадачи.Действие = 
			ПредопределенноеЗначение("Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов")
		ИЛИ ПараметрыТекущейЗадачи.Действие = 
			ПредопределенноеЗначение("Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.Прочее") Тогда
			
		ОткрытьФорму("Задача.БюджетнаяЗадача.ФормаОбъекта", Новый Структура("Ключ", ПараметрыТекущейЗадачи.Задача));
		
	Иначе
		Если Не БюджетнаяЗадачаСписком(ПараметрыТекущейЗадачи.Задача) Тогда
			Результат = ВыполнитьДействиеСервер(ПараметрыТекущейЗадачи);
			Если Результат <> Неопределено Тогда
				ДополнительныеПараметры = Новый Структура("Документа",Результат.ПараметрыФормы.Ключ);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПоСобытию", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму(Результат.ИмяФормы, Результат.ПараметрыФормы, ЭтаФорма, Результат.Уникальность,,,ОписаниеОповещения);
			КонецЕсли;
		Иначе
			ПоказатьЗначение(,ПараметрыТекущейЗадачи.Задача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийДокумент(СписокДокументов)
	
	Возврат ?(СписокДокументов.Количество(), СписокДокументов[СписокДокументов.Количество()-1].Документ, Неопределено);
	
КонецФункции

&НаСервере
Функция ВыполнитьДействиеСервер(ПараметрыТекущейЗадачи)
	
	ЗадачаОбъект = ПараметрыТекущейЗадачи.Задача.ПолучитьОбъект();
	
	Действие = ЗадачаОбъект.Действие;
	Документ = ТекущийДокумент(ЗадачаОбъект.СписокДокументов);
	
	Записывать = Ложь;
	Результат = Задачи.БюджетнаяЗадача.ВыполнитьДействие(ЗадачаОбъект, 
								ПолучитьИзВременногоХранилища(ПараметрыТекущейЗадачи.СсылкаНаНастройку), Записывать);
	
	Если Записывать Тогда
		ЗадачаОбъект.Записать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыТекущейЗадачи(Процесс, ЭтапПроцесса, ПовторяемыйЭтап, Период, АдресПередачиНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БюджетнаяЗадача.Ссылка,
		|	БюджетнаяЗадача.Действие,
		|	БюджетнаяЗадача.НастройкаДействия,
		|	БюджетнаяЗадача.СписокДокументов.(
		|		НомерСтроки КАК НомерСтроки,
		|		Документ
		|	)
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов
		|	И БюджетнаяЗадача.ЭтапПодготовкиБюджетов = &ЭтапПодготовкиБюджетов
		|	И БюджетнаяЗадача.ЭтапПодготовкиБюджетовОснование = &ЭтапПодготовкиБюджетовОснование
		|	И БюджетнаяЗадача.Период = &Период
		|	И НЕ БюджетнаяЗадача.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ЭтапПодготовкиБюджетовОснование", ПовторяемыйЭтап);
	Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов", Процесс);
	Запрос.УстановитьПараметр("ЭтапПодготовкиБюджетов", ЭтапПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НастройкаДействия = ВыборкаДетальныеЗаписи.НастройкаДействия; // ХранилищеЗначения
		
		Результат = Новый Структура();
		Результат.Вставить("Задача", ВыборкаДетальныеЗаписи.Ссылка); 
		Результат.Вставить("Действие", ВыборкаДетальныеЗаписи.Действие);
		Результат.Вставить("СсылкаНаНастройку", ПоместитьВоВременноеХранилище(НастройкаДействия.Получить(), АдресПередачиНастроек)); 
		Результат.Вставить("ТекущийДокумент", ТекущийДокумент(ВыборкаДетальныеЗаписи.СписокДокументов.Выгрузить()) );
		
		Возврат Результат;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоШагов()
	
	ДеревоЭтапов = Документы.ПроцессПодготовкиБюджетов.ДеревоЭтаповПроцессаПоДокументу(Объект);
	ЗначениеВРеквизитФормы(ДеревоЭтапов, "ДеревоШаговБюджетногоПроцесса");
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ФормаЗапустить.Видимость = Ложь;
	Элементы.ФормаПрекратить.Видимость = Ложь;
	Элементы.ФормаЗавершить.Видимость = Ложь;
	
	РазрешеноИзменениеНастроек = Ложь;
	Если Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.Выполняется Тогда
		Если НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 2)) <> Неопределено
			И НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1)) = Неопределено
			И НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 0)) = Неопределено Тогда
			Элементы.ФормаЗавершить.Видимость = Истина;
		Иначе
			Элементы.ФормаПрекратить.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.НеЗапущен Тогда
		Элементы.ФормаЗапустить.Видимость = Истина;
		РазрешеноИзменениеНастроек = Истина;
	КонецЕсли;
	
	Элементы.МодельБюджетирования.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	Элементы.ГруппаШагов.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	Элементы.Периодичность.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	Элементы.Период.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	
	ВсеЗадачиВыполнены = Ложь;
	Если Объект.Статус <> Перечисления.СтатусыПроцессовПодготовкиБюджетов.Завершен
		И Объект.Статус <> Перечисления.СтатусыПроцессовПодготовкиБюджетов.Отменен Тогда
		Если ВсеЗадачиВыполнены() Тогда
			ВсеЗадачиВыполнены = Истина;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаВсеЗадачиВыполнены.Видимость = ВсеЗадачиВыполнены;
	
КонецПроцедуры

&НаСервере
Процедура ГруппаШаговПриИзмененииНаСервере()
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	ИндексДокумента = УпорядоченныеПериодичности.Найти(Объект.Периодичность);
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГруппаЭтапов, "Периодичность, ЭтоГруппа, Родитель.Периодичность");
	Если СтруктураРеквизитов.ЭтоГруппа Тогда
		ПериодичностьШага = СтруктураРеквизитов.Периодичность;
	Иначе
		ПериодичностьШага = СтруктураРеквизитов.РодительПериодичность;
	КонецЕсли;
	ИндексШага = УпорядоченныеПериодичности.Найти(ПериодичностьШага);
	Если ИндексШага > ИндексДокумента Тогда
		Объект.Периодичность = ПериодичностьШага;
		Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			Объект.НачалоПериода = ТекущаяДатаСеанса(); 
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
			Объект.КонецПериода = ТекущаяДатаСеанса(); 
		КонецЕсли;
		ПривестиЗначениеПериода();
	Иначе
		ЗаполнитьШагиРасчетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШагиРасчетаНаСервере(ПовторяемыйЭтапПроцесса = Неопределено, ГруппаПовторяемогоШага = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
		Объект.НастройкиРасчета.Очистить();
		Объект.НастройкиИерархии.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПодготовкиБюджетов.Ссылка КАК ЭтапПодготовкиБюджетов,
		|	ВЫБОР
		|		КОГДА ЭтапыПодготовкиБюджетов.Ссылка = &Родитель
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ЭтапыПодготовкиБюджетов.Родитель
		|	КОНЕЦ КАК ГруппаЭтапов,
		|	ЭтапыПодготовкиБюджетов.Длительность,
		|	ЭтапыПодготовкиБюджетов.ТипДлительности,
		|	ЭтапыПодготовкиБюджетов.Ответственный,
		|	ЭтапыПодготовкиБюджетов.НеВыполняется,
		|	ЭтапыПодготовкиБюджетов.Код,
		|	ЭтапыПодготовкиБюджетов.ЭтоГруппа,
		|	ЭтапыПодготовкиБюджетов.Периодичность,
		|	ЭтапыПодготовкиБюджетов.Родитель.Периодичность КАК ПериодичностьГруппы,
		|	ЭтапыПодготовкиБюджетов.Действие,
		|	ЭтапыПодготовкиБюджетов.ВыполнятьАвтоматически
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
		|ГДЕ
		|	ЭтапыПодготовкиБюджетов.Ссылка В ИЕРАРХИИ(&Родитель)";
		
	Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
		Запрос.УстановитьПараметр("Родитель", Объект.ГруппаЭтапов);
	Иначе
		Запрос.УстановитьПараметр("Родитель", ГруппаПовторяемогоШага);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	ИндексДокумента = УпорядоченныеПериодичности.Найти(Объект.Периодичность);
	
	ВыборкаДетальныеЗаписи.Сбросить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ЭтапПодготовкиБюджетов = ГруппаПовторяемогоШага Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
			ИндексЗаполнения = УпорядоченныеПериодичности.Найти(ВыборкаДетальныеЗаписи.Периодичность);
		Иначе
			ИндексЗаполнения = УпорядоченныеПериодичности.Найти(ВыборкаДетальныеЗаписи.ПериодичностьГруппы);
		КонецЕсли;
		
		Если ИндексЗаполнения > ИндексДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ГруппаЭтапов, ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДетальныеЗаписи);
		Если ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
			СтруктураПоиска.ЭтапПодготовкиБюджетовОснование = СтруктураПоиска.ЭтапПодготовкиБюджетов;
			СтруктураПоиска.ЭтапПодготовкиБюджетов = ПовторяемыйЭтапПроцесса;
		КонецЕсли;
		
		Если Не Объект.НастройкиИерархии.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НоваяСтрока = Объект.НастройкиИерархии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		КонецЕсли;
	
		Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Периодичность = ВыборкаДетальныеЗаписи.ПериодичностьГруппы;
		
		НоваяСтрока = Объект.НастройкиРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Период = Объект.НачалоПериода;
		Если ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
			НоваяСтрока.ЭтапПодготовкиБюджетовОснование = НоваяСтрока.ЭтапПодготовкиБюджетов;
			НоваяСтрока.ЭтапПодготовкиБюджетов = ПовторяемыйЭтапПроцесса;
		КонецЕсли;
		
		СледующийПериод = БюджетированиеКлиентСервер.ДобавитьИнтервал(НоваяСтрока.Период, ВыборкаДетальныеЗаписи.ПериодичностьГруппы, 1);
		Пока СледующийПериод <= Объект.КонецПериода Цикл
			НоваяСтрокаПериода = Объект.НастройкиРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПериода, НоваяСтрока);
			НоваяСтрокаПериода.Период = СледующийПериод;
			СледующийПериод = БюджетированиеКлиентСервер.ДобавитьИнтервал(СледующийПериод, ВыборкаДетальныеЗаписи.ПериодичностьГруппы, 1);
		КонецЦикла;
		
		Если ВыборкаДетальныеЗаписи.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
			Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
				НастройкаДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.ЭтапПодготовкиБюджетов, "НастройкаДействия"); // ХранилищеЗначения
				НайденнаяСтрока = НастройкаДействия.Получить().Найти("ГруппаШагов", "Имя");
				Если НайденнаяСтрока <> Неопределено Тогда
					ПовторяемаяГруппа = НайденнаяСтрока.Значение;
					ЗаполнитьШагиРасчетаНаСервере(ВыборкаДетальныеЗаписи.ЭтапПодготовкиБюджетов, ПовторяемаяГруппа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
		ЗаполнитьДеревоШагов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьВидПериода(Периодичность)
	
	Возврат Перечисления.ДоступныеПериодыОтчета[ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность)];
	
КонецФункции

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод <> Неопределено Тогда
		
		Период = ВыбранныйПериод.Представление;
		
		Объект.НачалоПериода = ВыбранныйПериод.Значение;
		Объект.КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ВыбранныйПериод.Значение, Объект.Периодичность);
		
		ЗаполнитьШагиРасчетаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПериод()
	
	Если Не ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Период = "";
		Элементы.Период.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.Период.Доступность = Истина;
	КонецЕсли;
	
	ВидПериода = ОпределитьВидПериода(Объект.Периодичность);
	СписокПериодов = ОбщегоНазначенияУТКлиентСервер.ДоступныеЗначенияПериодаПоВидуПериода(Объект.НачалоПериода, ВидПериода);
	ЭлементСписка = СписокПериодов.НайтиПоЗначению(Объект.НачалоПериода);
	
	Если ЭлементСписка = Неопределено Тогда
		Период = "";
	Иначе
		Период = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиЗначениеПериода()
	
	Объект.НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(Объект.НачалоПериода, Объект.Периодичность);
	Объект.КонецПериода =  БюджетированиеКлиентСервер.ДатаКонцаПериода(Объект.НачалоПериода, Объект.Периодичность);
	
	ОтобразитьПериод();
	ЗаполнитьШагиРасчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоШагов()
	
	Для Каждого СтрокаДерева Из ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы() Цикл
		Элементы.ДеревоШаговБюджетногоПроцесса.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеТабличнойЧасти(ИмяПоля)
	
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Период, ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	НайденнаяСтрока = Объект.НастройкиРасчета.НайтиСтроки(СтруктураПоиска)[0];
	НайденнаяСтрока[ИмяПоля] = ТекущиеДанные[ИмяПоля];
	
КонецПроцедуры

&НаСервере
Функция НайтиСтроки(СтрокиДерева, СтруктураПоиска)
	
	Возврат Документы.ПроцессПодготовкиБюджетов.НайтиСтроки(СтрокиДерева, СтруктураПоиска);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПроцессПодготовкиБюджетов.ЗаполнитьСтатусыЗадачДерева(Объект, ДеревоШаговБюджетногоПроцесса);
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗадачаПоОбъекту(Документ, ПроцессПодготовкиБюджетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетнаяЗадача.Ссылка,
		|	БюджетнаяЗадача.ПометкаУдаления,
		|	БюджетнаяЗадача.Выполнена
		|ПОМЕСТИТЬ БюджетныеЗадачи
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БюджетнаяЗадачаСписокДокументов.Ссылка
		|ИЗ
		|	БюджетныеЗадачи КАК БюджетныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
		|		ПО БюджетныеЗадачи.Ссылка = БюджетнаяЗадачаСписокДокументов.Ссылка
		|ГДЕ
		|	НЕ БюджетныеЗадачи.ПометкаУдаления
		|	И БюджетнаяЗадачаСписокДокументов.Документ = &Документ
		|	И НЕ БюджетныеЗадачи.Выполнена";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов", ПроцессПодготовкиБюджетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатусТекущегоДокументаУтвержден(Источник)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус, Проведен");
	Если РеквизитыДокумента.Статус = Перечисления.СтатусыПланов.ВПодготовке ИЛИ Не РеквизитыДокумента.Проведен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗадачуПоСобытию(Результат, ДополнительныеПараметры) Экспорт
	
	Документ = ДополнительныеПараметры.Документа;
	Задача = ЗадачаПоОбъекту(Документ, Объект.Ссылка);
	Если ЗначениеЗаполнено(Задача) Тогда
		Если  ТипЗнч(Результат) = Тип("ДокументСсылка.ЭкземплярБюджета")  
			И НЕ СтатусТекущегоДокументаУтвержден(Документ) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для выполнения задачи документ должен быть в статусе ""В работе""';
					|en = 'To complete the task, the document should be in the ""In progress"" status'"));
			
		Иначе
			
			ИДСледующейСтроки = ВыполнитьЗадачуНаСервере(Задача);
			Если ИДСледующейСтроки <> Неопределено Тогда
				Элементы.ДеревоШаговБюджетногоПроцесса.ТекущаяСтрока = ИДСледующейСтроки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БюджетнаяЗадачаСписком(Задача)
	
	Возврат Задачи.БюджетнаяЗадача.БюджетнаяЗадачаСписком(Задача);
	
КонецФункции

&НаСервере
Функция ОбработкаОповещенияЗадачиНаСервере()
	
	ОбновитьСтатусыНаСервере();
	
	УправлениеФормой();
	
	Возврат НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1));
	
КонецФункции

&НаСервере
Функция ВыполнитьЗадачуНаСервере(Задача)
	
	Попытка
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.Заблокировать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ЗадачаОбъект.Выполнена = Истина;
	ЗадачаОбъект.Записать();
	
	ОбновитьСтатусыНаСервере();
	
	УправлениеФормой();
	
	Возврат НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1));
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыЗадач()
	
	ОбновитьСтатусыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Завершен");
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОшибкаВыбраннойМоделиБюджетирования(Модель, ДатаОкончания)
	
	ДанныеМодели = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Модель, "Статус, КонецДействия");
	Если ДанныеМодели.Статус <> Перечисления.СтатусыМоделейБюджетирования.Действует Тогда
		Возврат НСтр("ru = 'Модель бюджетирования не действует.
									|Измените статус у модели для выбора в документе';
									|en = 'Budgeting model is invalid.
									|Change the model status for selection in the document'");
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ДанныеМодели.КонецДействия)
		И ДанныеМодели.КонецДействия < ДатаОкончания Тогда
		Возврат НСтр("ru = 'Период действия модели бюджетирования не соответствует периоду подготовки бюджетов';
					|en = 'The validity period of the budgeting model does not correspond to the budget preparation period'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВсеЗадачиВыполнены()
	
	Возврат Документы.ПроцессПодготовкиБюджетов.ВДеревеЭтаповВсеЗадачиВыполнены(ДеревоШаговБюджетногоПроцесса);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		Заголовок = Строка(Объект.Ссылка) + " (" + Строка(Объект.Статус) + ")";
	Иначе
		Заголовок = Метаданные.Документы.ПроцессПодготовкиБюджетов.Синоним + " (" + Строка(Объект.Статус) + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьИсполнителяЗадач(ТекущийИсполнитель, НовыйИсполнитель)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Исполнитель", ТекущийИсполнитель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроцессПодготовкиБюджетовНастройкиРасчета.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(БюджетнаяЗадачаЗадачиПоИсполнителю.Ссылка, НЕОПРЕДЕЛЕНО) КАК БюджетнаяЗадача,
	|	ЕСТЬNULL(БюджетнаяЗадачаЗадачиПоИсполнителю.Выполнена, ЛОЖЬ) КАК Выполнена
	|ИЗ
	|	Документ.ПроцессПодготовкиБюджетов.НастройкиРасчета КАК ПроцессПодготовкиБюджетовНастройкиРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.БюджетнаяЗадача.ЗадачиПоИсполнителю(&Исполнитель, ПроцессПодготовкиБюджетов = &Ссылка) КАК БюджетнаяЗадачаЗадачиПоИсполнителю
	|		ПО ПроцессПодготовкиБюджетовНастройкиРасчета.Ссылка = БюджетнаяЗадачаЗадачиПоИсполнителю.ПроцессПодготовкиБюджетов
	|			И ПроцессПодготовкиБюджетовНастройкиРасчета.ЭтапПодготовкиБюджетов = БюджетнаяЗадачаЗадачиПоИсполнителю.ЭтапПодготовкиБюджетов
	|			И ПроцессПодготовкиБюджетовНастройкиРасчета.ЭтапПодготовкиБюджетовОснование = БюджетнаяЗадачаЗадачиПоИсполнителю.ЭтапПодготовкиБюджетовОснование
	|ГДЕ
	|	ПроцессПодготовкиБюджетовНастройкиРасчета.Ссылка = &Ссылка
	|	И ПроцессПодготовкиБюджетовНастройкиРасчета.Ответственный = &Исполнитель";
	
	НачатьТранзакцию();
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Выполнена Тогда
				// По выполненным задачам менять исполнителя не нужно
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ = Объект.НастройкиРасчета.Получить(Выборка.НомерСтроки-1);
			СтрокаТЧ.Ответственный = НовыйИсполнитель;
			
			Если ЗначениеЗаполнено(Выборка.БюджетнаяЗадача) Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Задача.БюджетнаяЗадача");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.БюджетнаяЗадача);
				Блокировка.Заблокировать();
				
				ЗадачаОбъект = Выборка.БюджетнаяЗадача.ПолучитьОбъект();
				ЗадачаОбъект.Исполнитель = НовыйИсполнитель;
				ЗадачаОбъект.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
		Записать();
		
		ЗаполнитьДеревоШагов();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить замену исполнителя задач по причине:
			|%1';
			|en = 'Cannot replace the task assignee. Reason:
			|%1'");
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке())));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти