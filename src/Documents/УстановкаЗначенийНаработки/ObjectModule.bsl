#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипОснования = Тип("СправочникСсылка.УзлыОбъектовЭксплуатации") Тогда
		
		ЗаполнитьНаОснованииОбъектаЭксплуатации(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("Наработки.ОбъектЭксплуатации");
	
	Документы.НаработкаОбъектовЭксплуатации.ПроверкаТаблицыНаработок(ЭтотОбъект, Наработки, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Дата = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Заполняет документ на основании объекта 
//
Процедура ЗаполнитьНаОснованииОбъектаЭксплуатации(ДанныеЗаполнения)
	
	Наработки.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗапросов = Новый Массив;
	
	СписокЗапросовОбъекты = Новый Массив;

	ИспользоватьУправлениеРемонтами = Ложь;
	//++ НЕ УТКА
	ИспользоватьУправлениеРемонтами = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");
	//-- НЕ УТКА
	
	Если ИспользоватьУправлениеРемонтами Тогда
		
		//++ НЕ УТКА
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК ОбъектЭксплуатации,
		|	ЕСТЬNULL(ПоказателиНаработки.ПоказательНаработки, ЗНАЧЕНИЕ(Справочник.ПоказателиНаработки.ПустаяСсылка)) КАК ПоказательНаработки,
		|	Объекты.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Объекты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.Редактируется)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	Объекты.ПометкаУдаления КАК ЕстьОшибкиУдален,
		|	Объекты.ЭтоГруппа КАК ЕстьОшибкиГруппа
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК Объекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПоказателиНаработки
		|		ПО Объекты.Класс = ПоказателиНаработки.Ссылка
		|			И (НЕ ПоказателиНаработки.РегистрироватьОтИсточника)
		|ГДЕ
		|	Объекты.Ссылка В (&ОбъектЭксплуатации)";
		СписокЗапросовОбъекты.Добавить(ТекстЗапроса);
		//-- НЕ УТКА
	
	Иначе

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК ОбъектЭксплуатации,
		|	ЕСТЬNULL(ПорядокУчетаОС.ПоказательНаработки, ЗНАЧЕНИЕ(Справочник.ПоказателиНаработки.ПустаяСсылка)) КАК ПоказательНаработки,
		|	Объекты.Статус КАК Статус,
		|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
		|	Объекты.ПометкаУдаления КАК ЕстьОшибкиУдален,
		|	Объекты.ЭтоГруппа КАК ЕстьОшибкиГруппа
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК Объекты
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|				&Дата, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство В (&ОбъектЭксплуатации)) КАК ПорядокУчетаОС
		|		ПО Объекты.Ссылка = ПорядокУчетаОС.ОсновноеСредство
		|ГДЕ
		|	Объекты.Ссылка В (&ОбъектЭксплуатации)";
			
		СписокЗапросовОбъекты.Добавить(ТекстЗапроса);
		
	КонецЕсли; 
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъекты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	//++ НЕ УТКА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Узлы.Ссылка КАК ОбъектЭксплуатации,
	|	ЕСТЬNULL(ПоказателиНаработки.ПоказательНаработки, ЗНАЧЕНИЕ(Справочник.ПоказателиНаработки.ПустаяСсылка)) КАК ПоказательНаработки,
	|	Узлы.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА Узлы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	Узлы.ПометкаУдаления КАК ЕстьОшибкиУдален
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПоказателиНаработки
	|		ПО Узлы.Класс = ПоказателиНаработки.Ссылка
	|			И (НЕ ПоказателиНаработки.РегистрироватьОтИсточника)
	|ГДЕ
	|	Узлы.Ссылка = &ОбъектЭксплуатации";
	СписокЗапросов.Добавить(ТекстЗапроса);
	//-- НЕ УТКА
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользуетсяУправлениеВНА_2_4", ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Дата));
	
	ТекстОшибкиГруппа = НСтр("ru = 'Элемент справочника ""%1"" является группой. Ввод на основании групп справочника запрещен.';
							|en = '""%1"" is a group. Cannot generate documents from a group.'");
	ТекстОшибкиУдален = НСтр("ru = '%1 ""%2"" помечен на удаление. Ввод на основании помеченного на удаление элемента справочника запрещен.';
							|en = '%1 ""%2"" is marked for deletion. Cannot generate documents from items that have been marked for deletion.'");
	ТекстОшибкиСтатус = НСтр("ru = '%1 ""%2"" находится в статусе ""%3"". Ввод на основании разрешен только в статусе ""Редактируется"".';
							|en = '%1 ""%2"" in ""%3"" status. To generate a document, change its status to ""Under development"".'");
	ТекстОшибкиПоказатель = НСтр("ru = 'Для %1 ""%2"" нет доступных для регистрации показателей наработки';
								|en = '%1 ""%2"" has no operating time units to register'");
	
	УстановитьПривилегированныйРежим(Истина);
	Пакет = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Пакет[0].Пустой() Тогда
		
		Выборка = Пакет[0].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЕстьОшибкиГруппа Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиГруппа,
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Выборка.ЕстьОшибкиУдален Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиУдален,
					НСтр("ru = 'Объект эксплуатации';
						|en = 'Asset'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Выборка.ЕстьОшибкиСтатус Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиСтатус,
					НСтр("ru = 'Объект эксплуатации';
						|en = 'Asset'"),
					Выборка.ОбъектЭксплуатации,
					Выборка.Статус);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПоказательНаработки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиПоказатель,
					НСтр("ru = 'объекта эксплуатации';
						|en = 'asset'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Наработки.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Если Не Пакет[1].Пустой() Тогда
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЕстьОшибкиУдален Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиУдален,
					НСтр("ru = 'Узел объекта эксплуатации';
						|en = 'Sub-asset'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Выборка.ЕстьОшибкиСтатус Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиСтатус,
					НСтр("ru = 'Узел объекта эксплуатации';
						|en = 'Sub-asset'"),
					Выборка.ОбъектЭксплуатации,
					Выборка.Статус);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПоказательНаработки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиПоказатель,
					НСтр("ru = 'узла объекта эксплуатации';
						|en = 'Sub-asset'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Наработки.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
