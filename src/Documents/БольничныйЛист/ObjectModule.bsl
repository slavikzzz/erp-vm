#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// В качестве данных заполнения может принимать структуру с полями.
//		Ссылка
//		Действие
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, 
			ДанныеЗаполнения.Ссылка, 
			"ДокументРассчитан", 
			"Начисления,НачисленияПерерасчет,НачисленияПерерасчетНулевыеСторно,
			|НДФЛ,ОтработанноеВремяДляСреднегоФСС,
			|ПогашениеЗаймов,Показатели,ПримененныеВычетыНаДетейИИмущественные,
			|РаспределениеРезультатовНачислений,РаспределениеРезультатовУдержаний,
			|СреднийЗаработокДанныеСтрахователей,СреднийЗаработокФСС,Удержания",
			ДанныеЗаполнения);
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "ЗаполнитьПослеПереноса" Тогда
			ЗаполнитьПослеПереноса(ДанныеЗаполнения);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			ДатаНачалаСобытия = '00010101';
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		ЯвляетсяПродолжениемБолезни = Истина;
		ПервичныйБольничныйЛист = ДанныеЗаполнения;
		ЗаполнитьПоПервичномуБольничномуЛисту(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПрогулНеявка") Тогда
		ДанныеОтсутствия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Сотрудник,Организация,ФизическоеЛицо,ДатаНачала,ДатаОкончания");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОтсутствия);
		ДатаНачалаСобытия = '00010101';
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВходящийЗапросФССДляРасчетаПособия") Тогда
		Данные = Документы.ВходящийЗапросФССДляРасчетаПособия.ДанныеДляЗаполненияБольничного(ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Данные);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		ДатаНачалаСобытия = ДатаНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ФизическоеЛицо)
		И Не РегистрыСведений.СведенияОбЭЛН.ЭтоЭЛН(НомерЛисткаНетрудоспособности)
		И Не ЗначениеЗаполнено(Сотрудник) Тогда
		Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(ФизическоеЛицо, Организация, ДатаНачалаСобытия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.БольничныйЛист.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства)
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачала, "Объект.ДатаНачала", Отказ,
		НСтр("ru = 'Дата освобождения от работы';
			|en = 'Date of release from work '"));
	
	Если ЭтоУходЗаРодственником() Тогда
		
		Если ЗначениеЗаполнено(РодственникЗаКоторымОсуществляетсяУход1) Тогда
			
			ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаРодственник1, "Объект.ДатаНачалаРодственник1", Отказ,
				НСтр("ru = 'Начало периода болезни';
					|en = 'Sick period start'"));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РодственникЗаКоторымОсуществляетсяУход2) Тогда
			
			ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаРодственник2, "Объект.ДатаНачалаРодственник2", Отказ,
				НСтр("ru = 'Начало периода болезни';
					|en = 'Sick period start'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НазначитьПособие И ЗначениеЗаполнено(ДатаНачалаОплаты) Тогда
		
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаОплаты, "Объект.ДатаНачалаОплаты", Отказ,
			НСтр("ru = 'Начало оплаты пособия';
				|en = 'Allowance payment start'"));
		
	КонецЕсли;
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаСобытия, "Объект.ДатаНачалаСобытия", Отказ,
		НСтр("ru = 'Начало периода нетрудоспособности';
			|en = 'Incapacity for work period start'"));
	
	Если ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
		
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНарушенияРежима, "Объект.ДатаНарушенияРежима", Отказ,
			НСтр("ru = 'Дата нарушения режима';
				|en = 'Working hours violation date'"), ДатаНачалаСобытия, НСтр("ru = 'даты начала периода нетрудоспособности';
																		|en = 'the start date of incapacity for work period   '"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачалаПоловиннойОплаты) Тогда
		
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаПоловиннойОплаты, "Объект.ДатаНачалаПоловиннойОплаты", Отказ,
			НСтр("ru = 'Дата начала оплаты в размере';
				|en = 'Payment start date in the amount of'") + " 50%", ДатаНачалаСобытия, НСтр("ru = 'даты начала периода нетрудоспособности';
																						|en = 'the start date of incapacity for work period   '"));
		
	КонецЕсли;
	
	Если ОсвобождатьСтавку Тогда
		УправлениеШтатнымРасписанием.ПроверитьВозможностьПроведенияВременногоОсвобожденияСтавок(
			Ссылка, Проведен, Сотрудник, ДатаНачала, ДатаОкончания, Отказ, ИсправленныйДокумент);
	КонецЕсли;
	
	КонтейнерОшибок = Неопределено;
	
	ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда 
		
		Если ДокументРассчитан Тогда
			
			ЗарплатаКадры.ПроверитьДатуВыплаты(ЭтотОбъект, Отказ);
			
			ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок);
			
			ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
			
			ПроверитьВыплатуПособийУчастникомПроектаПоПрямымВыплатамФСС(КонтейнерОшибок);
			
			ПроверитьПериодДействияНачислений(Отказ);
			
			// Проверка корректности распределения по источникам финансирования
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет,Удержания,НДФЛ,ПогашениеЗаймов,КорректировкиВыплаты";
			
			ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
				ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
			// Проверка корректности распределения по территориям и условиям труда
			ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет";
			
			РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
				ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, Отказ);
	
	УдалитьПроверенныеРеквизиты(ПроверяемыеРеквизиты);
	
	КадровыйЭДО.ПроверитьВозможностьСохраненияИзмененийДокументаСПечатнымиФормами(
		ЭтотОбъект, Метаданные.Роли.ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОсвобождатьСтавку Тогда
		УправлениеШтатнымРасписанием.ПроверитьВозможностьОтменыПроведения(Ссылка, Сотрудник, ДатаНачала, ДатаОкончания, Отказ);
	КонецЕсли;
	
	Больничные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	Отпуска = Документы.БольничныйЛист.ОтпускаПриостановленныеБольничными(Больничные);
	НайденныеОтпуска = Отпуска.НайтиСтроки(Новый Структура("ПроведенИРассчитан", Истина));
	Для Каждого Отпуск Из НайденныеОтпуска Цикл
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'На основании %1 исправлен документ %2';
				|en = 'The document %2 has been corrected based on %1'"),
			Ссылка,
			Отпуск.Представление));
	КонецЦикла;
	
	ПерерасчетЗарплаты.УдалитьПерерасчетыПоРегистратору(Ссылка);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Документы.БольничныйЛист.ОчиститьСлучайУходаПриНеобходимости(ЭтотОбъект);
	
	ОбновитьГоловнуюОрганизацию();
	
	Если ЭЛНКарантинПоКоронавирусу
		И Не ОбменЛисткамиНетрудоспособностиФСС.ЭтоКарантинныйЭЛН(
			ПричинаНетрудоспособности,
			НомерЛисткаНетрудоспособности) Тогда
		ЭЛНКарантинПоКоронавирусу = Ложь;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи());
	
	ЗаполнитьСотрудникаВТаблицахНачислений();
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокумент(ЭтотОбъект);

	ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
	
	Если ЗначениеЗаполнено(СпособРасчетовСФизическимиЛицами) И Не ДоступноИзменениеСпособаРасчетов() Тогда
		СпособРасчетовСФизическимиЛицами = Перечисления.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УчетСреднегоЗаработка.ЗаписатьДатуНачалаСобытия(Ссылка, Сотрудник, ДатаНачалаСобытия);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЦепочкиДокументов");
		Модуль.УстановитьВторичныеРеквизитыДокументаЗамещения(ЭтотОбъект);
	КонецЕсли;
	
	УчетПособийСоциальногоСтрахования.ПриЗаписиДокументаБольничныйЛист(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.СведенияОбЭЛН.ПередУдалениемБольничного(ЭтотОбъект);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокументПриКопировании(ЭтотОбъект, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполненияДокумента

Функция ДокументГотовКРасчету(ВыводитьСообщения = Истина) Экспорт
	
	Если Не ВыводитьСообщения Тогда
		СообщенияДоНачалаПроверки = ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;
	
	КонтейнерОшибок = Неопределено;
	
	ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок);
	
	ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок, Истина);
	
	КонтейнерСодержитОшибки = Ложь;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, КонтейнерСодержитОшибки);
	
	Если Не ВыводитьСообщения Тогда
		
		ПолучитьСообщенияПользователю(Истина);		
		Для Каждого СообщениеПользователю Из СообщенияДоНачалаПроверки Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Не КонтейнерСодержитОшибки;	
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок)
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан период регистрации.';
								|en = 'Registration period is not specified.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПериодРегистрации", ТекстСообщения, "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация, по которой выполняется начисление.';
								|en = 'Company for which accrual is made is not specified.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Организация", ТекстСообщения, "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран сотрудник.';
								|en = 'Employee is not selected.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудник", ТекстСообщения, "");
	Иначе 
		ПроверитьВидЗанятостиСотрудника(КонтейнерОшибок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru = 'Не указаны даты освобождения от работы.';
								|en = 'Dates of release from work are not specified.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончания", ТекстСообщения, "");
	Иначе
		Если Не ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата начала освобождения от работы.';
									|en = 'Start date of release from work is not entered.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачала", ТекстСообщения, "");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ДатаНачала) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания освобождения от работы.';
									|en = 'End date of release from work is not entered.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончания", ТекстСообщения, "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания Тогда
			ТекстСообщения = НСтр("ru = 'Дата окончания освобождения от работы не может быть меньше даты начала.';
									|en = 'End date of release from work cannot be less than the start date.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончания", ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаНачалаСобытия) И ДатаНачала < ДатаНачалаСобытия Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода отсутствия сотрудника не должна быть меньше даты начала события.';
								|en = 'Start date of employee absence period  cannot be less than the event start date.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачала", ТекстСообщения, "");
	КонецЕсли;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	Если Не ЗначениеЗаполнено(ПричинаНетрудоспособности) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана причина нетрудоспособности.';
								|en = 'Reason for incapacity for work is not specified.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПричинаНетрудоспособности", ТекстСообщения, "");
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
		И Не ЗначениеЗаполнено(СлучайУходаЗаБольнымРебенком)
		И Документы.БольничныйЛист.ИспользоватьПериодыУходаВШапке(ЭтотОбъект)
		И ИспользуетсяРасчетЗарплаты Тогда
		ТекстСообщения = НСтр("ru = 'Не указан случай ухода за ребенком.';
								|en = 'Child care event is not specified.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.СлучайУходаЗаБольнымРебенком", ТекстСообщения, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сотрудник)И Не УчетПособийСоциальногоСтрахования.ИспользуетсяУсловиеИсчисления(ЭтотОбъект, "46") Тогда
		ДатаЗапроса = ?(ЗначениеЗаполнено(ДатаНачалаСобытия), ДатаНачалаСобытия, Дата);
		ИменаПолей = "ДатаНачала,ДатаОкончания";
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, ИменаПолей, ДатаЗапроса);
		ЕстьОшибкаЗаполнения = Ложь;
		Если КадровыеДанные = Неопределено Или Не ЗначениеЗаполнено(КадровыеДанные.ДатаНачала) Тогда
			УстановитьПривилегированныйРежим(Истина);
			Договор = СЭДОФСС.ДоговорФизлицаНаДатуСобытия(Организация, ФизическоеЛицо, ДатаЗапроса);
			УстановитьПривилегированныйРежим(Ложь);
			ЕстьОшибкаЗаполнения = Договор <> Неопределено И ЗначениеЗаполнено(Договор.Начало) И ЗначениеЗаполнено(Договор.Окончание)
				И Договор.Окончание <= ДобавитьМесяц(Договор.Начало, 6);
			ТекстСообщения = НСтр("ru = 'ERR_PR_1007: У сотрудника договор менее 6 месецев необходимо заполнить условия исчисления: код 46';
									|en = 'ERR_PR_1007: У сотрудника договор менее 6 месецев необходимо заполнить условия исчисления: код 46'");
		Иначе
			ЕстьОшибкаЗаполнения = ЗначениеЗаполнено(КадровыеДанные.ДатаНачала) И ЗначениеЗаполнено(КадровыеДанные.ДатаОкончания)
				И КадровыеДанные.ДатаОкончания <= ДобавитьМесяц(КадровыеДанные.ДатаНачала, 6);
			ТекстСообщения = НСтр("ru = 'ERR_PR_1007: У сотрудника трудовой договор менее 6 месецев необходимо заполнить условия исчисления: код 46';
									|en = 'ERR_PR_1007: У сотрудника трудовой договор менее 6 месецев необходимо заполнить условия исчисления: код 46'");
		КонецЕсли;
		// Выводим предупреждение без отказа
		Если ЕстьОшибкаЗаполнения Тогда
			ИмяРеквизита = ?(Не ЗначениеЗаполнено(УсловияИсчисленияКод1), "УсловияИсчисленияКод1",
						   ?(Не ЗначениеЗаполнено(УсловияИсчисленияКод2), "УсловияИсчисленияКод2", "УсловияИсчисленияКод3"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект." + ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок, ПроверкаПередРасчетом = Ложь)
	
	Если Не ДокументРассчитан И Не ПроверкаПередРасчетом Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата начала нетрудоспособности.';
								|en = 'Incapacity for work start date is not specified.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаСобытия", ТекстСообщения, "");
	КонецЕсли;
	
	Если НазначитьПособие Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаОплаты) И Не ЗначениеЗаполнено(ДатаОкончанияОплаты) Тогда
			ТекстСообщения = НСтр("ru = 'Не указаны даты оплаты пособия.';
									|en = 'Allowance payment dates are not specified.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОплаты", ТекстСообщения, "");
		Иначе
			Если Не ЗначениеЗаполнено(ДатаНачалаОплаты) И ЗначениеЗаполнено(ДатаОкончанияОплаты) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена дата начала оплаты пособия.';
										|en = 'Allowance payment start date is not entered.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОплаты", ТекстСообщения, "");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаОкончанияОплаты) И ЗначениеЗаполнено(ДатаНачалаОплаты) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания оплаты пособия.';
										|en = 'Allowance payment end date is not entered.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончанияОплаты", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачалаОплаты) И ЗначениеЗаполнено(ДатаНачалаСобытия) И ДатаНачалаОплаты < ДатаНачалаСобытия Тогда
				ТекстСообщения = НСтр("ru = 'Дата назначения пособия не должна быть меньше даты начала события.';
										|en = 'Allowance assignment date cannot be earlier than the event start date.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОплаты", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачалаОплаты) И ЗначениеЗаполнено(ДатаНачала) И ДатаНачалаОплаты < ДатаНачала Тогда
				ТекстСообщения = НСтр("ru = 'Дата назначения пособия не должна быть меньше даты начала периода нетрудоспособности.';
										|en = 'Allowance assignment date cannot be earlier than the start date of incapacity for work period.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОплаты", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачалаОплаты) И ЗначениеЗаполнено(ДатаОкончанияОплаты) И ДатаНачалаОплаты > ДатаОкончанияОплаты Тогда
				ТекстСообщения = НСтр("ru = 'Дата окончания оплаты пособия не должна быть меньше даты начала оплаты пособия.';
										|en = 'End date of allowance payment cannot be less than the allowance start date.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончанияОплаты", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаОкончанияОплаты) И ЗначениеЗаполнено(ДатаОкончания) И ДатаОкончания < ДатаОкончанияОплаты Тогда
				ТекстСообщения = НСтр("ru = 'Дата окончания оплаты пособия не должна быть больше даты окончания периода нетрудоспособности.';
										|en = 'End date of allowance payment cannot be later than the end date of incapacity for work period.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончанияОплаты", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачалаОплаты) И ЗначениеЗаполнено(ДатаОкончания) И ДатаОкончания < ДатаНачалаОплаты Тогда
				ТекстСообщения = НСтр("ru = 'Дата окончания периода отсутствия сотрудника не должна быть меньше даты назначения пособия.';
										|en = 'End date of the employee absence period cannot be earlier than the allowance assignment date.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончания", ТекстСообщения, "");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПроцентОплаты) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан процент оплаты.';
										|en = 'Payment percent is not specified.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПроцентОплаты", ТекстСообщения, "");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОграничениеПособия) Тогда
				ТекстСообщения = НСтр("ru = 'Не указано ограничение пособия.';
										|en = 'Allowance restriction is not specified.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "ОграничениеПособия", ТекстСообщения, "");
			КонецЕсли;
			
			Если ПрименятьЛьготыПриНачисленииПособия И Не ЗначениеЗаполнено(ФинансированиеФедеральнымБюджетом) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан вид льготы используемой при начислении пособия.';
										|en = 'Benefit kind used to accrue the allowance is not specified.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ФинансированиеФедеральнымБюджетом", ТекстСообщения, "");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВидОплатыПособия) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан вид расчета для начисления пособия.';
										|en = 'Calculation kind to accrue the allowance is not specified.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидОплатыПособия", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачалаОплаты) Тогда
				ДатаНачалаОплатыЗаСчетСФР = Документы.БольничныйЛист.ДатаНачалаОплатыЗаСчетСФР(ЭтотОбъект);
				Если ДатаНачалаОплаты < ДатаНачалаОплатыЗаСчетСФР И Не ЗначениеЗаполнено(ВидОплатыЗаСчетРаботодателя) Тогда
					ТекстСообщения = НСтр("ru = 'Не указан вид расчета для начисления пособия за счет работодателя.';
											|en = 'Calculation kind for allowance accrual at the employer''s expense is not specified.'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидОплатыЗаСчетРаботодателя", ТекстСообщения, "");
				КонецЕсли;
			КонецЕсли;
			
			Если ДоплачиватьДоСреднегоЗаработка И Не ЗначениеЗаполнено(ВидРасчетаДоплаты) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан вид расчета для начисления доплаты до полного среднего заработка.';
										|en = 'Calculation kind for supplement to average earnings is not specified.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидРасчетаДоплаты", ТекстСообщения, "");
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;
	
	Если (Не НазначитьПособие
		Или ДатаНачала < ДатаНачалаОплаты
		Или ДатаОкончания > ДатаОкончанияОплаты) 
		И НЕ ЗначениеЗаполнено(ВидНеоплачиваемогоВремени) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан вид расчета для неоплачиваемого времени.';
								|en = 'Calculation kind for unpaid hours is not specified.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидНеоплачиваемогоВремени", ТекстСообщения, "");
	КонецЕсли;
	
	Если ЯвляетсяПродолжениемБолезни И Не ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		ЗначенияРеквизитов = ПервичныйБольничныйПоНомеру();
		Если ЗначенияРеквизитов <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран первичный больничный.';
									|en = 'The primary sick leave is not selected.'");
			Если Не ЗначенияРеквизитов.ДокументРассчитан Тогда
				ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'Первичный больничный необходимо рассчитать и провести.';
															|en = 'The primary sick leave must be calculated and posted.'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПервичныйБольничныйЛист", ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;
	
	ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект = ПрямыеВыплатыПособийСоциальногоСтрахования.ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация, ПериодРегистрации);
	Если ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект Тогда
		ТекстСообщения = ПрямыеВыплатыПособийСоциальногоСтрахования.ТекстСообщенияЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Организация", ТекстСообщения, "");
	КонецЕсли;
	
	ПроверитьЗаполнениеПланируемойДатыВыплаты(КонтейнерОшибок, ПроверкаПередРасчетом);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПланируемойДатыВыплаты(КонтейнерОшибок, ПроверкаПередРасчетом)
	
	МассивНачисленийДокумента = Новый Массив;
	
	Если НЕ ПроверкаПередРасчетом Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, Начисления.ВыгрузитьКолонку("Начисление"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, НачисленияПерерасчет.ВыгрузитьКолонку("Начисление"), Истина);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, МассивНачисленийДокумента)
		И Не ЗначениеЗаполнено(ПланируемаяДатаВыплаты) Тогда
		ТекстСообщения = НСтр("ru = 'Дата выплаты обязательна к заполнению при выплате в межрасчет.';
								|en = 'Payment date is required for payments outside the payroll period.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПланируемаяДатаВыплаты", ТекстСообщения, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПериодДействияНачислений(Отказ)
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru = 'Перерасчет прошлого периода';
																																	|en = 'Recalculation of the last period'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", НСтр("ru = 'Удержания';
																															|en = 'Deductions'"), "Удержание"));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
КонецПроцедуры

Процедура ПроверитьВыплатуПособийУчастникомПроектаПоПрямымВыплатамФСС(КонтейнерОшибок)
	
	ВыплачиваемыеПособия = Начисления.Выгрузить(, "Начисление, Результат");
	ВыплачиваемыеПособия.Свернуть("Начисление", "Результат");
	
	ВыплачиваемыеПособияДляПроверки = ПрямыеВыплатыПособийСоциальногоСтрахования.ПустаяТаблицаДляПроверкиОплатыПособийУчастникомПилотногоПроектаФСС();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыплачиваемыеПособия, ВыплачиваемыеПособияДляПроверки);
	
	Ошибка = ПрямыеВыплатыПособийСоциальногоСтрахования.ПроверитьОплатуПособийУчастникомПилотногоПроектаФСС(Организация, ПериодРегистрации, ВыплачиваемыеПособияДляПроверки);
	Если ЗначениеЗаполнено(Ошибка) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "МесяцНачисленияСтрокой", Ошибка, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВидЗанятостиСотрудника(КонтейнерОшибок)
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ВидЗанятости");
	ЕстьДоговорыГПХ = КадровыйУчет.ЕстьДоговорыГПХ(КадровыеДанные[0].ФизическоеЛицо, Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не (КадровыеДанные[0].ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы 
		Или КадровыеДанные[0].ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство) Тогда
		Если НЕ ЕстьДоговорыГПХ Тогда
			ТекстСообщения = НСтр("ru = 'В документе может быть выбран сотрудник по основному месту работы или внешнему совместительству.';
									|en = 'In the document, you can select an employee by the primary employment or external secondary employment.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудник", ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПроверенныеРеквизиты(ПроверяемыеРеквизиты)
	
	Если ПроверяемыеРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудник");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаНачалаСобытия");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаНачалаОплаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаНачала");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаОкончания");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаОкончанияОплаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПричинаНетрудоспособности");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПроцентОплаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ОграничениеПособия");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ФинансированиеФедеральнымБюджетом");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидОплатыПособия");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидОплатыЗаСчетРаботодателя");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидНеоплачиваемогоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидРасчетаДоплаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "НомерЛисткаНетрудоспособности");
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСотрудникаВТаблицахНачислений()
	
	ТаблицыНачислений = Новый Массив;
	ТаблицыНачислений.Добавить(Начисления);
	ТаблицыНачислений.Добавить(НачисленияПерерасчет);
	ТаблицыНачислений.Добавить(НачисленияПерерасчетНулевыеСторно);
	
	Для Каждого ТаблицаНачислений Из ТаблицыНачислений Цикл
		Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
				СтрокаТаблицы.Сотрудник = Сотрудник;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПервичныйБольничныйПоНомеру()
	Если Не ЗначениеЗаполнено(НомерПервичногоЛисткаНетрудоспособности) Или Не ЯвляетсяПродолжениемБолезни Тогда
		Возврат Неопределено;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	Отбор.Вставить("Проведен", Истина);
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
		НомерПервичногоЛисткаНетрудоспособности,
		ГоловнаяОрганизация,
		Отбор);
	Если ЗначенияРеквизитов = Неопределено Тогда
		Отбор.Удалить("Проведен");
		ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
			НомерПервичногоЛисткаНетрудоспособности,
			ГоловнаяОрганизация,
			Отбор);
	КонецЕсли;
	Возврат ЗначенияРеквизитов;
КонецФункции

Процедура ЗаполнитьПоПервичномуБольничномуЛисту(ПервичныйБольничный) Экспорт
	
	Если ПервичныйБольничный = Неопределено Тогда
		ЗначенияРеквизитов = ПервичныйБольничныйПоНомеру();
		Если ЗначенияРеквизитов <> Неопределено Тогда
			ПервичныйБольничный = ЗначенияРеквизитов.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПервичныйБольничный) = Тип("ДокументСсылка.БольничныйЛист")
		Или ТипЗнч(ПервичныйБольничный) = Тип("Строка") Тогда
		ДанныеПервичногоБольничногоЛиста = УчетПособийСоциальногоСтрахования.ДанныеБольничногоЛиста(ПервичныйБольничный);
	Иначе
		ДанныеПервичногоБольничногоЛиста = ПервичныйБольничный;
	КонецЕсли;
	
	Если ДанныеПервичногоБольничногоЛиста = Неопределено
		Или Не ДанныеПервичногоБольничногоЛиста.ДокументРассчитан Тогда
		
		ПервичныйБольничныйЛист = Неопределено;
		
	Иначе
		
		ПервичныйБольничныйЛист = ДанныеПервичногоБольничногоЛиста.Ссылка;
		НомерПервичногоЛисткаНетрудоспособности = ДанныеПервичногоБольничногоЛиста.НомерЛисткаНетрудоспособности;
		
		ЗаполняемыеДанные = "Организация, ГоловнаяОрганизация, Сотрудник, ФизическоеЛицо, ОсновноеМестоРаботы,
			|ПричинаНетрудоспособности, НазначитьПособие, СотрудникСлужащий,СдвигатьПериодОплаты,
			|ДатаНачала, ДатаНачалаСобытия, ДатаНачалаОплаты, ДатаНачалаПоловиннойОплаты, ДатаНарушенияРежима,
			|СлучайУходаЗаБольнымРебенком,
			|СтажЛет, СтажМесяцев, СтажРасширенныйЛет, СтажРасширенныйМесяцев, ДоплачиватьДоСреднегоЗаработка,
			|ПроцентОплаты, ПроцентОплатыБезЛьгот, ОграничениеПособияБезЛьгот, ПрименятьЛьготыПриНачисленииПособия,
			|ФинансированиеФедеральнымБюджетом, ОграничениеПособия, ПериодРасчетаСреднегоЗаработкаНачало,
			|ПериодРасчетаСреднегоЗаработкаОкончание, ФиксПериодРасчетаСреднегоЗаработка,
			|ПериодРасчетаСреднегоЗаработкаПервыйГод, ПериодРасчетаСреднегоЗаработкаВторойГод,
			|УчитыватьЗаработокПредыдущихСтрахователей, РасчетПоПравилам2010Года, ВидОплатыПособия,
			|ВидОплатыЗаСчетРаботодателя, ВидНеоплачиваемогоВремени, ВидРасчетаДоплаты, ПроцентДоплатыЗаДниНетрудоспособности,
			|ДоляНеполногоВремени, РайонныйКоэффициентРФнаНачалоСобытия,
			|УсловияИсчисленияКод1, УсловияИсчисленияКод2, УсловияИсчисленияКод3";
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПервичногоБольничногоЛиста, ЗаполняемыеДанные);
		
		ИсключаемыеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		ДатаНачала = УчетПособийСоциальногоСтрахования.ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы) + 86400;
		
		Если ТипЗнч(ДанныеПервичногоБольничногоЛиста) = Тип("Структура") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ * ИЗ Документ.БольничныйЛист.ПериодыУходаЗаРодственниками КАК Т
			|ГДЕ Т.Ссылка = &Ссылка
			|УПОРЯДОЧИТЬ ПО НомерСтроки";
			Запрос.УстановитьПараметр("Ссылка", ПервичныйБольничныйЛист);
			Таблица = Запрос.Выполнить().Выгрузить();
			ДанныеПервичногоБольничногоЛиста.Вставить("ПериодыУходаЗаРодственниками", Таблица);
		КонецЕсли;
		
		ПериодыУходаЗаРодственниками.Очистить();
		Если ЭтоУходЗаРодственником() Тогда
			Если Документы.БольничныйЛист.ИспользоватьПериодыУходаВШапке(ДанныеПервичногоБольничногоЛиста) Тогда
				ДанныеЭЛН = Документы.БольничныйЛист.ДанныеЭЛНДляЗаполнения(ДанныеПервичногоБольничногоЛиста);
				Документы.БольничныйЛист.ЗаполнитьТаблицуУходаЗаРодственниками(ДанныеПервичногоБольничногоЛиста, ДанныеЭЛН);
			КонецЕсли;
			Если ДанныеПервичногоБольничногоЛиста.ПрерывистыйМетод Тогда
				// В случае прерывистого метода может продолжиться ранее прерванный уход за родственником.
				РодственникиИПоследниеПериодыУхода = Новый Соответствие;
				Для Каждого ПериодУходаПервичного Из ДанныеПервичногоБольничногоЛиста.ПериодыУходаЗаРодственниками Цикл
					ПоследнийПериод = РодственникиИПоследниеПериодыУхода[ПериодУходаПервичного.Родственник];
					Если ПоследнийПериод = Неопределено
						Или ПоследнийПериод.ДатаОкончания < ПериодУходаПервичного.ДатаОкончания Тогда
						РодственникиИПоследниеПериодыУхода.Вставить(ПериодУходаПервичного.Родственник, ПериодУходаПервичного);
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючИЗначение Из РодственникиИПоследниеПериодыУхода Цикл
					ПериодУхода = ПериодыУходаЗаРодственниками.Добавить();
					ЗаполнитьЗначенияСвойств(ПериодУхода, КлючИЗначение.Значение, , "НомерСтроки");
					ЗаполнитьЗначенияСвойств(ПериодУхода, ЭтотОбъект, "ДатаНачала, ДатаОкончания");
					// Разбивка по годам.
					ДобавленныеСтроки = Документы.БольничныйЛист.РазбитьПоГодам(ПериодыУходаЗаРодственниками, ПериодУхода, "НомерСтроки");
					Для Каждого СтрокаТаблицы Из ДобавленныеСтроки Цикл
						СтрокаТаблицы.ИспользованоДней       = 0;
						СтрокаТаблицы.ДнейПоловиннойОплаты   = 0;
						СтрокаТаблицы.КоличествоДнейИзменено = Ложь;
					КонецЦикла;
				КонецЦикла;
			Иначе
				// Заполнение теми родственниками, на которых закончился больничный.
				Для Каждого ПериодУходаПервичного Из ДанныеПервичногоБольничногоЛиста.ПериодыУходаЗаРодственниками Цикл
					Если ПериодУходаПервичного.ДатаОкончания >= ДанныеПервичногоБольничногоЛиста.ДатаОкончания Тогда
						ПериодУхода = ПериодыУходаЗаРодственниками.Добавить();
						ЗаполнитьЗначенияСвойств(ПериодУхода, ПериодУходаПервичного, , "НомерСтроки");
						ЗаполнитьЗначенияСвойств(ПериодУхода, ЭтотОбъект, "ДатаНачала, ДатаОкончания");
						// Разбивка по годам.
						ДобавленныеСтроки = Документы.БольничныйЛист.РазбитьПоГодам(ПериодыУходаЗаРодственниками, ПериодУхода, "НомерСтроки");
						Для Каждого СтрокаТаблицы Из ДобавленныеСтроки Цикл
							СтрокаТаблицы.ИспользованоДней       = 0;
							СтрокаТаблицы.ДнейПоловиннойОплаты   = 0;
							СтрокаТаблицы.КоличествоДнейИзменено = Ложь;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДатаОкончания < ДатаНачала Тогда
		ДатаОкончания = '00010101';
	КонецЕсли;
	
	Кэш = Новый Соответствие;
	АвтозаполнениеПериодовОплаты = Истина;
	Документы.БольничныйЛист.ЗаполнитьПараметрыОплаты(ЭтотОбъект, Кэш);
	
КонецПроцедуры

Функция ЭтоУходЗаРодственником()
	Возврат Перечисления.ПричиныНетрудоспособности.ЭтоУходЗаРодственником(ПричинаНетрудоспособности);
КонецФункции

Процедура ЗаполнитьПослеПереноса(ДанныеЗаполнения)
	
	ДатаОкончанияОплаты = ДатаОкончания;
	
	ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(ДатаНачалаСобытия);
	ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(ДатаНачалаСобытия, ПорядокРасчета);
		
	ПериодРасчетаСреднегоЗаработкаНачало 	= ПериодРасчетаСреднего.ДатаНачала;
	ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
	ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ПериодРасчетаСреднего.ДатаНачала);
	ПериодРасчетаСреднегоЗаработкаВторойГод = Год(ПериодРасчетаСреднего.ДатаОкончания);
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Ответственный");
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	
КонецПроцедуры

Процедура ВключитьАвтозаполнениеПериодовОплаты() Экспорт
	Если Не АвтозаполнениеПериодовОплаты
		И ИсключаемыеПериоды.Количество() = 0
		И НазначитьПособие
		И ДатаНачала = ДатаНачалаОплаты
		И ДатаОкончания = ДатаОкончанияОплаты Тогда
		АвтозаполнениеПериодовОплаты = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ЗначенияРеквизитовДоЗаписи()
	ИменаРеквизитов = "Организация, ФизическоеЛицо, НомерЛисткаНетрудоспособности, ИсправленныйДокумент, ПометкаУдаления";
	Если ЭтоНовый() Тогда
		Возврат ОбщегоНазначенияБЗК.ЗначенияСвойств(ЭтотОбъект, ИменаРеквизитов);
	Иначе
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
КонецФункции

Процедура ОбновитьГоловнуюОрганизацию() Экспорт
	Если ЗначениеЗаполнено(Организация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	Иначе
		ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Функция ДоступноИзменениеСпособаРасчетов()

	Если Не СотрудникДоговорник Или ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Или ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат Ложь;
	КонецЕсли;
	ДатаНачалаОплатыЗаСчетСФР = Документы.БольничныйЛист.ДатаНачалаОплатыЗаСчетСФР(ЭтотОбъект);
	Если ДатаНачалаОплаты < ДатаНачалаОплатыЗаСчетСФР Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли