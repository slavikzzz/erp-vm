#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Сотрудники.Сотрудник, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Создание нового документа СЗВ-СТАЖ.
// Параметры:
//  Организация - СправочникСсылка.Организации
//	ОтчетныйПериод - Дата
//	Проводить - Булево - (необязательный)
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * Успешно - Булево - документ успешно создан.
//     * Ссылка - ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ, Неопределено - ссылка на созданный документ.
//     * Ошибки - Массив - сообщения об ошибках.
//
Функция НовыйДокумент(Организация, ОтчетныйПериод, Проводить = Истина) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("Ошибки", Новый Массив);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не указана организация';
										|en = 'Company is not specified'"));
	    Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтчетныйПериод) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не указан отчетный период';
										|en = 'Accounting period is not specified.'"));
	    Возврат Результат;
	КонецЕсли;
	
	Если НЕ УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(Организация, ОтчетныйПериод) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Организация не отчитывается самостоятельно';
										|en = 'Company does not report independently'"));
		Возврат Результат;
	КонецЕсли;
	
	ДокументОбъект = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьДокумент();
	ДокументОбъект.Заполнить(Неопределено);
	
	ДокументСсылка = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ПолучитьСсылку();
	ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.ОтчетныйПериод = НачалоГода(ОтчетныйПериод);
	ДокументОбъект.ОкончаниеОтчетногоПериода = КонецГода(ОтчетныйПериод);
	ДокументОбъект.Год = Год(ОтчетныйПериод);
	ДокументОбъект.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная;
	
	ЗапрашиваемыеЗначения = Новый Структура("Ответственный");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗапрашиваемыеЗначения);
	ДокументОбъект.Ответственный = ЗапрашиваемыеЗначения.Ответственный;
	
	ПерсонифицированныйУчет.ЗаполнитьДанныеРуководителя(ДокументОбъект);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Организация, ДокументОбъект.Год, ДокументОбъект.Дата);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерсональныеДанные.Сотрудник,
	               |	ПерсональныеДанные.Фамилия,
	               |	ПерсональныеДанные.Имя,
	               |	ПерсональныеДанные.Отчество,
	               |	ПерсональныеДанные.СтраховойНомерПФР,
	               |	ПерсональныеДанные.СотрудникУволен
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанные";
								
	Выборка = Запрос.Выполнить().Выбрать();							
	
	СписокСотрудников = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		СписокСотрудников.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	ЗаписиОСтажеНабор = РегистрыСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьНаборЗаписей();
	ЗаписиОСтажеНабор.Отбор.ДокументОснование.Установить(ДокументСсылка);
	
	ЗаписиОСтаже = ЗаписиОСтажеНабор.ВыгрузитьКолонки();
	ЗаписиОСтаже.Колонки.Добавить("ТерриториальныеУсловияДополнительные");
	
	ПерсонифицированныйУчет.ЗаполнитьДанныеОСтажеСотрудников(
		ЗаписиОСтаже, ДокументОбъект.Организация, СписокСотрудников, ДокументОбъект.Год, ДокументСсылка);
		
	НомерСтроки = 1;
	Для Каждого ДанныеОСтаже Из ЗаписиОСтаже Цикл 
		НоваяЗапись = ЗаписиОСтажеНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОСтаже);
		НоваяЗапись.ДокументОснование = ДокументСсылка;
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.НомерСтрокиДокумента = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	Если ПолучитьФункциональнуюОпцию("ИспользуютсяРаботыСДосрочнойПенсией", Новый Структура("Организация", Организация)) Тогда 
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПерсонифицированныйУчет.СоздатьВТДосрочноеНазначениеПенсииДляСЗВ_СТАЖ(
			МенеджерВременныхТаблиц, ДокументОбъект.Организация, ДокументОбъект.Год, ЗаписиОСтаже);
			
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДосрочноеНазначениеПенсии.*
		               |ИЗ
		               |	ВТДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Подразделение,
		               |	Должность";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ДокументОбъект.ДосрочноеНазначениеПенсии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Отказ = Ложь;
	ДокументОбъект.ДополнительныеСвойства.Вставить("НеПроверятьДанныеСотрудников");
	ДокументОбъект.ДополнительныеСвойства.Вставить("Ошибки", Новый Массив);
	
	Если Проводить Тогда
		ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
		ПерсонифицированныйУчет.ПроверитьДанныеСотрудников(ДокументОбъект.Сотрудники, ДокументОбъект.ОтчетныйПериод, 
			ДокументОбъект.ОкончаниеОтчетногоПериода, ЗаписиОСтаже, Отказ, ДокументОбъект.ДополнительныеСвойства.Ошибки);
	КонецЕсли;
		
	Если Отказ Тогда
		Результат.Ошибки = ДокументОбъект.ДополнительныеСвойства.Ошибки;	
		Возврат Результат;
	КонецЕсли;
	
	РежимЗаписи = ?(Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписиОСтаже", ЗаписиОСтажеНабор);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи) 
	Исключение
		Результат.Ошибки = ДокументОбъект.ДополнительныеСвойства.Ошибки;	
		Возврат Результат;
	КонецПопытки;
	
	Результат.Ссылка = ДокументСсылка;
	Результат.Успешно = Истина;
	
	Возврат Результат;

КонецФункции

// Актуальные макеты СЗВ-СТАЖ
//
Функция ИменаМакетов(ОтчетныйПериод = '00010101') Экспорт
	
	Возврат "ПФ_MXL_ФормаСЗВ_СТАЖ,ПФ_MXL_ФормаОДВ_1";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Организация, Год, ДатаДокумента, ФизическиеЛица = Неопределено) Экспорт 
	
	ОтчетныйПериод = Дата(Год, 1, 1);
	ДатаАктуальности = Макс(ДатаДокумента, КонецГода(ОтчетныйПериод));
	Организации = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Организация, ОтчетныйПериод);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолученияСотрудников.Организация = Организации;
	ПараметрыПолученияСотрудников.НачалоПериода = ОтчетныйПериод; 
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецГода(ОтчетныйПериод); 
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, ДатаУвольнения, ВидЗанятости";
	
	КадровыйУчет.ДополнитьИменаКадровыхДанных(ПараметрыПолученияСотрудников.КадровыеДанные);
	
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	Если ФизическиеЛица <> Неопределено Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;	
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ЭтоЕФС1", ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	               |	НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, ГОД) КАК НачалоПериода,
	               |	СотрудникиОрганизации.Период КАК ОкончаниеПериода
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
				   |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Запрос.Выполнить();
	
	ПараметрыРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыРабочихМест.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыРабочихМест);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
	               |	РабочиеМестаСотрудников.Период КАК Период
	               |ПОМЕСТИТЬ ВТОтборСотрудников
	               |ИЗ
	               |	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РабочиеМестаСотрудников.Сотрудник,
	               |	&ДатаАктуальности
	               |ИЗ
	               |	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.Сотрудник,
	               |	НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, ГОД)
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |		ПО СотрудникиОрганизации.Сотрудник = РабочиеМестаСотрудников.Сотрудник
	               |ГДЕ
	               |	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.Сотрудник,
	               |	&ДатаАктуальности
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	               |		ПО СотрудникиОрганизации.Сотрудник = РабочиеМестаСотрудников.Сотрудник
	               |ГДЕ
	               |	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТОтборСотрудников");
	КадровыеДанные = "ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, ДатаУвольнения, ЯвляетсяПрокурором, ЯвляетсяВоеннослужащим, РаботаетВСтуденческомОтряде, ЯвляетсяОпекуномПенсионером, Страна, ИНН, ДатаРождения, ВидЗастрахованногоЛица";
	КадровыйУчет.ДополнитьИменаКадровыхДанных(КадровыеДанные);
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, КадровыеДанные);
	
	КодПЖИГ = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицПЖИГ();
	КодВЖИГ = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицВЖИГ();
	КодВПИГ = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицВПИГ();
	КодВКС = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицВКС();
	
	Запрос.УстановитьПараметр("КодПЖИГ", КодПЖИГ);
	Запрос.УстановитьПараметр("КодВЖИГ", КодВЖИГ);
	Запрос.УстановитьПараметр("КодВПИГ", КодВПИГ);
	Запрос.УстановитьПараметр("КодВКС", КодВКС);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) КАК ТипДокументаОснования
		|ПОМЕСТИТЬ ВТФизическиеЛицаОрганизацииРазличныеТипыДокументаОснования
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеМестаСотрудников.ФизическоеЛицо,
		|	ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазличныеТипыДокументаОснования.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КОЛИЧЕСТВО(РазличныеТипыДокументаОснования.ФизическоеЛицо) КАК КоличествоТипов
		|ПОМЕСТИТЬ ВТФизическиеЛицаОрганизацииКоличествоТиповДокументаОснования
		|ИЗ
		|	ВТФизическиеЛицаОрганизацииРазличныеТипыДокументаОснования КАК РазличныеТипыДокументаОснования
		|
		|СГРУППИРОВАТЬ ПО
		|	РазличныеТипыДокументаОснования.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК Сотрудник,
		|	МИНИМУМ(КадровыеДанныеСотрудников.ЯвляетсяПрокурором) КАК ЯвляетсяПрокурором,
		|	МИНИМУМ(КадровыеДанныеСотрудников.ЯвляетсяВоеннослужащим) КАК ЯвляетсяВоеннослужащим,
		|	МИНИМУМ(КадровыеДанныеСотрудников.ЯвляетсяОпекуномПенсионером) КАК ЯвляетсяОпекуномПенсионером,
		|	МИНИМУМ(КадровыеДанныеСотрудников.РаботаетВСтуденческомОтряде) КАК РаботаетВСтуденческомОтряде
		|ПОМЕСТИТЬ ВТДанныеДолжностейСотрудников
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.Период <> &ДатаАктуальности
		|
		|СГРУППИРОВАТЬ ПО
		|	КадровыеДанныеСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК Сотрудник,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.Фамилия) КАК Фамилия,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.Имя) КАК Имя,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.Отчество) КАК Отчество,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.СтраховойНомерПФР) КАК СтраховойНомерПФР,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.Страна) КАК Страна,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.ИНН) КАК ИНН,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.ДатаРождения) КАК ДатаРождения,
		|	МАКСИМУМ(КадровыеДанныеСотрудников.ВидЗастрахованногоЛица) КАК ВидЗастрахованногоЛица
		|ПОМЕСТИТЬ ВТЛичныеДанныеСотрудников
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.Период = &ДатаАктуальности
		|
		|СГРУППИРОВАТЬ ПО
		|	КадровыеДанныеСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛичныеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ЛичныеДанныеСотрудников.Фамилия КАК Фамилия,
		|	ЛичныеДанныеСотрудников.Имя КАК Имя,
		|	ЛичныеДанныеСотрудников.Отчество КАК Отчество,
		|	ЛичныеДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ЛичныеДанныеСотрудников.Страна КАК Гражданство,
		|	ЛичныеДанныеСотрудников.ИНН КАК ИНН,
		|	ЛичныеДанныеСотрудников.ДатаРождения КАК ДатаРождения,
		|	ВЫБОР
		|		КОГДА ЛичныеДанныеСотрудников.ВидЗастрахованногоЛица В (&КодПЖИГ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ПЖИГ)
		|		КОГДА ЛичныеДанныеСотрудников.ВидЗастрахованногоЛица В (&КодВЖИГ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВЖИГ)
		|		КОГДА ЛичныеДанныеСотрудников.ВидЗастрахованногоЛица В (&КодВПИГ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВПИГ)
		|		КОГДА ЛичныеДанныеСотрудников.ВидЗастрахованногоЛица В (&КодВКС)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВКС)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ГРФ)
		|	КОНЕЦ КАК КодКатегории,
		|	ДанныеДолжностейСотрудников.ЯвляетсяПрокурором КАК ЯвляетсяПрокурором,
		|	ДанныеДолжностейСотрудников.ЯвляетсяВоеннослужащим КАК ЯвляетсяВоеннослужащим,
		|	ДанныеДолжностейСотрудников.ЯвляетсяОпекуномПенсионером
		|		И КоличествоТиповДокументаОснования.КоличествоТипов = 1 КАК ЯвляетсяОпекуномПенсионером,
		|	ДанныеДолжностейСотрудников.РаботаетВСтуденческомОтряде КАК РаботаетВСтуденческомОтряде
		|ПОМЕСТИТЬ ВТДанныеСотрудниковОрганизации
		|ИЗ
		|	ВТЛичныеДанныеСотрудников КАК ЛичныеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДолжностейСотрудников КАК ДанныеДолжностейСотрудников
		|		ПО ЛичныеДанныеСотрудников.Сотрудник = ДанныеДолжностейСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаОрганизацииКоличествоТиповДокументаОснования КАК КоличествоТиповДокументаОснования
		|		ПО ЛичныеДанныеСотрудников.Сотрудник = КоличествоТиповДокументаОснования.ФизическоеЛицо";
				   
	Запрос.Выполнить();
	
	Если ФизическиеЛица <> Неопределено Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		               |	&ДатаАктуальности КАК Период
		               |ПОМЕСТИТЬ ВТФизическиеЛица
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		               |		ПО ФизическиеЛица.Ссылка = СотрудникиОрганизации.ФизическоеЛицо
		               |			И (ФизическиеЛица.Ссылка В (&ФизическиеЛица))
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
		               |	И СотрудникиОрганизации.ФизическоеЛицо ЕСТЬ NULL";
		
		Запрос.Выполнить();
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, "ВТФизическиеЛица");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество, СтраховойНомерПФР, Страна, ИНН, ДатаРождения, ВидЗастрахованногоЛица");
		
		ИменаВТ = Новый Массив;
		ИменаВТ.Добавить("ВТФизическиеЛица");
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		
	Иначе
		ПерсонифицированныйУчет.СоздатьВТКадровыеДанныеФизическихЛицДоНачалаЭксплуатации(МенеджерВременныхТаблиц, Организации, ОтчетныйПериод, КонецГода(ОтчетныйПериод));
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(СотрудникиОрганизации.ДатаУвольнения) КАК ДатаУвольнения
	               |ПОМЕСТИТЬ ВТУволенныеСотрудники
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК РаботающиеСотрудники
	               |		ПО СотрудникиОрганизации.ФизическоеЛицо = РаботающиеСотрудники.ФизическоеЛицо
	               |			И (РаботающиеСотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	               |			И (НЕ РаботающиеСотрудники.ВидЗанятости ЕСТЬ NULL)
	               |ГДЕ
	               |	РаботающиеСотрудники.ФизическоеЛицо ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиОрганизации.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(СотрудникиОрганизации.Фамилия, 1, 10) = ""-""
	               |			ТОГДА """"
	               |		ИНАЧЕ СотрудникиОрганизации.Фамилия
	               |	КОНЕЦ КАК Фамилия,
	               |	СотрудникиОрганизации.Имя КАК Имя,
	               |	СотрудникиОрганизации.Отчество КАК Отчество,
	               |	СотрудникиОрганизации.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	СотрудникиОрганизации.Гражданство КАК Гражданство,
	               |	СотрудникиОрганизации.ИНН КАК ИНН,
	               |	СотрудникиОрганизации.ДатаРождения КАК ДатаРождения,
	               |	СотрудникиОрганизации.КодКатегории КАК КодКатегории,
	               |	ЕСТЬNULL(УволенныеСотрудники.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	               |		И КОНЕЦПЕРИОДА(УволенныеСотрудники.ДатаУвольнения, ДЕНЬ) = &КонецГода КАК СотрудникУволен,
	               |	СотрудникиОрганизации.ЯвляетсяПрокурором КАК ЯвляетсяПрокурором,
	               |	СотрудникиОрганизации.ЯвляетсяВоеннослужащим КАК ЯвляетсяВоеннослужащим,
	               |	СотрудникиОрганизации.ЯвляетсяОпекуномПенсионером КАК ЯвляетсяОпекуномПенсионером,
	               |	СотрудникиОрганизации.РаботаетВСтуденческомОтряде КАК РаботаетВСтуденческомОтряде
	               |ПОМЕСТИТЬ ВТПерсональныеДанныеСотрудников
	               |ИЗ
	               |	ВТДанныеСотрудниковОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТУволенныеСотрудники КАК УволенныеСотрудники
	               |		ПО СотрудникиОрганизации.Сотрудник = УволенныеСотрудники.ФизическоеЛицо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(КадровыеДанныеФизическихЛиц.Фамилия, 1, 10) = ""-""
	               |			ТОГДА """"
	               |		ИНАЧЕ КадровыеДанныеФизическихЛиц.Фамилия
	               |	КОНЕЦ,
	               |	КадровыеДанныеФизическихЛиц.Имя,
	               |	КадровыеДанныеФизическихЛиц.Отчество,
	               |	КадровыеДанныеФизическихЛиц.СтраховойНомерПФР,
	               |	КадровыеДанныеФизическихЛиц.Страна,
	               |	КадровыеДанныеФизическихЛиц.ИНН,
	               |	КадровыеДанныеФизическихЛиц.ДатаРождения,
	               |	ВЫБОР
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодПЖИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ПЖИГ)
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодВЖИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВЖИГ)
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодВПИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВПИГ)
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодВКС)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВКС)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ГРФ)
	               |	КОНЕЦ,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ
	               |ИЗ
	               |	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц";
				   
	Если ФизическиеЛица = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерсональныеДанныеСотрудников", "ВТПерсональныеДанныеСотрудниковПредварительно");			   
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Если ФизическиеЛица <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, ОтчетныйПериод, КонецГода(ОтчетныйПериод), "МЕСЯЦ"); 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ПерсональныеДанныеСотрудников.Сотрудник КАК ФизическоеЛицо,
	               |	Периоды.Период
	               |ПОМЕСТИТЬ ВТПериодыФизическихЛиц
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудниковПредварительно КАК ПерсональныеДанныеСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	               |		ПО (ИСТИНА)";
	
	Запрос.Выполнить();
	
	УчетСтраховыхВзносов.СформироватьВТДанныеОПравахНаСтрахование(МенеджерВременныхТаблиц, "ВТПериодыФизическихЛиц", Истина);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеОПравахНаСтрахование.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТЗастрахованныеФизическиеЛица
	               |ИЗ
	               |	ВТДанныеОПравахНаСтрахование КАК ДанныеОПравахНаСтрахование
	               |ГДЕ
	               |	ДанныеОПравахНаСтрахование.ЗастрахованПФР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПерсональныеДанныеСотрудников.Сотрудник КАК Сотрудник,
	               |	ПерсональныеДанныеСотрудников.Фамилия КАК Фамилия,
	               |	ПерсональныеДанныеСотрудников.Имя КАК Имя,
	               |	ПерсональныеДанныеСотрудников.Отчество КАК Отчество,
	               |	ПерсональныеДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	ПерсональныеДанныеСотрудников.Гражданство КАК Гражданство,
	               |	ПерсональныеДанныеСотрудников.ИНН КАК ИНН,
	               |	ПерсональныеДанныеСотрудников.ДатаРождения КАК ДатаРождения,
	               |	ПерсональныеДанныеСотрудников.КодКатегории КАК КодКатегории,
	               |	ПерсональныеДанныеСотрудников.СотрудникУволен КАК СотрудникУволен
	               |ПОМЕСТИТЬ ВТПерсональныеДанныеСотрудников
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудниковПредварительно КАК ПерсональныеДанныеСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗастрахованныеФизическиеЛица КАК ЗастрахованныеФизическиеЛица
	               |		ПО ПерсональныеДанныеСотрудников.Сотрудник = ЗастрахованныеФизическиеЛица.ФизическоеЛицо
	               |			И (НЕ ПерсональныеДанныеСотрудников.ЯвляетсяПрокурором)
	               |			И (НЕ ПерсональныеДанныеСотрудников.ЯвляетсяВоеннослужащим)
	               |			И (НЕ ПерсональныеДанныеСотрудников.ЯвляетсяОпекуномПенсионером)
	               |			И (НЕ ПерсональныеДанныеСотрудников.РаботаетВСтуденческомОтряде
	               |				ИЛИ &ЭтоЕФС1)";
				   
	Запрос.Выполнить();			   
	
КонецПроцедуры

Процедура СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, Год, Сотрудники, УчитываемыеДокументы) Экспорт 
	
	СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	СписокДокументов = ?(ТипЗнч(УчитываемыеДокументы) = Тип("Массив"), УчитываемыеДокументы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчитываемыеДокументы));
	
	ПараметрыДляСоздатьВТДанныеСтажаПФР = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТДанныеСтажаПФР();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ВыделятьСтажПоДоговорамГПХ = Истина;	
	
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
	ПараметрыДляСоздатьВТДанныеСтажаПФР.УчитываемыеДокументы = СписокДокументов;
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокСотрудников;
	
	ОтчетныйПериод = ?(ЗначениеЗаполнено(Год), Дата(Год, 1, 1), Дата(1, 1, 1));
	
	Организации = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Организация, ОтчетныйПериод);
	
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, 
		Организации, 
		ОтчетныйПериод, 
		ПараметрыДляСоздатьВТДанныеСтажаПФР,
		ПараметрыОтбора,
		КонецГода(ОтчетныйПериод));
		
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаСотрудников(МенеджерВременныхТаблиц, Организации, ОтчетныйПериод);
	
КонецПроцедуры

Функция ИмяФайла(Организация, Дата, УИД = Неопределено, Год = 0) Экспорт
	
	Если ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год) Тогда 
		Возврат ПерсонифицированныйУчет.ИмяФайлаЕФС1(Организация, Дата, УИД);
	КонецЕсли;
	
	Если УИД = Неопределено Тогда
		УИД = Новый УникальныйИдентификатор;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрационныйНомерПФР, КодОрганаПФР");
	
	Возврат "ПФР"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.РегистрационныйНомерПФР), Параметры.РегистрационныйНомерПФР, "")
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодОрганаПФР),СтрЗаменить(Параметры.КодОрганаПФР, "-", ""),"")
			+ "_СЗВ-СТАЖ"
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + УИД;
			
КонецФункции	

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	
	ТекстФайла = СформироватьВыходнойФайл(Объект.Ссылка);
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка, Объект.ИмяФайлаДляПФР, ТекстФайла, , "UTF-8", Ложь, Ложь);
	
КонецПроцедуры

Функция СформироватьВыходнойФайл(Ссылка)
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	ВыборкаПоШапкеДокумента = ПерсонифицированныйУчет.ЗапросПоШапкеДляПечатиОДВ_1(СписокДокументов, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымДНП = ПерсонифицированныйУчет.ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(СписокДокументов, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ").Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Год > 2022 Тогда 
		Возврат СформироватьВыходнойФайлЕФС1(СписокДокументов, ВыборкаПоШапкеДокумента, ВыборкаПоДаннымДНП);
	КонецЕсли;
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР_2021XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматОДВ_1 = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ОДВ_1");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	
	ФорматОДВ_1.Удалить("Страховая");
	ФорматОДВ_1.Удалить("Накопительная");
	ФорматОДВ_1.Удалить("ТарифСВ");
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/СЗВ-СТАЖ/2020-08-10");
	Атрибуты.Вставить("xmlns:ВС2", "http://пф.рф/ВС/типы/2017-10-23");
	Атрибуты.Вставить("xmlns:АФ5", "http://пф.рф/АФ/2018-12-07");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:ИС5", "http://пф.рф/ВС/ИС/2020-08-10");
	
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ5__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ5__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ5__ПрограммаПодготовки.Значение = ВРег(РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = 0;	
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаименованиеКраткое = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное));
	ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(НаименованиеКраткое);
	НаборЗаписейСтрахователь.ИС5__Наименование = НаименованиеКраткое;
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = 0;
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;	
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Если ВыборкаПоДаннымДНП.Количество() > 0 Тогда 
		УзелСпискаОснованияДНП = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ОснованияДНП", "");
		ФорматОснование = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОснованияДНП.Основание.Значение);
		ФорматОснованияДНП.Удалить("Основание");
		ФорматОУТ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОснование.ОУТ);
		ФорматОснование.Удалить("ОУТ");
		Пока ВыборкаПоДаннымДНП.Следующий() Цикл 
			НаборЗаписейОснование = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОснование);
			НаборЗаписейОснование.ИС5__Подразделение.Значение =ВРег(ВыборкаПоДаннымДНП.НаименованиеПодразделения);
			НаборЗаписейОснование.ИС5__ПрофессияДолжность.Значение = ВРег(ВыборкаПоДаннымДНП.НаименованиеДолжности);
			НаборЗаписейОснование.ИС5__КоличествоШтат.Значение = ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			НаборЗаписейОснование.ИС5__КоличествоФакт.Значение = ВыборкаПоДаннымДНП.КоличествоРаботающих;
			НаборЗаписейОснование.ИС5__Описание.Значение = ВРег(ВыборкаПоДаннымДНП.ХарактерВыполняемыхРабот);
			НаборЗаписейОснование.ИС5__Документы.Значение = ВРег(ВыборкаПоДаннымДНП.ПервичныеДокументы);
			УзелОснование = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСпискаОснованияДНП, "Основание", "");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелОснование, НаборЗаписейОснование);
			ПерсонифицированныйУчет.ВывестиДанныеОУТ(ВыборкаПоДаннымДНП, УзелОснование, ФорматОУТ)
		КонецЦикла;
		ФорматОснованияДНП.ИС5__ВсегоШтат.Значение = ВыборкаПоШапкеДокумента.ВсегоРабочихМестДНП;
		ФорматОснованияДНП.ИС5__ВсегоФакт.Значение = ВыборкаПоШапкеДокумента.ВсегоРаботающихДНП;
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСпискаОснованияДНП, ФорматОснованияДНП);
	КонецЕсли;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.ФИО.Значение;
	НаборЗаписейФИО.УТ2__Фамилия = ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя);
	НаборЗаписейФИО.УТ2__Имя = ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя);
	НаборЗаписейФИО.УТ2__Отчество = ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, "УТ2__Фамилия");
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, "УТ2__Имя");
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, "УТ2__Отчество");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ФорматСЗВ_СТАЖ = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_СТАЖ");
	
	ФорматЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_СТАЖ.ЗЛ.Значение);
	ФорматСЗВ_СТАЖ.Удалить("ЗЛ");
	НаборЗаписейСВ = Новый Структура("СВ", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_СТАЖ.СВ));
	ФорматСЗВ_СТАЖ.Удалить("СВ");
	
	ВыборкаПоРаботникам = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗапросПоСотрудникамДляПечати(СписокДокументов).Выбрать();
	
	// Данные формы и страхователя
	НаборЗаписейСтрахователь = ФорматСЗВ_СТАЖ.Страхователь.Значение;
	НаборЗаписейСтрахователь.ИС5__Наименование = НаименованиеКраткое;
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_СТАЖ.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_СТАЖ.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 0;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Дополняющая Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 1;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 2;	
	КонецЕсли;	
	НаборЗаписейОтчетныйПериод = ФорматСЗВ_СТАЖ.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = 0;
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-СТАЖ", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_СТАЖ);
	
	ФорматСтажевыйПериод = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.СтажевыйПериод.Значение);
	ФорматЗЛ.Удалить("СтажевыйПериод");
	НаборЗаписейДатаУвольнения = Новый Структура("ДатаУвольнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.ДатаУвольнения));
	ФорматЗЛ.Удалить("ДатаУвольнения");
	
	НаборЗаписейЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ);
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		// Данные по физлицу
		Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
		
		НаборЗаписейЗЛ.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейЗЛ.ФИО.Значение;
		НаборЗаписейФИО.УТ2__Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.УТ2__Имя = ВРег(Имя);
		НаборЗаписейФИО.УТ2__Отчество = ВРег(Отчество);
		
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.ФИО, "УТ2__Фамилия");
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.ФИО, "УТ2__Имя");
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.ФИО, "УТ2__Отчество");
		
		УзелСотрудника = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ЗЛ", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейЗЛ);
		
		ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам);
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.СотрудникУволен) Тогда
			НаборЗаписейДатаУвольнения.ДатаУвольнения.Значение = Формат(Дата(ВыборкаПоШапкеДокумента.Год, 12, 31), "ДФ=yyyy-MM-dd");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейДатаУвольнения);
		КонецЕсли;
		
	КонецЦикла;
			
	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда
		НаборЗаписейСВ.СВ.Значение.НачисленыНаОПС = ?(ВыборкаПоШапкеДокумента.НачисленыВзносыНаОПС, "1", "0");
		НаборЗаписейСВ.СВ.Значение.НачисленыПоДТ = ?(ВыборкаПоШапкеДокумента.НачисленыВзносыПоДТ, "1", "0");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейСВ);
	КонецЕсли;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) Экспорт	
	
	ФорматСтажевыйПериод.ИС5__ЛьготныйСтаж.НеВыводитьВФайл = Истина;
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПерсонифицированныйУчет.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
			
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
			
			ФорматСтажевыйПериод.ИС5__ЛьготныйСтаж.НеВыводитьВФайл = Истина;

			УзелСтажевыйПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС5__Период").Строки.Найти("УТ2__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС5__Период").Строки.Найти("УТ2__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			ФорматЛьготныйСтаж = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСтажевыйПериод.ИС5__ЛьготныйСтаж.Значение);
			ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию);
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
				// В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				ФорматЛьготныйСтаж = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСтажевыйПериод.ИС5__ЛьготныйСтаж.Значение);
				ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры	

Процедура ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию)
	
	ВыводитьЛьготныйСтаж = Ложь;
	
	НаборЗаписейЛьготныйСтаж = ФорматЛьготныйСтаж;
	НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Ложь;
	
	// ДопСведенияИС
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
		НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
		ВыводитьЛьготныйСтаж = Истина;
	ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
		НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
		ВыводитьЛьготныйСтаж = Истина;
	Иначе
		НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.НеВыводитьВФайл = Истина;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
		И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
		
		НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Истина;
		
		Если ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИ 
			И ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.СЕЛО Тогда
			НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС5__ТУ.Значение;
			НаборЗаписейТерриториальныеУсловия.ИС5__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС5__ТУ);
			НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Ложь;	
		КонецЕсли;	
		
	Иначе
		НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС5__ТУ.Значение;
		// Территориальные условия
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
			НаборЗаписейТерриториальныеУсловия.ИС5__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС5__ТУ);
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Истина;	
		КонецЕсли;	
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС5__Основание);
		
		// Особые условия труда
		НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.Значение;
		
		НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Ложь;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
			НаборЗаписейОсобыеУсловияТруда.ИС5__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
			НаборЗаписейОсобыеУсловияТруда.ИС5__ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
			ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ИС5__Код);
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Истина;
		КонецЕсли;	
		
		// Исчисляемый стаж
		НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС5__ИС.Значение;
		НаборЗаписейИсчисляемыйСтаж.ИС5__Основание.НеВыводитьВФайл = Ложь;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод) Тогда
			НаборЗаписейИсчисляемыйСтаж.ИС5__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
		Иначе
			НаборЗаписейИсчисляемыйСтаж.ИС5__Основание.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Ложь;
		НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
		НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
			НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Истина;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				СписокОтсутствий = ПерсонифицированныйУчет.СписокОтсутствийИсключающихКалендарнуюВыработку();
				Если СписокОтсутствий.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
					НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
				КонецЕсли;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
				НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
			Иначе
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Истина;		
		КонецЕсли;	
		
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС5__Основание.Значение);
		
		// Выслуга лет
		НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.Значение;
		НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Ложь;	
		НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
		НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
			
			НаборЗаписейВыслугаЛет.ИС5__Основание.Значение = ВРег(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейВыслугаЛет);
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			Иначе
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Истина;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ВыводитьЛьготныйСтаж Тогда
		УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС5__ЛьготныйСтаж","");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьВыходнойФайлЕФС1(СписокДокументов, ВыборкаПоШапкеДокумента, ВыборкаПоДаннымДНП)
	
	РазделыЕФС1 = ПерсонифицированныйУчет.СписокРазделовЕФС1();
	РазделыЕФС1.СЗВСТАЖ = Истина;
	
	Если ВыборкаПоДаннымДНП.Количество() > 0 Тогда 
		РазделыЕФС1.ДНП = Истина;
	КонецЕсли;
	
	ВыборкаПоРаботникам = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗапросПоСотрудникамДляПечати(СписокДокументов).Выбрать();
	
	Возврат ПерсонифицированныйУчет.СформироватьВыходнойФайлЕФС1(РазделыЕФС1, ВыборкаПоШапкеДокумента, , ВыборкаПоРаботникам, ВыборкаПоДаннымДНП);
	
КонецФункции

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
	ОписаниеВыгруженногоФайла.ПроверятьПОПД = Истина;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = ПерсонифицированныйУчет.ИдентификаторПечатнойФормы_ФормаЕФС_1();
	КомандаПечати.Представление = НСтр("ru = 'ЕФС-1';
										|en = 'Unified Information Form-1'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИсключитьПередачуВКабинетСотрудника");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = ПерсонифицированныйУчет.ИдентификаторПечатнойФормыФормаСЗВСТАЖ();
	КомандаПечати.Представление = НСтр("ru = 'СЗВ-СТАЖ';
										|en = 'SZV-STAZH'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИсключитьПередачуВКабинетСотрудника");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаОДВ_1";
	КомандаПечати.Представление = НСтр("ru = 'ОДВ-1';
										|en = 'ODV-1'");
	КомандаПечати.Порядок = 30;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ПерсонифицированныйУчет.ИдентификаторПечатнойФормыФормаСЗВСТАЖ()) Тогда
		СписокСотрудников = Неопределено;
		Если ПараметрыПечати <> Неопределено Тогда
			ПараметрыПечати.Свойство("СписокСотрудников", СписокСотрудников);
		КонецЕсли;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			ПерсонифицированныйУчет.ИдентификаторПечатнойФормыФормаСЗВСТАЖ(), 
			"СЗВ-СТАЖ", 
			ПечатнаяФормаСЗВ_СТАЖ(МассивОбъектов, ОбъектыПечати, СписокСотрудников));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаОДВ_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаОДВ_1", 
			"ОДВ-1", 
			ПерсонифицированныйУчет.ПечатнаяФормаОДВ_1(МассивОбъектов, ОбъектыПечати, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ПерсонифицированныйУчет.ИдентификаторПечатнойФормы_ФормаЕФС_1()) Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаЕФС_1", 
			"ЕФС-1", 
			ПечатнаяФормаЕФС_1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаСЗВ_СТАЖ(МассивОбъектов, ОбъектыПечати, СписокСотрудников = Неопределено)
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(МассивОбъектов, СписокСотрудников).Выбрать();
	
	Возврат ПерсонифицированныйУчет.ПечатнаяФормаСЗВСТАЖПоДаннымДокументов(ОбъектыПечати, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам, СписокСотрудников <> Неопределено);
	
КонецФункции

Функция ПечатнаяФормаЕФС_1(МассивОбъектов, ОбъектыПечати)
	
	ВыборкаПоШапкеДокумента = ПерсонифицированныйУчет.ЗапросПоШапкеДляПечатиОДВ_1(МассивОбъектов, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ").Выбрать();
	ВыборкаПоДаннымДНП = ПерсонифицированныйУчет.ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивОбъектов, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ").Выбрать();
	ВыборкаПоРаботникам = Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗапросПоСотрудникамДляПечати(МассивОбъектов).Выбрать();
	
	Возврат ПерсонифицированныйУчет.ПечатьПодраздела_1_2_ФормыЕФС_1(ОбъектыПечати, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам, ВыборкаПоДаннымДНП);
	
КонецФункции

Функция ЗапросПоШапкеДляПечати(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка КАК Ссылка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Год,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОтчетныйПериод,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОкончаниеОтчетногоПериода,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ТипСведений,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Руководитель КАК Руководитель,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыНаОПС,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыПоДТ,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация = СведенияОбОрганизациях.Организация
	|			И СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата = СведенияОбОрганизациях.Период
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.Год КАК Год,
	|	ДанныеДокументов.ОтчетныйПериод,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ЕСТЬNULL(ВТФИОПоследние.ФИОПолные, """") КАК Руководитель,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА ДанныеДокументов.НачисленыВзносыНаОПС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленыВзносыНаОПС,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА ДанныеДокументов.НачисленыВзносыПоДТ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленыВзносыПоДТ,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА НЕ ДанныеДокументов.НачисленыВзносыНаОПС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеНачисленыВзносыНаОПС,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА НЕ ДанныеДокументов.НачисленыВзносыПоДТ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеНачисленыВзносыПоДТ,
	|	ДанныеДокументов.ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год УБЫВ,
	|	ТипСведений,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникамДляПечати(МассивСсылок, СписокСотрудников = Неопределено, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Если Не ЗарплатаКадры.ВТСуществует(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДокумента") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.НомерСтроки КАК НомерСтроки,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	Сотрудники.Фамилия КАК Фамилия,
		|	Сотрудники.Имя КАК Имя,
		|	Сотрудники.Отчество КАК Отчество,
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.ДатаРождения КАК ДатаРождения,
		|	Сотрудники.ИНН КАК ИНН,
		|	Сотрудники.КодКатегории КАК КодКатегории,
		|	ВЫБОР
		|		КОГДА Сотрудники.Гражданство = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА ""000""
		|		ИНАЧЕ Сотрудники.Гражданство.Код
		|	КОНЕЦ КАК Гражданство,
		|	ВЫБОР
		|		КОГДА Сотрудники.СотрудникУволен
		|			ТОГДА ""Х""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СотрудникУволен,
		|	Сотрудники.Ссылка.Год КАК Год,
		|	Сотрудники.Ссылка.ТипСведений КАК ТипСведений
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСсылок)";
		
		Если СписокСотрудников <> Неопределено Тогда 
			Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
			Запрос.Текст = Запрос.Текст + " И Сотрудники.Сотрудник В(&СписокСотрудников)";
		КонецЕсли;
		
		Запрос.Выполнить();
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(Запрос.МенеджерВременныхТаблиц, "ВТЗаписиОСтаже") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ДокументОснование КАК ДокументОснование,
		|	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
		|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
		|	ЗаписиОСтаже.НомерРабочегоМеста КАК НомерРабочегоМеста,
		|	ЗаписиОСтаже.КлассПодклассУсловийТруда КАК КлассПодклассУсловийТруда,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.Организация КАК Организация
		|ПОМЕСТИТЬ ВТЗаписиОСтаже
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ЗаписиОСтаже
		|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
		|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
		|		ПО СотрудникиДокумента.Ссылка = СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ЗаписиОСтаже.НомерРабочегоМеста КАК НомерРабочегоМеста,
	|	ЗаписиОСтаже.КлассПодклассУсловийТруда КАК КлассПодклассУсловийТруда,
	|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СотрудникиДокумента.Фамилия КАК Фамилия,
	|	СотрудникиДокумента.Имя КАК Имя,
	|	СотрудникиДокумента.Отчество КАК Отчество,
	|	СотрудникиДокумента.СотрудникУволен КАК СотрудникУволен,
	|	СотрудникиДокумента.Ссылка КАК Ссылка,
	|	СотрудникиДокумента.ДатаРождения КАК ДатаРождения,
	|	СотрудникиДокумента.ИНН КАК ИНН,
	|	СотрудникиДокумента.КодКатегории КАК КодКатегорииЗЛ,
	|	СотрудникиДокумента.Гражданство КАК Гражданство,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиДокумента.Год УБЫВ,
	|	СотрудникиДокумента.ТипСведений,
	|	Ссылка,
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли