///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если СтрСравнить(ВидФормы, "ФормаОбъекта") = 0 Тогда
		Значения = ОбщегоНазначенияБЗК.ЗначенияСвойств(Параметры, "Ключ, Основание, ГоловнаяОрганизация, ФизическоеЛицо");
		Если ЗначениеЗаполнено(Значения.Ключ) Тогда
			Возврат;
		КонецЕсли;
		Основание           = Значения.Основание;
		ГоловнаяОрганизация = Значения.ГоловнаяОрганизация;
		ФизическоеЛицо      = Значения.ФизическоеЛицо;
		Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Если ТипЗнч(Значения.Основание) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание, "Организация, ФизическоеЛицо");
				ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеквизитыОснования.Организация);
				ФизическоеЛицо      = РеквизитыОснования.ФизическоеЛицо;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сведения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СведенияОЗастрахованномЛицеФСС КАК Сведения
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
			|		ПО Сведения.Ссылка = ЗастрахованныеЛицаСЭДО.ПоследниеСведения
			|			И Сведения.Ссылка <> ЗастрахованныеЛицаСЭДО.ОтправленныеСведения
			|ГДЕ
			|	Сведения.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И Сведения.ФизическоеЛицо = &ФизическоеЛицо
			|	И НЕ Сведения.ПометкаУдаления
			|	И Сведения.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
			|	И НЕ ЗастрахованныеЛицаСЭДО.ПоследниеСведения ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сведения.Дата УБЫВ";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтандартнаяОбработка = Ложь;
				Параметры.Вставить("Ключ", Выборка.Ссылка);
				ВыбраннаяФорма = "Документ.СведенияОЗастрахованномЛицеФСС.Форма.ФормаДокумента";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивСсылок, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//  Параметры                  - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
//  Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, ОбъектМетаданных());
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Страхователь)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТекстXML(Документ) Экспорт
	МенеджерXML = Обработки.ПостроительXML.Создать();
	МенеджерXML.ФорматДат = "ДФ=yyyy-MM-dd";
	
	// Сообщение 84: Запрос статуса выплаты пособия по временной нетрудоспособности и материнству.
	КореньXML = МенеджерXML.ДобавитьУзел(МенеджерXML.ДеревоXML, "paymentStatusRequest");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "http://www.fss.ru/integration/types/pvso/paymentstate/v01");
	МенеджерXML.ДобавитьУзел(КореньXML, "resiveId", Документ.ИдентификаторСтрокиРеестра);
	
	МенеджерXML.НачатьЗаписьВСтрокуXML(Истина);
	СтрокаXML = МенеджерXML.СтрокаXML();
	Возврат СтрокаXML;
КонецФункции

Функция ТипСообщения() Экспорт
	Возврат 84;
КонецФункции

Процедура ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки) Экспорт
	
	ИменаРеквизитовСтроки = "Ссылка, Номер, Дата, ФизическоеЛицо, Страхователь";
	ИменаРеквизитов = "Ссылка, Номер, Дата, ДатаОтправки, ФизическоеЛицо, Страхователь, ХранилищеXML, ПометкаУдаления, Проведен";
	Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Документ = КлючИЗначение.Значение;
		// Добавление строки отправки и заполнение представления.
		СтрокаОтправки = ТаблицаОтправки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправки, Документ, ИменаРеквизитовСтроки);
		СтрокаОтправки.Организация  = Документ.Страхователь;
		СтрокаОтправки.ТипСообщения = ТипСообщения();
		СтрокаОтправки.ТекстXML     = Документ.ХранилищеXML.Получить();
		СтрокаОтправки.Отправить    = Ложь;
		СтрокаОтправки.ШаблонОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось отправить Запрос статусов выплаты пособия %1:%2';
				|en = 'Не удалось отправить Запрос статусов выплаты пособия %1:%2'"),
			СтрокаОтправки.ФизическоеЛицо,
			"%1");
		// Проверки и обновление вторичных данных документа перед отправкой.
		Если Документ.ПометкаУдаления Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиУдален();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ помечен на удаление';
											|en = 'The document is marked for deletion'");
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
			Если НачалоДня(Документ.ДатаОтправки) <= ТекущаяДатаСеанса() Тогда
				Текст = НСтр("ru = 'Документ уже отправлен %1';
							|en = 'The document is already sent %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДЛФ=D"));
			Иначе
				Текст = НСтр("ru = 'Документ уже отправлен в %1';
							|en = 'The document is already sent to %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДФ=HH:mm"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Не Документ.Проведен Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ не проведен';
											|en = 'Document is not posted'");
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
			ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, "");
			Если Не ДокументОбъект.ОтключитьПроверкиПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Обновление вторичных данных документа если требуется.
		ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанные();
		СтрокаОтправки.Отправить = Истина;
		Если ЕстьИзменения Тогда
			Попытка
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПроведен();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаполнитьЗначенияСвойств(СтрокаОтправки, ДокументОбъект, ИменаРеквизитовСтроки);
				СтрокаОтправки.ТекстXML = ДокументОбъект.ХранилищеXML.Получить();
			Исключение
				СтрокаОтправки.Отправить = Ложь;
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
				СтрокаОтправки.ЗначениеРасшифровки = Документ.Ссылка;
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки) Экспорт
	// Действие не требуется.
КонецПроцедуры

// См. СЭДОФСС.ЗарегистрироватьНепосредственныйРезультатОтправкиДокумента.
Процедура ЗарегистрироватьРезультатОтправки(РезультатОтправки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// Исходящий документ.
	ДокументОбъект = РезультатОтправки.Ссылка.ПолучитьОбъект();
	ДокументОбъект.ДатаОтправки           = РезультатОтправки.ДатаОтправки;
	ДокументОбъект.ИдентификаторСообщения = РезультатОтправки.ИдентификаторСообщения;
	ДокументОбъект.Страхователь           = РезультатОтправки.Страхователь;
	ДокументОбъект.ГоловнаяОрганизация    = РезультатОтправки.ГоловнаяОрганизация;
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
	
	Если ЗначениеЗаполнено(РезультатОтправки.ИдентификаторСообщения) Тогда
		// Транспортный регистр.
		Регистр = РегистрыСведений.РегистрацииЗапросовСтатусовВыплатыПособий;
		Набор = Регистр.НачатьЗаписьНабора(РезультатОтправки.ИдентификаторСообщения);
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
		Иначе
			Запись = Набор[0];
		КонецЕсли;
		Регистр.ЗаполнитьПоДокументу(Запись, ДокументОбъект);
		Запись.ОтправленОператору          = РезультатОтправки.ОтправленоОператору;
		Запись.ДоставкаУспех               = РезультатОтправки.ДоставленоФонду;
		Запись.ДатаОтправкиОператору       = РезультатОтправки.ДатаОтправкиОператору;
		Запись.ДоставкаДата                = РезультатОтправки.ДатаОтправкиФонду;
		Запись.ДоставкаТекстОшибки         = РезультатОтправки.ТекстОшибки;
		Запись.ИдентификаторСообщения      = РезультатОтправки.ИдентификаторСообщения;
		Запись.ДоставкаИдентификаторПакета = РезультатОтправки.ИдентификаторПакета;
		Регистр.ЗаполнитьСостояниеРегистрации(Запись);
		Регистр.ЗавершитьЗаписьНабора(Набор);
	КонецЕсли;
	
	// Обновление форм.
	РезультатОтправки.Измененные.Добавить(ДокументОбъект.Ссылка);
КонецПроцедуры

// См. СЭДОФСС.ЗагрузитьРезультатДоставкиСообщенияСЭДО.
Процедура ЗагрузитьРезультатДоставкиСообщения84(Страхователь, Сообщение, Результат) Экспорт
	// Отметка результатов доставки в транспортном регистре.
	Регистр = РегистрыСведений.РегистрацииЗапросовСтатусовВыплатыПособий;
	Набор = Регистр.НачатьЗаписьНабора(Сообщение.Идентификатор);
	Если Набор = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось прочитать набор записей транспортного регистра по сообщению 84 ""%1"". Повторите загрузку сообщения позже. Подробности в журнале регистрации.';
				|en = 'Не удалось прочитать набор записей транспортного регистра по сообщению 84 ""%1"". Повторите загрузку сообщения позже. Подробности в журнале регистрации.'"),
			Сообщение.Идентификатор);
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
	ИначеЕсли Набор.Количество() = 0 Тогда
		Регистр.ОтменитьЗаписьНабора(Набор);
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По страхователю ""%1"" не найдена %2 с идентификатором сообщения ""%3""';
				|en = 'По страхователю ""%1"" не найдена %2 с идентификатором сообщения ""%3""'"),
			Страхователь,
			Метаданные.РегистрыСведений.РегистрацииЗапросовСтатусовВыплатыПособий.ПредставлениеЗаписи,
			Сообщение.Идентификатор);
		СЭДОФСС.ОшибкаОбработки(Результат, ТекстОшибки);
	Иначе
		Запись = Набор[0];
		Запись.ДоставкаУспех       = Сообщение.ДоставленоФонду;
		Запись.ДоставкаДата        = Сообщение.ДатаОтправкиФонду;
		Запись.ДоставкаТекстОшибки = Сообщение.ТекстОшибки;
		Регистр.ЗаполнитьСостояниеРегистрации(Запись);
		Регистр.ЗавершитьЗаписьНабора(Набор);
		// Отметка для БРО и других потребителей что сообщение обработано.
		Результат.Обработано = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ЗаголовокФормыОтправкиСведенийВФСС() Экспорт
	Возврат НСтр("ru = 'Отправка запросов статусов выплаты пособий';
				|en = 'Отправка запросов статусов выплаты пособий'");
КонецФункции

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты());
КонецФункции

// Определяет по данным документа признак фиксации.
//
// Параметры:
//   Документ - ДокументОбъект.СведенияОЗастрахованномЛицеФСС, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Не Документ.ПометкаУдаления И ЗначениеЗаполнено(Документ.ДатаОтправки);
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ОбъектМетаданных()
	Возврат Метаданные.Документы.ЗапросСтатусовВыплатыПособия;
КонецФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ОтветНаЗапрос";
	Группа.ИмяГруппы           = "ОтветНаЗапрос";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Страхователь", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ФизическоеЛицо", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИдентификаторСтрокиРеестра", Ложь);
	
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Страхователь";
	Группа.ИмяГруппы           = "Страхователь";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ГоловнаяОрганизация");
	
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ИдентификаторСтрокиРеестра";
	Группа.ИмяГруппы           = "ИдентификаторСтрокиРеестра";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИдентификаторРеестра");
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

Процедура ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, ИмяРеквизита, ОтображатьПредупреждение = Неопределено)
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(
		ФиксируемыеРеквизиты,
		Группа,
		ИмяРеквизита,
		ОтображатьПредупреждение);
КонецПроцедуры

#КонецОбласти

#Область СЭДО

// См. ПриЗаполненииПараметровОтправки.
Функция ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключенияПриПроведении)
	СтрокаОтправки.Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Количество = СтрокаОтправки.Ошибки.Количество();
	Если Количество = 1 Тогда
		СтрокаОтправки.Результат = СтрокаОтправки.Ошибки[0].Текст;
	ИначеЕсли Количество > 1 Тогда
		СтрокаОтправки.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка заполнения;;%1 ошибки заполнения;%1 ошибок заполнения;';
				|en = ';%1 filling error;;%1 filling errors;%1 filling errors;'"),
			Количество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключенияПриПроведении) Тогда
		Если СтрокаОтправки.Результат = "" Тогда
			СтрокаОтправки.Результат = СтрШаблон(НСтр("ru = 'Ошибка проведения: %1';
														|en = 'Posting error: %1'"), ТекстИсключенияПриПроведении);
		Иначе
			СтрокаОтправки.Результат = СтрокаОтправки.Результат + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'И ошибка проведения: %1';
																									|en = 'And posting error: %1'"), ТекстИсключенияПриПроведении);
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли