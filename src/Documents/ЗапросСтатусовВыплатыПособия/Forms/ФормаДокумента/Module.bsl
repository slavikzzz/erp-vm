
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		// Заполнение ключевых реквизитов из умолчаний.
		ЗначенияДляЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Объект.Страхователь) Тогда
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Страхователь");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		КонецЕсли;
		Если ЗначенияДляЗаполнения.Количество() > 0 Тогда
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		// Заполнение второстепенных реквизитов.
		ПриПолученииДанныхНаСервере();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Страхователь)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая")
		И Не ТолькоПросмотр Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Страхователь");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		Если ЗначениеЗаполнено(Объект.Страхователь) Тогда
			ОбновитьВторичныеДанныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	Если Параметры.ПоказатьОшибкиОтправки Тогда
		Объект.ОтключитьПроверкиПроведения = Ложь;
		ПроверитьЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Открыта = Не Отказ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_НастройкиПрямыхВыплатФСССотрудников"
		И Параметр.ФизическоеЛицо = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗапросСтатусовВыплатыПособия"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПрямыхВыплатФССОрганизаций"
		И Параметр.ГоловнаяОрганизация = Объект.ГоловнаяОрганизация Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаКонтрагентов" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеКартыКонтрагентов"
		И Источник = Объект.КартаМИР Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	РежимЗаписи = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(ПараметрыЗаписи, "РежимЗаписи");
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбновитьВторичныеДанныеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// До проверки объекта создаем его, дозаполняем и сами проверяем.
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Если Не Объект.ОтключитьПроверкиПроведения Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьЭлементыФормы();
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ЭтотОбъект.Объект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗапросСтатусовВыплатыПособия", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтраховательПриИзменении(Элемент)
	СтраховательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаЗапросПриИзменении(Элемент)
	ОтветНаЗапросПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ФизическоеЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПроведенИОтправленОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Измерения = Новый Структура("ИдентификаторСообщения", Объект.ИдентификаторСообщения);
	СЭДОФССКлиент.ОткрытьКарточкуРегистра("РегистрацииЗапросовСтатусовВыплатыПособий", Измерения);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтключитьПроверкиПроведения(Команда)
	Объект.ОтключитьПроверкиПроведения = Не Объект.ОтключитьПроверкиПроведения;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send a message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства 
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксации = Документы.ЗапросСтатусовВыплатыПособия.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы());
	
	ОписаниеЭлементовФормы = Новый Соответствие;
	ОписаниеПутиКРеквизитамОбъекта = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеПутиКРеквизитамОбъекта.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеПутиКРеквизитамОбъекта);
	КонецЦикла;
	
	ПараметрыФиксации.ОписаниеФормы.ОписаниеЭлементовФормы = ОписаниеЭлементовФормы;
	Возврат ПараметрыФиксации;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	СвойстваЭлемента = Новый Структура("ПутьКДанным");
	Для Каждого Элемент Из Элементы Цикл
		ЗаполнитьЗначенияСвойств(СвойстваЭлемента, Элемент);
		Если ЗначениеЗаполнено(СвойстваЭлемента.ПутьКДанным) Тогда
			Массив = СтрРазделить(СвойстваЭлемента.ПутьКДанным, ".", Ложь);
			БыстрыйПоискРеквизитов.Вставить(Элемент.Имя, Массив[Массив.ВГраница()]);
		КонецЕсли;
	КонецЦикла;
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения(ОснованиеЗаполнения, ТекущаяСтрока = 0)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, ОснованиеЗаполнения, ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	Если ДокументОбъект.ОбновитьВторичныеДанные() Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(
				ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(ИмяЭлемента)
	Элемент = Элементы[ИмяЭлемента];
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(
		ЭтотОбъект,
		Элемент,
		ОписаниеЭлементов);
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.ЗапросСтатусовВыплатыПособия.ОбъектЗафиксирован(Объект);
КонецФункции

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = "Объект")
	ПравоИзменения   = (Элементы.Найти("ФормаПровести") <> Неопределено);
	ПравоПолученияЭД = СЭДОФСС.ЕстьПравоПолучения();
	ПравоОтправкиЭД  = СЭДОФСС.ЕстьПравоОтправки();
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыФиксацииВторичныхДанных());
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(
		ЭтотОбъект,
		ФиксацияБыстрыйПоискРеквизитов());
	
	ОбновитьВторичныеДанныеНаСервере();
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные()
	ОтключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные");
	ПодключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОбновитьВторичныеДанные()
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьВторичныеДанныеНаСервере()
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОбновитьВторичныеДанныеНаСервере();
		ОбновитьЭлементыФормы();
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Иначе
		Прочитать();
		Надпись = Элементы.Найти("ПредупреждениеОбновленияВторичныхДанных");
		Если Надпись <> Неопределено И Надпись.Видимость Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеИВключитьМодифицированность()
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	ОбновитьЭлементыФормы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	ДокументЗафиксирован = ОбъектЗафиксирован();
	ТолькоПросмотр = ДокументЗафиксирован;
	
	ОбновитьПанельСостоянияДокумента();
	
	ОбновитьКнопкиФормы(ДокументЗафиксирован);
	
	ОбновитьЭлементыШапки();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиФормы(ДокументЗафиксирован)
	
	Элементы.ФормаОбновитьВторичныеДанные.Видимость = Не ДокументЗафиксирован;
	Элементы.ФормаОтменитьВсеИсправления.Видимость  = Не ДокументЗафиксирован;
	
	Если ПравоОтправкиЭД Тогда
		Элементы.ОтправитьВФонд.ТолькоВоВсехДействиях = Объект.ПометкаУдаления Или ДокументЗафиксирован;
	КонецЕсли;
	
	Элементы.ФормаОтключитьПроверкиПроведения.Пометка = Объект.ОтключитьПроверкиПроведения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСостоянияДокумента()
	ПоложениеКнопкиЗакрыть     = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КнопкаПоУмолчанию          = Неопределено;
	ОтправленВФонд             = Ложь;
	Если Объект.ПометкаУдаления Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПомеченНаУдаление;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаЗаписать;
		КонецЕсли;
	ИначеЕсли Не Объект.Проведен Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументНеПроведен;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаПровести;
		КонецЕсли;
	Иначе
		СостояниеОтправки = СостояниеОтправки();
		ОтправленВФонд = СостояниеОтправки.ОтправленВФонд;
		Если СостояниеОтправки.МожноОтправить И ПравоОтправкиЭД Тогда
			КнопкаПоУмолчанию = Элементы.ОтправитьВФонд;
		КонецЕсли;
		Если СостояниеОтправки.ЕстьОшибки Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьОшибки;
			Элементы.НадписьДокументПроведенИЕстьОшибки.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения И КнопкаПоУмолчанию = Неопределено Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.ЕстьПредупреждения Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьПредупреждения;
			Элементы.НадписьДокументПроведенИЕстьПредупреждения.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения И КнопкаПоУмолчанию = Неопределено Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.МожноОтправить Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИНеОтправлен;
		Иначе
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИОтправлен;
			Элементы.НадписьДокументПроведенИОтправлен.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиЗакрыть = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			КнопкаПоУмолчанию = Элементы.ФормаЗакрыть;
		КонецЕсли;
	КонецЕсли;
	Если ПравоПолученияЭД Тогда
		Элементы.ПроверитьНаличиеОтвета.Видимость = ОтправленВФонд;
	КонецЕсли;
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.СтраницыСостоянияДокумента.ТекущаяСтраница = ТекущаяСтраница;
	Если ПравоИзменения Тогда
		Элементы.КнопкаСкопировать.ПоложениеВКоманднойПанели = ПоложениеКнопкиСкопировать;
	КонецЕсли;
	Элементы.ФормаЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиЗакрыть;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыШапки()
	Возврат;
КонецПроцедуры

&НаСервере
Функция СостояниеОтправки()
	ВариантыСостояний = Перечисления.СостоянияДокументаСЭДОФСС;
	
	Состояние = ВариантыСостояний.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) И ЗначениеЗаполнено(Объект.ИдентификаторСообщения) Тогда
		НаборЗаписей = РегистрыСведений.РегистрацииЗапросовСтатусовВыплатыПособий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(Объект.ИдентификаторСообщения);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
			Состояние = Запись.Состояние;
		Иначе
			Состояние = Null;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОшибки         = Ложь;
	ЕстьПредупреждения = Ложь;
	МожноОтправить     = Ложь;
	ОтправленВФонд     = Ложь;
	
	Если Состояние = Null Тогда
		ЕстьПредупреждения = Истина;
		МожноОтправить     = Истина;
		Представление      = НСтр("ru = 'Отправлен %1, но нет информации о доставке';
									|en = 'Отправлен %1, но нет информации о доставке'");
		Представление      = СтрШаблон(Представление, Формат(Объект.ДатаОтправки, "ДЛФ=D"));
	ИначеЕсли Состояние = ВариантыСостояний.ПодготовленКОтправке Или Не ЗначениеЗаполнено(Состояние) Тогда
		МожноОтправить = Истина;
		Представление  = Элементы.НадписьДокументПроведенИНеОтправлен.Заголовок;
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаПриОтправке Тогда
		ЕстьПредупреждения = Истина;
		МожноОтправить     = Истина;
		Представление      = НСтр("ru = 'При отправке <a href=""1"">возникла ошибка</a>';
									|en = 'An error occurred when sending <a href=""1"">'");
	ИначеЕсли Состояние = ВариантыСостояний.ОтправленОператору Тогда
		Представление  = НСтр("ru = '<a href=""1"">Отправлен оператору</a>';
								|en = '<a href=""1"">Sent to provider</a>'");
		ОтправленВФонд = Истина;
	ИначеЕсли Состояние = ВариантыСостояний.Отправлен Тогда
		Представление  = НСтр("ru = '<a href=""1"">Отправлен в Фонд</a>';
								|en = '<a href=""1"">Sent to SSF</a>'");
		ОтправленВФонд = Истина;
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаЛогическогоКонтроля Тогда
		ЕстьОшибки    = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">ошибки логического контроля</a>';
							|en = 'Not accepted, see <a href=""1"">logical control errors</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Принят Тогда
		Представление   = НСтр("ru = '<a href=""1"">Успешно принят СФР</a>';
								|en = '<a href=""1"">Успешно принят СФР</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.НеПринят Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">протокол</a>';
							|en = 'Not accepted, see <a href=""1"">protocol</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ПринятСЗамечаниями Тогда
		ЕстьПредупреждения = Истина;
		Представление      = НСтр("ru = 'Принят с замечаниями, см. <a href=""1"">несоответствия</a>';
									|en = 'Accepted with comments, see <a href=""1"">mismatches</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Несоответствие Тогда
		ЕстьПредупреждения = Истина;
		Представление      = НСтр("ru = 'Выявлены <a href=""1"">несоответствия</a>';
									|en = '<a href=""1"">Mismatches</a> are detected'");
	Иначе
		СостояниеСтрокой = Строка(Состояние);
		СостояниеСтрокой = НРег(Лев(СостояниеСтрокой, 1)) + Сред(СостояниеСтрокой, 2);
		Представление    = СтрШаблон(НСтр("ru = 'Проведен и <a href=""1"">%1</a>';
											|en = 'Posted and <a href=""1"">%1</a>'"), СостояниеСтрокой);
	КонецЕсли;
	
	Результат = Новый Структура("Состояние, ЗаголовокНадписи, ЕстьОшибки, ЕстьПредупреждения, МожноОтправить, ОтправленВФонд");
	Результат.Состояние          = Состояние;
	Результат.ЗаголовокНадписи   = СтроковыеФункции.ФорматированнаяСтрока(Представление);
	Результат.ЕстьОшибки         = ЕстьОшибки;
	Результат.ЕстьПредупреждения = ЕстьПредупреждения;
	Результат.МожноОтправить     = МожноОтправить;
	Результат.ОтправленВФонд     = ОтправленВФонд;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Организация

&НаСервере
Процедура СтраховательПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Страхователь");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Страхователь");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

#КонецОбласти

#Область Сотрудник

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ФизическоеЛицо");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

#КонецОбласти

#Область ОтветНаЗапрос

&НаСервере
Процедура ОтветНаЗапросПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ОтветНаЗапрос");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ОтветНаЗапрос");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Вложения = Новый Массив;
	
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

#КонецОбласти
