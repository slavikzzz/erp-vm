///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		// Заполнение ключевых реквизитов из параметров.
		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Параметры.Свойство("Сотрудник", Объект.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				УстановитьПривилегированныйРежим(Истина);
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Ложь, Объект.Сотрудник, "Организация", ТекущаяДатаСеанса());
				УстановитьПривилегированныйРежим(Ложь);
				Если КадровыеДанные <> Неопределено Тогда
					Объект.Организация = КадровыеДанные.Организация;
				КонецЕсли;
			Иначе
				Параметры.Свойство("Организация", Объект.Организация);
			КонецЕсли;
		КонецЕсли;
		// Заполнение ключевых реквизитов из умолчаний.
		ЗначенияДляЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		КонецЕсли;
		Если ЗначенияДляЗаполнения.Количество() > 0 Тогда
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		// Заполнение второстепенных реквизитов.
		ПриПолученииДанныхНаСервере();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Организация)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая")
		И Не ТолькоПросмотр Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Модифицированность = Истина;
			ОбновитьВторичныеДанныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	Если Параметры.ПоказатьОшибкиОтправки Тогда
		ПоказатьОшибкиОтправки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	ПоказатьОшибкиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_ИсходящееСообщениеОСтраховомСлучаеФСС"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_РодственникиФизическихЛиц"
		И Источник = Объект.Ребенок Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_ОтпускПоУходуЗаРебенком"
		Или ИмяСобытия = "Запись_Отпуск"
		Или ИмяСобытия = "Запись_ЗаявлениеСотрудникаНаВыплатуПособия"
		Или ИмяСобытия = "Запись_РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СЭДОФСС.СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// До проверки объекта создаем его, дозаполняем и сами проверяем.
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Если Не Объект.ОтключитьПроверкиПроведения Тогда
			Отказ = Истина;
		КонецЕсли;
		ОбработатьСообщенияПользователю();
	КонецЕсли;
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ЭтотОбъект.Объект);
	
	ОбновитьЭлементыФормы();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ИсходящееСообщениеОСтраховомСлучаеФСС", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидПособияПриИзменении(Элемент)
	ВидПособияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаЗапросПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ОтветНаЗапрос) Тогда
		ОтветНаЗапросПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РебенокПриИзменении(Элемент)
	РебенокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РебенокСоздание(Элемент, СтандартнаяОбработка)
	ПолноеИмя = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипЗнч(Объект.Ребенок));
	Если ПолноеИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец",     Объект.ФизическоеЛицо);
	ЗначенияЗаполнения.Вставить("СНИЛС",        Объект.РебенокСНИЛС);
	ЗначенияЗаполнения.Вставить("ДатаРождения", Объект.РебенокДатаРождения);
	ЗначенияЗаполнения.Вставить("КодСвязи",     Объект.РебенокКодСвязи);
	ЗначенияЗаполнения.Вставить("Фамилия",      Объект.РебенокФамилия);
	ЗначенияЗаполнения.Вставить("Имя",          Объект.РебенокИмя);
	ЗначенияЗаполнения.Вставить("Отчество",     Объект.РебенокОтчество);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	Обработчик = Новый ОписаниеОповещения("ПослеЗакрытияФормыРодственника", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ПолноеИмя + ".ФормаОбъекта", ПараметрыФормы, , , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПроведенИОтправленОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Измерения = Новый Структура("ИсходящийДокумент", Объект.Ссылка);
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = Измерения;
	КлючРегистра = Новый(Тип("РегистрСведенийКлючЗаписи.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС"), ПараметрыЗаписи);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючРегистра);
	ОткрытьФорму(
		"РегистрСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС.ФормаЗаписи",
		ПараметрыФормы,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

&НаКлиенте
Процедура Подключаемый_ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь)
	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтключитьПроверкиПроведения(Команда)
	Объект.ОтключитьПроверкиПроведения = Не Объект.ОтключитьПроверкиПроведения;
	Модифицированность = Истина;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьРедактирования(Команда)
	ВключитьВозможностьРедактированияНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ПодписиДокументов

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
	Если Элемент.Имя = ПодписиДокументовКлиентСервер.ИмяЭлементаФормыПоРолиПодписанта("ПредставительСФР") Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ПредставительСФР");
		ОбновитьВторичныеДанныеИЭлементыФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксации = Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы());
	
	ОписаниеЭлементовФормы = Новый Соответствие;
	ОписаниеПутиКРеквизитамОбъекта = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеПутиКРеквизитамОбъекта.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеПутиКРеквизитамОбъекта);
	КонецЦикла;
	
	ПараметрыФиксации.ОписаниеФормы.ОписаниеЭлементовФормы = ОписаниеЭлементовФормы;
	Возврат ПараметрыФиксации;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		// Поиск элементов по имени.
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения(ОснованиеЗаполнения, ТекущаяСтрока = 0)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, ОснованиеЗаполнения, ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыОбъекта()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	Если ДокументОбъект.ОбновитьВторичныеДанные(ЭтотОбъект.ПараметрыФиксацииВторичныхДанных) Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(ИмяЭлемента)
	Элемент = Элементы[ИмяЭлемента];
	СократитьЛишниеПробелыПриИзмененииСтроковогоРеквизита(Элемент);
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов);
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура СократитьЛишниеПробелыПриИзмененииСтроковогоРеквизита(Элемент)
	ПутьКДанным = ОбщегоНазначенияБЗК.ЗначениеСвойства(Элемент, "ПутьКДанным");
	Если Не ЗначениеЗаполнено(ПутьКДанным) Тогда
		Возврат;
	КонецЕсли;
	Массив = СтрРазделить(ПутьКДанным, ".");
	Если Массив[0] <> "Объект" Или Массив.Количество() <> 2 Тогда
		Возврат;
	КонецЕсли;
	ИмяРеквизита = Массив[1];
	ЗначениеДо = ОбщегоНазначенияБЗК.ЗначениеСвойства(Объект, ИмяРеквизита);
	Если ТипЗнч(ЗначениеДо) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	Объект[ИмяРеквизита] = СокрЛП(ЗначениеДо);
КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.ОбъектЗафиксирован(Объект);
КонецФункции

#КонецОбласти

#Область СвертываемыеГруппы

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы) Экспорт
	Группы.Добавить(Элементы.СведенияОЗастрахованномЛицеГруппа);
	Группы.Добавить(Элементы.ВидДоговораГруппа);
	Группы.Добавить(Элементы.СвидетельствоОРожденииГруппа);
	Группы.Добавить(Элементы.СправкаОРожденииГруппа);
	Группы.Добавить(Элементы.ИнойДокументОРожденииГруппа);
	Группы.Добавить(Элементы.АктоваяЗаписьОРожденииГруппа);
	Группы.Добавить(Элементы.РебенокГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп() Экспорт
	// Действие не требуется.
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость) Экспорт
	
	Если Группа = Элементы.СведенияОЗастрахованномЛицеГруппа Тогда
		// Для больничных передается только СНИЛС, для пособий мамочкам - еще и ФИО и другие сведения.
		Видимость = ЭтоОтпускПоУходу Или ЭтоПособиеПриРождении;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеЗастрахованногоЛица();
		
	ИначеЕсли Группа = Элементы.ВидДоговораГруппа Тогда
		ОбновитьЭлементыГруппыВидДоговора(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СвидетельствоОРожденииГруппа Тогда
		ОбновитьЭлементыГруппыСвидетельствоОРождении(Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.СправкаОРожденииГруппа Тогда
		ОбновитьЭлементыГруппыСправкаОРождении(Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.ИнойДокументОРожденииГруппа Тогда
		Видимость = ЭтоОтпускПоУходу Или ЭтоПособиеПриРождении;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеИногоДокументаОРождении();
		
	ИначеЕсли Группа = Элементы.АктоваяЗаписьОРожденииГруппа Тогда
		Видимость = ЭтоОтпускПоУходу Или ЭтоПособиеПриРождении;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеАктовойЗаписиОРождении();
		
	ИначеЕсли Группа = Элементы.РебенокГруппа Тогда
		Видимость = ЭтоОтпускПоУходу Или ЭтоПособиеПриРождении;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеРебенка();
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		Представление = ПредставлениеСтрахователя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвернутьРазвернутьГруппу(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	СЭДОФСС.СвернутьРазвернутьГруппу(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = "Объект")
	ПравоИзменения   = (Элементы.Найти("ФормаПровести") <> Неопределено);
	ПравоПолученияЭД = СЭДОФСС.ЕстьПравоПолучения();
	ПравоОтправкиЭД  = СЭДОФСС.ЕстьПравоОтправки();
	
	ПервичнаяИнициализицияФормы = (Элементы.РебенокКодСвязи.СписокВыбора.Количество() = 0);
	Если ПервичнаяИнициализицияФормы Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораТипРодственнойСвязи(Элементы.РебенокКодСвязи);
		СЭДОФСС.СписокВыбораКатегорийЗастрахованныхЛиц(Элементы.СотрудникКатегория.СписокВыбора);
		Элементы.Ребенок.Видимость = СЭДОФСС.ВидимостьПоляРодственник();
		ПоддерживаемыеВерсии = Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.ПоддерживаемыеВерсииСпецификации();
		Для Каждого ЭлементСписка Из ПоддерживаемыеВерсии Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ВерсияСпецификации.СписокВыбора.Добавить(), ЭлементСписка);
		КонецЦикла;
	Иначе
		Документ = ?(ТекущийОбъект = "Объект", Объект, ТекущийОбъект);
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, Документ);
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыФиксацииВторичныхДанных());
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(
		ЭтотОбъект,
		ФиксацияБыстрыйПоискРеквизитов());
	
	ТолькоПросмотр = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
	ОбновитьВторичныеДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные()
	ОтключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные");
	ПодключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОбновитьВторичныеДанные()
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьВторичныеДанныеНаСервере()
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОбновитьВторичныеДанныеНаСервере();
	Иначе
		Прочитать();
		Надпись = Элементы.Найти("ПредупреждениеОбновленияВторичныхДанных");
		Если Надпись <> Неопределено И Надпись.Видимость Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеИЭлементыФормы()
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере()
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	// Заполнение кэш-флажков влияющих на вид формы.
	ДокументЗафиксирован = ОбъектЗафиксирован();
	ТолькоПросмотр = ДокументЗафиксирован;
	
	Если Объект.Перерасчет Тогда
		СведенияОВидеПособия = СЭДОФСС.СведенияОВидеПособия(Неопределено); // Все - Ложь.
	Иначе
		СведенияОВидеПособия = СЭДОФСС.СведенияОВидеПособия(Объект.ВидПособия);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияОВидеПособия);
	
	Особенности = Документы.ОтветНаЗапросФССДляРасчетаПособия.ОсобенностиВыгрузки(Объект);
	
	ПодписиДокументовКлиентСервер.УстановитьПредставлениеПодписей(ЭтотОбъект);
	
	// Обновление элементов формы.
	ОбновитьКнопкиФормы(ДокументЗафиксирован);
	
	ОбновитьПанельСостоянияДокумента();
	
	ОбновитьПоляШапкиФормы();
	
	СЭДОФСС.ОбновитьСвертываемыеГруппы(ЭтотОбъект);;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВидПособияДоИзменения = Объект.ВидПособия;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиФормы(ДокументЗафиксирован)
	
	Элементы.ФормаОбновитьВторичныеДанные.Видимость = Не ДокументЗафиксирован;
	Элементы.ФормаОтменитьВсеИсправления.Видимость  = Не ДокументЗафиксирован;
	
	Если ПравоОтправкиЭД Тогда
		ДокументОтправлен = Не Объект.ПометкаУдаления И ЗначениеЗаполнено(Объект.ДатаОтправки);
		Элементы.ОтправитьВФонд.ТолькоВоВсехДействиях = ДокументОтправлен;
	КонецЕсли;
	
	Элементы.ФормаОтключитьПроверкиПроведения.Пометка = Объект.ОтключитьПроверкиПроведения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСостоянияДокумента()
	ПоложениеКнопкиЗакрыть     = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ВидимостьКнопкиПроверить   = Ложь;
	КнопкаПоУмолчанию          = Неопределено;
	Если Объект.ПометкаУдаления Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПомеченНаУдаление;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаЗаписать;
		КонецЕсли;
	ИначеЕсли Не Объект.Проведен Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументНеПроведен;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаПровести;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПроведенИНеОтправлен;
		Если ПравоОтправкиЭД Тогда
			КнопкаПоУмолчанию = Элементы.ОтправитьВФонд;
		КонецЕсли;
	Иначе
		СостояниеОтправки = СостояниеОтправки();
		Если СостояниеОтправки.ЕстьОшибки Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьОшибки;
			Элементы.НадписьДокументПроведенИЕстьОшибки.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.ЕстьПредупреждения Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьПредупреждения;
			Элементы.НадписьДокументПроведенИЕстьПредупреждения.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		Иначе
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИОтправлен;
			Элементы.НадписьДокументПроведенИОтправлен.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиЗакрыть = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			ВидимостьКнопкиПроверить = Истина;
			КнопкаПоУмолчанию = Элементы.ФормаЗакрыть;
		КонецЕсли;
	КонецЕсли;
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.СтраницыСостоянияДокумента.ТекущаяСтраница = ТекущаяСтраница;
	Если ПравоИзменения Тогда
		Элементы.КнопкаСкопировать.ПоложениеВКоманднойПанели = ПоложениеКнопкиСкопировать;
	КонецЕсли;
	Элементы.ФормаЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиЗакрыть;
	Если ПравоПолученияЭД Тогда
		Элементы.ПроверитьНаличиеОтвета.Видимость = ВидимостьКнопкиПроверить;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоляШапкиФормы()
	
	Элементы.НомерЛН.Видимость                  = ЭтоЛН;
	Элементы.СотрудникСНИЛСВШапке.Видимость     = ЭтоЛН;
	Элементы.ОтпускПоУходуГруппа.Видимость      = ЭтоОтпускПоУходу;
	
	Если Объект.Перерасчет Тогда
		Элементы.ИдентификаторСтрокиРеестра.Видимость = Истина;
		РезультатПроверки = СЭДОФСС.РезультатПроверкиИдентификатораРеестраПВСО(Объект.ИдентификаторСтрокиРеестра);
		Если РезультатПроверки.Успех Тогда
			Элементы.ИдентификаторСтрокиРеестра.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.ИдентификаторСтрокиРеестра.РасширеннаяПодсказка.Заголовок = "";
			Элементы.ИдентификаторСтрокиРеестра.ЦветФона = ЦветаСтиля.ЦветФонаУспешнойОперацииБЗК;
		Иначе
			Элементы.ИдентификаторСтрокиРеестра.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			Элементы.ИдентификаторСтрокиРеестра.РасширеннаяПодсказка.Заголовок = РезультатПроверки.Пояснение;
			Элементы.ИдентификаторСтрокиРеестра.ЦветФона = ЦветаСтиля.ЦветФонаПредупрежденияБЗК;
		КонецЕсли;
	Иначе
		Элементы.ИдентификаторСтрокиРеестра.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Ребенок.Видимость = (ЭтоОтпускПоУходу Или ЭтоПособиеПриРождении) И СЭДОФСС.ВидимостьПоляРодственник();
	
КонецПроцедуры

&НаСервере
Функция СостояниеОтправки()
	РегистрацияСведенийОбъект = РеквизитФормыВЗначение("РегистрацияСведений");
	РегистрацияСведенийОбъект.ИсходящийДокумент = Объект.Ссылка;
	РегистрацияСведенийОбъект.Прочитать();
	ЗначениеВРеквизитФормы(РегистрацияСведенийОбъект, "РегистрацияСведений");
	
	Состояние          = РегистрацияСведений.Состояние;
	ВариантыСостояний  = Перечисления.СостоянияДокументаСЭДОФСС;
	ЕстьОшибки         = Ложь;
	ЕстьПредупреждения = Ложь;
	Если Состояние = ВариантыСостояний.ПодготовленКОтправке Тогда
		Представление = НСтр("ru = 'Проведен и <a href=""1"">готов к отправке</a>';
							|en = 'Posted and <a href=""1"">ready for sending</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаПриОтправке Тогда
		Представление = НСтр("ru = 'При отправке в Фонд <a href=""1"">возникла ошибка</a>';
							|en = '<a href=""1"">An error occurred</a> when sending to SSF'");
	ИначеЕсли Состояние = ВариантыСостояний.ОтправленОператору Тогда
		Представление = НСтр("ru = '<a href=""1"">Отправлен оператору</a>';
							|en = '<a href=""1"">Sent to provider</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Отправлен Тогда
		Представление = НСтр("ru = '<a href=""1"">Отправлен в Фонд</a>';
							|en = '<a href=""1"">Sent to SSF</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаЛогическогоКонтроля Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">ошибки логического контроля</a>';
							|en = 'Not accepted, see <a href=""1"">logical control errors</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Принят Тогда
		Представление = НСтр("ru = '<a href=""1"">Успешно принят ФСС</a>';
							|en = '<a href=""1"">Accepted by SSF</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.НеПринят Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Документ не принят, см. <a href=""1"">протокол</a>';
							|en = 'The document is not accepted, see <a href=""1"">the log</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ПринятСЗамечаниями Тогда
		ЕстьПредупреждения = Истина;
		Представление = НСтр("ru = '<a href=""1"">Успешно принят ФСС</a>';
							|en = '<a href=""1"">Accepted by SSF</a>'");
	Иначе
		СостояниеСтрокой = Строка(Состояние);
		СостояниеСтрокой = НРег(Лев(СостояниеСтрокой, 1)) + Сред(СостояниеСтрокой, 2);
		Представление = СтрШаблон(НСтр("ru = 'Проведен и <a href=""1"">%1</a>';
										|en = 'Posted and <a href=""1"">%1</a>'"), СостояниеСтрокой);
	КонецЕсли;
	
	Результат = Новый Структура("Состояние, ЗаголовокНадписи, ЕстьОшибки, ЕстьПредупреждения");
	Результат.Состояние          = Состояние;
	Результат.ЗаголовокНадписи   = СтроковыеФункции.ФорматированнаяСтрока(Представление);
	Результат.ЕстьОшибки         = ЕстьОшибки;
	Результат.ЕстьПредупреждения = ЕстьПредупреждения;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьОшибкиОтправки(Форма)
	Если Форма.Объект.ОтключитьПроверкиПроведения Тогда
		Форма.Объект.ОтключитьПроверкиПроведения = Ложь;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	Форма.ПроверитьЗаполнение();
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщенияПользователю()
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Если Объект.ОтключитьПроверкиПроведения Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация сообщений к особенностям формы.
		Если ЗначениеЗаполнено(Сообщение.Поле) Тогда
			СЭДОФСС.СвертываемыеГруппыАдаптироватьСообщениеПользователю(ЭтотОбъект, Сообщение);
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	Иначе
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Страхователь);
	КонецЕсли;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Организация");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Организация");
	УстановитьФункциональныеОпцииФормы();
	ОбновитьВторичныеДанныеНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПредставлениеСтрахователя()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Представления.Добавить(Строка(Объект.Страхователь));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерСтрахователяФСС) Тогда
		Представления.Добавить(НСтр("ru = 'регистрационный номер';
									|en = 'registration number'") + " " + Объект.НомерСтрахователяФСС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Представления.Добавить(НСтр("ru = 'код подчиненности';
									|en = 'subordination code'") + " " + Объект.КодПодчиненностиФСС);
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область Сотрудник

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо");
	Иначе
		Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Объект.ДокументОснование            = Неопределено;
	Объект.Ребенок                      = Неопределено;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ДокументОснование");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Ребенок");
	ОбновитьВторичныеДанныеНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗастрахованногоЛица()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.СотрудникФамилия + " " + Объект.СотрудникИмя + " " + Объект.СотрудникОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения';
									|en = 'Date of birth'") + " " + Формат(Объект.СотрудникДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
												|en = 'SNILS: %1'"), Объект.СотрудникСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыВидДоговора(Видимость, Представление)
	Видимость = Особенности.Версия_2_41 И Не Объект.Перерасчет;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Если Объект.ВидДоговораТрудовой Тогда
		Массив.Добавить(НСтр("ru = 'Трудовой';
							|en = 'Employment contract'"));
	КонецЕсли;
	Если Объект.ВидДоговораГПХ Тогда
		Массив.Добавить(НСтр("ru = 'ГПХ';
							|en = 'Civil law'"));
	КонецЕсли;
	Представление = СтрСоединить(Массив, ", ");
КонецПроцедуры

#КонецОбласти

#Область ВидПособия

&НаСервере
Процедура ВидПособияПриИзмененииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.ВидПособия) Тогда
		// Очищать документ-основание не требуется.
	ИначеЕсли (Объект.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам
			Или Объект.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки
			Или Объект.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка)
		И (ВидПособияДоИзменения = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам
			Или ВидПособияДоИзменения = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки
			Или ВидПособияДоИзменения = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка) Тогда
		// Очищать документ-основание не требуется.
	Иначе
		Объект.ДокументОснование = Неопределено;
		ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ДокументОснование");
	КонецЕсли;
	ОбновитьВторичныеДанныеНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОтпускПоУходу

&НаСервере
Процедура ОбновитьЭлементыГруппыСвидетельствоОРождении(Представление, Заполнена, Развернута, Видимость)
	Видимость = ЭтоОтпускПоУходу Или ?(Особенности.Версия_2_34, Ложь, ЭтоПособиеПриРождении);
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Представление = ПредставлениеСвидетельстваОРождении();
КонецПроцедуры

&НаСервере
Функция ПредставлениеСвидетельстваОРождении()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СвидетельствоОРожденииСерия) Тогда
		Представления.Добавить(НСтр("ru = 'серия';
									|en = 'series'"));
		Представления.Добавить(Объект.СвидетельствоОРожденииСерия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СвидетельствоОРожденииНомер) Тогда
		Представления.Добавить("№ " + Объект.СвидетельствоОРожденииНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СвидетельствоОРожденииКемВыдано)
		Или ЗначениеЗаполнено(Объект.СвидетельствоОРожденииДатаВыдачи) Тогда
		Представления.Добавить(НСтр("ru = 'выдано';
									|en = 'issued'"));
		Представления.Добавить(Формат(Объект.СвидетельствоОРожденииДатаВыдачи, "ДЛФ=D"));
		Представления.Добавить(Объект.СвидетельствоОРожденииКемВыдано);
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыСправкаОРождении(Представление, Заполнена, Развернута, Видимость)
	Видимость = ЭтоПособиеПриРождении;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Представление = ПредставлениеСправкиОРождении();
КонецПроцедуры

&НаСервере
Функция ПредставлениеСправкиОРождении()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СправкаОРожденииФорма) Тогда
		Представления.Добавить(Объект.СправкаОРожденииФорма);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СправкаОРожденииНомер) Тогда
		Представления.Добавить("№ " + Объект.СправкаОРожденииНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СправкаОРожденииКемВыдана)
		Или ЗначениеЗаполнено(Объект.СправкаОРожденииДатаВыдачи) Тогда
		Представления.Добавить(НСтр("ru = 'выдана';
									|en = 'issued'"));
		Представления.Добавить(Формат(Объект.СправкаОРожденииДатаВыдачи, "ДЛФ=D"));
		Представления.Добавить(Объект.СправкаОРожденииКемВыдана);
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеИногоДокументаОРождении()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерия) Тогда
		Представления.Добавить(НСтр("ru = 'серия';
									|en = 'series'"));
		Представления.Добавить(Объект.ИнойДокументОРожденииСерия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииНомер) Тогда
		Представления.Добавить("№ " + Объект.ИнойДокументОРожденииНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииКемВыдан)
		Или ЗначениеЗаполнено(Объект.ИнойДокументОРожденииДатаВыдачи) Тогда
		Представления.Добавить(НСтр("ru = 'выдан';
									|en = 'issued'"));
		Представления.Добавить(Формат(Объект.ИнойДокументОРожденииДатаВыдачи, "ДЛФ=D"));
		Представления.Добавить(Объект.ИнойДокументОРожденииКемВыдан);
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеАктовойЗаписиОРождении()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииНомер) Тогда
		Представления.Добавить("№ " + Объект.АктоваяЗаписьОРожденииНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииДата) Тогда
		Представления.Добавить(НСтр("ru = 'от';
									|en = 'dated'"));
		Представления.Добавить(Формат(Объект.АктоваяЗаписьОРожденииДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеРебенка()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.РебенокФамилия + " " + Объект.РебенокИмя + " " + Объект.РебенокОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'дата рождения';
									|en = 'date of birth'") + " " + Формат(Объект.РебенокДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС %1';
												|en = 'SNILS: %1'"), Объект.РебенокСНИЛС));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокПол) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = '%1 пол';
												|en = '%1 gender'"), НРег(Объект.РебенокПол)));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокКодСвязи) Тогда
		ЭлементСписка = Элементы.РебенокКодСвязи.СписокВыбора.НайтиПоЗначению(Объект.РебенокКодСвязи);
		Если ЭлементСписка = Неопределено Тогда
			Представление = Объект.РебенокКодСвязи;
		Иначе
			Представление = ЭлементСписка.Представление;
		КонецЕсли;
		Представления.Добавить(СтрШаблон(НСтр("ru = 'код связи: %1';
												|en = 'relationship code: %1'"), Представление));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыРодственника(РезультатВыбора, ПустойПараметр) Экспорт
	Если ТипЗнч(РезультатВыбора) = ТипЗнч(Объект.Ребенок) Тогда
		Объект.Ребенок = РезультатВыбора;
		РебенокПриИзмененииНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РебенокПриИзмененииНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Ребенок");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Ребенок");
	ОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ДокументОснование

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	ПараметрыФиксации = Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.ПараметрыФиксацииВторичныхДанных();
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьДанныеИзОснования(ПараметрыФиксации, Ложь);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ПриПолученииДанныхНаСервере("Объект");
КонецПроцедуры

#КонецОбласти

#Область Перерасчет

&НаСервере
Процедура ОтветНаЗапросПриИзмененииНаСервере()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ОтветНаЗапрос);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ПриПолученииДанныхНаСервере("Объект");
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаСервере
Процедура ВключитьВозможностьРедактированияНаСервере()
	ВозможностьРедактирования = Не Элементы.ВключитьВозможностьРедактирования.Пометка;
	Элементы.ВключитьВозможностьРедактирования.Пометка = ВозможностьРедактирования;
	Элементы.СлужебныеПоляГруппа.ТолькоПросмотр        = Не ВозможностьРедактирования;
	Если ТолькоПросмотр И ВозможностьРедактирования Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Вложения = Новый Массив;
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

#КонецОбласти
