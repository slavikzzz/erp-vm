
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
	
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Объект.ИнициаторСбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
		
		ТекущаяДата = ТекущаяДатаСеанса();  
		
		Объект.Год = Год(ТекущаяДата);   
		
		Если Месяц(ТекущаяДата) > 9 Тогда
			Объект.Год = Объект.Год + 1;	
		КонецЕсли;
		
		Объект.Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Черновик;
		
		ИнициализироватьФорму();
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли; 
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СборНачат = Объект.СборЗапущен;
	
	ИнициализироватьФорму();
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Для Каждого Строка Из СобранныеГрафики.ПолучитьЭлементы() Цикл
		Элементы.СобранныеГрафики.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваФормыСобранныеГрафики

&НаКлиенте
Процедура СобранныеГрафикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ГрафикОтпусков) Тогда
		ФормаДокументаПодразделение = ПолучитьФорму("Документ.СборГрафиковОтпусков.Форма.ФормаДокументаПодразделение",
			Новый Структура("Ключ, ТолькоПросмотр", Элемент.ТекущиеДанные.ГрафикОтпусков, Истина),
			ЭтаФорма);
		ФормаДокументаПодразделение.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСобранныеГрафики()
	
	СборыПоПодразделениям = ПолучитьСборыПоПодразделениям();
	
	ДеревоПодразделений = СформироватьДеревоПодразделений(СборыПоПодразделениям);
	
	ИсходноеДерево = РеквизитФормыВЗначение("СобранныеГрафики");   
	ИсходноеДерево.Строки.Очистить();
	
	СборыБезОтветственных = Новый Соответствие;
	
	ЗаполнитьСтрокиДерева(
		ИсходноеДерево, 
		ДеревоПодразделений, 
		СборыПоПодразделениям,
		СборыБезОтветственных
	);             
	
	Если Объект.Внешний Тогда
		ОбработатьСтрокиБезСборов(ИсходноеДерево);
	Иначе
		ЗаполнитьРуководителей(СборыБезОтветственных);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ИсходноеДерево, "СобранныеГрафики");
	 
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоПодразделений(СборыПоПодразделениям)
	
	МассивПодразделенийСборов = Новый Массив;
	Для Каждого ПодразделениеСбора Из СборыПоПодразделениям Цикл
		МассивПодразделенийСборов.Добавить(ПодразделениеСбора.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;     
	Запрос.УстановитьПараметр("ДатаНачалаСбора", Мин(Дата(Объект.Год,1,1), Объект.Дата));  
	Запрос.УстановитьПараметр("МассивПодразделенийСборов", МассивПодразделенийСборов);
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Наименование КАК Наименование,
		|	СтруктураПредприятия.Владелец КАК Организация
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК СтруктураПредприятия
		|ГДЕ
		|	(НЕ СтруктураПредприятия.Расформировано
		|			ИЛИ СтруктураПредприятия.ДатаРасформирования > &ДатаНачалаСбора
		|			ИЛИ СтруктураПредприятия.Ссылка В (&МассивПодразделенийСборов))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтруктураПредприятия.Владелец.Наименование,
		|	СтруктураПредприятия.РеквизитДопУпорядочиванияИерархического
		|ИТОГИ ПО
		|	Организация,
		|	Подразделение ИЕРАРХИЯ";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить(); 
		УстановитьПривилегированныйРежим(Ложь);
		
		ДеревоСтруктуры = Новый ДеревоЗначений;              
		ДеревоСтруктуры.Колонки.Добавить("Подразделение");
		ДеревоСтруктуры.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		
		ТекущаяОрганизация = Неопределено;      
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаОрганизаций = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

			Пока ВыборкаОрганизаций.Следующий() Цикл
				
				НоваяСтрока = ДеревоСтруктуры.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОрганизаций);
				НоваяСтрока.Наименование = Строка(ВыборкаОрганизаций.Организация);
				
				ВыборкаПодразделений = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				ЗаполнитьСтрокиДереваСтруктуры(НоваяСтрока, ВыборкаПодразделений);
				
			КонецЦикла;                            
			
		КонецЕсли;   
		
		Возврат ДеревоСтруктуры;
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	(НЕ ПодразделенияОрганизаций.Расформировано
		|			ИЛИ ПодразделенияОрганизаций.ДатаРасформирования > &ДатаНачалаСбора
		|			ИЛИ ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL
		|			ИЛИ СтруктураПредприятия.Ссылка В (&МассивПодразделенийСборов))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение ИЕРАРХИЯ";
		
		УстановитьПривилегированныйРежим(Истина);
		Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	КонецЕсли;                                                                            
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиДереваСтруктуры(СтрокаДерева, ИерархическаяВыборка)
	
	Пока ИерархическаяВыборка.Следующий() Цикл
		
		Если ИерархическаяВыборка.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			Если СтрокаДерева.Подразделение <> ИерархическаяВыборка.Подразделение Тогда
				НоваяСтрока = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИерархическаяВыборка,"Подразделение, Наименование");
			КонецЕсли;
			
			Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда    
				ВыборкаПодразделений = ИерархическаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ИерархическаяВыборка.Группировка());
			Иначе
				ВыборкаПодразделений = ИерархическаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			КонецЕсли;
			
			ЗаполнитьСтрокиДереваСтруктуры(НоваяСтрока, ВыборкаПодразделений); 
			
		КонецЕсли;                
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДерева(ИсходноеДерево, ДеревоПодразделений, СборыПоПодразделениям, СборыБезОтветственных)
	
	НомерСтроки = 1;
	Для Каждого СтрокаДерева Из ДеревоПодразделений.Строки Цикл
		
		НоваяСтрока = ИсходноеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева, "Подразделение, Наименование");
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		СборПоПодразделению = СборыПоПодразделениям.Получить(НоваяСтрока.Подразделение);
		Если ЗначениеЗаполнено(СборПоПодразделению) Тогда 
			ЗаполнитьСтрокуДереваПоСбору(НоваяСтрока, СборПоПодразделению);
			Если ЗначениеЗаполнено(СборПоПодразделению.ОтветственныйЗаСбор) Тогда
				НоваяСтрока.РуководительПредставление = Строка(СборПоПодразделению.ОтветственныйЗаСбор);
			КонецЕсли;
		КонецЕсли; 
		
		Если ПустаяСтрока(НоваяСтрока.РуководительПредставление) Тогда
			СборыБезОтветственных.Вставить(НоваяСтрока.Подразделение, НоваяСтрока);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДерева(НоваяСтрока, СтрокаДерева, СборыПоПодразделениям, СборыБезОтветственных);	
		КонецЕсли;  
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиБезСборов(ИсходноеДерево)
	
	МассивУдаляемых = Новый Массив;
	Для Каждого СтрокаДерева Из ИсходноеДерево.Строки Цикл  
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОбработатьСтрокиБезСборов(СтрокаДерева);	
		КонецЕсли;         
		
		Если СтрокаДерева.Строки.Количество() = 0 И НЕ ЗначениеЗаполнено(СтрокаДерева.ГрафикОтпусков) Тогда
			МассивУдаляемых.Добавить(СтрокаДерева);	
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДерева Из МассивУдаляемых Цикл
		ИсходноеДерево.Строки.Удалить(СтрокаДерева);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСборыПоПодразделениям()
	
	ПодразделениеСборГрафиков = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорневойСборГрафиков", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументСборГрафиковОтпусков.Ссылка КАК СборГрафиков,
		|	ДокументСборГрафиковОтпусков.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
		|ГДЕ
		|	ДокументСборГрафиковОтпусков.КорневойСборГрафиков = &КорневойСборГрафиков";
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПодразделениеСборГрафиков.Вставить(Выборка.Подразделение, Выборка.СборГрафиков);	
	КонецЦикла;
	
	Возврат ПодразделениеСборГрафиков;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуДереваПоСбору(СтрокаДерева, СборПоПодразделению)
	СтрокаДерева.ГрафикОтпусков = СборПоПодразделению.Ссылка;
	СтрокаДерева.Состояние = СборПоПодразделению.Состояние;
	СтрокаДерева.ЗапланировалоОтпуск = СборПоПодразделению.КоличествоСотрудников;
	ЗаполнитьЗапланировалоОтпуск(СтрокаДерева, СтрокаДерева.ЗапланировалоОтпуск);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапланировалоОтпуск(СтрокаДерева, ЗапланировалоОтпуск)
	Если Не СтрокаДерева.Родитель = Неопределено Тогда
		СтрокаДерева.Родитель.ЗапланировалоОтпуск = СтрокаДерева.Родитель.ЗапланировалоОтпуск + ЗапланировалоОтпуск;
		ЗаполнитьЗапланировалоОтпуск(СтрокаДерева.Родитель, ЗапланировалоОтпуск);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРуководителей(СборыБезОтветственных)
	
	Если СборыБезОтветственных.Количество() > 0 Тогда
		
		Если ИнтеграцияУправлениеПерсоналом.Используется1СПерсонал() Тогда
			Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
		Иначе
			Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		КонецЕсли;
		
		МассивПодразделений = Новый Массив;
		Для Каждого ПодразделениеБезОтветственного Из СборыБезОтветственных Цикл
			МассивПодразделений.Добавить(ПодразделениеБезОтветственного.Ключ);
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		ПубликуемыеРуководители = ИнтеграцияУправлениеПерсоналомРасширенный.ПубликуемыеРуководители(Приложение, МассивПодразделений);
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого ПодразделениеРуководитель Из ПубликуемыеРуководители Цикл
			СтрокаДерева = СборыБезОтветственных.Получить(ПодразделениеРуководитель.Ключ); 
			Если СтрокаДерева <> Неопределено Тогда 
				СтрокаДерева.РуководительПредставление = Строка(ПодразделениеРуководитель.Значение);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НачатьСбор(Команда)
	
	Если Параметры.Ключ.Пустая() Или Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Начать кампанию можно только для записанного документа. 
							|Записать и начать кампанию сбора графиков отпусков?';
							|en = 'Cannot start the leave schedule collection for an unsaved document. 
							|Do you want to save the document and start the leave schedule collection?'");	
		Оповещение = Новый ОписаниеОповещения("ЗаписатьДокументПередНачаломСбораЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	Иначе 
		НачатьСборГрафиковОтпусков();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументПередНачаломСбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да И ПроверитьЗаполнение() Тогда
		Записать();
		НачатьСборЗавершение(Результат, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСборГрафиковОтпусков()
	
	ТекстВопроса = НСтр("ru = 'Начать кампанию сбора графиков отпусков?';
						|en = 'Do you want to start the leave schedule collection?'");
	Оповещение = Новый ОписаниеОповещения("НачатьСборЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСборЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
		УстановитьСтатусСбора("СборЗапущен", Истина);
	КонецЕсли;  
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗавершитьСбор(Команда)
	
	Если ПоступившиеСборыГрафиковОтпусковУтверждены(Объект.Ссылка) Тогда
		Если Параметры.Ключ.Пустая() Или Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Завершить кампанию можно только для записанного документа. 
			|Записать?';
			|en = 'Cannot complete the leave schedule collection for an unsaved document. 
			|Do you want to save the document?'");	
			Оповещение = Новый ОписаниеОповещения("ЗаписатьДокументПередЗавершениемСбораЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Иначе 
			ЗавершитьСборГрафиковОтпусков();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не все поступившие сборы графиков по подразделениям были утверждены в сервисе 1С:Кабинет сотрудника.';
										|en = 'Some of the received schedule collections by business units were not approved in 1C:Employee Account.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументПередЗавершениемСбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да И ПроверитьЗаполнение() Тогда
		Записать();
		ЗавершитьСборГрафиковОтпусков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСборГрафиковОтпусков()
	
	ТекстВопроса = НСтр("ru = 'Возобновление кампании сбора графиков отпусков после завершения невозможно!
						|Продолжить?';
						|en = 'You will not be able to resume the leave schedule collection after its completion.
						|Continue?'");
	Оповещение = Новый ОписаниеОповещения("ЗавершитьСборЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСборЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьСтатусСбора("СборЗавершен", Истина);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьСбор(Команда)
	
	Если Объект.СборЗапущен Тогда
		Если Параметры.Ключ.Пустая() Или Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Аннулировать кампанию можно только для записанного документа. 
			|Записать?';
			|en = 'You can cancel the leave schedule collection only for a saved document. 
			|Save?'");	
			Оповещение = Новый ОписаниеОповещения("ЗаписатьДокументПередАннулированиемСбораЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Иначе 
			АннулироватьСборГрафиковОтпусков();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулировать кампанию можно только для начатого сбора.';
										|en = 'You can cancel the leave schedule collection only for a started collection.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументПередАннулированиемСбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да И ПроверитьЗаполнение() Тогда
		Записать();
		АннулироватьСборГрафиковОтпусков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьСборГрафиковОтпусков()
	
	ТекстВопроса = НСтр("ru = 'Возобновление кампании сбора графиков отпусков после аннулирования невозможно!
						|Продолжить?';
						|en = 'You will not be able to resume the leave schedule collection after its cancelation.
						|Continue?'");
	Оповещение = Новый ОписаниеОповещения("АннулироватьСборЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьСборЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда      
		ЗаполнитьДанныеАннулирования();
		УстановитьСтатусСбора("СборАннулирован", Истина);
	КонецЕсли;  
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьГрафикОтпусков(Команда)
	
	ИдентификаторОрганизации = Новый УникальныйИдентификатор(СтрЗаменить(Сред(Команда.Имя, 15), "_", "-"));
	ПараметрыДокумента = ПараметрыГрафикаОтпусков(Объект.Ссылка, ИдентификаторОрганизации);
	
	Если ЗначениеЗаполнено(ПараметрыДокумента.Ссылка) Тогда 
		ОткрытьФорму("Документ.ГрафикОтпусков.ФормаОбъекта", Новый Структура("Ключ", ПараметрыДокумента.Ссылка));
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура("СборГрафиковОтпусков, Организация, Действие", 
		Объект.Ссылка, ПараметрыДокумента.Организация, "ЗаполнитьПоСборуГрафиковОтпусков");
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("Документ.ГрафикОтпусков.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	Если СборНачат Тогда
	
		ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();   
		
		УстановитьПараметрЕстьПолныйДоступ();
		ЗаполнитьСобранныеГрафики();      
		
	Иначе
		
		ЕстьПолныйДоступ = Истина;
		
	КонецЕсли;
	
	ЗаполнитьКомандыСозданияГрафикаОтпусков();
	УстановитьСвойстваЭлементовФормы();	

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрЕстьПолныйДоступ()  
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("КорневойСборГрафиков", Объект.Ссылка);
	ТекстЗапросаГрафики =
	"ВЫБРАТЬ
	|	СборГрафиковОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК СборГрафиковОтпусков
	|ГДЕ
	|	СборГрафиковОтпусков.КорневойСборГрафиков = &КорневойСборГрафиков";
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда   
		
		ТекстЗапросаСтруктура =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Предопределенный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";  
		
	Иначе   
		
		ТекстЗапросаСтруктура =
		"ВЫБРАТЬ
		|    СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|    Справочник.СтруктураПредприятия КАК СтруктураПредприятия"; 
		
	КонецЕсли;
	
	Попытка
		Запрос.Текст = ТекстЗапросаГрафики;
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапросаСтруктура;
		Запрос.Выполнить();
		ЕстьПолныйДоступ = Истина;
	Исключение
		// Отсутствует полный доступ к данным.
		ЕстьПолныйДоступ = Ложь;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ТолькоПросмотр = Объект.СборЗавершен Или Объект.СборАннулирован;       
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаЗаписатьИЗакрыть", "Доступность", НЕ ТолькоПросмотр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаЗаписать", "Доступность", НЕ ТолькоПросмотр);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "СобранныеГрафики", "ТолькоПросмотр", Истина);
			
	Если Объект.Внешний Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "ФормаНачатьСбор", "Видимость", Ложь);	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "ФормаАннулироватьСбор", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "СобранныеГрафикиСостояние", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтаФорма.Элементы, "Ответственный", "Видимость", Ложь);
		
	Иначе
		
		СборВРаботе = Объект.СборЗапущен и НЕ Объект.СборЗавершен и НЕ Объект.СборАннулирован;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаНачатьСбор", "Заголовок", ?(Объект.СборЗапущен, НСтр("ru = 'Сбор начат';
																							|en = 'Collection started'"), НСтр("ru = 'Начать сбор';
																													|en = 'Start collection'")));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаНачатьСбор", "Доступность", НЕ Объект.СборЗапущен и НЕ Объект.ПометкаУдаления);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаНачатьСбор", "ЦветФона", ?(СборВРаботе, ЦветаСтиля.ПравоПросмотраФон, ЦветаСтиля.ЦветФонаКнопки));	
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "Заголовок", ?(Объект.СборЗавершен, НСтр("ru = 'Сбор завершен';
																								|en = 'Collection completed'"), НСтр("ru = 'Завершить сбор';
																															|en = 'Complete collection'")));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "Видимость", СборВРаботе или Объект.СборЗавершен);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "Доступность", СборВРаботе);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "ЦветФона", ?(Объект.СборЗавершен, ЦветаСтиля.ПравоПросмотраФон, ЦветаСтиля.ЦветФонаКнопки));	 
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаАннулироватьСбор", "Заголовок", ?(Объект.СборАннулирован, НСтр("ru = 'Сбор аннулирован';
																									|en = 'Collection is canceled'"), НСтр("ru = 'Аннулировать сбор';
																																	|en = 'Cancel collection'")));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаАннулироватьСбор", "Видимость", СборВРаботе или Объект.СборАннулирован);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаАннулироватьСбор", "Доступность", СборВРаботе);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			ЭтаФорма.Элементы, "ФормаАннулироватьСбор", "ЦветФона", ?(Объект.СборАннулирован, ЦветаСтиля.ПравоСозданияФон, ЦветаСтиля.ЦветФонаКнопки));	 

		Если НЕ ЕстьПолныйДоступ Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "Доступность", Ложь);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				ЭтаФорма.Элементы, "ФормаАннулироватьСбор", "Видимость", Ложь или Объект.СборАннулирован);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				ЭтаФорма.Элементы, "ФормаАннулироватьСбор", "Доступность", Ложь); 
				
			УстановитьИнформационноеСообщение();
			
		КонецЕсли;   
		
		Если Объект.СборАннулирован Тогда
			УстановитьИнформационноеСообщениеОбАннулировании();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "ИнициаторСбора", "Доступность", НЕ Объект.СборЗапущен);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "Год", "Доступность", НЕ Объект.СборЗапущен);
		
	УстановитьДоступностьСозданияГрафикаОтпусков();

КонецПроцедуры

&НаСервере
Процедура УстановитьИнформационноеСообщение()
	
	ПрефиксЭлементов = "ИнформацияОДоступностиРедактирования";

	ИмяГруппы = ПрефиксЭлементов + "Группа";
	ИнформацияОДоступностиРедактированияГруппа = Элементы.Найти(ИмяГруппы);
	Если ИнформацияОДоступностиРедактированияГруппа = Неопределено Тогда
		
		// Информация о невозможности редактирования
		ИнформацияОДоступностиРедактированияГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ЭтаФорма, Элементы.Найти("Шапка"));
		ИнформацияОДоступностиРедактированияГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИнформацияОДоступностиРедактированияГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ИнформацияОДоступностиРедактированияГруппа.ОтображатьЗаголовок = Ложь;                             
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "КартинкаИнформация", Тип("ДекорацияФормы"), ИнформацияОДоступностиРедактированияГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Информация16АнимированнаяБЗК;
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "Надпись", Тип("ДекорацияФормы"), ИнформацияОДоступностиРедактированияГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = НСтр("ru = 'Завершение сбора недоступно. Требуется доступ ко всей структуре предприятия. Обратитесь к вашему администратору.';
										|en = 'You cannot complete the collection. Access to the entire enterprise structure is required. Contact your administrator.'");
			НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;   
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстановитьПараметрыФункциональныхОпцийФормы(УстанавливаемыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()
	
	УстановитьФункциональныеОпцииФормы();
	ДобавитьКомандыСозданияГрафикаОтпусков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеАннулирования()
	Объект.ОтветственныйЗаАннулирование = Пользователи.ТекущийПользователь();
	Объект.ДатаАннулирования = ТекущаяДатаСеанса(); 
КонецПроцедуры		

&НаСервере
Процедура УстановитьИнформационноеСообщениеОбАннулировании()
	
	ПрефиксЭлементов = "ИнформацияОбАннулировании";

	ИмяГруппы = ПрефиксЭлементов + "Группа";
	ИнформацияОбАннулированииГруппа = Элементы.Найти(ИмяГруппы);
	Если ИнформацияОбАннулированииГруппа = Неопределено Тогда
		
		// Информация о невозможности редактирования
		ИнформацияОбАннулированииГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ЭтаФорма, Элементы.Найти("Шапка"));
		ИнформацияОбАннулированииГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИнформацияОбАннулированииГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ИнформацияОбАннулированииГруппа.ОтображатьЗаголовок = Ложь;                             
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "КартинкаИнформация", Тип("ДекорацияФормы"), ИнформацияОбАннулированииГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Информация16АнимированнаяБЗК;
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "Надпись", Тип("ДекорацияФормы"), ИнформацияОбАннулированииГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = СтрШаблон(
			НСтр("ru = 'Кампания по сбору графиков отпусков аннулирована (%1 г. в %2, пользователем: %3)';
				|en = 'The leave schedule collection is canceled (%1 at %2, by the user: %3)'"),
			Формат(Объект.ДатаАннулирования, "ДФ=dd.MM.yyyy"),
			Формат(Объект.ДатаАннулирования, "ДФ=HH:mm"),
			Строка(Объект.ОтветственныйЗаАннулирование));
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;   
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
	Если Записать(ПараметрыЗаписи) И ЗакрытьПослеЗаписи Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСбора(ИмяФлага, ЗначениеФлага)
	
	Объект[ИмяФлага] = ЗначениеФлага;
	
	Записать();
	
	УстановитьСвойстваЭлементовФормы();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоступившиеСборыГрафиковОтпусковУтверждены(КорневойСборГрафиковОтпусков)
	Возврат	СборГрафиковОтпусков.СборыГрафиковОтпусковПодразделенийУтверждены(КорневойСборГрафиковОтпусков);
КонецФункции

&НаСервере
Процедура ДобавитьКомандыСозданияГрафикаОтпусков()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ГрафикОтпусков) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
	
		НоваяКоманда = Команды.Добавить(ИмяКомандыСоздатьГрафикОтпусков(Выборка.Ссылка));
		НоваяКоманда.Действие = "Подключаемый_СоздатьГрафикОтпусков";
		
		НовыйЭлемент = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), Элементы.ПодменюГрафикОтпусков);
		НовыйЭлемент.Заголовок = Выборка.Наименование;
		НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяКомандыСоздатьГрафикОтпусков(Организация)
	
	Возврат "ГрафикОтпусков" + СтрЗаменить(Строка(Организация.УникальныйИдентификатор()), "-", "_");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыГрафикаОтпусков(СборГрафиковОтпусков, ИдентификаторОрганизации) 
	
	ПараметрыДокумента = Новый Структура("Ссылка, Организация");
	ПараметрыДокумента.Организация = Справочники.Организации.ПолучитьСсылку(ИдентификаторОрганизации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СборГрафиковОтпусков", СборГрафиковОтпусков);
	Запрос.УстановитьПараметр("Организация", ПараметрыДокумента.Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикОтпусков.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ГрафикОтпусков КАК ГрафикОтпусков
		|ГДЕ
		|	ГрафикОтпусков.СборГрафиковОтпусков = &СборГрафиковОтпусков
		|	И ГрафикОтпусков.Организация = &Организация
		|	И НЕ ГрафикОтпусков.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикОтпусков.Проведен УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ПараметрыДокумента.Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьСозданияГрафикаОтпусков()
	
	Если Не Объект.СборЗавершен Тогда 
		Для Каждого КнопкаФормы Из Элементы.ПодменюГрафикОтпусков.ПодчиненныеЭлементы Цикл 
			КнопкаФормы.Видимость = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого КнопкаФормы Из Элементы.ПодменюГрафикОтпусков.ПодчиненныеЭлементы Цикл 
		КнопкаФормы.Видимость = КомандыСозданияГрафикаОтпусков.Получить(КнопкаФормы.ИмяКоманды) <> Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыСозданияГрафикаОтпусков()
	
	ИменаКоманд = Новый Соответствие;
	Если Не Объект.СборЗавершен Тогда 
		КомандыСозданияГрафикаОтпусков = Новый ФиксированноеСоответствие(ИменаКоманд);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КорневойСборГрафиков", Объект.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СборГрафиковОтпусковСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Документ.СборГрафиковОтпусков.Сотрудники КАК СборГрафиковОтпусковСотрудники
		|ГДЕ
		|	СборГрафиковОтпусковСотрудники.Ссылка.КорневойСборГрафиков = &КорневойСборГрафиков";
	
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолучения.КадровыеДанные = "Организация";
	ДанныеОрганизаций = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	ДанныеОрганизаций.Свернуть("Организация");
	
	Для Каждого ДанныеОрганизации Из ДанныеОрганизаций Цикл 
		ИменаКоманд.Вставить(ИмяКомандыСоздатьГрафикОтпусков(ДанныеОрганизации.Организация), ДанныеОрганизации.Организация);
	КонецЦикла;
	
	КомандыСозданияГрафикаОтпусков = Новый ФиксированноеСоответствие(ИменаКоманд);
	
КонецПроцедуры

#КонецОбласти
