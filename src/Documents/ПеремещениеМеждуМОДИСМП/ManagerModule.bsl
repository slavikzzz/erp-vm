#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
// Параметры:
//  ТребуетсяПовторноеОформление - Булево
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеПолучено);
		Статусы.Добавить(Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ПеремещениеОформлено);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОформлениеПеремещенияОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОтменитеРазрешениеОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Статус по умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// Параметры:
//  СтруктураПараметров - Структура из КлючИЗначение
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеРазрешениеНаОтгрузкуПродукции;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеРазрешениеНаОтгрузкуПродукции);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеКПередаче);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОформлениеПеремещенияКПередаче);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОтменитеРазрешениеКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеРазрешениеНаОтгрузкуПродукции);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОформлениеПеремещенияОбрабатывется;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОформлениеПеремещенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеРазрешениеНаОтгрузкуПродукции);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОтменитеРазрешениеОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОтменитеРазрешениеОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеРазрешениеНаОтгрузкуПродукции);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка
		Или Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
			И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеПолучено;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеРазрешениеНаОтгрузкуПродукции);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеОшибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеРазрешениеНаОтгрузкуПродукции);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД
		Или Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
			И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ПеремещениеОформлено;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОформлениеПеремещенияОшибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеРазрешениеНаОтгрузкуПродукции);
		
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки
		Или Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
			И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.РазрешениеОтменено;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПеремещенийМеждуМОДИСМП.ОформлениеПеремещенияОшибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеРазрешениеНаОтгрузкуПродукции);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
		ДокументСсылка,
		ДополнительныеПараметры.СтатусОбработки,
		Статусы);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Новый статус.
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПеремещенийМеждуМОДИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ Перемещение между МОД ИС МП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеРазрешениеНаОтгрузкуПродукции Тогда
		
		Возврат ЗапросРазрешенияНаОтгрузкуПродукции(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение Тогда
		
		Возврат ОформлениеПеремещения(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеРазрешениеНаОтгрузкуПродукции Тогда
		
		Возврат ОтменаРазрешенияНаОтгрузкуПродукции(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ПеремещениеМеждуМОДИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ПеремещениеМеждуМОДИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ПеремещениеМеждуМОДИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//  Ограничение - Структура - Структура ограничения:
// 	 * Текст - Строка - Текст ограничения.
// 
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ПеремещениеМеждуМОДИСМП, Ограничение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// Функция возвращает список доступных видов продукции для работы с документом Перемещение между МОД ИС МП.
//  
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС
Функция ДоступныеВидыПродукцииИСМП() Экспорт
	
	Возврат ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ВидыПродукцииВнутреннегоПеремещенияМеждуМОД();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Сторно");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ИнтеграцияИС.ЗаголовокДокументаПоддерживающегоКорректировку(Данные.Ссылка, Данные.Сторно, Данные.Номер, Данные.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Результат, Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		
		ПараметрыЗаполнения = ПараметрыЗаполнения();
		ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения);
		
		Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
		Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	ОтразитьРезультатыПроверкиИПодбораТовары(ПараметрыОкончанияПроверки);
КонецПроцедуры

#КонецОбласти

#Область Товары

// Дополняет для переданного документа таблицу его товаров, являющихся маркируемой продукцией требуемого вида.
//
// Параметры:
//  ТаблицаМаркируемойПродукции - ТаблицаЗначений - таблица с подобранной продукцией переданного документа:
//   * GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//   * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//   * Количество     - Число                                      - количество.
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП
//
Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ВидМаркируемойПродукции, ДокументСсылка) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ПеремещениеМеждуМОД_ИСМПТовары.Номенклатура      КАК Номенклатура,
		|	ПеремещениеМеждуМОД_ИСМПТовары.Характеристика    КАК Характеристика,
		|	ПеремещениеМеждуМОД_ИСМПТовары.Серия             КАК Серия,
		|	СУММА(ПеремещениеМеждуМОД_ИСМПТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ПеремещениеМеждуМОДИСМП.Товары КАК ПеремещениеМеждуМОД_ИСМПТовары
		|ГДЕ
		|	ПеремещениеМеждуМОД_ИСМПТовары.Ссылка = &ДокументСсылка
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеМеждуМОД_ИСМПТовары.Номенклатура,
		|	ПеремещениеМеждуМОД_ИСМПТовары.Характеристика,
		|	ПеремещениеМеждуМОД_ИСМПТовары.Серия");
	ТекстыЗапроса.Добавить(ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции("ДанныеДокумента"));
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеДокумента.Номенклатура,
		|	ДанныеДокумента.Характеристика,
		|	ДанныеДокумента.Серия,
		|	ДанныеДокумента.Количество
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО СвойстваМаркируемойПродукции.Номенклатура = ДанныеДокумента.Номенклатура
		|			И СвойстваМаркируемойПродукции.ВидПродукции = &ВидМаркируемойПродукции", "Результат");
		
	Запрос.УстановитьПараметр("ДокументСсылка",          ДокументСсылка);
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
	
	Выборка = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса).Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		Неопределено,
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - См. Обработки.ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора
Процедура ОтразитьРезультатыПроверкиИПодбораТовары(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ШтрихкодыУпаковок = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	ВидПродукции = ПараметрыОкончанияПроверки.ВидПродукцииИС;
	ШтрихкодированиеИСПереопределяемый.ВыделитьШтрихкодыСодержащиеВидыПродукции(
		ШтрихкодыУпаковок, ВидПродукции);
	Товары = ИнтеграцияИС.СвойстваТаблицыПродукции(ДокументОбъект.Товары.Выгрузить(, "Номенклатура"))
		.Скопировать(Новый Структура("ВидПродукции", ВидПродукции));
	
	ДобавленныеСтроки = Новый Массив;
	ИзмененныеСтроки = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0
			И СтрокаТаблицы.КоличествоПотребительскихУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции();
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
			ДобавленныеСтроки.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			ИзмененныеСтроки.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьСтрокиТЧТовары(ДокументОбъект, ДобавленныеСтроки, ИзмененныеСтроки);
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если (СтрокаТовары.Количество = 0 И СтрокаТовары.КоличествоПотребительскихУпаковок = 0)
			Или (ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено
				И Товары.Найти(СтрокаТовары.Номенклатура) <> Неопределено)Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	// Обновление таблицы "ШтрихкодыУпаковок".
	ИндексТабЧастиТовары = ДокументОбъект.ШтрихкодыУпаковок.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		СтрокаШтрихкоды = ДокументОбъект.ШтрихкодыУпаковок[ИндексТабЧастиТовары];
		Если ШтрихкодыУпаковок.Найти(СтрокаШтрихкоды.ШтрихкодУпаковки) <> Неопределено Тогда
			ДокументОбъект.ШтрихкодыУпаковок.Удалить(СтрокаШтрихкоды);
		КонецЕсли;
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЗаполнитьЗначенияСвойств(ДокументОбъект.ШтрихкодыУпаковок.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ФормированиеТитуловЭД

// Функция возвращат сформированный титул продавца по переданному документу Перемещение между МОД.
// 
// Параметры:
//  ОбъектУчета - ДокументСсылка.ПеремещениеМеждуМОДИСМП
// 
// Возвращаемое значение:
//  Структура - Титул продавца в формате 5_02:
// * Отказ                  - Булево - Истина, если в процессе формирования выявились ошибки
// * ТекстОшибки            - Строка - общий текст ошибки
// * МассивОшибокЗаполнения - Массив из Строка - массив ошибок формирования
// * ДвоичныеДанныеФайла    - ДвоичныеДанные, Неопределено - данные сформированного титула в формате XML
// * ИмяФайла               - Строка - имя файла ЭД.
Функция ТитулПродавцаВФормате_5_02(ОбъектУчета) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Отказ",                  Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки",            "");
	СтруктураВозврата.Вставить("МассивОшибокЗаполнения", Новый Массив);
	СтруктураВозврата.Вставить("ДвоичныеДанныеФайла",    Неопределено);
	СтруктураВозврата.Вставить("ИмяФайла",               "");
	
	ФорматУПД = ЭлектронноеВзаимодействиеИСМП.ПространствоИмен_УПД_5_03_ИнформацияПродавца();
	ЭтоПоддерживаемыйФормат = ЭлектронноеВзаимодействиеИСМП.ПроверитьПоддержкуФорматаЭДО(ФорматУПД);
	
	Если Не ЭтоПоддерживаемыйФормат Тогда
		
		СтруктураВозврата.Отказ       = Истина;
		СтруктураВозврата.ТекстОшибки = НСтр("ru = 'Текущая версия конфигурации не поддерживает работу с форматом УПД 5.03 (ЕД-7-26/970@).';
											|en = 'Текущая версия конфигурации не поддерживает работу с форматом УПД 5.03 (ЕД-7-26/970@).'");
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУчета, "Организация");
	
	ИдентификаторОтправителя = ЭлектронноеВзаимодействиеИСМП.ИдентификаторУчетнойЗаписиЭДО(Организация);
	ИдентификаторПолучателя  = ИдентификаторОтправителя;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОтправителя)
		Или Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		
		СтруктураВозврата.Отказ       = Истина;
		
		ШаблонСообщения = НСтр("ru = 'Для перемещения товаров между МОД требуется настроенная учетная запись ЭДО организации %1.';
								|en = 'Для перемещения товаров между МОД требуется настроенная учетная запись ЭДО организации %1.'");
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, Организация);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ПутьКМакетуДанныхЭД = "ОбменСКонтрагентами.УПД_ИнформацияПродавца_5_02";
	ДеревоДанных = ЭлектронноеВзаимодействиеИСМП.ДеревоЭлектронногоДокумента(ПутьКМакетуДанныхЭД);
	
	Если ДеревоДанных = Неопределено Тогда
		
		СтруктураВозврата.Отказ       = Истина;
		
		ШаблонСообщения = НСтр("ru = 'Невозможно заполнить титул продавца на основании документа %1.
				|Обратитесь к Администратору.
				|Возможны ошибки встраивания.';
				|en = 'Невозможно заполнить титул продавца на основании документа %1.
				|Обратитесь к Администратору.
				|Возможны ошибки встраивания.'");;
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, ОбъектУчета);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Отказ = Ложь;
	ИнтеграцияИСМПСлужебный.ПроверитьЗаполнениеШтрихкодовУпаковокПеремещенияМеждуМОД(ОбъектУчета, Отказ);
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПроверитьЗаполнениеЭлектронногоДокументаНаАкцизныеМарки(ОбъектУчета, Отказ);
	
	Если Отказ Тогда
		
		СтруктураВозврата.Отказ       = Истина;
		
		ШаблонСообщения = НСтр("ru = 'Найдены ошибки при проверке заполнения акцизных марок в документе %1.';
								|en = 'Найдены ошибки при проверке заполнения акцизных марок в документе %1.'");
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, ОбъектУчета);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	СтруктураЭД = Новый Структура();
	СтруктураЭД.Вставить("Функция",                  "ДОП");
	СтруктураЭД.Вставить("ФорматУПД",                ФорматУПД);
	СтруктураЭД.Вставить("ОбъектУчета",              ОбъектУчета);
	СтруктураЭД.Вставить("Организация",              Организация);
	СтруктураЭД.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
	СтруктураЭД.Вставить("ИдентификаторПолучателя",  ИдентификаторПолучателя);
	
	ДеревоДанных = ЭлектронноеВзаимодействиеИСМП.ДеревоПоОписаниюДанныхОбъектаУчета(ОбъектУчета, СтруктураЭД);
	
	ЭлектронноеВзаимодействиеИСМП.СформироватьДанныеСообщенияОтправителя(СтруктураВозврата,
		ДеревоДанных,
		СтруктураЭД,
		ИдентификаторОтправителя,
		ИдентификаторПолучателя);
		
	Если СтруктураВозврата.ДвоичныеДанныеФайла = Неопределено Тогда
		
		СтруктураВозврата.Отказ       = Истина;
		
		ШаблонСообщения = НСтр("ru = 'Невозможно заполнить титул продавца на основании документа %1.
				|Обратитесь к Администратору.
				|Возможны ошибки встраивания.';
				|en = 'Невозможно заполнить титул продавца на основании документа %1.
				|Обратитесь к Администратору.
				|Возможны ошибки встраивания.'");
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, ОбъектУчета);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция возвращат сформированный титул покупателя по переданному документу Перемещение между МОД.
// 
// Параметры:
//  ОбъектУчета - ДокументСсылка.ПеремещениеМеждуМОДИСМП
//  ИмяФайла - Строка - имя файла с титулом продавца
//  ДвоичныеДанныеФайла - ДвоичныеДанные - титул продавца.
// 
// Возвращаемое значение:
//  Структура - Титул продавца в формате 5_02:
// * Отказ                  - Булево - Истина, если в процессе формирования выявились ошибки
// * ТекстОшибки            - Строка - общий текст ошибки
// * МассивОшибокЗаполнения - Массив из Строка - массив ошибок формирования
// * ДвоичныеДанныеФайла    - ДвоичныеДанные, Неопределено - данные сформированного титула в формате XML
// * ИмяФайла               - Строка - имя файла ЭД.
Функция ТитулПокупателяВФормате_5_02(ОбъектУчета, ИмяФайла, ДвоичныеДанныеФайла) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Отказ",                  Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки",            "");
	СтруктураВозврата.Вставить("МассивОшибокЗаполнения", Новый Массив);
	СтруктураВозврата.Вставить("ДвоичныеДанныеФайла",    Неопределено);
	СтруктураВозврата.Вставить("ИмяФайла",               "");
	
	ИмяФайлаБезРасширения = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	
	Если МассивСтрок.Количество() > 1 Тогда
		ИмяФайлаБезРасширения = МассивСтрок[0];
	КонецЕсли;
	
	ДанныеОтветногоТитула = ЭлектронноеВзаимодействиеИСМП.СформироватьДеревоОтветногоТитулаПокупателя(ОбъектУчета, ИмяФайла, ДвоичныеДанныеФайла);
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, "Дата, Организация, Организация.ИНН, Организация.КПП");
	
	СодержаниеОперации = НСтр("ru = 'Товары принял без претензий';
								|en = 'Товары принял без претензий'");
	
	ЗначенияРеквизитовПоЮрФизЛицу = СтруктураДанныхЮрФизЛица();
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьДанныеУчастниковПеремещенияМеждуМОД_5_02(ЗначенияРеквизитовПоЮрФизЛицу, ДанныеДокумента.Организация, ДанныеДокумента.Дата);
	
	СоставительДокумента = ?(ЗначениеЗаполнено(ЗначенияРеквизитовПоЮрФизЛицу.КПП),
		СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3';
						|en = '%1, ИНН/КПП %2/%3'"),
			ЗначенияРеквизитовПоЮрФизЛицу.ПолноеНаименование, ЗначенияРеквизитовПоЮрФизЛицу.ИНН, ЗначенияРеквизитовПоЮрФизЛицу.КПП),
		СтрШаблон(НСтр("ru = '%1, ИНН %2';
						|en = '%1, ИНН %2'"),
			ЗначенияРеквизитовПоЮрФизЛицу.ПолноеНаименование, ЗначенияРеквизитовПоЮрФизЛицу.ИНН));
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(
		ДанныеОтветногоТитула.ДеревоДанных, "СодержаниеФХЖ.СведенияОПринятииТоваров.ДатаПолученияТоваров", ДанныеДокумента.Дата);
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(
		ДанныеОтветногоТитула.ДеревоДанных, "СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(
		ДанныеОтветногоТитула.ДеревоДанных, "СодержаниеФХЖ.СведенияОПринятииТоваров.СодержаниеОперации", СодержаниеОперации);
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(
		ДанныеОтветногоТитула.ДеревоДанных, "СодержаниеФХЖ.СведенияОПринятииТоваров.КодИтога", "1");
	
	ИдентификаторОтправителя = ЭлектронноеВзаимодействиеИСМП.ИдентификаторУчетнойЗаписиЭДО(ДанныеДокумента.Организация);
	ИдентификаторПолучателя  = ИдентификаторОтправителя;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОтправителя)
		Или Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		
		СтруктураВозврата.Отказ       = Истина;
		
		ШаблонСообщения = НСтр("ru = 'Для перемещения товаров между МОД требуется настроенная учетная запись ЭДО организации %1.';
								|en = 'Для перемещения товаров между МОД требуется настроенная учетная запись ЭДО организации %1.'");
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, ДанныеДокумента.Организация);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	СтруктураЭД = Новый Структура();
	СтруктураЭД.Вставить("ОбъектУчета",           ОбъектУчета);
	СтруктураЭД.Вставить("ДвоичныеДанныеФайла",   ДвоичныеДанныеФайла);
	СтруктураЭД.Вставить("ИмяФайлаБезРасширения", ИмяФайлаБезРасширения);
	
	ЭлектронноеВзаимодействиеИСМП.СформироватьДанныеСообщенияПолучателя(СтруктураВозврата,
		ДанныеОтветногоТитула,
		СтруктураЭД,
		ИдентификаторОтправителя,
		ИдентификаторПолучателя);
	
	Если СтруктураВозврата.ДвоичныеДанныеФайла = Неопределено Тогда
		
		СтруктураВозврата.Отказ       = Истина;
		
		ШаблонСообщения = НСтр("ru = 'Невозможно заполнить титул покупателя на основании документа %1.
				|Обратитесь к Администратору.
				|Возможны ошибки встраивания.';
				|en = 'Невозможно заполнить титул покупателя на основании документа %1.
				|Обратитесь к Администратору.
				|Возможны ошибки встраивания.'");
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, ОбъектУчета);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьДанныеУПД_5_02_ИнформацияПродавца(Основание, Настройки, ДеревоДанных, Описание, Отказ) Экспорт
	
	СтруктураДанных = ПолучитьДанныеДляЭД(Основание);
	
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	ОбщийПуть = "СведенияОСчетеФактуре.";
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		ОбщийПуть + "НомерДокумента", ВыборкаШапки.НомерДокумента);
		
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		ОбщийПуть + "ДатаДокумента", ВыборкаШапки.ДатаДокумента);
	
	СведенияОПродавце = СтруктураДанныхЮрФизЛица();
	ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, СведенияОПродавце, ВыборкаШапки.ДатаДокумента);
	
	ПутьТаблицы = "СведенияОСчетеФактуре.СведенияОПродавцах";
	ИмяУчастника = "Продавец";
	
	ТаблицаПродавцов = ПолучитьТаблицуУчастниковУПД_5_02(ДеревоДанных, ПутьТаблицы);
	ДанныеПродавца   = ПолучитьДанныеУчастникаУПД(СведенияОПродавце);
	
	ДобавитьУчастникаУПД_5_02(ДеревоДанных, ТаблицаПродавцов, ДанныеПродавца, ПутьТаблицы, ИмяУчастника);
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПродавцов, ИмяУчастника);
	
	ЭлектронноеВзаимодействиеИСМП.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПродавцов, ПутьТаблицы);
	
	ЭтоИндивидуальныйПредприниматель = ОбщегоНазначенияИСВызовСервера.ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(ВыборкаШапки.Организация);
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		СведенияОПокупателе = СведенияОПродавце;
	Иначе
		
		ДополнительныеПараметры = Новый Структура("Организация", ВыборкаШапки.Организация);
		
		СведенияОПокупателе = СтруктураДанныхЮрФизЛица();
		ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Получатель, СведенияОПокупателе, ВыборкаШапки.ДатаДокумента, ДополнительныеПараметры);
		
	КонецЕсли;
	
	ПутьТаблицы = "СведенияОСчетеФактуре.СведенияОПокупателях";
	ИмяУчастника = "Покупатель";
	
	ТаблицаПокупателей = ПолучитьТаблицуУчастниковУПД_5_02(ДеревоДанных, ПутьТаблицы);
	ДанныеПокупателя   = ПолучитьДанныеУчастникаУПД(СведенияОПокупателе);
	
	ДобавитьУчастникаУПД_5_02(ДеревоДанных, ТаблицаПокупателей, ДанныеПокупателя, ПутьТаблицы, ИмяУчастника);
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаПокупателей, ИмяУчастника);
	
	ЭлектронноеВзаимодействиеИСМП.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаПокупателей, ПутьТаблицы);
	
	СоставительДокументаНаименование = СведенияОПродавце.ПолноеНаименование
		+ ?(ЗначениеЗаполнено(СведенияОПродавце.КПП),
			СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2';
							|en = ', ИНН/КПП %1/%2'"), СведенияОПродавце.ИНН, СведенияОПродавце.КПП),
			СтрШаблон(НСтр("ru = ', ИНН %1';
							|en = ', ИНН %1'"), СведенияОПродавце.ИНН));
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокументаНаименование);
	
	ВалютаКод = "643";
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОСчетеФактуре.Валюта.Код", ВалютаКод);
	
	НаименованиеВалютыПоОКВ = "Российский рубль";
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СведенияОСчетеФактуре.Валюта.Наименование",
		НаименованиеВалютыПоОКВ);
		
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"Функция",
		"ДОП");
	
	ПутьТаблицы = "СведенияОСчетеФактуре.СведенияОГрузоотправителях";
	ИмяУчастника = "Грузоотправитель";
	ТаблицаГрузоотправителей = ПолучитьТаблицуУчастниковУПД_5_02(ДеревоДанных, ПутьТаблицы);
	
	Если Не ЭтоИндивидуальныйПредприниматель
		И ЗначениеЗаполнено(ВыборкаШапки.Отправитель)
		И ВыборкаШапки.Отправитель <> ВыборкаШапки.Организация Тогда
		
		ДополнительныеПараметры = Новый Структура("Организация", ВыборкаШапки.Организация);
		
		СведенияОГрузоотправителе = СтруктураДанныхЮрФизЛица();
		ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Отправитель, СведенияОГрузоотправителе, ВыборкаШапки.ДатаДокумента, ДополнительныеПараметры);
		
		ДанныеГрузоотправителя = ПолучитьДанныеУчастникаУПД(СведенияОГрузоотправителе);
		ДобавитьУчастникаУПД_5_02(ДеревоДанных, ТаблицаГрузоотправителей, ДанныеГрузоотправителя, ПутьТаблицы, ИмяУчастника);
		
	Иначе
		
		СтрокаГрузоотправителя = ТаблицаГрузоотправителей.Добавить();
		СтрокаГрузоотправителя.ОнЖе = Истина;
		
	КонецЕсли;
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузоотправителей, ИмяУчастника);
	ЭлектронноеВзаимодействиеИСМП.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, ПутьТаблицы);
	
	ПутьТаблицы = "СведенияОСчетеФактуре.СведенияОГрузополучателях";
	ИмяУчастника = "Грузополучатель";
	ТаблицаГрузополучателей = ПолучитьТаблицуУчастниковУПД_5_02(ДеревоДанных, ПутьТаблицы);
	
	ДанныеГрузополучателя = ПолучитьДанныеУчастникаУПД(СведенияОПокупателе);
	ДобавитьУчастникаУПД_5_02(ДеревоДанных, ТаблицаГрузополучателей, ДанныеГрузополучателя, ПутьТаблицы, ИмяУчастника);
	
	ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаГрузополучателей, ИмяУчастника);
	ЭлектронноеВзаимодействиеИСМП.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузополучателей, ПутьТаблицы);
	
	Путь = "СведенияОПередаче.Операция.ОснованиеОтгрузкиПередачи.";
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		Путь + "БезДокументаОснования", Истина);
	
	Если ЗначениеЗаполнено(ВыборкаШапки.НомерТТН) Тогда
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерТранспортнойНакладной", ВыборкаШапки.НомерТТН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ДатаТТН) Тогда
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаТранспортнойНакладной", ВыборкаШапки.ДатаТТН);
	КонецЕсли;
	
	// Период оказания услуг (поставки товаров).
	СодержаниеОперации = "-";
	
	СведенияОТоварах = Новый ТаблицаЗначений;
	СведенияОТоварах.Колонки.Добавить("НомерСтроки");
	СведенияОТоварах.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	СведенияОТоварах.Колонки.Добавить("ИдентификаторСтроки");
	СведенияОТоварах.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2000)));
	СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
	СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	СведенияОТоварах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	СведенияОТоварах.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	СведенияОТоварах.Колонки.Добавить("СтоимостьБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	СведенияОТоварах.Колонки.Добавить("СтоимостьСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	СведенияОТоварах.Колонки.Добавить("СуммаНалога");
	СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
	СведенияОТоварах.Колонки.Добавить("СуммаАкциза");
	СведенияОТоварах.Колонки.Добавить("СведенияОДекларации");
	СведенияОТоварах.Колонки.Добавить("Номенклатура");
	СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмерения");
	СведенияОТоварах.Колонки.Добавить("НаименованиеНавигационнаяСсылка");
	СведенияОТоварах.Колонки.Добавить("ОснованиеОсвобожденияОтНДС");
	СведенияОТоварах.Колонки.Добавить("Сопоставление");
	СведенияОТоварах.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	СведенияОТоварах.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	СведенияОТоварах.Колонки.Добавить("КодВидаТовара", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	СведенияОТоварах.Колонки.Добавить("СтранаПроисхождения", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	СведенияОТоварах.Колонки.Добавить("СведенияОМаркировке");
	СведенияОТоварах.Колонки.Добавить("ГТИН", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	СведенияОТоварах.Колонки.Добавить("СведенияОПрослеживаемости");
	СведенияОТоварах.Колонки.Добавить("ДанныеДляРасчетаАмортизации");
	
	// Служебная колонка для расчета количества
	СведенияОТоварах.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26, 11)));
	
	НомерСтроки = 1;
	
	ВыборкаТоваров = СтруктураДанных.Товары;
	
	ТаблицаКодовМаркировки = Неопределено;
	СтруктураДанных.Свойство("Маркировка", ТаблицаКодовМаркировки);
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		НоваяСтрока = СведенияОТоварах.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = ВыборкаТоваров.НомерСтроки;
		НоваяСтрока.Код = ВыборкаТоваров.НоменклатураКод;
		
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока.Наименование = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(ВыборкаТоваров.Номенклатура, ВыборкаТоваров.Характеристика);
		НоваяСтрока.Количество = ВыборкаТоваров.Количество;
		НоваяСтрока.КоличествоУпаковок = ВыборкаТоваров.КоличествоУпаковок;
		НоваяСтрока.СуммаАкциза = Новый Структура("Сумма, БезАкциза", Неопределено, Истина);
		НоваяСтрока.СтоимостьБезНалога = 0;
		
		НоваяСтрока.Номенклатура        = ВыборкаТоваров.Номенклатура;
		
		Если ЗначениеЗаполнено(ВыборкаТоваров.Упаковка) Тогда
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаТоваров.Упаковка;
		КонецЕсли;
		
		НоваяСтрока.Признак = "1";
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_5_02(НоваяСтрока, ВыборкаТоваров, ТаблицаКодовМаркировки);
	
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.ДополнитьДанныеДляФормированияЭлектронногоДокументаПоПеремещениюМеждуМОДИСМП(ДеревоДанных, СведенияОТоварах, Основание);
	
	Отказ = Ложь;
	
	ЭлектронноеВзаимодействиеИСМП.ПроверитьСведенияОМаркировке_5_02(ТаблицаКодовМаркировки, Отказ);
	ЭлектронноеВзаимодействиеИСМП.ЗаполнениеПоказателейМаркировкиВДереве_5_02(ДеревоДанных, ТаблицаКодовМаркировки);
	ЭлектронноеВзаимодействиеИСМП.ДобавитьСведенияОУчастникахОбмена_5_02(ТаблицаКодовМаркировки, Основание, СтруктураДанных, ДеревоДанных, ВыборкаШапки.ДатаДокумента, Отказ);
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ТаблицаСчетаФактуры.ВсегоКОплате.СтоимостьБезНалога", СведенияОТоварах.Итог("СтоимостьБезНалога"));
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ТаблицаСчетаФактуры.ВсегоКОплате.СтоимостьСНалогом", СведенияОТоварах.Итог("СтоимостьСНалогом"));
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ТаблицаСчетаФактуры.ВсегоКОплате.Количество", СведенияОТоварах.Итог("Количество"));
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ТаблицаСчетаФактуры.ВсегоКОплате.Количество", СведенияОТоварах.Итог("Количество"));
	
	ЭлектронноеВзаимодействиеИСМП.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях");
	
	СоставСодержания = Новый Массив;
	СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.';
									|en = 'Товары переданы.'"));
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", Ложь);
	ЭлектронноеВзаимодействиеИСМП.ДобавитьСведенияОПеревозочныхДокументах_5_02(ТаблицаКодовМаркировки, ВыборкаШапки.Ссылка, СтруктураДанных, ДеревоДанных, ВыборкаШапки.ДатаДокумента, Отказ);
	
	Если Отказ Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно заполнить титул продавца на основании документа %1.';
								|en = 'Невозможно заполнить титул продавца на основании документа %1.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Истина);
		
	КонецЕсли;
	
	Путь = "СведенияОПередаче.Операция.";
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "СодержаниеОперации", СодержаниеОперации);
	ЭлектронноеВзаимодействиеИСМП.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, Путь + "ДатаОтгрузки", ВыборкаШапки.ДатаДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУПД_5_02_ИнформацияПокупателя(Основание, Данные, Отказ) Экспорт
	
	ДатаПолученияТоваров = Дата(1, 1, 1);
	СодержаниеОперации   = "-";
	СоставительДокумента = "-";
	КодИтога             = "1";
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СоставительДокументаНаименование", СоставительДокумента);
	
	Если ЗначениеЗаполнено(ДатаПолученияТоваров) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			Данные, "СодержаниеФХЖ.СведенияОПринятииТоваров.ДатаПолученияТоваров", ДатаПолученияТоваров);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СодержаниеФХЖ.СведенияОПринятииТоваров.СодержаниеОперации", СодержаниеОперации);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
		Данные, "СодержаниеФХЖ.СведенияОПринятииТоваров.КодИтога", КодИтога);
	
КонецПроцедуры

Функция ДополнитьТитулПродавцаПодписантом(ОбъектУчета, Организация, ДвоичныеДанные, ИмяФайла, Сертификат) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Отказ",                  Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки",            "");
	СтруктураВозврата.Вставить("ДвоичныеДанныеФайла",    Неопределено);
	
	ОписаниеФайла = Новый Структура();
	ОписаниеФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	ОписаниеФайла.Вставить("ИмяФайла",       ИмяФайла);
	
	РезультатПодписания = ЭлектронноеВзаимодействиеИСМП.ЗаполнитьПодписантаИЭлектроннуюПодпись(ОписаниеФайла, Организация, Сертификат);
	
	Если РезультатПодписания.ДвоичныеДанные <> Неопределено Тогда
		СтруктураВозврата.ДвоичныеДанныеФайла = РезультатПодписания.ДвоичныеДанные;
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Невозможно заполнить ЭП в титуле продавца на основании документа %1.
			|Обратитесь к Администратору.
			|Возможны ошибки встраивания.';
			|en = 'Невозможно заполнить ЭП в титуле продавца на основании документа %1.
			|Обратитесь к Администратору.
			|Возможны ошибки встраивания.'");
		
		СтруктураВозврата.Отказ       = Истина;
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, ОбъектУчета);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДополнитьТитулПокупателяПодписантомИЭППродавца(ОбъектУчета, Организация, ДвоичныеДанные, ИмяФайла, Сертификат, Подпись) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Отказ",                  Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки",            "");
	СтруктураВозврата.Вставить("ДвоичныеДанныеФайла",    Неопределено);
	
	ОписаниеФайла = Новый Структура();
	ОписаниеФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	ОписаниеФайла.Вставить("ИмяФайла",       ИмяФайла);
	
	РезультатПодписания = ЭлектронноеВзаимодействиеИСМП.ЗаполнитьПодписантаИЭлектроннуюПодпись(ОписаниеФайла, Организация, Сертификат, Подпись);
	
	Если РезультатПодписания.ДвоичныеДанные <> Неопределено Тогда
		СтруктураВозврата.ДвоичныеДанныеФайла = РезультатПодписания.ДвоичныеДанные;
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Невозможно заполнить ЭП в титуле покупателя на основании документа %1.
			|Обратитесь к Администратору.
			|Возможны ошибки встраивания.';
			|en = 'Невозможно заполнить ЭП в титуле покупателя на основании документа %1.
			|Обратитесь к Администратору.
			|Возможны ошибки встраивания.'");
		
		СтруктураВозврата.Отказ       = Истина;
		СтруктураВозврата.ТекстОшибки = СтрШаблон(ШаблонСообщения, ОбъектУчета);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция возвращает данные документа Перемещение между МОД для формирования электронного документа.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП
// 
// Возвращаемое значение:
//  Структура - Данные для ЭД:
// * ВыборкаШапки - ВыборкаИзРезультатаЗапроса - данные по шапке документа.
// * Товары - ВыборкаИзРезультатаЗапроса - данные по табличной части товаров.
// * ШтрихкодыУпаковок - ВыборкаИзРезультатаЗапроса - данные по табличной части штрихкодов.
// * Маркировка - ТаблицаЗначений
//
Функция ПолучитьДанныеДляЭД(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеМеждуМОДИСМП.Ссылка                                          КАК Ссылка,
		|	ПеремещениеМеждуМОДИСМП.Номер                                           КАК НомерДокумента,
		|	ПеремещениеМеждуМОДИСМП.Дата                                            КАК ДатаДокумента,
		|	ПеремещениеМеждуМОДИСМП.Организация                                     КАК Организация,
		|	ПеремещениеМеждуМОДИСМП.ОтправительОбъект                               КАК ОтправительОбъект,
		|	ПеремещениеМеждуМОДИСМП.ОтправительАдрес                                КАК ОтправительАдрес,
		|	ПеремещениеМеждуМОДИСМП.ОтправительАдресСтрокой                         КАК ОтправительАдресСтрокой,
		|	ПеремещениеМеждуМОДИСМП.ОтправительКодФИАС                              КАК ОтправительКодФИАС,
		|	ПеремещениеМеждуМОДИСМП.Отправитель                                     КАК Отправитель,
		|	ПеремещениеМеждуМОДИСМП.ПолучательОбъект                                КАК ПолучательОбъект,
		|	ПеремещениеМеждуМОДИСМП.ПолучательАдрес                                 КАК ПолучательАдрес,
		|	ПеремещениеМеждуМОДИСМП.ПолучательАдресСтрокой                          КАК ПолучательАдресСтрокой,
		|	ПеремещениеМеждуМОДИСМП.ПолучательКодФИАС                               КАК ПолучательКодФИАС,
		|	ПеремещениеМеждуМОДИСМП.Получатель                                      КАК Получатель,
		|	ПеремещениеМеждуМОДИСМП.НомерПеревозочногоДокумента                     КАК НомерТТН,
		|	ПеремещениеМеждуМОДИСМП.ДатаПеревозочногоДокумента                      КАК ДатаТТН,
		|	ПеремещениеМеждуМОДИСМП.ИдентификаторЭлектронногоПеревозочногоДокумента КАК ИдентификаторЭПД,
		|	ПеремещениеМеждуМОДИСМП.ТранспортноеСредство                            КАК ТранспортноеСредство,
		|	ПеремещениеМеждуМОДИСМП.НомерТранспортногоСредства                      КАК НомерТС,
		|	ПеремещениеМеждуМОДИСМП.Ответственный                                   КАК Ответственный,
		|	ПеремещениеМеждуМОДИСМП.Комментарий                                     КАК Комментарий
		|ИЗ
		|	Документ.ПеремещениеМеждуМОДИСМП КАК ПеремещениеМеждуМОДИСМП
		|ГДЕ
		|	ПеремещениеМеждуМОДИСМП.Ссылка = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеМеждуМОДИСМПТовары.Ссылка                                     КАК Ссылка,
		|	ПеремещениеМеждуМОДИСМПТовары.НомерСтроки                                КАК НомерСтроки,
		|	ПеремещениеМеждуМОДИСМПТовары.Номенклатура                               КАК Номенклатура,
		|	ПеремещениеМеждуМОДИСМПТовары.Номенклатура.НаименованиеПолное            КАК НаименованиеПолное,
		|	ПеремещениеМеждуМОДИСМПТовары.Номенклатура.Код                           КАК НоменклатураКод,
		|	ПеремещениеМеждуМОДИСМПТовары.Характеристика                             КАК Характеристика,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеМеждуМОДИСМПТовары.Характеристика)              КАК ХарактеристикаНаименование,
		|	ПеремещениеМеждуМОДИСМПТовары.КоличествоУпаковок                         КАК КоличествоУпаковок,
		|	ПеремещениеМеждуМОДИСМПТовары.Количество                                 КАК Количество,
		|	ПеремещениеМеждуМОДИСМПТовары.Упаковка                                   КАК Упаковка
		|ИЗ
		|	Документ.ПеремещениеМеждуМОДИСМП.Товары КАК ПеремещениеМеждуМОДИСМПТовары
		|ГДЕ
		|	ПеремещениеМеждуМОДИСМПТовары.Ссылка = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеМеждуМОДИСМПШтрихкодыУпаковок.Ссылка           КАК Ссылка,
		|	ПеремещениеМеждуМОДИСМПШтрихкодыУпаковок.ШтрихкодУпаковки КАК Штрихкод
		|ИЗ
		|	Документ.ПеремещениеМеждуМОДИСМП.ШтрихкодыУпаковок КАК ПеремещениеМеждуМОДИСМПШтрихкодыУпаковок
		|ГДЕ
		|	ПеремещениеМеждуМОДИСМПШтрихкодыУпаковок.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ",             ДокументСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеВозврата = Новый Структура();
	ДанныеВозврата.Вставить("ВыборкаШапки",      РезультатЗапроса[0].Выбрать());
	ДанныеВозврата.Вставить("Товары",            РезультатЗапроса[1].Выбрать());
	ДанныеВозврата.Вставить("ШтрихкодыУпаковок", РезультатЗапроса[2].Выбрать());
	
	Товары     = РезультатЗапроса[1].Выгрузить();
	Маркировка = РезультатЗапроса[2].Выгрузить();
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДокументСсылка);
	ПараметрыСканирования.СсылкаНаОбъект = ДокументСсылка;
	
	Маркировка = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимоеИКодыОСУ(Маркировка, Товары, ПараметрыСканирования);
	
	ДанныеВозврата.Вставить("Маркировка", Маркировка);
	
	Возврат ДанныеВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗагрузки

Процедура ОбработкаЗагрузкиПереданногоДокумента(ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ПараметрыОбновленияСтатуса) Экспорт
	
	Если РезультатОбработкиЗаявки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
		
		// Ручная загрузка выгрузки
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ПеремещениеМеждуМОДИСМП.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		//@skip-check lock-out-of-try
		Блокировка.Заблокировать();
		
		ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
		ДокументОбъект.ИдентификаторРазрешения = ЭлементОчереди.ИдентификаторЗаявки;
		ДокументОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКодамиМаркировки

Процедура ОбработатьСтрокиТЧТовары(ДокументОбъект, ДобавленныеСтроки, ИзмененныеСтроки)
	
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	Для Каждого СтрокаТЧ Из ДобавленныеСтроки Цикл
		
		ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий, ДокументОбъект);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для Каждого СтрокаТЧ Из ИзмененныеСтроки Цикл
		
		Если ДобавленныеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
			ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий, ДокументОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(РезультатОбработки, Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
КонецПроцедуры

Процедура ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения)
	
	ИсточникДанных = Форма.Объект;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода);
	
	Если ПараметрыЗаполнения.РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = ПараметрыЗаполнения.РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции();
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ОбновляемаяСтрока);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		СтрокаТовары = НайденныеСтрокиТовары[0];
		//поле Количество
		КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
		
		Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
			КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
		КонецЕсли;
		
		Если КоличествоМаркируемойПродукции > 0 Тогда
			
			СтрокаТовары.Количество = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
			
			ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
			Если ДобавленныеСтроки = Неопределено Тогда
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			Иначе
				СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
			КонецЕсли;
			
			ОбновляемаяСтрока.Количество = КоличествоМаркируемойПродукции;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		ПараметрыЗаполнения.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
			И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, ПараметрыЗаполнения);
			
		Иначе
			
			ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, СтрокаДерева, ПараметрыЗаполнения,
				УпаковкаВерхнегоУровняСтрокиДерева);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Формирует JSON сообщения для операции запроса разрешения на отгрузку
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ Перемещение между МОД ИС МП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ЗапросРазрешенияНаОтгрузкуПродукции(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON = Новый Массив;
	
	Операция       = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеМеждуМОДИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = &Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.ИдентификаторЗаявки                КАК ИдентификаторЗаявки,
	|	Шапка.Организация                        КАК Организация,
	|	Шапка.Ссылка                             КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеМеждуМОДИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
	
		СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Не найдено данных для выгрузки.';
										|en = 'Не найдено данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
	
	КонецЕсли;
	
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	Организация       = Шапка.Организация;
	
	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	СообщениеJSON.Операция         = Операция;
	СообщениеJSON.ПараметрыЗапроса = Новый Структура;
	СообщениеJSON.Описание         = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	СообщениеJSON.ПараметрыЗапроса.Вставить("ТипДокумента", "XML");
 	
	РезультатФормированияТитулаПродавца = ТитулПродавцаВФормате_5_02(ДокументСсылка);
	
	Если РезультатФормированияТитулаПродавца.Отказ Тогда
		
		ТекстОшибки = ТекстОшибкиПриФормированииТитула(РезультатФормированияТитулаПродавца, ДокументСсылка);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ДвоичныеДанныеДляПодписания = РезультатФормированияТитулаПродавца.ДвоичныеДанныеФайла;
	
	СообщениеJSON.ПараметрыЗапроса.Вставить("ДвоичныеДанныеДляПодписания", ДвоичныеДанныеДляПодписания);
	СообщениеJSON.ТекстСообщенияJSON  = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеДляПодписания, "windows-1251");
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON.Версия            = НомерВерсии;
	СообщениеJSON.Организация       = Организация;
	СообщениеJSON.ВидПродукции      = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.Документ          = ДокументСсылка;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для операции перемещения товаров между МОД
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ Перемещение между МОД ИС МП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ОформлениеПеремещения(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON = Новый Массив;
	Операция      = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеМеждуМОДИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = &Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.ИдентификаторЗаявки                КАК ИдентификаторЗаявки,
	|	Шапка.Организация                        КАК Организация,
	|	Шапка.Получатель                         КАК ОрганизацияПодписиДополнительногоСообщения,
	|	Шапка.Ссылка                             КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеМеждуМОДИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
	
		СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Не найдено данных для выгрузки.';
										|en = 'Не найдено данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
	
	КонецЕсли;
	
	Организация = Шапка.Организация;
	
	Если ЗначениеЗаполнено(Шапка.ОрганизацияПодписиДополнительногоСообщения)
		И Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(ТипЗнч(Шапка.ОрганизацияПодписиДополнительногоСообщения)) Тогда
		ОрганизацияПокупателя = Шапка.ОрганизацияПодписиДополнительногоСообщения;
	Иначе
		ОрганизацияПокупателя = Шапка.Организация;
	КонецЕсли;
	
	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	
	СообщениеJSON.ПараметрыЗапроса = Новый Структура;
	СообщениеJSON.ПараметрыЗапроса.Вставить("ТипДокумента",       "XML");
	СообщениеJSON.ПараметрыЗапроса.Вставить("ДальнейшееДействие", Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение);
	СообщениеJSON.ПараметрыЗапроса.Вставить("Ссылка",             ДокументСсылка);
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ПараметрыОбработкиДокумента")
		И ДополнительныеПараметры.ПараметрыОбработкиДокумента.Свойство("ВыполнитьПослеПодписания") Тогда
		
		ПараметрыОбработкиДокумента = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
		
		Операция                = ПараметрыОбработкиДокумента.ВыполнитьПослеПодписания;
		ИмяФайлаТитулПродавца   = ПараметрыОбработкиДокумента.ИмяФайлаТитулПродавца;
		ИмяФайлаТитулПокупателя = ПараметрыОбработкиДокумента.ИмяФайлаТитулПокупателя;
		
		ТекущееСообщение = ДополнительныеПараметры.ПараметрыОбмена.ОчередьСообщений.Найти(ДополнительныеПараметры.Сообщение, "Сообщение");
		Если ТекущееСообщение = Неопределено Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		РеквизитыСообщения = ТекущееСообщение.РеквизитыИсходящегоСообщения;
		
		Если Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца Тогда
			
			СообщениеJSON.ПараметрыЗапроса.Вставить("ВыполнитьПослеПодписания",     Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД);
			СообщениеJSON.ПараметрыЗапроса.Вставить("ПредварительныйТитулПродавца", РеквизитыСообщения.ТекстДополнительногоСообщенияJSON);
			СообщениеJSON.ПараметрыЗапроса.Вставить("ИмяФайлаТитулПродавца",        ПараметрыОбработкиДокумента.ИмяФайлаТитулПродавца);
			СообщениеJSON.ПараметрыЗапроса.Вставить("ИмяФайлаТитулПокупателя",      ПараметрыОбработкиДокумента.ИмяФайлаТитулПокупателя);
			СообщениеJSON.ПараметрыЗапроса.Вставить("ДвоичныеДанныеТитулПокупателя", ПараметрыОбработкиДокумента.ДвоичныеДанныеТитулПокупателя);
			
			РезультатФормированияТитулаПродавца = ДополнитьТитулПродавцаПодписантом(ДокументСсылка,
				Организация,
				РеквизитыСообщения.ПараметрыЗапроса.ДвоичныеДанныеТитулПродавца,
				ИмяФайлаТитулПродавца,
				РеквизитыСообщения.Сертификат);
				
			Если РезультатФормированияТитулаПродавца.Отказ Тогда
				
				ТекстОшибки = ТекстОшибкиПриФормированииТитула(РезультатФормированияТитулаПродавца, ДокументСсылка);
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
				СообщенияJSON.Добавить(СообщениеJSON);
				
				Возврат СообщенияJSON;
				
			КонецЕсли;

			ТекстСообщенияJSON = ПолучитьСтрокуИзДвоичныхДанных(РезультатФормированияТитулаПродавца.ДвоичныеДанныеФайла, "windows-1251");
			СообщениеJSON.ПараметрыЗапроса.Вставить(
				"ДвоичныеДанныеДляПодписания",
				РезультатФормированияТитулаПродавца.ДвоичныеДанныеФайла);
			СообщениеJSON.ТекстСообщенияJSON                = ТекстСообщенияJSON;
			СообщениеJSON.ТекстДополнительногоСообщенияJSON = "";
			СообщениеJSON.Описание = ОписаниеТитулаПродавца(РеквизитыСообщения.ДокументОснование);
			
			ДополнительныйСертификат = Неопределено;
			
			Если РеквизитыСообщения.Свойство("ДополнительныйСертификат") Тогда
				ДополнительныйСертификат = РеквизитыСообщения.ДополнительныйСертификат;
				СообщениеJSON.Вставить("ДополнительныйСертификат", ДополнительныйСертификат);
			КонецЕсли;
			
		ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД Тогда
			
			ДополнительныйСертификат = Неопределено;
			
			Если РеквизитыСообщения.Свойство("ДополнительныйСертификат") Тогда
				ДополнительныйСертификат = РеквизитыСообщения.ДополнительныйСертификат;
			Иначе
				ДополнительныйСертификат = РеквизитыСообщения.Сертификат;
			КонецЕсли;
			
			РезультатФормированияТитулаПокупателя = ДополнитьТитулПокупателяПодписантомИЭППродавца(ДокументСсылка,
				ОрганизацияПокупателя,
				РеквизитыСообщения.ПараметрыЗапроса.ДвоичныеДанныеТитулПокупателя,
				ИмяФайлаТитулПокупателя,
				ДополнительныйСертификат,
				РеквизитыСообщения.СвойстваПодписи.Подпись);
			
			Если РезультатФормированияТитулаПокупателя.Отказ Тогда
				
				ТекстОшибки = ТекстОшибкиПриФормированииТитула(РезультатФормированияТитулаПокупателя, ДокументСсылка, Ложь);
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
				СообщенияJSON.Добавить(СообщениеJSON);
				
				Возврат СообщенияJSON;
				
			КонецЕсли;
			
			ТелоСообщенияТитулПокупателя = ПолучитьСтрокуИзДвоичныхДанных(РезультатФормированияТитулаПокупателя.ДвоичныеДанныеФайла, "windows-1251");
			СообщениеJSON.ТекстСообщенияJSON                = ТелоСообщенияТитулПокупателя;
			СообщениеJSON.ТекстДополнительногоСообщенияJSON = "";
			СообщениеJSON.Описание                          = ОписаниеТитулаПокупателя(РеквизитыСообщения.ДокументОснование);
			
			СообщениеJSON.ПараметрыЗапроса.Вставить(
				"ДвоичныеДанныеДляПодписания",
				РезультатФормированияТитулаПокупателя.ДвоичныеДанныеФайла);
			СообщениеJSON.ПараметрыЗапроса.Вставить("ТекстДополнительногоСообщения", РеквизитыСообщения.ТекстСообщенияJSON);
			СообщениеJSON.ПараметрыЗапроса.Вставить("СвойстваДополнительнойПодписи", РеквизитыСообщения.СвойстваПодписи);
			
		КонецЕсли;
		
	Иначе
		
		Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя;
		
		СообщениеJSON.ПараметрыЗапроса.Вставить("ВыполнитьПослеПодписания", Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца);
		
		РезультатФормированияТитулаПродавца = ТитулПродавцаВФормате_5_02(ДокументСсылка);
		
		Если РезультатФормированияТитулаПродавца.Отказ Тогда
			
			ТекстОшибки = ТекстОшибкиПриФормированииТитула(РезультатФормированияТитулаПродавца, ДокументСсылка);
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
			СообщенияJSON.Добавить(СообщениеJSON);
			
			Возврат СообщенияJSON;
			
		Иначе
			
			ТелоСообщенияТитулПродавца = ПолучитьСтрокуИзДвоичныхДанных(РезультатФормированияТитулаПродавца.ДвоичныеДанныеФайла, "windows-1251");
			
			РезультатФормированияТитулаПокупателя = ТитулПокупателяВФормате_5_02(
				ДокументСсылка,
				РезультатФормированияТитулаПродавца.ИмяФайла,
				РезультатФормированияТитулаПродавца.ДвоичныеДанныеФайла);
			
			Если РезультатФормированияТитулаПокупателя.Отказ Тогда
				
				ТекстОшибки = ТекстОшибкиПриФормированииТитула(РезультатФормированияТитулаПокупателя, ДокументСсылка, Ложь);
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
				СообщенияJSON.Добавить(СообщениеJSON);
				
				Возврат СообщенияJSON;
				
			КонецЕсли;
			
			ТелоСообщенияТитулПокупателя = ПолучитьСтрокуИзДвоичныхДанных(РезультатФормированияТитулаПокупателя.ДвоичныеДанныеФайла, "windows-1251");
			СообщениеJSON.ПараметрыЗапроса.Вставить(
				"ДвоичныеДанныеТитулПродавца",
				РезультатФормированияТитулаПродавца.ДвоичныеДанныеФайла);
			СообщениеJSON.ПараметрыЗапроса.Вставить(
				"ДвоичныеДанныеТитулПокупателя",
				РезультатФормированияТитулаПокупателя.ДвоичныеДанныеФайла);
				
		КонецЕсли;
		
		СообщениеJSON.ПараметрыЗапроса.Вставить("ИмяФайлаТитулПродавца",    РезультатФормированияТитулаПродавца.ИмяФайла);
		СообщениеJSON.ПараметрыЗапроса.Вставить("ИмяФайлаТитулПокупателя",  РезультатФормированияТитулаПокупателя.ИмяФайла);
		
		СообщениеJSON.ТекстСообщенияJSON                = ТелоСообщенияТитулПродавца;
		СообщениеJSON.ТекстДополнительногоСообщенияJSON = ТелоСообщенияТитулПокупателя;
		
		СообщениеJSON.Описание = ОписаниеТитулаПродавца(Шапка.ДокументОснование);
		СообщениеJSON.ОписаниеДополнительное = ОписаниеТитулаПокупателя(Шапка.ДокументОснование);
		
		Если ЗначениеЗаполнено(ОрганизацияПокупателя) И Организация <> ОрганизацияПокупателя Тогда
			СообщениеJSON.ОрганизацияПодписиДополнительногоСообщения = ОрганизацияПокупателя;
		Иначе
			СообщениеJSON.ОрганизацияПодписиДополнительногоСообщения = Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Операция            = Операция;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON.Версия            = НомерВерсии;
	СообщениеJSON.Организация       = Организация;
	СообщениеJSON.ВидПродукции      = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.Документ          = ДокументСсылка;
	
	СообщенияJSON.Добавить(СообщениеJSON);

	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для операции отмены разрешения на отгрузку
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеМеждуМОДИСМП - Документ Перемещение между МОД ИС МП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ОтменаРазрешенияНаОтгрузкуПродукции(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON = Новый Массив;
	
	Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки;
	
	СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
	СообщениеJSON.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Операция     = Операция;
	СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеМеждуМОДИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = &Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.ИдентификаторРазрешения            КАК ИдентификаторРазрешения,
	|	Шапка.Организация                        КАК Организация,
	|	Шапка.Ссылка                             КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеМеждуМОДИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий()
		Или Не ЗначениеЗаполнено(Шапка.ИдентификаторРазрешения) Тогда
	
		СообщениеJSON = ОбменДаннымиИСМП.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Не заполнен идентификатор разрешения на отгрузку.';
										|en = 'Не заполнен идентификатор разрешения на отгрузку.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
	
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.Документ          = ДокументСсылка;
	
	СообщениеJSON.Описание = ОбменДаннымиИСМП.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.ПараметрыЗапроса = Новый Структура;
	
	ИННОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация).ИНН;
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("inn",                  ИННОрганизации);
	ТелоЗапроса.Вставить("fixation_document_id", Шапка.ИдентификаторРазрешения);
	
	ТелоСообщения = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON  = ТелоСообщения;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция ТекстОшибкиПриФормированииТитула(РезультатФормированияТитула, ДокументСсылка, ТитулПродавца = Истина)
	
	МассивОшибок = Новый Массив;
	Если ЗначениеЗаполнено(РезультатФормированияТитула.ТекстОшибки) Тогда
		МассивОшибок.Добавить(РезультатФормированияТитула.ТекстОшибки);
	КонецЕсли;
	
	Если РезультатФормированияТитула.Свойство("МассивОшибокЗаполнения")
		И РезультатФормированияТитула.МассивОшибокЗаполнения.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, РезультатФормированияТитула.МассивОшибокЗаполнения);
	КонецЕсли;
	
	Если МассивОшибок.Количество() Тогда
		ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	Иначе
		Если ТитулПродавца Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'При формировании титула продавца по документу %1 возникла непредвиденная ошибка.';
										|en = 'При формировании титула продавца по документу %1 возникла непредвиденная ошибка.'"), ДокументСсылка);
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'При формировании титула покупателя по документу %1 возникла непредвиденная ошибка.';
										|en = 'При формировании титула покупателя по документу %1 возникла непредвиденная ошибка.'"), ДокументСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ОписаниеТитулаПокупателя(ДокументОснование)
	
	Возврат СтрШаблон(
		НСтр("ru = 'Титул покупателя по документу %1';
			|en = 'Титул покупателя по документу %1'"),
		ДокументОснование);
	
КонецФункции

Функция ОписаниеТитулаПродавца(ДокументОснование)
	
	Возврат СтрШаблон(
		НСтр("ru = 'Титул продавца по документу %1';
			|en = 'Титул продавца по документу %1'"),
		ДокументОснование);
	
КонецФункции

#КонецОбласти

#Область ФормированиеТитуловЭД

// Возвращает таблицу участников.
// 
// Параметры:
//  ДеревоДанных - ДеревоЗначений
//  Путь - Строка
// 
// Возвращаемое значение:
//  см. ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента
//
Функция ПолучитьТаблицуУчастниковУПД_5_02(ДеревоДанных, Путь)

	ТаблицаУчастников = ЭлектронноеВзаимодействиеИСМП.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Путь);
	ТаблицаУчастников.Колонки.Добавить("СведенияОбУчастнике");
	Возврат ТаблицаУчастников;
	
КонецФункции

// Добавляет данные участника в таблицу участников.
// 
// Параметры:
//  ДеревоДанных - ДеревоЗначений
//  ТаблицаУчастников - см. ПолучитьТаблицуУчастниковУПД_5_02
//  ДанныеУчастника - см. ПолучитьДанныеУчастникаУПД
//  ПутьТаблицы - Строка
//  ИмяУчастника - Строка
//
Процедура ДобавитьУчастникаУПД_5_02(ДеревоДанных, ТаблицаУчастников, ДанныеУчастника, ПутьТаблицы, ИмяУчастника)

	СтрокаУчастника = ТаблицаУчастников.Добавить();
	СтрокаУчастника[ИмяУчастника] = ЭлектронноеВзаимодействиеИСМП.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, ПутьТаблицы + ".НомерСтроки." + ИмяУчастника);
	ЗаполнитьЗначенияСвойств(СтрокаУчастника[ИмяУчастника], ДанныеУчастника);
	СтрокаУчастника.СведенияОбУчастнике = ДанныеУчастника.СведенияОбУчастнике;
	
КонецПроцедуры

Процедура ДобавитьОбработкуОшибокВТаблицуУчастниковУПД(ТаблицаУчастников, ПутьКУчастнику = "")
	
	ПутьКПолю = ?(ЗначениеЗаполнено(ПутьКУчастнику), ПутьКУчастнику + ".", "");
	
	Для Каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		
		Сведения = СтрокаТаблицы.СведенияОбУчастнике;
		Если Не ЗначениеЗаполнено(Сведения) Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = ?(ЗначениеЗаполнено(ПутьКУчастнику), СтрокаТаблицы[ПутьКУчастнику], СтрокаТаблицы);
		
		Если Участник.ТипУчастника.Свойство("ЮЛ") Тогда
			
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.НаименованиеОрганизации", Сведения.Ссылка);
				
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.ИНН", Сведения.Ссылка);
				
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ЮЛ.КПП", Сведения.Ссылка);
				
		ИначеЕсли Участник.ТипУчастника.Свойство("ИЛ") Тогда
			
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИЛ.НаименованиеОрганизации", Сведения.Ссылка);
			
		ИначеЕсли Участник.ТипУчастника.Свойство("ИП") Тогда
			
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.ИНН", Сведения.Ссылка);
			
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.ФИО.Фамилия", Сведения.Ссылка);
			
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.ФИО.Имя", Сведения.Ссылка);
			
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.ФИО.Отчество", Сведения.Ссылка);
			
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "ТипУчастника.ИП.СвидетельствоОГосРегистрации", Сведения.Ссылка);
			
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
			ПутьКПолю + "Адрес.АвтоматическиЗаполняемый", Сведения.Ссылка);
			
		ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.Телефон", Сведения.Ссылка);
			
		ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
			ПутьКПолю + "КонтактныеСведения.ЭлектроннаяПочта", Сведения.Ссылка);
		
		КодПоОКПО = "";
		Если Сведения.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
			ЭлектронноеВзаимодействиеИСМП.ВывестиОшибкуЗаполненияПользователю(СтрокаТаблицы,
				ПутьКПолю + "КодОКПО", Сведения.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Сведения, ДатаСведений, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Сведения.Ссылка = ЮрФизЛицо;
	
	ЗначенияРеквизитовПоЮрФизЛицу = ОбщегоНазначения.СкопироватьРекурсивно(Сведения);
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьДанныеУчастниковПеремещенияМеждуМОД_5_02(ЗначенияРеквизитовПоЮрФизЛицу, ЮрФизЛицо, ДатаСведений, ДополнительныеПараметры);
	
	ЗаполнитьЗначенияСвойств(Сведения, ЗначенияРеквизитовПоЮрФизЛицу);
	
КонецПроцедуры

Функция ПолучитьДанныеУчастникаУПД(Знач СведенияОбУчастнике)
	
	КлючДанных = Неопределено;
	СведенияОбУчастнике.Свойство("Ссылка", КлючДанных);
	
	Данные = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	Данные.Вставить("ТипУчастника", Новый Структура);
	НаименованиеОрганизации = СведенияОбУчастнике.СокращенноеНаименование;
	
	Если КлючДанных <> Неопределено
		И Не ОбщегоНазначенияИСВызовСервера.ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(КлючДанных) Тогда
		
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ЮЛ.Вставить("КПП", СведенияОбУчастнике.КПП);
		
	Иначе
		
		Данные.ТипУчастника.Вставить("ИП", Новый Структура);
		Данные.ТипУчастника.ИП.Вставить("ИНН", СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ИП.Вставить("Фамилия", СведенияОбУчастнике.Фамилия);
		Данные.ТипУчастника.ИП.Вставить("Имя", СведенияОбУчастнике.Имя);
		Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
		
		Если ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			
			Свидетельство = СтрШаблон(НСтр("ru = 'Свидетельство №%1 от %2';
											|en = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
				
			Данные.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации", Свидетельство);
			Данные.ТипУчастника.ИП.Вставить("Отчество", СведенияОбУчастнике.Отчество);
			
		КонецЕсли;
		
		Данные.ТипУчастника.ИП.Вставить("ФИО", Новый Структура("Фамилия, Имя, Отчество"));
		ЗаполнитьЗначенияСвойств(Данные.ТипУчастника.ИП.ФИО, Данные.ТипУчастника.ИП);
		
	КонецЕсли;
	
	Данные.Вставить("КонтактныеСведения", Новый Структура);
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		Данные.КонтактныеСведения.Вставить("Телефон", Телефон);
		
		Телефоны = Новый ТаблицаЗначений;
		Телефоны.Колонки.Добавить("Телефон");
		НоваяСтрока = Телефоны.Добавить();
		НоваяСтрока.Телефон = Телефон;
		Данные.КонтактныеСведения.Вставить("Телефоны", Телефоны);
		
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
		
		ЭлектронныеПочты = Новый ТаблицаЗначений;
		ЭлектронныеПочты.Колонки.Добавить("ЭлектроннаяПочта");
		НоваяСтрока = ЭлектронныеПочты.Добавить();
		НоваяСтрока.ЭлектроннаяПочта = ЭлектроннаяПочта;
		Данные.КонтактныеСведения.Вставить("ЭлектронныеПочты", ЭлектронныеПочты);
		
	КонецЕсли;
	
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
		
		Данные.Вставить("КодОКПО", КодПоОКПО);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Формирует пустую структура данных о юридическом (физическом) лице.
//
// Возвращаемое значение:
//  Структура - возвращаемые данные:
//   * Ссылка                        - СправочникСсылка - ссылка на физическое или юридическое лицо
//   * ИНН                           - Строка - ИНН. Обязательно для заполнения.
//   * КПП                           - Строка - КПП.
//   * ПолноеНаименование            - Строка - полное наименование. Обязательно для заполнения.
//   * Наименование                  - Строка - наименование. Обязательно для заполнения.
//   * Представление                 - Строка - представление юр/физ лица.
//   * СокращенноеНаименование       - Строка - сокращенное наименование.
//   * ОфициальноеНаименование       - Строка - наименование юридического лица.
//   * КодПоОКПО                     - Строка - код ОКПО.
//   * ЮридическийАдрес              - Строка - представление юридического адреса.
//   * ФактическийАдрес              - Строка - представление фактического адреса.
//   * ФактическийАдресИдентификатор - Строка - идентификатор ФИАС фактического адреса. Не обязательно для заполнения.
//   * ПочтовыйАдрес                 - Строка - представление почтового адреса.
//   * Телефоны                      - Строка - представление телефонов.
//   * ЭлектроннаяПочта              - Строка - представление электронной почты.
//   * Фамилия                       - Строка - фамилия.
//   * Имя                           - Строка - имя.
//   * Отчество                      - Строка - отчество.
//   * ЮрФизЛицо                     - ПеречислениеСсылка - тип юр/физ лица.
//   * ОГРН                          - Строка - ОГРН.
//   * СвидетельствоСерияНомер       - Строка - серия и номер свидетельства.
//   * СвидетельствоДатаВыдачи       - Строка - дата выдачи свидетельства.
//   * Банк                          - СправочникСсылка - банк, в котором открыт счет.
//   * БИК                           - Строка - БИК банка, в котором открыт счет.
//   * КоррСчет                      - Строка - Корр счет банка, в котором открыт счет.
//   * НомерСчета                    - Строка - Номер счета.
//   * ЮридическийАдресXML           - Строка - устаревший XML, соответствующий XDTO пакетам Адрес. Для обратной совместимости.
//   * ФактическийАдресXML           - Строка - устаревший XML, соответствующий XDTO пакетам Адрес. Для обратной совместимости.
//   * ПочтовыйАдресXML              - Строка - устаревший XML, соответствующий XDTO пакетам Адрес. Для обратной совместимости.
//   * ТелефоныXML                   - Строка - устаревший XML, соответствующий XDTO пакетам Телефон. Для обратной совместимости.
//
Функция СтруктураДанныхЮрФизЛица() Экспорт
	
	СтрокаРеквизитов =
	"Ссылка,
	|ОфициальноеНаименование,
	|Наименование,
	|Представление,
	|СокращенноеНаименование,
	|ПолноеНаименование,
	|Фамилия,
	|Имя,
	|Отчество,
	|ЮрФизЛицо,
	|КодПоОКПО,
	|ИНН,
	|КПП,
	|ОГРН,
	|СвидетельствоСерияНомер,
	|СвидетельствоДатаВыдачи,
	|Банк,
	|БИК,
	|КоррСчет,
	|НомерСчета,
	|ЮридическийАдрес,
	|ЮридическийАдресXML,
	|ФактическийАдрес,
	|ФактическийАдресXML,
	|ФактическийАдресИдентификатор,
	|ПочтовыйАдрес,
	|ПочтовыйАдресXML,
	|Телефоны,
	|ТелефоныXML,
	|ЭлектроннаяПочта";
	
	//@skip-check constructor-function-return-section
	Возврат Новый Структура(СтрокаРеквизитов);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
