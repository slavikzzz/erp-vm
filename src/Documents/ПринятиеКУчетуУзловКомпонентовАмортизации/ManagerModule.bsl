#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОсновныеСредства");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	
	ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда

		ДопПараметры.ТолькоПомеченные = Регистры <> Неопределено;
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры);
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОСБУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииОСБУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаУзлыКомпонентыАмортизации(ТекстыЗапроса, Регистры);
		
		ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	КонецЕсли;
	
	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
	Возврат ТаблицыДвижений;
	
КонецФункции

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит необходимые временные таблицы.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ТаблицыДвиженийРасчетаСтоимости(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	ПолучитьДанныеДокумента(Запрос);

	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализацииПоПериодам(Запрос, Запрос.Параметры,, "ВтСписокДокументов");

	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения();
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 

	ТекстыЗапроса = Новый СписокЗначений;

	ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаПараметрыАмортизацииОСБУ(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Неопределено);

	//++ НЕ УТКА
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаОтражениеДокументовВМеждународномУчете(ТекстыЗапроса, Неопределено);
	//-- НЕ УТКА

	ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТаблицыДвиженийРасчетаСтоимости(Запрос, ТекстыЗапроса);

	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса);
							
	Возврат ТаблицыДвижений;
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Добавляет команду создания документа "Принятие к учету ОС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Порядок	- Число	- Порядок команды.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Порядок = 0) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.Порядок = Порядок;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСтоимость(Объект, ВыбранныеСтроки = Неопределено) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаДокумента = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	ТаблицаОС = Объект.КомпонентыАмортизации.Выгрузить(ВыбранныеСтроки);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.КомпонентАмортизации КАК КомпонентАмортизации,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СтоимостьУУ КАК СтоимостьУУ,
	|	ТаблицаОС.СтоимостьБУ КАК СтоимостьБУ,
	|	ТаблицаОС.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ТаблицаОС
	|
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ГДЕ
	|	ТаблицаОС.КомпонентАмортизации <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.КомпонентАмортизации КАК ОбъектУчета,
	|	1 КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтПорцияДанныхКРасчету
	|
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.КомпонентАмортизации КАК ОбъектУчета,
	|
	|	ЛОЖЬ КАК РасходыРаспределяютсяПоОбъектам,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаОС.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
	|				И НЕ ТаблицаОС.КомпонентАмортизации.УчитыватьСтоимостьЛиквидационногоОбязательства
	|			ТОГДА ТаблицаОС.ОсновноеСредство
	|		ИНАЧЕ ТаблицаОС.КомпонентАмортизации
	|	КОНЕЦ КАК АналитикаКапитализацииРасходов,
	|
	|	ЛОЖЬ КАК ФактическаяСтоимость,
	|
	|	ТаблицаОС.СтоимостьУУ КАК СтоимостьУУ,
	|	ТаблицаОС.СтоимостьБУ КАК СтоимостьБУ,
	|	0 КАК СтоимостьНУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВариантПримененияЦелевогоФинансирования,
	|	0 КАК СуммаЦелевыхСредств,
	|	0 КАК ПервоначальнаяСтоимостьНУ,
	|
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете КАК ОтражатьВБУ,
	|	ЛОЖЬ КАК ОтражатьВНУ,
	|	&ОтражатьВРеглУчете КАК УчестьПР,
	|
	|	ТаблицаОС.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВтТаблицаОбъектов
	|
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	
	Запрос.Выполнить();
	
	РасчетСтоимостиВНА.СформироватьВтТекущиеРасходы(ДатаДокумента, МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВтТекущиеРасходы.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ВтТекущиеРасходы.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ВтТекущиеРасходы.СуммаРегл) КАК СуммаРегл
	|ИЗ
	|	ВтТекущиеРасходы КАК ВтТекущиеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТекущиеРасходы.ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить();

	РасходыПоДокументу = Результат.Выгрузить();
	
	Если ВыбранныеСтроки <> Неопределено Тогда
		СписокСтрок = ВыбранныеСтроки;
	Иначе
		СписокСтрок = Объект.КомпонентыАмортизации;
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		СтруктураПоиска = Новый Структура("ОбъектУчета", ДанныеСтроки.КомпонентАмортизации);
		СписокСтрокРасходы = РасходыПоДокументу.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрокРасходы.Количество() <> 0 Тогда
			Если Объект.ОтражатьВРеглУчете Тогда
				ДанныеСтроки.СтоимостьБУ = СписокСтрокРасходы[0].СуммаРегл;
			КонецЕсли; 
			Если Объект.ОтражатьВУпрУчете Тогда
				ДанныеСтроки.СтоимостьУУ = СписокСтрокРасходы[0].СуммаУпр;
			КонецЕсли;
		Иначе
			ДанныеСтроки.СтоимостьУУ = 0;
			ДанныеСтроки.СтоимостьБУ = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеРеквизитов(Организация) Экспорт

	ПредставлениеРеквизитов = Новый Соответствие;

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	ВалютаУпрПредставление = Строка(ВалютаУпр);
	ВалютаРеглПредставление = Строка(ВалютаРегл);
	
	ВалютаРеглЗаполнена = ЗначениеЗаполнено(ВалютаРегл);
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	Если ВедетсяРегламентированныйУчетВНА Тогда
		
		Если ВалютаРеглЗаполнена Тогда
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость регл. (%1)';
																								|en = 'Local cost (%1)'"), ВалютаРеглПредставление));
		Иначе
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", НСтр("ru = 'Стоимость регл.';
																						|en = 'Local cost'"));
		КонецЕсли;
		
		ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость упр. (%1)';
																							|en = 'Manag. cost (%1)'"), ВалютаУпрПредставление));
		
		Если ВалютаРегл = ВалютаУпр Тогда
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																										|en = 'Residual value'"));
		Иначе
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																											|en = 'Residual value (%1)'"), ВалютаУпрПредставление));
			Если ВалютаРеглЗаполнена Тогда
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																													|en = 'Residual value (%1)'"), ВалютаРеглПредставление));
			Иначе
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																											|en = 'Residual value'"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ВалютаРегл = ВалютаУпр Тогда
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", НСтр("ru = 'Стоимость';
																						|en = 'Cost'"));
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьУУ", НСтр("ru = 'Стоимость';
																						|en = 'Cost'"));
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																										|en = 'Residual value'"));
		Иначе
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьУУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)';
																								|en = 'Cost (%1)'"), ВалютаУпрПредставление));
			ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимость", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																											|en = 'Residual value (%1)'"), ВалютаУпрПредставление));
			Если ВалютаРеглЗаполнена Тогда
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", СтрШаблон(НСтр("ru = 'Ликвидационная стоимость (%1)';
																													|en = 'Residual value (%1)'"), ВалютаРеглПредставление));
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", СтрШаблон(НСтр("ru = 'Стоимость (%1)';
																									|en = 'Cost (%1)'"), ВалютаРеглПредставление));
			Иначе
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.ЛиквидационнаяСтоимостьРегл", НСтр("ru = 'Ликвидационная стоимость';
																											|en = 'Residual value'"));
				ПредставлениеРеквизитов.Вставить("КомпонентыАмортизации.СтоимостьБУ", НСтр("ru = 'Стоимость';
																							|en = 'Cost'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ПредставлениеРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПринятиеКУчетуУзловКомпонентовАмортизации";
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	КонецЕсли;
		
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров,
										ТекстыЗапросаВременныхТаблиц);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	ПроведениеДокументов.ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры);
	
	СформироватьТаблицуВтСписокДокументов(Запрос);
	ПолучитьДанныеДокумента(Запрос);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация
	|	
	|ИЗ
	|	ДанныеДокументаРеквизиты КАК ДанныеДокумента";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализацииПоПериодам(Запрос, Запрос.Параметры,, "ВтСписокДокументов");
	
КонецПроцедуры

Процедура СформироватьТаблицуВтСписокДокументов(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокДокументов.Ссылка КАК Ссылка,
	|	СписокДокументов.Организация КАК Организация,
	|	СписокДокументов.Дата КАК Период
	|
	|ПОМЕСТИТЬ ВтСписокДокументов
	|
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК СписокДокументов
	|
	|ГДЕ
	|	СписокДокументов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьДанныеДокумента(Запрос)
	
	СписокЗапросов = Новый Массив;
	
	#Область ДанныеДокументаРеквизиты
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                            КАК Ссылка,
	|	ДанныеДокумента.Дата                                              КАК Период,
	|	ДанныеДокумента.Номер                                             КАК Номер,
	|	ДанныеДокумента.Организация                                       КАК Организация,
	|	ДанныеДокумента.Организация.ГоловнаяОрганизация                   КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.ХозяйственнаяОперация                             КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Ответственный                                     КАК Ответственный,
	|	ДанныеДокумента.Комментарий                                       КАК Комментарий,
	|	ДанныеДокумента.Проведен                                          КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                                   КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете                                КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете                                 КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ГруппаФинансовогоУчета                            КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.ПорядокУчетаБУ                                    КАК ПорядокУчетаБУ,
	|	ДанныеДокумента.ПорядокУчетаУУ                                    КАК ПорядокУчетаУУ,
	|	ДанныеДокумента.НачислятьАмортизациюБУ                            КАК НачислятьАмортизациюБУ,
	|	ДанныеДокумента.НачислятьАмортизациюУУ                            КАК НачислятьАмортизациюУУ,
	|	ДанныеДокумента.СобытиеОС                                         КАК СобытиеОС,
	|	ДанныеДокумента.СрокИспользованияБУ                               КАК СрокИспользованияБУ,
	|	ДанныеДокумента.СрокИспользованияУУ                               КАК СрокИспользованияУУ,
	|	ДанныеДокумента.КоэффициентУскоренияУУ                            КАК КоэффициентУскоренияУУ,
	|	ДанныеДокумента.МетодНачисленияАмортизацииУУ                      КАК МетодНачисленияАмортизацииУУ,
	|	ДанныеДокумента.НаправлениеДеятельности                           КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Местонахождение                                   КАК Местонахождение,
	|	ДанныеДокумента.МетодНачисленияАмортизацииБУ                      КАК МетодНачисленияАмортизацииБУ,
	|	ДанныеДокумента.КоэффициентУскоренияБУ                            КАК КоэффициентУскоренияБУ,
	|	НастройкиХозяйственныхОпераций.Ссылка                             КАК НастройкаХозяйственнойОперации,
	|
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходовУУ,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходовБУ,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходовУУ,
	|
	|	&ПринятиеКУчетуОС_РеквизитыДокумента
	|
	|ПОМЕСТИТЬ ДанныеДокументаРеквизиты
	|
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (
	|		ВЫБРАТЬ
	|			ВтСписокДокументов.Ссылка
	|		ИЗ
	|			ВтСписокДокументов КАК ВтСписокДокументов)
	|";
	ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ДобавитьВТекстЗапросаРеквизитыДокумента(ТекстЗапроса, "ДанныеДокумента");
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ДанныеДокументаТаблицаКомпоненты
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.КомпонентАмортизации КАК КомпонентАмортизации,
	|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаДокумента.КомпонентАмортизации КАК ОбъектУчета,
	|
	|	ТаблицаДокумента.СтоимостьУУ КАК СтоимостьУУ,
	|	ТаблицаДокумента.СтоимостьБУ КАК СтоимостьБУ,
	|
	|	ТаблицаДокумента.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ТаблицаДокумента.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл,
	|	ТаблицаДокумента.ПоказательНаработки КАК ПоказательНаработки,
	|	ТаблицаДокумента.ОбъемНаработки КАК ОбъемНаработки
	|
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаКомпоненты
	|
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (
	|		ВЫБРАТЬ
	|			ВтСписокДокументов.Ссылка
	|		ИЗ
	|			ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ВнеоборотныеАктивыСлужебный.ЗначенияПараметровПроведенияПринятияКУчету(ЗначенияПараметровПроведения);
	
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru = 'Принятие к учету узлов и компонентов амортизации';
																	|en = 'Recognize sub-assets and components of depreciation'"));
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Дата                    КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК Договор,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Местонахождение         КАК Подразделение,
	|	ДанныеДокумента.Ответственный           КАК Ответственный,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.Проведен                КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Дата                    КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.Дата                    КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет
	|
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаКомпонентов.НомерСтроки-1, 0) КАК НомерЗаписи,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Местонахождение         КАК Подразделение,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	ДанныеДокумента.Проведен                КАК Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете      КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете       КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.СобытиеОС               КАК СобытиеОС,
	|	ТаблицаКомпонентов.КомпонентАмортизации КАК ОсновноеСредство
	|
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентов
	|		ПО ДанныеДокумента.Ссылка = ТаблицаКомпонентов.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1                                       КАК НомерЗаписи,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Местонахождение         КАК Подразделение,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	ДанныеДокумента.Проведен                КАК Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете      КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете       КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.СобытиеОС               КАК СобытиеОС,
	|	ТаблицаВладельцы.ОсновноеСредство       КАК ОсновноеСредство
	|
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаВладельцы
	|		ПО ДанныеДокумента.Ссылка = ТаблицаВладельцы.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаВладельцыПредыдущий
	|		ПО ТаблицаВладельцыПредыдущий.Ссылка = ТаблицаВладельцы.Ссылка
	|			И ТаблицаВладельцыПредыдущий.ОсновноеСредство = ТаблицаВладельцы.ОсновноеСредство
	|			И ТаблицаВладельцыПредыдущий.НомерСтроки < ТаблицаВладельцы.НомерСтроки
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТаблицаВладельцыПредыдущий.Ссылка ЕСТЬ NULL
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестонахождениеОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                    КАК Регистратор,
	|	ДанныеДокумента.Период                    КАК Период,
	|	ДанныеДокумента.Организация               КАК Организация,
	|	ТаблицаОС.КомпонентАмортизации            КАК ОсновноеСредство,
	|	ВтСведенияВладельцев.МОЛ                  КАК МОЛ,
	|	ВтСведенияВладельцев.Местонахождение      КАК Местонахождение,
	|	ВтСведенияВладельцев.АдресМестонахождения КАК АдресМестонахождения,
	|	ВтСведенияВладельцев.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	ДанныеДокумента.ОтражатьВРеглУчете        КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете         КАК ОтражатьВУпрУчете
	|
	|ИЗ
	|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСведенияВладельцев КАК ВтСведенияВладельцев
	|		ПО ВтСведенияВладельцев.Ссылка = ТаблицаОС.Ссылка
	|			И ВтСведенияВладельцев.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                       КАК Регистратор,
	|	ДанныеДокумента.Период                       КАК Период,
	|	ДанныеДокумента.Организация                  КАК Организация,
	|	ТаблицаОС.КомпонентАмортизации               КАК ОсновноеСредство,
	|	ВтСведенияВладельцев.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.ПоказательНаработки                КАК ПоказательНаработки,
	|	ТаблицаОС.ОбъемНаработки                     КАК ОбъемНаработки,
	|	ДанныеДокумента.ОтражатьВРеглУчете           КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете            КАК ОтражатьВУпрУчете
	|
	|ИЗ
	|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСведенияВладельцев КАК ВтСведенияВладельцев
	|		ПО ВтСведенияВладельцев.Ссылка = ТаблицаОС.Ссылка
	|			И ВтСведенияВладельцев.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
	|
	|ГДЕ
	|	(ДанныеДокумента.ОтражатьВУпрУчете
	|			И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
	|		ИЛИ ДанныеДокумента.ОтражатьВУпрУчете
	|			И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОСБУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса);
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПорядокУчетаОСБУ();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтУчетнаяПолитикаФинансовогоУчета(ТекстыЗапроса);

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка         КАК Регистратор,
		|	ДанныеДокумента.Период         КАК Период,
		|	ДанныеДокумента.Организация    КАК Организация,
		|	ТаблицаОС.КомпонентАмортизации КАК ОсновноеСредство,
		|
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК СостояниеБУ,
		|
		|	ДанныеДокумента.НачислятьАмортизациюБУ КАК НачислятьАмортизациюБУ,
		|
		|	ВтСведенияВладельцев.СтатьяРасходовБУ КАК СтатьяРасходовБУ,
		|	ВтСведенияВладельцев.АналитикаРасходовБУ КАК АналитикаРасходовБУ
		|
		|ИЗ
		|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСведенияВладельцев КАК ВтСведенияВладельцев
		|		ПО ВтСведенияВладельцев.Ссылка = ТаблицаОС.Ссылка
		|			И ВтСведенияВладельцев.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
		|		ПО ВтУчетнаяПолитикаФинансовогоУчета.Ссылка = ТаблицаОС.Ссылка
		|
		|ГДЕ
		|	ДанныеДокумента.ОтражатьВРеглУчете
		|	И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
		|	И ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПорядокУчетаВНАРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНАРегл.Независимый)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка         КАК Регистратор,
		|	ДанныеДокумента.Период         КАК Период,
		|	ДанныеДокумента.Организация    КАК Организация,
		|	ТаблицаОС.КомпонентАмортизации КАК ОсновноеСредство,
		|
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК СостояниеБУ,
		|
		|	ДанныеДокумента.НачислятьАмортизациюУУ КАК НачислятьАмортизациюБУ,
		|
		|	ВтСведенияВладельцев.СтатьяРасходовБУ КАК СтатьяРасходовБУ,
		|	ВтСведенияВладельцев.АналитикаРасходовБУ КАК АналитикаРасходовБУ
		|
		|ИЗ
		|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСведенияВладельцев КАК ВтСведенияВладельцев
		|		ПО ВтСведенияВладельцев.Ссылка = ТаблицаОС.Ссылка
		|			И ВтСведенияВладельцев.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
		|		ПО ВтУчетнаяПолитикаФинансовогоУчета.Ссылка = ТаблицаОС.Ссылка
		|
		|ГДЕ
		|	ДанныеДокумента.ОтражатьВРеглУчете
		|	И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
		|	И ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПорядокУчетаВНАРегл, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНАРегл.Независимый)
		|";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                   КАК Регистратор,
	|	ДанныеДокумента.Период                   КАК Период,
	|	ДанныеДокумента.Организация              КАК Организация,
	|	ТаблицаОС.КомпонентАмортизации           КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК Состояние,
	|	ДанныеДокумента.НачислятьАмортизациюУУ   КАК НачислятьАмортизациюУУ,
	|
	|	ВтСведенияВладельцев.СтатьяРасходовУУ    КАК СтатьяРасходов,
	|	ВтСведенияВладельцев.АналитикаРасходовУУ КАК АналитикаРасходов
	|
	|ИЗ
	|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСведенияВладельцев КАК ВтСведенияВладельцев
	|		ПО ВтСведенияВладельцев.Ссылка = ТаблицаОС.Ссылка
	|			И ВтСведенияВладельцев.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
	|
	|ГДЕ
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|	И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСБУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПараметрыАмортизацииОСБУ();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка         КАК Регистратор,
		|	ДанныеДокумента.Период         КАК Период,
		|	ДанныеДокумента.Организация    КАК Организация,
		|	ТаблицаОС.КомпонентАмортизации КАК ОсновноеСредство,
		|
		|	ДанныеДокумента.Период КАК ДатаПоследнегоИзменения,
		|	ДанныеДокумента.СрокИспользованияБУ КАК СрокПолезногоИспользованияБУ,
		|	ДанныеДокумента.КоэффициентУскоренияБУ КАК КоэффициентУскорения,
		|
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
		|				ИЛИ ДанныеДокумента.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		|			ТОГДА ТаблицаОС.ОбъемНаработки
		|	КОНЕЦ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|
		|	ДанныеДокумента.СрокИспользованияБУ КАК СрокИспользованияДляВычисленияАмортизации,
		|
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК СтоимостьДляВычисленияАмортизации,
		|
		|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимость
		|
		|ИЗ
		|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО РасчетСтоимости.Ссылка = ТаблицаОС.Ссылка
		|			И РасчетСтоимости.ОбъектУчета = ТаблицаОС.КомпонентАмортизации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
		|		ПО ВтУчетнаяПолитикаФинансовогоУчета.Ссылка = ТаблицаОС.Ссылка
		|
		|ГДЕ
		|	ДанныеДокумента.ОтражатьВРеглУчете
		|	И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
		|	И ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПорядокУчетаВНАРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНАРегл.Независимый)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка         КАК Регистратор,
		|	ДанныеДокумента.Период         КАК Период,
		|	ДанныеДокумента.Организация    КАК Организация,
		|	ТаблицаОС.КомпонентАмортизации КАК ОсновноеСредство,
		|
		|	ДанныеДокумента.Период              КАК ДатаПоследнегоИзменения,
		|	ДанныеДокумента.СрокИспользованияУУ КАК СрокПолезногоИспользованияБУ,
		|	ДанныеДокумента.КоэффициентУскоренияУУ КАК КоэффициентУскорения,
		|
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.МетодНачисленияАмортизацииУУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
		|				ИЛИ ДанныеДокумента.МетодНачисленияАмортизацииУУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		|			ТОГДА ТаблицаОС.ОбъемНаработки
		|	КОНЕЦ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|
		|	ДанныеДокумента.СрокИспользованияУУ КАК СрокИспользованияДляВычисленияАмортизации,
		|
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК СтоимостьДляВычисленияАмортизации,
		|
		|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимость
		|
		|ИЗ
		|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО РасчетСтоимости.Ссылка = ТаблицаОС.Ссылка
		|			И РасчетСтоимости.ОбъектУчета = ТаблицаОС.КомпонентАмортизации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
		|		ПО ВтУчетнаяПолитикаФинансовогоУчета.Ссылка = ТаблицаОС.Ссылка
		|
		|ГДЕ
		|	ДанныеДокумента.ОтражатьВРеглУчете
		|	И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
		|	И ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПорядокУчетаВНАРегл, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНАРегл.Независимый)
		|";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка               КАК Регистратор,
	|	ДанныеДокумента.Период               КАК Период,
	|	ДанныеДокумента.Период               КАК ДатаПоследнегоИзменения,
	|	ДанныеДокумента.Организация          КАК Организация,
	|	ТаблицаОС.КомпонентАмортизации       КАК ОсновноеСредство,
	|
	|	ДанныеДокумента.СрокИспользованияУУ  КАК СрокИспользования,
	|	ДанныеДокумента.СрокИспользованияУУ  КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаОС.ОбъемНаработки             КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ДанныеДокумента.КоэффициентУскоренияУУ КАК КоэффициентУскорения,
	|	ДанныеДокумента.МетодНачисленияАмортизацииУУ КАК МетодНачисленияАмортизации,
	|
	|	ТаблицаОС.ЛиквидационнаяСтоимость       КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл   КАК ЛиквидационнаяСтоимостьРегл,
	|
	|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК СтоимостьДляВычисленияАмортизацииРегл
	|
	|ИЗ
	|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО РасчетСтоимости.Ссылка = ТаблицаОС.Ссылка
	|			И РасчетСтоимости.ОбъектУчета = ТаблицаОС.КомпонентАмортизации
	|ГДЕ
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|	И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтПервоначальныеСведенияКомпонент(ТекстыЗапроса);
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияОС(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса);
		ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка           КАК Регистратор,
		|	ДанныеДокумента.Период           КАК Период,
		|	ТаблицаОС.КомпонентАмортизации   КАК ОсновноеСредство,
		|	ДанныеДокумента.Организация      КАК Организация,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВРеглУчете
		|				И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
		|			ТОГДА ДанныеДокумента.Период 
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ДатаВводаВЭксплуатациюБУ
		|	КОНЕЦ КАК ДатаВводаВЭксплуатациюБУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
		|				И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
		|			ТОГДА ДанныеДокумента.Период 
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ДатаВводаВЭксплуатациюУУ
		|	КОНЕЦ КАК ДатаВводаВЭксплуатациюУУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВРеглУчете 
		|				И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы) 
		|			ТОГДА ДанныеДокумента.Ссылка 
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ДокументВводаВЭксплуатациюБУ
		|	КОНЕЦ КАК ДокументВводаВЭксплуатациюБУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете 
		|				И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы) 
		|			ТОГДА ДанныеДокумента.Ссылка 
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ДокументВводаВЭксплуатациюУУ
		|	КОНЕЦ КАК ДокументВводаВЭксплуатациюУУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВРеглУчете 
		|				И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы) 
		|			ТОГДА ДанныеДокумента.МетодНачисленияАмортизацииБУ 
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.МетодНачисленияАмортизацииБУ
		|	КОНЕЦ КАК МетодНачисленияАмортизацииБУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВРеглУчете
		|				И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы) 
		|			ТОГДА ДанныеДокумента.ПорядокУчетаБУ 
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ПорядокУчетаБУ
		|	КОНЕЦ КАК ПорядокУчетаБУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете
		|				И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы) 
		|			ТОГДА ДанныеДокумента.ПорядокУчетаУУ 
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ПорядокУчетаУУ
		|	КОНЕЦ КАК ПорядокУчетаУУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВРеглУчете
		|				И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы) 
		|			ТОГДА ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ)
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ПервоначальнаяСтоимостьБУ
		|	КОНЕЦ КАК ПервоначальнаяСтоимостьБУ,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеДокумента.ОтражатьВУпрУчете
		|				И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
		|			ТОГДА ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ)
		|		ИНАЧЕ ВтПервоначальныеСведенияКомпонент.ПервоначальнаяСтоимостьУУ
		|	КОНЕЦ КАК ПервоначальнаяСтоимостьУУ
		|
		|ИЗ
		|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО РасчетСтоимости.Ссылка = ТаблицаОС.Ссылка
		|			И РасчетСтоимости.ОбъектУчета = ТаблицаОС.КомпонентАмортизации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
		|		ПО ВтУчетнаяПолитикаФинансовогоУчета.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПервоначальныеСведенияКомпонент КАК ВтПервоначальныеСведенияКомпонент
		|		ПО ВтПервоначальныеСведенияКомпонент.Ссылка = ТаблицаОС.Ссылка
		|			И ВтПервоначальныеСведенияКомпонент.ОсновноеСредство = ТаблицаОС.КомпонентАмортизации
		|
		|ГДЕ
		|	(ДанныеДокумента.ОтражатьВРеглУчете
		|				И ДанныеДокумента.ПорядокУчетаБУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НеПриниматьКУчетуВключитьВРасходы)
		|		ИЛИ ДанныеДокумента.ОтражатьВУпрУчете
		|				И ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы))
		|
		|	И ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПорядокУчетаВНАРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНАРегл.Независимый)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка          КАК Регистратор,
		|	ДанныеДокумента.Период          КАК Период,
		|	ТаблицаОС.КомпонентАмортизации  КАК ОсновноеСредство,
		|	ДанныеДокумента.Организация     КАК Организация,
		|
		|	ДанныеДокумента.Период КАК ДатаВводаВЭксплуатациюБУ,
		|	ДанныеДокумента.Период КАК ДатаВводаВЭксплуатациюУУ,
		|	ДанныеДокумента.Ссылка КАК ДокументВводаВЭксплуатациюБУ,
		|	ДанныеДокумента.Ссылка КАК ДокументВводаВЭксплуатациюУУ,
		|
		|	ДанныеДокумента.МетодНачисленияАмортизацииУУ КАК МетодНачисленияАмортизацииБУ,
		|
		|	ВЫБОР ДанныеДокумента.ПорядокУчетаУУ
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена)
		|	КОНЕЦ КАК ПорядокУчетаБУ,
		|
		|	ДанныеДокумента.ПорядокУчетаУУ КАК ПорядокУчетаУУ,
		|
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК ПервоначальнаяСтоимостьБУ,
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК ПервоначальнаяСтоимостьУУ
		|
		|ИЗ
		|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО РасчетСтоимости.Ссылка = ТаблицаОС.Ссылка
		|			И РасчетСтоимости.ОбъектУчета = ТаблицаОС.КомпонентАмортизации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
		|		ПО ВтУчетнаяПолитикаФинансовогоУчета.Ссылка = ТаблицаОС.Ссылка
		|
		|ГДЕ
		|	ДанныеДокумента.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
		|	И ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПорядокУчетаВНАРегл, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНАРегл.Независимый)
		|";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаСтоимостьОС(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса);
	
	РасчетСтоимостиВНА.ТекстЗапросаПустаяВтРасчетСтоимости(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	ДанныеДокумента.Ссылка                       КАК Регистратор,
		|	ДанныеДокумента.Период                       КАК Период,
		|	ДанныеДокумента.Организация                  КАК Организация,
		|	ВтСведенияВладельцев.Местонахождение         КАК Подразделение,
		|	ДанныеДокумента.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
		|	ВтСведенияВладельцев.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ДанныеДокумента.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВРеглУчете           КАК ОтражатьВРеглУчете,
		|	ДанныеДокумента.ОтражатьВУпрУчете            КАК ОтражатьВУпрУчете,
		|	ТаблицаОС.КомпонентАмортизации               КАК ОсновноеСредство,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства) КАК ВидАналитикиКапитализацииРасходов,
		|
		|	ВЫБОР 
		|		КОГДА ТаблицаОС.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.Узел)
		|				ИЛИ (ТаблицаОС.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
		|					И ТаблицаОС.КомпонентАмортизации.УчитыватьСтоимостьЛиквидационногоОбязательства)
		|			ТОГДА ТаблицаОС.КомпонентАмортизации
		|		ИНАЧЕ ТаблицаОС.ОсновноеСредство
		|	КОНЕЦ КАК АналитикаКапитализацииРасходов,
		|
		|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)                КАК КорПодразделение,
		|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)      КАК КорНаправлениеДеятельности,
		|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)               КАК КорСтатьяРасходов,
		|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)            КАК КорАналитикаРасходов,
		|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL                                КАК РасчетСтоимости,
		|
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаОС.СтоимостьУУ) КАК Стоимость,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаОС.СтоимостьБУ) КАК СтоимостьРегл,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПР, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВР, 0) КАК СтоимостьВР,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0) КАК СтоимостьЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУЦФ, 0) КАК СтоимостьНУЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПРЦФ, 0) КАК СтоимостьПРЦФ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВРЦФ, 0) КАК СтоимостьВРЦФ,
		|
		|	0 КАК ПредварительнаяСтоимость,
		|	0 КАК ПредварительнаяСтоимостьРегл,
		|	
		|	РасчетСтоимости.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
		|	ДанныеДокумента.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации 
		|	
		|ИЗ
		|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
		|		ПО РасчетСтоимости.Ссылка = ТаблицаОС.Ссылка
		|			И РасчетСтоимости.ОбъектУчета = ТаблицаОС.КомпонентАмортизации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСведенияВладельцев КАК ВтСведенияВладельцев
		|		ПО ВтСведенияВладельцев.Ссылка = ТаблицаОС.Ссылка
		|			И ВтСведенияВладельцев.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Нужно отдельно записать предварительную стоимость для расчета амортизации
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	ДанныеДокумента.Ссылка                       КАК Регистратор,
		|	ДанныеДокумента.Период                       КАК Период,
		|	ДанныеДокумента.Организация                  КАК Организация,
		|	ВтСведенияВладельцев.Местонахождение         КАК Подразделение,
		|	ДанныеДокумента.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
		|	ВтСведенияВладельцев.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ДанныеДокумента.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВРеглУчете           КАК ОтражатьВРеглУчете,
		|	ДанныеДокумента.ОтражатьВУпрУчете            КАК ОтражатьВУпрУчете,
		|	ТаблицаОС.КомпонентАмортизации               КАК ОсновноеСредство,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства) КАК ВидАналитикиКапитализацииРасходов,
		|
		|	ВЫБОР 
		|		КОГДА ТаблицаОС.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.Узел)
		|				ИЛИ (ТаблицаОС.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
		|					И ТаблицаОС.КомпонентАмортизации.УчитыватьСтоимостьЛиквидационногоОбязательства)
		|			ТОГДА ТаблицаОС.КомпонентАмортизации
		|		ИНАЧЕ ТаблицаОС.ОсновноеСредство
		|	КОНЕЦ КАК АналитикаКапитализацииРасходов,
		|
		|	НЕОПРЕДЕЛЕНО                                 КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
		|	ЛОЖЬ                                         КАК РасчетСтоимости,
		|
		|	0                                            КАК Стоимость,
		|	0                                            КАК СтоимостьРегл,
		|	0                                            КАК СтоимостьНУ,
		|	0                                            КАК СтоимостьПР,
		|	0                                            КАК СтоимостьВР,
		|	0                                            КАК СтоимостьЦФ,
		|	0                                            КАК СтоимостьНУЦФ,
		|	0                                            КАК СтоимостьПРЦФ,
		|	0                                            КАК СтоимостьВРЦФ,
		|
		|	ТаблицаОС.СтоимостьУУ                        КАК ПредварительнаяСтоимость,
		|	ТаблицаОС.СтоимостьБУ                        КАК ПредварительнаяСтоимостьРегл,
		|
		|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
		|	НЕОПРЕДЕЛЕНО КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	ДанныеДокументаРеквизиты КАК ДанныеДокумента
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСведенияВладельцев КАК ВтСведенияВладельцев
		|		ПО ВтСведенияВладельцев.Ссылка = ТаблицаОС.Ссылка
		|			И ВтСведенияВладельцев.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
		|
		|ГДЕ
		|	(ТаблицаОС.СтоимостьБУ <> 0 ИЛИ ТаблицаОС.СтоимостьУУ <> 0)
		|";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ДопПоля = "Регистратор";
	//++ НЕ УТКА
	ДопПоля = "Регистратор,СуммаНДД";
	//-- НЕ УТКА

	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы(ДопПоля, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетСтоимостиВНА.ТекстЗапросаПустаяВтРасчетСтоимости(Запрос, ТекстыЗапроса);
	
	СписокЗапросовОбъединение = Новый Массив;
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивыПринятияКУчету(СписокЗапросовОбъединение);	
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаУзлыКомпонентыАмортизации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УзлыКомпонентыАмортизации";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Период КАК Период,
	|	ТаблицаОС.КомпонентАмортизации КАК УзелКомпонент,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы(ДопПоля, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса, ДопПоля)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяВтРасчетРасходов(Запрос, ТекстыЗапроса);
	РасчетСтоимостиВНА.ТекстЗапросаПустаяВтРасчетСтоимости(Запрос, ТекстыЗапроса);

	ЗапросыРегистра = Новый Массив;
	ЗапросыРегистра.Добавить(РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы(ДопПоля));
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПрочиеРасходыПринятияКУчету(ЗапросыРегистра);
	
	ТекстЗапроса = СтрСоединить(ЗапросыРегистра, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса)

	ИмяТаблицы = "ВтРасчетСтоимостиСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаВтРасчетСтоимостиСгруппированная(Запрос, ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		РасчетСтоимостиВНА.ТекстЗапросаПустаяВтРасчетСтоимости(Запрос, ТекстыЗапроса);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетСтоимости.Ссылка КАК Ссылка,
		|	РасчетСтоимости.ОбъектУчета КАК ОбъектУчета,
		|
		|	СУММА(РасчетСтоимости.Стоимость)          КАК Стоимость,
		|	СУММА(РасчетСтоимости.СтоимостьРегл)      КАК СтоимостьРегл,
		|	СУММА(РасчетСтоимости.СтоимостьНУ)        КАК СтоимостьНУ,
		|	СУММА(РасчетСтоимости.СтоимостьПР)        КАК СтоимостьПР,
		|	СУММА(РасчетСтоимости.СтоимостьВР)        КАК СтоимостьВР,
		|	СУММА(РасчетСтоимости.СтоимостьЦФ)        КАК СтоимостьЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
		|	СУММА(РасчетСтоимости.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ
		|
		|ПОМЕСТИТЬ ВтРасчетСтоимостиСгруппированная
		|
		|ИЗ
		|	ВтРасчетСтоимости КАК РасчетСтоимости
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетСтоимости.Ссылка,
		|	РасчетСтоимости.ОбъектУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ОбъектУчета
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса)
	
	ИмяТаблицы = "ВтСведенияВладельцев";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаВтСведенияВладельцев(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтМестонахождениеОС(ТекстыЗапроса, "ДанныеДокументаТаблицаКомпоненты");
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПорядокУчетаОС(ТекстыЗапроса, "ДанныеДокументаТаблицаКомпоненты");
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПорядокУчетаОСУУ(ТекстыЗапроса, "ДанныеДокументаТаблицаКомпоненты");
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПорядокУчетаОСБУ(ТекстыЗапроса, "ДанныеДокументаТаблицаКомпоненты");
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтСоставЕГДС(ТекстыЗапроса, "ДанныеДокументаТаблицаКомпоненты");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаКомпоненты.Ссылка КАК Ссылка,
		|	ТаблицаКомпоненты.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|
		|	МестонахождениеОС.Местонахождение КАК Местонахождение,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.МОЛАрендатора КАК МОЛАрендатора,
		|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
		|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
		|	МестонахождениеОС.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
		|	МестонахождениеОС.Арендатор КАК Арендатор,
		|
		|	ПорядокУчетаОСУУ.СтатьяРасходов КАК СтатьяРасходовУУ,
		|	ПорядокУчетаОСУУ.АналитикаРасходов КАК АналитикаРасходовУУ,
		|	ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизациюУУ,
		|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходовУУ,
		|
		|	ПорядокУчетаОСБУ.СтатьяРасходовБУ КАК СтатьяРасходовБУ,
		|	ПорядокУчетаОСБУ.АналитикаРасходовБУ КАК АналитикаРасходовБУ,
		|	ПорядокУчетаОСБУ.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизациюБУ,
		|	ПорядокУчетаОСБУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходовБУ,
		|
		|	ПорядокУчетаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|
		|	СоставЕГДС.ЕГДС КАК ЕГДС
		|
		|ПОМЕСТИТЬ ВтСведенияВладельцев
		|
		|ИЗ
		|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаКомпоненты
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтМестонахождениеОС КАК МестонахождениеОС
		|		ПО МестонахождениеОС.Ссылка = ТаблицаКомпоненты.Ссылка
		|			И МестонахождениеОС.ОсновноеСредство = ТаблицаКомпоненты.ОсновноеСредство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПорядокУчетаОС КАК ПорядокУчетаОС
		|		ПО МестонахождениеОС.Ссылка = ТаблицаКомпоненты.Ссылка
		|			И ПорядокУчетаОС.ОсновноеСредство = ТаблицаКомпоненты.ОсновноеСредство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
		|		ПО МестонахождениеОС.Ссылка = ТаблицаКомпоненты.Ссылка
		|			И ПорядокУчетаОСУУ.ОсновноеСредство = ТаблицаКомпоненты.ОсновноеСредство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
		|		ПО ПорядокУчетаОСБУ.Ссылка = ТаблицаКомпоненты.Ссылка
		|			И ПорядокУчетаОСБУ.ОсновноеСредство = ТаблицаКомпоненты.ОсновноеСредство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСоставЕГДС КАК СоставЕГДС
		|		ПО МестонахождениеОС.Ссылка = ТаблицаКомпоненты.Ссылка
		|			И СоставЕГДС.ВнеоборотныйАктив = ТаблицаКомпоненты.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ИдентификаторСтроки
		|";
		
	КонецЕсли;
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтПервоначальныеСведенияКомпонент(ТекстыЗапроса)
	
	ИмяТаблицы = "ВтПервоначальныеСведенияКомпонент";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаТаблицаВтСписокКомпонент(ТекстыЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"ПервоначальныеСведенияОС", ИмяТаблицы, "ВтСписокКомпонент", ТекстыЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтСписокКомпонент(ТекстыЗапроса)
	
	ИмяТаблицы = "ВтСписокКомпонент";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаОС.КомпонентАмортизации КАК ОсновноеСредство
	|
	|ПОМЕСТИТЬ ВтСписокКомпонент
	|
	|ИЗ
	|	ДанныеДокументаТаблицаКомпоненты КАК ТаблицаОС
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство,
	|	Организация
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
