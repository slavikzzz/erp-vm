#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//	Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//	КомандыСозданияНаОсновании - См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//	Параметры - Структура - Вспомогательные параметры. Для чтения. См. описание 2 параметра процедуры
//							СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//	КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения. См. описание 1 параметра процедуры
//										ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//	Параметры - Структура - Вспомогательные параметры. Для чтения. См. описание 2 параметра процедуры
//							ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//	МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена регистрация в механизме 
//									проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("УчетИмпорта");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов - таблиц значений - данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыКОформлениюДокументовИмпорта(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Возвращает данные для заполнения табличной части Товары по основанию.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ПриобретениеТоваровУслуг - основание
//	КодТНВЭД - СправочникСсылка.КлассификаторТНВЭД
//	ЕдиницаИзмерения - ОпределяемыйТип.ЕдиницаИзмерения
//	Ссылка - ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ДанныеТЧТоварыПоОснованию(ДокументОснование, КодТНВЭД, ЕдиницаИзмерения = Неопределено, Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("КодТНВЭД", КодТНВЭД);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.МестоХранения КАК МестоХранения,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.ТипМестаХранения КАК ТипМестаХранения,
	|	ТоварыОстатки.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыОстатки.КоличествоПоРНПТОстаток КАК КоличествоПоРНПТ,
	|	ТоварыОстатки.СуммаОстаток КАК Сумма,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.СкладскаяТерритория КАК Склад,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Подразделение КАК Подразделение,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Договор КАК Договор,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Партнер КАК Хранитель,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Контрагент КАК Контрагент,
	|	ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюДокументовИмпорта.Остатки(, ДокументПоступления = &ДокументОснование) КАК
	|		ТоварыОстатки
	|ГДЕ
	|	ТоварыОстатки.КоличествоОстаток > 0
	|	И ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД = &КодТНВЭД
	|	И (ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	ИЛИ &ЕдиницаИзмерения = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыРасход.АналитикаУчетаНоменклатуры,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Характеристика,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Серия,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.МестоХранения,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Назначение,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.ТипМестаХранения,
	|	ТоварыРасход.ВидЗапасов,
	|	ТоварыРасход.Количество,
	|	ТоварыРасход.КоличествоПоРНПТ,
	|	ТоварыРасход.Сумма,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.СкладскаяТерритория,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Подразделение,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Договор,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Партнер,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Контрагент,
	|	ТоварыРасход.АналитикаУчетаНоменклатуры.Номенклатура.СтранаПроисхождения
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюДокументовИмпорта КАК ТоварыРасход
	|ГДЕ
	|	ТоварыРасход.Регистратор = &Ссылка
	|	И ТоварыРасход.Активность
	|	И ТоварыРасход.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТоварыРасход.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД = &КодТНВЭД
	|	И (ТоварыРасход.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	ИЛИ &ЕдиницаИзмерения = НЕОПРЕДЕЛЕНО)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//	ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике 
//										см. ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов.
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Организация");
	
КонецПроцедуры

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Склад,Дата,ПервичныйДокумент";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//	Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	ПустаяСтруктура = Новый Структура();
	ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", ПустаяСтруктура)
										Или ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство",
																		ПустаяСтруктура);
	УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", ПустаяСтруктура)
										Или ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство",
																		ПустаяСтруктура);
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям	= УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры	= ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости		= Истина;
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ДвижениеВФинансовомУчете);
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ТипМестаХранения");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Подразделение");
	
	ОперацииВПути = Новый Массив();
	ОперацииВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ОперацииВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	ОперацииВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	
	ОперацииНеотфактуровки = Новый Массив();
	ОперацииНеотфактуровки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
	ОперацииНеотфактуровки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки); 
	
	ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПервичныйДокумент, "ХозяйственнаяОперация");
	ХозОперацияТоварыВПутиИНеотфактуровка = ОперацииВПути.Найти(ХозяйственнаяОперация) <> Неопределено
		Или ОперацииНеотфактуровки.Найти(ХозяйственнаяОперация) <> Неопределено;
	
	ПараметрыУказанияСерий.ПараметрыЗапроса.Вставить("ХозОперацияТоварыВПутиИНеотфактуровка", ХозОперацияТоварыВПутиИНеотфактуровка);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий.
//
// Параметры:
//	ПараметрыУказанияСерий - Структура - состав полей задается в функции
//		НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки			КАК НомерСтроки,
	|	Товары.Номенклатура			КАК Номенклатура,
	|	Товары.Характеристика		КАК Характеристика,
	|	Товары.Назначение			КАК Назначение,
	|	Товары.Серия				КАК Серия,
	|	Товары.Количество			КАК Количество,
	|	Товары.Склад				КАК Склад,
	|	Товары.Подразделение		КАК Подразделение,
	|	Товары.СтатусУказанияСерий	КАК СтатусУказанияСерий,
	|	Товары.ТипМестаХранения		КАК ТипМестаХранения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки			КАК НомерСтроки,
	|	Товары.ТипМестаХранения		КАК ТипМестаХранения,
	|	Товары.СтатусУказанияСерий	КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерийПоСкладам.ПолитикаУчетаСерий ЕСТЬ NULL
	|				И ПолитикиУчетаСерийПоПодразделениям.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерийПоСкладам.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|						ИЛИ ПолитикиУчетаСерийПоПодразделениям.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ						КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВПереданныхНаХранениеТоварах
	|									ИЛИ ВидНоменклатуры.ПолитикаУчетаСерий.УчетТоваровВПутиОтПоставщикаПоСериям
	|									ИЛИ ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВНеотфактурованныхПоставкахТоваров
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 18
	|										ИНАЧЕ 17
	|									КОНЕЦ
	|								ИНАЧЕ 0
	|						КОНЕЦ
	|					ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ						КАК СтатусУказанияСерийТоварыУПартнеров
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийПоСкладам
	|		ПО ПолитикиУчетаСерийПоСкладам.Склад = Товары.Склад
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПоСкладам.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийПоПодразделениям
	|		ПО ПолитикиУчетаСерийПоПодразделениям.Склад = Товары.Подразделение
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПоПодразделениям.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидНоменклатуры
	|		ПО ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки	КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ХозОперацияТоварыВПутиИНеотфактуровка ТОГДА
	|			Статусы.СтатусУказанияСерийТоварыУПартнеров
	|		ИНАЧЕ
	|			Статусы.СтатусУказанияСерий
	|	КОНЕЦ				КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ХозОперацияТоварыВПутиИНеотфактуровка ТОГДА
	|			Статусы.СтатусУказанияСерийТоварыУПартнеров
	|		ИНАЧЕ
	|			Статусы.СтатусУказанияСерий
	|	КОНЕЦ <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Возвращает представление уведомления о ввозе прослеживаемых товаров с учетом состояния проведения.
//
// Параметры:
// 	Номер - Строка - Номер уведомления о ввозе.
// 	Дата - Дата - Дата уведомления о ввозе.
// 	Проведен - Булево - Признак проведения документа.
//
// Возвращаемое значение:
//	Строка - представление уведомления о ввозе прослеживаемых товаров.
//
Функция ПредставлениеУведомленияОВвозеПрослеживаемыхТоваров(Номер, Дата, Проведен) Экспорт
	
	ДанныеШапки = Новый Структура();
	ДанныеШапки.Вставить("Номер", Номер);
	ДанныеШапки.Вставить("Дата", Дата);
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить(ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеШапки, НСтр("ru = 'Уведомление по ПТ';
																											|en = 'TG notification'")));
	Если Не Проведен Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(не проведено)';
									|en = '(not posted)'"));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПодстрок, " ");
	
КонецФункции

// Функция находит распоряжения на оформление уведомлений о ввозе прослеживаемых товаров для заданного документа поступления.
//
// Параметры:
//	ДокументПоступления - ДокументСсылка - Документ, для которого необходимо найти распоряжения на оформление уведомлений о ввозе прослеживаемых товаров.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с найденными распоряжениями на оформление.
//
Функция РаспоряженияКОформлениюУведомленийОВвозеПоОснованию(ДокументПоступления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		ТоварыКОформлениюДокументовИмпортаОстатки.Организация КАК Организация,
	               |		ТоварыКОформлениюДокументовИмпортаОстатки.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	               |		ТоварыКОформлениюДокументовИмпортаОстатки.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		ТоварыКОформлениюДокументовИмпортаОстатки.ДокументПоступления КАК ДокументПоступления
	               |	ИЗ
	               |		РегистрНакопления.ТоварыКОформлениюДокументовИмпорта.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКОформлениюДокументовИмпортаОстатки
	               |	ГДЕ
	               |		ТоварыКОформлениюДокументовИмпортаОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРаспоряжений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРаспоряжений;
	
КонецФункции

// Функция находит уведомления о ввозе прослеживаемых товаров заданного первичного документа.
//
// Параметры:
//	ПервичныйДокумент - ДокументСсылка - Документ, для которого необходимо найти уведомления о ввозе прослеживаемых товаров.
//	Проведен - Булево - Признак того, что необходимо получить проведенные документы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных уведомления о ввозе прослеживаемых товаров.
//
Функция УведомленияОВвозеПрослеживаемыхТоваровПоОснованию(ПервичныйДокумент, Проведен = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Ссылка                                  КАК Ссылка,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Проведен                                КАК Проведен,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Номер                                   КАК Номер,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Дата                                    КАК Дата,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Организация                             КАК Организация,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Контрагент                              КАК Контрагент,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.КодТНВЭД                                КАК КодТНВЭД,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.Склад	                               КАК Склад,
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ПервичныйДокумент 					   КАК ДокументОснование
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК УведомлениеОВвозеПрослеживаемыхТоваров
	|ГДЕ
	|	УведомлениеОВвозеПрослеживаемыхТоваров.ПервичныйДокумент = &ДокументОснование
	|	И УведомлениеОВвозеПрослеживаемыхТоваров.ПометкаУдаления = ЛОЖЬ
	|";
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПометкаУдаления = ЛОЖЬ", "Проведен");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", ПервичныйДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаУведомлений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаУведомлений;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
// Возвращаемое значение:
//	См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.ДвиженияПоСкладскимРегистрам = "ИСТИНА";
	//++ НЕ УТКА
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеПродукция22));
	//-- НЕ УТКА
	
	// В наличии на складе
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы,
																	"ОбеспечениеЗаказов",
																	Истина,
																	"Объект.Товары.Назначение",
																	"ОбеспечениеПоСкладу");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	ОписаниеКолонок.КолонкиПоУмолчанию.Добавить("ВНаличии");
	
	ОписаниеКолонок.УсловиеИспользования = "Объект.Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура	= "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика	= "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад			= "Объект.Товары.Склад";
	
	// В наличии в подразделении
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы,
																	"ОбеспечениеЗаказов",
																	Истина,
																	"Объект.Товары.Назначение",
																	"ОбеспечениеПоПодразделению");
	КолонкаВНаличии = ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии");
	КолонкаВНаличии.Пометка = Истина;
	КолонкаВНаличии.Представление = НСтр("ru = 'В наличии в подразделении ""%ОбеспечениеПоПодразделениюВПроизводство_Склад%""';
										|en = 'In stock in the ""%ОбеспечениеПоПодразделениюВПроизводство_Склад%"" business unit'");
	ОписаниеКолонок.КолонкиПоУмолчанию.Добавить("ВНаличии");
	
	ОписаниеКолонок.УсловиеИспользования = "Объект.Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура	= "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика	= "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад			= "Объект.Товары.Подразделение";
	
	// В наличии у хранителя
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы,
																	"ВсеНазначения",
																	Истина,
																	"Объект.Товары.Назначение",
																	"ОбеспечениеПоДоговору");
	
	ОписаниеКолонок.УсловиеИспользования = "Объект.Товары.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.ДоговорКонтрагента)";
	
	Возврат МакетФормы;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"УведомлениеОВвозеПрослеживаемыхТоваров", 
			НСтр("ru = 'Уведомление о ввозе прослеживаемых товаров';
				|en = 'Notification of traceable goods import'"),
			ПрослеживаемостьБРУ.ПечатьУведомленияОВвозеПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "УведомлениеОВвозеПрослеживаемыхТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Печать';
										|en = 'Print'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Уведомление о ввозе прослеживаемых товаров';
										|en = 'Notification of traceable goods import'");
	КомандаПечати.Обработчик     = "ПрослеживаемостьФормыКлиент.ВыполнитьКомандуПечатиУведомленияОВвозеПрослеживаемыхТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка";
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТ

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						КАК Ссылка,
	|	ДанныеДокумента.Номер						КАК Номер,
	|	ДанныеДокумента.Дата						КАК Период,
	|	ДанныеДокумента.Организация					КАК Организация,
	|	ДанныеДокумента.Проведен					КАК Проведен,
	|	ДанныеДокумента.РНПТ						КАК РНПТ,
	|	ДанныеДокумента.ПервичныйДокумент			КАК ДокументПоступления,
	|	ДанныеДокумента.ПервичныйДокумент.Партнер	КАК Поставщик,
	|	ДанныеДокумента.ПометкаУдаления	КАК ПометкаУдаления
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта());
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ИдентификаторМетаданных);
	Запрос.УстановитьПараметр("ТипДокументаИмпорта", ИдентификаторМетаданных);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки					КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)		КАК ВидДвижения,
	|	&Период										КАК Период,
	|	&Организация								КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаТовары.НомерГТД						КАК НомерГТД,
	|	ТаблицаТовары.Количество					КАК Количество,
	|	ТаблицаТовары.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|	ЛОЖЬ										КАК Первичное
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаТовары.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И &РНПТ <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки					КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)		КАК ВидДвижения,
	|	&Период										КАК Период,
	|	&Организация								КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.ВидЗапасов					КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД,
	|	ТаблицаТовары.Количество					КАК Количество,
	|	0											КАК КоличествоПоРНПТ,
	|	ЛОЖЬ										КАК Первичное
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаТовары.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И &РНПТ <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюДокументовИмпорта(Запрос, ТекстыЗапроса, Регистры)
	
	
	ИмяРегистра = "ТоварыКОформлениюДокументовИмпорта";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
		
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки					КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)		КАК ВидДвижения,
	|	&Период										КАК Период,
	|	&Организация								КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.ВидЗапасов					КАК ВидЗапасов,
	|	&РНПТ										КАК НомерГТД,
	|	ТаблицаТовары.Количество					КАК Количество,
	|	ТаблицаТовары.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|	&Поставщик									КАК Поставщик,
	|	&ДокументПоступления						КАК ДокументПоступления,
	|	&ТипДокументаИмпорта						КАК ТипДокументаИмпорта,
	|	Аналитика.Номенклатура						КАК Номенклатура,
	|	Аналитика.Характеристика					КАК Характеристика,
	|	ТаблицаТовары.Сумма							КАК Сумма,
	|	ЛОЖЬ										КАК Первичное
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаТовары.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента					= ПолноеИмяОбъекта();
	СинонимТаблицыДокумента				= "";
	ПереопределениеРасчетаПараметров	= Новый Структура;
	ТекстыЗапросаВременныхТаблиц		= Новый Соответствие;
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
								ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	ЗначенияПараметров.Вставить("ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров",
								УчетПрослеживаемыхТоваровЛокализация.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров());
	
	Если ИмяРегистра = "ТоварыОрганизаций" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;

	ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																						ПолноеИмяДокумента,
																						СинонимТаблицыДокумента,
																						ПереопределениеРасчетаПараметров,
																						ТекстыЗапросаВременныхТаблиц);
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.УведомлениеОВвозеПрослеживаемыхТоваров";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли