#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки отчета от строки заказа

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",                   Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация",  Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	// ПараметрыВыбораСтатейИАналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцу2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	// НастройкаСчетовУчета
	ПараметрыНастройки = Документы.ОтчетДавальцу2_5.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	// Конец НастройкаСчетовУчета
	
	// Заполнение служебных реквизитов (пользователю не видны)
	ЗаполнитьСлужебныеРеквизиты();
	
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоНалогообложениюСервер();
	
	УстановитьДоступностьКомандБуфераОбмена();

	Элементы.ПродукцияВидЦены.БыстрыйВыбор = Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтотОбъект);
	// Конец Взаиморасчеты
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПредыдущиеРеквизитыСтроки = Новый Структура;
	ПредыдущиеРеквизитыСтроки.Вставить("Номенклатура");
	ПредыдущиеРеквизитыСтроки.Вставить("Характеристика");
	ПредыдущиеРеквизитыСтроки.Вставить("Упаковка");
	ПредыдущиеРеквизитыСтроки.Вставить("Количество");
	ПредыдущиеРеквизитыСтроки.Вставить("КоличествоУпаковок");
	ПредыдущиеРеквизитыСтроки.Вставить("Склад");
	ПредыдущиеРеквизитыСтроки.Вставить("Серия");
	ПредыдущиеРеквизитыСтроки.Вставить("ТипНоменклатуры");
	ПредыдущиеРеквизитыСтроки.Вставить("ХарактеристикиИспользуются");
	ПредыдущиеРеквизитыСтроки.Вставить("Артикул");
	ПредыдущиеРеквизитыСтроки.Вставить("ЗаказДавальца");
	ПредыдущиеРеквизитыСтроки.Вставить("КодСтроки");
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
	ПриЧтенииСозданииНаСервере();
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтотОбъект);
	// Конец Взаиморасчеты
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПараметрыВыбораСтатейИАналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцу2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	// НастройкаСчетовУчета
	ПараметрыНастройки = Документы.ОтчетДавальцу2_5.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	// Конец НастройкаСчетовУчета
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбновитьИнформациюПоЗаказам();
	ОбновитьОтклоненияОтЗаказа();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	ОбновитьТекстСчетаФактуры();
	
	СохранитьЗначенияРеквизитовДоИзменения(ЭтотОбъект);
	
	// ПараметрыВыбораСтатейИАналитик
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	// НастройкаСчетовУчета
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец НастройкаСчетовУчета
	
	// Заполнение служебных реквизитов (пользователю не видны)
	ЗаполнитьСлужебныеРеквизиты();
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец Взаиморасчеты
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка
	 Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ИзмененаОплатаСервер(ИмяСобытия, Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
	   И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте(Истина);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборТоваров(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОтчетДавальцу2_5.Форма.ФормаПодбораИзЗаказа" Тогда
		
		ПолучитьПродукциюИзХранилища(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровПринятыхНаОтветственноеХранение.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборВыпущеннойПродукции(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			Модифицированность = Истина;
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли УчетНДСУПКлиент.ЗаконченоРедактированиеСчетаФактурыВыданного(ВыбранноеЗначение, ИсточникВыбора) Тогда
		
		ОбновитьТекстСчетаФактуры();
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтчетДавальцу2_5", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// НастройкаСчетовУчета
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец НастройкаСчетовУчета
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ВзаиморасчетыСервер.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПередЗаписьюНаКлиентеСервер();
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаКлиентеСервер()
	ВзаиморасчетыВызовСервера.ФормаПередЗаписьюНаКлиентеСервер(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
	   И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаказамПриИзменении(Элемент)
	
	ОчиститьСообщения();
	Если Объект.ОтчетПоЗаказам Тогда
		
		Если ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5 Тогда
		
			Если Объект.Продукция.Количество() = 0 Тогда
				
				ТекстВопроса = НСтр("ru = 'Список ""Выпущенная продукция"" будет перезаполнен остатками неоформленных товаров по заказам.
										|Продолжить?';
										|en = 'The ""Released products"" list will be refilled with the remaining unregistered goods by orders.
										|Continue?'");
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Строки в списке ""Выпущенная продукция"" будут привязаны к строкам заказов.
										|Продолжить?';
										|en = 'The ""Released products"" list lines will be linked to the order lines.
										|Continue?'");
				
			КонецЕсли;
		
		Иначе
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Регистратор",                         Объект.Ссылка);
			ПараметрыОтбора.Вставить("Организация",                         Объект.Организация);
			ПараметрыОтбора.Вставить("Партнер",                             Объект.Партнер);
			ПараметрыОтбора.Вставить("Контрагент",                          Объект.Контрагент);
			ПараметрыОтбора.Вставить("Договор",                             Объект.Договор);
			ПараметрыОтбора.Вставить("Склад",                               Объект.Склад);
			ПараметрыОтбора.Вставить("Валюта",                              Объект.ВалютаВзаиморасчетов);
			ПараметрыОтбора.Вставить("Сделка",                              Объект.Сделка);
			ПараметрыОтбора.Вставить("СтавкаНДС",                           Объект.СтавкаНДС);
			ПараметрыОтбора.Вставить("НалогообложениеНДС",                  Объект.НалогообложениеНДС);
			ПараметрыОтбора.Вставить("НаправлениеДеятельности",             Объект.НаправлениеДеятельности);
			ПараметрыОтбора.Вставить("ИспользоватьНаправленияДеятельности", ИспользоватьНаправленияДеятельности);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
			ОткрытьФорму(
				"Документ.ОтчетДавальцу2_5.Форма.ФормаВыбораРаспоряжения",
				ПараметрыФормы,,,,,
				Новый ОписаниеОповещения("ОтчетПоЗаказамПриИзмененииПослеВыбора", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.Продукция.Количество() > 0 Тогда
			
			Если ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5 Тогда
				
				ТекстВопроса = НСтр("ru = 'Строки в списке ""Выпущенная продукция"" перестанут быть связанными со строками заказов.
										|Продолжить?';
										|en = 'The ""Released products"" list lines will be unlinked from the order lines.
										|Continue?'");
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Строки в списке ""Выпущенная продукция"" перестанут быть связанными со строками заказа.
										|Продолжить?';
										|en = 'The ""Released products"" list lines will be unlinked from the order lines.
										|Continue?'");
				
			КонецЕсли;
			
		Иначе
			
			ПриИзмененииОтчетаПоНесколькимЗаказам();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтчетПоЗаказамПриИзмененииФрагмент(Неопределено, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаказамПриИзмененииПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Объект.ОтчетПоЗаказам = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.Продукция.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Список ""Выпущенная продукция"" будет заполнен остатками неоформленных товаров по документу %1.
								|Продолжить?';
								|en = 'The ""Released products"" list will be filled with the remaining unregistered goods by the %1 document.
								|Continue?'");
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Строки в списке ""Выпущенная продукция"" будут привязаны к строкам документа %1.
								|Продолжить?';
								|en = 'The ""Released products"" list lines will be linked to the %1 document lines.
								|Continue?'");
		
	КонецЕсли;
	
	ОтчетПоЗаказамПриИзмененииФрагмент(Результат, СтрШаблон(ТекстВопроса, Результат.ЗаказДавальца));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаказамПриИзмененииФрагмент(Результат, ТекстВопроса)
	
	ДополнительныеПараметры = Новый Структура("Результат", Результат);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОтчетПоЗаказамПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаказамПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ОтчетПоЗаказам = Не Объект.ОтчетПоЗаказам;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Результат) Тогда
		Объект.ЗаказДавальца = ДополнительныеПараметры.Результат.ЗаказДавальца;
		Объект.ПорядокРасчетов = ДополнительныеПараметры.Результат.ПорядокРасчетов;
	КонецЕсли;
	
	ПриИзмененииОтчетаПоНесколькимЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> Объект.Склад Тогда
		
		Если Объект.ОтчетПоЗаказам
		   И Объект.Продукция.Количество() > 0 Тогда
			
			Если Не ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад) Тогда
				
				СписокКнопок = Новый СписокЗначений;
				
				Если Объект.Продукция.НайтиСтроки(Новый Структура("КодСтроки", 0)).Количество() > 0 Тогда
					
					СписокКнопок.Добавить("Продолжить", НСтр("ru = 'Очистить товары';
															|en = 'Clear goods'"));
					СписокКнопок.Добавить("Отвязать",   НСтр("ru = 'Отвязать от заказа';
															|en = 'Unlink from order'"));
					
					ТекстВопроса = НСтр("ru = 'При изменении склада список ""Выпущенная продукция"" необходимо очистить, либо отвязать строки от заказа.
											|Продолжить?';
											|en = 'When changing the warehouse, clear the ""Released products"" list or unlink the lines from the order.
											|Continue?'")
					
				Иначе
					
					СписокКнопок.Добавить("Продолжить", НСтр("ru = 'Продолжить';
															|en = 'Continue'"));
					
					ТекстВопроса = НСтр("ru = 'Список ""Выпущенная продукция"" будет очищен. Продолжить?';
										|en = 'List ""Released products"" will be cleared. Continue?'")
					
				КонецЕсли;
				
				СписокКнопок.Добавить("Отмена", НСтр("ru = 'Отмена';
													|en = 'Cancel'"));
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СкладПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, СписокКнопок);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СкладПриИзмененииФрагмент(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Отмена" Тогда
		Объект.Склад = Склад;
		Возврат;
	КонецЕсли;
	
	ОтвязатьВсеСтрокиОтЗаказа = РезультатВопроса = "Отвязать";
	ОчищатьСтроки             = РезультатВопроса <> "Отвязать";
	
	СкладПриИзмененииФрагмент(ОчищатьСтроки, ОтвязатьВсеСтрокиОтЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииФрагмент(ОчищатьСтроки, ОтвязатьВсеСтрокиОтЗаказа)
	
	ПриИзмененииСкладаСервер(ОчищатьСтроки, ОтвязатьВсеСтрокиОтЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо)
	 Или ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииКонтактногоЛицаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Если Объект.Договор = ЗначенияРеквизитовДоИзменения.Договор Тогда
		Возврат;
	КонецЕсли;
	
	ОснованиеИзменено = ОснованиеИзменено И ЗначениеЗаполнено(Объект.Основание);
	
	Если Объект.Продукция.Количество() > 0 Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение", ЭтотОбъект),
			НСтр("ru = 'Будет очищена таблица ""Выпущенная продукция"". Продолжить?';
				|en = 'The Released products tab will be cleared. Do you want to continue?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПриИзмененииДоговораСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ПриИзмененииНалогообложенияНДССервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ПриИзмененииЦенаВключаетНДССервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетаФактурыВыданныеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
	ПараметрыРегистрации.Ссылка				  = Объект.Ссылка;
	ПараметрыРегистрации.Дата				  = Объект.Дата;
	ПараметрыРегистрации.Организация		  = Объект.Организация;
	ПараметрыРегистрации.Контрагент			  = Объект.Контрагент;
	ПараметрыРегистрации.НалогообложениеНДС	  = Объект.НалогообложениеНДС;
	ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
	
	УчетНДСУПКлиент.ОбработкаНавигационнойСсылкиСчетаФактурыВыданные(
		ЭтотОбъект, НавигационнаяСсылка, СтандартнаяОбработка, ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Перем ЦеныРассчитаны;
	
	Если Не Объект.ОтчетПоЗаказам Тогда
		
		ЦеныПредприятияЗаполнениеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(
			Объект,
			Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект),
			"Продукция",
			Ложь,
			НСтр("ru = 'Перезаполнить цены?';
				|en = 'Refill prices?'"));
		
		Возврат;
		
	КонецЕсли; 
	
	ПересчитатьЦены = Ложь;
	
	ПриИзмененииДатыСервер(ПересчитатьЦены, ЦеныРассчитаны);

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыКлиент.ОграниченияЗадолженностиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	ПоместитьЭтапыОплатыВоВременноеХранилище(Элемент.Имя);
	
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	ВзаиморасчетыКлиент.НадписьЭтапыОплатыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИзмененныеРеквизиты = Результат.СтарыеЗначенияИзмененныхРеквизитов;
		ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетДавальцу2_5.Форма.ФормаДокумента.Элемент.НаправлениеДеятельности.ПриИзменении");
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВалютыНажатие(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("НадписьВалютыНажатиеЗавершение", ЭтотОбъект);
	ВзаиморасчетыКлиент.ВалютыИКурсДокументаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаказыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДокументов", СписокЗаказов);
	ПараметрыФормы.Вставить("Заголовок",        НСтр("ru = 'Заказы давальцев (%КоличествоДокументов%)';
													|en = 'Subcontracting sales orders (%КоличествоДокументов%)'"));
	
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Неопределено,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Если Объект.СтавкаНДС = ЗначенияРеквизитовДоИзменения.СтавкаНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСтавкиНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.УслугаПоПереработке",
		НСтр("ru = 'Содержание услуги по переработке';
			|en = 'Subcontracting service content'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Продукция, ЭтотОбъект);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
		
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если Копирование Тогда
		
		Если ТекущиеДанные.КодСтроки <> 0 Тогда
			ТекущиеДанные.КодСтроки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Если Копирование Тогда
			
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент);
			
		Иначе
			
			СтруктураДействий = Новый Структура;
			
			ДоходыИРасходыКлиентСервер.ВставитьДействиеИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(
				СтруктураДействий, ЭтотОбъект, "Объект.Продукция");
			
			СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьОтклоненияОтЗаказаВСтроке(ТекущиеДанные, Объект.ОтчетПоЗаказам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИдентификаторСтроки, КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗаказДавальца) Тогда
		
		Если ЗначениеЗаполнено(Объект.ЗаказДавальца) Тогда
			
			ТекущиеДанные.ЗаказДавальца = Объект.ЗаказДавальца;
			ТекущиеДанные.Назначение    =
				ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ЗаказДавальца, "Назначение");
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.Назначение) Тогда
			
			ТекущиеДанные.Назначение    = НазначениеДоговора;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КэшСтроки =
		?(НоваяСтрока, Неопределено, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Продукция, ЭтотОбъект));
	
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КэшСтроки, СкладГруппа, Ложь);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
		НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Продукция, ЭтотОбъект);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
										Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Истина);

	ПродукцияПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Продукция.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетДавальцу2_5.Форма.ФормаДокумента.Элемент.Продукция.Выбор");
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если Поле = Элементы.ПродукцияЦена Тогда
		
		Если Не ЭтоПолноправныйПользователь
		   И Не ОтклонениеОтУсловийПродаж
		   И ЗначениеЗаполнено(ТекущиеДанные.КодСтроки) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		Если ПравоНаЧтениеВидаЦены Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И Не Объект.Согласован Тогда
				
				ОчиститьСообщения();
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Для редактирования цены очистите вид цены';
						|en = 'To edit the price, clear the price type'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Продукция", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ПродукцияВидЦены Тогда
		
		Если Не ЭтоПолноправныйПользователь
		   И Не ОтклонениеОтУсловийПродаж
		   И ЗначениеЗаполнено(ТекущиеДанные.КодСтроки) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ПродукцияЗаказДавальца Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказДавальца) Тогда
			
			ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗаказДавальца);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказДавальца) Тогда
			
			ПоказатьЗначение(Неопределено, Объект.ЗаказДавальца);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ПродукцияПредставлениеОтраженияОперации
			И ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов) Тогда
		
		НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Поле, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиЗавершения();
	ДополнительныеПараметры.ТекущаяСтрока = ТекущаяСтрока;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродукцияНоменклатураПриИзмененииВопросПользователюЗавершение",
												  ЭтотОбъект,
												  ДополнительныеПараметры);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуПродажи",
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",               Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	
	СтруктураДействий.Вставить(
		"ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	
	СтруктураДействий.Вставить(
		"НоменклатураПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Продукция"));
		
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиЗавершения();
	ДополнительныеПараметры.ТекущаяСтрока = ТекущаяСтрока;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродукцияХарактеристикаПриИзмененииВопросПользователюЗавершение",
												  ЭтотОбъект,
												  ДополнительныеПараметры);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуПродажи",
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",         Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить(
		"ХарактеристикаПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Продукция"));
		
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		СтруктураДействий.Вставить(
			"ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаказДавальцаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Регистратор",                         Объект.Ссылка);
		ПараметрыОтбора.Вставить("Организация",                         Объект.Организация);
		ПараметрыОтбора.Вставить("Партнер",                             Объект.Партнер);
		ПараметрыОтбора.Вставить("Контрагент",                          Объект.Контрагент);
		ПараметрыОтбора.Вставить("Договор",                             Объект.Договор);
		ПараметрыОтбора.Вставить("Склад",                               Объект.Склад);
		ПараметрыОтбора.Вставить("Валюта",                              Объект.ВалютаВзаиморасчетов);
		ПараметрыОтбора.Вставить("Сделка",                              Объект.Сделка);
		ПараметрыОтбора.Вставить("СтавкаНДС",                           Объект.СтавкаНДС);
		ПараметрыОтбора.Вставить("НалогообложениеНДС",                  Объект.НалогообложениеНДС);
		ПараметрыОтбора.Вставить("НаправлениеДеятельности",             Объект.НаправлениеДеятельности);
		ПараметрыОтбора.Вставить("ИспользоватьНаправленияДеятельности", ИспользоватьНаправленияДеятельности);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		ОткрытьФорму(
			"Документ.ОтчетДавальцу2_5.Форма.ФормаВыбораРаспоряжения",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("ПродукцияЗаказДавальцаНачалоВыбораЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
		
	ОбновитьИнформациюПоЗаказам();
		
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаказДавальцаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ПорядокРасчетов <> Объект.ПорядокРасчетов Тогда
		ЕстьУказанныеЗаказы = Ложь;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл 
			Если ЗначениеЗаполнено(СтрокаТовара.ЗаказДавальца)
				И СтрокаТовара.ПолучитьИдентификатор() <> Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор() Тогда
				ЕстьУказанныеЗаказы = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьУказанныеЗаказы Тогда
			ТекстСообщения = НСтр("ru = 'У выбранного заказа порядок расчетов %1 отличается от порядка расчетов документа %2.';
									|en = 'The %1 payment terms of the selected order differ from the %2 payment terms of the document.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.ПорядокРасчетов, Объект.ПорядокРасчетов);
			ИндексСтроки = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()).НомерСтроки - 1;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Объект.Продукция[" + ИндексСтроки + "].ЗаказДавальца");
			Возврат;
		Иначе
			Объект.ПорядокРасчетов = Результат.ПорядокРасчетов;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ТекущиеДанные.ЗаказДавальца = Результат.ЗаказДавальца;
	ТекущиеДанные.Назначение    = Результат.Назначение;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Продукция, НадписьРасхождениеЗаказ, Элементы);
	
	ОбновитьИнформациюПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, Элементы.Продукция.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерияПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиЗавершения();
	ДополнительныеПараметры.ТекущаяСтрока = ТекущаяСтрока;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродукцияСерияПриИзмененииВопросПользователюЗавершение",
												  ЭтотОбъект,
												  ДополнительныеПараметры);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерияПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиЗавершения();
	ДополнительныеПараметры.ТекущаяСтрока = ТекущаяСтрока;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродукцияСкладПриИзмененииВопросПользователюЗавершение",
												  ЭтотОбъект,
												  ДополнительныеПараметры);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить(
		"ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСписатьНаРасходыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(
		ЭтотОбъект, ТекущиеДанные, "Объект.Продукция");
	
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизитаДоступностиСчетаУчетаВСтроке(
		ЭтотОбъект, ТекущиеДанные, "Объект.Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетДавальцу2_5.ФормаДокумента.Команда.ПодобратьТовары");
	
	ЗаголовокФормы = СтрШаблон(
						НСтр("ru = 'Подбор товаров в %1';
							|en = 'Pick goods in %1'"),
						?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, НСтр("ru = 'отчет давальцу';
																				|en = 'consumption report — subcontracting services delivered'")));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",                Объект.Ссылка);
	ПараметрыФормы.Вставить("Дата",                    Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                  Объект.Валюта);
	ПараметрыФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыФормы.Вставить("Склад",                   Объект.Склад);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",         Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",      Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",  ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Заголовок",               ЗаголовокФормы);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", СкладГруппа);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах",  Истина);
	ПараметрыФормы.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", Истина);
	
	Если Не СкладГруппа Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзЗаказа(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетДавальцу2_5.ФормаДокумента.Команда.ПодобратьИзЗаказа");
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ЗаказДавальца) Тогда
			МассивКодовСтрок.Добавить(
				Новый Структура("КодСтроки, ЗаказДавальца", СтрокаТЧ.КодСтроки, СтрокаТЧ.ЗаказДавальца));
		КонецЕсли;
		
	КонецЦикла;
	
	МассивЗаказов = Неопределено;
	Если Не ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5 Тогда
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Объект.ЗаказДавальца);
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("МассивЗаказов",           МассивЗаказов);
	ПараметрыПодбора.Вставить("МассивКодовСтрок",        МассивКодовСтрок);
	ПараметрыПодбора.Вставить("Ссылка",                  Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация",             Объект.Организация);
	ПараметрыПодбора.Вставить("Партнер",                 Объект.Партнер);
	ПараметрыПодбора.Вставить("Контрагент",              Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор",                 Объект.Договор);
	ПараметрыПодбора.Вставить("Склад",                   Объект.Склад);
	ПараметрыПодбора.Вставить("Валюта",                  Объект.Валюта);
	ПараметрыПодбора.Вставить("ВалютаВзаиморасчетов",    Объект.ВалютаВзаиморасчетов);
	ПараметрыПодбора.Вставить("Сделка",                  Объект.Сделка);
	ПараметрыПодбора.Вставить("СтавкаНДС",               Объект.СтавкаНДС);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",      Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("ПорядокРасчетов",         Объект.ПорядокРасчетов);
	ПараметрыПодбора.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС",         Объект.ЦенаВключаетНДС);
	
	ОткрытьФорму(
		"Документ.ОтчетДавальцу2_5.Форма.ФормаПодбораИзЗаказа",
		ПараметрыПодбора,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВыпущеннуюПродукцию(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетДавальцу2_5.ФормаДокумента.Команда.ПодобратьВыпущеннуюПродукцию");
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Поставщик"" не заполнено';
				|en = '""Vendor"" is required'"), Объект.Ссылка, "Объект.Партнер", "", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено';
				|en = 'The ""Company"" field is required'"), Объект.Ссылка, "Объект.Организация", "", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Склад"" не заполнено';
				|en = '""Warehouse"" is required'"), Объект.Ссылка, "Объект.Склад", "", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Договор"" не заполнено';
				|en = '""Contract"" is not filled in.'"), Объект.Ссылка, "Объект.Договор", "", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийТипЗапасов    = ПредопределенноеЗначение("Перечисление.ТипыЗапасов.ПолуфабрикатДавальца");
	ТекущийЗаказДавальца =
		?(Объект.ОтчетПоЗаказам И ЗначениеЗаполнено(Объект.ЗаказДавальца), Объект.ЗаказДавальца, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",           Объект.Организация);
	ПараметрыФормы.Вставить("Владелец",              Объект.Партнер);
	ПараметрыФормы.Вставить("Договор",               Объект.Договор);
	ПараметрыФормы.Вставить("Склад",                 Объект.Склад);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("ТипЗапасов",            ТекущийТипЗапасов);
	ПараметрыФормы.Вставить("Заказ",                 ТекущийЗаказДавальца);
	ПараметрыФормы.Вставить("Заголовок",             НСтр("ru = 'Подбор выпущенной продукции';
															|en = 'Pick released goods'"));
	
	ОткрытьФорму(
		"Обработка.ПодборТоваровПринятыхНаОтветственноеХранение.Форма.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ПродукцияЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Продукция;
	ДанныеТаблицы = Объект.Продукция;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
									"Количество, Сумма, СуммаНДС, СуммаСНДС",
									"КоличествоУпаковок");
		
	Если ТаблицаФормы.ТекущиеДанные <> Неопределено Тогда
		
		ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(
			СтруктураПересчетаСуммы,
			ТаблицаФормы.ТекущиеДанные);
			
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(
		ДанныеТаблицы, ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Продукция) Тогда
		
		СкопироватьСтрокиНаСервере();
		
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(
			Элементы.Продукция.ВыделенныеСтроки.Количество());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		ОтвязатьОтЗаказаСервер(Ложь);
		ОповеститьОбОкончанииОтвязкиСтрок(ВыделенныеСтроки.Количество());
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите строки, которые необходимо отвязать от заказа.';
													|en = 'Select lines to remove from the order.'"));
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетОплаты(Команда)
	
	ПоместитьРасшифровкуПлатежаВоВременноеХранилище();
	ВзаиморасчетыКлиент.ЗачетОплаты(ЭтотОбъект, Элементы.ЗачетОплаты);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыКлиент.РасчетыНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетДавальцу2_5.ФормаДокумента.Команда.ЗаполнитьЦеныПоВидуЦен");
	
	Если Не ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Продукция", НСтр("ru = 'Выпущенная продукция';
																										|en = 'Issued products'")) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения цен.';
				|en = 'There are no selected rows in the table. Select rows to fill the prices.'"),
			Объект.Ссылка,
			"Объект.Продукция");
		Возврат;
		
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Объект.ОтчетПоЗаказам И ТекущаяСтрока.КодСтроки > 0 И Не ОтклонениеОтУсловийПродаж Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыСтрок.Добавить(ИдентификаторСтроки);
		
	КонецЦикла;
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Цена не может быть назначена в строках по заказу.';
				|en = 'Price cannot be assigned in the order lines.'"),
			Объект.Ссылка,
			"Объект.Продукция");
		Возврат;
		
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", ИдентификаторыСтрок);
		
	ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
	ПараметрыВыбораЦен.ЦенаВключаетНДС                          = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораЦен.ИспользоватьПриПередачеПродукцииДавальцу = Истина;
	ПараметрыВыбораЦен.ОписаниеОповещения =
		Новый ОписаниеОповещения("ПродукцияЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьЦеныПоВидуЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЦеныРассчитаны = ПродукцияЗаполнитьЦеныПоВидуЦенСервер(Результат, ДополнительныеПараметры.ИдентификаторыСтрок);
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Результат);
	
КонецПроцедуры

&НаСервере
Функция ПродукцияЗаполнитьЦеныПоВидуЦенСервер(ВидЦены, ИдентификаторыСтрок)
	
	КоллекцияВыбранныхСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		КоллекцияВыбранныхСтрок.Добавить(Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ПараметрыЗаполнения = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ПараметрыЗаполнения.Дата           = Объект.Дата;
	ПараметрыЗаполнения.Валюта         = Объект.Валюта;
	ПараметрыЗаполнения.ВидЦены        = ВидЦены;
	ПараметрыЗаполнения.Организация    = Объект.Организация;
	ПараметрыЗаполнения.ПоляЗаполнения = "Цена, ВидЦены";
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
						Объект.Продукция,
						КоллекцияВыбранныхСтрок,
						ПараметрыЗаполнения);
	
	Если ЦеныРассчитаны Тогда
		
		ПараметрыПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		ПараметрыПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КоллекцияВыбранныхСтрок, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказатели(ЭтотОбъект);
		
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСклад(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
							Объект, Объект.Продукция, НСтр("ru = 'Продукция';
															|en = 'Manufactured products'"), ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВыборГруппы", МассивОтбора);
		СтруктураОтбора.Вставить("ЭтоГруппа",   Ложь);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Отбор",         СтруктураОтбора);
		СтруктураПараметров.Вставить("ГруппаСкладов", Объект.Склад);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
		
		ОписаниеОповещения =
			Новый ОписаниеОповещения("ЗаполнитьСкладЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(
			"Справочник.Склады.ФормаВыбора",
			СтруктураПараметров,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ЗаполненоСтрок = ЗаполнитьСкладНаСервере(ВыделенныеСтроки, Результат);
	
	СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
		Результат, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладНаСервере(ВыделенныеСтроки, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Продукция, ВыделенныеСтроки, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		ПриИзмененииСкладаВТабличнойЧастиСервер();
		
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПодразделениеОтправитель(Команда)
	
	СкладыКлиент.ЗаполнитьПодразделениеВТабличнойЧасти(
		Объект,
		ЭтотОбъект,
		Объект.Продукция,
		"Продукция",
		Элементы.Продукция.ВыделенныеСтроки,
		Новый ОписаниеОповещения("ЗаполнитьПодразделениеОтправительЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеОтправительЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПродажиКлиент.ОбработкаВыбораПодразделения(Объект.Продукция, Элементы.Продукция.ВыделенныеСтроки, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучатель(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В список ""Выпущенная продукция"" не введено ни одной строки.';
										|en = 'No lines are entered in the ""Released products"" list.'"), 45);
		Возврат;
	КонецЕсли;
	
	СтрокиТЧ = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ТекущаяСтрока.СписатьНаРасходы Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТЧ.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Если СтрокиТЧ.Количество() = 0 Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'В выделенных строках списка ""Выпущенная продукция"" заполнение получателя не требуется.';
				|en = 'You do not need to fill the recipient in the selected lines of the ""Released products"" list.'"),
			45);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокиТЧ", СтрокиТЧ);
	
	ОткрытьФорму(
		"Справочник.СтруктураПредприятия.ФормаВыбора",,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗаполнитьПолучательЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучательЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТЧ = ДополнительныеПараметры.СтрокиТЧ;
	Для каждого СтрокаТаблицы Из СтрокиТЧ Цикл
		СтрокаТаблицы.Получатель = Результат;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Получатель заполнен';
			|en = 'Recipient is filled in'"),,
		НСтр("ru = 'Для выделенных строк выполнено заполнение получателя';
			|en = 'Recipients are filled in for the selected lines'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата",                      Объект.Дата);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",     Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Организация",               Объект.Организация);
	СтруктураПараметров.Вставить("Партнер",                   Объект.Партнер);
	СтруктураПараметров.Вставить("Контрагент",                Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",                   Объект.Договор);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента", Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации", Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Основание",                 Объект.Основание);
	СтруктураПараметров.Вставить("ОснованиеДата",             Объект.ОснованиеДата);
	СтруктураПараметров.Вставить("ОснованиеНомер",            Объект.ОснованиеНомер);
	СтруктураПараметров.Вставить("РеализацияПоЗаказам",       Объект.ОтчетПоЗаказам);
	СтруктураПараметров.Вставить("Руководитель",              Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",          Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("ТолькоПросмотр",            ТолькоПросмотр);
	СтруктураПараметров.Вставить("ТипОбъекта",                "ОтчетДавальцу2_5");
	СтруктураПараметров.Вставить("ТаблицаОснованийДляПечати", ТаблицаОснованийДляПечати);
	
	НеПоказыватьРеквизиты = Новый Массив;
	НеПоказыватьРеквизиты.Добавить("АдресДоставки");
	НеПоказыватьРеквизиты.Добавить("БанковскийСчетГрузоотправителя");
	НеПоказыватьРеквизиты.Добавить("БанковскийСчетГрузополучателя");
	НеПоказыватьРеквизиты.Добавить("Грузоотправитель");
	НеПоказыватьРеквизиты.Добавить("Грузополучатель");
	НеПоказыватьРеквизиты.Добавить("ДоверенностьВыдана");
	НеПоказыватьРеквизиты.Добавить("ДоверенностьДата");
	НеПоказыватьРеквизиты.Добавить("ДоверенностьЛицо");
	НеПоказыватьРеквизиты.Добавить("ДоверенностьНомер");
	НеПоказыватьРеквизиты.Добавить("Отпустил");
	НеПоказыватьРеквизиты.Добавить("ОтпустилДолжность");
	
	СтруктураПараметров.Вставить("НеПоказыватьРеквизиты", НеПоказыватьРеквизиты);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(
		ЭтотОбъект, "ПродукцияВидЦены", "Объект.Продукция.ВидЦены");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияВидЦены.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияУпаковка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЭтоПолноправныйПользователь");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.КодСтроки");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСуммаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(
		ЭтотОбъект, "СтавкаНДС", "ПродукцияСуммаНДС", "ПродукцияСуммаСНДС");
	
	//
	
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтотОбъект, "ПродукцияСуммаСНДС");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЦена.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ВидЦены");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСумма.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтклонениеОтУсловийПродаж");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ВидЦены");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "ПродукцияХарактеристика", "Объект.Продукция.ХарактеристикиИспользуются");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект, "ПродукцияНоменклатураЕдиницаИзмерения", "Объект.Продукция.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"СерииВсегдаВТЧПродукция",
		"ПродукцияСерия",
		"Объект.Продукция.СтатусУказанияСерий",
		"Объект.Продукция.ТипНоменклатуры");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияКодСтроки.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.КодСтроки");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЗаказДавальца.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияКодСтроки.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ОтчетПоЗаказам");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЗаказДавальца.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЗаказДавальца.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.КодСтроки");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Согласован");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЗаказДавальца.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.КодСтроки");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЗаказДавальца.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ОтчетПоЗаказам");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = 'Сверх заказа, заказ не выбран';
																		|en = 'In excess of the order, the order is not selected'"));
	
	//
	
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтотОбъект, "ПродукцияСклад");
	
	//
	
	СкладыСервер.УстановитьУсловноеОформлениеПодразделенияВТЧ(ЭтотОбъект, "Продукция");
	
	//
	
	СписокТиповНоменклатуры = Новый СписокЗначений;
	СписокТиповНоменклатуры.ЗагрузитьЗначения(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповНоменклатуры;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = '<для товаров>';
																			|en = '<for goods>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповНоменклатуры;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Склад");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Получатель");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = '<при списании на расходы>';
																			|en = '<when writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтотОбъект);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииОтчетаПоНесколькимЗаказам()
	
	Если Объект.ОтчетПоЗаказам Тогда
		
		Если Объект.Продукция.Количество() = 0 Тогда
			ЗаполнитьПоЗаказуСервер();
		Иначе
			ПривязатьСтрокиКЗаказам(Не ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5);
		КонецЕсли;
		
	Иначе
		
		ОтвязатьОтЗаказаСервер(Истина, Ложь);
		Объект.ЗаказДавальца = Неопределено;
		СписокЗаказов.Очистить();
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИнформациюПоЗаказам();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтотОбъект);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "ОтчетПоЗаказам");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтавкиНДССервер()
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	Для Каждого ТекущаяСтрока Из Объект.Продукция Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	СохранитьЗначенияРеквизитовДоИзменения(ЭтотОбъект);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыСервер(ПересчитатьЦены, ЦеныРассчитаны)
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Дата");
	
	АктуализироватьНалогообложениеНДС();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер(ОчищатьСтроки = Истина, ОтвязатьВсеСтрокиОтЗаказа = Ложь)
	
	СкладГруппа = ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	
	Склад = Объект.Склад;
	
	УстановитьПараметрыВыбораПродукцияСклад();
	
	Если Объект.ОтчетПоЗаказам Тогда
		
		Если Не СкладГруппа И Объект.Продукция.Количество() > 0 И ОчищатьСтроки Тогда
			Объект.Продукция.Очистить();
		КонецЕсли;
		
	Иначе
		
		Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Продукция, Истина);
		
	КонецЕсли;
	
	Если ОтвязатьВсеСтрокиОтЗаказа Тогда
		
		ОтвязатьОтЗаказаСервер();
		
		Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Продукция, Истина);
		
	КонецЕсли;
	
	Если Не СкладГруппа Тогда
		Элементы.ПродукцияГруппаОтправитель.Заголовок = НСтр("ru = 'Подразделение-отправитель';
															|en = 'Shipping business unit'");
	Иначе
		Элементы.ПродукцияГруппаОтправитель.Заголовок = НСтр("ru = 'Отправитель';
															|en = 'Shipper'");
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	ОбновитьИнформациюПоЗаказам();
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	ВзаиморасчетыКлиентСервер.ОбновитьТекстГиперссылкиВалюты(ЭтотОбъект);
	
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетДавальцу2_5));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Элементы.ПродукцияСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	АктуализироватьНалогообложениеНДС();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	ЗаполнитьДоговорПоУмолчанию();
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Партнер");
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьОснованиеДляПечати();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьВидимостьЭлементовПоНалогообложениюСервер();
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОбновитьТекстСчетаФактуры();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	
	НазначениеДоговора = ПолучитьНазначениеДоговора(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтактногоЛицаСервер()
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,ТекущаяДатаСеанса());
	
	СтруктурыКурсов = ВзаиморасчетыСервер.КурсыВалютДляПересчета(ЭтотОбъект, СтараяВалюта, НоваяВалюта, ВалютаРегламентированногоУчета, ДатаДокумента);
	СтруктураКурсовСтаройВалюты = СтруктурыКурсов.СтруктураКурсовСтаройВалюты;
	СтруктураКурсовНовойВалюты  = СтруктурыКурсов.СтруктураКурсовНовойВалюты;
	
	ТаблицаПродукции = Объект.Продукция.Выгрузить();
	ТаблицаПродукции.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаПродукции.ЗаполнитьЗначения(Объект.СтавкаНДС, "СтавкаНДС");
	
	ПараметрыПересчета = Ценообразование.ПараметрыПересчетаСуммТаблицыВВалюту(Объект.ЦенаВключаетНДС, СтараяВалюта, НоваяВалюта);
	ПараметрыПересчета.СтруктураКурсовСтаройВалюты = СтруктураКурсовСтаройВалюты;
	ПараметрыПересчета.СтруктураКурсовНовойВалюты  = СтруктураКурсовНовойВалюты;
	
	Ценообразование.ПересчитатьСуммыТаблицыВВалюту(ТаблицаПродукции, ПараметрыПересчета);
	
	ТаблицаПродукции.Колонки.Удалить("СтавкаНДС");
	Объект.Продукция.Загрузить(ТаблицаПродукции);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
	   И Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	
	НазначениеДоговора = ПолучитьНазначениеДоговора(Объект);
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Контрагент");
	
	АктуализироватьНалогообложениеНДС();
	ОбновитьТекстСчетаФактуры();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	ОтменитьВыполненныйПодборПродукции();
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(
		Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
		
	Объект.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "Подразделение");
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Договор");
	
	АктуализироватьНалогообложениеНДС();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	
	НазначениеДоговора = ПолучитьНазначениеДоговора(Объект);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ЗаполнитьОснованиеДляПечати();
	
	СохранитьЗначенияРеквизитовДоИзменения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(
				Объект.НаправлениеДеятельности,, Объект.Договор);
			
		КонецЕсли;
		
		НазначениеДоговора = ПолучитьНазначениеДоговора(Объект);
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(
		Объект.Организация, Объект.БанковскийСчетОрганизации,, Объект.НаправлениеДеятельности);
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(
		Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Организация");
	
	АктуализироватьНалогообложениеНДС();
	ПриИзмененииНалогообложенияНДССервер(Неопределено);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалогообложенияНДССервер(КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	СтавкаНДС = Объект.СтавкаНДС;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьСтавкуНДС",
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	Если Объект.СтавкаНДС <> СтавкаНДС Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Продукция, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоНалогообложениюСервер();
	ОбновитьТекстСчетаФактуры();
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦенаВключаетНДССервер(КэшированныеЗначения)
	
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
	ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Продукция, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС                          = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПередачеПродукцииДавальцу = Истина;
	ПараметрыВыбораВидаЦены.Статус                                   = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	НазначениеДоговора = ПолучитьНазначениеДоговора(Объект);
	
	АктуализироватьНалогообложениеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитовДоИзменения, "Договор");
		Возврат;
	КонецЕсли;
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения)

	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
	КонецЕсли;

	СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Продукция");
	
	ОбновитьИнформациюПоЗаказам();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаВТабличнойЧастиСервер()
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Продукция, ТаблицаСкладов, СкладГруппа, Ложь);
	
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
		НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначенияРеквизитовДоИзменения(Форма)
	
	ЗначенияРеквизитовДоИзменения = Новый Структура("Договор, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Форма.Объект);
	
	Форма.ЗначенияРеквизитовДоИзменения = ЗначенияРеквизитовДоИзменения;
	
КонецПроцедуры	

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработкаВыбораПодборТоваров(ВыбранноеЗначение)
	
	ТаблицаПродукции = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Если ТаблицаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЗаказДавальца =
		?(Объект.ОтчетПоЗаказам И ЗначениеЗаполнено(Объект.ЗаказДавальца), Объект.ЗаказДавальца, Неопределено);
	
	Если ЗначениеЗаполнено(ТекущийЗаказДавальца) Тогда
		ТекущееНазначение = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийЗаказДавальца, "Назначение");
	Иначе
		ТекущееНазначение = НазначениеДоговора;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
	
	НастройкаСчетовУчетаКлиентСервер.ВставитьДействиеЗаполнитьПредставлениеНастройкиСчетовУчета(
		СтруктураДействий, ЭтотОбъект, "Объект.Продукция");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
		
		СтрокаТЧПродукция = Объект.Продукция.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧПродукция, СтрокаТаблицы);
		СтрокаТЧПродукция.ЗаказДавальца = ТекущийЗаказДавальца;
		СтрокаТЧПродукция.Назначение    = ТекущееНазначение;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧПродукция, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;

	ЗаполнитьСлужебныеРеквизиты();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИнформациюПоЗаказам();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
	ПараметрыУказанияСерий = 
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетДавальцу2_5));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтотОбъект);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "ОтчетПоЗаказам");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПродукциюИзХранилища(ВыбранноеЗначение)
	
	ТаблицаПродукции = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	Если ТаблицаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ОтчетПоЗаказам Тогда
		Объект.ОтчетПоЗаказам = Истина;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	НастройкаСчетовУчетаКлиентСервер.ВставитьДействиеЗаполнитьПредставлениеНастройкиСчетовУчета(СтруктураДействий, ЭтотОбъект, "Объект.Продукция");
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказДавальца");
	СтруктураПоиска.Вставить("Номенклатура");
	СтруктураПоиска.Вставить("Характеристика");
	СтруктураПоиска.Вставить("Серия");
	СтруктураПоиска.Вставить("СтатусУказанияСерий");
	СтруктураПоиска.Вставить("Склад");
	СтруктураПоиска.Вставить("Подразделение");
	СтруктураПоиска.Вставить("СписатьНаРасходы");
	СтруктураПоиска.Вставить("СтатьяРасходов");
	СтруктураПоиска.Вставить("АналитикаРасходов");
	СтруктураПоиска.Вставить("АналитикаАктивовПассивов");
	СтруктураПоиска.Вставить("Получатель");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		
		МассивСтрок     = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		КоличествоСтрок = МассивСтрок.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			
			СтрокаТЧПродукция = Объект.Продукция.Добавить();
			
		ИначеЕсли КоличествоСтрок = 1 Тогда
			
			СтрокаТЧПродукция = МассивСтрок[0];
			
		ИначеЕсли КоличествоСтрок > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрок Цикл
				Объект.Продукция.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтрокаТЧПродукция = Объект.Продукция.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧПродукция, СтрокаТаблицы);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧПродукция, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИнформациюПоЗаказам();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
	ПараметрыУказанияСерий = 
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетДавальцу2_5));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтотОбъект);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "ОтчетПоЗаказам");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВыпущеннойПродукции(ВыбранноеЗначение)
	
	ТаблицаПродукции = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Если ТаблицаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТекущийЗаказДавальца =
		?(Объект.ОтчетПоЗаказам И ЗначениеЗаполнено(Объект.ЗаказДавальца), Объект.ЗаказДавальца, Неопределено);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);
	
	НастройкаСчетовУчетаКлиентСервер.ВставитьДействиеЗаполнитьПредставлениеНастройкиСчетовУчета(
		СтруктураДействий, ЭтотОбъект, "Объект.Продукция");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
		
		СтрокаТЧПродукция = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧПродукция, СтрокаТаблицы);
		СтрокаТЧПродукция.ЗаказДавальца = ТекущийЗаказДавальца;
		СтрокаТЧПродукция.Склад         = СтрокаТаблицы.МестоХранения;
		СтрокаТЧПродукция.Количество    = СтрокаТаблицы.КоличествоПодобрано;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧПродукция, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбновитьИнформациюПоЗаказам();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
	ПараметрыУказанияСерий = 
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетДавальцу2_5));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтотОбъект);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "ОтчетПоЗаказам");
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполненныйПодборПродукции()
	
	Если Объект.Продукция.Количество() > 0 Тогда
		Объект.Продукция.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказДавальца) Тогда
		Объект.ЗаказДавальца = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействийСДобавленнымиСтроками, ЭтотОбъект);
	
	СтруктураДействийСДобавленнымиСтроками.Вставить(
		"ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьНазначение", НазначениеДоговора);
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
	СтруктураДействийСДобавленнымиСтроками.Вставить(
		"ЗаполнитьЦенуПродажи",
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	СтруктураДействий.Штрихкоды								 = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками	 = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий				 = ПараметрыУказанияСерий;
	СтруктураДействий.ИмяТЧ									 = "Продукция";
	СтруктураДействий.ИзменятьКоличество					 = Истина;
	СтруктураДействий.ТолькоТоварыИРабота					 = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий, КэшированныеЗначения, ЭтотОбъект);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры", 0.1, Истина);
			
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Продукция.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(
		ЭтотОбъект,
		Объект,
		СтруктураПараметровДействия,
		КэшированныеЗначения);
		
	ОбновитьОтклоненияОтЗаказа();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
							ЭтотОбъект, ПараметрыУказанияСерий, Текст, ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ИдентификаторСтроки = Элементы.Продукция.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ИдентификаторСтроки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
		
		ОписаниеОповещения =
			Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(
			ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(, ТекущиеДанные);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ИдентификаторСтроки)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
				Объект, ПараметрыУказанияСерий, ИдентификаторСтроки, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьУказаниеСерийНаСервере(ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, Новый Структура);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИдентификаторСтроки, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект, ПараметрыУказанияСерий, ИдентификаторСтроки, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Назначения

&НаСервереБезКонтекста
Функция ПолучитьНазначениеДоговора(Объект)
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		ШаблонНазначения   = Документы.ОтчетДавальцу2_5.ШаблонНазначения(Объект);
		НазначениеДоговора = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
		
	Иначе
		
		НазначениеДоговора = Справочники.Назначения.ПустаяСсылка();
		
	КонецЕсли;
		
	Возврат НазначениеДоговора;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий)
	
	СтруктураХарактеристики  = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураТипНоменклатуры = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураАртикул         = Новый Структура("Номенклатура", "Артикул");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураХарактеристики);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",            СтруктураТипНоменклатуры);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",                    СтруктураАртикул);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоНалогообложениюСервер()
	
	ПродажаОблагаетсяНДС = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Элементы.ЦенаВключаетНДС.Видимость = ПродажаОблагаетсяНДС;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьПартнеровКакКонтрагентов       = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьУпрощеннуюСхемуОплатыВПродажах =
		ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
		
	ОтклонениеОтУсловийПродаж   = ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(,, Ложь);
	
	ПравоНаЧтениеВидаЦены =
		ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказДавальца2_5.ТабличныеЧасти.Продукция.Реквизиты.ВидЦены);
	
	ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5 =
		ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5");
									
	ИспользоватьЗаказыДавальцев2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыДавальцев2_5");
	
	ИспользоватьНаправленияДеятельности =
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
	ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
	Элементы.СтраницыЗаказ.Видимость             = ИспользоватьЗаказыДавальцев2_5;
	Элементы.КартинкаРасхождениеЗаказ.Видимость  = ИспользоватьЗаказыДавальцев2_5;
	Элементы.КартинкаРасхождениеЗаказы.Видимость = ИспользоватьЗаказыДавальцев2_5;
	
	Элементы.КартинкаРасхождениеЗаказ.Картинка   = БиблиотекаКартинок.ПустаяКартинка;
	Элементы.КартинкаРасхождениеЗаказы.Картинка  = БиблиотекаКартинок.ПустаяКартинка;
	
	СкладГруппа = ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		Элементы.ПродукцияПодразделение.Видимость = Ложь;
	ИначеЕсли Не СкладГруппа Тогда
		Элементы.ПродукцияПодразделение.Заголовок = НСтр("ru = 'Подразделение-отправитель';
														|en = 'Shipping business unit'");
	КонецЕсли;
	
	Склад = Объект.Склад;
	
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетДавальцу2_5));
	Элементы.ПродукцияСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	НазначениеДоговора = ПолучитьНазначениеДоговора(Объект);
	
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС                          = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПередачеПродукцииДавальцу = Истина;
	ПараметрыВыбораВидаЦены.Статус                                   = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
	УстановитьПараметрыВыбораПродукцияСклад();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	АктуализироватьНалогообложениеНДС(Ложь);
	
	ОбновитьИнформациюПоЗаказам();
	ОбновитьОтклоненияОтЗаказа();
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Продукция);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	ОснованиеИзменено = Ложь;
	Если ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу2_5) Тогда
		ТаблицаОснованийДляПечати.Загрузить(Документы.ОтчетДавальцу2_5.ТаблицаОснованийДляПечати(Объект));
		Если ЗначениеЗаполнено(Объект.Основание) Тогда
			СтруктураОснования = Документы.ОтчетДавальцу2_5.СтруктураОснованияДляПечати(Объект);
			ОснованиеИзменено =
				СокрЛП(Объект.Основание) <> СтруктураОснования.Основание
				ИЛИ СокрЛП(Объект.ОснованиеНомер) <> СтруктураОснования.ОснованиеНомер
				ИЛИ Объект.ОснованиеДата <> СтруктураОснования.ОснованиеДата;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьЗначенияРеквизитовДоИзменения(ЭтотОбъект);
	
	ОбновитьТекстСчетаФактуры();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.СуммаВсего = Объект.Продукция.Итог("СуммаСНДС");
	
	Если УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаПродажи(Объект.НалогообложениеНДС) Тогда
		
		Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаСНДС;
		Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоСНДС;
		
	Иначе
		
		Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаБезНДС;
		Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоБезНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
			
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
	   И ИспользоватьНаправленияДеятельности Тогда
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
										Объект,
										ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора(),
										Объект.ВалютаВзаиморасчетов,
										Объект.НаправлениеДеятельности);
		
	Иначе
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
										Объект,
										ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора(),
										Объект.ВалютаВзаиморасчетов);
		
	КонецЕсли;
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ПриИзмененииДоговораСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуСервер()
	
	Объект.Продукция.Очистить();
	
	Если ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5 Тогда
		МассивЗаказов = Неопределено;
	Иначе
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Объект.ЗаказДавальца);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СтавкаНДС",          Объект.СтавкаНДС);
	ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",    Объект.ЦенаВключаетНДС);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Документы.ОтчетДавальцу2_5.ЗаполнитьПоОстаткамЗаказов(Объект, Объект.Продукция, МассивЗаказов, ПараметрыЗаполнения);
	
	ОбновитьИнформациюПоЗаказам();
	
	ЗаполнитьСлужебныеРеквизиты();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	ЗаполнитьОснованиеДляПечати();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	ПараметрыУказанияСерий = 
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетДавальцу2_5));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	
	Если Не Объект.ОтчетПоЗаказам Тогда
		МассивЭлементов.Добавить("Дата");
	КонецЕсли;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Договор");
	
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	
	МассивЭлементов.Добавить("Продукция;ПередНачаломДобавления,ПередУдалением,ПередНачаломИзменения");
	
	МассивЭлементов.Добавить("ПродукцияДобавить");
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	МассивЭлементов.Добавить("ПродукцияНоменклатура");
	МассивЭлементов.Добавить("ПродукцияКодСтроки");
	МассивЭлементов.Добавить("ПродукцияХарактеристика");
	МассивЭлементов.Добавить("ПродукцияВидЦены");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтотОбъект, МассивЭлементов, УстановитьПодписку);
	
	Если Не Объект.ОтчетПоЗаказам Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПродукцияОтвязатьОтЗаказа", "Видимость", Ложь);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПродукцияКонтекстноеМенюОтвязатьОтЗаказа", "Видимость", Ложь);
			
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПродукцияГруппаЗаказДавальца", "Видимость", Ложь);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПродукцияЗаполнитьСклад", "Доступность", СкладГруппа);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПродукцияПодобратьИзЗаказаПоОстаткам",
			"Доступность",
			ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5);
		
	Иначе
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПродукцияОтвязатьОтЗаказа", "Видимость", Истина);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПродукцияКонтекстноеМенюОтвязатьОтЗаказа", "Видимость", Истина);
			
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПродукцияГруппаЗаказДавальца", "Видимость", Истина);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,"ПродукцияЗаполнитьСклад", "Видимость", Ложь);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПродукцияПодобратьИзЗаказаПоОстаткам",
			"Доступность",
			Истина);
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Сделка");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("НаправлениеДеятельности");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"ТолькоПросмотр",
		Объект.ОтчетПоЗаказам И (ЗначениеЗаполнено(Объект.ЗаказДавальца) Или СписокЗаказов.Количество() > 0));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Процедура ИзмененаОплатаСервер(ИмяСобытия, Параметр)
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец Взаиморасчеты
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСчетаФактуры()
	
	ПараметрыРегистрации            = Документы.ОтчетДавальцу2_5.ПараметрыРегистрацииСчетовФактурВыданных(Объект);
	СчетаФактурыВыданныеНаОсновании = УчетНДСУП.СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрации);
	ТекстСчетаФактурыВыданные       = СчетаФактурыВыданныеНаОсновании.Представление;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьНалогообложениеНДС(Заполнить = Истина, КэшированныеЗначения = Неопределено)
	
	ПараметрыЗаполнения = Документы.ОтчетДавальцу2_5.ПараметрыЗаполненияНалогообложенияНДС(Объект);
	
	Если Заполнить Тогда
		
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(
			Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
		
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(
		Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ПараметрыОбновления = ЗаказыСервер.ПараметрыОбновленияИнформацииПоЗаказамВФорме();
	
	ПараметрыОбновления.ИмяРеквизитаСписокЗаказов         = "СписокЗаказов";
	ПараметрыОбновления.ПутьЗаказаВШапке                  = "Объект.ЗаказДавальца";
	ПараметрыОбновления.ИмяНадписиЗаголовка               = "НадписьЗаголовокЗаказы";
	ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти   = "ПродукцияГруппаЗаказДавальца";
	ПараметрыОбновления.ИмяЗаказаВТабличнойЧасти          = "ЗаказДавальца";
	ПараметрыОбновления.ИспользоватьЗаказыВТабличнойЧасти = ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5;
	
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(ЭтотОбъект, Объект.Продукция, ПараметрыОбновления);
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу()
	
	Если Объект.Продукция.Количество() = 0
	 Или Не Объект.ОтчетПоЗаказам
	 Или Не ИспользоватьЗаказыДавальцев2_5 Тогда
	
		Элементы.КартинкаРасхождениеЗаказ.Картинка  = БиблиотекаКартинок.ПустаяКартинка;
		Элементы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		
		НадписьРасхождениеЗаказ = "";
		
		Если Объект.Продукция.Количество() > 0 Тогда
			
			Для каждого СтрокаПродукция Из Объект.Продукция Цикл
				СтрокаПродукция.РасхождениеЗаказ = 0;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Продукция, НадписьРасхождениеЗаказ, Элементы);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Продукция, НадписьРасхождениеЗаказ, ЭлементыФормы)
	
	КоличествоРасхождений = Продукция.Итог("РасхождениеЗаказ");
	
	Если КоличествоРасхождений > 0 Тогда
		
		ЭлементыФормы.КартинкаРасхождениеЗаказ.Картинка  = БиблиотекаКартинок.ПревышениеЗаказа;
		ЭлементыФормы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		
		НадписьРасхождениеЗаказ = СтрШаблон(НСтр("ru = 'Строк сверх заказа: %1';
												|en = 'Lines exceeding the order: %1'"), КоличествоРасхождений);
		
	Иначе
		
		ЭлементыФормы.КартинкаРасхождениеЗаказ.Картинка  = БиблиотекаКартинок.ПустаяКартинка;
		ЭлементыФормы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		
		НадписьРасхождениеЗаказ = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПривязатьСтрокиКЗаказам(ОтобратьПоЗаказу)
	
	Если Не ИспользоватьЗаказыДавальцев2_5
	 Или Не ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5 И Не ЗначениеЗаполнено(Объект.ЗаказДавальца) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказДавальца2_5.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ОтборПоЗаказам
	|			ТОГДА ЗаказДавальца2_5.Ссылка В (&МассивЗаказов)
	|		ИНАЧЕ ЗаказДавальца2_5.Организация        = &Организация
	|			И ЗаказДавальца2_5.Валюта             = &Валюта
	|			И ЗаказДавальца2_5.Контрагент         = &Контрагент
	|			И ЗаказДавальца2_5.Договор            = &Договор
	|			И ЗаказДавальца2_5.Партнер            = &Партнер
	|			И ЗаказДавальца2_5.Сделка             = &Сделка
	|			И ЗаказДавальца2_5.СтавкаНДС          = &СтавкаНДС
	|			И ЗаказДавальца2_5.НалогообложениеНДС = &НалогообложениеНДС
	|			И (НЕ &ИспользоватьНаправленияДеятельности
	|				ИЛИ ЗаказДавальца2_5.НаправлениеДеятельности = &НаправлениеДеятельности)
	|			И (ЗаказДавальца2_5.Склад = &Склад
	|				ИЛИ ЗаказДавальца2_5.Склад В ИЕРАРХИИ (&Склад)
	|				ИЛИ ЗаказДавальца2_5.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|			И ЗаказДавальца2_5.Проведен
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказовКОформлению.ЗаказКлиента       КАК ЗаказДавальца,
	|	ТаблицаЗаказовКОформлению.Номенклатура       КАК Номенклатура,
	|	ТаблицаЗаказовКОформлению.Характеристика     КАК Характеристика,
	|	ТаблицаЗаказовКОформлению.КодСтроки          КАК КодСтроки,
	|	ТаблицаЗаказовКОформлению.Склад              КАК Склад,
	|	ТаблицаЗаказовКОформлению.Серия              КАК Серия,
	|	СУММА(ТаблицаЗаказовКОформлению.КОформлению) КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказКлиента       КАК ЗаказКлиента,
	|		ЗаказыОстатки.Номенклатура       КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика     КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки          КАК КодСтроки,
	|		ЗаказыОстатки.Склад              КАК Склад,
	|		ЗаказыОстатки.Серия              КАК Серия,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(
	|				,
	|				ЗаказКлиента В
	|					(ВЫБРАТЬ
	|						ТаблицаЗаказов.Ссылка КАК Ссылка
	|					ИЗ
	|						ТаблицаЗаказов КАК ТаблицаЗаказов)
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура   КАК Номенклатура,
	|						Товары.Характеристика КАК Характеристика
	|					ИЗ
	|						Товары КАК Товары)
	|				И КодСтроки <> 0) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыКлиентов.ЗаказКлиента   КАК ЗаказКлиента,
	|		ЗаказыКлиентов.Номенклатура   КАК Номенклатура,
	|		ЗаказыКлиентов.Характеристика КАК Характеристика,
	|		ЗаказыКлиентов.КодСтроки      КАК КодСтроки,
	|		ЗаказыКлиентов.Склад          КАК Склад,
	|		ЗаказыКлиентов.Серия          КАК Серия,
	|		ЗаказыКлиентов.КОформлению    КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|	ГДЕ
	|		ЗаказыКлиентов.Активность
	|		И ЗаказыКлиентов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗаказыКлиентов.Регистратор = &Регистратор
	|		И ЗаказыКлиентов.ЗаказКлиента В
	|			(ВЫБРАТЬ
	|				ТаблицаЗаказов.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаЗаказов КАК ТаблицаЗаказов)
	|		И (ЗаказыКлиентов.Номенклатура, ЗаказыКлиентов.Характеристика) В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура   КАК Номенклатура,
	|				Товары.Характеристика КАК Характеристика
	|			ИЗ
	|				Товары КАК Товары)
	|		И ЗаказыКлиентов.КодСтроки <> 0) КАК ТаблицаЗаказовКОформлению
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЗаказовКОформлению.ЗаказКлиента,
	|		ТаблицаЗаказовКОформлению.Номенклатура,
	|		ТаблицаЗаказовКОформлению.Характеристика,
	|		ТаблицаЗаказовКОформлению.КодСтроки,
	|		ТаблицаЗаказовКОформлению.Склад,
	|		ТаблицаЗаказовКОформлению.Серия
	|
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаЗаказовКОформлению.КОформлению) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаЗаказовСверхЗаказа.ЗаказКлиента       КАК ЗаказКлиента,
	|		ТаблицаЗаказовСверхЗаказа.Номенклатура       КАК Номенклатура,
	|		ТаблицаЗаказовСверхЗаказа.Характеристика     КАК Характеристика,
	|		ТаблицаЗаказовСверхЗаказа.КодСтроки          КАК КодСтроки,
	|		ТаблицаЗаказовСверхЗаказа.Склад              КАК Склад,
	|		ТаблицаЗаказовСверхЗаказа.Серия              КАК Серия,
	|		СУММА(ТаблицаЗаказовСверхЗаказа.КОформлению) КАК Количество
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказыОбороты.ЗаказКлиента                                      КАК ЗаказКлиента,
	|			ЗаказыОбороты.Номенклатура                                      КАК Номенклатура,
	|			ЗаказыОбороты.Характеристика                                    КАК Характеристика,
	|			ЗаказыОбороты.КодСтроки                                         КАК КодСтроки,
	|			ЗаказыОбороты.Склад                                             КАК Склад,
	|			ЗаказыОбороты.Серия                                             КАК Серия,
	|			ЗаказыОбороты.КПередачеПриход - ЗаказыОбороты.КОформлениюРасход КАК КОформлению
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Обороты(
	|					,,,
	|					ЗаказКлиента В
	|						(ВЫБРАТЬ
	|							ТаблицаЗаказов.Ссылка КАК Ссылка
	|						ИЗ
	|							ТаблицаЗаказов КАК ТаблицаЗаказов)
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура   КАК Номенклатура,
	|							Товары.Характеристика КАК Характеристика
	|						ИЗ
	|							Товары КАК Товары)
	|					И КодСтроки = 0) КАК ЗаказыОбороты
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ЗаказыКлиентов.ЗаказКлиента   КАК ЗаказКлиента,
	|			ЗаказыКлиентов.Номенклатура   КАК Номенклатура,
	|			ЗаказыКлиентов.Характеристика КАК Характеристика,
	|			ЗаказыКлиентов.КодСтроки      КАК КодСтроки,
	|			ЗаказыКлиентов.Склад          КАК Склад,
	|			ЗаказыКлиентов.Серия          КАК Серия,
	|			ЗаказыКлиентов.КОформлению    КАК КОформлению
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|		ГДЕ
	|			Активность
	|			И Регистратор = &Регистратор
	|			И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ЗаказыКлиентов.ЗаказКлиента В
	|				(ВЫБРАТЬ
	|					ТаблицаЗаказов.Ссылка КАК Ссылка
	|				ИЗ
	|					ТаблицаЗаказов КАК ТаблицаЗаказов)
	|			И (ЗаказыКлиентов.Номенклатура, ЗаказыКлиентов.Характеристика) В
	|				(ВЫБРАТЬ
	|					Товары.Номенклатура   КАК Номенклатура,
	|					Товары.Характеристика КАК Характеристика
	|				ИЗ
	|					Товары КАК Товары)
	|			И КодСтроки = 0) КАК ТаблицаЗаказовСверхЗаказа
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЗаказовСверхЗаказа.ЗаказКлиента,
	|		ТаблицаЗаказовСверхЗаказа.Номенклатура,
	|		ТаблицаЗаказовСверхЗаказа.Характеристика,
	|		ТаблицаЗаказовСверхЗаказа.КодСтроки,
	|		ТаблицаЗаказовСверхЗаказа.Склад,
	|		ТаблицаЗаказовСверхЗаказа.Серия
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаЗаказовСверхЗаказа.КОформлению) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказДавальца,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ЗаказДавальца            КАК ЗаказДавальца,
	|	ТаблицаОстатков.ЗаказДавальца.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ТаблицаОстатков.ЗаказДавальца.Назначение КАК Назначение,
	|	ТаблицаОстатков.КодСтроки                КАК КодСтроки,
	|	ТаблицаОстатков.Номенклатура             КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика           КАК Характеристика,
	|	ТаблицаОстатков.Склад                    КАК Склад,
	|	ТаблицаОстатков.Серия                    КАК Серия,
	|	ТаблицаПродукции.ВидЦены                 КАК ВидЦены,
	|	ТаблицаПродукции.Цена                    КАК Цена,
	|	ТаблицаОстатков.Количество               КАК КОформлениюОстаток
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаПродукции
	|		ПО ТаблицаОстатков.ЗаказДавальца = ТаблицаПродукции.Ссылка
	|		 И ТаблицаОстатков.КодСтроки     = ТаблицаПродукции.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукции.Ссылка,
	|	ТаблицаПродукции.Номенклатура,
	|	ТаблицаПродукции.Характеристика,
	|	ТаблицаПродукции.Склад,
	|	ТаблицаПродукции.Серия,
	|	ТаблицаПродукции.ДатаОтгрузки,
	|	ТаблицаПродукции.НомерСтроки,
	|	ТаблицаОстатков.КодСтроки УБЫВ
	|";
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(Объект.ЗаказДавальца);
	
	Запрос.УстановитьПараметр("ОтборПоЗаказам",                      ОтобратьПоЗаказу);
	Запрос.УстановитьПараметр("МассивЗаказов",                       МассивЗаказов);
	Запрос.УстановитьПараметр("Регистратор",                         Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация",                         Объект.Организация);
	Запрос.УстановитьПараметр("Валюта",                              Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("Контрагент",                          Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор",                             Объект.Договор);
	Запрос.УстановитьПараметр("Партнер",                             Объект.Партнер);
	Запрос.УстановитьПараметр("Сделка",                              Объект.Сделка);
	Запрос.УстановитьПараметр("СтавкаНДС",                           Объект.СтавкаНДС);
	Запрос.УстановитьПараметр("НалогообложениеНДС",                  Объект.НалогообложениеНДС);
	Запрос.УстановитьПараметр("Склад",                               Объект.Склад);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",             Объект.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ИспользоватьНаправленияДеятельности", ИспользоватьНаправленияДеятельности);
	
	Запрос.УстановитьПараметр("Товары", Объект.Продукция.Выгрузить(, "Номенклатура, Характеристика"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[2].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	МассивПорядковРасчетов = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПорядокРасчетов)
			И МассивПорядковРасчетов.Найти(Выборка.ПорядокРасчетов) = Неопределено Тогда
			МассивПорядковРасчетов.Добавить(Выборка.ПорядокРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПорядковРасчетов.Количество() > 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У найденных заказов отличается поле ""Порядок расчетов""';
													|en = 'The ""Payment terms"" field data is different for the found orders'"));
		Возврат Ложь;
	КонецЕсли;
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоКОформлению = Выборка.КОформлениюОстаток;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЗаказДавальца",  Документы.ЗаказДавальца2_5.ПустаяСсылка());
		СтруктураПоиска.Вставить("КодСтроки",      0);
		СтруктураПоиска.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Склад",          Выборка.Склад);
		СтруктураПоиска.Вставить("Серия",          Выборка.Серия);
		СтруктураПоиска.Вставить("ВидЦены",        Выборка.ВидЦены);
		СтруктураПоиска.Вставить("Цена",           Выборка.Цена);
		РаспределитьКоличествоКОформлению(Выборка, КоличествоКОформлению, СтруктураПоиска);
		
		СтруктураПоиска.Удалить("ВидЦены");
		СтруктураПоиска.Удалить("Цена");
		РаспределитьКоличествоКОформлению(Выборка, КоличествоКОформлению, СтруктураПоиска);
		
	КонецЦикла;
	
	МассивСтрок =
		Объект.Продукция.НайтиСтроки(Новый Структура("ЗаказДавальца", Документы.ЗаказДавальца2_5.ПустаяСсылка()));
		
	КоличествоНайденныхСтрок = МассивСтрок.Количество();
	Если КоличествоНайденныхСтрок > 0 Тогда
		
		ТекущийЗаказ     = Неопределено;
		НазначениеЗаказа = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.ЗаказДавальца) Тогда
			
			ТекущийЗаказ     = Объект.ЗаказДавальца;
			НазначениеЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказДавальца, "Назначение");
			
		ИначеЕсли Объект.Продукция.Количество() > КоличествоНайденныхСтрок Тогда
			
			ТаблицаЗаказов = Объект.Продукция.Выгрузить(, "ЗаказДавальца, Назначение");
			ТаблицаЗаказов.Свернуть("ЗаказДавальца, Назначение");
			
			ТекущийЗаказ = ТаблицаЗаказов[0].ЗаказДавальца;
			Если ЗначениеЗаполнено(ТекущийЗаказ) Тогда
				НазначениеЗаказа = ТаблицаЗаказов[0].Назначение;
			Иначе
				ТекущийЗаказ     = ТаблицаЗаказов[1].ЗаказДавальца;
				НазначениеЗаказа = ТаблицаЗаказов[1].Назначение;
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийЗаказ) Тогда
			
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				СтрокаТаблицы.ЗаказДавальца = ТекущийЗаказ;
				СтрокаТаблицы.Назначение    = НазначениеЗаказа;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура РаспределитьКоличествоКОформлению(ДанныеЗаказа, КоличествоКОформлению, СтруктураПоиска)
	
	Если КоличествоКОформлению = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");

	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТЧПродукция Из МассивСтрок Цикл
		
		Если СтрокаТЧПродукция.Количество <= КоличествоКОформлению Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧПродукция, ДанныеЗаказа, "КодСтроки, ЗаказДавальца, Назначение");
			
			КоличествоКОформлению = КоличествоКОформлению - СтрокаТЧПродукция.Количество;
			
		Иначе
			
			НоваяСтрока = Объект.Продукция.Вставить(Объект.Продукция.Индекс(СтрокаТЧПродукция) + 1);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧПродукция,, "Количество");
			НоваяСтрока.Количество = СтрокаТЧПродукция.Количество - КоличествоКОформлению;
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧПродукция, ДанныеЗаказа, "КодСтроки, ЗаказДавальца, Назначение");
			СтрокаТЧПродукция.Количество = КоличествоКОформлению;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧПродукция, СтруктураДействий, КэшируемыеЗначения);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшируемыеЗначения);
			
			КоличествоКОформлению = 0;
			
		КонецЕсли;
		
		Если КоличествоКОформлению = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьОтЗаказаСервер(ВсеСтроки = Истина, ОтвязатьТолькоСтроки = Истина)
	
	Перем КэшированныеЗначения;
	
	Если ВсеСтроки Тогда
		КоллекцияСтрок = Объект.Продукция;
	Иначе
		КоллекцияСтрок = Элементы.Продукция.ВыделенныеСтроки;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из КоллекцияСтрок Цикл
		
		Если ВсеСтроки Тогда
			СтрокаТаблицы = ТекСтрока;
			ТекСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		Иначе
			СтрокаТаблицы = Объект.Продукция.НайтиПоИдентификатору(ТекСтрока);
		КонецЕсли;
		
		НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(
			СтрокаТаблицы, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		СтрокаТаблицы.КодСтроки = 0;
		
		Если ОтвязатьТолькоСтроки Тогда
			СтрокаТаблицы.РасхождениеЗаказ = 1;
		Иначе
			СтрокаТаблицы.ЗаказДавальца = Неопределено;
			СтрокаТаблицы.Назначение    = НазначениеДоговора;
		КонецЕсли;
		
		// Переподчиним строки серий
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			Объект, ПараметрыУказанияСерий, ТекСтрока, КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ОтчетПоЗаказам)
	
	Если ОтчетПоЗаказам Тогда
		ТекущаяСтрока.РасхождениеЗаказ = ?(ТекущаяСтрока.КодСтроки = 0, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтклоненияОтЗаказа()
	
	Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТаблицы, Объект.ОтчетПоЗаказам);
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)

	Если СтрокиОтвязаны Тогда
		
		ТекстОповещения = НСтр("ru = 'Строки отвязаны';
								|en = 'Lines were unlinked'");
		ТекстПояснение  =
			СтрШаблон(НСтр("ru = 'В документе от заказов отвязано строк (%1).';
							|en = 'In the document, the lines (%1) are detached from the orders.'"), КоличествоОтработанныхСтрок);
		
	Иначе
		
		ТекстОповещения = НСтр("ru = 'Строки не отвязаны';
								|en = 'Lines were not unlinked'");
		ТекстПояснение  = НСтр("ru = 'Ни одна строка не была отвязана.';
								|en = 'No line was unlinked.'");
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснение, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры
	
// Функция-конструктор дополнительных параметров обработки завершения
// 
// Возвращаемое значение:
//  Структура - дополнительные параметры:
//   * ТекущаяСтрока - ДанныеФормыЭлементКоллекции, ДанныеФормыСтруктура, ДанныеФормыЭлементДерева - 
//   * ОписаниеОповещения - ОписаниеОповещения - 
//
&НаКлиенте
Функция ДополнительныеПараметрыОбработкиЗавершения() 
	
	Результат = Новый Структура;
	Результат.Вставить("ТекущаяСтрока");
	Результат.Вставить("ОписаниеОповещения");
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура
	   И ТекущаяСтрока.Характеристика = ПредыдущиеРеквизитыСтроки.Характеристика
	   И ТекущаяСтрока.Склад = ПредыдущиеРеквизитыСтроки.Склад
	   И ТекущаяСтрока.Серия = ПредыдущиеРеквизитыСтроки.Серия Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиЗавершения();
	ДополнительныеПараметры.ТекущаяСтрока      = ТекущаяСтрока;
	ДополнительныеПараметры.ОписаниеОповещения = ОписаниеОповещения;
	
	ТекстВопроса = НСтр("ru = 'Редактируемая строка перестанет быть связанной со строкой заказа. Продолжить?';
						|en = 'The edited line will be unlinked from the order line. Continue?'");
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение",
														ЭтотОбъект,
														ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Параметры:
// 	РезультатВопроса - КодВозвратаДиалога - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиЗавершения
&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	// Если пользователь подтвердил изменение значения ключевого реквизита
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтроки = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, Объект.ОтчетПоЗаказам);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращаем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Склад)
	
	Возврат Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ (&Склад)
	|	И НЕ Склады.ЭтоГруппа
	|	И НЕ Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)";

	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораПродукцияСклад()
	
	Элементы.ПродукцияСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(
		Элементы.ПродукцияСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, Форма)
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(
		СтруктураДействий, Форма, "Объект.Продукция");
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры(
		СтруктураДействий,
		Форма,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
		Форма.Объект.Организация,
		Форма.Объект.Подразделение,
		"Объект.Продукция");
	
КонецПроцедуры
	
#Область Взаиморасчеты

&НаКлиенте
Процедура НадписьВалютыНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		НадписьВалютыНажатиеЗавершениеСервер(РезультатЗакрытия);
		Если РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда
			ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НадписьВалютыНажатиеЗавершениеСервер(РезультатЗакрытия)
	
	ИзмененныеРеквизиты = РезультатЗакрытия.СтарыеЗначенияИзмененныхРеквизитов;
	
	Если ИзмененныеРеквизиты.Свойство("Валюта") Тогда
		
		Если РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда
			ПриИзмененииВалютыСервер(Объект.Валюта);
		КонецЕсли;
		
		ВалютаДокумента = Объект.Валюта;
		
		ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
		
	КонецЕсли;
	
	Если ИзмененныеРеквизиты.Свойство("ВалютаВзаиморасчетов") Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(
				Объект.НаправлениеДеятельности,, Объект.Договор);
			
		КонецЕсли;
		
		НазначениеДоговора = ПолучитьНазначениеДоговора(Объект);
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, ИзмененныеРеквизиты, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты)
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, ИзмененныеРеквизиты, Истина);
	ВзаиморасчетыСервер.ЗагрузитьЭтапыОплатыИзВременногоХранилища(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьЭтапыОплатыВоВременноеХранилище(ИмяЭлемента)
	
	ВзаиморасчетыСервер.ПоместитьЭтапыОплатыВоВременноеХранилище(ЭтотОбъект, ИмяЭлемента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияНоменклатура" Тогда
		ПродукцияНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияХарактеристика" Тогда
		ПродукцияХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСерия" Тогда
		ПродукцияСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияКоличествоУпаковок" Тогда
		ПродукцияКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияУпаковка" Тогда
		ПродукцияУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияВидЦены" Тогда
		ПродукцияВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияЦена" Тогда
		ПродукцияЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСумма" Тогда
		ПродукцияСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСписатьНаРасходы" Тогда
		ПродукцияСписатьНаРасходыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСтатьяРасходов" Тогда
		ПродукцияСтатьяРасходовПриИзменении(Элемент)
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	
	Если Команда.Имя = "ВставитьСтроки" Тогда
		ВставитьСтроки(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.Имя = "Продукция" Тогда
		ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Продукция.ТекущиеДанные);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	
	Если Элемент.Имя = "Продукция" Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элемент.Имя = "Продукция" Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтотОбъект, Элемент);
	
КонецПроцедуры

// Параметры:
// 	Элемент - ПолеФормы - элемент
&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Элемент - ПолеФормы - элемент
&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы - команда
&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Элемент - ТаблицаФормы - таблица формы
// 	Отказ - Булево
&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[Элемент.Имя], Элемент.ТекущиеДанные);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

// Параметры:
// 	Элемент - ТаблицаФормы - таблица формы
// 	Отказ - Булево
&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

// Параметры:
// 	Элемент - ТаблицаФормы - таблица формы
// 	Отказ - Булево
// 	Копирование - Булево
// 	Родитель - ГруппаФормы
// 	Группа - Булево
&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(
			Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(
			Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Продукция, Элементы.Продукция.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТипыНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь);
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", ТипыНоменклатуры);
	
	Колонки = "Номенклатура,
			  |Характеристика,
			  |Упаковка,
			  |КоличествоУпаковок,
			  |Количество,
			  |ВидЦены,
			  |Цена,
			  |Склад,
			  |Подразделение";

	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);

	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);
	
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", НазначениеДоговора);
	
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуПродажи",
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ОтчетПоЗаказам);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Цена) И Не ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
			
			Если СтруктураДействий.Свойство("ЗаполнитьВидЦены") Тогда
				СтруктураДействий.Удалить("ЗаполнитьВидЦены");
				СтруктураДействий.Удалить("ЗаполнитьЦенуПродажи");
			КонецЕсли;
		
		ИначеЕсли Не СтруктураДействий.Свойство("ЗаполнитьВидЦены") Тогда
			
			ТекущаяСтрока.Цена = 0;
			
			СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
			СтруктураДействий.Вставить(
				"ЗаполнитьЦенуПродажи",
				ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте(Доступность)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		Доступность);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Возврат;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Перем ЦеныРассчитаны;
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		ПриИзмененииДатыСервер(РезультатВопроса, ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьРасшифровкуПлатежаВоВременноеХранилище()
	ВзаиморасчетыСервер.ПоместитьРасшифровкуПлатежаВоВременноеХранилище(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОснованиеДляПечати()
	
	Если Не ОснованиеИзменено Тогда
		СтруктураОснования = Документы.ОтчетДавальцу2_5.СтруктураОснованияДляПечати(Объект);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураОснования);
	КонецЕсли;
	
	ТаблицаОснованийДляПечати.Загрузить(Документы.ОтчетДавальцу2_5.ТаблицаОснованийДляПечати(Объект));
	
КонецПроцедуры

#КонецОбласти
