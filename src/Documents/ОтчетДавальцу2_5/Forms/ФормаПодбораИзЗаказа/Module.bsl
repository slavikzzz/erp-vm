
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = Параметры.Валюта;
	
	ЗаполнитьТаблицуПродукции(Параметры);
	
	ПодборТоваровКлиентСервер.СформироватьЗаголовокФормыПодбора(Заголовок, Параметры.Ссылка);

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ПараметрыВыбораСтатейИАналитик
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("ДанныеФормы", Новый Структура("ТаблицаПродукции", ТаблицаПродукции));
	ДанныеФормы.Вставить("Элементы", Элементы);
	ДанныеФормы.Вставить("УсловноеОформление", УсловноеОформление);
	ДанныеФормы.Вставить("КэшДанныхМеханизмов", Новый Структура);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцу2_5.ПараметрыВыбораСтатейИАналитик();
	ПараметрыВыбораСтатейИАналитик[0].ПутьКДанным = "ДанныеФормы.ТаблицаПродукции";
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ДанныеФормы, ПараметрыВыбораСтатейИАналитик);
	// Конец ПараметрыВыбораСтатейИАналитик

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Перенести изменения в документ?';
						|en = 'The data was modified. Migrate the changes to the document?'");
	Оповещение   = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВДокумент(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура ТаблицаПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ТаблицаПродукцииЗаказДавальца Тогда
		
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗаказДавальца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	МассивПорядковРасчетов = Новый Массив;
	Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
		Если СтрокаПродукции.СтрокаВыбрана
			И ЗначениеЗаполнено(СтрокаПродукции.ПорядокРасчетов)
			И МассивПорядковРасчетов.Найти(СтрокаПродукции.ПорядокРасчетов) = Неопределено Тогда
			МассивПорядковРасчетов.Добавить(СтрокаПродукции.ПорядокРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПорядковРасчетов.Количество() > 1 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'У выбранных заказов отличается поле ""Порядок расчетов""';
														|en = 'The ""Payment terms"" field data is different for the selected orders'"));
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Закрыть();
	
	ОповеститьОВыборе(Новый Структура("АдресВХранилище", ПоместитьВХранилище()));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	УстановитьЗначениеФлажков(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	УстановитьЗначениеФлажков(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма, "ТаблицаПродукцииНоменклатураЕдиницаИзмерения", "ТаблицаПродукции.Упаковка");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаПродукции.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииЗаказДавальца.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПродукции.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииЗаказДавальца.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПродукции.ЗаказДавальца");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без заказа>';
																|en = '<without order>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаПродукции.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<при списании на расходы>';
																		|en = '<when writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

#Область Прочее

&НаКлиенте
Процедура УстановитьЗначениеФлажков(Значение)
	
	МассивСтрок = ТаблицаПродукции.НайтиСтроки(Новый Структура("СтрокаВыбрана", Не Значение));
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.СтрокаВыбрана = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПродукции.Выгрузить(Новый Структура("СтрокаВыбрана", Истина)));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПродукции(ПараметрыПодбора)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СтавкаНДС",          ПараметрыПодбора.СтавкаНДС);
	ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",    ПараметрыПодбора.ЦенаВключаетНДС);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", ПараметрыПодбора.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ПроверятьПорядокРасчетов", Ложь);
	
	Документы.ОтчетДавальцу2_5.ЗаполнитьПоОстаткамЗаказов(
		ПараметрыПодбора, ТаблицаПродукции, ПараметрыПодбора.МассивЗаказов, ПараметрыЗаполнения);
	
	ЗаказыСервер.УстановитьПризнакиПрисутствияСтрокиВДокументе(
		ТаблицаПродукции, "ЗаказДавальца", ПараметрыПодбора.МассивКодовСтрок);
	
	НомерСтроки = 0;
	Для каждого СтрокаТаблицы Из ТаблицаПродукции Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
