#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует временные таблицы данных документа.
// Используется для заполнения видов запасов.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Дата                                                      КАК Дата,
	|	&Организация                                               КАК Организация,
	|	&Партнер                                                   КАК ВладелецТовара,
	|	&Партнер                                                   КАК Партнер,
	|	&Контрагент                                                КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)  КАК Соглашение,
	|	&Договор                                                   КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                   КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	&Склад                                                     КАК Склад,
	|	&ХозяйственнаяОперация                                     КАК ХозяйственнаяОперация,
	|	ЛОЖЬ                                                       КАК ЕстьСделкиВТабличнойЧасти,
	|	&Подразделение                                             КАК Подразделение,
	|	&Менеджер                                                  КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)         КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)    КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаТоваров.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура               КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика             КАК Характеристика,
	|	ТаблицаТоваров.Назначение                 КАК Назначение,
	|	ТаблицаТоваров.Серия                      КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий        КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Склад                      КАК Склад,
	|	ТаблицаТоваров.ЗаказДавальца              КАК ЗаказДавальца,
	|	ТаблицаТоваров.СписатьНаРасходы           КАК СписатьНаРасходы,
	|	ТаблицаТоваров.Получатель                 КАК Получатель,
	|	ТаблицаТоваров.СтатьяРасходов             КАК СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов          КАК АналитикаРасходов,
	|	ТаблицаТоваров.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|	ТаблицаТоваров.НастройкаСчетовУчета       КАК НастройкаСчетовУчета,
	|	ТаблицаТоваров.ОбъектРасчетов             КАК ОбъектРасчетов,
	|	ТаблицаТоваров.КоличествоУпаковок         КАК КоличествоУпаковок,
	|	ТаблицаТоваров.Количество                 КАК Количество,
	|	ТаблицаТоваров.Упаковка                   КАК Упаковка,
	|	ТаблицаТоваров.Цена                       КАК Цена,
	|	ТаблицаТоваров.Сумма                      КАК Сумма,
	|	ТаблицаТоваров.СуммаНДС                   КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаСНДС                  КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов        КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаТоваров.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура                 КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика               КАК Характеристика,
	|	ТаблицаТоваров.Назначение                   КАК Назначение,
	|	ТаблицаТоваров.Серия                        КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий          КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Склад                        КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	ТаблицаТоваров.ЗаказДавальца                КАК ЗаказДавальца,
	|	ТаблицаТоваров.СписатьНаРасходы             КАК СписатьНаРасходы,
	|	ТаблицаТоваров.Получатель                   КАК Получатель,
	|	ТаблицаТоваров.СтатьяРасходов               КАК СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов            КАК АналитикаРасходов,
	|	ТаблицаТоваров.АналитикаАктивовПассивов     КАК АналитикаАктивовПассивов,
	|	ТаблицаТоваров.НастройкаСчетовУчета         КАК НастройкаСчетовУчета,
	|	ТаблицаТоваров.Упаковка                     КАК Упаковка,
	|	ТаблицаТоваров.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ТаблицаТоваров.КоличествоУпаковок           КАК КоличествоУпаковок,
	|	ТаблицаТоваров.Количество                   КАК Количество,
	|	ТаблицаТоваров.Цена                         КАК Цена,
	|	ТаблицаТоваров.Сумма                        КАК Сумма,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаСНДС                    КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС                     КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов          КАК СуммаВзаиморасчетов,
	|	0                                           КАК СуммаВознаграждения,
	|	0                                           КАК СуммаНДСВознаграждения,
	|	ИСТИНА                                      КАК ПодбиратьВидыЗапасов,
	|	НЕОПРЕДЕЛЕНО                                КАК ДокументРеализации
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры <>
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
	|	ТаблицаВидыЗапасов.ЗаказДавальца              КАК ЗаказДавальца,
	|	ТаблицаВидыЗапасов.СписатьНаРасходы           КАК СписатьНаРасходы,
	|	ТаблицаВидыЗапасов.СтатьяРасходов             КАК СтатьяРасходов,
	|	ТаблицаВидыЗапасов.АналитикаРасходов          КАК АналитикаРасходов,
	|	ТаблицаВидыЗапасов.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|	ТаблицаВидыЗапасов.Получатель                 КАК Получатель,
	|	ТаблицаВидыЗапасов.Упаковка                   КАК Упаковка,
	|	ТаблицаВидыЗапасов.ОбъектРасчетов             КАК ОбъектРасчетов,
	|	ТаблицаВидыЗапасов.КоличествоУпаковок         КАК КоличествоУпаковок,
	|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|				ИЛИ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.КоличествоПоРНПТ
	|	КОНЕЦ                                         КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.Цена                       КАК Цена,
	|	ТаблицаВидыЗапасов.Сумма                      КАК Сумма,
	|	ТаблицаВидыЗапасов.СуммаНДС                   КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаСНДС                  КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов        КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ИсходныеВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО                                       КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                             КАК Номенклатура,
	|	Аналитика.Характеристика                           КАК Характеристика,
	|	Аналитика.Серия                                    КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.ЗаказДавальца                   КАК ЗаказДавальца,
	|	ТаблицаВидыЗапасов.СписатьНаРасходы                КАК СписатьНаРасходы,
	|	ТаблицаВидыЗапасов.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ТаблицаВидыЗапасов.АналитикаРасходов               КАК АналитикаРасходов,
	|	ТаблицаВидыЗапасов.АналитикаАктивовПассивов        КАК АналитикаАктивовПассивов,
	|	ТаблицаВидыЗапасов.Получатель                      КАК Получатель,
	|	ТаблицаВидыЗапасов.Упаковка                        КАК Упаковка,
	|	ТаблицаВидыЗапасов.ОбъектРасчетов                  КАК ОбъектРасчетов,
	|	ТаблицаВидыЗапасов.КоличествоУпаковок              КАК КоличествоУпаковок,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ                КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.Цена                            КАК Цена,
	|	ТаблицаВидыЗапасов.Сумма                           КАК Сумма,
	|	ТаблицаВидыЗапасов.СуммаНДС                        КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаСНДС                       КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов             КАК СуммаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)           КАК СкладОтгрузки,
	|	Аналитика.МестоХранения                            КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЛОЖЬ                                               КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ИсходныеВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|";
	
	Запрос.УстановитьПараметр("Ссылка",                Ссылка);
	Запрос.УстановитьПараметр("Дата",                  Дата);
	Запрос.УстановитьПараметр("Партнер",               Партнер);
	Запрос.УстановитьПараметр("Склад",                 Склад);
	Запрос.УстановитьПараметр("Контрагент",            Контрагент);
	Запрос.УстановитьПараметр("Договор",               Договор);
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("Подразделение",         Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Менеджер",              Менеджер);
	Запрос.УстановитьПараметр("ТаблицаТоваров",        Продукция);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",    ВидыЗапасов);
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения.
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта                  = УсловияПродаж.Валюта;
	ВалютаВзаиморасчетов    = УсловияПродаж.ВалютаВзаиморасчетов;
	НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	ЦенаВключаетНДС         = УсловияПродаж.ЦенаВключаетНДС;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация Тогда
		
		Организация = УсловияПродаж.Организация;
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация				= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		
		БанковскийСчетОрганизации =
			ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое
	   И ЗначениеЗаполнено(УсловияПродаж.Контрагент)
	   И УсловияПродаж.Контрагент <> Контрагент Тогда
		Контрагент = УсловияПродаж.Контрагент;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено
	   И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
						ЭтотОбъект,
						ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора(),
						ВалютаВзаиморасчетов);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности,, Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
	 Или Не УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ОплатаВВалюте = УсловияПродаж.ОплатаВВалюте;
	Иначе
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
	КонецЕсли;
	
	ЗаполнитьУсловияРасчетов(УсловияПродаж);
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ПустаяСсылкаДокумента", Документы.ОтчетДавальцу2_5.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", ХозяйственнаяОперация);
		ПараметрыОтбора.Вставить("ТолькоТиповые",                           Истина);
		ПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Истина);
		ПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Истина);
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер, ПараметрыОтбора, Ложь);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			КонецЕсли;
			
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
										Контрагент,, БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
КонецПроцедуры

// Заполняет аналитики учета номенклатуры. Используется в отчете ОстаткиТоваровОрганизаций.
Процедура ЗаполнитьАналитикиУчетаНоменклатуры() Экспорт
	
	// Если Склад - группа, то для аналитики учета номенклатуры склад берем из ТЧ
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ЭтоГруппа, ВыборГруппы");
	Если РеквизитыСклада.ЭтоГруппа
	   И РеквизитыСклада.ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных Тогда
		ИменаПолей.Произвольный = "Склад";
	КонецЕсли;
	ИменаПолей.Работа = "Подразделение";
	
	МестаУчета =
		РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Склад, Подразделение, Партнер);
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Продукция, МестаУчета, ИменаПолей);

КонецПроцедуры

// Инициализирует параметры заполнения видов запасов дополнительных свойств документа, используемых при записи документа
// в режиме 'Проведения' или 'Отмены проведения'.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.РеализацияТоваровУслуг - документ, для которого выполняется инициализация параметров.
//	РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//
Процедура ИнициализироватьПараметрыЗаполненияВидовЗапасовДляПроведения(ДокументОбъект, РежимЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаполненияВидовЗапасов", ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ЕстьКорректировки = Ложь;
		ПродажиСервер.ПроверитьНаличиеКорректировок(Ссылка, Ссылка, ЕстьКорректировки);
		Если ЕстьКорректировки Тогда
			ПродажиСервер.СообщитьОбОшибкахОтменаПроведенияЕстьКорректировки(Ссылка,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОкругления = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыОкругления.ИмяТЧ = "Продукция";
	ПараметрыОкругления.ДополнительныеПоля.Вставить("Склад", "Продукция.Склад");
	ПараметрыОкругления.УсловиеОтбораСтрокПоДополнительнымПолям =
		ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления("Продукция", "Склад");
	
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ОтчетДавальцу2_5);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Если ОтчетПоЗаказам И ЗначениеЗаполнено(ЗаказДавальца) Тогда
		
		МассивСтрок =
			Продукция.НайтиСтроки(Новый Структура("ЗаказДавальца", Документы.ЗаказДавальца2_5.ПустаяСсылка()));
			
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЗаказДавальца = ЗаказДавальца;
		КонецЦикла;
		
	КонецЕсли;
	
	СформироватьСписокЗависимыхЗаказов();
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Продукция, ЦенаВключаетНДС);
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцу2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "Продукция");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьАналитикиУчетаНоменклатуры();
		ЗаполнитьВидыЗапасов(Отказ);
	КонецЕсли;
	
	НастройкаСчетовУчетаСервер.ПередЗаписью(ЭтотОбъект, Документы.ОтчетДавальцу2_5.ПараметрыНастройкиСчетовУчета());
	
	ПараметрыРегистрации = Документы.ОтчетДавальцу2_5.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПередЗаписью(
		ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект, РежимЗаписи);
	
	ОтчетДавальцу2_5Локализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
			
			ТипОснование = ТипЗнч(ДанныеЗаполнения.МассивЗаказов[0]);
			
			Если ТипОснование = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
				
				ЗаполнитьДокументНаОснованииЗаказаДавальца2_5(
					ДанныеЗаполнения.МассивЗаказов, ДанныеЗаполнения.РеквизитыШапки);
				
			ИначеЕсли ТипОснование = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				ЗаполнитьДокументНаОснованииДоговора(
					ДанныеЗаполнения.МассивЗаказов, ДанныеЗаполнения.РеквизитыШапки);
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
		
		ЗаполнитьДокументНаОснованииЗаказаДавальца2_5(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения") Тогда
		
		ЗаполнитьДокументНаОснованииОтгрузкиТоваровСХранения(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		ЗаполнитьДокументНаОснованииДоговора(ДанныеЗаполнения);

	Иначе
		
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	Автор = Пользователи.ТекущийПользователь();
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь",   Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ОтчетДавальцу2_5Локализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ОтчетПоЗаказам
	 Или ЗначениеЗаполнено(ЗаказДавальца) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.ЗаказДавальца");		
	КонецЕсли;
	
	ПараметрыПроверкиКоличества = Документы.ОтчетДавальцу2_5.ПараметрыОкругления();
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ОтчетДавальцу2_5),
		Отказ,
		МассивНепроверяемыхРеквизитов);
		
	ПараметрыПроверкиПолучателя = Новый Структура;
	ПараметрыПроверкиПолучателя.Вставить("СписатьНаРасходы", Истина);
	ПараметрыПроверкиПолучателя.Вставить("Получатель",       Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Получатель"" в строке %1 списка ""Продукция""';
						|en = 'The ""Recipient"" field is not filled in line %1 of the ""Manufactured products"" list'");
	
	МассивСтрок = Продукция.НайтиСтроки(ПараметрыПроверкиПолучателя);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ТекстОшибки, СтрокаТаблицы.НомерСтроки),
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", СтрокаТаблицы.НомерСтроки, "Получатель"),,
			Отказ);
		
	КонецЦикла;
		
	ПараметрыВыбораСтатейИАналитик = Документы.ОтчетДавальцу2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(
		ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ
	   И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьЗапретОтгрузки(Партнер, Отказ);
	
	ОтчетДавальцу2_5Локализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПараметрыРегистрации = Документы.ОтчетДавальцу2_5.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ОтчетДавальцу2_5Локализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПараметрыРегистрации = Документы.ОтчетДавальцу2_5.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения(ПараметрыРегистрации);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ОтчетДавальцу2_5Локализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОтчетПоЗаказам = Ложь;
	ЗаказДавальца  = Неопределено;
	Согласован     = Ложь;
	
	Для Каждого ТекущиеДанные Из Продукция Цикл
		ТекущиеДанные.ЗаказДавальца       = Неопределено;
		ТекущиеДанные.КодСтроки           = 0;
		ТекущиеДанные.ИдентификаторСтроки = Неопределено;
	КонецЦикла;
	
	ВидыЗапасов.Очистить();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьСтавкуНДС",
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ЭтотОбъект, СтруктураДействий, Неопределено);
	
	ИнициализироватьДокумент();
	
	ВзаиморасчетыСервер.ПриКопировании(ЭтотОбъект);
	
	ОтчетДавальцу2_5Локализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	Автор = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ОтчетДавальцу2_5Локализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииЗаказаДавальца2_5(ДокументОснование, РеквизитыЗаказа = Неопределено)
	
	ТипОснования = ТипЗнч(ДокументОснование);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказДавальца2_5.Ссылка                           КАК ЗаказДавальца,
		|	ЗаказДавальца2_5.Сделка                           КАК Сделка,
		|	ЗаказДавальца2_5.Статус                           КАК СтатусДокумента,
		|	ЗаказДавальца2_5.Организация                      КАК Организация,
		|	ЗаказДавальца2_5.Склад                            КАК Склад,
		|	ЗаказДавальца2_5.БанковскийСчет                   КАК БанковскийСчетОрганизации,
		|	ЗаказДавальца2_5.Подразделение                    КАК Подразделение,
		|	ЗаказДавальца2_5.ПорядокРасчетов                  КАК ПорядокРасчетов,
		|	ЗаказДавальца2_5.ФормаОплаты                      КАК ФормаОплаты,
		|	ЗаказДавальца2_5.ГруппаФинансовогоУчета           КАК ГруппаФинансовогоУчета,
		|	ЗаказДавальца2_5.Касса                            КАК Касса,
		|	ЗаказДавальца2_5.Валюта                           КАК Валюта,
		|	ЗаказДавальца2_5.Валюта                           КАК ВалютаВзаиморасчетов,
		|	ЗаказДавальца2_5.ГрафикОплаты                     КАК ГрафикОплаты,
		|	ЗаказДавальца2_5.НаправлениеДеятельности          КАК НаправлениеДеятельности,
		|	ЗаказДавальца2_5.ОплатаВВалюте                    КАК ОплатаВВалюте,
		|	ЗаказДавальца2_5.Партнер                          КАК Партнер,
		|	ЗаказДавальца2_5.Контрагент                       КАК Контрагент,
		|	ЗаказДавальца2_5.Договор                          КАК Договор,
		|	ЗаказДавальца2_5.КонтактноеЛицо                   КАК КонтактноеЛицо,
		|	ЗаказДавальца2_5.БанковскийСчетКонтрагента        КАК БанковскийСчетКонтрагента,
		|	ЗаказДавальца2_5.ЦенаВключаетНДС                  КАК ЦенаВключаетНДС,
		|	ЗаказДавальца2_5.НалогообложениеНДС               КАК НалогообложениеНДС,
		|	ЗаказДавальца2_5.СтавкаНДС                        КАК СтавкаНДС,
		|	ЗаказДавальца2_5.УслугаПоПереработке              КАК УслугаПоПереработке,
		|	НЕ ЗаказДавальца2_5.Проведен                      КАК ЕстьОшибкиПроведен,
		|	НЕ ЗаказДавальца2_5.Статус В (&ДопустимыеСтатусы) КАК ЕстьОшибкиСтатус
		|ИЗ
		|	Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
		|ГДЕ
		|	ЗаказДавальца2_5.Ссылка = &ЗаказДавальца";
		
		Запрос.УстановитьПараметр("ЗаказДавальца", ДокументОснование);
		
		ДопустимыеСтатусы = Документы.ЗаказДавальца2_5.ДопустимыеСтатусыВводаНаОсновании(Метаданные().Имя);
		Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		РеквизитыЗаказа = РезультатЗапроса.Выбрать();
		РеквизитыЗаказа.Следующий();
		
		ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиВозможностиВводаНаОсновании();
		ПараметрыПроверки.Статус = РеквизитыЗаказа.СтатусДокумента;
		ПараметрыПроверки.ЕстьОшибкиПроведен = РеквизитыЗаказа.ЕстьОшибкиПроведен;
		ПараметрыПроверки.ЕстьОшибкиСтатус = РеквизитыЗаказа.ЕстьОшибкиСтатус;
		ПараметрыПроверки.МассивДопустимыхСтатусов = ДопустимыеСтатусы;
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСПараметрами(РеквизитыЗаказа.ЗаказДавальца, ПараметрыПроверки);
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		
		Валюта                    = ВалютаВзаиморасчетов;
		БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчетОрганизации;
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация				= Организация;
			СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
			СтруктураПараметров.БанковскийСчет			= БанковскийСчетОрганизации;
			
			БанковскийСчетОрганизации =
				ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			
			БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
											Контрагент,, БанковскийСчетКонтрагента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипОснования = Тип("Массив") Тогда
		МассивЗаказов = ДокументОснование;
	Иначе
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ДокументОснование);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СтавкаНДС",           СтавкаНДС);
	ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",     ЦенаВключаетНДС);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС",  НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ОтображатьСообщение", Истина);
	
	Документы.ОтчетДавальцу2_5.ЗаполнитьПоОстаткамЗаказов(ЭтотОбъект, Продукция, МассивЗаказов, ПараметрыЗаполнения);
	
	ЗаказДавальца = ?(ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5"),
						Неопределено,
						МассивЗаказов[0]);
	
	Если Не ЗначениеЗаполнено(ЗаказДавальца) И Продукция.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Нет остатков к оформлению.';
								|en = 'There are no remaining goods to register.'");
	Иначе
		ОтчетПоЗаказам = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииОтгрузкиТоваровСХранения(ДокументОснование)
	
	ДанныеОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ДокументОснование,
						"Организация, Договор, Склад, ПоЗаказу, Основание");
	
	Если ДанныеОснование.ПоЗаказу Тогда
		
		Если ЗначениеЗаполнено(ДанныеОснование.Основание) Тогда
			ЗаполнитьДокументНаОснованииЗаказаДавальца2_5(ДанныеОснование.Основание);
		Иначе
			
			ТекстИсключение =
				НСтр("ru = 'Передача давальцу оформлено по нескольким заказам. Ввод на основании невозможен.
						   |Воспользуйтесь рабочим местом ""Прием в переработку"" - ""Документы к оформлению"".';
						   |en = 'Transfer to the provider is registered under several orders. Cannot generate from base documents.
						   |Use the ""Subcontracting services delivered - Unregistered documents"" workplace.'");
			
			ВызватьИсключение ТекстИсключение;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Характеристика    КАК Характеристика,
	|	Товары.Назначение        КАК Назначение,
	|	Товары.Серия             КАК Серия,
	|	Товары.Склад             КАК Склад,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура      КАК Номенклатура,
	|	Серии.Характеристика    КАК Характеристика,
	|	Серии.Назначение        КАК Назначение,
	|	Серии.Серия             КАК Серия,
	|	Серии.Склад             КАК Склад,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ОтгрузкаТоваровСХранения.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Серия,
	|	Серии.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                  КАК Номенклатура,
	|	Товары.Характеристика                                КАК Характеристика,
	|	Товары.Назначение                                    КАК Назначение,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия)                  КАК Серия,
	|	Товары.Склад                                         КАК Склад,
	|	СУММА(ЕСТЬNULL(Серии.Количество, Товары.Количество)) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Товары.Номенклатура   = Серии.Номенклатура
	|		 И Товары.Характеристика = Серии.Характеристика
	|		 И Товары.Назначение     = Серии.Назначение
	|		 И Товары.Склад          = Серии.Склад
	|		 И Товары.Серия          = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия),
	|	Товары.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	Склад
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ДополнительныеУсловияТоварыОрганизаций = 
		"ВидЗапасов.Договор = &Договор
		|И (АналитикаУчетаНоменклатуры.Номенклатура,
		|	АналитикаУчетаНоменклатуры.Характеристика,
		|	АналитикаУчетаНоменклатуры.Назначение,
		|	АналитикаУчетаНоменклатуры.Серия,
		|	АналитикаУчетаНоменклатуры.МестоХранения) В
		|		(ВЫБРАТЬ
		|			ТаблицаТоваров.Номенклатура   КАК Номенклатура,
		|			ТаблицаТоваров.Характеристика КАК Характеристика,
		|			ТаблицаТоваров.Назначение     КАК Назначение,
		|			ТаблицаТоваров.Серия          КАК Серия,
		|			ТаблицаТоваров.Склад          КАК Склад
		|		ИЗ
		|			ТаблицаТоваров КАК ТаблицаТоваров)";
		
	ДополнительныеУсловияЗаказыКлиентов =
		"ИСТИНА В 
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ИСТИНА
		|	ИЗ
		|		ТаблицаТоваров КАК ТаблицаТоваров
		|	ГДЕ
		|		ТаблицаТоваров.Номенклатура     = Обороты.Номенклатура
		|		И ТаблицаТоваров.Характеристика = Обороты.Характеристика
		|		И ТаблицаТоваров.Назначение     = Товары.Назначение
		|		И ТаблицаТоваров.Серия          = Обороты.Серия
		|		И ТаблицаТоваров.Склад          = Обороты.Склад)";
		
	УсловиеОтбораОстатков = "ТИПЗНАЧЕНИЯ(ЗаказКлиента) = ТИП(Документ.ЗаказДавальца2_5)
							|И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца2_5).Договор = &Договор";
	
	ТекстЗапросаОстаткиБезЗаказа = СтрЗаменить(НакладныеСервер.ТекстЗапросаСостоянияОтчетовДавальцам2_5ОстаткиБезЗаказа(),
												"&ДополнительныеУсловияТоварыОрганизаций",
												ДополнительныеУсловияТоварыОрганизаций);
	
	ТекстЗапросаОстаткиБезЗаказа = СтрЗаменить(ТекстЗапросаОстаткиБезЗаказа,
												"&ДополнительныеУсловияЗаказыКлиентов",
												ДополнительныеУсловияЗаказыКлиентов);
	
	ТекстЗапросаОстаткиБезЗаказа = СтрЗаменить(ТекстЗапросаОстаткиБезЗаказа,
												"&УсловиеОтбораОстатков",
												УсловиеОтбораОстатков);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиБезЗаказа.Номенклатура   КАК Номенклатура,
	|	ОстаткиБезЗаказа.Характеристика КАК Характеристика,
	|	ОстаткиБезЗаказа.Назначение     КАК Назначение,
	|	ОстаткиБезЗаказа.Серия          КАК Серия,
	|	ОстаткиБезЗаказа.Склад          КАК Склад,
	|	ОстаткиБезЗаказа.КОформлению    КАК КОформлению
	|ПОМЕСТИТЬ ОстаткиБезЗаказа
	|ИЗ
	|	&ОстаткиБезЗаказа КАК ОстаткиБезЗаказа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Назначение     КАК Назначение,
	|	ТаблицаТоваров.Серия          КАК Серия,
	|	ТаблицаТоваров.Склад          КАК Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Количество > ОстаткиБезЗаказа.КОформлению
	|			ТОГДА ОстаткиБезЗаказа.КОформлению
	|		ИНАЧЕ ТаблицаТоваров.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиБезЗаказа КАК ОстаткиБезЗаказа
	|		ПО ТаблицаТоваров.Номенклатура   = ОстаткиБезЗаказа.Номенклатура
	|		 И ТаблицаТоваров.Характеристика = ОстаткиБезЗаказа.Характеристика
	|		 И ТаблицаТоваров.Назначение     = ОстаткиБезЗаказа.Назначение
	|		 И ТаблицаТоваров.Серия          = ОстаткиБезЗаказа.Серия
	|		 И ТаблицаТоваров.Склад          = ОстаткиБезЗаказа.Склад
	|ГДЕ
	|	НЕ ОстаткиБезЗаказа.Номенклатура ЕСТЬ NULL
	|";
	
	ТекстыЗапроса.Добавить(СтрЗаменить(ТекстЗапроса, "&ОстаткиБезЗаказа", СтрШаблон("(%1)", ТекстЗапросаОстаткиБезЗаказа)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("ДокументОснование",       ДокументОснование);
	Запрос.УстановитьПараметр("Договор",                 ДанныеОснование.Договор);
	Запрос.УстановитьПараметр("ОтбиратьПоОрганизации",   Истина);
	Запрос.УстановитьПараметр("Организация",             ДанныеОснование.Организация);
	Запрос.УстановитьПараметр("ОтбиратьПоСкладу",        Ложь);
	Запрос.УстановитьПараметр("Склад",                   Неопределено);
	Запрос.УстановитьПараметр("ОтбиратьПоПодразделению", Ложь);
	Запрос.УстановитьПараметр("Подразделение",           Неопределено);
	Запрос.УстановитьПараметр("ОтбиратьПоМенеджеру",     Ложь);
	Запрос.УстановитьПараметр("Менеджер",                Неопределено);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет остатков к оформлению.';
								|en = 'There are no remaining goods to register.'");
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДанныеОснование.Договор);
	
	СвойстваЗаказов = Новый Структура;
	СвойстваЗаказов.Вставить("Склад", ДанныеОснование.Склад);
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		Документы.ОтчетДавальцу2_5.ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧПродукция = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧПродукция, Выборка);
		СтрокаТЧПродукция.КоличествоУпаковок = Выборка.Количество;
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		ЭтотОбъект,
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ОтчетДавальцу2_5)));
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииДоговора(ДоговорОснование, РеквизитыДоговора = Неопределено)
	
	ТипОснования = ТипЗнч(ДоговорОснование);
	
	Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыДоговора);
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Договоры.Партнер                   КАК Партнер,
		|	Договоры.Контрагент                КАК Контрагент,
		|	Договоры.Ссылка                    КАК Договор,
		|	Договоры.Организация               КАК Организация,
		|	Договоры.Подразделение             КАК Подразделение,
		|	Договоры.ВалютаВзаиморасчетов      КАК Валюта,
		|	Договоры.ВалютаВзаиморасчетов      КАК ВалютаВзаиморасчетов,
		|	Договоры.НаправлениеДеятельности   КАК НаправлениеДеятельности,
		|	Договоры.НалогообложениеНДС        КАК НалогообложениеНДС,
		|	Договоры.СтавкаНДС                 КАК СтавкаНДС,
		|	НЕОПРЕДЕЛЕНО                       КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО                       КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО                       КАК Содержание,
		|	НЕОПРЕДЕЛЕНО                       КАК ЦенаВключаетНДС,
		|	Договоры.БанковскийСчет            КАК БанковскийСчетОрганизации,
		|	Договоры.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|ГДЕ
		|	Договоры.Ссылка = &ДоговорОснование";
		
		Запрос.УстановитьПараметр("ДоговорОснование", ДоговорОснование);
		
		Результат = Запрос.Выполнить();
		
		РеквизитыШапки = Результат.Выбрать();
		РеквизитыШапки.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
		
	КонецЕсли;
	
	ДополнительныеУсловияТоварыОрганизаций = "ВидЗапасов.Договор В (&Договор)";
	
	ДополнительныеУсловияЗаказыКлиентов    = "ИСТИНА";
	
	УсловиеОтбораОстатков = "ТИПЗНАЧЕНИЯ(ЗаказКлиента) = ТИП(Документ.ЗаказДавальца2_5)
							|И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца2_5).Договор В (&Договор)";
	
	ТекстыЗапроса = СтрЗаменить(НакладныеСервер.ТекстЗапросаСостоянияОтчетовДавальцам2_5ОстаткиБезЗаказа(),
								"&ДополнительныеУсловияТоварыОрганизаций",
								ДополнительныеУсловияТоварыОрганизаций);
	
	ТекстыЗапроса = СтрЗаменить(ТекстыЗапроса,
								"&ДополнительныеУсловияЗаказыКлиентов",
								ДополнительныеУсловияЗаказыКлиентов);
	
	ТекстыЗапроса = СтрЗаменить(ТекстыЗапроса, "&УсловиеОтбораОстатков", УсловиеОтбораОстатков);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстыЗапроса;
	
	Запрос.УстановитьПараметр("Договор",                 ДоговорОснование);
	Запрос.УстановитьПараметр("ОтбиратьПоОрганизации",   Ложь);
	Запрос.УстановитьПараметр("Организация",             Неопределено);
	Запрос.УстановитьПараметр("ОтбиратьПоСкладу",        Ложь);
	Запрос.УстановитьПараметр("Склад",                   Неопределено);
	Запрос.УстановитьПараметр("ОтбиратьПоПодразделению", Ложь);
	Запрос.УстановитьПараметр("Подразделение",           Неопределено);
	Запрос.УстановитьПараметр("ОтбиратьПоМенеджеру",     Ложь);
	Запрос.УстановитьПараметр("Менеджер",                Неопределено);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет остатков к оформлению.';
								|en = 'There are no remaining goods to register.'");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧПродукция = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧПродукция, Выборка);
		СтрокаТЧПродукция.Количество         = Выборка.КОформлению;
		СтрокаТЧПродукция.КоличествоУпаковок = Выборка.КОформлению;
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		ЭтотОбъект,
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ОтчетДавальцу2_5)));
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)

	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент()
	
	Валюта               = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	ВалютаВзаиморасчетов = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(ВалютаВзаиморасчетов);
	Организация          = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если ЗначениеЗаполнено(Договор) И Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Подразделение");
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчетОрганизации;
	БанковскийСчетОрганизации =
		ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация  = Организация;
	СтруктураПараметров.Касса        = Касса;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ПараметрыЗаполнения = Документы.ОтчетДавальцу2_5.ПараметрыЗаполненияНалогообложенияНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ЭтотОбъект, СтруктураДействий, КэшированныеЗначения);
	
	Если Не КэшированныеЗначения.ОбработанныеСтроки.Количество() = 0 Тогда
		
		ТаблицаПродукция = Продукция.Выгрузить();
		ТаблицаПродукция.Колонки.Добавить("СтавкаНДС");
		ТаблицаПродукция.ЗаполнитьЗначения(СтавкаНДС, "СтавкаНДС");
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаПродукция, СтруктураДействий, Неопределено);
		
		Продукция.Загрузить(ТаблицаПродукция);
		
	КонецЕсли;
	
	БанковскийСчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "БанковскийСчетКонтрагента");
	Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
										Контрагент,, БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц  = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
	
	Если Не Проведен
		Или ПерезаполнитьВидыЗапасов
		Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		Или ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
		
		ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(
			ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество, КоличествоПоРНПТ, Сумма");
		
		ЗаполнитьДополнительныеПоляВидовЗапасов(МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "ВидыЗапасов");
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаполненияВидовЗапасов()
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Очистить();
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПолуфабрикатДавальца);
	
	ПараметрыЗаполнения.ПодбиратьВидыЗапасовПоИнтеркампани = Ложь;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляВидовЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхДокумента.Организация           КАК Организация,
	|	ТаблицаДанныхДокумента.ВладелецТовара        КАК ВладелецТовара,
	|	ТаблицаДанныхДокумента.Контрагент            КАК Контрагент,
	|	ТаблицаДанныхДокумента.Соглашение            КАК Соглашение,
	|	ТаблицаДанныхДокумента.Договор               КАК Договор,
	|	ТаблицаДанныхДокумента.Валюта                КАК Валюта,
	|	ТаблицаДанныхДокумента.НалогообложениеНДС    КАК НалогообложениеОрганизации,
	|	ТаблицаДанныхДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца) КАК ТипЗапасов,
	|	ТаблицаТоваров.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|	ПО ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанныхДокумента.Организация,
	|	ТаблицаДанныхДокумента.ВладелецТовара,
	|	ТаблицаДанныхДокумента.Контрагент,
	|	ТаблицаДанныхДокумента.Соглашение,
	|	ТаблицаДанныхДокумента.Договор,
	|	ТаблицаДанныхДокумента.Валюта,
	|	ТаблицаДанныхДокумента.НалогообложениеНДС,
	|	ТаблицаДанныхДокумента.ХозяйственнаяОперация,
	|	ТаблицаДанныхДокумента.ТипЗапасов,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Номенклатура.ГруппаФинансовогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура               КАК Номенклатура,
	|	ТаблицаТоваров.ЗаказДавальца              КАК ЗаказДавальца, 
	|	ТаблицаТоваров.СписатьНаРасходы           КАК СписатьНаРасходы,
	|	ТаблицаТоваров.Получатель                 КАК Получатель,
	|	ТаблицаТоваров.СтатьяРасходов             КАК СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов          КАК АналитикаРасходов,
	|	ТаблицаТоваров.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|	ТаблицаТоваров.НастройкаСчетовУчета       КАК НастройкаСчетовУчета,
	|	ТаблицаТоваров.Упаковка                   КАК Упаковка,
	|	ТаблицаТоваров.ОбъектРасчетов             КАК ОбъектРасчетов,
	|	ТаблицаТоваров.КоличествоУпаковок         КАК КоличествоУпаковок,
	|	ТаблицаТоваров.Количество                 КАК Количество,
	|	ТаблицаТоваров.Цена                       КАК Цена,
	|	ТаблицаТоваров.Сумма                      КАК Сумма,
	|	ТаблицаТоваров.СуммаНДС                   КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаСНДС                  КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов        КАК СуммаВзаиморасчетов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТоваров.НомерСтроки
	|";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКорВидЗапасов = МассивРезультатов[МассивРезультатов.ВГраница() - 1].Выбрать();
	
	КорВидыЗапасов = Новый Соответствие;
	Пока ВыборкаКорВидЗапасов.Следующий() Цикл
		КорВидыЗапасов.Вставить(
			ВыборкаКорВидЗапасов.Номенклатура,
			Справочники.ВидыЗапасов.ВидЗапасовДокумента(Организация, ХозяйственнаяОперация, ВыборкаКорВидЗапасов));
	КонецЦикла;
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры");
	
	ТаблицаТовары = МассивРезультатов[МассивРезультатов.ВГраница()].Выгрузить();
	Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
		
		КоличествоТоваров  = СтрокаТовара.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, СтрокаТовара);
		
		МассивСтрок = ВидыЗапасов.НайтиСтроки(ОтборТоваров);
		Для каждого СтрокаЗапасов Из МассивСтрок Цикл
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара,, "АналитикаУчетаНоменклатуры, Количество, КоличествоУпаковок, 
			|Сумма, СуммаНДС, СуммаСНДС, СуммаВзаиморасчетов");
			
			НоваяСтрока.КорВидЗапасов      = КорВидыЗапасов.Получить(СтрокаТовара.Номенклатура);
			
			НоваяСтрока.Количество         = Количество;
			НоваяСтрока.КоличествоПоРНПТ   = ?(Количество = КоличествоТоваров,
													СтрокаЗапасов.КоличествоПоРНПТ,
													СтрокаЗапасов.КоличествоПоРНПТ * Количество / КоличествоТоваров);
			
			НоваяСтрока.КоличествоУпаковок = ?(Количество = КоличествоТоваров,
													СтрокаТовара.КоличествоУпаковок,
													СтрокаТовара.КоличествоУпаковок * Количество / КоличествоТоваров);
			
			НоваяСтрока.Сумма              = ?(Количество = КоличествоТоваров,
													СтрокаТовара.Сумма,
													СтрокаТовара.Сумма * Количество / КоличествоТоваров);
			
			НоваяСтрока.СуммаНДС           = ?(Количество = КоличествоТоваров,
													СтрокаТовара.СуммаНДС,
													СтрокаТовара.СуммаНДС * Количество / КоличествоТоваров);
													
			НоваяСтрока.СуммаСНДС           = ?(Количество = КоличествоТоваров,
													СтрокаТовара.СуммаСНДС,
													СтрокаТовара.СуммаСНДС * Количество / КоличествоТоваров);
			
			НоваяСтрока.СуммаВзаиморасчетов = ?(Количество = КоличествоТоваров,
													СтрокаТовара.СуммаВзаиморасчетов,
													СтрокаТовара.СуммаВзаиморасчетов * Количество / КоличествоТоваров);
			
			СтрокаЗапасов.Количество       = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			СтрокаЗапасов.КоличествоПоРНПТ = СтрокаЗапасов.КоличествоПоРНПТ - НоваяСтрока.КоличествоПоРНПТ;
			
			СтрокаТовара.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
			СтрокаТовара.Сумма              = СтрокаТовара.Сумма - НоваяСтрока.Сумма;
			СтрокаТовара.СуммаНДС           = СтрокаТовара.СуммаНДС - НоваяСтрока.СуммаНДС;
			СтрокаТовара.СуммаСНДС          = СтрокаТовара.СуммаСНДС - НоваяСтрока.СуммаСНДС;
			СтрокаТовара.СуммаВзаиморасчетов = СтрокаТовара.СуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетов;
			
			КоличествоТоваров  = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Организация, Дата, Партнер, Договор, Склад";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|		ТаблицаТоваров.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.ЗаказДавальца              КАК ЗаказДавальца,
	|		ТаблицаТоваров.СписатьНаРасходы           КАК СписатьНаРасходы,
	|		ТаблицаТоваров.СтатьяРасходов             КАК СтатьяРасходов,
	|		ТаблицаТоваров.АналитикаРасходов          КАК АналитикаРасходов,
	|		ТаблицаТоваров.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|		ТаблицаТоваров.Получатель                 КАК Получатель,
	|		ТаблицаТоваров.Упаковка                   КАК Упаковка,
	|		ТаблицаТоваров.ОбъектРасчетов             КАК ОбъектРасчетов,
	|		ТаблицаТоваров.Цена                       КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.ЗаказДавальца              КАК ЗаказДавальца,
	|		ТаблицаТоваров.СписатьНаРасходы           КАК СписатьНаРасходы,
	|		ТаблицаТоваров.СтатьяРасходов             КАК СтатьяРасходов,
	|		ТаблицаТоваров.АналитикаРасходов          КАК АналитикаРасходов,
	|		ТаблицаТоваров.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|		ТаблицаТоваров.Получатель                 КАК Получатель,
	|		ТаблицаТоваров.Упаковка                   КАК Упаковка,
	|		ТаблицаТоваров.ОбъектРасчетов             КАК ОбъектРасчетов,
	|		ТаблицаТоваров.Цена                       КАК Цена,
	|		ТаблицаТоваров.КоличествоУпаковок         КАК КоличествоУпаковок,
	|		ТаблицаТоваров.Количество                 КАК Количество,
	|		ТаблицаТоваров.Сумма                      КАК Сумма,
	|		ТаблицаТоваров.СуммаНДС                   КАК СуммаНДС,
	|		ТаблицаТоваров.СуммаСНДС                  КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаВзаиморасчетов        КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.ЗаказДавальца              КАК ЗаказДавальца,
	|		ТаблицаВидыЗапасов.СписатьНаРасходы           КАК СписатьНаРасходы,
	|		ТаблицаВидыЗапасов.СтатьяРасходов             КАК СтатьяРасходов,
	|		ТаблицаВидыЗапасов.АналитикаРасходов          КАК АналитикаРасходов,
	|		ТаблицаВидыЗапасов.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|		ТаблицаВидыЗапасов.Получатель                 КАК Получатель,
	|		ТаблицаВидыЗапасов.Упаковка                   КАК Упаковка,
	|		ТаблицаВидыЗапасов.ОбъектРасчетов             КАК ОбъектРасчетов,
	|		ТаблицаВидыЗапасов.Цена                       КАК Цена,
	|		-ТаблицаВидыЗапасов.КоличествоУпаковок        КАК КоличествоУпаковок,
	|		-ТаблицаВидыЗапасов.Количество                КАК Количество,
	|		-ТаблицаВидыЗапасов.Сумма                     КАК Сумма,
	|		-ТаблицаВидыЗапасов.СуммаНДС                  КАК СуммаНДС,
	|		-ТаблицаВидыЗапасов.СуммаСНДС                 КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаВзаиморасчетов       КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.ИдентификаторСтроки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ЗаказДавальца,
	|	ТаблицаТоваров.СписатьНаРасходы,
	|	ТаблицаТоваров.СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов,
	|	ТаблицаТоваров.АналитикаАктивовПассивов,
	|	ТаблицаТоваров.Получатель,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.ОбъектРасчетов,
	|	ТаблицаТоваров.Цена
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.КоличествоУпаковок) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.Сумма) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаВзаиморасчетов) <> 0
	|";
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат Не РезультатЗапрос.Пустой();
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьУсловияРасчетов(Знач УсловияПродаж)
	
	ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация = Организация Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация				= Организация;
		СтруктураПараметров.ФормаОплаты				= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
		
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5.Продукция КАК ТоварыОтчета
	|		ПО ЗаказКлиента.Ссылка = ТоварыОтчета.ЗаказДавальца
	|ГДЕ
	|	ТоварыОтчета.Ссылка = &Ссылка
	|	И ЗаказКлиента.Ссылка НЕ В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("МассивЗаказов", Продукция.ВыгрузитьКолонку("ЗаказДавальца"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЗависимыхЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	
	ДополнительныеСвойства.Вставить(
		"МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
