#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - см. ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов.ОписаниеЗаполняемыхРеквизитов
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Автор";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Менеджер", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор, ЗаказДавальца, Менеджер";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены  = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "Подразделение", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "БанковскийСчетОрганизации", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Автор, Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Автор, Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Касса", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Контрагент";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Контрагент";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "БанковскийСчетКонтрагента", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Договор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены  = "Договор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "УслугаПоПереработке, СтавкаНДС", Параметры);
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("Продажи");
	МеханизмыДокумента.Добавить("ПриемВПереработку");
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетНДС");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетРабот");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	
	ОтчетДавальцу2_5Локализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ОтчетДавальцу2_5") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос		  = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(ДокументСсылка, Запрос, ТекстыЗапроса, Регистры);
		
		ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры);
		
		ОтчетДавальцу2_5Локализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	КомандаСоздания = Документы.ОтгрузкаТоваровСХранения.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если КомандаСоздания <> Неопределено Тогда
		КомандаСоздания.Представление =
			ДавальческаяСхемаКлиентСервер.СинонимДокументаОтгрузкаТоваровСХраненияПередачаДавальцу();
	КонецЕсли;
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ОперацияПоПлатежнойКарте.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОснованииСчетаНаОплатуОтчетДавальцу2_5(
		КомандыСозданияНаОсновании);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	КомандаСоздания = Документы.КорректировкаРеализации.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если КомандаСоздания <> Неопределено Тогда
		КомандаСоздания.Представление = НСтр("ru = 'Корректировка отчета давальцу';
											|en = 'Adjust ""Consumption report — Subcontracting services delivered""'");
	КонецЕсли;
	
	Справочники.Претензии.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ОтчетДавальцу2_5Локализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
	//++ НЕ УТКА
	Документы.ОтчетПереработчика2_5.ДобавитьКомандуСоздатьНаОснованииОтчетаДавальцу(КомандыСозданияНаОсновании);
	//-- НЕ УТКА
	
КонецПроцедуры

// Добавляет команду создания документа "Отчет давальцу".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
// Возвращаемое значение:
//  СтрокаТаблицыЗначений
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцу2_5) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер            = Метаданные.Документы.ОтчетДавальцу2_5.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление       =
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ОтчетДавальцу2_5);
		КомандаСоздатьНаОсновании.РежимЗаписи         = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
// 	КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// 	Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
		КомандаОтчет.Порядок          = 1;
	КонецЕсли;
	
	КомандаОтчет = ВзаиморасчетыСервер.КарточкаРасчетовСКлиентом_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = ВзаиморасчетыСервер.ЗадолженностьКлиентов_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	// ФормаСпискаДокументов
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок          = 1;
	КонецЕсли;
	
	КомандаОтчет = ВзаиморасчетыСервер.ЗадолженностьКлиентов_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность         = "Обычное";
		КомандаОтчет.Порядок          = 1;
	КонецЕсли;
	
	КомандаОтчет = ВзаиморасчетыСервер.КарточкаРасчетовСКлиентом_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность         = "Обычное";
		КомандаОтчет.Порядок          = 2;
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ФактическаяСебестоимостьПродукции) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер			= Метаданные.Отчеты.ФактическаяСебестоимостьПродукции.ПолноеИмя();
		КомандаОтчет.Представление		= НСтр("ru = 'Фактическая себестоимость продукции';
												|en = 'Actual product cost'");
		КомандаОтчет.КлючВарианта		= "ФактическаяСебестоимостьПродукцииКонтекстОтчетДавальцу";
		КомандаОтчет.Порядок			= 50;
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность			= "Важное";
				
	КонецЕсли;
	
	ОтчетДавальцу2_5Локализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#Область Заполнение

// Возвращает структуру необходимую для дальнейшего использования при заполнении документа.
//
// Возвращаемое значение:
//   Структура - структура параметров заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	
	ПараметрыЗаполнения.Вставить("МассивЗаказов",    Неопределено);
	
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",   Неопределено);
	
	ПараметрыЗаполнения.Вставить("ИмяДокумента",     "ОтчетДавальцу2_5");
	ПараметрыЗаполнения.Вставить("ИмяРегистраЗаказ", "ЗаказыКлиентов");
	ПараметрыЗаполнения.Вставить("ИмяПоляЗаказ",     "ЗаказДавальца");
	
	ПараметрыЗаполнения.Вставить("КлючевыеПоля",     "Номенклатура, Характеристика");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Производит инициализацию структуры параметров заполнения по реквизитам шапки и по заказам.
//
// Параметры:
//  ПараметрыЗаполнения	 - Структура - Параметры по умолчанию получаемые в методе ПараметрыЗаполненияДокумента()
//  РеквизитыШапки		 - Структура - Содержит ключи на основании которых будет происходить заполнение
//  МассивЗаказов		 - Массив - Ссылки на заказы по которым будет происходить заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.МассивЗаказов  = МассивЗаказов;
	ПараметрыЗаполнения.РеквизитыШапки = РеквизитыШапки;
	
КонецПроцедуры

// Формирует структуру для создания документа по заказам
//  Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
//  МассивСсылок    - Массив - заказы на внутреннее потребление, по которым необходимо ввести накладную.
//  СвойстваЗаказов - Структура, Неопределено - 
//
// Возвращаемое значение:
//  Структура, Неопределено - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ЗаказДавальца2_5.Партнер)                 КАК Партнер,
	|	МИНИМУМ(ЗаказДавальца2_5.Контрагент)              КАК Контрагент,
	|	МИНИМУМ(ЗаказДавальца2_5.Договор)                 КАК Договор,
	|	МИНИМУМ(ЗаказДавальца2_5.Сделка)                  КАК Сделка,
	|	МИНИМУМ(ЗаказДавальца2_5.Организация)             КАК Организация,
	|	МИНИМУМ(ЗаказДавальца2_5.Склад)                   КАК Склад,
	|	МИНИМУМ(ЗаказДавальца2_5.Подразделение)           КАК Подразделение,
	|	МИНИМУМ(ЗаказДавальца2_5.ВалютаВзаиморасчетов)    КАК ВалютаВзаиморасчетов,
	|	МИНИМУМ(ЗаказДавальца2_5.НалогообложениеНДС)      КАК НалогообложениеНДС,
	|	МИНИМУМ(ЗаказДавальца2_5.НаправлениеДеятельности) КАК НаправлениеДеятельности,
	|	МИНИМУМ(ЗаказДавальца2_5.ЦенаВключаетНДС)         КАК ЦенаВключаетНДС,
	|	МИНИМУМ(ЗаказДавальца2_5.СтавкаНДС)               КАК СтавкаНДС,
	|	МАКСИМУМ(ЗаказДавальца2_5.УслугаПоПереработке)    КАК УслугаПоПереработке,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|				ВЫБОР
	|					КОГДА ЗаказДавальца2_5.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|						ТОГДА ЗаказДавальца2_5.БанковскийСчет
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Организация) = 1
	|				ТОГДА МАКСИМУМ(ЗаказДавальца2_5.БанковскийСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ                                             КАК БанковскийСчетОрганизации,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|				ВЫБОР
	|					КОГДА ЗаказДавальца2_5.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|						ТОГДА ЗаказДавальца2_5.БанковскийСчетКонтрагента
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Контрагент) = 1
	|				ТОГДА МАКСИМУМ(ЗаказДавальца2_5.БанковскийСчетКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ                                             КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Партнер) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияПартнер,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Договор) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияДоговор,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Склад) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияСклад,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Подразделение) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияПодразделение,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.ВалютаВзаиморасчетов) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.НалогообложениеНДС) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияНалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.НаправлениеДеятельности) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияНаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.ЦенаВключаетНДС) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.СтавкаНДС) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияСтавкаНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца2_5.Сделка) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ЕстьОтличияСделка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказДавальца2_5.Партнер                   КАК Партнер,
	|		ЗаказДавальца2_5.Контрагент                КАК Контрагент,
	|		ЗаказДавальца2_5.Договор                   КАК Договор,
	|		ЗаказДавальца2_5.Сделка                    КАК Сделка,
	|		ЗаказДавальца2_5.Организация               КАК Организация,
	|		ЗаказДавальца2_5.Склад                     КАК Склад,
	|		ЗаказДавальца2_5.Подразделение             КАК Подразделение,
	|		ЗаказДавальца2_5.Валюта                    КАК ВалютаВзаиморасчетов,
	|		ЗаказДавальца2_5.НалогообложениеНДС        КАК НалогообложениеНДС,
	|		ЗаказДавальца2_5.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|		ЗаказДавальца2_5.СтавкаНДС                 КАК СтавкаНДС,
	|		ЗаказДавальца2_5.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|		ЗаказДавальца2_5.БанковскийСчет            КАК БанковскийСчет,
	|		ЗаказДавальца2_5.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|		ЗаказДавальца2_5.УслугаПоПереработке       КАК УслугаПоПереработке
	|	ИЗ
	|		Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|	ГДЕ
	|		ЗаказДавальца2_5.Ссылка В (&МассивСсылок)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Договоры.Партнер                                   КАК Партнер,
	|		Договоры.Контрагент                                КАК Контрагент,
	|		Договоры.Ссылка                                    КАК Договор,
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|		Договоры.Организация                               КАК Организация,
	|		&Склад                                             КАК Склад,
	|		Договоры.Подразделение                             КАК Подразделение,
	|		Договоры.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|		Договоры.НалогообложениеНДС                        КАК НалогообложениеНДС,
	|		Договоры.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|		Договоры.СтавкаНДС                                 КАК СтавкаНДС,
	|		НЕОПРЕДЕЛЕНО                                       КАК ЦенаВключаетНДС,
	|		Договоры.БанковскийСчет                            КАК БанковскийСчет,
	|		Договоры.БанковскийСчетКонтрагента                 КАК БанковскийСчетКонтрагента,
	|		""""                                               КАК УслугаПоПереработке
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ГДЕ
	|		Договоры.Ссылка В (&МассивСсылок)) КАК ЗаказДавальца2_5
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказДавальца2_5.Ссылка                           КАК Заказ,
	|	ЗаказДавальца2_5.Статус                           КАК Статус,
	|	НЕ ЗаказДавальца2_5.Проведен                      КАК ЕстьОшибкиПроведен,
	|	НЕ ЗаказДавальца2_5.Статус В (&ДопустимыеСтатусы) КАК ЕстьОшибкиСтатус,
	|	ИСТИНА                                            КАК РаспоряжениеЗаказ,
	|	ЗаказДавальца2_5.ХозяйственнаяОперация            КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|ГДЕ
	|	ЗаказДавальца2_5.Ссылка В (&МассивСсылок)
	|	И (НЕ ЗаказДавальца2_5.Проведен ИЛИ НЕ ЗаказДавальца2_5.Статус В (&ДопустимыеСтатусы))";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.УстановитьПараметр(
		"ДопустимыеСтатусы",
		Документы.ЗаказДавальца2_5.ДопустимыеСтатусыВводаНаОсновании(Метаданные.Документы.ОтчетДавальцу2_5.Имя));
		
	Запрос.УстановитьПараметр(
		"Склад",
		?(ЗначениеЗаполнено(СвойстваЗаказов) И СвойстваЗаказов.Свойство("Склад"),
			СвойстваЗаказов.Склад,
			Справочники.Склады.ПустаяСсылка()));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Отказ = Ложь;
	
	Если МассивСсылок.Количество() > 1 Тогда
	
		ПоляПроверки = Новый Структура;
		ПоляПроверки.Вставить("ЕстьОтличияПартнер",                 НСтр("ru = 'Партнер';
																		|en = 'Partner'"));
		ПоляПроверки.Вставить("ЕстьОтличияКонтрагент",              НСтр("ru = 'Контрагент';
																		|en = 'Counterparty'"));
		ПоляПроверки.Вставить("ЕстьОтличияОрганизация",             НСтр("ru = 'Организация';
																		|en = 'Company'"));
		ПоляПроверки.Вставить("ЕстьОтличияСклад",                   НСтр("ru = 'Склад';
																		|en = 'Warehouse'"));
		ПоляПроверки.Вставить("ЕстьОтличияПодразделение",           НСтр("ru = 'Подразделение';
																		|en = 'Business unit'"));
		ПоляПроверки.Вставить("ЕстьОтличияДоговор",                 НСтр("ru = 'Договор';
																		|en = 'Contract'"));
		ПоляПроверки.Вставить("ЕстьОтличияВалютаВзаиморасчетов",    НСтр("ru = 'Валюта взаиморасчетов';
																		|en = 'AR/AP currency'"));
		ПоляПроверки.Вставить("ЕстьОтличияНалогообложениеНДС",      НСтр("ru = 'Налогообложение НДС';
																		|en = 'VAT taxation'"));
		ПоляПроверки.Вставить("ЕстьОтличияНаправлениеДеятельности", НСтр("ru = 'Направление деятельности';
																		|en = 'Line of business'"));
		ПоляПроверки.Вставить("ЕстьОтличияЦенаВключаетНДС",         НСтр("ru = 'Цена включает НДС';
																		|en = 'Price includes VAT'"));
		ПоляПроверки.Вставить("ЕстьОтличияСтавкаНДС",               НСтр("ru = 'Ставка НДС';
																		|en = 'VAT rate'"));
		ПоляПроверки.Вставить("ЕстьОтличияСделка",                  НСтр("ru = 'Сделка';
																		|en = 'Sales opportunity'"));
		
		Для каждого Поле Из ПоляПроверки Цикл
			
			Если Не ВыборкаШапка[Поле.Ключ] Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'У выделенных распоряжений отличается поле ""%1""';
								|en = 'The ""%1"" field of selected references differs.'"), Поле.Значение),,,, Отказ);
			
		КонецЦикла;
		
		Если Отказ Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Ввод одного отчета давальцу на основании выделенных распоряжений невозможен';
					|en = 'Cannot generate one ""Consumption report — Subcontracting services delivered"" based on the selected references'"),,,,
				Отказ);
			
		КонецЕсли;
	
	КонецЕсли;
	
	РезультатОшибки = МассивРезультатов[1];
	Если Не Отказ И Не РезультатОшибки.Пустой() Тогда
		
		ВыборкаОшибки = РезультатОшибки.Выбрать();
		Пока ВыборкаОшибки.Следующий() Цикл
			
			Если ВыборкаОшибки.ЕстьОшибкиПроведен Тогда
				
				ТекстОшибки = НСтр("ru = 'Документ %1 не проведен.
										 |Ввод на основании непроведенного документа запрещен.';
										 |en = 'The %1 document is not posted.
										 |Cannot generate from an unposted document.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ВыборкаОшибки.Заказ);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
				
			КонецЕсли;
			
			Если ВыборкаОшибки.ЕстьОшибкиСтатус Тогда
				
				ТекстОшибки = НСтр("ru = 'Документ %1 находится в статусе ""%2"".
										 |Ввод на основании разрешен только в статусах ""К производству"", ""К отгрузке"", ""Закрыт"".';
										 |en = 'The %1 document has the ""%2"" status.
										 |Generation is allowed only for the ""For production"", ""To ship"", and ""Closed"" statuses.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ВыборкаОшибки.Заказ, ВыборкаОшибки.Статус);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	РеквизитыШапки = Неопределено;
	
	Если Не Отказ Тогда
		
		РеквизитыШапки = Новый Структура;
		РеквизитыШапки.Вставить("Партнер",					 ВыборкаШапка.Партнер);
		РеквизитыШапки.Вставить("Контрагент",				 ВыборкаШапка.Контрагент);
		РеквизитыШапки.Вставить("Договор",					 ВыборкаШапка.Договор);
		РеквизитыШапки.Вставить("Сделка",					 ВыборкаШапка.Сделка);
		РеквизитыШапки.Вставить("Организация",				 ВыборкаШапка.Организация);
		РеквизитыШапки.Вставить("Склад",					 ВыборкаШапка.Склад);
		РеквизитыШапки.Вставить("Подразделение",			 ВыборкаШапка.Подразделение);
		РеквизитыШапки.Вставить("ВалютаВзаиморасчетов",		 ВыборкаШапка.ВалютаВзаиморасчетов);
		РеквизитыШапки.Вставить("НалогообложениеНДС",		 ВыборкаШапка.НалогообложениеНДС);
		РеквизитыШапки.Вставить("НаправлениеДеятельности",	 ВыборкаШапка.НаправлениеДеятельности);
		РеквизитыШапки.Вставить("ЦенаВключаетНДС",			 ВыборкаШапка.ЦенаВключаетНДС);
		РеквизитыШапки.Вставить("БанковскийСчетКонтрагента", ВыборкаШапка.БанковскийСчетКонтрагента);
		РеквизитыШапки.Вставить("БанковскийСчетОрганизации", ВыборкаШапка.БанковскийСчетОрганизации);
		РеквизитыШапки.Вставить("СтавкаНДС",				 ВыборкаШапка.СтавкаНДС);
		РеквизитыШапки.Вставить("УслугаПоПереработке",		 ВыборкаШапка.УслугаПоПереработке);
		
	КонецЕсли;
	
	Возврат РеквизитыШапки;
	
КонецФункции

// Заполняет таблицу по остаткам заказов
//
// Параметры:
//  ДанныеОтбора        - Структура - поля, по которым будут отобраны остатки заказов для заполнения
//  Таблица             - ДанныеФормыКоллекция - таблица продукции, в которую будут помещены остатки заказов
//  МассивЗаказов       - Массив - заказы, по которым будут отобраны остатки
//	ПараметрыЗаполнения - Структура - параметры заполнения.
//
Процедура ЗаполнитьПоОстаткамЗаказов(ДанныеОтбора, Таблица, МассивЗаказов, ПараметрыЗаполнения) Экспорт
	
	ОтображатьСообщение = Ложь;
	
	Если ПараметрыЗаполнения.Свойство("ОтображатьСообщение") Тогда 
		ОтображатьСообщение = ПараметрыЗаполнения.ОтображатьСообщение;
	КонецЕсли;
	
	ПроверятьПорядокРасчетов = Истина;
	
	Если ПараметрыЗаполнения.Свойство("ПроверятьПорядокРасчетов") Тогда 
		ПроверятьПорядокРасчетов = ПараметрыЗаполнения.ПроверятьПорядокРасчетов;
	КонецЕсли;
	
	РезультатЗапросаПоОстаткамЗаказов = ПолучитьРезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, МассивЗаказов);
	ВГраница = РезультатЗапросаПоОстаткамЗаказов.Количество() - 1;
	
	Если РезультатЗапросаПоОстаткамЗаказов[ВГраница].Пустой() Тогда
		
		Если ОтображатьСообщение
			И Не РезультатЗапросаПоОстаткамЗаказов[ВГраница - 1].Пустой() Тогда
			ВызватьИсключение НСтр("ru = 'Нет товаров, доступных для оформления.
										|Необходимо установить действие ""Отгрузить"" для обеспеченных строк.';
										|en = 'There are no available goods to register.
										|Specify the ""Ship"" action for supplied lines.'");
		ИначеЕсли ОтображатьСообщение Тогда
			ВызватьИсключение НСтр("ru = 'Нет товаров, доступных для оформления.';
									|en = 'There are no available goods to register.'");
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивЗаказовДавальцев = Новый Массив;
	МассивПорядковРасчетов = Новый Массив;
	
	ВыборкаПоОстаткам = РезультатЗапросаПоОстаткамЗаказов[ВГраница].Выбрать();
	Пока ВыборкаПоОстаткам.СледующийПоЗначениюПоля("ЗаказДавальца") Цикл
		МассивЗаказовДавальцев.Добавить(ВыборкаПоОстаткам.ЗаказДавальца);
		Если ПроверятьПорядокРасчетов
			И ЗначениеЗаполнено(ВыборкаПоОстаткам.ПорядокРасчетов)
			И МассивПорядковРасчетов.Найти(ВыборкаПоОстаткам.ПорядокРасчетов) = Неопределено Тогда
			МассивПорядковРасчетов.Добавить(ВыборкаПоОстаткам.ПорядокРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаказов = Неопределено
		И ПроверятьПорядокРасчетов 
		И МассивПорядковРасчетов.Количество() > 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У найденных заказов отличается поле ""Порядок расчетов""';
													|en = 'The ""Payment terms"" field data is different for the found orders'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказовДавальцев", МассивЗаказовДавальцев);
	Запрос.УстановитьПараметр("ВалютаДокумента",        ДанныеОтбора.Валюта);
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ)                  КАК Дата,
	|	ТаблицаЗаказов.Валюта                                     КАК Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС                            КАК ЦенаВключаетНДС,
	|	ТаблицаЗаказов.СтавкаНДС                                  КАК СтавкаНДС,
	|	ТаблицаЗаказов.Организация.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	ТаблицаЗаказов.Ссылка                                     КАК ЗаказДавальца,
	|	ТаблицаЗаказов.Валюта <> &ВалютаДокумента                 КАК ПересчитатьВВалютуДокумента
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В(&МассивЗаказовДавальцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ)                  КАК Дата,
	|	ТаблицаЗаказов.Валюта                                     КАК Валюта,
	|	ТаблицаЗаказов.Организация.ВалютаРегламентированногоУчета КАК БазоваяВалюта
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В(&МассивЗаказовДавальцев)
	|	И ТаблицаЗаказов.Валюта <> &ВалютаДокумента";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатРеквизитыЗаказов = МассивРезультатов[0];
	РеквизитыЗаказов          = РезультатРеквизитыЗаказов.Выбрать();
	
	РезультатВыборка          = МассивРезультатов[1];
		
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",          Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("БазоваяВалюта",   Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",            Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЧислитель",   Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЗнаменатель", Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Индексы.Добавить("Валюта, БазоваяВалюта, Дата");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Валюты      = Новый Массив;
	
	Выборка = РезультатВыборка.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрока,
			РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата, Выборка.БазоваяВалюта));
		
		Если Валюты.Найти(Выборка.БазоваяВалюта) = Неопределено Тогда
			
			НоваяСтрока = ТаблицаКурсовВалют.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ДанныеОтбора.Валюта, ТекущаяДата, Выборка.БазоваяВалюта));
			
			Валюты.Добавить(Выборка.БазоваяВалюта);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаПоОстаткам.Сбросить();
	Пока ВыборкаПоОстаткам.Следующий() Цикл
		
		ПересчитатьСуммы = Не ВыборкаПоОстаткам.Количество = ВыборкаПоОстаткам.КоличествоВЗаказе;
		
		ИсключитьСвойства = Неопределено;
		Если ПересчитатьСуммы Тогда
			// Если необходимо пересчитать суммы, то перечисленные реквизиты будут пересчитаны на основе суммы взаиморасчетов.
			ИсключитьСвойства = "Сумма, СуммаНДС";
		КонецЕсли;
		
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоОстаткам,, ИсключитьСвойства);
		
		Если ПересчитатьСуммы Тогда
			СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		РеквизитыЗаказов.Сбросить();
		ЗаказНайден = РеквизитыЗаказов.НайтиСледующий(СтрокаТаблицы.ЗаказДавальца, "ЗаказДавальца");
		
		Если ЗаказНайден
			И РеквизитыЗаказов.ПересчитатьВВалютуДокумента Тогда
			
			ПараметрыОтбора = Новый Структура("Валюта, БазоваяВалюта, Дата");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, РеквизитыЗаказов);
			
			КурсВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
			
			ПараметрыОтбора.Валюта = ДанныеОтбора.Валюта;
			ПараметрыОтбора.Дата   = ТекущаяДата;
			КурсНовойВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
			
			Если КурсВалюты.Количество() = 1
				И КурсНовойВалюты.Количество() = 1 Тогда
				
				СтрокаТаблицы.Цена =
					РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(СтрокаТаблицы.Цена, КурсВалюты[0], КурсНовойВалюты[0]);
				
				СтрокаТаблицы.СуммаСНДС =
					РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(СтрокаТаблицы.СуммаСНДС, КурсВалюты[0], КурсНовойВалюты[0]);
				
				ПересчитатьСуммы = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаказНайден И ПересчитатьСуммы Тогда
			
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(
				СтрокаТаблицы,
				РеквизитыЗаказов.ЦенаВключаетНДС,
				Ложь,
				Ложь,
				РеквизитыЗаказов.ПересчитатьВВалютуДокумента,,
				РеквизитыЗаказов.СтавкаНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одного отчета.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5") Тогда
		
		Возврат "Организация,
				|Партнер,
				|Контрагент,
				|Договор,
				|Склад,
				|Валюта,
				|Сделка,
				|СтавкаНДС,
				|НалогообложениеНДС,
				|ПорядокРасчетов,
				|НаправлениеДеятельности";
		
	Иначе
		
		Возврат "Ссылка, Договор";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НаправлениеДеятельности

// Возвращает порядок обработки документа при изменении направления деятельности
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//
// Возвращаемое значение:
// 	Структура - см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
//
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработки = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработки.ИменаТабличныхЧастейДляЗаполненияНазначения = "Продукция";
	ПорядокОбработки.УсловияОбработкиСтрок.Вставить(
		"Продукция",
		НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры,КодСтроки"));
	
	Возврат ПорядокОбработки;
	
КонецФункции

#КонецОбласти

#Область ПроводкиПоРеглУчету

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ОтчетДавальцу2_5Локализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса временной таблицы.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ОтчетДавальцу2_5Локализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Округление

// Возвращает параметры для округления
// 
// Возвращаемое значение:
//  см. НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества
// 
Функция ПараметрыОкругления() Экспорт
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ                          = "Продукция";
	ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
	
	Возврат ПараметрыПроверки;

КонецФункции

#КонецОбласти

#Область Прочее

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ОтчетДавальцу2_5 - Ссылка на документа.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	ДанныеРеквизитов = Новый Структура;
	ДанныеРеквизитов.Вставить("Дата",                    Дата(1, 1, 1));
	ДанныеРеквизитов.Вставить("ПоЗаказу",                Ложь);
	ДанныеРеквизитов.Вставить("Организация",             Справочники.Организации.ПустаяСсылка());
	ДанныеРеквизитов.Вставить("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
	ДанныеРеквизитов.Вставить("Контрагент",              Справочники.Контрагенты.ПустаяСсылка());
	ДанныеРеквизитов.Вставить("Договор",                 Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ДанныеРеквизитов.Вставить("ВалютаВзаиморасчетов",    Справочники.Валюты.ПустаяСсылка());
	ДанныеРеквизитов.Вставить("Курс",                    1);
	ДанныеРеквизитов.Вставить("Кратность",               1);
	ДанныеРеквизитов.Вставить("СуммаДокумента",          0);
	ДанныеРеквизитов.Вставить("СуммаВзаиморасчетов",     0);
	ДанныеРеквизитов.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	ДанныеРеквизитов.Вставить("ПорядокРасчетов",         Перечисления.ПорядокРасчетов.ПустаяСсылка());
	ДанныеРеквизитов.Вставить("ХозяйственнаяОперация",   Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ОтчетПоЗаказам          КАК ПоЗаказу,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Партнер                 КАК Партнер,
	|	ДанныеДокумента.Контрагент              КАК Контрагент,
	|	ДанныеДокумента.Договор                 КАК Договор,
	|	ДанныеДокумента.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.КурсЧислитель           КАК Курс,
	|	ДанныеДокумента.КурсЗнаменатель         КАК Кратность,
	|	ДанныеДокумента.СуммаДокумента          КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Проведен
	|			ТОГДА ДанныеДокумента.СуммаВзаиморасчетов
	|		ИНАЧЕ 0
	|	КОНЕЦ                                   КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ПорядокРасчетов         КАК ПорядокРасчетов
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитов, Выборка);
		
	КонецЕсли;
	
	Возврат ДанныеРеквизитов;

КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
//	Структура - Структура параметров отчета.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",        1);
	СтруктураСостояние.Вставить("ВыводитьТаблицуУслугДавальцуКОформлению", 2);
	СтруктураСостояние.Вставить("ЭтоНакладная",                            Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",          Ложь);
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",                     "Продукция");
	СтруктураСостояние.Вставить("ИмяРегистраОтгрузкаУслуг",                "ЗаказыКлиентов");
	СтруктураСостояние.Вставить(
		"СтруктураДопЗапросов",
		Новый Структура("ТаблицаГрафикОплатыПоНакладной", ТекстЗапросаТаблицаРасчетыСКлиентамиСостояниеДокументов()));
	
	Возврат СтруктураСостояние
	
КонецФункции

// Возвращает шаблон назначения
// 
// Параметры:
//  Объект        - ДокументОбъект.ОтчетДавальцу2_5, ДанныеФормыСтруктура - 
//  ЗаказДавальца - ДокументСсылка.ЗаказДавальца2_5, Неопределено - 
// 
// Возвращаемое значение:
//  Структура - см. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначения(Объект, ЗаказДавальца = Неопределено) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(
																	Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ШаблонНазначения.Партнер       = Объект.Партнер;
	ШаблонНазначения.Договор       = Объект.Договор;
	ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое2_5;
	
	Если ЗначениеЗаполнено(ЗаказДавальца)
	   И Константы.ВариантОбособленияПродукцииПриПриемеВПереработку.Получить() =
										Перечисления.ВариантыОбособленияПриПриемеВПереработку.ЗаказДавальца Тогда
		
		ШаблонНазначения.Заказ     = ЗаказДавальца;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#Область УчетНДС

// Инициализирует параметры заполнения налогообложения НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ОтчетДавальцу2_5, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи
//
Функция ПараметрыЗаполненияНалогообложенияНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	ПараметрыЗаполнения.Организация				= Объект.Организация;
	ПараметрыЗаполнения.Дата					= Объект.Дата;
	ПараметрыЗаполнения.Договор					= Объект.Договор;
	ПараметрыЗаполнения.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.ОтчетДавальцу			= Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Инициализирует параметры регистрации счетов-фактур (выданных)
//
// Параметры:
//  Объект		- ДокументОбъект.ОтчетДавальцу2_5, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  см. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных
//
Функция ПараметрыРегистрацииСчетовФактурВыданных(Объект) Экспорт
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
	ПараметрыРегистрации.Ссылка				  = Объект.Ссылка;
	ПараметрыРегистрации.Дата				  = Объект.Дата;
	ПараметрыРегистрации.Организация		  = Объект.Организация;
	ПараметрыРегистрации.Контрагент			  = Объект.Контрагент;
	ПараметрыРегистрации.НалогообложениеНДС   = Объект.НалогообложениеНДС;
	ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область Взаиморасчеты

// Параметры взаиморасчеты.
// 
// Параметры:
// 	ДанныеЗаполнения - ДокументОбъект, СправочникОбъект, Структура, ДанныеФормыСтруктура - Объект или коллекция для
//              расчета параметров взаиморасчетов.
//
// Возвращаемое значение:
// 	Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма - Массив параметров функций механизма взаиморасчетов
//
Функция ПараметрыВзаиморасчеты(ДанныеЗаполнения = Неопределено) Экспорт
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	СтруктураПараметров.ЭтоПродажаЗакупка               = Истина;
	СтруктураПараметров.ТипРасчетов                     = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	СтруктураПараметров.ВалютаВзаиморасчетов            = "Объект.ВалютаВзаиморасчетов";
	СтруктураПараметров.СуммаВзаиморасчетов             = "Объект.СуммаВзаиморасчетов";
	СтруктураПараметров.СуммаВзаиморасчетовПоТаре       = "";
	
	СтруктураПараметров.КурсЧислитель                   = "Объект.КурсЧислитель";
	СтруктураПараметров.КурсЗнаменатель                 = "Объект.КурсЗнаменатель";
	
	СтруктураПараметров.ПутьКДаннымТЧ                   = "Объект.Продукция";
	СтруктураПараметров.ИмяРеквизитаТЧЗаказ             = "ЗаказДавальца";
	СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа = "Объект.РасшифровкаПлатежа";
	СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты        = "Объект.ЭтапыГрафикаОплаты";
	СтруктураПараметров.НадписьЭтапыОплаты              = "Форма.НадписьЭтапыОплаты";
	СтруктураПараметров.ИсточникСуммТабличнаяЧасть      = Истина;
	
	СтруктураПараметров.Соглашение                      = "";
	СтруктураПараметров.Менеджер                        = "Объект.Менеджер";
	СтруктураПараметров.НакладнаяПоЗаказам              = "Объект.ОтчетПоЗаказам";
	СтруктураПараметров.ЗаказОснование                  = "Объект.ЗаказДавальца";
	СтруктураПараметров.ИдентификаторПлатежа            = "";
	СтруктураПараметров.ГрафикОплаты                    = "Объект.ГрафикОплаты";
	
	СтруктураПараметров.ЭлементыФормы.НадписьВалюты                    = "НадписьВалюты";
	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы                     = "ДекорацияЭтапыОплаты";
	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты                   = "Расчеты";
	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты                      = "ЗачетОплаты";
	СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ            = "ПродукцияСуммаВзаиморасчетов";
	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиТекст    = "ТекстОстатокДопустимогоКредита";
	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиКартинка = "КартинкаОтгрузкаЗапрещена";
	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета           = "ГруппаФинансовогоУчета";
	СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности          = "НаправлениеДеятельности";
	
	СтруктураПараметров.СуммаДокументаФорма                            = "Форма.СуммаВсего";
	
	СтруктураПараметров.ВозможнаНакладнаяПоНесколькимЗаказам =
		ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам2_5");
	
	СтруктураПараметров.ОбъектРасчетов                       = "Объект.Продукция.ОбъектРасчетов";
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат "Склад";
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ОтчетДавальцу2_5";
	ПараметрыУказанияСерий.ИмяТЧТовары      = "Продукция";
	ПараметрыУказанияСерий.ИмяТЧСерии       = "Продукция";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
	ПараметрыУказанияСерий.ЭтоНакладная         = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_ЗаказДавальца");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_КодСтроки");

	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка, Неопределено - ссылка на распоряжение для выполнения складской операции.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Если ЗначенияПолейДляОпределенияРаспоряжения.Товары_КодСтроки <> 0 Тогда 
		Возврат ЗначенияПолейДляОпределенияРаспоряжения.Товары_ЗаказДавальца;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
//  Возвращаемое значение:
//   Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.Склад               КАК Склад,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Количество          КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ                      КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ПолитикиУчетаСерий.Склад = Товары.Склад
	|		 И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки         КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ВыборСтатейИАналитик

// Возвращает параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
// 	Массив из см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатей = Новый Массив;
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным				   = "Объект.Продукция";
	ПараметрыВыбора.Статья					   = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи				   = "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиРасходов		   = Истина;
	ПараметрыВыбора.АналитикаРасходов		   = "АналитикаРасходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ПродукцияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ПродукцияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ПродукцияАналитикаАктивовПассивов");
	
	ПараметрыВыбораСтатей.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатей;
	
КонецФункции

#КонецОбласти

#Область НастройкаСчетовУчета

// Возвращает параметры настройки счетов учета в документе.
// 
// Возвращаемое значение:
// 	Массив из см. НастройкаСчетовУчетаСервер.ПараметрыНастройки
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	ПараметрыНастроек = Новый Массив;
	
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	
	ПараметрыНастройки.ДоступностьПоОперации = Истина;
	ПараметрыНастройки.ТипСтатьи   = "ТипСтатьи";
	ПараметрыНастройки.ПутьКДанным = "Объект.Продукция";
	
	ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("ПродукцияПредставлениеОтраженияОперации");
	
	ПараметрыНастроек.Добавить(ПараметрыНастройки);
	
	Возврат ПараметрыНастроек;
	
КонецФункции

#КонецОбласти

#Область ОснованиеДляПечати

// Возвращает структуру основания по данными документа
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ОтчетДавальцу2_5 - Объект документа, по которому необходимо получить текст основания.
//
// Возвращаемое значение:
//	Структура - Структура с наименованием, датой и номером основания.
//
Функция СтруктураОснованияДляПечати(Объект) Экспорт
	
	Возврат СтруктураОснования(Объект, Объект.ПорядокРасчетов);
	
КонецФункции

// Возвращает таблицу значений по умолчанию для реквизита "Основание"
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ОтчетДавальцу2_5 - Объект документа, по которому необходимо получить список выбора.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений с реквизитами оснований.
//
Функция ТаблицаОснованийДляПечати(Объект) Экспорт
	
	ТаблицаОснований = Новый ТаблицаЗначений;
	ТаблицаОснований.Колонки.Добавить("Основание",      Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ТаблицаОснований.Колонки.Добавить("ОснованиеДата",  Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата))); 
	ТаблицаОснований.Колонки.Добавить("ОснованиеНомер", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(128)));
	
	СтруктураОснования = СтруктураОснования(Объект, Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
		
		Если ЗначениеЗаполнено(СтруктураОснования.ОснованиеДата) И ЗначениеЗаполнено(СтруктураОснования.ОснованиеНомер) Тогда
			ТекстРасширенный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 № %2 от %3';
						|en = '%1 #%2, %3'"),
					СтруктураОснования.Основание, СтруктураОснования.ОснованиеНомер, Формат(СтруктураОснования.ОснованиеДата, "ДЛФ=DD"));
			ДобавленнаяСтрока = ТаблицаОснований.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
			ДобавленнаяСтрока.Основание = ТекстРасширенный;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОснования = СтруктураОснования(Объект, Перечисления.ПорядокРасчетов.ПоЗаказам);
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
	КонецЕсли;
	
	Возврат ТаблицаОснований;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                                 КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация                                  КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                                            КАК Организация,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета             КАК ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.Партнер                                                КАК Партнер,
	|	ДанныеДокумента.Контрагент                                             КАК Контрагент,
	|	ДанныеДокумента.Дата                                                   КАК Период,
	|	ДанныеДокумента.Номер                                                  КАК Номер,
	|	ДанныеДокумента.ЗаказДавальца                                          КАК ЗаказДавальца,
	|	ДанныеДокумента.Валюта                                                 КАК Валюта,
	|	ДанныеДокумента.Подразделение                                          КАК Подразделение,
	|	ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров         КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.Сделка                                                 КАК Сделка,
	|	ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|	ДанныеДокумента.ЦенаВключаетНДС                                        КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.ВалютаВзаиморасчетов                                   КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ОтчетПоЗаказам                                         КАК ОтчетПоЗаказам,
	|	ДанныеДокумента.ФормаОплаты                                            КАК ФормаОплаты,
	|	ДанныеДокумента.Договор                                                КАК Договор,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Договор)                                 КАК ДоговорПредставление,
	|	ДанныеДокумента.Менеджер                                               КАК Менеджер,
	|	ДанныеДокумента.Автор                                                  КАК Автор,
	|	ДанныеДокумента.Комментарий                                            КАК Комментарий,
	|	ДанныеДокумента.НалогообложениеНДС                                     КАК НалогообложениеНДС,
	|	ДанныеДокумента.ГруппаФинансовогоУчета                                 КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.СтавкаНДС                                              КАК СтавкаНДС,
	|	ДанныеДокумента.УслугаПоПереработке                                    КАК Содержание,
	|	ДанныеДокумента.СуммаДокумента                                         КАК СуммаДокумента,
	|	ДанныеДокумента.Проведен                                               КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                                        КАК ПометкаУдаления,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                  КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                  КАК РасчетыПоНакладным,
	|	
	|	ДанныеДокумента.Договор.ДопустимаяСуммаЗадолженности                   КАК ДопустимаяСуммаЗадолженности,
	|	ДанныеДокумента.НаправлениеДеятельности                                КАК НаправлениеДеятельности,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                  КАК ГрафикИсполненияВДоговоре
	|	
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
						Реквизиты.Валюта, Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период, Реквизиты.Организация);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",      Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	
	Запрос.УстановитьПараметр(
		"АналитикаУчетаПоПартнерам",
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
		
	Запрос.УстановитьПараметр(
		"НастройкаХозяйственнойОперации",
		Справочники.НастройкиХозяйственныхОпераций.ОтчетДавальцу2_5);
	
	Запрос.УстановитьПараметр(
		"ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
		
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	
	ИнформацияПоДоговору = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ШаблонСтроки = "ru = 'По договору ""%1""';
						|en = 'Under the ""%1"" contract'"; // @НСтр
		ИнформацияПоДоговору =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.ДоговорПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	Запрос.УстановитьПараметр(
		"НазначениеБезЗаказа",
		Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения(Запрос.Параметры)));
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеАналитик.МестоХранения     КАК МестоХранения,
	|	ДанныеАналитик.Номенклатура      КАК Номенклатура,
	|	ДанныеАналитик.Характеристика    КАК Характеристика,
	|	ДанныеАналитик.Серия             КАК Серия,
	|	ДанныеАналитик.Назначение        КАК Назначение,
	|	ДанныеАналитик.СтатьяКалькуляции КАК СтатьяКалькуляции
	|ИЗ
	|	(
	// Аналитики без назначений
	|	ВЫБРАТЬ
	|		ТаблицаУслуги.АналитикаУчетаНоменклатуры.МестоХранения     КАК МестоХранения,
	|		ТаблицаУслуги.АналитикаУчетаНоменклатуры.Номенклатура      КАК Номенклатура,
	|		ТаблицаУслуги.АналитикаУчетаНоменклатуры.Характеристика    КАК Характеристика,
	|		ТаблицаУслуги.АналитикаУчетаНоменклатуры.Серия             КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)               КАК Назначение,
	|		ТаблицаУслуги.АналитикаУчетаНоменклатуры.СтатьяКалькуляции КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаУслуги
	|	ГДЕ
	|		ТаблицаУслуги.Ссылка = &Ссылка
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	) КАК ДанныеАналитик
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ДанныеАналитик.МестоХранения    = Аналитика.МестоХранения
	|	И ДанныеАналитик.Номенклатура      = Аналитика.Номенклатура
	|	И ДанныеАналитик.Характеристика    = Аналитика.Характеристика
	|	И ДанныеАналитик.Серия             = Аналитика.Серия
	|	И ДанныеАналитик.Назначение        = Аналитика.Назначение
	|	И ДанныеАналитик.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Реквизиты.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВтПродукция(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПродукция";
	
	СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса);
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос.Параметры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПродукции.Ссылка                 КАК Ссылка,
	|	ТаблицаПродукции.НомерСтроки            КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО                            КАК ВидЗапасов,
	|	ТаблицаПродукции.ЗаказДавальца          КАК ЗаказДавальца,
	|	ТаблицаПродукции.Номенклатура           КАК Номенклатура,
	|	ТаблицаПродукции.Характеристика         КАК Характеристика,
	|	ТаблицаПродукции.Назначение             КАК Назначение,
	|	ТаблицаПродукции.КодСтроки              КАК КодСтроки,
	|	ТаблицаПродукции.НастройкаСчетовУчета   КАК НастройкаСчетовУчета,
	|	ТаблицаПродукции.ИдентификаторСтроки    КАК ИдентификаторСтроки,
	|	ТаблицаПродукции.ИдентификаторСтроки    КАК ИдентификаторФинЗаписи,
	|	ТаблицаПродукции.Количество             КАК Количество,
	|	ТаблицаПродукции.Сумма                  КАК Сумма,
	|	ТаблицаПродукции.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаПродукции.СуммаСНДС              КАК СуммаСНДС,
	|	
	|	ЕСТЬNULL(Суммы.СуммаСНДСУпр, 0)         КАК СуммаСНДСУпр,
	|	ЕСТЬNULL(Суммы.СуммаСНДСРегл, 0)        КАК СуммаСНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0)       КАК СуммаБезНДСУпр,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0)      КАК СуммаБезНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, 0)         КАК СуммаНДСРегл,
	|	
	|	&СтавкаНДС                              КАК СтавкаНДС,
	|	ТаблицаПродукции.СуммаВзаиморасчетов    КАК СуммаВзаиморасчетов,
	|	0                                       КАК СуммаРучнойСкидки,
	|	0                                       КАК СуммаАвтоматическойСкидки,
	|	ТаблицаПродукции.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	АналитикиБезНазначения.КлючАналитики    КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитики.МестоХранения                 КАК Склад,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам
	|			И &ОбособленныйУчетТоваровПоСделке
	|				ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|			И &ВариантОбособленногоУчетаТоваров =
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|				ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|			И &ВариантОбособленногоУчетаТоваров =
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                   КАК АналитикаФинансовогоУчета,
	|	ТаблицаПродукции.СписатьНаРасходы       КАК СписатьНаРасходы,
	|	ТаблицаПродукции.ОбъектРасчетов         КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ВтПродукция
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаПродукции
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитики
	|		ПО Аналитики.Ссылка = ТаблицаПродукции.АналитикаУчетаНоменклатуры
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиБезНазначения
	|	ПО Аналитики.Серия            = АналитикиБезНазначения.Серия
	|	И Аналитики.МестоХранения     = АналитикиБезНазначения.МестоХранения
	|	И Аналитики.Номенклатура      = АналитикиБезНазначения.Номенклатура
	|	И Аналитики.Характеристика    = АналитикиБезНазначения.Характеристика
	|	И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикиБезНазначения.Назначение
	|	И Аналитики.СтатьяКалькуляции = АналитикиБезНазначения.СтатьяКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммыДокументовВВалютахУчета КАК Суммы
	|	ПО Суммы.Ссылка              = ТаблицаПродукции.Ссылка
	|	 И Суммы.ИдентификаторСтроки = ТаблицаПродукции.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаПродукции.Ссылка = &Ссылка
	|	И ТаблицаПродукции.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Ссылка                 КАК Ссылка,
	|	ТаблицаПродукции.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаПродукции.ВидЗапасов             КАК ВидЗапасов,
	|	ТаблицаПродукции.ЗаказДавальца          КАК ЗаказДавальца,
	|	Аналитики.Номенклатура                  КАК Номенклатура,
	|	Аналитики.Характеристика                КАК Характеристика,
	|	Аналитики.Назначение                    КАК Назначение,
	|	0                                       КАК КодСтроки,
	|	ТаблицаПродукции.НастройкаСчетовУчета   КАК НастройкаСчетовУчета,
	|	ТаблицаПродукции.ИдентификаторСтроки    КАК ИдентификаторСтроки,
	|	ТаблицаПродукции.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ТаблицаПродукции.Количество             КАК Количество,
	|	ТаблицаПродукции.Сумма                  КАК Сумма,
	|	ТаблицаПродукции.СуммаНДС               КАК СуммаНДС,
	|	ТаблицаПродукции.СуммаСНДС              КАК СуммаСНДС,
	|	
	|	ЕСТЬNULL(Суммы.СуммаСНДСУпр, 0)         КАК СуммаСНДСУпр,
	|	ЕСТЬNULL(Суммы.СуммаСНДСРегл, 0)        КАК СуммаСНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0)       КАК СуммаБезНДСУпр,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0)      КАК СуммаБезНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, 0)         КАК СуммаНДСРегл,
	|	
	|	&СтавкаНДС                              КАК СтавкаНДС,
	|	ТаблицаПродукции.СуммаВзаиморасчетов    КАК СуммаВзаиморасчетов,
	|	0                                       КАК СуммаРучнойСкидки,
	|	0                                       КАК СуммаАвтоматическойСкидки,
	|	ТаблицаПродукции.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	АналитикиБезНазначения.КлючАналитики    КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитики.МестоХранения                 КАК Склад,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам
	|			И &ОбособленныйУчетТоваровПоСделке
	|				ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|			И &ВариантОбособленногоУчетаТоваров =
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|				ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|			И &ВариантОбособленногоУчетаТоваров =
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                   КАК АналитикаФинансовогоУчета,
	|	ТаблицаПродукции.СписатьНаРасходы       КАК СписатьНаРасходы,
	|	ТаблицаПродукции.ОбъектРасчетов         КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаПродукции
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитики
	|		ПО Аналитики.Ссылка = ТаблицаПродукции.АналитикаУчетаНоменклатуры
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиБезНазначения
	|	ПО Аналитики.Серия            = АналитикиБезНазначения.Серия
	|	И Аналитики.МестоХранения     = АналитикиБезНазначения.МестоХранения
	|	И Аналитики.Номенклатура      = АналитикиБезНазначения.Номенклатура
	|	И Аналитики.Характеристика    = АналитикиБезНазначения.Характеристика
	|	И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикиБезНазначения.Назначение
	|	И Аналитики.СтатьяКалькуляции = АналитикиБезНазначения.СтатьяКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммыДокументовВВалютахУчета КАК Суммы
	|	ПО Суммы.Ссылка              = ТаблицаПродукции.Ссылка
	|	 И Суммы.ИдентификаторСтроки = ТаблицаПродукции.ИдентификаторФинЗаписи
	|ГДЕ
	|	ТаблицаПродукции.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыручкаИСебестоимостьПродаж";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПродукция", ТекстыЗапроса) Тогда
		ТекстЗапросаВтПродукция(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПродукции.НомерСтроки                           КАК НомерСтроки,
	|	&Период                                                КАК Период,
	|	&Подразделение                                         КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТаблицаПродукции.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаПродукции.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                                                  КАК АналитикаУчетаНоменклатуры,
	|	&АналитикаУчетаПоПартнерам                             КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.СписатьНаРасходы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцуСписаниеНаРасходы)
	|		ИНАЧЕ &ХозяйственнаяОперация КОНЕЦ                 КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|		ИНАЧЕ &НалогообложениеНДС
	|	КОНЕЦ                                                  КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)              КАК ТипЗапасов,
	|	НЕОПРЕДЕЛЕНО                                           КАК ВидЗапасов,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|	КОНЕЦ КАК РазделУчета,
	|	ТаблицаПродукции.АналитикаФинансовогоУчета             КАК АналитикаФинансовогоУчета,
	|	&НалогообложениеНДС                                    КАК ВидДеятельностиНДС,
	|
	|	&Менеджер                                              КАК Менеджер,
	|	0                                                      КАК Стоимость,
	|	ТаблицаПродукции.Количество                            КАК Количество,
	|
	|	ВЫБОР КОГДА &ОтчетПоЗаказам  И ТаблицаПродукции.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|		ТОГДА ТаблицаПродукции.ЗаказДавальца
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ 												   КАК ЗаказКлиента,
	|
	|	ТаблицаПродукции.СуммаСНДСУпр                          КАК СуммаВыручки,
	|	ТаблицаПродукции.СуммаБезНДСУпр                        КАК СуммаВыручкиБезНДС,
	|	ТаблицаПродукции.СуммаБезНДСРегл                       КАК СуммаВыручкиРегл,
	|	ТаблицаПродукции.СуммаСНДСРегл                         КАК СуммаВыручкиСНДСРегл,
	|	0                                                      КАК СуммаРучнойСкидки,
	|	0                                                      КАК СуммаАвтоматическойСкидки,
	|
	|	ТаблицаПродукции.Склад                                 КАК Склад,
	|	&Договор                                               КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                           КАК Соглашение,
	|
	|	&НаправлениеДеятельности                               КАК НаправлениеДеятельностиКонтрагента,
	|	ТаблицаПродукции.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельностиНоменклатуры,
	|
	|	&ВалютаВзаиморасчетов                                  КАК ВалютаВзаиморасчетов,
	|	ТаблицаПродукции.СуммаВзаиморасчетов                   КАК СуммаВВалютеВзаиморасчетов,
	|
	|	ТаблицаПродукции.СуммаВзаиморасчетов
	|	- ВЫБОР
	|		КОГДА ТаблицаПродукции.СуммаСНДС <> 0
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаПродукции.СуммаВзаиморасчетов
	|						   * ТаблицаПродукции.СуммаНДС
	|						   / ТаблицаПродукции.СуммаСНДС КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                  КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	&Валюта                                                КАК ВалютаДокумента,
	|	ТаблицаПродукции.СуммаСНДС                             КАК СуммаВВалютеДокумента,
	|	ТаблицаПродукции.СуммаСНДС - ТаблицаПродукции.СуммаНДС КАК СуммаБезНДСВВалютеДокумента,
	|
	|	ТаблицаПродукции.Номенклатура                          КАК ИсточникГФУНоменклатуры,
	|	ТаблицаПродукции.ОбъектРасчетов                        КАК ИсточникГФУРасчетов,
	|	
	|	ТаблицаПродукции.ИдентификаторФинЗаписи                КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                        КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтПродукция КАК ТаблицаПродукции
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаПродукции.ЗаказДавальца         КАК ЗаказКлиента,
	|	ТаблицаПродукции.Номенклатура          КАК Номенклатура,
	|	ТаблицаПродукции.Характеристика        КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.СтатусУказанияСерий В (10, 14)
	|			ТОГДА ТаблицаПродукции.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Серия,
	|	ТаблицаПродукции.КодСтроки             КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.Номенклатура.ТипНоменклатуры В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаПродукции.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.КодСтроки = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПродукции.Количество
	|	КОНЕЦ                                  КАК Заказано,
	|	ТаблицаПродукции.Количество            КАК КОформлению,
	|	0                                      КАК КПередаче,
	|	ТаблицаПродукции.СуммаСНДС             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаПродукции
	|ГДЕ
	|	ТаблицаПродукции.Ссылка = &Ссылка
	|	И &ОтчетПоЗаказам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаПродукции.ЗаказДавальца         КАК ЗаказКлиента,
	|	ТаблицаПродукции.Номенклатура          КАК Номенклатура,
	|	ТаблицаПродукции.Характеристика        КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.СтатусУказанияСерий В (10, 14)
	|			ТОГДА ТаблицаПродукции.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Серия,
	|	ТаблицаПродукции.КодСтроки             КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.Номенклатура.ТипНоменклатуры В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаПродукции.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК Склад,
	|	0                                      КАК Заказано,
	|	ТаблицаПродукции.Количество            КАК КОформлению,
	|	0                                      КАК КПередаче,
	|	ТаблицаПродукции.СуммаСНДС             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаПродукции
	|ГДЕ
	|	ТаблицаПродукции.Ссылка = &Ссылка
	|	И &ОтчетПоЗаказам
	|	И ТаблицаПродукции.КодСтроки = 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                                        КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                КАК ВидДвижения,
	|	&Период                                                               КАК Период,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры                         КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                                          КАК Организация,
	|	ТаблицаВидыЗапасов.ВидЗапасов                                         КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                                           КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                                         КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ                                   КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация                                                КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура            КАК Номенклатура,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика          КАК Характеристика,
	|	ЗНАЧЕНИЕ (Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                                        КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                                КАК ВидДвижения,
	|	&Период                                                               КАК Период,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры                         КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                                          КАК Организация,
	|	ТаблицаВидыЗапасов.КорВидЗапасов                                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                                           КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                                         КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ                                   КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация                                                КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура            КАК Номенклатура,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика          КАК Характеристика,
	|	ЗНАЧЕНИЕ (Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата      				КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 	КАК ВидДвижения,
	|	ТаблицаДокумента.Организация            КАК Организация,
	|	ТабличнаяЧасть.Подразделение            КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура           	КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика         	КАК Характеристика,
	|	ТабличнаяЧасть.Назначение             	КАК Назначение,
	|	ТабличнаяЧасть.Количество             	КАК Количество
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5.Продукция КАК ТабличнаяЧасть
	|	ПО ТабличнаяЧасть.Ссылка = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&Партнер                 КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&Договор                 КАК Договор,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО             КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	&Менеджер                КАК Ответственный,
	|	&Автор                   КАК Автор,
	|	&Комментарий             КАК Комментарий,
	|	&Валюта                  КАК Валюта,
	|	&СуммаДокумента          КАК Сумма,
	|	НЕОПРЕДЕЛЕНО             КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	&Период                  КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать           КАК НомерПервичногоДокумента,
	|	&Период                  КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО             КАК Приоритет
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
	"ВЫБРАТЬ
	|	ТабЧасть.Ссылка         КАК Ссылка,
	|	ТабЧасть.Ссылка.Дата    КАК Период,
	|	ТабЧасть.Номенклатура   КАК Номенклатура,
	|	ТабЧасть.Характеристика КАК Характеристика,
	|	ТабЧасть.Подразделение  КАК Склад,
	|	ТабЧасть.Назначение     КАК Назначение,
	|	ТабЧасть.Количество     КАК Количество,
	|	НЕОПРЕДЕЛЕНО            КАК ЗапланированныйРасходРаспределенногоЗапаса,
	|	ИСТИНА                  КАК КонтрольСвободногоОстатка
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТабЧасть
	|ГДЕ
	|	ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И (ТабЧасть.КодСтроки = 0
	|		ИЛИ НЕ ТабЧасть.Ссылка.ОтчетПоЗаказам)
	|";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

Процедура ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры)
	
	#Область КурсыВалютДокумента
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалютДокумента";

	ТекстЗапросаКурсыВалютДокумента = 
		"ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Организация КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцу2_5.ЭтапыГрафикаОплаты КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5 КАК ДанныеДокументаШапка
		|		ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Организация КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцу2_5.РасшифровкаПлатежа КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5 КАК ДанныеДокументаШапка
		|		ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Организация КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцу2_5 КАК ДанныеДокументаШапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.Объект = ДанныеДокументаШапка.Ссылка
		|		И НЕ ОбъектыРасчетов.ПометкаУдаления
		|ГДЕ
		|	ДанныеДокументаШапка.Ссылка В (&Ссылка)
		|
		// Направление деятельности
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Организация КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцу2_5.Продукция КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5 КАК ДанныеДокументаШапка
		|		ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокументаШапка.Ссылка КАК Ссылка,
		|	ДанныеДокументаШапка.Организация КАК Организация,
		|	ДанныеДокументаШапка.Дата КАК ДатаКурса,
		|	(ВЫБОР
		|		КОГДА ДанныеДокументаШапка.ОтчетПоЗаказам
		|			ТОГДА Таблица.ЗаказДавальца.ОбъектРасчетов
		|		КОГДА ДанныеДокументаШапка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|			ТОГДА Таблица.ОбъектРасчетов.Договор.ОбъектРасчетов
		|		ИНАЧЕ Таблица.ОбъектРасчетов
		|	КОНЕЦ) КАК ОбъектРасчетов,
		|	ДанныеДокументаШапка.Валюта КАК ВалютаДокумента,
		|	ДанныеДокументаШапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ОтчетДавальцу2_5.Продукция КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5 КАК ДанныеДокументаШапка
		|		ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)";
		
	ТекстЗапросаКурсыВалютДокумента = ВзаиморасчетыСервер.ПолучитьТаблицуКурсовВалютНаправленийДеятельности(ТекстЗапросаКурсыВалютДокумента);

	ТекстыЗапроса.Добавить(ТекстЗапросаКурсыВалютДокумента, ИмяРегистра);
	
	#КонецОбласти
	
	#Область Продажа
	
	ТекстПродажа = "
	|ВЫБРАТЬ
	|	Таблица.Ссылка                                                 КАК Ссылка,
	|	Таблица.Ссылка.Организация                                     КАК Организация,
	|	Таблица.Ссылка.Партнер                                         КАК Партнер,
	|	
	|	Таблица.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|	Таблица.ДатаПлатежа                                            КАК ДатаПлатежа,
	|	Таблица.Заказ                                                  КАК ЗаказПродажи,
	|	Таблица.Ссылка.ОтчетПоЗаказам                                  КАК НакладнаяПоЗаказам,
	|	Таблица.СуммаВзаиморасчетов                                    КАК СуммаВзаиморасчетов,
	|	0                                                              КАК СуммаВзаиморасчетовПоТаре,
	|	Таблица.СуммаПлатежа                                           КАК Сумма,
	|	
	|	Таблица.Ссылка.ПорядокРасчетов                                 КАК ПорядокРасчетов,
	|	Таблица.Ссылка.Дата                                            КАК ДатаРегистратора,
	|	Таблица.Ссылка.Номер                                           КАК НомерРегистратора,
	|	Таблица.Ссылка.ВалютаВзаиморасчетов                            КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|	Таблица.Ссылка.Дата                                            КАК ДатаКурса,
	|	Таблица.Ссылка.Валюта                                          КАК ВалютаДокумента,
	|	Таблица.ВариантОплаты                                          КАК ВариантОплаты,
	|	Таблица.СверхЗаказа                                            КАК СверхЗаказа,
	|	Неопределено                                                   КАК СвязанныйДокумент
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ЭтапыГрафикаОплаты КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылка)
	|";
	
	#КонецОбласти
	
	#Область УвеличениеПланаОплат
	
	ТекстПланированиеОплат = "
	|ВЫБРАТЬ
	|	Таблица.Ссылка                                                 КАК Ссылка,
	|	Таблица.Ссылка.Организация                                     КАК Организация,
	|	Таблица.Ссылка.Партнер                                         КАК Партнер,
	|	
	|	Таблица.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|	Таблица.Ссылка.Дата                                            КАК ДатаРегистратора,
	|	Таблица.Ссылка.Номер                                           КАК НомерРегистратора,
	|	Таблица.Ссылка.ПорядокРасчетов                                 КАК ПорядокРасчетов,
	|	Таблица.Ссылка.ВалютаВзаиморасчетов                            КАК ВалютаВзаиморасчетов,
	|	Таблица.Ссылка.Валюта                                          КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|	Таблица.Ссылка.ФормаОплаты                                     КАК ФормаОплаты,
	|	
	|	Таблица.ДатаПлатежа                                            КАК ДатаПлатежа,
	|	Таблица.ВариантОплаты                                          КАК ВариантОплаты,
	|	Таблица.СуммаВзаиморасчетов                                    КАК КОплате,
	|		
	|	ВЫБОР
	|		КОГДА Таблица.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                          КАК ИсключатьПриКонтроле,
	|	Таблица.Ссылка.ОтчетПоЗаказам                                  КАК НакладнаяПоЗаказам,
	|	Таблица.Заказ                                                  КАК ЗаказПродажи,
	|	Таблица.СверхЗаказа                                            КАК СверхЗаказа,
	|	Неопределено                                                   КАК СвязанныйДокумент
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ЭтапыГрафикаОплаты КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылка)
	|";
	
	#КонецОбласти
	
	#Область ТекстТовары
	
	ТекстТовары = "
	|ВЫБРАТЬ
	|	Таблица.Ссылка                                                 КАК Ссылка,
	|	Таблица.Ссылка.Организация                                     КАК Организация,
	|	Таблица.Ссылка.Партнер                                         КАК Партнер,
	|	
	|	Таблица.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|	Таблица.Ссылка.Дата                                            КАК ДатаОтгрузки,
	|	Таблица.СуммаВзаиморасчетов                                    КАК СуммаВзаиморасчетов,
	|	0                                                              КАК УвеличитьОтгружается,
	|	Таблица.СуммаВзаиморасчетов                                    КАК УменьшитьОтгружается,
	|	Таблица.СуммаВзаиморасчетов                                    КАК УвеличитьКОтгрузке,
	|	Таблица.СуммаВзаиморасчетов                                    КАК УменьшитьКОтгрузке,
	|
	|	Таблица.ЗаказДавальца                                          КАК ЗаказПродажи,
	|	0                                                              КАК ЗалогЗаТару,
	|	ВЫБОР
	|		КОГДА Таблица.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|			И Таблица.КодСтроки = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                          КАК СверхЗаказа,
	|	Таблица.Ссылка.ОтчетПоЗаказам                                  КАК НакладнаяПоЗаказам,
	|	
	|	Таблица.Ссылка.ПорядокРасчетов                                 КАК ПорядокРасчетов,
	|	Таблица.Ссылка.Дата                                            КАК ДатаРегистратора,
	|	Таблица.Ссылка.Номер                                           КАК НомерРегистратора,
	|	Таблица.Ссылка.ВалютаВзаиморасчетов                            КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|	Таблица.Ссылка.Валюта                                          КАК ВалютаДокумента
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылка)
	|	И НЕ Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|";
		
	#КонецОбласти
	
	#Область ЗачетАванса
	
	ТекстЗачетАванса = "
	|ВЫБРАТЬ
	|	Таблица.Ссылка                                             КАК Ссылка,
	|	Таблица.Ссылка.Организация                                 КАК Организация,
	|	Таблица.Ссылка.Партнер                                     КАК Партнер,
	|	
	|	ОбъектыРасчетов.Ссылка                                     КАК ОбъектРасчетовПриемник,
	|	Таблица.ОбъектРасчетов                                     КАК ОбъектРасчетовИсточник,
	|
	|	Таблица.Ссылка.ВалютаВзаиморасчетов                        КАК ВалютаВзаиморасчетов,
	|	Таблица.СуммаВзаиморасчетов                                КАК СуммаВзаиморасчетов,
	|	Таблица.Ссылка.Валюта                                      КАК ВалютаДокумента,
	|	Таблица.Сумма                                              КАК Сумма,
	|
	|	Таблица.Ссылка.Дата                                        КАК ДатаКурса,
	|	Таблица.Ссылка.Дата                                        КАК ДатаРегистратора,
	|	Таблица.Ссылка.Номер                                       КАК НомерРегистратора,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.РасшифровкаПлатежа КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Объект = Таблица.Ссылка
	|		И НЕ ОбъектыРасчетов.ПометкаУдаления
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылка)
	|";
	
	#КонецОбласти
	
	ВзаиморасчетыСервер.ПроведениеПродажи(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстПродажа,
		ТекстПланированиеОплат,
		ТекстЗачетАванса,
		ТекстТовары);
	
КонецПроцедуры

Процедура СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено) Экспорт
	
	ТекстЗапросаДанных = "
	|ВЫБРАТЬ
	|	""Продукция""                                          КАК ИсточникДанных,
	|	ЛОЖЬ                                                   КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация                    КАК Организация,
	|	ТаблицаДокумента.Ссылка.Валюта                         КАК ВалютаДокумента,
	|	ТаблицаДокумента.Ссылка.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК ПериодБазыНДС,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК ДатаКурса,
	|	
	|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.Ссылка.СтавкаНДС                      КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
	|	0                                                      КАК СуммаНДСВзаиморасчетов,
	|	0                                                      КАК СуммаБезНДСРегл,
	|	0                                                      КАК СуммаБезНДСУпр,
	|	
	|	ИСТИНА                                                 КАК ОтражаетсяВРасчетах,
	|	ТаблицаДокумента.ОбъектРасчетов                        КАК ОбъектРасчетов,
	|	ИСТИНА                                                 КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВидыЗапасов""                                        КАК ИсточникДанных,
	|	ЛОЖЬ                                                   КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация                    КАК Организация,
	|	ТаблицаДокумента.Ссылка.Валюта                         КАК ВалютаДокумента,
	|	ТаблицаДокумента.Ссылка.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК ПериодБазыНДС,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК ДатаКурса,
	|	
	|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторФинЗаписи                КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.Ссылка.СтавкаНДС                      КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаВзаиморасчетов                   КАК СуммаВзаиморасчетов,
	|	0                                                      КАК СуммаНДСВзаиморасчетов,
	|	0                                                      КАК СуммаБезНДСРегл,
	|	0                                                      КАК СуммаБезНДСУпр,
	|
	|	ИСТИНА                                                 КАК ОтражаетсяВРасчетах,
	|	ТаблицаДокумента.ОбъектРасчетов                        КАК ОбъектРасчетов,
	|	ИСТИНА                                                 КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";

	РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента(
		Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанных);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ОтчетДавальцу2_5";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
			
	Иначе
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'В документе %1 не реализована адаптация текста запроса формирования движений по регистру %2.';
				|en = 'In the %1 document, adaptation of request for generating records of the %2 register is not implemented.'"),
			ПолноеИмяДокумента,
			ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса       = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтПродукция");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтПродукция(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область Реализация_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов 					КАК ВидЗапасов,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО                                    КАК КорОрганизация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.КорВидЗапасов				КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 									КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаПартий,
	|	&АналитикаУчетаПоПартнерам						КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ЗаказДавальца = ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|		ТОГДА &Ссылка
	|		ИНАЧЕ ТаблицаВидыЗапасов.ЗаказДавальца
	|	КОНЕЦ                                  			КАК ЗаказКлиента,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка						КАК Сделка,
	|	ТаблицаДокумента.Подразделение				КАК Подразделение,
	|	ТаблицаДокумента.Менеджер					КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 								КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 				КАК Количество,
	|	НЕОПРЕДЕЛЕНО 								КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	&ХозяйственнаяОперация						КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи	КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации				КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И НЕ ТаблицаВидыЗапасов.СписатьНаРасходы
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Реализация,
		ТекстЗапроса);
	
	#КонецОбласти

	#Область Реализация_Работа
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО 									КАК ВидЗапасов,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО                                    КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 									КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаПартий,
	|	&АналитикаУчетаПоПартнерам						КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ЗаказДавальца = ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|		ТОГДА &Ссылка
	|		ИНАЧЕ ТаблицаВидыЗапасов.ЗаказДавальца
	|	КОНЕЦ                                  			КАК ЗаказКлиента,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка						КАК Сделка,
	|	ТаблицаДокумента.Подразделение				КАК Подразделение,
	|	ТаблицаДокумента.Менеджер					КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 								КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 				КАК Количество,
	|	НЕОПРЕДЕЛЕНО 								КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	&ХозяйственнаяОперация						КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки		КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации				КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаВидыЗапасов
	|		ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ТаблицаВидыЗапасов.СписатьНаРасходы
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Реализация,
		ТекстЗапроса);
	
	#КонецОбласти
	
	#Область СписаниеНаРасходыАктивы_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов 					КАК ВидЗапасов,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО 									КАК КорОрганизация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.КорВидЗапасов				КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.СтатьяРасходов 			    КАК СтатьяРасходовАктивов,
	|	ТаблицаВидыЗапасов.АналитикаРасходов    		КАК АналитикаРасходовАктивов,
	|	ТаблицаДокумента.НаправлениеДеятельности		КАК КорНаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО									КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО 									КАК КорАналитикаУчетаПартий,
	|	&АналитикаУчетаПоПартнерам 						КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ЗаказДавальца = ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|		ТОГДА &Ссылка
	|		ИНАЧЕ ТаблицаВидыЗапасов.ЗаказДавальца
	|	КОНЕЦ                                  			КАК ЗаказКлиента,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка							КАК Сделка,
	|	ТаблицаВидыЗапасов.Получатель					КАК Подразделение,
	|	ТаблицаДокумента.Менеджер						КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 									КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 					КАК Количество,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцуСписаниеНаРасходы) КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.НастройкаСчетовУчета		КАК НастройкаСчетовУчета,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	 	КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.ИдентификаторФинЗаписи	КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетДавальцуСписаниеНаРасходы) КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.СписатьНаРасходы
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы,
		ТекстЗапроса);
	
	#КонецОбласти
	
	#Область СписаниеНаРасходыАктивы_Работа
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО 									КАК ВидЗапасов,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА ТаблицаДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг)
	|	ИНАЧЕ
	|		ТаблицаДокумента.НалогообложениеНДС
	|	КОНЕЦ											КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО 									КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО									КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.СтатьяРасходов 			    КАК СтатьяРасходовАктивов,
	|	ТаблицаВидыЗапасов.АналитикаРасходов    		КАК АналитикаРасходовАктивов,
	|	ТаблицаДокумента.НаправлениеДеятельности		КАК КорНаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО									КАК КорПартия,
	|	НЕОПРЕДЕЛЕНО 									КАК КорАналитикаУчетаПартий,
	|	&АналитикаУчетаПоПартнерам 						КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ЗаказДавальца = ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|		ТОГДА &Ссылка
	|		ИНАЧЕ ТаблицаВидыЗапасов.ЗаказДавальца
	|	КОНЕЦ                                  			КАК ЗаказКлиента,
	|
	// Поля аналитики финансового учета
	|	ТаблицаДокумента.Сделка							КАК Сделка,
	|	ТаблицаВидыЗапасов.Получатель					КАК Подразделение,
	|	ТаблицаДокумента.Менеджер						КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 									КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 					КАК Количество,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцуСписаниеНаРасходы) КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.НастройкаСчетовУчета		КАК НастройкаСчетовУчета,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	 	КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки		КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетДавальцуСписаниеНаРасходы) КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаВидыЗапасов
	|		ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТаблицаВидыЗапасов.СписатьНаРасходы
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы,
		ТекстЗапроса);
	
	#КонецОбласти
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#Область ОтражениеНДС

Процедура ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры)
	
	Если Не УчетНДСУП.ТребуетсяПроведениеПоРегистрамНДС(Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЦенности =
	"
	// Работы
	|ВЫБРАТЬ
	|	ДанныеШапки.Дата                   КАК Период,
	|	ТаблицаЗапасов.Ссылка              КАК Ссылка,
	|	ДанныеШапки.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ДанныеШапки.Организация            КАК Организация,
	|	ДанныеШапки.Подразделение          КАК Подразделение,
	|	ДанныеШапки.Контрагент             КАК Контрагент,
	|	ДанныеШапки.Договор                КАК Договор,
	|	НЕОПРЕДЕЛЕНО                       КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО                       КАК Грузополучатель,
	|	ЛОЖЬ                               КАК РеализацияВРозницу,
	|	ТаблицаЗапасов.Ссылка              КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО                       КАК ДокументКорректировкиРеализации,
	|	НЕОПРЕДЕЛЕНО                       КАК ПокупательКомиссионногоТовара,
	|	ЛОЖЬ                               КАК РеализацияЧерезКомиссионера,
	|	ЛОЖЬ                               КАК ИсправлениеОшибок,
	|	ЛОЖЬ                               КАК КорректировкаПоСогласованиюСторон,
	|	ТаблицаЗапасов.ОбъектРасчетов      КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                       КАК ДокументКорректировкаРеализации,
	|	ДанныеШапки.НалогообложениеНДС     КАК НалогообложениеНДС,
	|	ТаблицаЗапасов.Номенклатура        КАК Номенклатура,
	|	ТаблицаЗапасов.Характеристика      КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)   КАК НоменклатураПартнера,
	|	ТаблицаЗапасов.Серия               КАК Серия,
	|	""""                               КАК Содержание,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаЗапасов.Количество
	|		ИНАЧЕ ТаблицаЗапасов.КоличествоУпаковок
	|	КОНЕЦ                              КАК Количество,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаЗапасов.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ &ТекстЗапросаЕдиницаИзмерения
	|	КОНЕЦ                              КАК ЕдиницаИзмерения,
	|	0                                  КАК КоличествоПоРНПТ,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	ТаблицаЗапасов.Ссылка.СтавкаНДС    КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК КодТНВЭД,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)        КАК ВидЗапасов,
	|	ТаблицаЗапасов.НомерСтроки         КАК НомерСтроки,
	|	ТаблицаЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаЗапасов.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации    КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаЗапасов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5 КАК ДанныеШапки
	|	ПО ТаблицаЗапасов.Ссылка = ДанныеШапки.Ссылка
	|	
	|ГДЕ
	|	ТаблицаЗапасов.Ссылка В(&Ссылка)
	|	И ТаблицаЗапасов.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Товары
	|ВЫБРАТЬ
	|	ДанныеШапки.Дата                   КАК Период,
	|	ТаблицаЗапасов.Ссылка              КАК Ссылка,
	|	ДанныеШапки.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ДанныеШапки.Организация            КАК Организация,
	|	ДанныеШапки.Подразделение          КАК Подразделение,
	|	ДанныеШапки.Контрагент             КАК Контрагент,
	|	ДанныеШапки.Договор                КАК Договор,
	|	НЕОПРЕДЕЛЕНО                       КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО                       КАК Грузополучатель,
	|	ЛОЖЬ                               КАК РеализацияВРозницу,
	|	ТаблицаЗапасов.Ссылка              КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО                       КАК ДокументКорректировкиРеализации,
	|	НЕОПРЕДЕЛЕНО                       КАК ПокупательКомиссионногоТовара,
	|	ЛОЖЬ                               КАК РеализацияЧерезКомиссионера,
	|	ЛОЖЬ                               КАК ИсправлениеОшибок,
	|	ЛОЖЬ                               КАК КорректировкаПоСогласованиюСторон,
	|	ТаблицаЗапасов.ОбъектРасчетов      КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО                       КАК ДокументКорректировкаРеализации,
	|	ДанныеШапки.НалогообложениеНДС     КАК НалогообложениеНДС,
	|	Аналитика.Номенклатура             КАК Номенклатура,
	|	Аналитика.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)   КАК НоменклатураПартнера,
	|	Аналитика.Серия                    КАК Серия,
	|	""""                               КАК Содержание,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаЗапасов.Количество
	|		ИНАЧЕ ТаблицаЗапасов.КоличествоУпаковок
	|	КОНЕЦ                              КАК Количество,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ &ТекстЗапросаЕдиницаИзмеренияВидыЗапасов
	|	КОНЕЦ                              КАК ЕдиницаИзмерения,
	|	ТаблицаЗапасов.КоличествоПоРНПТ    КАК КоличествоПоРНПТ,
	|	ТаблицаЗапасов.НомерГТД            КАК НомерГТД,
	|	ТаблицаЗапасов.Ссылка.СтавкаНДС    КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК КодТНВЭД,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)        КАК ВидЗапасов,
	|	ТаблицаЗапасов.НомерСтроки         КАК НомерСтроки,
	|	ТаблицаЗапасов.ИдентификаторФинЗаписи КАК ИдентификаторСтроки,
	|	ТаблицаЗапасов.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации    КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаЗапасов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу2_5 КАК ДанныеШапки
	|	ПО ТаблицаЗапасов.Ссылка = ДанныеШапки.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаЗапасов.Ссылка В(&Ссылка)
	|";
	
	ТекстЦенности = СтрЗаменить(
		ТекстЦенности,
		"&ТекстЗапросаЕдиницаИзмеренияВидыЗапасов",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ТаблицаЗапасов.Упаковка",
			"ТаблицаЗапасов.АналитикаУчетаНоменклатуры.Номенклатура"));
	
	ТекстЦенности = СтрЗаменить(
		ТекстЦенности,
		"&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ТаблицаЗапасов.Упаковка",
			"ТаблицаЗапасов.Номенклатура"));
	
	УчетНДСУП.ОтразитьРеализациюКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу2_5) Тогда
		
		// Акт выполненных работ
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Акт";
		КомандаПечати.Представление = НСтр("ru = 'Акт выполненных работ';
											|en = 'Customer invoice — Services'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Отчет о продукции и материалах
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ОтчетОПродукцииИМатериалах";
		КомандаПечати.Представление = НСтр("ru = 'Отчет о продукции и материалах';
											|en = 'Report on manufactured products and materials'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
		 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
			
			// Счет на оплату
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru = 'Счет на оплату';
												|en = 'Commercial invoice'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
			// Счет на оплату с факсимиле
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru = 'Счет на оплату с факсимиле';
												|en = 'Commercial invoice with facsimile'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		// Комплект документов на принтер
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КомплектДокументов";
		КомандаПечати.СразуНаПринтер = Истина;
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов на принтер';
											|en = 'Printable document set'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 1;
		
		// Комплект документов с настройкой...
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов с настройкой...';
											|en = 'Document set with setting...'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 2;
		
	КонецЕсли;

	ОтчетДавальцу2_5Локализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов        - Массив          - ссылки на объекты, которые нужно распечатать.
//  ПараметрыПечати       - Структура       - дополнительные настройки печати.
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение      - ссылка на объект,
//                                            представление - имя области в которой был выведен объект (выходной параметр).
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Акт",
			НСтр("ru = 'Акт выполненных работ';
				|en = 'Customer invoice — Services'"),
			СформироватьПечатнуюФормуАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОПродукцииИМатериалах") Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетДавальцу2_5_ОтчетОПродукцииИМатериалах";
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетОПродукцииИМатериалах",
			НСтр("ru = 'Отчет о продукции и материалах';
				|en = 'Report on manufactured products and materials'"),
			СформироватьПечатнуюФормуОтчетОПродукцииИМатериалах(
				ДанныеПечатиОтчетаОМатериалах(МассивОбъектов),
				ОбъектыПечати,
				ТабличныйДокумент));
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
		
	ОтчетДавальцу2_5Локализация.Печать(
		МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов, КодЯзыка = Неопределено) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов, КодЯзыка);
	
КонецФункции

// Получает данные печати
// 
// Параметры:
//  МассивОбъектов - Массив - массив объектов печати
//  ПараметрыПечати - Структура - параметры печати
// 
// Возвращаемое значение:
//  Структура - Описание:
//    * РезультатПоШапке - РезультатЗапроса - выборка по шапке
//    * РезультатПоТабличнойЧасти - РезультатЗапроса - выборка по табличной части
//
Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                        КАК Ссылка,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Дата                          КАК Дата,
	|	ДанныеДокумента.Партнер                       КАК Партнер,
	|	ДанныеДокумента.Контрагент                    КАК Контрагент,
	|	ДанныеДокумента.Организация                   КАК Организация,
	|	ДанныеДокумента.Организация.Префикс           КАК Префикс,
	|	ДанныеДокумента.Валюта                        КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС               КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НалогообложениеНДС =
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                         КАК УчитыватьНДС,
	|	ДанныеДокумента.ДополнительнаяИнформация      КАК ДополнительнаяИнформация,
	|	ДанныеДокумента.ДополнительнаяИнформацияШапки КАК ДополнительнаяИнформацияШапки,
	|	ДанныеДокумента.БанковскийСчетОрганизации     КАК СчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента     КАК СчетКонтрагента,
	|	ДанныеДокумента.УслугаПоПереработке           КАК УслугаПоПереработке
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Ссылка                            КАК Ссылка,
	|	ТаблицаПродукции.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаПродукции.Номенклатура                      КАК Номенклатура,
	|	ТаблицаПродукции.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
	|	ТаблицаПродукции.Номенклатура.Код                  КАК Код,
	|	ТаблицаПродукции.Номенклатура.Артикул              КАК Артикул,
	|	ТаблицаПродукции.Характеристика                    КАК Характеристика,
	|	ТаблицаПродукции.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
	|	ТаблицаПродукции.КоличествоУпаковок                КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукции.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаПродукции.Упаковка.НаименованиеПолное
	|		ИНАЧЕ ТаблицаПродукции.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ                                              КАК ЕдиницаИзмерения,
	|	ТаблицаПродукции.Цена                              КАК Цена,
	|	ТаблицаПродукции.Ссылка.СтавкаНДС                  КАК СтавкаНДС,
	|	ТаблицаПродукции.Сумма                             КАК Сумма,
	|	ТаблицаПродукции.СуммаНДС                          КАК СуммаНДС,
	|	ТаблицаПродукции.СуммаСНДС                         КАК СуммаСНДС
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаПродукции
	|ГДЕ
	|	ТаблицаПродукции.Ссылка В (&МассивДокументов)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукции.Ссылка,
	|	ТаблицаПродукции.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",          МассивРезультатов[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", МассивРезультатов[1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов, КодЯзыка = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетыДавальцу.Ссылка                                        КАК Ссылка,
	|	ОтчетыДавальцу.Номер                                         КАК Номер,
	|	ОтчетыДавальцу.Дата                                          КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументОснование,
	|	ЕСТЬNULL(ОтчетыДавальцу.БанковскийСчетОрганизации.Владелец, ОтчетыДавальцу.Организация) КАК Организация,
	|	ОтчетыДавальцу.Организация                                   КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование            КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность               КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование        КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.НалогообложениеНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                        КАК УчитыватьНДС,
	|	ОтчетыДавальцу.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя) КАК ОперацияОблагаетсяНДСУПокупателя,
	|	ОтчетыДавальцу.Контрагент                                    КАК Контрагент,
	|	ОтчетыДавальцу.Контрагент.ЮрФизЛицо                          КАК КонтрагентЮрФизЛицо,
	|	ОтчетыДавальцу.БанковскийСчетОрганизации                     КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.ИностранныйБанк
	|		  ИЛИ ОтчетыДавальцу.БанковскийСчетОрганизации.ВалютаДенежныхСредств <> ОтчетыДавальцу.Организация.ВалютаРегламентированногоУчета
	|		  ИЛИ ОтчетыДавальцу.БанковскийСчетКонтрагента.ИностранныйБанк
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                        КАК ПлатежЗаРубеж,
	|	ОтчетыДавальцу.БанковскийСчетОрганизации.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.НаименованиеБанкаМеждународное
	|		ИНАЧЕ ОтчетыДавальцу.БанковскийСчетОрганизации.Банк.МеждународноеНаименование
	|	КОНЕЦ                                                        КАК НаименованиеБанкаМеждународное,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетовМеждународное
	|		ИНАЧЕ ОтчетыДавальцу.БанковскийСчетОрганизации.БанкДляРасчетов.МеждународноеНаименование
	|	КОНЕЦ                                                        КАК НаименованиеБанкаДляРасчетовМеждународное,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.СВИФТБанка
	|		ИНАЧЕ ОтчетыДавальцу.БанковскийСчетОрганизации.Банк.СВИФТБИК
	|	КОНЕЦ                                                        КАК СВИФТБанка,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ ОтчетыДавальцу.БанковскийСчетОрганизации.БанкДляРасчетов.СВИФТБИК
	|	КОНЕЦ                                                        КАК СВИФТБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.АдресБанкаМеждународный
	|		ИНАЧЕ ОтчетыДавальцу.БанковскийСчетОрганизации.Банк.АдресМеждународный
	|	КОНЕЦ                                                        КАК АдресБанка,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ ОтчетыДавальцу.БанковскийСчетОрганизации.БанкДляРасчетов.АдресМеждународный
	|	КОНЕЦ                                                        КАК АдресБанкаДляРасчетов,
	|	
	|	ОтчетыДавальцу.БанковскийСчетОрганизации.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	ОтчетыДавальцу.БанковскийСчетОрганизации.НомерСчета          КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ                                                        КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ                                                        КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ                                                        КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ                                                        КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ                                                        КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ                                                        КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ                                                        КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ                                                        КАК ГородБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.ГородБанкаМеждународный
	|		ИНАЧЕ КлассификаторБанков.ГородМеждународный
	|	КОНЕЦ                                                        КАК ГородБанкаМеждународный,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.СтранаБанка
	|		ИНАЧЕ КлассификаторБанков.Страна
	|	КОНЕЦ                                                        КАК СтранаБанка,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.ГородМеждународный
	|	КОНЕЦ                                                        КАК ГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.СтранаБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Страна
	|	КОНЕЦ                                                        КАК СтранаБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанков.БИКРКЦ.Наименование, """")
	|	КОНЕЦ                                                        КАК НаименованиеРКЦБанка,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанковКорреспондентовРФ.БИКРКЦ.Наименование, """")
	|	КОНЕЦ                                                        КАК НаименованиеРКЦБанкаДляРасчетов,
	|	ОтчетыДавальцу.БанковскийСчетОрганизации.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	ОтчетыДавальцу.ЦенаВключаетНДС                               КАК ЦенаВключаетНДС,
	|	ОтчетыДавальцу.Валюта                                        КАК Валюта,
	|	ОтчетыДавальцу.Менеджер.ФизическоеЛицо                       КАК Менеджер,
	|	ОтчетыДавальцу.ДополнительнаяИнформация                      КАК ДополнительнаяИнформация,
	|	ОтчетыДавальцу.СуммаДокумента                                КАК СуммаКВозврату,
	|	ЛОЖЬ                                                         КАК ЧастичнаяОплата,
	|	""""                                                         КАК НазначениеПлатежа,
	|	100                                                          КАК ПроцентОплаты,
	|	ОтчетыДавальцу.СуммаДокумента                                КАК СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО                                                 КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО                                                 КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ОтчетыДавальцу.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца2_5.ПустаяСсылка)
	|			ТОГДА ОтчетыДавальцу.ЗаказДавальца.ИдентификаторПлатежа
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                        КАК ИдентификаторПлатежа,
	|	ЛОЖЬ                                                         КАК СчетКВозврату
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ОтчетыДавальцу
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ОтчетыДавальцу.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО ОтчетыДавальцу.БанковскийСчетОрганизации.Банк = КлассификаторБанков.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО ОтчетыДавальцу.БанковскийСчетОрганизации.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		
	|ГДЕ
	|	ОтчетыДавальцу.Ссылка В(&МассивОбъектов)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетыДавальцу.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетДавальцу2_5ЭтапыГрафикаОплаты.Ссылка         КАК Ссылка,
	|	ЛОЖЬ                                              КАК ЭтоЗалогЗаТару,
	|	ОтчетДавальцу2_5ЭтапыГрафикаОплаты.НомерСтроки    КАК НомерСтроки,
	|	ОтчетДавальцу2_5ЭтапыГрафикаОплаты.ДатаПлатежа    КАК ДатаПлатежа,
	|	ОтчетДавальцу2_5ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ОтчетДавальцу2_5ЭтапыГрафикаОплаты.СуммаПлатежа   КАК СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ЭтапыГрафикаОплаты КАК ОтчетДавальцу2_5ЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетДавальцу2_5ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаПродукции.Ссылка                            КАК Ссылка,
	|	ТаблицаПродукции.Номенклатура                      КАК Номенклатура,
	|	ТаблицаПродукции.Номенклатура.Код                  КАК Код,
	|	ТаблицаПродукции.Номенклатура.Артикул              КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПредставления.НаименованиеПолное, ТаблицаПродукции.Номенклатура.НаименованиеПолное) КАК НаименованиеПолное,
	|	ТаблицаПродукции.Ссылка.СтавкаНДС                  КАК СтавкаНДС,
	|	ЕСТЬNULL(ХарактеристикиНоменклатурыПредставления.НаименованиеПолное, ЕСТЬNULL(ТаблицаПродукции.Характеристика.НаименованиеПолное, """")) КАК Характеристика,
	|	""""                                               КАК Содержание,
	|	ТаблицаПродукции.Цена                              КАК Цена,
	|	ТаблицаПродукции.Сумма                             КАК Сумма,
	|	ТаблицаПродукции.СуммаНДС                          КАК СуммаНДС,
	|	ТаблицаПродукции.Сумма                             КАК СуммаБезСкидки,
	|	0                                                  КАК СуммаСкидки,
	|	ТаблицаПродукции.КоличествоУпаковок                КАК Количество,
	|	ТаблицаПродукции.Упаковка                          КАК Упаковка,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения          КАК ЕдиницаИзмерения,
	|	ЛОЖЬ                                               КАК ЭтоВозвратнаяТара
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаПродукции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Представления КАК НоменклатураПредставления
	|	ПО ТаблицаПродукции.Номенклатура = НоменклатураПредставления.Ссылка
	|	И НоменклатураПредставления.КодЯзыка = &КодЯзыка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.Представления КАК ХарактеристикиНоменклатурыПредставления
	|	ПО ТаблицаПродукции.Характеристика = ХарактеристикиНоменклатурыПредставления.Ссылка
	|	И ХарактеристикиНоменклатурыПредставления.КодЯзыка = &КодЯзыка
	|ГДЕ
	|	ТаблицаПродукции.Ссылка В(&МассивОбъектов)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Запрос.Текст =
		СтрЗаменить(
			Запрос.Текст,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "ТаблицаПродукции.Упаковка", "ТаблицаПродукции.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КодЯзыка", КодЯзыка);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",          ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",   ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция СформироватьПечатнуюФормуАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетДавальцу2_5_Акт";
	
	СтруктураРезультатов = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	ДанныеПечати        = СтруктураРезультатов["РезультатПоШапке"].Выбрать();
	ВыборкаПоДокументам =
		СтруктураРезультатов["РезультатПоТабличнойЧасти"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке услуги по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в документе пустая табличная часть услуги - перейдем к следующему документу
		Если НайденСледующий Тогда
			ВыборкаСтрок = ВыборкаПоДокументам.Выбрать();
			ЕстьНДС = ДанныеПечати.УчитыватьНДС;
			ВыборкаСтрок.Сбросить();
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют услуги. Печать акта выполненных работ (услуг) не требуется.';
					|en = 'Services are missing in document %1. Printing of ""Customer invoice — Services"" is not required.'"),
				ДанныеПечати.Ссылка);
				
			ОбщегоНазначения.СообщитьПользователю(Текст, ДанныеПечати.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетДавальцу2_5.ПФ_MXL_Акт");
		
		// Выводим шапку акта
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить(
			"ТекстЗаголовка",
			ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru = 'Акт';
																							|en = 'Certificate'")));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыОбласти);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ДанныеПечати.ДополнительнаяИнформацияШапки = "" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформацияШапки");
			ОбластьМакета.Параметры.ДополнительнаяИнформацияШапки = ДанныеПечати.ДополнительнаяИнформацияШапки;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстШапки");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
				
		// Выводим заголовок таблицы Услуги
		
		Если ЕстьНДС И ПоказыватьНДС Тогда
			ИмяОбластиШапка  = "ШапкаТаблицыСНДС";
			ИмяОбластиСтрока = "СтрокаСНДС";
		Иначе
			ИмяОбластиШапка  = "ШапкаТаблицы";
			ИмяОбластиСтрока = "Строка";
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбластиШапка);
		ОбластьСтроки = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		ОбластьСтрокиУслуга = Макет.ПолучитьОбласть("СтрокаУслуга");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтрокиУслуга.Параметры.УслугаПоПереработке = СокрЛП(ДанныеПечати.УслугаПоПереработке);
		ТабличныйДокумент.Вывести(ОбластьСтрокиУслуга);
		
		Сумма       = 0;
		СуммаНДС    = 0;
		СуммаСНДС   = 0;
		НомерСтроки = 0;
		
		// Выводим строки таблицы Услуги
		
		Пока ВыборкаСтрок.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрок);
			
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("НомерСтроки", НомерСтроки);
			ПараметрыОбласти.Вставить("Товар", ВыборкаСтрок.НоменклатураНаименованиеПолное);
			
			ОбластьСтроки.Параметры.Заполнить(ПараметрыОбласти);
			
			Сумма     = Сумма + ВыборкаСтрок.Сумма;
			СуммаНДС  = СуммаНДС + ВыборкаСтрок.СуммаНДС;
			СуммаСНДС = СуммаСНДС + ВыборкаСтрок.СуммаСНДС;
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
		Если ЕстьНДС Тогда
			ОбластьМакета.Параметры.НДС =
				?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:';
													|en = 'Including VAT:'"), НСтр("ru = 'Сумма НДС:';
																						|en = 'VAT amount:'"));
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Без налога (НДС)';
												|en = 'Without tax (VAT)'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоСНДС");
		Если ЕстьНДС Тогда
			ОбластьМакета.Параметры.ВсегоСНДС = СуммаСНДС;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		ИтоговаяСтрока = СтрШаблон(
							НСтр("ru = 'Всего выполнено работ (оказано услуг) на сумму %1';
								|en = 'Total works performed (services rendered) in the amount of %1'"),
							ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		ОбластьМакета.Параметры.СуммаПрописью  =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ДанныеПечати.ДополнительнаяИнформация="" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СведенияОИсполнителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
									ДанныеПечати.Организация, ДанныеПечати.Дата,, ДанныеПечати.СчетОрганизации);
			
		СведенияОЗаказчике	 = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
									ДанныеПечати.Контрагент, ДанныеПечати.Дата,, ДанныеПечати.СчетКонтрагента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ПредставлениеИсполнителя = СведенияОИсполнителе.ОфициальноеНаименование;
		ОбластьМакета.Параметры.ПредставлениеЗаказчика 	 = СведенияОЗаказчике.ОфициальноеНаименование;
		ОбластьМакета.Параметры.ЮрАдресИсполнителя 		 = СведенияОИсполнителе.ЮридическийАдрес;
		ОбластьМакета.Параметры.ЮрАдресЗаказчика 		 = СведенияОЗаказчике.ЮридическийАдрес;
		ОбластьМакета.Параметры.ИННИсполнителя			 = СведенияОИсполнителе.ИНН;
		ОбластьМакета.Параметры.ИННЗаказчика			 = СведенияОЗаказчике.ИНН;
		ОбластьМакета.Параметры.КППИсполнителя			 = СведенияОИсполнителе.КПП;
		ОбластьМакета.Параметры.КППЗаказчика			 = СведенияОЗаказчике.КПП;
		ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = СведенияОИсполнителе.НомерСчета;
		ОбластьМакета.Параметры.РасчетныйСчетЗаказчика	 = СведенияОЗаказчике.НомерСчета;
		ОбластьМакета.Параметры.КорСчетИсполнителя		 = СведенияОИсполнителе.КоррСчет;
		ОбластьМакета.Параметры.КорСчетЗаказчика		 = СведенияОЗаказчике.КоррСчет;
		ОбластьМакета.Параметры.БанкИсполнителя			 = СведенияОИсполнителе.Банк;
		ОбластьМакета.Параметры.БанкЗаказчика			 = СведенияОЗаказчике.Банк;
		ОбластьМакета.Параметры.БИКИсполнителя			 = СведенияОИсполнителе.БИК;
		ОбластьМакета.Параметры.БИКЗаказчика			 = СведенияОЗаказчике.БИК;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеПечатиОтчетаОМатериалах(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетДавальцу2_5.Ссылка              КАК Ссылка,
	|	ОтчетДавальцу2_5.Номер               КАК Номер,
	|	ОтчетДавальцу2_5.Дата                КАК Дата,
	|	ОтчетДавальцу2_5.Партнер             КАК Партнер,
	|	ОтчетДавальцу2_5.Контрагент          КАК Контрагент,
	|	ОтчетДавальцу2_5.Организация         КАК Организация,
	|	ОтчетДавальцу2_5.Организация.Префикс КАК Префикс
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ОтчетДавальцу2_5
	|ГДЕ
	|	ОтчетДавальцу2_5.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Сформировать печатную форму отчет о материалах.
// 
// Параметры:
//  ДанныеПечати - Массив Из ДокументСсылка - Данные печати
//  ОбъектыПечати - СписокЗначений - Объекты печати
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Сформированная печатная форма отчета о материалах
Функция СформироватьПечатнуюФормуОтчетОПродукцииИМатериалах(ДанныеПечати, ОбъектыПечати, ТабличныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкаКодов              = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	Колонка                   = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды              = ЗначениеЗаполнено(Колонка);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетДавальцу2_5.ПФ_MXL_ОтчетОПродукцииИМатериалах");
	
	ОбластьТовары = Макет.Область("Товар");
	Если ВыводитьКоды Тогда
		
		ОбластьКодовШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ОбластьКодовСтрока = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьКодовПодвал = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	
	Иначе
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьКонецСтрокиШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьКонецСтрокиСтрока = Макет.ПолучитьОбласть("Строка|КонецСтроки");
	
	ОбластьНомераПодвал = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьДанныхПодвал = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКонецСтрокиПодвал = Макет.ПолучитьОбласть("Подвал|КонецСтроки");
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ПараметрыУчетнойПолитики =
			НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
				"УчетнаяПолитикаФинансовогоУчета",
				ДанныеПечати.Организация,
				ДанныеПечати.Дата);
			
		Если Не ПараметрыУчетнойПолитики = Неопределено
			И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров =
				Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
			
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			
			ПараметрыДереваСебестоимости = СтруктураСебестоимости.ПараметрыДереваСебестоимости();
			ПараметрыДереваСебестоимости.ДинамическоеСчитывание = Ложь;
			ПараметрыДереваСебестоимости.ТипРезультата          = "МенеджерВременныхТаблиц";
			ПараметрыДереваСебестоимости.Результат              = МенеджерВТ;
			
			ПараметрыУзлаДереваСебестоимости = СтруктураСебестоимости.ПараметрыУзлаДереваСебестоимости();
			ПараметрыУзлаДереваСебестоимости.Отборы.ДанныеПоСебестоимости = 3;
			ПараметрыУзлаДереваСебестоимости.Отборы.Регистраторы.Добавить(ДанныеПечати.Ссылка);
			ПараметрыУзлаДереваСебестоимости.Отборы.РазворачиватьДопРасходы = Ложь;
			
			СтруктураСебестоимости.ПостроитьДеревоСебестоимости(
				ПараметрыДереваСебестоимости, ПараметрыУзлаДереваСебестоимости);
			
			ЗапросЗатрат = Новый Запрос;
			ЗапросЗатрат.МенеджерВременныхТаблиц = МенеджерВТ;
			
			ЗапросЗатрат.Текст =
			"ВЫБРАТЬ
			// Продукция
			|	Продукция.АналитикаУчетаПродукции                      КАК АналитикаУчетаПродукции,
			|	ВЫРАЗИТЬ(СУММА(Продукция.Количество) КАК ЧИСЛО(31, 2)) КАК КоличествоПродукция,
			|	Продукция.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения
			|ПОМЕСТИТЬ ПродукцияТекущегоОтчета
			|ИЗ
			|	Результат КАК Продукция
			|ГДЕ
			|	Продукция.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокДереваСебестоимости.ПартияПродукции)
			|
			|СГРУППИРОВАТЬ ПО
			// Продукция
			|	Продукция.АналитикаУчетаПродукции,
			|	Продукция.ЕдиницаИзмерения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			// Продукция
			|	Продукция.АналитикаУчетаПродукции                                                   КАК АналитикаУчетаПродукции,
			|	Продукция.АналитикаУчетаПродукции.Номенклатура                                      КАК ТоварПродукция,
			|	Продукция.АналитикаУчетаПродукции.Номенклатура.НаименованиеПолное                   КАК ТоварНаименованиеПродукция,
			|	Продукция.АналитикаУчетаПродукции.Номенклатура.Код                                  КАК КодПродукция,
			|	Продукция.АналитикаУчетаПродукции.Номенклатура.Артикул                              КАК АртикулПродукция,
			|	ЕСТЬNULL(Продукция.АналитикаУчетаПродукции.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаПродукция,
			|	ВЫРАЗИТЬ(МАКСИМУМ(Продукция.КоличествоПродукция) КАК ЧИСЛО(31, 2))                  КАК КоличествоПродукция,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Продукция.ЕдиницаИзмерения)                                     КАК ПредставлениеБазовойЕдиницыИзмеренияПродукция,
			// Затрата
			|	Затраты.Номенклатура                                      КАК Товар,
			|	Затраты.Номенклатура.НаименованиеПолное                   КАК ТоварНаименование,
			|	Затраты.Номенклатура.Код                                  КАК Код,
			|	Затраты.Номенклатура.Артикул                              КАК Артикул,
			|	ЕСТЬNULL(Затраты.Характеристика.НаименованиеПолное, """") КАК Характеристика,
			|	ВЫРАЗИТЬ(СУММА(Затраты.Количество) КАК ЧИСЛО(31, 2))      КАК Количество,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Затраты.ЕдиницаИзмерения)             КАК ПредставлениеБазовойЕдиницыИзмерения
			|ИЗ
			|	ПродукцияТекущегоОтчета КАК Продукция
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Результат КАК Затраты
			|	ПО Затраты.АналитикаУчетаПродукции = Продукция.АналитикаУчетаПродукции
			|	И Затраты.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокДереваСебестоимости.ПартияЗатраты)
			|	И ТИПЗНАЧЕНИЯ(Затраты.ПартияЗатрата) = ТИП(Документ.ПриемкаТоваровНаХранение)
			|	И ВЫРАЗИТЬ(Затраты.ПартияЗатрата КАК Документ.ПриемкаТоваровНаХранение).ХозяйственнаяОперация =
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца2_5)
			|
			|СГРУППИРОВАТЬ ПО
			// Продукция
			|	Продукция.АналитикаУчетаПродукции,
			|	ЕСТЬNULL(Продукция.АналитикаУчетаПродукции.Характеристика.НаименованиеПолное, """"),
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Продукция.ЕдиницаИзмерения),
			// Затрата
			|	Затраты.Номенклатура,
			|	ЕСТЬNULL(Затраты.Характеристика.НаименованиеПолное, """"),
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Затраты.ЕдиницаИзмерения)
			|
			|ИТОГИ
			|	МАКСИМУМ(ТоварПродукция),
			|	МАКСИМУМ(ТоварНаименованиеПродукция),
			|	МАКСИМУМ(КодПродукция),
			|	МАКСИМУМ(АртикулПродукция),
			|	МАКСИМУМ(ХарактеристикаПродукция),
			|	МАКСИМУМ(КоличествоПродукция),
			|	МАКСИМУМ(ПредставлениеБазовойЕдиницыИзмеренияПродукция)
			|ПО
			|	АналитикаУчетаПродукции
			|";
			
			ВыборкаПоПродукции = ЗапросЗатрат.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЕстьМатериалыДавальца = ВыборкаПоПродукции.Количество() > 0;
			
		Иначе
			Текст =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1: Для организации установлен метод оценки стоимости товаров ""По средней за месяц"". Печать отчета недоступна.';
						|en = '%1 document: The ""Monthly average"" inventory valuation method is set for the company. Cannot print the report.'"),
					ДанныеПечати.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(Текст, ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ЕстьМатериалыДавальца Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1: при производстве продукции не использовались материалы давальца, либо не рассчитана себестоимость. Печать отчета не требуется';
					|en = 'Document %1: materials of the material provider were not used during production or cost was not calculated.  It is not necessary to print a report.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(Текст, ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
		ПараметрыОбласти = Новый Структура;
		ПараметрыОбласти.Вставить(
			"ТекстЗаголовка",
			ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
				ДанныеПечати,
				НСтр("ru = 'Отчет о продукции и материалах';
					|en = 'Report on manufactured products and materials'", ОбщегоНазначения.КодОсновногоЯзыка())));
		
		ПараметрыОбласти.Вставить(
			"ИсполнительПредставление",
			ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), 
				"ПолноеНаименование"));
		
		ПараметрыОбласти.Вставить(
			"ЗаказчикПредставление",
			ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), 
				"ПолноеНаименование"));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыОбласти);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхШапка);
		
		ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиШапка);
		
		НомерСтрокиПродукция = 1;
		
		Пока ВыборкаПоПродукции.Следующий() Цикл
			
			ПараметрыОбласти = Новый Структура;
			ПараметрыОбласти.Вставить("НомерСтроки", НомерСтрокиПродукция);
			
			ОбластьНомераСтрока.Параметры.Заполнить(ПараметрыОбласти);
			
			ТабличныйДокумент.Вывести(ОбластьНомераСтрока);
			
			Если ВыводитьКоды
				И Колонка = "Код" Тогда
				ОбластьКодовСтрока.Параметры.Артикул = ВыборкаПоПродукции.КодПродукция;
				ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
			ИначеЕсли ВыводитьКоды Тогда
				ОбластьКодовСтрока.Параметры.Артикул = ВыборкаПоПродукции.АртикулПродукция;
				ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
			КонецЕсли;
			
			ДопПараметрыПредставлениеНоменклатуры =
				НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			
			ОбластьДанныхСтрока.Параметры.Товар =
				НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СокрЛП(ВыборкаПоПродукции.ТоварНаименованиеПродукция),
					СокрЛП(ВыборкаПоПродукции.ХарактеристикаПродукция),,,
					ДопПараметрыПредставлениеНоменклатуры);
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);
			
			ОбластьКонецСтрокиСтрока.Параметры.Количество =
				ВыборкаПоПродукции.КоличествоПродукция;
			ОбластьКонецСтрокиСтрока.Параметры.ПредставлениеБазовойЕдиницыИзмерения =
				ВыборкаПоПродукции.ПредставлениеБазовойЕдиницыИзмеренияПродукция;
			
			ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиСтрока);
			
			НомерСтрокиЗатрата = 1;
			
			ВыборкаПоЗатратам = ВыборкаПоПродукции.Выбрать();
			Пока ВыборкаПоЗатратам.Следующий() Цикл
				
				ПараметрыОбласти = Новый Структура;
				ПараметрыОбласти.Вставить("НомерСтроки", Строка(НомерСтрокиПродукция) + "." + Строка(НомерСтрокиЗатрата));
				
				ОбластьНомераСтрока.Параметры.Заполнить(ПараметрыОбласти);
				
				ТабличныйДокумент.Вывести(ОбластьНомераСтрока);
				
				Если ВыводитьКоды Тогда
					ОбластьКодовСтрока.Параметры.Артикул = ВыборкаПоЗатратам[Колонка];
					ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
				КонецЕсли;
				
				ДопПараметрыПредставлениеНоменклатуры =
					НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
				ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				
				ОбластьДанныхСтрока.Параметры.Товар =
					Символы.Таб + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						СокрЛП(ВыборкаПоЗатратам.ТоварНаименование),
						СокрЛП(ВыборкаПоЗатратам.Характеристика),,,
						ДопПараметрыПредставлениеНоменклатуры);
				
				ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);
				
				ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ВыборкаПоЗатратам);
				ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиСтрока);
				
				НомерСтрокиЗатрата = НомерСтрокиЗатрата + 1;
				
			КонецЦикла;
			
			НомерСтрокиПродукция = НомерСтрокиПродукция + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьНомераПодвал);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовПодвал);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхПодвал);
		
		ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиПодвал);
		
		// Вывести подписи.
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура")
	   И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
									Метаданные.Документы.ОтчетДавальцу2_5.ПолноеИмя(), МассивОбъектов);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
									КоллекцияПечатныхФорм, КомплектПечатныхФорм, МассивОбъектов, "АктВыполненныхРабот");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			СформироватьПечатнуюФормуАктОбОказанииУслуг(КомплектПечати.Объекты, ОбъектыПечати));
		
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
									КоллекцияПечатныхФорм, КомплектПечатныхФорм, МассивОбъектов, "ОтчетОПродукцииИМатериалах");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетДавальцу2_5_ОтчетОПродукцииИМатериалах";
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			СформироватьПечатнуюФормуОтчетОПродукцииИМатериалах(
				ДанныеПечатиОтчетаОМатериалах(МассивОбъектов),
				ОбъектыПечати,
				ТабличныйДокумент));
		
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
									КоллекцияПечатныхФорм, КомплектПечатныхФорм, МассивОбъектов, "СчетНаОплату");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ОтчетДавальцу2_5", КомплектПечати.Объекты);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьСчетовНаОплату.СформироватьПечатнуюФормуСчетНаОплату(
				СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЦикла;
	
	ОтчетДавальцу2_5Локализация.СформироватьКомплектПечатныхФорм(
		МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, КомплектПечатныхФорм);
		
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.ОтчетДавальцу2_5", МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм, "АктВыполненныхРабот",  НСтр("ru = 'Акт выполненных работ';
															|en = 'Customer invoice — Services'"), 1);
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм, "ОтчетОПродукцииИМатериалах", НСтр("ru = 'Отчет о продукции и материалах';
																|en = 'Report on manufactured products and materials'"), 1);
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
			КомплектПечатныхФорм, "СчетНаОплату", НСтр("ru = 'Счет на оплату';
														|en = 'Commercial invoice'"), 1);
		
	КонецЕсли;
	
	ОтчетДавальцу2_5Локализация.КомплектПечатныхФорм(КомплектПечатныхФорм);
		
	Возврат КомплектПечатныхФорм;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Параметры:
//  ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСервер.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетДавальцу2_5))
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказДавальца2_5)
		И (ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцу2_5)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу2_5))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья2_5");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений();
	
	ТипыРаспоряжений = Новый Массив;
	ТипыРаспоряжений.Добавить("Документ.ЗаказДавальца2_5");
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(НакладныеСервер.ТекстЗапросаСостояний(
								"СостоянияОтчетовДавальцам2_5",
								ПараметрыОтбора,
								ТипыРаспоряжений));
	
	ТекстыЗапросов.Добавить("ВЫБРАТЬ
							|	ОстаткиСостояния.Распоряжение КАК Ссылка
							|ИЗ
							|	ВтСостоянияОтчетовДавальцам2_5 КАК ОстаткиСостояния");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	НакладныеСервер.ДобавитьПараметрыОтбораПоРееструДокументов(Запрос, ПараметрыОтбора);
	
	ОтчетыДавальцамКОформлению2_5 = Запрос.Выполнить().Выбрать().Количество();
	
	// Заполнение дел.
	// ПереработкаДавальческогоСырья2_5
	ДелоРодитель = ТекущиеДела.Найти("ПереработкаДавальческогоСырья2_5", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор = "ПереработкаДавальческогоСырья2_5";
		ДелоРодитель.Представление = НСтр("ru = 'Переработка давальческого сырья';
											|en = 'Subcontracting services'");
		//++ Устарело_Переработка24
		ДелоРодитель.Представление = ?(ПолучитьФункциональнуюОпцию("ИспользуетсяТолькоПриемВПереработку2_5"),
											НСтр("ru = 'Переработка давальческого сырья';
												|en = 'Subcontracting services'"),
											НСтр("ru = 'Переработка давальческого сырья (2.5)';
												|en = 'Provided material subcontracting (2.5)'"));
		//-- Устарело_Переработка24
		ДелоРодитель.Владелец      = Метаданные.Подсистемы.Продажи;
	КонецЕсли;
	
	ДелоРодитель.ЕстьДела = ДелоРодитель.ЕстьДела Или ОтчетыДавальцамКОформлению2_5 > 0;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы",      "СтраницаОтчеты");
	ПараметрыФормы.Вставить("КлючНазначенияФормы",     "ТекущиеДела");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ОтчетыДавальцамКОформлению2_5";
	Дело.ЕстьДела       = ОтчетыДавальцамКОформлению2_5 > 0;
	Дело.Представление  = НСтр("ru = 'Отчеты давальцам к оформлению';
								|en = '""Consumption reports — Subcontracting services delivered"" for registration'");
	//++ Устарело_Переработка24
	Дело.Представление  = ?(ПолучитьФункциональнуюОпцию("ИспользуетсяТолькоПриемВПереработку2_5"),
								НСтр("ru = 'Отчеты давальцам к оформлению';
									|en = '""Consumption reports — Subcontracting services delivered"" for registration'"),
								НСтр("ru = 'Отчеты давальцам к оформлению (2.5)';
									|en = 'Consumption reports — Subcontracting services delivered to register (2.5)'"));
	//-- Устарело_Переработка24
	Дело.Количество     = ОтчетыДавальцамКОформлению2_5;
	Дело.Важное         = Ложь;
	Дело.Форма          = "Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных";
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ПереработкаДавальческогоСырья2_5";
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует текст запроса, получающий график оплаты по документу
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса.
//
Функция ТекстЗапросаТаблицаРасчетыСКлиентамиСостояниеДокументов()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументНакладная.Ссылка                       КАК Документ,
	|	ДокументНакладная.НомерСтроки                  КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументНакладная.ВариантОплаты) КАК ВариантОплаты,
	|	ДокументНакладная.ДатаПлатежа                  КАК ДатаПлатежа,
	|	ДокументНакладная.СуммаПлатежа                 КАК СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ЭтапыГрафикаОплаты КАК ДокументНакладная
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.ОбъектРасчетов = ДокументНакладная.Ссылка
	|		 И ОбъектыРасчетов.ТребуетсяГрафик
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДокументЭтапыГрафикаОплаты.Ссылка                       КАК Документ,
	|	ДокументЭтапыГрафикаОплаты.НомерСтроки                  КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
	|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа                  КАК ДатаПлатежа,
	|	ДокументЭтапыГрафикаОплаты.СуммаПлатежа                 КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказДавальца2_5.ЭтапыГрафикаОплаты КАК ДокументЭтапыГрафикаОплаты
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка
	|		 И ОбъектыРасчетов.ТребуетсяГрафик";
	
	Возврат ТекстЗапроса;
	
КонецФункции 

// Формирует результат запроса по неоформленным остаткам заказов
//
// Параметры:
//  ДанныеОтбора  - Структура - поля, по которым будут отобраны остатки заказов для заполнения
//  МассивЗаказов - Массив - заказы, по которым будут отобраны остатки
//
// Возвращаемое значение:
//  РезультатЗапроса - 
//
Функция ПолучитьРезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, МассивЗаказов = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоЗаказам",          МассивЗаказов <> Неопределено);
	Запрос.УстановитьПараметр("МассивЗаказов",           МассивЗаказов);
	Запрос.УстановитьПараметр("Регистратор",             ДанныеОтбора.Ссылка);
	Запрос.УстановитьПараметр("Организация",             ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("Валюта",                  ДанныеОтбора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("Контрагент",              ДанныеОтбора.Контрагент);
	Запрос.УстановитьПараметр("Договор",                 ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("Партнер",                 ДанныеОтбора.Партнер);
	Запрос.УстановитьПараметр("Сделка",                  ДанныеОтбора.Сделка);
	Запрос.УстановитьПараметр("НалогообложениеНДС",      ДанныеОтбора.НалогообложениеНДС);
	Запрос.УстановитьПараметр("Склад",                   ДанныеОтбора.Склад);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ДанныеОтбора.НаправлениеДеятельности);
	Запрос.УстановитьПараметр(
		"ИспользоватьНаправленияДеятельности",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказДавальца2_5.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ОтборПоЗаказам
	|			ТОГДА ЗаказДавальца2_5.Ссылка В (&МассивЗаказов)
	|		ИНАЧЕ ЗаказДавальца2_5.Организация        = &Организация
	|			И ЗаказДавальца2_5.Валюта             = &Валюта
	|			И ЗаказДавальца2_5.Контрагент         = &Контрагент
	|			И ЗаказДавальца2_5.Договор            = &Договор
	|			И ЗаказДавальца2_5.Партнер            = &Партнер
	|			И ЗаказДавальца2_5.Сделка             = &Сделка
	|			И ЗаказДавальца2_5.НалогообложениеНДС = &НалогообложениеНДС
	|			И (НЕ &ИспользоватьНаправленияДеятельности
	|				ИЛИ ЗаказДавальца2_5.НаправлениеДеятельности = &НаправлениеДеятельности)
	|			И (ЗаказДавальца2_5.Склад = &Склад
	|				ИЛИ &Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					 И ЗаказДавальца2_5.Склад В ИЕРАРХИИ (&Склад)
	|				ИЛИ ЗаказДавальца2_5.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|			И ЗаказДавальца2_5.Проведен
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказовКОформлению.ЗаказКлиента       КАК ЗаказДавальца,
	|	ТаблицаЗаказовКОформлению.Номенклатура       КАК Номенклатура,
	|	ТаблицаЗаказовКОформлению.Характеристика     КАК Характеристика,
	|	ТаблицаЗаказовКОформлению.КодСтроки          КАК КодСтроки,
	|	ТаблицаЗаказовКОформлению.Склад              КАК Склад,
	|	ТаблицаЗаказовКОформлению.Серия              КАК Серия,
	|	СУММА(ТаблицаЗаказовКОформлению.КОформлению) КАК Количество,
	|	СУММА(ТаблицаЗаказовКОформлению.Сумма)       КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказКлиента       КАК ЗаказКлиента,
	|		ЗаказыОстатки.Номенклатура       КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика     КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки          КАК КодСтроки,
	|		ЗаказыОстатки.Склад              КАК Склад,
	|		ЗаказыОстатки.Серия              КАК Серия,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению,
	|		ЗаказыОстатки.СуммаОстаток       КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(
	|				,
	|				ЗаказКлиента В
	|					(ВЫБРАТЬ
	|						ТаблицаЗаказов.Ссылка КАК Ссылка
	|					ИЗ
	|						ТаблицаЗаказов КАК ТаблицаЗаказов)
	|				И КодСтроки <> 0) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыКлиентов.ЗаказКлиента   КАК ЗаказКлиента,
	|		ЗаказыКлиентов.Номенклатура   КАК Номенклатура,
	|		ЗаказыКлиентов.Характеристика КАК Характеристика,
	|		ЗаказыКлиентов.КодСтроки      КАК КодСтроки,
	|		ЗаказыКлиентов.Склад          КАК Склад,
	|		ЗаказыКлиентов.Серия          КАК Серия,
	|		ЗаказыКлиентов.КОформлению    КАК КОформлению,
	|		ЗаказыКлиентов.Сумма          КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|	ГДЕ
	|		ЗаказыКлиентов.Активность
	|		И ЗаказыКлиентов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ЗаказыКлиентов.Регистратор = &Регистратор
	|		И ЗаказыКлиентов.ЗаказКлиента В
	|			(ВЫБРАТЬ
	|				ТаблицаЗаказов.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаЗаказов КАК ТаблицаЗаказов)
	|		И ЗаказыКлиентов.КодСтроки <> 0) КАК ТаблицаЗаказовКОформлению
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЗаказовКОформлению.ЗаказКлиента,
	|		ТаблицаЗаказовКОформлению.Номенклатура,
	|		ТаблицаЗаказовКОформлению.Характеристика,
	|		ТаблицаЗаказовКОформлению.КодСтроки,
	|		ТаблицаЗаказовКОформлению.Склад,
	|		ТаблицаЗаказовКОформлению.Серия
	|
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаЗаказовКОформлению.КОформлению) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаЗаказовСверхЗаказа.ЗаказКлиента       КАК ЗаказКлиента,
	|		ТаблицаЗаказовСверхЗаказа.Номенклатура       КАК Номенклатура,
	|		ТаблицаЗаказовСверхЗаказа.Характеристика     КАК Характеристика,
	|		ТаблицаЗаказовСверхЗаказа.КодСтроки          КАК КодСтроки,
	|		ТаблицаЗаказовСверхЗаказа.Склад              КАК Склад,
	|		ТаблицаЗаказовСверхЗаказа.Серия              КАК Серия,
	|		СУММА(ТаблицаЗаказовСверхЗаказа.КОформлению) КАК Количество,
	|		0                                            КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказыОбороты.ЗаказКлиента                                      КАК ЗаказКлиента,
	|			ЗаказыОбороты.Номенклатура                                      КАК Номенклатура,
	|			ЗаказыОбороты.Характеристика                                    КАК Характеристика,
	|			ЗаказыОбороты.КодСтроки                                         КАК КодСтроки,
	|			ЗаказыОбороты.Склад                                             КАК Склад,
	|			ЗаказыОбороты.Серия                                             КАК Серия,
	|			ЗаказыОбороты.КПередачеПриход - ЗаказыОбороты.КОформлениюРасход КАК КОформлению
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Обороты(
	|					,,,
	|					ЗаказКлиента В
	|						(ВЫБРАТЬ
	|							ТаблицаЗаказов.Ссылка КАК Ссылка
	|						ИЗ
	|							ТаблицаЗаказов КАК ТаблицаЗаказов)
	|					И КодСтроки = 0) КАК ЗаказыОбороты
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ЗаказыКлиентов.ЗаказКлиента   КАК ЗаказКлиента,
	|			ЗаказыКлиентов.Номенклатура   КАК Номенклатура,
	|			ЗаказыКлиентов.Характеристика КАК Характеристика,
	|			ЗаказыКлиентов.КодСтроки      КАК КодСтроки,
	|			ЗаказыКлиентов.Склад          КАК Склад,
	|			ЗаказыКлиентов.Серия          КАК Серия,
	|			ЗаказыКлиентов.КОформлению    КАК КОформлению
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|		ГДЕ
	|			Активность
	|			И Регистратор = &Регистратор
	|			И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ЗаказыКлиентов.ЗаказКлиента В
	|				(ВЫБРАТЬ
	|					ТаблицаЗаказов.Ссылка КАК Ссылка
	|				ИЗ
	|					ТаблицаЗаказов КАК ТаблицаЗаказов)
	|			И КодСтроки = 0) КАК ТаблицаЗаказовСверхЗаказа
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЗаказовСверхЗаказа.ЗаказКлиента,
	|		ТаблицаЗаказовСверхЗаказа.Номенклатура,
	|		ТаблицаЗаказовСверхЗаказа.Характеристика,
	|		ТаблицаЗаказовСверхЗаказа.КодСтроки,
	|		ТаблицаЗаказовСверхЗаказа.Склад,
	|		ТаблицаЗаказовСверхЗаказа.Серия
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаЗаказовСверхЗаказа.КОформлению) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказДавальца,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказов.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|ГДЕ
	|	ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаПродукции
	|		ГДЕ
	|			ТаблицаПродукции.Ссылка = ТаблицаЗаказов.Ссылка
	|			И НЕ ТаблицаПродукции.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И НЕ ТаблицаПродукции.Отменено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ЗаказДавальца            КАК ЗаказДавальца,
	|	ВЫРАЗИТЬ(ТаблицаОстатков.ЗаказДавальца КАК Документ.ЗаказДавальца2_5).ПорядокРасчетов КАК ПорядокРасчетов,
	|	ТаблицаОстатков.Номенклатура             КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика           КАК Характеристика,
	|	ТаблицаОстатков.КодСтроки                КАК КодСтроки,
	|	ТаблицаОстатков.Склад                    КАК Склад,
	|	ТаблицаПродукции.Подразделение           КАК Подразделение,
	|	ТаблицаОстатков.Серия                    КАК Серия,
	|	ТаблицаОстатков.ЗаказДавальца.Назначение КАК Назначение,
	|	ТаблицаОстатков.Количество               КАК Количество,
	|	ТаблицаОстатков.Сумма                    КАК СуммаВзаиморасчетов,
	|
	|	ТаблицаПродукции.ДатаОтгрузки            КАК ДатаОтгрузки,
	|	
	|	ЕСТЬNULL(ТаблицаПродукции.Цена, 0)                                            КАК Цена,
	|	ЕСТЬNULL(ТаблицаПродукции.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|
	|	ЕСТЬNULL(ТаблицаПродукции.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаПродукции.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) =
	|														ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ                                    КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаПродукции.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) =
	|														ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаОстатков.Количество
	|		ИНАЧЕ ТаблицаОстатков.Количество / &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ                                    КАК КоличествоУпаковок,
	|	
	|	ЕСТЬNULL(ТаблицаПродукции.СтатусУказанияСерий, 0) КАК СтатусУказанияСерий,
	|	ТаблицаПродукции.Количество КАК КоличествоВЗаказе,
	|	ТаблицаПродукции.Сумма КАК Сумма,
	|	ТаблицаПродукции.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПродукции.СуммаСНДС КАК СуммаСНДС,
	|
	|	ТаблицаПродукции.СписатьНаРасходы         КАК СписатьНаРасходы,
	|	ТаблицаПродукции.Получатель               КАК Получатель,
	|	ТаблицаПродукции.СтатьяРасходов           КАК СтатьяРасходов,
	|	ТаблицаПродукции.АналитикаРасходов        КАК АналитикаРасходов,
	|	ТаблицаПродукции.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	ТаблицаОстатков.ЗаказДавальца.УслугаПоПереработке КАК УслугаПоПереработке
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаПродукции
	|	ПО ТаблицаОстатков.ЗаказДавальца = ТаблицаПродукции.Ссылка
	|	И ТаблицаОстатков.КодСтроки      = ТаблицаПродукции.КодСтроки
	|";
	
	Запрос.Текст =
		СтрЗаменить(
			Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ТаблицаПродукции.Упаковка", "ТаблицаПродукции.Номенклатура"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Возвращает информацию о распределении суммы документа на заказы и залоге за тару.
// 
// Параметры:
// 	СсылкаОбъект - ДокументСсылка.ОтчетДавальцу2_5
// 
// Возвращаемое значение:
// 	Строка - Адрес временного хранилища таблицы значений.
//
Функция СуммыПоЗаказам(СсылкаОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Продукция.ЗаказДавальца			КАК Заказ,
	|	Продукция.СуммаСНДС				КАК Сумма,
	|	Продукция.СуммаВзаиморасчетов	КАК СуммаВзаиморасчетов,
	|	Продукция.Номенклатура			КАК Номенклатура,
	|	Продукция.КодСтроки				КАК КодСтроки,
	|	&ЗаказДавальца					КАК ЗаказДавальца
	|ПОМЕСТИТЬ ВТПродукция
	|ИЗ &Таблица КАК Продукция
	|ГДЕ &УсловиеСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВЫБОР КОГДА ЕСТЬNULL(Продукция.Заказ.Номер, """") = """"
	|				ТОГДА Продукция.ЗаказДавальца
	|			ИНАЧЕ Продукция.Заказ
	|	КОНЕЦ			КАК Заказ,
	|	ВЫБОР КОГДА ЕСТЬNULL(Продукция.Заказ.Номер, """") = """"
	|				ТОГДА ЕСТЬNULL(Продукция.ЗаказДавальца.Дата, ДАТАВРЕМЯ(1,1,1))
	|			ИНАЧЕ ЕСТЬNULL(Продукция.Заказ.Дата, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ			КАК ДатаЗаказа,
	|	ВЫБОР КОГДА ЕСТЬNULL(Продукция.Заказ.Номер, """") = """"
	|				ТОГДА ЕСТЬNULL(Продукция.ЗаказДавальца.ДатаСогласования, ДАТАВРЕМЯ(1,1,1))
	|			ИНАЧЕ ЕСТЬNULL(Продукция.Заказ.ДатаСогласования, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ			КАК ДатаСогласования,
	|	Продукция.КодСтроки = 0 КАК СверхЗаказа,
	|	СУММА(ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(Продукция.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА Продукция.Сумма
	|		ИНАЧЕ 0 
	|	КОНЕЦ)			КАК СуммаПлатежа,
	|	СУММА(ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(Продукция.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА Продукция.СуммаВзаиморасчетов
	|		ИНАЧЕ 0
	|	КОНЕЦ)			КАК СуммаВзаиморасчетов,
	|	0				КАК СуммаЗалогаЗаТару,
	|	0				КАК СуммаВзаиморасчетовПоТаре
	|ИЗ
	|	ВТПродукция КАК Продукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ЕСТЬNULL(Продукция.Заказ.Номер, """") = """"
	|				ТОГДА Продукция.ЗаказДавальца
	|			ИНАЧЕ Продукция.Заказ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ЕСТЬNULL(Продукция.Заказ.Номер, """") = """"
	|				ТОГДА ЕСТЬNULL(Продукция.ЗаказДавальца.Дата, ДАТАВРЕМЯ(1,1,1))
	|			ИНАЧЕ ЕСТЬNULL(Продукция.Заказ.Дата, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ЕСТЬNULL(Продукция.Заказ.Номер, """") = """"
	|				ТОГДА ЕСТЬNULL(Продукция.ЗаказДавальца.ДатаСогласования, ДАТАВРЕМЯ(1,1,1))
	|			ИНАЧЕ ЕСТЬNULL(Продукция.Заказ.ДатаСогласования, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ,
	|	Продукция.КодСтроки = 0
	|";
	
	Если ТипЗнч(СсылкаОбъект) = Тип("ДокументСсылка.ОтчетДавальцу2_5") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "Документ.ОтчетДавальцу2_5.Продукция");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаказДавальца", "Продукция.Ссылка.ЗаказДавальца");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСсылка", "Продукция.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка",СсылкаОбъект);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСсылка", "ИСТИНА");
		Запрос.УстановитьПараметр("Таблица",       СсылкаОбъект.Продукция);
		Запрос.УстановитьПараметр("ЗаказДавальца", СсылкаОбъект.ЗаказДавальца);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текст основания по данным документа и указанному порядку расчетов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ОтчетДавальцу2_5 - Объект документа, по которому необходимо получить текст основания
//	ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов - Порядок расчетов.
//
// Возвращаемое значение:
//	Структура- Структура с наименованием, датой и номером основания.
//
Функция СтруктураОснования(Объект, ПорядокРасчетов)
	
	СтруктураОснование = Новый Структура;
	СтруктураОснование.Вставить("Основание");
	СтруктураОснование.Вставить("ОснованиеНомер");
	СтруктураОснование.Вставить("ОснованиеДата");
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.НаименованиеДляПечати КАК Основание,
			|	ДоговорыКонтрагентов.Дата КАК ОснованиеДата,
			|	ДоговорыКонтрагентов.Номер КАК ОснованиеНомер
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Ссылка = &Ссылка
			|");
		Запрос.УстановитьПараметр("Ссылка", Объект.Договор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураОснование.Основание = СокрЛП(Выборка.Основание);
			СтруктураОснование.ОснованиеДата = Выборка.ОснованиеДата;
			СтруктураОснование.ОснованиеНомер = СокрЛП(Выборка.ОснованиеНомер);
		КонецЕсли;
		
	ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам
		И Объект.ОтчетПоЗаказам Тогда
		
		МассивЗаказов = Неопределено;
		Если ЗначениеЗаполнено(Объект.ЗаказДавальца) Тогда
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(Объект.ЗаказДавальца);
		ИначеЕсли Объект.Продукция.Количество() <> 0 Тогда 
			Если ТипЗнч(Объект) = Тип("Структура") Тогда
				МассивЗаказов = Объект.Продукция.ВыгрузитьКолонку("ЗаказДавальца");
			Иначе
				МассивЗаказов = Объект.Продукция.Выгрузить(,"ЗаказДавальца").ВыгрузитьКолонку("ЗаказДавальца");
			КонецЕсли;
		КонецЕсли;
		
		Если МассивЗаказов <> Неопределено Тогда
		
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЗаказыДавальца2_5.НомерПоДаннымПартнера КАК НомерПоДаннымПартнера,
				|	ЗаказыДавальца2_5.ДатаПоДаннымПартнера  КАК ДатаПоДаннымПартнера,
				|	ЗаказыДавальца2_5.Номер                КАК Номер,
				|	ЗаказыДавальца2_5.Дата                 КАК Дата,
				|	&СинонимЗаказа                      КАК Синоним
				|ИЗ
				|	Документ.ЗаказДавальца2_5 КАК ЗаказыДавальца2_5
				|ГДЕ
				|	ЗаказыДавальца2_5.Ссылка В(&МассивЗаказов)
				|");
			Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
			Запрос.УстановитьПараметр("СинонимЗаказа", НСтр("ru = 'Заказ давальца';
															|en = 'Subcontracting sales order'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТекстПоЗаказам = "";
			ОдноОснование = Выборка.Количество() = 1;
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.НомерПоДаннымПартнера) И ЗначениеЗаполнено(Выборка.ДатаПоДаннымПартнера) Тогда
					ТекстПоЗаказам = ТекстПоЗаказам + ", " +
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 № %2 от %3';
								|en = '%1 No. %2 from %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
							Выборка.Синоним, Выборка.НомерПоДаннымПартнера, Формат(Выборка.ДатаПоДаннымПартнера, "ДЛФ=DD"));
					ДатаПоЗаказам  = Выборка.ДатаПоДаннымПартнера;
					НомерПоЗаказам = Выборка.НомерПоДаннымПартнера;
				Иначе
					НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
					ЗаголовокДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 № %2 от %3';
							|en = '%1 No. %2 from %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
						Выборка.Синоним, НомерНаПечать, Формат(Выборка.Дата, "ДЛФ=DD"));
					ТекстПоЗаказам = ТекстПоЗаказам + ", " + ЗаголовокДокумента;
					ДатаПоЗаказам  = Выборка.Дата;
					НомерПоЗаказам = ?(ОдноОснование,ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер),"");
				КонецЕсли;
			КонецЦикла;
			СтруктураОснование.Основание =  СокрЛП(Сред(ТекстПоЗаказам, 3));
			СтруктураОснование.ОснованиеДата = ?(ОдноОснование, ДатаПоЗаказам, "");
			СтруктураОснование.ОснованиеНомер = НомерПоЗаказам;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОснование; // Возврат значения по умолчанию
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурнале

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место оформления.
//
// Параметры:
//  Параметры - Структура - параметры формирования текста гиперссылки.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока, Неопределено - текст гиперссылки перехода в рабочее место оформления передач.
//
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
	 Или Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыОрганизаций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстСсылки = "Обработка.ЖурналДокументовПриемаВПереработку2_5.Форма.КОформлениюНакладных/СтраницаОтчеты";
	
	ЕстьДокументыКОформлению = Обработки.ЖурналДокументовПриемаВПереработку2_5.ЕстьДокументыКОформлению(
									Параметры, Перечисления.ХозяйственныеОперации.ОтчетДавальцу2_5);
	
	ЦветГиперссылки = ?(ЕстьДокументыКОформлению, Неопределено, ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'Отчеты';
											|en = 'Reports'"),, ЦветГиперссылки,, ТекстСсылки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
