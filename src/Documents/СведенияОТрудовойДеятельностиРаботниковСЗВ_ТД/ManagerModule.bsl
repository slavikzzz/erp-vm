#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Сотрудники.Сотрудник, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаЕФС_1";
	КомандаПечати.Представление = НСтр("ru = 'ЕФС-1';
										|en = 'Unified Information Form-1'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИсключитьПередачуВКабинетСотрудника");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаСЗВ_ТД";
	КомандаПечати.Представление = НСтр("ru = 'СЗВ-ТД';
										|en = 'SZV-TD'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаСЗВ_ТД") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаСЗВ_ТД", 
			НСтр("ru = 'СЗВ-ТД';
				|en = 'SZV-TD'"), 
			ПечатнаяФормаСЗВ_ТД(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаЕФС_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаЕФС_1", 
			"ЕФС-1", 
			ПечатнаяФормаЕФС_1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяФайла(Организация, Дата, УИД = Неопределено, Год = 0) Экспорт

	Если ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год) Тогда 
		Возврат ПерсонифицированныйУчет.ИмяФайлаЕФС1(Организация, Дата, УИД);
	КонецЕсли;
	
	Если УИД = Неопределено Тогда
		УИД = Новый УникальныйИдентификатор;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрационныйНомерПФР");
	
	Возврат "ПФР"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.РегистрационныйНомерПФР), Параметры.РегистрационныйНомерПФР, "")
			+ "_СЗВ-ТД"
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + УИД;
			
КонецФункции	

Функция ВыборкаПоШапкеДокумента(МассивОбъектов)	
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументовДополненные(Запрос.МенеджерВременныхТаблиц, МассивОбъектов);  
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеДокументовДополненные";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаПоСотрудникам(МассивОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументовДополненные(Запрос.МенеджерВременныхТаблиц, МассивОбъектов);  
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументовДополненные.Ссылка КАК Ссылка,
		|	ДанныеДокументовДополненные.Дата КАК Дата,
		|	ДанныеДокументовДополненные.Номер КАК Номер,
		|	ДанныеДокументовДополненные.Организация КАК Организация,
		|	ДанныеДокументовДополненные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеДокументовДополненные.Наименование КАК Наименование,
		|	ДанныеДокументовДополненные.НаименованиеПолное КАК НаименованиеПолное,
		|	ДанныеДокументовДополненные.ИНН КАК ИНН,
		|	ДанныеДокументовДополненные.КПП КАК КПП,
		|	ДанныеДокументовДополненные.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
		|	ДанныеДокументовДополненные.ОГРН КАК ОГРН,
		|	ДанныеДокументовДополненные.Ответственный КАК Ответственный,
		|	ДанныеДокументовДополненные.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
		|	ДанныеДокументовДополненные.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	ДанныеДокументовДополненные.КодПоОКПО КАК КодПоОКПО,
		|	ДанныеДокументовДополненные.НаименованиеОКОПФ КАК НаименованиеОКОПФ,
		|	ДанныеДокументовДополненные.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	ДанныеДокументовДополненные.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР,
		|	ДанныеДокументовДополненные.ОтчетныйПериод КАК ОтчетныйПериод,
		|	ДанныеДокументовДополненные.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДанныеДокументовДополненные.Руководитель КАК Руководитель,
		|	ДанныеДокументовДополненные.ФамилияРуководителя КАК ФамилияРуководителя,
		|	ДанныеДокументовДополненные.ИмяРуководителя КАК ИмяРуководителя,
		|	ДанныеДокументовДополненные.ОтчествоРуководителя КАК ОтчествоРуководителя,
		|	ДанныеДокументовДополненные.РуководительРасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ДанныеДокументовДополненные.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
		|	ДанныеДокументовДополненные.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
		|	ДанныеДокументовДополненные.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
		|	ДанныеДокументовДополненные.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Сотрудник КАК Сотрудник,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Фамилия КАК Фамилия,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Имя КАК Имя,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Отчество КАК Отчество,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ДатаРождения КАК ДатаРождения,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ИНН КАК ИННРаботника,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.КодКатегории КАК КодКатегории,
		|	ВЫБОР
		|		КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Гражданство = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ТОГДА ""000""
		|		ИНАЧЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Гражданство.Код
		|	КОНЕЦ КАК Гражданство,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПродолжении КАК ЗаявлениеОПродолжении,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПредоставлении КАК ЗаявлениеОПредоставлении,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.НомерСтроки КАК НомерСтрокиСотрудника,
		|	ЕСТЬNULL(ЗаявленияОВеденииТрудовыхКнижекОПродолжении.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаявлениеОПродолженииДата,
		|	ВЫБОР
		|		КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПродолженииОтмена
		|			ТОГДА ""2""
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЗаявлениеОПродолженииСтатус,
		|	ЕСТЬNULL(ЗаявленияОВеденииТрудовыхКнижекОПредоставлении.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаявлениеОПредоставленииДата,
		|	ВЫБОР
		|		КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПредоставленииОтмена
		|			ТОГДА ""2""
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЗаявлениеОПредоставленииСтатус,
		|	ВЫБОР
		|		КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПродолженииОтмена
		|			ТОГДА ""Х""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОтменаЗаявленияОПродолжении,
		|	ВЫБОР
		|		КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПредоставленииОтмена
		|			ТОГДА ""Х""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОтменаЗаявленияОПредоставлении
		|ПОМЕСТИТЬ ВТДанныеСотрудников
		|ИЗ
		|	ВТДанныеДокументовДополненные КАК ДанныеДокументовДополненные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижекОПродолжении
		|			ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПродолжении = ЗаявленияОВеденииТрудовыхКнижекОПродолжении.Заявление
		|				И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Сотрудник = ЗаявленияОВеденииТрудовыхКнижекОПродолжении.ФизическоеЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижекОПредоставлении
		|			ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ЗаявлениеОПредоставлении = ЗаявленияОВеденииТрудовыхКнижекОПредоставлении.Заявление
		|				И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Сотрудник = ЗаявленияОВеденииТрудовыхКнижекОПредоставлении.ФизическоеЛицо
		|		ПО ДанныеДокументовДополненные.Ссылка = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСотрудников.Ссылка КАК Ссылка,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.НомерСтроки КАК НомерСтроки,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ВидМероприятия КАК ВидМероприятия,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Подразделение КАК Подразделение,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Должность КАК Должность,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.РазрядКатегория КАК РазрядКатегория,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаС КАК ДатаС,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаПо КАК ДатаПо,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаОтмены КАК ДатаОтмены,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ИдМероприятия КАК ИдМероприятия,
		|	ДанныеСотрудников.Дата КАК Дата,
		|	ДанныеСотрудников.Организация КАК Организация,
		|	ДанныеСотрудников.ОтчетныйПериод КАК ОтчетныйПериод,
		|	ДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ДанныеСотрудников.Сотрудник КАК ФизическоеЛицо,
		|	ДанныеСотрудников.НомерСтрокиСотрудника КАК НомерСтрокиСотрудника,
		|	ДанныеСотрудников.Фамилия КАК Фамилия,
		|	ДанныеСотрудников.Имя КАК Имя,
		|	ДанныеСотрудников.Отчество КАК Отчество,
		|	ДанныеСотрудников.ДатаРождения КАК ДатаРождения,
		|	ДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ДанныеСотрудников.ИННРаботника КАК ИННРаботника,
		|	ДанныеСотрудников.КодКатегории КАК КодКатегорииЗЛ,
		|	ДанныеСотрудников.Гражданство КАК Гражданство,
		|	ДанныеСотрудников.ЗаявлениеОПродолжении КАК ЗаявлениеОПродолжении,
		|	ДанныеСотрудников.ЗаявлениеОПредоставлении КАК ЗаявлениеОПредоставлении,
		|	ДанныеСотрудников.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
		|	ДанныеСотрудников.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ДанныеСотрудников.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
		|	ДанныеСотрудников.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	ДанныеСотрудников.ИНН КАК ИНН,
		|	ДанныеСотрудников.КПП КАК КПП,
		|	ДанныеСотрудников.Руководитель КАК Руководитель,
		|	ДанныеСотрудников.РуководительРасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ДанныеСотрудников.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДанныеСотрудников.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
		|	ДанныеСотрудников.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
		|	ДанныеСотрудников.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
		|	ДанныеСотрудников.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
		|	ВЫБОР
		|		КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаОтмены > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""Х""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПризнакОтмены,
		|	ДанныеСотрудников.ЗаявлениеОПродолженииДата КАК ЗаявлениеОПродолженииДата,
		|	ДанныеСотрудников.ЗаявлениеОПродолженииСтатус КАК ЗаявлениеОПродолженииСтатус,
		|	ДанныеСотрудников.ЗаявлениеОПредоставленииДата КАК ЗаявлениеОПредоставленииДата,
		|	ДанныеСотрудников.ЗаявлениеОПредоставленииСтатус КАК ЗаявлениеОПредоставленииСтатус,
		|	ДанныеСотрудников.ОтменаЗаявленияОПродолжении КАК ОтменаЗаявленияОПродолжении,
		|	ДанныеСотрудников.ОтменаЗаявленияОПредоставлении КАК ОтменаЗаявленияОПредоставлении,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ТрудоваяФункция.Описание КАК ТрудоваяФункцияОписание,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ТрудоваяФункция.КодПрофессиональнойДеятельности КАК ТрудоваяФункцияКод,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Сведения КАК Сведения,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.КодПоОКЗ КАК КодПоОКЗ,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.УдаленностьРаботы КАК УдаленностьРаботы,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.СокращенностьГрафика КАК СокращенностьГрафика,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОписаниеДолжности КАК ОписаниеДолжности,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольнения.ДокументОснование КАК ОснованиеУвольненияДокументОснование
		|ИЗ
		|	ВТДанныеСотрудников КАК ДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|			ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка.Организация = МероприятияПереданные.Организация
		|				И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ИдМероприятия = МероприятияПереданные.ИдМероприятия
		|				И (НЕ МероприятияПереданные.Отменено)
		|		ПО ДанныеСотрудников.Ссылка = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка
		|			И ДанныеСотрудников.Сотрудник = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтрокиСотрудника,
		|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции	

Процедура СоздатьВТДанныеДокументовДополненные(МенеджерВременныхТаблиц, МассивОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = МассивОбъектов;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка КАК Ссылка,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Номер КАК Номер,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Дата КАК Дата,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Организация КАК Организация,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ОтчетныйПериод КАК ОтчетныйПериод,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ДокументПринятВПФР КАК ДокументПринятВПФР,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Руководитель КАК Руководитель,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ФайлСформирован КАК ФайлСформирован,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ответственный КАК Ответственный,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательОКФС КАК ПрежнийСтраховательОКФС,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательОКОГУ КАК ПрежнийСтраховательОКОГУ,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательОКПО КАК ПрежнийСтраховательОКПО,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательОКВЭД КАК ПрежнийСтраховательОКВЭД,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательОГРН КАК ПрежнийСтраховательОГРН,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрежнийСтраховательКодКатегории КАК ПрежнийСтраховательКодКатегории
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|ГДЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "Руководитель", "ВТДанныеДокументов");  
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Дата КАК Дата,
		|	ДанныеДокументов.Номер КАК Номер,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.Ответственный КАК Ответственный,
		|	ДанныеДокументов.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР,
		|	ДанныеДокументов.ОтчетныйПериод КАК ОтчетныйПериод,
		|	ДанныеДокументов.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
		|	ДанныеДокументов.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
		|	ДанныеДокументов.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
		|	ДанныеДокументов.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
		|	ДанныеДокументов.ПрежнийСтраховательОКФС КАК ПрежнийСтраховательОКФС,
		|	ДанныеДокументов.ПрежнийСтраховательОКОГУ КАК ПрежнийСтраховательОКОГУ,
		|	ДанныеДокументов.ПрежнийСтраховательОКПО КАК ПрежнийСтраховательОКПО,
		|	ДанныеДокументов.ПрежнийСтраховательОКВЭД КАК ПрежнийСтраховательОКВЭД,
		|	ДанныеДокументов.ПрежнийСтраховательОГРН КАК ПрежнийСтраховательОГРН,
		|	ДанныеДокументов.ПрежнийСтраховательКодКатегории КАК ПрежнийСтраховательКодКатегории,
		|	ЕСТЬNULL(ДанныеДокументов.ДолжностьРуководителя.Наименование, """") КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.ФИОПолные, """") КАК Руководитель,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.Фамилия, """") КАК ФамилияРуководителя,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.Имя, """") КАК ИмяРуководителя,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.Отчество, """") КАК ОтчествоРуководителя,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.РасшифровкаПодписи, """") КАК РуководительРасшифровкаПодписи,
		|	СведенияОбОрганизациях.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СведенияОбОрганизациях.Наименование КАК Наименование,
		|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
		|	СведенияОбОрганизациях.ИНН КАК ИНН,
		|	СведенияОбОрганизациях.КПП КАК КПП,
		|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
		|	СведенияОбОрганизациях.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
		|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
		|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
		|	СведенияОбОрганизациях.КодПоОКПО КАК ОКПО,
		|	СведенияОбОрганизациях.КодОКФС КАК КодОКФС,
		|	СведенияОбОрганизациях.КодОКВЭД КАК КодОКВЭД,
		|	СведенияОбОрганизациях.КодОКВЭД2 КАК КодОКВЭД2,
		|	СведенияОбОрганизациях.НаименованиеОКОПФ КАК НаименованиеОКОПФ
		|ПОМЕСТИТЬ ВТДанныеДокументовДополненные
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
		|		ПО ДанныеДокументов.Организация = СведенияОбОрганизациях.Организация
		|			И ДанныеДокументов.Дата = СведенияОбОрганизациях.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьВыходнойФайл(Ссылка) 
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ВыборкаПоШапкеДокумента = ВыборкаПоШапкеДокумента(МассивСсылок);
	ВыборкаПоШапкеДокумента.Следующий();
		
	ВыборкаПоРаботникам = ВыборкаПоСотрудникам(МассивСсылок);
	
	Если ВыборкаПоШапкеДокумента.Дата >= Дата(2023, 1, 1) Тогда 
		Возврат СформироватьВыходнойФайлЕФС1(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.Дата < РегистрыСведений.ДатыВступленияВСилуНА.ДатаВступленияВСилуНА("ОбновлениеФорматаСЗВ_ТДСогласноПостановлению730п") Тогда
		Возврат ВыходнойФайл20200101(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам);
	КонецЕсли;
	
	Возврат ВыходнойФайл20210701(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам);
	
КонецФункции

Функция ВыходнойФайл20200101(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам)
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР_ЭТК_2019XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматСЗВ_ТД = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_ТД");
	
	ФорматЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ТД.ЗЛ.Значение);
	ФорматСЗВ_ТД.Удалить("ЗЛ");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ТД.ДатаЗаполнения));
	ФорматСЗВ_ТД.Удалить("ДатаЗаполнения");
	
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ТД.Руководитель));
	ФорматСЗВ_ТД.Удалить("Руководитель");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/СЗВ-ТД/2019-12-20");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:АФ5", "http://пф.рф/АФ/2018-12-07");
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Данные формы и страхователя
	НаборЗаписейРаботодатель = ФорматСЗВ_ТД.Работодатель.Значение;
	НаименованиеОрганизации = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.НаименованиеПолное));
	ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(НаименованиеОрганизации);
	НаборЗаписейРаботодатель.НаименованиеОрганизации = НаименованиеОрганизации;
	НаборЗаписейРаботодатель.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейРаботодатель.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейРаботодатель.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейРаботодатель.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_ТД.Работодатель.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_ТД.Работодатель.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	НаборЗаписейОтчетныйПериод = ФорматСЗВ_ТД.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Месяц = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(Месяц(ВыборкаПоШапкеДокумента.ОтчетныйПериод)), 2);
	НаборЗаписейОтчетныйПериод.КалендарныйГод = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-ТД", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_ТД);
	
	ФорматТрудоваяДеятельность = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.ТрудоваяДеятельность.Значение);
	ФорматЗЛ.Удалить("ТрудоваяДеятельность");
	
	ФорматМероприятие = ОбщегоНазначения.СкопироватьРекурсивно(ФорматТрудоваяДеятельность.Мероприятие.Значение);
	ФорматТрудоваяДеятельность.Удалить("Мероприятие");
	
	ФорматМероприятиеОтменяемое = ОбщегоНазначения.СкопироватьРекурсивно(ФорматТрудоваяДеятельность.МероприятиеОтменяемое.Значение);
	ФорматТрудоваяДеятельность.Удалить("МероприятиеОтменяемое");
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтрокиСотрудника") Цикл
	
		НаборЗаписейЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ);
		
		// Данные по сотруднику
		Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
		
		НаборЗаписейФИО = НаборЗаписейЗЛ.УТ2__ФИО.Значение;
		НаборЗаписейФИО.УТ2__Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.УТ2__Имя = ВРег(Имя);
		НаборЗаписейФИО.УТ2__Отчество = ВРег(Отчество);
		
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.УТ2__ФИО, "УТ2__Отчество");
		
		НаборЗаписейЗЛ.ДатаРождения.Значение = Формат(ВыборкаПоРаботникам.ДатаРождения, "ДФ=yyyy-MM-dd");
		
		НаборЗаписейЗЛ.УТ2__СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПредоставленииДата) Тогда
			ЗаявлениеОПредоставлении = НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПредоставлении.Значение;
			ЗаявлениеОПредоставлении.Дата.Значение = Формат(ВыборкаПоРаботникам.ЗаявлениеОПредоставленииДата, "ДФ=yyyy-MM-dd");
			ЗаявлениеОПредоставлении.СтатусЗаявленияОПредоставлении.Значение = ВыборкаПоРаботникам.ЗаявлениеОПредоставленииСтатус;
		Иначе
			НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПредоставлении.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПродолженииДата) Тогда
			ЗаявлениеОПродолжении = НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПродолжении.Значение;
			ЗаявлениеОПродолжении.Дата.Значение = Формат(ВыборкаПоРаботникам.ЗаявлениеОПродолженииДата, "ДФ=yyyy-MM-dd");
			ЗаявлениеОПродолжении.СтатусЗаявленияОПродолжении.Значение = ВыборкаПоРаботникам.ЗаявлениеОПродолженииСтатус;
		Иначе
			НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПродолжении.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПредоставленииДата) 
			И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПродолжении) Тогда
			НаборЗаписейЗЛ.Заявления.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		УзелСотрудника = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ЗЛ", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейЗЛ);
		
		УзелТрудоваяДеятельность = Неопределено;
		
		Мероприятия = Новый Массив;
		ОтменяемыеМероприятия = Новый Массив;
		
		Пока ВыборкаПоРаботникам.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВидМероприятия) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ДатаОтмены) Тогда
				
				НаборЗаписейМероприятиеОтменяемое = ОбщегоНазначения.СкопироватьРекурсивно(ФорматМероприятиеОтменяемое);
				НаборЗаписейМероприятиеОтменяемое.UUID.Значение = Строка(ВыборкаПоРаботникам.ИдМероприятия);
				НаборЗаписейМероприятиеОтменяемое.ДатаМероприятия.Значение = Формат(ВыборкаПоРаботникам.ДатаМероприятия, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятиеОтменяемое.ДатаОтмены.Значение = Формат(ВыборкаПоРаботникам.ДатаОтмены, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятиеОтменяемое.Вид.Значение = Перечисления.ВидыМероприятийТрудовойДеятельности.Код(ВыборкаПоРаботникам.ВидМероприятия);
				НаборЗаписейМероприятиеОтменяемое.ЯвляетсяСовместителем.Значение = ?(ВыборкаПоРаботникам.ЯвляетсяСовместителем, 1, 0);
				
				УзелМероприятие = ВывестиВФайлМероприятие(УзелСотрудника, УзелТрудоваяДеятельность, "МероприятиеОтменяемое", НаборЗаписейМероприятиеОтменяемое);
				
			Иначе
				
				НаборЗаписейМероприятие = ОбщегоНазначения.СкопироватьРекурсивно(ФорматМероприятие);
				НаборЗаписейМероприятие.UUID.Значение = Строка(ВыборкаПоРаботникам.ИдМероприятия);
				НаборЗаписейМероприятие.Дата.Значение = Формат(ВыборкаПоРаботникам.ДатаМероприятия, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятие.Вид.Значение = Перечисления.ВидыМероприятийТрудовойДеятельности.Код(ВыборкаПоРаботникам.ВидМероприятия);
				
				НаборЗаписейМероприятие.Сведения.Значение = СокрЛП(ВыборкаПоРаботникам.Сведения);
				
				Если ВыборкаПоРаботникам.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии
					И ЗначениеЗаполнено(ВыборкаПоРаботникам.ОписаниеДолжности) Тогда
					
					НаборЗаписейМероприятие.Должность.Значение = СокрЛП(ВыборкаПоРаботникам.ОписаниеДолжности);
					
				Иначе
					
					НаборЗаписейМероприятие.Должность.Значение = СокрЛП(ВыборкаПоРаботникам.ПредставлениеДолжности) 
						+ ?(ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПоРееструДолжностей), ", " + СокрЛП(ВыборкаПоРаботникам.КодПоРееструДолжностей), "")
						+ ?(ЗначениеЗаполнено(ВыборкаПоРаботникам.РазрядКатегория), ", " + ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеРазрядаКатегории(
						ВыборкаПоРаботникам.РазрядКатегория), "");
					
				КонецЕсли;
				
				НаборЗаписейМероприятие.ЯвляетсяСовместителем.Значение = ?(ВыборкаПоРаботникам.ЯвляетсяСовместителем, "1", "0");
				
				НаборЗаписейМероприятие.СтруктурноеПодразделение.Значение = СокрЛП(ВыборкаПоРаботникам.ПредставлениеПодразделения);
				
				ТрудоваяФункцияОписание = ЭлектронныеТрудовыеКнижки.ОписаниеТрудовойФункции(
					ВыборкаПоРаботникам.ТрудоваяФункцияОписание, ВыборкаПоРаботникам.ТрудоваяФункция);
				НаборЗаписейМероприятие.ВидПР.Значение = ТрудоваяФункцияОписание;
				НаборЗаписейМероприятие.КодВФ.Значение = СокрЛП(ВыборкаПоРаботникам.ТрудоваяФункцияКод);
				
				НаборЗаписейМероприятие.ДатаС.Значение = Формат(ВыборкаПоРаботникам.ДатаС, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятие.ДатаПо.Значение = Формат(ВыборкаПоРаботникам.ДатаПо, "ДФ=yyyy-MM-dd");
				
				Если ВыборкаПоРаботникам.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение Тогда
					
					НаборЗаписейМероприятие.Причина.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеУвольненияТекстОснования);
					
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.УТ2__НормативныйДокумент = КадровыйУчет.НормативныйДокументОснованияУвольнения(ВыборкаПоРаботникам.ОснованиеУвольнения);
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.УТ2__Статья = ВыборкаПоРаботникам.ОснованиеУвольненияСтатья;
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.УТ2__Часть = ВыборкаПоРаботникам.ОснованиеУвольненияЧасть;
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.УТ2__Пункт = ВыборкаПоРаботникам.ОснованиеУвольненияПункт;
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.УТ2__Подпункт = ВыборкаПоРаботникам.ОснованиеУвольненияПодпункт;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеУвольненияАбзац) Тогда
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеУвольненияПункт) Тогда
							НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.УТ2__Подпункт = СтрШаблон(НСтр("ru = 'Абзац %1';
																												|en = 'Paragraph %1'"), ВыборкаПоРаботникам.ОснованиеУвольненияАбзац);
						Иначе
							НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.УТ2__Пункт = СтрШаблон(НСтр("ru = 'Абзац %1';
																											|en = 'Paragraph %1'"), ВыборкаПоРаботникам.ОснованиеУвольненияАбзац);
						КонецЕсли;
					КонецЕсли;
					
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "УТ2__НормативныйДокумент");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "УТ2__Статья");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "УТ2__Часть");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "УТ2__Пункт");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "УТ2__Подпункт");
				Иначе
					НаборЗаписейМероприятие.ОснованиеУвольнения.НеВыводитьВФайл = Истина;
				КонецЕсли;
				
				НаборЗаписейОснование = НаборЗаписейМероприятие.Основание.Значение;
				НаборЗаписейОснование.Наименование.Значение = СокрЛП(ВыборкаПоРаботникам.НаименованиеДокументаОснования);
				НаборЗаписейОснование.Дата.Значение = Формат(ВыборкаПоРаботникам.ДатаДокументаОснования, "ДФ=yyyy-MM-dd");;
				НаборЗаписейОснование.Номер.Значение = СокрЛП(ВыборкаПоРаботникам.НомерДокументаОснования);
				НаборЗаписейОснование.Серия.Значение = СокрЛП(ВыборкаПоРаботникам.СерияДокументаОснования);
				
				ВтороеОснование = Неопределено;
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НаименованиеВторогоДокументаОснования)
					Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ДатаВторогоДокументаОснования)
					Или ЗначениеЗаполнено(ВыборкаПоРаботникам.СерияВторогоДокументаОснования)
					Или ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерВторогоДокументаОснования) Тогда
					
					ВтороеОснование = ОбщегоНазначения.СкопироватьРекурсивно(НаборЗаписейОснование);
					ВтороеОснование.Наименование.Значение = СокрЛП(ВыборкаПоРаботникам.НаименованиеВторогоДокументаОснования);
					ВтороеОснование.Дата.Значение = Формат(ВыборкаПоРаботникам.ДатаВторогоДокументаОснования, "ДФ=yyyy-MM-dd");;
					ВтороеОснование.Серия.Значение = СокрЛП(ВыборкаПоРаботникам.СерияВторогоДокументаОснования);
					ВтороеОснование.Номер.Значение = СокрЛП(ВыборкаПоРаботникам.НомерВторогоДокументаОснования);
					ПерсонифицированныйУчет.УстановитьВыводВФайл(ВтороеОснование.Серия, "Значение");
					
				КонецЕсли;
				
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.Сведения, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.Должность, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.СтруктурноеПодразделение, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.ВидПР, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.КодВФ, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.Причина, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.ДатаС, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.ДатаПо, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейОснование.Серия, "Значение");
				
				УзелМероприятие = ВывестиВФайлМероприятие(УзелСотрудника, УзелТрудоваяДеятельность, "Мероприятие", НаборЗаписейМероприятие);
				Если ВтороеОснование <> Неопределено Тогда
					УзелОснование = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелМероприятие, "Основание", "");
					ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелОснование, ВтороеОснование);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	НаборЗаписейРуководитель.Руководитель.Значение.УТ2__Должность.Значение = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя));
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.УТ2__ФИО.Значение;
	НаборЗаписейФИО.УТ2__Фамилия = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя));
	НаборЗаписейФИО.УТ2__Имя = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя));
	НаборЗаписейФИО.УТ2__Отчество = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя));
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.УТ2__ФИО, "УТ2__Отчество");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ5__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ5__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции // СформироватьВыходнойФайл()

Функция ВыходнойФайл20210701(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам)
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР_ЭТК_2021XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматСЗВ_ТД = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_ТД");
	
	ФорматЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ТД.ЗЛ.Значение);
	ФорматСЗВ_ТД.Удалить("ЗЛ");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ТД.ДатаЗаполнения));
	ФорматСЗВ_ТД.Удалить("ДатаЗаполнения");
	
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ТД.Руководитель));
	ФорматСЗВ_ТД.Удалить("Руководитель");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/СЗВ-ТД/2020-09-26");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:АФ5", "http://пф.рф/АФ/2018-12-07");
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Данные формы и страхователя
	НаборЗаписейРаботодатель = ФорматСЗВ_ТД.Работодатель.Значение;
	НаименованиеОрганизации = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.НаименованиеПолное));
	ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(НаименованиеОрганизации);
	НаборЗаписейРаботодатель.НаименованиеОрганизации = НаименованиеОрганизации;
	НаборЗаписейРаботодатель.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейРаботодатель.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейРаботодатель.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейРаботодатель.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_ТД.Работодатель.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_ТД.Работодатель.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	// Данные прежнего страхователя
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПрежнийСтраховательНаименованиеПолное) Тогда
		
		НаборЗаписейРаботодатель = ФорматСЗВ_ТД.РаботодательЗаКоторого.Значение;
		ПрежнийСтраховательНаименованиеПолное = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ПрежнийСтраховательНаименованиеПолное));
		ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(ПрежнийСтраховательНаименованиеПолное);
		НаборЗаписейРаботодатель.НаименованиеОрганизации = ПрежнийСтраховательНаименованиеПолное;
		НаборЗаписейРаботодатель.УТ2__РегНомер = СокрЛП(ВыборкаПоШапкеДокумента.ПрежнийСтраховательРегистрационныйНомерПФР);
		НаборЗаписейРаботодатель.УТ2__ИНН = СокрЛП(ВыборкаПоШапкеДокумента.ПрежнийСтраховательИНН);
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПрежнийСтраховательКПП) Тогда
			НаборЗаписейРаботодатель.УТ2__КПП = СокрЛП(ВыборкаПоШапкеДокумента.ПрежнийСтраховательКПП);
		Иначе
			НаборЗаписейРаботодатель.Удалить("УТ2__КПП");
			СтрокаПоляКПП = ФорматСЗВ_ТД.РаботодательЗаКоторого.Поля.Найти("УТ2__КПП", "ИмяПоля");
			Если СтрокаПоляКПП <> Неопределено Тогда
				ФорматСЗВ_ТД.РаботодательЗаКоторого.Поля.Удалить(СтрокаПоляКПП);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ФорматСЗВ_ТД.РаботодательЗаКоторого.НеВыводитьВФайл = Истина;
	КонецЕсли;
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-ТД", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_ТД);
	
	ФорматТрудоваяДеятельность = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.ТрудоваяДеятельность.Значение);
	ФорматЗЛ.Удалить("ТрудоваяДеятельность");
	
	ФорматМероприятие = ОбщегоНазначения.СкопироватьРекурсивно(ФорматТрудоваяДеятельность.Мероприятие.Значение);
	ФорматТрудоваяДеятельность.Удалить("Мероприятие");
	
	ФорматМероприятиеОтменяемое = ОбщегоНазначения.СкопироватьРекурсивно(ФорматТрудоваяДеятельность.МероприятиеОтменяемое.Значение);
	ФорматТрудоваяДеятельность.Удалить("МероприятиеОтменяемое");
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтрокиСотрудника") Цикл
	
		НаборЗаписейЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ);
		
		// Данные по сотруднику
		Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
		
		НаборЗаписейФИО = НаборЗаписейЗЛ.УТ2__ФИО.Значение;
		НаборЗаписейФИО.УТ2__Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.УТ2__Имя = ВРег(Имя);
		НаборЗаписейФИО.УТ2__Отчество = ВРег(Отчество);
		
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.УТ2__ФИО, "УТ2__Отчество");
		
		НаборЗаписейЗЛ.ДатаРождения.Значение = Формат(ВыборкаПоРаботникам.ДатаРождения, "ДФ=yyyy-MM-dd");
		
		НаборЗаписейЗЛ.УТ2__СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПредоставленииДата) Тогда
			ЗаявлениеОПредоставлении = НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПредоставлении.Значение;
			ЗаявлениеОПредоставлении.Дата.Значение = Формат(ВыборкаПоРаботникам.ЗаявлениеОПредоставленииДата, "ДФ=yyyy-MM-dd");
			ЗаявлениеОПредоставлении.СтатусЗаявленияОПредоставлении.Значение = ВыборкаПоРаботникам.ЗаявлениеОПредоставленииСтатус;
		Иначе
			НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПредоставлении.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПродолженииДата) Тогда
			ЗаявлениеОПродолжении = НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПродолжении.Значение;
			ЗаявлениеОПродолжении.Дата.Значение = Формат(ВыборкаПоРаботникам.ЗаявлениеОПродолженииДата, "ДФ=yyyy-MM-dd");
			ЗаявлениеОПродолжении.СтатусЗаявленияОПродолжении.Значение = ВыборкаПоРаботникам.ЗаявлениеОПродолженииСтатус;
		Иначе
			НаборЗаписейЗЛ.Заявления.Значение.ЗаявлениеОПродолжении.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПредоставленииДата) 
			И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗаявлениеОПродолжении) Тогда
			НаборЗаписейЗЛ.Заявления.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		УзелСотрудника = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ЗЛ", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейЗЛ);
		
		УзелТрудоваяДеятельность = Неопределено;
		
		Мероприятия = Новый Массив;
		ОтменяемыеМероприятия = Новый Массив;
		
		Пока ВыборкаПоРаботникам.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВидМероприятия) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ДатаОтмены) Тогда
				
				НаборЗаписейМероприятиеОтменяемое = ОбщегоНазначения.СкопироватьРекурсивно(ФорматМероприятиеОтменяемое);
				НаборЗаписейМероприятиеОтменяемое.UUID.Значение = Строка(ВыборкаПоРаботникам.ИдМероприятия);
				НаборЗаписейМероприятиеОтменяемое.ДатаМероприятия.Значение = Формат(ВыборкаПоРаботникам.ДатаМероприятия, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятиеОтменяемое.ДатаОтмены.Значение = Формат(ВыборкаПоРаботникам.ДатаОтмены, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятиеОтменяемое.Вид.Значение = Перечисления.ВидыМероприятийТрудовойДеятельности.Код(ВыборкаПоРаботникам.ВидМероприятия);
				НаборЗаписейМероприятиеОтменяемое.ЯвляетсяСовместителем.Значение = ?(ВыборкаПоРаботникам.ЯвляетсяСовместителем, 1, 0);
				
				ТерриториальныеУсловия = ЭлектронныеТрудовыеКнижки.РаботаКСПоДаннымОтменяемогоМероприятия(ВыборкаПоРаботникам);
				Если ЗначениеЗаполнено(ТерриториальныеУсловия) Тогда
					НаборЗаписейМероприятиеОтменяемое.РаботаКС.Значение = СокрЛП(Строка(ТерриториальныеУсловия));
				Иначе
					НаборЗаписейМероприятиеОтменяемое.РаботаКС.НеВыводитьВФайл = Истина;
				КонецЕсли;
				
				УзелМероприятие = ВывестиВФайлМероприятие(УзелСотрудника, УзелТрудоваяДеятельность, "МероприятиеОтменяемое", НаборЗаписейМероприятиеОтменяемое);
				
			Иначе
				
				НаборЗаписейМероприятие = ОбщегоНазначения.СкопироватьРекурсивно(ФорматМероприятие);
				НаборЗаписейМероприятие.UUID.Значение = Строка(ВыборкаПоРаботникам.ИдМероприятия);
				НаборЗаписейМероприятие.Дата.Значение = Формат(ВыборкаПоРаботникам.ДатаМероприятия, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятие.Вид.Значение = Перечисления.ВидыМероприятийТрудовойДеятельности.Код(ВыборкаПоРаботникам.ВидМероприятия);
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловия) Тогда
					НаборЗаписейМероприятие.РаботаКС.Значение = СокрЛП(Строка(ВыборкаПоРаботникам.ТерриториальныеУсловия));
				Иначе
					НаборЗаписейМероприятие.РаботаКС.НеВыводитьВФайл = Истина;
				КонецЕсли;
				
				НаборЗаписейМероприятие.Сведения.Значение = СокрЛП(ВыборкаПоРаботникам.Сведения);
				
				Если ВыборкаПоРаботникам.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии
					И ЗначениеЗаполнено(ВыборкаПоРаботникам.ОписаниеДолжности) Тогда
					
					НаборЗаписейМероприятие.Должность.Значение = СокрЛП(ВыборкаПоРаботникам.ОписаниеДолжности);
					
				Иначе
					
					НаборЗаписейМероприятие.Должность.Значение = СокрЛП(ВыборкаПоРаботникам.ПредставлениеДолжности) 
						+ ?(ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПоРееструДолжностей), ", " + СокрЛП(ВыборкаПоРаботникам.КодПоРееструДолжностей), "")
						+ ?(ЗначениеЗаполнено(ВыборкаПоРаботникам.РазрядКатегория), ", " + ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеРазрядаКатегории(
						ВыборкаПоРаботникам.РазрядКатегория), "");
					
				КонецЕсли;
				
				НаборЗаписейМероприятие.ЯвляетсяСовместителем.Значение = ?(ВыборкаПоРаботникам.ЯвляетсяСовместителем, "1", "0");
				
				НаборЗаписейМероприятие.СтруктурноеПодразделение.Значение = СокрЛП(ВыборкаПоРаботникам.ПредставлениеПодразделения);
				
				ТрудоваяФункцияОписание = ЭлектронныеТрудовыеКнижки.ОписаниеТрудовойФункции(
					ВыборкаПоРаботникам.ТрудоваяФункцияОписание, ВыборкаПоРаботникам.ТрудоваяФункция);
				НаборЗаписейМероприятие.ВидПР.Значение = СокрЛП(ТрудоваяФункцияОписание);
				НаборЗаписейМероприятие.КодВФпоОКЗ.Значение = СокрЛП(ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеКодаОКЗ(ВыборкаПоРаботникам.КодПоОКЗ));
				
				НаборЗаписейМероприятие.ДатаС.Значение = Формат(ВыборкаПоРаботникам.ДатаС, "ДФ=yyyy-MM-dd");
				НаборЗаписейМероприятие.ДатаПо.Значение = Формат(ВыборкаПоРаботникам.ДатаПо, "ДФ=yyyy-MM-dd");
				
				Если ВыборкаПоРаботникам.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение Тогда
					
					Если ВыборкаПоРаботникам.ОснованиеУвольненияДокументОснование = Перечисления.НормативныеДокументыОснованийКадровыхПриказов.ТКРФ Тогда
						НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.ТипОснованияУвольнения = НСтр("ru = 'ТК РФ';
																											|en = 'RF LC'")
					Иначе
						НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.ТипОснованияУвольнения = НСтр("ru = 'ИНОЕ';
																											|en = 'OTHER'");
					КонецЕсли;
					
					НаборЗаписейМероприятие.Причина.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеУвольненияТекстОснования);
					
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.НормативныйДокумент = КадровыйУчет.НормативныйДокументОснованияУвольнения(ВыборкаПоРаботникам.ОснованиеУвольнения);
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.Статья = ВыборкаПоРаботникам.ОснованиеУвольненияСтатья;
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.Часть = ВыборкаПоРаботникам.ОснованиеУвольненияЧасть;
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.Пункт = ВыборкаПоРаботникам.ОснованиеУвольненияПункт;
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.Подпункт = ВыборкаПоРаботникам.ОснованиеУвольненияПодпункт;
					НаборЗаписейМероприятие.ОснованиеУвольнения.Значение.Абзац = ВыборкаПоРаботникам.ОснованиеУвольненияАбзац;
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "НормативныйДокумент");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "Статья");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "Часть");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "Пункт");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "Подпункт");
					ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейМероприятие.ОснованиеУвольнения, "Абзац");
				Иначе 
					НаборЗаписейМероприятие.ОснованиеУвольнения.НеВыводитьВФайл = Истина;
				КонецЕсли;
				
				НаборЗаписейОснование = НаборЗаписейМероприятие.Основание.Значение;
				НаборЗаписейОснование.Наименование.Значение = СокрЛП(ВыборкаПоРаботникам.НаименованиеДокументаОснования);
				НаборЗаписейОснование.Дата.Значение = Формат(ВыборкаПоРаботникам.ДатаДокументаОснования, "ДФ=yyyy-MM-dd");;
				НаборЗаписейОснование.Номер.Значение = СокрЛП(ВыборкаПоРаботникам.НомерДокументаОснования);
				НаборЗаписейОснование.Серия.Значение = СокрЛП(ВыборкаПоРаботникам.СерияДокументаОснования);
				
				ВтороеОснование = Неопределено;
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НаименованиеВторогоДокументаОснования)
					Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ДатаВторогоДокументаОснования)
					Или ЗначениеЗаполнено(ВыборкаПоРаботникам.СерияВторогоДокументаОснования)
					Или ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерВторогоДокументаОснования) Тогда
					
					ВтороеОснование = ОбщегоНазначения.СкопироватьРекурсивно(НаборЗаписейОснование);
					ВтороеОснование.Наименование.Значение = СокрЛП(ВыборкаПоРаботникам.НаименованиеВторогоДокументаОснования);
					ВтороеОснование.Дата.Значение = Формат(ВыборкаПоРаботникам.ДатаВторогоДокументаОснования, "ДФ=yyyy-MM-dd");;
					ВтороеОснование.Серия.Значение = СокрЛП(ВыборкаПоРаботникам.СерияВторогоДокументаОснования);
					ВтороеОснование.Номер.Значение = СокрЛП(ВыборкаПоРаботникам.НомерВторогоДокументаОснования);
					ПерсонифицированныйУчет.УстановитьВыводВФайл(ВтороеОснование.Серия, "Значение");
					
				КонецЕсли;
				
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.Сведения, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.Должность, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.СтруктурноеПодразделение, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.ВидПР, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.КодВФпоОКЗ, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.Причина, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.ДатаС, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейМероприятие.ДатаПо, "Значение");
				ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейОснование.Серия, "Значение");
				
				УзелМероприятие = ВывестиВФайлМероприятие(УзелСотрудника, УзелТрудоваяДеятельность, "Мероприятие", НаборЗаписейМероприятие);
				Если ВтороеОснование <> Неопределено Тогда
					УзелОснование = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелМероприятие, "Основание", "");
					ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелОснование, ВтороеОснование);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	НаборЗаписейРуководитель.Руководитель.Значение.УТ2__Должность.Значение = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя));
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.УТ2__ФИО.Значение;
	НаборЗаписейФИО.УТ2__Фамилия = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя));
	НаборЗаписейФИО.УТ2__Имя = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя));
	НаборЗаписейФИО.УТ2__Отчество = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя));
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.УТ2__ФИО, "УТ2__Отчество");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ5__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ5__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции // СформироватьВыходнойФайл()

Функция ВывестиВФайлМероприятие(УзелСотрудника, УзелТрудоваяДеятельность, ИмяУзла, НаборЗаписейМероприятие)
	
	Если УзелТрудоваяДеятельность = Неопределено Тогда
		УзелТрудоваяДеятельность = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "ТрудоваяДеятельность", "");
	КонецЕсли;
	
	УзелМероприятие = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелТрудоваяДеятельность, ИмяУзла, "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелМероприятие, НаборЗаписейМероприятие);
	
	Возврат УзелМероприятие;
	
КонецФункции

Функция СформироватьВыходнойФайлЕФС1(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам)
	
	РазделыЕФС1 = ПерсонифицированныйУчет.СписокРазделовЕФС1();
	РазделыЕФС1.СЗВТД = Истина;
	
	Возврат ПерсонифицированныйУчет.СформироватьВыходнойФайлЕФС1(РазделыЕФС1, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам);
	
КонецФункции

Процедура ОбработкаФормированияФайла(Объект) Экспорт	
	
	ТекстФайла = СформироватьВыходнойФайл(Объект.Ссылка);
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка, Объект.ИмяФайлаДляПФР, ТекстФайла, , "UTF-8", Ложь, Ложь);
	
КонецПроцедуры

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
	ОписаниеВыгруженногоФайла.ПроверятьПОПД = Истина;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

Функция СтруктураПолейМероприятий() Экспорт 
	
	СтруктураПолей = Новый Структура;
	Реквизиты = Метаданные.Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ТабличныеЧасти.Мероприятия.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		СтруктураПолей.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат СтруктураПолей;
	
КонецФункции

Функция ПечатнаяФормаСЗВ_ТД(МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	МассивОбъектовДо20210701 = Новый Массив;
	МассивОбъектовПосле20210701 = Новый Массив;
	МассивОбъектовПосле20220819 = Новый Массив;
	ДатыДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "Дата");
	Для Каждого ДанныеДаты Из ДатыДокументов Цикл
		
		Если ДанныеДаты.Значение < '20210701' Тогда
			МассивОбъектовДо20210701.Добавить(ДанныеДаты.Ключ);
		ИначеЕсли ДанныеДаты.Значение < '20220819' Тогда
			МассивОбъектовПосле20210701.Добавить(ДанныеДаты.Ключ);
		Иначе
			МассивОбъектовПосле20220819.Добавить(ДанныеДаты.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивОбъектовДо20210701) Тогда
		Выборка = ВыборкаПоСотрудникам(МассивОбъектовДо20210701);
		ЭлектронныеТрудовыеКнижки.ВывестиМакетыДокументов(
			ДокументРезультат, Выборка,
			"Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПФ_MXL_ФормаСЗВ_ТД", ОбъектыПечати);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивОбъектовПосле20210701) Тогда
		Выборка = ВыборкаПоСотрудникам(МассивОбъектовПосле20210701);
		ЭлектронныеТрудовыеКнижки.ВывестиМакетыДокументов(
			ДокументРезультат, Выборка,
			"Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПФ_MXL_ФормаСЗВ_ТД_20210701", ОбъектыПечати);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивОбъектовПосле20220819) Тогда
		Выборка = ВыборкаПоСотрудникам(МассивОбъектовПосле20220819);
		ЭлектронныеТрудовыеКнижки.ВывестиМакетыДокументов(
			ДокументРезультат, Выборка,
			"Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПФ_MXL_ФормаСЗВ_ТД_20220819", ОбъектыПечати);
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПечатнаяФормаЕФС_1(МассивОбъектов, ОбъектыПечати)
	
	ВыборкаПоШапкеДокумента = ВыборкаПоШапкеДокумента(МассивОбъектов);
	ВыборкаПоРаботникам = ВыборкаПоСотрудникам(МассивОбъектов);
	
	РазделыЕФС1 = ПерсонифицированныйУчет.СписокРазделовЕФС1();
	РазделыЕФС1.СЗВТД = Истина;
	
	Возврат ПерсонифицированныйУчет.ПечатнаяФормаЕФС_1(ОбъектыПечати, РазделыЕФС1, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам);
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьСотрудниковСЗВ_ТД(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |	И Сотрудники.УдалитьСотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.Сотрудники, "УдалитьСотрудник");
		ФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		
		Для Каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл 
			СтрокаСотрудника.Сотрудник = ФизическиеЛица[СтрокаСотрудника.УдалитьСотрудник];
		КонецЦикла;
		
		Для Каждого СтрокаМероприятия Из ДокументОбъект.Мероприятия Цикл 
			СтрокаМероприятия.Сотрудник = ФизическиеЛица[СтрокаМероприятия.УдалитьСотрудник];
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЯвляетсяСовместителемВМероприятиях(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Ссылка = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка
		|			И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Сотрудник = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Ссылка
		|
		|ИМЕЮЩИЕ
		|	ЕСТЬNULL(МАКСИМУМ(СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.УдалитьЯвляетсяСовместителем), ЛОЖЬ) И
		|	НЕ ЕСТЬNULL(МАКСИМУМ(СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ЯвляетсяСовместителем), ИСТИНА)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
			
			МероприятияСотрудника = ДокументОбъект.Мероприятия.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
			Для Каждого СтрокаМероприятия Из МероприятияСотрудника Цикл
				СтрокаМероприятия.ЯвляетсяСовместителем = СтрокаСотрудника.УдалитьЯвляетсяСовместителем;
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдМероприятий(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка В (&МассивОбновленных)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.УдалитьИдентификатор <> """"
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ИдМероприятия = &ПустойИдентификатор";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаМероприятия Из ДокументОбъект.Мероприятия Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаМероприятия.ИдМероприятия)
					И ЭтоУникальныйИдентификатор(СтрокаМероприятия.УдалитьИдентификатор) Тогда
					
					СтрокаМероприятия.ИдМероприятия = Новый УникальныйИдентификатор(СтрокаМероприятия.УдалитьИдентификатор);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обновление информационной базы.Ошибка при заполнении идентификаторов мероприятий';
					|en = 'Updating the infobase. Error populating event IDs'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, , Выборка.Ссылка, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД");
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСотрудниковМероприятий(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|ГДЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.СотрудникЗаписи = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаМероприятия Из ДокументОбъект.Мероприятия Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаМероприятия.СотрудникЗаписи)
				И ЗначениеЗаполнено(СтрокаМероприятия.Сотрудник) Тогда
				
				СтрокаМероприятия.СотрудникЗаписи = 
					КадровыйУчет.ОсновнойСотрудникФизическогоЛица(
						СтрокаМероприятия.Сотрудник, 
						ДокументОбъект.Организация, 
						СтрокаМероприятия.ДатаМероприятия)
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВДвиженияхПризнакПринятоВПФР(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = МероприятияПереданные.Регистратор
		|			И (НЕ МероприятияПереданные.ПринятоВПФР)
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка В (&МассивОбновленных)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Проведен
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ДокументПринятВПФР
		|	И НЕ МероприятияПереданные.ИдМероприятия ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		СформироватьДвиженияПереданныхМероприятийНеПринятыхВПФР(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.МероприятияТрудовойДеятельностиПереданные.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ПринятоВПФР = Истина;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		СформироватьДвиженияПереданныхМероприятийНеПринятыхВПФР(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПереданныхМероприятийНеПринятыхВПФР(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = МероприятияПереданные.Регистратор
		|			И (НЕ МероприятияПереданные.ПринятоВПФР)
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка В (&МассивОбновленных)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Проведен
		|	И НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ДокументПринятВПФР
		|	И МероприятияПереданные.ИдМероприятия ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ДанныеДляПроведенияДокументов = ДанныеДляПроведенияПоМероприятияТрудовойДеятельностиПереданные(ОбрабатываемыеДокументы, Истина);
	Для Каждого Регистратор Из ОбрабатываемыеДокументы Цикл
		
		МассивОбновленных.Добавить(Регистратор);
		ДанныеДляПроведения = ДанныеДляПроведенияДокументов.Получить(Регистратор);
		Если ДанныеДляПроведения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеДляПроведенияПереданныхМероприятийКорректны(ДанныеДляПроведения) Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, "РегистрСведений.МероприятияТрудовойДеятельностиПереданные.НаборЗаписей", "Регистратор", Регистратор) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			
			ЭлектронныеТрудовыеКнижки.СформироватьДвиженияМероприятийТрудовойДеятельностиПереданных(НаборЗаписей, ДанныеДляПроведения);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		Иначе
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Регистратор.ПолучитьОбъект();
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , РежимЗаписиДокумента.ОтменаПроведения);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Отмена проведения СЗВ-ТД';
											|en = 'Updating infobase.Canceling posting SZV-TD'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, Метаданные.Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД,
				Регистратор, НСтр("ru = 'Отменено проведение. Документ содержит незаполненные или повторяющиеся идентификаторы мероприятий';
									|en = 'Posting canceled. The document contains blank or duplicate event IDs.'", ОбщегоНазначения.КодОсновногоЯзыка()));
				
		КонецЕсли;
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалениеСтрокБезСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка В (&МассивОбновленных)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Сотрудник = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СрокиКУдалению = ДокументОбъект.Мероприятия.НайтиСтроки(Новый Структура("Сотрудник", Справочники.ФизическиеЛица.ПустаяСсылка()));
		Для Каждого СтрокаМероприятия Из СрокиКУдалению Цикл
			ДокументОбъект.Мероприятия.Удалить(СтрокаМероприятия);
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеПризнакаПринятоВПФРВСтрокахСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Ссылка В (&МассивОбновленных)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.Ссылка.ДокументПринятВПФР
		|	И НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДСотрудники.ПринятоВПФР";
	
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
			СтрокаСотрудника.ПринятоВПФР = Истина;
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДвиженияПереданныхМероприятийНеПринятыхВПФР(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	МероприятияПереданные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|ГДЕ
		|	НЕ МероприятияПереданные.Регистратор В (&МассивОбновленных)
		|
		|СГРУППИРОВАТЬ ПО
		|	МероприятияПереданные.Регистратор
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МероприятияПереданные.ПринятоВПФР) > 1";
	
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Регистратор);
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.МероприятияТрудовойДеятельностиПереданные.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		НеПринятыеСтроки = ТаблицаНабора.НайтиСтроки(Новый Структура("ПринятоВПФР", Ложь));
		Для Каждого НеПринятаяСтрока Из НеПринятыеСтроки Цикл
			ТаблицаНабора.Удалить(НеПринятаяСтрока);
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаНабора);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДанныеОбОтправкеПустыхЗаявленийОВыбореСпособаВеденияТрудовойКнижки(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗаявленияОВеденииТрудовыхКнижекПереданные.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные КАК ЗаявленияОВеденииТрудовыхКнижекПереданные
		|ГДЕ
		|	(ЗаявленияОВеденииТрудовыхКнижекПереданные.Заявление = НЕОПРЕДЕЛЕНО
		|			ИЛИ ЗаявленияОВеденииТрудовыхКнижекПереданные.Заявление = ЗНАЧЕНИЕ(Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ПустаяСсылка))";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Регистратор);
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		ЗаписиКУдалению = Новый Массив;
		
		Для Каждого Запись Из ТаблицаНабора Цикл
			
			Если Не ЗначениеЗаполнено(Запись.Заявление) Тогда
				ЗаписиКУдалению.Добавить(Запись);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Запись Из ЗаписиКУдалению Цикл
			ТаблицаНабора.Удалить(Запись);
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаНабора);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКодПоОКЗ(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияТрудовойДеятельностиПереданные
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка = МероприятияТрудовойДеятельностиПереданные.Регистратор
		|			И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ИдМероприятия = МероприятияТрудовойДеятельностиПереданные.ИдМероприятия
		|			И (ВЫБОР
		|				КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ = МероприятияТрудовойДеятельностиПереданные.Отменено)
		|			И (МероприятияТрудовойДеятельностиПереданные.КодПоОКЗ = ЗНАЧЕНИЕ(Справочник.КлассификаторЗанятий.ПустаяСсылка))
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка В (&МассивОбновленных)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.КодПоОКЗ <> ЗНАЧЕНИЕ(Справочник.КлассификаторЗанятий.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Запрос.УстановитьПараметр("ОбрабатывавемыеСсылки", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка КАК Ссылка,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ИдМероприятия КАК ИдМероприятия,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаОтмены КАК ДатаОтмены,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.КодПоОКЗ КАК КодПоОКЗ
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияТрудовойДеятельностиПереданные
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка = МероприятияТрудовойДеятельностиПереданные.Регистратор
		|			И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ИдМероприятия = МероприятияТрудовойДеятельностиПереданные.ИдМероприятия
		|			И (ВЫБОР
		|				КОГДА СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ = МероприятияТрудовойДеятельностиПереданные.Отменено)
		|			И (МероприятияТрудовойДеятельностиПереданные.КодПоОКЗ = ЗНАЧЕНИЕ(Справочник.КлассификаторЗанятий.ПустаяСсылка))
		|ГДЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка В(&ОбрабатывавемыеСсылки)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.КодПоОКЗ <> ЗНАЧЕНИЕ(Справочник.КлассификаторЗанятий.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.МероприятияТрудовойДеятельностиПереданные.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		Пока Выборка.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдМероприятия", Выборка.ИдМероприятия);
			СтруктураПоиска.Вставить("Отменено", ЗначениеЗаполнено(Выборка.ДатаОтмены));
			
			НайденныеЗаписи = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
			Для Каждого Запись Из НайденныеЗаписи Цикл
				Запись.КодПоОКЗ = Выборка.КодПоОКЗ;
			КонецЦикла;
			
		КонецЦикла;
		НаборЗаписей.Загрузить(ТаблицаНабора);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеДляПроведенияДокумента(СсылкаНаДокумент) Экспорт
	
	ДанныеДляПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента.ПринятоВПФР) КАК ПринятоВПФР,
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПринятостьДанных
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Дата КАК ДатаПередачи,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Организация КАК Организация,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудник КАК ФизическоеЛицо,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолжении КАК Заявление,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолженииОтмена КАК Отозвано,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТДанныеЗаявлений
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные КАК ЗаявленияОВеденииТрудовыхКнижекПереданные
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудник = ЗаявленияОВеденииТрудовыхКнижекПереданные.ФизическоеЛицо
		|			И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолжении = ЗаявленияОВеденииТрудовыхКнижекПереданные.Заявление
		|			И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолженииОтмена = ЗаявленияОВеденииТрудовыхКнижекПереданные.Отозвано
		|			И (ЗаявленияОВеденииТрудовыхКнижекПереданные.Регистратор <> &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятостьДанных КАК ПринятостьДанных
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = ПринятостьДанных.Ссылка
		|ГДЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПринятоВПФР = ПринятостьДанных.ПринятоВПФР
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = &Ссылка
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолжении <> НЕОПРЕДЕЛЕНО
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолжении <> ЗНАЧЕНИЕ(Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ПустаяСсылка)
		|	И ЗаявленияОВеденииТрудовыхКнижекПереданные.Заявление ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Дата,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Организация,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудник,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставлении,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставленииОтмена,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.НомерСтроки
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные КАК ЗаявленияОВеденииТрудовыхКнижекПереданные
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудник = ЗаявленияОВеденииТрудовыхКнижекПереданные.ФизическоеЛицо
		|			И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставлении = ЗаявленияОВеденииТрудовыхКнижекПереданные.Заявление
		|			И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставленииОтмена = ЗаявленияОВеденииТрудовыхКнижекПереданные.Отозвано
		|			И (ЗаявленияОВеденииТрудовыхКнижекПереданные.Регистратор <> &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятостьДанных КАК ПринятостьДанных
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = ПринятостьДанных.Ссылка
		|ГДЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПринятоВПФР = ПринятостьДанных.ПринятоВПФР
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = &Ссылка
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставлении <> НЕОПРЕДЕЛЕНО
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставлении <> ЗНАЧЕНИЕ(Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ПустаяСсылка)
		|	И ЗаявленияОВеденииТрудовыхКнижекПереданные.Заявление ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеЗаявлений.ДатаПередачи) КАК ДатаПередачи,
		|	ДанныеЗаявлений.Организация КАК Организация,
		|	ДанныеЗаявлений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеЗаявлений.Заявление КАК Заявление,
		|	ДанныеЗаявлений.Отозвано КАК Отозвано,
		|	МИНИМУМ(ДанныеЗаявлений.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	ВТДанныеЗаявлений КАК ДанныеЗаявлений
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеЗаявлений.Организация,
		|	ДанныеЗаявлений.ФизическоеЛицо,
		|	ДанныеЗаявлений.Заявление,
		|	ДанныеЗаявлений.Отозвано";
	
	ДанныеДляПроведения.Вставить("ЗаявленияОВеденииТрудовыхКнижекПереданные", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ДанныеДляПроведенияПоМероприятияТрудовойДеятельностиПереданные(СсылкаНаДокумент, ТолькоПроведенные = Ложь) Экспорт
	
	ДанныеДляПроведения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.ИдМероприятия КАК ИдМероприятия,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отменено,
		|	ТаблицаДокумента.ТрудоваяФункция КАК ТрудоваяФункция,
		|	ЕСТЬNULL(ТаблицаДокумента.ТрудоваяФункция.Описание, """") КАК ТрудоваяФункцияОписание,
		|	ЕСТЬNULL(ТаблицаДокумента.ТрудоваяФункция.КодПрофессиональнойДеятельности, """") КАК ТрудоваяФункцияКод,
		|	ТаблицаДокумента.Сведения КАК Сведения,
		|	ТаблицаДокумента.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	ТаблицаДокумента.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	ТаблицаДокумента.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	ТаблицаДокумента.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	ТаблицаДокумента.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	ТаблицаДокумента.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	ТаблицаДокумента.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	ТаблицаДокумента.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	ТаблицаДокумента.КодПоОКЗ КАК КодПоОКЗ,
		|	ТаблицаДокумента.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ТаблицаДокумента.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	ТаблицаДокумента.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	ТаблицаДокумента.УдаленностьРаботы КАК УдаленностьРаботы,
		|	ТаблицаДокумента.СокращенностьГрафика КАК СокращенностьГрафика,
		|	ТаблицаДокумента.ОписаниеДолжности КАК ОписаниеДолжности,
		|	ТаблицаСотрудниковДокумента.ПринятоВПФР КАК ПринятоВПФР
		|ПОМЕСТИТЬ ВТДанныеМероприятий
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК ТаблицаСотрудниковДокумента
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаСотрудниковДокумента.Ссылка
		|			И ТаблицаДокумента.Сотрудник = ТаблицаСотрудниковДокумента.Сотрудник
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&Ссылка)
		|	И &ТолькоПроведенные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента.ПринятоВПФР) КАК ПринятоВПФР,
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПринятостьМероприятий
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеМероприятий.Ссылка КАК Ссылка,
		|	ДанныеМероприятий.Организация КАК Организация,
		|	ДанныеМероприятий.ИдМероприятия КАК ИдМероприятия,
		|	ДанныеМероприятий.Отменено КАК Отменено,
		|	ДанныеМероприятий.ТрудоваяФункция КАК ТрудоваяФункция,
		|	ДанныеМероприятий.ТрудоваяФункцияОписание КАК ТрудоваяФункцияОписание,
		|	ДанныеМероприятий.ТрудоваяФункцияКод КАК ТрудоваяФункцияКод,
		|	ДанныеМероприятий.Сведения КАК Сведения,
		|	ДанныеМероприятий.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	ДанныеМероприятий.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	ДанныеМероприятий.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	ДанныеМероприятий.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	ДанныеМероприятий.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	ДанныеМероприятий.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	ДанныеМероприятий.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	ДанныеМероприятий.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	ДанныеМероприятий.КодПоОКЗ КАК КодПоОКЗ,
		|	ДанныеМероприятий.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ДанныеМероприятий.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	ДанныеМероприятий.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	ДанныеМероприятий.УдаленностьРаботы КАК УдаленностьРаботы,
		|	ДанныеМероприятий.СокращенностьГрафика КАК СокращенностьГрафика,
		|	ДанныеМероприятий.ОписаниеДолжности КАК ОписаниеДолжности,
		|	ДанныеМероприятий.ПринятоВПФР КАК ПринятоВПФР
		|ИЗ
		|	ВТДанныеМероприятий КАК ДанныеМероприятий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятостьМероприятий КАК ПринятостьМероприятий
		|		ПО ДанныеМероприятий.Ссылка = ПринятостьМероприятий.Ссылка
		|ГДЕ
		|	ДанныеМероприятий.ПринятоВПФР = ПринятостьМероприятий.ПринятоВПФР
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Если ТолькоПроведенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТолькоПроведенные", "ТаблицаДокумента.Ссылка.Проведен");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТолькоПроведенные", "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДвиженияДокумента = Новый Массив;
		ДанныеДляПроведения.Вставить(Выборка.Ссылка, ДвиженияДокумента);
		
		Пока Выборка.Следующий() Цикл
			Запись = ЭлектронныеТрудовыеКнижки.ЗаписьДвиженияМероприятияТрудовойДеятельностиПереданные(Выборка);
			ДвиженияДокумента.Добавить(Запись);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура СформироватьНаборыЗаписейМероприятияТрудовойДеятельностиПереданные(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленныхПереданных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленныхПереданных") Тогда
			МассивОбновленныхПереданных = ПараметрыОбновления.МассивОбновленныхПереданных;
		Иначе
			МассивОбновленныхПереданных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленныхПереданных", МассивОбновленныхПереданных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленныхПереданных", МассивОбновленныхПереданных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|		ПО ТаблицаДокумента.Ссылка.Организация = МероприятияПереданные.Организация
		|			И ТаблицаДокумента.ИдМероприятия = МероприятияПереданные.ИдМероприятия
		|			И (ВЫБОР
		|				КОГДА ТаблицаДокумента.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ = МероприятияПереданные.Отменено)
		|ГДЕ
		|	НЕ ТаблицаДокумента.Ссылка В (&МассивОбновленныхПереданных)
		|	И ТаблицаДокумента.Ссылка.Проведен
		|	И МероприятияПереданные.ИдМероприятия ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ОбрабатываемыеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ДанныеДляПроведенияДокументов = ДанныеДляПроведенияПоМероприятияТрудовойДеятельностиПереданные(ОбрабатываемыеДокументы, Истина);
	Для Каждого Регистратор Из ОбрабатываемыеДокументы Цикл
		
		МассивОбновленныхПереданных.Добавить(Регистратор);
		ДанныеДляПроведения = ДанныеДляПроведенияДокументов.Получить(Регистратор);
		Если ДанныеДляПроведения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.МероприятияТрудовойДеятельностиПереданные.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		
		Для Каждого Запись Из ДанныеДляПроведения Цикл
			Если Не ЗначениеЗаполнено(Запись.ИдМероприятия) Тогда
				Запись.ИдМероприятия = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла;
		
		ЭлектронныеТрудовыеКнижки.СформироватьДвиженияМероприятийТрудовойДеятельностиПереданных(НаборЗаписей, ДанныеДляПроведения);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоУникальныйИдентификатор(Знач Идентификатор)
	
	Идентификатор = СокрЛП(Идентификатор);
	Если СтрДлина(Идентификатор) <> 36 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сред(Идентификатор, 9, 1) <> "-"
		Или Сред(Идентификатор, 14, 1) <> "-"
		Или Сред(Идентификатор, 19, 1) <> "-"
		Или Сред(Идентификатор, 24, 1) <> "-" Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Идентификатор = СтрЗаменить(Идентификатор, "-", "");
	
	ДопустимыеСимволы = "0123456789abcdefABCDEF";
	Для НомерСимвола = 1 По СтрДлина(Идентификатор) Цикл
		
		ТестируемыйСимвол = Сред(Идентификатор, НомерСимвола, 1);
		Если СтрНайти(ДопустимыеСимволы, ТестируемыйСимвол) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ДанныеДляПроведенияПереданныхМероприятийКорректны(ДанныеДляПроведения)
	
	СоответствиеИдентификаторов = Новый Соответствие;
	Для Каждого ДанныеМероприятия Из ДанныеДляПроведения Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеМероприятия.ИдМероприятия) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеИдентификатора = СоответствиеИдентификаторов.Получить(ДанныеМероприятия.ИдМероприятия);
		Если ДанныеИдентификатора = Неопределено Тогда
			ДанныеИдентификатора = Новый Соответствие;
			СоответствиеИдентификаторов.Вставить(ДанныеМероприятия.ИдМероприятия, ДанныеИдентификатора);
		КонецЕсли;
		
		ДанныеОтмененности = ДанныеИдентификатора.Получить(ДанныеМероприятия.Отменено);
		Если ДанныеОтмененности <> Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеИдентификатора.Вставить(ДанныеМероприятия.Отменено, Истина);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Область ИмпортСЗВТДИПротоколовПриема

// Заполняет документ данными из переданных ранее файлов СЗВ-ТД
//
Функция ЗаполнитьПоДаннымФайла(ДокументОбъект, АдресДанныхСЗВТД, ИмяФайла, Отказ) Экспорт
	
	ДеревоXML = ЭлектронныеТрудовыеКнижки.ДанныеXMLФайла(АдресДанныхСЗВТД, ИмяФайла);
	
	Если Не ЭтоДанныеСЗВТД(ДеревоXML) Тогда
		Возврат ЗаполнитьПоДаннымФайлаЕФС1(ДокументОбъект, АдресДанныхСЗВТД, ИмяФайла, Отказ);
	КонецЕсли;
	
	ЗаявленияСотрудников = Новый ТаблицаЗначений;
	ЗаявленияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ЗаявленияСотрудников.Колонки.Добавить("ВидЗаявления", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности"));
	ЗаявленияСотрудников.Колонки.Добавить("СтатусЗаявления", Новый ОписаниеТипов("Число"));
	ЗаявленияСотрудников.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ЗаявленияСотрудников.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ДокументОбъект.Дата = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/ДатаЗаполнения"));
	ДокументОбъект.Руководитель = РуководительПоФИО(
		ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/Руководитель/ФИО/Фамилия"),
		ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/Руководитель/ФИО/Имя"),
		ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/Руководитель/ФИО/Отчество"));
	
	ДокументОбъект.ДолжностьРуководителя = ДолжностьПоНаименованию(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/Руководитель/Должность"));
	
	РегистрационныйНомер = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/Работодатель/РегНомер");
	ДокументОбъект.Организация = ЭлектронныеТрудовыеКнижкиПовтИсп.ОрганизацияПоРегистрационномуНомеруПФРСФР(РегистрационныйНомер);
	
	ОтчетныйГод = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/ОтчетныйПериод/КалендарныйГод");
	ОтчетныйМесяц = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/ОтчетныйПериод/Месяц");
	Если ОтчетныйГод <> Неопределено
		И ОтчетныйМесяц <> Неопределено Тогда
		
		ДокументОбъект.ОтчетныйПериод = Дата(
			СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОтчетныйГод),
			СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОтчетныйМесяц),
			1);
		
	Иначе
		ДокументОбъект.ОтчетныйПериод = НачалоМесяца(ДокументОбъект.Дата);
	КонецЕсли;
	
	ПринятыйФайл = Новый Файл(ИмяФайла);
	ДокументОбъект.ИмяФайлаДляПФР = ПринятыйФайл.ИмяБезРасширения;
	ДокументОбъект.ФайлСформирован = Истина;
	
	ЗаполняемыеЗначения = Новый Структура("Ответственный");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗаполняемыеЗначения);
	ДокументОбъект.Комментарий = НСтр("ru = 'Импортирован';
										|en = 'Imported'") + ": " + Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
	
	ЗЛ = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД"), "ЗЛ");
	
	Для Каждого ОбъектЗЛ Из ЗЛ Цикл
		
		СтрокаСотрудники = ДокументОбъект.Сотрудники.Добавить();
		СтрокаСотрудники.СтраховойНомерПФР = ОбъектЗЛ.СНИЛС;
		СтрокаСотрудники.ДатаРождения = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ОбъектЗЛ.ДатаРождения);
		
		СтрокаСотрудники.Фамилия = ЧастьФИОИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Фамилия"));
		СтрокаСотрудники.Имя = ЧастьФИОИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Имя"));
		СтрокаСотрудники.Отчество = ЧастьФИОИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Отчество"));
		
		СтрокаСотрудники.Сотрудник = ФизическоеЛицоПоСНИЛС(СтрокаСотрудники.СтраховойНомерПФР);
		Если ЗначениеЗаполнено(СтрокаСотрудники.Сотрудник) Тогда
			
			Заявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Заявления");
			Если Заявления <> Неопределено Тогда
				
				ВидЗаявления = Неопределено;
				
				ЗаявлениеОПродолжении = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Заявления, "ЗаявлениеОПродолжении");
				Если ЗаявлениеОПродолжении <> Неопределено Тогда
					
					ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки;
					СтатусЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПродолжении, "СтатусЗаявленияОПродолжении");
					ДатаЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПродолжении, "Дата");
					
				Иначе
					
					ЗаявлениеОПредоставлении = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Заявления, "ЗаявлениеОПредоставлении");
					Если ЗаявлениеОПредоставлении <> Неопределено Тогда
						
						ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СведенияОТрудовойДеятельностиВЭлектроннойФорме;
						СтатусЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПредоставлении, "СтатусЗаявленияОПредоставлении");
						ДатаЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПредоставлении, "Дата");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВидЗаявления) Тогда
					
					СтрокаЗаявленияСотрудников = ЗаявленияСотрудников.Добавить();
					СтрокаЗаявленияСотрудников.Сотрудник = СтрокаСотрудники.Сотрудник;
					СтрокаЗаявленияСотрудников.ВидЗаявления = ВидЗаявления;
					СтрокаЗаявленияСотрудников.СтатусЗаявления = СтатусЗаявления;
					СтрокаЗаявленияСотрудников.Дата = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ДатаЗаявления);
					СтрокаЗаявленияСотрудников.НомерСтроки = СтрокаСотрудники.НомерСтроки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Мероприятия = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "ТрудоваяДеятельность"), "Мероприятие");
			Если Мероприятия <> Неопределено Тогда
				
				Для Каждого ОбъектМероприятия Из Мероприятия Цикл
					
					СтрокаМероприятия = ДокументОбъект.Мероприятия.Добавить();
					СтрокаМероприятия.Сотрудник = СтрокаСотрудники.Сотрудник;
					
					ИдМероприятияСтрокой = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "UUID");
					Если ЗначениеЗаполнено(ИдМероприятияСтрокой) Тогда
						СтрокаМероприятия.ИдМероприятия = Новый УникальныйИдентификатор(ИдМероприятияСтрокой);
					КонецЕсли;
					
					СтрокаМероприятия.ДатаМероприятия = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Дата"));
					СтрокаМероприятия.ВидМероприятия = ЭлектронныеТрудовыеКнижки.ВидМероприятияПоНомеру(
						ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Вид"));
					
					СтрокаМероприятия.Сведения = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Сведения");
					
					Основания = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ОбъектМероприятия, "Основание");
					Если Основания.Количество() > 0 Тогда
						СтрокаМероприятия.НаименованиеДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Наименование");
						СтрокаМероприятия.ДатаДокументаОснования = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Дата"));
						СтрокаМероприятия.СерияДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Серия");
						СтрокаМероприятия.НомерДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Номер");
					КонецЕсли;
					
					Если Основания.Количество() > 1 Тогда
						СтрокаМероприятия.НаименованиеВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Наименование");
						СтрокаМероприятия.ДатаВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Дата"));
						СтрокаМероприятия.СерияВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Серия");
						СтрокаМероприятия.НомерВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Номер");
					КонецЕсли;
					
					СтрокаМероприятия.ЯвляетсяСовместителем = (ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ЯвляетсяСовместителем") = "1");
					
					Если СтрокаМероприятия.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии Тогда
						СтрокаМероприятия.ОписаниеДолжности = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Должность");
					Иначе
						СтрокаМероприятия.ПредставлениеДолжности = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Должность");
					КонецЕсли;
					
					СтрокаМероприятия.ПредставлениеПодразделения = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "СтруктурноеПодразделение");
					СтрокаМероприятия.ОснованиеУвольненияТекстОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Причина");
					СтрокаМероприятия.ОснованиеУвольненияСтатья = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Статья");
					СтрокаМероприятия.ОснованиеУвольненияЧасть = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Часть");
					СтрокаМероприятия.ОснованиеУвольненияПункт = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Пункт");
					СтрокаМероприятия.ОснованиеУвольненияПодпункт = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Подпункт");
					СтрокаМероприятия.ОснованиеУвольненияАбзац = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Абзац");
					КодПоОКЗ = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "КодВФпоОКЗ");
					Если ЗначениеЗаполнено(КодПоОКЗ) Тогда
						СтрокаМероприятия.КодПоОКЗ = Справочники.КлассификаторЗанятий.НайтиПоКоду(Лев(КодПоОКЗ, 4));
					КонецЕсли;
					СтрокаМероприятия.ТерриториальныеУсловия = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ТерриториальныеУсловия");
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ФИО = Новый Массив;
			ФИО.Добавить(СтрокаСотрудники.Фамилия);
			ФИО.Добавить(СтрокаСотрудники.Имя);
			Если ЗначениеЗаполнено(СтрокаСотрудники.Отчество) Тогда
				ФИО.Добавить(СтрокаСотрудники.Отчество);
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не найден сотрудник %1 (%2), СНИЛС: %3';
					|en = 'Cannot find employee %1 (%2), SNILS: %3'"),
				СтрСоединить(ФИО, " "),
				Формат(СтрокаСотрудники.ДатаРождения, "ДЛФ=D"),
				СтрокаСотрудники.СтраховойНомерПФР);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДозаполнитьМероприятияДокумента(ДокументОбъект, Отказ);
	ДозаполнитьЗаявленияДокумента(ДокументОбъект, ЗаявленияСотрудников, Отказ);
	
КонецФункции

Функция ЗаполнитьПоДаннымФайлаЕФС1(ДокументОбъект, АдресДанныхСЗВТД, ИмяФайла, Отказ) Экспорт
	
	ДеревоXML = ЭлектронныеТрудовыеКнижки.ДанныеXMLФайла(АдресДанныхСЗВТД, ИмяФайла);
	
	Если Не ЭтоДанныеСЗВТДВЕФС1(ДеревоXML) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не известный формат файла (%1).';
										|en = 'Unknown file format (%1).'"), ИмяФайла);
	КонецЕсли;
	
	ЗаявленияСотрудников = Новый ТаблицаЗначений;
	ЗаявленияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ЗаявленияСотрудников.Колонки.Добавить("ВидЗаявления", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности"));
	ЗаявленияСотрудников.Колонки.Добавить("СтатусЗаявления", Новый ОписаниеТипов("Число"));
	ЗаявленияСотрудников.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ЗаявленияСотрудников.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ДокументОбъект.Дата = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "ДатаЗаполнения"));
	ДокументОбъект.Руководитель = РуководительПоФИО(
		ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Руководитель/ФИО/Фамилия"),
		ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Руководитель/ФИО/Имя"),
		ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Руководитель/ФИО/Отчество"));
	
	ДокументОбъект.ДолжностьРуководителя = ДолжностьПоНаименованию(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Руководитель/Должность"));
	
	РегистрационныйНомер = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Страхователь/РегНомер");
	ДокументОбъект.Организация = ЭлектронныеТрудовыеКнижкиПовтИсп.ОрганизацияПоРегистрационномуНомеруПФРСФР(РегистрационныйНомер);
	
	ДокументОбъект.ОтчетныйПериод = НачалоМесяца(ДокументОбъект.Дата);
	
	ПринятыйФайл = Новый Файл(ИмяФайла);
	ДокументОбъект.ИмяФайлаДляПФР = ПринятыйФайл.ИмяБезРасширения;
	ДокументОбъект.ФайлСформирован = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("СохранитьИмяФайла", Истина);
	
	ЗаполняемыеЗначения = Новый Структура("Ответственный");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗаполняемыеЗначения);
	ДокументОбъект.Комментарий = НСтр("ru = 'Импортирован';
										|en = 'Imported'") + ": " + Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
	
	ЗЛ = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ"), "ЗЛ");
	
	Для Каждого ОбъектЗЛ Из ЗЛ Цикл
		
		СтрокаСотрудники = ДокументОбъект.Сотрудники.Добавить();
		СтрокаСотрудники.СтраховойНомерПФР = ОбъектЗЛ.СНИЛС;
		СтрокаСотрудники.ДатаРождения = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ОбъектЗЛ.ДатаРождения);
		
		СтрокаСотрудники.Фамилия = ЧастьФИОИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Фамилия"));
		СтрокаСотрудники.Имя = ЧастьФИОИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Имя"));
		СтрокаСотрудники.Отчество = ЧастьФИОИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Отчество"));
		
		СтрокаСотрудники.Сотрудник = ФизическоеЛицоПоСНИЛС(СтрокаСотрудники.СтраховойНомерПФР);
		Если ЗначениеЗаполнено(СтрокаСотрудники.Сотрудник) Тогда
			
			Заявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "Заявления");
			Если Заявления <> Неопределено Тогда
				
				ВидЗаявления = Неопределено;
				
				ЗаявлениеОПродолжении = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Заявления, "ЗаявлениеОПродолжении");
				Если ЗаявлениеОПродолжении <> Неопределено Тогда
					
					ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки;
					СтатусЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПродолжении, "СтатусЗаявленияОПродолжении");
					ДатаЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПродолжении, "Дата");
					
				Иначе
					
					ЗаявлениеОПредоставлении = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Заявления, "ЗаявлениеОПредоставлении");
					Если ЗаявлениеОПредоставлении <> Неопределено Тогда
						
						ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СведенияОТрудовойДеятельностиВЭлектроннойФорме;
						СтатусЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПредоставлении, "СтатусЗаявленияОПредоставлении");
						ДатаЗаявления = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ЗаявлениеОПредоставлении, "Дата");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВидЗаявления) Тогда
					
					СтрокаЗаявленияСотрудников = ЗаявленияСотрудников.Добавить();
					СтрокаЗаявленияСотрудников.Сотрудник = СтрокаСотрудники.Сотрудник;
					СтрокаЗаявленияСотрудников.ВидЗаявления = ВидЗаявления;
					СтрокаЗаявленияСотрудников.СтатусЗаявления = СтатусЗаявления;
					СтрокаЗаявленияСотрудников.Дата = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ДатаЗаявления);
					СтрокаЗаявленияСотрудников.НомерСтроки = СтрокаСотрудники.НомерСтроки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Мероприятия = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектЗЛ, "ТД"), "Мероприятие");
			Если Мероприятия <> Неопределено Тогда
				
				Для Каждого ОбъектМероприятия Из Мероприятия Цикл
					
					СтрокаМероприятия = ДокументОбъект.Мероприятия.Добавить();
					СтрокаМероприятия.Сотрудник = СтрокаСотрудники.Сотрудник;
					
					ИдМероприятияСтрокой = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "UUID");
					Если ЗначениеЗаполнено(ИдМероприятияСтрокой) Тогда
						СтрокаМероприятия.ИдМероприятия = Новый УникальныйИдентификатор(ИдМероприятияСтрокой);
					КонецЕсли;
					
					СтрокаМероприятия.ДатаМероприятия = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Дата"));
					СтрокаМероприятия.ВидМероприятия = ЭлектронныеТрудовыеКнижки.ВидМероприятияПоНомеру(
						ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Вид"));
					
					СтрокаМероприятия.Сведения = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Сведения");
					
					Основания = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ОбъектМероприятия, "Основание");
					Если Основания.Количество() > 0 Тогда
						СтрокаМероприятия.НаименованиеДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Наименование");
						СтрокаМероприятия.ДатаДокументаОснования = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Дата"));
						СтрокаМероприятия.СерияДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Серия");
						СтрокаМероприятия.НомерДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[0], "Номер");
					КонецЕсли;
					
					Если Основания.Количество() > 1 Тогда
						СтрокаМероприятия.НаименованиеВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Наименование");
						СтрокаМероприятия.ДатаВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ДатаИзСтроки(ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Дата"));
						СтрокаМероприятия.СерияВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Серия");
						СтрокаМероприятия.НомерВторогоДокументаОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Основания[1], "Номер");
					КонецЕсли;
					
					СтрокаМероприятия.ЯвляетсяСовместителем = (ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ЯвляетсяСовместителем") = "1");
					
					Если СтрокаМероприятия.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии Тогда
						СтрокаМероприятия.ОписаниеДолжности = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Должность");
					Иначе
						СтрокаМероприятия.ПредставлениеДолжности = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Должность");
					КонецЕсли;
					
					СтрокаМероприятия.ПредставлениеПодразделения = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "СтруктурноеПодразделение");
					СтрокаМероприятия.ОснованиеУвольненияТекстОснования = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "Причина");
					СтрокаМероприятия.ОснованиеУвольненияСтатья = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Статья");
					СтрокаМероприятия.ОснованиеУвольненияЧасть = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Часть");
					СтрокаМероприятия.ОснованиеУвольненияПункт = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Пункт");
					СтрокаМероприятия.ОснованиеУвольненияПодпункт = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Подпункт");
					СтрокаМероприятия.ОснованиеУвольненияАбзац = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ОснованиеУвольнения/Абзац");
					КодПоОКЗ = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "КодВФпоОКЗ");
					Если ЗначениеЗаполнено(КодПоОКЗ) Тогда
						СтрокаМероприятия.КодПоОКЗ = Справочники.КлассификаторЗанятий.НайтиПоКоду(Лев(КодПоОКЗ, 4));
					КонецЕсли;
					СтрокаМероприятия.ТерриториальныеУсловия = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ОбъектМероприятия, "ТерриториальныеУсловия");
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ФИО = Новый Массив;
			ФИО.Добавить(СтрокаСотрудники.Фамилия);
			ФИО.Добавить(СтрокаСотрудники.Имя);
			Если ЗначениеЗаполнено(СтрокаСотрудники.Отчество) Тогда
				ФИО.Добавить(СтрокаСотрудники.Отчество);
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не найден сотрудник %1 (%2), СНИЛС: %3';
					|en = 'Cannot find employee %1 (%2), SNILS: %3'"),
				СтрСоединить(ФИО, " "),
				Формат(СтрокаСотрудники.ДатаРождения, "ДЛФ=D"),
				СтрокаСотрудники.СтраховойНомерПФР);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДозаполнитьМероприятияДокумента(ДокументОбъект, Отказ);
	ДозаполнитьЗаявленияДокумента(ДокументОбъект, ЗаявленияСотрудников, Отказ);
	
КонецФункции

// Читает протокол приема файла СЗВ-ТД в ПФР
//
Функция ПрочитатьПротоколПриема(ДокументОбъект, АдресДанныхПротоколаПриемки, ИмяФайла) Экспорт
	
	ФайлСведений = ПолучитьИзВременногоХранилища(АдресДанныхПротоколаПриемки);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлСведений.Записать(ИмяВременногоФайла);
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ДеревоXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось прочитать файл (%1).';
										|en = 'Cannot read the file (%1).'"), ИмяФайла);
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Чтение протокола приема СЗВ-ТД';
										|en = 'Reading SZV-TD receipt log'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Попытка
		
		КодФормы = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "УПП/ПроверяемыйДокумент/КодФормы");
		ИмяФайлаПротокола = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "УПП/ПроверяемыйДокумент/Файл/ИмяФайла");
		РегистрационныйНомерПФР = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СлужебнаяИнформация/Контрагент/РегистрационныйНомер");
		РезультатПроверки = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СлужебнаяИнформация/РезультатПроверки");
		
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не известный формат файла (%1).';
										|en = 'Unknown file format (%1).'"), ИмяФайла);
	КонецПопытки;
	
	Если КодФормы <> "СЗВ-ТД" И КодФормы <> "ЕФС-1"
		Или ИмяФайлаПротокола = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не известный формат файла (%1).';
										|en = 'Unknown file format (%1).'"), ИмяФайла);
		
	КонецЕсли;
	
	Если СтрНайти(ВРег(ИмяФайлаПротокола), ВРег(ДокументОбъект.ИмяФайлаДляПФР)) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Файл протокола предназначен для другого документа.';
								|en = 'Log file is for another document.'");
	КонецЕсли;
	
	ДанныеОрганизации = ПерсонифицированныйУчет.СведенияОбОрганизации(
		ДокументОбъект.Организация, КонецМесяца(ДокументОбъект.ОтчетныйПериод));
	
	Если ЗначениеЗаполнено(РезультатПроверки)
		И ДанныеОрганизации.РегистрационныйНомерПФР <> РегистрационныйНомерПФР Тогда
		
		ВызватьИсключение НСтр("ru = 'Файл содержит данные для другого страхователя';
								|en = 'File contains data for another insurant'");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатПроверки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Файл не содержит результатов приема';
													|en = 'File does not contain receipt results'"));
	КонецЕсли;
	
	ОшибкиДокумента = Новый Соответствие;
	
	ДеревоСведений = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "УПП/ПроверочныйМодуль/ПроверкаФайлов");
	СписокФайлов = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ДеревоСведений, "Файл");
	Для Каждого ДанныеФайла Из СписокФайлов Цикл
		
		ИмяПринятогоФайла = ДанныеФайла.ИмяФайла;
		КоллекцияРезультатов = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ДанныеФайла, "Результат");
		Если КоллекцияРезультатов <> Неопределено Тогда
			Для Каждого Результат Из КоллекцияРезультатов Цикл
				
				БлокиПроверки = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(Результат, "БлокПроверок");
				Если БлокиПроверки <> Неопределено Тогда
					Для Каждого БлокПроверок Из БлокиПроверки Цикл
						
						Проверки = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(БлокПроверок, "Проверка");
						Если Проверки <> Неопределено Тогда
							Для Каждого Проверка Из Проверки Цикл
								
								Если Проверка.КодРезультата <> "00" И СтрНайти(Проверка.ID, "СЗВ-ТД") > 0 Тогда
									
									ОшибкиПроверки = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Проверка, "Ошибки");
									Если ОшибкиПроверки <> Неопределено Тогда
										
										Ошибки = ЭлектронныеТрудовыеКнижки.КоллекцияОбъектовXDTO(ОшибкиПроверки, "Ошибка");
										Для Каждого Ошибка Из Ошибки Цикл
											
											КлючОшибки = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Ошибка, "Объект/Значение");
											Если КлючОшибки = Неопределено Тогда
												КлючОшибки = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(Ошибка, "ОжидаемоеЗначение");
											КонецЕсли;
											
											ОшибкиОбъекта = ОшибкиДокумента.Получить(КлючОшибки);
											Если ОшибкиОбъекта = Неопределено Тогда
												ОшибкиОбъекта = Новый Соответствие;
												ОшибкиДокумента.Вставить(КлючОшибки, ОшибкиОбъекта);
											КонецЕсли;
											
											ОшибкиПроверки = ОшибкиОбъекта.Получить(Проверка.ОписаниеПроверки);
											Если ОшибкиПроверки = Неопределено Тогда
												ОшибкиПроверки = Новый Массив;
												ОшибкиОбъекта.Вставить(Проверка.ОписаниеПроверки, ОшибкиПроверки);
											КонецЕсли;
											
											ОшибкиПроверки.Добавить(Новый Структура("ПутьДоЭлемента,КодРезультата", Ошибка.ПутьДоЭлемента, Проверка.КодРезультата));
											
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ДокументОбъект.Сотрудники.Количество() > 0
			И ТипЗнч(ДокументОбъект.Сотрудники[0]) = Тип("ДанныеФормыЭлементКоллекции")
			И ДокументОбъект.Сотрудники[0].Свойство("СообщенияМероприятий") Тогда
			
			Для Каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
				СтрокаСотрудника.СообщенияМероприятий.Очистить();
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СотрудникиСОшибками = Новый Соответствие;
	ОшибкиСотрудников = Новый Соответствие;
	Если ОшибкиДокумента.Количество() > 0 Тогда
		
		Для Каждого ОшибкиОбъекта Из ОшибкиДокумента Цикл
			
			Для Каждого ОшибкиПроверки Из ОшибкиОбъекта.Значение Цикл
				
				Для Каждого ДанныеОшибки Из ОшибкиПроверки.Значение Цикл
					
					ТекстСообщения = "";
					Поле = "";
					ПутиКДанным = ПутьКДаннымОшибки(ДанныеОшибки.ПутьДоЭлемента);
					Сотрудник = Неопределено;
					
					ТекстСообщенияМероприятия = "";
					ПутьМероприятия = "";
					
					Для Каждого ПутьКДанным Из ПутиКДанным Цикл
						
						Если ПустаяСтрока(ТекстСообщения) Тогда
							
							Если СтрНачинаетсяС(ПутьКДанным.ИмяЭлемента, "ЗЛ") Тогда
								
								СтрокаСотрудника = Неопределено;
								Если ЗначениеЗаполнено(ПутьКДанным.НомерСтроки) Тогда
									
									СтрокиСотрудника = ДокументОбъект.Сотрудники.НайтиСтроки(Новый Структура("НомерСтроки", ПутьКДанным.НомерСтроки));
									Если СтрокиСотрудника.Количество() > 0 Тогда
										
										СтрокаСотрудника = СтрокиСотрудника[0];
										Сотрудник = СтрокаСотрудника.Сотрудник;
										
									КонецЕсли;
									
								КонецЕсли;
								
								Если СтрокаСотрудника = Неопределено Тогда
									ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке';
																	|en = 'In line'") + " " + ПутьКДанным.НомерСтроки) + " " + ОшибкиПроверки.Ключ;
								Иначе
									ТекстСообщения = Строка(СтрокаСотрудника.Сотрудник) + ": " + ОшибкиПроверки.Ключ;
								КонецЕсли;
								
							Иначе
								ТекстСообщения = ТекстСообщения + ОшибкиПроверки.Ключ;
							КонецЕсли;
							
						ИначеЕсли ПутьКДанным.ИмяЭлемента = "Мероприятие"
							Или ПутьКДанным.ИмяЭлемента = "МероприятиеОтменяемое" Тогда
							
							Если ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(ПутьКДанным.НомерСтроки) Тогда
								
								МероприятияСотрудника = ДокументОбъект.Мероприятия.Выгрузить(Новый Структура("Сотрудник", СОтрудник));
								Если ПутьКДанным.НомерСтроки <= МероприятияСотрудника.Количество() Тогда
									
									СтрокаМероприятий = МероприятияСотрудника[ПутьКДанным.НомерСтроки - 1];
									Если ЗначениеЗаполнено(СтрокаМероприятий.ДатаОтмены) Тогда
										
										ТекстМероприятия = СтрШаблон(
											НСтр("ru = 'Строка %1, %2, от %3, отменено %4';
												|en = 'Line %1, %2, dated %3, canceled %4'"),
											ПутьКДанным.НомерСтроки,
											СтрокаМероприятий.ВидМероприятия,
											Формат(СтрокаМероприятий.ДатаМероприятия, "ДЛФ=D"),
											Формат(СтрокаМероприятий.ДатаОтмены, "ДЛФ=D"));
										
									Иначе
										
										ТекстМероприятия = СтрШаблон(
											НСтр("ru = 'Строка %1, %2, от %3';
												|en = 'Line %1, %2, dated %3'"),
											ПутьКДанным.НомерСтроки,
											СтрокаМероприятий.ВидМероприятия,
											Формат(СтрокаМероприятий.ДатаМероприятия, "ДЛФ=D"));
										
									КонецЕсли;
									
									ТекстСообщения = ТекстСообщения + " (" + ТекстМероприятия + ")";
									
								КонецЕсли;
								
								ТекстыПредставленияОшибки = СтрРазделить(ОшибкиПроверки.Ключ, ".");
								Если ТекстыПредставленияОшибки.Количество() > 0 Тогда
									ТекстСообщенияМероприятия = СокрЛП(ТекстыПредставленияОшибки[ТекстыПредставленияОшибки.Количество() - 1]);
									ПутьМероприятия = "Мероприятия[" + Формат(ПутьКДанным.НомерСтроки - 1, "ЧН=; ЧГ=") + "].ВидМероприятия";
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
						ОписаниеДанных = ОписаниеДанных().Получить(ПутьКДанным.ИмяЭлемента);
						Если ЗначениеЗаполнено(ОписаниеДанных) Тогда
							
							Если ОписаниеДанных.Множественное
								И ЗначениеЗаполнено(ПутьКДанным.НомерСтроки)
								И СтрНайти(ОписаниеДанных.Путь, "%") > 0 Тогда
								
								Поле = Поле + СтрШаблон(ОписаниеДанных.Путь, Формат(ПутьКДанным.НомерСтроки - 1, "ЧН=; ЧГ="));
								
							Иначе
								Поле = Поле + ОписаниеДанных.Путь;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЗначениеЗаполнено(Сотрудник) Тогда
						
						Если ЗначениеЗаполнено(ДанныеОшибки.КодРезультата) Тогда
							
							КодРезультата = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеОшибки.КодРезультата);
							Если КодРезультата >= 30 Тогда
								СотрудникиСОшибками.Вставить(Сотрудник, Истина);
							КонецЕсли;
							
						КонецЕсли;
						
						ОшибкиСотрудника = ОшибкиСотрудников.Получить(Сотрудник);
						Если ОшибкиСотрудника = Неопределено Тогда
							ОшибкиСотрудника = Новый Массив;
							ОшибкиСотрудников.Вставить(Сотрудник, ОшибкиСотрудника);
						КонецЕсли;
						
						ОшибкиСотрудника.Добавить(Новый Структура("ТекстСообщения,Поле", ТекстСообщения, Поле));
						
						Если ЗначениеЗаполнено(ТекстСообщенияМероприятия) Тогда
							
							Если ТипЗнч(СтрокаСотрудника) = Тип("ДанныеФормыЭлементКоллекции")
								И СтрокаСотрудника.Свойство("СообщенияМероприятий") Тогда
								
								СтрокаСотрудника.СообщенияМероприятий.Добавить(ПутьМероприятия, ТекстСообщенияМероприятия);
								
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, Поле, "Объект");
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатПроверки = НСтр("ru = 'Документ не принят';
									|en = 'Document is not accepted'") Тогда
		ДокументОбъект.ДокументПринятВПФР = Ложь;
	ИначеЕсли РезультатПроверки = НСтр("ru = 'Документ принят';
										|en = 'Document accepted'") Тогда
		ДокументОбъект.ДокументПринятВПФР = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаСотрудники Из ДокументОбъект.Сотрудники Цикл
		
		Если РезультатПроверки = НСтр("ru = 'Документ принят';
										|en = 'Document accepted'") Тогда
			СтрокаСотрудники.ПринятоВПФР = Истина;
		ИначеЕсли РезультатПроверки = НСтр("ru = 'Документ принят частично';
											|en = 'Document partially accepted'") Тогда
			
			Если СотрудникиСОшибками.Получить(СтрокаСотрудники.Сотрудник) = Неопределено Тогда
				СтрокаСотрудники.ПринятоВПФР = Истина;
			КонецЕсли;
			
		ИначеЕсли РезультатПроверки = НСтр("ru = 'Документ не принят';
											|en = 'Document is not accepted'") Тогда
			СтрокаСотрудники.ПринятоВПФР = Ложь;
		КонецЕсли;
		
		ОшибкиСотрудника = ОшибкиСотрудников.Получить(СтрокаСотрудники.Сотрудник);
		Если ОшибкиСотрудника <> Неопределено Тогда
			
			Для Каждого ОписаниеОшибки Из ОшибкиСотрудника Цикл
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки.ТекстСообщения, ДокументОбъект.Ссылка, ОписаниеОшибки.Поле, "Объект");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет, что данные XML соответствуют формату файлов СЗВ-ТД
//
Функция ЭтоДанныеСЗВТД(ДеревоXML) Экспорт
	
	Попытка
		
		КодФормы = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД");
		ЗЛ = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/ЗЛ");
		РегистрационныйНомерПФР = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ_ТД/Работодатель/РегНомер");
		
		Если КодФормы = Неопределено
			Или ЗЛ = Неопределено
			Или РегистрационныйНомерПФР = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что данные XML соответствуют формату файлов протоколов приема СЗВ-ТД
//
Функция ЭтоДанныеПротоколаПриемаСЗВТД(ДеревоXML) Экспорт
	
	Попытка
		
		КодФормы = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "УПП/ПроверяемыйДокумент/КодФормы");
		ИмяФайлаПротокола = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "УПП/ПроверяемыйДокумент/Файл/ИмяФайла");
		РегистрационныйНомерПФР = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СлужебнаяИнформация/Контрагент/РегистрационныйНомер");
		
		Если КодФормы = Неопределено
			Или ИмяФайлаПротокола = Неопределено
			Или РегистрационныйНомерПФР = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если КодФормы <> "СЗВ-ТД"
		Или ИмяФайлаПротокола = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоДанныеСЗВТДВЕФС1(ДеревоXML) Экспорт
	
	Попытка
		
		КодФормы = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ");
		ЗЛ = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СЗВ/ЗЛ");
		РегистрационныйНомерПФР = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "Страхователь/РегНомер");
		
		Если КодФормы = Неопределено
			Или ЗЛ = Неопределено
			Или РегистрационныйНомерПФР = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоДанныеПротоколаПриемаСЗВТДВЕФС1(ДеревоXML) Экспорт
	
	Попытка
		
		КодФормы = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "УПП/ПроверяемыйДокумент/КодФормы");
		ИмяФайлаПротокола = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "УПП/ПроверяемыйДокумент/Файл/ИмяФайла");
		РегистрационныйНомерПФР = ЭлектронныеТрудовыеКнижки.ПолучитьСвойствоXDTO(ДеревоXML, "СлужебнаяИнформация/Контрагент/РегистрационныйНомер");
		
		Если КодФормы = Неопределено
			Или ИмяФайлаПротокола = Неопределено
			Или РегистрационныйНомерПФР = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если КодФормы <> "ЕФС-1"
		Или ИмяФайлаПротокола = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Возвращает ссылку на документ по имени файла сведений
//
Функция ДокументПоИмениФайла(ИмяФайла) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|ГДЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайлаДляПФР ПОДОБНО &ИмяФайлаДляПФР
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Проведен,
		|	Ссылка";
	
	Запрос.УстановитьПараметр("ИмяФайлаДляПФР", СтрЗаменить(ВРег(ИмяФайла), ".XML", ""));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЧастьФИОИзСтроки(Знач ЧастьФИО)
	
	СловаЧастиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЧастьФИО);
	
	Для Каждого СловоЧастиФИО Из СловаЧастиФИО Цикл
		ЧастьФИО = СтрЗаменить(ЧастьФИО, СловоЧастиФИО, Лев(СловоЧастиФИО, 1) + НРег(Сред(СловоЧастиФИО, 2)));
	КонецЦикла;
	
	Возврат ЧастьФИО;
	
КонецФункции

Функция ФизическоеЛицоПоСНИЛС(СНИЛС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтраховойНомерПФР", СНИЛС);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РуководительПоФИО(Фамилия, Имя, Отчество)
	
	Руководитель = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПоиска = СотрудникиКлиентСервер.ПараметрыПоискаПохожих();
	ПараметрыПоиска.Фамилия = Фамилия;
	ПараметрыПоиска.Имя = Имя;
	ПараметрыПоиска.Отчество = Отчество;
	
	ПохожиеФизическиеЛица = СотрудникиФормы.ПохожиеФизическиеЛица(ПараметрыПоиска);
	Если ПохожиеФизическиеЛица.ДанныеФизическихЛицДоступны И ПохожиеФизическиеЛица.ДанныеФизическихЛиц.Количество() > 0 Тогда
		Руководитель = ПохожиеФизическиеЛица.ДанныеФизическихЛиц[0].ФизическоеЛицо;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Руководитель;
	
КонецФункции

Функция ДолжностьПоНаименованию(НаименованиеДолжности)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеДолжности);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.Наименование = &Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДозаполнитьМероприятияДокумента(ДокументОбъект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Мероприятия", ДокументОбъект.Мероприятия.Выгрузить(, "Сотрудник,ДатаМероприятия,ИдМероприятия,ДатаОтмены"));
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(ДокументОбъект.Организация));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.Сотрудник КАК ФизическоеЛицо,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.ДатаОтмены КАК ДатаОтмены
		|ПОМЕСТИТЬ ВТФизическиеЛицаМероприятий
		|ИЗ
		|	&Мероприятия КАК Мероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ФизическиеЛицаМероприятий.ДатаМероприятия КАК ДатаНачала,
		|	ФизическиеЛицаМероприятий.ДатаМероприятия КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДляСЗВТДСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаМероприятий КАК ФизическиеЛицаМероприятий
		|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛицаМероприятий.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И (ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору)
		|ГДЕ
		|	Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= ФизическиеЛицаМероприятий.ДатаМероприятия
		|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= ФизическиеЛицаМероприятий.ДатаМероприятия
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Мероприятия.ФизическоеЛицо КАК Сотрудник,
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Отменено КАК Отменено,
		|	Мероприятия.Сотрудник КАК СотрудникЗаписи,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
		|	Мероприятия.Сведения КАК Сведения,
		|	Мероприятия.Подразделение КАК Подразделение,
		|	Мероприятия.Должность КАК Должность,
		|	Мероприятия.РазрядКатегория КАК РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Мероприятия.ДатаС КАК ДатаС,
		|	Мероприятия.ДатаПо КАК ДатаПо,
		|	Мероприятия.ДатаОтмены КАК ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	Мероприятия.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ КАК КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы КАК УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика КАК СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности КАК ОписаниеДолжности
		|ИЗ
		|	ВТФизическиеЛицаМероприятий КАК ФизическиеЛицаМероприятий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ПО ФизическиеЛицаМероприятий.ФизическоеЛицо = Мероприятия.ФизическоеЛицо
		|			И (Мероприятия.Организация = &Организация)
		|			И ФизическиеЛицаМероприятий.ИдМероприятия = Мероприятия.ИдМероприятия
		|			И (ВЫБОР
		|				КОГДА ФизическиеЛицаМероприятий.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ = Мероприятия.Отменено)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МероприятияПрочие.ФизическоеЛицо,
		|	МероприятияПрочие.Организация,
		|	МероприятияПрочие.ИдМероприятия,
		|	МероприятияПрочие.Отменено,
		|	МероприятияПрочие.Сотрудник,
		|	МероприятияПрочие.ДатаМероприятия,
		|	МероприятияПрочие.ВидМероприятия,
		|	МероприятияПрочие.Сведения,
		|	МероприятияПрочие.Подразделение,
		|	МероприятияПрочие.Должность,
		|	МероприятияПрочие.РазрядКатегория,
		|	МероприятияПрочие.КодПоРееструДолжностей,
		|	МероприятияПрочие.ТрудоваяФункция,
		|	МероприятияПрочие.НаименованиеДокументаОснования,
		|	МероприятияПрочие.ДатаДокументаОснования,
		|	МероприятияПрочие.СерияДокументаОснования,
		|	МероприятияПрочие.НомерДокументаОснования,
		|	МероприятияПрочие.НаименованиеВторогоДокументаОснования,
		|	МероприятияПрочие.ДатаВторогоДокументаОснования,
		|	МероприятияПрочие.СерияВторогоДокументаОснования,
		|	МероприятияПрочие.НомерВторогоДокументаОснования,
		|	МероприятияПрочие.ОснованиеУвольнения,
		|	МероприятияПрочие.ДатаС,
		|	МероприятияПрочие.ДатаПо,
		|	МероприятияПрочие.ДатаОтмены,
		|	МероприятияПрочие.ЯвляетсяСовместителем,
		|	МероприятияПрочие.ПредставлениеДолжности,
		|	МероприятияПрочие.ПредставлениеПодразделения,
		|	МероприятияПрочие.ОснованиеУвольненияТекстОснования,
		|	МероприятияПрочие.ОснованиеУвольненияСтатья,
		|	МероприятияПрочие.ОснованиеУвольненияЧасть,
		|	МероприятияПрочие.ОснованиеУвольненияПункт,
		|	МероприятияПрочие.ОснованиеУвольненияПодпункт,
		|	МероприятияПрочие.ОснованиеУвольненияАбзац,
		|	МероприятияПрочие.КодПоОКЗ,
		|	МероприятияПрочие.ТерриториальныеУсловия,
		|	МероприятияПрочие.ПричинаУвольненияПФР,
		|	МероприятияПрочие.СрочностьТрудовогоДоговора,
		|	МероприятияПрочие.УдаленностьРаботы,
		|	МероприятияПрочие.СокращенностьГрафика,
		|	МероприятияПрочие.ОписаниеДолжности
		|ИЗ
		|	ВТФизическиеЛицаМероприятий КАК ФизическиеЛицаМероприятий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПрочие КАК МероприятияПрочие
		|		ПО ФизическиеЛицаМероприятий.ФизическоеЛицо = МероприятияПрочие.ФизическоеЛицо
		|			И (МероприятияПрочие.Организация = &Организация)
		|			И ФизическиеЛицаМероприятий.ИдМероприятия = МероприятияПрочие.ИдМероприятия";
	
	МероприятияИБ = Запрос.Выполнить().Выгрузить();
	МероприятияИБ.Индексы.Добавить("Сотрудник,ИдМероприятия");
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолучения.Организация = ДокументОбъект.Организация;
	ПараметрыПолучения.КадровыеДанные = "Организация," + ЭлектронныеТрудовыеКнижки.ИменаКадровыхДанныхСотрудниковДляНачалаУчета();
	
	ЗапросВТСотрудникиОрганизацииПоРабочимМестам = КадровыйУчет.ЗапросВТСотрудникиОрганизацииПоРабочимМестам(
		Истина, "ВТДляСЗВТДСотрудникиОрганизации", "ВТДляСЗВТДСотрудникиПериоды", ПараметрыПолучения);
	
	ЗапросВТСотрудникиОрганизацииПоРабочимМестам.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТСотрудникиОрганизацииПоРабочимМестам.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Период КАК Период,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.Организация КАК Организация,
		|	СотрудникиОрганизации.Подразделение КАК Подразделение,
		|	СотрудникиОрганизации.Должность КАК Должность,
		|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости,
		|	СотрудникиОрганизации.ВидСобытия КАК ВидСобытия,
		|	СотрудникиОрганизации.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
		|	&РазрядКатегория КАК РазрядКатегория
		|ИЗ
		|	ВТДляСЗВТДСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	ЭлектронныеТрудовыеКнижки.УточнитьЗапросПолученияДанныхНаНачалоУчета(Запрос);
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	СтрокиНовыхМероприятий = Новый Массив;
	Для Каждого СтрокаМероприятия Из ДокументОбъект.Мероприятия Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", СтрокаМероприятия.Сотрудник);
		СтруктураПоиска.Вставить("ИдМероприятия", СтрокаМероприятия.ИдМероприятия);
		НайденныеМероприятия = МероприятияИБ.НайтиСтроки(СтруктураПоиска);
		Если НайденныеМероприятия.Количество() > 0 Тогда
			
			МероприятиеИБ = НайденныеМероприятия[0];
			
			ТекстСообщения = "";
			Если МероприятиеИБ.ВидМероприятия <> СтрокаМероприятия.ВидМероприятия Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В базе данных мероприятие %1 (идентификатор: %2) имеет вид %3 (в файле: %4)';
												|en = 'The event %1 in database (ID: %2) has kind %3 (in file: %4)'"),
					СтрокаМероприятия.Сотрудник,
					СтрокаМероприятия.ИдМероприятия,
					МероприятиеИБ.ВидМероприятия,
					СтрокаМероприятия.ВидМероприятия);
				
			ИначеЕсли МероприятиеИБ.ДатаМероприятия <> СтрокаМероприятия.ДатаМероприятия Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В базе данных мероприятие %1 (идентификатор: %2) имеет дату мероприятия %3 (в файле: %4)';
												|en = 'The event %1 in database (ID: %2) has event date %3 (in file: %4)'"),
					СтрокаМероприятия.Сотрудник,
					СтрокаМероприятия.ИдМероприятия,
					Формат(МероприятиеИБ.ДатаМероприятия, "ДЛФ=D"),
					Формат(СтрокаМероприятия.ДатаМероприятия, "ДЛФ=D"));
				
			ИначеЕсли ЗначениеЗаполнено(МероприятиеИБ.НаименованиеДокументаОснования) И
				ВРег(МероприятиеИБ.НаименованиеДокументаОснования) <> ВРег(СтрокаМероприятия.НаименованиеДокументаОснования) Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В базе данных мероприятие %1 (идентификатор: %2) имеет наименование документа основания %3 (в файле: %4)';
												|en = 'The event %1 in database (ID: %2) has base document description %3 (in file: %4)'"),
					СтрокаМероприятия.Сотрудник,
					СтрокаМероприятия.ИдМероприятия,
					МероприятиеИБ.НаименованиеДокументаОснования,
					СтрокаМероприятия.НаименованиеДокументаОснования);
				
			ИначеЕсли ВРег(МероприятиеИБ.НомерДокументаОснования) <> ВРег(СтрокаМероприятия.НомерДокументаОснования) Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В базе данных мероприятие %1 (идентификатор: %2) имеет номер документа основания %3 (в файле: %4)';
												|en = 'The event %1 in database (ID: %2) has base document number %3 (in file: %4)'"),
					СтрокаМероприятия.Сотрудник,
					СтрокаМероприятия.ИдМероприятия,
					МероприятиеИБ.НомерДокументаОснования,
					СтрокаМероприятия.НомерДокументаОснования);
				
			ИначеЕсли МероприятиеИБ.ДатаДокументаОснования <> СтрокаМероприятия.ДатаДокументаОснования Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В базе данных мероприятие %1 (идентификатор: %2) имеет дату документа основания %3 (в файле: %4)';
												|en = 'The event %1 in database (ID: %2) has base document date %3 (in file: %4)'"),
					СтрокаМероприятия.Сотрудник,
					СтрокаМероприятия.ИдМероприятия,
					Формат(МероприятиеИБ.ДатаДокументаОснования, "ДЛФ=D"),
					Формат(СтрокаМероприятия.ДатаДокументаОснования, "ДЛФ=D"));
				
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстСообщения) Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаМероприятия, МероприятиеИБ,
					"СотрудникЗаписи,Подразделение,Должность,КодПоРееструДолжностей,РазрядКатегория,ТрудоваяФункция,ОснованиеУвольнения");
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокиНовыхМероприятий.Добавить(СтрокаМероприятия);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизическоеЛицо", СтрокаМероприятия.Сотрудник);
		СтруктураПоиска.Вставить("Период", СтрокаМероприятия.ДатаМероприятия);
		Если Не СтрокаМероприятия.ЯвляетсяСовместителем Тогда
			СтруктураПоиска.Вставить("ВидЗанятости", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
		КонецЕсли;
		
		СтрокаСотрудника = Неопределено;
		
		Сотрудники = ТаблицаСотрудников.НайтиСтроки(СтруктураПоиска);
		Если Сотрудники.Количество() > 0 Тогда
			
			Если Не СтрокаМероприятия.ЯвляетсяСовместителем Тогда
				
				Если Сотрудники.Количество() = 1 Тогда
					СтрокаСотрудника = Сотрудники[0];
				КонецЕсли;
				
			Иначе
				
				СтрокиСовместителей = Новый Массив;
				СтрокиСовместителейСПериодом = Новый Массив;
				Для Каждого СтрокаСотрудники Из Сотрудники Цикл
					
					Если СтрокаСотрудники.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокиСовместителей.Добавить(СтрокаСотрудники);
					Если СтрокаМероприятия.ДатаМероприятия = НачалоДня(СтрокаСотрудники.РабочееМестоПериодРегистрации) Тогда
						СтрокиСовместителейСПериодом.Добавить(СтрокаСотрудники);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокиСовместителейСПериодом.Количество() = 1 Тогда
					СтрокаСотрудника = СтрокиСовместителейСПериодом[0];
				ИначеЕсли СтрокиСовместителей.Количество() = 1 Тогда
					СтрокаСотрудника = СтрокиСовместителей[0];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаСотрудника <> Неопределено Тогда
			
			СтрокаМероприятия.СотрудникЗаписи = СтрокаСотрудника.Сотрудник;
			Если СтрокаМероприятия.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Прием
				Или СтрокаМероприятия.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод Тогда
				
				СтрокаМероприятия.Подразделение = СтрокаСотрудника.Подразделение;
				СтрокаМероприятия.Должность = СтрокаСотрудника.Должность;
				
			ИначеЕсли СтрокаМероприятия.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение Тогда
				
				СтрокаМероприятия.ОснованиеУвольнения = ОснованиеУвольнения(
					СтрокаМероприятия.ОснованиеУвольненияЧасть,
					СтрокаМероприятия.ОснованиеУвольненияСтатья,
					СтрокаМероприятия.ОснованиеУвольненияПункт,
					СтрокаМероприятия.ОснованиеУвольненияПодпункт,
					СтрокаМероприятия.ОснованиеУвольненияАбзац);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		
		Если СтрокиНовыхМероприятий.Количество() > 0 Тогда
			
			РегистрацияТрудовойДеятельности = Документы.РегистрацияТрудовойДеятельности.СоздатьДокумент();
			
			РегистрацияТрудовойДеятельности.Дата = ДокументОбъект.Дата;
			РегистрацияТрудовойДеятельности.Организация = ДокументОбъект.Организация;
			РегистрацияТрудовойДеятельности.Ответственный = ДокументОбъект.Ответственный;
			РегистрацияТрудовойДеятельности.Комментарий = НСтр("ru = 'Импортирован';
																|en = 'Imported'") + ": " + Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
			
			Для Каждого СтрокаМероприятия Из СтрокиНовыхМероприятий Цикл
				ЗаполнитьЗначенияСвойств(РегистрацияТрудовойДеятельности.Мероприятия.Добавить(), СтрокаМероприятия);
			КонецЦикла;
			
			Если РегистрацияТрудовойДеятельности.ПроверитьЗаполнение() Тогда
				
				Попытка
					РегистрацияТрудовойДеятельности.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), , , , Отказ);
				КонецПопытки;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ДозаполнитьЗаявленияДокумента(ДокументОбъект, ЗаявленияСотрудников, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаявленияСотрудников.Количество() > 0 Тогда
		
		ОтозванныеЗаявления = Новый ТаблицаЗначений;
		ОтозванныеЗаявления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ОтозванныеЗаявления.Колонки.Добавить("Заявление", Новый ОписаниеТипов("ДокументСсылка.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности"));
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ЗаявленияСотрудников", ЗаявленияСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаявленияСотрудников.Сотрудник КАК Сотрудник,
			|	ЗаявленияСотрудников.ВидЗаявления КАК ВидЗаявления,
			|	ЗаявленияСотрудников.СтатусЗаявления КАК СтатусЗаявления,
			|	ЗаявленияСотрудников.Дата КАК Дата,
			|	ЗаявленияСотрудников.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ВТЗаявленияСотрудниковДокумента
			|ИЗ
			|	&ЗаявленияСотрудников КАК ЗаявленияСотрудников
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаявленияСотрудниковДокумента.Сотрудник КАК Сотрудник,
			|	ЗаявленияСотрудниковДокумента.ВидЗаявления КАК ВидЗаявления,
			|	ЗаявленияСотрудниковДокумента.Дата КАК Дата,
			|	ЗаявленияСотрудниковДокумента.НомерСтроки КАК НомерСтроки,
			|	ЗаявленияСотрудниковДокумента.СтатусЗаявления КАК СтатусЗаявления,
			|	ЗаявленияОВеденииТрудовыхКнижек.Регистратор КАК Заявление
			|ПОМЕСТИТЬ ВТЗаявленияСотрудников
			|ИЗ
			|	ВТЗаявленияСотрудниковДокумента КАК ЗаявленияСотрудниковДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижек
			|		ПО ЗаявленияСотрудниковДокумента.Сотрудник = ЗаявленияОВеденииТрудовыхКнижек.ФизическоеЛицо
			|			И ЗаявленияСотрудниковДокумента.ВидЗаявления = ЗаявленияОВеденииТрудовыхКнижек.ВидЗаявления
			|			И ЗаявленияСотрудниковДокумента.Дата = ЗаявленияОВеденииТрудовыхКнижек.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаявленияСотрудников.Сотрудник КАК Сотрудник,
			|	ЗаявленияСотрудников.ВидЗаявления КАК ВидЗаявления,
			|	ЗаявленияСотрудников.Дата КАК Дата,
			|	ЗаявленияСотрудников.НомерСтроки КАК НомерСтроки,
			|	ЗаявленияСотрудников.СтатусЗаявления КАК СтатусЗаявления,
			|	ЗаявленияСотрудников.Заявление КАК Заявление
			|ИЗ
			|	ВТЗаявленияСотрудников КАК ЗаявленияСотрудников
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата,
			|	Заявление";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("Заявление") Цикл
				
				Если ЗначениеЗаполнено(Выборка.Заявление) Тогда
					
					Пока Выборка.Следующий() Цикл
						
						СтрокаСотрудника = ДокументОбъект.Сотрудники.Найти(Выборка.НомерСтроки, "НомерСтроки");
						Если СтрокаСотрудника <> Неопределено Тогда
							
							Если Выборка.ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки Тогда
								СтрокаСотрудника.ЗаявлениеОПродолжении = Выборка.Заявление;
								СтрокаСотрудника.ЗаявлениеОПродолженииОтмена = (Выборка.СтатусЗаявления = 2);
							Иначе
								СтрокаСотрудника.ЗаявлениеОПредоставлении = Выборка.Заявление;
								СтрокаСотрудника.ЗаявлениеОПредоставленииОтмена = (Выборка.СтатусЗаявления = 2);
							КонецЕсли;
							
							Если Выборка.СтатусЗаявления = 2 Тогда
								
								СтрокаОтозванного = ОтозванныеЗаявления.Добавить();
								СтрокаОтозванного.Сотрудник = Выборка.Сотрудник;
								СтрокаОтозванного.Заявление = Выборка.Заявление;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДокументЗаявленияОбъект = Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.СоздатьДокумент();
				ДокументЗаявленияОбъект.Дата = Выборка.Дата;
				ДокументЗаявленияОбъект.Организация = ДокументОбъект.Организация;
				ДокументЗаявленияОбъект.Ответственный = ДокументОбъект.Ответственный;
				ДокументЗаявленияОбъект.Руководитель = ДокументОбъект.Руководитель;
				ДокументЗаявленияОбъект.ДолжностьРуководителя = ДокументОбъект.ДолжностьРуководителя;
				ДокументЗаявленияОбъект.Комментарий = НСтр("ru = 'Импортирован';
															|en = 'Imported'") + ": " + Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
				
				СсылкаНовогоЗаявления = Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ПолучитьСсылку();
				
				Пока Выборка.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(ДокументЗаявленияОбъект.Сотрудники.Добавить(), Выборка);
					
					СтрокаСотрудника = ДокументОбъект.Сотрудники.Найти(Выборка.НомерСтроки, "НомерСтроки");
					Если СтрокаСотрудника <> Неопределено Тогда
						
						Если Выборка.ВидЗаявления = Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки Тогда
							СтрокаСотрудника.ЗаявлениеОПродолжении = СсылкаНовогоЗаявления;
							СтрокаСотрудника.ЗаявлениеОПродолженииОтмена = (Выборка.СтатусЗаявления = 2);
						Иначе
							СтрокаСотрудника.ЗаявлениеОПредоставлении = СсылкаНовогоЗаявления;
							СтрокаСотрудника.ЗаявлениеОПредоставленииОтмена = (Выборка.СтатусЗаявления = 2);
						КонецЕсли;
						
						Если Выборка.СтатусЗаявления = 2 Тогда
							
							СтрокаОтозванного = ОтозванныеЗаявления.Добавить();
							СтрокаОтозванного.Сотрудник = Выборка.Сотрудник;
							СтрокаОтозванного.Заявление = СсылкаНовогоЗаявления;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Попытка
					ДокументЗаявленияОбъект.УстановитьСсылкуНового(СсылкаНовогоЗаявления);
					ДокументЗаявленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), , , , Отказ);
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не Отказ
			И ОтозванныеЗаявления.Количество() > 0 Тогда
			
			Запрос.УстановитьПараметр("ОтозванныеЗаявления", ОтозванныеЗаявления);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ОтозванныеЗаявления.Сотрудник КАК Сотрудник,
				|	ОтозванныеЗаявления.Заявление КАК Заявление
				|ПОМЕСТИТЬ ВТОтозванныеЗаявления
				|ИЗ
				|	&ОтозванныеЗаявления КАК ОтозванныеЗаявления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОтозванныеЗаявления.Сотрудник КАК Сотрудник,
				|	ОтозванныеЗаявления.Заявление КАК Заявление
				|ИЗ
				|	ВТОтозванныеЗаявления КАК ОтозванныеЗаявления
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные КАК ЗаявленияОВеденииТрудовыхКнижекОтозванные
				|		ПО ОтозванныеЗаявления.Сотрудник = ЗаявленияОВеденииТрудовыхКнижекОтозванные.ФизическоеЛицо
				|			И ОтозванныеЗаявления.Заявление = ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление
				|ГДЕ
				|	ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление ЕСТЬ NULL";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 0 Тогда
				
				ДокументОтзывЗаявленийОбъект = Документы.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СоздатьДокумент();
				ДокументОтзывЗаявленийОбъект.Дата = ДокументОбъект.Дата;
				ДокументОтзывЗаявленийОбъект.Организация = ДокументОбъект.Организация;
				ДокументОтзывЗаявленийОбъект.Ответственный = ДокументОбъект.Ответственный;
				ДокументОтзывЗаявленийОбъект.Комментарий = НСтр("ru = 'Импортирован';
																|en = 'Imported'") + ": " + Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
				
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ДокументОтзывЗаявленийОбъект.Сотрудники.Добавить(), Выборка);
				КонецЦикла;
				
				Попытка
					ДокументОтзывЗаявленийОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), , , , Отказ);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОснованиеУвольнения(Часть, Статья, Пункт, Подпункт, Абзац)
	
	СтатьиУвольнения = СтатьиУвольненияСАдресами();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Часть", Часть);
	СтруктураПоиска.Вставить("Статья", Статья);
	СтруктураПоиска.Вставить("Пункт", Пункт);
	СтруктураПоиска.Вставить("Подпункт", Подпункт);
	СтруктураПоиска.Вставить("Абзац", Абзац);
	
	НайденныеСтатьи = СтатьиУвольнения.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтатьи.Количество() > 0 Тогда
		Возврат НайденныеСтатьи[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СтатьиУвольненияСАдресами()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОснованияУвольнения.Ссылка КАК Ссылка,
		|	ОснованияУвольнения.Статья КАК Статья,
		|	ОснованияУвольнения.Часть КАК Часть,
		|	ОснованияУвольнения.Пункт КАК Пункт,
		|	ОснованияУвольнения.Подпункт КАК Подпункт,
		|	ОснованияУвольнения.Абзац КАК Абзац
		|ИЗ
		|	Справочник.ОснованияУвольнения КАК ОснованияУвольнения";
	
	Статьи = Запрос.Выполнить().Выгрузить();
	Статьи.Индексы.Добавить("Часть,Статья,Пункт,Подпункт");
	
	Возврат Статьи;
	
КонецФункции

#КонецОбласти

#Область РаботаСXML

Функция ПутьКДаннымОшибки(ПутьДоЭлемента)
	
	Если Не ЗначениеЗаполнено(ПутьДоЭлемента) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОписаниеПутейУДанным = Новый Массив;
	
	ПутиКДанным = СтрРазделить(ПутьДоЭлемента, "/", Ложь);
	
	ЭлементыКУдалению = Новый Массив;
	Для Каждого ПутьКДанным Из ПутиКДанным Цикл
		
		Если СтрНачинаетсяС(ПутьКДанным, "ЭДПФР") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ПутьКДанным, "СЗВ-ТД") Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияСкобки = СтрНайти(ПутьКДанным, "[");
		Если ПозицияСкобки > 0 Тогда
			
			ИмяЭлемента = Лев(ПутьКДанным, ПозицияСкобки - 1);
			СтрокаНомером = Сред(ПутьКДанным, ПозицияСкобки + 1);
			
			Попытка
				НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Лев(СтрокаНомером, СтрДлина(СтрокаНомером) - 1));
			Исключение
				НомерСтроки = 0;
			КонецПопытки;
			
		Иначе
			ИмяЭлемента = ПутьКДанным;
			НомерСтроки = 0;
		КонецЕсли;
		
		ОписаниеПутейУДанным.Добавить(Новый Структура("ИмяЭлемента,НомерСтроки", ИмяЭлемента, НомерСтроки));
		
	КонецЦикла;
	
	Возврат ОписаниеПутейУДанным;
	
КонецФункции

Функция ОписаниеДанных()
	
	ОписаниеЭлементов = Новый Соответствие;
	ОписаниеЭлементов.Вставить("ОтчетныйПериод", ОписаниеЭлемента("ОтчетныйПериод" , Ложь));
	ОписаниеЭлементов.Вставить("ОтчетныйПериод", ОписаниеЭлемента("ОтчетныйПериод" , Ложь));
	ОписаниеЭлементов.Вставить("ЗЛ", ОписаниеЭлемента("Сотрудники[%1]" , Истина));
	ОписаниеЭлементов.Вставить("ФИО", ОписаниеЭлемента(".Сотрудник" , Ложь));
	ОписаниеЭлементов.Вставить("УТ2:СНИЛС", ОписаниеЭлемента(".СтраховойНомерПФР" , Ложь));
	ОписаниеЭлементов.Вставить("УТ2:ДатаРождения", ОписаниеЭлемента(".ДатаРождения" , Ложь));
	ОписаниеЭлементов.Вставить("СтатусЗаявленияОПродолжении", ОписаниеЭлемента(".СтатусЗаявленияОПродолжении" , Ложь));
	ОписаниеЭлементов.Вставить("ЗаявлениеОПредоставлении", ОписаниеЭлемента(".ЗаявлениеОПредоставлении" , Ложь));
	ОписаниеЭлементов.Вставить("Мероприятие", ОписаниеЭлемента(".Сотрудник" , Истина));
	ОписаниеЭлементов.Вставить("МероприятиеОтменяемое", ОписаниеЭлемента(".Сотрудник" , Истина));
	ОписаниеЭлементов.Вставить("UUID", ОписаниеЭлемента(".Сотрудник" , Ложь));
	
	Возврат ОписаниеЭлементов;
	
КонецФункции

Функция ОписаниеЭлемента(Путь,Множественное)
	
	Возврат Новый Структура("Путь,Множественное", Путь, Множественное);
	
КонецФункции

#КонецОбласти

Функция ОкончаниеПериодаЗаполнения(ДатаДокумента, ОтчетныйПериод) Экспорт
	Если ДатаДокумента < '20210701' Тогда
		Возврат Мин(КонецМесяца(ОтчетныйПериод), ДатаДокумента)
	КонецЕсли;
	Возврат ДатаДокумента;
КонецФункции

#КонецОбласти

#КонецЕсли
