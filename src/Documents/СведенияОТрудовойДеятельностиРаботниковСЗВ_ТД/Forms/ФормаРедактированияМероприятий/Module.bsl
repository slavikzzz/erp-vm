#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РедактируемыйДокументСсылка = Параметры.РедактируемыйДокументСсылка;
	ИспользоватьЗамещение       = Параметры.ИспользоватьЗамещение;
	Организация     = Параметры.Организация;
	Сотрудник       = Параметры.Сотрудник;
	ДатаДокумента   = Параметры.ДатаДокумента;
	ОтчетныйПериод  = Параметры.ОтчетныйПериод;
	СотрудникЗаписи = 
		КадровыйУчет.ОсновнойСотрудникФизическогоЛица(
			Параметры.Сотрудник,
			Параметры.Организация,
			ТекущаяДатаСеанса());
	
	ДанныеИзВременногоХранилищаВДанныеФормы(Параметры.АдресВоВременномХранилище);
	
	РазрядКатегорияВидимость = ЭлектронныеТрудовыеКнижки.РазрядКатегорияВидимость();
	КодПоРееструДолжностейВидимость = ЭлектронныеТрудовыеКнижки.КодПоРееструДолжностейВидимость();
	
	УстановитьЗаголовокФормы();
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Организация, Мероприятия, ДатаДокумента);
	УстановитьПараметрыВыбораЗаявлений();
	УстановитьСвойстваЭлементовФормы();
	
	ЭлектронныеТрудовыеКнижки.УстановитьУсловноеОформлениеТаблицыМероприятий(ЭтотОбъект, Организация, Ложь, Ложь, ДатаДокумента);
	ЭлектронныеТрудовыеКнижки.УстановитьУсловноеОформлениеПредставленияДолжностиТаблицыМероприятий(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Сотрудник
		И Не ТолькоПросмотр Тогда
		
		ЗаполнитьИзменившиесяДанныеФизическогоЛица(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаявлениеОПродолженииПриИзменении(Элемент)
	
	ЗаявлениеПриИзмененииНаСервере("ЗаявлениеОПродолжении");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОПредоставленииПриИзменении(Элемент)
	
	ЗаявлениеПриИзмененииНаСервере("ЗаявлениеОПредоставлении");
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленииОСпособеИзмененияДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.РегистрацияТрудовойДеятельности.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле", Сотрудник, "ЛичныеДанные");
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМероприятия(Команда)
	
	ОчиститьСообщения();
	ЗаполнитьМероприятияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДанныеИзВременногоХранилищаВДанныеФормы(АдресВоВременномХранилище)
	
	Модифицированность = Ложь;
	
	ДанныеДокументаПоСотруднику = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеДокументаПоСотруднику = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить редактируемые данные.';
								|en = 'Cannot receive edited data.'");	
	КонецЕсли;
	
	Сотрудник = ДанныеДокументаПоСотруднику.Сотрудник;
	Фамилия = ДанныеДокументаПоСотруднику.Фамилия;
	Имя = ДанныеДокументаПоСотруднику.Имя;
	Отчество = ДанныеДокументаПоСотруднику.Отчество;
	СтраховойНомерПФР = ДанныеДокументаПоСотруднику.СтраховойНомерПФР;
	ДатаРождения = ДанныеДокументаПоСотруднику.ДатаРождения;
	ИНН = ДанныеДокументаПоСотруднику.ИНН;
	КодКатегории = ДанныеДокументаПоСотруднику.КодКатегории;
	Гражданство = ДанныеДокументаПоСотруднику.Гражданство;
	ЗаявлениеОПродолжении = ДанныеДокументаПоСотруднику.ЗаявлениеОПродолжении;
	ЗаявлениеОПредоставлении = ДанныеДокументаПоСотруднику.ЗаявлениеОПредоставлении;
	ЗаявлениеОПродолженииОтмена = ДанныеДокументаПоСотруднику.ЗаявлениеОПродолженииОтмена;
	ЗаявлениеОПредоставленииОтмена = ДанныеДокументаПоСотруднику.ЗаявлениеОПредоставленииОтмена;
	
	ЗаполнитьДаннымиМероприятий(ДанныеДокументаПоСотруднику.Мероприятия);
	
	СообщенияМероприятий = ДанныеДокументаПоСотруднику.СообщенияМероприятий;
	Если ЗначениеЗаполнено(СообщенияМероприятий) Тогда
		
		Для Каждого ОписаниеСообщения Из СообщенияМероприятий Цикл
			
			ОбщегоНазначения.СообщитьПользователю(ОписаниеСообщения.Представление, , ОписаниеСообщения.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиМероприятий(ДанныеМероприятий)
	
	Мероприятия.Очистить();
	
	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы Из ДанныеМероприятий Цикл
		
		СтрокаТаблицыФормы = Мероприятия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
		СтрокаТаблицыФормы.НомерСТроки = НомерСтроки;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдМероприятия) Тогда
			СтрокаТаблицыФормы.Идентификатор = Строка(СтрокаТаблицы.ИдМероприятия);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Мероприятия.Сортировать("ДатаМероприятия");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Мероприятия';
					|en = 'Activities'") + ": " + Строка(Сотрудник);
	ИнфонадписьЗаголовокКарточки = НСтр("ru = 'Данные застрахованного лица';
										|en = 'Insured person data'");
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	
	ПараметрыОповещения = Новый Структура("РедактируемыйДокументСсылка, Сотрудник, АдресВоВременномХранилище");
	ПараметрыОповещения.РедактируемыйДокументСсылка = РедактируемыйДокументСсылка;
	ПараметрыОповещения.Сотрудник = Сотрудник;
	ПараметрыОповещения.АдресВоВременномХранилище = АдресВоВременномХранилище;
	
	Оповестить("РедактированиеМероприятийПоСотруднику", ПараметрыОповещения, ЭтотОбъект);
	
	Модифицированность = Ложь;

	Закрыть();
	
КонецПроцедуры

&НаСервере 
Функция ДанныеСотрудникаВоВременноеХранилище()
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Вставить("Имя", Имя);
	ДанныеСотрудника.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Вставить("ДатаРождения", ДатаРождения);
	ДанныеСотрудника.Вставить("ИНН", ИНН);
	ДанныеСотрудника.Вставить("КодКатегории", КодКатегории);
	ДанныеСотрудника.Вставить("Гражданство", Гражданство);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолжении", ЗаявлениеОПродолжении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставлении", ЗаявлениеОПредоставлении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолженииОтмена", ЗаявлениеОПродолженииОтмена);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставленииОтмена", ЗаявлениеОПредоставленииОтмена);
	ДанныеСотрудника.Вставить("Модифицированность", Модифицированность);
	ДанныеСотрудника.Вставить("РедактируемыйДокументСсылка", РедактируемыйДокументСсылка);
	ДанныеСотрудника.Вставить("ИзменилисьДанныеФизическогоЛица", ИзменилисьДанныеФизическогоЛица);
	
	СписокСвойств = ЭлектронныеТрудовыеКнижкиКлиентСервер.ДоступныеПоляВсехВидовМероприятийДокумента();
	ДоступныеПоля = ЭлектронныеТрудовыеКнижкиКлиентСервер.ИменаДоступныхПолейВидовМероприятий(ДатаДокумента);
	
	МероприятияСотрудника = Новый Массив;
	ДанныеСотрудника.Вставить("Мероприятия", МероприятияСотрудника);
	
	СтруктураПолейМероприятия = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.СтруктураПолейМероприятий();
	Для Каждого Мероприятие Из Мероприятия Цикл
		Если Не ЗначениеЗаполнено(Мероприятие.ВидМероприятия) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПолей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейМероприятия);
		
		ИменаСвойств = СписокСвойств + "," + ДоступныеПоля[Мероприятие.ВидМероприятия];
		
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Мероприятие, ИменаСвойств);
		СтруктураПолей.Сотрудник = Сотрудник;
		Если ЗначениеЗаполнено(Мероприятие.Идентификатор) Тогда
			СтруктураПолей.ИдМероприятия = Новый УникальныйИдентификатор(Мероприятие.Идентификатор);
		КонецЕсли;
		МероприятияСотрудника.Добавить(СтруктураПолей);
	КонецЦикла;	
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСотрудника);
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьИзменившиесяДанныеФизическогоЛица(ДанныеФизическогоЛица)	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеФизическогоЛица);
	ИзменилисьДанныеФизическогоЛица = Истина;
	
КонецПроцедуры	

&НаСервере 
Процедура ЗаявлениеПриИзмененииНаСервере(ИмяПоля)
	
	Заявление = ЭтотОбъект[ИмяПоля];
	Если Не ЗначениеЗаполнено(Заявление) Тогда
		ЭтотОбъект[ИмяПоля + "Отмена"] = Ложь;
		Возврат;
	КонецЕсли;
	
	ВидЗаявления = ?(ИмяПоля = "ЗаявлениеОПродолжении",
		Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки,
		Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СведенияОТрудовойДеятельностиВЭлектроннойФорме);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Заявление);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВидЗаявления", ВидЗаявления);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЗаявлениеОтозвано
	               |ИЗ
	               |	Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные КАК ЗаявленияОВеденииТрудовыхКнижекОтозванные
	               |		ПО ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник = ЗаявленияОВеденииТрудовыхКнижекОтозванные.ФизическоеЛицо
	               |			И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка = ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление
	               |ГДЕ
	               |	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка = &Ссылка
	               |	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник = &Сотрудник
	               |	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.ВидЗаявления = &ВидЗаявления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда 
		ТекстСообщения = НСтр("ru = 'Выбранный документ не содержит заявления данного типа по сотруднику.';
								|en = 'Selected document does not contain an application of this type for the employee.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ЭтотОбъект[ИмяПоля] = Неопределено;
		ЭтотОбъект[ИмяПоля + "Отмена"] = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ИмяПоля + "Отмена"] = Выборка.ЗаявлениеОтозвано;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораЗаявлений()
	
	ПараметрыВыбора = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Организация", Организация);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Сотрудник", Сотрудник);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидЗаявления", Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	Элементы.ЗаявлениеОПродолжении.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбора = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Организация", Организация);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Сотрудник", Сотрудник);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидЗаявления", Перечисления.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СведенияОТрудовойДеятельностиВЭлектроннойФорме);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	Элементы.ЗаявлениеОПредоставлении.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияСведенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("МероприятияСведенияЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияСведенияЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Мероприятия.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Мероприятия.НайтиПоИдентификатору(Элементы.Мероприятия.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Сведения = ВведенныйТекст;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятияНаСервере()
	
	Если НЕ УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(Организация, ОтчетныйПериод) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДляПоДневногоОтчета", Ложь);
	ПараметрыЗаполнения.Вставить("ДатаЗаполнения", ДатаДокумента);
	
	ДанныеЗаполнения = ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудника(
		Истина, Сотрудник, Организация, ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета(),
		Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ОкончаниеПериодаЗаполнения(ДатаДокумента, ОтчетныйПериод),
		РедактируемыйДокументСсылка, ПараметрыЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьДаннымиМероприятий(ДанныеЗаполнения.ТрудоваяДеятельность);
	КонецЕсли;
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеТаблицыМероприятия(ЭтотОбъект, Организация, Мероприятия, ДатаДокумента);
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьСвойстваЭлементовФормы()
	
	ЭтоЕФС1 = ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год(ДатаДокумента));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодКатегории", "Видимость", ЭтоЕФС1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Гражданство", "Видимость", ЭтоЕФС1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН", "Видимость", ЭтоЕФС1);
	
КонецПроцедуры

#КонецОбласти