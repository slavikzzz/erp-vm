#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ПФР");	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияПервоначальногоЗаполнения(Объект.Дата);
		
		Если Параметры.Свойство("ЗаполнитьПриемамиИУвольнениями")
			И Параметры.ЗаполнитьПриемамиИУвольнениями = Истина Тогда
			
			ЗапрашиваемыеЗначения.Удалить("ПредыдущийМесяц");
			
			Если ЗначениеЗаполнено(Объект.Дата)
				И Объект.Дата < '20210701' Тогда
				ЗапрашиваемыеЗначения.Вставить("Месяц", "Объект.ОтчетныйПериод");
			КонецЕсли;
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения);
			
			ЗаполнитьКадровымиИзменениямиНаСервере(Истина);
		Иначе
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Дата)
			И Объект.Дата >= '20210701' Тогда
			Объект.ОтчетныйПериод = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		ПриПолученииДанныхНаСервере(ТекущийОбъект);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечатьПереопределенная;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПанельОтправкиВКонтролирующиеОрганы
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактированиеМероприятийПоСотруднику" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		ПриИзмененииДанныхДокументаПоСотруднику(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ИмяСобытия = "Завершение отправки в контролирующий орган" 
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Ссылка = Объект.Ссылка Тогда
	    ПослеОтправкиВПФР();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПанельОтправкиВКонтролирующиеОрганы
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Ссылка);
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
	ЗаполнитьМероприятияСотрудников();
	УстановитьДоступностьДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Объект.ПрежнийСтраховательРегистрационныйНомерПФР) Тогда
		ЕстьМероприятияПереименование = Объект.Мероприятия.НайтиСтроки(
			Новый Структура("ВидМероприятия", Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование)).Количество() > 0;
		Если ЕстьМероприятияПереименование Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для мероприятий ПЕРЕИМЕНОВАНИЕ обязательно указание регистрационного номера СФР прежнего страхователя';
					|en = 'For RENAMING events, specify the registration number in Social Insurance Fund of Russia of the previous insurant'"),
				Объект.Ссылка, "ПрежнийСтраховательРегистрационныйНомерПФР", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзменении(Элемент)
	
	Если Объект.Проведен
		И Не ФлагБлокировкиДокумента
		И Не Объект.ДокументПринятВПФР Тогда
		
		// Когда документ принят частично, первая очистка флага приводит лишь к отмене блокировки документа
		ФлагБлокировкиДокументаПриИзмененииЗавершение(КодВозвратаДиалога.Да);
		
	Иначе
		
		Если ЕстьПоРазномуОтмеченныеСтрокиСотрудников() Тогда
			
			Если ФлагБлокировкиДокумента Тогда
				
				ТекстВопроса = НСтр("ru = 'Среди сотрудников есть строки, отмеченные принятыми в СФР.
					|Установка флага приведет к тому, что принятыми в СФР станут все строки сотрудников.
					|Продолжить?';
					|en = 'There are rows marked as accepted by the Social Security Fund among the employees.
					|If you select the checkbox, all employee rows will be accepted by the Social Security Fund.
					|Continue?'");
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Среди сотрудников есть строки, отмеченные принятыми в СФР.
					|Очистка флага приведет к тому, что эти строки перестанут считаться принятыми в СФР.
					|Продолжить?';
					|en = 'There are rows marked as accepted by the Social Security Fund among the employees.
					|If you clear the checkbox, these rows will be unmarked as accepted by the Social Security Fund.
					|Continue?'");
				
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ФлагБлокировкиДокументаПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			ФлагБлокировкиДокументаПриИзмененииЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзмененииЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ФлагБлокировкиДокументаПриИзмененииНаСервере(Истина);
	Иначе
		ФлагБлокировкиДокумента = Не ФлагБлокировкиДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПоРазномуОтмеченныеСтрокиСотрудников()
	
	ЕстьОтмеченныеСтроки = Ложь;
	ЕстьСтрокиБезОтметки = Ложь;
	Для Каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
		
		Если СтрокаСотрудники.ПринятоВПФР Тогда
			ЕстьОтмеченныеСтроки = Истина;
		Иначе
			ЕстьСтрокиБезОтметки = Истина;
		КонецЕсли;
		
		Если ЕстьОтмеченныеСтроки И ЕстьСтрокиБезОтметки Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательНаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательРегистрационныйНомерПФРПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательИННПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательКПППриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСтраховойНомерПФРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьФорматСтраховогоНомераПФР(ТекущиеДанные.СтраховойНомерПФР);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияКарточкиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СотрудникиСотрудник",
		"ТолькоПросмотр",
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СотрудникиСотрудник",
		"ТолькоПросмотр",
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	СписокСотрудников = Новый Массив;
	Для Каждого Сотрудник Из ВыбранноеЗначение Цикл
		СписокСотрудников.Добавить(Сотрудник);
	КонецЦикла;
	
	ЗаполнитьДанныеСотрудников(СписокСотрудников, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалениемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПринятоВПФРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Не ТекущиеДанные.ПринятоВПФР Тогда
			ФлагБлокировкиДокумента = Ложь;
			ФлагБлокировкиДокументаПриИзмененииНаСервере(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКадровымиИзменениями(Команда)
	
	ОчиститьСообщения();
	ЗаполнитьКадровымиИзменениямиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПриемамиИУвольнениями(Команда)
	
	ОчиститьСообщения();
	ЗаполнитьКадровымиИзменениямиНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("МесяцПримененияОтбора", Объект.ОтчетныйПериод);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", Истина);
	
	КадровыйУчетКлиент.ПодобратьФизическихЛицОрганизации(
		Элементы.Сотрудники,
		ОрганизацияДляПодбора,
		АдресСпискаПодобранныхСотрудников(),
		,
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();	
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);
	ПроверкаСтороннимиПрограммами(Отказ);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПротоколПриема(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПрочитатьПротоколПриемаЗавершение", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Фильтр      = НСтр("ru = 'Файл протокола приемки(*.xml)|*.xml';
												|en = 'Receipt log file(*.xml)|*.xml'");
	ПараметрыЗагрузки.Диалог.Заголовок   = НСтр("ru = 'Выберите файл протокола приема СФР';
												|en = 'Select SSF receipt log file'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповещение, ПараметрыЗагрузки , , );
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма", Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ИнформационнаяПанельБРО

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	ПараметрыОтображения = ЭлектронныйДокументооборотСФСС.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = СЭДОФСС.СтраховательОрганизации(Объект.Организация);
	ПараметрыОтображения.Группа      = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма       = ЭтотОбъект;
	ПараметрыОтображения.ЭтоСЭДО     = Ложь;
	ЭлектронныйДокументооборотСФСС.ОбновитьИнформационнуюПанельБРО(ПараметрыОтображения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ЭлектронныйДокументооборотСФССКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ДанныеОбъектаВДанныеФормы(ТекущийОбъект);
	УстановитьДоступностьДанныхФормы();
	УстановитьСвойстваЭлементовФормы();
	ЗаполнитьОрганизациюДляПодбораСотрудников(ТекущийОбъект);
	ОбновитьИнформационнуюПанельБРО();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеОбъектаВДанныеФормы(ТекущийОбъект)
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;	
	ОтправленВПФР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОбъектОтправлялсяВКонтролирующиеОрганы(Объект.Ссылка);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ОтчетныйПериод", "ОтчетныйПериодПредставление");
	
	ЗаполнитьМероприятияСотрудников();
	
	УстановитьМаскуВводаРегистрационныйНомерПФРПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеОтправкиВПФР()
	
	ОтправленВПФР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОбъектОтправлялсяВКонтролирующиеОрганы(Объект.Ссылка);
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	
	Если Объект.Проведен Тогда
		
		Если Объект.ДокументПринятВПФР Тогда
			ЧастичноПринятыйВПФРДокументДекорацияВидимость = Ложь;
			НеПринятыйВПФРДокументДекорацияВидимость = Ложь;
			ТолькоПросмотрФормы = Истина;
		Иначе
			
			ЧастичноПринятыеСотрудники = Объект.Сотрудники.НайтиСтроки(Новый Структура("ПринятоВПФР", Истина));
			Если ЧастичноПринятыеСотрудники.Количество() > 0 Тогда
				ЧастичноПринятыйВПФРДокументДекорацияВидимость = Истина;
				НеПринятыйВПФРДокументДекорацияВидимость = Ложь;
				ТолькоПросмотрФормы = Истина;
			Иначе
				ЧастичноПринятыйВПФРДокументДекорацияВидимость = Ложь;
				НеПринятыйВПФРДокументДекорацияВидимость = Истина;
				ТолькоПросмотрФормы = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЧастичноПринятыйВПФРДокументДекорацияВидимость = Ложь;
		НеПринятыйВПФРДокументДекорацияВидимость = Истина;
		ТолькоПросмотрФормы = Ложь;
		
	КонецЕсли;
	
	Если ТолькоПросмотрФормы И ЧастичноПринятыйВПФРДокументДекорацияВидимость Тогда
		ФлагБлокировкиДокументаЗаголовок = НСтр("ru = 'Документ частично принят в СФР (не редактируется)';
												|en = 'Document is partially accepted by the Social Security Fund of Russia (not for editing)'");
		ФлагБлокировкиДокумента = Истина;
	Иначе
		ФлагБлокировкиДокументаЗаголовок = НСтр("ru = 'Документ принят в СФР (не редактируется)';
												|en = 'Document is accepted by the Social Security Fund of Russia (not for editing)'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФлагБлокировкиДокумента",
		"Заголовок",
		ФлагБлокировкиДокументаЗаголовок);
	
	ТолькоПросмотр = ТолькоПросмотрФормы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЧастичноПринятыйВПФРДокументДекорация",
		"Видимость",
		ЧастичноПринятыйВПФРДокументДекорацияВидимость);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НеПринятыйВПФРДокументДекорация",
		"Видимость",
		НеПринятыйВПФРДокументДекорацияВидимость);
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	УстановитьОтображениеПоДатеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", "ТолькоПросмотр", ОтправленВПФР);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтчетныйПериодПредставление", "ТолькоПросмотр", ОтправленВПФР);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияПервоначальногоЗаполнения(ДатаДокумента)
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияЗаполненияПоОрганизации();
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");

	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
	
	Если ЗначениеЗаполнено(ДатаДокумента)
		И ДатаДокумента < '20210701' Тогда
		ЗапрашиваемыеЗначения.Вставить("ПредыдущийМесяц", "Объект.ОтчетныйПериод");
	КонецЕсли;
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияЗаполненияПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции 

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОчиститьДокумент();
	
	Объект.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	Объект.ДолжностьРуководителя = Справочники.Должности.ПустаяСсылка();
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения(Объект.Дата));	
	Объект.ИмяФайлаДляПФР = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайла(Объект.Организация, Объект.Дата);
	
	ЗаполнитьОрганизациюДляПодбораСотрудников(Объект);
	
	ОбновитьИнформационнуюПанельБРО();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДокумент()
	
	Объект.Сотрудники.Очистить();
	Объект.Мероприятия.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ФлагБлокировкиДокументаПриИзмененииНаСервере(Знач ПрименитьКСтрокамСотрудников)
	
	Модифицированность = Истина;
	
	Если Не ФлагБлокировкиДокумента И Не Объект.ДокументПринятВПФР Тогда
		ПрименитьКСтрокамСотрудников = Ложь;
	КонецЕсли;
	
	Объект.ДокументПринятВПФР = ФлагБлокировкиДокумента;
	
	Если Не ФлагБлокировкиДокумента Тогда
		
		ТолькоПросмотр = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФлагБлокировкиДокумента",
			"Заголовок",
			НСтр("ru = 'Документ принят в СФР (не редактируется)';
				|en = 'Document is accepted by the Social Security Fund of Russia (not for editing)'"));
		
	КонецЕсли;
	
	Если ПрименитьКСтрокамСотрудников Тогда
		
		Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
			СтрокаСотрудника.ПринятоВПФР = Объект.ДокументПринятВПФР;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКадровымиИзменениямиНаСервере(ДляПоДневногоОтчета = Ложь)
	
	ЗаполнитьНаСервере(Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет"), ДляПоДневногоОтчета);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервере(ЗаполнитьВсемиСотрудниками, ДляПоДневногоОтчета)
	
	ОчиститьДокумент();
	
	Если НЕ УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(Объект.Организация, Объект.ОтчетныйПериод) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДляПоДневногоОтчета", ДляПоДневногоОтчета);
	ПараметрыЗаполнения.Вставить("ДатаЗаполнения", Объект.Дата);
	
	ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(
		ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудниковОрганизации(
			Истина, Объект.Организация, ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета(),
			ОкончаниеПериодаЗаполнения(),
			ЗаполнитьВсемиСотрудниками, Объект.Ссылка, ПараметрыЗаполнения),
		ЗаполнитьВсемиСотрудниками);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(СписокСотрудников, ЗаполнитьВсемиСотрудниками = Ложь)
	
	Если НЕ УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(Объект.Организация, Объект.ОтчетныйПериод) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДляПоДневногоОтчета", Ложь);
	ПараметрыЗаполнения.Вставить("ДатаЗаполнения", Объект.Дата);
	
	ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(
		ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудников(
			Истина, Объект.Организация, СписокСотрудников, ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета(),
			ОкончаниеПериодаЗаполнения(), ЗаполнитьВсемиСотрудниками, Объект.Ссылка, ПараметрыЗаполнения),
		ЗаполнитьВсемиСотрудниками);
	
КонецПроцедуры

&НаСервере
Функция ОкончаниеПериодаЗаполнения()
	Возврат Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ОкончаниеПериодаЗаполнения(
		Объект.Дата, Объект.ОтчетныйПериод);
КонецФункции

&НаСервере
Процедура ПеренестиДанныеТрудовойДеятельностиСотрудниковВДокумент(ДанныеЗаполнения, ЗаполнитьВсемиСотрудниками)
	
	Для Каждого ДанныеЗаполненияСотрудника Из ДанныеЗаполнения Цикл
		
		ПеренестиСведения = ЗаполнитьВсемиСотрудниками
			Или ДанныеЗаполненияСотрудника.ТрудоваяДеятельность.Количество() > 0
			Или ЗначениеЗаполнено(ДанныеЗаполненияСотрудника.ЗаявлениеОПродолжении)
			Или ЗначениеЗаполнено(ДанныеЗаполненияСотрудника.ЗаявлениеОПредоставлении);
		
		Если ПеренестиСведения Тогда
			СтрокаСотрудника = Объект.Сотрудники.Добавить();
			ЗаполнитьСтрокуСотрудникаДаннымиМероприятий(СтрокаСотрудника, ДанныеЗаполненияСотрудника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСотрудникаДаннымиМероприятий(СтрокаСотрудника, ДанныеЗаполненияСотрудника)
	
	ЗаполнитьЗначенияСвойств(СтрокаСотрудника, ДанныеЗаполненияСотрудника);
	СтрокаСотрудника.Сотрудник = ДанныеЗаполненияСотрудника.ФизическоеЛицо;
	Для Каждого ЗаписьТрудовойДеятельности Из ДанныеЗаполненияСотрудника.ТрудоваяДеятельность Цикл
		СтрокаМероприятия = Объект.Мероприятия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМероприятия, ЗаписьТрудовойДеятельности);
		СтрокаМероприятия.Сотрудник = ДанныеЗаполненияСотрудника.ФизическоеЛицо;
	КонецЦикла;
	
	ЗаполнитьМероприятияВСтроке(СтрокаСотрудника, ДанныеЗаполненияСотрудника.ТрудоваяДеятельность);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере()
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(СтрокаСотрудника.Сотрудник) Тогда
		ЗаполнитьДанныеСтрокиПустымиЗначениями(СтрокаСотрудника);
		Возврат;
	КонецЕсли;
	
	Если НЕ УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(Объект.Организация, Объект.ОтчетныйПериод) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ЭлектронныеТрудовыеКнижки.ДанныеТрудовойДеятельностиСотрудника(
		Истина, СтрокаСотрудника.Сотрудник, Объект.Организация, ЭлектронныеТрудовыеКнижки.ДатаНачалаУчета(),
		ОкончаниеПериодаЗаполнения(), Объект.Ссылка);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьСтрокуСотрудникаДаннымиМероприятий(СтрокаСотрудника, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиПустымиЗначениями(ДанныеСтроки)
	
	ДанныеСтроки.Фамилия = "";
	ДанныеСтроки.Имя = "";
	ДанныеСтроки.Отчество = "";
	ДанныеСтроки.СтраховойНомерПФР = "";
	
КонецПроцедуры	

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПроверкаЗаполненияДокумента(Отказ = Ложь)
		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Если Объект.Дата >= '20210701' Тогда
		Объект.ОтчетныйПериод = НачалоМесяца(Объект.Дата);
	КонецЕсли;
	Объект.ИмяФайлаДляПФР = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ИмяФайла(Объект.Организация, Объект.Дата);
	УстановитьОтображениеПоДатеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';
							|en = 'Cannot run the command for unposted documents. Do you want to post the document and continue?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);	
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?';
							|en = 'Errors were detected in the set.
							|Continue (not recommended)?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.';
																											|en = 'Warning.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.
		|Выполнить проверку сторонними программами?';
		|en = 'Errors occurred while checking with the integrated check.
		|Check with third-party applications?'")
	Иначе	
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.
		|Выполнить проверку сторонними программами?';
		|en = 'Errors are not detected while checking with the integrated check.
		|Check with third-party applications?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннимиПрограммамиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПроверитьСтороннимиПрограммами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннимиПрограммами()
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия.Вставить("СсылкиНаПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаФайловОтчетностиПерсУчетаПФР", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)
	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДанныхДокументаПоСотруднику(АдресВоВременномХранилище)
	
	ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище)
	
	ДанныеШапкиДокумента = Объект;
	
	ДанныеТекущегоДокумента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеТекущегоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Неопределено;
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДанныеТекущегоДокумента.Сотрудник));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеТекущейСтрокиПоСотруднику = НайденныеСтроки[0];
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'В текущем документе не найдены данные по редактируемому сотруднику.';
								|en = 'Data on the edited employee is not found in the current document.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента);
	
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	
	СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаМероприятия Из СтрокиМероприятий Цикл
		Объект.Мероприятия.Удалить(Объект.Мероприятия.Индекс(СтрокаМероприятия));
	КонецЦикла;
	
	Для Каждого СтрокаМероприятия Из ДанныеТекущегоДокумента.Мероприятия Цикл
		СтрокаМероприятияОбъекта = Объект.Мероприятия.Добавить();
		СтрокаМероприятияОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		ЗаполнитьЗначенияСвойств(СтрокаМероприятияОбъекта, СтрокаМероприятия);
	КонецЦикла;
	
	ЗаполнитьМероприятияВСтроке(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента.Мероприятия);
	
	Если ДанныеТекущегоДокумента.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику.СообщенияМероприятий.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	Для Каждого Идентификатор Из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		СтрокаСотрудник = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаСотрудник <> Неопределено Тогда 
			УдалитьСтрокиМероприятий(СтрокаСотрудник.Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиМероприятий(Сотрудник) Экспорт
	
	УдаляемыеСтроки = Объект.Мероприятия.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Мероприятия.Удалить(Объект.Мероприятия.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуРедактированияКарточкиДокумента()
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", АдресДанныхТекущегоДокументаВХранилище);
		ПараметрыОткрытияФормы.Вставить("РедактируемыйДокументСсылка", Объект.Ссылка);
		ПараметрыОткрытияФормы.Вставить("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		ПараметрыОткрытияФормы.Вставить("Организация", Объект.Организация);
		ПараметрыОткрытияФормы.Вставить("ДатаДокумента", Объект.Дата);
		ПараметрыОткрытияФормы.Вставить("ОтчетныйПериод", Объект.ОтчетныйПериод);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Форма.ФормаРедактированияМероприятий", ПараметрыОткрытияФормы, ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище()
	
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", ДанныеТекущейСтрокиПоСотруднику.СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", ДанныеТекущейСтрокиПоСотруднику.Фамилия);
	ДанныеСотрудника.Вставить("Имя", ДанныеТекущейСтрокиПоСотруднику.Имя);
	ДанныеСотрудника.Вставить("Отчество", ДанныеТекущейСтрокиПоСотруднику.Отчество);
	ДанныеСотрудника.Вставить("ДатаРождения", ДанныеТекущейСтрокиПоСотруднику.ДатаРождения);
	ДанныеСотрудника.Вставить("ИНН", ДанныеТекущейСтрокиПоСотруднику.ИНН);
	ДанныеСотрудника.Вставить("КодКатегории", ДанныеТекущейСтрокиПоСотруднику.КодКатегории);
	ДанныеСотрудника.Вставить("Гражданство", ДанныеТекущейСтрокиПоСотруднику.Гражданство);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолжении", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПродолжении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставлении", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПредоставлении);
	ДанныеСотрудника.Вставить("ЗаявлениеОПродолженииОтмена", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПродолженииОтмена);
	ДанныеСотрудника.Вставить("ЗаявлениеОПредоставленииОтмена", ДанныеТекущейСтрокиПоСотруднику.ЗаявлениеОПредоставленииОтмена);
	ДанныеСотрудника.Вставить("Мероприятия", Новый Массив);
	ДанныеСотрудника.Вставить("СообщенияМероприятий", ДанныеТекущейСтрокиПоСотруднику.СообщенияМероприятий);
	
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПолейМероприятия = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.СтруктураПолейМероприятий();
	Для Каждого СтрокаМероприятия Из СтрокиМероприятий Цикл
		СтруктураПолей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейМероприятия);
		ЗаполнитьЗначенияСвойств(СтруктураПолей, СтрокаМероприятия);
		ДанныеСотрудника.Мероприятия.Добавить(СтруктураПолей);
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(АдресДанныхТекущегоДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(ДанныеСотрудника, АдресДанныхТекущегоДокументаВХранилище);	
	Иначе	
		АдресДанныхТекущегоДокументаВХранилище = ПоместитьВоВременноеХранилище(ДанныеСотрудника, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятияСотрудников()
	
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл 
		СтрокиМероприятий = Объект.Мероприятия.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник));
		ЗаполнитьМероприятияВСтроке(СтрокаСотрудника, СтрокиМероприятий);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМероприятияВСтроке(СтрокаСотрудника, СтрокиМероприятий)
	
	Для Сч = 1 По 3 Цикл 
		СтрокаСотрудника["Мероприятие" + Сч] = "";
	КонецЦикла;
	
	Если СтрокиМероприятий.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Мин(СтрокиМероприятий.Количество(), 3);
	
	Для Сч = 1 По КоличествоСтрок Цикл
		СтрокаМероприятия = СтрокиМероприятий[Сч - 1];
		СтрокаСотрудника["Мероприятие" + Сч] = Строка(СтрокаМероприятия.ВидМероприятия) + " (" + Формат(СтрокаМероприятия.ДатаМероприятия, "ДЛФ=Д") + ")";
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПротоколПриемаЗавершение(ОписаниеФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеФайла = Неопределено Или Не ЗначениеЗаполнено(ОписаниеФайла.Хранение) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
		
	РезультатПроверки = ПрочитатьПротоколПриемаНаСервере(ОписаниеФайла.Хранение, ОписаниеФайла.Имя);
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;
	
	Если Не ЗначениеЗаполнено(РезультатПроверки) Тогда
		ТекстПредупреждения = НСтр("ru = 'Файл не содержит результатов приема файла';
									|en = 'File does not contain file receipt results'");
	Иначе
		ТекстПредупреждения = РезультатПроверки;
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьПротоколПриемаНаСервере(АдресДанныхПротоколаПриемки, ИмяФайла)
	
	Возврат Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПрочитатьПротоколПриема(
		Объект, АдресДанныхПротоколаПриемки, ИмяФайла);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппыПрежнегоСтрахователя(УправляемаяФорма)
	
	Объект = УправляемаяФорма.Объект;
	Элементы = УправляемаяФорма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.ПрежнийСтраховательНаименованиеПолное) Тогда
		ПредставлениеСтрахователя = НСтр("ru = 'не задан';
										|en = 'not specified'");
	Иначе
		
		ПредставленияСтрахователя = Новый Массив;
		ПредставленияСтрахователя.Добавить(СокрЛП(Объект.ПрежнийСтраховательНаименованиеПолное));
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательРегистрационныйНомерПФР) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'рег. номер: %1';
					|en = 'reg. number: %1'"), СокрЛП(Объект.ПрежнийСтраховательРегистрационныйНомерПФР)));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательИНН) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'ИНН: %1';
					|en = 'TIN: %1'"), СокрЛП(Объект.ПрежнийСтраховательИНН)));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательКПП) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'КПП: %1';
					|en = 'KPP: %1'"), СокрЛП(Объект.ПрежнийСтраховательКПП)));
		КонецЕсли;
		ПредставлениеСтрахователя = СтрСоединить(ПредставленияСтрахователя, ", ");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрежнийСтраховательГруппа",
		"ЗаголовокСвернутогоОтображения",
		СтрШаблон(НСтр("ru = 'Сведения о работодателе, правопреемником которого является страхователь (%1)';
						|en = 'Information record on the employer whose successor is the insurant (%1)'"), ПредставлениеСтрахователя));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПоДатеДокумента()
	
	Если Объект.Дата < '20210701' Тогда
		ОтчетныйПериодВидимость = Истина;
		ПрежнийСтраховательВидимость = Ложь;
	Иначе
		ОтчетныйПериодВидимость = Ложь;
		ПрежнийСтраховательВидимость = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтчетныйПериодПредставление",
		"Видимость",
		ОтчетныйПериодВидимость);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПрежнийСтраховательГруппа",
		"Видимость",
		ПрежнийСтраховательВидимость);
		
	ЭтоЕФС1 = ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год(Объект.Дата));
	ЭтаФорма.Заголовок = ?(ЭтоЕФС1, "", НСтр("ru = 'Сведения о трудовой деятельности, СЗВ-ТД';
											|en = 'Labor activity information, SZV-TD'") + ?(ЗначениеЗаполнено(Объект.Ссылка), 
		" " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2';
																			|en = '%1 dated %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=Д")), " (" + НСтр("ru = 'создание';
																																						|en = 'create'")+ ")"));
	ЭтаФорма.АвтоЗаголовок = ЭтоЕФС1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюДляПодбораСотрудников(ТекущийОбъект)
	ОрганизацияДляПодбора.Очистить();
	Если УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(ТекущийОбъект.Организация, ТекущийОбъект.Дата) Тогда
		Для каждого Организация Из УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(ТекущийОбъект.Организация, ТекущийОбъект.Дата) Цикл
			ОрганизацияДляПодбора.Добавить(Организация)
		КонецЦикла;
	Иначе 	
		ОрганизацияДляПодбора.Добавить(ТекущийОбъект.Организация)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательРегистрационныйНомерПФРНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("9999999999", НСтр("ru = 'Рег. номер СФР (9999999999)';
												|en = 'Рег. номер СФР (9999999999)'"), Элемент.Маска = "9999999999");
	СписокЗначений.Добавить("999-999-999999", НСтр("ru = 'Рег. номер ПФР (999-999-999999)';
													|en = 'Рег. номер ПФР (999-999-999999)'"), Элемент.Маска = "999-999-999999");
	
	ДополнительныеПараметры = Новый Структура;
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ДополнительныеПараметры.Вставить("СтраховойНомер", Элемент.ТекстРедактирования);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьФорматРегистрационногоНомера", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(Оповещение, СписокЗначений, Элементы.ПрежнийСтраховательРегистрационныйНомерПФР);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРегистрационногоНомера(ВыбранныйФормат, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйФормат <> Неопределено Тогда
		СтраховойНомер = Неопределено;
		ДополнительныеПараметры.Свойство("СтраховойНомер", СтраховойНомер);
		УстановитьМаскуВводаРегистрационныйНомерПФРПрежнегоСтрахователя(ЭтотОбъект, ВыбранныйФормат.Значение, СтраховойНомер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьМаскуВводаРегистрационныйНомерПФРПрежнегоСтрахователя(УправляемаяФорма, Знач Маска = Неопределено, Знач СтраховойНомер = Неопределено)
	
	Если СтраховойНомер = Неопределено Тогда
		СтраховойНомер = УправляемаяФорма.Объект.ПрежнийСтраховательРегистрационныйНомерПФР;
	КонецЕсли;
	
	Если Маска = Неопределено Тогда
		Если СтрНайти(СтраховойНомер, "-") = 0 Тогда
			Маска = "9999999999";
		Иначе
			Маска = "999-999-999999";
		КонецЕсли;
	КонецЕсли;
	
	Если Маска = "9999999999" Тогда
		Если СтрНайти(СтраховойНомер, "-") > 0 Тогда
			УправляемаяФорма.Объект.ПрежнийСтраховательРегистрационныйНомерПФР =
				Лев(СтрЗаменить(СтраховойНомер, "-", ""), 10);
			УправляемаяФорма.Модифицированность = Истина;
		КонецЕсли;
	Иначе
		Если СтрНайти(СтраховойНомер, "-") = 0
			И ЗначениеЗаполнено(СтраховойНомер) Тогда
			
			УправляемаяФорма.Объект.ПрежнийСтраховательРегистрационныйНомерПФР =
				Лев(СтраховойНомер, 3)
				+ "-"
				+ Сред(СтраховойНомер, 4, 3)
				+ "-"
				+ Сред(СтраховойНомер, 7);
			УправляемаяФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ПрежнийСтраховательРегистрационныйНомерПФР",
		"Маска",
		Маска);
	
КонецПроцедуры

#КонецОбласти
