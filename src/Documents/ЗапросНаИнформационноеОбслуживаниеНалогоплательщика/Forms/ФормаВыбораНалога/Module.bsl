
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = "ТипСверки, ВидУслуги, Организация, ОКАТО, ДатаНачалаПериода, ДатаОкончанияПериода, Количество, Налог, УИДРодителя";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, Свойства);
	Количество = Строка(Параметры.Количество);
	ТаблицаИзАдресаВРеквизит(Параметры.Адрес);
	
	ИзменитьДляТипаСверкиВЦеломПоОрганизации();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаИзАдресаВРеквизит(Адрес)

	Таблица = ПолучитьИзВременногоХранилища(Адрес);
	ЗначениеВРеквизитФормы(Таблица, "ТаблицаКБКиНалогов");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Подбор налога" Тогда
		
		ДобавитьВыбранныйНалог(Параметр);
		
		ПоследняяСтрокаТаблицы = ТаблицаКБКиНалогов[ТаблицаКБКиНалогов.Количество() - 1];
		ИдентификаторПоследнейСтроки = ПоследняяСтрокаТаблицы.ПолучитьИдентификатор();
		Элементы.ТаблицаКБКиНалогов.ТекущаяСтрока = ИдентификаторПоследнейСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоВсеПриИзменении(Элемент)
	
	ТаблицаКБКиНалогов.Очистить();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоОдинПриИзменении(Элемент)
	
	ЗаполнитьНалогИзТаблицы();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНесколькоПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	ОтработатьИзменениеНалогаИлиОкато();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала выберите организацию';
														|en = 'Сначала выберите организацию'"),,"Организация");
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗапрашиваемыеНалогЗавершениеВыбора", 
		ЭтотОбъект); 
	
	ОткрытьФормуВыбораНалогов(Ложь, ОписаниеОповещения, Налог, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаКБКиНалогов.ТекущиеДанные;
	
	ЭтоКБК = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекущиеДанные.Значение);
	
	Если ЭтоКБК Тогда 
		// Выбран КБК
		НаименованиеКБК = НаименованиеКБК(ТекущиеДанные.Значение);
		
		КБК = ТекущиеДанные.Значение;
		ФорматированныйКБК = ФорматированныйКБК(КБК);
		
		Если ЗначениеЗаполнено(НаименованиеКБК) Тогда
			ТекущиеДанные.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2)';
					|en = '%1 (%2)'"), ФорматированныйКБК, НаименованиеКБК);
		Иначе
			ТекущиеДанные.Наименование = ФорматированныйКБК;
		КонецЕсли;
	Иначе
		// Выбран налог
		ТекущиеДанные.Наименование = ТекущиеДанные.Значение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКАТО) Тогда
		ТекущиеДанные.ОКАТО = СокрЛП(ОКАТО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение", ЭтотОбъект);
	
	Если Элементы.ТаблицаКБКиНалогов.ТекущиеДанные = Неопределено Тогда
		ТекущееЗначение = Неопределено;
	Иначе
		ТекущееЗначение = Элементы.ТаблицаКБКиНалогов.ТекущиеДанные.Значение;
	КонецЕсли;
	
	ОткрытьФормуВыбораНалогов(Ложь, Обработчик, ТекущееЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКБКиНалоговПриИзменении(Элемент)
	
	ПеренумероватьСтроки(ТаблицаКБКиНалогов);
	
	ЗаполнитьНалогИзТаблицы();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКБКиНалоговПослеУдаления(Элемент)
	
	Если ТаблицаКБКиНалогов.Количество() = 0 Тогда
		Налог = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКБКиНалоговЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НалогОчистка(Элемент, СтандартнаяОбработка)
	ОтработатьИзменениеНалогаИлиОкато();
КонецПроцедуры

&НаКлиенте
Процедура НалогОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Текст, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)

	Результат = Новый Структура();
	Результат.Вставить("Налог", Налог);
	Результат.Вставить("НовоеКоличествоНалогов", ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН." + Количество));
	Результат.Вставить("Адрес", АдресТаблицы());
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФормуВыбораНалогов(Истина, Обработчик);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И Элементы.ТаблицаКБКиНалогов.ТекущиеДанные <> Неопределено Тогда
			
		// Редактируем налог в текущей строке
		ТекущиеДанные = Элементы.ТаблицаКБКиНалогов.ТекущиеДанные;
		ТекущиеДанные.Наименование = Результат.Наименование;
		ТекущиеДанные.Значение     = Результат.Значение;
		
		Если ЗначениеЗаполнено(Результат.Наименование) Тогда
			ТекущиеДанные.Наименование = Результат.Наименование;
		Иначе
			ТекущиеДанные.Наименование = Результат.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныйНалог(Параметр)
	
	ВременнаяТаблица 	= ТаблицаКБКиНалогов.Выгрузить();
	РезультатПоиска 	= ВременнаяТаблица.Найти(Параметр.Значение, "Значение");
	ЭтоУникальныйНалог 	= РезультатПоиска = Неопределено;
	
	Если ЭтоУникальныйНалог Тогда
	
		НоваяСтрока = ТаблицаКБКиНалогов.Добавить();
		НоваяСтрока.Значение = Параметр.Значение;
		Если ЗначениеЗаполнено(Параметр.Наименование) Тогда
			НоваяСтрока.Наименование = Параметр.Наименование;
		Иначе
			НоваяСтрока.Наименование = Параметр.Значение;
		КонецЕсли;
		
	КонецЕсли;
		
	ПеренумероватьСтроки(ТаблицаКБКиНалогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено тогда
		
		Налог = Результат.Значение;
		ОтработатьИзменениеНалогаИлиОкато();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДляТипаСверкиВЦеломПоОрганизации()
	
	// Запрещено выбирать налоги, так как нужно указывать ОКТМО для каждого КБК для каждого подразделения
	Если ТипСверки = Перечисления.ТипыСверокИОН.ВЦеломПоОрганизации 
		И ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов Тогда
		
		ЭлОдин = Элементы.КоличествоВсе.СписокВыбора.НайтиПоЗначению("Один");
		Если ЭлОдин <> Неопределено Тогда 
			Элементы.КоличествоВсе.СписокВыбора.Удалить(ЭлОдин);
		КонецЕсли;
		
		ЭлНесколько = Элементы.КоличествоВсе.СписокВыбора.НайтиПоЗначению("Несколько");
		Если ЭлНесколько <> Неопределено Тогда 
			ЭлНесколько.Представление = НСтр("ru = 'Несколько КБК';
											|en = 'Несколько КБК'");
		КонецЕсли;
		
		ЭлВсе = Элементы.КоличествоВсе.СписокВыбора.НайтиПоЗначению("Все");
		Если ЭлВсе <> Неопределено Тогда 
			ЭлВсе.Представление = НСтр("ru = 'Все КБК';
										|en = 'Все КБК'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНалогИзТаблицы()

	// В таблице оставляем только один налог
	Если ТаблицаКБКиНалогов.Количество() > 0 Тогда
		// В строке таблицы может быть КБК вместо Налога. 
		// Если указан КБК, то налог не заполняем.
		Если ЗначениеЗаполнено(ТаблицаКБКиНалогов[0].Значение)
			И НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТаблицаКБКиНалогов[0].Значение) Тогда
			Налог = ТаблицаКБКиНалогов[0].Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНалогов(МножественныйВыбор, Обработчик, ТекущиеДанные = Неопределено, ЗапретитьВыборКБК = Ложь)
	
	ФлагиУчета = ПолучитьЗначенияКонстантИнтеграции();
	Если ЗначениеЗаполнено(ФлагиУчета) И ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
		ЗапретитьВыборКБК = Истина;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗапроса();

	Если МножественныйВыбор Тогда
		СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	КонецЕсли;
		
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров.Вставить("ТекущееЗначение", ТекущиеДанные);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗапретитьВыборКБК", 	ЗапретитьВыборКБК);
	СтруктураПараметров.Вставить("ТипСверки", 			ТипСверки);

	ОткрытьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ФормаВыбораКБК", СтруктураПараметров, ЭтаФорма,,,, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗапроса()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", 			Организация);
	ДополнительныеПараметры.Вставить("ДатаНачалаПериода", 		ДатаНачалаПериода);
	ДополнительныеПараметры.Вставить("ДатаОкончанияПериода", 	ДатаОкончанияПериода);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ОтработатьИзменениеНалогаИлиОкато()
	
	ТаблицаКБКиНалогов.Очистить();
	
	Если ЗначениеЗаполнено(Налог) Тогда
		
		НоваяСтрока = ТаблицаКБКиНалогов.Добавить();
		НоваяСтрока.Значение 		= Налог;
		НоваяСтрока.Наименование 	= Налог;
		
		ПеренумероватьСтроки(ТаблицаКБКиНалогов);
			
	КонецЕсли;
	
	УправлениеФормой();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ЭтоВсе  = Количество = НСтр("ru = 'Все';
								|en = 'Все'");
	ЭтоОдин = Количество = НСтр("ru = 'Один';
								|en = 'Один'");
	ЭтоНесколько = Количество = НСтр("ru = 'Несколько';
									|en = 'Несколько'");
	
	Элементы.Налог.Видимость = ЭтоОдин;
	
	Если ЭтоНесколько Тогда
		Элементы.СтраницыНесколько.ТекущаяСтраница = Элементы.СтраницаТаблица;
	Иначе
		Элементы.СтраницыНесколько.ТекущаяСтраница = Элементы.СтраницаПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеКБК(ЗначениеКБК)
	
	Возврат Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.НаименованиеКБК(ЗначениеКБК);
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияКонстантИнтеграции()
	
	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
	
	Возврат ФлагиУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьСтроки(Таблица)
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированныйКБК(КБК)
	
	// 123 4 56 78901 23 4567 890 - номер символов КБК
	// 182 1 01 01011 01 1000 110 - маска КБК
	ФорматированныйКБК = 
		Лев(КБК, 3) + " " + 
		Сред(КБК, 4, 1) + " " + 
		Сред(КБК, 5, 2) + " " + 
		Сред(КБК, 7, 5) + " " + 
		Сред(КБК, 12, 2) + " " + 
		Сред(КБК, 14, 4) + " " + 
		Сред(КБК, 18, 3) + " " + 
		Сред(КБК, 21);
		
	Возврат СокрЛП(ФорматированныйКБК);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораНаСервере(СтрокаПоиска, ТолькоНалог = Ложь)
	
	ПодстрокаПоиска = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ОбработатьСтрокуПоискаКБК(СтрокаПоиска);
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПодстрокаПоиска) И НЕ ТолькоНалог Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКБК.КБК,
		|	ТаблицаКБК.Наименование
		|ПОМЕСТИТЬ ТаблицаКБК
		|ИЗ
		|	&ТаблицаКБК КАК ТаблицаКБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	ТаблицаКБК.КБК КАК КБК,
		|	ТаблицаКБК.Наименование
		|ИЗ
		|	ТаблицаКБК КАК ТаблицаКБК
		|ГДЕ
		|	ТаблицаКБК.КБК ПОДОБНО &СтрокаПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	КБК";
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ПодстрокаПоиска + "%");

		ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
		Запрос.УстановитьПараметр("ТаблицаКБК", ТаблицаКБК);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			ФорматированныйКБК = ФорматированныйКБК(Выборка.КБК);
			СписокВыбора.Добавить(Выборка.КБК, ФорматированныйКБК + " (" + Выборка.Наименование + ")");
		КонецЦикла;

	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКБК.Налог
		|ПОМЕСТИТЬ ТаблицаКБК
		|ИЗ
		|	&ТаблицаКБК КАК ТаблицаКБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Различные
		|	ТаблицаКБК.Налог
		|ИЗ
		|	ТаблицаКБК КАК ТаблицаКБК
		|ГДЕ
		|	ТаблицаКБК.Налог ПОДОБНО &СтрокаПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Налог";
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ПодстрокаПоиска + "%");
		
		ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
		Запрос.УстановитьПараметр("ТаблицаКБК", ТаблицаКБК);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СписокВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СписокВыбора.Добавить(Выборка.Налог, Выборка.Налог);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбора;
		
КонецФункции

&НаСервере
Функция АдресТаблицы()

	Таблица = ТаблицаКБКиНалогов.Выгрузить();
	Адрес = ПоместитьВоВременноеХранилище(Таблица, УИДРодителя);
	
	Возврат Адрес;

КонецФункции

#КонецОбласти
