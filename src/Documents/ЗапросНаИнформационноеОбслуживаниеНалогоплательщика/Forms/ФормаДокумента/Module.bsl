
&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	ИспользуетсяРежимТестирования = ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования();
	
	ЭтоФормат5_07 = ДокументооборотСКОНаВремяВызоваПовтИсп.ЭтоФорматЗапросаИОН5_07();
	
	ЗаполнитьСписокВыбораВидаУслуги();
	
	ЗадатьЗначенияНовогоДокумента();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ГруппаОрганизация");
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	ЗаявлениеОтправлено = ЗаявлениеОтправлено(Объект.Ссылка);
	
	УстановитьПолучателяПоУмолчанию();
	
	Если НЕ ЭтоНовый Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	КонецЕсли;
	
	ТекущаяДатаДокумента = ТекущаяДатаСеанса();
	
	СвернутьТаблицуКБКПоНалогу();
	ПриИзмененииПолучателя();
	
	УстановитьВидимостьКнопкиВыгрузкиФайлаИПодписи();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидаУслуги()
	
	ВидыУслугИОН = Перечисления.ВидыУслугПриИОН;
	СписокВыбора = Элементы.ВидУслуги.СписокВыбора;
	ДобавитьВСписок(СписокВыбора, ВидыУслугИОН.ПредставлениеАктовСверкиРасчетов, "4");
	ДобавитьВСписок(СписокВыбора, ВидыУслугИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности, "3");
	ДобавитьВСписок(СписокВыбора, ВидыУслугИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате, "5");
	ДобавитьВСписок(СписокВыбора, ВидыУслугИОН.СправкаОПринадлежностиСумм, "6");
	ДобавитьВСписок(СписокВыбора, ВидыУслугИОН.СправкаОПринадлежностиСуммАгрегированныеДанные, "9");
	ДобавитьВСписок(СписокВыбора, ВидыУслугИОН.СправкаОНаличииСальдо, "7");
	ДобавитьВСписок(СписокВыбора, ВидыУслугИОН.СведенияОбОтрицательномСальдоЕНС, "8");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписок(Все, Вид, Код)
	
	Если ИспользуетсяРежимТестирования Тогда
		Все.Добавить(Вид, Код + ". " + Строка(Вид));
	Иначе
		Все.Добавить(Вид);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
	
	ПроверитьПередЗаписью(Отказ, ТаблицаКБК);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаКБКиНалогов.Количество() > 0 Тогда
		СкопироватьТаблицуКБКПоНалогуВОбъект(Отказ, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	Оповестить("Запись_ЗапросНаИнформационноеОбслуживаниеНалогоплательщика",, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = Ложь;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Завершение отправки в контролирующий орган"
		ИЛИ ИмяСобытия = "Завершение отправки"
		ИЛИ ИмяСобытия = "Актуализация состояния отправки") 
		И Источник = Объект.Ссылка Тогда
		
		УстановитьВидимостьКнопкиВыгрузкиФайлаИПодписи();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СсылкаНалогНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала выберите организацию';
														|en = 'Сначала выберите организацию'"),,"Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипСверки, ВидУслуги, Организация, ОКАТО, ДатаНачалаПериода, ДатаОкончанияПериода");
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект);
	
	ДополнительныеПараметры.Вставить("Количество", Объект.КоличествоНалогов);
	ДополнительныеПараметры.Вставить("Налог", Налог);
	ДополнительныеПараметры.Вставить("УИДРодителя", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("Адрес", АдресТаблицыНалоги());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораКоличестваНалогов", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораНалога", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СсылкаКППНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала выберите организацию';
														|en = 'Сначала выберите организацию'"),,"Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипСверки, ВидУслуги, Организация");
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект);
	
	ДополнительныеПараметры.Вставить("КоличествоКПП", Объект.КоличествоКПП);
	ДополнительныеПараметры.Вставить("УИДРодителя", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("Адрес", АдресТаблицыКПП());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораКПП", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораКПП", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СсылкаОКТМОНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сначала выберите организацию';
														|en = 'Сначала выберите организацию'"),,"Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипСверки, ВидУслуги, Организация");
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект);
	
	ДополнительныеПараметры.Вставить("КоличествоОКТМО", Объект.КоличествоОКТМО);
	ДополнительныеПараметры.Вставить("УИДРодителя", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("Адрес", АдресТаблицыОКТМО());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораОКТМО", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораОКТМО", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СвДеталСумНажатие(Элемент)
	
	НачалоПериода = НачалоКвартала(Объект.ДатаНачалаПериода);
	КонецПериода  = КонецКвартала(Объект.ДатаОкончанияПериода);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтборПериодНачалоВыбора_Завершение", 
		ЭтотОбъект);
		
	СтандартнаяОбработка = Ложь;
	РегламентированнаяОтчетностьКлиент.ОтборПериодНачалоВыбора(ЭтотОбъект, ОписаниеОповещения, СтандартнаяОбработка, ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		ПоказатьЗначение(, Объект.Получатель);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаСверки()
	
	ТаблицаКБКиНалогов.Очистить();
	Если Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Один")
		И Объект.ТипСверки = ПредопределенноеЗначение("Перечисление.ТипыСверокИОН.ВЦеломПоОрганизации") Тогда
		
		Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
		ОбработкаВыбораКоличестваНалогов(Объект.КоличествоНалогов, Неопределено);
		
	КонецЕсли;
	
	УстановитьФорматОтветаПоУмолчанию();
	УстановитьПолучателяПоУмолчанию();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидУслугиПриИзменении(Элемент)
	
	Если НЕ ДокументооборотСКОКлиент.ЭтоКорректныйВидСверки(Объект.ВидУслуги) Тогда
		Объект.ВидУслуги = Неопределено;
	КонецЕсли;
	
	Объект.Получатель = Неопределено;
	Объект.ЗапрашиваемыеНалоги.Очистить();
	УстановитьПолучателяПоУмолчанию();

	Объект.КоличествоНалогов = Неопределено;
	Объект.КоличествоКПП = Неопределено;
	Объект.КоличествоОКТМО = Неопределено;
	
	ЭтоАкт = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	Если ЭтоАкт ИЛИ ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
		
		Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
		
		Если ЭтоАкт И ЭтоФормат5_07 ИЛИ ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
			Объект.КоличествоКПП   = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
		КонецЕсли;
		
		Если ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
			Объект.КоличествоОКТМО = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
		КонецЕсли;
		
	КонецЕсли;

	УстановитьТипСверкиПоУмолчанию();
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьФорматОтветаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
	
	Объект.Получатель = Неопределено;
	УстановитьПолучателяПоУмолчанию();
	УстановитьТипСверкиПоУмолчанию();
	ПриИзмененииТипаСверки();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Организация = Неопределено ИЛИ Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""От кого"" не заполнено';
														|en = 'Поле ""От кого"" не заполнено'"));
		Возврат;
	КонецЕсли;
	
	ЗначенияДляОтбора = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		РеквизитыПолучателя = РеквизитыРегистрацииВНалоговомОрганеНаСервере(Объект.Получатель);
		ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", РеквизитыПолучателя.Код, РеквизитыПолучателя.КПП));
	КонецЕсли;
	
	Организация   = Объект.Организация;
	УчетнаяЗапись = КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучательНачалоВыбораЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Получатель) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыПолучателя.Код) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации"".';
														|en = 'Код налогового органа необходимо задать в справочнике ""Организации"".'"));
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".';
														|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Объект.Получатель = РезультатВыбора.Ссылка;
		ПриИзмененииПолучателя();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияНаДатуПриИзменении(Элемент)
	
	Объект.ДатаНачалаПериода = НачалоГода(Объект.ДатаОкончанияПериода);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматОтветаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ФорматОтвета",  Объект.ФорматОтвета);
	ДополнительныеПараметры.Вставить("ЭтоФормат5_05", ЭтоФормат5_05);
	ДополнительныеПараметры.Вставить("ЭтоФормат5_07", ЭтоФормат5_07);
	ДополнительныеПараметры.Вставить("ВидУслуги",     Объект.ВидУслуги);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораФорматаОтвета", 
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаВыбораФорматаОтвета", 
		ДополнительныеПараметры, 
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	ЗадатьПравилаОтображенияДатыНаДляАктов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельИнформацииНажатие(Элемент)
	БольшеНеПоказыватьИнформационнуюПанель();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДетализацияСуммСовокупнойОбязанностиЕНСПриИзменении(Элемент)
	
	ЗадатьПравилаОтображенияДат(ЭтотОбъект);
	
	Если Объект.ДеталНачСумм Тогда
		
		СброситьКоличества();
		Объект.ДатаНачалаПериода = НачалоКвартала(ТекущаяДата());
		Объект.ДатаОкончанияПериода = КонецКвартала(ТекущаяДата());
		
		Объект.ПрПредДетал = 1;
		
		Элементы.СвДеталСум.Заголовок = ПредставлениеПериода(
			НачалоКвартала(ТекущаяДата()), 
			КонецКвартала(ТекущаяДата()), 
			"ФП=Истина");
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфПрНачПриИзменении(Элемент)
	
	Если Объект.ИнфПрНач Тогда
		СброситьКоличества();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьГодНажатие(Элемент)
	
	Объект.ДатаНачалаПериода = 0;
	Объект.ДатаОкончанияПериода = 0;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаГодПриИзменении(Элемент)
	
	УстановитьКонечнуюИНачальнуюДатуПоНачальной(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		КонтекстЭДОКлиент.ВыгрузитьЗапросИОНВФайл(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументСверкиСПодписьюФНС(Команда)
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Объект.Ссылка);
	КонтекстЭДОКлиент.ВыгрузитьПакетыПоДокументооборотамСдачиОтчетностиВФНС(ЦиклОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Записать();
	
	ДокументооборотСКОКлиент.ЗапоминаниеОшибок("Сброс");
	
	Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.ОтправкаЗапросаНаИнформационноеОбслуживание(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если НЕ ДокументооборотСКОКлиент.ПроверитьИЗаписать(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФормаСверки = ТабличныйДокументСверки(Объект.Ссылка);
	Если ПечатнаяФормаСверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.НапечататьДокумент(ПечатнаяФормаСверки, Строка(Объект.ВидУслуги));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаГодНазад(Команда)
	
	Если Год(Объект.ДатаНачалаПериода) > 1 Тогда
		
		Объект.ДатаНачалаПериода = НачалоПредыдущегоГода(Объект.ДатаНачалаПериода);
		УстановитьКонечнуюИНачальнуюДатуПоНачальной(ЭтотОбъект);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаГодВперед(Команда)
	
	Объект.ДатаНачалаПериода = НачалоСледующегоГода(Объект.ДатаНачалаПериода);
	УстановитьКонечнуюИНачальнуюДатуПоНачальной(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	СтандартнаяОбработка = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыбратьПериодЗавершение", 
			ЭтотОбъект);
			
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НачалоПериода",         Объект.ДатаНачалаПериода);
	ДополнительныеПараметры.Вставить("КонецПериода",          Объект.ДатаОкончанияПериода);
	ДополнительныеПараметры.Вставить("ВидПериода",            Неопределено);
	ДополнительныеПараметры.Вставить("ТолькоУказанныйПериод", Ложь);

	ПолноеИмяФормыВыбораПериода = "Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборСтандартногоПериодаГодКвартал";
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ИмяФормыВыбораПериода(ПолноеИмяФормыВыбораПериода);
	
	ОткрытьФорму(
		ПолноеИмяФормыВыбораПериода,
		ДополнительныеПараметры,
		,
		,
		,
		,
		ОписаниеОповещения);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункции

&НаСервере
Процедура ПриИзмененииПолучателя()
	
	Представление = ""; 
	
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		
		ЭтоЮридическоеЛицо	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Объект.Организация);
		
		Если Объект.ТипСверки = ПредопределенноеЗначение("Перечисление.ТипыСверокИОН.ПоОдномуКППВОднуФНС")
			И ЭтоЮридическоеЛицо Тогда
			
			РеквизитыПолучателя = РеквизитыРегистрацииВНалоговомОрганеНаСервере(Объект.Получатель);
			Представление       = НСтр("ru = '%1 (КПП: %2)';
										|en = '%1 (КПП: %2)'");
			Представление       = СтрШаблон(Представление, РеквизитыПолучателя.Код, РеквизитыПолучателя.КПП);
			
		Иначе
			Представление = Строка(Объект.Получатель);
		КонецЕсли;
		
	КонецЕсли;
	
	Получатель = Представление;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьКнопкиВыгрузкиФайлаИПодписи()

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Видимость         = КонтекстЭДОСервер.ВидимостьКнопкиВыгрузкиОтветаИОНИПодписи(Объект.Ссылка); 
	
	Элементы.ВыгрузитьДокументСверкиСПодписьюФНС.Видимость = Видимость;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗапроса(Форма, ЗапросОбъект)
	
	ДатаНачалаПериода	 = ЗапросОбъект.ДатаНачалаПериода;
	ДатаОкончанияПериода = ЗапросОбъект.ДатаОкончанияПериода;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", 			ЗапросОбъект.Организация);
	ДополнительныеПараметры.Вставить("ДатаНачалаПериода", 		ДатаНачалаПериода);
	ДополнительныеПараметры.Вставить("ДатаОкончанияПериода", 	ДатаОкончанияПериода);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Процедура БольшеНеПоказыватьИнформационнуюПанель()
	
	ХранилищеОбщихНастроек.Сохранить(
		"ДокументооборотСКонтролирующимиОрганами_СверкиСФНС_УбратьИнформационнуюПанель",
		XMLСтрока(Объект.ВидУслуги),
		Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПанельУбранаПользователем(ВидУслуги)

	Убрана = ХранилищеОбщихНастроек.Загрузить(
		"ДокументооборотСКонтролирующимиОрганами_СверкиСФНС_УбратьИнформационнуюПанель", XMLСтрока(ВидУслуги)) = Истина;
	
	Возврат Убрана;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеИнформационнойПанели(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоВыпискаОперацийИзКарточкиРасчетыСБюджетом 	= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом");
	ЭтоАктСверкиРасчетов 							= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	ЭтоСправкаОСостоянииРасчетовСБюджетом 			= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом");
	ЭтоСправкаОбИсполненииОбязанностейПоУплате 		= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	ЭтоПереченьБухгалтерскойИНалоговойОтчетности 	= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности");
	ЭтоСправкаОПринадлежностиСумм 					= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОПринадлежностиСумм");
	ЭтоСправкаОНаличииСальдо 						= Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо");
	
	Текст  = "";
	Если ЭтоАктСверкиРасчетов Тогда
		Текст = НСтр("ru = 'Акт совместной сверки используется для сопоставления данных с налоговой инспекцией по налогам (страховым взносам, пеням, штрафам) и позволяет выявить переплату или задолженность.';
					|en = 'Акт совместной сверки используется для сопоставления данных с налоговой инспекцией по налогам (страховым взносам, пеням, штрафам) и позволяет выявить переплату или задолженность.'");
	ИначеЕсли ЭтоВыпискаОперацийИзКарточкиРасчетыСБюджетом Тогда
		Текст = НСтр("ru = 'Выписка операций используется для выяснения отдельных вопросов (неясностей), которые возникают по результатам сверки с налоговым органом.';
					|en = 'Выписка операций используется для выяснения отдельных вопросов (неясностей), которые возникают по результатам сверки с налоговым органом.'");
	ИначеЕсли ЭтоПереченьБухгалтерскойИНалоговойОтчетности Тогда
		Текст = НСтр("ru = 'Список представленной отчетности подтверждает, что вся отчетность принята в полном объеме.';
					|en = 'Список представленной отчетности подтверждает, что вся отчетность принята в полном объеме.'");
	ИначеЕсли ЭтоСправкаОСостоянииРасчетовСБюджетом Тогда
		Текст = НСтр("ru = 'Справка о состоянии расчетов позволяет узнать, нет ли задолженности или переплаты по налогам на указанную дату. ';
					|en = 'Справка о состоянии расчетов позволяет узнать, нет ли задолженности или переплаты по налогам на указанную дату. '");
	ИначеЕсли ЭтоСправкаОбИсполненииОбязанностейПоУплате Тогда
		Текст = НСтр("ru = 'Справка позволяет проверить наличие неисполненной обязанности по уплате налогов (страховых взносов, пеней, штрафов). Часто требуется при участии в тендере, получении кредита, оформлении лицензии, для подтверждения добросовестности налогоплательщика. В соответствии с новым форматом запроса, утвержденного приказом ФНС от 29 декабря 2022 г. № ЕД-7-19/1295@, дата формирования справки не заполняется, справка формируется на текущую дату.';
					|en = 'Справка позволяет проверить наличие неисполненной обязанности по уплате налогов (страховых взносов, пеней, штрафов). Часто требуется при участии в тендере, получении кредита, оформлении лицензии, для подтверждения добросовестности налогоплательщика. В соответствии с новым форматом запроса, утвержденного приказом ФНС от 29 декабря 2022 г. № ЕД-7-19/1295@, дата формирования справки не заполняется, справка формируется на текущую дату.'");
	ИначеЕсли ЭтоСправкаОПринадлежностиСумм Тогда
		Текст = НСтр("ru = 'Справка о принадлежности сумм денежных средств позволяет получить сведения обо всех перечисленных в качестве единого налогового платежа средствах по налогам (страховым взносам, пеням, штрафам) за указанный период.';
					|en = 'Справка о принадлежности сумм денежных средств позволяет получить сведения обо всех перечисленных в качестве единого налогового платежа средствах по налогам (страховым взносам, пеням, штрафам) за указанный период.'");
	ИначеЕсли ЭтоСправкаОНаличииСальдо Тогда
		Текст = НСтр("ru = 'Справка о наличии положительного, отрицательного или нулевого сальдо позволяет узнать, нет ли задолженности или переплаты по единому налоговому счету на дату формирования.';
					|en = 'Справка о наличии положительного, отрицательного или нулевого сальдо позволяет узнать, нет ли задолженности или переплаты по единому налоговому счету на дату формирования.'");
	КонецЕсли;
	
	Элементы.ПоянениеОНазначенииСверки.Заголовок = Текст;
	
	ПанельУбранаПользователем = ПанельУбранаПользователем(Объект.ВидУслуги);
	
	Скрыть = 
		Форма.ЗаявлениеОтправлено
		ИЛИ ПанельУбранаПользователем
		ИЛИ НЕ ЗначениеЗаполнено(Текст)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидУслуги);
	
	Элементы.ИнформационнаяПанель.Видимость = НЕ Скрыть;

КонецПроцедуры
	
&НаСервере
Процедура СвернутьТаблицуКБКПоНалогу()
	
	ВременнаяТаблица = РеквизитФормыВЗначение("Объект.ЗапрашиваемыеНалоги").Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("Значение");
	
	// Заполнение наименования КБК и Налога
	ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
	
	Для Каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Налог) Тогда
			
			СтрокаТаблицы.Значение     = СтрокаТаблицы.Налог;
			СтрокаТаблицы.Наименование = СтрокаТаблицы.Налог;
			СтрокаТаблицы.КБК          = "";
			
		Иначе
			
			СтрокаТаблицы.Значение = СтрокаТаблицы.КБК;
			
			НайденнаяСтрока = ТаблицаКБК.Найти(СтрокаТаблицы.КБК, "КБК");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ЗначениеЗаполнено(НайденнаяСтрока.Наименование) Тогда
					
					КБК = ФорматированныйКБК(СтрокаТаблицы.КБК);
					
					СтрокаТаблицы.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 (%2)';
							|en = '%1 (%2)'"), КБК, НайденнаяСтрока.Наименование);
				Иначе
					КБК = ФорматированныйКБК(СтрокаТаблицы.КБК);
					СтрокаТаблицы.Наименование = КБК;
				КонецЕсли;
			Иначе
				КБК = ФорматированныйКБК(СтрокаТаблицы.КБК);
				СтрокаТаблицы.Наименование = КБК;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Свертка по налогу
	ВременнаяТаблица.Свернуть("Значение, ОКАТО, Наименование");
	ВременнаяТаблица.Колонки.Добавить("НомерСтроки");
	
	// Нумерация строк.
	ПеренумероватьСтроки(ВременнаяТаблица);
	
	ЗначениеВРеквизитФормы(ВременнаяТаблица, "ТаблицаКБКиНалогов");
	
	ЗаполнитьНалогИзТаблицы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПередЗаписью(Отказ, ТаблицаКБК)
	
	ПроверитьНалогиПередЗаписью(Отказ);
	ПроверитьКПППередЗаписью(Отказ);
	ПроверитьОКТМОПередЗаписью(Отказ);
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьНалогиПередЗаписью(Отказ)
	
	Если НЕ ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект)
		И НЕ Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Налог) И ТаблицаКБКиНалогов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапроса(ЭтотОбъект, Объект);
	
	ВсеНалоги = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ВсеНалоги(
		ПараметрыЗапроса.Организация,
		ПараметрыЗапроса.ДатаНачалаПериода,
		ПараметрыЗапроса.ДатаОкончанияПериода);
		
	Если Объект.КоличествоНалогов = Перечисления.КоличествоЭлементовДляСверкиИОН.Один Тогда
		
		Если НЕ ЗначениеЗаполнено(Налог) Тогда
			
			// Не выбран налог
			ТекстСообщения = НСтр("ru = 'Укажите налог, по которому будет выполняться сверка';
									|en = 'Укажите налог, по которому будет выполняться сверка'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Налог");
			
			Отказ = Истина;
			
		ИначеЕсли СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Налог) Тогда
			
			// Вместо налога введен КБК
			ТекстСообщения = НСтр("ru = 'В качестве налога не может быть указан КБК. Выберите налог из списка';
									|en = 'В качестве налога не может быть указан КБК. Выберите налог из списка'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Налог");
			
			Отказ = Истина;
			
		Иначе
			
			Если НЕ НалогЕстьВМакете(ВсеНалоги, Налог) Тогда
				
				// Налог введен вручную
				ТекстСообщения = НСтр("ru = 'Налог ""%1"" не найден. Выберите налог из списка';
										|en = 'Налог ""%1"" не найден. Выберите налог из списка'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Налог);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Налог");
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.КоличествоНалогов = Перечисления.КоличествоЭлементовДляСверкиИОН.Несколько Тогда
		
		Для каждого СтрокаТаблицыДокумента Из ТаблицаКБКиНалогов Цикл
			
			// Проверяем только налог на наличие в макете
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаТаблицыДокумента.Значение) Тогда
				
				Если НЕ НалогЕстьВМакете(ВсеНалоги, СтрокаТаблицыДокумента.Значение) Тогда
					
					ТекстСообщения = НСтр("ru = 'Налог ""%1"" не найден. Выберите налог из списка';
											|en = 'Налог ""%1"" не найден. Выберите налог из списка'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Налог);
					
					Поле = "ТаблицаКБКиНалогов[" + Формат(СтрокаТаблицыДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Значение";
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Поле);
					
					Отказ = Истина;
			
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьКПППередЗаписью(Отказ)
	
	Если НЕ ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КоличествоКПП = Перечисления.КоличествоЭлементовДляСверкиИОН.Один
		И Объект.ПереченьКПП.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите КПП, по которому будет выполняться сверка';
								|en = 'Укажите КПП, по которому будет выполняться сверка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"КПП");
		
		Отказ = Истина;
			
	ИначеЕсли Объект.КоличествоКПП = Перечисления.КоличествоЭлементовДляСверкиИОН.Несколько
		И Объект.ПереченьКПП.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите КПП, по которому будет выполняться сверка';
								|en = 'Укажите КПП, по которому будет выполняться сверка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ПереченьКПП");
		
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьОКТМОПередЗаписью(Отказ)
	
	Если НЕ ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КоличествоОКТМО = Перечисления.КоличествоЭлементовДляСверкиИОН.Один
		И Объект.ПереченьОКТМО.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите ОКТМО, по которому будет выполняться сверка';
								|en = 'Укажите ОКТМО, по которому будет выполняться сверка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ОКТМО");
		
		Отказ = Истина;
			
	ИначеЕсли Объект.КоличествоОКТМО = Перечисления.КоличествоЭлементовДляСверкиИОН.Несколько
		И Объект.ПереченьОКТМО.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите ОКТМО, по которому будет выполняться сверка';
								|en = 'Укажите ОКТМО, по которому будет выполняться сверка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ПереченьОКТМО");
			
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция НалогЕстьВМакете(ВсеНалоги, Значение)
	
	Возврат ВсеНалоги.Найти(Значение) <> Неопределено;
		
КонецФункции
		
&НаСервере
Процедура СкопироватьТаблицуКБКПоНалогуВОбъект(Отказ, ТекущийОбъект)
	
	Если Объект.КоличествоНалогов = Перечисления.КоличествоЭлементовДляСверкиИОН.Все Тогда
		
		ТаблицаКБКиНалогов.Очистить();
		ТекущийОбъект.ЗапрашиваемыеНалоги.Очистить();
		
	Иначе
		
		ПараметрыЗапроса = ПараметрыЗапроса(ЭтотОбъект, ТекущийОбъект);

		ТаблицаКБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ТаблицаНалоговПоГруппам(
			Истина, 
			ПараметрыЗапроса.Организация, 
			ПараметрыЗапроса.ДатаНачалаПериода,
			ПараметрыЗапроса.ДатаОкончанияПериода);
			
		Для каждого СтрокаТаблицыКБК Из ТаблицаКБК Цикл
			СтрокаТаблицыКБК.ПапкаУровня1 = Сред(СтрокаТаблицыКБК.ПапкаУровня1, 4);
			СтрокаТаблицыКБК.ПапкаУровня2 = Сред(СтрокаТаблицыКБК.ПапкаУровня2, 4);
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКБК.КБК,
		|	ТаблицаКБК.Наименование,
		|	ТаблицаКБК.Налог,
		|	ТаблицаКБК.ПапкаУровня1,
		|	ТаблицаКБК.ПапкаУровня2
		|ПОМЕСТИТЬ ТаблицаКБК
		|ИЗ
		|	&ТаблицаКБК КАК ТаблицаКБК
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ТаблицаДокумента.Значение,
		|	ТаблицаДокумента.Наименование,
		|	ТаблицаДокумента.ОКАТО
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Значение <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаКБК.КБК ЕСТЬ NULL
		|			ТОГДА ТаблицаДокумента.Значение
		|		ИНАЧЕ ТаблицаКБК.КБК
		|	КОНЕЦ КАК КБК,
		|	ТаблицаДокумента.Наименование,
		|	ВЫБОР
		|		КОГДА ТаблицаКБК.Налог = ТаблицаДокумента.Значение
		|			ТОГДА ТаблицаКБК.Налог
		|		КОГДА ТаблицаКБК.ПапкаУровня1 = ТаблицаДокумента.Значение
		|			ТОГДА ТаблицаКБК.ПапкаУровня1
		|		КОГДА ТаблицаКБК.ПапкаУровня2 = ТаблицаДокумента.Значение
		|			ТОГДА ТаблицаКБК.ПапкаУровня2
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Налог,
		|	ТаблицаДокумента.ОКАТО
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКБК КАК ТаблицаКБК
		|		ПО (ТаблицаКБК.КБК = ТаблицаДокумента.Значение
		|				ИЛИ ТаблицаКБК.Налог = ТаблицаДокумента.Значение
		|				ИЛИ ТаблицаКБК.ПапкаУровня1 = ТаблицаДокумента.Значение
		|				ИЛИ ТаблицаКБК.ПапкаУровня2 = ТаблицаДокумента.Значение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
		
		Запрос.УстановитьПараметр("ТаблицаКБК", 		ТаблицаКБК);
		Запрос.УстановитьПараметр("ТаблицаДокумента", 	РеквизитФормыВЗначение("ТаблицаКБКиНалогов"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Копируем развернутую таблицу в объект.
		ТекущийОбъект.ЗапрашиваемыеНалоги.Очистить();
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			СтрокаПриемник = ТекущийОбъект.ЗапрашиваемыеНалоги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, Выборка);
		КонецЦикла;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоНалоговКППиОКТМОДляНового()
	
	Объект.КоличествоНалогов = Неопределено;
	Объект.КоличествоКПП = Неопределено;
	Объект.КоличествоОКТМО = Неопределено;
	
	ЭтоАкт = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	Если ЭтоАкт ИЛИ ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
		
		ИнициализироватьКоличествоДляНового("ЗапрашиваемыеНалоги", "КоличествоНалогов");
		
		Если ЭтоАкт И ЭтоФормат5_07 ИЛИ ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
			ИнициализироватьКоличествоДляНового("ПереченьКПП", "КоличествоКПП");
		КонецЕсли;
		
		Если ЭтоПриложение2Или4СправкиОНаличииСальдо(ЭтотОбъект) Тогда
			ИнициализироватьКоличествоДляНового("ПереченьОКТМО", "КоличествоОКТМО");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКоличествоДляНового(ИмяТаблицы, ИмяКоличества)

	Если Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Объект[ИмяКоличества] = Перечисления.КоличествоЭлементовДляСверкиИОН.Все;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект[ИмяКоличества]) Тогда
		
			// Новый скопированный с пустым количеством налогов 
			Если Объект[ИмяТаблицы].Количество() = 0 Тогда
				Объект[ИмяКоличества] = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
			Иначе
				Объект[ИмяКоличества] = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Несколько");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНалогИзТаблицы(Форма)

	ТаблицаКБКиНалогов = Форма.ТаблицаКБКиНалогов;
	
	// В таблице оставляем только один налог
	Если ТаблицаКБКиНалогов.Количество() > 0 Тогда
		// В строке таблицы может быть КБК вместо Налога. 
		// Если указан КБК, то налог не заполняем.
		Если ЗначениеЗаполнено(ТаблицаКБКиНалогов[0].Значение)
			И НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТаблицаКБКиНалогов[0].Значение) Тогда
			Форма.Налог = ТаблицаКБКиНалогов[0].Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура")
		 ИЛИ НЕ РезультатВыбора.Свойство("НачалоПериода")
		 ИЛИ НЕ РезультатВыбора.Свойство("КонецПериода") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыбора.НачалоПериода) Тогда
		Объект.ДатаНачалаПериода = РезультатВыбора.НачалоПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыбора.КонецПериода) Тогда
		Объект.ДатаОкончанияПериода = РезультатВыбора.КонецПериода;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ЗадатьПравилаОтображенияДат(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПоказыватьПериод = ДокументооборотСКОКлиентСервер.ОбязателенПериодВЗапросеИОН(Объект);
		
	Если ПоказыватьПериод Тогда
		
		Элементы.Даты.Видимость = Истина;
		
		Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СведенияОбОтрицательномСальдоЕНС") Тогда 
			Элементы.Даты.ТекущаяСтраница = Элементы.ГруппаПериодНаДату;
		Иначе
			Элементы.Даты.ТекущаяСтраница = Элементы.ГруппаПериод;
		КонецЕсли;
		
	Иначе
		
		Элементы.Даты.Видимость = Ложь;
		
	КонецЕсли;
	
	ЗадатьПравилаОтображенияДатыНаДляАктов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПриложение4СправкиОНаличииСальдо(Форма)
	
	Объект = Форма.Объект;
	Возврат Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо") И Объект.ДеталНачСумм И Форма.ЭтоФормат5_07;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПриложение2СправкиОНаличииСальдо(Форма)
	
	Объект = Форма.Объект;
	Возврат Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо") И Объект.ИнфПрНач И Форма.ЭтоФормат5_07;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПриложение2Или4СправкиОНаличииСальдо(Форма)
	
	Возврат ЭтоПриложение4СправкиОНаличииСальдо(Форма) ИЛИ ЭтоПриложение2СправкиОНаличииСальдо(Форма);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗадатьПравилаОтображенияДатыНаДляАктов(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоАктСверкиРасчетов = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
	
	Элементы.ГруппаДатаОкончанияПериода.Видимость = Ложь;
	
	Если Элементы.ГруппаДатаОкончанияПериода.Видимость Тогда
		Если НачалоДня(Объект.ДатаОкончанияПериода) = НачалоДня(Форма.ТекущаяДатаДокумента) Тогда
			Элементы.КомментарийКДатеОкончанияПериода.Заголовок = НСтр("ru = '(сегодня)';
																		|en = '(сегодня)'");
		Иначе
			Элементы.КомментарийКДатеОкончанияПериода.Заголовок = "";
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВнешнимВидомОтправленногоЗаявления(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;	

	Если Форма.ЗаявлениеОтправлено Тогда
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.ВидУслуги.Вид 		= ВидПоляФормы.ПолеНадписи;
		Элементы.ВидУслуги.МаксимальнаяШирина = 30;
		Элементы.ВидУслуги.Ширина = 30;
		Элементы.ВидУслуги.АвтоМаксимальнаяШирина = Ложь;
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.Организация.Вид 	= ВидПоляФормы.ПолеНадписи;
		Элементы.Организация.МаксимальнаяШирина = 30;
		Элементы.Организация.Ширина = 30;
		Элементы.Организация.АвтоМаксимальнаяШирина = Ложь;
		
		Элементы.Получатель.Вид 	= ВидПоляФормы.ПолеНадписи;
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.Получатель.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Получатель.МаксимальнаяШирина = 30;
		Элементы.Получатель.Ширина = 30;
		Элементы.Получатель.АвтоМаксимальнаяШирина = Ложь;
		
		// Даты.
		Элементы.ПерейтиНаГодНазад.Доступность  = Ложь;
		Элементы.ПерейтиНаГодВперед.Доступность = Ложь;
		Элементы.ВыбратьПериод.Видимость      = Ложь;
		
		Элементы.ДатаНачалаПериодаГод.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончанияНаДату.Вид   = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаНачалаПериода2.Вид    = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаОкончанияПериода2.Вид = ВидПоляФормы.ПолеНадписи;
		
		Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо") Тогда
			
			Элементы.СправкаОНаличииСальдоПриложения.ТолькоПросмотр = Истина;
			Элементы.ОчиститьГод.Видимость = Ложь;
			
		КонецЕсли;
		
		// Управление видом гиперссылок.
		Элементы.ФорматОтветаПредставление.Гиперссылка  = Ложь;
		
		Если Элементы.ГруппаНалог.Видимость Тогда
			Элементы.ГруппаНалог.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Элементы.ГруппаКПП.Видимость Тогда
			Элементы.ГруппаКПП.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Элементы.ГруппаОКТМО.Видимость Тогда
			Элементы.ГруппаОКТМО.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьДокументПоСтруктуре(СтруктураПараметров)
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Объект.Организация = СтруктураПараметров.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.РегистрацияВНалоговомОргане) Тогда
		Объект.Получатель = СтруктураПараметров.РегистрацияВНалоговомОргане;
		ПриИзмененииПолучателя();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПериодСобытия) Тогда
		Объект.ДатаНачалаПериода    = НачалоГода(СтруктураПараметров.ПериодСобытия);
		Объект.ДатаОкончанияПериода = КонецДня(СтруктураПараметров.ПериодСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СписокКБК) Тогда
		Для каждого КБК Из СтруктураПараметров.СписокКБК Цикл
			НоваяСтрока = Объект.ЗапрашиваемыеНалоги.Добавить();
			НоваяСтрока.КБК   = КБК;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументСверки(Сверка)
	
	Возврат Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПечатнаяФорма(Сверка);
	
КонецФункции

&НаСервере
Функция ПослеОтправкиЗавершениеНаСервере()
	
	ЗаявлениеОтправлено = ЗаявлениеОтправлено(Объект.Ссылка);
	
	Возврат ЗаявлениеОтправлено;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначенияНовогоДокумента()

	Если ЭтоНовый Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Если НЕ Параметры.ЗначенияЗаполнения.Свойство("ВидУслуги") Тогда
				Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов;
			КонецЕсли;
			
			ЗадатьОрганизациюПоУмолчанию();
			
			СтруктураПараметров = Новый Структура("Организация, РегистрацияВНалоговомОргане, ОКТМО, ПериодСобытия, СписокКБК");
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Параметры);
			ЗаполнитьДокументПоСтруктуре(СтруктураПараметров);

			УстановитьПолучателяПоУмолчанию();
			
			УстановитьФорматОтветаПоУмолчанию();
			
		КонецЕсли;
		
		УстановитьКоличествоНалоговКППиОКТМОДляНового();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация);
	КонецЕсли;
	
	УстановитьТипСверкиПоУмолчанию();
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате")
		ИЛИ Объект.ТипСверки = Перечисления.ТипыСверокИОН.ВЦеломПоОрганизации Тогда 
		УстановитьПолучателяПоУмолчанию();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗадатьОрганизациюПоУмолчанию()

	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ОргПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКонечнуюИНачальнуюДатуПоНачальной(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	Объект.ДатаНачалаПериода 	= НачалоГода(Объект.ДатаНачалаПериода);
	Объект.ДатаОкончанияПериода = КонецГода(Объект.ДатаНачалаПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаявлениеОтправлено = ПослеОтправкиЗавершениеНаСервере();
	
	// Перерисовка статуса отправки в форме Отчетность
	ПараметрыОповещения = Новый Структура(); 
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	Оповестить("Завершение отправки", ПараметрыОповещения, Объект.Ссылка);
	
	Если Открыта() И ЗаявлениеОтправлено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированныйКБК(КБК)
	
	// 123 4 56 78901 23 4567 890 - номер символов КБК
	// 182 1 01 01011 01 1000 110 - маска КБК
	ФорматированныйКБК = 
		Лев(КБК, 3) + " " + 
		Сред(КБК, 4, 1) + " " + 
		Сред(КБК, 5, 2) + " " + 
		Сред(КБК, 7, 5) + " " + 
		Сред(КБК, 12, 2) + " " + 
		Сред(КБК, 14, 4) + " " + 
		Сред(КБК, 18, 3) + " " + 
		Сред(КБК, 21);
		
	Возврат СокрЛП(ФорматированныйКБК);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокФормы(Форма)
	
	Объект 		= Форма.Объект;
	Заголовок 	= НСтр("ru = 'Запрос на сверку: %1 (%2)';
						|en = 'Запрос на сверку: %1 (%2)'");
	
	// Для нового документа в скобках пишем "создание", 
	// для записанного - период.
	Если Форма.ЭтоНовый Тогда
		ДополнительныеСведения = НСтр("ru = 'создание';
										|en = 'создание'");
	Иначе
		ДополнительныеСведения = ПредставлениеДатВЗаголоке(Форма, Объект.ВидУслуги, Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);
	КонецЕсли;
		
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, 
		Форма.Объект.ВидУслуги,
		ДополнительныеСведения);
		
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры
	
&НаСервере
Функция РеквизитыОрганизацииНаСервере(Организация)
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане.КодПоОКАТО, РегистрацияВНалоговомОргане.КодПоОКТМО");
	
	ЭтоКрупнейший    = ДокументооборотСКО.ЭтоКрупнейший(Организация);
	КодНОКрупнейшего = ДокументооборотСКО.КодНОКрупнейшего(Организация);

	Если ЭтоКрупнейший <> Ложь Тогда
		КодНалоговогоОргана = КодНОКрупнейшего;
	Иначе
		КодНалоговогоОргана = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
	КонецЕсли;
	Результат.Вставить("КодНалоговогоОргана", КодНалоговогоОргана);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ДополнительныеПараметры = Новый Структура("Организация, ПриОткрытии, ПризнакОбособленногоПодразделения, ТипОрганизации", Организация, Ложь);
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.ЗаполнитьДанныеОрганизации(ДополнительныеПараметры);
		СтруктураДанныхОрганизации = ДополнительныеПараметры.СтруктураДанныхОрганизации;
		ЭтоЮридическоеЛицо         = СтруктураДанныхОрганизации.ТипОрганизации;
		
		Если ЭтоЮридическоеЛицо Тогда
			ПризнакОбособленногоПодразделения = СтруктураДанныхОрганизации.ПризнакОбособленногоПодразделения;
		Иначе
			ПризнакОбособленногоПодразделения = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыРегистрацииВНалоговомОрганеНаСервере(РегистрацияВНалоговомОргане)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Код, КПП");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрорисоватьСтатус(Форма)
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Форма.Объект.Ссылка, Форма.Объект.Организация, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанелиОтправки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	УправлениеВидимостьюПолучателя(Форма);
	
	ЗадатьПравилаОтображенияДат(Форма);
	
	Элементы.Отправить.Видимость = Не Форма.ЗаявлениеОтправлено;
	Элементы.Записать.ТолькоВоВсехДействиях = Форма.ЗаявлениеОтправлено;
	
	УправлениеФорматомОтвета(Форма);
	
	Элементы.СправкаОНаличииСальдоПриложения.Видимость =
		Форма.ЭтоФормат5_07
		И Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо"); 
	
	УправлениеВнешнимВидомОтправленногоЗаявления(Форма);
	ПрорисоватьСтатус(Форма);
	ИзменитьОформлениеГруппаДеталНачСумм(Форма);
	
	ИзменитьОформлениеИнформационнойПанели(Форма);
	ИзменитьОформлениеГруппыНалог(Форма);
	ИзменитьОформлениеГруппыКПП(Форма);
	ИзменитьОформлениеГруппыОКТМО(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтекстЭДОСервер()
	
	Возврат ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаявлениеОтправлено(Ссылка)
	
	СтатусОтправки = КонтекстЭДОСервер().ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	ЗаявлениеОтправлено = 
		ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
		
	Возврат ЗаявлениеОтправлено;
	
КонецФункции

#Область Даты

&НаКлиентеНаСервереБезКонтекста
Функция НачалоПредыдущегоГода(Дата)
	
	ПредыдущийГод = Год(Дата) - 1;
	
	Возврат Дата(ПредыдущийГод, 1, 1);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачалоСледующегоГода(Дата)
	
	СледующийГод = Год(Дата) + 1;
	
	Возврат Дата(СледующийГод, 1, 1);;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатВЗаголоке(Форма, ВидУслуги, ДатаНачалаПериода, ДатаОкончанияПериода)
	
	ДополнительныеСведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'за период %1 - %2';
			|en = 'за период %1 - %2'"), 
		Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy"), 
		Формат(ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"));
		
	
	Возврат ДополнительныеСведения;
	
КонецФункции

#КонецОбласти

#Область Кому

&НаСервере
Процедура УстановитьТипСверкиПоУмолчанию()
	
	Объект.ТипСверки = Перечисления.ТипыСверокИОН.ПустаяСсылка();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПолучателяПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.РегистрацииВНалоговомОргане КАК СправочникИФНС
	               |ГДЕ
	               |	(СправочникИФНС.Владелец = &Организация
				   |			ИЛИ СправочникИФНС.Владелец = &ГоловнаяОрганизация)
	               |	И НЕ СправочникИФНС.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", 			Объект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	РегламентированнаяОтчетность.ГоловнаяОрганизация(Объект.Организация));
		
	ВсеФНСДляДаннойОрганизации = Запрос.Выполнить().Выгрузить();
	
	Если ВсеФНСДляДаннойОрганизации.Количество() = 1 Тогда
		
		ПолучательПоУмолчанию = ВсеФНСДляДаннойОрганизации[0].Ссылка;
						
		Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
			Объект.Получатель 		= ПолучательПоУмолчанию;
			Модифицированность 		= Истина;
		КонецЕсли;
		
		// Для того, чтобы сделать недоступным поле получателя, если получатель один.
		ПолучательОдин = Истина;
		Элементы.ПолучательПредставление.Заголовок = Строка(ПолучательПоУмолчанию);
		
	КонецЕсли;
		 
	ПриИзмененииПолучателя();
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюПолучателя(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЗапретитьВыборПолучателя = Форма.ИспользуетсяОднаОрганизация И Форма.ПолучательОдин;
	
	ЭтоСправкаОбИсполнении = Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	ЭтоТипВЦеломПоОрганизации = Объект.ТипСверки = ПредопределенноеЗначение("Перечисление.ТипыСверокИОН.ВЦеломПоОрганизации");
	
	Элементы.ГруппаПолучатель.Видимость = НЕ ЗапретитьВыборПолучателя;
	
	Элементы.ГруппаПолучательПредставление.Видимость = НЕ Элементы.ГруппаПолучатель.Видимость;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФорматОтвета

&НаСервере
Процедура УстановитьФорматОтветаПоУмолчанию()

	Если Параметры.Ключ.Пустая() Тогда
		
		Если Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов
			ИЛИ Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
			
			Объект.ФорматОтвета = Перечисления.ФорматОтветаНаЗапросИОН.XML;
			
		Иначе
			
			Объект.ФорматОтвета = Перечисления.ФорматОтветаНаЗапросИОН.PDF;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФорматомОтвета(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.RTF") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Текст в формате RTF (.rtf)';
												|en = 'Текст в формате RTF (.rtf)'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.XLS") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Лист Microsoft Excel 97-2003 (.xls)';
												|en = 'Лист Microsoft Excel 97-2003 (.xls)'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.XML") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'XML-документ (.xml)';
												|en = 'XML-документ (.xml)'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.PDF") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Документ Adobe PDF (.pdf)';
												|en = 'Документ Adobe PDF (.pdf)'");
	Иначе
		Форма.ФорматОтветаПредставление = НСтр("ru = 'Не выбран';
												|en = 'Не выбран'");
	КонецЕсли;
	
	Элементы.ФорматОтветаПредставление.Видимость = 
		Объект.ТипСверки <> ПредопределенноеЗначение("Перечисление.ТипыСверокИОН.ВЦеломПоОрганизации");
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаВыбораФорматаОтвета(НовыйФорматОтвета, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(НовыйФорматОтвета) Тогда
		Объект.ФорматОтвета = НовыйФорматОтвета;
		Модифицированность = Истина;
	КонецЕсли;
	
	УправлениеФорматомОтвета(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СброситьКоличества()
	
	Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
	Объект.КоличествоКПП = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
	Объект.КоличествоОКТМО = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодНачалоВыбора_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачалаПериода = НачалоКвартала(Результат.НачалоПериода);
	Объект.ДатаОкончанияПериода = КонецКвартала(Результат.КонецПериода);
	
	Элементы.СвДеталСум.Заголовок = Результат.ПредставлениеПериодаОтчета;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеГруппаДеталНачСумм(Форма) Экспорт
	
	Если НЕ (Форма.ЭтоФормат5_07 И ЭтоПриложение4СправкиОНаличииСальдо(Форма)) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаПрПредДеталКвартал.Видимость = Объект.ДеталНачСумм;
	
	Мин  = Мин(Объект.ДатаНачалаПериода, Объект.ДатаОкончанияПериода);
	
	Объект.ДатаНачалаПериода    = НачалоКвартала(Мин);
	Объект.ДатаОкончанияПериода = КонецКвартала(Мин);
	
	Элементы.СвДеталСум.Заголовок = ПредставлениеПериода(
			Объект.ДатаНачалаПериода,
			КонецДня(Объект.ДатаОкончанияПериода),
			"ФП=Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьСтроки(Таблица)
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКоличестваНалогов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.КоличествоНалогов = Результат.НовоеКоличествоНалогов;
	
	Налог = Результат.Налог;
	ТаблицаИзАдресаВРеквизит(Результат.Адрес);
	
	Если Объект.КоличествоНалогов = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все") Тогда
		
		ТаблицаКБКиНалогов.Очистить();
		Объект.ЗапрашиваемыеНалоги.Очистить();
		
	КонецЕсли;
	
	ИзменитьОформлениеГруппыНалог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКПП(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.КоличествоКПП = Результат.НовоеКоличествоКПП;
	
	ТаблицаКППИзАдресаВРеквизит(Результат.Адрес);
	
	Если Объект.КоличествоКПП = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все") Тогда
		Объект.ПереченьКПП.Очистить();
	КонецЕсли;
	
	ИзменитьОформлениеГруппыКПП(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаКППИзАдресаВРеквизит(Адрес)

	Таблица = ПолучитьИзВременногоХранилища(Адрес);
	Объект.ПереченьКПП.Очистить();
	Объект.ПереченьКПП.Загрузить(Таблица);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОКТМО(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.КоличествоОКТМО = Результат.НовоеКоличествоОКТМО;
	
	ТаблицаОКТМОИзАдресаВРеквизит(Результат.Адрес);
	
	Если Объект.КоличествоОКТМО = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все") Тогда
		Объект.ПереченьОКТМО.Очистить();
	КонецЕсли;
	
	ИзменитьОформлениеГруппыОКТМО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаОКТМОИзАдресаВРеквизит(Адрес)

	Таблица = ПолучитьИзВременногоХранилища(Адрес);
	Объект.ПереченьОКТМО.Очистить();
	Объект.ПереченьОКТМО.Загрузить(Таблица);

КонецПроцедуры

&НаСервере
Процедура ТаблицаИзАдресаВРеквизит(Адрес)

	Таблица = ПолучитьИзВременногоХранилища(Адрес);
	ЗначениеВРеквизитФормы(Таблица, "ТаблицаКБКиНалогов");

КонецПроцедуры

&НаСервере
Функция АдресТаблицыНалоги()

	Таблица = ТаблицаКБКиНалогов.Выгрузить();
	Адрес   = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаСервере
Функция АдресТаблицыКПП()

	Таблица = Объект.ПереченьКПП.Выгрузить();
	Адрес   = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаСервере
Функция АдресТаблицыОКТМО()

	Таблица = Объект.ПереченьОКТМО.Выгрузить();
	Адрес   = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеГруппыНалог(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов")
		ИЛИ ЭтоПриложение2Или4СправкиОНаличииСальдо(Форма) Тогда
		
		Элементы.ГруппаНалог.Видимость = Истина;
		
		Представление = ИзменитьОформлениеСсылки(Форма, Форма.ТаблицаКБКиНалогов, "Наименование", Объект.КоличествоНалогов, НСтр("ru = 'Все налоги';
																																|en = 'Все налоги'"));
		Элементы.СсылкаНалог.Заголовок = Представление;
		
	Иначе
		
		Элементы.ГруппаНалог.Видимость = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеГруппыОКТМО(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ЭтоПриложение2Или4СправкиОНаличииСальдо(Форма) Тогда
		
		Элементы.ГруппаОКТМО.Видимость = Истина;
		
		Представление = ИзменитьОформлениеСсылки(Форма, Объект.ПереченьОКТМО, "ОКТМО", Объект.КоличествоОКТМО, НСтр("ru = 'Все ОКТМО';
																													|en = 'Все ОКТМО'"));
		Элементы.СсылкаОКТМО.Заголовок = Представление;
		
	Иначе
		
		Элементы.ГруппаОКТМО.Видимость = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеГруппыКПП(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ЭтоПриложение2Или4СправкиОНаличииСальдо(Форма) Тогда
		
		Элементы.ГруппаКПП.Видимость = Форма.ЭтоЮридическоеЛицо;
		
		Представление = ИзменитьОформлениеСсылки(Форма, Объект.ПереченьКПП, "КПП", Объект.КоличествоКПП, НСтр("ru = 'Все КПП';
																												|en = 'Все КПП'"));
		Элементы.СсылкаКПП.Заголовок = Представление;
		
	Иначе
		
		Элементы.ГруппаКПП.Видимость = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИзменитьОформлениеСсылки(Форма, Таблица, Колонка, Количество, НадписьВсе)
	
	Объект = Форма.Объект;
	
	КоличествоВыбранных = Таблица.Количество();

	Если Количество = ПредопределенноеЗначение("Перечисление.КоличествоЭлементовДляСверкиИОН.Все") Тогда
		Представление  = НадписьВсе;
	ИначеЕсли КоличествоВыбранных = 0 Тогда
		Представление  = НСтр("ru = 'Выбрать';
								|en = 'Выбрать'");
	ИначеЕсли КоличествоВыбранных = 1 Тогда
		Представление  = Таблица[0][Колонка];
	ИначеЕсли КоличествоВыбранных = 2 Тогда
		Представление  = Таблица[0][Колонка] + НСтр("ru = ' и ';
													|en = ' и '") + Таблица[1][Колонка];
	ИначеЕсли КоличествоВыбранных > 2 Тогда
		Представление  = Таблица[0][Колонка] + НСтр("ru = ' и еще ';
													|en = ' и еще '") + Строка(КоличествоВыбранных - 1);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти
