#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Печатная форма запросов на сверку с ФНС.
//
Функция ПечатнаяФорма(Сверка) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	// получаем бланк отчета из макета
	Это5_07 = ЭтоФормат5_07();
	Если Это5_07 Тогда
		Бланк = ПолучитьМакет("Сверка5_07");
	Иначе
		Бланк = ПолучитьМакет("Сверка5_06");
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапроса(Сверка);
	Если ПараметрыЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьВерхнююЧастьСверки(Сверка, ТабДок, Бланк, ПараметрыЗапроса);
	
	ЗаполнитьНижнююЧастьСверки(Сверка, ТабДок, Бланк, ПараметрыЗапроса);
	
	ВывестиТаблицуКБК(Сверка, ТабДок, Бланк);
	
	Если Это5_07 Тогда
		ВывестиТаблицуКППилиОКТМО(Сверка, ТабДок, Бланк, "КПП");
		ВывестиТаблицуКППилиОКТМО(Сверка, ТабДок, Бланк, "ОКТМО");
	КонецЕсли;
	
	ЗаполнитьПодпись(Сверка, ТабДок);
	
	ТабДок.МасштабПечати = 100;
	Возврат ТабДок;
	
КонецФункции

Функция ВывестиТаблицуКБК(Сверка, ТабДок, Бланк)
	
	ЭтоАкт = Сверка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов;
	
	ВыводитьКБК = 
		Сверка.КоличествоНалогов <> Перечисления.КоличествоЭлементовДляСверкиИОН.Все
		И (ЭтоАкт ИЛИ ЭтоПриложение2Или4СправкиОНаличииСальдо(Сверка));
		
	Если ВыводитьКБК Тогда
		
		ШапкаПереченьКБК = Бланк.ПолучитьОбласть("ШапкаПереченьКБК");
		ТабДок.Вывести(ШапкаПереченьКБК);
		
		ЗаполнитьТабличнуюЧастьСверки(Сверка, ТабДок, Бланк);
			
	КонецЕсли;
	
КонецФункции

Функция НаименованиеКБК(ЗначениеКБК, ТаблицаКБК = Неопределено) Экспорт
	
	Если ТаблицаКБК = Неопределено Тогда
		ТаблицаКБК	= ПолучитьТаблицуКБК();
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ЗначениеКБК)) = 20 Тогда
		НайденнаяСтрока = ТаблицаКБК.Найти(ЗначениеКБК, "КБК");
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока.Наименование;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуКБК() Экспорт
	
	МакетКБК = ДокументооборотСКО.ПолучитьОбработкуЭДО().ПолучитьМакет("КБК");
	
	КБК = Новый ТаблицаЗначений;
	КБК.Колонки.Добавить("КБК", 		 Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	КБК.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500)));
	КБК.Колонки.Добавить("Налог", 		 Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	КБК.Колонки.Добавить("Папка", 		 Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	
	КБК.Колонки.Добавить("ДоступноДляОрганизаций", 		Новый ОписаниеТипов("Булево"));
	КБК.Колонки.Добавить("ДоступноДляИПБезСотрудников", Новый ОписаниеТипов("Булево"));
	КБК.Колонки.Добавить("ДоступноДляИПССотрудниками", 	Новый ОписаниеТипов("Булево"));
	
	КБК.Колонки.Добавить("ОСНО", 	Новый ОписаниеТипов("Булево"));
	КБК.Колонки.Добавить("УСН", 	Новый ОписаниеТипов("Булево"));
	КБК.Колонки.Добавить("ЕНВД", 	Новый ОписаниеТипов("Булево"));
	КБК.Колонки.Добавить("ПСН", 	Новый ОписаниеТипов("Булево"));
	КБК.Колонки.Добавить("ЕСХН", 	Новый ОписаниеТипов("Булево"));
	
	ИндексКолонкиПризнакаСкрытияУпрощенная = 99;
	ИндексКолонкиУСН = 99;
	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
	Если ЗначениеЗаполнено(ФлагиУчета) И ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
		Для НомерКолонки = 1 По МакетКБК.ШиринаТаблицы Цикл
			Если СокрЛП(МакетКБК.Область(1, НомерКолонки).Текст) = "СкрытьЭлемент" Тогда
				ИндексКолонкиПризнакаСкрытияУпрощенная = НомерКолонки;
				Продолжить;
			КонецЕсли;
			Если СокрЛП(МакетКБК.Область(1, НомерКолонки).Текст) = "УСН" Тогда
				ИндексКолонкиУСН = НомерКолонки;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Для НомерСтроки = 2 По МакетКБК.ВысотаТаблицы Цикл
		
		Если ФлагиУчета.ИнтеграцияСБанком Тогда //Доступна и активна упрощенная отчетность
			Если СокрЛП(МакетКБК.Область(НомерСтроки, ИндексКолонкиУСН).Текст) <> "да" Тогда //Только УСН
				Продолжить;
			КонецЕсли;
			Если СокрЛП(МакетКБК.Область(НомерСтроки, ИндексКолонкиПризнакаСкрытияУпрощенная).Текст) = "да" Тогда //Только разрешенные для УСН
				Продолжить;
			КонецЕсли;			
		КонецЕсли;
		
		НовСтр = КБК.Добавить();
		
		Для каждого Колонка Из КБК.Колонки Цикл
			НомерКолонки = КБК.Колонки.Индекс(Колонка) + 1;
			Значение     = СокрЛП(МакетКБК.Область(НомерСтроки, НомерКолонки).Текст); 
			Если Значение = "да" Тогда
				НовСтр[Колонка.Имя] = Истина;
			Иначе
			    НовСтр[Колонка.Имя] = Значение;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЦикла;
	
	КБК.Индексы.Добавить("КБК");
	
	Возврат КБК;
	
КонецФункции

Функция ОбработатьСтрокуПоискаКБК(СтрокаПоиска) Экспорт
	
	// Если больше 26 символов, скорее всего это не Код БК, а текст -
	// см. шаблон отформатированного КБК: 182 1 01 01011 01 1000 110
	Если СтрДлина(СокрЛП(СтрокаПоиска)) > 26 Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	// Попробуем получить Код БК
	СтрокаПоискаБезПробелов = СтрЗаменить(СтрокаПоиска, " ", "");
	
	// В Коде БК должны быть только цифры
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаБезПробелов) Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;

	Возврат СтрокаПоискаБезПробелов;
	
КонецФункции

Функция ТаблицаКБКСФильтрамиПоСвойствамОрганизации(Организация, ДатаНачалаПериода, ДатаОкончанияПериода)
	
	ТаблицаКБК = ПолучитьТаблицуКБК();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ТаблицаКБК;
	КонецЕсли;
	
	Отбор = Новый Структура();
	
	// Признаки ООО/ИП с сотрудниками/ИП без сотрудников являются взаимоисключающими, поэтому
	// на них можно накладывать набор одновременно.
	ЭтоЮрЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	Если ЭтоЮрЛицо Тогда
		Отбор.Вставить("ДоступноДляОрганизаций", Истина);
	Иначе
		ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация);
		Если ИПИспользуетТрудНаемныхРаботников Тогда
			Отбор.Вставить("ДоступноДляИПССотрудниками", Истина);
		Иначе
			Отбор.Вставить("ДоступноДляИПБезСотрудников", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СистемыНалогообложения = СистемыНалогообложения(Организация, ДатаНачалаПериода, ДатаОкончанияПериода);
	
	Если СистемыНалогообложения.Количество() > 0 Тогда

		ТаблицаКБК = ТаблицаКБК.Скопировать(Отбор);
		ТаблицаКБК.Колонки.Добавить("ПоддерживаетсяДляДаннойОрганизации");
		
		// Признаки систем налогообложения являются взаимодополняемыми, так как у одной организации
		// может быть различное сочетание этих признаков.

		Для каждого СтрокаТаблицыКБК Из ТаблицаКБК Цикл
			Для каждого СистемаНалогообложения Из СистемыНалогообложения Цикл
				
				ПоддерживаетсяДляДаннойОрганизации = 
					ТаблицаКБК.Колонки.Найти(СистемаНалогообложения) <> Неопределено 
					И СтрокаТаблицыКБК[СистемаНалогообложения] = Истина 
					ИЛИ ТаблицаКБК.Колонки.Найти(СистемаНалогообложения) = Неопределено;
				
				Если ПоддерживаетсяДляДаннойОрганизации Тогда
					СтрокаТаблицыКБК["ПоддерживаетсяДляДаннойОрганизации"]  = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ПоддерживаетсяДляДаннойОрганизации", Истина);
		ТаблицаКБК = ТаблицаКБК.Скопировать(Отбор);
		ТаблицаКБК.Колонки.Удалить("ПоддерживаетсяДляДаннойОрганизации");
		
	Иначе
		// Отбор только по виду организации без учета системы налогообложения.
		ТаблицаКБК = ТаблицаКБК.Скопировать(Отбор);
	КонецЕсли;
	
	Возврат ТаблицаКБК;
	
КонецФункции

Функция ТаблицаНалоговПоГруппам(
		ЕстьДетализацияПоКБК, 
		Организация, 
		ДатаНачалаПериода,
		ДатаОкончанияПериода,
		ГруппыСПодгруппами = Неопределено) Экспорт
		
	// ДатаНачалаПериода и ДатаОкончанияПериода указываются одновременно для случая, если за указанный период пользователь
	// поменял систему налогообложения и некоторые КБК ему могут быть недоступны.
	// Чтобы такой проблемы не было, КБК показываются для систем и на начало периода и на конец периода.
	
	ТаблицаКБК = ТаблицаКБКСФильтрамиПоСвойствамОрганизации(Организация, ДатаНачалаПериода, ДатаОкончанияПериода);
	
	Если ГруппыСПодгруппами = Неопределено Тогда
		ГруппыСПодгруппами = Новый СписокЗначений;
	КонецЕсли;
	
	ОпределитьГруппыСПодгруппами(ТаблицаКБК, ГруппыСПодгруппами);
	
	Если НЕ ЕстьДетализацияПоКБК Тогда
		ТаблицаКБК = ТаблицаКБК.Скопировать(, "Папка, Налог");
		ТаблицаКБК.Свернуть("Папка, Налог");
	КонецЕсли;

	ТаблицаКБК.Колонки.Добавить("ПапкаУровня1", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТаблицаКБК.Колонки.Добавить("ПапкаУровня2", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	
	Для каждого СтрокаТаблицыКБК Из ТаблицаКБК Цикл
		
		ПозицияСлеша = Найти(СтрокаТаблицыКБК.Папка, "/");
		
		Если ПозицияСлеша > 0 Тогда
			ИмяРодительскойПапки = СокрЛП(Лев(СтрокаТаблицыКБК.Папка, ПозицияСлеша - 1));
			СтрокаТаблицыКБК.ПапкаУровня1 = ИмяРодительскойПапки;
			СтрокаТаблицыКБК.ПапкаУровня2 = СокрЛП(Сред(СтрокаТаблицыКБК.Папка, ПозицияСлеша + 1));
		Иначе
			ПорядковыйНомер = Лев(СтрокаТаблицыКБК.Папка,3);
			СтрокаТаблицыКБК.ПапкаУровня1 = ПорядковыйНомер + СтрокаТаблицыКБК.Налог;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКБК.Колонки.Удалить("Папка");
	
	Если ЕстьДетализацияПоКБК Тогда
		ТаблицаКБК.Сортировать("ПапкаУровня1, ПапкаУровня2, Налог, КБК");
	Иначе
		ТаблицаКБК.Сортировать("ПапкаУровня1, ПапкаУровня2, Налог");
	КонецЕсли;
	
	Возврат ТаблицаКБК;
	
КонецФункции

Функция ВсеНалоги(Организация, ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	ТаблицаКБК = ТаблицаНалоговПоГруппам(
		Ложь, 
		Организация,
		ДатаНачалаПериода,
		ДатаОкончанияПериода);
		
	ПапкиУровня1 = ТаблицаКБК.ВыгрузитьКолонку("ПапкаУровня1");
	ПапкиУровня2 = ТаблицаКБК.ВыгрузитьКолонку("ПапкаУровня2");
	Налог 		 = ТаблицаКБК.ВыгрузитьКолонку("Налог");
	
	ВсеНалогиИзМакета = ПапкиУровня1;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПапкиУровня1, ПапкиУровня2);
	
	// Обрезаем номер только у папок
	Для НомерСтроки = 0 По ВсеНалогиИзМакета.Количество() - 1 Цикл
		ВсеНалогиИзМакета[НомерСтроки] = Сред(ВсеНалогиИзМакета[НомерСтроки], 4);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеНалогиИзМакета, Налог);
	
	ВсеНалогиИзМакета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеНалогиИзМакета);
	
	Возврат ВсеНалогиИзМакета;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ВывестиТаблицуКППилиОКТМО(Сверка, ТабДок, Бланк, Имя)
	
	Это5_07 = ЭтоФормат5_07();
	ЭтоПриложение4Или2 = ЭтоПриложение2Или4СправкиОНаличииСальдо(Сверка);
	
	ЭтоАкт = Сверка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов;
	
	Таблица = Сверка["Перечень" + Имя];
	ЗаказатьПоВсем = Сверка["Количество" + Имя] = Перечисления.КоличествоЭлементовДляСверкиИОН.Все;
	
	Выводить = НЕ ЗаказатьПоВсем
		И ((ЭтоАкт И Это5_07 ИЛИ ЭтоПриложение4Или2) И Имя = "КПП"
		ИЛИ ЭтоПриложение4Или2 И Имя = "ОКТМО");
		
	Если Выводить Тогда
		
		ШапкаПереченьКБК = Бланк.ПолучитьОбласть("ШапкаПеречень" + Имя);
		ТабДок.Вывести(ШапкаПереченьКБК);
		
		СтрокаТабличнойЧастиБланка = Бланк.ПолучитьОбласть("Таблица" + Имя);
		Для каждого СтрокаТаб Из Таблица Цикл
			Значение = СтрокаТаб[Имя];
			ВывестиПосимвольно(СтрокаТабличнойЧастиБланка, Значение, Имя, СтрДлина(Значение));
			ТабДок.Вывести(СтрокаТабличнойЧастиБланка);
		КонецЦикла;
			
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СистемыНалогообложения(Организация, ДатаНачалаПериода, ДатаОкончанияПериода)
	
	СистемыНалогообложенияНаНачалоПериода = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		ДатаНачалаПериода,
		"СистемыНалогообложения,").СистемыНалогообложения;
		
	СистемыНалогообложенияНаНачалоПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СистемыНалогообложенияНаНачалоПериода, 
		",", 
		Истина, 
		Истина);
		
	СистемыНалогообложенияНаКонецПериода = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		ДатаОкончанияПериода,
		"СистемыНалогообложения,").СистемыНалогообложения;
		
	СистемыНалогообложенияНаКонецПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СистемыНалогообложенияНаКонецПериода, 
		",", 
		Истина, 
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СистемыНалогообложенияНаНачалоПериода, 
		СистемыНалогообложенияНаКонецПериода, 
		Истина);
	
	Возврат СистемыНалогообложенияНаНачалоПериода;
	
КонецФункции

#Область ПечатнаяФормаСверки


#Область ВерхняяЧасть

Процедура ЗаполнитьВерхнююЧастьСверки(Сверка, ТабДок, Бланк, ПараметрыЗапроса)

	ВерхняяЧастьБланка = Бланк.ПолучитьОбласть("ВерхняяЧасть");
	
	ЗаполнитьКодИФНС(Сверка, Бланк, ВерхняяЧастьБланка);
	ЗаполнитьНаименование(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьИННЦеликомИПосимвольно(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьКПП(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьКодИФНСОтвета(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьКодЗапроса(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьФорматОтвета(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьПериод(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса);
	
	Если НЕ ЭтоФормат5_07() Тогда
		ЗаполнитьПризнакКБК(Сверка, ВерхняяЧастьБланка);
	КонецЕсли;
	
	ТабДок.Вывести(ВерхняяЧастьБланка);

КонецПроцедуры

Процедура ЗаполнитьПризнакКБК(Сверка, Область)

	ЗаполнитьПризнак(Сверка, Область, "КБК", "КоличествоНалогов");

КонецПроцедуры

Процедура ЗаполнитьКодИФНС(Сверка, Бланк, ВерхняяЧастьБланка)
	
	// Если организация состоит на учете в двух и более ИФНС и нужна справка о расчетах со всеми ИФНС, 
	// то в сверке в строке "Код ИФНС" указывается значение "0000", КПП не указывается.
	
	// Получаем данные.
	Если НЕ ЗначениеЗаполнено(Сверка.Получатель) Тогда
		КодИФНСПолучателя = "0000";
	Иначе
		КодИФНСПолучателя = СокрЛП(Сверка.Получатель.Код);
	КонецЕсли;
	
	// Выводим в макет.
	ВывестиПосимвольно(ВерхняяЧастьБланка, КодИФНСПолучателя, "ИФНС", 4);
	
КонецПроцедуры

Процедура ЗаполнитьНаименование(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса)
	
	// Получаем данные.
	Наименование = "";
	
	Если НЕ ПараметрыЗапроса.ЭтоПБОЮЛ Тогда
		Наименование = СокрЛП(ПараметрыЗапроса.НаимЮЛПол);
	Иначе
		Наименование =
			СокрЛП(ПараметрыЗапроса.ИПФамилия) + " " + 
			СокрЛП(ПараметрыЗапроса.ИПИмя) + " " +
			СокрЛП(ПараметрыЗапроса.ИПОтчество);
	КонецЕсли;

	// Выводим в макет.
	ВерхняяЧастьБланка.Параметры["Наименование"] = Наименование;
	
КонецПроцедуры

Процедура ЗаполнитьИННЦеликомИПосимвольно(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса)
	
	// Получаем данные.
	ИНН = "";
	
	Если ПараметрыЗапроса.ПрПодп = 1 Тогда // отправитель - налогоплательщик
		Если НЕ ПараметрыЗапроса.ЭтоПБОЮЛ Тогда
			ИНН = СокрЛП(ПараметрыЗапроса.ИННЮЛ);
		Иначе
			ИНН = СокрЛП(ПараметрыЗапроса.ИННФЛ);
		КонецЕсли;
	Иначе
		СвДоверенность = ПараметрыЗапроса.Доверенность;
		СвПредст = СвДоверенность.СвУпПред.СвПред;
		Если СвПредст.Свойство("СвОрг") Тогда // представитель - ЮЛ
			ИНН = СокрЛП(СвПредст.СвОрг.ИННЮЛ);
		Иначе
			Если СвПредст.СведФизЛ.ЯвляетсяСотрудникомОрганизации Тогда
				Если НЕ ПараметрыЗапроса.ЭтоПБОЮЛ Тогда
					ИНН = СокрЛП(ПараметрыЗапроса.ИННЮЛ);
				Иначе
					ИНН = СокрЛП(ПараметрыЗапроса.ИННФЛ);
				КонецЕсли;
			Иначе	
				ИНН = СокрЛП(СвПредст.СведФизЛ.ИННФЛ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Выводим в макет.
	ВерхняяЧастьБланка.Параметры["ИНН"] = ИНН;
	ВывестиПосимвольно(ВерхняяЧастьБланка, ИНН, "ИНН", 12);
	
КонецПроцедуры

Процедура ЗаполнитьКПП(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса)
	
	// Получаем данные.
	КПП = "";
	
	Если ПараметрыЗапроса.ПрПодп = 1 Тогда // отправитель - налогоплательщик
		Если НЕ ПараметрыЗапроса.ЭтоПБОЮЛ Тогда
			КПП = СокрЛП(ПараметрыЗапроса.КППЮЛ);
		КонецЕсли;
	Иначе
		СвДоверенность = ПараметрыЗапроса.Доверенность;
		СвПредст = СвДоверенность.СвУпПред.СвПред;
		Если СвПредст.Свойство("СвОрг") Тогда // представитель - ЮЛ
			КПП = СокрЛП(СвПредст.СвОрг.КПП);
		Иначе
			Если СвПредст.СведФизЛ.ЯвляетсяСотрудникомОрганизации Тогда
				Если НЕ ПараметрыЗапроса.ЭтоПБОЮЛ Тогда
					КПП = СокрЛП(ПараметрыЗапроса.КППЮЛ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Выводим в макет.
	ВывестиПосимвольно(ВерхняяЧастьБланка, КПП, "КПП", 9, "");
	
КонецПроцедуры

Процедура ЗаполнитьКодИФНСОтвета(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса)
	
	// Получаем данные.
	ИНФСОтвета = "";
	
	Если НЕ ЗначениеЗаполнено(Сверка.Получатель) Тогда
		ИНФСОтвета = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Сверка.Организация, , "КодНО").КодНО);
	Иначе
		ИНФСОтвета = СокрЛП(Сверка.Получатель.Код);
	КонецЕсли;
	
	// Выводим в макет.
	ВывестиПосимвольно(ВерхняяЧастьБланка, ИНФСОтвета, "ИНФСОтвета", 4);
	
КонецПроцедуры

Процедура ЗаполнитьКодЗапроса(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса)
	
	// Получаем данные.
	СоответствиеВидаУслугиКоду = Новый Соответствие;
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом, "1");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом, "2");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности, "3");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов, "4");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате, "5");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.СправкаОПринадлежностиСумм, "6");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.СправкаОНаличииСальдо, "7");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.СведенияОбОтрицательномСальдоЕНС, "8");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.СправкаОПринадлежностиСуммАгрегированныеДанные, "9");
	

	КодЗапроса = СоответствиеВидаУслугиКоду[Сверка.ВидУслуги];
	
	// Выводим в макет.
	ВерхняяЧастьБланка.Параметры["КодЗапроса"] = КодЗапроса;
	
КонецПроцедуры

Процедура ЗаполнитьФорматОтвета(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса)
	
	// Получаем данные.
	СоответствиеФорматовОтветовИдентификатору = Новый Соответствие;
	СоответствиеФорматовОтветовИдентификатору.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.RTF, "1");
	СоответствиеФорматовОтветовИдентификатору.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XML, "2");
	СоответствиеФорматовОтветовИдентификатору.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XLS, "3");
	СоответствиеФорматовОтветовИдентификатору.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.PDF, "4");

	ФорматОтвета = СоответствиеФорматовОтветовИдентификатору[Сверка.ФорматОтвета];
	
	// Выводим в макет.
	ВерхняяЧастьБланка.Параметры["ФорматОтвета"] = ФорматОтвета;
	
КонецПроцедуры

Процедура ЗаполнитьПризнак(Сверка, Область, Имя, ИмяКоличества)
	
	ЭтоАкт = Сверка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов;
	ЭтоПриложение4Или2 = ЭтоПриложение2Или4СправкиОНаличииСальдо(Сверка);
	
	Если (ЭтоАкт ИЛИ ЭтоПриложение4Или2) И (Имя = "КБК" ИЛИ Имя = "КПП")
		ИЛИ (ЭтоПриложение4Или2 И Имя = "ОКТМО") Тогда
		
		ИмяПоля = "Признак" + Имя;
		Если Сверка[ИмяКоличества] = Перечисления.КоличествоЭлементовДляСверкиИОН.Все Тогда
			Область.Параметры[ИмяПоля] = "1";
		Иначе
			Область.Параметры[ИмяПоля] = "2";
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПериод(Сверка, Бланк, ВерхняяЧастьБланка, ПараметрыЗапроса)
	
	ВерхняяЧастьБланка.Параметры["Период"] = НСтр("ru = 'c <__.__.____> по <__.__.____>';
													|en = 'c <__.__.____> по <__.__.____>'");
	
	ОбязателенПериод = ДокументооборотСКОКлиентСервер.ОбязателенПериодВЗапросеИОН(Сверка);
	Если ОбязателенПериод Тогда
		
		ДатаНач = Формат(Сверка.ДатаНачалаПериода, "ДФ=dd.MM.yyyy");
		ДатаКон = Формат(Сверка.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy");
		Период = НСтр("ru = 'c <%1> по <%2>';
						|en = 'c <%1> по <%2>'");
		
		Период = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Период,
			ДатаНач,
			ДатаКон);
		
		ВерхняяЧастьБланка.Параметры["Период"] = Период;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Таблица

Процедура ЗаполнитьТабличнуюЧастьСверки(Сверка, ТабДок, Бланк)
	
	ЭтоАкт = Сверка.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов;
	ЭтоПриложение4Или2 = ЭтоПриложение2Или4СправкиОНаличииСальдо(Сверка);

	СтрокаТабличнойЧастиБланка = Бланк.ПолучитьОбласть("ТаблицаКБК");
	ТаблицаКБК	= ПолучитьТаблицуКБК();
	
	Для каждого Налог Из Сверка.ЗапрашиваемыеНалоги Цикл
		
		Если ЭтоАкт ИЛИ ЭтоПриложение4Или2 Тогда
			ВывестиПосимвольно(СтрокаТабличнойЧастиБланка, Налог.КБК, "КБК", 20);
		Иначе
			СтрокаТабличнойЧастиБланка.Параметры["КБК"] = Налог.КБК;
			СтрокаТабличнойЧастиБланка.Параметры["ОКАТОИлиОКТМО"] 		= Налог.ОКАТО;
			СтрокаТабличнойЧастиБланка.Параметры["НаименованиеНалога"] 	= НаименованиеКБК(Налог.КБК, ТаблицаКБК);
		КонецЕсли;
		ТабДок.Вывести(СтрокаТабличнойЧастиБланка);
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область НижняяЧасть

Процедура ЗаполнитьНижнююЧастьСверки(Сверка, ТабДок, Бланк, ПараметрыЗапроса)

	НижняяЧастьБланка = Бланк.ПолучитьОбласть("НижняяЧасть");
	
	Если ЭтоФормат5_07() Тогда
		
		НижняяЧастьБланка.Параметры["ДеталСвед"] = ?(Сверка.ДеталСвед, "1", "0");
		НижняяЧастьБланка.Параметры["ИнфПрНач"]  = ?(Сверка.ИнфПрНач, "1", "0");
		НижняяЧастьБланка.Параметры["РасчСуммПени"] = ?(Сверка.РасчСуммПени, "1", "0");
		НижняяЧастьБланка.Параметры["ДеталНачСумм"] = ?(Сверка.ДеталНачСумм, "1", "0");
		
		Если Сверка.ДеталНачСумм Тогда
			НижняяЧастьБланка.Параметры["ПрПредДетал"] = Сверка.ПрПредДетал;
			НижняяЧастьБланка.Параметры["ДеталНачСуммКвартал"] = Квартал(Сверка.ДатаНачалаПериода);
			
			ВывестиПосимвольно(НижняяЧастьБланка, Формат(Год(Сверка.ДатаНачалаПериода), "ЧГ=0"), "ДеталНачСуммГод", 4);
		КонецЕсли;
		
		ЗаполнитьПризнакКБК(Сверка, НижняяЧастьБланка);
		
		ЗаполнитьПризнак(Сверка, НижняяЧастьБланка, "КПП", "КоличествоКПП");
		ЗаполнитьПризнак(Сверка, НижняяЧастьБланка, "ОКТМО", "КоличествоОКТМО");
		
	КонецЕсли;
	
	ЗаполнитьПризнакУполномоченногоПредставителя(Сверка, Бланк, НижняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьПодписанта(Сверка, Бланк, НижняяЧастьБланка, ПараметрыЗапроса);
	ЗаполнитьДатуСверки(Сверка, Бланк, НижняяЧастьБланка, ПараметрыЗапроса);
	
	ТабДок.Вывести(НижняяЧастьБланка);

КонецПроцедуры

Процедура ЗаполнитьПризнакУполномоченногоПредставителя(Сверка, Бланк, НижняяЧастьБланка, ПараметрыЗапроса)

	НижняяЧастьБланка.Параметры["ПризнакУполномоченногоПредставителя"] = ПараметрыЗапроса.ПрПодп;
	Если ПараметрыЗапроса.ПрПодп = 2 И ЭтоФормат5_07() Тогда
		НижняяЧастьБланка.Параметры["НаимДок"] = ПараметрыЗапроса.Доверенность.НаимДок;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПодписанта(Сверка, Бланк, НижняяЧастьБланка, ПараметрыЗапроса)

	Если ПараметрыЗапроса.ПрПодп = 1 Тогда
		
		ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(ПараметрыЗапроса.ФИОРук);
		
		ФИО = Новый Структура();
		ФИО.Вставить("Фамилия", 	СокрЛП(ФИОПодписанта.Фамилия));
		ФИО.Вставить("Имя", 		СокрЛП(ФИОПодписанта.Имя));
		ФИО.Вставить("Отчество", 	СокрЛП(ФИОПодписанта.Отчество));
	
	Иначе
		
		ФИОПодписанта = ПараметрыЗапроса.Доверенность.СвУпПред.СвПред.СведФизЛ.ФИО;
		
		ФИО = Новый Структура();
		ФИО.Вставить("Фамилия", 	СокрЛП(ФИОПодписанта.Фамилия));
		ФИО.Вставить("Имя", 		СокрЛП(ФИОПодписанта.Имя));
		ФИО.Вставить("Отчество", 	СокрЛП(ФИОПодписанта.Отчество));
		
	КонецЕсли;
			
	Подписант = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
	
	НижняяЧастьБланка.Параметры["ФИО"] = Подписант;

КонецПроцедуры

Процедура ЗаполнитьДатуСверки(Сверка, Бланк, НижняяЧастьБланка, ПараметрыЗапроса)

	УстановитьПривилегированныйРежим(Истина);
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Сверка);
	
	КонтекстЭДОСервер 	= ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СообщенияЦикла		= КонтекстЭДОСервер.ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена);
	СтрЗапросыНП 		= СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ЗапросНП));
	
	Если СтрЗапросыНП.Количество() = 0 Тогда
		НижняяЧастьБланка.Параметры["ДатаСверки"] = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
	Иначе
		НижняяЧастьБланка.Параметры["ДатаСверки"] = Формат(СтрЗапросыНП[0].ДатаТранспорта, "ДЛФ=DD");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПодпись(Сверка, ТабДок)
	
	// Типы не содержат квитанций, так как квитанции не содержат подписи под самим письмом, только под квитанцией.
	ТипыСообщений = Новый Массив;
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
	ТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ДобавитьШтампПодписиПодДокументом(
		Сверка,
		ТипыСообщений,
		ТабДок,
		2,
		Ложь); 

КонецПроцедуры

Функция Квартал(Дата) Экспорт
	
	Возврат Цел((Месяц(Дата) - 1) / 3) + 1;

КонецФункции
	
#КонецОбласти

#Область ПрочиеПроцедурыПечатнойФормы

Функция ПараметрыЗапроса(Сверка)

	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.СформироватьПараметрыЗапроса(Сверка);

КонецФункции

Процедура ВывестиПосимвольно(
		ТабличныйДокумент, 
		Значение, 
		ПрефиксИмениПараметра, 
		КоличествоКлеток, 
		СимволНаполнения = "-")
		
	ДокументооборотСКО.ВывестиПосимвольно(
		ТабличныйДокумент, 
		Значение, 
		ПрефиксИмениПараметра, 
		КоличествоКлеток, 
		СимволНаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ОпределитьГруппыСПодгруппами(ТаблицаКБК, ГруппыСПодгруппами)
	
	ГруппыСПодгруппами.Очистить();
	
	Папки = ТаблицаКБК.Скопировать(,"Папка");
	Папки.Свернуть("Папка");
	
	Для каждого Строка Из Папки Цикл
		
		ПозицияСлеша = Найти(Строка.Папка, "/");
		
		Если ПозицияСлеша > 0 Тогда
			
			ИмяРодительскойПапки = СокрЛП(Лев(Строка.Папка, ПозицияСлеша - 1));
			
			ГруппыСПодгруппами.Добавить(ИмяРодительскойПапки);
			
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры 

#Область СправкаОНаличииСальдо

Функция СправкаОНаличииСальдо(ЗапросИОН, АдресФайла) Экспорт
	
	// Получаем файл xml
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ПолучитьИзВременногоХранилища(АдресФайла).Записать(ИмяФайла);
	
	// Дессериализуем в XDTO
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Справка = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Если Это5_03(Справка) Тогда
		Макет = ПолучитьМакет("СправкаОНаличииСальдо5_03");
	Иначе
		Макет = ПолучитьМакет("СправкаОНаличииСальдо5_02");
	КонецЕсли;
		
	ТабДок = Новый ТабличныйДокумент;
	
	СформироватьСправкаОНаличииСальдо_Шапка(Справка, Макет, ТабДок);
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	Если Это5_03(Справка) Тогда
		ТабДок = СформироватьСправкаОНаличииСальдо5_03(Справка, Макет, ТабДок);
	Иначе
		ТабДок = СформироватьСправкаОНаличииСальдо5_02(Справка, Макет, ТабДок);
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ДобавитьШтампПодписиВРезультатЗапросаИОН(ЗапросИОН, ТабДок, 3, Ложь);
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.НижнийКолонтитул.ТекстВЦентре = "[&НомерСтраницы]";
	ТабДок.НижнийКолонтитул.Выводить = Истина;
	ТабДок.АвтоМасштаб = Истина;
	
	Возврат ТабДок;
	
КонецФункции

Процедура СправкаОНаличииСальдо_ВывестиШапкуРаздела(Справка, Область) Экспорт
	
	Документ = Справка.Документ;
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, Документ);
	
	СправкаОНаличииСальдо_СвПолуч(Справка, Область);
	
КонецПроцедуры

Процедура СправкаОНаличииСальдо_СвПолуч(Справка, Область) Экспорт
		
	Если ДокументооборотСКОКлиентСервер.ЕстьСвойство(Область.Параметры, "НаимОрг_или_ФИО") Тогда
		
		СвПолуч = Справка.Документ.СвПолуч;
	
		Если ЕстьСвойствоXDTO(СвПолуч, "ПолучЮЛ") Тогда
			
			ПолучЮЛ = СвПолуч.ПолучЮЛ;
			Область.Параметры.ИНН = ПолучЮЛ.ИННЮЛ;
			Область.Параметры.КПП = ПолучЮЛ.КПП;
			Область.Параметры.НаимОрг_или_ФИО = СвойствоXDTO(ПолучЮЛ, "НаимОрг");
					
		ИначеЕсли ЕстьСвойствоXDTO(СвПолуч, "ПолучФЛ") Тогда
			
			ПолучФЛ = СвПолуч.ПолучФЛ;
			Область.Параметры.ИНН = ПолучФЛ.ИННФЛ;
			
			Область.Параметры.НаимОрг_или_ФИО = ФИОИзТега(ПолучФЛ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Шапка(Справка, Макет, ТабДок) Экспорт
	
	Документ  = Справка.Документ;
	Подписант = Документ.Подписант;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	СправкаОНаличииСальдо_ВывестиШапкуРаздела(Справка, ОбластьШапка);
	
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Документ.СвОтпр);
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДок.Вывести(ОбластьШапка);
	
КонецПроцедуры

Функция Это5_03(Справка)

	Возврат Справка.ВерсФорм = "5.03";

КонецФункции

Процедура СформироватьСправкаОНаличииСальдо_ДетСальдоЕНС(Справка, Макет, ТабДок) Экспорт
	
	Документ = Справка.Документ;
	ДетСальдоЕНС = Документ.ДетСальдоЕНС;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ДетСальдоЕНС");
	СправкаОНаличииСальдо_ВывестиШапкуРаздела(Справка, ОбластьШапка);
	
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ДетСальдоЕНС);
	ТабДок.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_СальдоНал(ДетСальдоЕНС, Макет, ТабДок) Экспорт
	
	ДетСальдоНал = СписокИзXDTO(ДетСальдоЕНС.СальдоНал, "ДетСальдоНал");
	
	Если ДетСальдоНал.Количество() > 0 Тогда
		ВывестиПростойБлок(Макет, ТабДок,, "ДетСальдоНалШапка");
	Иначе
		Возврат;
	КонецЕсли;
	
	ВывестиСтрокиТаблицы(Макет, ТабДок, ДетСальдоНал, "ДетСальдоНалСтрока");
	ВывестиПростойБлок(Макет, ТабДок, ДетСальдоЕНС.СальдоНал, "ДетСальдоНалИтог");
	
КонецПроцедуры

Процедура ВывестиПростойБлок(Макет, ТабДок, ИсточникЗаполнения = Неопределено, ИмяОбласти) Экспорт
		
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Если ИсточникЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Область.Параметры, ИсточникЗаполнения);
	КонецЕсли;
		
	ТабДок.Вывести(Область);
	
КонецПроцедуры

Функция СформироватьСправкаОНаличииСальдо5_02(Справка, Макет, ТабДок) Экспорт
	
	Документ = Справка.Документ;
	
	Если ЕстьСвойствоXDTO(Документ, "ДетСальдоЕНС") Тогда

		СформироватьСправкаОНаличииСальдо_ДетСальдоЕНС(Справка, Макет, ТабДок);
		СформироватьСправкаОНаличииСальдо_СальдоНал(Документ.ДетСальдоЕНС, Макет, ТабДок);
		СформироватьСправкаОНаличииСальдо_РсчСумПеня_5_02(ТабДок, Макет, Справка);
		
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция СформироватьСправкаОНаличииСальдо5_03(Справка, Макет, ТабДок) Экспорт
	
	СформироватьСправкаОНаличииСальдо_Приложение1(ТабДок, Макет, Справка);
	СформироватьСправкаОНаличииСальдо_Приложение2(ТабДок, Макет, Справка);
	СформироватьСправкаОНаличииСальдо_Приложение3(ТабДок, Макет, Справка);
	СформироватьСправкаОНаличииСальдо_Приложение4(ТабДок, Макет, Справка);
	
	Возврат ТабДок;
	
КонецФункции

Процедура СформироватьСправкаОНаличииСальдо_Приложение1(ТабДок, Макет, Справка)
	
	Документ = Справка.Документ;
	
	Если ЕстьСвойствоXDTO(Документ, "ДетСальдоЕНС") Тогда
		
		СформироватьСправкаОНаличииСальдо_ДетСальдоЕНС(Справка, Макет, ТабДок);
		
		ДетСальдоЕНС = Документ.ДетСальдоЕНС;
		
		СформироватьСправкаОНаличииСальдо_СальдоНал(ДетСальдоЕНС, Макет, ТабДок);
		СформироватьСправкаОНаличииСальдо_ЗадолжБанкр(ДетСальдоЕНС, Макет, ТабДок);
		СформироватьСправкаОНаличииСальдо_ЗадолжМС(ДетСальдоЕНС, Макет, ТабДок);
		СформироватьСправкаОНаличииСальдо_ДетДолгПриост(ДетСальдоЕНС, Макет, ТабДок);
		ВывестиПростойБлок(Макет, ТабДок, ДетСальдоЕНС.ЗадолжНеСальдо, "ЗадолжНеСальдо");
		ВывестиПростойБлок(Макет, ТабДок, , "Приложение1Подвал");
		
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_ДетДолгПриост(ДетСальдоЕНС, Макет, ТабДок) Экспорт
	
	ДетДолгПриост = СписокИзXDTO(ДетСальдоЕНС.ЗадолжНеСальдо, "ДетДолгПриост");
	
	Если ДетДолгПриост.Количество() > 0 Тогда
		ВывестиПростойБлок(Макет, ТабДок,, "ДетДолгПриостШапка");
	Иначе
		Возврат;
	КонецЕсли;
	
	ВывестиСтрокиТаблицы(Макет, ТабДок, ДетДолгПриост, "ДетДолгПриост");
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_ЗадолжБанкр(ДетСальдоЕНС, Макет, ТабДок) Экспорт
	
	ДетЗадолжБанкр = СписокИзXDTO(ДетСальдоЕНС.ЗадолжБанкр, "ДетЗадолжБанкр");
	
	Если ДетЗадолжБанкр.Количество() > 0 Тогда
		ВывестиПростойБлок(Макет, ТабДок,, "ЗадолжБанкрШапка");
	Иначе
		Возврат;
	КонецЕсли;
	
	ВывестиСтрокиТаблицы(Макет, ТабДок, ДетЗадолжБанкр, "ДетЗадолжБанкр");
	ВывестиПростойБлок(Макет, ТабДок, ДетСальдоЕНС.ЗадолжБанкр, "ЗадолжБанкрПодвал");
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_ЗадолжМС(ДетСальдоЕНС, Макет, ТабДок) Экспорт
	
	ДетЗадолжМС = СписокИзXDTO(ДетСальдоЕНС.ЗадолжМС, "ДетЗадолжМС");
	
	Если ДетЗадолжМС.Количество() > 0 Тогда
		ВывестиПростойБлок(Макет, ТабДок,, "ЗадолжМСШапка");
	Иначе
		Возврат;
	КонецЕсли;
	
	ВывестиСтрокиТаблицы(Макет, ТабДок, ДетЗадолжМС, "ДетЗадолжМС");
	ВывестиПростойБлок(Макет, ТабДок, ДетСальдоЕНС.ЗадолжМС, "ЗадолжМСПодвал");
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_РсчСумПеня_5_02(ТабДок, Макет, Справка) Экспорт
	
	Документ = Справка.Документ;
	
	РсчСумПеня = СписокИзXDTO(Документ.ДетСальдоЕНС, "РсчСумПеня");
	
	Если РсчСумПеня.Количество() > 0 Тогда
		ВывестиПростойБлок(Макет, ТабДок, Документ, "РсчСумПеняШапка");
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРсчСумПеня Из РсчСумПеня Цикл
		ВывестиПростойБлок(Макет, ТабДок, СтрокаРсчСумПеня, "РсчСумПеняСтрока");
	КонецЦикла;
		
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение3(ТабДок, Макет, Справка) Экспорт
	
	Документ = Справка.Документ;
	
	Если ЕстьСвойствоXDTO(Документ, "РсчСумПеня") Тогда
		РсчСумПеня = СвойствоXDTO(Документ, "РсчСумПеня");
	Иначе
		Возврат;
	КонецЕсли;
	
	СформироватьСправкаОНаличииСальдо_Приложение3Таблица1(Документ, ТабДок, РсчСумПеня, Макет);
	СформироватьСправкаОНаличииСальдо_Приложение3Таблица2(ТабДок, РсчСумПеня, Макет);
	СформироватьСправкаОНаличииСальдо_Приложение3Таблица3(ТабДок, РсчСумПеня, Макет);
	СформироватьСправкаОНаличииСальдо_Приложение3Таблица4(ТабДок, РсчСумПеня, Макет);
	СформироватьСправкаОНаличииСальдо_Приложение3Таблица5(ТабДок, РсчСумПеня, Макет);
	
	ВывестиПростойБлок(Макет, ТабДок, , "Приложение3Подвал");
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение3Таблица1(Документ, ТабДок, РсчСумПеня, Макет) Экспорт
	
	Область = Макет.ПолучитьОбласть("РсчСумПеня");
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, РсчСумПеня);
	ЗаполнитьЗначенияСвойств(Область.Параметры, Документ);
		
	ТабДок.Вывести(Область);
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение3Таблица2(ТабДок, РсчСумПеня, Макет) Экспорт
	
	Если ЕстьСвойствоXDTO(РсчСумПеня, "СумПени") Тогда
		ВывестиПростойБлок(Макет, ТабДок,, "СумПениШапка_4_27");
	Иначе
		Возврат;
	КонецЕсли;
	
	ДетСумПени = СписокИзXDTO(РсчСумПеня.СумПени, "ДетСумПени");
	ВывестиСтрокиТаблицы(Макет, ТабДок, ДетСумПени, "ДетСумПени_4_27");
	ВывестиПростойБлок(Макет, ТабДок, РсчСумПеня.СумПени, "СумПениПодвал_4_27");
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение3Таблица3(ТабДок, РсчСумПеня, Макет) Экспорт
	
	ДетСумПени = СписокИзXDTO(РсчСумПеня, "ДетСумПени");
	
	Если ДетСумПени.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДетСумПени Из ДетСумПени Цикл
	
		ВывестиПростойБлок(Макет, ТабДок,, "СумПениШапка_4_28");
		
		ДетСумПени_4_28 = СписокИзXDTO(СтрокаДетСумПени, "ДетСумПени");
	
		Если ДетСумПени_4_28.Количество() > 0 Тогда
			Для каждого Строка Из ДетСумПени_4_28 Цикл
				
				Область = Макет.ПолучитьОбласть("ДетСумПени_4_28");
				ЗаполнитьЗначенияСвойств(Область.Параметры, Строка);
				ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаДетСумПени);
				ТабДок.Вывести(Область);
				
			КонецЦикла;
		Иначе
			ВывестиПростойБлок(Макет, ТабДок, , "ДетСумПени_4_28");
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение3Таблица4(ТабДок, РсчСумПеня, Макет) Экспорт
	
	Результат = ПрДолгПениЭлемент(РсчСумПеня);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиПростойБлок(Макет, ТабДок, ПрДолгПениЭлемент(РсчСумПеня), "ПрДолгПени");
	
КонецПроцедуры

Функция ПрДолгПениЭлемент(РсчСумПеня)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РсчСумПеня, "ПрДолгПени")
		И ТипЗнч(РсчСумПеня.ПрДолгПени) = Тип("ОбъектXDTO") Тогда
		
		Возврат РсчСумПеня.ПрДолгПени;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РсчСумПеня, "ПрДолгПени1")
		И ТипЗнч(РсчСумПеня.ПрДолгПени1) = Тип("ОбъектXDTO") Тогда
		
		// ПрДолгПени1 - потому что в таблице Таблица 4.25 есть атрибут ПрДолгПени и элемент ПрДолгПени
		// и платформа переименовывает ПрДолгПени в ПрДолгПени1

		Возврат РсчСумПеня.ПрДолгПени1;
		
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСправкаОНаличииСальдо_Приложение3Таблица5(ТабДок, РсчСумПеня, Макет) Экспорт
	
	Результат = ПрДолгПениЭлемент(РсчСумПеня);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДетДолгПениПр = СписокИзXDTO(ПрДолгПениЭлемент(РсчСумПеня), "ДетДолгПениПр");
	
	Если ДетДолгПениПр.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиПростойБлок(Макет, ТабДок,, "ДетДолгПениПрШапка");
	ВывестиСтрокиТаблицы(Макет, ТабДок, ДетДолгПениПр, "ДетДолгПениПр");
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение2(ТабДок, Макет, Справка) Экспорт
	
	Документ = Справка.Документ;
	
	Если ЕстьСвойствоXDTO(Документ, "ИнфПрНачислЗачт") Тогда
		ИнфПрНачислЗачт = СвойствоXDTO(Документ, "ИнфПрНачислЗачт");
	Иначе
		Возврат;
	КонецЕсли;
	
	СформироватьСправкаОНаличииСальдо_Приложение2Таблица1(ТабДок, Макет, Документ);
	СформироватьСправкаОНаличииСальдо_Приложение2Таблица2(ТабДок, Макет, Документ);
	ВывестиПростойБлок(Макет, ТабДок, , "Приложение2Подвал");
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение2Таблица1(ТабДок, Макет, Документ) Экспорт
	
	ПредОбяз = Документ.ИнфПрНачислЗачт.ПредОбяз;
	
	// Шапка
	ВывестиПростойБлок(Макет, ТабДок, Документ, "ИнфПрНачислЗачтШапка");
	
	// Таблица
	ИнфПредНачисл = СписокИзXDTO(ПредОбяз, "ИнфПредНачисл");
	ВывестиСтрокиТаблицы(Макет, ТабДок, ИнфПредНачисл, "ИнфПредНачисл");
	
	// Подвал
	ВывестиПростойБлок(Макет, ТабДок, ПредОбяз, "ИнфПрНачислЗачтПодвал");
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение2Таблица2(ТабДок, Макет, Документ) Экспорт
	
	СумЗачт = Документ.ИнфПрНачислЗачт.СумЗачт;
	
	// Шапка
	ВывестиПростойБлок(Макет, ТабДок, Документ, "СумЗачтШапка");
	
	// Таблица
	ДетСумРезерв = СписокИзXDTO(СумЗачт, "ДетСумРезерв");
	ВывестиСтрокиТаблицы(Макет, ТабДок, ДетСумРезерв, "ДетСумРезерв");
	
	// Подвал
	ВывестиПростойБлок(Макет, ТабДок, СумЗачт, "СумЗачтПодвал");
	
КонецПроцедуры

Процедура ВывестиСтрокиТаблицы(Макет, ТабДок, СтрокиИсточникЗаполнения, ИмяОбластиТЧ) Экспорт
		
	Если СтрокиИсточникЗаполнения.Количество() > 0 Тогда
		Для каждого Строка Из СтрокиИсточникЗаполнения Цикл
			ВывестиПростойБлок(Макет, ТабДок, Строка, ИмяОбластиТЧ);
		КонецЦикла;
	Иначе
		ВывестиПростойБлок(Макет, ТабДок, , ИмяОбластиТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСправкаОНаличииСальдо_Приложение4(ТабДок, Макет, Справка) Экспорт
	
	Документ = Справка.Документ;
	
	ДетСумСовОбяз = СписокИзXDTO(Документ, "ДетСумСовОбяз");

	Если ДетСумСовОбяз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Шапка приложения
	ВывестиПростойБлок(Макет, ТабДок, Документ, "Приложение4Шапка");

	Для каждого СтрокаДетСумСовОбяз Из ДетСумСовОбяз Цикл

		ДетСовОбязНал = СписокИзXDTO(СтрокаДетСумСовОбяз, "ДетСовОбязНал");
		
		Если ДетСовОбязНал.Количество() > 0 Тогда
			// Заголовок приложения
			Область = Макет.ПолучитьОбласть("Приложение4Заголовок");
			ЗаполнитьЗначенияСвойств(Область.Параметры, Документ);
			ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаДетСумСовОбяз);
			ТабДок.Вывести(Область);
		КонецЕсли;
		
		Для каждого СтрокаДетСовОбязНал Из ДетСовОбязНал Цикл
			
			// Шапка
			Область = Макет.ПолучитьОбласть("ДетСумСовОбязШапка");
			ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаДетСовОбязНал);
			ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаДетСумСовОбяз);
			ТабДок.Вывести(Область);
			
			// Таблица
			ДетСовОбязСтр = СписокИзXDTO(СтрокаДетСовОбязНал, "ДетСовОбязСтр");
			ВывестиСтрокиТаблицы(Макет, ТабДок, ДетСовОбязСтр, "ДетСовОбязСтр");
			
			// Подвал с итогами
			ВывестиПростойБлок(Макет, ТабДок, СтрокаДетСовОбязНал, "ДетСумСовОбязПодвал");
				
		КонецЦикла;
		
	КонецЦикла;
	
	ВывестиПростойБлок(Макет, ТабДок, , "Приложение4Подвал");
	
КонецПроцедуры

#КонецОбласти

Функция ЕстьСвойствоXDTO(Узел, Поле) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЕстьСвойствоXDTO(Узел, Поле); 
	
КонецФункции

Функция СвойствоXDTO(Узел, Поле) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.СвойствоXDTO(Узел, Поле);
	
КонецФункции

Функция ФИОИзТега(Узел) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ФИОИзТега(Узел);
	
КонецФункции

Функция СписокИзXDTO(Узел, Поле) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.СписокИзXDTO(Узел, Поле); 
	
КонецФункции

Функция РазрешенXLSв5_07(ВидУслуги) Экспорт
	
	// Элемент может принимать значение 3 "в формате XLS" при <КодЗапр> =  4 | 6 | 7 | 9
		
	Разрешен = 
		ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов
		ИЛИ ВидУслуги = Перечисления.ВидыУслугПриИОН.СправкаОПринадлежностиСумм
		ИЛИ ВидУслуги = Перечисления.ВидыУслугПриИОН.СправкаОНаличииСальдо
		ИЛИ ВидУслуги = Перечисления.ВидыУслугПриИОН.СправкаОПринадлежностиСуммАгрегированныеДанные;
		
	Возврат Разрешен;
		
КонецФункции

Функция ЭтоПриложение4СправкиОНаличииСальдо(Объект) Экспорт
	
	Возврат Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо") И Объект.ДеталНачСумм;

КонецФункции

Функция ЭтоПриложение2СправкиОНаличииСальдо(Объект) Экспорт
	
	Возврат Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОНаличииСальдо") И Объект.ИнфПрНач;

КонецФункции

Функция ЭтоПриложение2Или4СправкиОНаличииСальдо(Объект) Экспорт
	
	Возврат ЭтоПриложение4СправкиОНаличииСальдо(Объект) ИЛИ ЭтоПриложение2СправкиОНаличииСальдо(Объект);

КонецФункции

Функция ЭтоФормат5_07() Экспорт
	
	Возврат ДокументооборотСКОНаВремяВызоваПовтИсп.ЭтоФорматЗапросаИОН5_07();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// инициализируем контекст ЭДО - модуль обработки
	ТекстСообщения = "";
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ОбработкаПолученияФормы("Документ", "ЗапросНаИнформационноеОбслуживаниеНалогоплательщика", ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
