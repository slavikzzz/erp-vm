///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если СтрСравнить(ВидФормы, "ФормаОбъекта") = 0 Тогда
		Значения = ОбщегоНазначенияБЗК.ЗначенияСвойств(Параметры, "Ключ, Основание, ГоловнаяОрганизация, ФизическоеЛицо");
		Если ЗначениеЗаполнено(Значения.Ключ) Тогда
			Возврат;
		КонецЕсли;
		Основание           = Значения.Основание;
		ГоловнаяОрганизация = Значения.ГоловнаяОрганизация;
		ФизическоеЛицо      = Значения.ФизическоеЛицо;
		Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Если ТипЗнч(Значения.Основание) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание, "Организация, ФизическоеЛицо");
				ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеквизитыОснования.Организация);
				ФизическоеЛицо      = РеквизитыОснования.ФизическоеЛицо;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сведения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СведенияОЗастрахованномЛицеФСС КАК Сведения
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
			|		ПО Сведения.Ссылка = ЗастрахованныеЛицаСЭДО.ПоследниеСведения
			|			И Сведения.Ссылка <> ЗастрахованныеЛицаСЭДО.ОтправленныеСведения
			|ГДЕ
			|	Сведения.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И Сведения.ФизическоеЛицо = &ФизическоеЛицо
			|	И НЕ Сведения.ПометкаУдаления
			|	И Сведения.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
			|	И НЕ ЗастрахованныеЛицаСЭДО.ПоследниеСведения ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сведения.Дата УБЫВ";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтандартнаяОбработка = Ложь;
				Параметры.Вставить("Ключ", Выборка.Ссылка);
				ВыбраннаяФорма = "Документ.СведенияОЗастрахованномЛицеФСС.Форма.ФормаДокумента";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ОбработчикПечати    = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	МетаданныеДокумента = Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО;
	ПолноеИмяМенеджера  = МетаданныеДокумента.ПолноеИмя();
	Макеты              = МетаданныеДокумента.Макеты;
	
	Макет = Макеты.ПФ_MXL_СогласиеСреднегоЗаработкаСЭДО;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик     = ОбработчикПечати;
	КомандаПечати.МенеджерПечати = ПолноеИмяМенеджера;
	КомандаПечати.Идентификатор  = Макет.Имя;
	КомандаПечати.Представление  = Макет.Представление();
	КомандаПечати.Порядок        = 1;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивСсылок, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Менеджер = Документы.ЗапросСреднегоЗаработкаСЭДО;
	УправлениеПечатьюБЗК.Печать(МассивСсылок, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, Менеджер);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ЗарплатаКадрыПодсистемы

// Формирует печатную форму. Вызывается из УправлениеПечатьюБЗК.Печать.
//
// Параметры:
//   КонтекстПечати - Структура - См. УправлениеПечатьюБЗК.КонтекстПечати.
//
Процедура ПриФормированииПечатнойФормы(КонтекстПечати) Экспорт
	
	Макеты = Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО.Макеты;
	Если КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_СогласиеСреднегоЗаработкаСЭДО Тогда
		ПриПечатиСогласия(КонтекстПечати);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//  Параметры                  - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ОтзывСогласияНаОбработкуПерсональныхДанных.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
//  Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.СведенияОЗастрахованномЛицеФСС);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТекстXML(Документ) Экспорт
	МенеджерXML = Обработки.ПостроительXML.Создать();
	МенеджерXML.ФорматДат = "ДФ=yyyy-MM-dd";
	
	// Сообщение 320: Запрос страхователя о получении от Фонда сведений о заработной плате застрахованного лица.
	КореньXML = МенеджерXML.ДобавитьУзел(МенеджерXML.ДеревоXML, "insuredPersonSalaryRequest");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "", "urn:ru:fss:integration:types:proactive:salary:v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "common", "http://www.fss.ru/integration/types/common/v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "person", "http://www.fss.ru/integration/types/person/v02");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "org", "http://www.fss.ru/integration/types/organization/v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, КореньXML);
	ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, КореньXML);
	ВыгрузитьВидДоговора(Документ, МенеджерXML, КореньXML);
	ВыгрузитьПериодыСреднегоЗаработка(Документ, МенеджерXML, КореньXML);
	ВыгрузитьСогласиеЗастрахованногоЛица(Документ, МенеджерXML, КореньXML);
	ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, КореньXML);
	
	МенеджерXML.НачатьЗаписьВСтрокуXML(Ложь);
	СтрокаXML = МенеджерXML.СтрокаXML();
	Возврат СтрокаXML;
КонецФункции

Функция ТипСообщения() Экспорт
	Возврат 320;
КонецФункции

Процедура ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки) Экспорт
	
	ИменаРеквизитовСтроки = "Ссылка, Номер, Дата, ФизическоеЛицо, Организация";
	ИменаРеквизитов = "Ссылка, Номер, Дата, ДатаОтправки, ФизическоеЛицо, Организация, ХранилищеXML, ПометкаУдаления, Проведен";
	Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Документ = КлючИЗначение.Значение;
		// Добавление строки отправки и заполнение представления.
		СтрокаОтправки = ТаблицаОтправки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправки, Документ, ИменаРеквизитовСтроки);
		СтрокаОтправки.ТипСообщения = ТипСообщения();
		СтрокаОтправки.ТекстXML     = Документ.ХранилищеXML.Получить();
		СтрокаОтправки.Отправить    = Ложь;
		СтрокаОтправки.ШаблонОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось отправить Запрос сведений о среднем заработке сотрудника %1:%2';
				|en = 'Cannot send the request for information on average earnings of employee %1:%2'"),
			СтрокаОтправки.ФизическоеЛицо,
			"%1");
		// Проверки и обновление вторичных данных документа перед отправкой.
		Если Документ.ПометкаУдаления Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиУдален();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ помечен на удаление';
											|en = 'The document is marked for deletion'");
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
			Если НачалоДня(Документ.ДатаОтправки) <= ТекущаяДатаСеанса() Тогда
				Текст = НСтр("ru = 'Документ уже отправлен %1';
							|en = 'The document is already sent %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДЛФ=D"));
			Иначе
				Текст = НСтр("ru = 'Документ уже отправлен в %1';
							|en = 'The document is already sent to %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДФ=HH:mm"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Не Документ.Проведен Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ не проведен';
											|en = 'Document is not posted'");
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
			ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, "");
			Если Не ДокументОбъект.ОтключитьПроверкиПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Обновление вторичных данных документа если требуется.
		ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанные();
		СтрокаОтправки.Отправить = Истина;
		Если ЕстьИзменения Тогда
			Попытка
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПроведен();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаполнитьЗначенияСвойств(СтрокаОтправки, ДокументОбъект, ИменаРеквизитовСтроки);
				СтрокаОтправки.ТекстXML = ДокументОбъект.ХранилищеXML.Получить();
			Исключение
				СтрокаОтправки.Отправить = Ложь;
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
				СтрокаОтправки.ЗначениеРасшифровки = Документ.Ссылка;
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки) Экспорт
	// Действие не требуется.
КонецПроцедуры

// См. СЭДОФСС.ЗарегистрироватьНепосредственныйРезультатОтправкиДокумента.
Процедура ЗарегистрироватьРезультатОтправки(РезультатОтправки) Экспорт
	// Сначала записывается отправленный документ, т.к. его данные используются при обновлении регистров (кэшей).
	ДокументОбъект = РезультатОтправки.Ссылка.ПолучитьОбъект();
	ДокументОбъект.ДатаОтправки           = РезультатОтправки.ДатаОтправки;
	ДокументОбъект.ИдентификаторСообщения = РезультатОтправки.ИдентификаторСообщения;
	ДокументОбъект.Страхователь           = РезультатОтправки.Страхователь;
	ДокументОбъект.ГоловнаяОрганизация    = РезультатОтправки.ГоловнаяОрганизация;
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
	
	// Затем записывается транспортный регистр.
	РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО.ЗаполнитьПоДокументу(ДокументОбъект, РезультатОтправки);
	
	РезультатОтправки.Измененные.Добавить(ДокументОбъект.Ссылка);
КонецПроцедуры

// См. СЭДОФСС.ЗагрузитьРезультатДоставкиСообщенияСЭДО.
Процедура ЗагрузитьРезультатДоставкиСообщения320(Страхователь, Сообщение, Результат) Экспорт
	Таблица = РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО.НайтиПоИдентификаторуСообщения(
		Страхователь,
		Сообщение.Идентификатор,
		Результат);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		// Сначала записывается отправленный документ, т.к. его данные используются при обновлении регистров (кэшей).
		Если Не Сообщение.ДоставленоФонду Тогда
			ДокументОбъект = СтрокаТаблицы.ИсходящийДокумент.ПолучитьОбъект();
			ДокументОбъект.ДатаОтправки           = '00010101';
			ДокументОбъект.ИдентификаторСообщения = "";
			СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		// Затем записывается транспортный регистр,
		// который при записи запускает обновление остальных регистров, зависящих от состояния отправки.
		РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО.ЗаполнитьПоРезультатуДоставки(
			СтрокаТаблицы.ИсходящийДокумент,
			Сообщение);
		
		// Отметка для БРО и других потребителей что сообщение обработано.
		Результат.Обработано = Истина;
	КонецЦикла;
КонецПроцедуры

Функция ЗаголовокФормыОтправкиСведенийВФСС() Экспорт
	Возврат НСтр("ru = 'Отправка запросов сведений СФР о среднем заработке через СЭДО';
				|en = 'Send requests for Social Insurance Fund information on average earnings via EDI'");
КонецФункции

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты());
КонецФункции

// Определяет по данным документа признак фиксации.
//
// Параметры:
//   Документ - ДокументОбъект.СведенияОЗастрахованномЛицеФСС, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Не Документ.ПометкаУдаления И ЗначениеЗаполнено(Документ.ДатаОтправки);
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// Реквизиты организации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Организация";
	Группа.ИмяГруппы           = "Организация";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Страхователь");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховательНаименование");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховательНаименованиеДП");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РегистрационныйНомерСФР");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерСтрахователяФСС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИНН");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КПП");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховательЮридическийАдрес");
	
	// Ответственный за обработку персональных данных.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Ответственный";
	Группа.ИмяГруппы           = "Ответственный";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтветственныйФИО");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтветственныйФИОРП");
	
	// Отдельные кадровые данные.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения      = "ФизическоеЛицо";
	ГруппаКадровыеДанные.ИмяГруппы                = "КадровыеДанные";
	ГруппаКадровыеДанные.ФиксацияГруппы           = Ложь;
	ГруппаКадровыеДанные.ОтображатьПредупреждение = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "Сотрудник");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ДатаРождения");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "Пол");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СНИЛС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникАдрес");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникПаспорт");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ДатаНачалаДоговора");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ДатаОкончанияДоговора");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ТипДоговораРП");
	
	// Кадровые данные: Вид договора.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "ВидДоговора";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВидДоговораТрудовой", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВидДоговораГПХ", Ложь);
	
	// Кадровые данные: ФИО.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "ФИО";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникФамилия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникИмя");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникОтчество");
	
	// Период среднего заработка.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ПериодСреднегоЗаработка";
	Группа.ИмяГруппы           = "ПериодСреднегоЗаработка";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РасчетныйГод1");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РасчетныйГод2");
	
	// Дополнительный период, необходимый при замене лет.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ДополнительныйПериодСреднего";
	Группа.ИмяГруппы           = "ДополнительныйПериодСреднего";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДополнительныйГод1", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДополнительныйГод2", Ложь);
	
	// Документ основание.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ДокументОснование";
	Группа.ИмяГруппы           = "ДокументОснование";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РасчетБольничного", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДатаНачалаСобытия", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Числится", Ложь);
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

Процедура ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, ИмяРеквизита, ОтображатьПредупреждение = Неопределено)
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(
		ФиксируемыеРеквизиты,
		Группа,
		ИмяРеквизита,
		ОтображатьПредупреждение);
КонецПроцедуры

#КонецОбласти

#Область ТекстXML

Процедура ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, КореньXML)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	УзелСтрахователь = МенеджерXML.ДобавитьУзел(КореньXML, "insurerInfo");
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомерСФР) Тогда
		МенеджерXML.ДобавитьУзел(УзелСтрахователь, "regNumSFR", Документ.РегистрационныйНомерСФР);
	Иначе
		МенеджерXML.ДобавитьУзел(УзелСтрахователь, "regNum", Документ.НомерСтрахователяФСС);
	КонецЕсли;
	МенеджерXML.ДобавитьУзел(УзелСтрахователь, "emplINN", Документ.ИНН);
	МенеджерXML.ДобавитьУзел(УзелСтрахователь, "emplKPP", Документ.КПП, Истина, Ложь);
КонецПроцедуры

Процедура ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, КореньXML)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	УзелСотрудник = МенеджерXML.ДобавитьУзел(КореньXML, "insuredInfo");
	
	// СНИЛС.
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "snils", УбратьПробелы(Документ.СНИЛС));
	
	// ФИО.
	УзелФИО = МенеджерXML.ДобавитьУзел(УзелСотрудник, "fullName");
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.СотрудникИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.СотрудникФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.СотрудникОтчество, Истина);
	
	// Дата рождения.
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "birthDate", Документ.ДатаРождения);
	
	// Пол.
	Пол = ?(Документ.Пол = Перечисления.ПолФизическогоЛица.Женский, "FEMALE", "MALE");
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "gender", Пол);
КонецПроцедуры

Процедура ВыгрузитьВидДоговора(Документ, МенеджерXML, КореньXML)
	УзелВидДоговора = МенеджерXML.ДобавитьУзел(КореньXML, "contractsType", Неопределено);
	
	// Застрахованное лицо занято по трудовому договору.
	Если Документ.ВидДоговораТрудовой Тогда
		МенеджерXML.ДобавитьУзел(УзелВидДоговора, "contractType", "workerContract");
	КонецЕсли;
	
	// Застрахованное лицо занято по гражданско-правовому договору.
	Если Документ.ВидДоговораГПХ Тогда
		МенеджерXML.ДобавитьУзел(УзелВидДоговора, "contractType", "GPHcontract");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПериодыСреднегоЗаработка(Документ, МенеджерXML, КореньXML)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	// Сведения о запрашиваемом периоде.
	УзелПериод = МенеджерXML.ДобавитьУзел(КореньXML, "periodInfo");
	
	// Два предшествующих года.
	УзелДваГода = МенеджерXML.ДобавитьУзел(УзелПериод, "twoPrevYears");
	МенеджерXML.ДобавитьУзел(УзелДваГода, "year", Документ.РасчетныйГод1);
	МенеджерXML.ДобавитьУзел(УзелДваГода, "year", Документ.РасчетныйГод2);
	
	// Дополнительно запрашиваемый период, необходимый при замене лет.
	УзелГоды = МенеджерXML.ДобавитьУзел(УзелПериод, "additionalYears", Неопределено, Истина, Ложь);
	МенеджерXML.ДобавитьУзел(УзелГоды, "year", Документ.ДополнительныйГод1, Истина, Ложь);
	МенеджерXML.ДобавитьУзел(УзелГоды, "year", Документ.ДополнительныйГод2, Истина, Ложь);
КонецПроцедуры

Процедура ВыгрузитьСогласиеЗастрахованногоЛица(Документ, МенеджерXML, КореньXML)
	// Признак, определяющий получение согласия застрахованного лица о запросе суммы заработка страхователем.
	МенеджерXML.ДобавитьУзел(КореньXML, "agreementInsuredPerson", Документ.СотрудникПодписалСогласие);
КонецПроцедуры

Процедура ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, КореньXML)
	// Пример: МенеджерXML.ДобавитьУзел(Родитель, Имя, Значение, МожетОтсутствовать = Ложь, МожетБытьНеопределено = Ложь).
	Если Не Документ.РасчетБольничного Тогда
		Возврат;
	КонецЕсли;
	// Запрос выполняется для оплаты первых 3 дней временной нетрудоспособности за счет средств страхователя.
	УзелЭЛН = МенеджерXML.ДобавитьУзел(КореньXML, "eln3days", Неопределено, Истина, Ложь);
	Если Документ.Числится Тогда
		// Застрахованное лицо на момент направления запроса трудоустроено у страхователя.
		МенеджерXML.ДобавитьУзел(УзелЭЛН, "employed", Истина);
	Иначе
		// Застрахованное лицо на момент направления запроса уволено.
		УзелУволен = МенеджерXML.ДобавитьУзел(УзелЭЛН, "fired");
		// Дата начала страхового случая (дата начала периода нетрудоспособности по первому ЭЛН из цепочки ЭЛН).
		МенеджерXML.ДобавитьУзел(УзелУволен, "firstElnStartDate", Документ.ДатаНачалаСобытия);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Печать

// Процедура печати согласия на обработку персональных данных.
//
Процедура ПриПечатиСогласия(КонтекстПечати)
	ТабличныйДокумент = КонтекстПечати.ТабличныйДокумент;
	УправлениеПечатьюБЗК.УстановитьОтступ(ТабличныйДокумент, 0, 5, 0, 5);
	
	Запрос = ЗапросДляПечатиСогласий(КонтекстПечати.МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
		
		Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.Шапка);
		Параметры.ФИОСотрудника                            = ФИОСотрудника(Выборка);
		Параметры.НаименованиеСтрахователяВДательномПадеже = Выборка.СтраховательНаименованиеДП;
		Параметры.ОтветственныйВРодительномПадеже          = ОтветственныйВРодительномПадеже(Выборка);
		Параметры.ТипИПериодДоговораВРодительномПадеже     = ТипИПериодДоговораВРодительномПадеже(Выборка);
		Параметры.НаименованиеСтрахователя                 = Выборка.СтраховательНаименование;
		Параметры.ЮридическийАдресСтрахователя             = Выборка.СтраховательЮридическийАдрес;
		Параметры.ОтветственныйФИО                         = Выборка.ОтветственныйФИО;
		Параметры.АдресСотрудника                          = Выборка.СотрудникАдрес;
		Параметры.ПаспортСотрудника                        = Выборка.СотрудникПаспорт;
		
		Секция = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "Шапка");
		Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
		
		КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
		
		УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ФИОСотрудника(Выборка)
	Результат = СокрЛП(Выборка.СотрудникФамилия + " " + Выборка.СотрудникИмя + " " + Выборка.СотрудникОтчество);
	Если Результат = "" Тогда
		Результат = "________________________________________";
	КонецЕсли;
	Возврат Результат;
КонецФункции


Функция ОтветственныйВРодительномПадеже(Выборка)
	Результат = СокрЛП(Выборка.ОтветственныйФИОРП);
	Если Результат = "" Тогда
		Результат = "________________________________________";
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ТипИПериодДоговораВРодительномПадеже(Выборка)
	Результат = СокрЛП(Выборка.ТипДоговораРП);
	Если Результат = "" Тогда
		Результат = "________________________________________";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Выборка.ДатаНачалаДоговора) И Не ЗначениеЗаполнено(Выборка.ДатаОкончанияДоговора) Тогда
		Результат = Результат + "  " + НСтр("ru = 'с __________  по __________';
											|en = 'from __________  to __________'");
	Иначе
		Если ЗначениеЗаполнено(Выборка.ДатаНачалаДоговора) Тогда
			Результат = Результат + "  " + СтрШаблон(НСтр("ru = 'с %1';
															|en = 'from %1'"), Формат(Выборка.ДатаНачалаДоговора, "ДЛФ=D"));
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаОкончанияДоговора) Тогда
			Результат = Результат + "  " + СтрШаблон(НСтр("ru = 'с %1';
															|en = 'from %1'"), Формат(Выборка.ДатаОкончанияДоговора, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ЗапросДляПечатиСогласий(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапросыСреднего.Ссылка КАК Ссылка,
	|	ЗапросыСреднего.ДатаНачалаДоговора КАК ДатаНачалаДоговора,
	|	ЗапросыСреднего.ДатаОкончанияДоговора КАК ДатаОкончанияДоговора,
	|	ЗапросыСреднего.ОтветственныйФИО КАК ОтветственныйФИО,
	|	ЗапросыСреднего.ОтветственныйФИОРП КАК ОтветственныйФИОРП,
	|	ЗапросыСреднего.СотрудникАдрес КАК СотрудникАдрес,
	|	ЗапросыСреднего.СотрудникИмя КАК СотрудникИмя,
	|	ЗапросыСреднего.СотрудникОтчество КАК СотрудникОтчество,
	|	ЗапросыСреднего.СотрудникПаспорт КАК СотрудникПаспорт,
	|	ЗапросыСреднего.СотрудникПодписалСогласие КАК СотрудникПодписалСогласие,
	|	ЗапросыСреднего.СотрудникФамилия КАК СотрудникФамилия,
	|	ЗапросыСреднего.СтраховательНаименование КАК СтраховательНаименование,
	|	ЗапросыСреднего.СтраховательНаименованиеДП КАК СтраховательНаименованиеДП,
	|	ЗапросыСреднего.СтраховательЮридическийАдрес КАК СтраховательЮридическийАдрес,
	|	ЗапросыСреднего.ТипДоговораРП КАК ТипДоговораРП
	|ИЗ
	|	Документ.ЗапросСреднегоЗаработкаСЭДО КАК ЗапросыСреднего
	|ГДЕ
	|	ЗапросыСреднего.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос;
КонецФункции

#КонецОбласти

#Область СЭДО

Функция ТребуетсяВыгружатьАдресРегистрации(Документ) Экспорт
	Возврат ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСДом) Или ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСРО);
КонецФункции

Функция ИндексЗаполняетсяАвтоматически(Документ, ИмяПоляАдрес) Экспорт
	Возврат ЗначениеЗаполнено(Документ[ИмяПоляАдрес])
		И Не ФиксацияВторичныхДанныхВДокументах.РеквизитШапкиЗафиксирован(Документ, ИмяПоляАдрес + "Индекс");
КонецФункции

// См. ПриЗаполненииПараметровОтправки.
Функция ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключенияПриПроведении)
	СтрокаОтправки.Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Количество = СтрокаОтправки.Ошибки.Количество();
	Если Количество = 1 Тогда
		СтрокаОтправки.Результат = СтрокаОтправки.Ошибки[0].Текст;
	ИначеЕсли Количество > 1 Тогда
		СтрокаОтправки.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка заполнения;;%1 ошибки заполнения;%1 ошибок заполнения;';
				|en = ';%1 filling error;;%1 filling errors;%1 filling errors;'"),
			Количество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключенияПриПроведении) Тогда
		Если СтрокаОтправки.Результат = "" Тогда
			СтрокаОтправки.Результат = СтрШаблон(НСтр("ru = 'Ошибка проведения: %1';
														|en = 'Posting error: %1'"), ТекстИсключенияПриПроведении);
		Иначе
			СтрокаОтправки.Результат = СтрокаОтправки.Результат + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'И ошибка проведения: %1';
																									|en = 'And posting error: %1'"), ТекстИсключенияПриПроведении);
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// 1. При обновлении регистра ЗастрахованныеЛицаСЭДО не используются ссылки физлиц, сотрудников и организаций
	//    из документов СЗЛ. Вместо физлиц используются только СНИЛС, вместо организаций - страхователи.
	// 2. Если документ СЗЛ отправлен, то его данные важно оставить для истории.
	//    Чтобы было понятно почему в отправленном документе заполнились именно такие ФИО, дата рождения и т.п...
	// 3. Если документ не отправлен, то данные документа можно обновить для того, чтобы документ "прицепился"
	//    к актуальному сотруднику в списке сведений о застрахованных лицах.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗастрахованномЛице.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛице
	|ГДЕ
	|	СведенияОЗастрахованномЛице.СНИЛС = &НовыйСНИЛС
	|	И СведенияОЗастрахованномЛице.ФизическоеЛицо <> &ФизическоеЛицо
	|	И СведенияОЗастрахованномЛице.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОЗастрахованномЛице.Ссылка
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛице
	|ГДЕ
	|	СведенияОЗастрахованномЛице.ФизическоеЛицо = &ФизическоеЛицо
	|	И СведенияОЗастрахованномЛице.СНИЛС <> &НовыйСНИЛС
	|	И СведенияОЗастрахованномЛице.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОЗастрахованномЛице.СНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОЗастрахованномЛице.СНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаВыборки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = СтрокаВыборки.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.ОбновитьВторичныеДанные() Тогда
			СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, "БЗК", РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

// Находит вид на жительство или разрешение на проживание физического лица.
Функция НайтиРазрешениеНаПроживание(ФизическоеЛицо, ДатаНачалаСобытия) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК Вид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия,
	|	ВЫБОР
	|		КОГДА ВидыДокументовФизическихЛиц.КодМВД = ""12""
	|			ТОГДА 1
	|		КОГДА ВидыДокументовФизическихЛиц.КодМВД = ""15""
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаНачалаСобытия, Физлицо = &ФизическоеЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка
	|			И (ВидыДокументовФизическихЛиц.КодМВД = ""12""
	|				ИЛИ ВидыДокументовФизическихЛиц.КодМВД = ""15"")
	|ГДЕ
	|	(ДокументыФизическихЛицСрезПоследних.СрокДействия >= &МинимальныйСрокДействия
	|			ИЛИ ДокументыФизическихЛицСрезПоследних.СрокДействия = &ПустаяДата)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДатаВыдачи УБЫВ";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("МинимальныйСрокДействия", НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -2)));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Таблица.Добавить();
	КонецЕсли;
	
	Возврат Таблица[0];
КонецФункции

Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
	Возврат
	"Организация,
	|ГоловнаяОрганизация,
	|Сотрудник,
	|ДатаУвольнения,
	|ВидЗанятости,
	|" + ИменаПолейТребуемыхКадровыхДанныхФЛ();
КонецФункции

Функция ИменаПолейТребуемыхКадровыхДанныхФЛ() Экспорт
	Возврат
	"ФизическоеЛицо,
	|Фамилия,
	|Имя,
	|Отчество,
	|ДатаРождения,
	|Пол,
	|СтраховойНомерПФР,
	|ДокументПредставление,
	|АдресПоПропискеПредставление";
КонецФункции

Функция УбратьПробелы(Строка, УбратьТире = Истина)
	Возврат СтроковыеФункцииБЗККлиентСервер.УбратьПробелы(Строка, УбратьТире);
КонецФункции

Функция СоздатьДокументыПоДаннымДляЗаполнения(МассивДанныхДляЗаполнения) Экспорт
	СозданныеДокументы = Новый Массив;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Для Каждого ДанныеДляЗаполнения Из МассивДанныхДляЗаполнения Цикл
		ДокументОбъект = Документы.СведенияОЗастрахованномЛицеФСС.СоздатьДокумент();
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.Заполнить(ДанныеДляЗаполнения);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
	КонецЦикла;
	
	Возврат СозданныеДокументы;
КонецФункции

#КонецОбласти

#КонецЕсли