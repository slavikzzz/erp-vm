
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		// Заполнение ключевых реквизитов из параметров.
		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Параметры.Свойство("Сотрудник", Объект.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				УстановитьПривилегированныйРежим(Истина);
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Ложь, Объект.Сотрудник, "Организация", ТекущаяДатаСеанса());
				УстановитьПривилегированныйРежим(Ложь);
				Если КадровыеДанные <> Неопределено Тогда
					Объект.Организация = КадровыеДанные.Организация;
				КонецЕсли;
			Иначе
				Параметры.Свойство("Организация", Объект.Организация);
			КонецЕсли;
		КонецЕсли;
		// Заполнение ключевых реквизитов из умолчаний.
		ЗначенияДляЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		КонецЕсли;
		Если ЗначенияДляЗаполнения.Количество() > 0 Тогда
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		// Заполнение второстепенных реквизитов.
		ПриПолученииДанныхНаСервере();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Организация)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая")
		И Не ТолькоПросмотр Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Модифицированность = Истина;
			ОбновитьВторичныеДанныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	Если Параметры.ПоказатьОшибкиОтправки Тогда
		Объект.ОтключитьПроверкиПроведения = Ложь;
		ПроверитьЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Открыта = Не Отказ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_НастройкиПрямыхВыплатФСССотрудников"
		И Параметр.ФизическоеЛицо = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗапросСреднегоЗаработкаСЭДО"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПрямыхВыплатФССОрганизаций"
		И Параметр.ГоловнаяОрганизация = Объект.ГоловнаяОрганизация Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаКонтрагентов" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеКартыКонтрагентов"
		И Источник = Объект.КартаМИР Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	РежимЗаписи = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(ПараметрыЗаписи, "РежимЗаписи");
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбновитьВторичныеДанныеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СЭДОФСС.СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// До проверки объекта создаем его, дозаполняем и сами проверяем.
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Если Объект.ОтключитьПроверкиПроведения Тогда
			ПолучитьСообщенияПользователю(Истина);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьПанельСостоянияДокумента();
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ЭтотОбъект.Объект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗапросСреднегоЗаработкаСЭДО", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтраховательПриИзменении(Элемент)
	СтраховательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.Сотрудник = Неопределено;
	СотрудникПриИзменении(Элемент);
	ТекущийЭлемент = Элементы.ФизическоеЛицо;
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ФизическоеЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.ФизическоеЛицо = Неопределено;
	ФизическоеЛицоПриИзменении(Элемент);
	ТекущийЭлемент = Элементы.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура НомерЛННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Вставить("ОтборКД", Новый ОтборКомпоновкиДанных);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		ПараметрыФормы.Отбор.Вставить("ГоловнаяОрганизация", Объект.ГоловнаяОрганизация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		ПараметрыФормы.Отбор.Вставить("ФизическоеЛицо", Объект.ФизическоеЛицо);
	КонецЕсли;
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("РегистрСведений.СведенияОбЭЛН.ФормаСписка", ПараметрыФормы, Элементы.НомерЛН, , , , , РежимОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура НомерЛНОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Объект.НомерЛН = ВыбранноеЗначение.НомерЛисткаНетрудоспособности;
		Модифицированность = Истина;
		НомерЛНПриИзмененииНаСервере()
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СНИЛСПриИзменении(Элемент)
	СНИЛСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЧислитсяЧисломПриИзменении(Элемент)
	ЧислитсяЧисломПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	ДатаНачалаСобытияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПроведенИОтправленОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Измерения = Новый Структура("ИсходящийДокумент", Объект.Ссылка);
	СЭДОФССКлиент.ОткрытьКарточкуРегистра("РегистрацииЗапросовСреднегоЗаработкаСЭДО", Измерения);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

&НаКлиенте
Процедура Подключаемый_ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь)
	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтключитьПроверкиПроведения(Команда)
	Объект.ОтключитьПроверкиПроведения = Не Объект.ОтключитьПроверкиПроведения;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send a message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноОтправитьВФонд(Команда)
	Объект.ДатаОтправки = Неопределено;
	Объект.РегистрацияСведений = Неопределено;
	Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	СЭДОФССКлиент.ОтправитьДокументы(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства 
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксации = Документы.ЗапросСреднегоЗаработкаСЭДО.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы());
	
	ОписаниеЭлементовФормы = Новый Соответствие;
	ОписаниеПутиКРеквизитамОбъекта = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеПутиКРеквизитамОбъекта.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеПутиКРеквизитамОбъекта);
	КонецЦикла;
	
	ПараметрыФиксации.ОписаниеФормы.ОписаниеЭлементовФормы = ОписаниеЭлементовФормы;
	Возврат ПараметрыФиксации;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	СвойстваЭлемента = Новый Структура("ПутьКДанным");
	Для Каждого Элемент Из Элементы Цикл
		ЗаполнитьЗначенияСвойств(СвойстваЭлемента, Элемент);
		Если ЗначениеЗаполнено(СвойстваЭлемента.ПутьКДанным) Тогда
			Массив = СтрРазделить(СвойстваЭлемента.ПутьКДанным, ".", Ложь);
			БыстрыйПоискРеквизитов.Вставить(Элемент.Имя, Массив[Массив.ВГраница()]);
		КонецЕсли;
	КонецЦикла;
	БыстрыйПоискРеквизитов.Вставить(Элементы.ЧислитсяЧислом.Имя, "Числится");
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения(ОснованиеЗаполнения, ТекущаяСтрока = 0)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, ОснованиеЗаполнения, ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	Если ДокументОбъект.ОбновитьВторичныеДанные() Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(
				ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(ИмяЭлемента)
	Элемент = Элементы[ИмяЭлемента];
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(
		ЭтотОбъект,
		Элемент,
		ОписаниеЭлементов);
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.ЗапросСреднегоЗаработкаСЭДО.ОбъектЗафиксирован(Объект);
КонецФункции

#КонецОбласти

#Область СвертываемыеГруппы

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы) Экспорт
	Группы.Добавить(Элементы.ЗастрахованноеЛицоГруппа);
	Группы.Добавить(Элементы.ВидДоговораГруппа);
	Группы.Добавить(Элементы.ПериодСреднегоГруппа);
	Группы.Добавить(Элементы.ЭЛНГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
	Группы.Добавить(Элементы.ПечатнаяФормаСогласияГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп() Экспорт
	Возврат; // Действие не требуется.
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость) Экспорт
	
	Если Группа = Элементы.ЗастрахованноеЛицоГруппа Тогда
		ОбновитьЭлементыГруппыЗастрахованноеЛицо(Представление, Развернута);
		
	ИначеЕсли Группа = Элементы.ВидДоговораГруппа Тогда
		ОбновитьЭлементыГруппыВидДоговора(Заполнена, Представление, Развернута);
		
	ИначеЕсли Группа = Элементы.ПериодСреднегоГруппа Тогда
		ОбновитьЭлементыГруппыПериодСреднего(Представление);
		
	ИначеЕсли Группа = Элементы.ЭЛНГруппа Тогда
		ОбновитьЭлементыГруппыЭЛН(Представление, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		ОбновитьЭлементыГруппыСтрахователь(Представление, Развернута);
		
	ИначеЕсли Группа = Элементы.ПечатнаяФормаСогласияГруппа Тогда
		ОбновитьЭлементыГруппыПечатнаяФормаСогласия(Заполнена, Представление, Развернута);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвернутьРазвернутьГруппу(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	СЭДОФСС.СвернутьРазвернутьГруппу(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = "Объект")
	ПравоИзменения   = (Элементы.Найти("ФормаПровести") <> Неопределено);
	ПравоПолученияЭД = СЭДОФСС.ЕстьПравоПолучения();
	ПравоОтправкиЭД  = СЭДОФСС.ЕстьПравоОтправки();
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыФиксацииВторичныхДанных());
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(
		ЭтотОбъект,
		ФиксацияБыстрыйПоискРеквизитов());
	
	ОбновитьВторичныеДанныеНаСервере();
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	ТолькоПросмотр = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные()
	ОтключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные");
	ПодключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОбновитьВторичныеДанные()
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьВторичныеДанныеНаСервере()
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОбновитьВторичныеДанныеНаСервере();
		ОбновитьЭлементыФормы();
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Иначе
		Прочитать();
		Надпись = Элементы.Найти("ПредупреждениеОбновленияВторичныхДанных");
		Если Надпись <> Неопределено И Надпись.Видимость Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеИВключитьМодифицированность()
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	ОбновитьЭлементыФормы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	ДокументЗафиксирован = ОбъектЗафиксирован();
	ТолькоПросмотр = ДокументЗафиксирован;
	
	ОбновитьКнопкиФормы(ДокументЗафиксирован);
	
	ОбновитьПанельСостоянияДокумента();
	
	СЭДОФСС.ОбновитьСвертываемыеГруппы(ЭтотОбъект);
	
	ОбновитьЭлементыШапки();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиФормы(ДокументЗафиксирован)
	
	Элементы.ФормаОбновитьВторичныеДанные.Видимость = Не ДокументЗафиксирован;
	Элементы.ФормаОтменитьВсеИсправления.Видимость  = Не ДокументЗафиксирован;
	
	Если ПравоОтправкиЭД Тогда
		Отправлен = Не Объект.ПометкаУдаления И ЗначениеЗаполнено(Объект.ДатаОтправки);
		Элементы.ОтправитьВФонд.ТолькоВоВсехДействиях = Отправлен;
	КонецЕсли;
	
	Элементы.ФормаОтключитьПроверкиПроведения.Пометка = Объект.ОтключитьПроверкиПроведения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСостоянияДокумента()
	ПоложениеКнопкиЗакрыть     = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КнопкаПоУмолчанию          = Неопределено;
	ОтправленВФонд             = Ложь;
	Если Объект.ПометкаУдаления Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПомеченНаУдаление;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаЗаписать;
		КонецЕсли;
	ИначеЕсли Не Объект.Проведен Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументНеПроведен;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаПровести;
		КонецЕсли;
	Иначе
		СостояниеОтправки = СостояниеОтправки();
		ОтправленВФонд = СостояниеОтправки.ОтправленВФонд;
		Если СостояниеОтправки.МожноОтправить И ПравоОтправкиЭД Тогда
			КнопкаПоУмолчанию = Элементы.ОтправитьВФонд;
		КонецЕсли;
		Если СостояниеОтправки.ЕстьОшибки Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьОшибки;
			Элементы.НадписьДокументПроведенИЕстьОшибки.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения И КнопкаПоУмолчанию = Неопределено Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.ЕстьПредупреждения Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьПредупреждения;
			Элементы.НадписьДокументПроведенИЕстьПредупреждения.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения И КнопкаПоУмолчанию = Неопределено Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.МожноОтправить Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИНеОтправлен;
		Иначе
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИОтправлен;
			Элементы.НадписьДокументПроведенИОтправлен.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиЗакрыть = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			КнопкаПоУмолчанию = Элементы.ФормаЗакрыть;
		КонецЕсли;
	КонецЕсли;
	Если ПравоПолученияЭД Тогда
		Элементы.ПроверитьНаличиеОтвета.Видимость = ОтправленВФонд;
	КонецЕсли;
	Если ПравоОтправкиЭД Тогда
		Элементы.ПовторноОтправитьВФонд.Видимость = ОтправленВФонд И (Объект.ДатаОтправки + 86400*2 < ТекущаяДатаСеанса());
	КонецЕсли;
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.СтраницыСостоянияДокумента.ТекущаяСтраница = ТекущаяСтраница;
	Если ПравоИзменения Тогда
		Элементы.КнопкаСкопировать.ПоложениеВКоманднойПанели = ПоложениеКнопкиСкопировать;
	КонецЕсли;
	Элементы.ФормаЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиЗакрыть;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыШапки()
	//Элементы.ИНН.Видимость                           = Объект.Числится;
	//Элементы.КодСтраныГражданства.Видимость          = Объект.Числится;
	//Элементы.СотрудникТелефонПредставление.Видимость = Объект.Числится;
	//ЕстьДатаУвольнения = ЗначениеЗаполнено(Объект.ДатаУвольнения);
	//Элементы.ДатаУвольнения.Видимость = Не Объект.НеЧислилсяВОрганизации;
	//Элементы.ДатаУвольнения.ЦветФона = ?(ЕстьДатаУвольнения, ЦветаСтиля.ФонУправляющегоПоля, Новый Цвет);
	//Элементы.ДатаУвольнения.КнопкаОчистки = ЕстьДатаУвольнения;
	//
	//ТолькоСНИЛС = Не ЗначениеЗаполнено(Объект.Сотрудник)
	//	И Не ЗначениеЗаполнено(Объект.ФизическоеЛицо)
	//	И ЗначениеЗаполнено(Объект.СНИЛС)
	//	И Объект.НеЧислилсяВОрганизации;
	//
	//Элементы.Сотрудник.Видимость      = (ТипСотрудника = 0 И Не ТолькоСНИЛС);
	//Элементы.ФизическоеЛицо.Видимость = Не Элементы.Сотрудник.Видимость;
КонецПроцедуры

&НаСервере
Функция СостояниеОтправки()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РегистрацияСведенийОбъект = РеквизитФормыВЗначение("РегистрацияСведений");
		РегистрацияСведенийОбъект.ИсходящийДокумент = Объект.Ссылка;
		РегистрацияСведенийОбъект.Прочитать();
		ЗначениеВРеквизитФормы(РегистрацияСведенийОбъект, "РегистрацияСведений");
	КонецЕсли;
	
	ЕстьОшибки         = Ложь;
	ЕстьПредупреждения = Ложь;
	МожноОтправить     = Ложь;
	ОтправленВФонд     = Ложь;
	
	Состояние = РегистрацияСведений.Состояние;
	ВариантыСостояний = Перечисления.СостоянияДокументаСЭДОФСС;
	Если Состояние = ВариантыСостояний.ПодготовленКОтправке Или Не ЗначениеЗаполнено(Состояние) Тогда
		МожноОтправить = Истина;
		Представление  = Элементы.НадписьДокументПроведенИНеОтправлен.Заголовок;
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаПриОтправке Тогда
		ЕстьПредупреждения = Истина;
		МожноОтправить     = Истина;
		Представление      = НСтр("ru = 'При отправке <a href=""1"">возникла ошибка</a>';
									|en = 'An error occurred when sending <a href=""1"">'");
	ИначеЕсли Состояние = ВариантыСостояний.ОтправленОператору Тогда
		Представление  = НСтр("ru = '<a href=""1"">Отправлен оператору</a>';
								|en = '<a href=""1"">Sent to provider</a>'");
		ОтправленВФонд = Истина;
	ИначеЕсли Состояние = ВариантыСостояний.Отправлен Тогда
		Представление  = НСтр("ru = '<a href=""1"">Отправлен в Фонд</a>';
								|en = '<a href=""1"">Sent to SSF</a>'");
		ОтправленВФонд = Истина;
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаЛогическогоКонтроля Тогда
		ЕстьОшибки    = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">ошибки логического контроля</a>';
							|en = 'Not accepted, see <a href=""1"">logical control errors</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Принят Тогда
		Представление   = НСтр("ru = '<a href=""1"">Успешно принят ФСС</a>';
								|en = '<a href=""1"">Accepted by SSF</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.НеПринят Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">протокол</a>';
							|en = 'Not accepted, see <a href=""1"">protocol</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ПринятСЗамечаниями Тогда
		ЕстьПредупреждения = Истина;
		Представление      = НСтр("ru = 'Принят с замечаниями, см. <a href=""1"">несоответствия</a>';
									|en = 'Accepted with comments, see <a href=""1"">mismatches</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Несоответствие Тогда
		ЕстьПредупреждения = Истина;
		Представление      = НСтр("ru = 'Выявлены <a href=""1"">несоответствия</a>';
									|en = '<a href=""1"">Mismatches</a> are detected'");
	Иначе
		СостояниеСтрокой = Строка(Состояние);
		СостояниеСтрокой = НРег(Лев(СостояниеСтрокой, 1)) + Сред(СостояниеСтрокой, 2);
		Представление    = СтрШаблон(НСтр("ru = 'Проведен и <a href=""1"">%1</a>';
											|en = 'Posted and <a href=""1"">%1</a>'"), СостояниеСтрокой);
	КонецЕсли;
	
	Результат = Новый Структура("Состояние, ЗаголовокНадписи, ЕстьОшибки, ЕстьПредупреждения, МожноОтправить, ОтправленВФонд");
	Результат.Состояние          = Состояние;
	Результат.ЗаголовокНадписи   = СтроковыеФункции.ФорматированнаяСтрока(Представление);
	Результат.ЕстьОшибки         = ЕстьОшибки;
	Результат.ЕстьПредупреждения = ЕстьПредупреждения;
	Результат.МожноОтправить     = МожноОтправить;
	Результат.ОтправленВФонд     = ОтправленВФонд;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	// Физлицо и СНИЛС не очищаются, сотрудник будет найден по ним.
	Объект.Сотрудник = Неопределено;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Организация");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	УстановитьФункциональныеОпцииФормы();
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

&НаСервере
Процедура СтраховательПриИзмененииНаСервере()
	// Физлицо и СНИЛС не очищаются, сотрудник будет найден по ним.
	Объект.Организация = Неопределено;
	Объект.Сотрудник   = Неопределено;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Страхователь");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Страхователь");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСтрахователь(Представление, Развернута)
	Элементы.Страхователь.Видимость = СЭДОФСС.ИспользуетсяУчетСтрахователей()
		Или Объект.Страхователь <> Объект.Организация;
	Элементы.РегистрационныйНомерСФР.Видимость = ЗначениеЗаполнено(Объект.РегистрационныйНомерСФР)
		Или ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР(Объект.ДатаОтправки);
	Если Не Развернута Тогда
		Массив = Новый Массив;
		Если ЗначениеЗаполнено(Объект.СтраховательНаименование) Тогда
			Массив.Добавить(Объект.СтраховательНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.РегистрационныйНомерСФР) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'Регномер СФР %1';
											|en = 'Registration number in the Social Insurance Fund of Russia %1'"), Объект.РегистрационныйНомерСФР));
		ИначеЕсли ЗначениеЗаполнено(Объект.НомерСтрахователяФСС) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'Регномер по ОСС %1';
											|en = 'CSI registration number %1'"), Объект.НомерСтрахователяФСС));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИНН) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'ИНН %1';
											|en = 'TIN %1'"), Объект.ИНН));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.КПП) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'КПП %1';
											|en = 'KPP %1'"), Объект.КПП));
		КонецЕсли;
		Представление = СтрСоединить(Массив, ", ");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Сотрудник

&НаСервере
Процедура ОбновитьЭлементыГруппыЗастрахованноеЛицо(Представление, Развернута)
	Если Не Открыта Тогда
		Развернута = Истина;
	КонецЕсли;
	Если Не Развернута Тогда
		Массив = Новый Массив;
		Если ЗначениеЗаполнено(Объект.СотрудникФамилия) Тогда
			Массив.Добавить(СокрП(Объект.СотрудникФамилия + " " + Объект.СотрудникИмя + " " + Объект.СотрудникОтчество));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.СНИЛС) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
											|en = 'SNILS: %1'"), Объект.СНИЛС));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'Дата рождения: %1';
											|en = 'Date of birth: %1'"), Формат(Объект.ДатаРождения, "ДЛФ=D")));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Пол) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'Пол: %1';
											|en = 'Gender: %1'"), Объект.Пол));
		КонецЕсли;
		Представление = СтрСоединить(Массив, ", ");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыВидДоговора(Заполнена, Представление, Развернута)
	Если Не Открыта Тогда
		Развернута = Истина;
	КонецЕсли;
	Заполнена = Объект.ВидДоговораТрудовой Или Объект.ВидДоговораГПХ;
	Если Не Развернута И Заполнена Тогда
		Массив = Новый Массив;
		Если Объект.ВидДоговораТрудовой Тогда
			Массив.Добавить(НСтр("ru = 'Трудовой';
								|en = 'Employment'"));
		КонецЕсли;
		Если Объект.ВидДоговораГПХ Тогда
			Массив.Добавить(НСтр("ru = 'ГПХ';
								|en = 'Civil law'"));
		КонецЕсли;
		Представление = СтрСоединить(Массив, ", ");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыПериодСреднего(Представление)
	Массив = Новый Массив;
	Если Объект.РасчетныйГод1 > 0 Тогда
		Массив.Добавить(Формат(Объект.РасчетныйГод1, "ЧГ="));
	КонецЕсли;
	Если Объект.РасчетныйГод2 > 0 Тогда
		Массив.Добавить(Формат(Объект.РасчетныйГод2, "ЧГ="));
	КонецЕсли;
	Если Объект.ДополнительныйГод1 > 0 Тогда
		Массив.Добавить(Формат(Объект.ДополнительныйГод1, "ЧГ="));
	КонецЕсли;
	Если Объект.ДополнительныйГод2 > 0 Тогда
		Массив.Добавить(Формат(Объект.ДополнительныйГод2, "ЧГ="));
	КонецЕсли;
	Представление = СтрСоединить(Массив, ", ");
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	Объект.ФизическоеЛицо = Неопределено;
	Объект.СНИЛС          = Неопределено;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Сотрудник");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	Объект.Сотрудник = Неопределено;
	Объект.СНИЛС     = Неопределено;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ФизическоеЛицо");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

&НаСервере
Процедура СНИЛСПриИзмененииНаСервере()
	Объект.Сотрудник      = Неопределено;
	Объект.ФизическоеЛицо = Неопределено;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СНИЛС");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ЭЛН

&НаСервере
Процедура ОбновитьЭлементыГруппыЭЛН(Представление, Развернута, Видимость)
	ЧислитсяЧислом = Объект.Числится;
	Если Не Развернута Тогда
		Массив = Новый Массив;
		Если ЗначениеЗаполнено(Объект.НомерЛН) Тогда
			Массив.Добавить(Объект.НомерЛН);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
			Массив.Добавить(СтрШаблон(НСтр("ru = 'Дата начала нетрудоспособности: %1';
											|en = 'Start date of incapacity for work: %1'"), Формат(Объект.ДатаНачалаСобытия, "ДЛФ=D")));
		КонецЕсли;
		Если Объект.Числится Тогда
			Массив.Добавить(НСтр("ru = 'Сотрудник числится в организации';
								|en = 'The employee is listed in the company'"));
		Иначе
			Массив.Добавить(НСтр("ru = 'Сотрудник не числится в организации';
								|en = 'The employee is not listed in the company'"));
		КонецЕсли;
		Представление = СтрСоединить(Массив, ", ");
	КонецЕсли;
	Элементы.ЧислитсяЧислом.Видимость    = Объект.РасчетБольничного;
	Элементы.ДатаНачалаСобытия.Видимость = Объект.РасчетБольничного И Не Объект.Числится;
КонецПроцедуры

&НаСервере
Процедура НомерЛНПриИзмененииНаСервере()
	Объект.Организация = Неопределено;
	Объект.Сотрудник   = Неопределено;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ФизическоеЛицо");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

&НаСервере
Процедура ЧислитсяЧисломПриИзмененииНаСервере()
	Объект.Числится = ЧислитсяЧислом;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Числится");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаСобытияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ДатаНачалаСобытия");
	ОбновитьВторичныеДанныеИВключитьМодифицированность();
КонецПроцедуры

#КонецОбласти

#Область ПечатнаяФормаСогласия

&НаСервере
Процедура ОбновитьЭлементыГруппыПечатнаяФормаСогласия(Заполнена, Представление, Развернута)
	НезаполненныеПоля = Новый Массив;
	Если Не ЗначениеЗаполнено(Объект.ОтветственныйФИО)
		Или Не ЗначениеЗаполнено(Объект.ОтветственныйФИОРП) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru = 'ФИО';
										|en = 'Full name'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтраховательНаименованиеДП) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru = 'Страхователь';
										|en = 'Insurant'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СтраховательЮридическийАдрес) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru = 'Юридический адрес';
										|en = 'Legal address'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ТипДоговораРП) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru = 'Тип договора';
										|en = 'Contract type'"));
	КонецЕсли;
	Заполнена = (НезаполненныеПоля.Количество() = 0);
	Если Не Развернута Тогда
		Если Заполнена Тогда
			Представление = НСтр("ru = 'Данные заполнены';
								|en = 'Data is populated'");
		Иначе
			Представление = СтрШаблон(НСтр("ru = 'Не заполнены: %1';
											|en = 'Not filled: %1'"), СтрСоединить(НезаполненныеПоля, ", "));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Вложения = Новый Массив;
	
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

#КонецОбласти
