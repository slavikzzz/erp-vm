#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УведомлениеОКонтролируемойСделке) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УведомлениеОКонтролируемойСделке, "Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если Не СделкаСовершенаЧерезКомиссионера Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Комиссионер");
	КонецЕсли;
	
	ПроверитьПравильностьСсылокНаЛисты1БвЛистах1В(Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Если НЕ РедактироватьСуммыСделок Тогда
		Если ТипСделки = Перечисления.ТипыКонтролируемыхСделок.ПолученДоход Тогда 
			СуммаДоходов  = Сделки.Итог("Стоимость");
			СуммаРасходов = 0;
		ИначеЕсли ТипСделки = Перечисления.ТипыКонтролируемыхСделок.ОсуществленРасход Тогда 
			СуммаДоходов  = 0;
			СуммаРасходов = Сделки.Итог("Стоимость");
		КонецЕсли;
	КонецЕсли;
	
	Если Не УказыватьСведенияЦепочкиСозданияСтоимости Тогда
		Листы1В.Очистить();
		СвязьЛистов1Би1В.Очистить();
		Листы1Г.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает значение признака правильности ссылок на листы 1Б в листах 1В.
// 
// Параметры:
//  Отказ - Булево - Истина, если есть ошибки в правильности ссылок на листы 1Б в листах 1В.
Процедура ПроверитьПравильностьСсылокНаЛисты1БвЛистах1В(Отказ)
	
	// Проверяем, чтобы в листах 1В был указан предыдущий лист 1В с таким же листом 1Б, как и в текущем.
	
	Листы1Бдля1В = Новый Соответствие;
	Для Каждого Лист1В Из Листы1В Цикл
		Листы1Бдля1В.Вставить(Лист1В.ИдентификаторЛиста1В, Лист1В.ИдентификаторЛиста1Б);
	КонецЦикла;
	
	ИмяСписка = НСтр("ru = 'Листы 1В';
					|en = 'Листы 1В'");
	Для Каждого Лист1В Из Листы1В Цикл
		
		Если Не ЗначениеЗаполнено(Лист1В.ИдентификаторПредыдущегоЛиста1В) Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор1БПредыдущегоЛиста = Листы1Бдля1В.Получить(Лист1В.ИдентификаторПредыдущегоЛиста1В); 
		Если Идентификатор1БПредыдущегоЛиста <> Лист1В.ИдентификаторЛиста1Б Тогда
			
			ДополнительныйТекст = НСтр("ru = 'Связанные листы 1В относятся к разным листам 1Б';
										|en = 'Связанные листы 1В относятся к разным листам 1Б'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'Лист 1Б';
																												|en = 'Лист 1Б'"),
				Лист1В.НомерСтроки, ИмяСписка, ДополнительныйТекст);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Листы1В", Лист1В.НомерСтроки, "Лист1Б");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли