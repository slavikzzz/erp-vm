
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для каждого РеквизитФормы Из ПолучитьРеквизиты() Цикл
		ИмяРеквизита = РеквизитФормы.Имя;
		Если Параметры.Свойство(ИмяРеквизита) Тогда
			ЭтотОбъект[ИмяРеквизита] = Параметры[ИмяРеквизита]; 
		КонецЕсли;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Параметры.Налог) Тогда
		Налог = Параметры.Налог;
		ЭтоТранспортныйНалог = (Параметры.Налог = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог);
		ЭтоНалогНаИмущество = (Параметры.Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество);
		ЭтоЗемельныйНалог = (Параметры.Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог);
	КонецЕсли;

	Расчет.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицаРасчет));
	УдалитьИзВременногоХранилища(Параметры.АдресТаблицаРасчет);
	РасчетФНС.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицаРасчетФНС));
	УдалитьИзВременногоХранилища(Параметры.АдресТаблицаРасчетФНС);

	// При ручной сверке по умолчанию устанавливаем вариант "Расчеты совпадают". То есть, считаем,
	// что пользователь сверил расчеты и либо согласится, либо же специально выберет другой вариант.
	Если Не ЗагруженРасчетФНС
		 И ОбъектЕстьВРасчете 
		 И ПравильныйРасчет = 0 Тогда // еще не установлено, какой расчет верный
		ПравильныйРасчет = 1;
	КонецЕсли;
	
	ПараметрыСверки = Новый Структура;
	ПараметрыСверки.Вставить("Цвета", Новый Структура);
	ПараметрыСверки.Цвета.Вставить("ЦветНадписиРасчетыСошлись", ЦветаСтиля.РезультатУспехЦвет);
	ПараметрыСверки.Цвета.Вставить("ЦветФонаВыбранногоВарианта", ЦветаСтиля.ФонПодписьВерна);
	ПараметрыСверки.Цвета.Вставить("ЦветРасхождений", ЦветаСтиля.ЦветТекстаНеУдачнаяПроверкаМЧД);
	ПараметрыСверки.Цвета.Вставить("ЦветПоУмолчанию", Новый Цвет);
	ПараметрыСверки.Цвета.Вставить("ЦветФонаФормы", ЦветаСтиля.ЦветФонаФормы);

	ПараметрыСверки.Вставить("ПоляСтрокРасчета",
		СверкаСФНСПоИмущественнымНалогамФормы.ПоляСтрокРасчета(Налог, НалоговыйПериод)); 
		
	// Если известно, что расчеты не сошлись (расчет ФНС загружен из сообщения),
	// но еще не установлено, какой правильный, определим, где расхождения.
	// Если указано, какой расчет верный, то расхождения уже ранее были записаны в строках расчетов.
	Если ЗагруженРасчетФНС И ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 0 Тогда
		СравнитьРасчеты();
	КонецЕсли;

	ПодготовитьФормуНаСервере();
	
	СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если ЗагруженРасчетФНС Или Не ОбъектЕстьВРасчетеФНС Или ОбъектЕстьВРасчетеФНС И ПравильныйРасчет <> 3 Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СуммаНалогаФНС");
	ИначеЕсли ОбъектЕстьВРасчете И СуммаНалогаФНС = СуммаНалога И СуммаНалогаФНС <> 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сумма налога в ФНС должна отличаться от суммы в программе';
				|en = 'The FTS tax amount must be different from the application amount'")
			,
			,
			"СуммаНалогаФНС",
			,
			Отказ);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПравильныйРасчет) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Выберите правильный вариант';
				|en = 'Select a correct option'")
			,
			,
			"ПравильныйРасчет",
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РасчетВПрограммеПравильныйРасчетПриИзменении(Элемент)
	НастроитьЭлементыСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасчетФНСПравильныйРасчетПриИзменении(Элемент)
	НастроитьЭлементыСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасчетВПрограммеОбъектОтсутствуетПриИзменении(Элемент)
	НастроитьЭлементыСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасчетФНСОбъектОтсутствуетПриИзменении(Элемент)
	НастроитьЭлементыСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСверкаРасчетыСовпадаютПриИзменении(Элемент)
	НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСверкаОшибкаФНСПриИзменении(Элемент)
	НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСверкаОшибкаВПрограммеПриИзменении(Элемент)
	НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСверкаОшибкаВПрограммеОбъектОтсутствуетПриИзменении(Элемент)
	НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЕстьВРасчетеФНСОшибкаФНСПриИзменении(Элемент)
	НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЕстьВРасчетеФНСОшибкаВПрограммеПриИзменении(Элемент)
	НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолеРасчетаФНСПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйВычетФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоляВПравеЧислительФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоляВПравеЗнаменательФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяСтавкаФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалогаФНСПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ПоляРасхождений) И СуммаНалога <> СуммаНалогаФНС Тогда
		ПоляРасхождений = "СуммаНалога";
	ИначеЕсли ПоляРасхождений = "СуммаНалога" И СуммаНалога <> СуммаНалогаФНС Тогда
		ПоляРасхождений = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПовышающийКоэффициентФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаЛьготФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалогаФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоМесяцевВладенияФНС0ПриИзменении(Элемент)
	ПриИзмененииПолейРасчетаФНС(Элемент);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуРасчета();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	ИмяТекущегоЭлемента = ТекущийЭлемент.Имя;
	ИдентификаторСтрокиТаблицы = Число(СтрЗаменить(ИмяТекущегоЭлемента, "УдалитьСтроку", ""));
	УдалитьСтрокуРасчета(ИдентификаторСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	НастроитьФормуПриПереходеНаШаг(2);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	НастроитьФормуПриПереходеНаШаг(1);
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	ОтключитьОбработчикОжидания("СравнитьРасчетыИПодсветитьРасхождения");
	ПодключенОбработчикОжидания = Ложь;
	СравнитьРасчеты();
	
	ОповеститьОВыборе(РезультатСравнения());

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриИзмененииПолейРасчетаФНС(Элемент)
	
	РассчитатьСуммуНалогаФНС(ЭтотОбъект);
	СравнитьРасчетыОтложенно();
	
	Если СтрНачинаетсяС(Элемент.Имя, "КоличествоМесяцевВладенияФНС") Тогда
		НастроитьЭлементыВыбораПричиныСнятияТССУчета(ЭтотОбъект, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	// ОБЩЕЕ ЗАМЕЧАНИЕ: большинство настроек в этой процедуре выполняются однократно при создании формы.
	// Поэтому в качестве базового состояния формы берем то, как оно установлено в конфигураторе.
	// Далее все изменения здесь устанавливаются относительно базового состояния.
	
	// НАИМЕНОВАНИЕ ОБЪЕКТА
	ТекстНаименования = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.НаименованиеОбъекта) Тогда
		ТекстНаименования.Добавить(СокрЛП(Параметры.НаименованиеОбъекта));
	КонецЕсли;
	
	Если ЭтоТранспортныйНалог Тогда
		Если ЗначениеЗаполнено(Параметры.РегистрационныйЗнак) Тогда
			ТекстНаименования.Добавить(СокрЛП(Параметры.РегистрационныйЗнак));
		КонецЕсли;
	ИначеЕсли ЭтоЗемельныйНалог Или ЭтоНалогНаИмущество Тогда
		Если ЗначениеЗаполнено(Параметры.КадастровыйНомер) Тогда
			ТекстНаименования.Добавить(СтрШаблон(Нстр("ru = 'кадастровый номер %1';
														|en = 'cadastral number %1'"),
				СокрЛП(Параметры.КадастровыйНомер)));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КодПоОКТМО) Тогда
		ТекстНаименования.Добавить(СтрШаблон(Нстр("ru = 'ОКТМО %1';
													|en = 'Municipal territory classifier %1'"),
			СокрЛП(Параметры.КодПоОКТМО)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КодНалоговогоОргана) Тогда
		ТекстНаименования.Добавить(СтрШаблон(Нстр("ru = 'код налогового органа %1';
													|en = 'tax authority code %1'"),
			СокрЛП(Параметры.КодНалоговогоОргана)));
	КонецЕсли;
	
	Элементы.НаименованиеОбъекта.Заголовок = СтрСоединить(ТекстНаименования, "; ");
	
	// ЗАГОЛОВОК
	// Описание того, что требуется от пользователя. Настраивается ниже в зависимости от вида сверки 
	// (ручная или автоматическая) и обнаруженных расхождений
	
	// КОЛОНКИ РАСЧЕТА
	// Настраиваем колонки расчета по виду налога, т.к. состав колонок и их наименования для каждого налога
	// немного меняется. Здесь настраиваем колонки и для расчета программы, и для расчета ФНС.
	// Но при этом далее отдельные блоки формы могут быть скрыты (например, весь расчет ФНС).
	ШиринаПодсказокОбъектОтсутствует = 86; // по умолчанию максимальная ширина (для земельного налога до 2022 года),
	                                       // ниже ширина надписей подстраивается под фактическое количество колонок расчета
	Если ЭтоТранспортныйНалог Тогда
		// Нет колонки Доля в праве
		Элементы.ГруппаЗаголовокДоляВПраве.Видимость = Ложь;
		Элементы.ГруппаДоляВПраве.Видимость = Ложь;
		Элементы.ГруппаДоляВПравеФНС.Видимость = Ложь;
		// Нет колонки Налоговый вычет
		Элементы.ГруппаЗаголовокНалоговыйВычет.Видимость = Ложь;
		Элементы.ГруппаНалоговыйВычет.Видимость = Ложь;
		Элементы.ГруппаНалоговыйВычетФНС.Видимость = Ложь;
		ШиринаПодсказокОбъектОтсутствует = 65;
	ИначеЕсли ЭтоНалогНаИмущество Тогда
		// Наименование колонки: Налоговая база (руб.)
		Элементы.ЗаголовокНалоговаяБаза.Заголовок = НСтр("ru = 'Налоговая база
			|(руб.)';
			|en = 'Tax base
			|(rub.)'");
		// Наименование колонки: Налоговая ставка (%)
		Элементы.ЗаголовокНалоговаяСтавка.Заголовок = НСтр("ru = 'Налоговая
			|ставка
			|(%)';
			|en = 'Tax
			|rate
			|(%)'");
		// Нет колонки Налоговый вычет
		Элементы.ГруппаЗаголовокНалоговыйВычет.Видимость = Ложь;
		Элементы.ГруппаНалоговыйВычет.Видимость = Ложь;
		Элементы.ГруппаНалоговыйВычетФНС.Видимость = Ложь;
		// Нет колонки Повышающий коэффициент
		Элементы.ГруппаЗаголовокПовышающийКоэффициент.Видимость = Ложь;
		Элементы.ГруппаПовышающийКоэффициент.Видимость = Ложь;
		Элементы.ГруппаПовышающийКоэффициентФНС.Видимость = Ложь;
		ШиринаПодсказокОбъектОтсутствует = 68;
	ИначеЕсли ЭтоЗемельныйНалог Тогда
		// Наименование колонки: Налоговая база (руб.)
		Элементы.ЗаголовокНалоговаяБаза.Заголовок = НСтр("ru = 'Налоговая база
			|(руб.)';
			|en = 'Tax base
			|(rub.)'");
		// Наименование колонки: Налоговая ставка (%)
		Элементы.ЗаголовокНалоговаяСтавка.Заголовок = НСтр("ru = 'Налоговая
			|ставка
			|(%)';
			|en = 'Tax
			|rate
			|(%)'");
		Если НалоговыйПериод >= '20220101' Тогда
			// Нет колонки Налоговый вычет
			Элементы.ГруппаЗаголовокНалоговыйВычет.Видимость = Ложь;
			Элементы.ГруппаНалоговыйВычет.Видимость = Ложь;
			Элементы.ГруппаНалоговыйВычетФНС.Видимость = Ложь;
			ШиринаПодсказокОбъектОтсутствует = 77;
		КонецЕсли;
	КонецЕсли;
	
	// Общие настройки колонок.
	// Количество месяцев владения
	Элементы.ЗаголовокКоличествоМесяцевВладения.Заголовок = СтрШаблон(
		Нстр("ru = 'Количество
			|месяцев
			|владения в
			|%1 году/12';
			|en = 'Number of
			|ownership
			|months in
			|%1/12'"), 
		Формат(НалоговыйПериод, "ДФ=yyyy"));

	Элементы.РасчетВПрограммеОбъектОтсутствуетПодсказка.Ширина = ШиринаПодсказокОбъектОтсутствует;
	Элементы.РасчетФНСОбъектОтсутствуетПодсказка.Ширина = ШиринаПодсказокОбъектОтсутствует;

	// АВТОМАТИЧЕСКАЯ ИЛИ РУЧНАЯ СВЕРКА
	Если ЗагруженРасчетФНС Тогда
		// АВТОМАТИЧЕСКАЯ СВЕРКА
		Если ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС И ПравильныйРасчет <> 1 Тогда
			// Объект есть в обоих расчетах, но при этом расчеты не сошлись - нужно выбрать верный.
			// Оставляем форму в базовом варианте, но только расчет ФНС не редактируется.
			Элементы.ГруппаРасчетФНСПоля.ТолькоПросмотр = Истина;
		ИначеЕсли ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 1 Тогда
			// Расчеты совпали.
			// Показываем только расчет в программе, выбирать нечего.
			Элементы.НадписьЗаголовок.Заголовок = Нстр("ru = 'Расчет совпадает:';
														|en = 'Calculations match:'");
			Элементы.НадписьЗаголовок.ЦветТекста = ПараметрыСверки.Цвета.ЦветНадписиРасчетыСошлись;
			Элементы.ГруппаРасчетВПрограммеЗаголовок.Видимость = Ложь;
			Элементы.ГруппаРасчетФНС.Видимость = Ложь;
		ИначеЕсли ОбъектЕстьВРасчете Тогда
			// Объекта нет в расчете ФНС.
			// Нужно выбрать: расчет как в программе или же вообще налог не начисляется.
			Элементы.НадписьЗаголовок.Заголовок = 
				Нстр("ru = 'Объекта нет в расчете ФНС. Укажите, верно ли, что программа посчитала по нему налог:';
					|en = 'The object is not included in the FTS calculation. Specify whether the application calculated the tax correctly:'");
			Элементы.РасчетВПрограммеПравильныйРасчет.СписокВыбора.Очистить();
			Элементы.РасчетВПрограммеПравильныйРасчет.СписокВыбора.Добавить(
				2, // правильно в программе
				СтрШаблон(Нстр("ru = 'Да, начисляется налог за %1 год по указанному месту нахождения';
								|en = 'Yes, the tax is charged for %1 at the specified location'"), 
					Формат(НалоговыйПериод, "ДФ=yyyy")));
			Элементы.ГруппаРасчетФНС.Видимость = Ложь;
			Элементы.ГруппаРасчетФНСОбъектОтсутствует.Видимость = Истина;
			ТекстПодсказки = Элементы.РасчетФНСОбъектОтсутствуетПодсказка.Заголовок;
			Элементы.РасчетФНСОбъектОтсутствуетПодсказка.Заголовок = СтрЗаменить(
				ТекстПодсказки,
				"2022",
				Формат(НалоговыйПериод, "ДФ=yyyy"));
		ИначеЕсли ОбъектЕстьВРасчетеФНС Тогда
			// Объекта нет в расчете программы.
			// Нужно выбрать: расчет как в ФНС или же вообще налог не начисляется.
			Элементы.НадписьЗаголовок.Заголовок = 
				Нстр("ru = 'Объекта нет в расчете программы. Укажите, верно ли, что ФНС посчитала по нему налог:';
					|en = 'The object is not included in the application calculation. Specify whether the FTS calculated the tax correctly:'");
			Элементы.ГруппаРасчетВПрограмме.Видимость = Ложь;
			Элементы.РасчетФНСПравильныйРасчет.СписокВыбора.Очистить();
			Элементы.РасчетФНСПравильныйРасчет.СписокВыбора.Добавить(
				3, // правильно в ФНС
				СтрШаблон(Нстр("ru = 'Да, начисляется налог за %1 год по указанному месту нахождения';
								|en = 'Yes, the tax is charged for %1 at the specified location'"), 
					Формат(НалоговыйПериод, "ДФ=yyyy")));
			Элементы.ГруппаРасчетФНСПоля.ТолькоПросмотр = Истина; // расчет ФНС не редактируется
			Элементы.ГруппаРасчетВПрограммеОбъектОтсутствует.Видимость = Истина;
			ТекстПодсказки = Элементы.РасчетВПрограммеОбъектОтсутствует.Заголовок;
			Элементы.РасчетВПрограммеОбъектОтсутствует.Заголовок = СтрЗаменить(
				ТекстПодсказки,
				"2022",
				Формат(НалоговыйПериод, "ДФ=yyyy"));
		КонецЕсли;
		
		Если Элементы.ГруппаРасчетВПрограмме.Видимость Тогда
			ВывестиСтрокиРасчета("ВПрограмме");
			НастроитьВидимостьЭлементовСтрокРасчета("ВПрограмме");
		КонецЕсли;
		
		Если Элементы.ГруппаРасчетФНС.Видимость Тогда
			// Расчет ФНС загружен из сообщения - уберем кнопку выбора в поле повышающего коэффициента 
			Элементы.ПовышающийКоэффициентФНС0.РежимВыбораИзСписка = Ложь;
			Элементы.ПовышающийКоэффициентФНС0.Ширина = 6;

			ВывестиСтрокиРасчета("ФНС");
			НастроитьВидимостьЭлементовСтрокРасчета("ФНС");
		КонецЕсли;
		
		НастроитьЭлементыСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);
		
	Иначе
		// РУЧНАЯ СВЕРКА
		Элементы.ГруппаДобавитьСтроку.Видимость = Истина; // имеет смысл при переходе на второй шаг (см. НастроитьФормуПриПереходеНаШаг())
		Элементы.ГруппаРучнаяСверка.Видимость = Истина;
		
		Если ОбъектЕстьВРасчете Тогда
			// Объект есть в расчете программы.
			// Нужно выбрать: расчеты совпадают или в ФНС другой расчет или же вообще налог не должен начисляться.
			Элементы.НадписьЗаголовок.Заголовок = Нстр("ru = 'Расчет налога в программе:';
														|en = 'Tax calculation in the application:'");
			Элементы.ГруппаРасчетВПрограммеЗаголовок.Видимость = Ложь;
			Элементы.ГруппаРасчетФНС.Видимость = Ложь;
			ТекстПодсказки = Элементы.ОбъектЕстьВРасчетеФНСОшибкаФНСРасширеннаяПодсказка.Заголовок;
			Элементы.ОбъектЕстьВРасчетеФНСОшибкаФНСРасширеннаяПодсказка.Заголовок = СтрЗаменить(
				ТекстПодсказки,
				"2022",
				Формат(НалоговыйПериод, "ДФ=yyyy"));
			ТекстПодсказки = Элементы.ОбъектЕстьВРасчетеФНСОшибкаВПрограммеРасширеннаяПодсказка.Заголовок;
			Элементы.ОбъектЕстьВРасчетеФНСОшибкаВПрограммеРасширеннаяПодсказка.Заголовок = СтрЗаменить(
				ТекстПодсказки,
				"2022",
				Формат(НалоговыйПериод, "ДФ=yyyy"));
		Иначе
			// Объекта нет в расчете программы, но есть в расчете ФНС (добавлен пользователем вручную).
			Элементы.НадписьЗаголовок.Заголовок = 
				Нстр("ru = 'Объекта нет в расчете программы. Укажите, верно ли, что ФНС посчитала по нему налог:';
					|en = 'The object is not included in the application calculation. Specify whether the FTS calculated the tax correctly:'");
			Элементы.ГруппаРасчетЗаголовки.Видимость = Ложь;
			Элементы.ГруппаРасчетВПрограмме.Видимость = Ложь;
			Элементы.ГруппаРасчетФНС.Видимость = Ложь;
			Элементы.НадписьЗаголовокРучнаяСверка.Видимость = Ложь;
			Элементы.РучнаяСверкаРасчетыСовпадают.Видимость = Ложь;
			Элементы.РучнаяСверкаОшибкаФНС.Видимость = Ложь;
			Элементы.ГруппаРучнаяСверкаОшибкаФНСПодробно.Видимость = Ложь;
			Элементы.РучнаяСверкаОшибкаВПрограмме.СписокВыбора.Очистить();
			Элементы.РучнаяСверкаОшибкаВПрограмме.СписокВыбора.Добавить(
				3, // правильно в ФНС
				СтрШаблон(Нстр("ru = 'Да, начисляется налог за %1 год по указанному месту нахождения';
								|en = 'Yes, the tax is charged for %1 at the specified location'"), 
					Формат(НалоговыйПериод, "ДФ=yyyy")));
			Элементы.ОбъектЕстьВРасчетеФНСОшибкаВПрограмме.Видимость = Ложь;
			Элементы.ОтступРучнаяСверкаОшибкаВПрограммеСуммаФНС.Видимость = Ложь;
			Элементы.РучнаяСверкаОшибкаВПрограммеОбъектОтсутствует.Видимость = Истина;
			ТекстПодсказки = Элементы.РучнаяСверкаОшибкаВПрограммеОбъектОтсутствуетРасширеннаяПодсказка.Заголовок;
			Элементы.РучнаяСверкаОшибкаВПрограммеОбъектОтсутствуетРасширеннаяПодсказка.Заголовок = СтрЗаменить(
				ТекстПодсказки,
				"2022",
				Формат(НалоговыйПериод, "ДФ=yyyy"));
		КонецЕсли;
		
		ЗаполнитьСписокВыбораПовышающегоКоэффициента();
	
		Если Элементы.ГруппаРасчетВПрограмме.Видимость Тогда
			ВывестиСтрокиРасчета("ВПрограмме");
			НастроитьВидимостьЭлементовСтрокРасчета("ВПрограмме");
		КонецЕсли;

		НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыСверкиПриВыбореПравильногоРасчета(Форма)

	// Настройка элементов сверки, когда выбирается правильный вариант при автоматизированной сверке
	// (когда расчет ФНС загружен из сообщения и программа сравнила расчеты)
	Элементы = Форма.Элементы;
	Цвета = Форма.ПараметрыСверки.Цвета;
	ОбъектЕстьВРасчете = Форма.ОбъектЕстьВРасчете;
	ОбъектЕстьВРасчетеФНС = Форма.ОбъектЕстьВРасчетеФНС;
	ПравильныйРасчет = Форма.ПравильныйРасчет;
	
	// Если расчет загружен из сообщения ФНС, то вариант, выбранный как правильный,
	// подсвечивается зеленым. С остальных видимых вариантов подсветка снимается.
	Если ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 2 Тогда
		Элементы.ГруппаРасчетВПрограмме.ЦветФона = Цвета.ЦветФонаВыбранногоВарианта;
		Элементы.ГруппаРасчетФНС.ЦветФона = Цвета.ЦветФонаФормы;
	ИначеЕсли ОбъектЕстьВРасчете И Не ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 2 Тогда
		Элементы.ГруппаРасчетВПрограмме.ЦветФона = Цвета.ЦветФонаВыбранногоВарианта;
		Элементы.ГруппаРасчетФНСОбъектОтсутствует.ЦветФона = Цвета.ЦветФонаФормы;
	ИначеЕсли Не ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 2 Тогда
		Элементы.ГруппаРасчетФНС.ЦветФона = Цвета.ЦветФонаФормы;
		Элементы.ГруппаРасчетВПрограммеОбъектОтсутствует.ЦветФона = Цвета.ЦветФонаВыбранногоВарианта;
	ИначеЕсли ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 3 Тогда
		Элементы.ГруппаРасчетВПрограмме.ЦветФона = Цвета.ЦветФонаФормы;
		Элементы.ГруппаРасчетФНС.ЦветФона = Цвета.ЦветФонаВыбранногоВарианта;
	ИначеЕсли ОбъектЕстьВРасчете И Не ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 3 Тогда
		Элементы.ГруппаРасчетВПрограмме.ЦветФона = Цвета.ЦветФонаФормы;
		Элементы.ГруппаРасчетФНСОбъектОтсутствует.ЦветФона = Цвета.ЦветФонаВыбранногоВарианта;
	ИначеЕсли Не ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС И ПравильныйРасчет = 3 Тогда
		Элементы.ГруппаРасчетФНС.ЦветФона = Цвета.ЦветФонаВыбранногоВарианта;
		Элементы.ГруппаРасчетВПрограммеОбъектОтсутствует.ЦветФона = Цвета.ЦветФонаФормы;
	КонецЕсли;

	Если ОбъектЕстьВРасчете И ОбъектЕстьВРасчетеФНС Тогда
		ПодсветитьЭлементыРасчетаСРасхождениями(Форма, "ВПрограмме");
		ПодсветитьЭлементыРасчетаСРасхождениями(Форма, "ФНС");
	КонецЕсли;

	НастроитьЭлементыВыбораПричиныСнятияТССУчета(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыРучнойСверкиПриВыбореПравильногоРасчета(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.ГруппаРучнаяСверкаОшибкаФНСПодробно.Видимость = Форма.ОбъектЕстьВРасчете И (Форма.ПравильныйРасчет = 2);
	Элементы.ГруппаРучнаяСверкаОшибкаВПрограммеПодробно.Видимость = (Форма.ПравильныйРасчет = 3);
	Элементы.СуммаНалогаФНС.Видимость = Форма.ОбъектЕстьВРасчетеФНС И (Форма.ПравильныйРасчет = 3);

	НастроитьЭлементыВыбораПричиныСнятияТССУчета(Форма);
	
	// Если объект есть в обоих расчетах, есть расхождения, а пользователь указал, что расчет в программе верный,
	// то на 2-м шаге нужно ввести данные из расчета программы
	ТребуетсяВторойШаг = Форма.ОбъектЕстьВРасчете И Форма.ОбъектЕстьВРасчетеФНС И (Форма.ПравильныйРасчет = 2);
	
	Элементы.Далее.Видимость = ТребуетсяВторойШаг;
	Элементы.Далее.КнопкаПоУмолчанию = ТребуетсяВторойШаг;
	Элементы.ОК.Видимость = Не ТребуетсяВторойШаг;
	Элементы.ОК.КнопкаПоУмолчанию = Не ТребуетсяВторойШаг;

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриПереходеНаШаг(НомерШага)
	
	// Перейти на шаг 2 можно только в том случае, если:
	// - выполняется ручная сверка
	// - объект есть в обоих расчетах
	// - указано, что правильный вариант в программе
	// Поэтому здесь исходим из того, что форма уже находится в состоянии, соответствующем этим условиям (см. ПодготовитьФормуНаСервере())
	// Соответственно, при возврате на 1-й шаг форма приводится в то состояние, с которого перешли на 2-й шаг.
	
	Если НомерШага = 2 Тогда
		Элементы.НадписьЗаголовок.Заголовок =
			Нстр("ru = 'Введите данные из сообщения ФНС, чтобы программа могла составить текст пояснений:';
				|en = 'Enter FTS message data for the application to generate a note text:'");
	ИначеЕсли НомерШага = 1 Тогда
		Элементы.НадписьЗаголовок.Заголовок = Нстр("ru = 'Расчет налога в программе:';
													|en = 'Tax calculation in the application:'");
	КонецЕсли;
	
	ЭтоВторойШаг = (НомерШага = 2);
	
	Элементы.ГруппаРасчетВПрограммеЗаголовок.Видимость = ЭтоВторойШаг;
	Элементы.РасчетВПрограммеПравильныйРасчет.Видимость = Не ЭтоВторойШаг;
	Элементы.РасчетВПрограммеЗаголовок.Видимость = ЭтоВторойШаг;
	Элементы.ГруппаРасчетФНС.Видимость = ЭтоВторойШаг;
	Элементы.РасчетФНСПравильныйРасчет.Видимость = Не ЭтоВторойШаг;
	Элементы.РасчетФНСЗаголовок.Видимость = ЭтоВторойШаг;
	Элементы.ГруппаРучнаяСверка.Видимость = Не ЭтоВторойШаг;
	
	НастроитьЭлементыВыбораПричиныСнятияТССУчета(ЭтотОбъект, НомерШага);
	
	Элементы.Далее.Видимость = Не ЭтоВторойШаг;
	Элементы.Далее.КнопкаПоУмолчанию = Не ЭтоВторойШаг;
	Элементы.Назад.Видимость = ЭтоВторойШаг;
	Элементы.ОК.Видимость = ЭтоВторойШаг;
	Элементы.ОК.КнопкаПоУмолчанию = ЭтоВторойШаг;
	
	// Если расчет ФНС ранее не был введен вручную, то инициализируем его путем копирования расчета программы.
	// Если расчет ФНС был передан из формы-владельца, но не инициализирован, то нужно добавить элементы на форму.
	Если ЭтоВторойШаг И РасчетФНС.Количество() = 0 Тогда
		РасчетФНС.Загрузить(Расчет.Выгрузить());
		ВывестиСтрокиРасчета("ФНС");
		НастроитьВидимостьЭлементовСтрокРасчета("ФНС");
		ИнициализированРасчетФНС = Истина;
	ИначеЕсли Не ИнициализированРасчетФНС Тогда
		ВывестиСтрокиРасчета("ФНС");
		НастроитьВидимостьЭлементовСтрокРасчета("ФНС");
		ПодсветитьЭлементыРасчетаСРасхождениями(ЭтотОбъект, "ФНС");
		ИнициализированРасчетФНС = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыВыбораПричиныСнятияТССУчета(Форма, НомерШага = 1)
	
	// Причину снятия ТС с учета спрашиваем для транспортного налога в следующих случаях:
	// (1) Для ручной сверки на первом шаге, если:
	//    - объекта нет в расчете программы, но есть в расчете ФНС
	//    - указано, что, на самом деле, налог не должен рассчитываться (в программе верно)
	//    - объект был в программе, но уже снят с учета (известна дата снятия)
	//    Причину снятия с учета в этом случае спрашиваем в виде поля выбора.
	// (2) Для автоматической сверки, если:
	//    - объекта нет в расчете программы, но есть в расчете ФНС
	//    - указано, что, на самом деле, налог не должен рассчитываться (в программе верно)
	//    - объект был в программе, но уже снят с учета (известна дата снятия)
	//    Причину снятия с учета в этом случае спрашиваем в виде переключателя.
	// (3) Для автоматической сверки, а также для ручной сверки на втором шаге, если:
	//    - объект есть в обоих расчетах
	//    - в программе объект учитывался меньше времени, чем в расчете ФНС (т.е. КоличествоМесяцевВладения меньше)
	//    - указано, что правильный расчет - в программе
	//    - объект был в программе, но уже снят с учета (известна дата снятия)
	//    Причину снятия с учета в этом случае спрашиваем также в виде переключателя.
	
	Элементы = Форма.Элементы;
	ЭтоТранспортныйНалог = Форма.ЭтоТранспортныйНалог;
	ЗагруженРасчетФНС = Форма.ЗагруженРасчетФНС;
	ОбъектЕстьВРасчете = Форма.ОбъектЕстьВРасчете;
	ОбъектЕстьВРасчетеФНС = Форма.ОбъектЕстьВРасчетеФНС;
	ДатаСнятияСУчета = Форма.ДатаСнятияСУчета;
	ПравильныйРасчет = Форма.ПравильныйРасчет;
	Расчет = Форма.Расчет;
	РасчетФНС = Форма.РасчетФНС;
	
	Элементы.ГруппаРучнаяСверкаОшибкаВПрограммеОбъектОтсутствуетПодробно.Видимость =
		 ЭтоТранспортныйНалог И Не ЗагруженРасчетФНС И НомерШага = 1 И Не ОбъектЕстьВРасчете
		 И ОбъектЕстьВРасчетеФНС И ЗначениеЗаполнено(ДатаСнятияСУчета) И ПравильныйРасчет = 2;    // вариант (1)
		 
	Элементы.ГруппаПричинаСнятияСУчета.Видимость = 
		 (ЭтоТранспортныйНалог И ЗагруженРасчетФНС И Не ОбъектЕстьВРасчете
		 И ОбъектЕстьВРасчетеФНС И ЗначениеЗаполнено(ДатаСнятияСУчета) И ПравильныйРасчет = 2)    // вариант (2)
		Или 
		 (ЭтоТранспортныйНалог И (ЗагруженРасчетФНС Или НомерШага = 2) И ОбъектЕстьВРасчете
		 И ОбъектЕстьВРасчетеФНС И ЗначениеЗаполнено(ДатаСнятияСУчета) И ПравильныйРасчет = 2
		 И Расчет.Итог("КоличествоМесяцевВладения") < РасчетФНС.Итог("КоличествоМесяцевВладения")); // вариант (3)
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокиРасчета(СторонаРасчета)
	
	Суффикс = ?(СторонаРасчета = "ВПрограмме", "", "ФНС");
	ТаблицаРасчета = ЭтотОбъект["Расчет" + Суффикс];
	
	// Если в расчете 1 строка, то она уже выведена, идти далее нет смысла.
	// Если расчета вообще нет (объекта нет в расчете), то поля не отображаются.
	Если ТаблицаРасчета.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Для ИндексСтрокиТаблицы = 1 По ТаблицаРасчета.Количество()-1 Цикл
		ВывестиСтрокуРасчета(
			СторонаРасчета,
			ТаблицаРасчета[ИндексСтрокиТаблицы].ПолучитьИдентификатор(),
			ИндексСтрокиТаблицы,
			ИндексСтрокиТаблицы = ТаблицаРасчета.Количество()-1);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовСтрокРасчета(СторонаРасчета)

	Суффикс = ?(СторонаРасчета = "ВПрограмме", "", "ФНС");
	ТаблицаРасчета = ЭтотОбъект["Расчет" + Суффикс];
	ПерваяСтрока = Истина;
	
	Для ИндексСтрокиТаблицы = 0 По ТаблицаРасчета.Количество()-1 Цикл

		ИдентификаторСтрокиТаблицы = ТаблицаРасчета[ИндексСтрокиТаблицы].ПолучитьИдентификатор();
		ПоследняяСтрока = (ИндексСтрокиТаблицы = ТаблицаРасчета.Количество()-1);
		
		Если СторонаРасчета = "ФНС" И Не ЗагруженРасчетФНС Тогда
			// ОТСТУП СТРОКИ ИЛИ КОМАНДА УДАЛЕНИЯ
			// В случае ручной сверки (когда данные расчета ФНС вводятся вручную) в начале каждой строки расчета ФНС, начиная со второй,
			// вместо отступа выводится команда удаления строки.
			// При автоматической сверке (когда расчет ФНС загружен из сообщения и зафиксирован) нет необходимости редактировать расчет.
			Элементы["ОтступРасчетФНС" + ИдентификаторСтрокиТаблицы].Видимость = ПерваяСтрока;
			Элементы["УдалитьСтроку" + ИдентификаторСтрокиТаблицы].Видимость = Не ПерваяСтрока;
		КонецЕсли;
		
		// СУММА ЛЬГОТ И СУММА НАЛОГА ИЛИ ПРОПУСК
		// Сумму налога и сумму льгот выводим только в последней строке. Во всех остальных строках в этих колонках выводим пропуски.
		Если СторонаРасчета = "ФНС" И Не ЗагруженРасчетФНС Тогда
			// В случае ручной сверки поля сумм копируем во всех строках расчета ФНС (см. СкопироватьЭлементФормыРекурсивно()),
			// но выводим только в последней. Это делается на тот случай, если пользователь удалит некоторые строки, и тогда
			// в последней из оставшихся строк понадобится отобразить итоговые суммы.
			Элементы["СуммаЛьготФНС" + ИдентификаторСтрокиТаблицы].Видимость = ПоследняяСтрока;
			Элементы["СуммаЛьготФНСПропуск" + ИдентификаторСтрокиТаблицы].Видимость = Не ПоследняяСтрока;
			Элементы["СуммаНалогаФНС" + ИдентификаторСтрокиТаблицы].Видимость = ПоследняяСтрока;
			Элементы["СуммаНалогаФНСПропуск" + ИдентификаторСтрокиТаблицы].Видимость = Не ПоследняяСтрока;
		ИначеЕсли ПерваяСтрока И Не ПоследняяСтрока Тогда
			// В прочих случаях скроем итоговые суммы в первой строке, если она не единственная.
			// Во всех других строках лишние элементы изначально не создавались.
			Элементы["СуммаЛьгот" + Суффикс + "0"].Видимость = Ложь;
			Элементы["СуммаЛьгот" + Суффикс + "Пропуск0"].Видимость = Истина;
			Элементы["СуммаНалога" + Суффикс + "0"].Видимость = Ложь;
			Элементы["СуммаНалога" + Суффикс + "Пропуск0"].Видимость = Истина;
		КонецЕсли;
		
		ПерваяСтрока = Ложь;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуРасчета(СторонаРасчета, ИдентификаторСтрокиТаблицы, ИндексСтрокиТаблицы, ПоследняяСтрока)

	ГруппаФормыРасчет = Элементы["ГруппаРасчет" + СторонаРасчета + "Поля"];
	
	// В каждую колонку добавляем в конец новое поле путем копирования первого элемента в колонке (это может быть группа или поле).
	// Невидимые колонки не требуются для текущего налога, поэтому их пропускаем.
	Для Каждого ГруппаКолонка Из ГруппаФормыРасчет.ПодчиненныеЭлементы Цикл
		Если Не ГруппаКолонка.Видимость Тогда
			Продолжить;
		КонецЕсли;
		СкопироватьЭлементФормыРекурсивно(ГруппаКолонка.ПодчиненныеЭлементы[0], ГруппаКолонка, ИдентификаторСтрокиТаблицы, ИндексСтрокиТаблицы, ПоследняяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуРасчета()
	
	// В расчете ФНС всегда как минимум 1 строка
	ПоследняяСтрока = РасчетФНС[РасчетФНС.Количество()-1];

	// Добавляем новую строку в конец расчета. Копируем значения из последней строки.
	// Количество месяцев владения в сумме не может превышать 12.
	КоличествоМесяцевВладения = Макс(12 - РасчетФНС.Итог("КоличествоМесяцевВладения"), 0);
	НоваяСтрока = РасчетФНС.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоследняяСтрока);
	НоваяСтрока.КоличествоМесяцевВладения = КоличествоМесяцевВладения;

	РассчитатьСуммуНалогаФНС(ЭтотОбъект);
	
	ВывестиСтрокуРасчета(
		"ФНС",
		НоваяСтрока.ПолучитьИдентификатор(),
		РасчетФНС.Количество() - 1,
		Истина);

	НастроитьВидимостьЭлементовСтрокРасчета("ФНС");
	СравнитьРасчеты();
	ПодсветитьЭлементыРасчетаСРасхождениями(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуРасчета(ИдентификаторСтрокиТаблицы)

	// Удаляем строку из таблицы
	УдаляемаяСтрока = РасчетФНС.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	Если УдаляемаяСтрока <> Неопределено Тогда
		РасчетФНС.Удалить(УдаляемаяСтрока);
	КонецЕсли;

	РассчитатьСуммуНалогаФНС(ЭтотОбъект);

	// Далее удаляем элементы формы.
	// По каждой видимой колонке находим элементы с идентификатором удаляемой строки на конце.
	// В качестве шаблона берем элементы первой строки (идентификатор = 0).
	Для Каждого ГруппаКолонка Из Элементы.ГруппаРасчетФНСПоля.ПодчиненныеЭлементы Цикл
		
		Если Не ГруппаКолонка.Видимость Тогда
			Продолжить;
		КонецЕсли;
		// Получим имя элемента у удалению: берем имя элемента первой строки и заменяем окончание 0
		// на идентификатор удаляемой строки
		ИмяУдаляемогоЭлемента = СтрЗаменить(ГруппаКолонка.ПодчиненныеЭлементы[0].Имя, "0", ИдентификаторСтрокиТаблицы);
		УдаляемыйЭлемент = Элементы.Найти(ИмяУдаляемогоЭлемента);
		
		Если УдаляемыйЭлемент <> Неопределено Тогда
			Элементы.Удалить(УдаляемыйЭлемент);
		КонецЕсли;

	КонецЦикла;

	НастроитьВидимостьЭлементовСтрокРасчета("ФНС");
	СравнитьРасчеты();
	ПодсветитьЭлементыРасчетаСРасхождениями(ЭтотОбъект, "ФНС");

КонецПроцедуры

&НаСервере
Процедура СкопироватьЭлементФормыРекурсивно(Знач ЭлементИсточник, Родитель, ИдентификаторСтрокиТаблицы, ИндексСтрокиТаблицы, ПоследняяСтрока)
	
	// ЭлементИсточник - это всегда элемент первой строки, поэтому имя всегда заканчивается на 0 (идентификатор первой строки).
	ИмяЭлементаБезИндекса = СтрЗаменить(ЭлементИсточник.Имя, "0", "");
	
	// В некоторых случаях заранее известно, что часть элементов в строках не понадобится,
	// поэтому их нет смысла копировать в каждую строку.
	Если (ИмяЭлементаБезИндекса = "СуммаЛьгот" Или ИмяЭлементаБезИндекса = "СуммаНалога")
		 И Не ПоследняяСтрока Тогда
		// Расчет программы не редактируется.
		// Поэтому заранее известна и зафиксирована последняя строка. Поля сумм расчета выводим только в ней.
		Возврат;
	ИначеЕсли (ИмяЭлементаБезИндекса = "СуммаЛьготПропуск" Или ИмяЭлементаБезИндекса = "СуммаНалогаПропуск")
		 И ПоследняяСтрока Тогда
		// И наоборот: пропуски вместо полей сумм выводим во всех строках, кроме последней
		Возврат;
	КонецЕсли;
	
	Если (ИмяЭлементаБезИндекса = "СуммаЛьготФНС" Или ИмяЭлементаБезИндекса = "СуммаНалогаФНС")
		 И ЗагруженРасчетФНС И Не ПоследняяСтрока Тогда
		// При автоматической сверке (когда расчет ФНС загружен из сообщения и зафиксирован) нет необходимости редактировать расчет.
		// Поэтому заранее известна и зафиксирована последняя строка. Поля сумм расчета ФНС выводим только в ней.
		Возврат;
	ИначеЕсли (ИмяЭлементаБезИндекса = "СуммаЛьготФНСПропуск" Или ИмяЭлементаБезИндекса = "СуммаНалогаФНСПропуск")
		 И ЗагруженРасчетФНС И ПоследняяСтрока Тогда
		// И наоборот: пропуски вместо полей сумм выводим во всех строках, кроме последней
		Возврат;
	КонецЕсли;

	ИмяНовогоЭлемента = ИмяЭлементаБезИндекса + ИдентификаторСтрокиТаблицы;

	НовыйЭлемент = СкопироватьЭлементФормы(ЭлементИсточник, Родитель, ИмяНовогоЭлемента, ИндексСтрокиТаблицы);
	
	Если ИмяЭлементаБезИндекса = "УдалитьСтроку" И ЗагруженРасчетФНС Тогда
		// Удалять строки расчета по данным файла ИФНС нельзя.
		НовыйЭлемент.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаФормы") Тогда
		Для каждого ПодчиненныйЭлемент Из ЭлементИсточник.ПодчиненныеЭлементы Цикл
			СкопироватьЭлементФормыРекурсивно(ПодчиненныйЭлемент, НовыйЭлемент, ИдентификаторСтрокиТаблицы, ИндексСтрокиТаблицы, ПоследняяСтрока);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СкопироватьЭлементФормы(ЭлементИсточник, Родитель, ИмяНовогоЭлемента, ИндексСтрокиТаблицы)

	ТипИсточника = ТипЗнч(ЭлементИсточник);
	НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, ТипИсточника, Родитель);
	НовыйЭлемент.Вид = ЭлементИсточник.Вид;

	Если ТипИсточника = Тип("ПолеФормы") Тогда
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник,, "ПутьКДанным, ВыделенныйТекст, СписокВыбора");
		// Меняем свойство ПутьКДанным: например, на "РасчетФНС[1].НалоговаяБаза", где 1 - это индекс строки таблицы РасчетФНС.
		// ЭлементИсточник - это всегда элемент первой строки, поэтому индекс строки в ПутьКДанным равен 0.
		// Сумма налога и сумма льгот выводятся в последней строке в целом по объекту, индекса на конце там нет,
		// поэтому источник данных останется тот же, что у копируемого элемента первой строки.
		НовыйЭлемент.ПутьКДанным = СтрЗаменить(ЭлементИсточник.ПутьКДанным, "0", ИндексСтрокиТаблицы);

		Для каждого ЭлементСписка Из ЭлементИсточник.СписокВыбора Цикл
			НовыйЭлемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; 

		// Копируем обработчик события "ПриИзменении" (другие не используются)
		ДействиеПриИзменении = ЭлементИсточник.ПолучитьДействие("ПриИзменении");
		Если ДействиеПриИзменении <> "" Тогда
			НовыйЭлемент.УстановитьДействие("ПриИзменении", ДействиеПриИзменении);
		КонецЕсли;
	ИначеЕсли ТипИсточника = Тип("ГруппаФормы") Тогда
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник,, "ПутьКДаннымЗаголовка");
	Иначе
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементИсточник);
	КонецЕсли;
	
	// Новый элемент сначала всегда видимый, далее может быть скрыт в некоторых строках расчета -
	// см. НастроитьВидимостьЭлементовСтрокРасчета()
	НовыйЭлемент.Видимость = Истина;

	Возврат НовыйЭлемент;

КонецФункции

// Подсветить элементы расчета с расхождениями.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  СторонаРасчета - Строка - Сторона расчета
&НаКлиентеНаСервереБезКонтекста
Процедура ПодсветитьЭлементыРасчетаСРасхождениями(Форма, СторонаРасчета)

	Элементы = Форма.Элементы;
	ПравильныйРасчет = Форма.ПравильныйРасчет;
	Цвета = Форма.ПараметрыСверки.Цвета;
	СуммаЛьгот = Форма.СуммаЛьгот;
	СуммаЛьготФНС = Форма.СуммаЛьготФНС;
	СуммаНалога = Форма.СуммаНалога;
	СуммаНалогаФНС = Форма.СуммаНалогаФНС;
	
	Суффикс = ?(СторонаРасчета = "ВПрограмме", "", "ФНС");
	ТаблицаРасчета = Форма["Расчет" + Суффикс];
	
	ПодсветитьРасхождения = 
		(СторонаРасчета = "ФНС" И ПравильныйРасчет = 2) // нужно подсветить расхождения в расчете ФНС
		Или (СторонаРасчета = "ВПрограмме" И ПравильныйРасчет = 3) // нужно подсветить расхождения в расчете программы
		Или ПравильныйРасчет = 0; // нужно подсветить расхождения в обоих расчетах

	Для каждого СтрокаРасчета Из ТаблицаРасчета Цикл
		
		ИдентификаторСтроки = СтрокаРасчета.ПолучитьИдентификатор();
		
		ПоляРасхожденийПоСтроке = Новый Массив;
		Если ПодсветитьРасхождения
			 И ЗначениеЗаполнено(СтрокаРасчета.ПоляРасхождений)
			 И СтрокаРасчета.ПоляРасхождений <> "Все" Тогда
			ПоляРасхожденийПоСтроке = СтрРазделить(СтрокаРасчета.ПоляРасхождений, ",");
		КонецЕсли;
		
		Для Каждого ПоказательРасчета Из Форма.ПараметрыСверки.ПоляСтрокРасчета Цикл
			
			ПолеФормы = Элементы.Найти(ПоказательРасчета + Суффикс + ИдентификаторСтроки);
			Если ПолеФормы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЦветПоля = Цвета.ЦветПоУмолчанию;
			
			Если ПодсветитьРасхождения 
				 И (СтрокаРасчета.ПоляРасхождений = "Все" Или ПоляРасхожденийПоСтроке.Найти(ПоказательРасчета) <> Неопределено) Тогда
				ЦветПоля = Цвета.ЦветРасхождений;
			КонецЕсли;
			
			ПолеФормы.ЦветРамки = ЦветПоля;
			ПолеФормы.ЦветТекста = ЦветПоля;
			
		КонецЦикла;
		
	КонецЦикла;

	Если ТаблицаРасчета.Количество() > 0 Тогда
	// Подсвечиваем итоговые суммы 
		ИдентификаторСтрокиПоследнейСтроки = ТаблицаРасчета[ТаблицаРасчета.Количество() - 1].ПолучитьИдентификатор();
	
	// Сумма льгот
		ПолеФормы = Элементы.Найти("СуммаЛьгот" + Суффикс + ИдентификаторСтрокиПоследнейСтроки);
		Если ПолеФормы <> Неопределено И ПодсветитьРасхождения И СуммаЛьгот <> СуммаЛьготФНС Тогда
			ПолеФормы.ЦветРамки = Цвета.ЦветРасхождений;
			ПолеФормы.ЦветТекста = Цвета.ЦветРасхождений;
		ИначеЕсли ПолеФормы <> Неопределено Тогда
			ПолеФормы.ЦветРамки = Цвета.ЦветПоУмолчанию;
			ПолеФормы.ЦветТекста = Цвета.ЦветПоУмолчанию;
		КонецЕсли;
	
	// Сумма налога
		ПолеФормы = Элементы.Найти("СуммаНалога" + Суффикс + ИдентификаторСтрокиПоследнейСтроки);
		Если ПолеФормы <> Неопределено И ПодсветитьРасхождения И СуммаНалога <> СуммаНалогаФНС Тогда
			ПолеФормы.ЦветРамки = Цвета.ЦветРасхождений;
			ПолеФормы.ЦветТекста = Цвета.ЦветРасхождений;
		ИначеЕсли ПолеФормы <> Неопределено Тогда
			ПолеФормы.ЦветРамки = Цвета.ЦветПоУмолчанию;
			ПолеФормы.ЦветТекста = Цвета.ЦветПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПовышающегоКоэффициента()
	
	СписокВыбора = Элементы.ПовышающийКоэффициентФНС0.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	Если ЭтоТранспортныйНалог Тогда
		// С 2022 года применяется только повышающий коэффициент 3 по ТС от 10 млн
		СписокВыбора.Добавить(1, "1");
		Если НалоговыйПериод < '20220101' Тогда
			СписокВыбора.Добавить(1.1, "1,1");
			СписокВыбора.Добавить(2, "2");
		КонецЕсли;
		СписокВыбора.Добавить(3, "3");
	ИначеЕсли ЭтоЗемельныйНалог Тогда
		СписокВыбора.Добавить(1, "1");
		СписокВыбора.Добавить(2, "2");
		СписокВыбора.Добавить(4, "4");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНалогаФНС(Форма)

	СуммаНалогаФНС = 0;
	
	Для каждого СтрокаРасчета Из Форма.РасчетФНС Цикл
		
		Если Форма.ЭтоТранспортныйНалог Тогда
			
			СуммаНалогаФНС = СуммаНалогаФНС
								+ Окр(СтрокаРасчета.НалоговаяБаза * СтрокаРасчета.НалоговаяСтавка
										* СтрокаРасчета.КоличествоМесяцевВладения / 12
										* СтрокаРасчета.ПовышающийКоэффициент);
			
		ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
			
			СуммаНалогаФНС = СуммаНалогаФНС
								+ Окр(СтрокаРасчета.НалоговаяБаза * СтрокаРасчета.ДоляВПравеЧислитель
										/ ?(СтрокаРасчета.ДоляВПравеЗнаменатель = 0, 1, СтрокаРасчета.ДоляВПравеЗнаменатель)
										* СтрокаРасчета.НалоговаяСтавка / 100 
										* СтрокаРасчета.КоличествоМесяцевВладения / 12);
			
		ИначеЕсли Форма.ЭтоЗемельныйНалог И Форма.НалоговыйПериод < '20220101' Тогда
			
			СуммаНалогаФНС = СуммаНалогаФНС
								+ Окр((СтрокаРасчета.НалоговаяБаза * СтрокаРасчета.ДоляВПравеЧислитель
										/ ?(СтрокаРасчета.ДоляВПравеЗнаменатель = 0, 1, СтрокаРасчета.ДоляВПравеЗнаменатель)
										- СтрокаРасчета.НалоговыйВычет)
										* СтрокаРасчета.НалоговаяСтавка / 100
										* СтрокаРасчета.КоличествоМесяцевВладения / 12
										* СтрокаРасчета.ПовышающийКоэффициент);
			
		ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
			
			СуммаНалогаФНС = СуммаНалогаФНС 
								+ Окр(СтрокаРасчета.НалоговаяБаза * СтрокаРасчета.ДоляВПравеЧислитель
										/ ?(СтрокаРасчета.ДоляВПравеЗнаменатель = 0, 1, СтрокаРасчета.ДоляВПравеЗнаменатель)
										* СтрокаРасчета.НалоговаяСтавка
										/ 100 * СтрокаРасчета.КоличествоМесяцевВладения
										/ 12 * СтрокаРасчета.ПовышающийКоэффициент);
			
		КонецЕсли;
			
	КонецЦикла;

	Форма.СуммаНалогаФНС = СуммаНалогаФНС - Форма.СуммаЛьготФНС;

КонецПроцедуры

&НаКлиенте
Процедура СравнитьРасчетыОтложенно()
	ОтключитьОбработчикОжидания("СравнитьРасчетыИПодсветитьРасхождения");
	ПодключитьОбработчикОжидания("СравнитьРасчетыИПодсветитьРасхождения", 2, Истина);
	ПодключенОбработчикОжидания = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СравнитьРасчетыИПодсветитьРасхождения()
	СравнитьРасчетыИПодсветитьРасхожденияНаСервере();
	ПодключенОбработчикОжидания = Ложь;
КонецПроцедуры

&НаСервере
Процедура СравнитьРасчетыИПодсветитьРасхожденияНаСервере()
	СравнитьРасчеты();
	// Процедура вызывается только в сценарии, когда пользователь вручную вносит данные расчета ФНС,
	// и при этом уже известно, что расчет ФНС неверный. 
	ПодсветитьЭлементыРасчетаСРасхождениями(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаСервере
Процедура СравнитьРасчеты() 

	ПоляРасхождений = СверкаСФНСПоИмущественнымНалогамФормы.СравнитьРасчетыПоОбъекту(
		Расчет,
		РасчетФНС,
		СуммаЛьгот,
		СуммаЛьготФНС,
		СуммаНалога,
		СуммаНалогаФНС,
		ПараметрыСверки.ПоляСтрокРасчета);

КонецПроцедуры

&НаСервере
Функция РезультатСравнения()

	Результат = Новый Структура;
	
	Результат.Вставить("ОбъектЕстьВРасчетеФНС", ОбъектЕстьВРасчетеФНС);
	
	Если ОбъектЕстьВРасчетеФНС И Не ЗагруженРасчетФНС Тогда
		Результат.Вставить("СуммаНалогаФНС", СуммаНалогаФНС);
		Результат.Вставить("СуммаЛьготФНС", СуммаЛьготФНС);
		Результат.Вставить("АдресТаблицаРасчетФНС", 
			ПоместитьВоВременноеХранилище(РасчетФНС.Выгрузить()));
	Иначе
		Результат.Вставить("СуммаНалогаФНС", 0);
		Результат.Вставить("СуммаЛьготФНС", 0);
		Результат.Вставить("АдресТаблицаРасчетФНС", 
			ПоместитьВоВременноеХранилище(РасчетФНС.Выгрузить(Новый Массив))); // пустая таблица
	КонецЕсли;
	
	Результат.Вставить("ПравильныйРасчет", ПравильныйРасчет);
	Результат.Вставить("ПричинаСнятияСУчета", ПричинаСнятияСУчета);
	Результат.Вставить("ПоляРасхождений", ПоляРасхождений);

	Возврат Результат;

КонецФункции

#КонецОбласти