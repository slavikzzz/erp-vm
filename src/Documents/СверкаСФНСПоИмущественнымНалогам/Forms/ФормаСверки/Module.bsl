#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
	"Документ.СверкаСФНСПоИмущественнымНалогам.Форма.ФормаСверки.ПриСозданииНаСервере");
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Параметры.Свойство("Правило", Правило);
	Параметры.Свойство("Описание", Описание);
	Параметры.Свойство("ПараметрыНавигационныхСсылок", ПараметрыНавигационныхСсылок);
	Параметры.Свойство("ПараметрыСверки", ПараметрыСверки);
	
	Если ЗначениеЗаполнено(Параметры.АдресОбъекта) Тогда
		// Передан заполненный объект
		Контейнер = ПолучитьИзВременногоХранилища(Параметры.АдресОбъекта);
		ЗначениеВРеквизитФормы(Контейнер.Получить("Объект"), "Объект");
		Модифицированность = Истина;
	КонецЕсли;
	
	КодыНалоговыхОрганов = Неопределено;
	Параметры.Свойство("КодыНалоговыхОрганов", КодыНалоговыхОрганов);
	Если Не ЗначениеЗаполнено(КодыНалоговыхОрганов) Тогда
		// Если открывается форма существующей сверки, то массив налоговых органов может быть не передан.
		// В этом случае заполним его фактически присутствующими в сверке налоговыми органами.
		ТаблицаКодов = Объект.Сверка.Выгрузить(, "КодНалоговогоОргана");
		ТаблицаКодов.Свернуть("КодНалоговогоОргана");
		КодыНалоговыхОрганов = ТаблицаКодов.ВыгрузитьКолонку("КодНалоговогоОргана");
	КонецЕсли;

	Если ПараметрыСверки = Неопределено Тогда
		СверкаСФНСПоИмущественнымНалогамФормы.ИнициализироватьПараметрыСверки(
			ЭтотОбъект,
			Объект.РегистрацияВНалоговомОргане,
			Объект.РегистрацияВНалоговомОргане,
			Объект.КодОтправителя,
			КодыНалоговыхОрганов,
			Объект.СообщениеФНС);
	КонецЕсли;
	
	ЗаполнитьСуммыНалога(ЭтотОбъект);

	ЭтоТранспортныйНалог = (Объект.Налог = Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог);
	ЭтоЗемельныйНалог = (Объект.Налог = Перечисления.ВидыИмущественныхНалогов.ЗемельныйНалог);
	ЭтоНалогНаИмущество = (Объект.Налог = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество);

	ПодготовитьФормуНаСервере();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Объект.Сверка.Количество());
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

// Обработка выбора.
// 
// Параметры:
//  ВыбранноеЗначение - СправочникСсылка.ОбъектыЭксплуатации, Структура - содержит:
//  	* ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации
//  	* Наименование - Строка  - Выбранное значение
//  	* РегистрационныйЗнак - Строка - Номер государственной регистрации транспортного средства
//  	* КадастровыйНомер - Строка - Кадастровый номер
//  	* КодВидаТС - Строка - Код вида транспортного средства
//  	* Поставлено - Дата - Дата постановки на учет
//  	* Снято - Дата - Дата снятия с учета
//  	* АдресТаблицаРасчетФНС - Строка
//  	
//  ИсточникВыбора - Произвольный - Источник выбора
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ОбъектыЭксплуатации.Форма.ФормаСпискаТранспорт") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НовыйОбъект = Объект.Сверка.Добавить();
		НовыйОбъект.ДобавленоВручную = Истина;
		НовыйОбъект.ОбъектЕстьВРасчетеФНС = Истина;
		
		ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
		
		// Если в структуре есть ссылка на основное средство, то там же есть и другие свойства объекта.
		// В ином случае добавляется пустая строка (см. выше) для ручного заполнения.
		Если ТипВыбранногоЗначения = Тип("Структура") И ВыбранноеЗначение.Свойство("ОсновноеСредство") Тогда
			НовыйОбъект.ОсновноеСредство = ВыбранноеЗначение.ОсновноеСредство;
			НовыйОбъект.НаименованиеОбъекта = ВыбранноеЗначение.Наименование;
			НовыйОбъект.РегистрационныйЗнак = ВыбранноеЗначение.РегистрационныйЗнак;
			НовыйОбъект.КодВидаТС = ВыбранноеЗначение.КодВидаТС;
			НовыйОбъект.ДатаПостановкиНаУчет = ВыбранноеЗначение.Поставлено;
			НовыйОбъект.ДатаСнятияСУчета = ВыбранноеЗначение.Снято;
			НовыйОбъект.ДатаПоследнегоИзменения = Макс(НовыйОбъект.ДатаПостановкиНаУчет, НовыйОбъект.ДатаСнятияСУчета);
		КонецЕсли;	
		
		Элементы.Сверка.ТекущаяСтрока = НовыйОбъект.ПолучитьИдентификатор();
		
		УстановитьТекстОтличия(ЭтотОбъект, НовыйОбъект);
		СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.УстановитьДействиеНаОснованииСверки(ЭтотОбъект, НовыйОбъект);
		
		Модифицированность = Истина;

	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ОбъектыЭксплуатации.Форма.ФормаСпискаЗемля") 
		 Или ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ОбъектыЭксплуатации.Форма.ФормаСпискаНедвижимость") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НовыйОбъект = Объект.Сверка.Добавить();
		НовыйОбъект.ДобавленоВручную = Истина;
		НовыйОбъект.ОбъектЕстьВРасчетеФНС = Истина;
		
		ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
		
		// Если в структуре есть ссылка на основное средство, то там же есть и другие свойства объекта.
		// В ином случае добавляется пустая строка (см. выше) для ручного заполнения.
		Если ТипВыбранногоЗначения = Тип("Структура") И ВыбранноеЗначение.Свойство("ОсновноеСредство") Тогда
			НовыйОбъект.ОсновноеСредство = ВыбранноеЗначение.ОсновноеСредство;
			НовыйОбъект.НаименованиеОбъекта = ВыбранноеЗначение.Наименование;
			НовыйОбъект.КадастровыйНомер = ВыбранноеЗначение.КадастровыйНомер;
			НовыйОбъект.ДатаПостановкиНаУчет = ВыбранноеЗначение.Поставлено;
			НовыйОбъект.ДатаСнятияСУчета = ВыбранноеЗначение.Снято;
			НовыйОбъект.ДатаПоследнегоИзменения = Макс(НовыйОбъект.ДатаПостановкиНаУчет, НовыйОбъект.ДатаСнятияСУчета);
		КонецЕсли;	
		
		Элементы.Сверка.ТекущаяСтрока = НовыйОбъект.ПолучитьИдентификатор();
		
		УстановитьТекстОтличия(ЭтотОбъект, НовыйОбъект);
		СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.УстановитьДействиеНаОснованииСверки(ЭтотОбъект, НовыйОбъект);
		
		Модифицированность = Истина;
	
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.СверкаСФНСПоИмущественнымНалогам.Форма.ОтличияВРасчете") Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Сверка.ТекущиеДанные;
		Если Объект.ЗагруженРасчетФНС Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение, "ПравильныйРасчет, ПричинаСнятияСУчета, ПоляРасхождений");
		Иначе
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
			ЗагрузитьДеталиРасчетаФНС(Элементы.Сверка.ТекущаяСтрока, ВыбранноеЗначение.АдресТаблицаРасчетФНС);
		КонецЕсли;
		
		Если ТекущиеДанные.ПравильныйРасчет = 3 Тогда
			ТекущиеДанные.СуммаНалогаКУплате = ?(ТекущиеДанные.ОбъектЕстьВРасчетеФНС, ТекущиеДанные.СуммаНалогаФНС, 0)
		Иначе
			ТекущиеДанные.СуммаНалогаКУплате = ТекущиеДанные.СуммаНалога;
		КонецЕсли;
		
		УстановитьТекстОтличия(ЭтотОбъект, ТекущиеДанные);
		СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.УстановитьДействиеНаОснованииСверки(ЭтотОбъект, ТекущиеДанные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_УведомлениеОСпецрежимахНалогообложения" Тогда
		ПриЗаписиУведомленияСервер(Источник);
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" Тогда
		ПриИзмененииВыписки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("СверкаСФНСПоИмущественнымНалогам_Запись", Объект.Ссылка);
	
	РассчитатьСуммуНалогаКУплате(ЭтотОбъект);
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл
		УстановитьТекстОтличия(ЭтотОбъект, СтрокаСверки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьИспользуетсяПрежнийРасчетНалогаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗакрытиеМесяца" Тогда
		ОткрытьФорму("Обработка.ОперацииЗакрытияМесяца.Форма.ЗакрытиеМесяца", 
			Новый Структура("Организация, ПериодРегистрации", Объект.Организация, КонецГода(Объект.НалоговыйПериод)));
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗакрытьСверку" Тогда
		Если Не Объект.Ссылка.Пустая() Тогда
			// Текущая сверка уже не актуальна - пометим на удаление
			Объект.ПометкаУдаления = Истина;
			Записать();
		КонецЕсли;
		Закрыть();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Подробнее" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/db/answerstax#content:4639:hdoc");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДействиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗаявлениеОЛьготе"
		 Или НавигационнаяСсылкаФорматированнойСтроки = "ЗаявлениеОГибелиТС"
		 Или НавигационнаяСсылкаФорматированнойСтроки = "СообщениеОНаличииОбъектов" Тогда
		// При заполнении уведомления будут использованы данные сверки. Поэтому документ нужно записать.
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;

	СверкаСФНСПоИмущественнымНалогамФормыКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСверка
&НаКлиенте
Процедура СверкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ОтличиеСтрокой" Тогда

		СтандартнаяОбработка = Ложь;

		ОповещениеПриПодтверждении = Новый ОписаниеОповещения(
			"ОткрытьФормуСверки",
			ЭтотОбъект,
			ВыбраннаяСтрока);

		ПередРедактированиемСверки(ОповещениеПриПодтверждении);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СверкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;

	Если Копирование Тогда
		Возврат;
	КонецЕсли;

	ОповещениеПриПодтверждении = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораОбъекта",
		ЭтотОбъект);

	ПередРедактированиемСверки(ОповещениеПриПодтверждении);

КонецПроцедуры

&НаКлиенте
Процедура СверкаПередНачаломИзменения(Элемент, Отказ)

	ОповещениеПриПодтверждении = Новый ОписаниеОповещения(
		"ПродолжитьИзменениеСверки",
		ЭтотОбъект,
		Отказ);

	ПередРедактированиемСверки(ОповещениеПриПодтверждении);

КонецПроцедуры

&НаКлиенте
Процедура СверкаПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Сверка.ВыделенныеСтроки;
	Отказ = Истина; // удаление переопределено в асинхронном методе
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Сверка.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если Не ДанныеСтроки.ДобавленоВручную Тогда
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОповещениеПриПодтверждении = Новый ОписаниеОповещения(
		"УдалитьСтрокиСверки",
		ЭтотОбъект,
		ВыделенныеСтроки);

	ПередРедактированиемСверки(ОповещениеПриПодтверждении);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РасчетНалога(Команда)

	СверкаСФНСПоИмущественнымНалогамФормыКлиент.ОткрытьСправкуРасчет(
		ЭтотОбъект,
		Объект.Организация,
		Объект.Налог,
		Объект.НалоговыйПериод,
		ПараметрыСверки.КодыНалоговыхОрганов); 

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДействиям(Команда)

	Объект.СравнениеЗавершено = Истина;
	НастроитьКнопки(ЭтотОбъект);
	РассчитатьСуммуНалогаКУплате(ЭтотОбъект, Ложь);
	ОтобразитьДействияСервер();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСверку(Команда)

	Записать();
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда) 
	ОценкаПроизводительностиКлиент.ЗамерВремени(
	"Документ.СверкаСФНСПоИмущественнымНалогам.Форма.ФормаСверки.Обновить");
	
	ОбновитьНажатиеНаСервере();
	
	РассчитатьСуммуНалогаКУплате(ЭтотОбъект, Истина);
	ОбновитьПоляРасхождений();  
	
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл
		УстановитьТекстОтличия(ЭтотОбъект, СтрокаСверки);
	КонецЦикла;
	
	Объект.СравнениеЗавершено = Ложь;
	НастроитьКнопки(ЭтотОбъект);
	Элементы.ГруппаСледующиеДействия.Видимость = Ложь;
	
КонецПроцедуры  

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьЗаголовокФормы();
	Элементы.РасчетНалога.Заголовок = СтрШаблон(
		Нстр("ru = 'Справка-расчет налога за %1 год';
			|en = 'Detailed tax calculation for %1'"),
		Формат(Объект.НалоговыйПериод, "ДФ=yyyy;"));

	ПериодОсобогоКонтроля = 
		СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ПериодИзмененийДляОсобогоКонтроля(Объект.НалоговыйПериод);
		
	ЕстьИзмененияВКонцеОтчетногоГода = Ложь;
	ЕстьЛьготы = Ложь;
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл
		УстановитьТекстОтличия(ЭтотОбъект, СтрокаСверки); // устанавливаем значение РасчетыОтличаются
		ЕстьИзмененияВКонцеОтчетногоГода = ЕстьИзмененияВКонцеОтчетногоГода 
			Или СтрокаСверки.ДатаПоследнегоИзменения >= ПериодОсобогоКонтроля;
		ЕстьЛьготы = ЕстьЛьготы Или СтрокаСверки.СуммаЛьгот > 0;
	КонецЦикла;

	РассчитатьСуммуНалогаКУплате(ЭтотОбъект);
	
	Если Объект.ЗагруженРасчетФНС Тогда
		
		РасчетыСовпадают = РасчетыСовпадают(ЭтотОбъект);
		
		Если РасчетыСовпадают Тогда
			Элементы.НадписьДействиеСравнитьРасчет.Заголовок = Нстр("ru = 'Расчет в программе сошелся с загруженным расчетом налогового органа.';
																	|en = 'The application calculation matches the imported calculation of the tax authority.'");
			Элементы.НадписьДействиеСравнитьРасчет.ЦветТекста = ПараметрыСверки.Цвета.РасчетыСошлись;
			Элементы.ГруппаПоясненияПодробно.Видимость = Ложь;
			Элементы.ГруппаДействиеИнформация.Видимость = Ложь;
			Элементы.ГруппаКнопкиСверка.Видимость = Ложь;
		Иначе
			Элементы.НадписьДействиеСравнитьРасчет.Заголовок = 
				Нстр("ru = 'Сверка расчета налога с данными ФНС выполнена автоматически. Укажите, какой расчет верный.';
					|en = 'Tax calculation and FTS data are automatically reconciled. Specify which calculation is correct.'");
			Элементы.НадписьПоясненияЧтоДелать.Заголовок = 
				Нстр("ru = 'В строках, где есть расхождения, перейдите по ссылке в колонке ""Отличия в расчете"" и укажите, какой расчет верный.';
					|en = 'In lines with discrepancies, click the link in the ""Differences in calculation"" column and specify which calculation is correct.'");
			Элементы.НадписьПояснения.Видимость = Ложь;
			Элементы.НадписьПоясненияИзменения.Видимость = Ложь;
			Элементы.НадписьПоясненияЛьготы.Видимость = Ложь;
			Элементы.НадписьПоясненияДобавить.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		СформироватьТекстНадписиПояснения(ЭтотОбъект);
		
		Если ЕстьИзмененияВКонцеОтчетногоГода Тогда
			Элементы.НадписьПоясненияИзменения.Видимость = Истина;
			СформироватьТекстНадписиПоясненияИзменения(ЭтотОбъект);
		Иначе
			Элементы.НадписьПоясненияИзменения.Видимость = Ложь;
		КонецЕсли;
		
		Если ЕстьЛьготы Тогда
			Элементы.НадписьПоясненияЛьготы.Видимость = Истина;
			СформироватьТекстНадписиПоясненияЛьготы(ЭтотОбъект);
		Иначе
			Элементы.НадписьПоясненияЛьготы.Видимость = Ложь;
		КонецЕсли;
		
		СформироватьТекстНадписиПоясненияДобавить(ЭтотОбъект);
	
	КонецЕсли;
	
	Элементы.ГруппаБаннерИспользуетсяПрежнийРасчетНалога.Видимость =
		ЭтоНалогНаИмущество
		И РасчетИмущественныхНалоговПереопределяемый.ИспользоватьПрежнийРасчетНалогаНаИмуществоВПереходныйПериод(
			Объект.Организация,
	 		КонецГода(Объект.НалоговыйПериод));
	
	УстановитьУсловноеОформление();
	
	Элементы.РегистрационныйЗнак.Видимость = ЭтоТранспортныйНалог;
	Элементы.КадастровыйНомер.Видимость = ЭтоЗемельныйНалог Или ЭтоНалогНаИмущество;
	
	Элементы.Сверка.ИзменятьСоставСтрок = Не Объект.ЗагруженРасчетФНС;
	
	ПоказыватьКодНалоговогоОргана = Ложь;
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл
		Если СтрокаСверки.КодНалоговогоОргана <> Объект.КодОтправителя Тогда
			ПоказыватьКодНалоговогоОргана = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.КодНалоговогоОргана.Видимость = ПоказыватьКодНалоговогоОргана;
	
	// Читаем шаблоны действий и навигационных ссылок из макета
	ИнициализироватьОписаниеДействий();
	
	Если ПараметрыНавигационныхСсылок = Неопределено Тогда
		СверкаСФНСПоИмущественнымНалогамФормы.ИнициализироватьПараметрыНавигационныхСсылок(
			ЭтотОбъект, 
			Объект.Организация, 
			Объект.Налог, 
			Объект.НалоговыйПериод,
			ПараметрыСверки.КодыНалоговыхОрганов,
			Объект.РегистрацияВНалоговомОргане,
			ПараметрыСверки.Сообщение);
	КонецЕсли;
	
	НастроитьКнопки(ЭтотОбъект);
	Если Объект.СравнениеЗавершено Тогда
		ОтобразитьДействияСервер();
	Иначе
		Элементы.ГруппаСледующиеДействия.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Раскрасим строки, в которых расчет не совпал
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Сверка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сверка.РасчетыОтличаются", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаНекорректногоКонтрагента);
	
	// Редактирование объекта доступно в случае ручного ввода
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НаименованиеОбъекта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РегистрационныйЗнак");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КадастровыйНомер");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодНалоговогоОргана");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодПоОКТМО");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Сверка.ДобавленоВручную", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Если в расчете ФНС не указаны VIN, то скроем эту колонку
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИдентификационныйНомер");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СопоставлениеСУчетомVIN", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ПараметрыТекста = Новый Структура;
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ВестиУчетПоПодразделениям = Истина;
	Если ИспользоватьНесколькоОрганизаций И ВестиУчетПоПодразделениям Тогда 
		ШаблонТекста = НСтр("ru = 'Сверка с ФНС по [Налогу] за [Год] год ([Организация], [ФНС])';
							|en = 'Reconciliation with the FTS on [Налогу] for [Год] ([Организация], [ФНС])'");
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "НаименованиеСокращенное");
		ПараметрыТекста.Вставить("Организация", НаименованиеОрганизации);
		ПараметрыТекста.Вставить("ФНС", СтрШаблон(Нстр("ru = 'ФНС %1';
														|en = 'FTS %1'"), Объект.КодОтправителя));
	ИначеЕсли ВестиУчетПоПодразделениям Тогда
		ШаблонТекста = НСтр("ru = 'Сверка с ФНС по [Налогу] за [Год] год ([ФНС])';
							|en = 'Reconciliation with the FTS on [Налогу] for [Год] ([ФНС])'");
		ПараметрыТекста.Вставить("ФНС", СтрШаблон(Нстр("ru = 'ФНС %1';
														|en = 'FTS %1'"), Объект.КодОтправителя));
	Иначе
		ШаблонТекста = НСтр("ru = 'Сверка с ФНС по [Налогу] за [Год] год';
							|en = 'Reconciliation with the FTS on [Налогу] for [Год]'");
	КонецЕсли;
	
	Если ЭтоТранспортныйНалог Тогда
		ПараметрыТекста.Вставить("Налогу", Нстр("ru = 'транспортному налогу';
												|en = 'vehicle tax'"));
	ИначеЕсли ЭтоЗемельныйНалог Тогда
		ПараметрыТекста.Вставить("Налогу", Нстр("ru = 'земельному налогу';
												|en = 'land value tax'"));
	ИначеЕсли ЭтоНалогНаИмущество Тогда
		ПараметрыТекста.Вставить("Налогу", Нстр("ru = 'налогу на имущество';
												|en = 'property tax'"));
	КонецЕсли;
	
	ПараметрыТекста.Вставить("Год", Формат(Объект.НалоговыйПериод, "ДФ=yyyy;"));
	
	Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьТекстНадписиПояснения(Форма)
		
	ТекстНадписи = Нстр("ru = 'Ниже показаны %1, по которым выполнен расчет налога в программе за %2 год.';
						|en = 'Below you can see %1 for which tax calculation was executed in the application for %2.'");
		
	ТекстНадписи = СтрШаблон(ТекстНадписи,
		ОбъектыНалогообложенияВИменительномПадеже(Форма),
		Формат(Форма.Объект.НалоговыйПериод, "ДФ=yyyy;"));
			
	Форма.Элементы.НадписьПояснения.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьТекстНадписиПоясненияИзменения(Форма)
	
	ТекстНадписи = Новый Массив;
	
	Шаблон = Нстр("ru = 'Чаще всего расхождения связаны с тем, что в ФНС поздно поступают данные о регистрации
		|или прекращении регистрации %1. Поэтому в первую очередь показаны %2,
		|по которым были изменения в 4 квартале %3 года.';
		|en = 'Discrepancies often arise because the FTS receives information about %1 registration
		|or deregistration late. That is why, %2
		|with changes in the fourth quarter of %3 are shown first.'");		
	
	// Удаляем лишние переносы строк, которые выше используются только для удобства чтения - 
	// фактически переносы подстроятся под ширину формы.
	Шаблон = СтрЗаменить(Шаблон, Символы.ПС, " ");
		
	ТекстНадписи = СтрШаблон(Шаблон, 
		ОбъектыНалогообложенияВРодительномПадеже(Форма),
		ОбъектыНалогообложенияВИменительномПадеже(Форма),
		Формат(Форма.Объект.НалоговыйПериод, "ДФ=yyyy;"));
	
	Форма.Элементы.НадписьПоясненияИзменения.Заголовок = ТекстНадписи;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьТекстНадписиПоясненияЛьготы(Форма)
	
	ТекстНадписи = Новый Массив;
	
	Шаблон = Нстр("ru = 'Также стоит обратить внимание, учла ли ФНС льготы организации.
		|%1 со льготами в списке следуют раньше остальных.';
		|en = 'Note whether the FTS considered the company''s relief.
		|%1 with the relief are specified higher in the list.'");		
	
	// Удаляем лишние переносы строк, которые выше используются только для удобства чтения - 
	// фактически переносы подстроятся под ширину формы.
	Шаблон = СтрЗаменить(Шаблон, Символы.ПС, " ");
	ТекстНадписи = СтрШаблон(Шаблон, ОбъектыНалогообложенияВИменительномПадеже(Форма, Истина));
	
	Форма.Элементы.НадписьПоясненияЛьготы.Заголовок = ТекстНадписи;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьТекстНадписиПоясненияДобавить(Форма)
	
	ТекстНадписи = Новый Массив;
	
	Шаблон = Нстр("ru = 'Если в расчете ФНС есть %1, которые не попали в расчет программы 
		|(например, в ФНС нет данных о снятии %2 с учета), то добавьте эти %3 в сверку вручную.';
		|en = 'If the FTS calculation contains %1 that are not included in the application calculation 
		|(for example, the FTS does not have information about %2 deregistration), add these %3 to the reconciliation manually.'");
	
	// Удаляем лишние переносы строк, которые выше используются только для удобства чтения - 
	// фактически переносы подстроятся под ширину формы.
	Шаблон = СтрЗаменить(Шаблон, Символы.ПС, " ");
	
	ОбъектНалогообложенияВРодительномПадеже = "";
	Если Форма.ЭтоТранспортныйНалог Тогда
		ОбъектНалогообложенияВРодительномПадеже = Нстр("ru = 'транспортного средства';
														|en = 'vehicle'");
	ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
		ОбъектНалогообложенияВРодительномПадеже = Нстр("ru = 'участка';
														|en = 'land plot'");
	ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
		ОбъектНалогообложенияВРодительномПадеже = Нстр("ru = 'недвижимости';
														|en = 'real estate'");
	КонецЕсли;	
		
	ТекстНадписи = СтрШаблон(Шаблон, 
		ОбъектыНалогообложенияВИменительномПадеже(Форма),
		ОбъектНалогообложенияВРодительномПадеже,
		ОбъектыНалогообложенияВИменительномПадеже(Форма));
	
	Форма.Элементы.НадписьПоясненияДобавить.Заголовок = ТекстНадписи;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСуммыНалога(Форма)
	
	Объект = Форма.Объект;
	
	СуммыНалога = СверкаСФНСПоИмущественнымНалогамФормы.СуммыНалога(
		Объект.Организация,
		Объект.Налог,
		Объект.НалоговыйПериод,
		Форма.ПараметрыСверки.КодыНалоговыхОрганов);
	
	ЗаполнитьЗначенияСвойств(Форма, СуммыНалога);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНалогаКУплате(Форма, НачальноеЗаполнение = Истина)

	// "Правильная" сумма может быть в расчете программы или в расчете ФНС -
	// это указывает пользователь
	Если НачальноеЗаполнение Тогда
		Для Каждого СтрокаСверки Из Форма.Объект.Сверка Цикл
			Если СтрокаСверки.ПравильныйРасчет = 3 Тогда
				СтрокаСверки.СуммаНалогаКУплате = ?(СтрокаСверки.ОбъектЕстьВРасчетеФНС, СтрокаСверки.СуммаНалогаФНС, 0); 
			Иначе
				СтрокаСверки.СуммаНалогаКУплате = СтрокаСверки.СуммаНалога; 
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;

	Форма.СуммаНалогаКУплате = Форма.Объект.Сверка.Итог("СуммаНалогаКУплате");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстОтличия(Форма, СтрокаСверки)

	// Строки с подтвержденными отличиями выделяются условным оформлением
	СтрокаСверки.РасчетыОтличаются = 
		(СтрокаСверки.ПравильныйРасчет > 1)
		Или Форма.Объект.ЗагруженРасчетФНС И СтрокаСверки.ПравильныйРасчет = 0;
	
	ТекстОтличий = Новый Массив;
	
	Если СтрокаСверки.ПравильныйРасчет = 0 И Форма.Объект.ЗагруженРасчетФНС Тогда
		ТекстОтличий.Добавить(Нстр("ru = 'Есть расхождения';
									|en = 'There are discrepancies'"));
	ИначеЕсли СтрокаСверки.ПравильныйРасчет = 0 Тогда
		ТекстОтличий.Добавить(Нстр("ru = 'Не указаны';
									|en = 'Not specified'"));
	ИначеЕсли СтрокаСверки.ПравильныйРасчет = 1 Тогда
		ТекстОтличий.Добавить(Нстр("ru = 'Расчет совпадает';
									|en = 'Calculations match'"));
	ИначеЕсли СтрокаСверки.ПравильныйРасчет = 2 Тогда
		ТекстОтличий.Добавить(Нстр("ru = 'Ошибка в ФНС:';
									|en = 'FTS error:'"));
		Если Не СтрокаСверки.ОбъектЕстьВРасчетеФНС Тогда
			ТекстОтличий.Добавить(Нстр("ru = 'нет сведений об объекте';
										|en = 'no information about the object'"));
		ИначеЕсли СтрокаСверки.ОбъектЕстьВРасчете Тогда
			ТекстОтличий.Добавить(Нстр("ru = 'неверные сведения';
										|en = 'incorrect data'"));
		Иначе
			ТекстОтличий.Добавить(Нстр("ru = 'лишний объект';
										|en = 'redundant object'"));
		КонецЕсли;
	ИначеЕсли СтрокаСверки.ПравильныйРасчет = 3 Тогда
		ТекстОтличий.Добавить(Нстр("ru = 'Ошибка в нашем расчете:';
									|en = 'This calculation contains an error:'"));
		Если Не СтрокаСверки.ОбъектЕстьВРасчетеФНС Тогда
			ТекстОтличий.Добавить(Нстр("ru = 'лишний объект';
										|en = 'redundant object'"));
		ИначеЕсли СтрокаСверки.ОбъектЕстьВРасчете Тогда
			ТекстОтличий.Добавить(Нстр("ru = 'неверные настройки';
										|en = 'incorrect settings'"));
		Иначе
			ТекстОтличий.Добавить(Нстр("ru = 'объекта нет в учете';
										|en = 'the object is not registered for accounting'"));
		КонецЕсли;
	КонецЕсли;

	СтрокаСверки.ОтличиеСтрокой = СтрСоединить(ТекстОтличий, Символы.ПС);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДействия()

	ОтборДействий = Новый Структура("Действие");

	Для Каждого ШаблонДействия Из ОписаниеДействий.Действия Цикл

		ВсегоОбъектов = 0;
		ТребуетсяДействие = ТребуетсяВыполнениеДействия(ШаблонДействия, ВсегоОбъектов);

		ОтборДействий.Действие = ШаблонДействия.Действие;
		НайденныеДействия = Действия.НайтиСтроки(ОтборДействий);

		Если НайденныеДействия.Количество() > 0 Тогда
			Действие = НайденныеДействия[0];
			Действие.Отображать = ТребуетсяДействие;
		ИначеЕсли ТребуетсяДействие Тогда
			Действие = Действия.Добавить();
			Действие.Действие = ШаблонДействия.Действие;
			Действие.Отображать = Истина;
		Иначе
			// Никаких изменений не требуется
			Продолжить;
		КонецЕсли;

		Если ТребуетсяДействие Тогда
			Если ЗначениеЗаполнено(ШаблонДействия.НадписьВыполнено) И ДействиеВыполнено(ШаблонДействия) Тогда
				// В описаниях выполненных действий нет подставляемых параметров
				Действие.Описание = ШаблонДействия.НадписьВыполнено;
			Иначе
				// Подставляем необходимые параметры в строку описания 
				ПодставляемыеПараметрыОписанияДействия = ПодставляемыеПараметрыОписанияДействия(
					ЭтотОбъект,
					ВсегоОбъектов,
					ШаблонДействия);
				Действие.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
					ШаблонДействия.НадписьНеВыполнено, 
					ПодставляемыеПараметрыОписанияДействия);

				Если ШаблонДействия.НавигационныеСсылки.Найти("ПерейтиКНастройкамОбъектов") <> Неопределено Тогда
					ОбъектыДействия = Объект.Сверка.НайтиСтроки(ОтборДействий);
					ОтборПоОбъектам = Объект.Сверка.Выгрузить(ОбъектыДействия, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");
					СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.УстановитьСпециальныйПараметрНавигационнойСсылки(
						ЭтотОбъект,
						"ПерейтиКНастройкамОбъектов",
						"ОтборПоОбъектам",
						ОтборПоОбъектам);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТребуетсяВыполнениеДействия(ШаблонДействия, ВсегоОбъектов)
	
	// Большинство действий явно указаны в строках сверки для конкретных объектов.
	// Но в то же время некоторые действия могут зависеть от общих условий, 
	// не привязанных к конкретным объектам сверки. 
	// В первую очередь проверяем именно такие условия.
	// Если установлены общие условия, то проверять действие по отдельным объектам не требуется.
	Если ШаблонДействия.ОбщиеУсловия.Количество() > 0 Тогда
		Для каждого УсловиеИзШаблона Из ШаблонДействия.ОбщиеУсловия Цикл
			Если Не ВыполняетсяОбщееУсловие(УсловиеИзШаблона) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	ОтборДействие = Новый Структура("Действие", ШаблонДействия.Действие);
	НайденныеОбъекты = Объект.Сверка.НайтиСтроки(ОтборДействие);
	ВсегоОбъектов = НайденныеОбъекты.Количество();

	Возврат (ВсегоОбъектов > 0);

КонецФункции

&НаСервере
Функция ДействиеВыполнено(ШаблонДействия)
	
	ДействиеВыполнено = Истина;

	Для каждого НавигационнаяСсылкаДействия Из ШаблонДействия.НавигационныеСсылки Цикл
		// Получаем специальные параметры навигационной ссылки с учетом кэша формы. 
		СпециальныеПараметрыНавигационнойСсылки = 
			СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.ПрочитатьСпециальныеПараметрыНавигационнойСсылки(
				ЭтотОбъект, 
				НавигационнаяСсылкаДействия);
		ДействиеВыполнено = СпециальныеПараметрыНавигационнойСсылки.Выполнено;
		Если Не ДействиеВыполнено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла; 
		
	Возврат ДействиеВыполнено;
	
КонецФункции	

&НаСервере
Процедура ИнициализироватьОписаниеДействий()

	ОписаниеДействий = Новый Структура;
	
	ШаблоныДействий = Новый Массив;
	МакетШаблонов = Документы.СверкаСФНСПоИмущественнымНалогам.ПолучитьМакет("ДействияИНавигационныеСсылки");
	
	ОбластьМакета = МакетШаблонов.ПолучитьОбласть("Действия");
	КоличествоШаблонов = ОбластьМакета.ВысотаТаблицы;
	
	Для НомерСтроки = 1 По КоличествоШаблонов Цикл
		
		Шаблон = Новый Структура;
		
		ДействиеСтрокой = ОбластьМакета.Область(НомерСтроки, 1).Текст;
		Шаблон.Вставить("Действие", Перечисления.ДействияСверкиИмущественныхНалогов[ДействиеСтрокой]);
		Шаблон.Вставить("НадписьНеВыполнено", ОбластьМакета.Область(НомерСтроки, 2).Текст);
		Шаблон.Вставить("НадписьВыполнено", ОбластьМакета.Область(НомерСтроки, 3).Текст);
		Шаблон.Вставить("ОбщиеУсловия", СтрРазделить(ОбластьМакета.Область(НомерСтроки, 4).Текст, Символы.ПС, Ложь));
		Шаблон.Вставить("НавигационныеСсылки", СтрРазделить(ОбластьМакета.Область(НомерСтроки, 5).Текст, Символы.ПС, Ложь));
		Шаблон.Вставить("ПодставляемыеПараметры", СтрРазделить(ОбластьМакета.Область(НомерСтроки, 6).Текст, Символы.ПС, Ложь));

		ШаблоныДействий.Добавить(Шаблон);
		
	КонецЦикла;
	
	ОписаниеДействий.Вставить("Действия", ШаблоныДействий);

КонецПроцедуры

&НаСервере
Функция ВыполняетсяОбщееУсловие(Условие)

	Если Условие = "ТребуетсяДоначислить" Тогда
		Возврат СуммаНалогаКУплате > СуммаНалогаНачислено;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасчетыСовпадают(Форма)

	Возврат (Форма.Объект.Сверка.НайтиСтроки(Новый Структура("ПравильныйРасчет", 1)).Количество() =
		Форма.Объект.Сверка.Количество());

КонецФункции

&НаСервере
Процедура ОтобразитьДействияСервер()

	ЗаполнитьДействия();

	ВсегоДействий = 0;
	Для каждого Действие Из Действия Цикл
	
		Если Не Действие.Отображать Тогда
			Продолжить;
		КонецЕсли;

		// До инкрементирования ВсегоДействий == индекс действия 
		Элементы["ГруппаДействие" + ВсегоДействий].Видимость = Истина;
		Элементы["НадписьДействие" + ВсегоДействий].Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Действие.Описание);
		ВсегоДействий = ВсегоДействий + 1;

	КонецЦикла; 

	// Максимум 8 действий. Если какие-то не понадобились, скроем лишние элементы.
	// Индекс последнего выведенного действия = ВсегоДействий - 1. 
	// Поэтому ВсегоДействий == индекс первого неиспользованного действия. 
	Для Индекс = ВсегоДействий По 7 Цикл
		Элементы["ГруппаДействие"+Индекс].Видимость = Ложь;
	КонецЦикла;

	ДействияНеТребуются = (ВсегоДействий = 0);

	Элементы.ГруппаДействияНеТребуются.Видимость = ДействияНеТребуются;

	Если ДействияНеТребуются Тогда
		Если РасчетыСовпадают(ЭтотОбъект) Тогда
			Элементы.НадписьДействияНеТребуются.Заголовок = 
				Нстр("ru = 'Никакие действия не требуются. Можно завершить сверку.';
					|en = 'No action is required. You can complete the reconciliation.'");
		Иначе
			// Действий не требуется, но в каких-то строках не уточнено, сходятся ли расчеты и/или какой расчет верный 
			Элементы.НадписьДействияНеТребуются.Заголовок = 
				Нстр("ru = 'Исходя из текущих данных действия не требуются. Можно завершить сверку.';
					|en = 'Based on the current data, no action is required. You can complete the reconciliation.'");
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаСледующиеДействия.Видимость = Не ДействияНеТребуются;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьКнопки(Форма)

	Элементы = Форма.Элементы;
	Цвета = Форма.ПараметрыСверки.Цвета;
	
	Если Форма.Объект.СравнениеЗавершено Тогда
		Элементы.ГруппаКнопкиФон.ЦветФона = Цвета.ЦветПоУмолчанию;
		Элементы.ПерейтиКДействиям.Доступность = Ложь;
		Элементы.ЗавершитьСверку.Видимость = Истина;
	Иначе
		Элементы.ГруппаКнопкиФон.ЦветФона = Цвета.ЦветФонаАктивнойКнопки;
		Элементы.ПерейтиКДействиям.Доступность = Истина;
		Элементы.ЗавершитьСверку.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектыНалогообложенияВИменительномПадеже(Форма, СЗаглавнойБуквы = Ложь)

	ОбъектыНалогообложения = "";
	Если Форма.ЭтоТранспортныйНалог Тогда
		ОбъектыНалогообложения = Нстр("ru = 'транспортные средства';
										|en = 'vehicles'");
	ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
		ОбъектыНалогообложения = Нстр("ru = 'земельные участки';
										|en = 'land plots'");
	ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
		ОбъектыНалогообложения = Нстр("ru = 'объекты недвижимости';
										|en = 'real estate objects'");
	КонецЕсли;

	Если СЗаглавнойБуквы Тогда
		ОбъектыНалогообложения = ВРег(Лев(ОбъектыНалогообложения, 1)) + Сред(ОбъектыНалогообложения, 2);
	КонецЕсли; 
	
	Возврат ОбъектыНалогообложения; 
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектыНалогообложенияВРодительномПадеже(Форма)

	ОбъектыНалогообложенияВРодительномПадеже = "";
	Если Форма.ЭтоТранспортныйНалог Тогда
		ОбъектыНалогообложенияВРодительномПадеже = Нстр("ru = 'транспортных средств';
														|en = 'vehicles'");
	ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
		ОбъектыНалогообложенияВРодительномПадеже = Нстр("ru = 'земельных участков';
														|en = 'land plots'");
	ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
		ОбъектыНалогообложенияВРодительномПадеже = Нстр("ru = 'объектов недвижимости';
														|en = 'real estate objects'");
	КонецЕсли;

	Возврат ОбъектыНалогообложенияВРодительномПадеже;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПодставляемыеПараметрыОписанияДействия(Форма, КоличествоОбъектов, ШаблонДействия)

	ПодставляемыеПараметры = Новый Структура;

	ПодставляемыеПараметрыДействия = ШаблонДействия.ПодставляемыеПараметры; // массив

	Если ПодставляемыеПараметрыДействия.Найти("ОбОдном") <> Неопределено Тогда 
		ТекстПараметра = Новый Массив;
		ТекстПараметра.Добавить(?(КоличествоОбъектов = 1 Или КоличествоОбъектов = 11, "об", "о")); 
		СклоненнаяСтрокаМассив = ПолучитьСклоненияСтроки(
			СокрЛП(ЧислоПрописью(КоличествоОбъектов, "НД = Ложь", ", , , , , , , , 0")),
			"Л=ru_RU", "ПД=Предложный");
		ТекстПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
		
		ПодставляемыеПараметры.Вставить("ОбОдном", СтрСоединить(ТекстПараметра, " "));
	КонецЕсли;
	
	Если ПодставляемыеПараметрыДействия.Найти("Объектов") <> Неопределено Тогда 
		ПодставляемыеПараметры.Вставить("Объектов", ОбъектыНалогообложенияВРодительномПадеже(Форма));
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("СписокОбъектов") <> Неопределено Тогда 
		ОтборДействие = Новый Структура("Действие", ШаблонДействия.Действие);
		НайденныеОбъекты = Форма.Объект.Сверка.НайтиСтроки(ОтборДействие);
		ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, НайденныеОбъекты);
		ПредставлениеСписка = ?(ЗначениеЗаполнено(ПредставлениеСписка), " " + ПредставлениеСписка, "");
		ПодставляемыеПараметры.Вставить("СписокОбъектов", ПредставлениеСписка);
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("Нем") <> Неопределено Тогда 
		
		ОноЕдинственноеЧисло  = НСтр("ru = 'нем';
									|en = 'it'");
		ОноМножественноеЧисло = НСтр("ru = 'них';
									|en = 'them'");
		
		ПодставляемыеПараметры.Вставить("Нем", // местоимение Он (Оно) в предложном падеже 
			?(КоличествоОбъектов = 1, ОноЕдинственноеЧисло, ОноМножественноеЧисло));
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ОдномуВашемуОбъекту") <> Неопределено Тогда 
		Если Форма.ЭтоТранспортныйНалог Тогда
			СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
				"транспортное средство",
				КоличествоОбъектов,
				"",
				"L=ru_RU; ЧС=Количественное",
				"ПД=Дательный; ПЧ=ЧислоПрописью");
		ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
			СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
				"земельный участок",
				КоличествоОбъектов,
				"",
				"L=ru_RU; ЧС=Количественное",
				"ПД=Дательный; ПЧ=ЧислоПрописью");
		ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
			СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
				"объект недвижимости",
				КоличествоОбъектов,
				"",
				"L=ru_RU; ЧС=Количественное",
				"ПД=Дательный; ПЧ=ЧислоПрописью");
		КонецЕсли;
		ПодставляемыеПараметры.Вставить("ОдномуВашемуОбъекту", НРег(СклоненнаяСтрокаМассив[0]));
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("УничтоженномуТранспортномуСредству") <> Неопределено Тогда 
		СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
			"уничтоженное транспортное средство",
			КоличествоОбъектов,
			"",
			"L=ru_RU; ЧС=Количественное",
			"ПД=Дательный; ПЧ=ЧислоПрописью");
		ПодставляемыеПараметры.Вставить("УничтоженномуТранспортномуСредству", 
			СтрЗаменить(НРег(СклоненнаяСтрокаМассив[0]), "одному", ""));
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ТранспортногоСредства") <> Неопределено Тогда 
		ПодставляемыеПараметры.Вставить("ТранспортногоСредства", 
			?(КоличествоОбъектов > 1, "транспортных средств", "транспортного средства"));
	КонецЕсли;

	// Параметры 
	// - ПоОдномуВашемуОбъектуВФНСНеверныеСведения
	// - ПоОдномуВашемуОбъектуВФНСРасчетЗначительноОтличается
	// - ОдинОбъектПопалВРасчетФНСОшибочно
	// относятся к одному действию (отправить пояснения), зависят друг от друга,
	// и поэтому обрабатываются строго в указанной последовательности.
	ОбъектыСНевернымиСведениями = Новый Массив; // массив строк
	ОбъектыСоЗначительнымиОтличиямиРасчета = Новый Массив; // массив строк
	ОбъектыОтсутствуютВРасчете = Новый Массив; // массив строк
	Если ПодставляемыеПараметрыДействия.Найти("ПоОдномуВашемуОбъектуВФНСНеверныеСведения") <> Неопределено Тогда 

		// Определим, какие сведения нужно сообщить
		ОшибочныеСведения = Новый Массив;
		ОтборДействие = Новый Структура("Действие", ШаблонДействия.Действие);
		НайденныеОбъекты = Форма.Объект.Сверка.НайтиСтроки(ОтборДействие);
		// Для пояснений в ФНС запоминаем ошибки по каждому объекту
		Форма.ОшибкиДетально.Очистить();
		Для Каждого СтрокаСверки Из НайденныеОбъекты Цикл
			НайтиОшибочныеСведенияВРасчете(
				Форма,
				СтрокаСверки,
				ОшибочныеСведения);
			Если Не СтрокаСверки.ОбъектЕстьВРасчете Тогда
				// Про такие объекты пишем отдельно - см. ОдинОбъектПопалВРасчетФНСОшибочно
				ОбъектыОтсутствуютВРасчете.Добавить(СтрокаСверки);
				Продолжить;
			КонецЕсли;
			Если СтрокаСверки.ПоляРасхождений = "Все" Тогда
				// Про такие объекты пишем отдельно - см. ПоОдномуВашемуОбъектуВФНСРасчетЗначительноОтличается
				ОбъектыСоЗначительнымиОтличиямиРасчета.Добавить(СтрокаСверки);
			Иначе
				ОбъектыСНевернымиСведениями.Добавить(СтрокаСверки);
			КонецЕсли;
		КонецЦикла;

		Если ОбъектыСНевернымиСведениями.Количество() = 0 Тогда
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуВФНСНеверныеСведения", ""); 
		Иначе
			ПредставлениеПараметра = Новый Массив;
			ПредставлениеПараметра.Добавить(Нстр("ru = 'По';
												|en = 'By'"));
			Если Форма.ЭтоТранспортныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"транспортное средство",
					ОбъектыСНевернымиСведениями.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"земельный участок",
					ОбъектыСНевернымиСведениями.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"объект недвижимости",
					ОбъектыСНевернымиСведениями.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			КонецЕсли;
			ПредставлениеПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
			ПредставлениеПараметра.Добавить(Нстр("ru = 'в ФНС неверные сведения о';
												|en = 'FTS has incorrect information about'"));
			
			ОшибочныеСведенияВПредложномПадеже = Новый Массив;
			Для Каждого ИмяПоказателя Из ОшибочныеСведения Цикл 
				НаименованияПоказателя = СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.НаименованияПоказателяРасчета(
					ИмяПоказателя,
					СтрокаСверки.ЕдиницаИзмерения);
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтроки(
					НаименованияПоказателя.СодержательноеНаименование,
					"L=ru_RU",
					"ПД=Предложный");
				ОшибочныеСведенияВПредложномПадеже.Добавить(СклоненнаяСтрокаМассив[0]);
			КонецЦикла;
			
			Если ОшибочныеСведенияВПредложномПадеже.Количество() > 2 Тогда
				ПоследнийЭлемент = ОшибочныеСведенияВПредложномПадеже[ОшибочныеСведенияВПредложномПадеже.Количество() - 1];
				ОшибочныеСведенияВПредложномПадеже.Удалить(ОшибочныеСведенияВПредложномПадеже.Количество() - 1);
				СписокСведений = СтрСоединить(ОшибочныеСведенияВПредложномПадеже, ", ");
				СписокСведений = СтрШаблон(Нстр("ru = '%1 и (или) %2';
												|en = '%1 and (or) %2'"), СписокСведений, ПоследнийЭлемент);
			Иначе
				СписокСведений = СтрСоединить(ОшибочныеСведенияВПредложномПадеже, Нстр("ru = ' и (или)';
																						|en = ' and (or)'") + " ");
			КонецЕсли;
			
			ПредставлениеПараметра.Добавить(СписокСведений);
			// Перечисляем объекты
			ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, ОбъектыСНевернымиСведениями);
			Если ЗначениеЗаполнено(ПредставлениеСписка) Тогда
				ПредставлениеПараметра.Добавить(ПредставлениеСписка);
			КонецЕсли;
			ПредставлениеПараметра = СтрСоединить(ПредставлениеПараметра, " ") + ". ";
			
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуВФНСНеверныеСведения", ПредставлениеПараметра); 
		КонецЕсли; 

	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ПоОдномуВашемуОбъектуВФНСРасчетЗначительноОтличается") <> Неопределено Тогда
		Если ОбъектыСоЗначительнымиОтличиямиРасчета.Количество() > 0 Тогда
			ПредставлениеПараметра = Новый Массив;
			Если ОбъектыСНевернымиСведениями.Количество() > 0 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'Еще по';
													|en = 'Also by'"));
			Иначе
				ПредставлениеПараметра.Добавить(Нстр("ru = 'По';
													|en = 'By'"));
			КонецЕсли;
			Если Форма.ЭтоТранспортныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"транспортное средство",
					ОбъектыСоЗначительнымиОтличиямиРасчета.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"земельный участок",
					ОбъектыСоЗначительнымиОтличиямиРасчета.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"объект недвижимости",
					ОбъектыСоЗначительнымиОтличиямиРасчета.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			КонецЕсли;
			ПредставлениеПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
			Если ОбъектыСоЗначительнымиОтличиямиРасчета.Количество() > 1 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'расчеты значительно отличаются';
													|en = 'calculations differ significantly'"));
			Иначе
				ПредставлениеПараметра.Добавить(Нстр("ru = 'расчет значительно отличается';
													|en = 'calculation differs significantly'"));
			КонецЕсли;
			// Перечисляем объекты
			ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, ОбъектыСоЗначительнымиОтличиямиРасчета);
			Если ЗначениеЗаполнено(ПредставлениеСписка) Тогда
				ПредставлениеПараметра.Добавить(ПредставлениеСписка);
			КонецЕсли;
			ПредставлениеПараметра = СтрСоединить(ПредставлениеПараметра, " ") + ". ";
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуВФНСРасчетЗначительноОтличается", ПредставлениеПараметра); 
		Иначе
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуВФНСРасчетЗначительноОтличается", ""); 
		КонецЕсли;
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ОдинОбъектПопалВРасчетФНСОшибочно") <> Неопределено Тогда
		Если ОбъектыОтсутствуютВРасчете.Количество() > 0 Тогда
			ПредставлениеПараметра = Новый Массив;
			Если Форма.ЭтоТранспортныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"транспортное средство",
					ОбъектыОтсутствуютВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"земельный участок",
					ОбъектыОтсутствуютВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"объект недвижимости",
					ОбъектыОтсутствуютВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			КонецЕсли;
			Если ОбъектыСНевернымиСведениями.Количество() > 0
				 Или ОбъектыСоЗначительнымиОтличиямиРасчета.Количество() > 0 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'Еще';
													|en = 'Also'"));
				ПредставлениеПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
			Иначе
				ПредставлениеПараметра.Добавить(СклоненнаяСтрокаМассив[0]);
			КонецЕсли;
			Если ОбъектыОтсутствуютВРасчете.Количество() > 1 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попали';
													|en = 'are included'"));
			ИначеЕсли Форма.ЭтоТранспортныйНалог Тогда
				// транспортное средство
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попало';
													|en = 'is included'"));
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				// земельный участок
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попал';
													|en = 'is included'"));
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				// объект недвижимости
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попал';
													|en = 'is included'"));
			КонецЕсли; 
			ПредставлениеПараметра.Добавить(Нстр("ru = 'в расчет ФНС ошибочно';
												|en = 'in the FTS calculation by mistake'"));
			// Перечисляем объекты
			ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, ОбъектыОтсутствуютВРасчете);
			Если ЗначениеЗаполнено(ПредставлениеСписка) Тогда
				ПредставлениеПараметра.Добавить(ПредставлениеСписка);
			КонецЕсли;
			ПредставлениеПараметра = СтрСоединить(ПредставлениеПараметра, " ") + ". ";
			ПодставляемыеПараметры.Вставить("ОдинОбъектПопалВРасчетФНСОшибочно", ПредставлениеПараметра); 
		Иначе
			ПодставляемыеПараметры.Вставить("ОдинОбъектПопалВРасчетФНСОшибочно", ""); 
		КонецЕсли;
	КонецЕсли;
	
	// Параметры 
	// - ПоОдномуВашемуОбъектуВПрограммеНеверныеСведения
	// - ПоОдномуВашемуОбъектуРасчетЗначительноОтличается
	// - ОдинОбъектОшибочноНеПопалВРасчет
	// - ОдинОбъектОшибочноПопалВРасчет
	// относятся к одному действию (изменить настройки в программе), зависят друг от друга,
	// и поэтому обрабатываются строго в указанной последовательности.
	ОбъектыСНевернымиСведениями = Новый Массив; // массив строк
	ОбъектыСоЗначительнымиОтличиямиРасчета = Новый Массив; // массив строк
	ОбъектыОтсутствуютВРасчете = Новый Массив; // массив строк
	ОбъектыНеДолжныБытьВРасчете = Новый Массив; // массив строк
	Если ПодставляемыеПараметрыДействия.Найти("ПоОдномуВашемуОбъектуВПрограммеНеверныеСведения") <> Неопределено Тогда 

		// Определим, какие сведения расходятся, чтобы их перечислить в описании действия
		ОшибочныеСведения = Новый Массив;
		ОтборДействие = Новый Структура("Действие", ШаблонДействия.Действие);
		НайденныеОбъекты = Форма.Объект.Сверка.НайтиСтроки(ОтборДействие);
		Для Каждого СтрокаСверки Из НайденныеОбъекты Цикл
			Если Не СтрокаСверки.ОбъектЕстьВРасчете Тогда
				// Про такие объекты пишем отдельно - см. ОдинОбъектОшибочноНеПопалВРасчет
				ОбъектыОтсутствуютВРасчете.Добавить(СтрокаСверки);
				Продолжить;
			КонецЕсли;
			Если Не СтрокаСверки.ОбъектЕстьВРасчетеФНС Тогда
				// Про такие объекты пишем отдельно - см. ОдинОбъектОшибочноПопалВРасчет
				ОбъектыНеДолжныБытьВРасчете.Добавить(СтрокаСверки);
				Продолжить;
			КонецЕсли;
			Если СтрокаСверки.ПоляРасхождений = "Все" Тогда
				// Про такие объекты пишем отдельно - см. ПоОдномуВашемуОбъектуРасчетЗначительноОтличается
				ОбъектыСоЗначительнымиОтличиямиРасчета.Добавить(СтрокаСверки);
			Иначе
				ОбъектыСНевернымиСведениями.Добавить(СтрокаСверки);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОшибочныеСведения,
					СтрРазделить(СтрокаСверки.ПоляРасхождений, ","),
					Истина);
			КонецЕсли;
		КонецЦикла;

		Если ОбъектыСНевернымиСведениями.Количество() = 0 Тогда
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуВПрограммеНеверныеСведения", ""); 
		Иначе
			ПредставлениеПараметра = Новый Массив;
			ПредставлениеПараметра.Добавить(Нстр("ru = 'По';
												|en = 'By'"));
			Если Форма.ЭтоТранспортныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"транспортное средство",
					ОбъектыСНевернымиСведениями.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"земельный участок",
					ОбъектыСНевернымиСведениями.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"объект недвижимости",
					ОбъектыСНевернымиСведениями.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			КонецЕсли;
			ПредставлениеПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
			ПредставлениеПараметра.Добавить(НСтр("ru = 'в программе неверные сведения о';
												|en = 'the application contains incorrect information about'"));
			
			ОшибочныеСведенияВПредложномПадеже = Новый Массив;
			Для Каждого ИмяПоказателя Из ОшибочныеСведения Цикл
				Если ЗначениеЗаполнено(ИмяПоказателя) Тогда
					НаименованияПоказателя = СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.НаименованияПоказателяРасчета(
												ИмяПоказателя,
												СтрокаСверки.ЕдиницаИзмерения);
												
					СклоненнаяСтрокаМассив = ПолучитьСклоненияСтроки(
												НаименованияПоказателя.СодержательноеНаименование,
												"L=ru_RU",
												"ПД=Предложный"); 
												
					ОшибочныеСведенияВПредложномПадеже.Добавить(СклоненнаяСтрокаМассив[0]);
				КонецЕсли;
			КонецЦикла;
			
			Если ОшибочныеСведенияВПредложномПадеже.Количество() > 2 Тогда
				ПоследнийЭлемент = ОшибочныеСведенияВПредложномПадеже[ОшибочныеСведенияВПредложномПадеже.Количество() - 1];
				ОшибочныеСведенияВПредложномПадеже.Удалить(ОшибочныеСведенияВПредложномПадеже.Количество() - 1);
				СписокСведений = СтрСоединить(ОшибочныеСведенияВПредложномПадеже, ", ");
				СписокСведений = СтрШаблон(Нстр("ru = '%1 и (или) %2';
												|en = '%1 and (or) %2'"), СписокСведений, ПоследнийЭлемент);
			Иначе
				СписокСведений = СтрСоединить(ОшибочныеСведенияВПредложномПадеже, Нстр("ru = ' и (или)';
																						|en = ' and (or)'") + " ");
			КонецЕсли;
			ПредставлениеПараметра.Добавить(СписокСведений);
			// Перечисляем объекты
			ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, ОбъектыСНевернымиСведениями);
			Если ЗначениеЗаполнено(ПредставлениеСписка) Тогда
				ПредставлениеПараметра.Добавить(ПредставлениеСписка);
			КонецЕсли;
			ПредставлениеПараметра = СтрСоединить(ПредставлениеПараметра, " ") + ". ";
			
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуВПрограммеНеверныеСведения", ПредставлениеПараметра); 
		КонецЕсли; 

	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ПоОдномуВашемуОбъектуРасчетЗначительноОтличается") <> Неопределено Тогда
		Если ОбъектыСоЗначительнымиОтличиямиРасчета.Количество() > 0 Тогда
			ПредставлениеПараметра = Новый Массив;
			Если ОбъектыСНевернымиСведениями.Количество() > 0 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'Еще по';
													|en = 'Also by'"));
			Иначе
				ПредставлениеПараметра.Добавить(Нстр("ru = 'По';
													|en = 'By'"));
			КонецЕсли;
			Если Форма.ЭтоТранспортныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"транспортное средство",
					ОбъектыСоЗначительнымиОтличиямиРасчета.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"земельный участок",
					ОбъектыСоЗначительнымиОтличиямиРасчета.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"объект недвижимости",
					ОбъектыСоЗначительнымиОтличиямиРасчета.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Дательный; ПЧ=ЧислоПрописью");
			КонецЕсли;
			ПредставлениеПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
			Если ОбъектыСоЗначительнымиОтличиямиРасчета.Количество() > 1 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'расчеты значительно отличаются';
													|en = 'calculations differ significantly'"));
			Иначе
				ПредставлениеПараметра.Добавить(Нстр("ru = 'расчет значительно отличается';
													|en = 'calculation differs significantly'"));
			КонецЕсли;
			ПредставлениеПараметра.Добавить(СписокСведений);
			// Перечисляем объекты
			ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, ОбъектыСоЗначительнымиОтличиямиРасчета);
			Если ЗначениеЗаполнено(ПредставлениеСписка) Тогда
				ПредставлениеПараметра.Добавить(ПредставлениеСписка);
			КонецЕсли;
			ПредставлениеПараметра = СтрСоединить(ПредставлениеПараметра, " ") + ". ";
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуРасчетЗначительноОтличается", ПредставлениеПараметра); 
		Иначе
			ПодставляемыеПараметры.Вставить("ПоОдномуВашемуОбъектуРасчетЗначительноОтличается", ""); 
		КонецЕсли;
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ОдинОбъектОшибочноНеПопалВРасчет") <> Неопределено Тогда
		Если ОбъектыОтсутствуютВРасчете.Количество() > 0 Тогда
			ПредставлениеПараметра = Новый Массив;
			Если Форма.ЭтоТранспортныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"транспортное средство",
					ОбъектыОтсутствуютВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"земельный участок",
					ОбъектыОтсутствуютВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"объект недвижимости",
					ОбъектыОтсутствуютВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			КонецЕсли;
			Если ОбъектыСНевернымиСведениями.Количество() > 0 
				 Или ОбъектыСоЗначительнымиОтличиямиРасчета.Количество() > 0 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'Еще';
													|en = 'Also'"));
				ПредставлениеПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
			Иначе
				ПредставлениеПараметра.Добавить(СклоненнаяСтрокаМассив[0]);
			КонецЕсли;
			Если ОбъектыОтсутствуютВРасчете.Количество() > 1 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'ошибочно не попали';
													|en = 'are not included by mistake'"));
			ИначеЕсли Форма.ЭтоТранспортныйНалог Тогда
				// транспортное средство
				ПредставлениеПараметра.Добавить(Нстр("ru = 'ошибочно не попало';
													|en = 'is not included by mistake'"));
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				// земельный участок
				ПредставлениеПараметра.Добавить(Нстр("ru = 'ошибочно не попал';
													|en = 'is not included by mistake'"));
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				// объект недвижимости
				ПредставлениеПараметра.Добавить(Нстр("ru = 'ошибочно не попал';
													|en = 'is not included by mistake'"));
			КонецЕсли; 
			ПредставлениеПараметра.Добавить(Нстр("ru = 'в расчет';
												|en = 'in calculation'"));
			// Перечисляем объекты
			ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, ОбъектыОтсутствуютВРасчете);
			Если ЗначениеЗаполнено(ПредставлениеСписка) Тогда
				ПредставлениеПараметра.Добавить(ПредставлениеСписка);
			КонецЕсли;
			ПредставлениеПараметра = СтрСоединить(ПредставлениеПараметра, " ") + ". ";
			ПодставляемыеПараметры.Вставить("ОдинОбъектОшибочноНеПопалВРасчет", ПредставлениеПараметра); 
		Иначе
			ПодставляемыеПараметры.Вставить("ОдинОбъектОшибочноНеПопалВРасчет", ""); 
		КонецЕсли;
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ОдинОбъектОшибочноПопалВРасчет") <> Неопределено Тогда
		Если ОбъектыНеДолжныБытьВРасчете.Количество() > 0 Тогда
			ПредставлениеПараметра = Новый Массив;
			Если Форма.ЭтоТранспортныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"транспортное средство",
					ОбъектыНеДолжныБытьВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"земельный участок",
					ОбъектыНеДолжныБытьВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
					"объект недвижимости",
					ОбъектыНеДолжныБытьВРасчете.Количество(),
					"",
					"L=ru_RU; ЧС=Количественное",
					"ПД=Именительный; ПЧ=ЧислоПрописью");
			КонецЕсли;
			Если ОбъектыСНевернымиСведениями.Количество() > 0 
				 Или ОбъектыСоЗначительнымиОтличиямиРасчета.Количество() > 0 
				 Или ОбъектыОтсутствуютВРасчете.Количество() > 0 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'Еще';
													|en = 'Also'"));
				ПредставлениеПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
			Иначе
				ПредставлениеПараметра.Добавить(СклоненнаяСтрокаМассив[0]);
			КонецЕсли;
			Если ОбъектыНеДолжныБытьВРасчете.Количество() > 1 Тогда
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попали';
													|en = 'are included'"));
			ИначеЕсли Форма.ЭтоТранспортныйНалог Тогда
				// транспортное средство
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попало';
													|en = 'is included'"));
			ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
				// земельный участок
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попал';
													|en = 'is included'"));
			ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
				// объект недвижимости
				ПредставлениеПараметра.Добавить(Нстр("ru = 'попал';
													|en = 'is included'"));
			КонецЕсли; 
			ПредставлениеПараметра.Добавить(Нстр("ru = 'в расчет ошибочно';
												|en = 'in calculation by mistake'"));
			// Перечисляем объекты
			ПредставлениеСписка = ПредставлениеСпискаОбъектов(Форма, ОбъектыНеДолжныБытьВРасчете);
			Если ЗначениеЗаполнено(ПредставлениеСписка) Тогда
				ПредставлениеПараметра.Добавить(ПредставлениеСписка);
			КонецЕсли;
			ПредставлениеПараметра = СтрСоединить(ПредставлениеПараметра, " ") + ". ";
			ПодставляемыеПараметры.Вставить("ОдинОбъектОшибочноПопалВРасчет", ПредставлениеПараметра); 
		Иначе
			ПодставляемыеПараметры.Вставить("ОдинОбъектОшибочноПопалВРасчет", ""); 
		КонецЕсли;
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("СуммаНалогаКУплате") <> Неопределено Тогда 
		ПодставляемыеПараметры.Вставить("СуммаНалогаКУплате", Формат(Форма.СуммаНалогаКУплате, "ЧН="));
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("СуммаНалогаНачислено") <> Неопределено Тогда 
		ПодставляемыеПараметры.Вставить("СуммаНалогаНачислено", Формат(Форма.СуммаНалогаНачислено, "ЧН="));
	КонецЕсли; 
	
	Если ПодставляемыеПараметрыДействия.Найти("СуммаДоначисления") <> Неопределено Тогда 
		ПодставляемыеПараметры.Вставить("СуммаДоначисления", 
											Формат(Форма.СуммаНалогаКУплате - Форма.СуммаНалогаНачислено, "ЧН="));
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ОбОдномОбъекте") <> Неопределено Тогда 

		ТипОбъекта = "";

		Если Форма.ЭтоТранспортныйНалог Тогда
			ТипОбъекта = "транспортное средство";
		ИначеЕсли Форма.ЭтоЗемельныйНалог Тогда
			ТипОбъекта = "земельный участок";
		ИначеЕсли Форма.ЭтоНалогНаИмущество Тогда
			ТипОбъекта = "объект недвижимости";
		КонецЕсли;

		ТекстПараметра = Новый Массив;
		ОМножественноеЧисло = НСтр("ru = 'о';
									|en = 'about'");
		ОЕдинственноеЧисло = НСтр("ru = 'об';
									|en = 'about'");
		
		ТекстПараметра.Добавить(?(КоличествоОбъектов = 1 Или КоличествоОбъектов = 11, 
									ОЕдинственноеЧисло, 
									ОМножественноеЧисло)); 

		СклоненнаяСтрокаМассив = ПолучитьСклоненияСтрокиПоЧислу(
			ТипОбъекта,
			КоличествоОбъектов,
			"",
			"L=ru_RU; ЧС=Количественное",
			"ПД=Предложный; ПЧ=ЧислоПрописью");

		ТекстПараметра.Добавить(НРег(СклоненнаяСтрокаМассив[0]));
		ПодставляемыеПараметры.Вставить("ОбОдномОбъекте", СтрСоединить(ТекстПараметра, " "));

	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("ПоКоторому") <> Неопределено Тогда 
		КоторыйЕдинственноеЧисло  = НСтр("ru = 'по которому';
										|en = 'for which'");
		КоторыйМножественноеЧисло = НСтр("ru = 'по которым';
										|en = 'for which'");
		
		ПодставляемыеПараметры.Вставить("ПоКоторому",
											?(КоличествоОбъектов = 1,
												КоторыйЕдинственноеЧисло, 
												КоторыйМножественноеЧисло));
	КонецЕсли;

	Если ПодставляемыеПараметрыДействия.Найти("Принято") <> Неопределено Тогда
		ПринятоЕдинственноеЧисло  = НСтр("ru = 'принято';
										|en = 'accepted'");
		ПринятоМножественноеЧисло = НСтр("ru = 'приняты';
										|en = 'accepted'");
		
		ПодставляемыеПараметры.Вставить("Принято",
											?(КоличествоОбъектов = 1, 
												ПринятоЕдинственноеЧисло, 
												ПринятоМножественноеЧисло));
	КонецЕсли;

	Возврат ПодставляемыеПараметры;

КонецФункции

&НаСервереБезКонтекста
Процедура НайтиОшибочныеСведенияВРасчете(Форма, СтрокаСверки, ОшибочныеСведения)

	Если Не СтрокаСверки.ОбъектЕстьВРасчете Тогда
		// Требуется только описание объекта для пояснений
		ЗаполнитьЗначенияСвойств(Форма.ОшибкиДетально.Добавить(), СтрокаСверки);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаСверки.ПоляРасхождений) Тогда
		Возврат;
	КонецЕсли;

	СтрокаОшибок = Форма.ОшибкиДетально.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОшибок, СтрокаСверки);

	СтрокаОшибок.Пояснения = НовыеПояснения();

	ОтборСтрокРасчета = Новый Структура("ИдентификаторСтроки", СтрокаСверки.ИдентификаторСтроки);
	СтрокиРасчета = Форма.Объект.Расчет.НайтиСтроки(ОтборСтрокРасчета);
	
	ПоляСтрокРасчета = СверкаСФНСПоИмущественнымНалогамФормы.ПоляСтрокРасчета(Форма.Объект.Налог, Форма.Объект.НалоговыйПериод); 

	Если СтрокаСверки.ПоляРасхождений = "Все"
		 Или СтрокиРасчета.Количество() > 1 Тогда
		// Если в расчетах разное количество строк или же расчеты многострочные,
		// то в пояснениях показываем весь расчет целиком, а не только отличающиеся параметры
		Для каждого СтрокаРасчета Из СтрокиРасчета Цикл
			СтрокаРасчетаСтруктурой = Новый Структура(СтрСоединить(ПоляСтрокРасчета, ","));
			ЗаполнитьЗначенияСвойств(СтрокаРасчетаСтруктурой, СтрокаРасчета);
			СтрокаОшибок.Пояснения.ПравильныйРасчет.СтрокиРасчета.Добавить(СтрокаРасчетаСтруктурой);
		КонецЦикла;
		СтрокаОшибок.Пояснения.ПравильныйРасчет.СуммаЛьгот = СтрокаСверки.СуммаЛьгот;
		СтрокаОшибок.Пояснения.ПравильныйРасчет.СуммаНалога = СтрокаСверки.СуммаНалога;
	КонецЕсли;

	Если СтрокаСверки.ПоляРасхождений <> "Все" Тогда
		// Если в расчетах равное количество строк, и отличаются только отдельные параметры,
		// то перечислим их в пояснениях.
		ПоляРасхождений = СтрРазделить(СтрокаСверки.ПоляРасхождений, ",");

		ПоследнийПоказатель = ""; // для учета изменений в полях доли права
		Для Каждого ИмяСвойства Из ПоляРасхождений Цикл

			// Избегаем дублирования: например ДоляВПравеЧислитель и ДоляВПравеЗнаменатель - это "доля в праве"
			Если ПоследнийПоказатель = ИмяСвойства Тогда
				Продолжить;
			КонецЕсли;

			ПоследнийПоказатель = ИмяСвойства;

			// Текущее поле уже может быть в ОшибочныеСведения - из другой строки расчета
			Если ОшибочныеСведения.Найти(ИмяСвойства) = Неопределено Тогда
				ОшибочныеСведения.Добавить(ИмяСвойства);
			КонецЕсли;

			Если ИмяСвойства = "ДоляВПравеЧислитель" Или ИмяСвойства = "ДоляВПравеЗнаменатель" Тогда
				СтрокаОшибок.Пояснения.ПравильныеЗначения.Вставить(
					"ДоляВПраве",
					Строка(СтрокиРасчета[0].ДоляВПравеЧислитель) + "/" + СтрокиРасчета[0].ДоляВПравеЗнаменатель);
			ИначеЕсли ИмяСвойства = "СуммаЛьгот" Или ИмяСвойства = "СуммаНалога" Тогда
				СтрокаОшибок.Пояснения.ПравильныеЗначения.Вставить(ИмяСвойства, СтрокаСверки[ИмяСвойства]);
			Иначе
				СтрокаОшибок.Пояснения.ПравильныеЗначения.Вставить(ИмяСвойства, СтрокиРасчета[0][ИмяСвойства]);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Новые пояснения.
// 
// Возвращаемое значение:
//  Структура - Новые пояснения:
// * ПравильныеЗначения - Структура -
// * ПравильныйРасчет - Структура -
&НаСервереБезКонтекста
Функция НовыеПояснения()

	Пояснения = Новый Структура;
	Пояснения.Вставить("ПравильныеЗначения", Новый Структура); 	// структура со значениями полей расчета 
																// (ключ - имя показателя, см. СверкаСФНСПоИмущественнымНалогамФормы.ПоляСтрокРасчета())
	Пояснения.Вставить("ПравильныйРасчет", Новый Структура);
	Пояснения.ПравильныйРасчет.Вставить("СтрокиРасчета", Новый Массив); // массив структур со значениями полей расчета
	Пояснения.ПравильныйРасчет.Вставить("СуммаЛьгот", 0);
	Пояснения.ПравильныйРасчет.Вставить("СуммаНалога", 0);

	Возврат Пояснения;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеСпискаОбъектов(Форма, СтрокиСверки)
	
	Если СтрокиСверки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	
	Для каждого СтрокаСверки Из СтрокиСверки Цикл
		
		ПредставлениеОбъекта = "";
		ЧастиПредставления = Новый Массив;
		Если ЗначениеЗаполнено(СтрокаСверки.НаименованиеОбъекта) Тогда
			ЧастиПредставления.Добавить(СокрЛП(СтрокаСверки.НаименованиеОбъекта));
		КонецЕсли;
			
		Если Форма.ЭтоТранспортныйНалог Тогда
			Если ЗначениеЗаполнено(СтрокаСверки.РегистрационныйЗнак)
				 И СтрНайти(СтрокаСверки.НаименованиеОбъекта, СтрокаСверки.РегистрационныйЗнак) = 0 Тогда
				ЧастиПредставления.Добавить(СокрЛП(СтрокаСверки.РегистрационныйЗнак));
			КонецЕсли;
		ИначеЕсли Форма.ЭтоЗемельныйНалог Или Форма.ЭтоНалогНаИмущество Тогда
			Если ЗначениеЗаполнено(СтрокаСверки.КадастровыйНомер)
				 И СтрНайти(СтрокаСверки.НаименованиеОбъекта, СтрокаСверки.КадастровыйНомер) = 0 Тогда
				ЧастиПредставления.Добавить(СокрЛП(СтрокаСверки.КадастровыйНомер));
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеОбъекта = СтрСоединить(ЧастиПредставления, ", ");
		
		Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
			МассивОбъектов.Добавить(ПредставлениеОбъекта);
		КонецЕсли;
		
	КонецЦикла; 
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат "(" + СтрСоединить(МассивОбъектов, "; ") + ")";
	
КонецФункции

&НаСервере
Функция ПараметрыФормыОтличий(ТекущаяСтрока)

		ТекущиеДанные = Объект.Сверка.НайтиПоИдентификатору(ТекущаяСтрока);
	
		ПараметрыФормыОтличий = Новый Структура;
		ПараметрыФормыОтличий.Вставить("Организация", Объект.Организация);
		ПараметрыФормыОтличий.Вставить("Налог", Объект.Налог);
		ПараметрыФормыОтличий.Вставить("НалоговыйПериод", Объект.НалоговыйПериод);
		ПараметрыФормыОтличий.Вставить("ЗагруженРасчетФНС", Объект.ЗагруженРасчетФНС);
		ПараметрыФормыОтличий.Вставить("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство);
		ПараметрыФормыОтличий.Вставить("НаименованиеОбъекта", ТекущиеДанные.НаименованиеОбъекта);
		ПараметрыФормыОтличий.Вставить("РегистрационныйЗнак", ТекущиеДанные.РегистрационныйЗнак);
		ПараметрыФормыОтличий.Вставить("КадастровыйНомер", ТекущиеДанные.КадастровыйНомер);
		ПараметрыФормыОтличий.Вставить("КодВидаТС", ТекущиеДанные.КодВидаТС);
		ПараметрыФормыОтличий.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
		ПараметрыФормыОтличий.Вставить("ДатаПостановкиНаУчет", ТекущиеДанные.ДатаПостановкиНаУчет);
		ПараметрыФормыОтличий.Вставить("ДатаСнятияСУчета", ТекущиеДанные.ДатаСнятияСУчета);
		ПараметрыФормыОтличий.Вставить("ПричинаСнятияСУчета", ТекущиеДанные.ПричинаСнятияСУчета);
		ПараметрыФормыОтличий.Вставить("КодНалоговогоОргана", ТекущиеДанные.КодНалоговогоОргана);
		ПараметрыФормыОтличий.Вставить("КодПоОКТМО", ТекущиеДанные.КодПоОКТМО);
		ПараметрыФормыОтличий.Вставить("СуммаЛьгот", ТекущиеДанные.СуммаЛьгот);
		ПараметрыФормыОтличий.Вставить("СуммаЛьготФНС", ТекущиеДанные.СуммаЛьготФНС);
		ПараметрыФормыОтличий.Вставить("СуммаНалога", ТекущиеДанные.СуммаНалога);
		ПараметрыФормыОтличий.Вставить("СуммаНалогаФНС", ТекущиеДанные.СуммаНалогаФНС);
		ПараметрыФормыОтличий.Вставить("ДобавленоВручную", ТекущиеДанные.ДобавленоВручную);
		ПараметрыФормыОтличий.Вставить("ОбъектЕстьВРасчете", ТекущиеДанные.ОбъектЕстьВРасчете);
		ПараметрыФормыОтличий.Вставить("ОбъектЕстьВРасчетеФНС", ТекущиеДанные.ОбъектЕстьВРасчетеФНС);
		ПараметрыФормыОтличий.Вставить("ПравильныйРасчет", ТекущиеДанные.ПравильныйРасчет);
		ПараметрыФормыОтличий.Вставить("ПоляРасхождений", ТекущиеДанные.ПоляРасхождений);

		ПараметрыФормыОтличий.Вставить("АдресТаблицаРасчет", 
			ПоместитьВоВременноеХранилище(
				Объект.Расчет.Выгрузить(Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки)), УникальныйИдентификатор));

		ПараметрыФормыОтличий.Вставить("АдресТаблицаРасчетФНС", 
			ПоместитьВоВременноеХранилище(
				Объект.РасчетФНС.Выгрузить(Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки)), УникальныйИдентификатор));

		ПараметрыФормыОтличий.Вставить("ТолькоПросмотр", ТолькоПросмотр);

		Возврат ПараметрыФормыОтличий;

КонецФункции

&НаСервере
Процедура ЗагрузитьДеталиРасчетаФНС(ТекущаяСтрока, АдресТаблицаРасчетФНС)

	ИдентификаторСтроки = Объект.Сверка.НайтиПоИдентификатору(ТекущаяСтрока).ИдентификаторСтроки;
	
	Для каждого СтрокаУдалить Из Объект.РасчетФНС.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки)) Цикл
		Объект.РасчетФНС.Удалить(СтрокаУдалить);
	КонецЦикла; 

	ТаблицаРасчетФНС = ПолучитьИзВременногоХранилища(АдресТаблицаРасчетФНС);
	УдалитьИзВременногоХранилища(АдресТаблицаРасчетФНС);
	
	Для каждого СтрокаРасчетаФНС Из ТаблицаРасчетФНС Цикл
		НоваяСтрока = Объект.РасчетФНС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетаФНС);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередРедактированиемСверки(ОповещениеПриПодтверждении)

	Если Не Объект.СравнениеЗавершено
		 Или (Объект.ЗагруженРасчетФНС И РасчетыСовпадают(ЭтотОбъект)) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриПодтверждении);
	Иначе
		// Если сравнение завершено, то предупредим пользователя, что при открытии формы сравнения
		// признак будет сброшен
		ТекстВопроса = Нстр("ru = 'Сверка будет возвращена в режим редактирования, а действия скрыты.
			|Чтобы вновь сформировать список действий, нужно будет подтвердить, что расчеты сверены.';
			|en = 'The reconciliation will be returned to the edit mode, and the actions will be hidden.
			|To generate the list of actions again, confirm that the calculations are reconciled.'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.ПС, " ");
		ТекстВопроса = ТекстВопроса
						+ Символы.ПС
						+ Символы.ПС
						+ Нстр("ru = 'Продолжить?';
								|en = 'Continue?'");
		
		ОповещениеОбработкиОтвета = Новый ОписаниеОповещения("ПередРедактированиемСверкиОбработкаОтвета",
																ЭтотОбъект,
																ОповещениеПриПодтверждении);
						
		ПоказатьВопрос( ОповещениеОбработкиОтвета,
						ТекстВопроса,
						РежимДиалогаВопрос.ДаНет,
						,
						,
						Нстр("ru = 'Подтвердите редактирование сверки';
							|en = 'Confirm that the reconciliation is edited'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередРедактированиемСверкиОбработкаОтвета(Ответ, ОповещениеПриПодтверждении) Экспорт 

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Объект.СравнениеЗавершено = Ложь;
	НастроитьКнопки(ЭтотОбъект);
	Элементы.ГруппаСледующиеДействия.Видимость = Ложь;

	ВыполнитьОбработкуОповещения(ОповещениеПриПодтверждении);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСверки(Результат, ВыбраннаяСтрока) Экспорт

	ОткрытьФорму("Документ.СверкаСФНСПоИмущественнымНалогам.Форма.ОтличияВРасчете",
		ПараметрыФормыОтличий(ВыбраннаяСтрока), 
		ЭтотОбъект,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьИзменениеСверки(Результат, Отказ) Экспорт
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиСверки(Результат, ВыделенныеСтроки) Экспорт

	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Объект.Сверка.Удалить(Объект.Сверка.НайтиПоИдентификатору(ВыделеннаяСтрока));
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораОбъекта(Результат, ДополнительныеПараметры) Экспорт

	Если ЭтоТранспортныйНалог Тогда
		ИмяФормыВыбора = "Справочник.ОбъектыЭксплуатации.Форма.ФормаСпискаТранспорт";
	ИначеЕсли ЭтоЗемельныйНалог Тогда
		ИмяФормыВыбора = "Справочник.ОбъектыЭксплуатации.Форма.ФормаСпискаЗемля";
	ИначеЕсли ЭтоНалогНаИмущество Тогда
		ИмяФормыВыбора = "Справочник.ОбъектыЭксплуатации.Форма.ФормаСпискаНедвижимость";
	КонецЕсли;

	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	ПараметрыФормыВыбора.Вставить("РежимСверки", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("Период", Объект.НалоговыйПериод);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		ИмяФормыВыбора, 
		ПараметрыФормыВыбора, 
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиУведомленияСервер(УведомлениеСсылка)

	Если ТипЗнч(УведомлениеСсылка) <> Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		Возврат;
	КонецЕсли;

	РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УведомлениеСсылка, "Организация, ВидУведомления, ДатаПодписи");

	КонецОтчетногоПериода = 
		СверкаСФНСПоИмущественнымНалогамФормыВызовСервера.ПоследнийОтчетныйПериодПоДатеУведомления(РеквизитыУведомления.ДатаПодписи);

	Если РеквизитыУведомления.Организация <> Объект.Организация 
		 Или Объект.НалоговыйПериод < НачалоГода(КонецОтчетногоПериода) 
		 Или Объект.НалоговыйПериод > КонецОтчетногоПериода Тогда
		Возврат;
	КонецЕсли;

	ОбновитьДействия = Ложь;

	// Только некоторые виды уведомлений влияют на навигационные ссылки и вид текущей формы.
	// Эти виды уведомлений перечислены в общих параметрах навигационных ссылок.
	Для каждого УсловиеПоВидуУведомления Из ПараметрыНавигационныхСсылок.ОбщиеПараметры.УсловияПоВидуУведомления Цикл

		Если УсловиеПоВидуУведомления.Значение <> РеквизитыУведомления.ВидУведомления Тогда
			Продолжить;
		КонецЕсли;

		ОбновитьДействия = ОбновитьДействия 
			 Или СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.УстановитьСпециальныйПараметрНавигационнойСсылки(
					ЭтотОбъект,
					УсловиеПоВидуУведомления.Ключ,
					"Выполнено",
					Истина);

	КонецЦикла;

	Если ОбновитьДействия И Объект.СравнениеЗавершено Тогда
		ОтобразитьДействияСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВыписки()

	// Найдем навигационные ссылки, которые зависят от платежных документов, и обновим их параметры.
	Для каждого ПрочееУсловие Из ПараметрыНавигационныхСсылок.ОбщиеПараметры.ПрочиеУсловия Цикл
		
		Если ПрочееУсловие.Значение <> "ЕстьДокументУплаты" Тогда
			Продолжить;
		КонецЕсли;	
		
		СверкаСФНСПоИмущественнымНалогамФормыКлиентСервер.УстановитьСпециальныйПараметрНавигационнойСсылки(
			ЭтотОбъект,
			ПрочееУсловие.Ключ,
			"Выполнено",
			Истина,
			Истина);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьНажатиеНаСервере()
	Документы.СверкаСФНСПоИмущественнымНалогам.ОбновитьРасчет(Объект);
	ЗаполнитьСуммыНалога(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоляРасхождений()
	
	ОтборСтрок = Новый Структура("ИдентификаторСтроки","");
	
	ПоляСтрокРасчета = СверкаСФНСПоИмущественнымНалогамФормы.ПоляСтрокРасчета(Объект.Налог, 
																					Объект.НалоговыйПериод); 
	
	Для Каждого СтрокаСверки Из Объект.Сверка Цикл  
		ОтборСтрок.Вставить("ИдентификаторСтроки", СтрокаСверки.ИдентификаторСтроки);
		
		СтрокиРасчета = Объект.Расчет.Выгрузить(ОтборСтрок);
		
		Если Объект.ЗагруженРасчетФНС Тогда
			СтрокиРасчетаФНС = Объект.РасчетФНС.Выгрузить(ОтборСтрок);
		Иначе
			СтрокиРасчетаФНС = СтрокиРасчета;
		КонецЕсли;
		
		СтрокаСверки.ПоляРасхождений = СверкаСФНСПоИмущественнымНалогамФормы.СравнитьРасчетыПоОбъекту(СтрокиРасчета, 
																СтрокиРасчетаФНС, 
																СтрокаСверки.СуммаЛьгот, 
																СтрокаСверки.СуммаЛьготФНС, 
																СтрокаСверки.СуммаНалога, 
																СтрокаСверки.СуммаНалогаФНС, 
																ПоляСтрокРасчета);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
