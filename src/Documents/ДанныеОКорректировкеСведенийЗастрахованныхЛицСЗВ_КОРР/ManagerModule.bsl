#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода, ФизическиеЛица = Неопределено) Экспорт 
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ОтчетныйПериод; 
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеОтчетногоПериода; 
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, ОформленПоТрудовомуДоговору, ВидЗастрахованногоЛица, Страна, ИНН, ДатаРождения";
	
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	Если ФизическиеЛица <> Неопределено Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;	
	
	Организации = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Организация, ОтчетныйПериод);
	Если Организации.Количество() > 1 Тогда
		ПараметрыПолученияСотрудников.Организация = Неопределено;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолученияСотрудников.Отборы, "Организация", "В", Организации);
	Иначе
		Организации = Организация;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	ПерсонифицированныйУчет.СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(МенеджерВременныхТаблиц, Год(ОтчетныйПериод));
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ОкончаниеОтчетногоПериода);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	Если ФизическиеЛица <> Неопределено Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		               |	&Период КАК Период
		               |ПОМЕСТИТЬ ВТФизическиеЛица
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		               |		ПО ФизическиеЛица.Ссылка = СотрудникиОрганизации.ФизическоеЛицо
		               |			И (ФизическиеЛица.Ссылка В (&ФизическиеЛица))
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
		               |	И СотрудникиОрганизации.ФизическоеЛицо ЕСТЬ NULL";
		
		Запрос.Выполнить();
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, "ВТФизическиеЛица");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество, СтраховойНомерПФР, ВидЗастрахованногоЛица, Страна, ИНН, ДатаРождения");
		
		ИменаВТ = Новый Массив;
		ИменаВТ.Добавить("ВТФизическиеЛица");
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		
	Иначе
		ПерсонифицированныйУчет.СоздатьВТКадровыеДанныеФизическихЛицДоНачалаЭксплуатации(МенеджерВременныхТаблиц, Организации, ОтчетныйПериод, ОкончаниеОтчетногоПериода);
	КонецЕсли;
	
	КодПЖИГ = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицПЖИГ();
	КодВЖИГ = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицВЖИГ();
	КодВПИГ = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицВПИГ();
	КодВКС = ПерсонифицированныйУчет.ВидыЗастрахованныхЛицВКС();
	
	Запрос.УстановитьПараметр("КодПЖИГ", КодПЖИГ);
	Запрос.УстановитьПараметр("КодВЖИГ", КодВЖИГ);
	Запрос.УстановитьПараметр("КодВПИГ", КодВПИГ);
	Запрос.УстановитьПараметр("КодВКС", КодВКС);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	               |ПОМЕСТИТЬ ВТГоловныеОрганизации
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.Ссылка = &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ВидТарифа КАК ВидТарифа
	               |ПОМЕСТИТЬ ВТВидыТарифов
	               |ИЗ
	               |	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(
	               |			&Период,
	               |			ГоловнаяОрганизация В
	               |				(ВЫБРАТЬ
	               |					ГоловныеОрганизации.ГоловнаяОрганизация
	               |				ИЗ
	               |					ВТГоловныеОрганизации КАК ГоловныеОрганизации)) КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.ФизическоеЛицо КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(СотрудникиОрганизации.Фамилия, 1, 10) = ""-""
	               |			ТОГДА """"
	               |		ИНАЧЕ СотрудникиОрганизации.Фамилия
	               |	КОНЕЦ КАК Фамилия,
	               |	СотрудникиОрганизации.Имя КАК Имя,
	               |	СотрудникиОрганизации.Отчество КАК Отчество,
	               |	СотрудникиОрганизации.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2010, 1, 1)
	               |				И НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2013, 1, 1)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	               |		КОГДА СотрудникиОрганизации.ОформленПоТрудовомуДоговору
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	               |	КОНЕЦ КАК ТипДоговора,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2010, 1, 1)
	               |				И НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2013, 1, 1)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка)
	               |		ИНАЧЕ СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
	               |	КОНЕЦ КАК КатегорияЗастрахованныхЛиц,
	               |	СотрудникиОрганизации.Страна КАК Гражданство,
	               |	СотрудникиОрганизации.ИНН КАК ИНН,
	               |	СотрудникиОрганизации.ДатаРождения КАК ДатаРождения,
	               |	ВЫБОР
	               |		КОГДА СотрудникиОрганизации.ВидЗастрахованногоЛица В (&КодПЖИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ПЖИГ)
	               |		КОГДА СотрудникиОрганизации.ВидЗастрахованногоЛица В (&КодВЖИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВЖИГ)
	               |		КОГДА СотрудникиОрганизации.ВидЗастрахованногоЛица В (&КодВПИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВПИГ)
	               |		КОГДА СотрудникиОрганизации.ВидЗастрахованногоЛица В (&КодВКС)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВКС)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ГРФ)
	               |	КОНЕЦ КАК КодКатегории
	               |ПОМЕСТИТЬ ВТПерсональныеДанныеСотрудников
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыТарифов КАК ВидыТарифов
	               |			ПО СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов = ВидыТарифов.ВидТарифа
	               |		ПО СотрудникиОрганизации.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	               |			И (ГОД(&Период) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА ПОДСТРОКА(КадровыеДанныеФизическихЛиц.Фамилия, 1, 10) = ""-""
	               |			ТОГДА """"
	               |		ИНАЧЕ КадровыеДанныеФизическихЛиц.Фамилия
	               |	КОНЕЦ,
	               |	КадровыеДанныеФизическихЛиц.Имя,
	               |	КадровыеДанныеФизическихЛиц.Отчество,
	               |	КадровыеДанныеФизическихЛиц.СтраховойНомерПФР,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2010, 1, 1)
	               |				И НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2013, 1, 1)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2010, 1, 1)
	               |				И НАЧАЛОПЕРИОДА(&Период, ГОД) <> ДАТАВРЕМЯ(2013, 1, 1)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка)
	               |		ИНАЧЕ СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
	               |	КОНЕЦ,
	               |	КадровыеДанныеФизическихЛиц.Страна,
	               |	КадровыеДанныеФизическихЛиц.ИНН,
	               |	КадровыеДанныеФизическихЛиц.ДатаРождения,
	               |	ВЫБОР
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодПЖИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ПЖИГ)
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодВЖИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВЖИГ)
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодВПИГ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВПИГ)
	               |		КОГДА КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица В (&КодВКС)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ВКС)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КодКатегорииЗарегистрированногоЛицаЕФС1.ГРФ)
	               |	КОНЕЦ
	               |ИЗ
	               |	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыТарифов КАК ВидыТарифов
	               |			ПО СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов = ВидыТарифов.ВидТарифа
	               |		ПО КадровыеДанныеФизическихЛиц.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	               |			И (ГОД(&Период) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода, Сотрудники, УчитываемыеДокументы) Экспорт 
	
	СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	СписокДокументов = ?(ТипЗнч(УчитываемыеДокументы) = Тип("Массив"), УчитываемыеДокументы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчитываемыеДокументы));
	
	ПараметрыДляСоздатьВТДанныеСтажаПФР = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТДанныеСтажаПФР();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ВыделятьСтажПоДоговорамГПХ = Истина;	
	
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
	ПараметрыДляСоздатьВТДанныеСтажаПФР.УчитываемыеДокументы = СписокДокументов;
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокСотрудников;
	
	Организации = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Организация, ОтчетныйПериод);
	
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, 
		Организации, 
		ОтчетныйПериод, 
		ПараметрыДляСоздатьВТДанныеСтажаПФР,
		ПараметрыОтбора,
		ОкончаниеОтчетногоПериода);
		
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаСотрудников(МенеджерВременныхТаблиц, Организации, ОтчетныйПериод);
	
КонецПроцедуры

Функция ЕстьОграничениеДоступа(ВидПроверки, ДанныеДляПроверки, Отказ = Ложь) Экспорт 
	
	Если ПривилегированныйРежим() И ОбщегоНазначения.РежимОтладки() Тогда
		ВызватьИсключение НСтр("ru = 'Проверка доступа на уровне записей производится в привилегированном режиме';
								|en = 'Access on record level is checked in the privileged mode'");
	КонецЕсли;
	
	Если Не ПравоДоступа(ВидПроверки, Метаданные.Документы.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	// Если для текущего пользователя нет ограничений на уровне записей - возвращаем Ложь.
	ПараметрыДоступа = ПараметрыДоступа(ВидПроверки, Метаданные.РегистрыНакопления.СтраховыеВзносыПереданныеВПФР, "Организация,ФизическоеЛицо");
	
	// Если у пользователя нет доступа к регистру - возвращаем Истина.
	Если Не ПараметрыДоступа.Доступность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПараметрыДоступа.ОграничениеУсловием Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если RLS не используется - возвращаем Ложь.
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДляПроверки) = Тип("Массив") Тогда
		СписокДанныхДляПроверки = ДанныеДляПроверки;
	Иначе
		СписокДанныхДляПроверки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляПроверки);
	КонецЕсли; 
	
	ЕстьОграничения = Ложь;
	Для каждого ДанноеДляПроверки Из СписокДанныхДляПроверки Цикл
		
		Если ЕстьОграничения Тогда
			Прервать;
		КонецЕсли; 
		
		Организация = ДанноеДляПроверки.Организация;
		ФизическиеЛица = ДанноеДляПроверки.ФизическиеЛица;
		
		// Проверим заполнение полей, если не все требуемые значения заполнены - возвращаем Ложь.
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ФизическиеЛица = Неопределено Тогда 
			ФизическиеЛица = Новый Массив;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ФизическиеЛица, Справочники.ФизическиеЛица.ПустаяСсылка());
		Если ФизическиеЛица.Количество() = 0 И ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда 
			Продолжить;
		КонецЕсли;
		
		// Открываем транзакцию, если нет активной.
		ЕстьАктивнаяТранзакция = ТранзакцияАктивна();
		
		Если Не ЕстьАктивнаяТранзакция Тогда 
			НачатьТранзакцию();
		КонецЕсли;
		
		// Создаем набор записей
		Период = ТекущаяДатаСеанса();
		Регистратор = Документы.ПачкаРазделов6РасчетаРСВ_1.ПолучитьСсылку();
		
		НаборЗаписей = РегистрыНакопления.СтраховыеВзносыПереданныеВПФР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		
		Если ФизическиеЛица.Количество() = 0 Тогда 
			ФизическиеЛица.Добавить(Неопределено);
		КонецЕсли;
		
		Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл 
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Регистратор = Регистратор;
			НоваяСтрока.Период = Период;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			
		КонецЦикла;
			
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		// Если проверяем право на изменение - пробуем записать набор.
		Если ВидПроверки = "Изменение" Тогда 
			
			Попытка
				НаборЗаписей.Записать();
			    ЕстьОграничения = Ложь;
			Исключение 
				ЕстьОграничения = Истина;
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		// Если проверяем чтение - записываем набор в привилегированном режиме и пробуем прочитать.
		Если ВидПроверки = "Чтение" Тогда 
			
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Попытка
				НаборЗаписей.Прочитать();
			    ЕстьОграничения = Ложь;
			Исключение 
				ЕстьОграничения = Истина;
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЕстьАктивнаяТранзакция И Не Отказ Тогда
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		ИначеЕсли Не ЕстьАктивнаяТранзакция Тогда   
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОграничения;
		
КонецФункции

#Область ПроцедурыИФункцииФормированияФайлов

Функция ИмяФайла(Организация, Дата, УИД = Неопределено, Год = 0) Экспорт
	
	Если ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год) Тогда 
		Возврат ПерсонифицированныйУчет.ИмяФайлаЕФС1(Организация, Дата, УИД);
	КонецЕсли;
	
	Если УИД = Неопределено Тогда
		УИД = Новый УникальныйИдентификатор;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрационныйНомерПФР, КодОрганаПФР");
	
	Возврат "ПФР"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.РегистрационныйНомерПФР), Параметры.РегистрационныйНомерПФР, "")
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодОрганаПФР),СтрЗаменить(Параметры.КодОрганаПФР, "-", ""),"")
			+ "_СЗВ-КОРР"
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + УИД;
			
КонецФункции	

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	
	ТекстФайла = СформироватьВыходнойФайл(Объект.Ссылка);
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка, Объект.ИмяФайлаДляПФР, ТекстФайла, , "UTF-8", Ложь, Ложь);
	
КонецПроцедуры

Функция СформироватьВыходнойФайл(Ссылка)
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	ВыборкаПоШапкеДокумента = ПерсонифицированныйУчет.ЗапросПоШапкеДляПечатиОДВ_1(СписокДокументов, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	Если ВыборкаПоШапкеДокумента.КорректируемыйПериод >= Дата(2023, 1, 1) Тогда 
		Возврат СформироватьВыходнойФайлЕФС1(СписокДокументов);
	КонецЕсли;
	
	ВыборкаПоДаннымВзносов = ПерсонифицированныйУчет.ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(СписокДокументов, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР").Выбрать();
	ВыборкаУплаченныхВзносов = ПерсонифицированныйУчет.ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(СписокДокументов, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР").Выбрать();
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР_2021XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматОДВ_1 = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ОДВ_1");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	ФорматУплата = ОбщегоНазначения.СкопироватьРекурсивно(ФорматОДВ_1.Уплата.Значение);
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/СЗВ-КОРР/2020-08-10");
	Атрибуты.Вставить("xmlns:ВС2", "http://пф.рф/ВС/типы/2017-10-23");
	Атрибуты.Вставить("xmlns:АФ5", "http://пф.рф/АФ/2018-12-07");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:РВ2", "http://пф.рф/ВС/РВ/типы/2017-12-27");
	Атрибуты.Вставить("xmlns:ИС5", "http://пф.рф/ВС/ИС/2020-08-10");
	
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ5__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ5__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ5__ПрограммаПодготовки.Значение = ВРег(РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = 0;	
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаименованиеКраткое = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное));
	ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(НаименованиеКраткое);
	НаборЗаписейСтрахователь.ИС5__Наименование = НаименованиеКраткое;
	НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = 0;
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;	
	
	Если ВыборкаПоДаннымВзносов.Следующий()  
		И (ВыборкаПоДаннымВзносов.ЕстьСтраховая Или ВыборкаПоДаннымВзносов.ЕстьНакопительная Или ВыборкаПоДаннымВзносов.ЕстьТарифСВ) Тогда 
		
		ФорматОДВ_1.Страховая.Значение.ИС5__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС5__Начислено = ВыборкаПоДаннымВзносов.НачисленоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС5__Уплачено = ВыборкаПоДаннымВзносов.УплаченоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС5__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецСтраховая;
		
		ФорматОДВ_1.Накопительная.Значение.ИС5__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС5__Начислено = ВыборкаПоДаннымВзносов.НачисленоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС5__Уплачено = ВыборкаПоДаннымВзносов.УплаченоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС5__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецНакопительная;
		
		ФорматОДВ_1.ТарифСВ.Значение.ИС5__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС5__Начислено = ВыборкаПоДаннымВзносов.НачисленоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС5__Уплачено = ВыборкаПоДаннымВзносов.УплаченоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС5__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецТарифСВ;
		
	Иначе
		ФорматОДВ_1.Удалить("Страховая");
		ФорматОДВ_1.Удалить("Накопительная");
		ФорматОДВ_1.Удалить("ТарифСВ");
	КонецЕсли;
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Пока ВыборкаУплаченныхВзносов.Следующий() Цикл 
		НаборЗаписейТипУплата = ОбщегоНазначения.СкопироватьРекурсивно(ФорматУплата);
		НаборЗаписейТипУплата.ИС5__Год.Значение =ВыборкаУплаченныхВзносов.Год;
		НаборЗаписейТипУплата.ИС5__Страховая.Значение = ВыборкаУплаченныхВзносов.НаСтраховуюПенсию;
		НаборЗаписейТипУплата.ИС5__Накопительная.Значение = ВыборкаУплаченныхВзносов.НаНакопительнуюПенсию;
		НаборЗаписейТипУплата.ИС5__ТарифСВ.Значение = ВыборкаУплаченныхВзносов.ПоТарифуСтраховыхВзносов;
		УзелУплата = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "Уплата", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелУплата, НаборЗаписейТипУплата);
	КонецЦикла;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.ФИО.Значение;
	НаборЗаписейФИО.УТ2__Фамилия = ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя);
	НаборЗаписейФИО.УТ2__Имя = ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя);
	НаборЗаписейФИО.УТ2__Отчество = ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, "УТ2__Фамилия");
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, "УТ2__Имя");
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.ФИО, "УТ2__Отчество");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоДоходам = ЗапросПоЗаработкуДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоКорректирующимСведениям = ЗапросПоКорректирующимСведениям(СписокДокументов).Выбрать();
	ВыборкаПоУплаченнымВзносам = ЗапросПоСведениямОбУплаченныхВзносах(СписокДокументов).Выбрать();
	
	ФорматСЗВ_КОРР = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_КОРР");
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		ФорматСЗВ_КОРР.Страхователь.Значение.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_КОРР.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_КОРР.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	СтрокаПоляНаименование = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Найти("ИС5__Наименование", "ИмяПоля");
	Если СтрокаПоляНаименование <> Неопределено Тогда
		ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Удалить(СтрокаПоляНаименование);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод) Тогда
		ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Значение.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_КОРР.КорректируемыйПериод.Значение.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	ФорматЗЛ = Новый Структура("ЗЛ", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_КОРР.ЗЛ));
	ФорматЗЛ.ЗЛ.Значение.Удалить("СтажевыйПериод");
	ФорматЗЛ.ЗЛ.Значение.Удалить("ДатаУвольнения");
	ФорматСЗВ_КОРР.Удалить("ЗЛ");
	
	ФорматДанныеЗЛ = Новый Структура("ДанныеЗЛ", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_КОРР.ДанныеЗЛ));
	ФорматСЗВ_КОРР.Удалить("ДанныеЗЛ");
	
	ФорматСуммы = Новый Структура("Суммы", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_КОРР.Суммы));
	ФорматСЗВ_КОРР.Удалить("Суммы");
	
	ФорматВыплатыДТ = Новый Структура("ВыплатыДТ", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_КОРР.ВыплатыДТ));
	ФорматСЗВ_КОРР.Удалить("ВыплатыДТ");
	
	ФорматСтажевыйПериод = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_КОРР.СтажевыйПериод.Значение);
	ФорматСЗВ_КОРР.Удалить("СтажевыйПериод");
	
	НаборЗаписейДатаУвольнения = Новый Структура("ДатаУвольнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_КОРР.ДатаУвольнения));
	ФорматСЗВ_КОРР.Удалить("ДатаУвольнения");
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		// Данные формы и страхователя
		НаборЗаписейСтрахователь = ФорматСЗВ_КОРР.Страхователь.Значение;
		НаборЗаписейСтрахователь.ИС5__Наименование = НаименованиеКраткое;
		НаборЗаписейСтрахователь.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
		НаборЗаписейСтрахователь.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
			НаборЗаписейСтрахователь.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
		КонецЕсли;
		
		НаборЗаписейОтчетныйПериод = ФорматСЗВ_КОРР.ОтчетныйПериод.Значение;
		НаборЗаписейОтчетныйПериод.Код = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод, ВыборкаПоШапкеДокумента.ОкончаниеОтчетногоПериода);
		НаборЗаписейОтчетныйПериод.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		
		Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Корректирующая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 0;	
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 1;	
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Особая Тогда
			ФорматСЗВ_КОРР.Тип.Значение = 2;	
		КонецЕсли;	
		
		НаборЗаписейКорректируемыйПериод = ФорматСЗВ_КОРР.КорректируемыйПериод.Значение;
		НаборЗаписейКорректируемыйПериод.ОтчетныйПериод.Значение.Код = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.КорректируемыйПериод, ВыборкаПоШапкеДокумента.ОкончаниеКорректируемогоПериода);
		НаборЗаписейКорректируемыйПериод.ОтчетныйПериод.Значение.Год = Год(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		
		НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод;
		НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИННвКорректируемыйПериод;
		НаборЗаписейКорректируемыйПериод.Страхователь.Значение.Удалить("ИС5__Наименование");
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод) Тогда
			НаборЗаписейКорректируемыйПериод.Страхователь.Значение.УТ2__КПП = ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод;
		КонецЕсли;
	
		УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-КОРР", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_КОРР);
		
		// Данные по физлицу
		НаборЗаписейЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ);
		НаборЗаписейФИО = НаборЗаписейЗЛ.ЗЛ.Значение.ФИО.Значение;
		НаборЗаписейФИО.УТ2__Фамилия = ВРег(СокрЛП(ВыборкаПоРаботникам.Фамилия));
		НаборЗаписейФИО.УТ2__Имя = ВРег(СокрЛП(ВыборкаПоРаботникам.Имя));
		НаборЗаписейФИО.УТ2__Отчество = ВРег(СокрЛП(ВыборкаПоРаботникам.Отчество));
		
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.ЗЛ.Значение.ФИО, "УТ2__Фамилия");
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.ЗЛ.Значение.ФИО, "УТ2__Имя");
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.ЗЛ.Значение.ФИО, "УТ2__Отчество");
		
		НаборЗаписейЗЛ.ЗЛ.Значение.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейЗЛ);
		
		// Данные ЗЛ
		НаборЗаписейДанныеЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматДанныеЗЛ);
		НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Категория.Значение = ВыборкаПоРаботникам.КодКатегории;
		НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Категория.НеВыводитьВФайл = Не ЗначениеЗаполнено(ВыборкаПоРаботникам.КодКатегории);
		
		Если ВыборкаПоРаботникам.ДополнительныйТариф Тогда
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.КодДТ.Значение = "АВИА";
		Иначе 
			НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.КодДТ.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		НаборЗаписейДоговор = НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Договор.Значение;
		НаборЗаписейДоговор.Тип.Значение = ВыборкаПоРаботникам.ТипДоговора;
		НаборЗаписейДоговор.Тип.НеВыводитьВФайл = Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора);
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора) Тогда 
			НаборЗаписейДоговор.Реквизиты.Значение.УТ2__Дата = ВыборкаПоРаботникам.ДатаДоговора;
			НаборЗаписейДоговор.Реквизиты.Значение.УТ2__Номер = ВыборкаПоРаботникам.НомерДоговора;
		Иначе 
			НаборЗаписейДоговор.Удалить("Реквизиты");
		КонецЕсли;
		НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение.Договор.НеВыводитьВФайл = Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора);
		
		ВыводитьВФайл = Ложь;
		Для Каждого КлючИЗначение Из НаборЗаписейДанныеЗЛ.ДанныеЗЛ.Значение Цикл 	
			Если Не КлючИЗначение.Значение.НеВыводитьВФайл Тогда 
				ВыводитьВФайл = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыводитьВФайл Тогда 
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДанныеЗЛ);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка, Сотрудник, КодМесяца");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
		
		СписокМесяцев = Новый Массив;
		КодыМесяцев = ПерсонифицированныйУчетКлиентСервер.КодыМесяцевСЗВ_КОРР();
		ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		ПоследнийМесяц  = Месяц(ВыборкаПоШапкеДокумента.ОкончаниеКорректируемогоПериода);
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СписокМесяцев.Добавить(КодыМесяцев[Сч]);
		КонецЦикла;
		
		// Суммы
		Для Каждого КодМесяца Из СписокМесяцев Цикл 
			СтруктураПоиска.КодМесяца = КодМесяца;
			НаборЗаписейСуммы = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСуммы);
			НаборЗаписейСуммы.Суммы.Значение.Месяц.Значение = КодМесяца;
			ВыводитьВФайл = Ложь;
			Если ВыборкаПоДоходам.НайтиСледующий(СтруктураПоиска) Тогда
				НаборЗаписейВыплаты = НаборЗаписейСуммы.Суммы.Значение.Выплаты.Значение;
				НаборЗаписейВыплаты.СуммаВыплат.Значение = ВыборкаПоДоходам.Заработок;
				НаборЗаписейВыплаты.НеПревышающие.Значение.Всего = ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
				НаборЗаписейВыплаты.НеПревышающие.Значение.ПоГПД = ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
				НаборЗаписейВыплаты.Превышающие.Значение.Всего = ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
				НаборЗаписейВыплаты.Превышающие.Значение.ПоГПД = ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
				Если ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины = 0 Тогда 
					НаборЗаписейВыплаты.Удалить("НеПревышающие");
				КонецЕсли;
				Если ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины = 0 Тогда 
					НаборЗаписейВыплаты.Удалить("Превышающие");
				КонецЕсли;
				ВыводитьВФайл = Истина;
			Иначе 
				НаборЗаписейСуммы.Суммы.Значение.Удалить("Выплаты");
			КонецЕсли;
			Если ВыборкаПоКорректирующимСведениям.НайтиСледующий(СтруктураПоиска) Тогда
				НаборЗаписейДоначисленоСВ = НаборЗаписейСуммы.Суммы.Значение.ДоначисленоСВ.Значение;
				Если ВыборкаПоШапкеДокумента.КорректируемыйПериод < '20020101' Тогда 
					НаборЗаписейДоначисленоСВ.СВстрахователя.Значение = ВыборкаПоКорректирующимСведениям.УплачиваемыеСтрахователем;
					НаборЗаписейДоначисленоСВ.СВизЗаработка.Значение = ВыборкаПоКорректирующимСведениям.УплачиваемыеИзЗаработкаЗЛ;
					НаборЗаписейДоначисленоСВ.Страховая.НеВыводитьВФайл = Истина;
					НаборЗаписейДоначисленоСВ.Накопительная.НеВыводитьВФайл = Истина;
					НаборЗаписейДоначисленоСВ.СВпоТарифу.НеВыводитьВФайл = Истина;
				ИначеЕсли ВыборкаПоШапкеДокумента.КорректируемыйПериод < '20140101'Тогда 
					НаборЗаписейДоначисленоСВ.Страховая.Значение = ВыборкаПоКорректирующимСведениям.ДоначисленоСтраховая;
					НаборЗаписейДоначисленоСВ.Накопительная.Значение = ВыборкаПоКорректирующимСведениям.ДоначисленоНакопительная;
					НаборЗаписейДоначисленоСВ.СВстрахователя.НеВыводитьВФайл = Истина;
					НаборЗаписейДоначисленоСВ.СВизЗаработка.НеВыводитьВФайл = Истина;
					НаборЗаписейДоначисленоСВ.СВпоТарифу.НеВыводитьВФайл = Истина;
				Иначе 
					НаборЗаписейДоначисленоСВ.СВпоТарифу.Значение = ВыборкаПоКорректирующимСведениям.ДоначисленоНаОПС;
					НаборЗаписейДоначисленоСВ.СВстрахователя.НеВыводитьВФайл = Истина;
					НаборЗаписейДоначисленоСВ.СВизЗаработка.НеВыводитьВФайл = Истина;
					НаборЗаписейДоначисленоСВ.Страховая.НеВыводитьВФайл = Истина;
					НаборЗаписейДоначисленоСВ.Накопительная.НеВыводитьВФайл = Истина;
				КонецЕсли;
				ВыводитьВФайл = Истина;
			Иначе
				НаборЗаписейСуммы.Суммы.Значение.Удалить("ДоначисленоСВ");
			КонецЕсли;
			Если ВыборкаПоУплаченнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
				НаборЗаписейУплата = НаборЗаписейСуммы.Суммы.Значение.Уплата.Значение;
				НаборЗаписейУплата.Страховая = ВыборкаПоУплаченнымВзносам.УплаченоСтраховая;
				НаборЗаписейУплата.Накопительная = ВыборкаПоУплаченнымВзносам.УплаченоНакопительная;
				ВыводитьВФайл = Истина;
			Иначе
				НаборЗаписейСуммы.Суммы.Значение.Удалить("Уплата");
			КонецЕсли;
			Если ВыводитьВФайл Тогда 
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейСуммы);
			КонецЕсли;
		КонецЦикла;
		
		// ВыплатыДТ
		Для Каждого КодМесяца Из СписокМесяцев Цикл 
			СтруктураПоиска.КодМесяца = КодМесяца;
			НаборЗаписейВыплатыДТ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматВыплатыДТ);
			НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.Месяц = КодМесяца;
			ВыводитьВФайл = Ложь;
			Если ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Тогда
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.КодСОУТ = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.КодКлассаУсловийТруда;
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.ИС5__ДопТарифП1 = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				НаборЗаписейВыплатыДТ.ВыплатыДТ.Значение.ИС5__ДопТарифП2_18 = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				ВыводитьВФайл = Истина;
			КонецЕсли;
			Если ВыводитьВФайл Тогда 
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейВыплатыДТ);
			КонецЕсли;
		КонецЦикла;
		
		ВписатьЗаписиОСтажеВНаборДанных(УзелФормы, ФорматСтажевыйПериод, ВыборкаПоРаботникам);
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.СотрудникУволен) Тогда
			НаборЗаписейДатаУвольнения.ДатаУвольнения.Значение = Формат(КонецГода(ВыборкаПоШапкеДокумента.КорректируемыйПериод), "ДФ=yyyy-MM-dd");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаУвольнения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) 	
	
	ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ИС5__ЛьготныйСтаж.Значение;
	ФорматСтажевыйПериод.ИС5__ЛьготныйСтаж.НеВыводитьВФайл = Истина;
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПерсонифицированныйУчет.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
			
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
			
			ФорматСтажевыйПериод.ИС5__ЛьготныйСтаж.НеВыводитьВФайл = Истина;

			УзелСтажевыйПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС5__Период").Строки.Найти("УТ2__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС5__Период").Строки.Найти("УТ2__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию);
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
				// В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры	

Процедура ВывестиЛьготныйСтаж(ВыборкаПоРаботникам, УзелСтажевыйПериод, ФорматЛьготныйСтаж, ПараметрыСтажаСПравомНаДосрочнуюПенсию)
	
	ВыводитьЛьготныйСтаж = Ложь;
	
	НаборЗаписейЛьготныйСтаж = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЛьготныйСтаж);
	НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.НеВыводитьВФайл = Ложь;
	НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Ложь;
	
	// ДопСведенияИС
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
		НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
		ВыводитьЛьготныйСтаж = Истина;
	ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда
		НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
		ВыводитьЛьготныйСтаж = Истина;
	Иначе
		НаборЗаписейЛьготныйСтаж.ИС5__ДопСведенияИС.НеВыводитьВФайл = Истина;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
		И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
		
		НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Истина;
		НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Истина;
		
		Если ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИ 
			И ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.СЕЛО Тогда
			НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС5__ТУ.Значение;
			НаборЗаписейТерриториальныеУсловия.ИС5__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС5__ТУ);
			НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Ложь;	
		КонецЕсли;	
		
	Иначе
		НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС5__ТУ.Значение;
		// Территориальные условия
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
			НаборЗаписейТерриториальныеУсловия.ИС5__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС5__ТУ);
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ТУ.НеВыводитьВФайл = Истина;	
		КонецЕсли;	
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС5__Основание);
		
		// Особые условия труда
		НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.Значение;
		
		НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Ложь;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
			НаборЗаписейОсобыеУсловияТруда.ИС5__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
			НаборЗаписейОсобыеУсловияТруда.ИС5__ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
			ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ИС5__Код);
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ОУТ.НеВыводитьВФайл = Истина;
		КонецЕсли;	
		
		// Исчисляемый стаж
		НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС5__ИС.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод) Тогда
			НаборЗаписейИсчисляемыйСтаж.ИС5__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
		Иначе
			НаборЗаписейИсчисляемыйСтаж.ИС5__Основание.НеВыводитьВФайл = Истина;
		КонецЕсли;
		
		НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Ложь;
		НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
		НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
			НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Истина;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				СписокОтсутствий = ПерсонифицированныйУчет.СписокОтсутствийИсключающихКалендарнуюВыработку();
				Если СписокОтсутствий.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
					НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
				КонецЕсли;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
				НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
			Иначе
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейИсчисляемыйСтаж.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ИС.НеВыводитьВФайл = Истина;		
		КонецЕсли;	
		
		ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС5__Основание.Значение);
		
		// Выслуга лет
		НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.Значение;
		НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Ложь;	
		НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
		НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
			
			НаборЗаписейВыслугаЛет.ИС5__Основание.Значение = ВРег(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
			ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейВыслугаЛет);
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.Значение;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаКалендарная.ВС2__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			Иначе
				НаборЗаписейВыслугаЛет.ВС2__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
				НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС2__ВыработкаВЧасах.Значение;
				НаборЗаписейВыработкаВЧасах.ВС2__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
				НаборЗаписейВыработкаВЧасах.ВС2__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
			КонецЕсли;
			ВыводитьЛьготныйСтаж = Истина;
		Иначе
			НаборЗаписейЛьготныйСтаж.ИС5__ВЛ.НеВыводитьВФайл = Истина;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ВыводитьЛьготныйСтаж Тогда
		УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС5__ЛьготныйСтаж","");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
	КонецЕсли;
	
КонецПроцедуры	

Функция СформироватьВыходнойФайлЕФС1(СписокДокументов)
	
	РазделыЕФС1 = ПерсонифицированныйУчет.СписокРазделовЕФС1();
	РазделыЕФС1.СЗВСТАЖ = Истина;
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(СписокДокументов).Выбрать();
	
	Возврат ПерсонифицированныйУчет.СформироватьВыходнойФайлЕФС1(РазделыЕФС1, ВыборкаПоШапкеДокумента, , ВыборкаПоРаботникам);
	
КонецФункции

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
	ОписаниеВыгруженногоФайла.ПроверятьПОПД = Истина;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаЕФС_1";
	КомандаПечати.Представление = НСтр("ru = 'ЕФС-1';
										|en = 'Unified Information Form-1'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИсключитьПередачуВКабинетСотрудника");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаСЗВ_КОРР";
	КомандаПечати.Представление = НСтр("ru = 'СЗВ-КОРР';
										|en = 'SZV-CORR'");
	КомандаПечати.Порядок = 30;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаОДВ_1";
	КомандаПечати.Представление = НСтр("ru = 'ОДВ-1';
										|en = 'ODV-1'");
	КомандаПечати.Порядок = 40;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаСЗВ_КОРР") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаСЗВ_КОРР", 
			"СЗВ-КОРР", 
			ПечатнаяФормаСЗВ_КОРР(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаОДВ_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаОДВ_1", 
			"ОДВ-1", 
			ПерсонифицированныйУчет.ПечатнаяФормаОДВ_1(МассивОбъектов, ОбъектыПечати, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаЕФС_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаЕФС_1", 
			"ЕФС-1", 
			ПечатнаяФормаЕФС_1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросПоШапкеДляПечати(СписокДокументов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "ОкончаниеОтчетногоПериода";
	ОписаниеИсточникаДанных.СписокСсылок = СписокДокументов;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОКорректировкеСведений.Ссылка КАК Ссылка,
	|	ДанныеОКорректировкеСведений.Организация КАК Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ДанныеОКорректировкеСведений.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ДанныеОКорректировкеСведений.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
	|	ДанныеОКорректировкеСведений.ТипСведений КАК ТипСведений,
	|	ДанныеОКорректировкеСведений.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ДанныеОКорректировкеСведений.ОкончаниеКорректируемогоПериода КАК ОкончаниеКорректируемогоПериода,
	|	ДанныеОКорректировкеСведений.Руководитель КАК Руководитель,
	|	ДанныеОКорректировкеСведений.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	ДанныеОКорректировкеСведений.Дата КАК Дата,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.КодОКФС КАК КодОКФС,
	|	СведенияОбОрганизациях.КодОКВЭД КАК КодОКВЭД,
	|	СведенияОбОрганизациях.КодОКВЭД2 КАК КодОКВЭД2,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	СведенияОбОрганизациях.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
	|	ДанныеОКорректировкеСведений.РегистрационныйНомерПФРвКорректируемыйПериод КАК РегистрационныйНомерПФРвКорректируемыйПериод,
	|	ДанныеОКорректировкеСведений.КППвКорректируемыйПериод КАК КППвКорректируемыйПериод,
	|	ДанныеОКорректировкеСведений.ИННвКорректируемыйПериод КАК ИННвКорректируемыйПериод,
	|	ДанныеОКорректировкеСведений.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательОКФС КАК ПрежнийСтраховательОКФС,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательОКОГУ КАК ПрежнийСтраховательОКОГУ,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательОКПО КАК ПрежнийСтраховательОКПО,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательОКВЭД КАК ПрежнийСтраховательОКВЭД,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательОГРН КАК ПрежнийСтраховательОГРН,
	|	ДанныеОКорректировкеСведений.ПрежнийСтраховательКодКатегории КАК ПрежнийСтраховательКодКатегории
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО ДанныеОКорректировкеСведений.Организация = СведенияОбОрганизациях.Организация
	|			И ДанныеОКорректировкеСведений.ОкончаниеОтчетногоПериода = СведенияОбОрганизациях.Период
	|ГДЕ
	|	ДанныеОКорректировкеСведений.Ссылка В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.КодОКФС КАК КодОКФС,
	|	ДанныеДокументов.КодОКВЭД КАК КодОКВЭД,
	|	ДанныеДокументов.КодОКВЭД2 КАК КодОКВЭД2,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ГОД(ДанныеДокументов.ОтчетныйПериод) КАК Год,
	|	ДанныеДокументов.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ДанныеДокументов.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ДанныеДокументов.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ДанныеДокументов.ОкончаниеКорректируемогоПериода КАК ОкончаниеКорректируемогоПериода,
	|	ЕСТЬNULL(ФИОПоследние.ФИОПолные, """") КАК Руководитель,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЕСТЬNULL(ФИОПоследние.Фамилия, """"), 1, 10) = ""-""
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(ФИОПоследние.Фамилия, """")
	|	КОНЕЦ КАК ФамилияРуководителя,
	|	ЕСТЬNULL(ФИОПоследние.Имя, """") КАК ИмяРуководителя,
	|	ЕСТЬNULL(ФИОПоследние.Отчество, """") КАК ОтчествоРуководителя,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.РегистрационныйНомерПФРвКорректируемыйПериод КАК РегистрационныйНомерПФРвКорректируемыйПериод,
	|	ДанныеДокументов.КППвКорректируемыйПериод КАК КППвКорректируемыйПериод,
	|	ДанныеДокументов.ИННвКорректируемыйПериод КАК ИННвКорректируемыйПериод,
	|	ДанныеДокументов.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР,
	|	ДанныеДокументов.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
	|	ДанныеДокументов.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
	|	ДанныеДокументов.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
	|	ДанныеДокументов.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
	|	ДанныеДокументов.ПрежнийСтраховательОКФС КАК ПрежнийСтраховательОКФС,
	|	ДанныеДокументов.ПрежнийСтраховательОКОГУ КАК ПрежнийСтраховательОКОГУ,
	|	ДанныеДокументов.ПрежнийСтраховательОКПО КАК ПрежнийСтраховательОКПО,
	|	ДанныеДокументов.ПрежнийСтраховательОКВЭД КАК ПрежнийСтраховательОКВЭД,
	|	ДанныеДокументов.ПрежнийСтраховательОГРН КАК ПрежнийСтраховательОГРН,
	|	ДанныеДокументов.ПрежнийСтраховательКодКатегории КАК ПрежнийСтраховательКодКатегории
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПоследние
	|		ПО ДанныеДокументов.Ссылка = ФИОПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректируемыйПериод УБЫВ,
	|	ТипСведений,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникамДляПечати(СписокДокументов) 
	
	ТаблицаКодовКатегорий = Новый ТаблицаЗначений;
	ТаблицаКодовКатегорий.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(10)));
	ТаблицаКодовКатегорий.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗастрахованныхЛицДляПФР"));
	Для каждого Элемент Из Перечисления.КатегорииЗастрахованныхЛицДляПФР Цикл
		НоваяСтрока = ТаблицаКодовКатегорий.Добавить();
		НоваяСтрока.Код = Перечисления.КатегорииЗастрахованныхЛицДляПФР.КодКатегорииДляОтчета(Элемент);                            
		НоваяСтрока.Категория = Элемент;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ТаблицаКодовКатегорий",	ТаблицаКодовКатегорий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКодовКатегорий.Код КАК КодКатегории,
	|	ТаблицаКодовКатегорий.Категория КАК Категория
	|ПОМЕСТИТЬ ВТКодыКатегорий
	|ИЗ
	|	&ТаблицаКодовКатегорий КАК ТаблицаКодовКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	Сотрудники.Фамилия КАК Фамилия,
	|	Сотрудники.Имя КАК Имя,
	|	Сотрудники.Отчество КАК Отчество,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ТипДоговора КАК ТипДоговора,
	|	Сотрудники.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	Сотрудники.НомерДоговора КАК НомерДоговора,
	|	Сотрудники.ДатаДоговора КАК ДатаДоговора,
	|	Сотрудники.ДополнительныйТариф КАК ДополнительныйТариф,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	Сотрудники.ИНН КАК ИНН,
	|	Сотрудники.КодКатегории КАК КодКатегории,
	|	ВЫБОР
	|		КОГДА Сотрудники.Гражданство = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА ""000""
	|		ИНАЧЕ Сотрудники.Гражданство.Код
	|	КОНЕЦ КАК Гражданство,
	|	ВЫБОР
	|		КОГДА Сотрудники.СотрудникУволен
	|			ТОГДА ""Х""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СотрудникУволен
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.Ссылка КАК ДокументОснование,
	|	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ЗаписиОСтаже.НомерРабочегоМеста КАК НомерРабочегоМеста,
	|	ЗаписиОСтаже.КлассПодклассУсловийТруда КАК КлассПодклассУсловийТруда,
	|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент
	|ПОМЕСТИТЬ ВТЗаписиОСтаже
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ПО ЗаписиОСтаже.Сотрудник = СотрудникиДокумента.Сотрудник
	|			И ЗаписиОСтаже.Ссылка = СотрудникиДокумента.Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.Ссылка.КорректируемыйПериод МЕЖДУ ДАТАВРЕМЯ(2002, 1, 1) И ДАТАВРЕМЯ(2008, 12, 31, 23, 59, 59)
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиОСтаже.ОсобыеУсловияТруда КАК Справочник.ОсобыеУсловияТрудаПФР).КодДляОтчетности2002
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.Ссылка.КорректируемыйПериод МЕЖДУ ДАТАВРЕМЯ(2002, 1, 1) И ДАТАВРЕМЯ(2008, 12, 31, 23, 59, 59)
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиОСтаже.ОснованиеВыслугиЛет КАК Справочник.ОснованияДосрочногоНазначенияПенсии).КодДляОтчетности2002
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ЗаписиОСтаже.НомерРабочегоМеста КАК НомерРабочегоМеста,
	|	ЗаписиОСтаже.КлассПодклассУсловийТруда КАК КлассПодклассУсловийТруда,
	|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СотрудникиДокумента.Фамилия КАК Фамилия,
	|	СотрудникиДокумента.Имя КАК Имя,
	|	СотрудникиДокумента.Отчество КАК Отчество,
	|	СотрудникиДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой)
	|			ТОГДА 1
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	|			ТОГДА 2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипДоговора,
	|	СотрудникиДокумента.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	КодыКатегорий.КодКатегории КАК КодКатегории,
	|	СотрудникиДокумента.НомерДоговора КАК НомерДоговора,
	|	СотрудникиДокумента.ДатаДоговора КАК ДатаДоговора,
	|	СотрудникиДокумента.ДополнительныйТариф КАК ДополнительныйТариф,
	|	СотрудникиДокумента.ДатаРождения КАК ДатаРождения,
	|	СотрудникиДокумента.ИНН КАК ИНН,
	|	СотрудникиДокумента.КодКатегории КАК КодКатегорииЗЛ,
	|	СотрудникиДокумента.Гражданство КАК Гражданство,
	|	СотрудникиДокумента.СотрудникУволен КАК СотрудникУволен
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорий КАК КодыКатегорий
	|		ПО СотрудникиДокумента.КатегорияЗастрахованныхЛиц = КодыКатегорий.Категория
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиДокумента.Ссылка.КорректируемыйПериод УБЫВ,
	|	СотрудникиДокумента.Ссылка.ТипСведений,
	|	Ссылка,
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ЗапросПоЗаработкуДляПечати(СписокДокументов)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СведенияОЗаработке.КодМесяца КАК КодМесяца,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КодМесяца ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХСвышеПредельнойВеличины
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.СведенияОЗаработке КАК СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.КорректируемыйПериод УБЫВ,
	|	Сотрудники.Ссылка.ТипСведений,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(СписокДокументов) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СведенияОЗаработке.КодМесяца КАК КодМесяца,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|			ТОГДА ""О4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|			ТОГДА ""В3.4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|			ТОГДА ""В3.3""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|			ТОГДА ""В3.2""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|			ТОГДА ""В3.1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодКлассаУсловийТруда,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КодМесяца ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.КлассУсловийТруда,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.СведенияОЗаработкеНаВредныхИТяжелыхРаботах КАК СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.КорректируемыйПериод УБЫВ,
	|	Сотрудники.Ссылка.ТипСведений,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОЗаработке.КлассУсловийТруда,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ЗапросПоКорректирующимСведениям(СписокДокументов)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	КорректирующиеСведения.КодМесяца КАК КодМесяца,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	ВЫБОР
	|		КОГДА КорректирующиеСведения.КодМесяца ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КорректирующиеСведенияЗаполнены,
	|	КорректирующиеСведения.ДоначисленоНаОПС,
	|	КорректирующиеСведения.ДоначисленоСтраховая,
	|	КорректирующиеСведения.ДоначисленоНакопительная,
	|	КорректирующиеСведения.УплачиваемыеСтрахователем,
	|	КорректирующиеСведения.УплачиваемыеИзЗаработкаЗЛ
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.КорректирующиеСведения КАК КорректирующиеСведения
	|		ПО Сотрудники.Ссылка = КорректирующиеСведения.Ссылка
	|			И Сотрудники.Сотрудник = КорректирующиеСведения.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.КорректируемыйПериод УБЫВ,
	|	Сотрудники.Ссылка.ТипСведений,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	КорректирующиеСведения.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСведениямОбУплаченныхВзносах(СписокДокументов)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СведенияОбУплаченныхВзносах.КодМесяца КАК КодМесяца,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	ВЫБОР
	|		КОГДА СведенияОбУплаченныхВзносах.КодМесяца ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УплаченныеВзносыЗаполнены,
	|	СведенияОбУплаченныхВзносах.УплаченоСтраховая,
	|	СведенияОбУплаченныхВзносах.УплаченоНакопительная
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.СведенияОбУплаченныхВзносах КАК СведенияОбУплаченныхВзносах
	|		ПО Сотрудники.Ссылка = СведенияОбУплаченныхВзносах.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОбУплаченныхВзносах.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.КорректируемыйПериод УБЫВ,
	|	Сотрудники.Ссылка.ТипСведений,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОбУплаченныхВзносах.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПечатнаяФормаСЗВ_КОРР(МассивОбъектов, ОбъектыПечати)
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоДоходам = ЗапросПоЗаработкуДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоКорректирующимСведениям = ЗапросПоКорректирующимСведениям(МассивОбъектов).Выбрать();
	ВыборкаПоУплаченнымВзносам = ЗапросПоСведениямОбУплаченныхВзносах(МассивОбъектов).Выбрать();
	
	ЭтоПервыйДокументКоллекции = Истина;
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
	
		Макет = ?(ВыборкаПоШапкеДокумента.Дата < '20220819',
			УправлениеПечатью.МакетПечатнойФормы("Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ПФ_MXL_ФормаСЗВ_КОРР_2019"),
			УправлениеПечатью.МакетПечатнойФормы("Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ПФ_MXL_ФормаСЗВ_КОРР_2022"));
			
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_КОРР";
		ДокументРезультат.ПолеСлева = 0;
		ДокументРезультат.ПолеСправа = 0;
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		НачалоФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрокаЗаработка = Макет.ПолучитьОбласть("СтрокаЗаработка");
		ОбластьВредныеИТяжелыеРаботы = Макет.ПолучитьОбласть("ВредныеИТяжелыеРаботы");
		ОбластьСтрокаВредныхИТяжелыхРабот = Макет.ПолучитьОбласть("СтрокаВредныхИТяжелыхРабот");
		ОбластьСтаж = Макет.ПолучитьОбласть("Стаж");
		ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
		ОбластьСтрокаКодПозицииСписка = Макет.ПолучитьОбласть("СтрокаКодПозицииСписка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		СписокМесяцев = Новый Массив;
		КодыМесяцев = ПерсонифицированныйУчетКлиентСервер.КодыМесяцевСЗВ_КОРР();
		ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
		ПоследнийМесяц  = Месяц(ВыборкаПоШапкеДокумента.ОкончаниеКорректируемогоПериода);
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СписокМесяцев.Добавить(КодыМесяцев[Сч]);
		КонецЦикла;
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
			
			ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				Если ЭтоПервыйДокументКоллекции Тогда
					ЭтоПервыйДокументКоллекции = Ложь;	
				Иначе
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
				
				ТекущийЛист = Новый ТабличныйДокумент;
				ТекущийЛист.ПолеСлева = ДокументРезультат.ПолеСлева;
				ТекущийЛист.ПолеСправа = ДокументРезультат.ПолеСправа;
				ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
				
				РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
				РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12, 13);
				
				КоррРегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод," ","");
				КоррРегистрационныйНомерПФР = СтрЗаменить(КоррРегистрационныйНомерПФР,"-","");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(КоррРегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12, 25);
				
				ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12, 13);
				
				КоррИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИННвКорректируемыйПериод, 12, "-", "Справа");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(КоррИНН, ОбластьШапка, "ИНН", 12, 25);
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9, 10);
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КППвКорректируемыйПериод,"ЧГ=0"), ОбластьШапка, "КПП", 9, 19);
				
				НомерСтраницы = 1;
				НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
				
				ОбластьШапка.Параметры.КодПериода = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод, ВыборкаПоШапкеДокумента.ОкончаниеОтчетногоПериода);
				ОбластьШапка.Параметры.КодПериодаКорр = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.КорректируемыйПериод, ВыборкаПоШапкеДокумента.ОкончаниеКорректируемогоПериода);
				
				ОбластьШапка.Параметры.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
				ОбластьШапка.Параметры.ГодКорр = Год(ВыборкаПоШапкеДокумента.КорректируемыйПериод);
				
				Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Корректирующая Тогда 
					ОбластьШапка.Параметры.ТипСведений = "КОРР";
				ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Отменяющая Тогда
					ОбластьШапка.Параметры.ТипСведений = "ОТМН";
				ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Особая Тогда
					ОбластьШапка.Параметры.ТипСведений = "ОСОБ";
				КонецЕсли;
				
				ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
				ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
				
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ВыборкаПоРаботникам);
				ОбластьШапка.Параметры.ТипДоговора = ?(ВыборкаПоРаботникам.ТипДоговора = 1, "трудовой", ?(ВыборкаПоРаботникам.ТипДоговора = 2, "гражданско-правовой", ""));
				ОбластьШапка.Параметры.КодДТ = ?(ВыборкаПоРаботникам.ДополнительныйТариф, "АВИА", "");
				
				ТекущийЛист.Вывести(ОбластьШапка);
			
				СтруктураПоиска = Новый Структура("Ссылка, Сотрудник, КодМесяца");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
				
				ЕстьСведенияОЗаработке = Ложь;
				Для Каждого КодМесяца Из СписокМесяцев Цикл 
					СтруктураПоиска.КодМесяца = КодМесяца;
					ОчиститьОбласть(ОбластьСтрокаЗаработка);
					ВыводитьСтроку = Ложь;
					Если ВыборкаПоДоходам.НайтиСледующий(СтруктураПоиска) Тогда
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, ВыборкаПоДоходам);
						ВыводитьСтроку = Истина;
					КонецЕсли;
					Если ВыборкаПоКорректирующимСведениям.НайтиСледующий(СтруктураПоиска) Тогда
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, ВыборкаПоКорректирующимСведениям);
						ВыводитьСтроку = Истина;
					КонецЕсли;
					Если ВыборкаПоУплаченнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаработка.Параметры, ВыборкаПоУплаченнымВзносам);
						ВыводитьСтроку = Истина;
					КонецЕсли;
					Если ВыводитьСтроку Тогда 
						ТекущийЛист.Вывести(ОбластьСтрокаЗаработка);
						ЕстьСведенияОЗаработке = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЕстьСведенияОЗаработке Тогда 
					ТекущийЛист.Вывести(ОбластьСтрокаЗаработка);
				КонецЕсли;
				
				ВывестиОбласть(ОбластьВредныеИТяжелыеРаботы, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				
				ЕстьСведенияОЗаработкеНаВредныхИТяжелыхРаботах = Ложь;
				Для Каждого КодМесяца Из СписокМесяцев Цикл 
					СтруктураПоиска.КодМесяца = КодМесяца;
					ОчиститьОбласть(ОбластьСтрокаВредныхИТяжелыхРабот);
					ВыводитьСтроку = Ложь;
					Если ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Тогда
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаВредныхИТяжелыхРабот.Параметры, ВыборкаПоДоходамНаВредныхИТяжелыхРаботах);
						ВыводитьСтроку = Истина;
					КонецЕсли;
					Если ВыводитьСтроку Тогда 
						ВывестиОбласть(ОбластьСтрокаВредныхИТяжелыхРабот, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						ЕстьСведенияОЗаработкеНаВредныхИТяжелыхРаботах = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЕстьСведенияОЗаработкеНаВредныхИТяжелыхРаботах Тогда 
					ТекущийЛист.Вывести(ОбластьСтрокаВредныхИТяжелыхРабот);
				КонецЕсли;
				
				ВывестиОбласть(ОбластьСтаж, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				
				ОчиститьОбласть(ОбластьСтрокаСтажа);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
				
				Если ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИПРЛ Тогда 
					ОбластьСтрокаСтажа.Параметры.ТерриториальныеУсловияКод = "";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОбластьСтрокаСтажа.Параметры.СотрудникУволен) Тогда 
					ОбластьСтрокаСтажа.Параметры.СотрудникУволен = Формат(КонецГода(ВыборкаПоШапкеДокумента.КорректируемыйПериод), "ДЛФ=Д");
				КонецЕсли;
				
				Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
						ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда 
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаКодПозицииСписка.Параметры, ВыборкаПоРаботникам);
							ВывестиОбласть(ОбластьСтрокаКодПозицииСписка, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЕсли;
						Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
							Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
								Продолжить;
							КонецЕсли;
							ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЦикла;	
					КонецЦикла;
				Иначе
					ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
				ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				ДокументРезультат.Вывести(ТекущийЛист);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоФормы, ОбъектыПечати, ВыборкаПоШапкеДокумента.Ссылка);
		
	КонецЦикла;	
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	Если ВыборкаЗаписейСтажа.ТретийПараметрИсчисляемогоСтажа <> Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИПРЛ Тогда 
		ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
		Если ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка) Тогда 
			ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = Строка(ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод) + " " + ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПерсонифицированныйУчет.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	
	ПерсонифицированныйУчет.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ВывестиОбласть(ВыводимаяОбласть, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы);
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = ДокументРезультат.ПолеСлева;
	ТекущийЛист.ПолеСправа = ДокументРезультат.ПолеСправа;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	Возврат ТекущийЛист;
	
КонецФункции

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы)
	
	ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей)
		И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
		ОбластьСтрокаСтажа.Параметры.ДопИТС = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
	КонецЕсли;
	
	ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
	
КонецПроцедуры

Функция ПечатнаяФормаЕФС_1(МассивОбъектов, ОбъектыПечати)
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(МассивОбъектов).Выбрать();
	
	РазделыЕФС1 = ПерсонифицированныйУчет.СписокРазделовЕФС1();
	РазделыЕФС1.СЗВСТАЖ = Истина;
	
	Возврат ПерсонифицированныйУчет.ПечатнаяФормаЕФС_1(ОбъектыПечати, РазделыЕФС1, ВыборкаПоШапкеДокумента, , ВыборкаПоРаботникам);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьОкончаниеКорректируемогоПериода(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
	               |	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
	               |ГДЕ
	               |	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.КорректируемыйПериод <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ОкончаниеКорректируемогоПериода = ДАТАВРЕМЯ(1, 1, 1)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОкончаниеКорректируемогоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ДокументОбъект.КорректируемыйПериод);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли