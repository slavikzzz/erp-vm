
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	Элементы.РасшифровкаНалоговПодменюЗаполнить.Видимость = ИспользоватьНачислениеЗарплаты;
	Элементы.РасшифровкаНалоговЗаполнить.Видимость = Не ИспользоватьНачислениеЗарплаты;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ПредварительноеУведомлениеПоНДФЛ = ДанныеПервойПоловиныПериодаПоНДФЛ;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьДоступностьСубконто();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетФедеральныйЗакон263ФЗ(Объект.Дата) Тогда
		ДанныеВыбора = ОрганизацииПлательщикиЕНП();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Организация = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаНалогов.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект, ВыбранноеЗначение),
			НСтр("ru = 'Таблица расшифровки будет очищена. Продолжить?';
				|en = 'Drill-down table will be cleared. Continue?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииЗавершение(КодВозвратаДиалога.Да, ВыбранноеЗначение)
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПервойПоловиныПериодаПоНДФЛПриИзменении(Элемент)
	
	Если НЕ ДанныеПервойПоловиныПериодаПоНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументЗаПервуюПоловинуПериодаПоНДФЛ(Объект.Дата) Тогда
		
		ТекстСообщения = НСтр("ru = 'Регистрация начислений по НДФЛ за первую половину периода возможна только до 12 числа текущего месяца.';
								|en = 'You can register PIT accruals for the first half of the period only before the 12th day of the current month.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Дата", "Объект");
		
		ДанныеПервойПоловиныПериодаПоНДФЛ = Ложь;
		
	КонецЕсли;
	
	Если НЕ ТаблицаСодержитСведенияТолькоПоНДФЛ(Объект.РасшифровкаНалогов) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для установки флага ""Данные по НДФЛ за первую половину периода""
		|в табличной части документа необходимо оставить только сведения об удержанном НДФЛ.';
		|en = 'To select the ""PIT data for the first half of the period"" check box,
		|leave only information about the withheld PIT in the document table.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "РасшифровкаНалогов", "Объект");
		
		ДанныеПервойПоловиныПериодаПоНДФЛ = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаНалогов

&НаКлиенте
Процедура РасшифровкаНалоговОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Источник", "ПоДаннымДекларацийИРасчетов");
	ПараметрыЗаполнения.Вставить("ТипыНалогов", ВыбранноеЗначение);
	
	ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеСтроки = ОписаниеТекущейСтрокиДокумента();
	
	Если Поле = Элементы.РасшифровкаНалоговПредставлениеПериода Тогда
		РасшифровкаНалоговВыборОтчетногоПериода(Элемент, ОписаниеСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"РасшифровкаНалоговСубконто1", "РасшифровкаНалоговСубконто2", "РасшифровкаНалоговСубконто3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетУчета, ЭтотОбъект, ПоляФормы, Неопределено, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОписаниеСтроки = ОписаниеТекущейСтрокиДокумента();
	Если НоваяСтрока Тогда
		ОписаниеСтроки.ФормироватьУведомление = Истина;
		Если Не ПроверитьЗаполнениеОтчетногоПериода(ОписаниеСтроки) Тогда
			ЗаполнитьОтчетныйПериодПоУмолчанию(ОписаниеСтроки);
			ЗаполнитьСрокУплаты(ОписаниеСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаНалогов.ТекущиеДанные, ОписаниеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговТипНалогаПриИзменении(Элемент)
	
	ОписаниеСтроки = ОписаниеТекущейСтрокиДокумента();
	Если Не ПроверитьЗаполнениеОтчетногоПериода(ОписаниеСтроки) Тогда
		ЗаполнитьОтчетныйПериодПоУмолчанию(ОписаниеСтроки);
	КонецЕсли;
	
	РасшифровкаНалоговТипНалогаПриИзмененииНаСервере(ОписаниеСтроки);
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ОписаниеСтроки);
	ОбработатьИзменениеСчетаУчета(ЭтотОбъект, ТекущиеДанные);
	
	РасшифровкаНалоговУточнитьКБК(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаНалоговТипНалогаПриИзмененииНаСервере(ОписаниеСтроки)
	
	Если ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговУплачиваемыеБезУведомлений().Найти(ОписаниеСтроки.ТипНалога) <> Неопределено Тогда
		ОписаниеСтроки.ФормироватьУведомление = Ложь;
	КонецЕсли;
	
	ОписаниеСтроки.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(ОписаниеСтроки.ТипНалога);
	ОписаниеСтроки.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОписаниеСтроки.СчетУчета);
	
	ИндексСубконто = ДанныеСчета.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет];
	Если ИндексСубконто <> Неопределено Тогда
		ОписаниеСтроки["Субконто" + ИндексСубконто] = ОписаниеСтроки.ВидПлатежаВБюджет;
	КонецЕсли;
	
	ИндексСубконто = ДанныеСчета.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов];
	Если ИндексСубконто <> Неопределено Тогда
		Если ОписаниеСтроки.ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
			ОписаниеСтроки["Субконто" + ИндексСубконто] = Перечисления.УровниБюджетов.ФедеральныйБюджет;
		ИначеЕсли ОписаниеСтроки.ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет Тогда
			ОписаниеСтроки["Субконто" + ИндексСубконто] = Перечисления.УровниБюджетов.РегиональныйБюджет;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСрокУплаты(ОписаниеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСчетУчетаПриИзменении(Элемент)
	ОбработатьИзменениеСчетаУчета(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РасшифровкаНалоговСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РасшифровкаНалоговСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение)
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РасшифровкаНалоговСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДаннымЗарплаты(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Источник", "ПоДаннымЗарплаты");
	
	Если ДанныеПервойПоловиныПериодаПоНДФЛ Тогда
		ПараметрыЗаполнения.Вставить("ДанныеПервойПоловиныПериодаПоНДФЛ", Истина);
	КонецЕсли;
	
	Если Объект.РасшифровкаНалогов.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродолжитьЗаполнение", ЭтотОбъект, ПараметрыЗаполнения),
			НСтр("ru = 'Таблица расшифровки будет очищена. Продолжить?';
				|en = 'Drill-down table will be cleared. Continue?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДекларацийИРасчетов(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Источник", "ПоДаннымДекларацийИРасчетов");
	
	Если Объект.РасшифровкаНалогов.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродолжитьЗаполнение", ЭтотОбъект, ПараметрыЗаполнения),
			НСтр("ru = 'Таблица расшифровки будет очищена. Продолжить?';
				|en = 'Drill-down table will be cleared. Continue?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ДатаОстатков", Объект.Дата);
	
	ОткрытьФорму("Документ.НачислениеЕНП.Форма.ФормаВыбораНалогов",
		ПараметрыПодбора, Элементы.РасшифровкаНалогов);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НачалоПримененияЕНС = ЕдиныйНалоговыйСчет.ДатаНачалаПрименения();
	ДатаВступленияВСилу539ФЗ = ЕдиныйНалоговыйСчет.ДатаВступленияВСилу539ФЗ();
	
	НалогиУплачиваемыеЕжемесячно = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеЕжемесячно();
	НалогиУплачиваемыеПоквартально = ЕдиныйНалоговыйСчетПовтИсп.НалогиУплачиваемыеПоквартально();
	ТипыНалоговАгентскогоНДФЛ = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНДФЛНалоговогоАгента();
	
	СтатьиДоходовБюджетаРФ = ЕдиныйНалоговыйСчет.КБКПоТипамНалогов(Объект.Дата);
	
	ДанныеПервойПоловиныПериодаПоНДФЛ = Объект.ПредварительноеУведомлениеПоНДФЛ;
	Если Не ДоступнаОтправкаПредварительныхУведомленийПоНДФЛ(Объект.Дата) Тогда
		Элементы.ДанныеПервойПоловиныПериодаПоНДФЛ.Видимость = ДанныеПервойПоловиныПериодаПоНДФЛ;
		Элементы.ДанныеПервойПоловиныПериодаПоНДФЛ.Доступность = Ложь;
	КонецЕсли;
	
	ТипыСвязанныеСОрганизацией = НастройкаСчетовУчетаСервер.ТипыСвязанныеСОрганизацией();
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	СтатьиДоходовБюджетаРФ = ЕдиныйНалоговыйСчет.КБКПоТипамНалогов(Объект.Дата);
	
	ДоступнаОтправкаПредварительныхУведомленийПоНДФЛ = ДоступнаОтправкаПредварительныхУведомленийПоНДФЛ(Объект.Дата);
	
	Элементы.ДанныеПервойПоловиныПериодаПоНДФЛ.Доступность = ДоступнаОтправкаПредварительныхУведомленийПоНДФЛ;
	Элементы.ДанныеПервойПоловиныПериодаПоНДФЛ.Видимость = ДоступнаОтправкаПредварительныхУведомленийПоНДФЛ;
	
	Если Не ДоступнаОтправкаПредварительныхУведомленийПоНДФЛ Тогда
		ДанныеПервойПоловиныПериодаПоНДФЛ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Представление отчетного периода
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаНалоговПредставлениеПериода");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаНалогов.ПредставлениеПериода", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Заполнить>';
																	|en = '<Fill>'"));
	
	Для Индекс = 1 По 3 Цикл
		
		// Подсказка субконто
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто" + Индекс].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс + "Доступность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
		
		// Доступность субконто
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто" + Индекс].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс + "Доступность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()
	
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаНалогов Цикл
		СтрокаТаблицы.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(СтрокаТаблицы.НачалоПериода, СтрокаТаблицы.КонецПериода);
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		ИндексСубконто = ДанныеСчета.ИдентификаторыСубконто[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет];
		Если ИндексСубконто <> Неопределено Тогда
			СтрокаТаблицы.ВидПлатежаВБюджет = СтрокаТаблицы["Субконто" + ИндексСубконто];
		Иначе
			СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаНалогов Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетУчета, СтрокаТаблицы, ПоляОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеТекущейСтрокиДокумента()
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСтроки = Новый Структура("ТипНалога, КодБК, Сумма,
		|НачалоПериода, КонецПериода, ПредставлениеПериода,
		|СчетУчета, Субконто1, Субконто2, Субконто3, ВидПлатежаВБюджет,
		|СрокУплаты, ФормироватьУведомление");
	ЗаполнитьЗначенияСвойств(ОписаниеСтроки, ТекущиеДанные);
	ОписаниеСтроки.КонецПериода = КонецДня(ТекущиеДанные.КонецПериода);
	
	ОписаниеСтроки.Вставить("ЭтоАгентскийНДФЛ",
		ТипыНалоговАгентскогоНДФЛ.Найти(ТекущиеДанные.ТипНалога) <> Неопределено);
	ОписаниеСтроки.Вставить("Идентификатор", Элементы.РасшифровкаНалогов.ТекущаяСтрока);
	
	Возврат ОписаниеСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьЗаполнение(Ответ, ПараметрыЗаполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаНалогов.Очистить();
	
	ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЗаполнениеНаСервере(ПараметрыЗаполнения)
	
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Ссылка", Объект.Ссылка);
	
	ЗаполнитьНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.Источник = "ПоДаннымЗарплаты" Тогда
		ТаблицаНалогов = Документы.НачислениеЕНП.ПолучитьНалогиПоДаннымЗарплаты(ПараметрыЗаполнения);
	Иначе
		ТаблицаНалогов = Документы.НачислениеЕНП.ПолучитьНалогиПоДаннымДекларацийИРасчетов(ПараметрыЗаполнения);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалогов Цикл
		НоваяСтрока = Объект.РасшифровкаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		ОбработатьИзменениеСчетаУчета(ЭтотОбъект, НоваяСтрока);
		НоваяСтрока.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(НоваяСтрока.НачалоПериода, НоваяСтрока.КонецПериода);
		НоваяСтрока.ФормироватьУведомление =
			ТипыНалоговАгентскогоНДФЛ.Найти(СтрокаТаблицы.ТипНалога) <> Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчетаУчета(Форма, СтрокаТаблицы)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"РасшифровкаНалоговСубконто1", "РасшифровкаНалоговСубконто2", "РасшифровкаНалоговСубконто3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СтрокаТаблицы.СчетУчета, Форма, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	ПоляОбъекта.Вставить("Организация", Форма.Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы["СчетУчета"], СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы)
	
	ПараметрыДокумента = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСубконто(Форма.Объект.Организация, СтрокаТаблицы, "Субконто%Индекс%", "СчетУчета");
	НастройкаСчетовУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, СтрокаТаблицы, "Субконто%Индекс%", "РасшифровкаНалоговСубконто%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные      = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	ПараметрыДокумента = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСубконто(Объект.Организация, ТекущиеДанные, "Субконто%Индекс%", "СчетУчета");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение)
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет") Тогда
		ТекущиеДанные.ВидПлатежаВБюджет = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацииПлательщикиЕНП()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Организация КАК Организация
	|ИЗ РегистрСведений.НастройкиСистемыНалогообложения
	|ГДЕ ПлательщикЕНП";
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Ответ, РезультатВыбора) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаНалогов.Очистить();
	Объект.Организация = РезультатВыбора;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговУточнитьКБК(ТекущиеДанные)
	
	КБКПоТипуНалога = СтатьиДоходовБюджетаРФ.Получить(ТекущиеДанные.ТипНалога);
	Если Не ЗначениеЗаполнено(КБКПоТипуНалога) Тогда
		ТекущиеДанные.КодБК = "";
		Возврат;
	КонецЕсли;
	
	Если КБКПоТипуНалога.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаНалоговУточнитьКБКЗавершение", ЭтотОбъект, ТекущиеДанные);
		ПоказатьВыборИзСписка(ОписаниеОповещения, КБКПоТипуНалога, Элементы.РасшифровкаНалоговКодБК);
	Иначе
		РасшифровкаНалоговУточнитьКБКЗавершение(КБКПоТипуНалога.Получить(0), ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговУточнитьКБКЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КБК = Результат.Значение;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидПлатежаВБюджет) Тогда
		ТекущиеДанные.ВидПлатежаВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог");
	КонецЕсли;
	
	КБКПоВидуПлатежа = "";
	Для Каждого ПодвидДохода Из КБК.ПодвидыДохода Цикл
		Если ПодвидДохода.Значение.ВидПлатежа = ТекущиеДанные.ВидПлатежаВБюджет Тогда
			КБКПоВидуПлатежа = КБК.Администратор + КБК.ВидДохода + ПодвидДохода.Ключ + КБК.КОСГУ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные.КодБК = КБКПоВидуПлатежа;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговВыборОтчетногоПериода(Элемент, ОписаниеСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(ПараметрыВыбораПериода, ОписаниеСтроки);
	
	ПараметрыВыбораПериода.Вставить("МинимальныйПериод",
		НачалоГода(ДобавитьМесяц(НачалоПримененияЕНС, -1)));
	ПараметрыВыбораПериода.Вставить("ОграничениеСнизу", ПараметрыВыбораПериода.МинимальныйПериод);
	
	ИмяФормыПериода = "ОбщаяФорма.ВыборСтандартногоПериодаМесяц";
	Если НалогиУплачиваемыеПоквартально.Найти(ОписаниеСтроки.ТипНалога) <> Неопределено Тогда
		ИмяФормыПериода = "ОбщаяФорма.ВыборСтандартногоПериодаКвартал";
	ИначеЕсли НалогиУплачиваемыеЕжемесячно.Найти(ОписаниеСтроки.ТипНалога) = Неопределено Тогда
		ПараметрыВыбораПериода.Вставить("ВыборКварталов", Истина);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаНалоговПроверитьВыборОтчетногоПериода", ЭтотОбъект, ОписаниеСтроки);
	ОткрытьФорму(ИмяФормыПериода, ПараметрыВыбораПериода, ЭтотОбъект, УникальныйИдентификатор, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговПроверитьВыборОтчетногоПериода(Результат, ОписаниеСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПериодов = Новый СписокЗначений;
	
	Если Не ОписаниеСтроки.ЭтоАгентскийНДФЛ Тогда
		
		ОтчетныйПериод = СписокПериодов.Добавить(Результат,
			ПредставлениеПериодаОтчета(Результат.НачалоПериода, Результат.КонецПериода));
		
	ИначеЕсли Результат.НачалоПериода >= ДатаВступленияВСилу539ФЗ Тогда
		
		// НДФЛ налогового агента с 01.01.2024 года
		
		ГраницаПериодов = Результат.НачалоПериода + 22 * 86400; // 23-е число текущего месяца
		
		ПерваяПоловина = Новый Структура("НачалоПериода, КонецПериода", Результат.НачалоПериода, ГраницаПериодов - 1);
		ВтораяПоловина = Новый Структура("НачалоПериода, КонецПериода", ГраницаПериодов, Результат.КонецПериода);
		
		ПараметрыПредставлений = Новый Структура("МесяцПрописью, ПерваяПоловина, ВтораяПоловина");
		ПараметрыПредставлений.МесяцПрописью = 
			Сред(Формат(Результат.НачалоПериода, НСтр("ru = 'ДФ=''д ММММ''';
														|en = 'DF=''MMMM d'''")), 3); // Например - "1 февраля" -> "февраля"
		ПараметрыПредставлений.ПерваяПоловина = СтрШаблон(НСтр("ru = 'до %1';
																|en = 'until %1'"), Формат(ГраницаПериодов, "ДЛФ=Д"));
		ПараметрыПредставлений.ВтораяПоловина = ПредставлениеПериодаОтчета(ГраницаПериодов, Результат.КонецПериода);
		
		ОтчетныйПериод = СписокПериодов.Добавить(
			ПерваяПоловина, СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				НСтр("ru = 'Начало [МесяцПрописью]: [ПерваяПоловина]';
					|en = 'Start of [МесяцПрописью]: [ПерваяПоловина]'"),
				ПараметрыПредставлений));
		
		ОтчетныйПериод = СписокПериодов.Добавить(
			ВтораяПоловина, СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				НСтр("ru = 'Конец [МесяцПрописью]: [ВтораяПоловина]';
					|en = 'End of [МесяцПрописью]: [ВтораяПоловина]'"),
				ПараметрыПредставлений));
		
	ИначеЕсли Результат.КонецПериода = КонецГода(Результат.КонецПериода) Тогда
		
		// НДФЛ налогового агента - в декабре
		
		ГраницаПериодов = Результат.НачалоПериода + 22 * 86400; // 23-е декабря
		
		ПерваяПоловина = Новый Структура("НачалоПериода, КонецПериода", Результат.НачалоПериода, Результат.КонецПериода);
		ВтораяПоловина = Новый Структура("НачалоПериода, КонецПериода", ГраницаПериодов, Результат.КонецПериода);
		
		ПараметрыПредставлений = Новый Структура("МесяцПрописью, ПерваяПоловина, ВтораяПоловина");
		ПараметрыПредставлений.МесяцПрописью = 
			Сред(Формат(Результат.НачалоПериода, НСтр("ru = 'ДФ=''д ММММ''';
														|en = 'DF=''MMMM d'''")), 3); // Например - "1 декабря" -> "декабря"
		ПараметрыПредставлений.ПерваяПоловина = СтрШаблон(НСтр("ru = 'до %1';
																|en = 'until %1'"), Формат(ГраницаПериодов, "ДЛФ=Д"));
		ПараметрыПредставлений.ВтораяПоловина = ПредставлениеПериодаОтчета(ГраницаПериодов, Результат.КонецПериода);
		
		ОтчетныйПериод = СписокПериодов.Добавить(
			ПерваяПоловина, СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				НСтр("ru = 'Начало [МесяцПрописью]: [ПерваяПоловина]';
					|en = 'Start of [МесяцПрописью]: [ПерваяПоловина]'"),
				ПараметрыПредставлений));
		
		ОтчетныйПериод = СписокПериодов.Добавить(
			ВтораяПоловина, СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				НСтр("ru = 'Конец [МесяцПрописью]: [ВтораяПоловина]';
					|en = 'End of [МесяцПрописью]: [ВтораяПоловина]'"),
				ПараметрыПредставлений));
		
	Иначе
		
		// НДФЛ налогового агента
		
		ОтчетныйПериод = СписокПериодов.Добавить(Результат,
			ПредставлениеПериодаОтчета(Результат.НачалоПериода, Результат.КонецПериода));
		
		Если Результат.КонецПериода = КонецГода(Результат.КонецПериода) Тогда
			ГраницаПериода = Результат.НачалоПериода + 22 * 86400; // 23-е декабря
			ОтчетныйПериод = СписокПериодов.Добавить(
				Новый Структура("НачалоПериода, КонецПериода", ГраницаПериода, Результат.КонецПериода),
				ПредставлениеПериодаОтчета(ГраницаПериода, Результат.КонецПериода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокПериодов.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаНалоговВыборОтчетногоПериодаЗавершение", ЭтотОбъект, ОписаниеСтроки);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокПериодов, Элементы.РасшифровкаНалоговПредставлениеПериода);
		
	ИначеЕсли СписокПериодов.Количество() = 1 Тогда
		
		РасшифровкаНалоговВыборОтчетногоПериодаЗавершение(ОтчетныйПериод, ОписаниеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговВыборОтчетногоПериодаЗавершение(Результат, ОписаниеСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОписаниеСтроки, Результат.Значение);
	Если Не ПроверитьЗаполнениеОтчетногоПериода(ОписаниеСтроки) Тогда
		ЗаполнитьОтчетныйПериодПоУмолчанию(ОписаниеСтроки);
	КонецЕсли;
	
	ОписаниеСтроки.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ОписаниеСтроки.НачалоПериода, ОписаниеСтроки.КонецПериода);
	ЗаполнитьСрокУплаты(ОписаниеСтроки);
	
	ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаНалогов.ТекущиеДанные, ОписаниеСтроки);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаОтчета(Знач НачалоПериода, Знач КонецПериода)
	
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат "";
	КонецЕсли;
	
	НачалоПериода = НачалоДня(НачалоПериода);
	КонецПериода  = КонецДня(КонецПериода);
	
	Возврат ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСрокУплаты(ОписаниеСтроки)
	
	НачалоПериода = ОписаниеСтроки.НачалоПериода;
	КонецПериода  = ОписаниеСтроки.КонецПериода;
	
	Если ОписаниеСтроки.ЭтоАгентскийНДФЛ Тогда
		
		Если НачалоПериода > НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(КонецПериода)
			И КонецПериода <> КонецГода(КонецПериода) Тогда
			
			// Вторая половина месяца (кроме декабря) - уплата 5-го числа следующего месяца
			МесяцПлатежа = ДобавитьМесяц(КонецПериода, 1);
			РасчетныйСрокУплаты = Дата(Год(МесяцПлатежа), Месяц(МесяцПлатежа), 5);
			
		ИначеЕсли КонецПериода = КонецГода(КонецПериода) И НачалоПериода > НачалоМесяца(НачалоПериода) Тогда
			
			// Вторая половина декабря- уплата 31-го декабря
			РасчетныйСрокУплаты = НачалоДня(КонецГода(КонецПериода));
			
		Иначе
			
			// Первая половина месяца - уплата 28-го числа текущего месяца
			РасчетныйСрокУплаты = Дата(Год(КонецПериода), Месяц(КонецПериода), 28);
			
		КонецЕсли;
		
	Иначе
		
		// Общий порядок - уплата 28-го числа следующего месяца
		МесяцПлатежа = ДобавитьМесяц(КонецПериода, 1);
		РасчетныйСрокУплаты = Дата(Год(МесяцПлатежа), Месяц(МесяцПлатежа), 28);
		
	КонецЕсли;
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	ПараметрыПолученияБлижайшихРабочихДат =
		КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат(ПроизводственныйКалендарь);
	ПараметрыПолученияБлижайшихРабочихДат.ВызыватьИсключение = Ложь;
	Если ОписаниеСтроки.ЭтоАгентскийНДФЛ И КонецДня(РасчетныйСрокУплаты) = КонецГода(КонецПериода) Тогда
		ПараметрыПолученияБлижайшихРабочихДат.ПолучатьПредшествующие = Истина;
	КонецЕсли;
	
	ГрафикПереноса = КалендарныеГрафики.БлижайшиеРабочиеДаты(
		КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(),
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РасчетныйСрокУплаты),
		ПараметрыПолученияБлижайшихРабочихДат);
	
	Если ГрафикПереноса[РасчетныйСрокУплаты] <> Неопределено Тогда
		ОписаниеСтроки.СрокУплаты = ГрафикПереноса[РасчетныйСрокУплаты];
	Иначе
		ОписаниеСтроки.СрокУплаты = РасчетныйСрокУплаты;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось определить ближайшую рабочую дату для даты %1, возможно, производственный календарь не заполнен.';
				|en = 'Cannot identify the workday nearest to %1. The work schedule might be blank.'"),
			Формат(РасчетныйСрокУплаты, "ДЛФ=D")));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаОтправкаПредварительныхУведомленийПоНДФЛ(Знач ДатаДокумента)
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ДатаДокумента < ЕдиныйНалоговыйСчет.ДатаВступленияВСилу539ФЗ()
		И ДатаДокумента >= УчетНДФЛ.НачалоПередачиЧастичныхУведомлений();
	
КонецФункции

&НаКлиенте
Функция ДокументЗаПервуюПоловинуПериодаПоНДФЛ(Знач ДатаДокумента)
	Возврат День(ДатаДокумента) <= 12;
КонецФункции

&НаКлиенте
Функция ТаблицаСодержитСведенияТолькоПоНДФЛ(ТаблицаНалогов)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалогов Цикл
		Если ТипыНалоговАгентскогоНДФЛ.Найти(СтрокаТаблицы.ТипНалога) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеОтчетногоПериода(ОписаниеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ОписаниеСтроки.НачалоПериода)
		ИЛИ НЕ ЗначениеЗаполнено(ОписаниеСтроки.КонецПериода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(ОписаниеСтроки.НачалоПериода);
	КонецПериода  = КонецДня(ОписаниеСтроки.КонецПериода);
	
	Если НалогиУплачиваемыеПоквартально.Найти(ОписаниеСтроки.ТипНалога) <> Неопределено Тогда
		
		Возврат НачалоКвартала(НачалоПериода) = НачалоКвартала(КонецПериода) // Начало и конец периода в одном квартале
			И НачалоПериода = НачалоКвартала(НачалоПериода) // Начало периода соответствует началу квартала
			И КонецПериода = КонецКвартала(КонецПериода); // Конец периода соответствует концу квартала
		
	ИначеЕсли ОписаниеСтроки.ЭтоАгентскийНДФЛ И НачалоПериода >= ДатаВступленияВСилу539ФЗ Тогда
		
		Возврат НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) // Начало и окончание периода в одном месяце
			И ((НачалоПериода = НачалоМесяца(НачалоПериода) И День(КонецПериода) = 22) // С начала месяца по 22-е число
				ИЛИ (День(НачалоПериода) = 23) И КонецПериода = КонецМесяца(КонецПериода)); // С 23-го числа по конец месяца
		
	ИначеЕсли ОписаниеСтроки.ЭтоАгентскийНДФЛ И КонецПериода = КонецГода(КонецПериода) Тогда
		
		Возврат НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) // Начало и окончание периода в одном месяце
			И (НачалоПериода = НачалоМесяца(НачалоПериода) // Полный месяц декабрь
				ИЛИ День(НачалоПериода) = 23); // Или с 23-го декабря по конец года
		
	ИначеЕсли НалогиУплачиваемыеЕжемесячно.Найти(ОписаниеСтроки.ТипНалога) <> Неопределено Тогда
		
		Возврат НачалоПериода = НачалоМесяца(КонецПериода)
			И НачалоПериода = НачалоМесяца(НачалоПериода)
			И КонецПериода = КонецМесяца(КонецПериода);
		
	Иначе
		
		Возврат НачалоПериода <= НачалоМесяца(КонецПериода)
			И НачалоПериода = НачалоМесяца(НачалоПериода)
			И КонецПериода = КонецМесяца(КонецПериода);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтчетныйПериодПоУмолчанию(ОписаниеСтроки)
	
	Если ЗначениеЗаполнено(ОписаниеСтроки.НачалоПериода) Тогда
		ОтчетныйПериод = ОписаниеСтроки.НачалоПериода;
	Иначе
		ОтчетныйПериод = Объект.Дата;
	КонецЕсли;
	
	Если НалогиУплачиваемыеПоквартально.Найти(ОписаниеСтроки.ТипНалога) <> Неопределено Тогда
		
		НачалоПериода = НачалоКвартала(ОтчетныйПериод);
		КонецПериода  = КонецКвартала(ОтчетныйПериод);
		
	Иначе
		
		НачалоПериода = НачалоМесяца(ОтчетныйПериод);
		КонецПериода  = КонецМесяца(ОтчетныйПериод);
		
		Если ОписаниеСтроки.ЭтоАгентскийНДФЛ И НачалоПериода >= ДатаВступленияВСилу539ФЗ Тогда
			
			ГраницаПериодов = НачалоПериода + 22 * 86400; // 23-е число отчетного месяца
			Если Объект.Дата >= ГраницаПериодов Тогда
				НачалоПериода = ГраницаПериодов; // С 23-го числа по последнее число отчетного месяца
			Иначе
				КонецПериода = ГраницаПериодов - 1; // C 1-го по 22-е число отчетного месяца
			КонецЕсли;
			
		ИначеЕсли ОписаниеСтроки.ЭтоАгентскийНДФЛ И КонецДня(Объект.Дата) = КонецГода(Объект.Дата) Тогда
			
			НачалоПериода = НачалоПериода + 22 * 86400; // С 23-го декабря до конца года
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеСтроки.НачалоПериода = НачалоПериода;
	ОписаниеСтроки.КонецПериода  = КонецПериода;
	
	ОписаниеСтроки.ПредставлениеПериода = ПредставлениеПериодаОтчета(НачалоПериода, КонецПериода);
	
КонецПроцедуры

#КонецОбласти