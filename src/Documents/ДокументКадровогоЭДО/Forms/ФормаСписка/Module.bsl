#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КадровыйЭДО.ДокументКадровогоЭДОФормаСпискаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КомандыФормыГруппа;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список");
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список");
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	СтруктураПараметровОтбора = Новый Структура();
	ИмяФОСтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц = "СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц";
	ИмяТипаСтруктураПредприятия = "СправочникСсылка.СтруктураПредприятия";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы")
		И ПолучитьФункциональнуюОпцию(ИмяФОСтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц) Тогда
		
		ЗарплатаКадры.ДобавитьПараметрОтбора(СтруктураПараметровОтбора, "МестоВСтруктуреПредприятия",
			Новый ОписаниеТипов(ИмяТипаСтруктураПредприятия), НСтр("ru = 'Подразделение';
																	|en = 'Business unit'"), "");
	Иначе
		ЗарплатаКадры.ДобавитьПараметрОтбора(СтруктураПараметровОтбора, "Подразделение",
			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), НСтр("ru = 'Подразделение';
																					|en = 'Business unit'"), "");
	КонецЕсли;
	
	ЗарплатаКадры.ДобавитьПараметрОтбора(СтруктураПараметровОтбора, "ФизическоеЛицо",
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), НСтр("ru = 'Сотрудник';
																	|en = 'Employee'"));
	
	ЗарплатаКадры.ДобавитьПараметрОтбора(СтруктураПараметровОтбора, "ВидОснования",
		Новый ОписаниеТипов(), НСтр("ru = 'Вид основания';
									|en = 'Basis kind'"));
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список",,
		СтруктураПараметровОтбора, "СписокКритерииОтбора");
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Параметры.РежимВыбора Тогда
		Элементы.Список.РежимВыбора = Истина;
	Иначе
		Элементы.Список.РежимВыбора = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВидСпискаПодменю",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьКЭДО"));
	
	УстановитьУсловноеОформление();
	ПоказыватьРеквизитыПериодаИПубликации = Ложь;
	Если Параметры.РасчетныеЛисты Тогда
		
		СкрытьПодменюВыбораВидаСписка();
		ПоказыватьРеквизитыПериодаИПубликации = Истина;
		Заголовок = НСтр("ru = 'Документы кадрового ЭДО (расчетные листки)';
						|en = 'HR EDI documents (payslips)'");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "КатегорияДокумента", Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток, ВидСравненияКомпоновкиДанных.Равно, ,
			Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ИначеЕсли Параметры.ДокументыНаПодпись Тогда
		СкрытьПодменюВыбораВидаСписка();
		УстановитьВидСписка(ЭтотОбъект, Команды.НаПодпись);
	Иначе
		УстановитьВидСписка(ЭтотОбъект, Команды.ВсеДокументы);
	КонецЕсли;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список, "СодержимоеДокументов", КадровыйЭДО.ДоступныеСодержанияДокументовПользователя(Пользователи.ТекущийПользователь()), Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Период",
		"Видимость",
		ПоказыватьРеквизитыПериодаИПубликации);
	
	НайденныеПараметры = ЭтотОбъект.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", "ВидОснования"));
	Если НайденныеПараметры.Количество() > 0 Тогда
		Элемент = Элементы.Найти(НайденныеПараметры[0].ИмяЭлементаФормыПараметра);
		Если Элемент <> Неопределено Тогда
			Элемент.РежимВыбораИзСписка = Истина;
			Элемент.ВыбиратьТип = Ложь;
			Элемент.КнопкаОчистки = Истина;
			Элемент.СписокВыбора.Очистить();
			Элемент.СписокВыбора.Добавить(Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток,
				Строка(Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток));
			Элемент.СписокВыбора.Добавить(Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника,
				Строка(Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника));
			Для Каждого ТипСПечатнымиФормами Из Метаданные.ОпределяемыеТипы.ОбъектСПечатнымиФормами.Тип.Типы() Цикл
				Если ТипСПечатнымиФормами = Тип("ДокументСсылка.ДокументКадровогоЭДО") Тогда
					Элемент.СписокВыбора.Добавить(ТипСПечатнымиФормами, НСтр("ru = 'Внешний документ';
																			|en = 'External document'"));
				Иначе
					Элемент.СписокВыбора.Добавить(ТипСПечатнымиФормами, Строка(ТипСПечатнымиФормами));
				КонецЕсли;
			КонецЦикла;
			Элемент.СписокВыбора.СортироватьПоПредставлению();
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущийИсполнитель", Пользователи.ТекущийПользователь());
	УстановитьОтборПоказыватьДокументыВыбывшихСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленыДанныеДокументовКЭДО" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ОснованиеДокумента" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, Элементы.Список.ТекущиеДанные.ОснованиеДокумента);
		ИначеЕсли Поле.Имя = "СостояниеПодписей" Тогда
			СтандартнаяОбработка = Ложь;
			ВозможноМенятьСостояниеПолученияОригиналов = Истина;
			ПодписанныеОригиналыПолучены = Неопределено;
			Для Каждого ДокументКЭДО Из Элементы.Список.ВыделенныеСтроки Цикл
				ТекущиеДанные = Элементы.Список.ДанныеСтроки(ДокументКЭДО);
				Если ТекущиеДанные.ВариантПодписания <> ПредопределенноеЗначение("Перечисление.ВариантыПодписанияДокументовКЭДО.НеобходимаСобственноручнаяПодпись")
					Или ТекущиеДанные.КоличествоПЭП = 0 Тогда
					
					ВозможноМенятьСостояниеПолученияОригиналов = Ложь;
					ПоказатьПредупреждение(, НСтр("ru = 'Выбраны строки не поддерживающие регистрацию получения оригиналов ';
													|en = 'The selected lines do not support registering original receipt'"));
					Прервать;
				КонецЕсли;
				Если ПодписанныеОригиналыПолучены = Неопределено Тогда
					ПодписанныеОригиналыПолучены = ТекущиеДанные.ПодписанныеОригиналыПолучены;
				Иначе
					Если ПодписанныеОригиналыПолучены <> ТекущиеДанные.ПодписанныеОригиналыПолучены Тогда
						ВозможноМенятьСостояниеПолученияОригиналов = Ложь;
						ПоказатьПредупреждение(, НСтр("ru = 'Выбраны строки с разным состоянием регистрации получения оригиналов ';
														|en = 'Lines with different states of original receipt registration are selected'"));
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ВозможноМенятьСостояниеПолученияОригиналов Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ДокументыКадровогоЭДО", Элементы.Список.ВыделенныеСтроки);
				Оповещение = Новый ОписаниеОповещения("ПриИзмененииСостоянияПодписей", ЭтотОбъект, ДополнительныеПараметры);
				СписокПунктов = Новый СписокЗначений;
				Если ПодписанныеОригиналыПолучены Тогда
					СписокПунктов.Добавить("Обновить", НСтр("ru = 'Обновить сведения о получении';
															|en = 'Update receipt information'"));
					СписокПунктов.Добавить("Очистить", НСтр("ru = 'Очистить сведения о получении';
															|en = 'Clear receipt information'"));
				Иначе
					СписокПунктов.Добавить("Зарегистрировать", НСтр("ru = 'Подписанные оригиналы получены';
																	|en = 'Signed originals are received'"));
				КонецЕсли;
				ПоказатьВыборИзСписка(Оповещение, СписокПунктов, Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСостоянияПодписей(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ЗарегистрироватьПолучениеПодписанныхОригиналов(ДополнительныеПараметры.ДокументыКадровогоЭДО, ВыбранноеЗначение.Значение <> "Очистить");
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПараметрОтбораПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ПараметрОтбораНаФормеСДинамическимСпискомПриИзменении(ЭтотОбъект, Элемент.Имя);
	Если СтрНачинаетсяС(Элемент.Имя, "ВидОснования_") Тогда
		
		НайденныеПараметры = ЭтотОбъект.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", "ВидОснования"));
		Если НайденныеПараметры.Количество() > 0 Тогда
			
			Использование = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
				ЭтотОбъект, НайденныеПараметры[0].ИмяРеквизитаФормыПараметраИспользование);
			
			ВидОснования = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
				ЭтотОбъект, НайденныеПараметры[0].ИмяРеквизитаФормыПараметра);
			
			Если ВидОснования = Неопределено Тогда
				ВидОснования = Тип("Строка");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список, "Внешний", Истина,
				Использование И ВидОснования = Тип("ДокументСсылка.ДокументКадровогоЭДО"));
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список, "ВидОснованияКатегория", ВидОснования,
				Использование И ТипЗнч(ВидОснования) = Тип("ПеречислениеСсылка.КатегорииДокументовКадровогоЭДО"));
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список, "ВидОснованияДокумент", ВидОснования,
				Использование И ТипЗнч(ВидОснования) <> Тип("ПеречислениеСсылка.КатегорииДокументовКадровогоЭДО"));
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Элемент.ТекущиеДанные <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "Внешний") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаСкопировать",
			"Доступность",
			Элемент.ТекущиеДанные.Внешний);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриПолученииДанныхНаСервере(Настройки, Строки);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВсеДокументы(Команда)
	
	УстановитьВидСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НаПодпись(Команда)
	
	УстановитьВидСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписанные(Команда)
	
	УстановитьВидСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьДокументыВыбывшихСотрудников(Команда)
	
	ПоказыватьДокументыВыбывшихСотрудников = Не ПоказыватьДокументыВыбывшихСотрудников;
	УстановитьОтборПоказыватьДокументыВыбывшихСотрудников();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамИзСписка(ЭтотОбъект, "Список", Поле, СтандартнаяОбработка);
	СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаСервере
Процедура НастроитьДинамическийСписокНаСервере(ОписаниеМодификации) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыРасширенный");
		МодульЗарплатаКадрыРасширенный.НастроитьДинамическийСписокПоОписаниюМодификации(ЭтаФорма, ОписаниеМодификации);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкрытьПодменюВыбораВидаСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВидСпискаПодменю",
		"Видимость",
		Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидСписка(УправляемаяФорма, Команда)
	
	Элементы = УправляемаяФорма.Элементы;
	Команды = УправляемаяФорма.Команды;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		УправляемаяФорма.Список, "Исполнители", УправляемаяФорма.ТекущийПользователь,
		Команда = Команды.НаПодпись);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		УправляемаяФорма.Список, "Подписанты", УправляемаяФорма.ТекущийПользователь,
		Команда = Команды.Подписанные);
		
	Если Команда <> Команды.ВсеДокументы Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			УправляемаяФорма.Список, "ПометкаУдаления", Ложь, ВидСравненияКомпоновкиДанных.Равно,
			НСтр("ru = 'Не помеченные на удаление';
				|en = 'Not marked for deletion'"), Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,
			"640dbb80-5a11-4a41-8427-547f2666567d");
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			УправляемаяФорма.Список, "ПометкаУдаления", НСтр("ru = 'Не помеченные на удаление';
															|en = 'Not marked for deletion'"));
	КонецЕсли;
	
	Если Команда = Команды.ВсеДокументы Тогда
		УправляемаяФорма.Заголовок = НСтр("ru = 'Документы кадрового ЭДО';
											|en = 'HR EDI documents'");
		УстановитьПометкуВидаСпискаСписка(УправляемаяФорма, Элементы.ВсеДокументы);
	ИначеЕсли Команда = Команды.НаПодпись Тогда
		УправляемаяФорма.Заголовок = НСтр("ru = 'Документы кадрового ЭДО (на подпись мне)';
											|en = 'HR EDI documents (for me to sign)'");
		УстановитьПометкуВидаСпискаСписка(УправляемаяФорма, Элементы.НаПодпись);
	ИначеЕсли Команда = Команды.Подписанные Тогда
		УправляемаяФорма.Заголовок = НСтр("ru = 'Документы кадрового ЭДО (подписанные мною)';
											|en = 'HR EDI documents (signed by me)'");
		УстановитьПометкуВидаСпискаСписка(УправляемаяФорма, Элементы.Подписанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.ЭлектронныйДокумент");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Список.ОснованиеДокумента"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭлектронныйДокумент");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Список.ТипОснованияДокумента");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Тип("ДокументСсылка.ДокументКадровогоЭДО");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(""));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОснованиеДокумента");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуВидаСпискаСписка(УправляемаяФорма, ВыбранныйВидСписка)
	
	Элементы = УправляемаяФорма.Элементы;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ВидСпискаПодменю.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Пометка = ПодчиненныйЭлемент = ВыбранныйВидСписка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗарегистрироватьПолучениеПодписанныхОригиналов(ДокументыКЭДО, ОригиналыПолучены)
	РегистрыСведений.СостоянияДокументовКЭДО.ЗарегистрироватьПолучениеПодписанныхОригиналов(
		ДокументыКЭДО, ОригиналыПолучены);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоказыватьДокументыВыбывшихСотрудников()
	
	Элементы.ПоказыватьДокументыВыбывшихСотрудников.Пометка = ПоказыватьДокументыВыбывшихСотрудников;
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	УстановитьПривилегированныйРежим(Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ДатаДляПроверкиВыбывших", ТекущаяДатаСеанса(), Не ПоказыватьДокументыВыбывшихСотрудников);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ДнейСохраненияПубликации", Настройки.ДнейСохраненияПубликации, Не ПоказыватьДокументыВыбывшихСотрудников);
	
КонецПроцедуры

#КонецОбласти
