///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Страхователь)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МетаданныеДокумента = ОбъектМетаданных();
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО()
		Или Не ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(МетаданныеДокумента.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	ВРаботе                  = Требования.Количество();
	ТребуетсяЗагрузить       = Требования.НайтиСтроки(Новый Структура("ТребуетсяЗагрузить", Истина)).Количество();
	ТребуетсяОтветитьВсего   = Требования.НайтиСтроки(Новый Структура("ТребуетсяОтветить", Истина)).Количество();
	ТребуетсяОтветитьСегодня = Требования.НайтиСтроки(Новый Структура("ТребуетсяОтветитьСегодня", Истина)).Количество();
	ТребуетсяОтветитьЗавтра  = ТребуетсяОтветитьВсего - ТребуетсяОтветитьСегодня;
	ТребуетсяПодтвердить     = Требования.НайтиСтроки(Новый Структура("ТребуетсяПодтвердить", Истина)).Количество();
	ИмяДокумента             = МетаданныеДокумента.Имя;
	ПредставлениеСписка      = МетаданныеДокумента.ПредставлениеСписка;
	
	Для Каждого Раздел Из Разделы Цикл
		
		ПолноеИмяРаздела = СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_ВРаботе_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ВРаботе > 0);
		Дело.Важное         = (ТребуетсяОтветитьСегодня > 0);
		Дело.Владелец       = Раздел;
		Дело.Представление  = ПредставлениеСписка;
		Дело.Количество     = ВРаботе;
		Дело.Подсказка      = НСтр("ru = 'Извещения о представлении недостающих документов для выплаты пособий СФР.';
									|en = 'Notifications about submission of the necessary documents to receive benefits from the Social Insurance Fund of Russia.'");
		Дело.ПараметрыФормы = Новый Структура("ТолькоВРаботе", Истина);
		Дело.Форма          = "Документ.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.ФормаСписка";
		
		ИдентификаторРодителя = Дело.Идентификатор;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Загрузить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяЗагрузить > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Получить новые извещения из СФР';
									|en = 'Get new notifications from the Social Insurance Fund of Russia'");
		Дело.Количество     = ТребуетсяЗагрузить;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_ОтветитьСегодня_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяОтветитьСегодня > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Отправить недостающие сведения сегодня';
									|en = 'Send the missing information today'");
		Дело.Количество     = ТребуетсяОтветитьСегодня;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Ответить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяОтветитьЗавтра > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Отправить недостающие сведения';
									|en = 'Send the missing information'");
		Дело.Количество     = ТребуетсяОтветитьЗавтра;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Подтвердить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяПодтвердить > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Подтвердить получение';
									|en = 'Confirm receipt'");
		Дело.Количество     = ТребуетсяПодтвердить;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТипСообщения() Экспорт
	Возврат 122;
КонецФункции

Процедура ЗаполнитьКонтекстПолученияДанныхВложения(Результат) Экспорт
	
	ИменаРеквизитов = "ВходящийФайл, ДатаОтправкиПодтверждения, Обработан, ПодтверждениеПолученоСФР, ТребуетсяПодтверждение";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.Ссылка, ИменаРеквизитов);
	
	Результат.СсылкаФайла = Реквизиты.ВходящийФайл;
	
	ПодтверждениеОтправлено = ЗначениеЗаполнено(Реквизиты.ДатаОтправкиПодтверждения)
		Или Реквизиты.ПодтверждениеПолученоСФР;
	
	Если Реквизиты.Обработан
		Или Не Реквизиты.ТребуетсяПодтверждение
		Или ПодтверждениеОтправлено
		Или Не ПравоДоступа("Изменение", ОбъектМетаданных())
		Или Не Результат.ПравоСохранения Тогда
		Результат.ОтветНаВопрос = 2; // Открыть документ без лишних вопросов.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СоставДокументов

Функция ОбъектМетаданных() Экспорт
	Возврат Метаданные.Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов;
КонецФункции

// Возвращает описание состава документа
//
// Возвращаемое значение:
//   Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(
		ОбъектМетаданных());
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ФиксируемыеРеквизиты = ФиксируемыеРеквизиты();
	ФиксируемыеТаблицы = Новый Структура("Оплаты", СтрРазделить("НомерСтроки", ","));
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты, ФиксируемыеТаблицы);
КонецФункции

Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Документ.Обработан;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// При помощи механизмов фиксации описываются только механизмы обновления вторичных данных.
	// Механизмы заполнения первичных данных при этом могут существенно отличаться.
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "ПодтверждениеПолучения";
	Шаблон.ОснованиеЗаполнения = "ИдентификаторСообщения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТребуетсяПодтверждение");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаОтправкиПодтверждения");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПодтверждениеПолученоСФР");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "МаксимальнаяДатаПодтверждения";
	Шаблон.ОснованиеЗаполнения = "ДатаСообщения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "МаксимальнаяДатаПодтверждения");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "ВходящиеДокументы";
	Шаблон.ОснованиеЗаполнения = "ИдентификаторРеестра";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящееЗаявление");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Организация");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Ответственный");
	
	// Реквизиты табличной части "Оплаты".
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "СотрудникСНИЛС";
	Шаблон.ИмяГруппы           = "КадровыеДанные";
	Шаблон.РеквизитСтроки      = Истина;
	Шаблон.Путь                = "Оплаты";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФизическоеЛицо");
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

#Область СЭДО

Процедура ЗагрузитьУведомлениеОНаличииСообщения122(Страхователь, ИдентификаторСообщения, ТребуетсяПодтверждение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		// Поиск документа по идентификатору сообщения.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Шапка.Ссылка КАК Ссылка,
		|	Шапка.Дата КАК Дата,
		|	Шапка.ПометкаУдаления КАК ПометкаУдаления,
		|	Шапка.Организация КАК Организация,
		|	Шапка.Страхователь КАК Страхователь,
		|	Шапка.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	Документ.ОтказВВозмещенииВыплатРодителямДетейИнвалидов КАК Шапка
		|ГДЕ
		|	Шапка.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Страхователь = Страхователь
				И Не Выборка.ПометкаУдаления
				И ТребуетсяПодтверждение = Выборка.ТребуетсяПодтверждение Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.СоздатьДокумент();
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация = Страхователь;
		КонецЕсли;
		ДокументОбъект.Страхователь           = Страхователь;
		ДокументОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
		ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
		ДокументОбъект.ЗаполнитьДату();
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке отказа в возмещении выплат родителям детей инвалидов %1 возникла ошибка: %2';
				|en = 'An error occurred when importing the %1 refusal to compensate payments to parents of disabled children: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьСообщение122(Страхователь, ИдентификаторСообщения, ТекстXML, Результат, Кэш) Экспорт
	// Пример XML сообщения:
	//<?xml version="1.0" encoding="UTF-8"?>
	//<n1:disabilityChildrenStatementReject xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.fss.ru/integration/types/person/v02" xmlns:cuq="http://www.fss.ru/integration/types/commonUq/v01" xmlns:dpt="http://www.fss.ru/integration/types/fssDepartment/v01" xmlns:n1="http://www.fss.ru/integration/types/pvso/disabilitychildren/v01" xsi:schemaLocation="http://www.fss.ru/integration/types/pvso/disabilitychildren/v01 disabilityChildrenStatement.xsd">
	//	<n1:msgDateTime>2024-07-01T09:30:47Z</n1:msgDateTime>
	//	<n1:tof>
	//		<dpt:code>a</dpt:code>
	//		<dpt:name>a</dpt:name>
	//	</n1:tof>
	//	<n1:batch_no>a</n1:batch_no>
	//	<n1:insurerInfo>
	//		<n1:regNum>5205004739</n1:regNum>
	//		<n1:regNumSFR>5205009999</n1:regNumSFR>
	//	</n1:insurerInfo>
	//	<n1:receiversRow>
	//		<n1:parentInfo>
	//			<n1:fullName>
	//				<p:firstName>Иванов</p:firstName>
	//				<p:lastName>Иван</p:lastName>
	//			</n1:fullName>
	//			<n1:snils>91366647226</n1:snils>
	//			<n1:childRelType>2</n1:childRelType>
	//		</n1:parentInfo>
	//		<n1:childInfo>
	//			<n1:snils>73287328218</n1:snils>
	//			<n1:birthDate>2017-08-13</n1:birthDate>
	//		</n1:childInfo>
	//		<n1:periods>
	//			<n1:daysAmount>1</n1:daysAmount>
	//			<n1:TotalHour>8</n1:TotalHour>
	//		</n1:periods>
	//	</n1:receiversRow>
	//	<n1:rejectionInfo>
	//		<n1:number>444</n1:number>
	//		<n1:date>2024-07-01</n1:date>
	//		<n1:reason>a</n1:reason>
	//	</n1:rejectionInfo>
	//	<cuq:attachment>
	//		<content>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</content>
	//	</cuq:attachment>
	//</n1:disabilityChildrenStatementReject>
	
	// Поиск корневого узла.
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "disabilityChildrenStatementReject");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM.ЭлементДокумента;
	КонецЕсли;
	
	// Чтение реквизитов.
	АтрибутыКорня = СериализацияБЗК.АтрибутыЭлементаDOM(КореньDOM, "responseOn");
	ИдентификаторВходящегоЗаявления = АтрибутыКорня.responseOn;
	
	УзлыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "msgDateTime, tof, batch_no, insurerInfo, receiversRow, rejectionInfo, attachment");
	
	ДатаСообщения = СериализацияБЗК.ДатаИзXML(УзлыКорня.msgDateTime);
	Если Не ЗначениеЗаполнено(ДатаСообщения) Тогда
		ДатаСообщения = СЭДОФСС.ДатаСообщения(ИдентификаторСообщения, Кэш);
	КонецЕсли;
	
	УзлыТОФ = СериализацияБЗК.УзлыЭлементаDOM(УзлыКорня.tof, "code, name");
	КодПодчиненностиФСС                   = СериализацияБЗК.СтрокаИзXML(УзлыТОФ.code);
	НаименованиеТерриториальногоОрганаФСС = СериализацияБЗК.СтрокаИзXML(УзлыТОФ.name);
	
	ИдентификаторРеестра = СериализацияБЗК.СтрокаИзXML(УзлыКорня.batch_no);
	
	УзлыСтрахователя = СериализацияБЗК.УзлыЭлементаDOM(УзлыКорня.insurerInfo, "regNum, regNumSFR");
	НомерСтрахователяФСС    = СериализацияБЗК.СтрокаИзXML(УзлыСтрахователя.regNum);
	РегистрационныйНомерСФР = СериализацияБЗК.СтрокаИзXML(УзлыСтрахователя.regNumSFR);
	
	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("СотрудникИмя", ОбщегоНазначения.ОписаниеТипаСтрока(60));
	ТаблицаПолучателей.Колонки.Добавить("СотрудникФамилия", ОбщегоНазначения.ОписаниеТипаСтрока(60));
	ТаблицаПолучателей.Колонки.Добавить("СотрудникОтчество", ОбщегоНазначения.ОписаниеТипаСтрока(60));
	ТаблицаПолучателей.Колонки.Добавить("СотрудникСНИЛС", ОбщегоНазначения.ОписаниеТипаСтрока(14));
	ТаблицаПолучателей.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаПолучателей.Колонки.Добавить("РебенокСНИЛС", ОбщегоНазначения.ОписаниеТипаСтрока(14));
	ТаблицаПолучателей.Колонки.Добавить("РебенокДатаРождения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПолучателей.Колонки.Добавить("КоличествоДней", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	ТаблицаПолучателей.Колонки.Добавить("КоличествоЧасов", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	Если УзлыКорня.receiversRow <> Неопределено Тогда
		Если ТипЗнч(УзлыКорня.receiversRow) <> Тип("Массив") Тогда
			УзлыКорня.receiversRow = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УзлыКорня.receiversRow);
		КонецЕсли;
		Для Каждого ПолучательDOM Из УзлыКорня.receiversRow Цикл
			УзлыПолучателя = СериализацияБЗК.УзлыЭлементаDOM(ПолучательDOM, "parentInfo, childInfo, periods");
			Если УзлыПолучателя.parentInfo = Неопределено Или УзлыПолучателя.childInfo = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПолучатель = ТаблицаПолучателей.Добавить();
			
			// Сведения о родителе (опекуне, попечителе).
			УзлыСотрудника = СериализацияБЗК.УзлыЭлементаDOM(УзлыПолучателя.parentInfo, "fullName, snils, childRelType");
			УзлыФИО        = СериализацияБЗК.УзлыЭлементаDOM(УзлыСотрудника.fullName, "firstName, lastName, middleName");
			СтрокаПолучатель.СотрудникИмя      = СериализацияБЗК.СтрокаИзXML(УзлыФИО.firstName);
			СтрокаПолучатель.СотрудникФамилия  = СериализацияБЗК.СтрокаИзXML(УзлыФИО.lastName);
			СтрокаПолучатель.СотрудникОтчество = СериализацияБЗК.СтрокаИзXML(УзлыФИО.middleName);
			СтрокаПолучатель.СотрудникСНИЛС    = СЭДОФСС.СНИЛСИзXML(УзлыСотрудника.snils);
			СтрокаПолучатель.Статус            = СериализацияБЗК.СтрокаИзXML(УзлыСотрудника.childRelType);
			
			// Сведения о ребенке.
			УзлыРебенка = СериализацияБЗК.УзлыЭлементаDOM(УзлыПолучателя.childInfo, "snils, birthDate");
			СтрокаПолучатель.РебенокСНИЛС        = СЭДОФСС.СНИЛСИзXML(УзлыРебенка.snils);
			СтрокаПолучатель.РебенокДатаРождения = СериализацияБЗК.ДатаИзXML(УзлыРебенка.birthDate);
			
			// Таблицы дней.
			СтрокаПериод = Неопределено;
			Если УзлыПолучателя.periods <> Неопределено Тогда
				Если ТипЗнч(УзлыПолучателя.periods) <> Тип("Массив") Тогда
					УзлыПолучателя.periods = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УзлыПолучателя.periods);
				КонецЕсли;
				Для Каждого ПериодDOM Из УзлыПолучателя.periods Цикл
					Если СтрокаПериод = Неопределено Тогда
						СтрокаПериод = СтрокаПолучатель;
					Иначе
						СтрокаПериод = ТаблицаПолучателей.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПериод, СтрокаПолучатель);
					КонецЕсли;
					УзлыПериода = СериализацияБЗК.УзлыЭлементаDOM(ПериодDOM, "daysAmount, TotalHour");
					СтрокаПериод.КоличествоДней  = СериализацияБЗК.ЧислоИзXML(УзлыПериода.daysAmount);
					СтрокаПериод.КоличествоЧасов = СериализацияБЗК.ЧислоИзXML(УзлыПериода.TotalHour);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УзлыРешения = СериализацияБЗК.УзлыЭлементаDOM(УзлыКорня.rejectionInfo, "number, date, reason");
	РешениеНомер   = СериализацияБЗК.СтрокаИзXML(УзлыРешения.number);
	РешениеДата    = СериализацияБЗК.ДатаИзXML(УзлыРешения.date);
	РешениеПричина = СериализацияБЗК.СтрокаИзXML(УзлыРешения.reason);
	
	УзлыВложения = СериализацияБЗК.УзлыЭлементаDOM(УзлыКорня.attachment, "content, ext, mimeType, size, name");
	ВложениеДанные     = СериализацияБЗК.ЗначениеИзXML(УзлыВложения.content, Тип("ДвоичныеДанные"));
	ВложениеРасширение = СериализацияБЗК.СтрокаИзXML(УзлыВложения.ext);
	ВложениеТип        = СериализацияБЗК.СтрокаИзXML(УзлыВложения.mimeType);
	ВложениеРазмер     = СериализацияБЗК.ЧислоИзXML(УзлыВложения.size);
	ВложениеИмяФайла   = СериализацияБЗК.СтрокаИзXML(УзлыВложения.name);
	
	
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		// Поиск документа по идентификатору сообщения.
		ДокументОбъект = СоздатьДокументПоСообщению(Страхователь, ИдентификаторСообщения);
		
		// Обновление реквизитов документа.
		Если Не ДокументОбъект.Загружен Тогда
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Загружен = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаСообщения)
			Или ДокументОбъект.ДатаСообщения > ДатаСообщения
			Или ДокументОбъект.ДатаСообщения = НачалоДня(ДатаСообщения) Тогда
			ДокументОбъект.ДатаСообщения = ДатаСообщения;
		КонецЕсли;
		ДокументОбъект.ИдентификаторВходящегоЗаявления = ИдентификаторВходящегоЗаявления;
		ДокументОбъект.КодПодчиненностиФСС = КодПодчиненностиФСС;
		ДокументОбъект.НаименованиеТерриториальногоОрганаФСС = НаименованиеТерриториальногоОрганаФСС;
		ДокументОбъект.ИдентификаторРеестра = ИдентификаторРеестра;
		ДокументОбъект.НомерСтрахователяФСС = НомерСтрахователяФСС;
		ДокументОбъект.РегистрационныйНомерСФР = РегистрационныйНомерСФР;
		ДокументОбъект.РешениеНомер = РешениеНомер;
		ДокументОбъект.РешениеДата = РешениеДата;
		ДокументОбъект.РешениеПричина = РешениеПричина;
		ДокументОбъект.ВходящийФайлРасширение = ВложениеРасширение;
		ДокументОбъект.ВходящийФайлТип = ВложениеТип;
		ДокументОбъект.ВходящийФайлРазмер = ВложениеРазмер;
		ДокументОбъект.ВходящийФайлИмя = ВложениеИмяФайла;
		Если ТаблицаПолучателей.Количество() > 0 Тогда
			ДокументОбъект.Оплаты.Загрузить(ТаблицаПолучателей);
		КонецЕсли;
		
		ДокументОбъект.ОбновитьВторичныеДанные();
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		// Обновление присоединенного файла.
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Идентификатор, Кодировка");
		ПараметрыФайла.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ВложениеРасширение);
		ПараметрыФайла.Служебный          = Истина;
		ПараметрыФайла.Идентификатор      = ИдентификаторСообщения;
		ПараметрыФайла.ИмяБезРасширения   = РешениеИмяФайлаБезРасширения(ДокументОбъект);
		ПараметрыФайла.ВладелецФайлов     = ДокументОбъект.Ссылка;
		ВходящийФайл = ОбновитьФайл(ВложениеДанные, ПараметрыФайла);
		
		// Запись ссылки на файл в реквизиты документа.
		ДокументОбъект.Прочитать();
		Если ДокументОбъект.ВходящийФайл <> ВходящийФайл Тогда
			ДокументОбъект.ВходящийФайл = ВходящийФайл;
			ДокументОбъект.ОбновитьВторичныеДанные();
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Результат.Обработано = Истина;
	Исключение
		ОтменитьТранзакцию();
		СЭДОФСС.ОшибкаОбработки(Результат, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОтветаНаПодтверждениеОПрочтении.
Процедура ЗагрузитьОтветНаПодтверждениеПолученияСообщения122(Страхователь, ИсходноеСообщение, Результат) Экспорт
	// Вызывается при получении сообщения с типом 11 в ответ на подтверждение о прочтении входящего сообщения.
	//   Страхователь - СправочникСсылка.Организации - организация, получатель сообщения.
	//   ИсходноеСообщение - Структура:
	//     * ИдентификаторСообщения - Строка - идентификатор исходного сообщения СЭДО, по которому отправлялось подтверждение.
	//     * Тип                    - Число  - тип исходного сообщения СЭДО, по которому отправлялось подтверждение.
	//     * ТекстОшибки            - Строка - ошибка приема подтверждения.
	//     * ТекстПредупреждения    - Строка - предупреждение приема подтверждения.
	//   Результат - Структура - результат обработки сообщения:
	//     * Обработано      - Булево - признак того, что сообщение было успешно обработано.
	//     * ОшибкаОбработки - Булево - признак того, что при обработке сообщения возникла ошибка.
	//     * ОписаниеОшибки  - Строка - описание ошибки обработки.
	
	Ссылка = НайтиДокументПоСообщению(Страхователь, ИсходноеСообщение.ИдентификаторСообщения);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		// Поиск документа по идентификатору сообщения.
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ФиксацияВторичныхДанныхВДокументах.ОтменитьФиксациюРеквизитаШапки(ДокументОбъект, "ТребуетсяПодтверждение");
		ФиксацияВторичныхДанныхВДокументах.ОтменитьФиксациюРеквизитаШапки(ДокументОбъект, "ДатаОтправкиПодтверждения");
		ФиксацияВторичныхДанныхВДокументах.ОтменитьФиксациюРеквизитаШапки(ДокументОбъект, "ПодтверждениеПолученоСФР");
		Если ДокументОбъект.ЗаполнитьПодтверждениеПолучения(Ложь) Тогда
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
			Результат.Обработано = Истина;
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		СЭДОФСС.ОшибкаОбработки(Результат, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция РешениеИмяФайлаБезРасширения(Документ)
	Если ЗначениеЗаполнено(Документ.ВходящийФайлИмя) Тогда
		Возврат Документ.ВходящийФайлИмя;
	КонецЕсли;
	Текст = НСтр("ru = 'Отказ в возмещении доп. выходных дней № %1 от %2';
				|en = 'Refusal to compensate extra days off No. %1 dated %2'");
	Если ЗначениеЗаполнено(Документ.РешениеДата) Тогда
		Возврат СтрШаблон(Текст, Документ.РешениеНомер, Формат(Документ.РешениеДата, "ДФ=yyyy-MM-dd"));
	Иначе
		Возврат СтрШаблон(Текст, Документ.Номер, Формат(Документ.Дата, "ДФ=yyyy-MM-dd"));
	КонецЕсли;
КонецФункции

Функция НайтиДокументПоСообщению(Страхователь, ИдентификаторСообщения)
	ВыбираемыеПоля = "Ссылка";
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	НастройкиЗапроса.Количество = 1;
	ЗапросыБЗК.ДобавитьОтбор(НастройкиЗапроса.Отбор, "ИдентификаторСообщения", , ИдентификаторСообщения);
	ЗапросыБЗК.ДобавитьОтбор(НастройкиЗапроса.Отбор, "Страхователь",           , Страхователь);
	Запрос = ЗапросыБЗК.ЗапросКТаблице(ОбъектМетаданных(), ВыбираемыеПоля, НастройкиЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СоздатьДокументПоСообщению(Страхователь, ИдентификаторСообщения)
	Ссылка = НайтиДокументПоСообщению(Страхователь, ИдентификаторСообщения);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка.ПолучитьОбъект();
	Иначе
		Объект = СоздатьДокумент();
		Объект.Страхователь = Страхователь;
		Объект.ИдентификаторСообщения = ИдентификаторСообщения;
		Возврат Объект;
	КонецЕсли;
КонецФункции

Функция ОбновитьФайл(ДвоичныеДанныеФайла, ПараметрыФайла)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	&ИсточникДанных КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ПрисоединенныеФайлы.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыФайла.ВладелецФайлов);
	Запрос.УстановитьПараметр("Идентификатор", ПараметрыФайла.Идентификатор);
	
	ИмяОбъекта = ПараметрыФайла.ВладелецФайлов.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", "Справочник." + ИмяОбъекта + "ПрисоединенныеФайлы"); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Если Выборка.Следующий() Тогда 
		СсылкаФайла = Выборка.Ссылка;
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресДвоичныхДанных);
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
		РаботаСФайлами.ОбновитьФайл(СсылкаФайла, ПараметрыФайла);
	Иначе
		СсылкаФайла = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресДвоичныхДанных);
	КонецЕсли;
	
	Возврат СсылкаФайла;
КонецФункции

#КонецОбласти

#Область Регламенты

Функция МаксимальнаяДатаПодтвержденияПолучения(Объект) Экспорт
	Возврат СЭДОФСС.СледующийРабочийДень(Объект.ДатаСообщения, РабочихДнейНаПодтверждениеПолучения());
КонецФункции

// См. п.7 Положения № 1 утвержденного Постановлением Правительства РФ от 21.04.2011 N 294.
Функция РабочихДнейНаПодтверждениеПолучения()
	Возврат 1;
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Функция ТребованияПоОтправке()
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоРабочегоДня = НачалоДня(СЭДОФСС.БлижайшийРабочийДень(НачалоТекущегоДня));
	// Бумагу отправляют через 2-3 дня, а на подтверждение получения дается 1 день.
	НачалоТекущегоДняМинусДваДня = НачалоТекущегоДня - 86400 * 2;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шапка.Ссылка КАК Ссылка,
	|	НЕ Шапка.Загружен КАК ТребуетсяЗагрузить,
	|	Шапка.Загружен КАК ТребуетсяОтветить,
	|	ЛОЖЬ КАК ТребуетсяОтветитьСегодня,
	|	ВЫБОР
	|		КОГДА Шапка.Загружен
	|				И НЕ Шапка.ПодтверждениеПолученоСФР
	|				И Шапка.ДатаОтправкиПодтверждения = &ПустаяДата
	|				И Шапка.МаксимальнаяДатаПодтверждения >= &НачалоТекущегоДняМинусДваДня
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПодтвердить
	|ИЗ
	|	Документ.ОтказВВозмещенииВыплатРодителямДетейИнвалидов КАК Шапка
	|ГДЕ
	|	НЕ Шапка.Обработан
	|	И НЕ Шапка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НачалоРабочегоДня", НачалоРабочегоДня);
	Запрос.УстановитьПараметр("НачалоТекущегоДняМинусДваДня", НачалоТекущегоДняМинусДваДня);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.Оплаты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.СотрудникСНИЛС = &НовыйСНИЛС
	|	И ТабличнаяЧасть.ФизическоеЛицо <> &ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка
	|ИЗ
	|	Документ.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.Оплаты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.ФизическоеЛицо = &ФизическоеЛицо
	|	И ТабличнаяЧасть.СотрудникСНИЛС <> &НовыйСНИЛС";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабличнаяЧасть.СотрудникСНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабличнаяЧасть.СотрудникСНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаВыборки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ЕстьИзменения = Ложь;
		ДокументОбъект = СтрокаВыборки.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТаблицы Из ДокументОбъект.Оплаты Цикл
			Если СтрокаТаблицы.СотрудникСНИЛС = НовыйСНИЛС И ЗначениеЗаполнено(НовыйСНИЛС) Тогда
				СтрокаТаблицы.ФизическоеЛицо = ФизическоеЛицо;
			ИначеЕсли СтрокаТаблицы.ФизическоеЛицо = ФизическоеЛицо И СтрокаТаблицы.СотрудникСНИЛС <> НовыйСНИЛС Тогда
				СтрокаТаблицы.ФизическоеЛицо = Неопределено;
			Иначе
				Продолжить;
			КонецЕсли;
			ЕстьИзменения = Истина;
			ФиксацияВторичныхДанныхВДокументах.ОтменитьФиксациюРеквизитаТаблицы(
				ДокументОбъект,
				"Оплаты",
				СтрокаТаблицы,
				"ФизическоеЛицо");
		КонецЦикла;
		Если ЕстьИзменения Тогда
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи) Экспорт
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, "БЗК", РежимЗаписи);
КонецПроцедуры

#КонецОбласти

#КонецЕсли