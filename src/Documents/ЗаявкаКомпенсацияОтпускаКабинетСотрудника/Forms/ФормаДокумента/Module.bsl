
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ЗаявкиСотрудниковФормы.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеДокумента());
	ИнициализацияФормы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаявкиСотрудниковФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ОписаниеДокумента());
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ПараметрОповещения, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, ПараметрОповещения) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаявкиСотрудниковФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, ПараметрОповещения, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_УдалитьДокументПоЗаявке(Элемент)

	ЗаявкиСотрудниковФормыКлиент.УдалитьДокументПоЗаявке(ЭтаФорма, Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиПодключаемыхКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаявкаВыполнена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОтклонена(Команда)
	
	РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена");
	ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТиповойОтвет(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ВыбратьТиповойОтвет(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокумент(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДанныеПоВидамОтпусков) Тогда
		ОткрытьФорму("Документ.Отпуск.Форма.ФормаДокумента", ПараметрыЗаполненияДокументаПоВидамОтпусков(), ЭтотОбъект);
	Иначе
		ВыбратьВидОтпуска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	ЗначенияДляВыбора = Новый Структура("Отбор,ЗначенияДляВыбораВидаДокумента");
	ЗначенияДляВыбора.Отбор = Новый Структура("Организация,Сотрудник", Объект.Организация, Объект.Сотрудник);
	ЗначенияДляВыбора.ЗначенияДляВыбораВидаДокумента = ЗначенияДляВыбораВидаДокумента();
	
	ЗаявкиСотрудниковФормыКлиент.ВыполнитьКомандуВыбратьДокумент(ЭтаФорма, ЗначенияДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокИсполнения(Команда)
	
	ЗаявкиСотрудниковФормыКлиент.ИзменитьСрокИсполнения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПодсистем

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ЗавершениеЗаявки

&НаКлиенте
Процедура ВыполнитьЗаявкуНаКлиенте(РезультатВыполненияЗаявки)

	Если ЗаявкиСотрудниковФормыКлиент.ЗаявкаГотоваКВыполнению(ЭтаФорма, РезультатВыполненияЗаявки, ОписаниеДокумента()) Тогда
		ЗаявкиСотрудниковФормыКлиент.НачатьВыполнениеКомандыЗаявкаВыполнена(ЭтаФорма, РезультатВыполненияЗаявки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РезультатЗаписиВыполненияЗаявки(РезультатВыполненияЗаявки) Экспорт

	Возврат РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки);

КонецФункции

&НаСервере
Функция РезультатЗаписиВыполненияЗаявкиНаСервере(РезультатВыполненияЗаявки) Экспорт
	
	Возврат ЗаявкиСотрудников.РезультатЗаписиВыполненияЗаявки(ЭтаФорма, РезультатВыполненияЗаявки, ОписаниеДокумента());
	
КонецФункции

&НаКлиенте
Процедура ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаявкиСотрудниковФормыКлиент.ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработатьЗаписьСвязаннойЗаявки

&НаКлиенте
Процедура ОбработатьЗаписьСвязаннойЗаявки() Экспорт

	ОбработатьЗаписьСвязаннойЗаявкиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьСвязаннойЗаявкиНаСервере()

	ОписаниеДокумента = ОписаниеДокумента();
	ЗаявкиСотрудниковФормы.ПрочитатьВывестиСвязанныеЗаявки(ЭтаФорма, Объект, ОписаниеДокумента);
	ЗаявкиСотрудниковФормы.УстановитьДоступностьВыполненияПоСвязаннымЗаявкам(ЭтаФорма, ОписаниеДокумента);

КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаписиОтменяющейЗаявки

&НаКлиенте
Процедура ОбработатьЗаписьОтменяющейЗаявки() Экспорт

	ОбработатьЗаписьОтменяющейЗаявкиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьОтменяющейЗаявкиНаСервере()
	
	Прочитать();
	
КонецПроцедуры

#КонецОбласти

#Область ВыводДокументовИзТаблицыДокументовЗаявки

&НаКлиенте
Процедура ВывестиДокументыИзТаблицыДокументовЗаявки() Экспорт
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере()
	
	ЗаявкиСотрудниковФормы.ВывестиДокументыИзТаблицыДокументовЗаявки(ЭтаФорма, ОписаниеДокумента());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработатьИзменениеТЧДокументыПоЗаявке

&НаКлиенте
Процедура ОбработатьИзменениеДокументыПоЗаявке() Экспорт

	ОбработатьИзменениеДокументыПоЗаявкеНаСервере();
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДокументыПоЗаявкеНаСервере()
	
	ВывестиДокументыИзТаблицыДокументовЗаявкиНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СозданиеНовогоДокумента

&НаКлиенте
Процедура ВыбратьВидОтпуска()
	
	ВидыОтпусков = ВидыКомпенсируемыхОтпусков();
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьВидОтпускаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ВидыОтпусков,КомпенсацияОтпуска", ВидыОтпусков, Истина);
	
	ОткрытьФорму("Документ.ЗаявкаКомпенсацияОтпускаКабинетСотрудника.Форма.ВыбратьВидОтпуска", ПараметрыОткрытия, ЭтотОбъект,,,,
				 Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидОтпускаЗавершение(ВидОтпуска, ДополнительныеПараметры) Экспорт
	
	Если ВидОтпуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.Отпуск.Форма.ФормаДокумента", ПараметрыЗаполненияДокумента(ВидОтпуска), ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыКомпенсируемыхОтпусков()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И НЕ ВидыОтпусков.ОтпускБезОплаты
	|	И НЕ ВидыОтпусков.ПометкаУдаления
	|	И НЕ ВидыОтпусков.Недействителен";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ПараметрыЗаполненияДокумента(ВидОтпуска)
	
	ПараметрыЗаполнения = Новый Структура("Основание,ОсновнойОтпуск", ,Ложь);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ссылка", Неопределено);
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");
	ДанныеЗаполнения.Вставить("Сотрудник", Объект.Сотрудник);
	ДанныеЗаполнения.Вставить("Организация",Объект.Организация); 
	
	ДанныеОтпусков = Новый Массив;
	ДанныеОтпусков.Добавить(ДанныеКомпенсацииОтпусков(ВидОтпуска));
	ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);
	
	ПараметрыЗаполнения.Основание = ДанныеЗаполнения;
		
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция НовоеОписаниеДанныеОтпуска()
	
	Возврат ЗаявкиСотрудниковРасширенный.НовоеОписаниеДанныеОтпуска();
	
КонецФункции

&НаСервере
Функция ДанныеКомпенсацииОтпусков(ВидОтпуска)
	
	ДанныеКомпенсацииОтпуска = НовоеОписаниеДанныеОтпуска();
	ДанныеКомпенсацииОтпуска.ВидОтпуска = ВидОтпуска;
	ДанныеКомпенсацииОтпуска.КоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсацииОтпуска;
	
	Возврат ДанныеКомпенсацииОтпуска;
	
КонецФункции

&НаСервере
Функция ПараметрыЗаполненияДокументаПоВидамОтпусков()

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ссылка", 		Неопределено);
	ДанныеЗаполнения.Вставить("Действие", 		"Заполнить");
	ДанныеЗаполнения.Вставить("Сотрудник", 		Объект.Сотрудник);
	ДанныеЗаполнения.Вставить("Организация", 	Объект.Организация);
	ДанныеЗаполнения.Вставить("ИспользоватьОбщийПериодОтпускаВДокументах", Ложь);
	ДанныеЗаполнения.Вставить("АвторасчетПериодаПредоставления", Истина);
	
	ДанныеОтпусков = Новый Массив;
	Для каждого ДанныеОтпуска Из Объект.ДанныеПоВидамОтпусков Цикл
		НоваяЗапись = НовоеОписаниеДанныеОтпуска();
		НоваяЗапись.ВидОтпуска = ДанныеОтпуска.ВидОтпуска;
		НоваяЗапись.КоличествоДнейКомпенсации = ДанныеОтпуска.КоличествоДнейКомпенсацииОтпуска;
		ДанныеОтпусков.Добавить(НоваяЗапись);
	КонецЦикла;
	ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);
	
	ЗначенияЗаполнения = Новый Структура("ДокументЗаполнения");
	ПараметрыЗаполнения = Новый Структура("Основание,ЗначенияЗаполнения", ДанныеЗаполнения, ЗначенияЗаполнения);

	Возврат ПараметрыЗаполнения;

КонецФункции

#КонецОбласти

&НаСервере
Процедура ИнициализацияФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДокументыПоЗаявкеГлавная", "Видимость", Объект.ВариантИсправления <> Перечисления.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДанныеЗаявления", "ОтображатьЗаголовок", Объект.ВариантИсправления = Перечисления.ВариантыИсправленияЗаявокКабинетСотрудника.Перенос);
	
	// Детальные данные по видам отпусков.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаДетальноПоВидамОтпусков", "Видимость", ЗначениеЗаполнено(Объект.ДанныеПоВидамОтпусков));

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияДляВыбораВидаДокумента()
	
	Возврат ЗаявкиСотрудниковФормы.ЗначенияДляВыбораВидаДокумента(Метаданные.ОпределяемыеТипы.ДокументОтпускКабинетСотрудника);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента()

	Описание = ЗаявкиСотрудниковКлиентСервер.НовоеОписаниеДокументаЗаявки();
	Описание.ПроверятьСвязанныеЗаявки 		= Истина;
	Описание.ДоступнаОтменаЗаявки 			= Истина;
	Описание.ДокументыПоЗаявкеИмя 			= "ДокументыПоЗаявке";
	Описание.ДокументыПоЗаявкеДокументИмя 	= "ДокументСсылка";
	Описание.ВыводитьДокументыЗаявки 		= Истина;
	
	Возврат Описание;

КонецФункции

#КонецОбласти