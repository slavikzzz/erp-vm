#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок(ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОтбораПоОрганизации(Настройки);
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОбъектаСПрисоединеннымиФайлами(Настройки);
КонецПроцедуры

#КонецОбласти

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ПриостановлениеТрудовыхДоговоровКонтрактов;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

// Функция возвращает структуру с описанием данного вида документа.
// 
// Возвращаемое значение:
//  см. ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента
Функция ОписаниеДокумента() Экспорт 

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента();
	
	ОписаниеДокумента.КраткоеНазваниеИменительныйПадеж = НСтр("ru = 'приостановление';
																|en = 'suspension'");
	ОписаниеДокумента.КраткоеНазваниеРодительныйПадеж = НСтр("ru = 'приостановления';
															|en = 'suspension'");
	ОписаниеДокумента.ИмяРеквизитаСотрудник = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаОтсутствующийСотрудник = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия = "ДатаНачала";
	ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия = "ДатаОкончания";
	ОписаниеДокумента.ИмяТабличнойЧастиСотрудники = "Сотрудники";
	ОписаниеДокумента.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";

	Возврат ОписаниеДокумента;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.ПриостановлениеТрудовыхДоговоровКонтрактов);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ДобавитьКомандыПечатиПечатныхФормОтчета(КомандыПечати);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Заполняет реквизит ИдентификаторСтроки в табличной части Сотрудники.
// 
// Параметры:
//  ПараметрыОбновления - Структура
Процедура ЗаполнитьИдентификаторыСтрок(ПараметрыОбновления) Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления,
			"ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыОбновления.Свойство("ОбработанныеДокументы") Тогда
		ПараметрыОбновления.Вставить("ОбработанныеДокументы", Новый Массив);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ПриостановлениеТрудовыхДоговоровКонтрактовСотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриостановлениеТрудовыхДоговоровКонтрактов.Сотрудники КАК ПриостановлениеТрудовыхДоговоровКонтрактовСотрудники
		|ГДЕ
		|	ПриостановлениеТрудовыхДоговоровКонтрактовСотрудники.ИдентификаторСтроки = &ИдентификаторСтроки
		|	И НЕ ПриостановлениеТрудовыхДоговоровКонтрактовСотрудники.Ссылка В (&ОбработанныеДокументы)";
	
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.УстановитьПараметр("ОбработанныеДокументы", ПараметрыОбновления.ОбработанныеДокументы);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПриостановлениеТрудовыхДоговоровКонтрактов");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления,
				"ОбработкаЗавершена", Истина);
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Документ = ВыборкаДетальныеЗаписи.Ссылка;
			Если Не ОбщегоНазначения.СсылкаСуществует(Документ) Тогда
				ПараметрыОбновления.ОбработанныеДокументы.Добавить(Документ);
				Продолжить;
			КонецЕСли;
			ДокументОбъект = Документ.ПолучитьОбъект();
			Для Каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
				Если Не ЗначениеЗаполнено(СтрокаСотрудника.ИдентификаторСтроки) Тогда
					СтрокаСотрудника.ИдентификаторСтроки = Новый УникальныйИдентификатор();
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект, Истина);
			ПараметрыОбновления.ОбработанныеДокументы.Добавить(Документ);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления,
			"ОбработкаЗавершена", Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
