
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОпцияИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если Не ОпцияИспользоватьНесколькоОрганизаций Тогда
		РасчетыМеждуОрганизациямиАрендатор = Ложь;
	КонецЕсли;
	
	ПорядокУчетаБУСписан = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету;
	ПорядокУчетаНУСписан = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету;
	
	ПорядокУчетаБУОстановлен = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается;
	ПорядокУчетаНУОстановлен = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДанныеЗаполнения);
	
	ДатаУчетнойПолитики = КонецМесяца(Дата) + 1;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма, Организация, ДатаУчетнойПолитики);
	
	Если Параметры.ЭтоНовый И НЕ Параметры.Копирование Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе Тогда
			
			СчетУчета = ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеВладение;
			СчетАмортизации = ПланыСчетов.Хозрасчетный.АмортизацияОС_03;
			
			СчетУчетаАрендатора = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства;
			СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату;
			
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе Тогда
			
			СчетУчета = ПланыСчетов.Хозрасчетный.АрендованноеИмущество;
			СчетАмортизации = ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества;
			СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга;
			
		Иначе
			
			СчетУчета = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
			СчетАмортизации = ПланыСчетов.Хозрасчетный.АмортизацияОС_01;
			СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату;
			
		КонецЕсли;
		
		ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
		МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
		ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
		НачислятьАмортизациюБУ = Истина;
		НачислятьАмортизациюНУ = Истина;
		СпециальныйКоэффициентНУ = 1;
		
		ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
		Если Не ЗначениеЗаполнено(НалогообложениеНДС) Тогда
			НалогообложениеНДС = ВнеоборотныеАктивы.НалогообложениеНДС(Организация, Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаголовокНакопленнаяАмортизация = НСтр("ru = 'Собственные средства, остаток на счете %1:';
											|en = 'Own funds, account balance %1:'");
	ЗаголовокНакопленнаяАмортизацияЦФ = НСтр("ru = 'Целевое финансирование, остаток на счете %1:';
											|en = 'Special-purpose funding, balance of account %1:'");
	ЗаголовокТекущаяСтоимость = НСтр("ru = 'Собственные средства, остаток на счете %1:';
									|en = 'Own funds, account balance %1:'");
	ЗаголовокТекущаяСтоимостьЦФ = НСтр("ru = 'Целевое финансирование, остаток на счете %1:';
										|en = 'Special-purpose funding, balance of account %1:'");
	
	Заголовок = НСтр("ru = 'Основные средства: %1';
					|en = 'Fixed assets: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ?(Параметры.ЭтоНовый, НСтр("ru = 'Новая строка';
																												|en = 'New row'"), ОсновноеСредство));
	
	СрокИспользованияБУСохраненный = СрокИспользованияБУ;
	Элементы.СрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	Элементы.СрокИспользованияНУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияНУ);
	Элементы.ИзносСрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	
	ПервоначальнаяСтоимостьВР = ПервоначальнаяСтоимостьБУ - ПервоначальнаяСтоимостьНУ - ПервоначальнаяСтоимостьПР;
	ТекущаяСтоимостьВР = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	ТекущаяСтоимостьВРЦФ = ТекущаяСтоимостьБУЦФ - ТекущаяСтоимостьНУЦФ - ТекущаяСтоимостьПРЦФ;
	НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
	НакопленнаяАмортизацияВРЦФ = НакопленнаяАмортизацияБУЦФ - НакопленнаяАмортизацияНУЦФ - НакопленнаяАмортизацияПРЦФ;
	
	Если Не(ТекущаяСтоимостьНУЦФ = 0 И ТекущаяСтоимостьВРЦФ = 0) Тогда
		ТекущаяСтоимостьПРЦФ = ТекущаяСтоимостьБУЦФ;
		ТекущаяСтоимостьНУЦФ = 0;
		ТекущаяСтоимостьВРЦФ = 0;
	КонецЕсли;
	
	Если Не(НакопленнаяАмортизацияНУЦФ = 0 И НакопленнаяАмортизацияВРЦФ = 0) Тогда
		НакопленнаяАмортизацияПРЦФ = НакопленнаяАмортизацияБУЦФ;
		НакопленнаяАмортизацияНУЦФ = 0;
		НакопленнаяАмортизацияВРЦФ = 0;
	КонецЕсли;
	
	ОстаточнаяСтоимостьБУ = ТекущаяСтоимостьБУ - НакопленнаяАмортизацияБУ;
	ОстаточнаяСтоимостьНУ = ТекущаяСтоимостьНУ - НакопленнаяАмортизацияНУ;
	ОстаточнаяСтоимостьПР = ТекущаяСтоимостьПР - НакопленнаяАмортизацияПР;
	ОстаточнаяСтоимостьВР = ТекущаяСтоимостьВР - НакопленнаяАмортизацияВР;
	
	ОстаточнаяСтоимостьБУЦФ = ТекущаяСтоимостьБУЦФ - НакопленнаяАмортизацияБУЦФ;
	ОстаточнаяСтоимостьНУЦФ = ТекущаяСтоимостьНУЦФ - НакопленнаяАмортизацияНУЦФ;
	ОстаточнаяСтоимостьПРЦФ = ТекущаяСтоимостьПРЦФ - НакопленнаяАмортизацияПРЦФ;
	ОстаточнаяСтоимостьВРЦФ = ТекущаяСтоимостьВРЦФ - НакопленнаяАмортизацияВРЦФ;
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	ВедетсяУчетПостоянныхИВременныхРазниц = УчетнаяПолитика.ВедетсяУчетПостоянныхИВременныхРазниц(Организация, ДатаУчетнойПолитики);
	
	Элементы.ДекорацияЗаголовокНУ.Видимость = ПлательщикНалогаНаПрибыль;
	Элементы.ДекорацияЗаголовокПР.Видимость = ПлательщикНалогаНаПрибыль И ВедетсяУчетПостоянныхИВременныхРазниц;
	Элементы.ДекорацияЗаголовокВР.Видимость = ПлательщикНалогаНаПрибыль И ВедетсяУчетПостоянныхИВременныхРазниц;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	НачислениеИзноса = (ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ);
	
	РезервПереоценкиСтоимостиСумма = ?(РезервПереоценкиСтоимости<0, -РезервПереоценкиСтоимости, РезервПереоценкиСтоимости);
	РезервПереоценкиАмортизацииСумма = ?(РезервПереоценкиАмортизации<0, -РезервПереоценкиАмортизации, РезервПереоценкиАмортизации);
	РезервПереоценкиЗнак = (РезервПереоценкиСтоимости > 0);
	
	КорректировкаСтоимостиАрендованногоИмуществаВР = -КорректировкаСтоимостиАрендованногоИмуществаНУ;
	
	ОбновитьСвойстваЭлементовФормы();
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		АдресМестонахождения,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	ЗаполнитьПодсказкуКодОКОФ();
	
	ПараметрыВыбораСтатейИАналитик = ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Модифицированность Тогда
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗавершитьРедактирование", ЭтаФорма),
			НСтр("ru = 'Данные были изменены. Сохранить изменения?';
				|en = 'The data has changed. Do you want to save the changes?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Результат=Неопределено, ДополнительныеСведения=Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Результат = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьЗаполнение() Тогда
			Модифицированность = Ложь;
			Закрыть(РеквизитыРедактируемыеВОтдельнойФорме());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОчиститьНеИспользуемыеРеквизиты();
	
	НепроверяемыеРеквизиты = Новый Массив;
	НепроверяемыеРеквизиты.Добавить("АналитикаРасходовАмортизации");
	НепроверяемыеРеквизиты.Добавить("АналитикаРасходовНалог");
	
	Если Не ТребуетсяКонтрагент Тогда
		НепроверяемыеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	Если ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
		НепроверяемыеРеквизиты.Добавить("СтатьяРасходовАмортизации");
		
		НепроверяемыеРеквизиты.Добавить("МетодНачисленияАмортизацииБУ");
		НепроверяемыеРеквизиты.Добавить("СрокИспользованияБУ");
		НепроверяемыеРеквизиты.Добавить("ОбъемНаработкиБУ");
		НепроверяемыеРеквизиты.Добавить("КоэффициентУскоренияБУ");
		
		Если ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
			НепроверяемыеРеквизиты.Добавить("КоэффициентАмортизацииБУ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
		
		НепроверяемыеРеквизиты.Добавить("ТекущаяСтоимостьБУ");
		НепроверяемыеРеквизиты.Добавить("ТекущаяСтоимостьБУЦФ");
		
	КонецЕсли;
	
	Если ПорядокУчетаБезАмортизации(ПорядокУчетаБУ, ПорядокУчетаНУ) Тогда
		
		НепроверяемыеРеквизиты.Добавить("СчетАмортизации");
		НепроверяемыеРеквизиты.Добавить("СчетАмортизацииЦФ");
		
	КонецЕсли;
	
	ТребуетсяНастройкаОтраженияРасходовПоНалогам = ВнеоборотныеАктивыЛокализация.ТребуетсяНастройкаОтраженияРасходовПоНалогам(
														Организация, 
														ДобавитьМесяц(Дата, 1), 
														ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредство), 
														ГруппаОС, 
														АмортизационнаяГруппа);
														
	Если НЕ ТребуетсяНастройкаОтраженияРасходовПоНалогам Тогда
		НепроверяемыеРеквизиты.Добавить("СтатьяРасходовНалог");
	КонецЕсли;
	
	Если ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		ИЛИ МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
		
		НепроверяемыеРеквизиты.Добавить("КоэффициентУскоренияБУ");
		
	КонецЕсли;
	
	Если ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		ИЛИ (МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный
		И МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
		И МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		
		НепроверяемыеРеквизиты.Добавить("СрокИспользованияБУ");
		
	КонецЕсли;
	
	Если ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ
		И (ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			И МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
			И МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
		
		НепроверяемыеРеквизиты.Добавить("КоэффициентАмортизацииБУ");
		
	КонецЕсли;
	
	Если ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		ИЛИ (МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
		И МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
		
		НепроверяемыеРеквизиты.Добавить("ОбъемНаработкиБУ");
		НепроверяемыеРеквизиты.Добавить("ПоказательНаработки");
		
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата) Тогда
		
		НепроверяемыеРеквизиты.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
		НепроверяемыеРеквизиты.Добавить("СрокИспользованияНУ");
		
	КонецЕсли;
	
	Если ПорядокУчетаНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		
		НепроверяемыеРеквизиты.Добавить("СрокИспользованияНУ");
		НепроверяемыеРеквизиты.Добавить("СпециальныйКоэффициентНУ");
		
	КонецЕсли;
	
	Если НЕ ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
		НепроверяемыеРеквизиты.Добавить("СтатьяРасходовАмортизационнойПремии");
		НепроверяемыеРеквизиты.Добавить("АналитикаРасходовАмортизационнойПремии");
	КонецЕсли;
	
	Если Не ПередаватьРасходыВДругуюОрганизацию Тогда
		НепроверяемыеРеквизиты.Добавить("ОрганизацияПолучательРасходов");
		НепроверяемыеРеквизиты.Добавить("СчетПередачиРасходов");
	КонецЕсли;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе Тогда
		НепроверяемыеРеквизиты.Добавить("Договор");
	КонецЕсли;
	
	Если (ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС
			И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе)
		Или Не РасчетыМеждуОрганизациямиАрендатор Тогда
		НепроверяемыеРеквизиты.Добавить("СчетУчетаАрендатора");
		НепроверяемыеРеквизиты.Добавить("ПодразделениеАрендатора");
		НепроверяемыеРеквизиты.Добавить("ЗалоговаяСтоимость");
	КонецЕсли;
	
	Если ВариантРаздельногоУчетаНДС <> Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента Тогда
		НепроверяемыеРеквизиты.Добавить("НалогообложениеНДС");
	КонецЕсли;
	
	Если ПрименениеЦелевогоФинансирования Тогда
		
		НепроверяемыеРеквизиты.Добавить("ТекущаяСтоимостьБУ");
		
	Иначе
		
		НепроверяемыеРеквизиты.Добавить("СчетУчетаЦФ");
		НепроверяемыеРеквизиты.Добавить("СчетАмортизацииЦФ");
		НепроверяемыеРеквизиты.Добавить("СтатьяДоходов");
		НепроверяемыеРеквизиты.Добавить("АналитикаДоходов");
		
		НепроверяемыеРеквизиты.Добавить("ТекущаяСтоимостьБУЦФ");
		НепроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		
	КонецЕсли;
	
	Если ГруппаОС = Перечисления.ГруппыОС.ЗемельныеУчастки Тогда
		НепроверяемыеРеквизиты.Добавить("АмортизационнаяГруппа");
	КонецЕсли;
	
	Если Не ЕстьСобытияМодернизации Тогда
		
		НепроверяемыеРеквизиты.Добавить("ДатаМодернизации");
		
	КонецЕсли;
	
	Если ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
		Или Не ЕстьСобытияМодернизации Тогда
		
		НепроверяемыеРеквизиты.Добавить("СтоимостьДляВычисленияАмортизации");
		
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборАмортизационнойГруппыОС" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		ОбработатьВыборКодаПоОКОФ(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
	
	ОсновноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеСредствоПриИзмененииНаСервере()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ИнвентарныйНомер", "Код");
	СтруктураРеквизитов.Вставить("ГруппаОС");
	РеквизитыОбъектаУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновноеСредство, СтруктураРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыОбъектаУчета);
	
	ОбновитьСвойстваЭлементовФормы("ОсновноеСредство");
	
КонецПроцедуры

#Область ОбработчикиСобытийСтраницыУчет

&НаКлиенте
Процедура ПорядокУчетаБУПриИзменении(Элемент)
	
	НачислятьАмортизациюБУ = (ПорядокУчетаБУ <> ПорядокУчетаБУСписан И ПорядокУчетаБУ <> ПорядокУчетаБУОстановлен);
	
	ПорядокУчетаБУПриИзмененииНаСервере();
	
	ПересчитатьСтоимостьПриСменеПорядкаУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПорядокУчетаБУПриИзмененииНаСервере()
	
	НачислениеИзносаНовоеЗначение = Ложь;
	
	Если ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
		ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы;
		НачислениеИзносаНовоеЗначение = Истина;
	Иначе
		НачислениеИзносаНовоеЗначение = Ложь;
	КонецЕсли;
	
	Если ПорядокУчетаБУ = ПорядокУчетаБУСписан Тогда
		ПорядокУчетаНУ = ПорядокУчетаНУСписан;
		НачислятьАмортизациюНУ = Ложь;
		ПервоначальнаяСтоимостьОтличается = Истина;
	КонецЕсли;
	
	Если НачислениеИзноса <> НачислениеИзносаНовоеЗначение Тогда
		НачислениеИзноса = НачислениеИзносаНовоеЗначение;
		СчетАмортизации = Неопределено;
		НакопленнаяАмортизацияНУ = ?(НачислениеИзноса, 0, НакопленнаяАмортизацияБУ);
		НакопленнаяАмортизацияПР = 0;
		НакопленнаяАмортизацияВР = 0;
		ОстаточнаяСтоимостьНУ = ТекущаяСтоимостьНУ - НакопленнаяАмортизацияНУ;
		
		ПрименениеЦелевогоФинансирования = ?(НачислениеИзноса, Ложь, ПрименениеЦелевогоФинансирования);
		
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы("ПорядокУчетаБУ, ПорядокУчетаНУ, ПервоначальнаяСтоимостьОтличается, СчетАмортизации, НачислениеИзноса, ВключитьАмортизационнуюПремиюВСоставРасходов, ПрименениеЦелевогоФинансирования");
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаНУПриИзменении(Элемент)
	
	НачислятьАмортизациюНУ = (ПорядокУчетаНУ <> ПорядокУчетаНУСписан И ПорядокУчетаНУ <> ПорядокУчетаНУОстановлен);
	Если ПорядокУчетаНУ = ПорядокУчетаНУСписан Тогда
		ПервоначальнаяСтоимостьОтличается = Истина;
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы("ПорядокУчетаНУ, ПервоначальнаяСтоимостьОтличается");
	
	ПересчитатьСтоимостьПриСменеПорядкаУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЦелевогоФинансированияПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("ПрименениеЦелевогоФинансирования, СписанПоБУНУ");
	
	ПересчитатьПервоначальнуюСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыМеждуОрганизациямиАрендаторПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("РасчетыМеждуОрганизациямиАрендатор");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("СчетУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЦФПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("СчетУчетаЦФ");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетАмортизацииПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("СчетАмортизации");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетАмортизацииЦФПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("СчетАмортизацииЦФ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаздельногоУчетаНДСПриИзменении(Элемент)
	ОбновитьСвойстваЭлементовФормы("ВариантРаздельногоУчетаНДС");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПринятияКУчетуПриИзменении(Элемент)
	
	Если НачалоМесяца(Дата) <> НачалоМесяца(ДатаПринятияКУчету) Тогда
		ВключитьАмортизационнуюПремиюВСоставРасходов = Ложь;
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы("ДатаПринятияКУчету, ВключитьАмортизационнуюПремиюВСоставРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияПриИзменении(Элемент)
	
	АдресМестонахожденияЗначенияПолей = ЗначенияПолейКонтактнойИнформацииСервер(АдресМестонахождения,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресМестонахожденияЗначенияПолей = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПартнера"),
			АдресМестонахожденияЗначенияПолей),
		ЭтотОбъект,
		Новый ОписаниеОповещения("АдресМестонахожденияЗавершениеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияЗавершениеВыбора(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		// не было изменений в данных
		Возврат;
	КонецЕсли;
	
	АдресМестонахожденияЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
	АдресМестонахождения = РезультатОткрытияФормы.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("ГруппаОС");
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизационнаяГруппаПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("АмортизационнаяГруппа");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОФПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(АмортизационнаяГруппа) И ЗначениеЗаполнено(КодПоОКОФ) Тогда
		КодОКОФПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КодПоОКОФ", КодПоОКОФ);
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа", АмортизационнаяГруппа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораАмортизационнойГруппы", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыСтоимость

&НаКлиенте
Процедура ПервоначальнаяСтоимостьОтличаетсяПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("ПервоначальнаяСтоимостьОтличается");
	
	Если Не ПервоначальнаяСтоимостьОтличается Тогда
		
		ПервоначальнаяСтоимостьБУ = ТекущаяСтоимостьБУ;
		ПервоначальнаяСтоимостьНУ = ТекущаяСтоимостьНУ;
		ПервоначальнаяСтоимостьПР = ТекущаяСтоимостьПР;
		ПервоначальнаяСтоимостьВР = ТекущаяСтоимостьВР;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПервоначальнуюСтоимость()
	
	Если Не ПервоначальнаяСтоимостьОтличается Тогда
		
		МножительЦФ = ?(ПрименениеЦелевогоФинансирования, 1, 0);
		
		ПервоначальнаяСтоимостьБУ = ТекущаяСтоимостьБУ + ТекущаяСтоимостьБУЦФ * МножительЦФ;
		ПервоначальнаяСтоимостьНУ = ТекущаяСтоимостьНУ + ТекущаяСтоимостьНУЦФ * МножительЦФ;
		ПервоначальнаяСтоимостьПР = ТекущаяСтоимостьПР + ТекущаяСтоимостьПРЦФ * МножительЦФ;
		ПервоначальнаяСтоимостьВР = ТекущаяСтоимостьВР + ТекущаяСтоимостьВРЦФ * МножительЦФ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтоимостьПриСменеПорядкаУчета()
	
	СписанПоБУ = (ПорядокУчетаБУ = ПорядокУчетаБУСписан);
	СписанПоНУ = (ПорядокУчетаНУ = ПорядокУчетаНУСписан);
	
	ОстановленПоБУ = (ПорядокУчетаБУ = ПорядокУчетаБУОстановлен);
	ОстановленПоНУ = (ПорядокУчетаНУ = ПорядокУчетаНУОстановлен);
	
	ТекущаяСтоимостьБУ = ?(СписанПоБУ, 0, ТекущаяСтоимостьБУ);
	ТекущаяСтоимостьНУ = ?(СписанПоНУ, 0, ТекущаяСтоимостьНУ);
	ТекущаяСтоимостьПР = ?(СписанПоНУ, 0, ТекущаяСтоимостьПР);
	ТекущаяСтоимостьВР = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	
	ТекущаяСтоимостьБУЦФ = ?(СписанПоБУ, 0, ТекущаяСтоимостьБУЦФ);
	ТекущаяСтоимостьНУЦФ = ?(СписанПоНУ, 0, ТекущаяСтоимостьНУЦФ);
	ТекущаяСтоимостьПРЦФ = ?(СписанПоНУ, 0, ТекущаяСтоимостьПРЦФ);
	ТекущаяСтоимостьВРЦФ = ТекущаяСтоимостьБУЦФ - ТекущаяСтоимостьНУЦФ - ТекущаяСтоимостьПРЦФ;
	
	НакопленнаяАмортизацияБУ = ?(СписанПоБУ Или ОстановленПоБУ, 0, НакопленнаяАмортизацияБУ);
	НакопленнаяАмортизацияНУ = ?(СписанПоНУ Или ОстановленПоНУ, 0, НакопленнаяАмортизацияНУ);
	НакопленнаяАмортизацияПР = ?(СписанПоНУ Или ОстановленПоНУ, 0, НакопленнаяАмортизацияПР);
	НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
	
	НакопленнаяАмортизацияБУЦФ = ?(СписанПоБУ Или ОстановленПоБУ, 0, НакопленнаяАмортизацияБУЦФ);
	НакопленнаяАмортизацияНУЦФ = ?(СписанПоНУ Или ОстановленПоНУ, 0, НакопленнаяАмортизацияНУЦФ);
	НакопленнаяАмортизацияПРЦФ = ?(СписанПоНУ Или ОстановленПоНУ, 0, НакопленнаяАмортизацияПРЦФ);
	НакопленнаяАмортизацияВРЦФ = НакопленнаяАмортизацияБУЦФ - НакопленнаяАмортизацияНУЦФ - НакопленнаяАмортизацияПРЦФ;
	
	ПересчитатьЗависимыеСуммы();
	ПересчитатьЗависимыеСуммыЦФ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗависимыеСуммы()
	
	ПересчитатьПервоначальнуюСтоимость();
	
	ОстаточнаяСтоимостьБУ = ТекущаяСтоимостьБУ - НакопленнаяАмортизацияБУ;
	ОстаточнаяСтоимостьНУ = ТекущаяСтоимостьНУ - НакопленнаяАмортизацияНУ;
	ОстаточнаяСтоимостьПР = ТекущаяСтоимостьПР - НакопленнаяАмортизацияПР;
	ОстаточнаяСтоимостьВР = ТекущаяСтоимостьВР - НакопленнаяАмортизацияВР;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗависимыеСуммыЦФ()
	
	ПересчитатьПервоначальнуюСтоимость();
	
	ОстаточнаяСтоимостьБУЦФ = ТекущаяСтоимостьБУЦФ - НакопленнаяАмортизацияБУЦФ;
	ОстаточнаяСтоимостьНУЦФ = ТекущаяСтоимостьНУЦФ - НакопленнаяАмортизацияНУЦФ;
	ОстаточнаяСтоимостьПРЦФ = ТекущаяСтоимостьПРЦФ - НакопленнаяАмортизацияПРЦФ;
	ОстаточнаяСтоимостьВРЦФ = ТекущаяСтоимостьВРЦФ - НакопленнаяАмортизацияВРЦФ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	СуммаНУ = ПервоначальнаяСтоимостьБУ - ПервоначальнаяСтоимостьПР - ПервоначальнаяСтоимостьВР;
	Если СуммаНУ < 0 Тогда
		ПервоначальнаяСтоимостьНУ = 0;
		ПервоначальнаяСтоимостьВР = ПервоначальнаяСтоимостьБУ - ПервоначальнаяСтоимостьНУ - ПервоначальнаяСтоимостьПР;
	Иначе
		ПервоначальнаяСтоимостьНУ = СуммаНУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	ПервоначальнаяСтоимостьВР = ПервоначальнаяСтоимостьБУ - ПервоначальнаяСтоимостьНУ - ПервоначальнаяСтоимостьПР;
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьПРПриИзменении(Элемент)
	
	ПервоначальнаяСтоимостьВР = ПервоначальнаяСтоимостьБУ - ПервоначальнаяСтоимостьНУ - ПервоначальнаяСтоимостьПР;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	СуммаНУ = ?(ПорядокУчетаНУ=ПорядокУчетаНУСписан, 0, ТекущаяСтоимостьБУ - ТекущаяСтоимостьПР - ТекущаяСтоимостьВР);
	Если СуммаНУ < 0 Тогда
		ТекущаяСтоимостьНУ = 0;
		ТекущаяСтоимостьВР = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	Иначе
		ТекущаяСтоимостьНУ = СуммаНУ;
	КонецЕсли;
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	ТекущаяСтоимостьВР = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьПРПриИзменении(Элемент)
	
	ТекущаяСтоимостьВР = ТекущаяСтоимостьБУ - ТекущаяСтоимостьНУ - ТекущаяСтоимостьПР;
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьБУЦФПриИзменении(Элемент)
	
	ТекущаяСтоимостьПРЦФ = ТекущаяСтоимостьБУЦФ;
	ПересчитатьЗависимыеСуммыЦФ();
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	Если Не НачислениеИзноса Тогда
		
		СуммаНУ = ?(ПорядокУчетаНУ=ПорядокУчетаНУСписан Или ПорядокУчетаНУ=ПорядокУчетаНУОстановлен, 0, НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияПР - НакопленнаяАмортизацияВР);
		Если СуммаНУ < 0 Тогда
			НакопленнаяАмортизацияНУ = 0;
			НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
		Иначе
			НакопленнаяАмортизацияНУ = СуммаНУ;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияПРПриИзменении(Элемент)
	
	НакопленнаяАмортизацияВР = НакопленнаяАмортизацияБУ - НакопленнаяАмортизацияНУ - НакопленнаяАмортизацияПР;
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУЦФПриИзменении(Элемент)
	
	НакопленнаяАмортизацияПРЦФ = НакопленнаяАмортизацияБУЦФ;
	ПересчитатьЗависимыеСуммыЦФ();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаСтоимостиАрендованногоИмуществаНУПриИзменении(Элемент)
	
	КорректировкаСтоимостиАрендованногоИмуществаВР = -КорректировкаСтоимостиАрендованногоИмуществаНУ;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыСобытия

&НаКлиенте
Процедура ЕстьСобытияМодернизацииПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("ЕстьСобытияМодернизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРезервПереоценкиПриИзменении(Элемент)
	ОбновитьСвойстваЭлементовФормы("ЕстьРезервПереоценки");
КонецПроцедуры

&НаКлиенте
Процедура РезервПереоценкиСтоимостиСуммаПриИзменении(Элемент)
	
	Если ТекущаяСтоимостьБУ <> 0 И РезервПереоценкиСтоимостиСумма <> 0 Тогда
		МножительЦФ = ?(ПрименениеЦелевогоФинансирования, 1, 0);
		РезервПереоценкиАмортизацииСумма = 
			(НакопленнаяАмортизацияБУ + МножительЦФ*НакопленнаяАмортизацияБУЦФ)
			* (РезервПереоценкиСтоимостиСумма / (ТекущаяСтоимостьБУ + МножительЦФ*ТекущаяСтоимостьБУ));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыАмортизация

&НаКлиенте
Процедура ВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("ВключитьАмортизационнуюПремиюВСоставРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура МетодНачисленияАмортизацииБУПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("МетодНачисленияАмортизацииБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУПриИзменении(Элемент)
	
	Если (СрокИспользованияНУ = 0 Или СрокИспользованияБУСохраненный = СрокИспользованияНУ) Тогда
		
		СрокИспользованияНУ = СрокИспользованияБУ;
		Элементы.СрокИспользованияНУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияНУ);
		
	КонецЕсли;
	
	СрокИспользованияБУСохраненный = СрокИспользованияБУ;
	Элементы.СрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	Элементы.ИзносСрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУОстаточныйПриИзменении(Элемент)
	
	СрокИспользованияБУСохраненный = СрокИспользованияБУ;
	Элементы.СрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	Элементы.ИзносСрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	
	Элементы.СрокИспользованияНУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияНУ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательНаработкиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПоказательНаработки) Тогда
		ОбновитьСвойстваЭлементовФормы("ПоказательНаработки");
	Иначе
		Элементы.ОбъемНаработкиБУ.Подсказка = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыИзнос

&НаКлиенте
Процедура ИзносСрокИспользованияБУПриИзменении(Элемент)
	
	Если СрокИспользованияНУ = 0 Или СрокИспользованияБУСохраненный = СрокИспользованияНУ Тогда
		
		СрокИспользованияНУ = СрокИспользованияБУ;
		Элементы.СрокИспользованияНУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияНУ);
		
	КонецЕсли;
	
	СрокИспользованияБУСохраненный = СрокИспользованияБУ;
	Элементы.СрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	Элементы.ИзносСрокИспользованияБУ.Подсказка = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(СрокИспользованияБУ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыОтражениеРасходов

&НаКлиенте
Процедура ПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	Если Не ПередаватьРасходыВДругуюОрганизацию Тогда
		
		ОрганизацияПолучательРасходов = Неопределено;
		СчетПередачиРасходов = Неопределено;
		
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы("ПередаватьРасходыВДругуюОрганизацию");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизацииПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАмортизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАмортизацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАмортизацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизационнойПремииПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизационнойПремииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАмортизационнойПремииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАмортизационнойПремииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАмортизационнойПремииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНалогПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНалогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНалогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗавершитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция СчетУчетаПредставление(Счет)
	Возврат ?(ЗначениеЗаполнено(Счет), Счет, НСтр("ru = 'учета ОС';
													|en = 'FA accounting'"));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СчетАмортизацииПредставление(Счет)
	Возврат ?(ЗначениеЗаполнено(Счет), Счет, НСтр("ru = 'амортизации';
													|en = 'depreciation'"));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СчетИзносаПредставление(Счет)
	Возврат ?(ЗначениеЗаполнено(Счет), Счет, НСтр("ru = 'износа';
													|en = 'wear'"));
КонецФункции

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормы(ИзмененныеРеквизиты=Неопределено)
	
	ОбновитьВсе = (ИзмененныеРеквизиты = Неопределено);
	Реквизиты = Новый Структура(ИзмененныеРеквизиты);
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПорядокУчетаБУ") Тогда
		
		НачислятьАмортизацию = (ПорядокУчетаБУ =Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
		
		Элементы.ГруппаАмортизацияБУ.Видимость = НачислятьАмортизацию;
		
		Элементы.ГруппаАмортизацияОтражениеАмортизационныхРасходов.Видимость = (
			НачислятьАмортизацию
			Или ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
		
		Реквизиты.Вставить("СписанПоБУНУ");
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПорядокУчетаНУ") Тогда
		
		НачислятьАмортизацию = (ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
		
		Элементы.ГруппаАмортизацияНУ.Видимость = НачислятьАмортизацию;
		
		Элементы.ГруппаАмортизацияОтражениеАмортизационныхРасходов.Видимость = (
			НачислятьАмортизацию
			Или ПорядокУчетаБУ =Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
		
		Реквизиты.Вставить("СписанПоБУНУ");
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("СписанПоБУНУ") Тогда
		
		СписанПоБУ = (ПорядокУчетаБУ =Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету);
		
		Элементы.ТекущаяСтоимостьБУ.ТолькоПросмотр = СписанПоБУ;
		Элементы.ТекущаяСтоимостьБУ.АвтоОтметкаНезаполненного = Не СписанПоБУ И НЕ ПрименениеЦелевогоФинансирования;
		Элементы.ТекущаяСтоимостьБУ.ОтметкаНезаполненного = Не СписанПоБУ И Не ЗначениеЗаполнено(ТекущаяСтоимостьБУ) И НЕ ПрименениеЦелевогоФинансирования;
		
		Элементы.ТекущаяСтоимостьБУЦФ.ТолькоПросмотр = СписанПоБУ;
		Элементы.ТекущаяСтоимостьБУЦФ.АвтоОтметкаНезаполненного = Не СписанПоБУ;
		Элементы.ТекущаяСтоимостьБУЦФ.ОтметкаНезаполненного = Не СписанПоБУ И Не ЗначениеЗаполнено(ТекущаяСтоимостьБУЦФ);
		
		Элементы.НакопленнаяАмортизацияБУ.ТолькоПросмотр = СписанПоБУ;
		Элементы.НакопленнаяАмортизацияБУЦФ.ТолькоПросмотр = СписанПоБУ;
		
		СписанПоНУ = (ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);
		
		Элементы.ТекущаяСтоимостьНУ.ТолькоПросмотр = СписанПоНУ;
		
		Элементы.НакопленнаяАмортизацияНУ.ТолькоПросмотр = СписанПоНУ;
		Элементы.ТекущаяСтоимостьПР.ТолькоПросмотр = СписанПоНУ;
		
		Элементы.ПервоначальнаяСтоимостьОтличается.ТолькоПросмотр = (СписанПоБУ Или СписанПоНУ);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПрименениеЦелевогоФинансирования") Тогда
		
		Если ПрименениеЦелевогоФинансирования Тогда
			ЗаголовокТекущаяСтоимость = НСтр("ru = 'Собственные средства, остаток на счете %1:';
											|en = 'Own funds, account balance %1:'");
			ЗаголовокНакопленнаяАмортизация = НСтр("ru = 'Собственные средства, остаток на счете %1:';
													|en = 'Own funds, account balance %1:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок = НСтр("ru = 'Собственные средства:';
																		|en = 'Own funds:'");
			
			Элементы.ГруппаСчетаУчета.Видимость = Ложь;
			Элементы.ГруппаСчетаУчетаЦФ.Видимость = Истина;
			Элементы.СтраницаОтражениеРасходов.Заголовок = НСтр("ru = 'Отражение доходов и расходов';
																|en = 'Record income and expenses'");
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость = Истина;
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Истина;
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость = Истина;
			
			Элементы.ГруппаТекущаяСтоимостьСуммыЦФ.Видимость = Истина;
			Элементы.ГруппаНакопленнаяАмортизацияСуммыЦФ.Видимость = Истина;
			Элементы.ГруппаОстаточнаяСтоимостьСуммыЦФ.Видимость = Истина;
			
			Элементы.ГруппаДоходыЦелевогоФинансирования.Видимость = Истина;
			
			Реквизиты.Вставить("СчетУчетаЦФ");
			Реквизиты.Вставить("СчетАмортизацииЦФ");
		Иначе
			ЗаголовокТекущаяСтоимость = НСтр("ru = 'Остаток на счете %1:';
											|en = 'Account balance %1:'");
			ЗаголовокНакопленнаяАмортизация = НСтр("ru = 'Остаток на счете %1:';
													|en = 'Account balance %1:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок = НСтр("ru = 'Сумма:';
																		|en = 'Amount:'");
			
			Элементы.ГруппаСчетаУчета.Видимость = Истина;
			Элементы.ГруппаСчетаУчетаЦФ.Видимость = Ложь;
			Элементы.СтраницаОтражениеРасходов.Заголовок = НСтр("ru = 'Отражение расходов';
																|en = 'Expense parameters'");
			
			Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость = Ложь;
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость = Ложь;
			
			Элементы.ГруппаТекущаяСтоимостьСуммыЦФ.Видимость = Ложь;
			Элементы.ГруппаНакопленнаяАмортизацияСуммыЦФ.Видимость = Ложь;
			Элементы.ГруппаОстаточнаяСтоимостьСуммыЦФ.Видимость = Ложь;
			
			Элементы.ГруппаДоходыЦелевогоФинансирования.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.НаправлениеДеятельности.АвтоОтметкаНезаполненного = ПрименениеЦелевогоФинансирования;
		Элементы.НаправлениеДеятельности.ОтметкаНезаполненного = ПрименениеЦелевогоФинансирования И Не ЗначениеЗаполнено(НаправлениеДеятельности);
		
		Реквизиты.Вставить("СчетУчета");
		Реквизиты.Вставить("СчетАмортизации");
		
		АрендаторОрганизация = (ОпцияИспользоватьНесколькоОрганизаций И РасчетыМеждуОрганизациямиАрендатор);
		Элементы.ГруппаУчетАрендатораЛево.Видимость = АрендаторОрганизация И ПрименениеЦелевогоФинансирования;
		Элементы.ГруппаУчетАрендатораПраво.Видимость = АрендаторОрганизация И Не ПрименениеЦелевогоФинансирования;
		
		Элементы.НаправлениеДеятельности.АвтоОтметкаНезаполненного = ПрименениеЦелевогоФинансирования;
		Элементы.НаправлениеДеятельности.ОтметкаНезаполненного = 
			НЕ ЗначениеЗаполнено(НаправлениеДеятельности) 
			И ПрименениеЦелевогоФинансирования;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПорядокУчетаБУ") Или Реквизиты.Свойство("ПорядокУчетаНУ") Или Реквизиты.Свойство("ПрименениеЦелевогоФинансирования") Тогда
		
		БезАмортизации = (ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			И ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ
			И ПорядокУчетаНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
		
		Если Элементы.ГруппаСчетаУчета.Видимость Тогда
			Элементы.СчетАмортизацииОсновной.Видимость = Не БезАмортизации;
			Элементы.СчетАмортизацииПустой.Видимость = БезАмортизации;
		КонецЕсли;
		
		Если Элементы.ГруппаСчетаУчетаАмортизации.Видимость Тогда
			Элементы.СчетАмортизации.Видимость = Не БезАмортизации;
			Элементы.СчетАмортизацииЦФ.Видимость = Не БезАмортизации;
		КонецЕсли;
		
		Элементы.ГруппаНакопленнаяАмортизация.Видимость = Не БезАмортизации;
		Элементы.ГруппаОстаточнаяСтоимость.Видимость = Не БезАмортизации;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПервоначальнаяСтоимостьОтличается") Тогда
		
		Элементы.ГруппаПервоначальнаяСтоимостьСуммы.ТолькоПросмотр = Не ПервоначальнаяСтоимостьОтличается;
		
		Элементы.ПервоначальнаяСтоимостьБУ.АвтоОтметкаНезаполненного = ПервоначальнаяСтоимостьОтличается;
		Элементы.ПервоначальнаяСтоимостьБУ.ОтметкаНезаполненного = ПервоначальнаяСтоимостьОтличается И Не ЗначениеЗаполнено(ПервоначальнаяСтоимостьБУ);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("НачислениеИзноса") Тогда
		
		Элементы.СтраницаИзнос.Видимость = НачислениеИзноса;
		Элементы.ПорядокУчетаНУ.ТолькоПросмотр = НачислениеИзноса;
		Элементы.ПрименениеЦелевогоФинансирования.ТолькоПросмотр = НачислениеИзноса;
		
		МассивВидовСубконто = Новый Массив;
		МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВидыСубконто", Новый ФиксированныйМассив(МассивВидовСубконто)));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		
		Если НачислениеИзноса Тогда
			
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
			
			Элементы.СчетАмортизацииОсновной.Заголовок = НСтр("ru = 'Накопленного износа';
																|en = 'Accumulated wear'");
			
			Элементы.ГруппаОстаточнаяСтоимость.Видимость = Ложь;
			Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленный износ';
																	|en = 'Accumulated depreciation'");
			
			Элементы.НакопленнаяАмортизацияНУ.ТолькоПросмотр = Истина;
			Элементы.НакопленнаяАмортизацияПР.ТолькоПросмотр = Истина;
			
		Иначе
			
			БезАмортизации = (ПорядокУчетаБУ =Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается
				И ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Родитель", ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств));
			
			Элементы.СчетАмортизацииОсновной.Заголовок = НСтр("ru = 'Накопленной амортизации';
																|en = 'Accumulated depreciation'");
			
			Элементы.ГруппаОстаточнаяСтоимость.Видимость = Не БезАмортизации;
			Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru = 'Накопленная амортизация';
																	|en = 'Accumulated depreciation'");
			
			Элементы.НакопленнаяАмортизацияНУ.ТолькоПросмотр = Ложь;
			Элементы.НакопленнаяАмортизацияПР.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
		Элементы.СчетАмортизацииОсновной.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("СчетУчета") Тогда
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок = СтрШаблон(ЗаголовокТекущаяСтоимость, СчетУчетаПредставление(СчетУчета));
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("СчетАмортизации") Тогда
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = СтрШаблон(
			ЗаголовокНакопленнаяАмортизация,
			?(НачислениеИзноса, СчетИзносаПредставление(СчетАмортизации), СчетАмортизацииПредставление(СчетАмортизации)));
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("СчетУчетаЦФ") Тогда
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Заголовок = СтрШаблон(ЗаголовокТекущаяСтоимостьЦФ, СчетУчетаПредставление(СчетУчетаЦФ));
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("СчетАмортизацииЦФ") Тогда
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Заголовок = СтрШаблон(ЗаголовокНакопленнаяАмортизацияЦФ, СчетАмортизацииПредставление(СчетАмортизацииЦФ));
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ЕстьСобытияМодернизации") Тогда
		
		Элементы.ДатаМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		Элементы.НазваниеДокументаМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		Элементы.НомерДокументаМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		Элементы.СобытиеМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		
		Элементы.СтоимостьДляВычисленияАмортизации.Видимость = ЕстьСобытияМодернизации;
		
		Элементы.ДатаМодернизации.АвтоОтметкаНезаполненного = ЕстьСобытияМодернизации;
		Элементы.ДатаМодернизации.ОтметкаНезаполненного = ЕстьСобытияМодернизации И Не ЗначениеЗаполнено(ДатаМодернизации);
		
		Элементы.СтоимостьДляВычисленияАмортизации.АвтоОтметкаНезаполненного = ЕстьСобытияМодернизации;
		Элементы.СтоимостьДляВычисленияАмортизации.ОтметкаНезаполненного = ЕстьСобытияМодернизации И Не ЗначениеЗаполнено(СтоимостьДляВычисленияАмортизации);
		
		Реквизиты.Вставить("МетодНачисленияАмортизацииБУ");
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ЕстьСобытияМодернизации") Или Реквизиты.Свойство("ЕстьРезервПереоценки") Тогда
		Если ЕстьСобытияМодернизации И ЕстьРезервПереоценки Тогда
			Элементы.СтоимостьДляВычисленияАмортизации.Подсказка = НСтр("ru = 'Остаточная стоимость после модернизации и переоценки.';
																		|en = 'Net book value after modernization and revaluation.'");
		ИначеЕсли ЕстьСобытияМодернизации Тогда
			Элементы.СтоимостьДляВычисленияАмортизации.Подсказка = НСтр("ru = 'Остаточная стоимость на дату последней модернизации.';
																		|en = 'Net book value on the last modernization date.'");
		КонецЕсли; 
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ДатаПринятияКУчету") Тогда
		
		Элементы.ГруппаАмортизационнаяПремия.Видимость =
			(ПорядокУчетаНУ=Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			И НачалоМесяца(Дата) = НачалоМесяца(ДатаПринятияКУчету));
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ВключитьАмортизационнуюПремиюВСоставРасходов") Тогда
		
		Элементы.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.ТолькоПросмотр = Не ВключитьАмортизационнуюПремиюВСоставРасходов;
		Элементы.ГруппаОтражениеПремия.Видимость = (ВключитьАмортизационнуюПремиюВСоставРасходов
			И ПорядокУчетаНУ=Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("МетодНачисленияАмортизацииБУ") Тогда
		
		ПоОстатку = (МетодНачисленияАмортизацииБУ=Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		ПоНорме = (МетодНачисленияАмортизацииБУ=Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
			Или МетодНачисленияАмортизацииБУ=Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
		ПоНаработке = (МетодНачисленияАмортизацииБУ=Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
			Или МетодНачисленияАмортизацииБУ=Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
		
		Элементы.ОбъемНаработкиБУ.Видимость = ПоНаработке;
		Элементы.ПоказательНаработки.Видимость = ПоНаработке;
		Элементы.КоэффициентАмортизацииБУ.Видимость = ПоНорме;
		Элементы.ГрафикАмортизацииБУ.Видимость = ПоНаработке;
		Элементы.КоэффициентУскоренияБУ.Видимость = ПоОстатку;
		
		Элементы.СрокИспользованияБУ.Видимость = Не ЕстьСобытияМодернизации Или ПоНаработке;
		Элементы.СрокИспользованияБУОстаточный.Видимость = ЕстьСобытияМодернизации И Не ПоНаработке;
		
		Элементы.ОбъемНаработкиБУ.Видимость = Не ЕстьСобытияМодернизации И ПоНаработке;
		Элементы.ОбъемНаработкиБУОстаточный.Видимость = ЕстьСобытияМодернизации И ПоНаработке;
		
		Элементы.СрокИспользованияБУ.АвтоОтметкаНезаполненного = Не (ПоНорме Или ПоНаработке);
		Если Не Элементы.СрокИспользованияБУ.АвтоОтметкаНезаполненного Тогда
			Элементы.СрокИспользованияБУ.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьВсе 
		Или Реквизиты.Свойство("ОсновноеСредство")
		Или Реквизиты.Свойство("ГруппаОС")
		Или Реквизиты.Свойство("АмортизационнаяГруппа") Тогда
		
		ТребуетсяНастройка = ВнеоборотныеАктивыЛокализация.ТребуетсяНастройкаОтраженияРасходовПоНалогам(
									Организация, 
									Дата, 
									ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредство),
									ГруппаОС, 
									АмортизационнаяГруппа);
									
		Элементы.СтатьяРасходовНалог.АвтоОтметкаНезаполненного = ТребуетсяНастройка;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ГруппаОС") Тогда
		ТребуетсяАмортизационнаяГруппа = (ГруппаОС <> Перечисления.ГруппыОС.ЗемельныеУчастки);
		Элементы.АмортизационнаяГруппа.АвтоОтметкаНезаполненного = ТребуетсяАмортизационнаяГруппа;
		Элементы.АмортизационнаяГруппа.ОтметкаНезаполненного = ТребуетсяАмортизационнаяГруппа И Не ЗначениеЗаполнено(АмортизационнаяГруппа);
		
		ВнеоборотныеАктивыКлиентСервер.УстановитьВидимостьЗначенияСпискаВыбора(
			Элементы.ГруппаОС.СписокВыбора,
			ГруппаОС = Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество,
			Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество,,
			11);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПередаватьРасходыВДругуюОрганизацию") Тогда
		
		Элементы.ОрганизацияПолучательРасходов.Доступность = ПередаватьРасходыВДругуюОрганизацию;
		Элементы.СчетПередачиРасходов.Доступность = ПередаватьРасходыВДругуюОрганизацию;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПоказательНаработки") Тогда
		
		Если ЗначениеЗаполнено(ПоказательНаработки) Тогда
			Элементы.ОбъемНаработкиБУ.Подсказка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательНаработки, "ЕдиницаИзмерения");
		Иначе
			Элементы.ОбъемНаработкиБУ.Подсказка = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("Организация") Тогда
		
		ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация);
		Элементы.ПередаватьРасходыВДругуюОрганизацию.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.ОрганизацияПолучательРасходов.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.СчетПередачиРасходов.Видимость = ЕстьСвязанныеОрганизации;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ХозяйственнаяОперация") Тогда
		
		Элементы.Договор.Видимость = (
			ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе
			Или ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе);
		
		ТребуетсяАрендатор =
			(ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС
			Или ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе);
		
		Элементы.ГруппаАрендатор.Видимость = ТребуетсяАрендатор;
		
		ВидыСубконто = Новый Массив;
		Если ТребуетсяАрендатор Тогда
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		КонецЕсли;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		ПараметрВыбораСубконто = Новый ПараметрВыбора("ВидыСубконто", Новый ФиксированныйМассив(ВидыСубконто));
		
		ОбновитьПараметрыВыбораЭлемента(Элементы.СчетУчетаОсновной, "ВидыСубконто", ПараметрВыбораСубконто);
		ОбновитьПараметрыВыбораЭлемента(Элементы.СчетУчета, "ВидыСубконто", ПараметрВыбораСубконто);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ВариантРаздельногоУчетаНДС") Тогда
		
		ТребуетсяНалогообложениеНДС = (ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента);
		Элементы.НалогообложениеНДС.ТолькоПросмотр = Не ТребуетсяНалогообложениеНДС;
		Элементы.НалогообложениеНДС.АвтоОтметкаНезаполненного = ТребуетсяНалогообложениеНДС;
		Элементы.НалогообложениеНДС.ОтметкаНезаполненного = (ТребуетсяНалогообложениеНДС И ЗначениеЗаполнено(НалогообложениеНДС));
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ЕстьРезервПереоценки") Тогда
		Элементы.РезервПереоценкиЗнак.ТолькоПросмотр = Не ЕстьРезервПереоценки;
		Элементы.РезервПереоценкиСтоимостиСумма.ТолькоПросмотр = Не ЕстьРезервПереоценки;
		Элементы.РезервПереоценкиАмортизацииСумма.ТолькоПросмотр = Не ЕстьРезервПереоценки;
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ИспользоватьНесколькоОрганизаций") Тогда
		
		Если Не ОпцияИспользоватьНесколькоОрганизаций Тогда
			Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			Элементы.Контрагент.МаксимальнаяШирина = 32;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("РасчетыМеждуОрганизациямиАрендатор") Тогда
		
		АрендаторОрганизация = (ОпцияИспользоватьНесколькоОрганизаций И РасчетыМеждуОрганизациямиАрендатор);
		
		Элементы.Контрагент.ОграничениеТипа = ?(
			АрендаторОрганизация,
			Новый ОписаниеТипов("СправочникСсылка.Организации"),
			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		Элементы.ГруппаУчетАрендатораЛево.Видимость = АрендаторОрганизация И ПрименениеЦелевогоФинансирования;
		Элементы.ГруппаУчетАрендатораПраво.Видимость = АрендаторОрганизация И Не ПрименениеЦелевогоФинансирования;
		
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
		
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
								"НастройкиУчетаНалогаНаПрибыль", Организация, ?(Дата <> '000101010000', КонецМесяца(Дата), '000101010000'));
		
		ВидимостьЭлементов = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе
			И ПараметрыУчетнойПолитики <> Неопределено
			И ПараметрыУчетнойПолитики.ВключатьВСоставНалоговыхРасходовАрендныеПлатежи
			И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
		
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаБУ.Видимость = ВидимостьЭлементов;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаНУ.Видимость = ВидимостьЭлементов;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаПР.Видимость = ВидимостьЭлементов;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаВР.Видимость = ВидимостьЭлементов;
		Элементы.КорректировкаСтоимостиАрендованногоИмуществаБУЗаголовок.Видимость = ВидимостьЭлементов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыВыбораЭлемента(Элемент, ИмяЗаменяемогоПараметра, ЗначениеЗаменяемогоПараметра)
	
	Массив = Новый Массив;
	
	Для Каждого ПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = ИмяЗаменяемогоПараметра Тогда
			Массив.Добавить(ЗначениеЗаменяемогоПараметра);
		Иначе
			Массив.Добавить(ПараметрВыбора);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеИспользуемыеРеквизиты()
	
	Если ПорядокУчетаНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
		Или НачалоМесяца(ДатаПринятияКУчету) <> НачалоМесяца(Дата) Тогда
		
		ВключитьАмортизационнуюПремиюВСоставРасходов = Ложь;
		СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
		
		СтатьяРасходовАмортизационнойПремии = Неопределено;
		АналитикаРасходовАмортизационнойПремии = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитыРедактируемыеВОтдельнойФорме()
	
	СтруктураДанных = Новый Структура(
	"ОсновноеСредство,
	|ИнвентарныйНомер,
	|ПорядокУчетаБУ,
	|ПорядокУчетаНУ,
	|СчетУчета,
	|СчетАмортизации,
	|Договор,
	|ГруппаОС,
	|АмортизационнаяГруппа,
	|КодПоОКОФ,
	|ШифрПоЕНАОФ,
	|СпособПоступления,
	|МОЛ,
	|АдресМестонахождения,
	|ПервоначальнаяСтоимостьБУ,
	|ПервоначальнаяСтоимостьНУ,
	|ПервоначальнаяСтоимостьПР,
	|ТекущаяСтоимостьБУ,
	|ТекущаяСтоимостьНУ,
	|ТекущаяСтоимостьПР,
	|НакопленнаяАмортизацияБУ,
	|НакопленнаяАмортизацияНУ,
	|НакопленнаяАмортизацияПР,
	|НачислятьАмортизациюБУ,
	|МетодНачисленияАмортизацииБУ,
	|СрокИспользованияБУ,
	|ПоказательНаработки,
	|ОбъемНаработкиБУ,
	|КоэффициентАмортизацииБУ,
	|КоэффициентУскоренияБУ,
	|ГрафикАмортизацииБУ,
	|НачислятьАмортизациюНУ,
	|СрокИспользованияНУ,
	|СпециальныйКоэффициентНУ,
	|СтатьяРасходовАмортизации,
	|АналитикаРасходовАмортизации,
	|НомерДокументаПринятияКУчету,
	|НомерДокументаМодернизации,
	|СобытиеПринятияКУчету,
	|СобытиеМодернизации,
	|НазваниеДокументаПринятияКУчету,
	|НазваниеДокументаМодернизации,
	|ДатаПринятияКУчету,
	|ДатаМодернизации,
	|СтатьяРасходовНалог,
	|АналитикаРасходовНалог,
	|Контрагент,
	|ПередаватьРасходыВДругуюОрганизацию,
	|ОрганизацияПолучательРасходов,
	|СчетПередачиРасходов,
	|ВключитьАмортизационнуюПремиюВСоставРасходов,
	|СтатьяРасходовАмортизационнойПремии,
	|АналитикаРасходовАмортизационнойПремии,
	|СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|ЕстьСобытияМодернизации,
	|СтоимостьДляВычисленияАмортизации,
	|ПервоначальнаяСтоимостьОтличается,
	|ВариантРаздельногоУчетаНДС,
	|НалогообложениеНДС,
	|ПрименениеЦелевогоФинансирования,
	|СчетУчетаЦФ,
	|СчетАмортизацииЦФ,
	|СтатьяДоходов,
	|АналитикаДоходов,
	|ТекущаяСтоимостьБУЦФ,
	|ТекущаяСтоимостьНУЦФ,
	|ТекущаяСтоимостьПРЦФ,
	|НакопленнаяАмортизацияБУЦФ,
	|НакопленнаяАмортизацияНУЦФ,
	|НакопленнаяАмортизацияПРЦФ,
	|ЕстьРезервПереоценки,
	|РезервПереоценкиСтоимости,
	|РезервПереоценкиАмортизации,
	|РасчетыМеждуОрганизациямиАрендатор,
	|СчетУчетаАрендатора,
	|ПодразделениеАрендатора,
	|ЗалоговаяСтоимость,
	|НакопленнаяАмортизацияНУДо2009,
	|СрокИспользованияНУДо2009,
	|КорректировкаСтоимостиАрендованногоИмуществаНУ,
	|НаправлениеДеятельности");
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ЭтаФорма);
	
	МножительРезерваПереоценки = ?(СтруктураДанных.ЕстьРезервПереоценки, ?(РезервПереоценкиЗнак, 1, -1), 0);
	СтруктураДанных.РезервПереоценкиСтоимости = МножительРезерваПереоценки * РезервПереоценкиСтоимостиСумма;
	СтруктураДанных.РезервПереоценкиАмортизации = МножительРезерваПереоценки * РезервПереоценкиАмортизацииСумма;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАмортизационнуюГруппу(КодПоОКОФ)
	
	Возврат РегистрыСведений.АмортизационныеГруппыОКОФ.ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации)
	
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборКодаПоОКОФ(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйОКОФ = КодПоОКОФ;
	СтараяАмортизационнаяГруппа = АмортизационнаяГруппа;
	
	НовыйКодОКОФ = ВыбранноеЗначение.ОКОФ;
	НоваяАмортизационнаяГруппа = ВыбранноеЗначение.АмортизационнаяГруппа;
	
	КодПоОКОФ = НовыйКодОКОФ;
	АмортизационнаяГруппа = НоваяАмортизационнаяГруппа;
	
	ЭтаФорма.Модифицированность =
		ЭтаФорма.Модифицированность
		Или СтарыйОКОФ <> НовыйКодОКОФ
		Или СтараяАмортизационнаяГруппа <> НоваяАмортизационнаяГруппа;
		
	ЗаполнитьПодсказкуКодОКОФ();
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПорядокУчетаБезАмортизации(ПорядокУчетаБУ, ПорядокУчетаНУ)
	
	Возврат ((ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается")
			Или ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету"))
		И (ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы")
			Или ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету")));
	
КонецФункции

&НаСервере
Процедура КодОКОФПриИзмененииНаСервере()

	АмортизационнаяГруппа = ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
	ЗаполнитьПодсказкуКодОКОФ();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкуКодОКОФ()

	ТекстПодсказки = НСтр("ru = 'Код по классификатору основных фондов';
							|en = 'Code by All-Russian Classifier of Fixed Assets'");
	
	Если ЗначениеЗаполнено(КодПоОКОФ) Тогда
		ТекстПодсказки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КодПоОКОФ, "Наименование");
	КонецЕсли; 
	
	Элементы.КодОКОФ.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораСтатейИАналитик()
	
	ПараметрыВыбораСтатейИАналитик = Новый Массив;
	
	// СтатьяРасходовАмортизации
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "";
	ПараметрыВыбора.Статья = "СтатьяРасходовАмортизации";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовАмортизации";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовАмортизации");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовАмортизации");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	// СтатьяРасходовНалог
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "";
	ПараметрыВыбора.Статья = "СтатьяРасходовНалог";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовНалог";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовНалог");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовНалог");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	// СтатьяРасходовАмортизационнойПремии
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "";
	ПараметрыВыбора.Статья = "СтатьяРасходовАмортизационнойПремии";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовАмортизационнойПремии";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовАмортизационнойПремии");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовАмортизационнойПремии");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	// СтатьяДоходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "";
	ПараметрыВыбора.Статья = "СтатьяДоходов";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиДоходов = Истина;
	ПараметрыВыбора.АналитикаДоходов = "АналитикаДоходов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяДоходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов.Добавить("АналитикаДоходов");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатейИАналитик;
	
КонецФункции

#КонецОбласти
