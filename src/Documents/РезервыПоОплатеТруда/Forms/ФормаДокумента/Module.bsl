#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

&НаКлиенте
Перем СтароеЗначениеФизическогоЛица;

&НаКлиенте
Перем СотрудникиПередУдалением;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем СотрудникиКРасчету Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект, Документы.РезервыПоОплатеТруда.ОписаниеПодписейДокумента());
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтотОбъект);
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		КлючиИдентификаторовЗаполнения = "Организация, Ответственный, МесяцРасчета";
		
		ЗначенияДляЗаполнения = Новый Структура(КлючиИдентификаторовЗаполнения, "Объект.Организация", "Объект.Ответственный", "Объект.МесяцНачисления");
		
		Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект"));
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	ПараметрыВыбораСтатейИАналитик = РезервыПоОплатеТрудаУП.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаполнитьПриОткрытии Тогда
		
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеФормыНаКлиенте", 0.1, Истина);
		ЗаполнитьПриОткрытии = Ложь;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, Не РассчитыватьДокументыПриРедактировании);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ВыбранноеЗначение.Количество() > 0
		И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОбработкаПодбораНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыПоказателиДокументаРезервыПоОплатеТруда" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Если Параметр.Количество() > 0 Тогда 
			ОбработатьИзменениеПоказателейНаСервере(Параметр);
			СотрудникиКРасчету.Очистить();
			РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
			ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
			РасчетЗарплатыРасширенныйКлиент.УстановитьЗначенияКонтролируемыхПолей(
				"Начисления",
				ДанныеСтроки,
				ЭтотОбъект["КонтролируемыеПоляНачисления"],
				СтарыеЗначенияКонтролируемыхПолей);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПараметрыВыбораСтатейИАналитик = РезервыПоОплатеТрудаУП.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтотОбъект, "ПередЗаписьюОкончание", Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		
		// Если документ проведен, то имитируем режим ПриЗаписиПерепроводить.
		Если Объект.Проведен И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			ПровестиДокументНаКлиенте();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект, Ложь);
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрыватьПослеЗаписи = Истина;
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_НачислениеЗарплаты", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезервПриИзменении(Элемент)
	
	Если РезервПредыдущий = Объект.Резерв Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Начисления.Количество() > 0 Или Объект.Взносы.Количество() > 0 Или Объект.РасчетРезервов.Количество() > 0
		Или Объект.ОценочныеОбязательстваПоСотрудникам.Количество() > 0 Или Объект.ОценочныеОбязательства.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Данные документа будут очищены.
		                         |Продолжить?';
		                         |en = 'Данные документа будут очищены.
		                         |Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("РезервПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		РезервПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОбработатьИзменениеОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбязательстваОтраженыВБухучетеПриИзменении(Элемент)
	
	Если Объект.ОбязательстваОтраженыВБухучете Тогда
		Объект.Бухгалтер = ПользователиКлиент.ТекущийПользователь();
	Иначе
		Объект.Бухгалтер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		РезервыПоОплатеТрудаКлиентРасширенный.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "Начисления", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "Начисления", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Начисление) Тогда
		ТекущиеДанные.Начисление = ПолучитьВидРасчета(ТекущиеДанные.ВидРасчетаРезерва);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидРасчетаРезерва) Тогда
		Возврат;
	КонецЕсли;
	РезервыПоОплатеТрудаКлиентРасширенный.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Начисления",
		,
		ТекущиеДанные.Сотрудник,
		ТекущиеДанные.Начисление,
		ТекущиеДанные.ВидРасчетаРезерва);
		
	ОписаниеТаблицы = ОписаниеТаблицыНачислений(ЭтотОбъект);
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалением = РасчетЗарплатыРасширенныйКлиент.ВыделенныеСотрудникиКоллекции(Объект.Начисления, Элементы.Начисления.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникиПередУдалением);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникиПередУдалением)
	
	РассчитатьСотрудника(СотрудникиПередУдалением, ОписаниеТаблицыНачислений(ЭтотОбъект));
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтотОбъект, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	ОписаниеТаблицы = ОписаниеТаблицыНачислений(ЭтотОбъект);
	ПриИзмененииСотрудника(Элемент, ОписаниеТаблицы.ИмяТаблицы);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицы, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаРезерваПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Начисления.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы.Начисление = ПолучитьВидРасчета(СтрокаТаблицы.ВидРасчетаРезерва);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений(ЭтотОбъект);
	РезервыПоОплатеТрудаКлиентРасширенный.ВводНачисленийНачислениеПриИзменении(ЭтотОбъект, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаРезерваОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзносы
&НаКлиенте
Процедура ВзносыПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "Взносы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "Взносы", ТекущиеДанные, НоваяСтрока, Копирование);
	Если ТекущиеДанные <> Неопределено Тогда
		СтароеЗначениеФизическогоЛица = ТекущиеДанные.ФизическоеЛицо;
	КонецЕсли;
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, "Взносы", ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиентРасширенный.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"Взносы",
		ТекущиеДанные.ФизическоеЛицо);
		
	ОписаниеТаблицы = ОписаниеТаблицыВзносов();
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПослеУдаления(Элемент)
	
	ВзносыПослеУдаленияНаСервере();
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыФизическоеЛицоПриИзменении(Элемент)
	ПриИзмененииФизическогоЛица(Элемент, "Взносы");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетРезервов

&НаКлиенте
Процедура РасчетРезервовПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "РасчетРезервов", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетРезервовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасчетРезервов.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "РасчетРезервов", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетРезервовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиентРасширенный.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"РасчетРезервов",
		,
		ТекущиеДанные.Сотрудник);
		
	ОписаниеТаблицы = ОписаниеТаблицыРасчетаРезервов();
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
	ТекущийСотрудник = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетРезервовПослеУдаления(Элемент)
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОценочныеОбязательстваПоСотрудникам

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "ОценочныеОбязательстваПоСотрудникам", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОценочныеОбязательстваПоСотрудникам.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "ОценочныеОбязательстваПоСотрудникам", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиентРасширенный.ДобавитьИзмененныеДанные(
		ИзмененныеДанные,
		"ОценочныеОбязательстваПоСотрудникам",
		,
		ТекущиеДанные.Сотрудник);
		
	ОписаниеТаблицы = ОписаниеТаблицыОценочныхОбязательствПоСотрудникам();
	Если НоваяСтрока Тогда
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ИмяТаблицы, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПоСотрудникамПослеУдаления(Элемент)
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	Если РассчитыватьДокументыПриРедактировании Тогда
		ОбновитьОтражениеВУчетеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОценочныеОбязательства

&НаКлиенте
Процедура ОценочныеОбязательстваПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "ОценочныеОбязательства", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ОценочныеОбязательства.ТекущиеДанные;
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтотОбъект, "ОценочныеОбязательства", ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(Элементы.ОценочныеОбязательства.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОценочныеОбязательстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ОписаниеТаблицы = ОписаниеТаблицыОценочныеОбязательства();
	РезервыПоОплатеТрудаКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтотОбъект, ОписаниеТаблицы);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Истина, Не РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйКлиент.ЗаполнитьДокументНачисленияЗарплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьССохранениемИсправлений(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУволенными(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыНаКлиенте(Новый Структура("ИмяПоказателяДопОтбора", "Уволен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПереведенными(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыНаКлиенте(Новый Структура("ИмяПоказателяДопОтбора", "Перемещен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПодборСотрудникаВФормеДокументаРезервыПоОплатеТруда");
	
	ВладелецОтбора = ЭтотОбъект;
	
	ПараметрыОткрытия = Новый Структура;
	Отборы = Новый Структура;
	Отборы.Вставить("ПоказыватьПодработки", Ложь);
	Отборы.Вставить("ПоказыватьДоговорниковГПХ", Ложь);
	
	Если ЭтоРезервОтпусков Тогда
		Отборы.Вставить("НачислениеЗарплатыВоеннослужащим", Ложь);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтотОбъект, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		ВладелецОтбора,
		Объект.Организация,
		Объект.Подразделение,
		Объект.МесяцНачисления, 
		КонецМесяца(Объект.МесяцНачисления),
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(Команда)
	
	ПараметрыФормы = ПолучитьПоказателиНаСервере();
	ОткрытьФорму("Документ.РезервыПоОплатеТруда.Форма.ГрупповоеЗаполнениеПоказателейДокументов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если ЕстьИсправленныеСтроки() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Документ содержит ручные исправления (выделены шрифтом). 
	                         |Очистить данные?';
	                         |en = 'Document contains manual changes (in bold).
	                         |Clear data?'");
							 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе 
		
		ОчиститьЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьТаблицыДокументаНаСервере();
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеФормы(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ЗакрыватьПослеЗаписи = Истина;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(ЭтотОбъект));
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(ЭтотОбъект));
	
	ИзменитьНачисленияПодробно(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПодробно(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыПодробно",
		"Пометка",
		Не Элементы.ВзносыПодробно.Пометка);
	
	РасчетЗарплатыРасширенныйВызовСервера.СохранитьНастройкуРежимаОтображенияПодробно(Объект.Ссылка, Элементы.ВзносыПодробно.Пометка, ОписаниеТаблицыВзносов());
	
	ИзменитьВзносыПодробно(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыВзносов());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтотОбъект, ОписаниеТаблицыВзносов());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасчетРезервовОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыРасчетаРезервов());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасчетРезервовОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтотОбъект, ОписаниеТаблицыРасчетаРезервов());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОценочныеОбязательстваПоСотрудникамОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтотОбъект, ОписаниеТаблицыОценочныхОбязательствПоСотрудникам());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОценочныеОбязательстваПоСотрудникамОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтотОбъект, ОписаниеТаблицыОценочныхОбязательствПоСотрудникам());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОценочныеОбязательстваОтменитьИсправление(Команда)
	ОценочныеОбязательстваОтменитьИсправлениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	ПересчитатьДокументНаКлиенте();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Подключаемые команды «Пересчитать сотрудника».

&НаКлиенте
Процедура Подключаемый_НачисленияПересчитатьСотрудника(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ПерерасчетСотрудникаВФормеДокументаНачислениеЗарплаты");
	
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтотОбъект, "Начисления", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтотОбъект, "Взносы", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры


#Область ПодключаемыеКомандыУдалитьСотрудника

&НаКлиенте
Процедура Подключаемый_НачисленияУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета


#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект, ДополнятьФорму = Истина)
	
	РезервПредыдущий = ТекущийОбъект.Резерв;
	
	РассчитыватьДокументыПриРедактировании = Константы.РассчитыватьДокументыПриРедактировании.Получить();
	
	РезервыРассчитываютсяАвтоматически = Истина;
	РезервыПоОплатеТрудаПереопределяемый.РезервыРассчитываютсяАвтоматически(РезервыРассчитываютсяАвтоматически);
	
	ИнициализацияФормы(ТекущийОбъект, ?(ЗначениеЗаполнено(ТекущийОбъект.Резерв), ДополнятьФорму, Ложь));
	
	ПроверитьИспользованиеОбмена();
	ОбновитьДоступностьЗарплатаОтраженаВБухучете();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ДополнитьФормуДокументаНачислениеОценочныхОбязательствПоОтпускам(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент = Истина)
	
	ЗаполнитьВидыОпераций();
	
	ПолучитьНастройкиРезерва();
	// Устанавливаем значения реквизитов формы.
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	УстановитьФункциональныеОпцииФормы();
	МаксимальноеКоличествоПоказателейНачисления = РезервыПоОплатеТрудаРасширенный.МаксимальноеКоличествоПоказателей();
	
	Если Не ФормаДополнена И ДополнятьФорму Тогда
		// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
		ДополнитьФорму(Истина);
	Иначе
		УстановитьКонтролируемыеПоля();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент = Истина)

	Если Не ФормаДополнена И ДополнятьФорму Тогда 
		// Досоздаем форму.
		ДополнитьФорму(Ложь);
		ДополнитьФорму();
	КонецЕсли;
	
	// чтение данных
	ДанныеВРеквизиты(ТекущийОбъект);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(ЭтотОбъект));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНачисления",
		"Видимость",
		ИспользоватьНачисление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВзносы",
		"Видимость",
		ИспользоватьВзносы);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаРасчетРезервов",
		"Видимость",
		ИспользоватьРасчет);
		
	ЗагрузитьНастройки();
	ИзменитьНачисленияПодробно(ЭтотОбъект);
	ИзменитьВзносыПодробно(ЭтотОбъект);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(НайденыИсправленияПриОткрытии);
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	// Команды
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СправкаРасчет",
		"Видимость",
		ЭтоНачисление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодборСотрудников",
		"Видимость",
		ЭтоНачисление
		Или ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьУволенными",
		"Видимость",
		ЭтоСписание
		Или ЭтоКорректировка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПереведенными",
		"Видимость",
		ЭтоСписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьССохранениемИсправлений",
		"Видимость",
		ЭтоНачисление
		Или ЭтоИнвентаризация);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПересчитатьДокумент",
		"Видимость",
		Не РассчитыватьДокументыПриРедактировании 
			И Не ЭтоКорректировка
			И Не ЭтоСписание);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаполнитьПоказатели",
		"Видимость",
		ЗначениеЗаполнено(Объект.Резерв)
			И ЕстьНастраиваемыеПоказатели);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодвалШапки",
		"Видимость",
		РезервыРассчитываютсяАвтоматически);
	
	// Страницы
	Если Не РезервыРассчитываютсяАвтоматически Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Страницы",
			"ТекущаяСтраница",
			Элементы.ГруппаОценочныеОбязательства);
	КонецЕсли;
	
	// Начисления
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияРезультатНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияГруппаНормативы",
		"Видимость",
		Не ЭтоИнвентаризация
		И ((ФормироватьРезервНУ И НормативныйМетодНУ) Или НормативныйМетодБУ)
		И Элементы.НачисленияПодробно.Пометка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияНормативОтчисленийВРезерв",
		"Видимость",
		Не ЭтоИнвентаризация
		И НормативныйМетодБУ
		И Элементы.НачисленияПодробно.Пометка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияНормативОтчисленийВРезервНУ",
		"Видимость",
		Не ЭтоИнвентаризация
		И (ФормироватьРезервНУ И НормативныйМетодНУ)
		И Элементы.НачисленияПодробно.Пометка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатыНачисления",
		"Видимость",
		Не ЭтоРезервОтпусков И Не НормативныйМетодБУ);
		
	// Взносы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыСуммаСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыСуммаФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаСтраховыхВзносов",
		"Видимость",
		Не НормативныйМетодБУ Или ЭтоИнвентаризация);
	
	Если ((ФормироватьРезервНУ И НормативныйМетодНУ) Или НормативныйМетодБУ) И Не ЭтоИнвентаризация Тогда
		ЗаголовокКолонки = НСтр("ru = '%';
								|en = '%'");
		ОтображатьГруппу = Истина;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'Страховые взносы (%)';
								|en = 'Insurance contributions (%)'");
		ОтображатьГруппу = Ложь;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаСтраховыхВзносов",
		"Заголовок",
		ЗаголовокКолонки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаСтраховыхВзносов",
		"ОтображатьВШапке",
		Не ОтображатьГруппу);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыГруппаСтавкаСтраховыеВзносы",
		"ОтображатьВШапке",
		ОтображатьГруппу);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаФССНесчастныеСлучаи",
		"Видимость",
		Не НормативныйМетодБУ Или ЭтоИнвентаризация);
		
	Если ((ФормироватьРезервНУ И НормативныйМетодНУ) Или НормативныйМетодБУ) И Не ЭтоИнвентаризация Тогда
		ЗаголовокКолонки = НСтр("ru = '%';
								|en = '%'");
		ОтображатьГруппу = Истина;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'ФСС НС и ПЗ (%)';
								|en = 'SSF industrial accidents and occupational diseases (%)'");
		ОтображатьГруппу = Ложь;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаФССНесчастныеСлучаи",
		"Заголовок",
		ЗаголовокКолонки);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыТекущаяСтавкаФССНесчастныеСлучаи",
		"ОтображатьВШапке",
		Не ОтображатьГруппу);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыГруппаСтавкаФССНесчастныеСлучаи",
		"ОтображатьВШапке",
		ОтображатьГруппу);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыСтраховыеВзносы",
		"Видимость",
		Не ЭтоИнвентаризация
		И ((ФормироватьРезервНУ И НормативныйМетодНУ) Или НормативныйМетодБУ));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыФССНесчастныеСлучаи",
		"Видимость",
		Не ЭтоИнвентаризация
		И ((ФормироватьРезервНУ И НормативныйМетодНУ) Или НормативныйМетодБУ));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыНормативОтчисленийВРезервСтраховыеВзносы",
		"Видимость",
		Не ЭтоИнвентаризация И НормативныйМетодБУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыНормативОтчисленийВРезервСтраховыеВзносыНУ",
		"Видимость",
		Не ЭтоИнвентаризация
		И (ФормироватьРезервНУ И НормативныйМетодНУ));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыНормативОтчисленийВРезервФССНесчастныеСлучаи",
		"Видимость",
		Не ЭтоИнвентаризация
		И НормативныйМетодБУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыНормативОтчисленийВРезервФССНесчастныеСлучаиНУ",
		"Видимость",
		Не ЭтоИнвентаризация
		И (ФормироватьРезервНУ И НормативныйМетодНУ));
		
	// Расчет резервов
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезерваОтпусковГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваИсчисленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваНакопленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваСтраховыхВзносовИсчисленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваСтраховыхВзносовНакопленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваФССНесчастныеСлучаиИсчисленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваФССНесчастныеСлучаиНакопленоНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасчетРезервовСуммаРезерваФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	// Обязательства по сотрудникам
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамАвтоКоманды",
		"Видимость",
		ЭтоНачисление Или ЭтоИнвентаризация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамСуммаРезерваНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамСуммаРезерваСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамСуммаРезерваФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваПоСотрудникамКорректировкаОбязательств",
		"Видимость",
		ЭтоКорректировка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияПодсказка",
		"Видимость",
		ЭтоКорректировка);
		
	// Обязательства итоговые
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваГруппаПоказателиУчета",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваСуммаРезерваНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваСуммаРезерваСтраховыхВзносовНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОценочныеОбязательстваСуммаРезерваФССНесчастныеСлучаиНУ",
		"Видимость",
		ФормироватьРезервНУ);
		
	// Статья доходов и аналитика
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПрочиеДоходы",
		"Видимость",
		ЭтоНачисление ИЛИ ЭтоИнвентаризация);
	
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.	
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФорму(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Истина);
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
		
		ДобавитьКомандуУдалитьСотрудника();
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура(
			"КонтролируемыеПоля, 
			|ДобавлятьЭлементыФормы, 
			|ДобавлятьРеквизитыФормы, 
			|ОтложенноеИзменение");
		ДополнительныеПараметры.КонтролируемыеПоля      = Неопределено;
		ДополнительныеПараметры.ДобавлятьЭлементыФормы  = ДобавлятьЭлементыФормы;
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы = ДобавлятьРеквизитыФормы;
		ДополнительныеПараметры.ОтложенноеИзменение     = ОтложенноеИзменение;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), "Начисления", "НачисленияАвтоКоманды", , , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
		ОписаниеТаблицыВзносов = ОписаниеТаблицыВзносов();
		ОписаниеТаблицыРасчетаРезервов = ОписаниеТаблицыРасчетаРезервов();
		ОписаниеТаблицыОценочныхОбязательствПоСотрудникам = ОписаниеТаблицыОценочныхОбязательствПоСотрудникам();
		ОписаниеТаблицыОценочныеОбязательства = ОписаниеТаблицыОценочныеОбязательства();
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(
			ЭтотОбъект, ОписаниеТаблицыВзносов, , "ВзносыАвтоКоманды", , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(
			ЭтотОбъект, ОписаниеТаблицыРасчетаРезервов, , "РасчетРезервовАвтоКоманды", , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(
			ЭтотОбъект, ОписаниеТаблицыОценочныхОбязательствПоСотрудникам, , "ОценочныеОбязательстваПоСотрудникамАвтоКоманды", , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(
			ЭтотОбъект, ОписаниеТаблицыОценочныеОбязательства, , "ОценочныеОбязательстваАвтоКоманды", , ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		Если ДобавлятьЭлементыФормы Тогда
			
			РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийУстановитьУсловноеОформление(ЭтотОбъект, ОписаниеТаблицыВзносов);
			РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийУстановитьУсловноеОформление(ЭтотОбъект, ОписаниеТаблицыРасчетаРезервов);
			РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийУстановитьУсловноеОформление(ЭтотОбъект, ОписаниеТаблицыОценочныхОбязательствПоСотрудникам);
			РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийУстановитьУсловноеОформление(ЭтотОбъект, ОписаниеТаблицыОценочныеОбязательства);
			
		КонецЕсли;
		
		Если НормативныйМетодБУ И Не ЭтоИнвентаризация Тогда
			РезервыПоОплатеТрудаФормыРасширенный.ВводНачисленийУдалитьЭлементыФормы(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), ОтложенноеИзменение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеВидаРасчета()
	
	ВидРасчетаРезерваМассив = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "ВидРасчетаРезерва", Истина);
	
	ЗначениеРеквизитаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидРасчетаРезерваМассив, "ВидРасчета");
	
	ВидыНачисленийМассив = Новый Массив;
	ВидыОтпусковМассив   = Новый Массив;
	
	Для Каждого ЗначениеМассива Из ВидРасчетаРезерваМассив Цикл
		ВидРасчета = ЗначениеРеквизитаРасчетов[ЗначениеМассива];
		Если ТипЗнч(ВидРасчета) = Тип("СправочникСсылка.ВидыОтпусков") Тогда
			ВидыОтпусковМассив.Добавить(ЗначениеМассива);
		Иначе
			ВидыНачисленийМассив.Добавить(ЗначениеМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыНачисленийМассив.Количество() <> 0 Тогда
		СоответствиеЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыНачисленийМассив, "ВидРасчета");
		Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
			СтрокаТаблицы.Начисление = СоответствиеЗначений[СтрокаТаблицы.ВидРасчетаРезерва];
		КонецЦикла;
	КонецЕсли;
	
	Если ВидыОтпусковМассив.Количество() <> 0 Тогда
		
		ВидРасчетаОсновногоОтпуска = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
		
		Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
			СтрокаТаблицы.Начисление = ВидРасчетаОсновногоОтпуска;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета(ИмяТаблицы = "")
	
	Если ИмяТаблицы = "" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.Взносы Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.РасчетРезервов Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.ОценочныеОбязательстваПоСотрудникам Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Объект.ОценочныеОбязательства Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
			ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВСтроке(ТекущиеДанные)
	
	ТекущиеДанные.НадписьБУ = НСтр("ru = 'БУ:';
									|en = 'AC:'");
	ТекущиеДанные.НадписьНУ = НСтр("ru = 'НУ:';
									|en = 'TA:'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы() Экспорт
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Резервы по оплате труда: %1';
									|en = 'Payroll funds: %1'"), Строка(Объект.ВидОперации));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = ' %1 от %2';
				|en = ' %1 dated %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)';
												|en = ' (create)'");
	КонецЕсли;
	
	ЭтотОбъект.Заголовок = ТекстЗаголовка;

КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ОбновитьДоступностьЗарплатаОтраженаВБухучете()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтраженияВБухУчете",
		"Видимость",
		ОбменИспользуется);
	
	Если ОбменИспользуется Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры") Тогда
			ТолькоПросмотр = Объект.ОбязательстваОтраженыВБухучете;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ОбязательстваОтраженыВБухучете",
				"ТолькоПросмотр",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Бухгалтер",
				"ТолькоПросмотр",
				Истина);
		Иначе
			
			ПользователюРазрешеноФормированиеПроводок = ПравоДоступа("Редактирование", Метаданные.Документы.РезервыПоОплатеТруда);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ОбязательстваОтраженыВБухучете",
				"ТолькоПросмотр",
				Не ПользователюРазрешеноФормированиеПроводок);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"Бухгалтер",
				"ТолькоПросмотр",
				Не ПользователюРазрешеноФормированиеПроводок);
			
			Если НЕ ПользователюРазрешеноФормированиеПроводок Тогда
				ТолькоПросмотр = Объект.ОбязательстваОтраженыВБухучете;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеОбмена()
	
	ОбменИспользуется = Ложь;
	
	РезервыПоОплатеТруда.ПроверитьИспользованиеОбмена(ОбменИспользуется, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОпераций()
	
	ЭтоНачисление     = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление;
	ЭтоИнвентаризация = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация;
	ЭтоКорректировка  = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка;
	ЭтоСписание       = Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание;
	
	ИспользоватьРасчет     = ЭтоНачисление Или ЭтоИнвентаризация;
	ИспользоватьВзносы     = ИспользоватьРасчет;
	ИспользоватьНачисление = ИспользоватьРасчет;
	
КонецПроцедуры

&НаСервере
Процедура ВзносыПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

// Месяц начисления
&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСотрудника(Элемент, ИмяТаблицы)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
		УдалитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ИмяТаблицы, Идентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		ТекущиеДанные.ФизическоеЛицо = СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(ТекущиеДанные.Сотрудник)[0];
		ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ИмяТаблицы, Идентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФизическогоЛица(Элемент, ИмяТаблицы) Экспорт
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(СтароеЗначениеФизическогоЛица) Тогда
		УдалитьИдентификаторСтрокиФизическогоЛица(СтароеЗначениеФизическогоЛица, ИмяТаблицы, Идентификатор);
	КонецЕсли;
	ДобавитьИдентификаторСтрокиФизическогоЛица(ТекущиеДанные.ФизическоеЛицо, ИмяТаблицы, Идентификатор); 
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	Если ЭтоНачисление Или ЭтоИнвентаризация Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		ИнициализацияФормы(ТекущийОбъект, ЗначениеЗаполнено(Объект.Резерв));
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеВыполнено = Ложь;
	
КонецПроцедуры

// Заполнение и расчет начислений.

#Область ПересчетПриРедактировании

&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчетаРезервов(СотрудникиФизическиеЛица, НастройкаРезервов, МенеджерРасчета)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	МенеджерРасчета.НастройкиРасчета.Сотрудники             = СотрудникиФизическиеЛица;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = ИспользоватьНачисление;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы     = ИспользоватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РасчетРезервов         = Истина;
	МенеджерРасчета.НастройкиРасчета.НастройкаРезервов      = НастройкаРезервов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчетаЗарплаты(СотрудникиФизическиеЛица, НастройкаРезервов, МенеджерРасчета)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	МенеджерРасчета.НастройкиРасчета.Сотрудники             = СотрудникиФизическиеЛица;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = ИспользоватьНачисление;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы     = Ложь;
	МенеджерРасчета.НастройкиРасчета.РасчетРезервов         = Истина;
	МенеджерРасчета.НастройкиРасчета.НастройкаРезервов      = НастройкаРезервов;
	
КонецПроцедуры

#Область ПересчетСотрудникаПоТаблицеНачисления

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте   
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Иначе
		Сотрудники = Сотрудник;
	КонецЕсли;
	
	МассивСотрудниковКРасчету = Новый Массив;
	Для Каждого СотрудникРасчета Из Сотрудники Цикл
		Если НЕ РасчетЗарплатыРасширенныйКлиент.ДобавитьСотрудникаКРасчету(ЭтотОбъект, СотрудникРасчета, ОписаниеТаблицы) Тогда
			МассивСотрудниковКРасчету.Добавить(СотрудникРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСотрудниковКРасчету.Количество() > 0 Тогда
		РассчитатьСотрудникаНаСервере(МассивСотрудниковКРасчету, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено)
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = СотрудникиФизическиеЛицаОтбор(Сотрудник);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокРасчета = 0;
	Если ЗначениеЗаполнено(ОписаниеТаблицы) Тогда
		Если ОписаниеТаблицы.Свойство("ПутьКДанным") Тогда
			РедактируемаяТаблица = СтрЗаменить(ОписаниеТаблицы.ПутьКДанным, "Объект.","");
			Если РедактируемаяТаблица = "Начисления" Или РедактируемаяТаблица = "Взносы" Тогда
				ПорядокРасчета = 1;
			ИначеЕсли РедактируемаяТаблица = "РасчетРезервов" Тогда
				ПорядокРасчета = 2;
			ИначеЕсли РедактируемаяТаблица = "ОценочныеОбязательстваПоСотрудникам" Тогда
				ПорядокРасчета = 3;
			ИначеЕсли РедактируемаяТаблица = "ОценочныеОбязательства" Тогда
				ПорядокРасчета = 4;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
	
	МенеджерРасчетаРезервовПоОплатеТруда = РезервыПоОплатеТрудаРасширенный.СоздатьМенеджерРасчетаРезервовПоОплатеТруда(Объект.МесяцНачисления, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчетаРезервов(Отбор.СотрудникиКРасчету, НастройкаРезервов, МенеджерРасчетаРезервовПоОплатеТруда);
	РезервыПоОплатеТрудаФормыРасширенный.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчетаРезервовПоОплатеТруда, ИзмененныеДанные, ПорядокРасчета <= 1);
	
	СотрудникиКРасчетуОтбор = Отбор.СотрудникиКРасчету;
	ПозицииВставки = Новый Структура;
	
	РассчитатьСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчетаРезервовПоОплатеТруда, Отбор, ПозицииВставки);
	
	Если ЭтоНачисление Или ЭтоИнвентаризация Тогда
		
		МенеджерРасчетаЗарплаты = РезервыПоОплатеТрудаРасширенный.СоздатьМенеджерРасчетаЗарплаты(Объект.МесяцНачисления, Объект.Организация);
		ЗаполнитьНастройкиМенеджераРасчетаЗарплаты(Отбор.СотрудникиКРасчету, НастройкаРезервов, МенеджерРасчетаЗарплаты);
		Если ПорядокРасчета <= 1 Тогда
			РезервыПоОплатеТрудаФормыРасширенный.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчетаЗарплаты, ИзмененныеДанные);
		КонецЕсли;
		МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
		
		ЗаполнитьЗначенияСвойств(МенеджерРасчетаЗарплаты, МенеджерРасчетаРезервовПоОплатеТруда, , "НастройкиРасчета");
		
		Если Не НастройкаРезервов.НормативныйМетодБУ Или ЭтоИнвентаризация Тогда
			МенеджерРасчетаЗарплаты.ЗаполнитьБазовыйПериодСтрокНачислений();
			МенеджерРасчетаЗарплаты.РассчитатьЗарплату();
			МенеджерРасчетаРезервовПоОплатеТруда.Начисления = МенеджерРасчетаЗарплаты.Начисления;
		Иначе
			МенеджерРасчетаРезервовПоОплатеТруда.Начисления = МенеджерРасчетаЗарплаты.Зарплата.Начисления;
		КонецЕсли;
		МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
		МенеджерРасчетаРезервовПоОплатеТруда.Зарплата   = МенеджерРасчетаЗарплаты.Зарплата;
		МенеджерРасчетаРезервовПоОплатеТруда.ЗаполнитьПоказателиРасчетаДляНормативногоМетода();
		
		Если ПорядокРасчета <= 1 Тогда // требуется расчет резерва по формуле
			МенеджерРасчетаРезервовПоОплатеТруда.РассчитатьРезервы();
		КонецЕсли;
		
		Если ПорядокРасчета <= 2 Тогда // требуется пересчет сумм зачитываемого резерва
			РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
				Объект.Организация,
				Объект.Резерв,
				Объект.МесяцНачисления,
				МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
				Объект.ВидОперации);
				
			РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
				Объект.Организация,
				Объект.Резерв,
				Объект.МесяцНачисления,
				МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
				Объект.ВидОперации);
		КонецЕсли;
		
		ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
		
		ДанныеЗаполнения.Начисления
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Начисления;
		ДанныеЗаполнения.Взносы
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.РасчетРезервов;
		ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательстваПоСотрудникам;
		РезервыПоОплатеТруда.СвернутьТаблицуРасчетаРезервов(ДанныеЗаполнения.РасчетРезервов);
		ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки, СотрудникиКРасчетуОтбор, НЕ НормативныйМетодБУ Или ЭтоИнвентаризация);
		
	Иначе
		
		РассчитатьОценочныеОбязательства(МенеджерРасчетаРезервовПоОплатеТруда, ДанныеЗаполнения);
		
	КонецЕсли;
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(ЭтотОбъект);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтотОбъект, МассивОписанийТаблицФормы, СотрудникиКРасчетуОтбор);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	Если НЕ НормативныйМетодБУ Тогда
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеРасчетаСохраняемогоЗаработка(ЭтотОбъект);
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы, СотрудникиКРасчетуОтбор);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОценочныеОбязательства(МенеджерРасчетаРезервовПоОплатеТруда = Неопределено, ДанныеЗаполнения = Неопределено)
	
	Если МенеджерРасчетаРезервовПоОплатеТруда = Неопределено Тогда
		НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
		МенеджерРасчетаРезервовПоОплатеТруда = РезервыПоОплатеТрудаРасширенный.СоздатьМенеджерРасчетаРезервовПоОплатеТруда(Объект.МесяцНачисления, Объект.Организация);
		ЗаполнитьНастройкиМенеджераРасчетаРезервов(Новый Массив, НастройкаРезервов, МенеджерРасчетаРезервовПоОплатеТруда);
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	КонецЕсли;
	
	РассчитанныеДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчетаРезервовПоОплатеТруда);
	РезервыПоОплатеТруда.РассчитатьСуммыРезерва(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
		Объект.Организация,
		Объект.Резерв,
		Объект.МесяцНачисления,
		МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
		Объект.ВидОперации);
	ДанныеЗаполнения.ОценочныеОбязательства
		= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательства;
	РассчитанныеДанныеДляЗаполненияВДанныеФормы(Объект, ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, ПозицииВставки)
	
	//Начисления
	РезервыПоОплатеТрудаФормыРасширенный.НачисленияВДанныеМенеджераРасчета(
		Объект.Начисления,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
	
	//Взносы
	РезервыПоОплатеТрудаФормыРасширенный.ВзносыВДанныеМенеджераРасчета(
		Объект.Взносы,
		МенеджерРасчета,
		Отбор,
		ПозицииВставки);
	
	//Расчет резервов
	РезервыПоОплатеТрудаФормыРасширенный.РасчетРезервовВДанныеМенеджераРасчета(
		Объект.РасчетРезервов,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
		
	//Оценочные обязательства по сотрудникам
	РезервыПоОплатеТрудаФормыРасширенный.ОценочныеОбязательстваПоСотрудникамВДанныеМенеджераРасчета(
		Объект.ОценочныеОбязательстваПоСотрудникам,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетСотрудникаПоТаблицеВзносы

#КонецОбласти

#Область ПересчетСотрудникаПоТаблицеРасчетРезервов

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте   
Процедура РассчитатьРасчетРезервовСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Иначе
		Сотрудники = Сотрудник;
	КонецЕсли;
	
	МассивСотрудниковКРасчету = Новый Массив;
	Для Каждого СотрудникРасчета Из Сотрудники Цикл
		Если НЕ РасчетЗарплатыРасширенныйКлиент.ДобавитьСотрудникаКРасчету(ЭтотОбъект, СотрудникРасчета, ОписаниеТаблицы) Тогда
			МассивСотрудниковКРасчету.Добавить(СотрудникРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСотрудниковКРасчету.Количество() > 0 Тогда
		РассчитатьРасчетРезервовСотрудникаНаСервере(МассивСотрудниковКРасчету, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасчетРезервовСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено)
	
	Отбор = СотрудникиФизическиеЛицаОтбор(Сотрудник);
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
	
	МенеджерРасчетаРезервовПоОплатеТруда = РезервыПоОплатеТрудаРасширенный.СоздатьМенеджерРасчетаРезервовПоОплатеТруда(Объект.МесяцНачисления, Объект.Организация);
	ЗаполнитьНастройкиМенеджераРасчетаРезервов(Отбор.СотрудникиКРасчету, НастройкаРезервов, МенеджерРасчетаРезервовПоОплатеТруда);
	РезервыПоОплатеТрудаФормыРасширенный.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчетаРезервовПоОплатеТруда, ИзмененныеДанные);
	
	СотрудникиКРасчетуОтбор = Отбор.СотрудникиКРасчету;
	ПозицииВставки = Новый Структура;
	РассчитатьРасчетРезервовСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчетаРезервовПоОплатеТруда, Отбор, ПозицииВставки);
	
	РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
		Объект.Организация,
		Объект.Резерв,
		Объект.МесяцНачисления,
		МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
		Объект.ВидОперации);
		
	РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
		Объект.Организация,
		Объект.Резерв,
		Объект.МесяцНачисления,
		МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
		Объект.ВидОперации);
	
	ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	ДанныеЗаполнения.РасчетРезервов
		= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.РасчетРезервов;
	ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
		= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательстваПоСотрудникам;
	РезервыПоОплатеТруда.СвернутьТаблицуРасчетаРезервов(ДанныеЗаполнения.РасчетРезервов);
	ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки, СотрудникиКРасчетуОтбор, НЕ НормативныйМетодБУ Или ЭтоИнвентаризация);
	
	РассчитатьОценочныеОбязательства(МенеджерРасчетаРезервовПоОплатеТруда, ДанныеЗаполнения);
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(ЭтотОбъект);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтотОбъект, МассивОписанийТаблицФормы, СотрудникиКРасчетуОтбор);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	Если НЕ НормативныйМетодБУ Или ЭтоИнвентаризация Тогда
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеРасчетаСохраняемогоЗаработка(ЭтотОбъект);
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы, СотрудникиКРасчетуОтбор);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРасчетРезервовСотрудникаДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Отбор, ПозицииВставки)
	
	//Расчет резервов
	РезервыПоОплатеТрудаФормыРасширенный.РасчетРезервовВДанныеМенеджераРасчета(
		Объект.РасчетРезервов,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
		
	//Оценочные обязательства по сотрудникам
	РезервыПоОплатеТрудаФормыРасширенный.ОценочныеОбязательстваПоСотрудникамВДанныеМенеджераРасчета(
		Объект.ОценочныеОбязательстваПоСотрудникам,
		МенеджерРасчета,
		Объект.Организация,
		Отбор,
		ПозицииВставки);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура РассчитанныеДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета)
	
	//Оценочные обязательства
	МенеджерРасчета.Зарплата.ОценочныеОбязательстваПоСотрудникам = Объект.ОценочныеОбязательстваПоСотрудникам.Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура ОценочныеОбязательстваОтменитьИсправлениеНаСервере()
	
	РассчитатьОценочныеОбязательства();
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки = Неопределено, Сотрудники = Неопределено, ЗаполнятьПоказатели)
	
	//Начисления
	Если Сотрудники <> Неопределено 
		И Сотрудники.Количество() = 1 Тогда
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Объект.Организация, Объект.МесяцНачисления, Ложь);
	Иначе
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Объект.Организация, Объект.МесяцНачисления, Истина);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление Тогда
	
		РезервыПоОплатеТрудаФормы.РасчетРезервовНачисленияВДанныеФормы(Объект.Начисления,
			ДанныеЗаполнения.Начисления,
			Объект.Организация,
			Объект.ВидОперации,
			ПозицииВставки,
			ЗаполнятьПоказатели);
		
		//Взносы
		РезервыПоОплатеТрудаФормы.РасчетРезервовВзносыВДанныеФормы(Объект.Взносы,
			ДанныеЗаполнения.Взносы,
			ПозицииВставки);
			
	КонецЕсли;

	// Расчет резервов
	РезервыПоОплатеТрудаФормы.РасчетРезервовРасчетВДанныеФормы(Объект.РасчетРезервов,
		ДанныеЗаполнения.РасчетРезервов,
		ПозицииВставки);
	
	//Оценочные обязательства по сотрудникам
	РезервыПоОплатеТрудаФормы.ОценочныеОбязательстваПоСотрудникамВДанныеФормы(Объект.ОценочныеОбязательстваПоСотрудникам,
		ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам,
		ПозицииВставки);
	
	//Оценочные обязательства
	Дополнять = ЗначениеЗаполнено(ПозицииВставки);
	РезервыПоОплатеТрудаФормы.ОценочныеОбязательстваВДанныеФормы(Объект.ОценочныеОбязательства,
		?(Дополнять, Объект.ОценочныеОбязательстваПоСотрудникам.Выгрузить(), ДанныеЗаполнения.ОценочныеОбязательства),
		Не Дополнять);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитанныеДанныеДляЗаполненияВДанныеФормы(Объект, ДанныеЗаполнения)
	
	//Оценочные обязательства
	РезервыПоОплатеТрудаФормы.ОценочныеОбязательстваВДанныеФормы(Объект.ОценочныеОбязательства,
		ДанныеЗаполнения.ОценочныеОбязательства);
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Организация, МесяцНачисления, ИспользоватьСортировкуПоУмолчанию)
	РезервыПоОплатеТруда.СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Организация, МесяцНачисления, ИспользоватьСортировкуПоУмолчанию);
КонецПроцедуры	

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	ПерезаполнитьДанныеФормыНаКлиенте(Сотрудники, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыНаКлиенте(ДопПараметрыОтбора = Неопределено) Экспорт
	
	УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнениеДокументаРезервыПоОплатеТруда",,Ложь);
	
	Результат = РезультатЗаполненияВДлительнойОперации(ДопПараметрыОтбора);
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		Если ЗначениеЗаполнено(УИДЗамера) Тогда
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			УИДЗамера = Неопределено;
		КонецЕсли;
		ОповеститьОбИзмененииОбъекта();
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект);
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, РассчитыватьДокументыПриРедактировании);
	
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДанныеФормыНаКлиенте(Знач Сотрудники = Неопределено, СохранятьИсправления = Истина) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудники <> Неопределено И ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(Сотрудники, СохранятьИсправления, СотрудникиКРасчету);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект, Сотрудники);
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьДанныеФормыНаСервере(Сотрудники = Неопределено, СохранятьИсправления = Истина, СотрудникиКРасчету = Неопределено)
	
	ИспользоватьДлительнуюОперацию = Истина;
	Если Сотрудники <> Неопределено Тогда
		// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Или Сотрудники.Количество() < 10 Тогда 
			ИспользоватьДлительнуюОперацию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокСотрудников = Неопределено;
	Если Сотрудники <> Неопределено Тогда
		СписокСотрудников = СотрудникиДляРасчета(Сотрудники);
	КонецЕсли;

	Результат = РезервыПоОплатеТрудаРасширенный.ПерезаполнитьДанныеФормы(
		ЭтотОбъект,
		ОписаниеДокумента(ЭтотОбъект),
		СписокСотрудников,
		СохранятьИсправления,
		ИспользоватьДлительнуюОперацию);
	
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСотрудника(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля, СохранятьИсправления = Истина) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;		

	ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "Объект." + ИмяТаблицы);
	
	ФизическиеЛицаСотрудников = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		
		ПерерассчитываемаяСтрока = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		Сотрудник = ПерерассчитываемаяСтрока[ВедущееПоле];
		Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ФизическиеЛицаСотрудников.Добавить(СотрудникиКлиентСерверПовтИсп.ФизическиеЛицаСотрудников(Сотрудник)[0]);
		Иначе
			ФизическиеЛицаСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФизическиеЛицаСотрудников);
	Сотрудники = Новый Массив;
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	СодержимоеДокумента = СодержимоеСотрудниковДокумента(ФизическиеЛицаСотрудников, Сотрудники, ТипВедущегоПоля);
	
	СтруктураПараметров = РезервыПоОплатеТрудаКлиентСерверРасширенный.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.Организация                      = Объект.Организация;
	СтруктураПараметров.ДокументСсылка                   = Объект.Ссылка;
	СтруктураПараметров.Подразделение                    = Объект.Подразделение;
	СтруктураПараметров.МесяцНачисления                  = Объект.МесяцНачисления;
	СтруктураПараметров.ДатаВыплаты                      = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект.МесяцНачисления);
	СтруктураПараметров.Сотрудники                       = Сотрудники;
	СтруктураПараметров.ФизическиеЛица                   = ФизическиеЛицаСотрудников;
	СтруктураПараметров.ОкончаниеПериода                 = КонецМесяца(Объект.МесяцНачисления);
	СтруктураПараметров.РежимНачисления                  = ПредопределенноеЗначение("Перечисление.РежимНачисленияЗарплаты.ОкончательныйРасчет");
	СтруктураПараметров.Резерв                           = Объект.Резерв;
	СтруктураПараметров.ВидОперации                      = Объект.ВидОперации;
	СтруктураПараметров.ОписаниеДокумента                = ОписаниеДокумента;
	СтруктураПараметров.СохранятьИсправления             = СохранятьИсправления;
	СтруктураПараметров.СодержимоеДокумента              = СодержимоеДокумента;
	СтруктураПараметров.ПозицииВставки                   = Неопределено;
	
	Результат = ПересчитатьСотрудникаНаСервере(СтруктураПараметров, УникальныйИдентификатор, СохранятьИсправления);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
		
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте();	
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект);
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		ПересчетСотрудникаВДлительнойОперации = Истина;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСотрудниковКРасчету(Сотрудники, ФизическиеЛица, Организация)
	
	СотрудникиФизическихЛиц = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(ФизическиеЛица, Организация);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиФизическихЛиц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПересчитатьСотрудникаНаСервере(Знач СтруктураПараметров, УникальныйИдентификатор, СохранятьИсправления)
	
	ИспользоватьДлительнуюОперацию = Истина;
	// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
	Если ТипЗнч(СтруктураПараметров.Сотрудники) <> Тип("Массив") Или СтруктураПараметров.Сотрудники.Количество() < 10 Тогда 
		ИспользоватьДлительнуюОперацию = Ложь;
	КонецЕсли;
	
	СтруктураПараметров.КонтролируемыеПоля = КонтролируемыеПоля();
	
	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		РезервыПоОплатеТрудаРасширенный.ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Резервы по оплате труда""';
								|en = 'Fill the ""Payroll funds"" document'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"РезервыПоОплатеТрудаРасширенный.ПодготовитьДанныеДляПерезаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
			
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтрокаТаблицыСодержимогоДокумента(ТабличнаяЧасть, Идентификатор, СтруктураТаблицДокумента, ИмяТаблицы)
	
	СодержимоеДокумента = СтруктураТаблицДокумента.СодержимоеДокумента;
	ШаблонСтрокТаблиц = СтруктураТаблицДокумента.ШаблонСтрокТаблиц;
	
	СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДанныхПоСотрудникам(СодержимоеДокумента[ИмяТаблицы], ШаблонСтрокТаблиц[ИмяТаблицы]);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РезервыПоОплатеТрудаФормыРасширенный.ДополнитьСтрокуРасчета(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации(ДопПараметрыОтбора = Неопределено)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ОчиститьТаблицыДокумента(ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект));
	
	СтруктураПараметров = РезервыПоОплатеТрудаКлиентСерверРасширенный.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	СтруктураПараметров.Организация                      = Объект.Организация;
	СтруктураПараметров.ДокументСсылка                   = Объект.Ссылка;
	СтруктураПараметров.Подразделение                    = Объект.Подразделение;
	СтруктураПараметров.МесяцНачисления                  = Объект.МесяцНачисления;
	СтруктураПараметров.ОкончаниеПериода                 = КонецМесяца(Объект.МесяцНачисления);
	СтруктураПараметров.РежимНачисления                  = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	СтруктураПараметров.Резерв                           = Объект.Резерв;
	СтруктураПараметров.ВидОперации                      = Объект.ВидОперации;
	СтруктураПараметров.ДатаВыплаты                      = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект.МесяцНачисления);
	СтруктураПараметров.ИспользоватьВоеннуюСлужбу        = РезервыПоОплатеТрудаРасширенный.УчитыватьВоеннуюСлужбу(Объект.Организация, Объект.Резерв);
	СтруктураПараметров.ДопПараметрыОтбора               = ДопПараметрыОтбора;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Резервы по оплате труда""';
								|en = 'Fill the ""Payroll funds"" document'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.РезервыПоОплатеТруда.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СотрудникиДляРасчета(Сотрудники)
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		Возврат Сотрудники;
	КонецЕсли;
	
	СотрудникиДокумента = СотрудникиДокумента();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Сотрудники.ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Ссылка В(&Сотрудники)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	               |		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Ссылка В(&Сотрудники)";
				   
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");			   
	
КонецФункции

&НаСервере
Функция СотрудникиФизическиеЛицаОтбор(Сотрудники)
	
	СотрудникиДокумента = СотрудникиДокумента();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&СотрудникиДокумента)
			|	И Сотрудники.ФизическоеЛицо В(&Сотрудники)";
			
		СотрудникиФизическиеЛица = Запрос.Выполнить().Выбрать();
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
			ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			ФизическиеЛица = Сотрудники;
		КонецЕсли;
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
			|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
			|			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТФизическиеЛица.ФизическоеЛицо
			|ИЗ
			|	ВТФизическиеЛица КАК ВТФизическиеЛица";
			
		Результат = Запрос.ВыполнитьПакет();
		ФизическиеЛица = Результат[2].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		СотрудникиФизическиеЛица = Результат[1].Выбрать();
		
	КонецЕсли;
	
	Отбор = Новый Структура("СотрудникиКРасчету, ФизическиеЛицаСотрудников, ФизическиеЛицаОтбор, ФизическиеЛица");
	Отбор.ФизическиеЛица = ФизическиеЛица;
	Отбор.ФизическиеЛицаСотрудников = Новый Соответствие;
	Отбор.ФизическиеЛицаОтбор = Новый Соответствие;
	Отбор.СотрудникиКРасчету = Новый Массив;
	
	Пока СотрудникиФизическиеЛица.Следующий() Цикл
		Отбор.ФизическиеЛицаСотрудников.Вставить(СотрудникиФизическиеЛица.Сотрудник, СотрудникиФизическиеЛица.ФизическоеЛицо);
		Отбор.СотрудникиКРасчету.Добавить(СотрудникиФизическиеЛица.Сотрудник);
	КонецЦикла;
	
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		Отбор.ФизическиеЛицаОтбор.Вставить(ФизическоеЛицо, Истина)
	КонецЦикла; 
	
	Возврат Отбор;
	
КонецФункции

&НаСервере
Функция СотрудникиДокумента()
	
	СотрудникиДокумента = Новый Массив;
	
	ОписанияТаблиц = ОписанияТаблицНачислений();
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОбщегоНазначения.ВыгрузитьКолонку(Объект[ОписаниеТаблицы.ИмяТаблицы], ОписаниеТаблицы.ИмяРеквизитаСотрудник, Истина));
	КонецЦикла;
	
	Возврат СотрудникиДокумента;
	
КонецФункции

&НаСервере
Функция ПолучитьВидРасчета(ВидРасчетаРезерва)
	
	ВидРасчета = РезервыПоОплатеТрудаРасширенный.НачислениеВидаРасчетаРезерва(ВидРасчетаРезерва);
	
	Возврат ВидРасчета;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	МассивЗначений = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.Начисления, "ВидРасчетаРезерва", Истина);
	ПоказателиВидаРасчетаРезервов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗначений, "ИспользоватьСобственнуюФормулуРасчета, НазначениеПоказателя, ЭтоРасчетОтпуска");
	
	МассивОбщихПоказателей = Новый Массив;
	
	ТаблицаПоказателейПодразделений = Новый ТаблицаЗначений;
	ТаблицаПоказателейПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаПоказателейПодразделений.Колонки.Добавить("Показатель");
	ТаблицаПоказателейПодразделений.Колонки.Добавить("Точность");
	
	ТаблицаПоказателейСотрудников = Новый ТаблицаЗначений;
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Сотрудник");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Показатель");
	ТаблицаПоказателейСотрудников.Колонки.Добавить("Точность");
	
	Для Каждого СтрокаТаблицы ИЗ Объект.Начисления Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчетаРезерва) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПоказателиВидаРасчетаРезервов[СтрокаТаблицы.ВидРасчетаРезерва].ИспользоватьСобственнуюФормулуРасчета
			И Не ЭтоИнвентаризация Тогда
			ВидРасчета = СтрокаТаблицы.ВидРасчетаРезерва;
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		ИначеЕсли ПоказателиВидаРасчетаРезервов[СтрокаТаблицы.ВидРасчетаРезерва].ЭтоРасчетОтпуска Тогда
			ВидРасчета = СтрокаТаблицы.ВидРасчетаРезерва;
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервовОтпуск(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидРасчета));
		Иначе
			ВидРасчета = СтрокаТаблицы.Начисление;
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		КонецЕсли;
		
		НомерПоказателя = 0;
		ВидРасчетаИнфо = ВидыРасчетаИнфо[ВидРасчета];
		Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			НомерПоказателя = НомерПоказателя + 1;
			
				Если ОписаниеПоказателя.ВводитсяНепосредственноПриРасчете
					Или ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				
				НазначениеПоказателя = ПоказателиВидаРасчетаРезервов[СтрокаТаблицы.ВидРасчетаРезерва].НазначениеПоказателя;
				
				ЗначениеПоказателя = СтрокаТаблицы["Значение" + НомерПоказателя];
				
				Если НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации Тогда
					МассивОбщихПоказателей.Добавить(ОписаниеПоказателя.Показатель);
				ИначеЕсли НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПодразделения Тогда
					НоваяСтрока = ТаблицаПоказателейПодразделений.Добавить();
					НоваяСтрока.Подразделение = СтрокаТаблицы.Подразделение;
					НоваяСтрока.Показатель    = ОписаниеПоказателя.Показатель;
					НоваяСтрока.Точность      = ОписаниеПоказателя.Точность;
				ИначеЕсли НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПозицииШтатногоРасписания Тогда
					НоваяСтрока = ТаблицаПоказателейСотрудников.Добавить();
					НоваяСтрока.Сотрудник     = СтрокаТаблицы.Сотрудник;
					НоваяСтрока.Показатель    = ОписаниеПоказателя.Показатель;
					НоваяСтрока.Точность      = ОписаниеПоказателя.Точность;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивОбщихПоказателей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбщихПоказателей);
	АдресОбщихПоказателей = ПоместитьВоВременноеХранилище(МассивОбщихПоказателей, Новый УникальныйИдентификатор);
	
	ТаблицаПоказателейПодразделений.Свернуть("Подразделение,Показатель,Точность");
	АдресПоказателейПодразделений = ПоместитьВоВременноеХранилище(ТаблицаПоказателейПодразделений, Новый УникальныйИдентификатор);
	
	ТаблицаПоказателейСотрудников.Свернуть("Сотрудник,Показатель,Точность");
	АдресПоказателейСотрудников = ПоместитьВоВременноеХранилище(ТаблицаПоказателейСотрудников, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура("АдресОбщихПоказателей, АдресПоказателейПодразделений, АдресПоказателейСотрудников",
		АдресОбщихПоказателей, АдресПоказателейПодразделений, АдресПоказателейСотрудников);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ПроверитьНаличиеНастраиваемыхПоказателей()
	
	ЕстьНастраиваемыеПоказатели = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Резерв) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭтоИнвентаризация И ЭтоРезервОтпусков)
		Или (Не ЭтоИнвентаризация И НормативныйМетодБУ) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРасчетовТекущейНастройкиРезерва = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ВидыРасчетовТекущейНастройкиРезерва(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления);
	ПоказателиВидаРасчетаРезервов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчетовТекущейНастройкиРезерва, "ВидРасчета, ИспользоватьСобственнуюФормулуРасчета");
	Для Каждого ПоказательВидаРасчета Из ПоказателиВидаРасчетаРезервов Цикл
		Если ЭтоРезервОтпусков
			Или (ПоказательВидаРасчета.Значение.ИспользоватьСобственнуюФормулуРасчета И Не ЭтоИнвентаризация) Тогда
			ВидРасчета = ПоказательВидаРасчета.Ключ;
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		Иначе
			ВидРасчета = ПоказательВидаРасчета.Значение.ВидРасчета;
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		КонецЕсли;
		
		ВидРасчетаИнфо = ВидыРасчетаИнфо[ВидРасчета];
		Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			Если ОписаниеПоказателя.ВводитсяНепосредственноПриРасчете
				Или ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				ЕстьНастраиваемыеПоказатели = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПоказателейНаСервере(ЗначенияПоказателей)
	
	АдресОбщихПоказателей         = ЗначенияПоказателей.АдресОбщихПоказателей;
	АдресПоказателейПодразделений = ЗначенияПоказателей.АдресПоказателейПодразделений;
	АдресПоказателейСотрудников   = ЗначенияПоказателей.АдресПоказателейСотрудников;

	ЗначенияОбщихПоказателей         = ПолучитьИзВременногоХранилища(АдресОбщихПоказателей);
	ЗначенияПоказателейПодразделений = ПолучитьИзВременногоХранилища(АдресПоказателейПодразделений);
	ЗначенияПоказателейСотрудников   = ПолучитьИзВременногоХранилища(АдресПоказателейСотрудников);
	Если Не ЗначениеЗаполнено(ЗначенияОбщихПоказателей)
		И Не ЗначениеЗаполнено(ЗначенияПоказателейПодразделений)
		И Не ЗначениеЗаполнено(ЗначенияПоказателейСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВидовРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "ВидРасчетаРезерва", Истина);
	ПоказателиВидаРасчетаРезервов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВидовРасчетаРезервов, "ИспользоватьСобственнуюФормулуРасчета, НазначениеПоказателя, ЭтоРасчетОтпуска");
	
	Сотрудники = Новый Массив;
	УникальныеСотрудники = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из Объект.Начисления Цикл
		
		Если ПоказателиВидаРасчетаРезервов[СтрокаСотрудника.ВидРасчетаРезерва].ИспользоватьСобственнуюФормулуРасчета
			И Не ЭтоИнвентаризация Тогда
			ВидРасчетаИнфо = РезервыПоОплатеТрудаРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчетаРезерва(СтрокаСотрудника.ВидРасчетаРезерва);
		ИначеЕсли ПоказателиВидаРасчетаРезервов[СтрокаСотрудника.ВидРасчетаРезерва].ЭтоРасчетОтпуска Тогда
			ВидыРасчетаИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервовОтпуск(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаСотрудника.ВидРасчетаРезерва));
		Иначе
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаСотрудника.Начисление);
		КонецЕсли;
		ФиксированнаяСумма = ЗначенияОбщихПоказателей[Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка()];
		
		ПересчитатьСотрудника = Ложь;
		Если ФиксированнаяСумма = Неопределено Тогда
			
			Для Сч = 1 По МаксимальноеКоличествоПоказателейНачисления Цикл
				
				Показатель = СтрокаСотрудника["Показатель" + Сч];
				Если Не ЗначениеЗаполнено(Показатель) Тогда 
					Прервать;
				КонецЕсли;
				
				Если ПоказателиВидаРасчетаРезервов[СтрокаСотрудника.ВидРасчетаРезерва].НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПозицииШтатногоРасписания Тогда
					Отбор = Новый Структура("Сотрудник, Показатель");
					Отбор.Сотрудник   = СтрокаСотрудника.Сотрудник;
					Отбор.Показатель  = Показатель;
					МассивСтрокПоказателей = ЗначенияПоказателейСотрудников.НайтиСтроки(Отбор);
					Если МассивСтрокПоказателей.Количество() <> 0 Тогда
						ЗначениеПоказателя = МассивСтрокПоказателей[0].Значение;
						СтрокаСотрудника["Значение" + Сч] = ЗначениеПоказателя;
						ПересчитатьСотрудника = Истина;
					КонецЕсли;
				ИначеЕсли ПоказателиВидаРасчетаРезервов[СтрокаСотрудника.ВидРасчетаРезерва].НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПодразделения Тогда
					Отбор = Новый Структура("Подразделение, Показатель");
					Отбор.Подразделение = СтрокаСотрудника.Подразделение;
					Отбор.Показатель    = Показатель;
					МассивСтрокПоказателей = ЗначенияПоказателейПодразделений.НайтиСтроки(Отбор);
					Если МассивСтрокПоказателей.Количество() <> 0 Тогда
						ЗначениеПоказателя = МассивСтрокПоказателей[0].Значение;
						СтрокаСотрудника["Значение" + Сч] = ЗначениеПоказателя;
						ПересчитатьСотрудника = Истина;
					КонецЕсли;
				Иначе // Для организации
					ЗначениеПоказателя = ЗначенияОбщихПоказателей[Показатель];
					Если ЗначениеПоказателя <> Неопределено Тогда 
						СтрокаСотрудника["Значение" + Сч] = ЗначениеПоказателя;
						ПересчитатьСотрудника = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаСотрудника.Результат = ФиксированнаяСумма;
			ПересчитатьСотрудника = Истина;
			
		КонецЕсли;
		
		Если ПересчитатьСотрудника И УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
			Сотрудники.Добавить(СтрокаСотрудника.Сотрудник);
			УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сотрудники.Количество() > 0 Тогда
		РассчитатьСотрудникаНаСервере(Сотрудники);
		ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент()
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Помеченный на удаление документ не может быть проведен.';
										|en = 'Document marked for deletion cannot be posted.'"));
		Возврат;
	КонецЕсли;
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
		РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтотОбъект, "ПровестиДокументОкончание");
	Иначе
		ПровестиДокументНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		ПровестиДокументНаКлиенте();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументНаКлиенте()
	
	УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ПроведениеДокументаНачислениеЗарплаты",,Ложь);
	
	Результат = РезультатПроведенияВДлительнойОперации();
	
	Если Результат.Свойство("ОшибкиПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Если ЗначениеЗаполнено(УИДЗамера) Тогда
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			УИДЗамера = Неопределено;
		КонецЕсли;
		ОповеститьОбИзмененииОбъекта();
		ПроведениеВДлительнойОперации = Ложь;
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроведенияВДлительнойОперации()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ОшибкиПроверкиЗаполнения", Истина);
	КонецЕсли;
	
	ДокументОбъект = Неопределено;
	// Преобразовываем данные формы в объект, чтобы записать его.
	Если Модифицированность Или Объект.Проведен Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыВДанные(ДокументОбъект);
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ДокументОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		// ПроцессыОбработкиДокументов
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
			МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
			ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена,РежимЗаписи,РежимПроведения", Истина, РежимЗаписиДокумента.Проведение, Неопределено);
			МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ДокументОбъект, ПараметрыЗаписи, Ложь);
		КонецЕсли;		
		// Конец ПроцессыОбработкиДокументов
		ДокументОбъект.ДополнительныеСвойства.Вставить("Проведен", ДокументОбъект.Проведен);
		ДанныеДокумента = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(ДокументОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ДанныеДокумента", ДанныеДокумента);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	СтруктураПараметров.Вставить("УстановитьПроведениеДокумента", Истина);
	СтруктураПараметров.Вставить("ВидОперации", Объект.ВидОперации);
	
	Если ДокументОбъект <> Неопределено Тогда
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ПериодыРасчетаСотрудников") Тогда
			СтруктураПараметров.Вставить("ПериодыРасчетаСотрудников", ДокументОбъект.ДополнительныеСвойства.ПериодыРасчетаСотрудников);
		КонецЕсли; 
		
	КонецЕсли; 
	
	НаименованиеЗадания = НСтр("ru = 'Проведение документа ""Резервы по оплате труда""';
								|en = 'Post the ""Payroll funds"" document'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.РезервыПоОплатеТруда.ВыполнитьПроведение",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	ПроведениеВДлительнойОперации = Не Результат.ЗаданиеВыполнено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПроведениеПослеВыполненияДлительнойОперации();
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Сотрудники          = Неопределено;
	ПозицииВставки      = Неопределено;
	
	Если СтруктураДанных.Свойство("ДанныеДляЗаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		// Заполнение табличных частей и вторичных данных коллекций, которые с ней связаны.
		ОчиститьТаблицыДокументаНаСервере();
		
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, Объект, , , Не НормативныйМетодБУ Или ЭтоИнвентаризация);
		
		МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(ЭтотОбъект);
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтотОбъект, МассивОписанийТаблицФормы);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
		Если НЕ НормативныйМетодБУ Или ЭтоИнвентаризация Тогда
			РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеРасчетаСохраняемогоЗаработка(ЭтотОбъект);
			РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		Сотрудники = СтруктураДанных.СтруктураПараметров.Сотрудники;
		ПозицииВставки = СтруктураДанных.СтруктураПараметров.ПозицииВставки;
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, Объект, ПозицииВставки, Сотрудники, Не НормативныйМетодБУ Или ЭтоИнвентаризация);
		МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(ЭтотОбъект);
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтотОбъект, МассивОписанийТаблицФормы, Сотрудники);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
		Если НЕ НормативныйМетодБУ Или ЭтоИнвентаризация Тогда
			РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеРасчетаСохраняемогоЗаработка(ЭтотОбъект);
			РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы, Сотрудники);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСтрокиТаблицПоКлючевымПолям(ПозицииВставки, Сотрудники);
	
	ЗаполнениеВыполнено = Истина;
	Модифицированность  = Истина;
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте()
	
	СодержимоеДокумента = СодержимоеДокументаПослеРасчета(
		АдресХранилища,
		МассивОписанийТаблицФормы(ЭтотОбъект),
		Не НормативныйМетодБУ Или ЭтоИнвентаризация);
		
	ФизическиеЛица = СодержимоеДокумента.ФизическиеЛица;
	СтрокиТаблицРасчетаПоФизическимЛицам = СодержимоеДокумента.СтрокиТаблицРасчетаПоФизическимЛицам;
	Если СодержимоеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьСтрокиТаблицДокумента(Объект, ФизическиеЛица, СтрокиТаблицДокументаПоФизическимЛицам, СтрокиТаблицРасчетаПоФизическимЛицам);
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтотОбъект,, 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	
	ЗаполнениеВыполнено = Истина;
	ПересчетСотрудникаВДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокиТаблицДокумента(Объект, ФизическиеЛица, СтрокиТаблицДокумента, СтрокиТаблицРасчета, ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = ТаблицыДокументаСДаннымиФизическихЛиц();
	КонецЕсли;
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		ТаблицыДокументаФизическогоЛица = СтрокиТаблицДокумента[ФизическоеЛицо];
		ТаблицыРасчетаФизическогоЛица = СтрокиТаблицРасчета[ФизическоеЛицо];
		
		Для Каждого ИмяТаблицы Из ТаблицыДокумента Цикл
			СтрокиТаблицыДокумента = Неопределено;
			Если Не ТаблицыДокументаФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицыДокумента) Тогда
				СтрокиТаблицыДокумента = Новый Массив;
				ТаблицыДокументаФизическогоЛица.Вставить(ИмяТаблицы, СтрокиТаблицыДокумента);
			КонецЕсли;
			
			СтрокиТаблицыРасчета = Неопределено;
			ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйКлиентСервер.НовыйОбходИдентификаторовТаблицы(СтрокиТаблицыДокумента);
			
			Если ТаблицыРасчетаФизическогоЛица <> Неопределено
				И ТаблицыРасчетаФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицыРасчета) Тогда
				
				Для Каждого СтрокаИсточника Из СтрокиТаблицыРасчета Цикл
					СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(Объект[ИмяТаблицы], ОбходТаблицыИдентификаторов);
					ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаИсточника);
				КонецЦикла;
			КонецЕсли;
			
			РасчетЗарплатыРасширенныйКлиентСервер.УдалитьНеактуальныеСтрокиФормы(Объект[ИмяТаблицы], ОбходТаблицыИдентификаторов);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СодержимоеСотрудниковДокумента(ФизическиеЛицаСотрудников, Сотрудники, ТипВедущегоПоля)
	
	СтруктураТаблицДокумента = НовыйСтруктураТаблицДокумента();
	СодержимоеДокумента = СтруктураТаблицДокумента.СодержимоеДокумента;
	ШаблонСтрокТаблиц = СтруктураТаблицДокумента.ШаблонСтрокТаблиц;
	
	Для Каждого ФизическоеЛицоСотрудника Из ФизическиеЛицаСотрудников Цикл
		
		СтрокиТаблицПоФизическомуЛицу = СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицоСотрудника);
		Если Не ЗначениеЗаполнено(СтрокиТаблицПоФизическомуЛицу) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтрокиТаблицПоФизическомуЛицу Цикл
			ИмяТаблицыФизическогоЛица = КлючИЗначение.Ключ;
			
			Идентификаторы = КлючИЗначение.Значение;
			ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "Объект." + ИмяТаблицыФизическогоЛица);
			
			Для Каждого Идентификатор Из Идентификаторы Цикл
				НоваяСтрока = НоваяСтрокаТаблицыСодержимогоДокумента(ТабличнаяЧасть, Идентификатор, СтруктураТаблицДокумента, ИмяТаблицыФизическогоЛица);
				Если НоваяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если НоваяСтрока.Свойство("Сотрудник")
					И ЗначениеЗаполнено(НоваяСтрока.Сотрудник)
					И ТипЗнч(НоваяСтрока.Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
						
					Сотрудники.Добавить(НоваяСтрока.Сотрудник);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнитьСотрудниковКРасчету(Сотрудники, ФизическиеЛицаСотрудников, Объект.Организация);
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Сотрудники);
	
	Возврат СодержимоеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СодержимоеДокументаПослеРасчета(АдресХранилища, ОписаниеТаблиц, ЗаполнятьПоказатели)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Если Не СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = СтруктураДанных.СтруктураПараметров;
	
	СодержимоеДокумента = РезервыПоОплатеТрудаРасширенный.НовыйСодержимоеДокументаРасчетаРезервов();
	СодержимоеДокумента.Вставить("Ссылка",          СтруктураПараметров.ДокументСсылка);
	СодержимоеДокумента.Вставить("Сотрудники",      СтруктураПараметров.Сотрудники);
	СодержимоеДокумента.Вставить("Организация",     СтруктураПараметров.Организация);
	СодержимоеДокумента.Вставить("МесяцНачисления", СтруктураПараметров.МесяцНачисления);
	СодержимоеДокумента.Вставить("ВидОперации",     СтруктураПараметров.ВидОперации);
	
	СодержимоеФормыДляЗаполнения = Новый Структура("Объект", СодержимоеДокумента);
	Сотрудники = СтруктураПараметров.Сотрудники;
	
	ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, СодержимоеДокумента,, Сотрудники, ЗаполнятьПоказатели);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(СодержимоеФормыДляЗаполнения, ОписаниеТаблиц);
	Если ЗаполнятьПоказатели Тогда
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеРасчетаСохраняемогоЗаработка(СодержимоеФормыДляЗаполнения);
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(СодержимоеФормыДляЗаполнения, ОписаниеТаблиц);
	КонецЕсли;
	
	СтрокиТаблицПоФизическимЛицам = СтрокиТаблицПоФизическимЛицам(СодержимоеДокумента, Ложь);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ФизическиеЛица) Тогда
		ФизическиеЛица = СтруктураПараметров.ФизическиеЛица;
	Иначе
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицПоФизическимЛицам, "Ключ");	
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("СтрокиТаблицРасчетаПоФизическимЛицам", СтрокиТаблицПоФизическимЛицам);
	Результат.Вставить("ФизическиеЛица", ФизическиеЛица);
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроведениеПослеВыполненияДлительнойОперации()
	
	Модифицированность = Ложь;
	Если Не ЗакрыватьПослеЗаписи Тогда
		ДокументОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресХранилища));
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		// СтандартныеПодсистемы.УправлениеДоступом
		ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена,РежимЗаписи,РежимПроведения", Истина, РежимЗаписиДокумента.Проведение, Неопределено);
		УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, Объект, ПараметрыЗаписи);
		// Конец СтандартныеПодсистемы.УправлениеДоступом
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
		// ПроцессыОбработкиДокументов
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
			МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
			МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, Объект, ПараметрыЗаписи);
		КонецЕсли;	
		// Конец ПроцессыОбработкиДокументов
		// ЗарплатаКадрыПодсистемы.ПодписиДокументов
		ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
		// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
		СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ДокументОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносовВДлительнойОперации(Объект.Организация, Объект.Ссылка);
	КонецЕсли;
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Если ПроведениеВДлительнойОперации Тогда
					ПроведениеПослеВыполненияДлительнойОперации();
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				Иначе
					РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект);
					Если ПересчетСотрудникаВДлительнойОперации Тогда
						ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте();
					Иначе
						ЗаполнениеПослеВыполненияДлительнойОперации();
					КонецЕсли;
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				КонецЕсли;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
				ОповеститьОбИзмененииОбъекта();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		ИначеЕсли Не ФормаДлительнойОперации.Открыта() И ПроведениеВДлительнойОперации Тогда
			ПроведениеВДлительнойОперации = Ложь;
			ЗакрыватьПослеЗаписи = Ложь;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ПроведениеВДлительнойОперации И ЗаданиеВыполненоВДлительнойОперации Тогда
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		КонецЕсли;
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	
	Возврат ПоместитьВоВременноеХранилище(МассивСотрудников, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПодбораНаКлиенте(Сотрудники)
	
	МассивСотрудников = ПодобранныеСотрудники(Сотрудники);
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(МассивСотрудников, Ложь);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект, Сотрудники);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобранныеСотрудники(Сотрудники)
	
	// Оставляем только сотрудников, которых нет в документе.
	МассивСотрудников = Новый Массив;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	
	УникальныеСотрудники = Новый Соответствие;
	СписокСотрудниковДокумента = Новый Массив;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
				СписокСотрудниковДокумента.Добавить(СтрокаСотрудника.Сотрудник);
				УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		Если УникальныеСотрудники[Сотрудник] = Неопределено Тогда 
			МассивСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	// Для корректного пересчета зависимых таблиц добавляем сотрудников из документа с совпадающими физическими лицами.
	ФизическиеЛицаПодобранныхСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	ФизическиеЛица = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизическиеЛицаПодобранныхСотрудников Цикл 
		ФизическиеЛица.Вставить(КлючИЗначение.Значение, Истина);
	КонецЦикла;
	
	ФизическиеЛицаСотрудниковДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудниковДокумента, "ФизическоеЛицо");
	
	Для Каждого КлючИЗначение Из ФизическиеЛицаСотрудниковДокумента Цикл 
		Если ФизическиеЛица[КлючИЗначение.Значение] <> Неопределено Тогда 
			МассивСотрудников.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции

// Описания документа, таблиц документа, панелей документа.
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РезервыПоОплатеТрудаКлиентСерверРасширенный.ОписаниеРасчетногоДокумента();
	Описание.РежимНачисления = ПредопределенноеЗначение("Перечисление.РежимНачисленияЗарплаты.ОкончательныйРасчет");
	Описание.ЭтоНачислениеЗарплаты = Истина;
	
	Если Форма.ИспользоватьНачисление Тогда 
		Описание.НачисленияИмя = "Начисления";
		Описание.НачисленияКоманднаяПанельИмя = "НачисленияАвтоКоманды";
		Описание.ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма));
	КонецЕсли;
	
	Если Форма.ИспользоватьВзносы Тогда 
		Описание.ВзносыИмя = "Взносы";
		Описание.ВзносыКоманднаяПанельИмя = "ВзносыАвтоКоманды";
		Описание.ОписанияТаблиц.Вставить("Взносы", ОписаниеТаблицыВзносов());
	КонецЕсли;
	
	Если Форма.ИспользоватьРасчет Тогда
		Описание.РасчетРезервовИмя = "РасчетРезервов";
		Описание.РасчетРезервовКоманднаяПанельИмя = "РасчетРезервовАвтоКоманды";
		Описание.ОписанияТаблиц.Вставить("РасчетРезервов", ОписаниеТаблицыРасчетаРезервов());
	КонецЕсли;
	
	Описание.ОценочныеОбязательстваПоСотрудникамИмя = "ОценочныеОбязательстваПоСотрудникам";
	Описание.ОценочныеОбязательстваПоСотрудникамКоманднаяПанельИмя = "ОценочныеОбязательстваПоСотрудникамАвтоКоманды";
	Описание.ОписанияТаблиц.Вставить("ОценочныеОбязательстваПоСотрудникам", ОписаниеТаблицыОценочныхОбязательствПоСотрудникам());
	
	Описание.ОценочныеОбязательстваИмя = "ОценочныеОбязательства";
	Описание.ОценочныеОбязательстваКоманднаяПанельИмя = "ОценочныеОбязательстваАвтоКоманды";
	Описание.ОписанияТаблиц.Вставить("ОценочныеОбязательства", ОписаниеТаблицыОценочныеОбязательства());
	
	Описание.ПланируемаяДатаВыплатыИмя = Неопределено;
	Описание.ПорядокВыплатыИмя         = Неопределено;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru = 'Месяц начисления';
																													|en = 'Accrual month'"), "МесяцНачисленияСтрокой"));
	
	Описание.Вставить("Резерв", Форма.Объект.Резерв);
	Описание.Вставить("ВидОперации", Форма.Объект.ВидОперации);
	Описание.Вставить("ДокументСсылка", Форма.Объект.Ссылка);
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений(Форма)
	
	Описание = РезервыПоОплатеТрудаКлиентСерверРасширенный.ОписаниеТаблицыРасчета(
		Форма.НормативныйМетодБУ И Не Форма.ЭтоИнвентаризация,
		(Форма.ЭтоНачисление И Не Форма.НормативныйМетодБУ) Или Форма.ЭтоИнвентаризация);
	Описание.СодержитПолеСотрудник                     = Истина;
	Описание.ИмяРеквизитаСотрудник                     = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей              = "ДатыНачисления";
	Описание.ВставлятьПослеПоля                        = Истина;
	Описание.ОтображатьПоляОписанияВремени             = ЗначениеЗаполнено(Форма.Объект.Резерв)
		И (Не Форма.НормативныйМетодБУ Или Форма.ЭтоИнвентаризация);
	Описание.ОтображатьПоляНормыВремени                = ЗначениеЗаполнено(Форма.Объект.Резерв)
		И (Не Форма.НормативныйМетодБУ Или Форма.ЭтоИнвентаризация);
	Описание.УправлятьОтображениемПолейОписанияВремени = ЗначениеЗаполнено(Форма.Объект.Резерв)
		И (Не Форма.НормативныйМетодБУ Или Форма.ЭтоИнвентаризация);
	Описание.ОтменятьВсеИсправления                    = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыВзносов()
	
	Описание = РезервыПоОплатеТрудаКлиентСерверРасширенный.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "Взносы";
	Описание.СодержитПолеСотрудник  = Ложь;
	Описание.ИмяРеквизитаСотрудник  = "ФизическоеЛицо";
	Описание.НомерТаблицы           = 1;
	Описание.ПутьКДанным            = "Объект.Взносы";
	Описание.ИмяРеквизитаФиксРасчет = "ВзносыФиксРасчет";
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.ОтменятьВсеИсправления = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыРасчетаРезервов()
	
	Описание = РезервыПоОплатеТрудаКлиентСерверРасширенный.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "РасчетРезервов";
	Описание.СодержитПолеСотрудник  = Истина;
	Описание.ИмяРеквизитаСотрудник  = "Сотрудник";
	Описание.НомерТаблицы           = 2;
	Описание.ПутьКДанным            = "Объект.РасчетРезервов";
	Описание.ИмяРеквизитаФиксРасчет = "РасчетРезервовФиксРасчет";
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.ОтменятьВсеИсправления = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыОценочныхОбязательствПоСотрудникам()
	
	Описание = РезервыПоОплатеТрудаКлиентСерверРасширенный.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "ОценочныеОбязательстваПоСотрудникам";
	Описание.СодержитПолеСотрудник  = Истина;
	Описание.ИмяРеквизитаСотрудник  = "Сотрудник";
	Описание.НомерТаблицы           = 3;
	Описание.ПутьКДанным            = "Объект.ОценочныеОбязательстваПоСотрудникам";
	Описание.ИмяРеквизитаФиксРасчет = "ОценочныеОбязательстваПоСотрудникамФиксРасчет";
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.ОтменятьВсеИсправления = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыОценочныеОбязательства()
	
	Описание = РезервыПоОплатеТрудаКлиентСерверРасширенный.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы             = "ОценочныеОбязательства";
	Описание.СодержитПолеСотрудник  = Ложь;
	Описание.ИмяРеквизитаСотрудник  = "";
	Описание.НомерТаблицы           = 4;
	Описание.ПутьКДанным            = "Объект.ОценочныеОбязательства";
	Описание.ИмяРеквизитаФиксРасчет = "ОценочныеОбязательстваФиксРасчет";
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.ОтменятьВсеИсправления = Ложь;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(Форма)
	
	МассивОписанийТаблицФормы = Новый Структура;
	
	Если Форма.ИспользоватьНачисление Тогда 
		МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма));
	КонецЕсли;
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаСервере
Процедура ДанныеВРеквизиты(ТекущийОбъект)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КонтролируемыеПоля", ПолучитьКонтролируемыеПоля());
	
	РезервыПоОплатеТрудаРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	РезервыПоОплатеТрудаРасширенный.ДополнитьТаблицуРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыРасчетаРезервов(), ДополнительныеПараметры);
	РезервыПоОплатеТрудаРасширенный.ДополнитьТаблицуРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыОценочныхОбязательствПоСотрудникам(), ДополнительныеПараметры);
	
	Если НЕ НормативныйМетодБУ
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеРасчетаСохраняемогоЗаработка(ЭтотОбъект);
		РезервыПоОплатеТрудаРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтотОбъект, МассивОписанийТаблицФормы(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц)
	
	СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТекущийОбъект)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.Показатель КАК Показатель,
	               |	Таблица.Значение,
	               |	Таблица.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТПоказатели
	               |ИЗ
	               |	&ТаблицаПоказателей КАК Таблица
				   |ГДЕ
				   |	&Условие";
	Если Параметры.Ключ.Пустая()
		И Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаПоказателей", "Документ.РезервыПоОплатеТруда.Показатели");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "Таблица.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Параметры.ЗначениеКопирования);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПоказателей", ТекущийОбъект.Показатели);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	
	Если ИспользоватьНачисление Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ЭтотОбъект));
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтотОбъект, ТекущийОбъект, ОписанияТаблиц, 2);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаКлиенте
Процедура РезервПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Объект.Резерв = РезервПредыдущий;
		Возврат;
	КонецЕсли;
	
	РезервПредыдущий = Объект.Резерв;
	
	ОчиститьТаблицыДокументаНаСервере();
	РезервПриИзмененииНаСервере();
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура РезервПриИзмененииНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ИнициализацияФормы(ТекущийОбъект, ЗначениеЗаполнено(Объект.Резерв));
	ЗаполнитьСтатьиИАналитикуЗначениямиПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормы(ТекущийОбъект, ДополнятьФорму)
	
	ЗаполнитьЗначениеВидаРасчета();
	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтотОбъект);
	ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
	ЗаполнитьСтрокиТаблицПоКлючевымПолям();
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиРезерва()
	
	ПараметрыТекущегоРезерва = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Объект.Организация, Объект.Резерв, Объект.МесяцНачисления, Объект.Ссылка, Объект.ВидОперации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыТекущегоРезерва);
	
	Если ЗначениеЗаполнено(Объект.Резерв) Тогда
		ВидРезерва = ПараметрыТекущегоРезерва.ВидРезерва;
		ЭтоРезервОтпусков = ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
		ЭтоРезервПремии = ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.ГодоваяПремия
			Или ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.ВознаграждениеЗаВыслугуЛет;
	Иначе
		ЭтоРезервОтпусков = Ложь;
		ЭтоРезервПремии   = Ложь;
	КонецЕсли;
	ПроверитьНаличиеНастраиваемыхПоказателей();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	ПроверитьИспользованиеОбмена();
	ОбновитьДоступностьЗарплатаОтраженаВБухучете();
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура("Организация, МесяцРасчета", "Объект.Организация", "Объект.МесяцНачисления");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	ЗаполнитьСтатьиИАналитикуЗначениямиПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияКонтролируемыхПолей()
	
	// Выполняет заполнение сведений о значениях контролируемых полей, 
	// которые могли измениться в результате не интерактивного обновления значений.
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "Начисления", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "Взносы", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "РасчетРезервов", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтотОбъект, "ОценочныеОбязательстваПоСотрудникам", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте() Экспорт
	
	ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтотОбъект);
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, РассчитыватьДокументыПриРедактировании);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере(СотрудникиКРасчету)
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаССотрудниками.Значение.СписокСотрудников, "Ключ");
		РассчитатьСотрудникаНаСервере(Сотрудники, ТаблицаССотрудниками.Значение.ОписаниеТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
	Иначе
		ЗакрыватьПослеЗаписи = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицНачислений() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	
	Если ИспользоватьНачисление Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ЭтотОбъект));
	КонецЕсли;
	Если ИспользоватьРасчет Тогда
		ОписанияТаблиц.Добавить(ОписаниеТаблицыРасчетаРезервов());
	КонецЕсли;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыОценочныхОбязательствПоСотрудникам());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиенте
Функция ЕстьИсправленныеСтроки() Экспорт
	Возврат ЕстьИсправленныеСтрокиНаСервере();
КонецФункции

&НаСервере
Функция ЕстьИсправленныеСтрокиНаСервере()
	
	Если (ЭтоНачисление И Не НормативныйМетодБУ) Или ЭтоИнвентаризация Тогда
		Возврат РасчетЗарплатыРасширенныйФормы.ЕстьИсправленныеСтроки(ЭтотОбъект);
	Иначе
		// В этих режима контроль заполнения не используется.
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОбъекта()
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ПараметрыОповещения = Новый Структура("Организация,МесяцНачисления");
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, Объект);
	
	Оповестить("Запись_РезервыПоОплатеТруда", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДокументаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.РезервыПоОплатеТруда.ТабличныеЧасти Цикл 
		Если Объект.Свойство(ТабличнаяЧасть.Имя) Тогда 
			Объект[ТабличнаяЧасть.Имя].Очистить();
		КонецЕсли;
	КонецЦикла;
	СтрокиТаблицДокументаПоФизическимЛицам = Неопределено;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудника()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("Взносы");
	ТаблицыДокумента.Добавить("РасчетРезервов");
	ТаблицыДокумента.Добавить("ОценочныеОбязательстваПоСотрудникам");
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИмяТаблицы = ОписаниеДокумента[ТаблицаДокумента + "Имя"];
		Если ИмяТаблицы <> Неопределено Тогда
			
			ИмяКоманднойПанели = Неопределено;
			
			ОписаниеДокумента.Свойство(ТаблицаДокумента + "КоманднаяПанельИмя", ИмяКоманднойПанели);
			ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели)
	
	Если Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		// Такой таблицы нет в форме
		Возврат;
	КонецЕсли;
	
	Если Команды.Найти(ИмяТаблицы + "УдалитьСотрудника") <> Неопределено Тогда
		// Команда уже существует
		Возврат;
	КонецЕсли;
	
	// Добавляем команду формы
	КомандаУдалитьСотрудника = Команды.Добавить(ИмяТаблицы + "УдалитьСотрудника");
	КомандаУдалитьСотрудника.Действие = "Подключаемый_" + ИмяТаблицы + "УдалитьСотрудника";
	КомандаУдалитьСотрудника.Заголовок = НСтр("ru = 'Удалить сотрудника';
												|en = 'Remove employee'");
	КомандаУдалитьСотрудника.Подсказка = НСтр("ru = 'Данные по выбранному сотруднику удаляются со всех таблиц документа';
												|en = 'Data on the selected employee is deleted from all tables of the document'");
	КомандаУдалитьСотрудника.Картинка = БиблиотекаКартинок.Удалить;
	КомандаУдалитьСотрудника.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаУдалитьСотрудника.ИзменяетСохраняемыеДанные = Истина;
	
	// Добавляем элементы (группу кнопок и кнопку) в командную панель.
	Если ИмяКоманднойПанели = Неопределено Тогда
		ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
	КонецЕсли;
	
	КоманднаяПанельТаблицы = Элементы.Найти(ИмяКоманднойПанели);
	Если КоманднаяПанельТаблицы <> Неопределено Тогда
		Если КоманднаяПанельТаблицы.ПодчиненныеЭлементы.Количество() = 0 Тогда
			МестоВставки = Неопределено;
		Иначе
			МестоВставки = КоманднаяПанельТаблицы.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанельТаблицы, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа';
											|en = 'Update document lines'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
			КнопкаУдалитьСотрудника.ТолькоВоВсехДействиях = Истина;
		КонецЕсли;
		
		// Добавляем элементы в контекстное меню.
		КонтекстноеМеню = Элементы[ИмяТаблицы].КонтекстноеМеню;
		
		МестоВставки = Неопределено;
		Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() > 0 Тогда
			МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КонтекстноеМеню, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru = 'Обновление строк документа';
											|en = 'Update document lines'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСотрудникаНаСервере(Сотрудник)
	
	Если Не УдалитьДанныеСотрудникаНаСервере(Сотрудник) Тогда 
		РассчитатьСотрудникаНаСервере(Сотрудник);
	Иначе
		РассчитатьОценочныеОбязательства();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьДанныеСотрудникаНаСервере(СотрудникФизическоеЛицо)
	
	УдаляемыеСотрудники = Новый Соответствие;
	ДополнительныеСотрудники = Новый Соответствие;
	
	Если ТипЗнч(СотрудникФизическоеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда 
		УдаляемыеСотрудники.Вставить(СотрудникФизическоеЛицо, Истина);
		Если ЗначениеЗаполнено(СотрудникФизическоеЛицо) Тогда
			ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникФизическоеЛицо, "ФизическоеЛицо");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудник", СотрудникФизическоеЛицо);
			Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Сотрудники.Ссылка
			               |ИЗ
			               |	Справочник.Сотрудники КАК Сотрудники
			               |ГДЕ
			               |	Сотрудники.Ссылка <> &Сотрудник
			               |	И Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
						   
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ДополнительныеСотрудники.Вставить(Выборка.Ссылка, Истина);
			КонецЦикла;
		Иначе
			ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
	Иначе 
		
		ФизическоеЛицо = СотрудникФизическоеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Сотрудники.Ссылка
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			УдаляемыеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьВзносы = Истина;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("РасчетРезервов");
	ИменаТаблиц.Добавить("ОценочныеОбязательстваПоСотрудникам");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
	
		СтрокиСотрудника = Новый Массив;
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УдаляемыеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
		    	СтрокиСотрудника.Добавить(СтрокаСотрудника);
			ИначеЕсли ДополнительныеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
				ОчиститьВзносы = Ложь;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаСотрудника);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ОчиститьВзносы Тогда 
		УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
		Возврат Ложь;
	КонецЕсли;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Взносы");
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо);
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		Если Не СтрокиТаблицФизическогоЛица.Свойство(ИмяТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиФизическогоЛица = СтрокиТаблицФизическогоЛица[ИмяТаблицы];
		Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл 
			СтрокаТаблицы = Объект[ИмяТаблицы].НайтиПоИдентификатору(СтрокаФизическогоЛица);
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Объект[ИмяТаблицы].Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьССохранениемИсправлений", "Доступность", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЕстьИсправления = ТекущиеДанные.Свойство("ФиксРасчет") И ТекущиеДанные.ФиксРасчет
		Или ТекущиеДанные.Свойство("ФиксРасчетВремени") И ТекущиеДанные.ФиксРасчетВремени
		Или ТекущиеДанные.Свойство("ФиксЗаполнение") И ТекущиеДанные.ФиксЗаполнение
		Или ТекущиеДанные.Свойство("ФиксСтрока") И ТекущиеДанные.ФиксСтрока;
		
	Если ЕстьИсправления Тогда 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьССохранениемИсправлений", "Доступность", Истина);
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(ЕстьИсправленныеСтроки = Неопределено)
	
	Если ЕстьИсправленныеСтроки = Неопределено Тогда 
		ЕстьИсправленныеСтроки = ЕстьИсправленныеСтрокиНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ЗаполнитьССохранениемИсправлений", "Доступность", ЕстьИсправленныеСтроки);
	
КонецПроцедуры

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	Возврат КонтролируемыеПоля();
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = Новый Структура;
	
	// Начисления
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	НачисленияФиксРасчет.Добавить("РезультатНУ");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОтработаноДней");
	НачисленияФиксРасчетВремени.Добавить("ОтработаноЧасов");
	НачисленияФиксРасчетВремени.Добавить("ОплаченоДней");
	НачисленияФиксРасчетВремени.Добавить("ОплаченоЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("ВидРасчетаРезерва");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияФиксЗаполнение = Новый Массив;
	НачисленияФиксЗаполнение.Добавить("ФондОплатыТруда");
	НачисленияФиксЗаполнение.Добавить("НормативОтчисленийВРезерв");
	НачисленияФиксЗаполнение.Добавить("НормативОтчисленийВРезервНУ");
	НачисленияФиксЗаполнение.Добавить("ПериодРасчетаСреднегоЗаработкаНачало");
	НачисленияФиксЗаполнение.Добавить("ПериодРасчетаСреднегоЗаработкаОкончание");
	
	МаксимальноеКоличествоПоказателейНачисления = РезервыПоОплатеТрудаРасширенный.МаксимальноеКоличествоПоказателей();
	Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателейНачисления Цикл
		НачисленияФиксЗаполнение.Добавить("Значение" + НомерПоказателя);
	КонецЦикла;
	
	НачисленияПоля = Новый Структура;
	НачисленияПоля.Вставить("ФиксРасчет",        НачисленияФиксРасчет);
	НачисленияПоля.Вставить("ФиксЗаполнение",    НачисленияФиксЗаполнение);
	НачисленияПоля.Вставить("ФиксСтрока",        НачисленияФиксСтрока);
	НачисленияПоля.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить("Начисления", НачисленияПоля);
	
	// Взносы
	ВзносыФиксРасчет = Новый Массив;
	ВзносыФиксРасчет.Добавить("СуммаСтраховыхВзносов");
	ВзносыФиксРасчет.Добавить("СуммаСтраховыхВзносовНУ");
	ВзносыФиксРасчет.Добавить("СуммаФССНесчастныеСлучаи");
	ВзносыФиксРасчет.Добавить("СуммаФССНесчастныеСлучаиНУ");
	
	ВзносыФиксСтрока = Новый Массив;
	ВзносыФиксСтрока.Добавить("ФизическоеЛицо");
	
	ВзносыФиксЗаполнение = Новый Массив;
	ВзносыФиксЗаполнение.Добавить("СтраховыеВзносы");
	ВзносыФиксЗаполнение.Добавить("ТекущаяСтавкаСтраховыхВзносов");
	ВзносыФиксЗаполнение.Добавить("ФССНесчастныеСлучаи");
	ВзносыФиксЗаполнение.Добавить("ТекущаяСтавкаФССНесчастныеСлучаи");
	ВзносыФиксЗаполнение.Добавить("НормативОтчисленийВРезервСтраховыеВзносы");
	ВзносыФиксЗаполнение.Добавить("НормативОтчисленийВРезервСтраховыеВзносыНУ");
	ВзносыФиксЗаполнение.Добавить("НормативОтчисленийВРезервФССНесчастныеСлучаи");
	ВзносыФиксЗаполнение.Добавить("НормативОтчисленийВРезервФССНесчастныеСлучаиНУ");
	
	ВзносыПоля = Новый Структура;
	ВзносыПоля.Вставить("ФиксРасчет",     ВзносыФиксРасчет);
	ВзносыПоля.Вставить("ФиксЗаполнение", ВзносыФиксЗаполнение);
	ВзносыПоля.Вставить("ФиксСтрока",     ВзносыФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Взносы", ВзносыПоля);
	
	// Расчет резервов
	РасчетРезервовФиксРасчет = Новый Массив;
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерва");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваНУ");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносов");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносовНУ");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	РасчетРезервовФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ");
	
	РасчетРезервовФиксСтрока = Новый Массив;
	РасчетРезервовФиксСтрока.Добавить("Сотрудник");
	
	РасчетРезервовФиксЗаполнение = Новый Массив;
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваНакоплено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваНакопленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваИсчислено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваИсчисленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовНакоплено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовНакопленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовИсчислено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиНакоплено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоНУ");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено");
	РасчетРезервовФиксЗаполнение.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
	
	РасчетРезервовПоля = Новый Структура;
	РасчетРезервовПоля.Вставить("ФиксРасчет",     РасчетРезервовФиксРасчет);
	РасчетРезервовПоля.Вставить("ФиксЗаполнение", РасчетРезервовФиксЗаполнение);
	РасчетРезервовПоля.Вставить("ФиксСтрока",     РасчетРезервовФиксСтрока);
	
	КонтролируемыеПоля.Вставить("РасчетРезервов", РасчетРезервовПоля);
	
	// Обязательства и резервы по сотрудникам
	ОценочныеОбязательстваПоСотрудникамФиксРасчет = Новый Массив;
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерва");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваНУ");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносов");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносовНУ");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	ОценочныеОбязательстваПоСотрудникамФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ОценочныеОбязательстваПоСотрудникамФиксСтрока = Новый Массив;
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("Сотрудник");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("Подразделение");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("СпособОтраженияЗарплатыВБухучете");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("СтатьяФинансирования");
	ОценочныеОбязательстваПоСотрудникамФиксСтрока.Добавить("КорректировкаОбязательств");
	
	ОценочныеОбязательстваПоСотрудникамФиксЗаполнение = Новый Массив;
	
	ОценочныеОбязательстваПоСотрудникамПоля = Новый Структура;
	ОценочныеОбязательстваПоСотрудникамПоля.Вставить("ФиксРасчет",     ОценочныеОбязательстваПоСотрудникамФиксРасчет);
	ОценочныеОбязательстваПоСотрудникамПоля.Вставить("ФиксЗаполнение", ОценочныеОбязательстваПоСотрудникамФиксЗаполнение);
	ОценочныеОбязательстваПоСотрудникамПоля.Вставить("ФиксСтрока",     ОценочныеОбязательстваПоСотрудникамФиксСтрока);
	
	КонтролируемыеПоля.Вставить("ОценочныеОбязательстваПоСотрудникам", ОценочныеОбязательстваПоСотрудникамПоля);
	
	// Обязательства и резервы текущего месяца
	ОценочныеОбязательстваФиксРасчет = Новый Массив;
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерва");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваНУ");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносов");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваСтраховыхВзносовНУ");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаи");
	ОценочныеОбязательстваФиксРасчет.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ОценочныеОбязательстваФиксСтрока = Новый Массив;
	ОценочныеОбязательстваФиксСтрока.Добавить("Подразделение");
	ОценочныеОбязательстваФиксСтрока.Добавить("СпособОтраженияЗарплатыВБухучете");
	ОценочныеОбязательстваФиксСтрока.Добавить("СтатьяФинансирования");
	
	ОценочныеОбязательстваФиксЗаполнение = Новый Массив;
	
	ОценочныеОбязательстваПоля = Новый Структура;
	ОценочныеОбязательстваПоля.Вставить("ФиксРасчет",     ОценочныеОбязательстваФиксРасчет);
	ОценочныеОбязательстваПоля.Вставить("ФиксЗаполнение", ОценочныеОбязательстваФиксЗаполнение);
	ОценочныеОбязательстваПоля.Вставить("ФиксСтрока",     ОценочныеОбязательстваФиксСтрока);
	
	КонтролируемыеПоля.Вставить("ОценочныеОбязательства", ОценочныеОбязательстваПоля);
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаСервере
Процедура УстановитьКонтролируемыеПоля()
	
	КонтролируемыеПоля = ПолучитьКонтролируемыеПоля();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Начисления");
	МассивТаблиц.Добавить("Взносы");
	МассивТаблиц.Добавить("РасчетРезервов");
	МассивТаблиц.Добавить("ОценочныеОбязательстваПоСотрудникам");
	МассивТаблиц.Добавить("ОценочныеОбязательства");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл 
		КонтролируемыеПоляТаблицы = КонтролируемыеПоля[ИмяТаблицы];
		
		КонтролируемыеПоляСФиксированнымиМассивами = Новый Структура;
		Для Каждого ЭлементСтруктуры Из КонтролируемыеПоляТаблицы Цикл
			КонтролируемыеПоляСФиксированнымиМассивами.Вставить(ЭлементСтруктуры.Ключ, 
				Новый ФиксированныйМассив(ЭлементСтруктуры.Значение));
		КонецЦикла;
		
		ЭтотОбъект["КонтролируемыеПоля" + ИмяТаблицы] = Новый ФиксированнаяСтруктура(КонтролируемыеПоляСФиксированнымиМассивами);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройки()

	РасчетЗарплатыРасширенныйФормы.УстановитьРежимОтображенияПодробноИзНастройки(ЭтотОбъект, ОписаниеТаблицыНачислений(ЭтотОбъект));
	
	КлючОбъекта = Объект.Ссылка.Метаданные().Имя;
	КлючНастройки = "ВзносыПодробно";
	ВидимостьПолейПодробно = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастройки);
	ВидимостьПолейПодробно = ?(ВидимостьПолейПодробно = Неопределено, Ложь, ВидимостьПолейПодробно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВзносыПодробно",
		"Пометка",
		ВидимостьПолейПодробно);
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении();
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = КлючевыеРеквизитыОписаниеКлючевыхРеквизитов();
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении() 
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.Взносы");
	Массив.Добавить("Объект.РасчетРезервов");
	Массив.Добавить("Объект.ОценочныеОбязательстваПоСотрудникам");
	Массив.Добавить("Объект.ОценочныеОбязательства");
	
	Возврат Массив;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыОписаниеКлючевыхРеквизитов()
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",					НСтр("ru = 'организации';
																											|en = 'company'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ПодразделениеОрганизации",		НСтр("ru = 'подразделения';
																											|en = 'business unit'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "МесяцНачисленияСтрокой", 		НСтр("ru = 'месяца начисления';
																											|en = 'month of accrual'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПустаяСтрокаНачисления(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	СтрокаНачисления = Новый Структура;
	СтрокаНачисления.Вставить("Организация");
	СтрокаНачисления.Вставить("Сотрудник");
	СтрокаНачисления.Вставить("ФизическоеЛицо");
	СтрокаНачисления.Вставить("Подразделение");
	СтрокаНачисления.Вставить("Начисление");
	СтрокаНачисления.Вставить("ГрафикРаботы");
	СтрокаНачисления.Вставить("ОбщийГрафик");
	СтрокаНачисления.Вставить("ГрафикРаботыНорма");
	СтрокаНачисления.Вставить("ВидУчетаВремени");
	СтрокаНачисления.Вставить("ВидВремени");
	СтрокаНачисления.Вставить("ВремяВЧасах");
	СтрокаНачисления.Вставить("ВремяВЦеломЗаПериод");
	СтрокаНачисления.Вставить("ДатаНачала");
	СтрокаНачисления.Вставить("ДатаОкончания");
	СтрокаНачисления.Вставить("НачалоБазовогоПериода");
	СтрокаНачисления.Вставить("ОкончаниеБазовогоПериода");
	СтрокаНачисления.Вставить("Строка");
	СтрокаНачисления.Вставить("ФиксСтрока");
	СтрокаНачисления.Вставить("ФиксЗаполнение");
	СтрокаНачисления.Вставить("ФиксРасчетВремени");
	СтрокаНачисления.Вставить("ФиксРасчет");
	СтрокаНачисления.Вставить("ПериодРегистрацииВремени");
	СтрокаНачисления.Вставить("ПериодРегистрацииНормыВремени");
	СтрокаНачисления.Вставить("Сумма");
	СтрокаНачисления.Вставить("Результат");
	СтрокаНачисления.Вставить("ИдентификаторСтроки");
	СтрокаНачисления.Вставить("ИдентификаторСтрокиВидаРасчета");
	СтрокаНачисления.Вставить("ОтработаноДней");
	СтрокаНачисления.Вставить("ОтработаноЧасов");
	СтрокаНачисления.Вставить("НормаДней");
	СтрокаНачисления.Вставить("НормаЧасов");
	СтрокаНачисления.Вставить("ОплаченоДней");
	СтрокаНачисления.Вставить("ОплаченоЧасов");
	СтрокаНачисления.Вставить("ФиксСуммаВычета");
	СтрокаНачисления.Вставить("Сторно");
	СтрокаНачисления.Вставить("ФиксСторно");
	СтрокаНачисления.Вставить("ВидЗанятости");
	СтрокаНачисления.Вставить("ДоступенВыборОснования");
	СтрокаНачисления.Вставить("ИспользованиеПериода");
	СтрокаНачисления.Вставить("ЯвляетсяЛьготой");
	
	Для Счетчик = 1 По МаксимальноеКоличествоПоказателейНачисления Цикл
		СтрокаНачисления.Вставить("Показатель" + Счетчик);
		СтрокаНачисления.Вставить("Значение" + Счетчик);
		СтрокаНачисления.Вставить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;

	Возврат СтрокаНачисления;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиТаблицПоКлючевымПолям(ПозицииВставки = Неопределено, Сотрудники = Неопределено)
	
	Если ПозицииВставки = Неопределено Тогда
		СтрокиТаблицДокументаПоФизическимЛицам = Новый ФиксированноеСоответствие(СтрокиТаблицПоФизическимЛицам(Объект));
	Иначе
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		ПозицииСотрудника = Новый Соответствие;
		
		Для Каждого СотрудникиТаблицы Из ПозицииВставки Цикл
			ИмяТаблицы = СотрудникиТаблицы.Ключ;
			ОбработанныеФизическиеЛица = Новый Соответствие;
			Для Каждого СтрокаСотрудника Из СотрудникиТаблицы.Значение Цикл
				Если ТипЗнч(СтрокаСотрудника.Ключ) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ФизическоеЛицо = СтрокаСотрудника.Ключ;
				ИначеЕсли ФизическиеЛицаСотрудников[СтрокаСотрудника.Ключ] <> Неопределено Тогда
					ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаСотрудника.Ключ];
				Иначе
					ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСотрудника.Ключ, "ФизическоеЛицо");
				КонецЕсли;
				
				Если ОбработанныеФизическиеЛица[ФизическоеЛицо] = Неопределено Тогда
					ДополнятьИдентификаторы = Ложь;
					ОбработанныеФизическиеЛица.Вставить(ФизическоеЛицо, Истина);
				Иначе
					ДополнятьИдентификаторы = Истина;
				КонецЕсли;
				ОбновитьИдентификаторыСтрокФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, СтрокаСотрудника.Значение, ДополнятьИдентификаторы);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокиТаблицПоФизическимЛицам(Документ, ЗаполнятьИдентификаторы = Истина, ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = ТаблицыДокументаСДаннымиФизическихЛиц();
	КонецЕсли;
	
	Если Не ЗаполнятьИдентификаторы Тогда
		ШаблонСтрок = НовыйСтруктураТаблицДокумента().ШаблонСтрокТаблиц;
	КонецЕсли;
	
	ФизическиеЛицаПоИдентификаторам = Новый Соответствие;
	СтрокиПоФизическимЛицам = Новый Соответствие;
	
	Для Каждого ИмяТаблицы Из ТаблицыДокумента Цикл
		Для Каждого СтрокаТаблицы Из Документ[ИмяТаблицы] Цикл
			ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
			
			Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиПоФизическимЛицам[ФизическоеЛицо] = Неопределено Тогда
				ТаблицыФизическогоЛица = Новый Структура;
				СтрокиПоФизическимЛицам.Вставить(ФизическоеЛицо, ТаблицыФизическогоЛица);
			Иначе
				ТаблицыФизическогоЛица = СтрокиПоФизическимЛицам[ФизическоеЛицо];
			КонецЕсли;
			
			Если Не ТаблицыФизическогоЛица.Свойство(ИмяТаблицы) Тогда
				ТаблицыФизическогоЛица.Вставить(ИмяТаблицы, Новый Массив);
			КонецЕсли;
			
			Если ЗаполнятьИдентификаторы Тогда
				ТаблицыФизическогоЛица[ИмяТаблицы].Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
			Иначе
				НоваяСтрока = НоваяСтрокаДанныхПоСотрудникам(ТаблицыФизическогоЛица[ИмяТаблицы], ШаблонСтрок[ИмяТаблицы]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокиПоФизическимЛицам;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИдентификаторСтрокиФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, Идентификатор)
	ДобавитьИдентификаторСтрокиФизическогоЛицаБезКонтекста(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо, ИмяТаблицы, Идентификатор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьИдентификаторСтрокиФизическогоЛицаБезКонтекста(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо, ИмяТаблицы, Идентификатор)
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо);
	
	СтрокиТаблицы = Неопределено;
	Если Не СтрокиТаблицФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицы) Тогда
		СтрокиТаблицы = Новый Массив;
		СтрокиТаблицФизическогоЛица.Вставить(ИмяТаблицы, СтрокиТаблицы);
	КонецЕсли;
	
	Если СтрокиТаблицы.Найти(Идентификатор) = Неопределено Тогда
		СтрокиТаблицы.Добавить(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИдентификаторСтрокиФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, Идентификатор)
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицДокументаПоФизическимЛицам.Получить(ФизическоеЛицо);
	Если СтрокиТаблицФизическогоЛица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицы = Неопределено;
	Если Не СтрокиТаблицФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицы) Тогда
		Возврат
	КонецЕсли;
	
	Индекс = СтрокиТаблицы.Найти(Идентификатор);
	Если Индекс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицы.Удалить(Индекс);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИдентификаторыСтрокФизическогоЛица(ФизическоеЛицо, ИмяТаблицы, Идентификаторы, ДополнятьИдентификаторы)
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицФизическогоЛица = СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо);
	Если ДополнятьИдентификаторы Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиТаблицФизическогоЛица[ИмяТаблицы], Идентификаторы);
	Иначе
		СтрокиТаблицФизическогоЛица.Вставить(ИмяТаблицы, Идентификаторы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиТаблицФизическогоЛица(СтрокиТаблицДокументаПоФизическимЛицам, ФизическоеЛицо)
	
	Если СтрокиТаблицДокументаПоФизическимЛицам = Неопределено Тогда
		СтрокиТаблицПоФизическимЛицам = Новый Соответствие;
	ИначеЕсли СтрокиТаблицДокументаПоФизическимЛицам.Получить(ФизическоеЛицо) = Неопределено Тогда
		СтрокиТаблицПоФизическимЛицам = Новый Соответствие(СтрокиТаблицДокументаПоФизическимЛицам);
	Иначе
		Возврат СтрокиТаблицДокументаПоФизическимЛицам[ФизическоеЛицо];
	КонецЕсли;
	
	СтрокиТаблицФизическогоЛица = Новый Структура;
	СтрокиТаблицПоФизическимЛицам.Вставить(ФизическоеЛицо, СтрокиТаблицФизическогоЛица);
	СтрокиТаблицДокументаПоФизическимЛицам = Новый ФиксированноеСоответствие(СтрокиТаблицПоФизическимЛицам);
	
	Возврат СтрокиТаблицДокументаПоФизическимЛицам[ФизическоеЛицо];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицыДокументаСДаннымиФизическихЛиц()
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("Взносы");
	ТаблицыДокумента.Добавить("РасчетРезервов");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтрокаДанныхПоСотрудникам(ТаблицаДанных, ШаблонСтроки)
	
	НоваяСтрока = Новый Структура(ШаблонСтроки);
	ТаблицаДанных.Добавить(НоваяСтрока);
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйСтруктураТаблицДокумента()
	
	СтруктураТаблиц = Новый Структура("СодержимоеДокумента,ШаблонСтрокТаблиц", Новый Структура, Новый Структура);
	ТаблицыСодержимогоДокумента = РезервыПоОплатеТруда.НовыйСодержимоеДокументаРасчетаРезервов();
	Для Каждого КлючИЗначение Из ТаблицыСодержимогоДокумента Цикл
		ТаблицаЗначений = КлючИЗначение.Значение;
		СтруктураСтрокой = "";
		НужнаЗапятая = Ложь;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Если НужнаЗапятая Тогда
				СтруктураСтрокой = СтруктураСтрокой + ",";
			КонецЕсли;
			СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
			НужнаЗапятая = Истина;
		КонецЦикла;
		СтруктураТаблиц.ШаблонСтрокТаблиц.Вставить(КлючИЗначение.Ключ, Новый ФиксированнаяСтруктура(СтруктураСтрокой));
		СтруктураТаблиц.СодержимоеДокумента.Вставить(КлючИЗначение.Ключ, Новый Массив);
	КонецЦикла;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьНачисленияПодробно(Форма)
	
	ВидимостьПолейПодробно = Форма.Элементы.НачисленияПодробно.Пометка;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияГруппаНормативы",
		"Видимость",
		Не Форма.ЭтоИнвентаризация
		И ((Форма.ФормироватьРезервНУ И Форма.НормативныйМетодНУ) Или Форма.НормативныйМетодБУ)
		И ВидимостьПолейПодробно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияНормативОтчисленийВРезерв",
		"Видимость",
		Не Форма.ЭтоИнвентаризация
		И Форма.НормативныйМетодБУ
		И ВидимостьПолейПодробно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияНормативОтчисленийВРезервНУ",
		"Видимость",
		Не Форма.ЭтоИнвентаризация
		И (Форма.ФормироватьРезервНУ И Форма.НормативныйМетодНУ)
		И ВидимостьПолейПодробно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияПериод",
		"Видимость",
		ЗначениеЗаполнено(Форма.Объект.Резерв)
			И Не Форма.НормативныйМетодБУ
			И ВидимостьПолейПодробно);
		
	// видимость полей по виду резерва
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияГруппаНормаВремениДней",
		"Видимость",
		НЕ Форма.ЭтоРезервОтпусков И Не Форма.НормативныйМетодБУ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияГруппаНормаВремениЧасов",
		"Видимость",
		НЕ Форма.ЭтоРезервОтпусков И Не Форма.НормативныйМетодБУ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатыНачисления",
		"Видимость",
		НЕ Форма.ЭтоРезервОтпусков И Не Форма.НормативныйМетодБУ);
	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияГруппаОплаченоДней",
		"Видимость",
		НЕ Форма.ЭтоРезервОтпусков И Не Форма.НормативныйМетодБУ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияГруппаОплаченоЧасов",
		"Видимость",
		НЕ Форма.ЭтоРезервОтпусков И Не Форма.НормативныйМетодБУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВзносыПодробно(Форма)
	
	ВидимостьПолейПодробно = Форма.Элементы.ВзносыПодробно.Пометка;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВзносыГруппаПоказателиРасчета",
		"Видимость",
		ВидимостьПолейПодробно);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтражениеВУчетеНаКлиенте()
	
	Результат = ОбновитьОтражениеВУчетеНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтотОбъект, Ложь, РассчитыватьДокументыПриРедактировании);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОтражениеВУчетеНаСервере()
	
	ПараметрыЗаполнения = Новый Структура("Объект", СформироватьОписаниеДокумента());
	
	НаименованиеЗадания = НСтр("ru = 'Пересчет документа ""Резервы по оплате труда""';
								|en = 'The ""Payroll funds"" document recalculation'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.РезервыПоОплатеТруда.ОбновитьОтражениеВУчете", 
		ПараметрыЗаполнения, 
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеДокумента()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ОписаниеДокумента = Новый Структура("Ссылка,
		|Организация, Дата, МесяцНачисления,
		|КорректировкаОбязательств");
	ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ТекущийОбъект);
	
	ОписаниеДокумента.Вставить("Начисления",                          ТекущийОбъект.Начисления.Выгрузить());
	ОписаниеДокумента.Вставить("Взносы",                              ТекущийОбъект.Взносы.Выгрузить());
	ОписаниеДокумента.Вставить("РасчетРезервов",                      ТекущийОбъект.РасчетРезервов.Выгрузить());
	ОписаниеДокумента.Вставить("ОценочныеОбязательства",              ТекущийОбъект.ОценочныеОбязательства.Выгрузить());
	ОписаниеДокумента.Вставить("ФизическиеЛица",                      ТекущийОбъект.ФизическиеЛица.Выгрузить());
	ОписаниеДокумента.Вставить("ОценочныеОбязательстваПоСотрудникам", ТекущийОбъект.ОценочныеОбязательстваПоСотрудникам.Выгрузить());
	ОписаниеДокумента.Вставить("ИзмененныеДанные",                    ИзмененныеДанные.Выгрузить());
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультат()
		
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если Результат.Свойство("Объект") Тогда
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		
		РезультатОбъект = Результат.Объект;
		
		ТекущийОбъект.РасчетРезервов.Загрузить(РезультатОбъект.РасчетРезервов);
		ТекущийОбъект.ОценочныеОбязательства.Загрузить(РезультатОбъект.ОценочныеОбязательства);
		ТекущийОбъект.ОценочныеОбязательстваПоСотрудникам.Загрузить(РезультатОбъект.ОценочныеОбязательстваПоСотрудникам);
		ТекущийОбъект.ФизическиеЛица.Загрузить(РезультатОбъект.ФизическиеЛица);
		
		ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
		
	КонецЕсли;
	
	ИзмененныеДанные.Очистить();
	
	ЗаполнитьДобавленныеКолонкиТаблицПоказателямиУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаДоходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.АналитикаДоходовПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиИАналитикуЗначениямиПоУмолчанию()
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРезервовПоОплатеТруда.Начисление")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Резерв)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = РезервыПоОплатеТрудаУП.СтатьиДоходовИРасходовПоУмолчанию(Объект.Организация, Объект.ВидОперации, Объект.Резерв);
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДоходов) И ЗначениеЗаполнено(ЗначенияЗаполнения.СтатьяДоходов) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияЗаполнения, "СтатьяДоходов, АналитикаДоходов");
		ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.СтатьяДоходов);
	КонецЕсли;
	
	ДоходыИРасходыСервер.ОбновитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
СотрудникиКРасчету = Новый Соответствие;

#КонецОбласти
