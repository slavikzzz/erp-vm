#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗарплатаКадры.ПриСозданииНаСервереФормыСДинамическимСписком(ЭтотОбъект, "Список");
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "Организация", Параметры.Отбор.Организация);
			
		Параметры.Отбор.Удалить("Организация");
			
	КонецЕсли; 
		
	Если Параметры.Отбор.Свойство("МесяцНачисления") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "МесяцНачисления", Параметры.Отбор.МесяцНачисления);
			
		Параметры.Отбор.Удалить("МесяцНачисления");
			
	КонецЕсли; 
	
	Если Параметры.РежимВыбора = Истина Тогда
		Элементы.Список.РежимВыбора = Истина;
		Элементы.Список.МножественныйВыбор = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.КоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервереФормыСписка(ЭтотОбъект, "Список");
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	СтруктураПараметровОтбора = Новый Структура();
	ЗарплатаКадры.ДобавитьПараметрОтбора(СтруктураПараметровОтбора, "Подразделение",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), НСтр("ru = 'Подразделение';
																				|en = 'Business unit'"));
		
	УстановитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура Подключаемый_ПараметрОтбораПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ПараметрОтбораНаФормеСДинамическимСпискомПриИзменении(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыДокументаРезервыПоОплатеТруда");

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыНовогоДокументаРезервыПоОплатеТруда");

КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, Настройки);
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ЗарплатаКадры.ПроверитьПользовательскиеНастройкиДинамическогоСписка(ЭтотОбъект, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьСписание(Команда)
	
	СоздатьДокументРезервыПоОплатеТрудаПоВидуОперации("Списание");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачисление(Команда)
	
	СоздатьДокументРезервыПоОплатеТрудаПоВидуОперации("Начисление");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировка(Команда)
	
	СоздатьДокументРезервыПоОплатеТрудаПоВидуОперации("Корректировка");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнвентаризация(Команда)
	
	СоздатьДокументРезервыПоОплатеТрудаПоВидуОперации("Инвентаризация");
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление(Форма)
	
	НастройкиОбменаБП3 = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3");
		НастройкиОбменаБП3 = Модуль.НастройкиОбмена();
	КонецЕсли;
	
	НастройкиОбменаБП3УниверсальныйФормат = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиУниверсальныйФормат");
		НастройкиОбменаБП3УниверсальныйФормат = Модуль.НастройкиОбменаБП3();
	КонецЕсли;
	
	Если НастройкиОбменаБП3 = Неопределено И НастройкиОбменаБП3УниверсальныйФормат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьОбменПоВсемОрганизациям = Ложь;
	ОрганизацииОбмена = Новый Массив;
	Если НастройкиОбменаБП3 <> Неопределено Тогда
		ИспользоватьОбменПоВсемОрганизациям = НастройкиОбменаБП3.ИспользуетсяОбменПоВсемОрганизациям;
		Для каждого ЭлементКоллекции Из НастройкиОбменаБП3.ИспользованиеОбменаПоОрганизациям Цикл
			Если ЭлементКоллекции.Значение Тогда
				ОрганизацииОбмена.Добавить(ЭлементКоллекции.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НастройкиОбменаБП3УниверсальныйФормат <> Неопределено Тогда
		ИспользоватьОбменПоВсемОрганизациям = ИспользоватьОбменПоВсемОрганизациям Или НастройкиОбменаБП3УниверсальныйФормат.ИспользуетсяОбменПоВсемОрганизациям;
		Для каждого ЭлементКоллекции Из НастройкиОбменаБП3УниверсальныйФормат.ИспользованиеОбменаПоОрганизациям Цикл
			Если ЭлементКоллекции.Значение Тогда
				ОрганизацииОбмена.Добавить(ЭлементКоллекции.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОрганизацииОбмена = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОрганизацииОбмена);
	
	Если Не ИспользоватьОбменПоВсемОрганизациям Тогда
		Условие = "
		|	ВЫБОР
		|		КОГДА ДокументРезервыПоОплатеТруда.Организация В (&Организации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользуетсяОбмен";
		
		ТекстЗапроса = Форма.Список.ТекстЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ИспользуетсяОбмен", Условие);
		Форма.Список.ТекстЗапроса = ТекстЗапроса;
		Список.Параметры.УстановитьЗначениеПараметра("Организации", ОрганизацииОбмена);
	КонецЕсли;
	
	ЭлементОформления = Форма.Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование	= Истина;
	
	ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование	= Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ОбязательстваОтраженыВБухучете");
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Проведен");
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	Если Не ИспользоватьОбменПоВсемОрганизациям Тогда
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ИспользуетсяОбмен");
		ЭлементОтбора.ПравоеЗначение	= Истина;
		
	КонецЕсли;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументРезервыПоОплатеТрудаПоВидуОперации(ИмяВидаОперации)
	
	ЗначенияЗаполнения = ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРезервовПоОплатеТруда." + ИмяВидаОперации));
	ОткрытьФорму("Документ.РезервыПоОплатеТруда.Форма.ФормаДокумента", Новый Структура ("ЗначенияЗаполнения",  ЗначенияЗаполнения), ЭтаФорма);
	
КонецПроцедуры

#Область ЗначенияЗаполненияДинамическогоСписка

// Превращаем отборы динамического списка в значения заполнения при программном вводе новой строки в список

&НаСервере
Функция ЗначенияЗаполненияДинамическогоСписка(Знач КомпоновщикНастроек) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	НастройкиСписка = КомпоновщикНастроек.ПолучитьНастройки();
	ДобавитьЗначенияЗаполнения(НастройкиСписка.Отбор.Элементы, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;

КонецФункции 

&НаСервере
Процедура ДобавитьЗначенияЗаполнения(КоллекцияОтборов, ЗначенияЗаполнения)

	Для каждого ЭлементОтбора Из КоллекцияОтборов Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			
			НаименованиеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрНайти(НаименованиеОтбора, ".") = 0 Тогда
				ЗначенияЗаполнения.Вставить(НаименованиеОтбора, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ТипГруппы <> ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			
			ДобавитьЗначенияЗаполнения(ЭлементОтбора.Элементы, ЗначенияЗаполнения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьДинамическийСписокНаСервере(ОписаниеМодификации) Экспорт
	ЗарплатаКадрыРасширенный.НастроитьДинамическийСписокПоОписаниюМодификации(ЭтаФорма, ОписаниеМодификации);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПараметрМодификацииВыбор(Элемент, ИмяПараметра, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ПараметрМодификацииОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент.Родитель.Имя, ИмяПараметра);
	
КонецПроцедуры

#КонецОбласти
