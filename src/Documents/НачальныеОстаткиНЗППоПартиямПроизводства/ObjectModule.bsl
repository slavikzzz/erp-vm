#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("АдресРезультата") Тогда
			РезультатРаспределения = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресРезультата);
		Иначе
			РезультатРаспределения = ДанныеЗаполнения;
		КонецЕсли;
		
		Если РезультатРаспределения.Свойство("РеквизитыШапки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатРаспределения.РеквизитыШапки);
		КонецЕсли;
		
		Если РезультатРаспределения.Свойство("МатериалыИРаботы")
			И Не РезультатРаспределения.МатериалыИРаботы = Неопределено Тогда
			МатериалыИРаботы.Загрузить(РезультатРаспределения.МатериалыИРаботы);
		КонецЕсли;
		
		Если РезультатРаспределения.Свойство("Трудозатраты")
			И Не РезультатРаспределения.Трудозатраты = Неопределено Тогда
			Трудозатраты.Загрузить(РезультатРаспределения.Трудозатраты);
		КонецЕсли;
		
		Если РезультатРаспределения.Свойство("ПрочиеРасходы")
			И Не РезультатРаспределения.ПрочиеРасходы = Неопределено Тогда
			ПрочиеРасходы.Загрузить(РезультатРаспределения.ПрочиеРасходы);
		КонецЕсли;
		
	//++ НЕ УТКА
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НачальныеОстаткиНЗППоПодразделениям") Тогда
		ЗаполнитьНаОснованииНачальныхОстатковНЗППоПодразделениям(ДанныеЗаполнения);
	//-- НЕ УТКА
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка." + Метаданные().Имя) Тогда
		
		ИсправлениеДокументов.ЗаполнитьИсправление(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыЗаполнения = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.ПараметрыЗаполненияВидовДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ВидДеятельностиНДС, ПараметрыЗаполнения);
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИсправлениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	ИнициализироватьДокумент();
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ПриКопировании(
		ЭтотОбъект,
		ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	#Область Таблица_МатериалыИРаботы
	
	ПараметрыПроверкиХарактеристик			= НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверкиХарактеристик.ИмяТЧ	= "МатериалыИРаботы";
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект,
		МассивНепроверяемыхРеквизитов,
		Отказ,
		ПараметрыПроверкиХарактеристик);
	
	ПараметрыУказанияСерий =
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.НачальныеОстаткиНЗППоПартиямПроизводства);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		ПараметрыУказанияСерий,
		Отказ,
		МассивНепроверяемыхРеквизитов);
	
	ПараметрыПроверкиКоличества			= НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверкиКоличества.ИмяТЧ	= "МатериалыИРаботы";
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект,
		ПроверяемыеРеквизиты,
		Отказ,
		ПараметрыПроверкиКоличества);
	
	#КонецОбласти
	
	#Область Таблица_ПрочиеРасходы
	
	#Область ПроверкаСтатейИАналитик
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
		
	#КонецОбласти
	
	#Область ПроверкаПравилОтнесенияНаВыпуск

	МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.ПравилоОтнесенияНаВыпускУпр");
	МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.ПравилоОтнесенияНаВыпускРегл");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиРасходов.Ссылка КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ВариантРаспределенияРасходовУпр В (ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты), ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроверятьПравилоУпр,
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ВариантРаспределенияРасходовРегл В (ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты), ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроверятьПравилоРегл
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Ссылка В(&СтатьиРасходов)";
	
	Запрос.УстановитьПараметр("СтатьиРасходов", ПрочиеРасходы.ВыгрузитьКолонку("СтатьяРасходов"));
	
	РеквизитыСтатейРасходов = Запрос.Выполнить().Выгрузить();
	РеквизитыСтатейРасходов.Индексы.Добавить("СтатьяРасходов");
	
	ШаблонСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""Прочие расходы"" не заполнено поле ""%ИмяПоля%"".';
							|en = '""%ИмяПоля%"" in line %НомерСтроки% of the list ""Other expenses"" is required.'");
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	
	Для Каждого ТекСтрока Из ПрочиеРасходы Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НомерСтроки%", ТекСтрока.НомерСтроки);
		
		РеквизитыСтатьи = РеквизитыСтатейРасходов.Найти(ТекСтрока.СтатьяРасходов);
		Если РеквизитыСтатьи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСтатьи.ПроверятьПравилоУпр
			И Не ЗначениеЗаполнено(ТекСтрока.ПравилоОтнесенияНаВыпускУпр) Тогда
			
			СообщениеОбОшибке = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", НСтр("ru = 'Правило отнесения на выпуск (упр.)';
																				|en = 'Rule of allocating to release (manag.)'"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ТекСтрока.НомерСтроки, "ПравилоОтнесенияНаВыпускУпр");
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, КлючДанных , Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если РеквизитыСтатьи.ПроверятьПравилоРегл
			И Не ЗначениеЗаполнено(ТекСтрока.ПравилоОтнесенияНаВыпускРегл) Тогда
			
			СообщениеОбОшибке = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", НСтр("ru = 'Правило отнесения на выпуск (регл.)';
																				|en = 'Rule of allocating to release (local)'"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ТекСтрока.НомерСтроки, "ПравилоОтнесенияНаВыпускРегл");
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, КлючДанных , Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ПроверкаНДС
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыПроверки.ИмяТабличнойЧасти						= "ПрочиеРасходы";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов			= "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов			= "АналитикаРасходов";
	
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(
		ЭтотОбъект,
		ВидДеятельностиНДС,
		ПараметрыПроверки,
		Отказ);
	
	#КонецОбласти
	
	ИсправлениеДокументов.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ОбработкаПроверкиЗаполнения(
		ЭтотОбъект,
		Отказ,
		ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).ЭтоНовый Тогда
		ПолучитьСсылкуНового();
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Для Каждого СтрокаЗатраты Из ПрочиеРасходы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаЗатраты.ПравилоОтнесенияНаВыпускРегл) Тогда
			
			СтрокаЗатраты.СуммаВР = 0;
			СтрокаЗатраты.СуммаПР = 0;
			СтрокаЗатраты.СуммаРегл = 0;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗатраты.ПравилоОтнесенияНаВыпускУпр) Тогда
			СтрокаЗатраты.Сумма = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента =
		МатериалыИРаботы.Итог("Сумма")
		+ Трудозатраты.Итог("Сумма")
		+ ПрочиеРасходы.Итог("Сумма");
	
	// Обработка смены реквизитов
	Если Не ЭтоНовый() Тогда
		СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления");
		ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи", СтарыеЗначения.ПометкаУдаления);
	Иначе
		ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи", Ложь);
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьКлючиАналитики();
		ЗаполнитьВидыЗапасов(Отказ);
	КонецЕсли;
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ПередЗаписью(
		ЭтотОбъект,
		Отказ,
		РежимЗаписи,
		РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ПриЗаписи(
		ЭтотОбъект,
		Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ОбработкаПроведения(
		ЭтотОбъект,
		Отказ,
		РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ОбработкаУдаленияПроведения(
		ЭтотОбъект,
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Организация		= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ВидЦены			= Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ(ВидЦены);
	Ответственный	= Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#Область ВводНаОсновании

//++ НЕ УТКА

Процедура ЗаполнитьНаОснованииНачальныхОстатковНЗППоПодразделениям(Основание) Экспорт
	
	ДокументОснование = Основание;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Основание,
		"Организация, Подразделение, Дата, НаправлениеДеятельности");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования);
	
	РезультатРаспределения = Документы.НачальныеОстаткиНЗППоПодразделениям.РаспределитьНачальныеОстаткиПоПартиямПроизводства(Основание);
	
	Если РезультатРаспределения.Свойство("МатериалыИРаботы")
		И Не РезультатРаспределения.МатериалыИРаботы = Неопределено Тогда
		МатериалыИРаботы.Загрузить(РезультатРаспределения.МатериалыИРаботы);
	КонецЕсли;
	
	Если РезультатРаспределения.Свойство("Трудозатраты")
		И Не РезультатРаспределения.Трудозатраты = Неопределено Тогда
		Трудозатраты.Загрузить(РезультатРаспределения.Трудозатраты);
	КонецЕсли;
	
	Если РезультатРаспределения.Свойство("ПрочиеРасходы")
		И Не РезультатРаспределения.ПрочиеРасходы = Неопределено Тогда
		ПрочиеРасходы.Загрузить(РезультатРаспределения.ПрочиеРасходы);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

Процедура ЗаполнитьКлючиАналитики()
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
		Перечисления.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства,
		Подразделение,
		Подразделение,
		Неопределено);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Вставить("Назначение",			"Назначение");
	ИменаПолей.Вставить("Серия",				"Серия");
	ИменаПолей.Вставить("СтатусУказанияСерий",	"СтатусУказанияСерий");
	ИменаПолей.Вставить("СтатьяКалькуляции",	"СтатьяКалькуляции");
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(МатериалыИРаботы, МестаУчета, ИменаПолей);
	
КонецПроцедуры

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, МатериалыИРаботы);
	
КонецПроцедуры

// Функция формирует временные таблицы данных документа.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура	КАК Номенклатура,
	|	ТаблицаТоваров.ВидЗапасов	КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтИсходнаяТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ &ПерезаполнитьВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки									КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура									КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Проведен
	|			ТОГДА ТаблицаТоваров.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ														КАК ТекущийВидЗапасов,
	|	ЛОЖЬ														КАК ЭтоВозвратнаяТара,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)					КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)				КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)		КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)	КАК НалогообложениеОрганизации,
	|	НЕОПРЕДЕЛЕНО												КАК ВладелецТовара,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)		КАК ВидЦены
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ВтИсходнаяТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтИсходнаяТаблицаТоваров
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаТоваров", МатериалыИРаботы);
	Запрос.УстановитьПараметр("Проведен", Проведен);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект, Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли