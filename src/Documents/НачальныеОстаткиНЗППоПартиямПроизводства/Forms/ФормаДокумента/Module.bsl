#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление(); 
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	КомандыЗаполнения = Новый Массив();
	КомандыЗаполнения.Добавить(Элементы.ПрочиеРасходыЗаполнитьПравилоОтнесенияНаВыпускРегл);
	КомандыЗаполнения.Добавить(Элементы.ПрочиеРасходыЗаполнитьПравилоОтнесенияНаВыпуск);
	
	Если Объект.Исправление Тогда
		Для Каждого КомандаЗаполнения Из КомандыЗаполнения Цикл
			КомандаЗаполнения.Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПараметрыВыбораСтатейИАналитик = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
	Оповестить("Запись_НачальныеОстаткиНЗППоПартиямПроизводства", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.МодификацияКонфигурации
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.МодификацияКонфигурации
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизитыФормы();
	ЗаполнитьПринимаетсяКНУПоУмолчанию("МатериалыИРаботы");
	ЗаполнитьПринимаетсяКНУПоУмолчанию("Трудозатраты");
	
	ЗаполнитьПараметрыУказанияСерий();
	УстановитьВидимостьЭлементовСерий();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.МатериалыИРаботы, СтруктураДействий, Неопределено);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Трудозатраты, СтруктураДействий, Неопределено);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		ТекущиеДанные = Элементы.МатериалыИРаботы.ДанныеСтроки(ВыбранноеЗначение.ИдентификаторТекущейСтроки);
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаСтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	АктуализироватьОстаткиПодДеятельность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьВалютуРеглУчета();
	
	АктуализироватьОстаткиПодДеятельность();
	УстановитьВидимость();
	УстановитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности(ЭтотОбъект);
	АктуализироватьОстаткиПодДеятельность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиНДСОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыПередУдалением(Элемент, Отказ)
	
	ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ПринимаетсяКНУ = Истина;
	КонецЕсли;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.МатериалыИРаботы, ЭтотОбъект);
	ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ПараметрыУказанияСерий,
			ТекущаяСтрокаИдентификатор,
			КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПартияПроизводстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартияПроизводстваНачалоВыбора("МатериалыИРаботы", Элементы.МатериалыИРаботы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущиеДанные, ЭтаФорма, СтруктураДействий);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтаФорма, СтруктураДействий);
	ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, Объект.Подразделение, ПараметрыУказанияСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ХарактеристикаПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы", ИмяФормы));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение						= Элементы.МатериалыИРаботы.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки	= Элементы.МатериалыИРаботы.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, Элементы.МатериалыИРаботы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	ТекущиеДанные.СуммаБезНДС = ТекущиеДанные.Сумма;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСуммаРеглПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСуммаНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСуммаПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	Если ТекущиеДанные.ПринимаетсяКНУ Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ПринимаетсяКНУ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПартияПроизводстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартияПроизводстваНачалоВыбора("Трудозатраты", Элементы.Трудозатраты, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыВидРаботПриИзменении(Элемент)
	
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ТрудозатратыВидРаботПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные.НормативнаяСумма	= ТекущиеДанные.Количество * ТекущиеДанные.НормативнаяРасценка;
	ТекущиеДанные.СуммаБезНДС		= ТекущиеДанные.Сумма;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ТрудозатратыВидРаботПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные						= Объект.Трудозатраты.НайтиПоИдентификатору(Идентификатор);
	ТекущиеДанные.НормативнаяРасценка	= Справочники.ВидыРаботСотрудников.ДействующаяРасценкаВидаРабот(ТекущиеДанные.ВидРабот, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные					= Элементы.Трудозатраты.ТекущиеДанные;
	ТекущиеДанные.НормативнаяСумма	= ТекущиеДанные.Количество * ТекущиеДанные.НормативнаяРасценка;
	ТекущиеДанные.СуммаБезНДС		= ТекущиеДанные.Сумма;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыНормативнаяРасценкаПриИзменении(Элемент)
	
	ТекущиеДанные					= Элементы.Трудозатраты.ТекущиеДанные;
	ТекущиеДанные.НормативнаяСумма	= ТекущиеДанные.Количество * ТекущиеДанные.НормативнаяРасценка;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыНормативнаяСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
		ТекущиеДанные.НормативнаяРасценка = Окр(ТекущиеДанные.НормативнаяСумма / ТекущиеДанные.Количество, 2);
	Иначе
		ТекущиеДанные.НормативнаяРасценка = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСуммаРеглПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСуммаНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСуммаПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	Если ТекущиеДанные.ПринимаетсяКНУ Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ДоходыИРасходыКлиентСервер.ПриДобавленииСтрокиВТаблицу(ЭтотОбъект, ТекущиеДанные, "Объект.ПрочиеРасходы");
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные.ПринимаетсяКНУ = Истина;
		ТекущиеДанные.ПравилоОтнесенияНаВыпускУпр =
			ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам");
		ТекущиеДанные.ПравилоОтнесенияНаВыпускРегл =
			ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам");
		
	КонецЕсли;
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ПрочиеРасходы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПартияПроизводстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартияПроизводстваНачалоВыбора("ПрочиеРасходы", Элементы.ПрочиеРасходы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовПриИзменении(Элемент)
	
	ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы.ПрочиеРасходыСтатьяРасходов);
	
	ЗаполнитьВариантыРаспределенияСтатейРасходов(Элементы.ПрочиеРасходы.ТекущаяСтрока);
	
	РеквизитыСтатьи = Новый Структура;
	РеквизитыСтатьи.Вставить("СтатьяКалькуляции");
	РеквизитыСтатьи.Вставить("БазаРаспределенияПоПартиямУпр", "ПравилоРаспределенияРасходовУпр.БазаРаспределенияПоПартиям");
	РеквизитыСтатьи.Вставить("БазаРаспределенияПоПартиямРегл", "ПравилоРаспределенияРасходовРегл.БазаРаспределенияПоПартиям");
	
	СтрокаТаблицы = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Элементы.ПрочиеРасходы.ТекущаяСтрока);
	РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.СтатьяРасходов, РеквизитыСтатьи);
	
	ПравилаОтнесенияНаВыпуск = ПравилаОтнесенияНаВыпуск();
	
	СтрокаТаблицы.СтатьяКалькуляции			= РеквизитыСтатьи.СтатьяКалькуляции;
	СтрокаТаблицы.ПравилоОтнесенияНаВыпускУпр	= ПравилаОтнесенияНаВыпуск[РеквизитыСтатьи.БазаРаспределенияПоПартиямУпр];
	СтрокаТаблицы.ПравилоОтнесенияНаВыпускРегл	= ПравилаОтнесенияНаВыпуск[РеквизитыСтатьи.БазаРаспределенияПоПартиямРегл];
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакПринимаетсяКНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	Если ТекущиеДанные.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты")
		Или ТекущиеДанные.ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства") Тогда
		
		СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
		СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
		СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
		СтруктураДействий.Вставить("ПересчитатьСуммуВР");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаРеглПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПР", КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	Если ТекущиеДанные.ПринимаетсяКНУ Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


#Область КомандыОбъекта

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТабличнойЧастиМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОкруглитьДоЦелойУпаковки(Команда)
	
	ОкруглитьДоЦелойУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыРазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкодуВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)

	ОткрытьПодборСерий();

КонецПроцедуры

#КонецОбласти

#Область КомандыТабличнойЧастиТрудозатраты

&НаКлиенте
Процедура ТрудозатратыРазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТабличнойЧастиПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ПрочиеРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыЗаполнитьПравилоОтнесенияНаВыпускУпр(Команда)
	
	ЗаполнитьПравилоОтнесенияНаВыпуск("Упр");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыЗаполнитьПравилоОтнесенияНаВыпускРегл(Команда)
	
	ЗаполнитьПравилоОтнесенияНаВыпуск("Регл");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗаполненияТабличнойЧастиОбщие

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the product cost element.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТипыЗатрат = Новый Массив;
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы"));
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда"));
	ИначеЕсли ИмяТЧ = "ПрочиеРасходы" Тогда
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Амортизация"));
		ТипыЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Прочее"));
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипЗатрат", Новый ФиксированныйМассив(ТипыЗатрат));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ",				ИмяТЧ);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки",	ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Справочник.СтатьиКалькуляции.ФормаВыбора",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПартиямПроизводства.Форма.ФормаДокумента.ЗаполнитьСтатьюКалькуляцииЗавершение");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитТЧЗавершениеСервер("СтатьяКалькуляции", Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилоОтнесенияНаВыпуск(ВидУчета)
	
	ДоступныеВариантыОтнесенияНаВыпуск = Новый Массив;
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять"));
	
	ВыделенныеСтроки = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.ПрочиеРасходы.ВыделенныеСтроки Цикл
		ТекСтрока = Объект.ПрочиеРасходы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ДоступныеВариантыОтнесенияНаВыпуск.Найти(ТекСтрока["ВариантРаспределенияРасходов" + ВидУчета]) = Неопределено Тогда
			ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить правило отнесения на выпуск.';
									|en = 'Select the lines for which it is required to populate the rule of allocating to release.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	МассивПравил = Новый Массив;
	МассивПравил.Добавить(ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам"));
	МассивПравил.Добавить(ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам"));
	МассивПравил.Добавить(ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков"));
	МассивПравил.Добавить(ПредопределенноеЗначение("Перечисление.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам"));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка", Новый ФиксированныйМассив(МассивПравил));
	
	ПараметрыФормы.Вставить("Отбор",				СтруктураОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ",				"ПрочиеРасходы");
	ДополнительныеПараметры.Вставить("ВидУчета",			ВидУчета);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки",	ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПравилоОтнесенияНаВыпускЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Перечисление.ПравилаОтнесенияНаВыпуск.ФормаВыбора",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравилоОтнесенияНаВыпускЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПартиямПроизводства.Форма.ФормаДокумента.ЗаполнитьПравилоОтнесенияНаВыпускЗавершение");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитТЧЗавершениеСервер("ПравилоОтнесенияНаВыпуск", Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

#Область Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
												НавигационнаяСсылка = Неопределено,
												СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура МатериалыИРаботыЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайла("МатериалыИРаботы", НСтр("ru = 'Материалы и работы';
												|en = 'Materials and works'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайла("Трудозатраты", НСтр("ru = 'Трудозатраты';
											|en = 'Labor costs'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайла("ПрочиеРасходы", НСтр("ru = 'Прочие расходы';
											|en = 'Other expenses'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(ИмяТЧ, СинонимТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ",		ИмяТЧ);
	ДополнительныеПараметры.Вставить("СинонимТЧ",	СинонимТЧ);
	
	Если Не Объект[ИмяТЧ].Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица %1 будет перезаполнена. Продолжить?';
							|en = 'The table %1 will be refilled. Continue?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, СинонимТЧ);
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьФормуЗагрузкиИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьФормуЗагрузкиИзФайла(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияФормы

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыФормы();
	
	ЗаполнитьПринимаетсяКНУПоУмолчанию("МатериалыИРаботы");
	ЗаполнитьПринимаетсяКНУПоУмолчанию("Трудозатраты");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.МатериалыИРаботы, СтруктураДействий, Неопределено);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Трудозатраты, СтруктураДействий, Неопределено);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакПринимаетсяКНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПрочиеРасходы, СтруктураДействий, Неопределено);
	
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	ЗаполнитьПараметрыУказанияСерий();
	ЗаполнитьСтатусыУказанияСерийСервер();
	УстановитьВидимостьЭлементовСерий();
	
	АктуализироватьОстаткиПодДеятельность(Ложь);
	УстановитьВидимость();
	УстановитьДоступность();
	УстановитьЗаголовки();
	УстановитьПараметрыВыбораСтатьи();
	УстановитьПараметрыВыбораПравилаОтнесенияНаВыпуск();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область Таблица_МатериалыИРаботы
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
		"МатериалыИРаботыХарактеристика",
		"Объект.МатериалыИРаботы.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		ЭтаФорма,
		Ложь,
		"МатериалыИРаботыСтатусУказанияСерий",
		"Объект.МатериалыИРаботы.СтатусУказанияСерий");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма,
		Ложь,
		"МатериалыИРаботыСерия",
		"Объект.МатериалыИРаботы.СтатусУказанияСерий",
		"Объект.МатериалыИРаботы.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		"МатериалыИРаботыНазначение",
		"Объект.МатериалыИРаботы.ТипНоменклатуры",
		Ложь);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"МатериалыИРаботыНоменклатураЕдиницаИзмерения", 
		"Объект.МатериалыИРаботы.Упаковка");
	
	#КонецОбласти
	
	#Область Таблица_ПрочиеРасходы
	
	ДоступныеВариантыОтнесенияНаВыпуск = Новый СписокЗначений;
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	ДоступныеВариантыОтнесенияНаВыпуск.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства);
	
	#Область ПравилаОтнесенияНаВыпуск
	// Доступность правила отнесения на выпуск по вариантам распределения и типу затрат.
	// Упр.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПравилоОтнесенияНаВыпускУпр.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ВариантРаспределенияРасходовУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Регл.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПравилоОтнесенияНаВыпускРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ВариантРаспределенияРасходовРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	#КонецОбласти
	
	// Сумма упр.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ВариантРаспределенияРасходовУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Суммы регл.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаНУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаПР.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаВР.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ВариантРаспределенияРасходовРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ДоступныеВариантыОтнесенияНаВыпуск;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	// Видимость суммы регл.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаРегл.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыСуммаРегл.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыСуммаРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаУправленческогоУчета");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;
	
	ПрименяетсяПБУ18 = Ложь;
	ВедетсяУчетПостоянныхИВременныхРазниц = Ложь;
	
	//++ Локализация
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"УчетнаяПолитикаБухУчета",
		Объект.Организация,
		Объект.Дата);
	
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		ПрименяетсяПБУ18 = ПараметрыУчетнойПолитики.ПрименяетсяПБУ18;
		ВедетсяУчетПостоянныхИВременныхРазниц = ПараметрыУчетнойПолитики.ВедетсяУчетПостоянныхИВременныхРазниц;
	КонецЕсли;
	//-- Локализация
	
	Элементы.ПрочиеРасходыСуммаПР.Видимость = ВедетсяУчетПостоянныхИВременныхРазниц;
	Элементы.ПрочиеРасходыСуммаВР.Видимость = ВедетсяУчетПостоянныхИВременныхРазниц;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.НаправлениеДеятельности.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовки()
	
	Если ВалютаРасценокВидовРабот = ВалютаРегламентированногоУчета Тогда
		ЗаголовокСумма = НСтр("ru = 'Нормативная расценка';
								|en = 'Standard rate'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Нормативная расценка (%1)';
								|en = 'Standard rate (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаРасценокВидовРабот);
	КонецЕсли;
	
	Элементы.ТрудозатратыНормативнаяРасценка.Заголовок = ЗаголовокСумма;
	
	Если ВалютаРасценокВидовРабот = ВалютаРегламентированногоУчета Тогда
		ЗаголовокСумма = НСтр("ru = 'Нормативная сумма';
								|en = 'Standard amount'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Нормативная сумма (%1)';
								|en = 'Standard amount (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаРасценокВидовРабот);
	КонецЕсли;
	
	Элементы.ТрудозатратыНормативнаяСумма.Заголовок = ЗаголовокСумма;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		ЗаголовокСумма = НСтр("ru = 'Расценка';
								|en = 'Rate'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Расценка (%1)';
								|en = 'Rate (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаУправленческогоУчета);
	КонецЕсли;
	
	Элементы.ТрудозатратыЦена.Заголовок = ЗаголовокСумма;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		ЗаголовокСумма = НСтр("ru = 'Сумма';
								|en = 'Amount'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Сумма (%1)';
								|en = 'Amount (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаУправленческогоУчета);
	КонецЕсли;
	
	Элементы.МатериалыИРаботыСумма.Заголовок	= ЗаголовокСумма;
	Элементы.ТрудозатратыСумма.Заголовок		= ЗаголовокСумма;
	Элементы.ПрочиеРасходыСумма.Заголовок		= ЗаголовокСумма;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ЗаголовокСумма = НСтр("ru = 'Сумма регл.';
								|en = 'Local amount'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Сумма регл. (%1)';
								|en = 'Local amount (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.МатериалыИРаботыСуммаРегл.Заголовок	= ЗаголовокСумма;
	Элементы.ТрудозатратыСуммаРегл.Заголовок		= ЗаголовокСумма;
	Элементы.ПрочиеРасходыСуммаРегл.Заголовок		= ЗаголовокСумма;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ЗаголовокСумма = НСтр("ru = 'НУ';
								|en = 'TA'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'НУ (%1)';
								|en = 'TA (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.МатериалыИРаботыСуммаНУ.Заголовок	= ЗаголовокСумма;
	Элементы.ТрудозатратыСуммаНУ.Заголовок		= ЗаголовокСумма;
	Элементы.ПрочиеРасходыСуммаНУ.Заголовок		= ЗаголовокСумма;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ЗаголовокСумма = НСтр("ru = 'ПР';
								|en = 'PD'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'ПР (%1)';
								|en = 'PD (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.МатериалыИРаботыСуммаПР.Заголовок	= ЗаголовокСумма;
	Элементы.ТрудозатратыСуммаПР.Заголовок		= ЗаголовокСумма;
	Элементы.ПрочиеРасходыСуммаПР.Заголовок		= ЗаголовокСумма;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета
		Или Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ЗаголовокСумма = НСтр("ru = 'ВР';
								|en = 'TD'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'ВР (%1)';
								|en = 'TD (%1)'");
		ЗаголовокСумма = СтрШаблон(ТекстЗаголовка, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.МатериалыИРаботыСуммаВР.Заголовок	= ЗаголовокСумма;
	Элементы.ТрудозатратыСуммаВР.Заголовок		= ЗаголовокСумма;
	Элементы.ПрочиеРасходыСуммаВР.Заголовок		= ЗаголовокСумма;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСтатьи()
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства));
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходовИли", Новый ФиксированныйМассив(МассивВариантов)));
	
	Элементы.ПрочиеРасходыСтатьяРасходов.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСтатьи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПравилаОтнесенияНаВыпуск()
	
	ПараметрыВыбораПравила = Новый Массив;
	
	МассивПравил = Новый Массив;
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам);
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	МассивПравил.Добавить(Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	
	ПараметрыВыбораПравила.Добавить(
		Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивПравил)));
	
	Элементы.ПрочиеРасходыПравилоОтнесенияНаВыпускУпр.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПравила);
	Элементы.ПрочиеРасходыПравилоОтнесенияНаВыпускРегл.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПравила);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСлужебные

#Область КомандыТабличнойЧастиОбщие

&НаКлиенте
Процедура ОкруглитьДоЦелойУпаковки()
	
	ВыделенныеСтроки = Элементы.МатериалыИРаботы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо округлить количество.';
									|en = 'Select the lines for which the quantity should be rounded off.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВсегоСтрок = 0;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.МатериалыИРаботы.НайтиПоИдентификатору(Идентификатор);
		Если Цел(ДанныеСтроки.КоличествоУпаковок) = ДанныеСтроки.КоличествоУпаковок Тогда
			Продолжить;
		КонецЕсли;
		ВсегоСтрок = ВсегоСтрок + 1;
	КонецЦикла;
	
	Если ВсегоСтрок = 0 Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Округление не требуется';
				|en = 'Rounding is not required'"),, 
			НСтр("ru = 'В выбранных строках уже целое количество единиц.';
				|en = 'There is already a whole number of units in the selected lines.'"),
			БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'В выбранных строках количество будет округлено до целых единиц. 
							|Продолжить?';
							|en = 'The selected lines will be rounded up to integral units.
							|Continue?'");
							
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкруглитьДоЦелойУпаковкиЗавершение", ЭтотОбъект);
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
														|en = 'Continue'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьДоЦелойУпаковкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПартиямПроизводства.Форма.ФормаДокумента.ОкруглитьДоЦелойУпаковкиЗавершение");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОкруглитьДоЦелойУпаковкиНаСервере(КэшированныеЗначения);
	ТекстОповещения = НСтр("ru = 'В выбранных строках выполнено округление до целых единиц.';
							|en = 'The selected lines are rounded up to integral units.'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнено округление';
										|en = 'Rounded'"),, ТекстОповещения, БиблиотекаКартинок.Успешно32);
	
КонецПроцедуры

&НаСервере
Процедура ОкруглитьДоЦелойУпаковкиНаСервере(КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Новый Массив;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтаФорма, СтруктураДействий);
	
	Для Каждого Идентификатор Из Элементы.МатериалыИРаботы.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.МатериалыИРаботы.НайтиПоИдентификатору(Идентификатор);
		Если Цел(ДанныеСтроки.КоличествоУпаковок) = ДанныеСтроки.КоличествоУпаковок Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.КоличествоУпаковок = Цел(ДанныеСтроки.КоличествоУпаковок) + 1;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(Идентификатор);
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийСервер(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧ(ИмяТЧ)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПартиямПроизводства.Форма.ФормаДокумента.РазбитьСтрокуТЧ");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	//Заполнение параметров
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	Если ИмяТЧ = "Трудозатраты" Тогда
		ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	КонецЕсли;
	
	//Описание оповещения
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЗавершение", ЭтотОбъект, ИмяТЧ);
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(Объект[ИмяТЧ], Элементы[ИмяТЧ], Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЗавершение(НоваяСтрока, ИмяТЧ) Экспорт
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		
		ТекущиеДанные.НормативнаяСумма	= ТекущиеДанные.Количество * ТекущиеДанные.НормативнаяРасценка;
		ТекущиеДанные.СуммаБезНДС		= ТекущиеДанные.Сумма;
		
		НоваяСтрока.НормативнаяСумма	= НоваяСтрока.Количество * НоваяСтрока.НормативнаяРасценка;
		НоваяСтрока.СуммаБезНДС			= НоваяСтрока.Сумма;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличества(ЭтаФорма, СтруктураДействий);
		
	Иначе
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
		МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		ЗаполнитьСтатусыУказанияСерийСервер(МассивСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.НачальныеОстаткиНЗППоПартиямПроизводства.Форма.ФормаДокумента.ОбработатьШтрихкоды");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	СтруктураДействийДобавленные = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(Неопределено, ЭтаФорма, СтруктураДействийДобавленные);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтаФорма, СтруктураДействийДобавленные);
	
	СтруктураДействийИзмененные = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтаФорма, СтруктураДействийИзмененные);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.ИмяТЧ                                  = "МатериалыИРаботы";
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийДобавленные;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийИзмененные;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = Истина;
	СтруктураДействий.ТолькоТовары                           = Ложь;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий, КэшированныеЗначения, ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.МатериалыИРаботы.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(
		ЭтаФорма,
		Объект,
		СтруктураПараметровДействия,
		КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗаполненияТабличнойЧастиОбщие

&НаСервере
Процедура ЗаполнитьРеквизитТЧЗавершениеСервер(Реквизит, Результат, ДополнительныеПараметры)

	ТабличнаяЧасть		= Объект[ДополнительныеПараметры.ИмяТЧ];
	ВыделенныеСтроки	= ДополнительныеПараметры.ВыделенныеСтроки;
	Модифицированность	= Истина;
	
	ВидУчета = "";
	Если ДополнительныеПараметры.Свойство("ВидУчета") Тогда
		ВидУчета = ДополнительныеПараметры.ВидУчета;
	КонецЕсли;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(Идентификатор);
		ТекущиеДанные[Реквизит + ВидУчета] = Результат;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Серии

&НаСервере
Процедура ЗаполнитьПараметрыУказанияСерий()
	
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.НачальныеОстаткиНЗППоПартиямПроизводства));
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
		Объект,
		ПараметрыУказанияСерий,
		ТекущиеДанныеИдентификатор,
		ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.МатериалыИРаботыСерия.Видимость				=
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.МатериалыИРаботыСтатусУказанияСерий.Видимость	=
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.МатериалыИРаботыУказатьСерии.Видимость			=
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов =
		НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
			ЭтаФорма,
			ПараметрыУказанияСерий,
			Текст,
			ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.МатериалыИРаботы.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ДополнительныеПараметры =
			Новый Структура(
				"ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий",
				ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(
			ПараметрыФормыУказанияСерий.ИмяФормы,
			ПараметрыФормыУказанияСерий,
			ЭтаФорма,,,,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
			ДополнительныеПараметры.ПараметрыУказанияСерий,
			ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Неопределено;
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект,
		ПараметрыУказанияСерий,
		ПараметрыФормыУказанияСерий,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(СтрокиТоваровДляОбработки = Неопределено)
	
	СтрокиТоваров = Неопределено;
	Если ТипЗнч(СтрокиТоваровДляОбработки) = Тип("Массив") Тогда
		СтрокиТоваров = Новый Массив;
		Для Каждого Идентификатор Из СтрокиТоваровДляОбработки Цикл
			СтрокиТоваров.Добавить(Объект.МатериалыИРаботы.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		Объект,
		ПараметрыУказанияСерий,
		СтрокиТоваров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Знач ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект,
		ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор,
		КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураДействий

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, Форма, СтруктураДействий)

	Если Не ТекущаяСтрока = Неопределено Тогда
		СтруктураДействий.Вставить(
			"ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
	Иначе
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу");
	КонецЕсли;
	
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить(
		"НоменклатураПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы", Форма.ИмяФормы));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(Форма, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц",	ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",			Форма.КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",			Форма.КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличества(Форма, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьСумму",		"Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	Форма.КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	Форма.КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, Склад, ПараметрыУказанияСерий)
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий", Склад, ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитов

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормы()
	
	ВалютаУправленческогоУчета	= Константы.ВалютаУправленческогоУчета.Получить();
	ЗаполнитьВалютуРеглУчета();
	ВалютаРасценокВидовРабот	= Константы.ВалютаРасценокВидовРабот.Получить();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ЗаполнитьВариантыРаспределенияСтатейРасходов();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакПринимаетсяКНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПрочиеРасходы, СтруктураДействий, Неопределено);
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.МатериалыИРаботы);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Трудозатраты);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ПрочиеРасходы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуРеглУчета()
	
	ВалютаРегламентированногоУчета			= ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	КоэффициентПересчетаИзВалютыУпрВРегл	= КоэффициентПересчета();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИРаботы,
		ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыРаспределенияСтатейРасходов(ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		СтатьиРасходов = Объект.ПрочиеРасходы.Выгрузить(, "СтатьяРасходов").ВыгрузитьКолонку("СтатьяРасходов");
	Иначе
		
		СтрокаЗатраты = Объект.ПрочиеРасходы.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтатьиРасходов = ОбщегоНазначенияУТКлиентСервер.Массив(СтрокаЗатраты.СтатьяРасходов);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьиРасходов", СтатьиРасходов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиРасходов.Ссылка КАК СтатьяРасходов,
		|	СтатьиРасходов.ВариантРаспределенияРасходовРегл КАК ВариантРаспределенияРасходовРегл,
		|	СтатьиРасходов.ВариантРаспределенияРасходовУпр КАК ВариантРаспределенияРасходовУпр
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Ссылка В(&СтатьиРасходов)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ИдентификаторСтроки = Неопределено Тогда
			
			СтрокиПоСтатьейРасходов = Объект.ПрочиеРасходы.НайтиСтроки(Новый Структура("СтатьяРасходов", Выборка.СтатьяРасходов));
			Для Каждого СтрокаЗатраты Из СтрокиПоСтатьейРасходов Цикл
				
				СтрокаЗатраты.ВариантРаспределенияРасходовУпр  = Выборка.ВариантРаспределенияРасходовУпр;
				СтрокаЗатраты.ВариантРаспределенияРасходовРегл = Выборка.ВариантРаспределенияРасходовРегл;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаЗатраты.ВариантРаспределенияРасходовУпр  = Выборка.ВариантРаспределенияРасходовУпр;
			СтрокаЗатраты.ВариантРаспределенияРасходовРегл = Выборка.ВариантРаспределенияРасходовРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПринимаетсяКНУПоУмолчанию(ИмяТЧ)
	
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		ТекСтрока.ПринимаетсяКНУ = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

#Область ПодборПартийПроизводства

&НаКлиенте
Процедура ПартияПроизводстваНачалоВыбора(ИмяТЧ, ТаблицаФормы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация",			Объект.Организация);
	СтруктураОтбора.Вставить("Подразделение",		Объект.Подразделение);
	СтруктураОтбора.Вставить("Документ",			Объект.Ссылка);
	СтруктураОтбора.Вставить("ИсключатьПроизводствоНаСтороне", Ложь);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НачалоПериода",	НачалоМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("ОкончаниеПериода",	КонецМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("СтруктураОтбора",	СтруктураОтбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ",				ИмяТЧ);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки",	ТаблицаФормы.ТекущаяСтрока);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПартияПроизводстваНачалоВыбораЗавершение",
		ЭтаФорма,
		ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПартийПроизводства",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартияПроизводстваНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПартияПроизводстваНачалоВыбораЗавершениеСервер(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПартияПроизводстваНачалоВыбораЗавершениеСервер(Результат, ДополнительныеПараметры)
	
	ИмяТЧ				= ДополнительныеПараметры.ИмяТЧ;
	ИсходнаяСтрока		= Объект[ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ТаблицаПартий		= ПолучитьИзВременногоХранилища(Результат);
	Модифицированность	= Истина;
	
	Для Каждого ТекСтрока Из ТаблицаПартий Цикл
		
		Если ТаблицаПартий.Количество() = 1 Тогда
			НоваяСтрока = ИсходнаяСтрока;
		Иначе
			НоваяСтрока = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			
			Если ИмяТЧ = "МатериалыИРаботы" Тогда
				НоваяСтрока.КоличествоУпаковок	= 0;
				НоваяСтрока.ПринимаетсяКНУ		= Истина;
			КонецЕсли;
			
			Если ИмяТЧ = "Трудозатраты" Тогда
				НоваяСтрока.НормативнаяСумма = 0;
				НоваяСтрока.ПринимаетсяКНУ		= Истина;
			КонецЕсли;
			
			Если Не ИмяТЧ = "ПрочиеРасходы" Тогда
				НоваяСтрока.Количество = 0;
			КонецЕсли;
			
			НоваяСтрока.Сумма		= 0;
			НоваяСтрока.СуммаРегл	= 0;
			НоваяСтрока.СуммаПР = 0;
			НоваяСтрока.СуммаВР = 0;
			НоваяСтрока.СуммаНУ = 0;
			НоваяСтрока.СуммаБезНДС	= 0;
			НоваяСтрока.СуммаНДС	= 0;
			
		КонецЕсли;
		
		НоваяСтрока.ПартияПроизводства = ТекСтрока.ПартияПроизводства;
		
	КонецЦикла;
	
	Если ТаблицаПартий.Количество() > 1 Тогда
		Объект[ИмяТЧ].Удалить(ИсходнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция КоэффициентПересчета()
	
	Возврат
		РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
			ВалютаУправленческогоУчета,
			ВалютаРегламентированногоУчета,
			?(Объект.Дата = Дата(1,1,1), ТекущаяДатаСеанса(), Объект.Дата));
	
КонецФункции

&НаСервере
Процедура АктуализироватьОстаткиПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.НачальныеОстаткиНЗППоПартиямПроизводства.ПараметрыЗаполненияВидовДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ВидДеятельностиНДС,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ВидДеятельностиНДС,
		Объект.ВидДеятельностиНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПравилаОтнесенияНаВыпуск()
	
	ПравилаОтнесенияНаВыпуск = Новый Соответствие;
	
	// Правило "ПоМатериальнымЗатратам"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.НормативРасходаМатериала,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам);
	
	// Правило "ПоТрудозатратам"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ДлительностьВыполненияРабот,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам);
	
	// Правило "ПоМатериальнымИТрудозатратам"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхИТрудозатрат,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам);
	
	// Правило "ПоПродукцииСУчетомБудущихВыпусков"
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	ПравилаОтнесенияНаВыпуск.Вставить(
		Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукцииСУчетомБудущихВыпусков,
		Перечисления.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков);
	
	Возврат ПравилаОтнесенияНаВыпуск;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы

#Область Свойства

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайла(ДополнительныеПараметры)
	
	ПолноеИмяТабличнойЧасти	= "НачальныеОстаткиНЗППоПартиямПроизводства.%1";
	ПолноеИмяТабличнойЧасти	= СтрШаблон(ПолноеИмяТабличнойЧасти, ДополнительныеПараметры.ИмяТЧ);
	
	ЗаголовокФормыЗагрузки	= НСтр("ru = 'Загрузка таблицы ""%1"" из файла';
									|en = 'Download the table ""%1"" from the file'");
	ЗаголовокФормыЗагрузки	= СтрШаблон(ЗаголовокФормыЗагрузки, ДополнительныеПараметры.СинонимТЧ);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти	= ПолноеИмяТабличнойЧасти;
	ПараметрыЗагрузки.Заголовок					= ЗаголовокФормыЗагрузки;
	ПараметрыЗагрузки.ДополнительныеПараметры	= ДополнительныеПараметры;
	
	Если ДополнительныеПараметры.ИмяТЧ = "МатериалыИРаботы" Тогда
		ПараметрыЗагрузки.ИмяМакетаСШаблоном = "ЗагрузкаИзФайлаМатериалыИРаботы";
	ИначеЕсли ДополнительныеПараметры.ИмяТЧ = "Трудозатраты" Тогда
		ПараметрыЗагрузки.ИмяМакетаСШаблоном = "ЗагрузкаИзФайлаТрудозатраты";
	Иначе
		ПараметрыЗагрузки.ИмяМакетаСШаблоном = "ЗагрузкаИзФайлаПрочиеРасходы";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьФормуЗагрузкиИзФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	Объект[ДополнительныеПараметры.ИмяТЧ].Загрузить(ЗагруженныеДанные);
	
	Если ДополнительныеПараметры.ИмяТЧ = "МатериалыИРаботы"
		Или ДополнительныеПараметры.ИмяТЧ = "Трудозатраты" Тогда
		ЗаполнитьПринимаетсяКНУПоУмолчанию(ДополнительныеПараметры.ИмяТЧ);
	ИначеЕсли ДополнительныеПараметры.ИмяТЧ = "ПрочиеРасходы" Тогда
		ЗаполнитьСлужебныеРеквизитыФормы();
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл",	КоэффициентПересчетаИзВалютыУпрВРегл);
	
	Если ДополнительныеПараметры.ИмяТЧ = "МатериалыИРаботы" Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц",	ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме",		"КоличествоУпаковок");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяТЧ = "Трудозатраты" Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "Количество");
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуПР",	КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьСуммуНУ");
	СтруктураДействий.Вставить("ПересчитатьСуммуВР");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект[ДополнительныеПараметры.ИмяТЧ], СтруктураДействий, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
