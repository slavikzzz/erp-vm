#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетНЗП");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.НачальныеОстаткиНЗППоПартиямПроизводства") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаПрочиеРасходыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(ДокументСсылка, Запрос, ТекстыЗапроса, Регистры);
		
		НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ДополнитьТекстыЗапросовПроведения(
			Запрос,
			ТекстыЗапроса,
			Регистры);
	КонецЕсли;
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, ПустаяСсылка().Метаданные());
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Подразделение,Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры:
//	 Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение:
//	 Структура - Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта	= "Документ.НачальныеОстаткиНЗППоПартиямПроизводства";
	ПараметрыУказанияСерий.ИмяТЧТовары		= "МатериалыИРаботы";
	ПараметрыУказанияСерий.ИмяТЧСерии		= "МатериалыИРаботы";
	
	ПараметрыУказанияСерий.ЭтоНакладная										= Истина;
	ПараметрыУказанияСерий.Дата												= Объект.Дата;
	ПараметрыУказанияСерий.ИмяПоляСклад										= "Подразделение";
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры	= ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство22");
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям	= ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство22");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ВводОстатков);
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Процедура заполняет статусы указания серий в строках ТЧ товары
//
// Параметры:
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа (обработки)
//
// Возвращаемое значение:
//	Строка - Текст запроса заполнения статусов.
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.НомерСтроки,
	|	Товары.СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Упаковка,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Упаковка,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Упаковка,
	|	Товары.Характеристика,
	|	Товары.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Упаковка,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Упаковка,
	|	Серии.Характеристика,
	|	Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА СпрВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА СпрВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|				И ТоварыДляЗапроса.Упаковка = СерииДляЗапроса.Упаковка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК СпрВидыНоменклатуры
	|			ПО ТоварыДляЗапроса.ВидНоменклатуры = СпрВидыНоменклатуры.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Упаковка = ТоварыДляЗапроса.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтатусУказанияСерийСтарый <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемыКоманды

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ДобавитьКомандыСозданияНаОсновании(
		КомандыСозданияНаОсновании,
		Параметры);
	
КонецПроцедуры

// Добавляет команду создания документа "Начальные остатки НЗП по партиям производства".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.НачальныеОстаткиНЗППоПартиямПроизводства) Тогда
		
		КомандаСозданияНаОсновании = КомандыСозданияНаОсновании.Добавить();
		
		КомандаСозданияНаОсновании.Обработчик			= "СозданиеНаОснованииУТКлиент.СоздатьНачальныеОстаткиНЗППоПартиямПроизводства";
		КомандаСозданияНаОсновании.Идентификатор		= "СоздатьНачальныеОстаткиНЗППоПартиямПроизводства";
		КомандаСозданияНаОсновании.Представление		= ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.НачальныеОстаткиНЗППоПартиямПроизводства);
		КомандаСозданияНаОсновании.РежимЗаписи			= "Проводить";
		КомандаСозданияНаОсновании.МножественныйВыбор	= Ложь;
		
		Возврат КомандаСозданияНаОсновании;
		
	КонецЕсли;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ДобавитьКомандыОтчетов(
		КомандыОтчетов,
		Параметры);
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ДобавитьКомандыПечати(
		КомандыПечати);
	
КонецПроцедуры

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
КонецПроцедуры

#Область ЗагрузкаИзФайлаВТЧ

// Устанавливает параметры загрузки.
//
// Параметры:
//   Параметры - Структура - параметры загрузки из файла.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
	ТипДанныхКолонки	= Параметры.ТипДанныхКолонки;
	ИмяТЧ				= Параметры.ДополнительныеПараметры.ИмяТЧ;
	
	ТипДанныхКолонки.Вставить("ТипДокумента",					Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(23)));
	ТипДанныхКолонки.Вставить("ДатаДокумента",					Новый ОписаниеТипов("Дата",,	Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТипДанныхКолонки.Вставить("НомерДокумента",					Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(11)));
	ТипДанныхКолонки.Вставить("НомерГруппыЗатрат",				Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15,0)));
	ТипДанныхКолонки.Вставить("НаименованиеСтатьиКалькуляции",	Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(100)));
	ТипДанныхКолонки.Вставить("Сумма",							Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 2)));
	
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		
		ТипДанныхКолонки.Вставить("Штрихкод",					Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(200)));
		ТипДанныхКолонки.Вставить("Артикул",					Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(50)));
		ТипДанныхКолонки.Вставить("КодНоменклатуры",			Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(11)));
		ТипДанныхКолонки.Вставить("НаименованиеНоменклатуры",	Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(100)));
		
		ТипДанныхКолонки.Вставить("НаименованиеХарактеристики",	Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(150)));
		ТипДанныхКолонки.Вставить("НаименованиеНазначения",		Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(150)));
		ТипДанныхКолонки.Вставить("НаименованиеСерии",			Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(150)));
		
		ТипДанныхКолонки.Вставить("КодУпаковки",				Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(4)));
		ТипДанныхКолонки.Вставить("НаименованиеУпаковки",		Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(50)));
		
		ТипДанныхКолонки.Вставить("КоличествоУпаковок",			Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 3)));
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		ТипДанныхКолонки.Вставить("КодВидаРабот",				Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(9)));
		ТипДанныхКолонки.Вставить("НаименованиеВидаРабот",		Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(150)));
		
		ТипДанныхКолонки.Вставить("Количество",					Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 3)));
		ТипДанныхКолонки.Вставить("НормативнаяСумма",			Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15,2)));
		
	Иначе
		ТипДанныхКолонки.Вставить("КодСтатьиРасходов",			Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(9)));
		ТипДанныхКолонки.Вставить("НаименованиеСтатьиРасходов",	Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(100)));
	КонецЕсли;
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ИмяТЧ = "МатериалыИРаботы" Тогда
		СопоставитьЗагружаемыеДанныеМатериалыИРаботы(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей);
	ИначеЕсли ДополнительныеПараметры.ИмяТЧ = "Трудозатраты" Тогда
		СопоставитьЗагружаемыеДанныеТрудозатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей);
	ИначеЕсли ДополнительныеПараметры.ИмяТЧ = "ПрочиеРасходы" Тогда
		СопоставитьЗагружаемыеДанныеПрочиеРасходы(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
// 	ПолноеИмяТабличнойЧасти- Строка - полное имя табличной части, в которую загружаются данные.
// 	СписокНеоднозначностей - Массив - список неоднозначностей.
// 	ИмяКолонки - Строка - имя колонки, в которой возникает неоднозначность.
// 	ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
// 	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		ЗаполнитьСписокНеоднозначностейМатериалыИРаботы(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока);
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		ЗаполнитьСписокНеоднозначностейТрудозатраты(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока);
	ИначеЕсли ИмяТЧ = "ПрочиеРасходы" Тогда
		ЗаполнитьСписокНеоднозначностейПрочиеРасходы(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УчетНДС

// Инициализация параметров регистрации счетов фактур полученных
//  Параметры:
//    ДанныеОбъекта - ДокументОбъект.НачальныеОстаткиНЗППоПартиямПроизводства - Объект документа ввода остатков
//
//  Возвращаемое значение:
//    см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС
Функция ПараметрыЗаполненияВидовДеятельностиНДС(ДанныеОбъекта) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация							= ДанныеОбъекта.Организация;
	ПараметрыЗаполнения.Дата								= ДанныеОбъекта.Дата;
	ПараметрыЗаполнения.НаправлениеДеятельности				= ДанныеОбъекта.НаправлениеДеятельности;
	ПараметрыЗаполнения.ДвижениеТоваровИРаботВПроизводстве	= Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область НазначенияИНаправленияДеятельности

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  см. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	// Шаблон для материалов
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.МатериалыИРаботы.Назначение");
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	//++ НЕ УТКА
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.Давальческое21));
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеПродукция22));
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеМатериалы22));
	ШаблонНазначения.ТипыНазначений.Удалить(ШаблонНазначения.ТипыНазначений.Найти(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22));
	//-- НЕ УТКА
	
	// Остатки материалов в подразделении.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(
		МакетФормы,
		"ОбеспечениеЗаказов",
		Истина,
		"Объект.МатериалыИРаботы.Назначение",
		"МатериалыИРаботыВНаличии");
	
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования =
		"Объект.МатериалыИРаботы.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура	= "Объект.МатериалыИРаботы.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика	= "Объект.МатериалыИРаботы.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад			= "Объект.Подразделение";
	
	Возврат МакетФормы;
	
КонецФункции

// Порядок обработки изменения направления деятельности.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// Возвращаемое значение:
// 	см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
//
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений = "МатериалыИРаботы";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("МатериалыИРаботы", ТаблицаУсловий);
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

#КонецОбласти

#Область ВыборСтатейИАналитик

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	// Выходные изделия
	ПараметрыВыбораСтатей = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбораСтатей.ПутьКДанным					= "Объект.ПрочиеРасходы";
	ПараметрыВыбораСтатей.Статья						= "СтатьяРасходов";
	ПараметрыВыбораСтатей.ТипСтатьи					= "ТипСтатьи";
	
	ПараметрыВыбораСтатей.ВыборСтатьиРасходов			= Истина;
	ПараметрыВыбораСтатей.АналитикаРасходов			= "АналитикаРасходов";
	
	ЭлементыФормы = ПараметрыВыбораСтатей.ЭлементыФормы;
	ЭлементыФормы.Статья.Добавить("ПрочиеРасходыСтатьяРасходов");
	ЭлементыФормы.АналитикаРасходов.Добавить("ПрочиеРасходыАналитикаРасходов");
	
	Возврат ПараметрыВыбораСтатей;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

#Область Инициализация

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Дата						КАК Дата,
	|	Реквизиты.Дата						КАК Период,
	|	Реквизиты.Номер						КАК Номер,
	|	Реквизиты.Ссылка					КАК Ссылка,
	|	Реквизиты.Проведен					КАК Проведен,
	|	Реквизиты.ПометкаУдаления			КАК ПометкаУдаления,
	|	Реквизиты.Организация				КАК Организация,
	|	Реквизиты.Подразделение				КАК Подразделение,
	|	Реквизиты.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|	Реквизиты.ВидДеятельностиНДС		КАК ВидДеятельностиНДС,
	|	Реквизиты.ДокументОснование			КАК ДокументОснование,
	|	Реквизиты.СуммаДокумента			КАК СуммаДокумента,
	|	Реквизиты.Ответственный				КАК Ответственный,
	|	Реквизиты.Исправление				КАК Исправление,
	|	Реквизиты.СторнируемыйДокумент		КАК СторнируемыйДокумент,
	|	Реквизиты.ИсправляемыйДокумент		КАК ИсправляемыйДокумент,
	|	Реквизиты.Комментарий				КАК Комментарий
	|ИЗ
	|	Документ.НачальныеОстаткиНЗППоПартиямПроизводства КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
								ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр("АналитическийУчетПоГруппамПродукции",
								ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции"));
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",
							ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.НачальныеОстаткиНЗППоПартиямПроизводства")));
	
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", 
		ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	Запрос.УстановитьПараметр("НомерНаПечать",	ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("ВалютаУпр",		Константы.ВалютаУправленческогоУчета.Получить());
	
	ПараметрыУчетаПоОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Реквизиты.Организация, Реквизиты.Дата);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", ПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)

	Если Запрос = Неопределено ИЛИ Запрос.Параметры.Свойство("КлючиАналитикиНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитики = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.СтатьяКалькуляции
	|ИЗ
	|	(
	// аналитика партии производства без назначения
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаТовары.Ссылка.Подразделение				КАК Склад,
	|		ТаблицаТовары.Номенклатура						КАК Номенклатура,
	|		ТаблицаТовары.Характеристика					КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)	КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ											КАК Серия,
	|		ТаблицаТовары.СтатьяКалькуляции					КАК СтатьяКалькуляции
	|	ИЗ
	|		Документ.НачальныеОстаткиНЗППоПартиямПроизводства.МатериалыИРаботы КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	) КАК ТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаТовары.Номенклатура = Аналитика.Номенклатура
	|	И ТаблицаТовары.Характеристика = Аналитика.Характеристика
	|	И ТаблицаТовары.Серия = Аналитика.Серия
	|	И ТаблицаТовары.Склад = Аналитика.МестоХранения
	|	И ТаблицаТовары.Назначение = Аналитика.Назначение
	|	И ТаблицаТовары.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.СтатьяКалькуляции");
	
	ЗапросАналитики.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитики.УстановитьПараметр("Подразделение", Запрос.Параметры.Подразделение);
	
	Выборка = ЗапросАналитики.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;

	Запрос.УстановитьПараметр("КлючиАналитикиНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.НачальныеОстаткиНЗППоПартиямПроизводства";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	ЗначенияПараметров.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Неопределено, ТекстыЗапроса, Неопределено);
		ВЗапросеЕстьИсточник	= Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса 
								|формирования движений по регистру %ИмяРегистра%.';
								|en = 'In the %ПолноеИмяДокумента% document, adaptation of request for generating records 
								|of the %ИмяРегистра% register is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроведениеПоРеглУчету

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса.
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	Возврат НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ТекстОтраженияВРеглУчете();
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
// 
// Возвращаемое значение:
// 	см. НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ТекстЗапросаВТОтраженияВРеглУчете
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат НачальныеОстаткиНЗППоПартиямПроизводстваЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовПроведения

#Область ТекстыЗапросовВременныеТаблицы

Функция ТекстЗапросаВтТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТовары";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры					КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики						КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ТаблицаТовары.ВидЗапасов									КАК ВидЗапасов,
	|	ТаблицаТовары.ПартияПроизводства							КАК ПартияПроизводства,
	|	ВЫБОР
	|		КОГДА НЕ СпрПартииПроизводства.ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА СпрПартииПроизводства.ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ														КАК АналитикаФинансовогоУчета,
	|	(ВЫБОР
	|		КОГДА СпрПартииПроизводства.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			ТОГДА &НалогообложениеОрганизации
	|		ИНАЧЕ СпрПартииПроизводства.ВидДеятельностиНДС КОНЕЦ) 	КАК ВидДеятельностиНДС,
	|	ТаблицаТовары.СтатьяКалькуляции								КАК СтатьяКалькуляции,
	|	ТаблицаТовары.Количество									КАК Количество,
	|	ТаблицаТовары.Сумма											КАК Стоимость,
	|	ТаблицаТовары.Сумма											КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СуммаРегл										КАК СтоимостьРегл,
	|	ТаблицаТовары.СуммаПР										КАК ПостояннаяРазница,
	|	ТаблицаТовары.СуммаВР										КАК ВременнаяРазница,
	|	0															КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ														КАК СтоимостьУпр,
	|	0															КАК НДСУпр
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.НачальныеОстаткиНЗППоПартиямПроизводства.МатериалыИРаботы КАК ТаблицаТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Ссылка = ТаблицаТовары.ПартияПроизводства
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Ссылка = ТаблицаТовары.АналитикаУчетаНоменклатуры
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Аналитика.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = Аналитика.Характеристика
	|	И АналитикаБезНазначения.Серия = Аналитика.Серия
	|	И АналитикаБезНазначения.МестоХранения = Аналитика.МестоХранения
	|	И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаБезНазначения.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаТаблицаПрочиеРасходыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходыНезавершенногоПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасходы.Период КАК Период,
	|	ПрочиеРасходы.ВидДвижения КАК ВидДвижения,
	|	ПрочиеРасходы.Организация КАК Организация,
	|	ПрочиеРасходы.Подразделение КАК Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ПрочиеРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходы.ПартияПроизводства КАК ПартияПроизводства,
	|	ПрочиеРасходы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ПрочиеРасходы.ГруппаПродукции КАК ГруппаПродукции,
	|	ПрочиеРасходы.ПравилоОтнесенияНаВыпуск КАК ПравилоОтнесенияНаВыпуск,
	|	СУММА(ПрочиеРасходы.Стоимость) КАК Стоимость,
	|	СУММА(ПрочиеРасходы.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ПрочиеРасходы.СтоимостьРегл) КАК СтоимостьРегл,
	|	СУММА(ПрочиеРасходы.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(ПрочиеРасходы.ВременнаяРазница) КАК ВременнаяРазница,
	|	СУММА(ПрочиеРасходы.СтоимостьУпр) КАК СтоимостьУпр,
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Дата КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|		&Организация КАК Организация,
	|		&Подразделение КАК Подразделение,
	|		ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|		ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|		ПрочиеРасходы.ПартияПроизводства.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПрочиеРасходы.ПартияПроизводства КАК ПартияПроизводства,
	|		ПрочиеРасходы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|		ПрочиеРасходы.ПартияПроизводства.ГруппаПродукции КАК ГруппаПродукции,
	|		ПрочиеРасходы.ПравилоОтнесенияНаВыпускУпр КАК ПравилоОтнесенияНаВыпуск,
	|		ПрочиеРасходы.Сумма КАК Стоимость,
	|		ПрочиеРасходы.Сумма КАК СтоимостьБезНДС,
	|		0 КАК СтоимостьРегл,
	|		0 КАК ПостояннаяРазница,
	|		0 КАК ВременнаяРазница,
	|		ВЫБОР
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА ПрочиеРасходы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьУпр
	|	ИЗ
	|		Документ.НачальныеОстаткиНЗППоПартиямПроизводства.ПрочиеРасходы КАК ПрочиеРасходы
	|	ГДЕ
	|		ПрочиеРасходы.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Дата,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|		&Организация,
	|		&Подразделение,
	|		ПрочиеРасходы.СтатьяРасходов,
	|		ПрочиеРасходы.АналитикаРасходов,
	|		ПрочиеРасходы.ПартияПроизводства.НаправлениеДеятельности,
	|		ПрочиеРасходы.ПартияПроизводства,
	|		ПрочиеРасходы.СтатьяКалькуляции,
	|		ПрочиеРасходы.ПартияПроизводства.ГруппаПродукции,
	|		ПрочиеРасходы.ПравилоОтнесенияНаВыпускРегл,
	|		0,
	|		0,
	|		ПрочиеРасходы.СуммаРегл,
	|		ПрочиеРасходы.СуммаПР,
	|		ПрочиеРасходы.СуммаВР,
	|		0
	|	ИЗ
	|		Документ.НачальныеОстаткиНЗППоПартиямПроизводства.ПрочиеРасходы КАК ПрочиеРасходы
	|	ГДЕ
	|		ПрочиеРасходы.Ссылка = &Ссылка) КАК ПрочиеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.АналитикаРасходов,
	|	ПрочиеРасходы.НаправлениеДеятельности,
	|	ПрочиеРасходы.ПартияПроизводства,
	|	ПрочиеРасходы.ВидДвижения,
	|	ПрочиеРасходы.Организация,
	|	ПрочиеРасходы.СтатьяКалькуляции,
	|	ПрочиеРасходы.ГруппаПродукции,
	|	ПрочиеРасходы.ПравилоОтнесенияНаВыпуск,
	|	ПрочиеРасходы.Период,
	|	ПрочиеРасходы.Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка									КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО							КАК РазделительЗаписи,
	|	&Дата									КАК ДатаДокументаИБ,
	|	&Номер									КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных				КАК ТипСсылки,
	|	&Организация							КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства) КАК ХозяйственнаяОперация,
	|	&НаправлениеДеятельности				КАК НаправлениеДеятельности,
	|	&Подразделение							КАК Подразделение,
	|	&Ответственный							КАК Ответственный,
	|	ВЫРАЗИТЬ(&Комментарий КАК СТРОКА(100))	КАК Комментарий,
	|	&ВалютаУпр								КАК Валюта,
	|	&СуммаДокумента							КАК Сумма,
	|	&Проведен								КАК Проведен,
	|	&ПометкаУдаления						КАК ПометкаУдаления,
	|	ЛОЖЬ									КАК ДополнительнаяЗапись,
	|	""""									КАК Дополнительно,
	|	&Дата									КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать							КАК НомерПервичногоДокумента,
	|	&Подразделение							КАК МестоХранения,
	|	&Исправление							КАК СторноИсправление,
	|	&СторнируемыйДокумент					КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент					КАК ИсправляемыйДокумент,
	|	&Дата									КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыНезавершенногоПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Дата									КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	&Организация							КАК Организация,
	|	&Подразделение							КАК Подразделение,
	|	Трудозатраты.ВидРабот					КАК ВидРабот,
	|	Трудозатраты.ПартияПроизводства			КАК ПартияПроизводства,
	|	Трудозатраты.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|	Трудозатраты.ПартияПроизводства.ГруппаПродукции КАК ГруппаПродукции,
	|	Трудозатраты.Количество					КАК Количество,
	|	Трудозатраты.НормативнаяСумма			КАК НормативнаяСтоимость,
	|	Трудозатраты.Сумма						КАК Стоимость,
	|	Трудозатраты.СуммаРегл					КАК СтоимостьРегл,
	|	Трудозатраты.СуммаПР						КАК ПостояннаяРазница,
	|	Трудозатраты.СуммаВР						КАК ВременнаяРазница,
	|	&ИдентификаторНеиспользуемойФинЗаписи	КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО								КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.НачальныеОстаткиНЗППоПартиямПроизводства.Трудозатраты КАК Трудозатраты
	|
	|ГДЕ
	|	Трудозатраты.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтТовары");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтТовары(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область ВнутреннееПоступление_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов 					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ПартияПроизводства			КАК Партия,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	ТаблицаДокумента.ВидДеятельностиНДС				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	НЕОПРЕДЕЛЕНО 							КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО 							КАК КорАналитикаУчетаПартий,
	|	0 										КАК КодСтроки,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО						КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО						КАК КорГруппаПродукции,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 											КАК Сделка,
	|	НЕОПРЕДЕЛЕНО 											КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО 											КАК Менеджер,
	|	ТаблицаВидыЗапасов.ПартияПроизводства.ГруппаПродукции 	КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 						 		КАК Количество,
	|	НЕОПРЕДЕЛЕНО 				 								КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.Стоимость 						 		КАК Стоимость,
	|	ТаблицаВидыЗапасов.СтоимостьБезНДС 						 	КАК СтоимостьБезНДС,
	|	ТаблицаВидыЗапасов.СтоимостьРегл 							КАК СтоимостьРегл,
	|	ТаблицаВидыЗапасов.НДСРегл                                  КАК НДСРегл,
	|	ТаблицаВидыЗапасов.СтоимостьУпр 						 	КАК СтоимостьУпр,
	|	ТаблицаВидыЗапасов.НДСУпр 									КАК НДСУпр,
	|	0 													 		КАК СтоимостьЗабалансовая,
	|	0 													 		КАК СтоимостьЗабалансоваяРегл,
	|	0													 		КАК ДопРасходы,
	|	0													 		КАК ДопРасходыБезНДС,
	|	0															КАК ДопРасходыРегл,
	|	0															КАК ДопРасходыУпр,
	|	ТаблицаВидыЗапасов.ПостояннаяРазница 						КАК ПостояннаяРазница,
	|	ТаблицаВидыЗапасов.ВременнаяРазница 						КАК ВременнаяРазница,
	|	0													 		КАК КорСтоимость,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства) КАК ХозяйственнаяОперация,
	|	&ИдентификаторНеиспользуемойФинЗаписи    	 					  				  КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО          						  									  КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.НачальныеОстаткиНЗППоПартиямПроизводства КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнутреннееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти

	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СтандартныеПодсистемыКоманды

#Область ЗагрузкаИзФайлаВТЧ

Процедура СопоставитьЗагружаемыеДанныеМатериалыИРаботы(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей)
	
	МатериалыИРаботы	= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтЗагружаемыеДанныеМатериалыИРаботы());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеДокументовПартии());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеШтрихкодов());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеНоменклатуры());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеХарактеристик());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеНазначений());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСерий());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеУпаковок());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСтатейКалькуляции());
	ТекстыЗапроса.Добавить(ТекстЗапросаЗагружаемыеДанныеМатериаловИРабот());
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные",				ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ТекстЗаказНаПроизводство",		НСтр("ru = 'Заказ на производство';
																		|en = 'Production order'"));
	
	//++ Устарело_Переработка24
	Запрос.УстановитьПараметр("ТекстОтчетПереработчика",		НСтр("ru = 'Отчет переработчика (2.4)';
																	|en = 'Subcontractor report (2.4)'"));
	//-- Устарело_Переработка24
	
	Запрос.УстановитьПараметр("ТекстОтчетПереработчика2_5",		НСтр("ru = 'Отчет переработчика';
																		|en = 'Subcontracting services notification received'"));
	Запрос.УстановитьПараметр("ТекстПроизводствоБезЗаказа",		НСтр("ru = 'Производство без заказа';
																		|en = 'Backflush production'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = МатериалыИРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Номенклатура";
		КонецЕсли;
		
		Если Выборка.КоличествоХарактеристик > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Характеристика";
		КонецЕсли;
		
		Если Выборка.КоличествоНазначений > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Назначение";
		КонецЕсли;
		
		Если Выборка.КоличествоСерий > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Серия";
		КонецЕсли;
		
		Если Выборка.КоличествоСтатейКалькуляции > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "СтатьяКалькуляции";
		КонецЕсли;
		
		Если Выборка.КоличествоУпаковки > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Упаковка";
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МатериалыИРаботы, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеТрудозатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей)
	
	Трудозатраты		= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтЗагружаемыеДанныеТрудозатраты());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеДокументовПартии());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеВидовРабот());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСтатейКалькуляции());
	ТекстыЗапроса.Добавить(ТекстЗапросаЗагружаемыеДанныеТрудозатраты());
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные",				ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ТекстЗаказНаПроизводство",		НСтр("ru = 'Заказ на производство';
																		|en = 'Production order'"));
	
	//++ Устарело_Переработка24
	Запрос.УстановитьПараметр("ТекстОтчетПереработчика",		НСтр("ru = 'Отчет переработчика (2.4)';
																	|en = 'Subcontractor report (2.4)'"));
	//-- Устарело_Переработка24
	
	Запрос.УстановитьПараметр("ТекстОтчетПереработчика2_5",		НСтр("ru = 'Отчет переработчика';
																		|en = 'Subcontracting services notification received'"));
	Запрос.УстановитьПараметр("ТекстПроизводствоБезЗаказа",		НСтр("ru = 'Производство без заказа';
																		|en = 'Backflush production'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Трудозатраты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоВидовРабот > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "ВидРабот";
		КонецЕсли;
		
		Если Выборка.КоличествоСтатейКалькуляции > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "СтатьяКалькуляции";
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Трудозатраты, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеПрочиеРасходы(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей)
	
	ПрочиеРасходы		= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтЗагружаемыеДанныеПрочиеРасходы());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеДокументовПартии());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСтатейРасходов());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСтатейКалькуляции());
	ТекстыЗапроса.Добавить(ТекстЗапросаЗагружаемыеДанныеПрочиеРасходы());
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные",				ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ТекстЗаказНаПроизводство",		НСтр("ru = 'Заказ на производство';
																		|en = 'Production order'"));
	
	//++ Устарело_Переработка24
	Запрос.УстановитьПараметр("ТекстОтчетПереработчика",		НСтр("ru = 'Отчет переработчика (2.4)';
																	|en = 'Subcontractor report (2.4)'"));
	//-- Устарело_Переработка24
	
	Запрос.УстановитьПараметр("ТекстОтчетПереработчика2_5",		НСтр("ru = 'Отчет переработчика';
																		|en = 'Subcontracting services notification received'"));
	Запрос.УстановитьПараметр("ТекстПроизводствоБезЗаказа",		НСтр("ru = 'Производство без заказа';
																		|en = 'Backflush production'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоСтатейРасходов > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "СтатьяРасходов";
		КонецЕсли;
		
		Если Выборка.КоличествоСтатейКалькуляции > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "СтатьяКалькуляции";
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ПрочиеРасходы, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура ЗаполнитьСписокНеоднозначностейМатериалыИРаботы(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.Номенклатура			КАК Номенклатура,
		|	Штрихкоды.Характеристика		КАК Характеристика,
		|	Штрихкоды.Упаковка				КАК Упаковка
		|ПОМЕСТИТЬ ВтДанныеШтрихкодов
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|
		|ГДЕ
		|	НЕ &Штрихкод = """"
		|	И Штрихкоды.Штрихкод = &Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &Артикул = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Артикул = &Артикул
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &КодНоменклатуры = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Код = &КодНоменклатуры
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &НаименованиеНоменклатуры = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Наименование = &НаименованиеНоменклатуры
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДанныеШтрихкодов.Номенклатура КАК Ссылка
		|	ИЗ
		|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|	) КАК СпрНоменклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Ссылка
		|";
		
		Запрос.УстановитьПараметр("Штрихкод",					ЗагружаемыеЗначенияСтрока.Штрихкод);
		Запрос.УстановитьПараметр("Артикул",					ЗагружаемыеЗначенияСтрока.Артикул);
		Запрос.УстановитьПараметр("КодНоменклатуры",			ЗагружаемыеЗначенияСтрока.КодНоменклатуры);
		Запрос.УстановитьПараметр("НаименованиеНоменклатуры",	ЗагружаемыеЗначенияСтрока.НаименованиеНоменклатуры);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Характеристика" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|
		|ГДЕ
		|	НЕ &НаименованиеХарактеристики = """"
		|	И Характеристики.Наименование = &НаименованиеХарактеристики
		|";
		
		Запрос.УстановитьПараметр("НаименованиеХарактеристики",	ЗагружаемыеЗначенияСтрока.НаименованиеХарактеристики);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Назначение" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНазначения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Назначения КАК СпрНазначения
		|
		|ГДЕ
		|	НЕ &НаименованиеНазначения = """"
		|	И СпрНазначения.Наименование = &НаименованиеНазначения
		|";
		
		Запрос.УстановитьПараметр("НаименованиеНазначения",	ЗагружаемыеЗначенияСтрока.НаименованиеНазначения);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Серия" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрСерии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СпрСерии
		|
		|ГДЕ
		|	НЕ &НаименованиеСерии = """"
		|	И СпрСерии.Наименование = &НаименованиеСерии
		|";
		
		Запрос.УстановитьПараметр("НаименованиеСерии",	ЗагружаемыеЗначенияСтрока.НаименованиеСерии);
		
	КонецЕсли;
	
	Если ИмяКолонки = "СтатьяКалькуляции" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрСтатьиКалькуляции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиКалькуляции КАК СпрСтатьиКалькуляции
		|
		|ГДЕ
		|	НЕ &НаименованиеСтатьиКалькуляции = """"
		|	И СпрСтатьиКалькуляции.Наименование = &НаименованиеСтатьиКалькуляции
		|";
		
		Запрос.УстановитьПараметр("НаименованиеСтатьиКалькуляции",	ЗагружаемыеЗначенияСтрока.НаименованиеСтатьиКалькуляции);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Упаковка" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Упаковки.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Упаковки.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|
		|	ГДЕ
		|		НЕ &КодУпаковки = """"
		|		И Упаковки.Код = &КодУпаковки
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Упаковки.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|
		|	ГДЕ
		|		НЕ &НаименованиеУпаковки = """"
		|		И Упаковки.Наименование = &НаименованиеУпаковки
		|	) КАК Упаковки
		|
		|СГРУППИРОВАТЬ ПО
		|	Упаковки.Ссылка
		|";
		
		Запрос.УстановитьПараметр("КодУпаковки",			ЗагружаемыеЗначенияСтрока.КодУпаковки);
		Запрос.УстановитьПараметр("НаименованиеУпаковки",	ЗагружаемыеЗначенияСтрока.НаименованиеУпаковки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНеоднозначностейТрудозатраты(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "СтатьяКалькуляции" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрСтатьиКалькуляции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиКалькуляции КАК СпрСтатьиКалькуляции
		|
		|ГДЕ
		|	НЕ &НаименованиеСтатьиКалькуляции = """"
		|	И СпрСтатьиКалькуляции.Наименование = &НаименованиеСтатьиКалькуляции
		|";
		
		Запрос.УстановитьПараметр("НаименованиеСтатьиКалькуляции",	ЗагружаемыеЗначенияСтрока.НаименованиеСтатьиКалькуляции);
		
	КонецЕсли;
	
	Если ИмяКолонки = "ВидРабот" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыРабот.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВидыРабот.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВидыРаботСотрудников КАК ВидыРабот
		|
		|	ГДЕ
		|		НЕ &КодВидаРабот = """"
		|		И ВидыРабот.Код = &КодВидаРабот
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ВидыРабот.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ВидыРаботСотрудников КАК ВидыРабот
		|
		|	ГДЕ
		|		НЕ &НаименованиеВидаРабот = """"
		|		И ВидыРабот.Наименование = &НаименованиеВидаРабот
		|	) КАК ВидыРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыРабот.Ссылка
		|";
		
		Запрос.УстановитьПараметр("КодВидаРабот",			ЗагружаемыеЗначенияСтрока.КодВидаРабот);
		Запрос.УстановитьПараметр("НаименованиеВидаРабот",	ЗагружаемыеЗначенияСтрока.НаименованиеВидаРабот);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокНеоднозначностейПрочиеРасходы(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "СтатьяКалькуляции" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрСтатьиКалькуляции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиКалькуляции КАК СпрСтатьиКалькуляции
		|
		|ГДЕ
		|	НЕ &НаименованиеСтатьиКалькуляции = """"
		|	И СпрСтатьиКалькуляции.Наименование = &НаименованиеСтатьиКалькуляции
		|";
		
		Запрос.УстановитьПараметр("НаименованиеСтатьиКалькуляции",	ЗагружаемыеЗначенияСтрока.НаименованиеСтатьиКалькуляции);
		
	КонецЕсли;
	
	Если ИмяКолонки = "СтатьяРасходов" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатьиРасходов.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтатьиРасходов.Ссылка КАК Ссылка
		|	ИЗ
		|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|
		|	ГДЕ
		|		НЕ &КодСтатьиРасходов = """"
		|		И СтатьиРасходов.Код = &КодСтатьиРасходов
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СтатьиРасходов.Ссылка КАК Ссылка
		|	ИЗ
		|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|
		|	ГДЕ
		|		НЕ &НаименованиеСтатьиРасходов = """"
		|		И СтатьиРасходов.Наименование = &НаименованиеСтатьиРасходов
		|	) КАК СтатьиРасходов
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатьиРасходов.Ссылка
		|";
		
		Запрос.УстановитьПараметр("КодСтатьиРасходов",			ЗагружаемыеЗначенияСтрока.КодСтатьиРасходов);
		Запрос.УстановитьПараметр("НаименованиеСтатьиРасходов",	ЗагружаемыеЗначенияСтрока.НаименованиеСтатьиРасходов);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧ

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧОбщие

Функция ТекстЗапросаВтДанныеДокументовПартии()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор					КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.Ссылка ЕСТЬ НЕ NULL
	|			ТОГДА РеквизитыЗаказа.Ссылка
	//++ Устарело_Переработка24
	|		КОГДА РеквизитыОтчетаПереработчика.Ссылка ЕСТЬ НЕ NULL
	|			ТОГДА РеквизитыОтчетаПереработчика.Ссылка
	//-- Устарело_Переработка24
	|		КОГДА РеквизитыОтчетаПереработчика2_5.Ссылка ЕСТЬ НЕ NULL
	|			ТОГДА РеквизитыОтчетаПереработчика2_5.Ссылка
	|		КОГДА РеквизитыПроизводстваБезЗаказа.Ссылка ЕСТЬ НЕ NULL
	|			ТОГДА РеквизитыПроизводстваБезЗаказа.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК ДокументПартии
	|ПОМЕСТИТЬ ВтДанныеДокументовПартии
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК РеквизитыЗаказа
	|	ПО ЗагружаемыеДанные.ТипДокумента = &ТекстЗаказНаПроизводство
	|	И РеквизитыЗаказа.Дата = ЗагружаемыеДанные.ДатаДокумента
	|	И РеквизитыЗаказа.Номер = ЗагружаемыеДанные.НомерДокумента
	|
	//++ Устарело_Переработка24
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика КАК РеквизитыОтчетаПереработчика
	|	ПО ЗагружаемыеДанные.ТипДокумента = &ТекстОтчетПереработчика
	|	И РеквизитыОтчетаПереработчика.Дата = ЗагружаемыеДанные.ДатаДокумента
	|	И РеквизитыОтчетаПереработчика.Номер = ЗагружаемыеДанные.НомерДокумента
	//-- Устарело_Переработка24
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика2_5 КАК РеквизитыОтчетаПереработчика2_5
	|	ПО ЗагружаемыеДанные.ТипДокумента = &ТекстОтчетПереработчика2_5
	|	И РеквизитыОтчетаПереработчика2_5.Дата = ЗагружаемыеДанные.ДатаДокумента
	|	И РеквизитыОтчетаПереработчика2_5.Номер = ЗагружаемыеДанные.НомерДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа КАК РеквизитыПроизводстваБезЗаказа
	|	ПО ЗагружаемыеДанные.ТипДокумента = &ТекстПроизводствоБезЗаказа
	|	И РеквизитыПроизводстваБезЗаказа.Дата = ЗагружаемыеДанные.ДатаДокумента
	|	И РеквизитыПроизводстваБезЗаказа.Номер = ЗагружаемыеДанные.НомерДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	ДокументПартии
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеСтатейКалькуляции()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор						КАК Идентификатор,
	|	МАКСИМУМ(СпрСтатьиКалькуляции.Ссылка)				КАК СтатьяКалькуляции,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрСтатьиКалькуляции.Ссылка)	КАК КоличествоСтатейКалькуляции
	|ПОМЕСТИТЬ ВтДанныеСтатейКалькуляции
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиКалькуляции КАК СпрСтатьиКалькуляции
	|	ПО СпрСтатьиКалькуляции.Наименование = ЗагружаемыеДанные.НаименованиеСтатьиКалькуляции
	|
	|ГДЕ
	|	НЕ ЗагружаемыеДанные.НаименованиеСтатьиКалькуляции = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧМатериалыИРаботы

Функция ТекстЗапросаВтЗагружаемыеДанныеМатериалыИРаботы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор					КАК Идентификатор,
	|	ЗагружаемыеДанные.ТипДокумента					КАК ТипДокумента,
	|	ЗагружаемыеДанные.ДатаДокумента					КАК ДатаДокумента,
	|	ЗагружаемыеДанные.НомерДокумента				КАК НомерДокумента,
	|	ЗагружаемыеДанные.НомерГруппыЗатрат				КАК НомерГруппыЗатрат,
	|	ЗагружаемыеДанные.НаименованиеСтатьиКалькуляции	КАК НаименованиеСтатьиКалькуляции,
	|	ЗагружаемыеДанные.Сумма							КАК Сумма,
	|	ЗагружаемыеДанные.Штрихкод						КАК Штрихкод,
	|	ЗагружаемыеДанные.Артикул						КАК Артикул,
	|	ЗагружаемыеДанные.КодНоменклатуры				КАК КодНоменклатуры,
	|	ЗагружаемыеДанные.НаименованиеНоменклатуры		КАК НаименованиеНоменклатуры,
	|	ЗагружаемыеДанные.НаименованиеХарактеристики	КАК НаименованиеХарактеристики,
	|	ЗагружаемыеДанные.НаименованиеНазначения		КАК НаименованиеНазначения,
	|	ЗагружаемыеДанные.НаименованиеСерии				КАК НаименованиеСерии,
	|	ЗагружаемыеДанные.КодУпаковки					КАК КодУпаковки,
	|	ЗагружаемыеДанные.НаименованиеУпаковки			КАК НаименованиеУпаковки,
	|	ЗагружаемыеДанные.КоличествоУпаковок			КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВтЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеШтрихкодов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|	Штрихкоды.Номенклатура			КАК Номенклатура,
	|	Штрихкоды.Характеристика		КАК Характеристика,
	|	Штрихкоды.Упаковка				КАК Упаковка
	|ПОМЕСТИТЬ ВтДанныеШтрихкодов
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|	ПО Штрихкоды.Штрихкод = ЗагружаемыеДанные.Штрихкод
	|
	|ГДЕ
	|	НЕ ЗагружаемыеДанные.Штрихкод = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Идентификатор						КАК Идентификатор,
	|	МАКСИМУМ(СпрНоменклатура.Номенклатура)				КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрНоменклатура.Номенклатура)	КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВтДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		СпрНоменклатура.Ссылка			КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Артикул = ЗагружаемыеДанные.Артикул
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Артикул = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		СпрНоменклатура.Ссылка			КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Код = ЗагружаемыеДанные.КодНоменклатуры
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодНоменклатуры = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		СпрНоменклатура.Ссылка			КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Наименование = ЗагружаемыеДанные.НаименованиеНоменклатуры
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.НаименованиеНоменклатуры = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор	КАК Идентификатор,
	|		ДанныеШтрихкодов.Номенклатура	КАК Номенклатура
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК СпрНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрНоменклатура.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	Номенклатура
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеХарактеристик()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Характеристики.Идентификатор						КАК Идентификатор,
	|	МАКСИМУМ(Характеристики.Характеристика)				КАК Характеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристики.Характеристика)	КАК КоличествоХарактеристик
	|ПОМЕСТИТЬ ВтДанныеХарактеристик
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Характеристики.Ссылка			КАК Характеристика
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО Характеристики.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Характеристики.Наименование = ЗагружаемыеДанные.НаименованиеХарактеристики
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.НаименованиеХарактеристики = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Характеристики.Ссылка			КАК Характеристика
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО Характеристики.Владелец = ДанныеНоменклатуры.Номенклатура.ВидНоменклатуры
	|		И Характеристики.Наименование = ЗагружаемыеДанные.НаименованиеХарактеристики
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.НаименованиеХарактеристики = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор	КАК Идентификатор,
	|		ДанныеШтрихкодов.Характеристика	КАК Характеристика
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК Характеристики
	|
	|СГРУППИРОВАТЬ ПО
	|	Характеристики.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеНазначений()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор				КАК Идентификатор,
	|	МАКСИМУМ(СпрНазначения.Ссылка)				КАК Назначение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрНазначения.Ссылка)	КАК КоличествоНазначений
	|ПОМЕСТИТЬ ВтДанныеНазначений
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
	|	ПО СпрНазначения.Наименование = ЗагружаемыеДанные.НаименованиеНазначения
	|
	|ГДЕ
	|	НЕ ЗагружаемыеДанные.НаименованиеНазначения = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеСерий()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор				КАК Идентификатор,
	|	МАКСИМУМ(СпрСерии.Ссылка)				КАК Серия,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрСерии.Ссылка)	КАК КоличествоСерий
	|ПОМЕСТИТЬ ВтДанныеСерий
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СпрСерии
	|	ПО СпрСерии.Наименование = ЗагружаемыеДанные.НаименованиеСерии
	|
	|ГДЕ
	|	НЕ ЗагружаемыеДанные.НаименованиеСерии = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеУпаковок()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Упаковки.Идентификатор					КАК Идентификатор,
	|	МАКСИМУМ(Упаковки.Упаковка)				КАК Упаковка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковки.Упаковка)	КАК КоличествоУпаковки
	|ПОМЕСТИТЬ ВтДанныеУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Упаковки.Ссылка					КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Упаковки.Наименование = ЗагружаемыеДанные.НаименованиеУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.НаименованиеУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Упаковки.Ссылка					КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура.НаборУпаковок
	|		И Упаковки.Наименование = ЗагружаемыеДанные.НаименованиеУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.НаименованиеУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Упаковки.Ссылка					КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Упаковки.Код = ЗагружаемыеДанные.КодУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Упаковки.Ссылка					КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура.НаборУпаковок
	|		И Упаковки.Код = ЗагружаемыеДанные.КодУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор	КАК Идентификатор,
	|		ДанныеШтрихкодов.Упаковка		КАК Упаковка
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК Упаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗагружаемыеДанныеМатериаловИРабот()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор								КАК Идентификатор,
	|	СпрПартииПроизводства.Ссылка								КАК ПартияПроизводства,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) = 1
	|			ТОГДА ДанныеСтатейКалькуляции.СтатьяКалькуляции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	КОНЕЦ														КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеНоменклатуры.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА ДанныеНоменклатуры.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ														КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеХарактеристик.КоличествоХарактеристик, 0) = 1
	|			ТОГДА ДанныеХарактеристик.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ														КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0) = 1
	|			ТОГДА ДанныеНазначений.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ														КАК Назначение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСерий.КоличествоСерий, 0) = 1
	|			ТОГДА ДанныеСерий.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ														КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0) = 1
	|			ТОГДА ДанныеУпаковок.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ														КАК Упаковка,
	|	ЕСТЬNULL(ДанныеНоменклатуры.КоличествоНоменклатуры, 0)		КАК КоличествоНоменклатуры,
	|	ЕСТЬNULL(ДанныеХарактеристик.КоличествоХарактеристик, 0)	КАК КоличествоХарактеристик,
	|	ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0)			КАК КоличествоНазначений,
	|	ЕСТЬNULL(ДанныеСерий.КоличествоСерий, 0)					КАК КоличествоСерий,
	|	ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0)				КАК КоличествоУпаковки,
	|	ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) КАК КоличествоСтатейКалькуляции,
	|	ЗагружаемыеДанные.КоличествоУпаковок						КАК КоличествоУпаковок,
	|	ЗагружаемыеДанные.Сумма										КАК Сумма
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеДокументовПартии КАК ДанныеДокументовПартии
	|	ПО ДанныеДокументовПартии.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Документ = ДанныеДокументовПартии.ДокументПартии
	|	И СпрПартииПроизводства.Код = ЗагружаемыеДанные.НомерГруппыЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСтатейКалькуляции КАК ДанныеСтатейКалькуляции
	|	ПО ДанныеСтатейКалькуляции.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|	ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеХарактеристик КАК ДанныеХарактеристик
	|	ПО ДанныеХарактеристик.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеНазначений КАК ДанныеНазначений
	|	ПО ДанныеНазначений.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСерий КАК ДанныеСерий
	|	ПО ДанныеСерий.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУпаковок КАК ДанныеУпаковок
	|	ПО ДанныеУпаковок.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧТрудозатраты

Функция ТекстЗапросаВтЗагружаемыеДанныеТрудозатраты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор					КАК Идентификатор,
	|	ЗагружаемыеДанные.ТипДокумента					КАК ТипДокумента,
	|	ЗагружаемыеДанные.ДатаДокумента					КАК ДатаДокумента,
	|	ЗагружаемыеДанные.НомерДокумента				КАК НомерДокумента,
	|	ЗагружаемыеДанные.НомерГруппыЗатрат				КАК НомерГруппыЗатрат,
	|	ЗагружаемыеДанные.НаименованиеСтатьиКалькуляции	КАК НаименованиеСтатьиКалькуляции,
	|	ЗагружаемыеДанные.Сумма							КАК Сумма,
	|	ЗагружаемыеДанные.КодВидаРабот					КАК КодВидаРабот,
	|	ЗагружаемыеДанные.НаименованиеВидаРабот			КАК НаименованиеВидаРабот,
	|	ЗагружаемыеДанные.Количество					КАК Количество,
	|	ЗагружаемыеДанные.НормативнаяСумма				КАК НормативнаяСумма
	|ПОМЕСТИТЬ ВтЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеВидовРабот()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыРабот.Идентификатор						КАК Идентификатор,
	|	МАКСИМУМ(ВидыРабот.ВидРабот)				КАК ВидРабот,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыРабот.ВидРабот)	КАК КоличествоВидовРабот
	|ПОМЕСТИТЬ ВтДанныеВидовРабот
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		ВидыРабот.Ссылка				КАК ВидРабот
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРабот
	|		ПО ВидыРабот.Код = ЗагружаемыеДанные.КодВидаРабот
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.КодВидаРабот = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		ВидыРабот.Ссылка				КАК ВидРабот
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРабот
	|		ПО ВидыРабот.Наименование = ЗагружаемыеДанные.НаименованиеВидаРабот
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.НаименованиеВидаРабот = """"
	|	) КАК ВидыРабот
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыРабот.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	ВидРабот
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗагружаемыеДанныеТрудозатраты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор								КАК Идентификатор,
	|	СпрПартииПроизводства.Ссылка								КАК ПартияПроизводства,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) = 1
	|			ТОГДА ДанныеСтатейКалькуляции.СтатьяКалькуляции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	КОНЕЦ														КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеВидовРабот.КоличествоВидовРабот, 0) = 1
	|			ТОГДА ДанныеВидовРабот.ВидРабот
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыРаботСотрудников.ПустаяСсылка)
	|	КОНЕЦ														КАК ВидРабот,
	|	ЕСТЬNULL(ДанныеВидовРабот.КоличествоВидовРабот, 0)			КАК КоличествоВидовРабот,
	|	ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) КАК КоличествоСтатейКалькуляции,
	|	ЗагружаемыеДанные.Количество								КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ ЗагружаемыеДанные.Количество = 0
	|			ТОГДА ВЫРАЗИТЬ(ЗагружаемыеДанные.НормативнаяСумма / ЗагружаемыеДанные.Количество КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ														КАК НормативнаяРасценка,
	|	ЗагружаемыеДанные.НормативнаяСумма							КАК НормативнаяСумма,
	|	ЗагружаемыеДанные.Сумма										КАК Сумма
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеДокументовПартии КАК ДанныеДокументовПартии
	|	ПО ДанныеДокументовПартии.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Документ = ДанныеДокументовПартии.ДокументПартии
	|	И СпрПартииПроизводства.Код = ЗагружаемыеДанные.НомерГруппыЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСтатейКалькуляции КАК ДанныеСтатейКалькуляции
	|	ПО ДанныеСтатейКалькуляции.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеВидовРабот КАК ДанныеВидовРабот
	|	ПО ДанныеВидовРабот.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовЗагрузкиИзФайлаВТЧПрочиеРасходы

Функция ТекстЗапросаВтЗагружаемыеДанныеПрочиеРасходы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор					КАК Идентификатор,
	|	ЗагружаемыеДанные.ТипДокумента					КАК ТипДокумента,
	|	ЗагружаемыеДанные.ДатаДокумента					КАК ДатаДокумента,
	|	ЗагружаемыеДанные.НомерДокумента				КАК НомерДокумента,
	|	ЗагружаемыеДанные.НомерГруппыЗатрат				КАК НомерГруппыЗатрат,
	|	ЗагружаемыеДанные.НаименованиеСтатьиКалькуляции	КАК НаименованиеСтатьиКалькуляции,
	|	ЗагружаемыеДанные.Сумма							КАК Сумма,
	|	ЗагружаемыеДанные.КодСтатьиРасходов				КАК КодСтатьиРасходов,
	|	ЗагружаемыеДанные.НаименованиеСтатьиРасходов	КАК НаименованиеСтатьиРасходов
	|ПОМЕСТИТЬ ВтЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеСтатейРасходов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Идентификатор						КАК Идентификатор,
	|	МАКСИМУМ(СтатьиРасходов.СтатьяРасходов)				КАК СтатьяРасходов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатьиРасходов.СтатьяРасходов)	КАК КоличествоСтатейРасходов
	|ПОМЕСТИТЬ ВтДанныеСтатейРасходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		СтатьиРасходов.Ссылка			КАК СтатьяРасходов
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО СтатьиРасходов.Код = ЗагружаемыеДанные.КодСтатьиРасходов
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.КодСтатьиРасходов = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		СтатьиРасходов.Ссылка			КАК СтатьяРасходов
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО СтатьиРасходов.Наименование = ЗагружаемыеДанные.НаименованиеСтатьиРасходов
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.НаименованиеСтатьиРасходов = """"
	|	) КАК СтатьиРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиРасходов.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	СтатьяРасходов
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗагружаемыеДанныеПрочиеРасходы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор								КАК Идентификатор,
	|	СпрПартииПроизводства.Ссылка								КАК ПартияПроизводства,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) = 1
	|			ТОГДА ДанныеСтатейКалькуляции.СтатьяКалькуляции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	КОНЕЦ														КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСтатейРасходов.КоличествоСтатейРасходов, 0) = 1
	|			ТОГДА ДанныеСтатейРасходов.СтатьяРасходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ														КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеСтатейРасходов.КоличествоСтатейРасходов, 0) = 1
	|			И ДанныеСтатейРасходов.СтатьяРасходов.ПравилоРаспределенияРасходов.БазаРаспределенияПоПартиям В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативРасходаМатериала),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымЗатратам)
	|		КОГДА ЕСТЬNULL(ДанныеСтатейРасходов.КоличествоСтатейРасходов, 0) = 1
	|			И ДанныеСтатейРасходов.СтатьяРасходов.ПравилоРаспределенияРасходов.БазаРаспределенияПоПартиям В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ДлительностьВыполненияРабот))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПравилаОтнесенияНаВыпуск.ПоТрудозатратам)
	|		КОГДА ЕСТЬNULL(ДанныеСтатейРасходов.КоличествоСтатейРасходов, 0) = 1
	|			И ДанныеСтатейРасходов.СтатьяРасходов.ПравилоРаспределенияРасходов.БазаРаспределенияПоПартиям =
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.СуммаМатериальныхИТрудозатрат)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПравилаОтнесенияНаВыпуск.ПоМатериальнымИТрудозатратам)
	|		КОГДА ЕСТЬNULL(ДанныеСтатейРасходов.КоличествоСтатейРасходов, 0) = 1
	|			И ДанныеСтатейРасходов.СтатьяРасходов.ПравилоРаспределенияРасходов.БазаРаспределенияПоПартиям В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.КоличествоПродукцииСУчетомБудущихВыпусков),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ОбъемПродукцииСУчетомБудущихВыпусков),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВесПродукцииСУчетомБудущихВыпусков),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукцииСУчетомБудущихВыпусков))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПравилаОтнесенияНаВыпуск.ПоПродукцииСУчетомБудущихВыпусков)
	|		КОГДА ЕСТЬNULL(ДанныеСтатейРасходов.КоличествоСтатейРасходов, 0) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПравилаОтнесенияНаВыпуск.ПоПродукции)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПравилаОтнесенияНаВыпуск.ПустаяСсылка)
	|	КОНЕЦ														КАК ПравилоОтнесенияНаВыпуск,
	|	ЕСТЬNULL(ДанныеСтатейРасходов.КоличествоСтатейРасходов, 0)	КАК КоличествоСтатейРасходов,
	|	ЕСТЬNULL(ДанныеСтатейКалькуляции.КоличествоСтатейКалькуляции, 0) КАК КоличествоСтатейКалькуляции,
	|	ЗагружаемыеДанные.Сумма										КАК Сумма
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеДокументовПартии КАК ДанныеДокументовПартии
	|	ПО ДанныеДокументовПартии.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|	ПО СпрПартииПроизводства.Документ = ДанныеДокументовПартии.ДокументПартии
	|	И СпрПартииПроизводства.Код = ЗагружаемыеДанные.НомерГруппыЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСтатейКалькуляции КАК ДанныеСтатейКалькуляции
	|	ПО ДанныеСтатейКалькуляции.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСтатейРасходов КАК ДанныеСтатейРасходов
	|	ПО ДанныеСтатейРасходов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли