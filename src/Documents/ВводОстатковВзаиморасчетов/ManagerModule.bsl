#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТ
#Область ЗаполнениеПоДаннымОперативногоУчета

// Возвращает таблицу значения для заполнения документа ввода остатков данными, полученными по данным оперативного учета.
// 
// Параметры:
// 	Дата - Дата - Дата, на которую формируются остатки.
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, для которой выбираются остатки
// 	Организации - Массив - Массив, содержащий элементы типа СправочникСсылка.Организации, для которых выбираются остатки.
// 	ДополнительныйОтбор - Структура - Структура, содержащая ключ и значение дополнительного отбора.
// 	ПараметрыЗаполненияОстатков - Структура - Структура, содержащая дополнительные параметры необходимые, для заполнения остатков.
// Возвращаемое значение:
// 	ТаблицаЗначений, Неопределено - Если для данной хозяйственной операции есть данные, для нее возвращается таблица значений с значениями заполнения.
//
Функция ОстаткиПоТипуОперации(Дата, ХозяйственнаяОперация, Организации, ДополнительныйОтбор = Неопределено, ПараметрыЗаполненияОстатков = Неопределено) Экспорт
	
	ДатаОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	Возврат ОстаткиПоРасчетамСПартнерами(ДатаОстатков, ХозяйственнаяОперация, Организации);
	
КонецФункции

// Возвращает массив в котором содержатся имена полей при изменении которых, необходимо генерировать новый документ ввода остатков.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, для которой определяются ключевые поля.
// Возвращаемое значение:
// 	Массив - Массив содержащий имена полей.
//
Функция КлючевыеПоляРеглУчетаПоТипуОперации(ХозяйственнаяОперация) Экспорт
	
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Организация");
	
	Возврат МассивКлючевыхПолей;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область Проведение

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица_ИмяРегистра - ТаблицаЗначений - таблица данных для отражения в регистр (вместо _ИмяРегистра подставляется имя самого регистра).
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВводОстатковВзаиморасчетов") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	Если Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам Тогда
		ДействующиеПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("УчетнаяПолитикаФинансовогоУчета", Документ.Организация, Документ.Дата);
		Дисконт = ДействующиеПараметрыУчетнойПолитики.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам;
		Если Дисконт Тогда
			ТекстЗапросаТаблицаПроцентныеРасходыДисконтирования(Запрос, ТекстыЗапроса, Регистры);
		КонецЕсли;
	КонецЕсли;
	ВводОстатковЛокализация.ВводОстатковВзаиморасчетовДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, ПустаяСсылка().Метаданные());
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	
	ВводОстатковЛокализация.ВводОстатковВзаиморасчетовЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	ВводОстатковЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	ВводОстатковЛокализация.ВводОстатковВзаиморасчетовДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ПроведениеРегламентированныйУчет

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//  Строка - Содержащая текст запроса для отражения в регл. учете.
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	Возврат ВводОстатковЛокализация.ВводОстатковВзаиморасчетовТекстОтраженияВРеглУчете();
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//  Строка - Содержащая текст запроса временных таблиц для отражения в регл. учете.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	Возврат ВводОстатковЛокализация.ВводОстатковВзаиморасчетовТекстЗапросаВТОтраженияВРеглУчете();
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ДляВызоваИзДругихПодсистем

// Добавляет команду создания документа на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//	КомандаФормы - добавляемая команда.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.ВводОстатковВзаиморасчетов);
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Список типов объектов расчетов для формы выбора типа, доступных текущему пользователю для создания
// 
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция ввода остатков расчетов.
//  ЭтоРасчетыМеждуОрганизациями - Булево
//  ЭтоРозничныйПокупатель - Булево
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Список доступных типов объектов расчетов
Функция СписокДоступныхТиповОбъектовРасчетов(ХозяйственнаяОперация, ЭтоРасчетыМеждуОрганизациями, ЭтоРозничныйПокупатель) Экспорт
	
	СписокТипов = Новый СписокЗначений;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
	
		Если ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыМеждуОрганизациями) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыМеждуОрганизациями.ПолноеИмя(),
				НСтр("ru = 'Договор между организациями';
					|en = 'Intercompany contract'"));
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя(),
				НСтр("ru = 'Договор с контрагентом';
					|en = 'Contract'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказКлиента) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказКлиента.ПолноеИмя(),
				НСтр("ru = 'Заказ клиента';
					|en = 'Sales order'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя(),
				НСтр("ru = 'Заявка на возврат товаров от клиента';
					|en = 'Sales return request'"));
		КонецЕсли;
		//++ НЕ УТКА
		
		//++ Устарело_Переработка24
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказДавальца.ПолноеИмя(),
				НСтр("ru = 'Заказ давальца 2.4';
					|en = 'Subcontracting sales order 2.4'"));
		КонецЕсли;
		//-- Устарело_Переработка24
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыДавальцев2_5")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца2_5) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказДавальца2_5.ПолноеИмя(),
				НСтр("ru = 'Заказ давальца';
					|en = 'Subcontracting sales order'"));
		КонецЕсли;
		//-- НЕ УТКА
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПервичныйДокумент) Тогда
			СписокТипов.Добавить(
				Новый Структура("ИмяОбъектаМетаданных, ТипПервичногоДокумента",
					Метаданные.Документы.ПервичныйДокумент.ПолноеИмя(),
					Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента),
				НСтр("ru = 'Оплата от клиента';
					|en = 'Payment from customer'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты")
				И ЭтоРозничныйПокупатель
			И ПравоДоступа("Добавление", Метаданные.Справочники.ПодарочныеСертификаты) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ПодарочныеСертификаты.ПолноеИмя(),
				НСтр("ru = 'Подарочный сертификат';
					|en = 'Gift card'"));
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
		
		Если ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыМеждуОрганизациями) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыМеждуОрганизациями.ПолноеИмя(),
				НСтр("ru = 'Договор между организациями';
					|en = 'Intercompany contract'"));
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками")
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя(),
				НСтр("ru = 'Договор с контрагентом';
					|en = 'Contract'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказПоставщику.ПолноеИмя(),
				НСтр("ru = 'Заказ поставщику';
					|en = 'Purchase order'"));
		КонецЕсли;
		
		//++ НЕ УТ
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику2_5) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказПереработчику2_5.ПолноеИмя(),
				НСтр("ru = 'Заказ переработчику';
					|en = 'Subcontracting purchase order'"));
		КонецЕсли;
		//-- НЕ УТ
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПервичныйДокумент) Тогда
			СписокТипов.Добавить(
				Новый Структура("ИмяОбъектаМетаданных, ТипПервичногоДокумента",
					Метаданные.Документы.ПервичныйДокумент.ПолноеИмя(),
					Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику),
				НСтр("ru = 'Оплата поставщику';
					|en = 'Payment to vendor'"));
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов Тогда
		
		Если ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыМеждуОрганизациями) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыМеждуОрганизациями.ПолноеИмя(),
				НСтр("ru = 'Договор между организациями';
					|en = 'Intercompany contract'"));
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя(),
				НСтр("ru = 'Договор с контрагентом';
					|en = 'Contract'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказКлиента) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказКлиента.ПолноеИмя(),
				НСтр("ru = 'Заказ клиента';
					|en = 'Sales order'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя(),
				НСтр("ru = 'Заявка на возврат товаров от клиента';
					|en = 'Sales return request'"));
		КонецЕсли;
		//++ НЕ УТКА
		
		//++ Устарело_Переработка24
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказДавальца.ПолноеИмя(),
				НСтр("ru = 'Заказ давальца 2.4';
					|en = 'Subcontracting sales order 2.4'"));
		КонецЕсли;
		//-- Устарело_Переработка24
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыДавальцев2_5")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца2_5) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказДавальца2_5.ПолноеИмя(),
				НСтр("ru = 'Заказ давальца';
					|en = 'Subcontracting sales order'"));
		КонецЕсли;
		//-- НЕ УТКА
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПервичныйДокумент) Тогда
			СписокТипов.Добавить(
				Новый Структура("ИмяОбъектаМетаданных, ТипПервичногоДокумента",
					Метаданные.Документы.ПервичныйДокумент.ПолноеИмя(),
					Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту),
				НСтр("ru = 'Реализация клиенту';
					|en = 'Customer sales'"));
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыДавальцев2_5")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ПервичныйДокумент) Тогда
			СписокТипов.Добавить(
				Новый Структура("ИмяОбъектаМетаданных, ТипПервичногоДокумента",
					Метаданные.Документы.ПервичныйДокумент.ПолноеИмя(),
					Перечисления.ТипыПервичныхДокументов.ОтчетДавальцу),
				НСтр("ru = 'Отчет давальцу';
					|en = 'Consumption report — Subcontracting services delivered'"));
		КонецЕсли;
		//-- НЕ УТКА
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам Тогда
		
		Если ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыМеждуОрганизациями) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыМеждуОрганизациями.ПолноеИмя(),
				НСтр("ru = 'Договор между организациями';
					|en = 'Intercompany contract'"));
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками")
			И ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
			СписокТипов.Добавить(
				Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя(),
				НСтр("ru = 'Договор с контрагентом';
					|en = 'Contract'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказПоставщику.ПолноеИмя(),
				НСтр("ru = 'Заказ поставщику';
					|en = 'Purchase order'"));
		КонецЕсли;
		//++ НЕ УТ
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику2_5) Тогда
			СписокТипов.Добавить(
				Метаданные.Документы.ЗаказПереработчику2_5.ПолноеИмя(),
				НСтр("ru = 'Заказ переработчику';
					|en = 'Subcontracting purchase order'"));
		КонецЕсли;
		//-- НЕ УТ
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПервичныйДокумент) Тогда
			СписокТипов.Добавить(
				Новый Структура("ИмяОбъектаМетаданных, ТипПервичногоДокумента",
					Метаданные.Документы.ПервичныйДокумент.ПолноеИмя(),
					Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика),
				НСтр("ru = 'Приобретение у поставщика';
					|en = 'Purchase from vendor'"));
		КонецЕсли;
		
		//++ НЕ УТ
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5")
			И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Документы.ПервичныйДокумент) Тогда
			СписокТипов.Добавить(
				Новый Структура("ИмяОбъектаМетаданных, ТипПервичногоДокумента",
					Метаданные.Документы.ПервичныйДокумент.ПолноеИмя(),
					Перечисления.ТипыПервичныхДокументов.ОтчетПереработчика),
				НСтр("ru = 'Отчет переработчика';
					|en = 'Subcontracting services notification received'"));
		КонецЕсли;
		//-- НЕ УТ
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПретензии")
		И Не ЭтоРасчетыМеждуОрганизациями
			И ПравоДоступа("Добавление", Метаданные.Справочники.Претензии) Тогда
		СписокТипов.Добавить(
			Метаданные.Справочники.Претензии.ПолноеИмя(),
			НСтр("ru = 'Претензия';
				|en = 'Complaint'"));
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	ВыбраннаяОперация = Неопределено;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		ВыбраннаяОперация = Параметры.Ключ.ХозяйственнаяОперация;
		
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		Параметры.ЗначенияЗаполнения.Свойство("ХозяйственнаяОперация", ВыбраннаяОперация);
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		
		ВыбраннаяОперация = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования,"ХозяйственнаяОперация");
		
	ИначеЕсли Параметры.Свойство("ОтборПоТипамОпераций") И Параметры.ОтборПоТипамОпераций.Количество() = 1 Тогда
		
		ВыбраннаяОперация = Параметры.ОтборПоТипамОпераций[0].Значение;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ВыбраннаяОперация);
		
		Параметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		Если Параметры.Свойство("Организация") Тогда
			ЗначенияЗаполнения.Вставить("Организация", Параметры.Организация);
		КонецЕсли;
		
		Если Параметры.Свойство("ОтражатьВОперативномУчете") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВОперативномУчете", Параметры.ОтражатьВОперативномУчете);
		КонецЕсли;
		
		Если Параметры.Свойство("ОтражатьВБУиНУ") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВБУиНУ", Параметры.ОтражатьВБУиНУ);
		КонецЕсли;
		
		Если Параметры.Свойство("ОтражатьВУУ") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВУУ", Параметры.ОтражатьВУУ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяОперация) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоответствиеТиповОперацийФормам = Новый Соответствие;
		СоответствиеТиповОперацийФормам.Вставить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов"),                   "ФормаРасчетыСПартнерами");
		СоответствиеТиповОперацийФормам.Вставить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам"),                "ФормаРасчетыСПартнерами");
		СоответствиеТиповОперацийФормам.Вставить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов"),                         "ФормаРасчетыСПартнерами");
		СоответствиеТиповОперацийФормам.Вставить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам"),                      "ФормаРасчетыСПартнерами");
		
		ВыбраннаяФорма = СоответствиеТиповОперацийФормам[ВыбраннаяОперация];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = ВводОстатковВызовСервера.ЗаголовокДокументаВводОстатковПоХозяйственнойОперации(Данные,
		Данные.Номер,
		Данные.Дата,
		Данные.ХозяйственнаяОперация);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных; 
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеДокумента.Дата КАК Период,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВОперативномУчете КАК ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ КАК ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ КАК ОтражатьВУУ,
		|	ДанныеДокумента.Ответственный КАК Ответственный,
		|	ПервичныйДокумент.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)) КАК Комментарий,
		|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
		|	ДанныеДокумента.Проведен КАК Проведен,
		|	ДанныеДокумента.Исправление КАК Исправление,
		|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
		|	НастройкиХозяйственныхОпераций.Ссылка КАК НастройкаХозяйственнойОперации,
		|	СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиРасчетыСПартнерами.Сумма, 0)) КАК СуммаДокумента
		|ИЗ
		|	Документ.ВводОстатковВзаиморасчетов КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ДанныеТабличнойЧастиРасчетыСПартнерами
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРасчетыСПартнерами.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
		|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПервичныйДокумент КАК ПервичныйДокумент
		|		ПО ДанныеТабличнойЧастиРасчетыСПартнерами.ДокументРасчетов = ПервичныйДокумент.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.Номер,
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ,
		|	ДанныеДокумента.Ответственный,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)),
		|	ДанныеДокумента.ПометкаУдаления,
		|	ПервичныйДокумент.НаправлениеДеятельности, 
		|	ДанныеДокумента.Проведен,
		|	ДанныеДокумента.Исправление,
		|	ДанныеДокумента.СторнируемыйДокумент,
		|	ДанныеДокумента.ИсправляемыйДокумент,
		|	НастройкиХозяйственныхОпераций.Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",  Реквизиты.Номер);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	
	СписокТиповЗаказов = Новый СписокЗначений;
	СписокТиповЗаказов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	СписокТиповЗаказов.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказДавальца"));
	//-- Устарело_Переработка24
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказДавальца2_5"));
	//-- НЕ УТКА

	//++ НЕ УТ
	
	//++ Устарело_Переработка24
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПереработчику"));
	//-- Устарело_Переработка24
	СписокТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПереработчику2_5"));
	//-- НЕ УТ
	Запрос.УстановитьПараметр("СписокТиповЗаказов", СписокТиповЗаказов);
	
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",          Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ОтражатьВОперативномУчете",      Реквизиты.ОтражатьВОперативномУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУиНУ",                 Реквизиты.ОтражатьВБУиНУ);
	Запрос.УстановитьПараметр("ОтражатьВУУ",                    Реквизиты.ОтражатьВУУ);
	Запрос.УстановитьПараметр("Ответственный",                  Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Комментарий",                    Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",                Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                       Реквизиты.Проведен);
	Запрос.УстановитьПараметр("Исправление",                    Реквизиты.Исправление);
	Запрос.УстановитьПараметр("СторнируемыйДокумент",           Реквизиты.СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент",           Реквизиты.ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("СуммаДокумента",                 Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации", Реквизиты.НастройкаХозяйственнойОперации);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ."+Метаданные.Документы.ВводОстатковВзаиморасчетов.Имя));
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиПоПартнерам(Запрос)
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВтТаблицаОбъектовРасчетов") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.УстановитьПараметр("Ссылка"     ,               Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Организация",               Запрос.Параметры.Организация);
	ЗапросАналитик.УстановитьПараметр("ХозяйственнаяОперация",     Запрос.Параметры.ХозяйственнаяОперация);
	ЗапросАналитик.УстановитьПараметр("ОтражатьВОперативномУчете", Запрос.Параметры.ОтражатьВОперативномУчете);
	ЗапросАналитик.УстановитьПараметр("ОтражатьВБУиНУ",            Запрос.Параметры.ОтражатьВБУиНУ);
	
	ЗапросАналитик.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросАналитик.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасчетыСПартнерами.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСПартнерами.ОбъектРасчетовОтправитель КАК ОбъектРасчетовОтправитель,
	|	ВЫБОР
	|		КОГДА ОбъектыРасчетов.Организация.ГоловнаяОрганизация = &Организация
	|			ТОГДА ОбъектыРасчетов.Организация
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам))
	|					И ЕСТЬNULL(Направления.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|				ИЛИ &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов))
	|					И ЕСТЬNULL(Направления.УчетДоходов, ЛОЖЬ)
	|			ТОГДА ТаблицаРасчетыСПартнерами.ОбъектРасчетовОтправитель.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВтТаблицаОбъектовРасчетов
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ТаблицаРасчетыСПартнерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ТаблицаРасчетыСПартнерами.ОбъектРасчетовОтправитель = ОбъектыРасчетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК Направления
	|		ПО ТаблицаРасчетыСПартнерами.ОбъектРасчетовОтправитель.НаправлениеДеятельности = Направления.Ссылка
	|ГДЕ
	|	ТаблицаРасчетыСПартнерами.Ссылка = &Ссылка
	|	И (&ОтражатьВОперативномУчете ИЛИ &ОтражатьВБУиНУ)
	|	И &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектовРасчетов.Организация КАК Организация,
	|	ТаблицаРасчетыСПартнерами.Партнер КАК Партнер,
	|	ТаблицаРасчетыСПартнерами.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ИЛИ ТаблицаРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	|			ТОГДА ТаблицаРасчетыСПартнерами.ОбъектРасчетов
	|		КОГДА ТаблицаРасчетыСПартнерами.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ТОГДА ЕСТЬNULL(ТаблицаРасчетыСПартнерами.ОбъектРасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаРасчетыСПартнерами.ОбъектРасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|	КОНЕЦ КАК Договор,
	|	ТаблицаОбъектовРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ТаблицаРасчетыСПартнерами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаОбъектовРасчетов КАК ТаблицаОбъектовРасчетов
	|		ПО ТаблицаРасчетыСПартнерами.ОбъектРасчетов = ТаблицаОбъектовРасчетов.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО (ТаблицаОбъектовРасчетов.Организация = РегистрАналитикаУчетаПоПартнерам.Организация)
	|			И ТаблицаРасчетыСПартнерами.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|			И ТаблицаРасчетыСПартнерами.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И (ВЫБОР
	|				КОГДА ТаблицаРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|						ИЛИ ТаблицаРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	|					ТОГДА ТаблицаРасчетыСПартнерами.ОбъектРасчетов
	|				КОГДА ТаблицаРасчетыСПартнерами.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|					ТОГДА ЕСТЬNULL(ТаблицаРасчетыСПартнерами.ОбъектРасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка))
	|				ИНАЧЕ ЕСТЬNULL(ТаблицаРасчетыСПартнерами.ОбъектРасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			КОНЕЦ = РегистрАналитикаУчетаПоПартнерам.Договор)
	|			И (ТаблицаОбъектовРасчетов.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности)
	|ГДЕ
	|	ТаблицаРасчетыСПартнерами.Ссылка = &Ссылка
	|	И РегистрАналитикаУчетаПоПартнерам.КлючАналитики ЕСТЬ NULL
	|	И &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам))
	|";
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Функция вызывается для проверки и создания ключа аналитики
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКурсыВалют";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.КурсЧислитель / КурсыВалютСрезПоследних.КурсЗнаменатель КАК КоэффициентПересчета
	|	
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|			&Период,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					&ВалютаУправленческогоУчета
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВводОстатковРасчетыСПартнерами.ВалютаВзаиморасчетов
	|				ИЗ
	|					Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ВводОстатковРасчетыСПартнерами
	|				ГДЕ
	|					ВводОстатковРасчетыСПартнерами.Ссылка = &Ссылка
	|				) И БазоваяВалюта = &ВалютаРегламентированногоУчета
	|	) КАК КурсыВалютСрезПоследних";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетыСПартнерами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтРасчетыСПартнерами";
	
	ИнициализироватьКлючиАналитикиПоПартнерам(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРасчетыСПартнерами.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасчетыСПартнерами.ДатаПлатежа КАК ДатаПлатежа,
	|	ТаблицаРасчетыСПартнерами.ОбъектРасчетовОтправитель КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСПартнерами.Сумма КАК Сумма,
	|	ТаблицаРасчетыСПартнерами.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасчетыСПартнерами.СуммаРегл КАК СуммаРегл,
	|	ТаблицаРасчетыСПартнерами.СуммаУпр КАК СуммаУпр,
	|	ТаблицаРасчетыСПартнерами.СуммаДисконтирования КАК СуммаДисконтирования,
	|	ТаблицаРасчетыСПартнерами.СуммаДисконтированияРегл КАК СуммаДисконтированияРегл,
	|	ТаблицаРасчетыСПартнерами.СуммаДисконтированияУпр КАК СуммаДисконтированияУпр,
	|	ТаблицаРасчетыСПартнерами.ОтложенныйДоходНУ КАК ОтложенныйДоходНУ,
	|	ТаблицаРасчетыСПартнерами.ОтложенныйРасходНУ КАК ОтложенныйРасходНУ,
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК КлючАналитики,
	|	ТаблицаРасчетыСПартнерами.ДокументРасчетов КАК РасчетныйДокумент,
	|	ЕСТЬNULL(ТаблицаПервичногоДокумента.НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(ТаблицаРасчетыСПартнерами.ДокументРасчетов.Дата, &Период) КАК ДатаРасчетныйДокумент
	|ПОМЕСТИТЬ ВтРасчетыСПартнерами
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ТаблицаРасчетыСПартнерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПервичныйДокумент КАК ТаблицаПервичногоДокумента
	|		ПО ТаблицаРасчетыСПартнерами.ДокументРасчетов = ТаблицаПервичногоДокумента.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаОбъектовРасчетов КАК ТаблицаОбъектовРасчетов
	|		ПО ТаблицаРасчетыСПартнерами.ОбъектРасчетов = ТаблицаОбъектовРасчетов.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО ТаблицаОбъектовРасчетов.Организация = Аналитика.Организация
	|		И ТаблицаРасчетыСПартнерами.Контрагент = Аналитика.Контрагент
	|		И ТаблицаРасчетыСПартнерами.Партнер = Аналитика.Партнер
	|		И (ВЫБОР
	|			КОГДА ТаблицаРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ИЛИ ТаблицаРасчетыСПартнерами.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	|				ТОГДА ТаблицаРасчетыСПартнерами.ОбъектРасчетов
	|			КОГДА ТаблицаРасчетыСПартнерами.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|				ТОГДА ЕСТЬNULL(ТаблицаРасчетыСПартнерами.ОбъектРасчетов.Договор,
	|					ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка))
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаРасчетыСПартнерами.ОбъектРасчетов.Договор,
	|				ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|		КОНЕЦ) = Аналитика.Договор
	|		И ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	ТаблицаРасчетыСПартнерами.Ссылка = &Ссылка
	|	И (&ОтражатьВОперативномУчете ИЛИ &ОтражатьВБУиНУ)
	|	И ТаблицаРасчетыСПартнерами.ОбъектРасчетовОтправитель <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	ОбъектРасчетов,
	|	КлючАналитики,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтРасчетыСПартнерами", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРасчетыСПартнерами(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                              КАК Порядок,
	|	ТаблицаРасчетыСКлиентами.НомерСтроки           КАК НомерСтроки,
	|	&Период                                        КАК Период,
	|	ТаблицаРасчетыСКлиентами.ДатаРасчетныйДокумент КАК ДатаРегистратора,
	|	&Номер                                         КАК НомерРегистратора,
	|	ТаблицаРасчетыСКлиентами.ДатаПлатежа           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
	|	&Организация                                   КАК Организация,
	|	ТаблицаРасчетыСКлиентами.ОбъектРасчетов        КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСКлиентами.ВалютаВзаиморасчетов  КАК Валюта,
	|	ТаблицаРасчетыСКлиентами.КлючАналитики         КАК АналитикаУчетаПоПартнерам,
	|	ИСТИНА                                         КАК ИсключатьПриКонтроле,
	|	ТаблицаРасчетыСКлиентами.Сумма                 КАК Сумма,
	|	0                                              КАК КОплате,
	|	ТаблицаРасчетыСКлиентами.СуммаРегл             КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыСКлиентами.СуммаУпр <> 0
	|			ТОГДА ТаблицаРасчетыСКлиентами.СуммаУпр
	|		КОГДА ТаблицаРасчетыСКлиентами.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСКлиентами.Сумма
	|		ИНАЧЕ
	|			ТаблицаРасчетыСКлиентами.Сумма * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ КАК СуммаУпр,
	|	ТаблицаРасчетыСКлиентами.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов) КАК ХозяйственнаяОперация,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	ТаблицаРасчетыСКлиентами.ОбъектРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации               КАК НастройкаХозяйственнойОперации,
	|	""1""                                         КАК Вид,
	|	ТаблицаРасчетыСКлиентами.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	ВтРасчетыСПартнерами КАК ТаблицаРасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО КурсыВалютВзаиморасчетов.Валюта = ТаблицаРасчетыСКлиентами.ВалютаВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
	|	И &ОтражатьВОперативномУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                                               КАК Порядок,
	|	ТаблицаРасчетыСКлиентами.НомерСтроки                                            КАК НомерСтроки,
	|	ВЫБОР КОГДА КОНЕЦПЕРИОДА(ТаблицаРасчетыСКлиентами.ДатаПлатежа, День) < &Период
	|		ТОГДА &Период
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ТаблицаРасчетыСКлиентами.ДатаПлатежа, День)
	|	КОНЕЦ                                                                           КАК Период,
	|	ТаблицаРасчетыСКлиентами.ДатаРасчетныйДокумент                                  КАК ДатаРегистратора,
	|	&Номер                                                                          КАК НомерРегистратора,
	|	ТаблицаРасчетыСКлиентами.ДатаПлатежа                                            КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                                          КАК ВидДвижения,
	|	&Организация                                                                    КАК Организация,
	|	ТаблицаРасчетыСКлиентами.ОбъектРасчетов                                         КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСКлиентами.ВалютаВзаиморасчетов                                   КАК Валюта,
	|	ТаблицаРасчетыСКлиентами.КлючАналитики                                          КАК АналитикаУчетаПоПартнерам,
	|	ИСТИНА                                                                          КАК ИсключатьПриКонтроле,
	|	0                                                                               КАК Сумма,
	|	ТаблицаРасчетыСКлиентами.Сумма                                                  КАК КОплате,
	|	0                                                                               КАК СуммаРегл,
	|	0                                                                               КАК СуммаУпр,
	|	ТаблицаРасчетыСКлиентами.РасчетныйДокумент                                      КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов) КАК ХозяйственнаяОперация,
	|	&ВалютаРегламентированногоУчета                                                 КАК ВалютаДокумента,
	|	ТаблицаРасчетыСКлиентами.ОбъектРасчетов.УникальныйИдентификатор                 КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                                                 КАК НастройкаХозяйственнойОперации,
	|	""1""                                                                           КАК Вид,
	|	ТаблицаРасчетыСКлиентами.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	ВтРасчетыСПартнерами КАК ТаблицаРасчетыСКлиентами
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
	|	И &ОтражатьВОперативномУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3                                              КАК Порядок,
	|	ТаблицаРасчетыСКлиентами.НомерСтроки           КАК НомерСтроки,
	|	&Период                                        КАК Период,
	|	ТаблицаРасчетыСКлиентами.ДатаРасчетныйДокумент КАК ДатаРегистратора,
	|	&Номер                                         КАК НомерРегистратора,
	|	ТаблицаРасчетыСКлиентами.ДатаПлатежа           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
	|	&Организация                                   КАК Организация,
	|	ТаблицаРасчетыСКлиентами.ОбъектРасчетов        КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСКлиентами.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасчетыСКлиентами.КлючАналитики         КАК АналитикаУчетаПоПартнерам,
	|	ИСТИНА                                         КАК ИсключатьПриКонтроле,
	|	ТаблицаРасчетыСКлиентами.Сумма                 КАК Сумма,
	|	ТаблицаРасчетыСКлиентами.Сумма                 КАК КОплате,
	|	ТаблицаРасчетыСКлиентами.СуммаРегл             КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыСКлиентами.СуммаУпр <> 0
	|			ТОГДА ТаблицаРасчетыСКлиентами.СуммаУпр
	|		КОГДА ТаблицаРасчетыСКлиентами.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСКлиентами.Сумма
	|		ИНАЧЕ
	|			ТаблицаРасчетыСКлиентами.Сумма * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                         КАК СуммаУпр,
	|	ТаблицаРасчетыСКлиентами.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов) КАК ХозяйственнаяОперация,
	|	&ВалютаРегламентированногоУчета               КАК ВалютаДокумента,
	|	ТаблицаРасчетыСКлиентами.ОбъектРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации               КАК НастройкаХозяйственнойОперации,
	|	""1""                                         КАК Вид,
	|	ТаблицаРасчетыСКлиентами.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	ВтРасчетыСПартнерами КАК ТаблицаРасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО КурсыВалютВзаиморасчетов.Валюта = ТаблицаРасчетыСКлиентами.ВалютаВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов)
	|	И &ОтражатьВОперативномУчете
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрАналитикаВзаиморасчетовПоставщик(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаВзаиморасчетовПоставщик") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиПоПартнерам(Запрос);
	
	АналитикаВзаиморасчетовПоставщик = Неопределено;
	
	Запрос.УстановитьПараметр("АналитикаВзаиморасчетовПоставщик", АналитикаВзаиморасчетовПоставщик);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтРасчетыСПартнерами", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРасчетыСПартнерами(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрАналитикаВзаиморасчетовПоставщик(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1                                                 КАК Порядок,
	|	ТаблицаРасчетыСПоставщиками.НомерСтроки           КАК НомерСтроки,
	|	&Период                                           КАК Период,
	|	ТаблицаРасчетыСПоставщиками.ДатаРасчетныйДокумент КАК ДатаРегистратора,
	|	&Номер                                            КАК НомерРегистратора,
	|	ТаблицаРасчетыСПоставщиками.ДатаПлатежа           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)            КАК ВидДвижения,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов        КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСПоставщиками.КлючАналитики         КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов  КАК Валюта,
	|	ТаблицаРасчетыСПоставщиками.Сумма                 КАК Сумма,
	|	0                                                 КАК КОплате,
	|	ТаблицаРасчетыСПоставщиками.СуммаРегл             КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыСПоставщиками.СуммаУпр <> 0
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаУпр
	|		КОГДА ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСПоставщиками.Сумма
	|		ИНАЧЕ
	|			ТаблицаРасчетыСПоставщиками.Сумма * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                            КАК СуммаУпр,
	|	ТаблицаРасчетыСПоставщиками.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам) КАК ХозяйственнаяОперация,
	|	&ВалютаРегламентированногоУчета                 КАК ВалютаДокумента,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                 КАК НастройкаХозяйственнойОперации,
	|	""1""                                           КАК Вид
	|ИЗ
	|	ВтРасчетыСПартнерами КАК ТаблицаРасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО КурсыВалютВзаиморасчетов.Валюта = ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
	|	И &ОтражатьВОперативномУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                           КАК Порядок,
	|	ТаблицаРасчетыСПоставщиками.НомерСтроки                     КАК НомерСтроки,
	|	ВЫБОР КОГДА КОНЕЦПЕРИОДА(ТаблицаРасчетыСПоставщиками.ДатаПлатежа, День) < &Период
	|		ТОГДА &Период
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ТаблицаРасчетыСПоставщиками.ДатаПлатежа, День)
	|	КОНЕЦ                                                       КАК Период,
	|	ТаблицаРасчетыСПоставщиками.ДатаРасчетныйДокумент           КАК ДатаРегистратора,
	|	&Номер                                                      КАК НомерРегистратора,
	|	ТаблицаРасчетыСПоставщиками.ДатаПлатежа                     КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                      КАК ВидДвижения,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов                  КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСПоставщиками.КлючАналитики                   КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов            КАК Валюта,
	|	0                                                           КАК Сумма,
	|	ТаблицаРасчетыСПоставщиками.Сумма                           КАК КОплате,
	|	0                                                           КАК СуммаРегл,
	|	0                                                           КАК СуммаУпр,
	|	ТаблицаРасчетыСПоставщиками.РасчетныйДокумент               КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам) КАК ХозяйственнаяОперация,
	|	&ВалютаРегламентированногоУчета                             КАК ВалютаДокумента,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                             КАК НастройкаХозяйственнойОперации,
	|	""1""                                                       КАК Вид
	|ИЗ
	|	ВтРасчетыСПартнерами КАК ТаблицаРасчетыСПоставщиками
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
	|	И &ОтражатьВОперативномУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3                                                 КАК Порядок,
	|	ТаблицаРасчетыСПоставщиками.НомерСтроки           КАК НомерСтроки,
	|	&Период                                           КАК Период,
	|	ТаблицаРасчетыСПоставщиками.ДатаРасчетныйДокумент КАК ДатаРегистратора,
	|	&Номер                                            КАК НомерРегистратора,
	|	ТаблицаРасчетыСПоставщиками.ДатаПлатежа           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов        КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСПоставщиками.КлючАналитики         КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасчетыСПоставщиками.Сумма                 КАК Сумма,
	|	ТаблицаРасчетыСПоставщиками.Сумма                 КАК КОплате,
	|	ТаблицаРасчетыСПоставщиками.СуммаРегл             КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыСПоставщиками.СуммаУпр <> 0
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаУпр
	|		КОГДА ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСПоставщиками.Сумма
	|		ИНАЧЕ
	|			ТаблицаРасчетыСПоставщиками.Сумма * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                            КАК СуммаУпр,
	|	ТаблицаРасчетыСПоставщиками.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам) КАК ХозяйственнаяОперация,
	|	&ВалютаРегламентированногоУчета                  КАК ВалютаДокумента,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации                  КАК НастройкаХозяйственнойОперации,
	|	""1""                                            КАК Вид
	|ИЗ
	|	ВтРасчетыСПартнерами КАК ТаблицаРасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО КурсыВалютВзаиморасчетов.Валюта = ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам)
	|	И &ОтражатьВОперативномУчете
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПроцентныеРасходыДисконтирования(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПроцентныеРасходыДисконтирования";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтРасчетыСПартнерами", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРасчетыСПартнерами(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрАналитикаВзаиморасчетовПоставщик(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1                                                 КАК Порядок,
	|	&Период                                           КАК Период,
	|	ТаблицаРасчетыСПоставщиками.ДатаРасчетныйДокумент КАК ДатаРегистратора,
	|	&Номер                                            КАК НомерРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов        КАК ОбъектРасчетов,
	|	ТаблицаРасчетыСПоставщиками.КлючАналитики         КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов  КАК Валюта,
	|	СУММА(ТаблицаРасчетыСПоставщиками.СуммаДисконтирования) КАК СуммаДисконтирования,
	|	СУММА(ТаблицаРасчетыСПоставщиками.СуммаДисконтированияРегл) КАК СуммаДисконтированияРегл,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаРасчетыСПоставщиками.СуммаДисконтированияУпр <> 0
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаДисконтированияУпр
	|		КОГДА ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаДисконтирования
	|		ИНАЧЕ
	|			ТаблицаРасчетыСПоставщиками.СуммаДисконтирования * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ)                                           КАК СуммаДисконтированияУпр,
	|	ТаблицаРасчетыСПоставщиками.РасчетныйДокумент    КАК РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеПроцентовПоДисконтированию) КАК ХозяйственнаяОперация,
	|	&ВалютаРегламентированногоУчета                 КАК ВалютаДокумента,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеПроцентовПоДисконтированию) КАК НастройкаХозяйственнойОперации,
	|	""1""                                           КАК Вид,
	|	ДоговорыКонтрагентов.СтавкаДисконтирования      КАК СтавкаДисконтирования,
	|	СУММА(ТаблицаРасчетыСПоставщиками.Сумма / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100)) КАК ФактическаяЗадолженностьБезНДС,
	|	СУММА(ТаблицаРасчетыСПоставщиками.Сумма / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100) - ТаблицаРасчетыСПоставщиками.СуммаДисконтирования) КАК ДисконтированнаяЗадолженностьБезНДС,
	|	СУММА(ТаблицаРасчетыСПоставщиками.СуммаДисконтирования) КАК РассчитанныйОстатокПроцентов,
	|	СУММА(ТаблицаРасчетыСПоставщиками.СуммаРегл / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100)) КАК ФактическаяЗадолженностьБезНДСРегл,
	|	СУММА(ТаблицаРасчетыСПоставщиками.СуммаРегл / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100) - ТаблицаРасчетыСПоставщиками.СуммаДисконтированияРегл) КАК ДисконтированнаяЗадолженностьБезНДСРегл,
	|	СУММА(ТаблицаРасчетыСПоставщиками.СуммаДисконтированияРегл) КАК РассчитанныйОстатокПроцентовРегл,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаРасчетыСПоставщиками.СуммаУпр <> 0
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаУпр / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100)
	|		КОГДА ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСПоставщиками.Сумма / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100)
	|		ИНАЧЕ
	|			ТаблицаРасчетыСПоставщиками.Сумма * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1) / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100)
	|	КОНЕЦ) КАК ФактическаяЗадолженностьБезНДСУпр,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаРасчетыСПоставщиками.СуммаДисконтированияУпр <> 0 И ТаблицаРасчетыСПоставщиками.СуммаУпр <> 0 
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаУпр / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100) - ТаблицаРасчетыСПоставщиками.СуммаДисконтированияУпр
	|		КОГДА ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСПоставщиками.Сумма / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100) - ТаблицаРасчетыСПоставщиками.СуммаДисконтирования
	|		ИНАЧЕ
	|			ТаблицаРасчетыСПоставщиками.Сумма / (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) / 100) - ТаблицаРасчетыСПоставщиками.СуммаДисконтирования * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ) КАК ДисконтированнаяЗадолженностьБезНДСУпр,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаРасчетыСПоставщиками.СуммаДисконтированияУпр <> 0
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаДисконтированияУпр
	|		КОГДА ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаРасчетыСПоставщиками.СуммаДисконтирования
	|		ИНАЧЕ
	|			ТаблицаРасчетыСПоставщиками.СуммаДисконтирования * ЕСТЬNULL(КурсыВалютВзаиморасчетов.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ) КАК РассчитанныйОстатокПроцентовУпр
	|ИЗ
	|	ВтРасчетыСПартнерами КАК ТаблицаРасчетыСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО КурсыВалютВзаиморасчетов.Валюта = ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО КлючиАналитикиУчетаПоПартнерам.Договор = ДоговорыКонтрагентов.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|				ПО ДоговорыКонтрагентов.СтавкаНДС = СтавкиНДС.Ссылка
	|		ПО ТаблицаРасчетыСПоставщиками.КлючАналитики = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|		
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
	|	И &ОтражатьВОперативномУчете
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.СтавкаДисконтирования,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов.УникальныйИдентификатор,
	|	ТаблицаРасчетыСПоставщиками.РасчетныйДокумент,
	|	ТаблицаРасчетыСПоставщиками.ВалютаВзаиморасчетов,
	|	ТаблицаРасчетыСПоставщиками.КлючАналитики,
	|	ТаблицаРасчетыСПоставщиками.ОбъектРасчетов,
	|	ТаблицаРасчетыСПоставщиками.ДатаРасчетныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	&Период КАК ДатаДокументаИБ,
	|	&Ссылка КАК Ссылка,
	|	&Номер КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	&Ответственный КАК Ответственный,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК Дополнительно,
	|	&Комментарий КАК Комментарий,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерПервичногоДокумента,
	|	СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиРасчетыСПартнерами.Сумма, 0)) КАК Сумма,
	|	Организации.ВалютаРегламентированногоУчета КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	&Период КАК ДатаОтраженияВУчете,
	|	&Исправление КАК СторноИсправление,
	|	&СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВзаиморасчетов.РасчетыСПартнерами КАК ДанныеТабличнойЧастиРасчетыСПартнерами
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРасчетыСПартнерами.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО Организации.Ссылка = &Организация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	Организации.ВалютаРегламентированногоУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВводОстатковВзаиморасчетов";
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковВзаиморасчетов));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Истина);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ТекстЗапроса;
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ХозяйственнаяОперацияДоговораПоТипуОперации(ХозяйственнаяОперация) Экспорт
	
	ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам Тогда
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

// Определяет видимость группы формы, содержащей флажки видов учета.
// Используется в формах, в которых доступны все виды учета.
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ ввода начальных остатков.
// Возвращаемое значение:
// 	Булево - определяет видимость группы вида учета (оперативный, регламентированный и управленческий)
Функция ВидимостьГруппУчета(Объект) Экспорт
	
	ВидимостьГруппУчета = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		Или РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(НачалоМесяца(Объект.Дата), Истина);
	
	Возврат ВидимостьГруппУчета;
	
КонецФункции

Функция ТипДокументаРасчетовПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	ОбъектРасчетов = Неопределено;
	
	Возврат ОбъектРасчетов;
	
КонецФункции

Функция ИмяТабличнойЧастиРасчетовПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Возврат "РасчетыСПартнерами";
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ВводОстатковЛокализация.ВводОстатковВзаиморасчетовДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

#Область СлужебныеПроцедурыЗаполненияПоДаннымОперативногоУчета

Процедура АктуализироватьРасчетыСПартнерами(Дата, МассивОрганизаций, ИмяОперативногоРегистра)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АктуальныеОстатки.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, АналитикаУчетаПоПартнерам.Организация В (&МассивОрганизаций)) КАК АктуальныеОстатки";
	
	Если ИмяОперативногоРегистра = "РасчетыСПоставщиками" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСКлиентами", ИмяОперативногоРегистра);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков", Дата);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	МассивАналитик = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	Если МассивАналитик.Количество() > 0 Тогда
		Если ИмяОперативногоРегистра = "РасчетыСПоставщиками" Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитик;
			Попытка
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(Дата.Значение, АналитикиРасчета);
			Исключение
				ТекстСообщения = НСтр("ru = 'Печатная форма сформирована по неактуальным данным.
				|Необходимо актуализировать взаиморасчеты вручную и переформировать печатную форму.';
				|en = 'Print form is generated according to irrelevant data. 
				|Update AR/AP accounting manually, and then create the print form again.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		Иначе
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитик;
			Попытка
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(Дата.Значение, АналитикиРасчета);
			Исключение
				ТекстСообщения = НСтр("ru = 'Печатная форма сформирована по неактуальным данным.
				|Необходимо актуализировать взаиморасчеты вручную и переформировать печатную форму.';
				|en = 'Print form is generated according to irrelevant data. 
				|Update AR/AP accounting manually, and then create the print form again.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОстаткиПоРасчетамСПартнерами(ДатаОстатков, ХозяйственнаяОперация, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("МассивОрганизаций",     МассивОрганизаций);
	Запрос.Параметры.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.Параметры.Вставить("Дата",                  ДатаОстатков);
	
	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов Тогда
			АктуализироватьРасчетыСПартнерами(ДатаОстатков, МассивОрганизаций, "РасчетыСКлиентами");
		Иначе
			АктуализироватьРасчетыСПартнерами(ДатаОстатков, МассивОрганизаций, "РасчетыСПоставщиками");
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеАналитики.КлючАналитики КАК КлючАналитики
		|ПОМЕСТИТЬ ВтКлючиАналитики
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК ДанныеАналитики
		|ГДЕ
		|	ДанныеАналитики.Организация В (&МассивОрганизаций)
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""РасчетыСПартнерами"" КАК ЗаполняемаяТабличнаяЧасть,
		|	ДанныеАналитики.Партнер,
		|	ДанныеАналитики.Контрагент,
		|	ДанныеАналитики.Организация КАК Организация,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеАналитики.Договор,
		|	ДанныеАналитики.НаправлениеДеятельности,
		|	ДанныеПоОстаткам.ЗаказКлиента КАК ОбъектРасчетовОтправитель,
		|	ДанныеПоОстаткам.ЗаказКлиента.Объект КАК ОбъектРасчетов,
		|	ДанныеПоОстаткам.РасчетныйДокумент КАК ДокументРасчетов,
		|	ДанныеПоОстаткам.Валюта КАК ВалютаВзаиморасчетов,
		|	СУММА(ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|				ТОГДА ДанныеПоОстаткам.ДолгОстаток
		|			ИНАЧЕ -ДанныеПоОстаткам.ПредоплатаОстаток
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|				ТОГДА ДанныеПоОстаткам.ДолгРеглОстаток
		|			ИНАЧЕ -ДанныеПоОстаткам.ПредоплатаРеглОстаток
		|		КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|				ТОГДА ДанныеПоОстаткам.ДолгУпрОстаток
		|			ИНАЧЕ -ДанныеПоОстаткам.ПредоплатаУпрОстаток
		|		КОНЕЦ) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
		|			&Дата,
		|			(&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|				ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов))
		|			И АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ ВтКлючиАналитики)) КАК ДанныеПоОстаткам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК ДанныеАналитики
		|		ПО ДанныеПоОстаткам.АналитикаУчетаПоПартнерам = ДанныеАналитики.КлючАналитики
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|			ТОГДА ДанныеПоОстаткам.ДолгОстаток
		|		ИНАЧЕ -ДанныеПоОстаткам.ПредоплатаОстаток
		|	КОНЕЦ > 0
		|		
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПоОстаткам.Валюта,
		|	ДанныеПоОстаткам.ЗаказКлиента,
		|	ДанныеПоОстаткам.РасчетныйДокумент,
		|	ДанныеАналитики.НаправлениеДеятельности,
		|	ДанныеАналитики.Контрагент,
		|	ДанныеАналитики.Договор,
		|	ДанныеАналитики.Организация,
		|	ДанныеАналитики.Партнер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""РасчетыСПартнерами"",
		|	ДанныеАналитики.Партнер,
		|	ДанныеАналитики.Контрагент,
		|	ДанныеАналитики.Организация,
		|	&ХозяйственнаяОперация,
		|	ДанныеАналитики.Договор,
		|	ДанныеАналитики.НаправлениеДеятельности,
		|	ДанныеПоОстаткам.ЗаказПоставщику,
		|	ДанныеПоОстаткам.ЗаказПоставщику.Объект,
		|	ДанныеПоОстаткам.РасчетныйДокумент,
		|	ДанныеПоОстаткам.Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|				ТОГДА -ДанныеПоОстаткам.ДолгОстаток
		|			ИНАЧЕ ДанныеПоОстаткам.ПредоплатаОстаток
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|				ТОГДА -ДанныеПоОстаткам.ДолгРеглОстаток
		|			ИНАЧЕ ДанныеПоОстаткам.ПредоплатаРеглОстаток
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|				ТОГДА -ДанныеПоОстаткам.ДолгУпрОстаток
		|			ИНАЧЕ ДанныеПоОстаткам.ПредоплатаУпрОстаток
		|		КОНЕЦ)
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(
		|			&Дата,
		|			(&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|				ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам))
		|			И АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ ВтКлючиАналитики)) КАК ДанныеПоОстаткам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК ДанныеАналитики
		|		ПО ДанныеПоОстаткам.АналитикаУчетаПоПартнерам = ДанныеАналитики.КлючАналитики
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|			ТОГДА -ДанныеПоОстаткам.ДолгОстаток
		|		ИНАЧЕ ДанныеПоОстаткам.ПредоплатаОстаток
		|	КОНЕЦ > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеАналитики.Партнер,
		|	ДанныеАналитики.Организация,
		|	ДанныеАналитики.Контрагент,
		|	ДанныеАналитики.Договор,
		|	ДанныеАналитики.НаправлениеДеятельности,
		|	ДанныеПоОстаткам.ЗаказПоставщику,
		|	ДанныеПоОстаткам.РасчетныйДокумент,
		|	ДанныеПоОстаткам.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеАналитики.КлючАналитики КАК КлючАналитики
		|ПОМЕСТИТЬ ВтКлючиАналитики
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК ДанныеАналитики
		|ГДЕ
		|	ДанныеАналитики.Организация В(&МассивОрганизаций)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""РасчетыСПартнерами"" КАК ЗаполняемаяТабличнаяЧасть,
		|	ДанныеАналитики.Партнер КАК Партнер,
		|	ДанныеАналитики.Контрагент КАК Контрагент,
		|	ДанныеАналитики.Организация КАК Организация,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеАналитики.Договор КАК Договор,
		|	ДанныеАналитики.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ДанныеПоОстаткам.ОбъектРасчетов.Объект КАК ОбъектРасчетов,
		|	ДанныеПоОстаткам.ОбъектРасчетов КАК ОбъектРасчетовОтправитель,
		|	ДанныеПоОстаткам.РасчетныйДокумент КАК ДокументРасчетов,
		|	ДанныеПоОстаткам.Валюта КАК ВалютаВзаиморасчетов,
		|	ДанныеПоОстаткам.ДатаПлановогоПогашения КАК ДатаПлатежа,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|			ТОГДА ДанныеПоОстаткам.ДолгОстаток
		|		ИНАЧЕ ДанныеПоОстаткам.ПредоплатаОстаток
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|			ТОГДА ДанныеПоОстаткам.ДолгРеглОстаток
		|		ИНАЧЕ ДанныеПоОстаткам.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|			ТОГДА ДанныеПоОстаткам.ДолгУпрОстаток
		|		ИНАЧЕ ДанныеПоОстаткам.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
		|			&Дата,
		|			(&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|				ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов))
		|				И АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						ВтКлючиАналитики.КлючАналитики
		|					ИЗ
		|						ВтКлючиАналитики)) КАК ДанныеПоОстаткам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК ДанныеАналитики
		|		ПО ДанныеПоОстаткам.АналитикаУчетаПоПартнерам = ДанныеАналитики.КлючАналитики
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов)
		|				ТОГДА ДанныеПоОстаткам.ДолгОстаток
		|			ИНАЧЕ ДанныеПоОстаткам.ПредоплатаОстаток
		|		КОНЕЦ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""РасчетыСПартнерами"",
		|	ДанныеАналитики.Партнер,
		|	ДанныеАналитики.Контрагент,
		|	ДанныеАналитики.Организация,
		|	&ХозяйственнаяОперация,
		|	ДанныеАналитики.Договор,
		|	ДанныеАналитики.НаправлениеДеятельности,
		|	ДанныеПоОстаткам.ОбъектРасчетов.Объект,
		|	ДанныеПоОстаткам.ОбъектРасчетов,
		|	ДанныеПоОстаткам.РасчетныйДокумент,
		|	ДанныеПоОстаткам.Валюта,
		|	ДанныеПоОстаткам.ДатаПлановогоПогашения,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|			ТОГДА ДанныеПоОстаткам.ДолгОстаток
		|		ИНАЧЕ ДанныеПоОстаткам.ПредоплатаОстаток
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|			ТОГДА ДанныеПоОстаткам.ДолгРеглОстаток
		|		ИНАЧЕ ДанныеПоОстаткам.ПредоплатаРеглОстаток
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|			ТОГДА ДанныеПоОстаткам.ДолгУпрОстаток
		|		ИНАЧЕ ДанныеПоОстаткам.ПредоплатаУпрОстаток
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
		|			&Дата,
		|			(&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|				ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам))
		|				И АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						ВтКлючиАналитики.КлючАналитики
		|					ИЗ
		|						ВтКлючиАналитики)) КАК ДанныеПоОстаткам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК ДанныеАналитики
		|		ПО ДанныеПоОстаткам.АналитикаУчетаПоПартнерам = ДанныеАналитики.КлючАналитики
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам)
		|				ТОГДА ДанныеПоОстаткам.ДолгОстаток
		|			ИНАЧЕ ДанныеПоОстаткам.ПредоплатаОстаток
		|		КОНЕЦ > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация";
		
		Если Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Получить() Тогда
			ТекстСообщения = ВзаиморасчетыСервер.ТекстПредупрежденияЗагрузкаДокументовВзаиморасчетов();
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#КонецОбласти

#КонецЕсли
