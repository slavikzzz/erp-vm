#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтатусДокумента

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	СтатусДоИзменения = Статус;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	ДанныеЗаполнения = УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса(ЭтотОбъект);
	
	УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
		ЭтотОбъект,
		СтатусДоИзменения,
		ДанныеЗаполнения);
		
	Если ДополнительныеПараметры <> Неопределено Тогда // дополнительные действия
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);

		ЗаполнитьОбеспечениеПриУстановкеСтатуса(ДополнительныеПараметры); 
		
		НазначитьИсполнителяПриУстановкеСтатуса(ДополнительныеПараметры);
		
	КонецЕсли;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область Прочее

// Устанавливает используемый вид РЦ среди основных и альтернативных видов РЦ.
//
// Параметры:
//  КлючСвязи			 - УникальныйИдентификатор - ключ связи вида РЦ (табличная часть ВидыРабочихЦентров).
//  ВидРабочегоЦентра	 - СправочникСсылка.ВидыРабочихЦентров - вид РЦ, который необходимо назначить используемым.
//
Процедура ЗаменитьИспользуемыйВидРЦ(КлючСвязи, ВидРабочегоЦентра) Экспорт
	
	НайденнаяСтрока = ВидыРабочихЦентров.Найти(КлючСвязи, "КлючСвязи");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока.Использовать = (НайденнаяСтрока.ВидРабочегоЦентра = ВидРабочегоЦентра);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", КлючСвязи);
	НайденныеСтроки = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Использовать = (НайденнаяСтрока.ВидРабочегоЦентра = ВидРабочегоЦентра);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ по данным выполненных производственных операций.
//
// Параметры:
//  ДанныеДляЗаполнения	 - См. Документы.ПроизводственнаяОперация2_2.ДанныеВыполненныхОпераций
//
Процедура ЗаполнитьПоОперациям(ДанныеДляЗаполнения = Неопределено) Экспорт
	
	Если ДанныеДляЗаполнения <> Неопределено Тогда
		ДанныеОпераций = ДанныеДляЗаполнения;
	Иначе
		ДанныеОпераций = Документы.ПроизводственнаяОперация2_2.ДанныеВыполненныхОпераций(Ссылка);
	КонецЕсли;
	
	ПодготовитьДанныеОперацийДляЗаполненияДанных(ДанныеОпераций);
	
	НастройкиУчета = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(Подразделение, МаршрутнаяКарта);
	
	Если НастройкиУчета.ИспользоватьВыходныеИзделия Тогда
		
		ЗаполнитьИзделияПоОперациям("ВыходныеИзделия", ДанныеОпераций.ВыходныеИзделия, ДанныеОпераций.ВыходныеИзделияСерии);
		ЗаполнитьИзделияПоОперациям("ПобочныеИзделия", ДанныеОпераций.ВыходныеИзделия, ДанныеОпераций.ВыходныеИзделияСерии);
		
		ЗаполнитьДатуПроизводстваИзделийВШапке();
		
		Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
				ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
			ЗаполнитьШапкуПослеЗаполненияПоОперациям();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиУчета.ИспользоватьМатериалы Тогда
		
		ЗаполнитьМатериалыПоОперациям(ДанныеОпераций.МатериалыИРаботы);
		
		Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			ЗаполнитьШапкуПослеЗаполненияПоОперациям();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Документы.ЭтапПроизводства2_2.ИспользуетсяОтметкаВыполненныхТрудозатрат(ЭтотОбъект) Тогда
		
		ЗаполнитьТрудозатратыПоОперациям(ДанныеОпераций.Трудозатраты);
		
	КонецЕсли;
	
	Если УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(Перечисления.СтатусыЭтаповПроизводства2_2.Начат, Статус) > 0 Тогда
		
		УстановитьСтатус("Начат", Неопределено);
		
	КонецЕсли;
	
	ТребуетсяЗаполнитьПоОперациям = Ложь;
	
КонецПроцедуры

// Заполняет реквизиты, хранящие информацию о видах запасов и аналитиках учета номенклатуры в табличных частях
// 'ВыходныеИзделия', 'ПобочныеИзделия', 'РасходМатериаловИРабот', 'ОбеспечениеМатериаламиИРаботами'
// и 'ЭкономияМатериалов' документа, а также заполняет табличные части 'ВидыЗапасовИзделия' и 'ВидыЗапасовМатериалы'.
//
// Параметры:
//	Отказ - Булево - признак того, что не удалось заполнить данные.
//	ТаблицыДокумента - см. Документы.ЭтапПроизводства2_2.КоллекцияТабличныхЧастейТоваров.
//
Процедура ЗаполнитьВидыЗапасовПриОбмене(Отказ, ТаблицыДокумента) Экспорт
	
	ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
	
	Если ТаблицыДокумента <> Неопределено Тогда
		ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров(ТаблицыДокумента);
		ДополнительныеСвойства.Вставить("ТаблицыЗаполненияВидовЗапасовПриОбмене", ТаблицыДокумента);
	Иначе
		ИмяПараметра = "ТаблицыДокумента";
		
		ТекстИсключения = НСтр("ru = 'Для заполнения видов запасов не передан параметр ""%1"".';
								|en = 'The ""%1"" parameter is not transferred to fill in the inventory owner attributes.'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ИмяПараметра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗаполнитьВидыЗапасов(Отказ);
	ДополнительныеСвойства.Удалить("ТаблицыЗаполненияВидовЗапасовПриОбмене");
	
КонецПроцедуры

// Позволяет изменить реквизиты, связанные с делением этапа при изменении партии производства.
// Реквизиты хранятся в регистре сведений РеквизитыДеленияЭтаповПроизводства.
// Запись в регистр происходит в транзакции записи документа.
// 
// Параметры:
//  РеквизитыДеления - Структура:
//   * ИдентификаторПервойОперации - Число
//   * ПерваяОперация - СправочникСсылка.ТехнологическиеОперации
//   * ИдентификаторПоследнейОперации - Число
//   * ПоследняяОперация - СправочникСсылка.ТехнологическиеОперации
//   * ОтмененоПоследняяОперация - Число
//   * Предшественник - ДокументСсылка.ЭтапПроизводства2_2
//
Процедура ИзменитьРеквизитыДеления(РеквизитыДеления) Экспорт
	
	ДополнительныеСвойства.Вставить("РеквизитыДеления", РеквизитыДеления);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		СсылкаНового = ПолучитьСсылкуНового();
		Если СсылкаНового.Пустая() Тогда
			СсылкаНового = Документы.ЭтапПроизводства2_2.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		УникальныйИдентификатор = СсылкаНового.УникальныйИдентификатор();
	ИначеЕсли Не ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		УникальныйИдентификатор = Ссылка.УникальныйИдентификатор();
	КонецЕсли;
	
	СтруктураЗаказаПроведениеДокументов.ЭтапПроизводстваПередЗаписью(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	
	ИменаТЧ = "ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами,РасходМатериаловИРабот,ЭкономияМатериалов";
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, ИменаТЧ);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроверитьПроизводственныйПроцесс(Отказ, РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// Не допускается отмена проведения этапа, включенного в проведенный заказ переработчику.
		Если ПроизводствоНаСтороне2_5
			И ЗначениеЗаполнено(ЗаказПереработчику)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПереработчику, "Проведен") Тогда
			
			ТекстОшибки = НСтр("ru = 'Этап производства включен в проведенный заказ переработчика. Отмена проведения невозможна.';
								|en = 'The production stage is included in the posted subcontracting purchase order. You cannot unpost the order.'");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Ссылка,
				"ЗаказПереработчику",,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Область Округление
	
	ПараметрыОкругления = Документы.ЭтапПроизводства2_2.ПараметрыТЧДляОкругления();
		
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["ВыходныеИзделия"]);
			
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["ПобочныеИзделия"]);
			
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["ОбеспечениеМатериаламиИРаботами"]);

	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(
			ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["ЭкономияМатериалов"]);
			
	#КонецОбласти		
	
	#Область ЗаполнениеНазначений

	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Назначение) // Ссылка на назначение может быть сформирована ранее (например для связи по выпуску ПФ на этапе)
		ИЛИ НЕ ЭтоНовый() Тогда	
		
		СтароеНазначение = Назначение;
		
		ШаблонНазначения = Документы.ЭтапПроизводства2_2.ШаблонНазначения(ЭтотОбъект);
		ОбновленоНазначение = Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(
			Назначение,
			ШаблонНазначения,
			ЭтотОбъект,
			"НаправлениеДеятельности,Партнер,Договор,ХозяйственнаяОперация",
			Отказ);
		Если ОбновленоНазначение Тогда
			СтруктураПоиска = Новый Структура("НазначениеОбеспечения", СтароеНазначение);
			Для каждого Строка Из ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска) Цикл
				Строка.НазначениеОбеспечения = Назначение;
				Если Строка.Обособленно Тогда
					Строка.Назначение = Назначение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	//Настройка счетов учета
	НастройкаСчетовУчетаСервер.ПередЗаписью(ЭтотОбъект,
		Документы.ЭтапПроизводства2_2.ПараметрыНастройкиСчетовУчета());
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЭтапПроизводства2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ОчиститьНеиспользуемыеДанные();
	
	ДанныеДоИзменения = Неопределено;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ДанныеДоИзменения = ДанныеДоИзменения();
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
			
			ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
			
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
			И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется
			И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован
			И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению Тогда
			ЗаполнитьВидыЗапасов(Отказ);
		Иначе
			ВидыЗапасовИзделия.Очистить();
			ВидыЗапасовМатериалы.Очистить();
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Статус <> ДанныеДоИзменения.Реквизиты.Статус
			И (ДанныеДоИзменения.Реквизиты.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется
				ИЛИ ДанныеДоИзменения.Реквизиты.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован)
			И НЕ МаршрутнаяКарта.Пустая()
			И ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях") Тогда
			МаршрутнаяКарта            = Справочники.МаршрутныеКарты.ПустаяСсылка();
			КоэффициентМаршрутнойКарты = 0;
		КонецЕсли;
		
		#Область ПериодаПерезаписиДвижений
		
		// Проверим необходимость создания задания к перерасчету себестоимости, заполним периоды изменения табличных частей.
		ОписаниеТабличныхЧастей = Новый Структура;
		
		#Область ОписаниеРасходМатериаловИРабот
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество,КоличествоУпаковок");
		ПараметрыПроверки.Вставить("Дата", "ДатаРасхода");
		
		ОписаниеТабличныхЧастей.Вставить("РасходМатериаловИРабот", ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ОписаниеОбеспечениеМатериаламиИРаботами
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество,КоличествоУпаковок");
		ПараметрыПроверки.Вставить("Дата", "ДатаОтгрузки");
		
		ОтборСтрок = Новый Соответствие;
		
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
			ОтборСтрок,
			"Т.ВариантОбеспечения",
			"ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)",
			"=");
		
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
			ОтборСтрок,
			"ЕСТЬNULL(Т.Склад.ЦеховаяКладовая, Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))",
			"ИСТИНА",
			"=");
		
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
			ОтборСтрок,
			"ВЫБОР КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА Т.Подразделение ИНАЧЕ Т.Склад.Подразделение КОНЕЦ",
			"Т.Подразделение",
			"=");
		
		ПараметрыПроверки.Вставить("Отбор", ОтборСтрок);
		
		ОписаниеТабличныхЧастей.Вставить("ОбеспечениеМатериаламиИРаботами", ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ОписаниеЭкономияМатериалов
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество,КоличествоУпаковок");
		ПараметрыПроверки.Вставить("Дата", "ДатаОперации");
		
		ОписаниеТабличныхЧастей.Вставить("ЭкономияМатериалов", ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ОписаниеТрудозатраты
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество");
		ПараметрыПроверки.Вставить("Дата", "ДатаВыполнения");
		
		ОтборСтрок = Новый Соответствие;
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
			ОтборСтрок,
			"Т.Выполнено",
			"ИСТИНА",
			"=");
		
		ПараметрыПроверки.Вставить("Отбор", ОтборСтрок);
		
		ОписаниеТабличныхЧастей.Вставить("Трудозатраты", ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ОписаниеВыходныеИзделия
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество");
		ПараметрыПроверки.Вставить("Дата", "ДатаПроизводства");
		
		ОтборСтрок = Новый Соответствие;
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
			ОтборСтрок,
			"Т.Произведено",
			"ИСТИНА",
			"=");
		
		ПараметрыПроверки.Вставить("Отбор", ОтборСтрок);
		
		ОписаниеТабличныхЧастей.Вставить("ВыходныеИзделия", ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ОписаниеПобочныеИзделия
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество");
		ПараметрыПроверки.Вставить("Дата", "ДатаПроизводства");
		
		ОтборСтрок = Новый Соответствие;
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
			ОтборСтрок,
			"Т.Произведено",
			"ИСТИНА",
			"=");
		
		ПараметрыПроверки.Вставить("Отбор", ОтборСтрок);
		
		ОписаниеТабличныхЧастей.Вставить("ПобочныеИзделия", ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ОписаниеВидыЗапасовМатериалы
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество");
		ПараметрыПроверки.Вставить("Дата", "ДатаОперации");
		
		ОписаниеТабличныхЧастей.Вставить("ВидыЗапасовМатериалы", ПараметрыПроверки);
		
		#КонецОбласти
		
		#Область ОписаниеВидыЗапасовИзделия
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("Ресурсы", "Количество, ДоляСтоимости, Сумма");
		ПараметрыПроверки.Вставить("Дата", "ДатаОперации");
		
		ОписаниеТабличныхЧастей.Вставить("ВидыЗапасовИзделия", ПараметрыПроверки);
		
		#КонецОбласти
		
		РезультатПроверки = РасчетСебестоимостиПрикладныеАлгоритмы.ПериодыИзмененияТабличныеЧастиДокумента(ЭтотОбъект, ОписаниеТабличныхЧастей);
		
		Если ЗначениеЗаполнено(РезультатПроверки.ОбщийМинимальныйПериод) Тогда
			ПериодПерезаписиДвижений = НачалоМесяца(РезультатПроверки.ОбщийМинимальныйПериод);
		Иначе
			// Если после перепроведения данные документа не изменились, то все движения должны быть сохранены.
			// ПериодЗаполнения равный пустой дате соответствует режиму сохранения всех движений.
			// ПериодЗаполнения равный НЕОПРЕДЕЛЕНО соответствует режиму перезаписи всех движений.
			// ПериодЗаполнения равный началу месяца соответствует режиму сохранения движений в предыдущих месяцах и формированию
			// новых начиная с начала месяца.
			ПериодПерезаписиДвижений = Дата(1,1,1);
		КонецЕсли;
		
		Если Не РезультатПроверки.ОбщийМинимальныйПериод = Неопределено Тогда
			
			ДатаПроверки = Неопределено;
			Для Каждого КлючЗначение Из РезультатПроверки Цикл
				
				Если (КлючЗначение.Ключ = "ОбщийМинимальныйПериод"
						Или КлючЗначение.Ключ = "ВидыЗапасовИзделия"
						Или КлючЗначение.Ключ = "ВидыЗапасовМатериалы")
						И Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
					Или Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаПроверки) Тогда
					ДатаПроверки = Мин(ДатаПроверки, КлючЗначение.Значение);
				Иначе
					ДатаПроверки = КлючЗначение.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДатаПроверки) Тогда
				
				ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
				
				НоваяСтрока = ДанныеДляПроверки.Добавить();
				НоваяСтрока.Дата   = НачалоДня(ДатаПроверки);
				НоваяСтрока.Раздел = "Производство";
				НоваяСтрока.Объект = Организация;
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("НоваяВерсия", Истина);
				ОписаниеДанных.Вставить("Данные",      Ссылка);
				
				ОписаниеОшибки = "";
				Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ОписаниеДанных, ОписаниеОшибки) Тогда
					Отказ = Истина;
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПериодПерезаписиДвижений = Дата(1,1,1) Тогда
			
			ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
			
			НоваяСтрока = ДанныеДляПроверки.Добавить();
			Если ПериодПерезаписиДвижений = Неопределено Тогда
				НоваяСтрока.Дата = Дата(1,1,1);
			Иначе
				НоваяСтрока.Дата = ПериодПерезаписиДвижений;
			КонецЕсли;
			
			НоваяСтрока.Раздел = "РегламентныеОперации";
			НоваяСтрока.Объект = Организация;
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("НоваяВерсия", Истина);
			ОписаниеДанных.Вставить("Данные",      Ссылка);
			
			ОписаниеОшибки = "";
			Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ОписаниеДанных, ОписаниеОшибки) Тогда
				Отказ = Истина;
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
		
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ПериодПерезаписиДвижений", ПериодПерезаписиДвижений);
		
		#КонецОбласти
		
	КонецЕсли;
	
	#Область ОбновлениеСвязанныхДанных
	
	ДополнительныеСвойства.Вставить("ОбработчикиОбновленияСвязанныхДанных", Новый Структура());
	
	Если ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
			
			Если ДанныеДоИзменения = Неопределено Тогда
				ДанныеДоИзменения = ДанныеДоИзменения();
			КонецЕсли;
			
			ЗарегистрироватьОбновлениеСостоянияЭтапов(ДанныеДоИзменения);
			ЗарегистрироватьОбновлениеСостоянияЗаказа(ДанныеДоИзменения);
			
			ЗарегистрироватьРасчетОчередиПроизводственныхОпераций(ДанныеДоИзменения);
			ЗарегистрироватьПроверкуГрафикаСмежныхЭтапов(ДанныеДоИзменения);
			
			ЗарегистрироватьОбновлениеПараметровРазмещенияВГрафике(ДанныеДоИзменения);
			ЗарегистрироватьОбновлениеПараметровНормативногоГрафика(ДанныеДоИзменения);
			ЗарегистрироватьОбновлениеПараметровНормативногоГрафикаСтруктурыЗаказа(ДанныеДоИзменения);
			ЗарегистрироватьОбновлениеПараметровРасчетаДлительностиДоВыпуска(ДанныеДоИзменения);
			
			ЗарегистрироватьОчисткуГрафикаПроизводства();
			ЗарегистрироватьОчисткуЗаданийКРасчетуГрафикаПроизводства();
			ЗарегистрироватьОчисткуПризнакаНаКритическомПути();
			
	КонецЕсли;
	
	#КонецОбласти
	
	ЭтапПроизводства2_2Локализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонНазначения = Документы.ЭтапПроизводства2_2.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Подразделение, ВыпускПодДеятельность);

	СтруктураЗаказаПроведениеДокументов.ЭтапПроизводстваПриЗаписи(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
	Если ДополнительныеСвойства.Свойство("РеквизитыДеления") Тогда
		Набор = РегистрыСведений.РеквизитыДеленияЭтаповПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.Этап.Установить(Ссылка);
		НоваяЗапись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДополнительныеСвойства.РеквизитыДеления);
		НоваяЗапись.Этап = Ссылка;
		Набор.Записать();
	КонецЕсли;
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	Если ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОбновитьСвязанныеДанные(Отказ, Истина);
	КонецЕсли;
	
	ВыполнитьКонтрольДанныхЦепочкиЭтапов(Отказ);
	
	Если ЗначениеЗаполнено(ПартияПроизводства) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", Распоряжение);
		ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ПоляПартии =
				Документы.ЭтапПроизводства2_2.ПоляПартии(
					ЭтотОбъект,
					Документы.ЭтапПроизводства2_2.ОсновноеИзделиеЦепочкиЭтапов(Ссылка));
			
			Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(ПартияПроизводства, ПоляПартии);
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
									|en = 'Cannot lock production stages. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ЗаписатьРучноеРазмещениеЭтапаВГрафике") Тогда
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ЗаписатьРучноеРазмещениеЭтапаВГрафике(
			Распоряжение,
			Ссылка,
			ДополнительныеСвойства.ГрафикПроизводства);
	КонецЕсли;
	
	ЭтапПроизводства2_2Локализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	УникальныйИдентификатор = Неопределено;
	Распоряжение            = Неопределено;
	Организация             = Неопределено;
	ВыпускПодДеятельность   = Неопределено;
	ВнутренняяПереработка   = Неопределено;
	ОрганизацияДавалец      = Неопределено;
	НаправлениеДеятельности = Неопределено;
	Партнер                 = Неопределено;
	Договор                 = Неопределено;
	
	Спецификация = Неопределено;
	
	Назначение              = Неопределено;
	НазначениеПродукция     = Неопределено;
	
	КоличествоСтрок = ОбеспечениеМатериаламиИРаботами.Количество();
	Если КоличествоСтрок > 0 Тогда
		ОбеспечениеМатериаламиИРаботами.ЗагрузитьКолонку(Новый Массив(КоличествоСтрок), "Назначение");
	КонецЕсли;
	
	ВидыЗапасовИзделия.Очистить();
	ВидыЗапасовМатериалы.Очистить();
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
	ПараметрыЗаполнения = Документы.ЭтапПроизводства2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ВыпускПодДеятельность, ПараметрыЗаполнения);
	
	СтрокаТЧ = "ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами,РасходМатериаловИРабот,ЭкономияМатериалов,ВидыЗапасовИзделия,ВидыЗапасовМатериалы";
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, СтрокаТЧ);
	СтруктураЗаказаПроведениеДокументов.ОчиститьКлючиСтрокВТабличнойЧасти(ЭтотОбъект, "ОбеспечениеМатериаламиИРаботами", "КлючНоменклатура");
	СтруктураЗаказаПроведениеДокументов.ОчиститьКлючиСтрокВТабличнойЧасти(ЭтотОбъект, "Трудозатраты", "КлючВидРабот");
	
	ЭтапПроизводства2_2Локализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
	
		Если ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДанныеСпецификации")
			И ДанныеЗаполнения.Свойство("ДанныеЭтапа") Тогда
			
			ЗаполнитьПоСпецификации(ДанныеЗаполнения.ДанныеСпецификации, ДанныеЗаполнения.ДанныеЭтапа);
			
		Иначе
			
			Если ДанныеЗаполнения.Свойство("ВыходныеИзделия") Тогда
				ВыходныеИзделия.Загрузить(ДанныеЗаполнения.ВыходныеИзделия);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ПобочныеИзделия") Тогда
				ПобочныеИзделия.Загрузить(ДанныеЗаполнения.ПобочныеИзделия);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ВыходныеИзделия")
				Или ДанныеЗаполнения.Свойство("ПобочныеИзделия") Тогда
				ЗаполнитьДатуПроизводстваИзделийВШапке();
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ОбеспечениеМатериаламиИРаботами") Тогда
				ОбеспечениеМатериаламиИРаботами.Загрузить(ДанныеЗаполнения.ОбеспечениеМатериаламиИРаботами);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("Трудозатраты") Тогда
				Трудозатраты.Загрузить(ДанныеЗаполнения.Трудозатраты);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ВидыРабочихЦентров") Тогда
				ВидыРабочихЦентров.Загрузить(ДанныеЗаполнения.ВидыРабочихЦентров);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("АльтернативныеВидыРабочихЦентров") Тогда
				АльтернативныеВидыРабочихЦентров.Загрузить(ДанныеЗаполнения.АльтернативныеВидыРабочихЦентров);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("Последователи")
					И ТипЗнч(ДанныеЗаполнения.Последователи) = Тип("Массив") Тогда
				Последователи.Очистить();
				Для каждого Последователь Из ДанныеЗаполнения.Последователи Цикл
					НоваяСтрока = Последователи.Добавить();
					НоваяСтрока.Этап     = Последователь;
					НоваяСтрока.ТипСвязи = Документы.ЭтапПроизводства2_2.ТипСвязиПоследователь();
				КонецЦикла;
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("НаборыМатериаловИРабот") Тогда
				НаборыМатериаловИРабот.Загрузить(ДанныеЗаполнения.НаборыМатериаловИРабот);
				УправлениеДаннымиОбИзделиях.ОбновитьТаблицуНаборыМатериаловИРабот(ЭтотОбъект);
			КонецЕсли;
			
			Если ЭтоНовый() Тогда
				ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, "ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами");
				СтруктураЗаказаПроведениеДокументов.ОчиститьКлючиСтрокВТабличнойЧасти(ЭтотОбъект, "ОбеспечениеМатериаламиИРаботами", "КлючНоменклатура");
				СтруктураЗаказаПроведениеДокументов.ОчиститьКлючиСтрокВТабличнойЧасти(ЭтотОбъект, "Трудозатраты", "КлючВидРабот");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВыходныеИзделияСерии") Тогда
			ВыходныеИзделияСерии.Загрузить(ДанныеЗаполнения.ВыходныеИзделияСерии);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ПобочныеИзделияСерии") Тогда
			ПобочныеИзделияСерии.Загрузить(ДанныеЗаполнения.ПобочныеИзделияСерии);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("РасходМатериаловИРабот") Тогда
			РасходМатериаловИРабот.Загрузить(ДанныеЗаполнения.РасходМатериаловИРабот);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ЭкономияМатериалов") Тогда
			ЭкономияМатериалов.Загрузить(ДанныеЗаполнения.ЭкономияМатериалов);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ЭкономияМатериаловСерии") Тогда
			ЭкономияМатериаловСерии.Загрузить(ДанныеЗаполнения.ЭкономияМатериаловСерии);
		КонецЕсли;
		
		ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
		ЗаполнитьСтатусыУказанияСерийВТЧ("ВыходныеИзделия", ПараметрыУказанияСерий);
		ЗаполнитьСтатусыУказанияСерийВТЧ("ПобочныеИзделия", ПараметрыУказанияСерий);
		ЗаполнитьСтатусыУказанияСерийВТЧ("ОбеспечениеМатериаламиИРаботами", ПараметрыУказанияСерий);
		ЗаполнитьСтатусыУказанияСерийВТЧ("РасходМатериаловИРабот", ПараметрыУказанияСерий);
		ЗаполнитьСтатусыУказанияСерийВТЧ("ЭкономияМатериалов", ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ЗаполнитьНомерПоРаспоряжению();
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный  = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ВидЦены = Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ(ВидЦены);
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(ВидЦены).ВалютаЦены);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВариантПриемкиТоваров) Тогда
		ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	КонецЕсли;
	
	Если Не ВыполняетсяПакетноеФормирование() Тогда
		
		ОбеспечениеПроизводства.ЗаполнитьНазначениеПолуфабрикатовВЭтапеПроизводства(ЭтотОбъект);
		
		ПараметрыЗаполнения = Документы.ЭтапПроизводства2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ВыпускПодДеятельность, ПараметрыЗаполнения);
		
		ПараметрыВыбораСтатейИАналитик = Документы.ЭтапПроизводства2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
		ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	КонецЕсли;
	
	ЭтапПроизводства2_2Локализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		
		ОбязательныеРеквизиты = Документы.ЭтапПроизводства2_2.СписокОбязательныхРеквизитовВСтатусеФормируется(ЭтотОбъект);
		
		Для Индекс = -ПроверяемыеРеквизиты.Количество() + 1 По 0 Цикл
			Если ОбязательныеРеквизиты.Найти(ПроверяемыеРеквизиты[-Индекс]) = Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(-Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Если ПроизводствоНаСтороне
			И ЗначениеЗаполнено(ЗаказПереработчику) Тогда
			
			ТекстОшибки = НСтр("ru = 'Проведение документа со статусом ""Формируется"" или ""Сформирован"" доступно только при отсутствии заказа переработчику.';
								|en = 'You can post a document with the Being generated or Generated status only if a ""Subcontracting purchase order"" is missing.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Ссылка,
				"Статус",,
				Отказ);
			
		КонецЕсли;
		
		Возврат; // для статуса Формируется проверка выполняется в минимальном варианте
		
	КонецЕсли;
	
	Документы.ЭтапПроизводства2_2.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект);
	
	Если ВыходныеИзделия.Найти(Ложь, "Отменено") = Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	КонецЕсли;
	
	Если ПланироватьРаботуВидовРабочихЦентров ИЛИ РучноеРазмещениеВГрафике Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	КонецЕсли;
	
	Если НЕ ПланироватьРаботуВидовРабочихЦентров ИЛИ РучноеРазмещениеВГрафике Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПорядокРаботыВидовРабочихЦентров");
	Если ВыполняетсяПакетноеФормирование() Тогда
		ПроверитьПорядокРаботыВидовРабочихЦентров(Отказ);
	КонецЕсли;
	
	Если НЕ РасходОднойДатой ИЛИ РасходМатериаловИРабот.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаРасхода");
	КонецЕсли;
	
	Если ПроизводствоНаСтороне
		ИЛИ МаршрутнаяКарта.Пустая()
		ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентМаршрутнойКарты");
	КонецЕсли;
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоУпаковокПлан");
	КонецЕсли;
	
	#Область ВыходныеИзделия
	
	Если ЭтоВыпускающийЭтап
		И Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		
		Если ВыходныеИзделия.Найти(Ложь, "Отменено") = Неопределено Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список", "Заполнение",,, Ссылка.Метаданные().ТабличныеЧасти.ВыходныеИзделия.Синоним);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект, 
				"ВыходныеИзделия",, 
				Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ПроизводствоНаСтороне
		И ПобочныеИзделия.Найти(Ложь, "Отменено") = Неопределено
		И Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Список", "Заполнение",,, Ссылка.Метаданные().ТабличныеЧасти.ПобочныеИзделия.Синоним);
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ПобочныеИзделия",,
			Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПереработкаНаСтороне
	
	Если ПроизводствоНаСтороне Тогда
		
		Если ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Сборка
			И ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
			Шаблон = НСтр("ru = 'Для производственного процесса типа ""%1"" не поддерживается выполнение этапа сторонними переработчиками.';
							|en = 'Third party subcontractors cannot execute stage for the production process of the ""%1"" type.'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипПроизводственногоПроцесса);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПроизводствоНаСтороне",, Отказ);
			
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5
				И Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПереработчикам2_5") Тогда
			
			ТекстСообщения = НСтр("ru = 'При производстве из давальческого сырья не поддерживается выполнение этапа сторонними переработчиками версии 2.4.
										|Для возможности передачи сторонним переработчикам нужно включить использование заказа переработчику версии 2.5.';
										|en = 'Stage execution by third-party subcontractors of version 2.4 is not supported for subcontracting.
										|To transfer to third-party subcontractors, enable subcontracting purchase orders 2.5.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПроизводствоНаСтороне",, Отказ);
		//++ Устарело_Переработка24
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда // СубдавальческаяСхема
			
			ТекстСообщения = НСтр("ru = 'При производстве по заказу давальца не поддерживается выполнение этапа сторонними переработчиками.';
									|en = 'Third party subcontractors cannot execute stages against the order of the material provider during the production.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПроизводствоНаСтороне",, Отказ);
		//-- Устарело_Переработка24
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	#Область Трудозатраты
	
	НачалоУчетаТрудозатратПоСотрудникам = ПолучитьФункциональнуюОпцию("УчетТрудозатратВРазрезеСотрудников");
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	ПутьКДанным = "Объект";
	ШаблонОшибкаФизЛицо = НСтр("ru = 'В поле ""Исполнитель"" в строке %1 списка ""Трудозатраты"" указано физическое лицо. Необходимо указать сотрудника.';
								|en = 'In the ""Assignee"" field, in line %1 of the ""Labor costs"" list, a person is specified. Specify an employee.'");
	ШаблонОшибкаСотрудник= НСтр("ru = 'В поле ""Исполнитель"" в строке %1 списка ""Трудозатраты"" указан сотрудник. Необходимо указать физическое лицо.';
								|en = 'In the ""Assignee"" field, in line %1 of the ""Labor costs"" list, an employee is specified. Specify a person.'");
	
	ПроверяемыеСотрудники = Новый Массив;
	
	Для Каждого Строка Из Трудозатраты Цикл
		
		Если Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверяемыеСотрудники.Добавить(Строка.Исполнитель);
		
		Если ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам)
			И Строка.ДатаВыполнения >= НачалоУчетаТрудозатратПоСотрудникам
			И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонОшибкаФизЛицо , Строка(Строка.НомерСтроки));
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "Исполнитель");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
			
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам)
			ИЛИ Строка.ДатаВыполнения < НачалоУчетаТрудозатратПоСотрудникам)
			И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонОшибкаСотрудник , Строка(Строка.НомерСтроки));
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "Исполнитель");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ И ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам) Тогда
		УволенныеСотрудники = ПроизводствоСервер.УволенныеСотрудники(ПроверяемыеСотрудники);
		
		ШаблонОшибкаУволенный = НСтр("ru = 'В поле ""Исполнитель"" в строке %1 списка ""Трудозатраты"" указан уволенный сотрудник.';
									|en = 'In the ""Assignee"" field, in line %1 of the ""Labor costs"" field, a dismissed employee is specified.'");
		
		Если УволенныеСотрудники.Количество() > 0 Тогда
			Для Каждого Строка Из Трудозатраты Цикл
				
				УволенныйСотрудник = УволенныеСотрудники.Найти(Строка.Исполнитель, "Сотрудник");
				Если УволенныйСотрудник <> Неопределено
					И Строка.ДатаВыполнения >= УволенныйСотрудник.ДатаУвольнения Тогда
						
						ТекстСообщения = СтрШаблон(ШаблонОшибкаУволенный, Строка(Строка.НомерСтроки));
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "Исполнитель");
						
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
						
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам)
		И ЗначениеЗаполнено(Исполнитель) И Дата >= НачалоУчетаТрудозатратПоСотрудникам
		И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ТекстСообщения = НСтр("ru = 'В поле ""Исполнитель"" указано физическое лицо. Необходимо указать сотрудника.';
								|en = 'In the ""Assignee"" field, a person is specified. Specify an employee.'");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "Исполнитель", ПутьКДанным, Отказ);
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам)
		ИЛИ ЗначениеЗаполнено(Исполнитель) И Дата < НачалоУчетаТрудозатратПоСотрудникам)
		И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ТекстСообщения = НСтр("ru = 'В поле ""Исполнитель"" указан сотрудник. Необходимо указать физическое лицо.';
								|en = 'In the ""Assignee"" field, an employee is specified. Specify a person.'");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "Исполнитель", ПутьКДанным, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам)
		И ЗначениеЗаполнено(Исполнитель) И Дата >= НачалоУчетаТрудозатратПоСотрудникам
		И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ПроверяемыеСотрудники.Добавить(Исполнитель);
		УволенныеСотрудники = ПроизводствоСервер.УволенныеСотрудники(ПроверяемыеСотрудники);
		
		Если УволенныеСотрудники.Количество() > 0
			И Дата >= УволенныеСотрудники[0].ДатаУвольнения Тогда
			
			ТекстСообщения = НСтр("ru = 'В поле ""Исполнитель"" указан уволенный сотрудник.';
									|en = 'In the ""Assignee"" field, a dismissed employee is specified.'");
		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "Исполнитель", ПутьКДанным, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	МенеджерВременныхТаблиц = Документы.ЭтапПроизводства2_2.ВременныеТаблицыДанныхОбъекта(ЭтотОбъект);
	Документы.ЭтапПроизводства2_2.ПроверитьЗаполнениеОбъекта(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПроверяемыеРеквизиты);
	
	Если Не ВыполняетсяПакетноеФормирование() Тогда
		
		Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
			И НЕ ПроизводствоНаСтороне
			И ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
			КоличествоПлан = КоличествоУпаковокПлан;
			КоличествоФакт = КоличествоУпаковокФакт;
			КоличествоОтменено = КоличествоУпаковокОтменено;
			
			Если УпаковкаПлан <> УпаковкаФакт
				Или УпаковкаПлан <> УпаковкаОтменено Тогда
				ТекстЗапроса = 
					"ВЫБРАТЬ
					|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПлан, 1)     КАК КоэффициентПлан,
					|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиФакт, 1)     КАК КоэффициентФакт,
					|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиОтменено, 1) КАК КоэффициентОтменено
					|ИЗ
					|	Справочник.ПартииПроизводства КАК ПартииПроизводства
					|ГДЕ
					|	ПартииПроизводства.Ссылка = &ПартияПроизводства";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковкиПлан",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ВЫРАЗИТЬ(&УпаковкаПлан КАК Справочник.УпаковкиЕдиницыИзмерения)",
						"ПартииПроизводства.ОсновноеИзделиеНоменклатура"));
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковкиФакт",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ВЫРАЗИТЬ(&УпаковкаФакт КАК Справочник.УпаковкиЕдиницыИзмерения)",
						"ПартииПроизводства.ОсновноеИзделиеНоменклатура"));
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковкиОтменено",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ВЫРАЗИТЬ(&УпаковкаОтменено КАК Справочник.УпаковкиЕдиницыИзмерения)",
						"ПартииПроизводства.ОсновноеИзделиеНоменклатура"));
				
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
				Запрос.УстановитьПараметр("УпаковкаПлан", УпаковкаПлан);
				Запрос.УстановитьПараметр("УпаковкаФакт", УпаковкаФакт);
				Запрос.УстановитьПараметр("УпаковкаОтменено", УпаковкаОтменено);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					КоличествоПлан = КоличествоУпаковокПлан * Выборка.КоэффициентПлан;
					КоличествоФакт = КоличествоУпаковокФакт * Выборка.КоэффициентФакт;
					КоличествоОтменено = КоличествоУпаковокОтменено * Выборка.КоэффициентОтменено;
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоПлан > КоличествоФакт + КоличествоОтменено Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Все запланированное количество должно быть выполнено или отменено.';
						|en = 'All scheduled quantity must be completed or cancelled.'"),
					ЭтотОбъект,
					"КоличествоУпаковокФакт",,
					Отказ);
				
			ИначеЕсли КоличествоОтменено <> Макс(КоличествоПлан-КоличествоФакт, 0) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Отмененное количество не должно превышать запланированное за вычетом выполненного.';
						|en = 'The cancelled amount must not exceed the planned amount minus the completed amount.'"),
					ЭтотОбъект,
					"КоличествоУпаковокОтменено",,
					Отказ);
			
			КонецЕсли;
		
		КонецЕсли;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЭтапПроизводства2_2);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыУказанияСерий.ВыходныеИзделия);
		МассивПараметров.Добавить(ПараметрыУказанияСерий.ПобочныеИзделия);
		МассивПараметров.Добавить(ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		МассивПараметров.Добавить(ПараметрыУказанияСерий.РасходМатериаловИРабот);
		МассивПараметров.Добавить(ПараметрыУказанияСерий.ЭкономияМатериалов);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
			МассивПараметров,
			Отказ,
			МассивНепроверяемыхРеквизитов);
		
		ПараметрыВыбораСтатейИАналитик = Документы.ЭтапПроизводства2_2.ПараметрыВыбораСтатейИАналитик(ЭтотОбъект);
		ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
		
		ПараметрыОкругления = Документы.ЭтапПроизводства2_2.ПараметрыТЧДляОкругления();
		НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыОкругления["ВыходныеИзделия"]);
		НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыОкругления["ПобочныеИзделия"]);
		НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыОкругления["ОбеспечениеМатериаламиИРаботами"]);
		НоменклатураСервер.ПроверитьОкруглениеКоличества(ЭтотОбъект, Отказ, ПараметрыОкругления["ЭкономияМатериалов"]);
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ЭтапПроизводства2_2Локализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов("Проведение");
	ДополнительныеСвойства.Вставить("ПараметрыЗаполненияВидовЗапасов", ПараметрыЗаполнения);
	ДополнительныеСвойства.Вставить("ИспользоватьПриПодготовкеПараметрыЗаполненияВидовЗапасов");
	
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.ДополнительныеСвойства = ДополнительныеСвойства;
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ, ДопПараметры);
	
	ВыполнитьКонтрольПриЗакрытииЭтапа(Отказ);
	
	ОбновитьСвязанныеДанные(Отказ);
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ПериодПерезаписиДвижений) Тогда
		РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
			ДополнительныеСвойства.ПериодПерезаписиДвижений,
			Ссылка,
			Организация);
	КонецЕсли;
	
	ЭтапПроизводства2_2Локализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов("Проведение");
	
	ДополнительныеСвойства.Вставить("ПараметрыЗаполненияВидовЗапасов", ПараметрыЗаполнения);
	ДополнительныеСвойства.Вставить("ИспользоватьПриПодготовкеПараметрыЗаполненияВидовЗапасов");
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ЭтапПроизводства2_2Локализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

Функция ДанныеЭтаповПроизводства() Экспорт
	
	СтруктураДанныхЭтапов = УправлениеПроизводством.СтруктураДанныхЭтаповПроизводства();
	
	ИтоговаяПроверка = (Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
					ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	// Реквизиты шапки
	ЗаполнитьЗначенияСвойств(СтруктураДанныхЭтапов.Реквизиты.Добавить(), ЭтотОбъект);
	
	// ВыходныеИзделия
	Если (ИтоговаяПроверка ИЛИ ВыходныеИзделия.Количество() > 0) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(СтруктураДанныхЭтапов, "ВыходныеИзделия")
	КонецЕсли;
	
	// ПобочныеИзделия
	Если (ИтоговаяПроверка ИЛИ ПобочныеИзделия.Количество() > 0) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(СтруктураДанныхЭтапов, "ПобочныеИзделия")
	КонецЕсли;
	
	// ОбеспечениеМатериаламиИРаботами
	Если (ИтоговаяПроверка ИЛИ ОбеспечениеМатериаламиИРаботами.Количество() > 0) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(СтруктураДанныхЭтапов, "ОбеспечениеМатериаламиИРаботами")
	КонецЕсли;
	
	// РасходМатериаловИРабот
	Если ИтоговаяПроверка Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(СтруктураДанныхЭтапов, "РасходМатериаловИРабот")
	КонецЕсли;
	
	// ЭкономияМатериалов
	Если ИтоговаяПроверка Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(СтруктураДанныхЭтапов, "ЭкономияМатериалов")
	КонецЕсли;
	
	// Трудозатраты
	Если (ИтоговаяПроверка ИЛИ Трудозатраты.Количество() > 0)
		И Документы.ЭтапПроизводства2_2.ИспользуетсяОтметкаВыполненныхТрудозатрат(ЭтотОбъект) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(СтруктураДанныхЭтапов, "Трудозатраты")
	КонецЕсли;
	
	Возврат СтруктураДанныхЭтапов;
	
КонецФункции

Процедура ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, ИмяТЧ)
	
	ТаблицыДокумента = ТаблицыДокумента();
	
	ДанныеДляПроверки["ПроверятьТЧ" + ИмяТЧ] = Истина;
	
	Для каждого Строка Из ТаблицыДокумента[ИмяТЧ] Цикл
		ТаблицаПроверки = ДанныеДляПроверки[ИмяТЧ]; // ТаблицаЗначений - 
		
		НоваяСтрока = ТаблицаПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтотОбъект, "Ссылка");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольПроведения

Процедура ВыполнитьКонтрольДанныхЦепочкиЭтапов(Отказ)
	
	// В режиме редактирования цепочки этапов выполняются отдельные проверки
	Если ДополнительныеСвойства.Свойство("ОтключитьПроверкуРеквизитовЦепочкиЭтапов") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПроверок = Новый Массив;
	ЗаблокироватьЭтапыПартии = Ложь;
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект);
	Если ЭтоВыпускающийЭтап
		И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		МассивПроверок.Добавить("ПроверитьДолиСтоимостиВыходныхИзделий");
		Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			ЗаблокироватьЭтапыПартии = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если (Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен)
		И Не ПроизводствоНаСтороне
		И ОбщегоНазначения.РежимОтладки() Тогда
		МассивПроверок.Добавить("ПроверитьРеквизитыЦепочкиЭтапов");
		ЗаблокироватьЭтапыПартии = Истина;
	КонецЕсли;
	
	Если МассивПроверок.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаблокироватьЭтапыПартии Тогда
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", Распоряжение);
		ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
									|en = 'Cannot lock production stages. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если МассивПроверок.Найти("ПроверитьДолиСтоимостиВыходныхИзделий") <> Неопределено Тогда
		ПроверитьДолиСтоимостиВыходныхИзделий(Отказ);
	КонецЕсли;
	
	Если МассивПроверок.Найти("ПроверитьРеквизитыЦепочкиЭтапов") <> Неопределено Тогда
		ПроверитьРеквизитыЦепочкиЭтапов(Отказ);
	КонецЕсли;

	
КонецПроцедуры

Процедура ПроверитьДолиСтоимостиВыходныхИзделий(Отказ)
	
	ПараметрыРаспределенияЗатрат = Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(ЭтотОбъект);
	
	ТекстЗапроса = Документы.ЭтапПроизводства2_2.ТекстЗапросаПроверитьДолиСтоимости(
		ЭтотОбъект,	ПараметрыРаспределенияЗатрат.ПоляСвязи);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", СпособРаспределенияЗатратНаВыходныеИзделия);
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Результат.Количество();
	
	Если Не Результат[КоличествоПакетов-1].Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Реквизит ""Способ распределения затрат на выходные изделия"" должен иметь одинаковое значение для всех выпускающих этапов.';
								|en = 'The Method of allocating finished product costs attribute must have the same value for all release stages.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"СпособРаспределенияЗатратНаВыходныеИзделия",,
					Отказ);
		
	КонецЕсли;
	
	Если Не Результат[КоличествоПакетов-2].Пустой() Тогда
		
		Шаблон = НСтр("ru = 'При выпуске нескольких наименований выходных изделий требуется указать их долю стоимости (строка %1%2).';
						|en = 'When releasing several names of finished products, you should specify their cost share (line %1%2).'");
		
		Выборка = Результат[КоличествоПакетов-2].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НомерСтроки = Формат(Выборка.НомерСтроки, "ЧГ=");
			
			Если Выборка.Ссылка <> Ссылка Тогда
				
				ТекстСообщения = СтрШаблон(Шаблон, НомерСтроки, ", " + Выборка.Ссылка + "");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Выборка.НомерСтроки, "ДоляСтоимости");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Выборка.Ссылка,
					Поле,
					,
					Отказ);
				
			Иначе
				
				ТекстСообщения = СтрШаблон(Шаблон, НомерСтроки, "");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Выборка.НомерСтроки, "ДоляСтоимости");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					Поле,
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыЦепочкиЭтапов(Отказ)
	
	ТекстПодстановки = "";
	ОбщиеРеквизиты = Документы.ЭтапПроизводства2_2.ОбщиеРеквизитыЦепочкиЭтапов(Истина);
	
	Для каждого ИмяРеквизита Из ОбщиеРеквизиты Цикл
		ТекстПодстановки = ТекстПодстановки
			+ ?(ПустаяСтрока(ТекстПодстановки),"",","+Символы.ПС)
			+ СтрШаблон("ЭтапыЦепочки.%1", ИмяРеквизита);
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		&ТекстПодстановки
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ЭтапыЦепочки
	|	ГДЕ
	|		ЭтапыЦепочки.ПартияПроизводства = &ПартияПроизводства
	|		И НЕ ЭтапыЦепочки.ПометкаУдаления) КАК Т
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПодстановки", ТекстПодстановки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	// Общие реквизиты в одной цепочки не должны отличаться
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Общие реквизиты одной цепочки этапов отличаются. Обратитесь к администратору.';
								|en = 'Common attributes of one stage chain are different. Please contact the administrator.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					,,
					Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПроизводственныйПроцесс(Отказ, РежимЗаписи)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И Таблица.Проведен");
		
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Распоряжение);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		ТекстШаблона = НСтр("ru = 'Невозможно провести этап производства № %1 от %2, относящийся к непроведенному заказу на производство.';
							|en = 'Cannot post production stage No. %1, %2 which belongs to the unposted production order.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
		Возврат;
		
	КонецЕсли;
		
	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		
		Если ЭтотОбъект.НомерЭтапа >= ЭтотОбъект.НомерСледующегоЭтапа И ЭтотОбъект.НомерСледующегоЭтапа <> 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Номер следующего этапа должен быть больше номера этапа.';
									|en = 'Next stage number should be more than the stage number.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						ЭтотОбъект,,, 
						Отказ);
			
		КонецЕсли;
		
		Если ЭтотОбъект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Если ЭтотОбъект.ВидыРабочихЦентров.Количество() > 0 Тогда
				
				НомерСтроки = 0;
				Для Каждого СтрокаОсновнойВидРЦ Из ЭтотОбъект.ВидыРабочихЦентров Цикл
					
					НомерСтроки = НомерСтроки + 1;
					
					ПроверитьВидыРабочихЦентров(СтрокаОсновнойВидРЦ, НомерСтроки, ЭтотОбъект, Отказ);
					
					СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", СтрокаОсновнойВидРЦ.КлючСвязи);
					
					Для Каждого СтрокаАльтернативныйВидРЦ Из ЭтотОбъект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска) Цикл
						
						НомерСтроки = НомерСтроки + 1;
						
						ПроверитьВидыРабочихЦентров(СтрокаАльтернативныйВидРЦ, НомерСтроки, ЭтотОбъект, Отказ);
						
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе 
				
				ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Виды рабочих центров"".';
										|en = 'No lines are entered into the ""Work center types"" list.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							, 
							"ВидыРабочихЦентров",, 
							Отказ);
				
			КонецЕсли;
			
			ПроверитьПорядокРаботыВидовРабочихЦентров(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВидыРабочихЦентров(ТекущаяСтрока, НомерСтроки, Объект, Отказ)

	ПараметрыТабличнойЧасти = Новый Структура;
	ПараметрыТабличнойЧасти.Вставить("Имя",           "ВидыРабочихЦентров");
	ПараметрыТабличнойЧасти.Вставить("Представление", НСтр("ru = 'Виды рабочих центров';
															|en = 'Work center types'"));
	ПараметрыТабличнойЧасти.Вставить("НомерСтроки",   НомерСтроки);
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".';
							|en = 'Column ""%1"" in line %2 of list ""%3"" is required.'");
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидРабочегоЦентра) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВидРабочегоЦентра");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Вид рабочего центра';
										|en = 'Work center type'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВремяРаботы) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВремяРаботы");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Время работы';
										|en = 'Working time'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ЕдиницаИзмерения");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Единица измерения времени';
										|en = 'Time unit of measure'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПорядокРаботыВидовРабочихЦентров(Отказ)
	
	Если ПланироватьРаботуВидовРабочихЦентров
		И ЭтотОбъект.ВидыРабочихЦентров.Количество() > 1 Тогда
		
		Если ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.ПустаяСсылка() Тогда
			
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				,
				,
				Ссылка.Метаданные().Реквизиты.ПорядокРаботыВидовРабочихЦентров.Синоним);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						"ПорядокРаботыВидовРабочихЦентров",
						, 
						Отказ);
			
		ИначеЕсли ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно Тогда
			
			ЗначенияПроверки = Неопределено;
			ВремяРаботыОдинаковое = Истина;
			
			Для Сч = 1 По 2 Цикл
				
				Для каждого Строка Из ?(Сч = 1, ЭтотОбъект.ВидыРабочихЦентров, ЭтотОбъект.АльтернативныеВидыРабочихЦентров) Цикл
				
					Если НЕ Строка.Использовать Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЗначенияПроверки = Неопределено Тогда
						
						ЗначенияПроверки = Строка;
						
					ИначеЕсли Строка.ВремяРаботы <> ЗначенияПроверки.ВремяРаботы
						ИЛИ Строка.ЕдиницаИзмерения <> ЗначенияПроверки.ЕдиницаИзмерения Тогда
						
						ВремяРаботыОдинаковое = Ложь;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ВремяРаботыОдинаковое Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			Если НЕ ВремяРаботыОдинаковое Тогда
				
				ТекстСообщения = НСтр("ru = 'При использовании порядка загрузки ""Одновременно"" время работы видов рабочих центров должно быть одинаковым.';
										|en = 'When using the ""Simultaneously"" load procedure, working time of work center types must be the same.'");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект, 
					"ПорядокРаботыВидовРабочихЦентров",
					, 
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольПриЗакрытииЭтапа(Отказ)
	
	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	МассивТекстов = Новый Массив;
	ИндексыКонтролей = Новый Соответствие;
	
	Если Константы.КонтролироватьЗавершениеОперацийПриЗакрытииЭтаповПроизводства.Получить() Тогда
		
		МассивТекстов.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК Поле1
			|ИЗ
			|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
			|ГДЕ
			|	Очередь.Этап = &Ссылка
			|	И Очередь.Запланировано + Очередь.ТребуетПовторения > Очередь.Выполнено + Очередь.Пропущено + Очередь.Брак
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК ДокОперация
			|ГДЕ
			|	ДокОперация.Этап = &Ссылка
			|	И ДокОперация.Проведен
			|	И НЕ ДокОперация.НаОснованииНСИ
			|	И ДокОперация.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ДокЭтап
			|ГДЕ
			|	ДокЭтап.Ссылка = &Ссылка
			|	И ВЫБОР
			|		КОГДА &ХранитьОперацииВРесурсныхСпецификациях
			|				И ДокЭтап.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
			|			ТОГДА ИСТИНА В (
			|						ВЫБРАТЬ ПЕРВЫЕ 1
			|							ИСТИНА
			|						ИЗ
			|							Справочник.ТехнологическиеОперации КАК Т
			|						ГДЕ
			|							Т.Владелец = ДокЭтап.Этап И НЕ Т.ПометкаУдаления)
			|		ИНАЧЕ ДокЭтап.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
			|	КОНЕЦ
			|	И ДокЭтап.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
			|	И ДокЭтап.Подразделение.ИспользоватьПооперационноеУправление
			|	И НЕ ДокЭтап.ПроизводствоНаСтороне
			|	И НЕ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
			|		ГДЕ
			|			Очередь.Этап = &Ссылка)");
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Операции документа ""%1"" выполнены не полностью.
				|Закрытие этапа возможно только с полностью выполненными/пропущенными операциями.';
				|en = 'Not all operations of the %1 document are performed.
				|You can close the stage only with fully performed/skipped operations.'"),
			Ссылка);
		ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
		
	Иначе
		
		МассивТекстов.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК ДокОперация
			|ГДЕ
			|	ДокОперация.Этап = &Ссылка
			|	И ДокОперация.Проведен
			|	И ДокОперация.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется))");
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'У документа ""%1"" имеются незавершенные операции.
				|Закрытие этапа возможно после перевода всех операций в следующие статусы: Выполнена, Не выполнена, Пропущена.';
				|en = 'The %1 document has unfinished operations.
				| You can close the stage only if all operations have the following statuses: Completed, Failed, Skipped.'"),
			Ссылка);
		ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
		
	КонецЕсли;
	
	//

	МассивТекстов.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
		|ГДЕ
		|	НазначенныеОперации.Этап = &Ссылка
		|	И НазначенныеОперации.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)");
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'У документа ""%1"" имеются операции, назначенные формирующимся сменным заданиям.';
			|en = 'The %1 document has operations assigned for shift tasks being generated.'"),
		Ссылка);
	ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
	
	//
	
	Запрос = Новый Запрос(СтрСоединить(МассивТекстов, ";"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ХранитьОперацииВРесурсныхСпецификациях",
		ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Для каждого Контроль Из ИндексыКонтролей Цикл
		
		Если МассивРезультатов[Контроль.Ключ].Пустой() Тогда
			Продолжить;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Контроль.Значение, 
				ЭтотОбъект,,, 
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСлужебныхРеквизитов

Процедура ЗаполнитьСлужебныеРеквизиты() Экспорт
	
	ЗаполнитьНомерПоРаспоряжению();
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер);
	
	ОсновнаяЗапись = Документы.ЭтапПроизводства2_2.ОсновнаяЗаписьРеестраДокументов(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОсновнаяЗапись);
	
	ЗаполнитьМаксимальнуюДатуПроизводства();
	ЗаполнитьМаксимальнуюДатуОтгрузки();
	ЗаполнитьМаксимальнуюДатуРасхода();
	
	Если Не ВыполняетсяПакетноеФормирование() Тогда // реквизиты заполняются в пакетном режиме отдельно
		
		Если ПланироватьРаботуВидовРабочихЦентров Тогда
			
			УправлениеДаннымиОбИзделиях.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(
				ЭтотОбъект,
				ЭтотОбъект.ВидыРабочихЦентров.НайтиСтроки(Новый Структура("Использовать", Истина)),
				Истина);
			
		КонецЕсли;
		
		ЗаполнитьРеквизитЭтапПотребитель();
		
		ЭтапПроизводства2_2Локализация.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
		
	КонецЕсли;
	
	ЗаполнитьПоследователей();
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеДанные()
	
	Если ПроизводствоНаСтороне
		Или (Не УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
			И Не ДинамическаяСтруктура) Тогда
		ПланироватьРаботуВидовРабочихЦентров = Ложь;
	КонецЕсли;
	
	Если Не УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		РучноеРазмещениеВГрафике = Ложь;
	КонецЕсли;
	
	Если НЕ ПланироватьРаботуВидовРабочихЦентров
		И НЕ РучноеРазмещениеВГрафике Тогда
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
	КонецЕсли;
	
	ФактическоеНачалоЭтапа = НачалоМинуты(ФактическоеНачалоЭтапа);
	ФактическоеОкончаниеЭтапа = НачалоМинуты(ФактическоеОкончаниеЭтапа);
	
	Если РучноеРазмещениеВГрафике Тогда
		ПланироватьНеРанее = Неопределено;
	Иначе
		ЗанятостьВидовРабочихЦентров.Очистить();
	КонецЕсли;
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект);
	Если Не ЭтоВыпускающийЭтап Тогда
		ВыходныеИзделия.Очистить();
		СпособРаспределенияЗатратНаВыходныеИзделия = Неопределено;
	КонецЕсли;
	
	Если НЕ НачатоВыполнениеЭтапа() Тогда
		
		Если НЕ ДинамическаяСтруктура И (НЕ ПроизводствоНаСтороне ИЛИ ЗаказПереработчику = Неопределено) Тогда
			ДатаПроизводства = '00010101';
		КонецЕсли;
		
		ИменаТаблицИзделия = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
		Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
			Для Каждого Строка Из ЭтотОбъект[ИмяТаблицы] Цикл
				Строка.Произведено = Ложь;
				Если НЕ ДинамическаяСтруктура И (НЕ ПроизводствоНаСтороне ИЛИ ЗаказПереработчику = Неопределено) Тогда
					Строка.ДатаПроизводства = '00010101';
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Строка Из ЭтотОбъект.Трудозатраты Цикл
			Строка.Выполнено = Ложь;
			Строка.ДатаВыполнения = '00010101';
		КонецЦикла;
		
		РасходМатериаловИРабот.Очистить();
		ЭкономияМатериалов.Очистить();
		
	КонецЕсли;
	
	Если ТребуетсяЗаполнитьПоОперациям Тогда
		ДанныеПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(Подразделение);
		Если ДанныеПодразделения.ИспользоватьПооперационноеУправление Тогда
			ПроверяемыеСтатусы = Документы.ЭтапПроизводства2_2.СтатусыДоступноВыполнениеОпераций(ДанныеПодразделения);
			Если ПроверяемыеСтатусы.Найти(Статус) = Неопределено Тогда
				ТребуетсяЗаполнитьПоОперациям = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроизводствоНаСтороне Тогда
		
		МаршрутнаяКарта = Справочники.МаршрутныеКарты.ПустаяСсылка();
		КоэффициентМаршрутнойКарты = 0;
		
		РасходМатериаловИРабот.Очистить();
		ЭкономияМатериалов.Очистить();
		Трудозатраты.Очистить();
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
		ЗанятостьВидовРабочихЦентров.Очистить();
		
		Индекс = ВидыЗапасовМатериалы.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ТекСтрока = ВидыЗапасовМатериалы[Индекс];
			Если Не ТекСтрока.ХозяйственнаяОперация =
								Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство Тогда
				ВидыЗапасовМатериалы.Удалить(ТекСтрока);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	Иначе
		
		ЗаказПереработчику = Неопределено;
		
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЭтапПроизводства2_2);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	
КонецПроцедуры

Процедура ЗаполнитьНомерПоРаспоряжению()
	
	Если ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		
		Реквизиты = УправлениеПроизводствомПовтИсп.ДанныеПроизводственногоЗаказа(Распоряжение);
		
		Номер = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Реквизиты.Номер);
		Номер = СокрЛП(Номер);
		
		Если Не ЗначениеЗаполнено(НомерПартииЗапуска) Тогда
			НомерПартииЗапуска = Справочники.ПартииПроизводства.НомерПартииПроизводства(ПартияПроизводства);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НомерЭтапаВПартииЗапуска) Тогда
			НомерЭтапаВПартииЗапуска = Документы.ЭтапПроизводства2_2.НовыйНомерЭтапаВПартииЗапуска(ПартияПроизводства);
		КонецЕсли;
		
	Иначе
		Номер = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерПартииЗапуска) И ЗначениеЗаполнено(НомерЭтапаВПартииЗапуска) Тогда
		Номер = Документы.ЭтапПроизводства2_2.НомерДокумента(Номер, НомерПартииЗапуска, НомерЭтапаВПартииЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитЭтапПотребитель()
	
	// В табличных частях <ВыходныеИзделия>, <ПобочныеИзделия> хранится служебный реквизит <ЭтапПотребитель>,
	//  используется для построения структуры заказа.
	//
	// Реквизит заполняется автоматически, кроме заказов на производство созданных до версии 2.4.6,
	//  для которых выключено обособление по этапам производства.
	//
	// При формировании этапов реквизит заполняется пакетно (передается через "данные спецификации").
	
	Отбор = Новый Структура("Отменено", Ложь);
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Вставить(0, "ВыходныеИзделия");
	ИменаТЧ.Вставить(1, "ПобочныеИзделия");
	Изделия = Новый ТаблицаЗначений;
	Изделия.Колонки.Добавить("ИндексТЧ", Новый ОписаниеТипов("Число"));
	Изделия.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	Изделия.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Изделия.Колонки.Добавить("ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Изделия.Колонки.Добавить("СписатьНаРасходы", Новый ОписаниеТипов("Булево"));
	Для ИндексТЧ = 0 По ИменаТЧ.ВГраница() Цикл
		НайденныеСтроки = ТабличнаяЧастьПоИмени(ИменаТЧ[ИндексТЧ]).НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Изделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ИндексТЧ = ИндексТЧ;
			НоваяСтрока.ИндексСтроки = Строка.НомерСтроки - 1;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.ИндексТЧ КАК ИндексТЧ,
	|	Таблица.ИндексСтроки КАК ИндексСтроки,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
	|	Таблица.СписатьНаРасходы КАК СписатьНаРасходы
	|ПОМЕСТИТЬ Изделия
	|ИЗ
	|	&Изделия КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изделия.ИндексТЧ КАК ИндексТЧ,
	|	Изделия.ИндексСтроки КАК ИндексСтроки,
	|	ЕСТЬNULL(ЭтапыПотребители.Ссылка, ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)) КАК ЭтапПотребитель
	|ИЗ
	|	Изделия КАК Изделия
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПотребители
	|		 ПО Изделия.Назначение = ЭтапыПотребители.Назначение
	|			И НЕ Изделия.СписатьНаРасходы
	|			И Изделия.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|		 ПО (ИСТИНА)
	|ГДЕ
	|	Заказы.Ссылка = &Распоряжение
	|	И НЕ Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|	И Изделия.ЭтапПотребитель <> ЕСТЬNULL(ЭтапыПотребители.Ссылка, ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка))
	|");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Изделия", Изделия);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект[ИменаТЧ[Выборка.ИндексТЧ]][Выборка.ИндексСтроки].ЭтапПотребитель = Выборка.ЭтапПотребитель;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоследователей() Экспорт
	
	// В табличной части <Последователи> хранятся связи двух типов
	//  - связи типа [0] определяются последовательностью производственного процесса, редактируются вручную
	//  - связи типа [1] определяются этапами-потребителями выходных изделий, заполняются автоматически через поле <Назначение> в данной процедуре
	
	СвязиЭтапов = Новый Соответствие;
	
	Для каждого Строка Из ВыходныеИзделия Цикл
		
		Если НЕ Строка.Отменено И НЕ Строка.СписатьНаРасходы И Не Строка.ЭтапПотребитель.Пустая() И Строка.ЭтапПотребитель <> Ссылка Тогда
			СвязиЭтапов.Вставить(Строка.ЭтапПотребитель);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из ПобочныеИзделия Цикл
		
		Если НЕ Строка.Отменено И НЕ Строка.СписатьНаРасходы И Не Строка.ЭтапПотребитель.Пустая() И Строка.ЭтапПотребитель <> Ссылка Тогда
			СвязиЭтапов.Вставить(Строка.ЭтапПотребитель);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = -Последователи.Количество() + 1 По 0 Цикл
		
		Строка = Последователи[-Индекс];
		
		Если СвязиЭтапов[Строка.Этап] <> Неопределено Тогда
			
			СвязиЭтапов.Удалить(Строка.Этап);
			
		ИначеЕсли Строка.ТипСвязи = Документы.ЭтапПроизводства2_2.ТипСвязиПотребитель() Тогда
			
			Последователи.Удалить(-Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Связь Из СвязиЭтапов Цикл
		
		НоваяСтрока = Последователи.Добавить();
		НоваяСтрока.Этап     = Связь.Ключ;
		НоваяСтрока.ТипСвязи = Документы.ЭтапПроизводства2_2.ТипСвязиПотребитель();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоСпецификации

Процедура ЗаполнитьПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	ЗаполнитьШапкуПоСпецификации(ДанныеСпецификации, ДанныеЭтапа);
	ЗаполнитьМатериалыИРаботыПоСпецификации(ДанныеСпецификации, ДанныеЭтапа);
	ЗаполнитьВыходныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа);
	ЗаполнитьПобочныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа);
	ЗаполнитьВидыРабочихЦентровПоСпецификации(ДанныеСпецификации, ДанныеЭтапа);
	ЗаполнитьТрудозатратыПоСпецификации(ДанныеСпецификации, ДанныеЭтапа);
	ЗаполнитьПоследователейПоСпецификации(ДанныеСпецификации);
	
	//++ Устарело_Переработка24
	ДавальческаяСхема.ЗаполнитьФлагОформитьОтчетДавальцу(ВыходныеИзделия, ЭтотОбъект);
	ДавальческаяСхема.ЗаполнитьФлагОформитьОтчетДавальцу(ПобочныеИзделия, ЭтотОбъект);
	//-- Устарело_Переработка24
	
КонецПроцедуры

// Заполняет шапку по спецификации
//
// Параметры:
//  ДанныеСпецификации - см. Справочники.РесурсныеСпецификации.ДанныеСпецификацииКонструктор
//  ДанныеЭтапа - СтрокаТаблицыЗначений - 
//
Процедура ЗаполнитьШапкуПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЭтапа,, "Партнер");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСпецификации, "Спецификация, ТипПроизводственногоПроцесса");
	
	Если ЗначениеЗаполнено(ДанныеЭтапа.Партнер)
		И ТипЗнч(ДанныеЭтапа.Партнер) = Тип("СправочникСсылка.Организации")
		И ДанныеЭтапа.Партнер <> Организация Тогда
		
		Если Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(ДанныеЭтапа.Партнер, Организация) Тогда
			
			СтруктураПроверки = Справочники.Организации.СтраныРегистрацииИВалютыРегламентированногоУчетаСовпадают(ДанныеЭтапа.Партнер, Организация);
			
			Если СтруктураПроверки.ВалютыСовпадают
				И СтруктураПроверки.СтраныСовпадают Тогда
				ОрганизацияДавалец = Организация;
				Организация = ДанныеЭтапа.Партнер;
				ВнутренняяПереработка = Истина;
			Иначе
				
				Если Не СтруктураПроверки.ВалютыСовпадают Тогда
					ТекстОшибки =
						НСтр("ru = '%1.
									|Валюты регламентированного учета организации-переработчика и организации-давальца не совпадают.
									|Этап сформирован от имени организации заказа на производство.';
									|en = '%1.
									|Local accounting currencies of the subcontractor company and the material provider company are different.
									|The stage is generated on behalf of the production order company.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЭтапа.ЭтапПредставление);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				
				Если Не СтруктураПроверки.СтраныСовпадают Тогда
					ТекстОшибки =
						НСтр("ru = '%1.
									|Страны регистрации организации-переработчика и организации-давальца должны совпадать.
									|Этап сформирован от имени организации заказа на производство.';
									|en = '%1.
									|Countries of residence of the subcontractor company and the material provider company must be the same.
									|The stage is generated on behalf of the production order company.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЭтапа.ЭтапПредставление);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеЭтапа = ДанныеЭтапа.ЭтапПредставление;
	
	КоличествоУпаковокПлан = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок;
	УпаковкаПлан = ДанныеСпецификации.ОсновноеИзделие.Упаковка;
	УпаковкаФакт = ДанныеСпецификации.ОсновноеИзделие.Упаковка;
	УпаковкаОтменено = ДанныеСпецификации.ОсновноеИзделие.Упаковка;
	
	КоличествоНаЕдиницуПартииВыпуска = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
		* ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Числитель
		/ ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Знаменатель;
	
	Если ДанныеЭтапа.Владелец().Колонки.Найти("ЭтапСпецификации") <> Неопределено Тогда
		Этап = ДанныеЭтапа.ЭтапСпецификации;
	КонецЕсли;
	
	Если ПланироватьРаботуВидовРабочихЦентров
		И НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоПроизводственнымРесурсам()
		И НЕ ДинамическаяСтруктура Тогда
		ПланироватьРаботуВидовРабочихЦентров = Ложь;
	КонецЕсли;
	
	Если УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект) Тогда
		СпособРаспределенияЗатратНаВыходныеИзделия = ДанныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия;
	КонецЕсли;
	
	Если ПроизводствоНаСтороне Тогда
		
		Настройки = ПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
		Если Не Настройки.ИспользуетсяПроизводствоНаСтороне
				И Не Настройки.ИспользоватьЗаказыПереработчикам2_5 Тогда
			ПроизводствоНаСтороне = Ложь;
		КонецЕсли;
		
		Если Не Настройки.ИспользоватьЗаказыПереработчикам2_5 Тогда
			ПроизводствоНаСтороне2_5 = Ложь;
			ОставитьИзделияУПереработчика = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыИРаботыПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	
	Для Сч = 1 По 2 Цикл
		
		ИмяТаблицы = ?(Сч = 1, "ВходящиеИзделия", "МатериалыИУслуги");
		Если ДанныеСпецификации[ИмяТаблицы].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ДанныеСпецификации[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ОбеспечениеМатериаламиИРаботами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.КлючСвязиСпецификация = Строка.КлючСвязи;
			НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
			
			Если НеОтгружатьЧастями Тогда
				НоваяСтрока.ДатаОтгрузки = ДатаОтгрузки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДанныеСпецификации.Свойство("НаборыМатериаловИРабот")
		И ДанныеСпецификации.НаборыМатериаловИРабот.Количество() > 0 Тогда
		
		НайденныеСтроки = ДанныеСпецификации.НаборыМатериаловИРабот.Скопировать(СтруктураПоиска);
		Для каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = НаборыМатериаловИРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВыходныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если ДанныеСпецификации.ВыходныеИзделия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтатьиДляЗаполненияНастроек = Новый Массив();
	
	НайденныеСтроки = ДанныеСпецификации.ВыходныеИзделия.НайтиСтроки(Новый Структура("Этап", ДанныеЭтапа.Этап));
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
		
		Если ПроизводствоОднойДатой Тогда
			НоваяСтрока.ДатаПроизводства = ДатаПроизводства;
		КонецЕсли;
		
		Если НоваяСтрока.СтатьяРасходов = Неопределено Тогда
			НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.НастройкаСчетовУчета)
			И ТипЗнч(НоваяСтрока.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")
			И СтатьиДляЗаполненияНастроек.Найти(НоваяСтрока.СтатьяРасходов) = Неопределено Тогда
			СтатьиДляЗаполненияНастроек.Добавить(НоваяСтрока.СтатьяРасходов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтатьиДляЗаполненияНастроек.ВГраница() <> -1 Тогда
		ЗаполнитьНастройкиСчетовУчетаПоУмолчанию(ВыходныеИзделия, СтатьиДляЗаполненияНастроек);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПобочныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если ДанныеСпецификации.ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтатьиДляЗаполненияНастроек = Новый Массив();
	
	НайденныеСтроки = ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(Новый Структура("Этап", ДанныеЭтапа.Этап));
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = ПобочныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
		
		Если ПроизводствоОднойДатой Тогда
			НоваяСтрока.ДатаПроизводства = ДатаПроизводства;
		КонецЕсли;
		
		Если НоваяСтрока.СтатьяРасходов = Неопределено Тогда
			НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.НастройкаСчетовУчета)
			И ТипЗнч(НоваяСтрока.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")
			И СтатьиДляЗаполненияНастроек.Найти(НоваяСтрока.СтатьяРасходов) = Неопределено Тогда
			СтатьиДляЗаполненияНастроек.Добавить(НоваяСтрока.СтатьяРасходов);
		КонецЕсли;
		
		Если ВнутренняяПереработка
			И ЗначениеЗаполнено(ОрганизацияДавалец) Тогда
			НоваяСтрока.ВладелецИзделия = ОрганизацияДавалец;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтатьиДляЗаполненияНастроек.ВГраница() <> -1 Тогда
		ЗаполнитьНастройкиСчетовУчетаПоУмолчанию(ПобочныеИзделия, СтатьиДляЗаполненияНастроек);
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ЗаполнитьВидыРабочихЦентровПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если НЕ ДанныеСпецификации.Свойство("ВидыРабочихЦентров")
		ИЛИ ДанныеСпецификации.ВидыРабочихЦентров.Количество() = 0
		ИЛИ (НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоПроизводственнымРесурсам()
			И НЕ ДинамическаяСтруктура) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПоУмолчанию = Новый Структура;
	Если ДанныеСпецификации.ВидыРабочихЦентров.Колонки.Найти("Использовать") = Неопределено Тогда
		ЗначенияПоУмолчанию.Вставить("Использовать", Истина);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = ЭтотОбъект.ВидыРабочихЦентров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПоУмолчанию);
		
	КонецЦикла;
	
	Если ДанныеСпецификации.Свойство("АльтернативныеВидыРабочихЦентров")
		И ДанныеСпецификации.АльтернативныеВидыРабочихЦентров.Количество() > 0 Тогда
		
		НайденныеСтроки = ДанныеСпецификации.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(
				ЭтотОбъект.АльтернативныеВидыРабочихЦентров.Добавить(),
				Строка);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТрудозатратыПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если ДанныеСпецификации.Трудозатраты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ДанныеСпецификации.Трудозатраты.НайтиСтроки(Новый Структура("Этап", ДанныеЭтапа.Этап));
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = Трудозатраты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоследователейПоСпецификации(ДанныеСпецификации)
	
	Если НЕ ЗначениеЗаполнено(НомерСледующегоЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерЭтапа", НомерСледующегоЭтапа);
	НайденныеСтроки = ДанныеСпецификации.Этапы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		НоваяСтрока = Последователи.Добавить();
		НоваяСтрока.Этап     = Строка.ЭтапПроизводства;
		НоваяСтрока.ТипСвязи = Документы.ЭтапПроизводства2_2.ТипСвязиПоследователь();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиСчетовУчетаПоУмолчанию(ТабличнаяЧасть, СтатьиДляЗаполненияНастроек)
	
	НастройкиСчетовПоУмолчанию = НастройкаСчетовУчетаСлужебныйВызовСервера.ДанныеНастроекСчетовУчетаПоУмолчанию(СтатьиДляЗаполненияНастроек);
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НастройкаСчетовУчета)
			И НастройкиСчетовПоУмолчанию[СтрокаТЧ.СтатьяРасходов] <> Неопределено Тогда
			СтрокаТЧ.НастройкаСчетовУчета = 
				НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(НастройкиСчетовПоУмолчанию[СтрокаТЧ.СтатьяРасходов].ДанныеНастройки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоОперациям

#Область ОбщиеДействия

// Подготовливает данные операций для заполнения данных
//
// Параметры:
//  ДанныеОпераций - Структура - содержит:
//                    * ВыходныеИзделия - ТаблицаЗначений - содержит:
//                     ** ДатаВыполнения - Дата -
//                    * ВыходныеИзделияСерии - ТаблицаЗначений - содержит:
//                     ** ДатаВыполнения - Дата -
//                    * МатериалыИРаботы - ТаблицаЗначений - содержит:
//                     ** ДатаВыполнения - Дата -
//                    * Трудозатраты - ТаблицаЗначений - 
//
Процедура ПодготовитьДанныеОперацийДляЗаполненияДанных(ДанныеОпераций)
	
	ОТСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50));
	
	ДанныеОпераций.ВыходныеИзделия.Колонки.ДатаВыполнения.Имя = "ДатаПроизводства";
	ДанныеОпераций.ВыходныеИзделия.Колонки.Добавить("ИмяТЧ", ОТСтрока);
	
	Для каждого Строка Из ДанныеОпераций.ВыходныеИзделия Цикл
		НайденнаяСтрока = ВыходныеИзделия.Найти(Строка.Номенклатура, "Номенклатура");
		Строка.ИмяТЧ = ?(НайденнаяСтрока = Неопределено, "ПобочныеИзделия", "ВыходныеИзделия");
	КонецЦикла;
	
	//
	
	ДанныеОпераций.ВыходныеИзделияСерии.Колонки.ДатаВыполнения.Имя = "ДатаПроизводства";
	ДанныеОпераций.ВыходныеИзделияСерии.Колонки.Добавить("ИмяТЧ", ОТСтрока);
	
	Для каждого Строка Из ДанныеОпераций.ВыходныеИзделияСерии Цикл
		НайденнаяСтрока = ВыходныеИзделия.Найти(Строка.Номенклатура, "Номенклатура");
		Строка.ИмяТЧ = ?(НайденнаяСтрока = Неопределено, "ПобочныеИзделия", "ВыходныеИзделия");
	КонецЦикла;
	
	//
	
	ДанныеОпераций.МатериалыИРаботы.Колонки.ДатаВыполнения.Имя = "ДатаРасхода";
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПослеЗаполненияПоОперациям()
	
	ДанныеПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПартияПроизводства,
		"ОсновноеИзделиеНоменклатура, ОсновноеИзделиеХарактеристика");
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", ДанныеПартии.ОсновноеИзделиеНоменклатура);
	СтруктураПоиска.Вставить("Характеристика", ДанныеПартии.ОсновноеИзделиеХарактеристика);
	
	ЕстьНоменклатураПартии = Ложь;
	
	УпаковкаФактТЧ = Неопределено;
	КоличествоФактТЧ = 0;
	КоличествоУпаковокФактТЧ = 0;
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		 
		НайденныеСтроки = РасходМатериаловИРабот.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
			ЕстьНоменклатураПартии = Истина;
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоФактТЧ = 0 Тогда
					УпаковкаФактТЧ = Строка.Упаковка;
				ИначеЕсли УпаковкаФактТЧ <> Неопределено
					И УпаковкаФактТЧ <> Строка.Упаковка Тогда
					УпаковкаФактТЧ = Неопределено;
				КонецЕсли;
				
				КоличествоФактТЧ = КоличествоФактТЧ + Строка.Количество;
				КоличествоУпаковокФактТЧ = КоличествоУпаковокФактТЧ + Строка.КоличествоУпаковок;
				
			КонецЦикла;
			
		ИначеЕсли ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1 Тогда
			ЕстьНоменклатураПартии = Истина;
		КонецЕсли;
		
	Иначе
		
		Для Сч = 1 По 2 Цикл
			
			НайденныеСтроки = ЭтотОбъект[?(Сч = 1, "ВыходныеИзделия", "ПобочныеИзделия")].НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
				ЕстьНоменклатураПартии = Истина;
				Для каждого Строка Из НайденныеСтроки Цикл

					Если Строка.Произведено Тогда
						
						Если КоличествоФактТЧ = 0 Тогда
							УпаковкаФактТЧ = Строка.Упаковка;
						ИначеЕсли УпаковкаФактТЧ <> Неопределено
							И УпаковкаФактТЧ <> Строка.Упаковка Тогда
							УпаковкаФактТЧ = Неопределено;
						КонецЕсли;
						
						КоличествоФактТЧ = КоличествоФактТЧ + Строка.Количество;
						КоличествоУпаковокФактТЧ = КоличествоУпаковокФактТЧ + Строка.КоличествоУпаковок;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНоменклатураПартии Тогда
		
		Если КоличествоФактТЧ = 0 Тогда
			КоличествоУпаковокФакт = 0;
		Иначе
			
			Если УпаковкаФактТЧ = Неопределено Тогда
				
				// Пересчет через базовые единицы
				Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					УпаковкаФакт,
					ДанныеПартии.ОсновноеИзделиеНоменклатура);
				КоличествоУпаковокФакт = Окр(КоличествоФактТЧ / Коэффициент, 3);
			
			ИначеЕсли УпаковкаФактТЧ <> УпаковкаФакт Тогда
			
				// Пересчет через упаковки
				КоэффициентТЧ = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					УпаковкаФактТЧ,
					ДанныеПартии.ОсновноеИзделиеНоменклатура);
				КоэффициентШапки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					УпаковкаФакт,
					ДанныеПартии.ОсновноеИзделиеНоменклатура);
				КоличествоУпаковокФакт =
					Окр(КоличествоУпаковокФактТЧ * КоэффициентТЧ / КоэффициентШапки, 3);
			
			Иначе
				КоличествоУпаковокФакт = КоличествоУпаковокФактТЧ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтроками

Процедура СверитьКоличествоТЧСДаннымиОпераций(ДанныеОпераций, СтруктураПоискаОпераций, КоличествоТЧ)
	
	НайденныеСтроки = ДанныеОпераций.НайтиСтроки(СтруктураПоискаОпераций);
		
	Для каждого СтрокаОперация Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(КоличествоТЧ, СтрокаОперация.Количество);
		
		СтрокаОперация.Количество = СтрокаОперация.Количество - КоличествоЗачет;
		Если СтрокаОперация.Количество = 0 Тогда
			ДанныеОпераций.Удалить(СтрокаОперация);
		КонецЕсли;
		
		КоличествоТЧ = КоличествоТЧ - КоличествоЗачет;
		Если КоличествоТЧ = 0 Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УменьшитьВыполненноеКоличествоВСтрокеТЧ(ИмяТЧ, СтрокаТЧ, КоличествоНеПроизведено, ИмяФлагаПроизведено)
	
	Если СтрокаТЧ.Количество = КоличествоНеПроизведено Тогда
		
		СтрокаТЧ[ИмяФлагаПроизведено] = Ложь;
		
		Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			СтрокаТЧ.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока = ТабличнаяЧастьПоИмени(ИмяТЧ).Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.КодСтроки = 0;
		
		Если ИмяТЧ = "Трудозатраты" Тогда
			НоваяСтрока.КлючВидРабот = Неопределено;
		КонецЕсли;
		
		НоваяСтрока.Количество = КоличествоНеПроизведено;
		НоваяСтрока[ИмяФлагаПроизведено] = Ложь;
		
		Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоНеПроизведено;
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			
			ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, СтрокаТЧ, СпособРаспределенияЗатратНаВыходныеИзделия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВСтрокуНеПроизведено(ИмяТЧ, ДанныеОперации, СтруктураПоиска, ИменаПолей)
	
	НайденныеСтроки = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВыпуск Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(СтрокаВыпуск.Количество, ДанныеОперации.Количество);
		
		Если КоличествоЗачет = СтрокаВыпуск.Количество Тогда
			
			СтрокаВыпуск[ИменаПолей.ФлагПроизведено] = Истина;
			
			ЗаполнитьЗначенияСвойств(СтрокаВыпуск, ДанныеОперации, ИменаПолей.ЗаполнитьПоОперации);
			
		Иначе
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуск);
		
			НоваяСтрока.КодСтроки = 0;
			
			Если ИмяТЧ = "Трудозатраты" Тогда
				НоваяСтрока.КлючВидРабот = Неопределено;
			КонецЕсли;
			
			НоваяСтрока.Количество = КоличествоЗачет;
			НоваяСтрока[ИменаПолей.ФлагПроизведено] = Истина;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОперации, ИменаПолей.ЗаполнитьПоОперации);
			
			СтрокаВыпуск.Количество = СтрокаВыпуск.Количество - КоличествоЗачет;
			
			Если ИмяТЧ = "ВыходныеИзделия" Тогда
				
				ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, СтрокаВыпуск, СпособРаспределенияЗатратНаВыходныеИзделия);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеОперации.Количество = ДанныеОперации.Количество - КоличествоЗачет;
		
		Если ДанныеОперации.Количество = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВСтрокуПроизведено(ИмяТЧ, ДанныеОперации, СтруктураПоиска, ИменаПолей)
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеОперации);
	СтруктураПоиска[ИменаПолей.ФлагПроизведено] = Истина;
	
	НайденныеСтроки = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + ДанныеОперации.Количество;
		
		ДанныеОперации.Количество = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуПроизводстваПоТЧ(ИмяТЧ, ДатаТЧ, ОднаДата, ИменаПолей)
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		ОбрабатыватьСтроку = НЕ ИменаПолей.Свойство("ФлагОтменено")
			ИЛИ НЕ Строка[ИменаПолей.ФлагОтменено];
		
		Если ОбрабатыватьСтроку Тогда
			
			Если ЗначениеЗаполнено(ДатаТЧ) Тогда
				
				Если ДатаТЧ = Строка[ИменаПолей.Дата] Тогда
					Продолжить;
				Иначе
					ОднаДата = Ложь;
					Прервать;
				КонецЕсли;
				
			Иначе
				ДатаТЧ = Строка[ИменаПолей.Дата];
				ОднаДата = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

Процедура ЗаполнитьМатериалыПоОперациям(МатериалыОпераций)
	
	// Сверка этапа с операциями
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	СтруктураПоиска.Вставить("Характеристика");
	СтруктураПоиска.Вставить("ДатаРасхода");
	СтруктураПоиска.Вставить("Серия");	
	СтруктураПоиска.Вставить("Подразделение");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	
	Для Индекс = -РасходМатериаловИРабот.Количество()+1 По 0 Цикл
		
		Строка = РасходМатериаловИРабот[-Индекс];
		Количество = 0;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		Для каждого СтрокаОперация Из МатериалыОпераций.НайтиСтроки(СтруктураПоиска) Цикл
			
			КоличествоЗачет = Мин(Строка.Количество - Количество, СтрокаОперация.Количество);
			
			Если КоличествоЗачет = СтрокаОперация.Количество Тогда
				МатериалыОпераций.Удалить(СтрокаОперация);
			Иначе
				СтрокаОперация.Количество = СтрокаОперация.Количество - КоличествоЗачет;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаОперация, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
			
			Количество = Количество + КоличествоЗачет;
			Если Количество = Строка.Количество Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Количество = 0 Тогда
			РасходМатериаловИРабот.Удалить(Строка);
		ИначеЕсли Количество < Строка.Количество Тогда
			Строка.Количество = Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Загрузка оставшихся данных
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	СтруктураПоиска.Вставить("Характеристика");
	СтруктураПоиска.Вставить("Подразделение");
	СтруктураПоиска.Вставить("Отменено", Ложь);
	
	Для каждого СтрокаОперация Из МатериалыОпераций Цикл
		
		НоваяСтрока = РасходМатериаловИРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОперация);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОперация);
		НайденныеСтроки = ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.СтатьяКалькуляции = НайденныеСтроки[0].СтатьяКалькуляции;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("РасходМатериаловИРабот");
	
	// Заполнение даты расхода
	ДатаТЧ = '00010101';
	ОднаДата = Ложь;
	
	ИменаПолей = Новый Структура;
	
	ИменаПолей.Вставить("Дата", "ДатаРасхода");
	ЗаполнитьДатуПроизводстваПоТЧ("РасходМатериаловИРабот", ДатаТЧ, ОднаДата, ИменаПолей);
	
	ИменаПолей.Вставить("Дата", "ДатаОперации");
	ЗаполнитьДатуПроизводстваПоТЧ("ЭкономияМатериалов", ДатаТЧ, ОднаДата, ИменаПолей);
	
	Если ОднаДата Тогда
		ДатаРасхода = ДатаТЧ;
	Иначе
		ДатаРасхода = '00010101';
	КонецЕсли;
	
	РасходОднойДатой = ОднаДата;
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеПобочныеИзделия

Процедура ЗаполнитьИзделияПоОперациям(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии)

	// Загрузка изделий	
	СверитьИзделияСДаннымиОпераций(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии);
	ЗагрузитьДанныеОперацийВИзделия(ИмяТЧ, ИзделияОпераций);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ИмяТЧСерии = "ВыходныеИзделияСерии";
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		ИмяТЧСерии = "ПобочныеИзделияСерии";
	КонецЕсли;
	
	// Загрузка серий	
	СерииДоЗагрузки = ЭтотОбъект[ИмяТЧСерии].Выгрузить();
	ЭтотОбъект[ИмяТЧСерии].Очистить();
	
	ЗагрузитьИзделияОперацийСерии(ИмяТЧ, ИзделияОперацийСерии);
	ВосстановитьСерииДоЗагрузки(ИмяТЧ, СерииДоЗагрузки);
	ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ);
	ПересчитатьСтатусы = ПеренестиСерииВТаблицуИзделий(ИмяТЧ);
	
	// Действия после загрузки 
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		Документы.ЭтапПроизводства2_2.ЗаполнитьЦеныПоВидуЦен(ЭтотОбъект);
	КонецЕсли;
			
	ТекущаяСтрокаСтруктура = ОбщегоНазначенияУТ.СтруктураСоСвойствамиОбъектаМетаданных(
									Метаданные.Документы.ЭтапПроизводства2_2.ТабличныеЧасти[ИмяТЧ]);
							
	ТекущаяСтрокаСтруктура.Вставить("ЦеховаяКладовая");
	ТекущаяСтрокаСтруктура.Вставить("НужноОкруглять");

	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок",
										ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());

	СтруктураДействийОкругление = Новый Структура("ЗаполнитьПризнакЦеховаяКладовая, ПересчитатьКоличествоЕдиниц",
												  Новый Структура("ИмяПоляСклад", "Получатель"),
												  ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	СтруктураПоиска.Вставить("Характеристика");
	СтруктураПоиска.Вставить("Получатель");
	СтруктураПоиска.Вставить("Назначение");
	СтруктураПоиска.Вставить("ДатаПроизводства");
	СтруктураПоиска.Вставить("Произведено");
	СтруктураПоиска.Вставить("Подразделение");
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураПоиска.Вставить("ВладелецИзделия");
	КонецЕсли;
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСтруктура, Строка);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				ТекущаяСтрокаСтруктура, СтруктураДействийОкругление, КэшированныеЗначения);
		
		Если Строка.Количество <> ТекущаяСтрокаСтруктура.Количество Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			
			Для каждого СтрокаСерии Из ЭтотОбъект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска) Цикл  
				СтрокаСерии.Количество = Окр(СтрокаСерии.Количество);
				ПересчитатьСтатусы = Истина;
			КонецЦикла;
			
		КонецЕсли;	 
		
		ЗаполнитьЗначенияСвойств(Строка, ТекущаяСтрокаСтруктура, "Количество, КоличествоУпаковок");
		
	КонецЦикла;
	
	Если ПересчитатьСтатусы Тогда
		ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СверитьИзделияСДаннымиОпераций(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии)
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		Если НЕ Строка.Произведено ИЛИ Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = Строка.Количество;
		
		СверитьВыпускСДаннымиОпераций(Строка, КоличествоОстаток, ИзделияОпераций, ИзделияОперацийСерии);
		
		Если КоличествоОстаток > 0 Тогда
			
			УменьшитьВыполненноеКоличествоВСтрокеТЧ(ИмяТЧ, Строка, КоличествоОстаток, "Произведено");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СверитьВыпускСДаннымиОпераций(СтрокаВыпуск, КоличествоВыпуск, ИзделияОпераций, ИзделияОперацийСерии)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, Подразделение");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыпуск);
	
	НайденныеСтроки = ИзделияОпераций.НайтиСтроки(СтруктураПоиска);
		
	Для каждого СтрокаОперация Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(КоличествоВыпуск, СтрокаОперация.Количество);
		
		СерииСверены = (СтрокаВыпуск.Серия = СтрокаОперация.Серия)
			Или СверитьСериюВыпускаСДаннымиОпераций(СтрокаВыпуск, ИзделияОперацийСерии, КоличествоЗачет);
		Если НЕ СерииСверены Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОперация.Количество = СтрокаОперация.Количество - КоличествоЗачет;
		Если СтрокаОперация.Количество = 0 Тогда
			ИзделияОпераций.Удалить(СтрокаОперация);
		КонецЕсли;
		
		КоличествоВыпуск = КоличествоВыпуск - КоличествоЗачет;
		Если КоличествоВыпуск = 0 Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СверитьСериюВыпускаСДаннымиОпераций(СтрокаВыпуск, ИзделияОперацийСерии, Знач КоличествоВыпуск)
	
	Если ЗначениеЗаполнено(СтрокаВыпуск.Серия) Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, Серия, Подразделение");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыпуск);
		
		НайденныеСтроки = ИзделияОперацийСерии.НайтиСтроки(СтруктураПоиска);
		
		Количество = 0;
		Для каждого Строка Из НайденныеСтроки Цикл
			Количество = Количество + Строка.Количество;
		КонецЦикла;
		
		Если Количество >= КоличествоВыпуск Тогда
			
			СерииСверены = Истина;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				КоличествоЗачет = Мин(КоличествоВыпуск, Строка.Количество);
				
				Строка.Количество = Строка.Количество - КоличествоЗачет;
				Если Строка.Количество = 0 Тогда
					ИзделияОперацийСерии.Удалить(Строка);
				КонецЕсли;
				
				КоличествоВыпуск = КоличествоВыпуск - КоличествоЗачет;
				Если КоличествоВыпуск = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СерииСверены = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		СерииСверены = Истина;
		
	КонецЕсли;
	
	Возврат СерииСверены;
	
КонецФункции

Процедура ЗагрузитьДанныеОперацийВИзделия(ИмяТЧ, ИзделияОпераций)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	ТекущаяСтрокаСтруктура = ОбщегоНазначенияУТ.СтруктураСоСвойствамиОбъектаМетаданных(
									Метаданные.Документы.ЭтапПроизводства2_2.ТабличныеЧасти[ИмяТЧ]);

	ТекущаяСтрокаСтруктура.Вставить("ЦеховаяКладовая");
	ТекущаяСтрокаСтруктура.Вставить("НужноОкруглять");
	
	ПараметрыРаспределенияЗатрат = Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(ЭтотОбъект);
	
	НазначениеДавальческогоВыпуска = Неопределено;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5
		//++ Устарело_Переработка24
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		//-- Устарело_Переработка24
		Или Ложь Тогда
		НазначениеДавальческогоВыпуска = Документы.ЭтапПроизводства2_2.НазначениеПоУмолчаниюДляПобочныхИзделий(Распоряжение);
	КонецЕсли;
	
	Для каждого Строка Из ИзделияОпераций Цикл
		
		Если НЕ Строка.ИмяТЧ = ИмяТЧ Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаПолей = Новый Структура;
		ИменаПолей.Вставить("ФлагПроизведено", "Произведено");
		ИменаПолей.Вставить("ЗаполнитьПоОперации", "ДатаПроизводства, Серия");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
		СтруктураПоиска.Вставить("Подразделение", Строка.Подразделение);
		СтруктураПоиска.Вставить("Произведено", Ложь);
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		ДобавитьДанныеОперацииВСтрокуНеПроизведено(
			ИмяТЧ, Строка, СтруктураПоиска, ИменаПолей);
		
		Если Строка.Количество > 0 Тогда
	
			НоваяСтрока = ТабличнаяЧастьПоИмени(ИмяТЧ).Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Произведено = Истина;
			
			СтруктураДействий = Новый Структура();
			
			Если ИмяТЧ = "ВыходныеИзделия" Тогда
				СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", НазначениеДавальческогоВыпуска);
			
			ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
				НоваяСтрока.Подразделение,
				СтруктураДействий,
				"Получатель");
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСтруктура, НоваяСтрока);
			ТекущаяСтрокаСтруктура.Вставить("ТипНоменклатуры", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрокаСтруктура.Номенклатура,"ТипНоменклатуры"));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСтруктура);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьИзделияОперацийСерии(ИмяТЧ, ИзделияОперацийСерии)
	
	Если ИзделияОперацийСерии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		
		ИмяТЧСерии = "ВыходныеИзделияСерии";
		
		ТаблицаИзделия = ЭтотОбъект[ИмяТЧ].Выгрузить(
			Новый Структура("Произведено, Отменено", Истина, Ложь),
			"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Подразделение, Количество");
		
		ТаблицаИзделия.Свернуть(
			"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Подразделение", "Количество");
	
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		
		ИмяТЧСерии = "ПобочныеИзделияСерии";
		
		ТаблицаИзделия = ЭтотОбъект[ИмяТЧ].Выгрузить(
			Новый Структура("Произведено, Отменено", Истина, Ложь),
			"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Подразделение, ВладелецИзделия, Количество");
		
		ТаблицаИзделия.Свернуть(
			"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Подразделение, ВладелецИзделия", "Количество");
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, Подразделение");
	
	Для каждого СтрокаСерии Из ИзделияОперацийСерии Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерии);
		
		НайденныеСтроки = ТаблицаИзделия.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаИзделие Из НайденныеСтроки Цикл
			
			Количество = МИН(СтрокаСерии.Количество, СтрокаИзделие.Количество);
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧСерии].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			
			Если ИмяТЧ = "ПобочныеИзделия" Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделие, "Получатель, Назначение, ВладелецИзделия");
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделие, "Получатель, Назначение");
			КонецЕсли;
			
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Произведено = Истина;
			
			СтрокаИзделие.Количество = СтрокаИзделие.Количество - Количество;
			Если СтрокаИзделие.Количество = 0 Тогда
				ТаблицаИзделия.Удалить(СтрокаИзделие);
			КонецЕсли;
			
			СтрокаСерии.Количество = СтрокаСерии.Количество - Количество;
			Если СтрокаСерии.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСерииДоЗагрузки(ИмяТЧ, СерииДоЗагрузки)
	
	ИсключитьСерииЗагруженныеИзОпераций(ИмяТЧ, СерииДоЗагрузки);
	
	Если СерииДоЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ИмяТЧСерии = "ВыходныеИзделияСерии";
		Измерения = "Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Подразделение";
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		ИмяТЧСерии = "ПобочныеИзделияСерии";
		Измерения = "Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Подразделение, ВладелецИзделия";
	КонецЕсли;
	
	СерииДоЗагрузки.ЗаполнитьЗначения(Ложь, "Произведено");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Произведено", Ложь);
	СтруктураОтбора.Вставить("Отменено", Ложь);
	СтруктураОтбора.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	ТаблицаИзделия = ТабличнаяЧастьПоИмени(ИмяТЧ).Выгрузить(
		СтруктураОтбора,
		Измерения + ", Количество");
	
	ТаблицаИзделия.Свернуть(Измерения, "Количество");
	
	СтруктураПоиска = Новый Структура(Измерения);
	
	Для каждого Строка Из ТаблицаИзделия Цикл
		
		КоличествоСерии = 0;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтрокиСерии = СерииДоЗагрузки.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаСерия Из СтрокиСерии Цикл
			КоличествоСерии = КоличествоСерии + СтрокаСерия.Количество;
		КонецЦикла;
		
		Если Строка.Количество = КоличествоСерии Тогда
			
			Для каждого СтрокаСерия Из СтрокиСерии Цикл
				
				ЗаполнитьЗначенияСвойств(
					ТабличнаяЧастьПоИмени(ИмяТЧСерии).Добавить(),
					СтрокаСерия);
					
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьСерииЗагруженныеИзОпераций(ИмяТЧ, СерииДоЗагрузки)
	
	Если СерииДоЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ИмяТЧСерии = "ВыходныеИзделияСерии";
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		ИмяТЧСерии = "ПобочныеИзделияСерии";
	КонецЕсли;
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧСерии] Цикл
		
		Если НЕ Строка.Произведено ИЛИ Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоИсключить = Строка.Количество;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Получатель");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("Подразделение");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("ДатаПроизводства");
		СтруктураПоиска.Вставить("Произведено", Истина);
		
		Если ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураПоиска.Вставить("ВладелецИзделия");
		КонецЕсли;
		
		Для Сч = 1 По 2 Цикл
			
			Если Сч = 2 Тогда
				СтруктураПоиска.Удалить("ДатаПроизводства");
				СтруктураПоиска.Вставить("Произведено", Ложь);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка, , "Произведено");
			СтрокиДоИзменения = СерииДоЗагрузки.НайтиСтроки(СтруктураПоиска);
		
			Для каждого СтрокаДоИзменения Из СтрокиДоИзменения Цикл
				
				Если КоличествоИсключить >= СтрокаДоИзменения.Количество Тогда
					
					КоличествоИсключить = КоличествоИсключить - СтрокаДоИзменения.Количество;
					СерииДоЗагрузки.Удалить(СтрокаДоИзменения);
					
				Иначе
					
					СтрокаДоИзменения.Количество = СтрокаДоИзменения.Количество - КоличествоИсключить;
					КоличествоИсключить = 0;
					
				КонецЕсли;
			
				Если КоличествоИсключить = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоИсключить = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПеренестиСерииВТаблицуИзделий(ИмяТЧ)
	
	ПересчитатьСтатусы = Ложь;
	СтатусСерииВТекущейТЧ = 13;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ИмяТЧСерии = "ВыходныеИзделияСерии";
		СтруктураПоиска = Новый Структура(
			"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Произведено, Подразделение");
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		ИмяТЧСерии = "ПобочныеИзделияСерии";
		СтруктураПоиска = Новый Структура(
			"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Произведено, Подразделение, ВладелецИзделия");
	КонецЕсли;
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		Если НЕ Строка.Произведено
			ИЛИ Строка.Отменено
			ИЛИ Строка.СтатусУказанияСерий <> СтатусСерииВТекущейТЧ
			ИЛИ ЗначениеЗаполнено(Строка.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		ПересчитатьСтатусы = Истина;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = ЭтотОбъект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаСерии Из НайденныеСтроки Цикл
				
			КоличествоЗачет = МИН(Строка.Количество, СтрокаСерии.Количество);
			
			Если Строка.Количество = КоличествоЗачет Тогда
				
				Строка.Серия = СтрокаСерии.Серия;
				
			Иначе
			
				НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Количество = КоличествоЗачет;
				НоваяСтрока.Серия = СтрокаСерии.Серия;
				НоваяСтрока.КодСтроки = 0;
				
				Строка.Количество = Строка.Количество - КоличествоЗачет;
				
				Если ИмяТЧ = "ВыходныеИзделия" Тогда
					
					ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, Строка, СпособРаспределенияЗатратНаВыходныеИзделия);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаСерии.Количество = КоличествоЗачет Тогда
				
				ЭтотОбъект[ИмяТЧСерии].Удалить(СтрокаСерии);
				
			Иначе
				
				СтрокаСерии.Количество = СтрокаСерии.Количество - КоличествоЗачет;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПересчитатьСтатусы;
	
КонецФункции

Процедура ЗаполнитьДатуПроизводстваИзделийВШапке()
	
	ДатаТЧ = '00010101';
	ОднаДата = Ложь;
	
	ИменаПолей = Новый Структура;
	ИменаПолей.Вставить("Дата", "ДатаПроизводства");
	ИменаПолей.Вставить("ФлагОтменено", "Отменено");
	
	ЗаполнитьДатуПроизводстваПоТЧ("ВыходныеИзделия", ДатаТЧ, ОднаДата, ИменаПолей);
	ЗаполнитьДатуПроизводстваПоТЧ("ПобочныеИзделия", ДатаТЧ, ОднаДата, ИменаПолей);
	
	Если ОднаДата Тогда
		ДатаПроизводства = ДатаТЧ;
	Иначе
		ДатаПроизводства = '00010101';
	КонецЕсли;
	
	ПроизводствоОднойДатой = ОднаДата;
	
КонецПроцедуры

#КонецОбласти

#Область Трудодзатраты

Процедура ЗаполнитьТрудозатратыПоОперациям(ТрудозатратыОпераций)
	
	// Сверка
	Для каждого Строка Из Трудозатраты Цикл
		
		Если НЕ Строка.Выполнено ИЛИ Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = Строка.Количество;
		
		СтруктураПоиска = Новый Структура("ВидРабот, Исполнитель, НазначениеРабот, ДатаВыполнения, Подразделение");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СверитьКоличествоТЧСДаннымиОпераций(ТрудозатратыОпераций, СтруктураПоиска, КоличествоОстаток);
		
		Если КоличествоОстаток > 0 Тогда
			УменьшитьВыполненноеКоличествоВСтрокеТЧ("Трудозатраты", Строка, КоличествоОстаток, "Выполнено");
		КонецЕсли;
		
	КонецЦикла;
	
	// Загрузка
	Для каждого Строка Из ТрудозатратыОпераций Цикл
		
		ИменаПолей = Новый Структура;
		ИменаПолей.Вставить("ФлагПроизведено", "Выполнено");
		ИменаПолей.Вставить("ЗаполнитьПоОперации", "ДатаВыполнения, Исполнитель, НазначениеРабот");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидРабот", Строка.ВидРабот);
		СтруктураПоиска.Вставить("Подразделение", Строка.Подразделение);
		СтруктураПоиска.Вставить("Выполнено", Ложь);
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		ДобавитьДанныеОперацииВСтрокуНеПроизведено(
			"Трудозатраты", Строка, СтруктураПоиска, ИменаПолей);
		
		Если Строка.Количество > 0 Тогда
				
			СтруктураПоискаПроизведено = Новый Структура(
				"ВидРабот, Исполнитель, НазначениеРабот, ДатаВыполнения, Выполнено, Подразделение");
				
			ДобавитьДанныеОперацииВСтрокуПроизведено(
				"Трудозатраты", Строка, СтруктураПоискаПроизведено, ИменаПолей);
			
		КонецЕсли;
		
		Если Строка.Количество > 0 Тогда
			
			НоваяСтрока = ЭтотОбъект.Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Выполнено = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеВидовЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	Если ПроизводствоНаСтороне Тогда
		ВидыЗапасовМатериалы.Очистить();
		ВидыЗапасовИзделия.Очистить();
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	
	ПериодСКоторогоНужноПересчитыватьВидыЗапасов(МенеджерВременныхТаблиц);
	
	Если ДополнительныеСвойства.ПериодСКоторогоНужноПересчитыватьВидыЗапасов = ЗапасыСервер.ДатаАктуальныхОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВидыЗапасовИзделий = ТаблицаДляЗаполненияВидыЗапасовИзделия(МенеджерВременныхТаблиц);
	ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, ТаблицаВидыЗапасовИзделий);
	ЗаполнитьВидыЗапасовИзделия(МенеджерВременныхТаблиц, ТаблицаВидыЗапасовИзделий);
	
	ПараметрыЗаполненияВидовЗапасов = ПараметрыЗаполненияВидовЗапасов("ВидыЗапасовМатериалы");
	ВременныеТаблицыДляЗаполненияВидыЗапасовМатериалы(МенеджерВременныхТаблиц);

	ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполненияВидовЗапасов);
	
	ЗаполнитьДополнительныеКолонкиВидыЗапасовМатериалы(МенеджерВременныхТаблиц, ПараметрыЗаполненияВидовЗапасов, Отказ);
	
	Если Не Отказ Тогда
		СтрокаТЧ = "ВидыЗапасовИзделия,ВидыЗапасовМатериалы";
		ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеКолонкиВидыЗапасовМатериалы(МенеджерВременныхТаблиц, ПараметрыЗаполненияВидовЗапасов, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.КорАналитикаУчетаНоменклатурыДляЗаполнения	КАК КорАналитикаУчетаНоменклатурыДляЗаполнения,
	|	СУММА(ВложенныйЗапрос.Количество)				КАК Количество,
	|	ВложенныйЗапрос.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВложенныйЗапрос.Период							КАК Период,
	|	ВложенныйЗапрос.ДатаОперации					КАК ДатаОперации,
	|	ВложенныйЗапрос.СписатьНаРасходы				КАК СписатьНаРасходы,
	|	ВложенныйЗапрос.Получатель						КАК Получатель,
	|	ВложенныйЗапрос.СтатьяРасходов					КАК СтатьяРасходов,
	|	ВложенныйЗапрос.АналитикаРасходов				КАК АналитикаРасходов,
	|	ВложенныйЗапрос.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|	ВложенныйЗапрос.НастройкаСчетовУчета			КАК НастройкаСчетовУчета,
	|	ВложенныйЗапрос.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	ВложенныйЗапрос.Порядок							КАК Порядок,
	|	ВложенныйЗапрос.Подразделение					КАК Подразделение,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
	|	ЕСТЬNULL(ВложенныйЗапрос.КорАналитикаУчетаНоменклатурыДляЗаполнения.Назначение.ТипНазначения,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка))   КАК ТипКорНазначения,
	|	ВложенныйЗапрос.КорАналитикаУчетаНоменклатурыДляЗаполнения.МестоХранения КАК КорМестоХранения
	|ИЗ
	|	(ВЫБРАТЬ
	|		1														КАК Порядок,
	|		РасходИПриходВКладовые.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|		РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|		РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатурыДляЗаполнения,
	|		ВЫБОР
	|			КОГДА РасходИПриходВКладовые.Количество > 0
	|				ТОГДА РасходИПриходВКладовые.Количество
	|			ИНАЧЕ -РасходИПриходВКладовые.Количество
	|		КОНЕЦ													КАК Количество,
	|		РасходИПриходВКладовые.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|		РасходИПриходВКладовые.Период							КАК Период,
	|		РасходИПриходВКладовые.ДатаОперации						КАК ДатаОперации,
	|		ЛОЖЬ													КАК СписатьНаРасходы,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)	КАК Получатель,
	|		НЕОПРЕДЕЛЕНО											КАК СтатьяРасходов,
	|		НЕОПРЕДЕЛЕНО											КАК АналитикаРасходов,
	|		НЕОПРЕДЕЛЕНО											КАК АналитикаАктивовПассивов,
	|		НЕОПРЕДЕЛЕНО											КАК НастройкаСчетовУчета,
	|		""""													КАК ИдентификаторСтроки,
	|		РасходИПриходВКладовые.Подразделение					КАК Подразделение
	|	ИЗ
	|		РасходИПриходВКладовые КАК РасходИПриходВКладовые
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2																	КАК Порядок,
	|		ЭкономияМатериалов.АналитикаУчетаНоменклатуры						КАК АналитикаУчетаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)	КАК КорАналитикаУчетаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)	КАК КорАналитикаУчетаНоменклатурыДляЗаполнения,
	|		ЭкономияМатериалов.Количество										КАК Количество,
	|		&ХозОперацияЭкономия												КАК ХозяйственнаяОперация,
	|		ЭкономияМатериалов.Период											КАК Период,
	|		ЭкономияМатериалов.ДатаОперации										КАК ДатаОперации,
	|		ЭкономияМатериалов.СписатьНаРасходы									КАК СписатьНаРасходы,
	|		ЭкономияМатериалов.Получатель										КАК Получатель,
	|		ЭкономияМатериалов.СтатьяРасходов									КАК СтатьяРасходов,
	|		ЭкономияМатериалов.АналитикаРасходов								КАК АналитикаРасходов,
	|		ЭкономияМатериалов.АналитикаАктивовПассивов							КАК АналитикаАктивовПассивов,
	|		ЭкономияМатериалов.НастройкаСчетовУчета								КАК НастройкаСчетовУчета,
	|		ЭкономияМатериалов.ИдентификаторСтроки								КАК ИдентификаторСтроки,
	|		ЭкономияМатериалов.Подразделение									КАК Подразделение
	|	ИЗ
	|		ЭкономияМатериалов КАК ЭкономияМатериалов
	|	
	|	ГДЕ
	|		ЭкономияМатериалов.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|		И ЭкономияМатериалов.СписатьНаРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2																	КАК Порядок,
	|		РасходМатериаловИРабот.АналитикаУчетаНоменклатуры					КАК АналитикаУчетаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)	КАК КорАналитикаУчетаНоменклатуры,
	|		РасходМатериаловИРабот.КорАналитикаУчетаНоменклатуры				КАК КорАналитикаУчетаНоменклатурыДляЗаполнения,
	|		РасходМатериаловИРабот.Количество									КАК Количество,
	|		&ХозОперацияРасход													КАК ХозяйственнаяОперация,
	|		РасходМатериаловИРабот.Период										КАК Период,
	|		РасходМатериаловИРабот.ДатаРасхода									КАК ДатаОперации,
	|		ЛОЖЬ																КАК СписатьНаРасходы,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)				КАК Получатель,
	|		НЕОПРЕДЕЛЕНО														КАК СтатьяРасходов,
	|		НЕОПРЕДЕЛЕНО														КАК АналитикаРасходов,
	|		НЕОПРЕДЕЛЕНО														КАК АналитикаАктивовПассивов,
	|		НЕОПРЕДЕЛЕНО														КАК НастройкаСчетовУчета,
	|		""""																КАК ИдентификаторСтроки,
	|		РасходМатериаловИРабот.Подразделение								КАК Подразделение
	|	ИЗ
	|		РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|	
	|	ГДЕ
	|		РасходМатериаловИРабот.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|	
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КорАналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.ДатаОперации,
	|	ВложенныйЗапрос.Получатель,
	|	ВложенныйЗапрос.СтатьяРасходов,
	|	ВложенныйЗапрос.ХозяйственнаяОперация,
	|	ВложенныйЗапрос.АналитикаРасходов,
	|	ВложенныйЗапрос.ИдентификаторСтроки,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.АналитикаАктивовПассивов,
	|	ВложенныйЗапрос.НастройкаСчетовУчета,
	|	ВложенныйЗапрос.СписатьНаРасходы,
	|	ВложенныйЗапрос.КорАналитикаУчетаНоменклатурыДляЗаполнения,
	|	ВложенныйЗапрос.Порядок,
	|	ВложенныйЗапрос.Подразделение,
	|	ЕСТЬNULL(ВложенныйЗапрос.КорАналитикаУчетаНоменклатурыДляЗаполнения.Назначение.ТипНазначения,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("ХозОперацияЭкономия",	ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловСписание"));
	Запрос.УстановитьПараметр("ХозОперацияРасход",		ХозяйственнаяОперацияПоИмениТЧ("РасходМатериаловИРабот"));
	Запрос.УстановитьПараметр("ПериодСКоторогоНужноПересчитыватьВидыЗапасов",
								ДополнительныеСвойства.ПериодСКоторогоНужноПересчитыватьВидыЗапасов);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ПоляПоиска	= "АналитикаУчетаНоменклатуры,КорАналитикаУчетаНоменклатуры,ХозяйственнаяОперация,Период";
	ОтборПоиска	= Новый Структура(ПоляПоиска);
	
	ТаблицаВидыЗапасов = ПараметрыЗаполненияВидовЗапасов.ТаблицаВидыЗапасов;
	ТаблицаВидыЗапасов.Индексы.Добавить(ПоляПоиска);
	
	ТипыЗапасов =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ТаблицаВидыЗапасов.ВыгрузитьКолонку("ВидЗапасов"),
			"ТипЗапасов");
	
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваров = СтрокаТоваров.Количество;
		
		Если КоличествоТоваров = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборПоиска, СтрокаТоваров);
		
		Для Каждого СтрокаЗапасов Из ТаблицаВидыЗапасов.НайтиСтроки(ОтборПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество			= Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			КоличествоПоРНПТ	= Количество * СтрокаЗапасов.КоличествоПоРНПТ / СтрокаЗапасов.Количество;
			
			Если СтрокаЗапасов.Количество = Количество Тогда
				СтрокаДляЗаполненияПоТоварам = СтрокаЗапасов;
			Иначе
				СтрокаДляЗаполненияПоТоварам = ТаблицаВидыЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляЗаполненияПоТоварам, СтрокаЗапасов);
				
				СтрокаЗапасов.Количество		= СтрокаЗапасов.Количество - Количество;
				СтрокаЗапасов.КоличествоПоРНПТ	= СтрокаЗапасов.КоличествоПоРНПТ - КоличествоПоРНПТ;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполненияПоТоварам, СтрокаТоваров);
			
			СтрокаДляЗаполненияПоТоварам.КорАналитикаУчетаНоменклатуры = СтрокаТоваров.КорАналитикаУчетаНоменклатурыДляЗаполнения;
			
			Если СтрокаТоваров.ХозяйственнаяОперация = ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловВозврат")
				И (ТипыЗапасов[СтрокаДляЗаполненияПоТоварам.ВидЗапасов] = Перечисления.ТипыЗапасов.МатериалДавальца
					Или ТипыЗапасов[СтрокаДляЗаполненияПоТоварам.ВидЗапасов] = Перечисления.ТипыЗапасов.ПолуфабрикатДавальца
					Или ТипыЗапасов[СтрокаДляЗаполненияПоТоварам.ВидЗапасов] = Перечисления.ТипыЗапасов.ПродукцияДавальца)
				//++ Устарело_Переработка24
				И Не СтрокаТоваров.ТипКорНазначения = Перечисления.ТипыНазначений.Давальческое21
				И Не СтрокаТоваров.ТипКорНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22
				И Не СтрокаТоваров.ТипКорНазначения = Перечисления.ТипыНазначений.ДавальческоеПродукция22
				//-- Устарело_Переработка24
				И Не СтрокаТоваров.ТипКорНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22
				И Не СтрокаТоваров.ТипКорНазначения = Перечисления.ТипыНазначений.Давальческое2_5 Тогда
				
				ТекстОшибки = НСтр("ru = 'Экономия давальческого материала ""%1"" на склад ""%2"" должна обосабливаться под давальческое назначение. Необходимо установить соответствующее назначение в строке табличной части.';
									|en = 'The savings of the ""%1"" material provided to the ""%2"" warehouse must be assigned for the provider assignment. Set the corresponding assignment in the table row.'");
				ТекстОшибки =
					СтрШаблон(
						ТекстОшибки,
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
							СтрокаТоваров.Номенклатура,
							СтрокаТоваров.Характеристика,,
							СтрокаТоваров.Серия),
						СтрокаТоваров.КорМестоХранения);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ЭкономияМатериалов",, Отказ);
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаДляЗаполненияПоТоварам.Количество = Количество;
			СтрокаДляЗаполненияПоТоварам.КоличествоПоРНПТ = КоличествоПоРНПТ;
			
			Если ТипыЗапасов[СтрокаДляЗаполненияПоТоварам.ВидЗапасов] = Перечисления.ТипыЗапасов.КомиссионныйТовар
				И (СтрокаДляЗаполненияПоТоварам.СписатьНаРасходы
					ИЛИ СтрокаДляЗаполненияПоТоварам.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства) Тогда
				
				СтрокаДляЗаполненияПоТоварам.КорВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
																Организация,
																СтрокаТоваров.ХозяйственнаяОперация,
																СтрокаТоваров);
				
			Иначе
				СтрокаДляЗаполненияПоТоварам.КорВидЗапасов = СтрокаДляЗаполненияПоТоварам.ВидЗапасов;
			КонецЕсли;
			
			КоличествоТоваров = КоличествоТоваров - Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТДобавляемыеВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВТДобавляемыеВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ВТДобавляемыеВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ВТДобавляемыеВидыЗапасов.Количество						КАК Количество,
	|	ВТДобавляемыеВидыЗапасов.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|	ВТДобавляемыеВидыЗапасов.ДатаОперации					КАК ДатаОперации,
	|	ВТДобавляемыеВидыЗапасов.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВТДобавляемыеВидыЗапасов.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ВТДобавляемыеВидыЗапасов.КорВидЗапасов					КАК КорВидЗапасов,
	|	ВТДобавляемыеВидыЗапасов.СписатьНаРасходы				КАК СписатьНаРасходы,
	|	ВТДобавляемыеВидыЗапасов.Получатель						КАК Получатель,
	|	ВТДобавляемыеВидыЗапасов.СтатьяРасходов					КАК СтатьяРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаРасходов				КАК АналитикаРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|	ВТДобавляемыеВидыЗапасов.НастройкаСчетовУчета			КАК НастройкаСчетовУчета,
	|	ВТДобавляемыеВидыЗапасов.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	|	ВТДобавляемыеВидыЗапасов.Период							КАК Период,
	|	ВТДобавляемыеВидыЗапасов.Подразделение					КАК Подразделение
	|ПОМЕСТИТЬ ВтДобавляемыеВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ВТДобавляемыеВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВидыЗапасовМатериалы.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВТВидыЗапасовМатериалы.ВидЗапасов						КАК ВидЗапасов,
	|	ВТВидыЗапасовМатериалы.НомерГТД							КАК НомерГТД,
	|	ВТВидыЗапасовМатериалы.Количество						КАК Количество,
	|	ВТВидыЗапасовМатериалы.КоличествоПоРНПТ					КАК КоличествоПоРНПТ,
	|	ВТВидыЗапасовМатериалы.ДатаОперации						КАК ДатаОперации,
	|	ВТВидыЗапасовМатериалы.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВТВидыЗапасовМатериалы.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ВТВидыЗапасовМатериалы.КорВидЗапасов					КАК КорВидЗапасов,
	|	ВТВидыЗапасовМатериалы.СписатьНаРасходы					КАК СписатьНаРасходы,
	|	ВТВидыЗапасовМатериалы.Получатель						КАК Получатель,
	|	ВТВидыЗапасовМатериалы.СтатьяРасходов					КАК СтатьяРасходов,
	|	ВТВидыЗапасовМатериалы.АналитикаРасходов				КАК АналитикаРасходов,
	|	ВТВидыЗапасовМатериалы.АналитикаАктивовПассивов			КАК АналитикаАктивовПассивов,
	|	ВТВидыЗапасовМатериалы.НастройкаСчетовУчета				КАК НастройкаСчетовУчета,
	|	ВТВидыЗапасовМатериалы.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	ВТВидыЗапасовМатериалы.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
	|	ВТВидыЗапасовМатериалы.Период							КАК Период,
	|	ВТВидыЗапасовМатериалы.Подразделение					КАК Подразделение
	|ИЗ
	|	ВТВидыЗапасовМатериалы КАК ВТВидыЗапасовМатериалы
	|ГДЕ
	|	ВТВидыЗапасовМатериалы.Период < &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДобавляемыеВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВТДобавляемыеВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ВТДобавляемыеВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	СУММА(ВТДобавляемыеВидыЗапасов.Количество)				КАК Количество,
	|	СУММА(ВТДобавляемыеВидыЗапасов.КоличествоПоРНПТ)		КАК КоличествоПоРНПТ,
	|	ВТДобавляемыеВидыЗапасов.ДатаОперации					КАК ДатаОперации,
	|	ВТДобавляемыеВидыЗапасов.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВТДобавляемыеВидыЗапасов.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ВТДобавляемыеВидыЗапасов.КорВидЗапасов					КАК КорВидЗапасов,
	|	ВТДобавляемыеВидыЗапасов.СписатьНаРасходы				КАК СписатьНаРасходы,
	|	ВТДобавляемыеВидыЗапасов.Получатель						КАК Получатель,
	|	ВТДобавляемыеВидыЗапасов.СтатьяРасходов					КАК СтатьяРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаРасходов				КАК АналитикаРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|	ВТДобавляемыеВидыЗапасов.НастройкаСчетовУчета			КАК НастройкаСчетовУчета,
	|	ВТДобавляемыеВидыЗапасов.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	|	""""													КАК ИдентификаторФинЗаписи,
	|	ВТДобавляемыеВидыЗапасов.Период							КАК Период,
	|	ВТДобавляемыеВидыЗапасов.Подразделение					КАК Подразделение
	|ИЗ
	|	ВтДобавляемыеВидыЗапасов КАК ВТДобавляемыеВидыЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДобавляемыеВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВТДобавляемыеВидыЗапасов.ВидЗапасов,
	|	ВТДобавляемыеВидыЗапасов.НомерГТД,
	|	ВТДобавляемыеВидыЗапасов.ДатаОперации,
	|	ВТДобавляемыеВидыЗапасов.ХозяйственнаяОперация,
	|	ВТДобавляемыеВидыЗапасов.КорАналитикаУчетаНоменклатуры,
	|	ВТДобавляемыеВидыЗапасов.КорВидЗапасов,
	|	ВТДобавляемыеВидыЗапасов.СписатьНаРасходы,
	|	ВТДобавляемыеВидыЗапасов.Получатель,
	|	ВТДобавляемыеВидыЗапасов.СтатьяРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаАктивовПассивов,
	|	ВТДобавляемыеВидыЗапасов.НастройкаСчетовУчета,
	|	ВТДобавляемыеВидыЗапасов.ИдентификаторСтроки,
	|	ВТДобавляемыеВидыЗапасов.Период,
	|	ВТДобавляемыеВидыЗапасов.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДобавляемыеВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасходИПриходВКладовые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоваровПоПериодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВидыЗапасовПоПериодам";
	
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ТаблицаВидыЗапасов);
	Запрос.УстановитьПараметр(
		"ПериодСКоторогоНужноПересчитыватьВидыЗапасов",
		ДополнительныеСвойства.ПериодСКоторогоНужноПересчитыватьВидыЗапасов);

	ВидыЗапасовМатериалы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Заполнить дополнительные колонки виды запасов изделия.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//  ТаблицаВидыЗапасов - ТаблицаЗначений - Таблица виды запасов
//
Процедура ЗаполнитьВидыЗапасовИзделия(МенеджерВременныхТаблиц, ТаблицаВидыЗапасов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.ДатаОперации					КАК ДатаОперации,
	|	ТаблицаВидыЗапасов.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|	ТаблицаВидыЗапасов.СписатьНаРасходы				КАК СписатьНаРасходы,
	|	ТаблицаВидыЗапасов.Получатель					КАК Получатель,
	|	ТаблицаВидыЗапасов.СтатьяРасходов				КАК СтатьяРасходов,
	|	ТаблицаВидыЗапасов.АналитикаРасходов			КАК АналитикаРасходов,
	|	ТаблицаВидыЗапасов.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|	ТаблицаВидыЗапасов.НастройкаСчетовУчета			КАК НастройкаСчетовУчета,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	//++ Устарело_Переработка24
	|	ТаблицаВидыЗапасов.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ТаблицаВидыЗапасов.КодСтроки					КАК КодСтроки,
	|	ТаблицаВидыЗапасов.ДоляСтоимости				КАК ДоляСтоимости,
	|	ТаблицаВидыЗапасов.Сумма						КАК Сумма,
	|	ТаблицаВидыЗапасов.Период						КАК Период,
	|	ТаблицаВидыЗапасов.Подразделение				КАК Подразделение,
	|	ТаблицаВидыЗапасов.ВладелецИзделия				КАК ВладелецИзделия
	|ПОМЕСТИТЬ ВТДобавляемыеВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация									КАК Организация,
	|	ВТВидыЗапасовИзделия.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВТВидыЗапасовИзделия.ВидЗапасов					КАК ВидЗапасов,
	|	ВТВидыЗапасовИзделия.НомерГТД					КАК НомерГТД,
	|	ВТВидыЗапасовИзделия.Количество					КАК Количество,
	|	0												КАК КоличествоПоРНПТ,
	|	ВТВидыЗапасовИзделия.ДатаОперации				КАК ДатаОперации,
	|	ВТВидыЗапасовИзделия.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	ВТВидыЗапасовИзделия.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|	ВТВидыЗапасовИзделия.СписатьНаРасходы			КАК СписатьНаРасходы,
	|	ВТВидыЗапасовИзделия.Получатель					КАК Получатель,
	|	ВТВидыЗапасовИзделия.СтатьяРасходов				КАК СтатьяРасходов,
	|	ВТВидыЗапасовИзделия.АналитикаРасходов			КАК АналитикаРасходов,
	|	ВТВидыЗапасовИзделия.АналитикаАктивовПассивов	КАК АналитикаАктивовПассивов,
	|	ВТВидыЗапасовИзделия.НастройкаСчетовУчета		КАК НастройкаСчетовУчета,
	|	ВТВидыЗапасовИзделия.ИдентификаторСтроки		КАК ИдентификаторСтроки,
	|	ВТВидыЗапасовИзделия.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	//++ Устарело_Переработка24
	|	ВТВидыЗапасовИзделия.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ВТВидыЗапасовИзделия.КодСтроки					КАК КодСтроки,
	|	ВТВидыЗапасовИзделия.ДоляСтоимости				КАК ДоляСтоимости,
	|	ВТВидыЗапасовИзделия.Сумма						КАК Сумма,
	|	ВТВидыЗапасовИзделия.Период						КАК Период,
	|	ВТВидыЗапасовИзделия.Подразделение				КАК Подразделение,
	|	ВТВидыЗапасовИзделия.ВладелецИзделия			КАК ВладелецИзделия
	|ПОМЕСТИТЬ ВТПриходуемыеВидыЗапасовИзделия
	|ИЗ
	|	ВтВидыЗапасовИзделия КАК ВТВидыЗапасовИзделия
	|ГДЕ
	|	ВТВидыЗапасовИзделия.Период < &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ВТДобавляемыеВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВТДобавляемыеВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ВТДобавляемыеВидыЗапасов.НомерГТД					КАК НомерГТД,
	|	ВТДобавляемыеВидыЗапасов.Количество					КАК Количество,
	|	0													КАК КоличествоПоРНПТ,
	|	ВТДобавляемыеВидыЗапасов.ДатаОперации				КАК ДатаОперации,
	|	ВТДобавляемыеВидыЗапасов.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	ВТДобавляемыеВидыЗапасов.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|	ВТДобавляемыеВидыЗапасов.СписатьНаРасходы			КАК СписатьНаРасходы,
	|	ВТДобавляемыеВидыЗапасов.Получатель					КАК Получатель,
	|	ВТДобавляемыеВидыЗапасов.СтатьяРасходов				КАК СтатьяРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаРасходов			КАК АналитикаРасходов,
	|	ВТДобавляемыеВидыЗапасов.АналитикаАктивовПассивов	КАК АналитикаАктивовПассивов,
	|	ВТДобавляемыеВидыЗапасов.НастройкаСчетовУчета		КАК НастройкаСчетовУчета,
	|	ВТДобавляемыеВидыЗапасов.ИдентификаторСтроки		КАК ИдентификаторСтроки,
	|	""""												КАК ИдентификаторФинЗаписи,
	//++ Устарело_Переработка24
	|	ВТДобавляемыеВидыЗапасов.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ВТДобавляемыеВидыЗапасов.КодСтроки					КАК КодСтроки,
	|	ВТДобавляемыеВидыЗапасов.ДоляСтоимости				КАК ДоляСтоимости,
	|	ВТДобавляемыеВидыЗапасов.Сумма						КАК Сумма,
	|	ВТДобавляемыеВидыЗапасов.Период						КАК Период,
	|	ВТДобавляемыеВидыЗапасов.Подразделение				КАК Подразделение,
	|	ВТДобавляемыеВидыЗапасов.ВладелецИзделия			КАК ВладелецИзделия
	|ИЗ
	|	ВТДобавляемыеВидыЗапасов КАК ВТДобавляемыеВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДобавляемыеВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходнаяТаблицаТоваров
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ТаблицаВидыЗапасов);
	Запрос.УстановитьПараметр("ПериодСКоторогоНужноПересчитыватьВидыЗапасов", ДополнительныеСвойства.ПериодСКоторогоНужноПересчитыватьВидыЗапасов);

	Результаты = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ВидыЗапасовИзделия.Загрузить(Результаты[1].Выгрузить());
	
КонецПроцедуры

Функция ПараметрыЗаполненияВидовЗапасов(ИмяТЧ, МенеджерВременныхТаблиц = Неопределено)
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Очистить();
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.Товар);
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.МатериалДавальца);
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПолуфабрикатДавальца);
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПродукцияДавальца);
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.КомиссионныйТовар);
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи);
	
	Если ИмяТЧ = "ВидыЗапасовМатериалы"Тогда
		
		ПараметрыЗаполнения.ПодбиратьЗапасыРазныхПериодов = Истина;
		ПараметрыЗаполнения.ИмяТЧВидыЗапасов = ИмяТЧ;
		ПараметрыЗаполнения.ТаблицаВидыЗапасов = ЭтотОбъект[ИмяТЧ].ВыгрузитьКолонки();
		ПараметрыЗаполнения.ПериодЗаполнения = ДополнительныеСвойства.ПериодСКоторогоНужноПересчитыватьВидыЗапасов;
		ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
		
		ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение.Вставить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи, "ПоХозяйственнойОперации");
		ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение.Вставить(Перечисления.ТипыЗапасов.МатериалДавальца,              "ПоХозяйственнойОперации");
		ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение.Вставить(Перечисления.ТипыЗапасов.ПолуфабрикатДавальца,          "ПоХозяйственнойОперации");
		ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение.Вставить(Перечисления.ТипыЗапасов.ПродукцияДавальца,             "ПоХозяйственнойОперации");
		
		ДействияПоХозяйственнойОперации = Новый Соответствие;
		
		ДействиеПоХозяйственнойОперации = Новый Соответствие();
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("ОбеспечениеМатериаламиИРаботами"), "Всегда");
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловВозврат"),       "Всегда");
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловСписание"),      "ПоНастройкамДоговора");
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("РасходМатериаловИРабот"),          "ПоНастройкамДоговораПроизводство");
		
		ДействияПоХозяйственнойОперации.Вставить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи, ДействиеПоХозяйственнойОперации);
		
		ДействиеПоХозяйственнойОперации = Новый Соответствие();
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("ОбеспечениеМатериаламиИРаботами"), "Всегда");
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловВозврат"),       "Всегда");
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловСписание"),      "ПоНастройкамДоговора");
		ДействиеПоХозяйственнойОперации.Вставить(ХозяйственнаяОперацияПоИмениТЧ("РасходМатериаловИРабот"),          "Всегда");
		
		ДействияПоХозяйственнойОперации.Вставить(Перечисления.ТипыЗапасов.МатериалДавальца,     ДействиеПоХозяйственнойОперации);
		ДействияПоХозяйственнойОперации.Вставить(Перечисления.ТипыЗапасов.ПолуфабрикатДавальца, ДействиеПоХозяйственнойОперации);
		ДействияПоХозяйственнойОперации.Вставить(Перечисления.ТипыЗапасов.ПродукцияДавальца,    ДействиеПоХозяйственнойОперации);
		
		ПараметрыЗаполнения.ДействияПодбораТоваровПринятыхНаОтветственноеХранениеПоХозяйственнойОперации =
			ДействияПоХозяйственнойОперации;
		
		ПараметрыЗаполнения.ЕстьТаблицаПриходуемыхВидовЗапасов = Истина;
		ПараметрыЗаполнения.ИмяТаблицыПриходуемыхВидовЗапасов  = "ВТПриходуемыеВидыЗапасовИзделия";
		
		Если ВнутренняяПереработка Тогда
			ПараметрыЗаполнения.ОтборыВидовЗапасов.ОрганизацияДавалец = ОрганизацияДавалец;
		КонецЕсли;
		
	ИначеЕсли Не ИмяТЧ = "Проведение" Тогда
		
		ТекстИсключения = НСтр("ru = 'Неизвестное имя табличной части видов запасов: ""%ИмяТЧ%""';
								|en = 'Unknown name of table of inventory owner attributes: ""%ИмяТЧ%""'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяТЧ%", ИмяТЧ);
		Возврат ТекстИсключения;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ВременныеТаблицыДанныхДокумента()
	
	МенеджерВременныхТаблиц = Документы.ЭтапПроизводства2_2.ВременныеТаблицыДанныхОбъекта(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыЭтапов.Дата										КАК Дата,
	|	РеквизитыЭтапов.Организация									КАК Организация,
	|	РеквизитыЭтапов.ВнутренняяПереработка						КАК ВнутренняяПереработка,
	|	РеквизитыЭтапов.ОрганизацияДавалец							КАК ОрганизацияДавалец,
	|	НЕОПРЕДЕЛЕНО												КАК Партнер,
	|	НЕОПРЕДЕЛЕНО												КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)		КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК Валюта,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению
	|			ТОГДА РеквизитыЭтапов.ВыпускПодДеятельность
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ														КАК ВыпускПодДеятельность,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению
	|			ТОГДА РеквизитыЭтапов.ВыпускПодДеятельность
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ														КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)	КАК ХозяйственнаяОперация,
	|	ЛОЖЬ														КАК ЕстьСделкиВТабличнойЧасти,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)				КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)			КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)					КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	РеквизитыЭтапов КАК РеквизитыЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасовМатериалы.НомерСтроки					КАК НомерСтроки,
	|	ВидыЗапасовМатериалы.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасовМатериалы.ВидЗапасов						КАК ВидЗапасов,
	|	ВидыЗапасовМатериалы.НомерГТД						КАК НомерГТД,
	|	ВидыЗапасовМатериалы.Количество						КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|				ИЛИ НАЧАЛОПЕРИОДА(ВидыЗапасовМатериалы.Период, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|			ТОГДА 0
	|		ИНАЧЕ ВидыЗапасовМатериалы.КоличествоПоРНПТ
	|	КОНЕЦ												КАК КоличествоПоРНПТ,
	|	ВидыЗапасовМатериалы.ДатаОперации					КАК ДатаОперации,
	|	ВидыЗапасовМатериалы.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВидыЗапасовМатериалы.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ВидыЗапасовМатериалы.КорВидЗапасов					КАК КорВидЗапасов,
	|	ВидыЗапасовМатериалы.СписатьНаРасходы				КАК СписатьНаРасходы,
	|	ВидыЗапасовМатериалы.Получатель						КАК Получатель,
	|	ВидыЗапасовМатериалы.СтатьяРасходов					КАК СтатьяРасходов,
	|	ВидыЗапасовМатериалы.АналитикаРасходов				КАК АналитикаРасходов,
	|	ВидыЗапасовМатериалы.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|	ВидыЗапасовМатериалы.НастройкаСчетовУчета			КАК НастройкаСчетовУчета,
	|	ВидыЗапасовМатериалы.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	|	ВидыЗапасовМатериалы.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
	|	ВидыЗапасовМатериалы.Период							КАК Период,
	|	ВидыЗапасовМатериалы.Подразделение					КАК Подразделение
	|ПОМЕСТИТЬ ВтВидыЗапасовМатериалы
	|ИЗ
	|	&ВидыЗапасовМатериалы КАК ВидыЗапасовМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасовИзделия.НомерСтроки					КАК НомерСтроки,
	|	ВидыЗапасовИзделия.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасовИзделия.ВидЗапасов					КАК ВидЗапасов,
	|	ВидыЗапасовИзделия.НомерГТД						КАК НомерГТД,
	|	ВидыЗапасовИзделия.Количество					КАК Количество,
	|	0												КАК КоличествоПоРНПТ,
	|	ВидыЗапасовИзделия.ДатаОперации					КАК ДатаОперации,
	|	ВидыЗапасовИзделия.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	ВидыЗапасовИзделия.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|	ВидыЗапасовИзделия.СписатьНаРасходы				КАК СписатьНаРасходы,
	|	ВидыЗапасовИзделия.Получатель					КАК Получатель,
	|	ВидыЗапасовИзделия.СтатьяРасходов				КАК СтатьяРасходов,
	|	ВидыЗапасовИзделия.АналитикаРасходов			КАК АналитикаРасходов,
	|	ВидыЗапасовИзделия.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|	ВидыЗапасовИзделия.НастройкаСчетовУчета			КАК НастройкаСчетовУчета,
	|	ВидыЗапасовИзделия.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	|	ВидыЗапасовИзделия.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	//++ Устарело_Переработка24
	|	ВидыЗапасовИзделия.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ВидыЗапасовИзделия.КодСтроки					КАК КодСтроки,
	|	ВидыЗапасовИзделия.ДоляСтоимости				КАК ДоляСтоимости,
	|	ВидыЗапасовИзделия.Сумма						КАК Сумма,
	|	ВидыЗапасовИзделия.Период						КАК Период,
	|	ВидыЗапасовИзделия.Подразделение				КАК Подразделение,
	|	ВидыЗапасовИзделия.ВладелецИзделия				КАК ВладелецИзделия
	|ПОМЕСТИТЬ ВтВидыЗапасовИзделия
	|ИЗ
	|	&ВидыЗапасовИзделия КАК ВидыЗапасовИзделия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбеспечение.Период							КАК Период,
	|	ТаблицаОбеспечение.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.Подразделение					КАК Подразделение,
	|	ТаблицаОбеспечение.НомерГТД							КАК НомерГТД
	|ПОМЕСТИТЬ ВстречныеПриходыИРасходыВКладовые
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК ТаблицаОбеспечение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭкономияМатериалов КАК ТаблицаЭкономия
	|		ПО ТаблицаОбеспечение.Период = ТаблицаЭкономия.Период
	|			И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры = ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры
	|			И ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры = ТаблицаЭкономия.АналитикаУчетаНоменклатуры
	|			И ТаблицаОбеспечение.Подразделение = ТаблицаЭкономия.Подразделение
	|			И ТаблицаОбеспечение.НомерГТД = ТаблицаЭкономия.НомерГТД
	|
	|ГДЕ
	|	НЕ ТаблицаОбеспечение.Отменено
	|	И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая
	|	И ТаблицаОбеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение = ТаблицаОбеспечение.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	АналитикаУчетаНоменклатуры,
	|	КорАналитикаУчетаНоменклатуры,
	|	Подразделение,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РасходИПриходВКладовые.НомерСтроки)				КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИПриходВКладовые.Количество) > 0
	|			ТОГДА РасходИПриходВКладовые.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры
	|	КОНЕЦ														КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИПриходВКладовые.Количество) > 0
	|			ТОГДА РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ РасходИПриходВКладовые.АналитикаУчетаНоменклатуры
	|	КОНЕЦ														КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИПриходВКладовые.Количество) > 0
	|			ТОГДА &ХозОперацияОбеспечения
	|		ИНАЧЕ &ХозОперацияЭкономия
	|	КОНЕЦ														КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИПриходВКладовые.Количество) > 0
	|			ТОГДА СУММА(РасходИПриходВКладовые.Количество)
	|		ИНАЧЕ -СУММА(РасходИПриходВКладовые.Количество)
	|	КОНЕЦ														КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИПриходВКладовые.КоличествоПоРНПТ) > 0
	|			ТОГДА СУММА(РасходИПриходВКладовые.КоличествоПоРНПТ)
	|		ИНАЧЕ -СУММА(РасходИПриходВКладовые.КоличествоПоРНПТ)
	|	КОНЕЦ														КАК КоличествоПоРНПТ,
	|	РасходИПриходВКладовые.Период								КАК Период,
	|	РасходИПриходВКладовые.Подразделение						КАК Подразделение,
	|	РасходИПриходВКладовые.НомерГТД								КАК НомерГТД,
	|	МАКСИМУМ(РасходИПриходВКладовые.ДатаОперации)				КАК ДатаОперации
	|ПОМЕСТИТЬ РасходИПриходВКладовые
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОбеспечение.НомерСтроки + &ПорядокОбеспечение	КАК НомерСтроки,
	|		ТаблицаОбеспечение.АналитикаУчетаНоменклатуры			КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|		ТаблицаОбеспечение.Количество							КАК Количество,
	|		ТаблицаОбеспечение.КоличествоПоРНПТ						КАК КоличествоПоРНПТ,
	|		ТаблицаОбеспечение.Период								КАК Период,
	|		ТаблицаОбеспечение.ДатаОтгрузки							КАК ДатаОперации,
	|		ТаблицаОбеспечение.Подразделение						КАК Подразделение,
	|		ТаблицаОбеспечение.НомерГТД								КАК НомерГТД
	|	ИЗ
	|		ОбеспечениеМатериаламиИРаботами КАК ТаблицаОбеспечение
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВстречныеПриходыИРасходыВКладовые КАК ВстречноеОбеспечение
	|			ПО ТаблицаОбеспечение.Период = ВстречноеОбеспечение.Период
	|				И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры = ВстречноеОбеспечение.АналитикаУчетаНоменклатуры
	|				И ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры = ВстречноеОбеспечение.КорАналитикаУчетаНоменклатуры
	|				И ТаблицаОбеспечение.Подразделение = ВстречноеОбеспечение.Подразделение
	|				И ТаблицаОбеспечение.НомерГТД = ВстречноеОбеспечение.НомерГТД
	|	ГДЕ
	|		НЕ ТаблицаОбеспечение.Отменено
	|		И ТаблицаОбеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЭкономия.НомерСтроки + &ПорядокЭкономия	КАК НомерСтроки,
	|		ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаЭкономия.АналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|		-ТаблицаЭкономия.Количество						КАК Количество,
	|		-ТаблицаЭкономия.КоличествоПоРНПТ				КАК КоличествоПоРНПТ,
	|		ТаблицаЭкономия.Период							КАК Период,
	|		ТаблицаЭкономия.ДатаОперации					КАК ДатаОперации,
	|		ТаблицаЭкономия.Подразделение					КАК Подразделение,
	|		ТаблицаЭкономия.НомерГТД						КАК НомерГТД
	|	ИЗ
	|		ЭкономияМатериалов КАК ТаблицаЭкономия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВстречныеПриходыИРасходыВКладовые КАК ВстречнаяЭкономия
	|			ПО ТаблицаЭкономия.Период = ВстречнаяЭкономия.Период
	|				И ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры = ВстречнаяЭкономия.АналитикаУчетаНоменклатуры
	|				И ТаблицаЭкономия.АналитикаУчетаНоменклатуры = ВстречнаяЭкономия.КорАналитикаУчетаНоменклатуры
	|				И ТаблицаЭкономия.Подразделение = ВстречнаяЭкономия.Подразделение
	|				И ТаблицаЭкономия.НомерГТД = ВстречнаяЭкономия.НомерГТД
	|	) КАК РасходИПриходВКладовые
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходИПриходВКладовые.АналитикаУчетаНоменклатуры,
	|	РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры,
	|	РасходИПриходВКладовые.Период,
	|	РасходИПриходВКладовые.Подразделение,
	|	РасходИПриходВКладовые.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасходИПриходВКладовые.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаОбеспечение.НомерСтроки + &ПорядокОбеспечение)	КАК НомерСтроки,
	|	ТаблицаОбеспечение.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	&ХозОперацияОбеспечения								КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаОбеспечение.Количество)				КАК Количество,
	|	СУММА(ТаблицаОбеспечение.КоличествоПоРНПТ)			КАК КоличествоПоРНПТ,
	|	ТаблицаОбеспечение.Период							КАК Период,
	|	ТаблицаОбеспечение.Подразделение					КАК Подразделение,
	|	ТаблицаОбеспечение.НомерГТД							КАК НомерГТД,
	|	ТаблицаОбеспечение.ДатаОтгрузки						КАК ДатаОперации
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК ТаблицаОбеспечение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВстречныеПриходыИРасходыВКладовые КАК ВстречноеОбеспечение
	|		ПО ТаблицаОбеспечение.Период = ВстречноеОбеспечение.Период
	|			И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры = ВстречноеОбеспечение.АналитикаУчетаНоменклатуры
	|			И ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры = ВстречноеОбеспечение.КорАналитикаУчетаНоменклатуры
	|			И ТаблицаОбеспечение.Подразделение = ВстречноеОбеспечение.Подразделение
	|			И ТаблицаОбеспечение.НомерГТД = ВстречноеОбеспечение.НомерГТД
	|ГДЕ
	|	НЕ &УдалитьСворачиватьВидыЗапасовПоМесяцам
	|	И НЕ ТаблицаОбеспечение.Отменено
	|	И ВстречноеОбеспечение.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|	И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая
	|	И ТаблицаОбеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение = ТаблицаОбеспечение.Подразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбеспечение.АналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.Период,
	|	ТаблицаОбеспечение.Подразделение,
	|	ТаблицаОбеспечение.НомерГТД,
	|	ТаблицаОбеспечение.ДатаОтгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЭкономия.НомерСтроки + &ПорядокЭкономия)	КАК НомерСтроки,
	|	ТаблицаЭкономия.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	&ХозОперацияЭкономия							КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаЭкономия.Количество)				КАК Количество,
	|	СУММА(ТаблицаЭкономия.КоличествоПоРНПТ)			КАК КоличествоПоРНПТ,
	|	ТаблицаЭкономия.Период							КАК Период,
	|	ТаблицаЭкономия.Подразделение					КАК Подразделение,
	|	ТаблицаЭкономия.НомерГТД						КАК НомерГТД,
	|	ТаблицаЭкономия.ДатаОперации					КАК ДатаОперации
	|ИЗ
	|	ЭкономияМатериалов КАК ТаблицаЭкономия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВстречныеПриходыИРасходыВКладовые КАК ВстречнаяЭкономия
	|		ПО ТаблицаЭкономия.Период = ВстречнаяЭкономия.Период
	|			И ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры = ВстречнаяЭкономия.АналитикаУчетаНоменклатуры
	|			И ТаблицаЭкономия.АналитикаУчетаНоменклатуры = ВстречнаяЭкономия.КорАналитикаУчетаНоменклатуры
	|			И ТаблицаЭкономия.Подразделение = ВстречнаяЭкономия.Подразделение
	|			И ТаблицаЭкономия.НомерГТД = ВстречнаяЭкономия.НомерГТД
	|ГДЕ
	|	НЕ &УдалитьСворачиватьВидыЗапасовПоМесяцам
	|	И ВстречнаяЭкономия.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|	И ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЭкономия.АналитикаУчетаНоменклатуры,
	|	ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры,
	|	ТаблицаЭкономия.Период,
	|	ТаблицаЭкономия.Подразделение,
	|	ТаблицаЭкономия.НомерГТД,
	|	ТаблицаЭкономия.ДатаОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаОбеспечение.НомерСтроки + &ПорядокОбеспечение)	КАК НомерСтроки,
	|	ТаблицаОбеспечение.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	&ХозОперацияОбеспечения								КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаОбеспечение.Количество)				КАК Количество,
	|	СУММА(ТаблицаОбеспечение.КоличествоПоРНПТ)			КАК КоличествоПоРНПТ,
	|	ТаблицаОбеспечение.Период							КАК Период,
	|	ТаблицаОбеспечение.Подразделение					КАК Подразделение,
	|	ТаблицаОбеспечение.НомерГТД							КАК НомерГТД,
	|	МАКСИМУМ(ТаблицаОбеспечение.ДатаОтгрузки)			КАК ДатаОперации
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК ТаблицаОбеспечение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВстречныеПриходыИРасходыВКладовые КАК ВстречноеОбеспечение
	|		ПО ТаблицаОбеспечение.Период = ВстречноеОбеспечение.Период
	|			И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры = ВстречноеОбеспечение.АналитикаУчетаНоменклатуры
	|			И ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры = ВстречноеОбеспечение.КорАналитикаУчетаНоменклатуры
	|			И ТаблицаОбеспечение.Подразделение = ВстречноеОбеспечение.Подразделение
	|			И ТаблицаОбеспечение.НомерГТД = ВстречноеОбеспечение.НомерГТД
	|ГДЕ
	|	&УдалитьСворачиватьВидыЗапасовПоМесяцам
	|	И НЕ ТаблицаОбеспечение.Отменено
	|	И ВстречноеОбеспечение.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|	И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая
	|	И ТаблицаОбеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ТаблицаОбеспечение.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение = ТаблицаОбеспечение.Подразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбеспечение.АналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.КорАналитикаУчетаНоменклатуры,
	|	ТаблицаОбеспечение.Период,
	|	ТаблицаОбеспечение.Подразделение,
	|	ТаблицаОбеспечение.НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЭкономия.НомерСтроки + &ПорядокЭкономия)	КАК НомерСтроки,
	|	ТаблицаЭкономия.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	&ХозОперацияЭкономия							КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаЭкономия.Количество)				КАК Количество,
	|	СУММА(ТаблицаЭкономия.КоличествоПоРНПТ)			КАК КоличествоПоРНПТ,
	|	ТаблицаЭкономия.Период							КАК Период,
	|	ТаблицаЭкономия.Подразделение					КАК Подразделение,
	|	ТаблицаЭкономия.НомерГТД						КАК НомерГТД,
	|	МАКСИМУМ(ТаблицаЭкономия.ДатаОперации)			КАК ДатаОперации
	|ИЗ
	|	ЭкономияМатериалов КАК ТаблицаЭкономия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВстречныеПриходыИРасходыВКладовые КАК ВстречнаяЭкономия
	|		ПО ТаблицаЭкономия.Период = ВстречнаяЭкономия.Период
	|			И ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры = ВстречнаяЭкономия.АналитикаУчетаНоменклатуры
	|			И ТаблицаЭкономия.АналитикаУчетаНоменклатуры = ВстречнаяЭкономия.КорАналитикаУчетаНоменклатуры
	|			И ТаблицаЭкономия.Подразделение = ВстречнаяЭкономия.Подразделение
	|			И ТаблицаЭкономия.НомерГТД = ВстречнаяЭкономия.НомерГТД
	|ГДЕ
	|	&УдалитьСворачиватьВидыЗапасовПоМесяцам
	|	И ВстречнаяЭкономия.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|	И ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЭкономия.АналитикаУчетаНоменклатуры,
	|	ТаблицаЭкономия.КорАналитикаУчетаНоменклатуры,
	|	ТаблицаЭкономия.Период,
	|	ТаблицаЭкономия.Подразделение,
	|	ТаблицаЭкономия.НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВстречныеПриходыИРасходыВКладовые";
	
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению",
		НастройкиНалоговУчетныхПолитикПовтИсп.РаздельныйУчетТоваровПоНалогообложениюНДС(Организация, Дата));
	
	Запрос.УстановитьПараметр("ВидыЗапасовМатериалы", ВидыЗапасовМатериалы);
	Запрос.УстановитьПараметр("ВидыЗапасовИзделия",   ВидыЗапасовИзделия);
	
	Запрос.УстановитьПараметр("ПорядокЭкономия",	ПорядокТЧ("ЭкономияМатериалов"));
	Запрос.УстановитьПараметр("ПорядокОбеспечение",	ПорядокТЧ("ОбеспечениеМатериаламиИРаботами"));
	
	Запрос.УстановитьПараметр("ХозОперацияОбеспечения",	ХозяйственнаяОперацияПоИмениТЧ("ОбеспечениеМатериаламиИРаботами"));
	Запрос.УстановитьПараметр("ХозОперацияЭкономия",	ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловВозврат"));
	
	Запрос.УстановитьПараметр("УдалитьСворачиватьВидыЗапасовПоМесяцам", УдалитьСворачиватьВидыЗапасовПоМесяцам);
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Таблицы для заполнения виды запасов изделия.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблицы для заполнения виды запасов изделия
//
Функция ТаблицаДляЗаполненияВидыЗапасовИзделия(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация										КАК Организация,
	|	&Валюта															КАК Валюта,
	|	ВложенныйЗапрос.НалогообложениеОрганизации						КАК НалогообложениеОрганизации,
	|	НЕОПРЕДЕЛЕНО													КАК Соглашение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)		КАК НалогообложениеНДС,
	|	ВложенныйЗапрос.ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ВложенныйЗапрос.Подразделение									КАК Подразделение,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки)							КАК НомерСтроки,
	|	ВложенныйЗапрос.Период											КАК Период,
	|	ВложенныйЗапрос.ДатаОперации									КАК ДатаОперации,
	|	ВложенныйЗапрос.Номенклатура									КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика									КАК Характеристика,
	|	ВложенныйЗапрос.Назначение										КАК Назначение,
	|	ВложенныйЗапрос.ТипЗапасов										КАК ТипЗапасов,
	|	ВложенныйЗапрос.ВладелецТовара									КАК ВладелецТовара,
	|	ВложенныйЗапрос.Контрагент										КАК Контрагент,
	|	ВложенныйЗапрос.Договор											КАК Договор,
	|	ВложенныйЗапрос.Получатель										КАК Получатель,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры						КАК АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.СтатьяКалькуляции								КАК СтатьяКалькуляции,
	|	ВложенныйЗапрос.СписатьНаРасходы								КАК СписатьНаРасходы,
	|	ВложенныйЗапрос.СтатьяРасходов									КАК СтатьяРасходов,
	|	ВложенныйЗапрос.АналитикаРасходов								КАК АналитикаРасходов,
	|	ВложенныйЗапрос.АналитикаАктивовПассивов						КАК АналитикаАктивовПассивов,
	|	ВложенныйЗапрос.НастройкаСчетовУчета							КАК НастройкаСчетовУчета,
	|	ВложенныйЗапрос.КодСтроки										КАК КодСтроки,
	|	ВложенныйЗапрос.ИдентификаторСтроки								КАК ИдентификаторСтроки,
	|	ВложенныйЗапрос.ВладелецИзделия									КАК ВладелецИзделия,
	//++ Устарело_Переработка24
	|	ВложенныйЗапрос.ОформитьОтчетДавальцу							КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ВложенныйЗапрос.НомерГТД										КАК НомерГТД,
	|	СУММА(ВложенныйЗапрос.Количество)								КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)					КАК ТекущийВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)					КАК ВидЗапасов,
	|	СУММА(ВложенныйЗапрос.ДоляСтоимости)							КАК ДоляСтоимости,
	|	СУММА(ВложенныйЗапрос.Сумма)									КАК Сумма,
	|	ЛОЖЬ															КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.НомерСтроки + &ПорядокВыходныеИзделия					КАК НомерСтроки,
	|		ТаблицаТоваров.Период													КАК Период,
	|		ВЫБОР
	|			КОГДА &ВнутренняяПереработка
	|				ТОГДА &ОрганизацияДавалец
	|			ИНАЧЕ &Организация
	|		КОНЕЦ																	КАК Организация,
	|		ВЫБОР
	|			КОГДА &ВнутренняяПереработка
	|				ТОГДА &НалогообложениеОрганизацииДавальца
	|			ИНАЧЕ &НалогообложениеОрганизации
	|		КОНЕЦ																	КАК НалогообложениеОрганизации,
	|		ТаблицаТоваров.Номенклатура												КАК Номенклатура,
	|		ТаблицаТоваров.Характеристика											КАК Характеристика,
	|		ТаблицаТоваров.Назначение												КАК Назначение,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаТоваров.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) В (
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	//++ Устарело_Переработка24
	|				ИЛИ ТаблицаТоваров.ОформитьОтчетДавальцу
	//-- Устарело_Переработка24
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		КОНЕЦ																	КАК ТипЗапасов,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаТоваров.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) В (
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	//++ Устарело_Переработка24
	|				ИЛИ ТаблицаТоваров.ОформитьОтчетДавальцу
	//-- Устарело_Переработка24
	|				ТОГДА ТаблицаТоваров.Назначение.Партнер
	|			КОГДА &ВнутренняяПереработка
	|				ТОГДА &ОрганизацияДавалец
	|			ИНАЧЕ &Организация
	|		КОНЕЦ																	КАК ВладелецТовара,
	|		ЕСТЬNULL(ТаблицаТоваров.Назначение.Договор.Контрагент, НЕОПРЕДЕЛЕНО)	КАК Контрагент,
	|		ЕСТЬNULL(ТаблицаТоваров.Назначение.Договор, НЕОПРЕДЕЛЕНО)				КАК Договор,
	|		ТаблицаТоваров.Получатель												КАК Получатель,
	|		ТаблицаТоваров.Количество												КАК Количество,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры								КАК АналитикаУчетаНоменклатуры,
	//++ Устарело_Переработка24
	|		ТаблицаТоваров.ОформитьОтчетДавальцу									КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|		ТаблицаТоваров.НомерГТД													КАК НомерГТД,
	|		ТаблицаТоваров.ДатаПроизводства											КАК ДатаОперации,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)						КАК СтатьяКалькуляции,
	|		ТаблицаТоваров.СписатьНаРасходы											КАК СписатьНаРасходы,
	|		ТаблицаТоваров.СтатьяРасходов											КАК СтатьяРасходов,
	|		ТаблицаТоваров.АналитикаРасходов										КАК АналитикаРасходов,
	|		ТаблицаТоваров.АналитикаАктивовПассивов									КАК АналитикаАктивовПассивов,
	|		ТаблицаТоваров.НастройкаСчетовУчета										КАК НастройкаСчетовУчета,
	|		ТаблицаТоваров.КодСтроки												КАК КодСтроки,
	|		ТаблицаТоваров.ИдентификаторСтроки										КАК ИдентификаторСтроки,
	|		ТаблицаТоваров.ДоляСтоимости											КАК ДоляСтоимости,
	|		ТаблицаТоваров.Сумма													КАК Сумма,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)			КАК ХозяйственнаяОперация,
	|		ТаблицаТоваров.Подразделение											КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)							КАК ВладелецИзделия
	|	ИЗ
	|		ВыходныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		НЕ ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		И ТаблицаТоваров.Произведено
	|		И НЕ ТаблицаТоваров.Отменено
	|		И ТаблицаТоваров.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.НомерСтроки + &ПорядокПобочныеИзделия					КАК НомерСтроки,
	|		ТаблицаТоваров.Период													КАК Период,
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаТоваров.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ТаблицаТоваров.ВладелецИзделия
	|			КОГДА &ВнутренняяПереработка
	|				ТОГДА &ОрганизацияДавалец
	|			ИНАЧЕ &Организация
	|		КОНЕЦ																	КАК Организация,
	|		ВЫБОР
	|			КОГДА НЕ ТаблицаТоваров.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ТаблицаТоваров.ВладелецИзделия
	|			ИНАЧЕ &НалогообложениеОрганизации
	|		КОНЕЦ																	КАК НалогообложениеОрганизации,
	|		ТаблицаТоваров.Номенклатура												КАК Номенклатура,
	|		ТаблицаТоваров.Характеристика											КАК Характеристика,
	|		ТаблицаТоваров.Назначение												КАК Назначение,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаТоваров.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) В (
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	//++ Устарело_Переработка24
	|				ИЛИ ТаблицаТоваров.ОформитьОтчетДавальцу
	//-- Устарело_Переработка24
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		КОНЕЦ																	КАК ТипЗапасов,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаТоваров.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) В (
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	//++ Устарело_Переработка24
	|				ИЛИ ТаблицаТоваров.ОформитьОтчетДавальцу
	//-- Устарело_Переработка24
	|				ТОГДА ТаблицаТоваров.Назначение.Партнер
	|			КОГДА НЕ ТаблицаТоваров.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ТаблицаТоваров.ВладелецИзделия
	|			ИНАЧЕ &Организация
	|		КОНЕЦ																	КАК ВладелецТовара,
	|		ЕСТЬNULL(ТаблицаТоваров.Назначение.Договор.Контрагент, НЕОПРЕДЕЛЕНО)	КАК Контрагент,
	|		ЕСТЬNULL(ТаблицаТоваров.Назначение.Договор, НЕОПРЕДЕЛЕНО)				КАК Договор,
	|		ТаблицаТоваров.Получатель												КАК Склад,
	|		ТаблицаТоваров.Количество												КАК Количество,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры								КАК АналитикаУчетаНоменклатуры,
	//++ Устарело_Переработка24
	|		ТаблицаТоваров.ОформитьОтчетДавальцу									КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|		ТаблицаТоваров.НомерГТД													КАК НомерГТД,
	|		ТаблицаТоваров.ДатаПроизводства											КАК ДатаОперации,
	|		ТаблицаТоваров.СтатьяКалькуляции										КАК СтатьяКалькуляции,
	|		ТаблицаТоваров.СписатьНаРасходы											КАК СписатьНаРасходы,
	|		ТаблицаТоваров.СтатьяРасходов											КАК СтатьяРасходов,
	|		ТаблицаТоваров.АналитикаРасходов										КАК АналитикаРасходов,
	|		ТаблицаТоваров.АналитикаАктивовПассивов									КАК АналитикаАктивовПассивов,
	|		ТаблицаТоваров.НастройкаСчетовУчета										КАК НастройкаСчетовУчета,
	|		ТаблицаТоваров.КодСтроки												КАК КодСтроки,
	|		ТаблицаТоваров.ИдентификаторСтроки										КАК ИдентификаторСтроки,
	|		0																		КАК ДоляСтоимости,
	|		ТаблицаТоваров.Сумма													КАК Сумма,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость) КАК ХозяйственнаяОперация,
	|		ТаблицаТоваров.Подразделение											КАК Подразделение,
	|		ТаблицаТоваров.ВладелецИзделия											КАК ВладелецИзделия
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТоваров
	|	ГДЕ
	|		НЕ ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		И ТаблицаТоваров.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|		И ТаблицаТоваров.Произведено
	|		И НЕ ТаблицаТоваров.Отменено
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.НалогообложениеОрганизации,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.ТипЗапасов,
	|	ВложенныйЗапрос.ВладелецТовара,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.Получатель,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.ВладелецИзделия,
	//++ Устарело_Переработка24
	|	ВложенныйЗапрос.ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.ДатаОперации,
	|	ВложенныйЗапрос.СтатьяКалькуляции,
	|	ВложенныйЗапрос.СписатьНаРасходы,
	|	ВложенныйЗапрос.СтатьяРасходов,
	|	ВложенныйЗапрос.АналитикаРасходов,
	|	ВложенныйЗапрос.АналитикаАктивовПассивов,
	|	ВложенныйЗапрос.НастройкаСчетовУчета,
	|	ВложенныйЗапрос.КодСтроки,
	|	ВложенныйЗапрос.ИдентификаторСтроки,
	|	ВложенныйЗапрос.ХозяйственнаяОперация,
	|	ВложенныйЗапрос.Подразделение
	|";
	
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("Валюта",						Валюта);
	Запрос.УстановитьПараметр("ПорядокВыходныеИзделия",		ПорядокТЧ("ВыходныеИзделия"));
	Запрос.УстановитьПараметр("ПорядокПобочныеИзделия",		ПорядокТЧ("ПобочныеИзделия"));
	Запрос.УстановитьПараметр("НалогообложениеОрганизации",	УчетНДСУП.ПараметрыУчетаПоОрганизации(Организация, Дата).ОсновноеНалогообложениеНДСПродажи);
	Запрос.УстановитьПараметр("ПериодСКоторогоНужноПересчитыватьВидыЗапасов", ДополнительныеСвойства.ПериодСКоторогоНужноПересчитыватьВидыЗапасов);
	Запрос.УстановитьПараметр("ВнутренняяПереработка",		ВнутренняяПереработка);
	Запрос.УстановитьПараметр("ОрганизацияДавалец",			ОрганизацияДавалец);
	Запрос.УстановитьПараметр("НалогообложениеОрганизацииДавальца", УчетНДСУП.ПараметрыУчетаПоОрганизации(ОрганизацияДавалец, Дата).ОсновноеНалогообложениеНДСПродажи);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	Возврат Результат[0].Выгрузить();
	
КонецФункции

Процедура ВременныеТаблицыДляЗаполненияВидыЗапасовМатериалы(МенеджерВременныхТаблиц)
	
	// В алгоритм заполнения по остаткам нужно передать то количество товаров,
	// которое не покрывается количествами из других табличных частей внутри одного периода.
	// 
	// После заполенения по остаткам, количество будет дополнено тем, которое покрывается количествами из
	// других табличных частей. Поэтому формулы расчета количества по остаткам такие
	// 
	// Для списания из кладовой: Обеспечение - Экономия
	// Для списания из подразделения: Расход + Экономия - Обеспечение
	// При списании из подразделения все количество может браться из таблицы остатков или из обеспечения
	// за этот же период. Для расхода и экономии на расходы распределение между этими иточниками делается
	// в самом запросе. Для экономии в другую (относительно той, из которой обеспечивали) кладовую распределение
	// делается потом в цикле.
	// 
	// Так же нужно учесть, что документ делает следующие движения:
	// 	Расход из подразделения = вся экономия + всесь расход
	// 	Приход в подразделение = обеспечение, которое делается только из кладовых этого подразделения
	// 	Расход со склада = обеспечение только по кладовым этого подразделения
	// 	Приход на склад = экономия только по кладовым этого подразделения
	// 
	// Внутри алгоритма заполнения по остаткам к остаткам из регистров будут добавлены
	// 	Виды запасов, приходуемые Выходными и Побочными изделиями
	//  Виды запасов, подбранными по предыдущим периодам этого документа (т.е. в одном периоде подобрали по остаткам
	//  обеспечение, а в другом из этого заполнили виды запасов в расходе)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(РасходИзПодразделенияНаПустуюКорАналитику.НомерСтроки)			КАК НомерСтроки,
	|	&ХозОперацияРасход														КАК ХозяйственнаяОперация,
	|	РасходИзПодразделенияНаПустуюКорАналитику.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)		КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход) > СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход)
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход) - СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход)
	|	КОНЕЦ																	КАК КоличествоПоОстатку,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход) > СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход)
	|			ТОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход)
	|		ИНАЧЕ СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход)
	|	КОНЕЦ																	КАК КоличествоПоТекущемуПериоду,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТПриход) > СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТРасход)
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТРасход) - СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТПриход)
	|	КОНЕЦ																	КАК КоличествоПоРНПТПоОстатку,
	|	ВЫБОР
	|		КОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТПриход) > СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТРасход)
	|			ТОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТРасход)
	|		ИНАЧЕ СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПоРНПТПриход)
	|	КОНЕЦ																	КАК КоличествоПоРНПТПоТекущемуПериоду,
	|	РасходИзПодразделенияНаПустуюКорАналитику.Период						КАК Период,
	|	РасходИзПодразделенияНаПустуюКорАналитику.НомерГТД						КАК НомерГТД
	|ПОМЕСТИТЬ РасходМатериаловИРаботПоИсточникам
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходМатериаловИРабот.НомерСтроки + &ПорядокРасход	КАК НомерСтроки,
	|		РасходМатериаловИРабот.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		РасходМатериаловИРабот.Количество					КАК КоличествоРасход,
	|		0													КАК КоличествоПриход,
	|		РасходМатериаловИРабот.КоличествоПоРНПТ				КАК КоличествоПоРНПТРасход,
	|		0													КАК КоличествоПоРНПТПриход,
	|		РасходМатериаловИРабот.Период						КАК Период,
	|		РасходМатериаловИРабот.НомерГТД						КАК НомерГТД
	|	ИЗ
	|		РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|	
	|	ГДЕ
	|		РасходМатериаловИРабот.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|		И НЕ РасходМатериаловИРабот.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходИПриходВКладовые.НомерСтроки + &ПорядокОбеспечение,
	|		РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры,
	|		0,
	|		РасходИПриходВКладовые.Количество,
	|		0,
	|		РасходИПриходВКладовые.КоличествоПоРНПТ,
	|		РасходИПриходВКладовые.Период,
	|		РасходИПриходВКладовые.НомерГТД
	|	ИЗ
	|		РасходИПриходВКладовые КАК РасходИПриходВКладовые
	|	
	|	ГДЕ
	|		РасходИПриходВКладовые.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|		И РасходИПриходВКладовые.ХозяйственнаяОперация = &ХозОперацияОбеспечение) КАК РасходИзПодразделенияНаПустуюКорАналитику
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходИзПодразделенияНаПустуюКорАналитику.АналитикаУчетаНоменклатуры,
	|	РасходИзПодразделенияНаПустуюКорАналитику.Период,
	|	РасходИзПодразделенияНаПустуюКорАналитику.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	(ВЫБОР
	|		КОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход) > СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход)
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход) - СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход)
	|	КОНЕЦ > 0
	|	ИЛИ ВЫБОР
	|			КОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход) > СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход)
	|				ТОГДА СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоРасход)
	|			ИНАЧЕ СУММА(РасходИзПодразделенияНаПустуюКорАналитику.КоличествоПриход)
	|		КОНЕЦ > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИПриходВКладовые.НомерСтроки						КАК НомерСтроки,
	|	&ВнутренняяПереработка									КАК ВнутренняяПереработка,
	|	&ОрганизацияДавалец										КАК ОрганизацияДавалец,
	|	РасходИПриходВКладовые.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	РасходИПриходВКладовые.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	РасходИПриходВКладовые.Количество						КАК КоличествоПоОстатку,
	|	0														КАК КоличествоПоТекущемуПериоду,
	|	РасходИПриходВКладовые.КоличествоПоРНПТ					КАК КоличествоПоРНПТПоОстатку,
	|	0														КАК КоличествоПоРНПТПоТекущемуПериоду,
	|	РасходИПриходВКладовые.Период							КАК Период,
	|	РасходИПриходВКладовые.НомерГТД							КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваровПоПериодам
	|ИЗ
	|	РасходИПриходВКладовые КАК РасходИПриходВКладовые
	|
	|ГДЕ
	|	РасходИПриходВКладовые.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходМатериаловИРаботПоИсточникам.НомерСтроки,
	|	&ВнутренняяПереработка,
	|	&ОрганизацияДавалец,
	|	РасходМатериаловИРаботПоИсточникам.ХозяйственнаяОперация,
	|	РасходМатериаловИРаботПоИсточникам.АналитикаУчетаНоменклатуры,
	|	РасходМатериаловИРаботПоИсточникам.КорАналитикаУчетаНоменклатуры,
	|	РасходМатериаловИРаботПоИсточникам.КоличествоПоОстатку,
	|	РасходМатериаловИРаботПоИсточникам.КоличествоПоТекущемуПериоду,
	|	РасходМатериаловИРаботПоИсточникам.КоличествоПоРНПТПоОстатку,
	|	РасходМатериаловИРаботПоИсточникам.КоличествоПоРНПТПоТекущемуПериоду,
	|	РасходМатериаловИРаботПоИсточникам.Период,
	|	РасходМатериаловИРаботПоИсточникам.НомерГТД
	|ИЗ
	|	РасходМатериаловИРаботПоИсточникам КАК РасходМатериаловИРаботПоИсточникам
	|
	|ГДЕ
	|	(РасходМатериаловИРаботПоИсточникам.КоличествоПоОстатку > 0
	|			ИЛИ РасходМатериаловИРаботПоИсточникам.КоличествоПоТекущемуПериоду > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЭкономияМатериаловСписаниеПоИсточникам.НомерСтроки),
	|	&ВнутренняяПереработка,
	|	&ОрганизацияДавалец,
	|	&ХозЭкономияМатериаловСписание,
	|	ЭкономияМатериаловСписаниеПоИсточникам.АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход) > СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход)
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход) - СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход) > СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход)
	|			ТОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход)
	|		ИНАЧЕ СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТПриход) > СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТРасход)
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТРасход) - СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТПриход)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТПриход) > СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТРасход)
	|			ТОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТРасход)
	|		ИНАЧЕ СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПоРНПТПриход)
	|	КОНЕЦ,
	|	ЭкономияМатериаловСписаниеПоИсточникам.Период,
	|	ЭкономияМатериаловСписаниеПоИсточникам.НомерГТД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭкономияМатериалов.НомерСтроки + &ПорядокЭкономия	КАК НомерСтроки,
	|		ЭкономияМатериалов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|		ЭкономияМатериалов.Количество						КАК КоличествоРасход,
	|		0													КАК КоличествоПриход,
	|		ЭкономияМатериалов.КоличествоПоРНПТ					КАК КоличествоПоРНПТРасход,
	|		0													КАК КоличествоПоРНПТПриход,
	|		ЭкономияМатериалов.Период							КАК Период,
	|		ЭкономияМатериалов.НомерГТД							КАК НомерГТД
	|	ИЗ
	|		ЭкономияМатериалов КАК ЭкономияМатериалов
	|	
	|	ГДЕ
	|		ЭкономияМатериалов.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|		И ЭкономияМатериалов.СписатьНаРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходИПриходВКладовые.НомерСтроки + &ПорядокОбеспечение,
	|		РасходИПриходВКладовые.КорАналитикаУчетаНоменклатуры,
	|		0,
	|		РасходИПриходВКладовые.Количество,
	|		0,
	|		РасходИПриходВКладовые.КоличествоПоРНПТ,
	|		РасходИПриходВКладовые.Период,
	|		РасходИПриходВКладовые.НомерГТД
	|	ИЗ
	|		РасходИПриходВКладовые КАК РасходИПриходВКладовые
	|	
	|	ГДЕ
	|		РасходИПриходВКладовые.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|		И РасходИПриходВКладовые.ХозяйственнаяОперация = &ХозОперацияОбеспечение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходМатериаловИРаботПоИсточникам.НомерСтроки + &ПорядокОбеспечение,
	|		РасходМатериаловИРаботПоИсточникам.КорАналитикаУчетаНоменклатуры,
	|		0,
	|		-РасходМатериаловИРаботПоИсточникам.КоличествоПоТекущемуПериоду,
	|		0,
	|		-РасходМатериаловИРаботПоИсточникам.КоличествоПоРНПТПоТекущемуПериоду,
	|		РасходМатериаловИРаботПоИсточникам.Период,
	|		РасходМатериаловИРаботПоИсточникам.НомерГТД
	|	ИЗ
	|		РасходМатериаловИРаботПоИсточникам КАК РасходМатериаловИРаботПоИсточникам
	|	
	|	ГДЕ
	|		РасходМатериаловИРаботПоИсточникам.КоличествоПоТекущемуПериоду > 0) КАК ЭкономияМатериаловСписаниеПоИсточникам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭкономияМатериаловСписаниеПоИсточникам.АналитикаУчетаНоменклатуры,
	|	ЭкономияМатериаловСписаниеПоИсточникам.Период,
	|	ЭкономияМатериаловСписаниеПоИсточникам.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход) > СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход)
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход) - СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход)
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход) > СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход)
	|			ТОГДА СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоРасход)
	|		ИНАЧЕ СУММА(ЭкономияМатериаловСписаниеПоИсточникам.КоличествоПриход)
	|	КОНЕЦ > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки						КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.Период							КАК Период,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД							КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество						КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ					КАК КоличествоПоРНПТ
	|ПОМЕСТИТЬ ТаблицаВидыЗапасовПоПериодам
	|ИЗ
	|	ВТВидыЗапасовМатериалы КАК ТаблицаВидыЗапасов
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.Период >= &ПериодСКоторогоНужноПересчитыватьВидыЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НедораспределенныйОстатокТекущегоПериода.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	СУММА(НедораспределенныйОстатокТекущегоПериода.Количество)			КАК Количество,
	|	СУММА(НедораспределенныйОстатокТекущегоПериода.КоличествоПоРНПТ)	КАК КоличествоПоРНПТ,
	|	НедораспределенныйОстатокТекущегоПериода.Период						КАК Период,
	|	НедораспределенныйОстатокТекущегоПериода.НомерГТД					КАК НомерГТД
	|ПОМЕСТИТЬ НедораспределенныйОстатокТекущегоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваровПоПериодам.КорАналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваровПоПериодам.КоличествоПоОстатку			КАК Количество,
	|		ТаблицаТоваровПоПериодам.КоличествоПоРНПТПоОстатку		КАК КоличествоПоРНПТ,
	|		ТаблицаТоваровПоПериодам.Период							КАК Период,
	|		ТаблицаТоваровПоПериодам.НомерГТД						КАК НомерГТД
	|	ИЗ
	|		ТаблицаТоваровПоПериодам КАК ТаблицаТоваровПоПериодам
	|	
	|	ГДЕ
	|		ТаблицаТоваровПоПериодам.ХозяйственнаяОперация = &ХозОперацияОбеспечение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТоваровПоПериодам.АналитикаУчетаНоменклатуры,
	|		-ТаблицаТоваровПоПериодам.КоличествоПоТекущемуПериоду,
	|		-ТаблицаТоваровПоПериодам.КоличествоПоРНПТПоТекущемуПериоду,
	|		ТаблицаТоваровПоПериодам.Период,
	|		ТаблицаТоваровПоПериодам.НомерГТД
	|	ИЗ
	|		ТаблицаТоваровПоПериодам КАК ТаблицаТоваровПоПериодам
	|	
	|	ГДЕ
	|		ТаблицаТоваровПоПериодам.ХозяйственнаяОперация <> &ХозОперацияОбеспечение) КАК НедораспределенныйОстатокТекущегоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НедораспределенныйОстатокТекущегоПериода.АналитикаУчетаНоменклатуры,
	|	НедораспределенныйОстатокТекущегоПериода.Период,
	|	НедораспределенныйОстатокТекущегоПериода.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(НедораспределенныйОстатокТекущегоПериода.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратыВДругуюКладовуюКРаспределению.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВозвратыВДругуюКладовуюКРаспределению.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ВозвратыВДругуюКладовуюКРаспределению.НомерГТД						КАК НомерГТД,
	|	ВозвратыВДругуюКладовуюКРаспределению.КоличествоПоОстатку			КАК КоличествоПоОстатку,
	|	ВозвратыВДругуюКладовуюКРаспределению.КоличествоПоТекущемуПериоду	КАК КоличествоПоТекущемуПериоду,
	|	ВозвратыВДругуюКладовуюКРаспределению.КоличествоПоРНПТПоОстатку		КАК КоличествоПоРНПТПоОстатку,
	|	ВозвратыВДругуюКладовуюКРаспределению.КоличествоПоРНПТПоТекущемуПериоду КАК КоличествоПоРНПТПоТекущемуПериоду,
	|	ВозвратыВДругуюКладовуюКРаспределению.Период						КАК Период,
	|	ВозвратыВДругуюКладовуюКРаспределению.НомерСтроки					КАК НомерСтроки,
	|	ВозвратыВДругуюКладовуюКРаспределению.ХозяйственнаяОперация			КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВозвратыВДругуюКладовуюКРаспределению
	|ИЗ
	|	ТаблицаТоваровПоПериодам КАК ВозвратыВДругуюКладовуюКРаспределению
	|ГДЕ
	|	ВозвратыВДругуюКладовуюКРаспределению.ХозяйственнаяОперация = &ХозЭкономияМатериаловВозврат
	|	И (ВозвратыВДругуюКладовуюКРаспределению.АналитикаУчетаНоменклатуры, ВозвратыВДругуюКладовуюКРаспределению.Период, ВозвратыВДругуюКладовуюКРаспределению.НомерГТД) В
	|			(ВЫБРАТЬ
	|				НедораспределенныйОстатокТекущегоПериода.АналитикаУчетаНоменклатуры,
	|				НедораспределенныйОстатокТекущегоПериода.Период,
	|				НедораспределенныйОстатокТекущегоПериода.НомерГТД
	|			ИЗ
	|				НедораспределенныйОстатокТекущегоПериода)";
	
	Запрос.УстановитьПараметр("ПорядокОбеспечение",				ПорядокТЧ("ОбеспечениеМатериаламиИРаботами"));
	Запрос.УстановитьПараметр("ПорядокЭкономия",				ПорядокТЧ("ЭкономияМатериалов"));
	Запрос.УстановитьПараметр("ПорядокРасход",					ПорядокТЧ("РасходМатериаловИРабот"));	
	Запрос.УстановитьПараметр("ХозЭкономияМатериаловСписание",	ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловСписание"));
	Запрос.УстановитьПараметр("ХозЭкономияМатериаловВозврат",	ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловВозврат"));
	Запрос.УстановитьПараметр("ХозОперацияРасход",				ХозяйственнаяОперацияПоИмениТЧ("РасходМатериаловИРабот"));
	Запрос.УстановитьПараметр("ХозОперацияОбеспечение",			ХозяйственнаяОперацияПоИмениТЧ("ОбеспечениеМатериаламиИРаботами"));
	Запрос.УстановитьПараметр("ПериодСКоторогоНужноПересчитыватьВидыЗапасов",
								ДополнительныеСвойства.ПериодСКоторогоНужноПересчитыватьВидыЗапасов);
	Запрос.УстановитьПараметр("ВнутренняяПереработка", ВнутренняяПереработка);
	Запрос.УстановитьПараметр("ОрганизацияДавалец",    ОрганизацияДавалец);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ВозвратыВДругуюКладовуюКРаспределению = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	
	Если ВозвратыВДругуюКладовуюКРаспределению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляПоиска	= "АналитикаУчетаНоменклатуры, Период, НомерГТД";
	ОтборПоиска	= Новый Структура(ПоляПоиска);
	
	НедораспределенныйОстатокТекущегоПериода = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выгрузить();
	НедораспределенныйОстатокТекущегоПериода.Индексы.Добавить(ПоляПоиска);
	
	Для Каждого СтрокаВозврата из ВозвратыВДругуюКладовуюКРаспределению Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПоиска, СтрокаВозврата);
		
		СтрокаОстаткаКРаспределению = НедораспределенныйОстатокТекущегоПериода.НайтиСтроки(ОтборПоиска)[0];
		
		Если СтрокаОстаткаКРаспределению.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоИзОстатка = Мин(СтрокаВозврата.КоличествоПоОстатку, СтрокаОстаткаКРаспределению.Количество);
		КоличествоПоРНПТИзОстатка = Мин(СтрокаВозврата.КоличествоПоРНПТПоОстатку, СтрокаОстаткаКРаспределению.КоличествоПоРНПТ);
		
		СтрокаВозврата.КоличествоПоОстатку			= СтрокаВозврата.КоличествоПоОстатку - КоличествоИзОстатка;
		СтрокаВозврата.КоличествоПоТекущемуПериоду	= СтрокаВозврата.КоличествоПоТекущемуПериоду + КоличествоИзОстатка;
		
		СтрокаВозврата.КоличествоПоРНПТПоОстатку			= СтрокаВозврата.КоличествоПоРНПТПоОстатку - КоличествоПоРНПТИзОстатка;
		СтрокаВозврата.КоличествоПоРНПТПоТекущемуПериоду	= СтрокаВозврата.КоличествоПоРНПТПоТекущемуПериоду + КоличествоПоРНПТИзОстатка;
		
		СтрокаОстаткаКРаспределению.Количество			= СтрокаОстаткаКРаспределению.Количество - КоличествоИзОстатка;
		СтрокаОстаткаКРаспределению.КоличествоПоРНПТ	= СтрокаОстаткаКРаспределению.КоличествоПоРНПТ - КоличествоПоРНПТИзОстатка;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратыВДругуюКладовуюРаспределенные.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВозвратыВДругуюКладовуюРаспределенные.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоОстатку			КАК КоличествоПоОстатку,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоТекущемуПериоду	КАК КоличествоПоТекущемуПериоду,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоРНПТПоОстатку		КАК КоличествоПоРНПТПоОстатку,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоРНПТПоТекущемуПериоду	КАК КоличествоПоРНПТПоТекущемуПериоду,
	|	ВозвратыВДругуюКладовуюРаспределенные.Период						КАК Период,
	|	ВозвратыВДругуюКладовуюРаспределенные.НомерСтроки					КАК НомерСтроки,
	|	ВозвратыВДругуюКладовуюРаспределенные.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВозвратыВДругуюКладовуюРаспределенные.НомерГТД						КАК НомерГТД
	|ПОМЕСТИТЬ ВозвратыВДругуюКладовуюРаспределенные
	|ИЗ
	|	&ВозвратыВДругуюКладовуюРаспределенные КАК ВозвратыВДругуюКладовуюРаспределенные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПериодам.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаТоваровПоПериодам.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ТаблицаТоваровПоПериодам.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваровПоПериодам.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаТоваровПоПериодам.КоличествоПоОстатку			КАК КоличествоПоОстатку,
	|	ТаблицаТоваровПоПериодам.КоличествоПоТекущемуПериоду	КАК КоличествоПоТекущемуПериоду,
	|	ТаблицаТоваровПоПериодам.КоличествоПоРНПТПоОстатку		КАК КоличествоПоРНПТПоОстатку,
	|	ТаблицаТоваровПоПериодам.КоличествоПоРНПТПоТекущемуПериоду	КАК КоличествоПоРНПТПоТекущемуПериоду,
	|	ТаблицаТоваровПоПериодам.Период							КАК Период,
	|	ТаблицаТоваровПоПериодам.НомерГТД						КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваровПоПериодамБезВозвратовКРаспределению
	|ИЗ
	|	ТаблицаТоваровПоПериодам КАК ТаблицаТоваровПоПериодам
	|ГДЕ
	|	НЕ (ТаблицаТоваровПоПериодам.НомерСтроки, ТаблицаТоваровПоПериодам.ХозяйственнаяОперация, ТаблицаТоваровПоПериодам.АналитикаУчетаНоменклатуры, ТаблицаТоваровПоПериодам.КорАналитикаУчетаНоменклатуры, ТаблицаТоваровПоПериодам.Период, ТаблицаТоваровПоПериодам.НомерГТД) В
	|				(ВЫБРАТЬ
	|					ВозвратыВДругуюКладовуюКРаспределению.НомерСтроки,
	|					ВозвратыВДругуюКладовуюКРаспределению.ХозяйственнаяОперация,
	|					ВозвратыВДругуюКладовуюКРаспределению.АналитикаУчетаНоменклатуры,
	|					ВозвратыВДругуюКладовуюКРаспределению.КорАналитикаУчетаНоменклатуры,
	|					ВозвратыВДругуюКладовуюКРаспределению.Период,
	|					ВозвратыВДругуюКладовуюКРаспределению.НомерГТД
	|				ИЗ
	|					ВозвратыВДругуюКладовуюКРаспределению)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоваровПоПериодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.НомерСтроки КАК НомерСтроки,
	|	&ВнутренняяПереработка									КАК ВнутренняяПереработка,
	|	&ОрганизацияДавалец										КАК ОрганизацияДавалец,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.КоличествоПоОстатку КАК КоличествоПоОстатку,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.КоличествоПоТекущемуПериоду КАК КоличествоПоТекущемуПериоду,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.КоличествоПоРНПТПоОстатку КАК КоличествоПоРНПТПоОстатку,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.КоличествоПоРНПТПоТекущемуПериоду КАК КоличествоПоРНПТПоТекущемуПериоду,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.Период КАК Период,
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваровПоПериодам
	|ИЗ
	|	ТаблицаТоваровПоПериодамБезВозвратовКРаспределению КАК ТаблицаТоваровПоПериодамБезВозвратовКРаспределению
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратыВДругуюКладовуюРаспределенные.НомерСтроки,
	|	&ВнутренняяПереработка									КАК ВнутренняяПереработка,
	|	&ОрганизацияДавалец										КАК ОрганизацияДавалец,
	|	ВозвратыВДругуюКладовуюРаспределенные.ХозяйственнаяОперация,
	|	ВозвратыВДругуюКладовуюРаспределенные.АналитикаУчетаНоменклатуры,
	|	ВозвратыВДругуюКладовуюРаспределенные.КорАналитикаУчетаНоменклатуры,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоОстатку,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоТекущемуПериоду,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоРНПТПоОстатку,
	|	ВозвратыВДругуюКладовуюРаспределенные.КоличествоПоРНПТПоТекущемуПериоду,
	|	ВозвратыВДругуюКладовуюРаспределенные.Период,
	|	ВозвратыВДругуюКладовуюРаспределенные.НомерГТД
	|ИЗ
	|	ВозвратыВДругуюКладовуюРаспределенные КАК ВозвратыВДругуюКладовуюРаспределенные";
	
	Запрос.УстановитьПараметр("ВозвратыВДругуюКладовуюРаспределенные", ВозвратыВДругуюКладовуюКРаспределению);
	Запрос.УстановитьПараметр("ВнутренняяПереработка",                 ВнутренняяПереработка);
	Запрос.УстановитьПараметр("ОрганизацияДавалец",                    ОрганизацияДавалец);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПериодСКоторогоНужноПересчитыватьВидыЗапасов(МенеджерВременныхТаблиц)
	
	ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
	
	Если ПерезаполнитьВидыЗапасов 
		И ДополнительныеСвойства.Свойство("НачалоПериодаПомощникаИсправленияОстатков") Тогда
		ДополнительныеСвойства.Вставить(
			"ПериодСКоторогоНужноПересчитыватьВидыЗапасов",
			ДополнительныеСвойства.НачалоПериодаПомощникаИсправленияОстатков);
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьВидыЗапасов =
		ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(
			МенеджерВременныхТаблиц,
			Ссылка,
			"Организация, ВнутренняяПереработка, ОрганизацияДавалец");
	
	Если ПерезаполнитьВидыЗапасов Тогда
		ДополнительныеСвойства.Вставить("ПериодСКоторогоНужноПересчитыватьВидыЗапасов", Дата(1, 1, 1));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапросПериоды.Период)	КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапросВыходныеИзделия.Период		КАК Период
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВыходныеИзделия.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			-ВыходныеИзделия.Количество					КАК Количество,
	|			-ВыходныеИзделия.Сумма						КАК Сумма,
	|			ВыходныеИзделия.ДатаПроизводства			КАК ДатаОперации,
	|			ВыходныеИзделия.СписатьНаРасходы			КАК СписатьНаРасходы,
	|			ВыходныеИзделия.СтатьяРасходов				КАК СтатьяРасходов,
	|			ВыходныеИзделия.АналитикаРасходов			КАК АналитикаРасходов,
	|			ВыходныеИзделия.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	//++ Устарело_Переработка24
	|			ВыходныеИзделия.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|			ВыходныеИзделия.КодСтроки					КАК КодСтроки,
	|			ВыходныеИзделия.ДоляСтоимости				КАК ДоляСтоимости,
	|			ВыходныеИзделия.Период						КАК Период,
	|			ВыходныеИзделия.Подразделение				КАК Подразделение
	|		ИЗ
	|			ВыходныеИзделия КАК ВыходныеИзделия
	|		ГДЕ
	|			НЕ ВыходныеИзделия.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			И ВыходныеИзделия.Произведено
	|			И НЕ ВыходныеИзделия.Отменено
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыЗапасовИзделия.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			ВидыЗапасовИзделия.Количество					КАК Количество,
	|			ВидыЗапасовИзделия.Сумма						КАК Сумма,
	|			ВидыЗапасовИзделия.ДатаОперации					КАК ДатаОперации,
	|			ВидыЗапасовИзделия.СписатьНаРасходы				КАК СписатьНаРасходы,
	|			ВидыЗапасовИзделия.СтатьяРасходов				КАК СтатьяРасходов,
	|			ВидыЗапасовИзделия.АналитикаРасходов			КАК АналитикаРасходов,
	|			ВидыЗапасовИзделия.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	//++ Устарело_Переработка24
	|			ВидыЗапасовИзделия.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|			ВидыЗапасовИзделия.КодСтроки					КАК КодСтроки,
	|			ВидыЗапасовИзделия.ДоляСтоимости				КАК ДоляСтоимости,
	|			ВидыЗапасовИзделия.Период						КАК Период,
	|			ВидыЗапасовИзделия.Подразделение				КАК Подразделение
	|		ИЗ
	|			ВТВидыЗапасовИзделия КАК ВидыЗапасовИзделия
	|		ГДЕ
	|			ВидыЗапасовИзделия.ХозяйственнаяОперация = &ХозОперацияВыходныеИзделия
	|	) КАК ВложенныйЗапросВыходныеИзделия
	|	
	|	СГРУППИРОВАТЬ ПО
	//++ Устарело_Переработка24
	|		ВложенныйЗапросВыходныеИзделия.ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|		ВложенныйЗапросВыходныеИзделия.АналитикаРасходов,
	|		ВложенныйЗапросВыходныеИзделия.АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросВыходныеИзделия.СтатьяРасходов,
	|		ВложенныйЗапросВыходныеИзделия.СписатьНаРасходы,
	|		ВложенныйЗапросВыходныеИзделия.ДатаОперации,
	|		ВложенныйЗапросВыходныеИзделия.ИдентификаторСтроки,
	|		ВложенныйЗапросВыходныеИзделия.КодСтроки,
	|		ВложенныйЗапросВыходныеИзделия.ДоляСтоимости,
	|		ВложенныйЗапросВыходныеИзделия.Период,
	|		ВложенныйЗапросВыходныеИзделия.Подразделение
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ВложенныйЗапросВыходныеИзделия.Количество) <> 0
	|			ИЛИ СУММА(ВложенныйЗапросВыходныеИзделия.Сумма) <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапросПобочныеИзделия.Период КАК Период
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПобочныеИзделия.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			-ПобочныеИзделия.Количество					КАК Количество,
	|			ПобочныеИзделия.ДатаПроизводства			КАК ДатаОперации,
	|			ПобочныеИзделия.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|			ПобочныеИзделия.СписатьНаРасходы			КАК СписатьНаРасходы,
	|			ПобочныеИзделия.СтатьяРасходов				КАК СтатьяРасходов,
	|			ПобочныеИзделия.АналитикаРасходов			КАК АналитикаРасходов,
	|			ПобочныеИзделия.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	//++ Устарело_Переработка24
	|			ПобочныеИзделия.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|			ПобочныеИзделия.КодСтроки					КАК КодСтроки,
	|			-ПобочныеИзделия.Сумма						КАК Сумма,
	|			ПобочныеИзделия.Период						КАК Период,
	|			ПобочныеИзделия.Подразделение				КАК Подразделение,
	|			ПобочныеИзделия.ВладелецИзделия				КАК ВладелецИзделия
	|		ИЗ
	|			ПобочныеИзделия КАК ПобочныеИзделия
	|		ГДЕ
	|			НЕ ПобочныеИзделия.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			И ПобочныеИзделия.Произведено
	|			И НЕ ПобочныеИзделия.Отменено
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыЗапасовИзделия.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			ВидыЗапасовИзделия.Количество					КАК Количество,
	|			ВидыЗапасовИзделия.ДатаОперации					КАК ДатаОперации,
	|			ВидыЗапасовИзделия.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|			ВидыЗапасовИзделия.СписатьНаРасходы				КАК СписатьНаРасходы,
	|			ВидыЗапасовИзделия.СтатьяРасходов				КАК СтатьяРасходов,
	|			ВидыЗапасовИзделия.АналитикаРасходов			КАК АналитикаРасходов,
	|			ВидыЗапасовИзделия.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	//++ Устарело_Переработка24
	|			ВидыЗапасовИзделия.ОформитьОтчетДавальцу		КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|			ВидыЗапасовИзделия.КодСтроки					КАК КодСтроки,
	|			ВидыЗапасовИзделия.Сумма						КАК Сумма,
	|			ВидыЗапасовИзделия.Период						КАК Период,
	|			ВидыЗапасовИзделия.Подразделение				КАК Подразделение,
	|			ВидыЗапасовИзделия.ВладелецИзделия				КАК ВладелецИзделия
	|		ИЗ
	|			ВТВидыЗапасовИзделия КАК ВидыЗапасовИзделия
	|		ГДЕ
	|			ВидыЗапасовИзделия.ХозяйственнаяОперация = &ХозОперацияПобочныеИзделия
	|	) КАК ВложенныйЗапросПобочныеИзделия
	|	
	|	СГРУППИРОВАТЬ ПО
	//++ Устарело_Переработка24
	|		ВложенныйЗапросПобочныеИзделия.ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|		ВложенныйЗапросПобочныеИзделия.АналитикаРасходов,
	|		ВложенныйЗапросПобочныеИзделия.АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросПобочныеИзделия.СтатьяРасходов,
	|		ВложенныйЗапросПобочныеИзделия.СписатьНаРасходы,
	|		ВложенныйЗапросПобочныеИзделия.ДатаОперации,
	|		ВложенныйЗапросПобочныеИзделия.ИдентификаторСтроки,
	|		ВложенныйЗапросПобочныеИзделия.КодСтроки,
	|		ВложенныйЗапросПобочныеИзделия.Период,
	|		ВложенныйЗапросПобочныеИзделия.Подразделение,
	|		ВложенныйЗапросПобочныеИзделия.ВладелецИзделия
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ВложенныйЗапросПобочныеИзделия.Количество) <> 0
	|			ИЛИ СУММА(ВложенныйЗапросПобочныеИзделия.Сумма) <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапросРасходИзКладовой.Период КАК Период
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РасходПриходВКладовую.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			РасходПриходВКладовую.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			РасходПриходВКладовую.ДатаОперации					КАК ДатаОперации,
	|			РасходПриходВКладовую.Период						КАК Период,
	|			РасходПриходВКладовую.Подразделение					КАК Подразделение,
	|			-РасходПриходВКладовую.Количество					КАК Количество
	|		ИЗ
	|			РасходИПриходВКладовые КАК РасходПриходВКладовую
	|		ГДЕ
	|			РасходПриходВКладовую.ХозяйственнаяОперация = &ХозОперацияОбеспечение
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыЗапасовМатериалы.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.ДатаОперации					КАК ДатаОперации,
	|			ВидыЗапасовМатериалы.Период							КАК Период,
	|			ВидыЗапасовМатериалы.Подразделение					КАК Подразделение,
	|			ВидыЗапасовМатериалы.Количество						КАК Количество
	|		ИЗ
	|			ВТВидыЗапасовМатериалы КАК ВидыЗапасовМатериалы
	|		ГДЕ
	|			ВидыЗапасовМатериалы.ХозяйственнаяОперация = &ХозОперацияОбеспечение
	|	) КАК ВложенныйЗапросРасходИзКладовой
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапросРасходИзКладовой.Период,
	|		ВложенныйЗапросРасходИзКладовой.АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросРасходИзКладовой.КорАналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросРасходИзКладовой.ДатаОперации,
	|		ВложенныйЗапросРасходИзКладовой.Подразделение
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапросРасходИзКладовой.Количество) <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапросПриходВКладовую.Период КАК Период
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РасходПриходВКладовую.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|			РасходПриходВКладовую.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			РасходПриходВКладовую.ДатаОперации					КАК ДатаОперации,
	|			РасходПриходВКладовую.Период						КАК Период,
	|			РасходПриходВКладовую.Подразделение					КАК Подразделение,
	|			-РасходПриходВКладовую.Количество					КАК Количество
	|		ИЗ
	|			РасходИПриходВКладовые КАК РасходПриходВКладовую
	|		ГДЕ
	|			РасходПриходВКладовую.ХозяйственнаяОперация = &ХозОперацияЭкономия
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыЗапасовМатериалы.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.ДатаОперации					КАК ДатаОперации,
	|			ВидыЗапасовМатериалы.Период							КАК Период,
	|			ВидыЗапасовМатериалы.Подразделение					КАК Подразделение,
	|			ВидыЗапасовМатериалы.Количество						КАК Количество
	|		ИЗ
	|			ВТВидыЗапасовМатериалы КАК ВидыЗапасовМатериалы
	|		ГДЕ
	|			ВидыЗапасовМатериалы.ХозяйственнаяОперация = &ХозОперацияЭкономия
	|	) КАК ВложенныйЗапросПриходВКладовую
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапросПриходВКладовую.Период,
	|		ВложенныйЗапросПриходВКладовую.АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросПриходВКладовую.КорАналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросПриходВКладовую.ДатаОперации,
	|		ВложенныйЗапросПриходВКладовую.Подразделение
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапросПриходВКладовую.Количество) <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапросЭкономияМатериалов.Период КАК Период
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЭкономияМатериалов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|			ЭкономияМатериалов.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			ЭкономияМатериалов.ДатаОперации						КАК ДатаОперации,
	|			ЭкономияМатериалов.СтатьяРасходов					КАК СтатьяРасходов,
	|			ЭкономияМатериалов.АналитикаРасходов				КАК АналитикаРасходов,
	|			ЭкономияМатериалов.АналитикаАктивовПассивов			КАК АналитикаАктивовПассивов,
	|			ЭкономияМатериалов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|			ЭкономияМатериалов.Период							КАК Период,
	|			-ЭкономияМатериалов.Количество						КАК Количество,
	|			ЭкономияМатериалов.Получатель						КАК Получатель,
	|			ЭкономияМатериалов.СписатьНаРасходы					КАК СписатьНаРасходы,
	|			ЭкономияМатериалов.Подразделение					КАК Подразделение
	|		ИЗ
	|			ЭкономияМатериалов КАК ЭкономияМатериалов
	|		ГДЕ
	|			ЭкономияМатериалов.СписатьНаРасходы
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыЗапасовМатериалы.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.ДатаОперации					КАК ДатаОперации,
	|			ВидыЗапасовМатериалы.СтатьяРасходов					КАК СтатьяРасходов,
	|			ВидыЗапасовМатериалы.АналитикаРасходов				КАК АналитикаРасходов,
	|			ВидыЗапасовМатериалы.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|			ВидыЗапасовМатериалы.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	|			ВидыЗапасовМатериалы.Период							КАК Период,
	|			ВидыЗапасовМатериалы.Количество						КАК Количество,
	|			ВидыЗапасовМатериалы.Получатель						КАК Получатель,
	|			ВидыЗапасовМатериалы.СписатьНаРасходы				КАК СписатьНаРасходы,
	|			ВидыЗапасовМатериалы.Подразделение					КАК Подразделение
	|		ИЗ
	|			ВТВидыЗапасовМатериалы КАК ВидыЗапасовМатериалы
	|		ГДЕ
	|			ВидыЗапасовМатериалы.ХозяйственнаяОперация = &ХозОперацияЭкономияСписание
	|	) КАК ВложенныйЗапросЭкономияМатериалов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапросЭкономияМатериалов.АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросЭкономияМатериалов.КорАналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросЭкономияМатериалов.ДатаОперации,
	|		ВложенныйЗапросЭкономияМатериалов.СтатьяРасходов,
	|		ВложенныйЗапросЭкономияМатериалов.АналитикаРасходов,
	|		ВложенныйЗапросЭкономияМатериалов.АналитикаАктивовПассивов,
	|		ВложенныйЗапросЭкономияМатериалов.ИдентификаторСтроки,
	|		ВложенныйЗапросЭкономияМатериалов.Период,
	|		ВложенныйЗапросЭкономияМатериалов.Получатель,
	|		ВложенныйЗапросЭкономияМатериалов.СписатьНаРасходы,
	|		ВложенныйЗапросЭкономияМатериалов.Подразделение
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапросЭкономияМатериалов.Количество) <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапросРасходМатериаловИРабот.Период КАК Период
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РасходМатериаловИРабот.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|			РасходМатериаловИРабот.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			-РасходМатериаловИРабот.Количество						КАК Количество,
	|			РасходМатериаловИРабот.ДатаРасхода						КАК ДатаОперации,
	|			РасходМатериаловИРабот.Период							КАК Период,
	|			РасходМатериаловИРабот.Подразделение					КАК Подразделение
	|		ИЗ
	|			РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|		ГДЕ
	|			НЕ РасходМатериаловИРабот.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыЗапасовМатериалы.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|			ВидыЗапасовМатериалы.Количество						КАК Количество,
	|			ВидыЗапасовМатериалы.ДатаОперации					КАК ДатаОперации,
	|			ВидыЗапасовМатериалы.Период							КАК Период,
	|			ВидыЗапасовМатериалы.Подразделение					КАК Подразделение
	|		ИЗ
	|			ВТВидыЗапасовМатериалы КАК ВидыЗапасовМатериалы
	|		ГДЕ
	|			ВидыЗапасовМатериалы.ХозяйственнаяОперация = &ХозОперацияРасход
	|	) КАК ВложенныйЗапросРасходМатериаловИРабот
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапросРасходМатериаловИРабот.АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросРасходМатериаловИРабот.КорАналитикаУчетаНоменклатуры,
	|		ВложенныйЗапросРасходМатериаловИРабот.ДатаОперации,
	|		ВложенныйЗапросРасходМатериаловИРабот.Период,
	|		ВложенныйЗапросРасходМатериаловИРабот.Подразделение
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапросРасходМатериаловИРабот.Количество) <> 0
	|) КАК ВложенныйЗапросПериоды
	|";
	
	Запрос.УстановитьПараметр("ХозОперацияОбеспечение", ХозяйственнаяОперацияПоИмениТЧ("ОбеспечениеМатериаламиИРаботами"));
	Запрос.УстановитьПараметр("ХозОперацияЭкономия", ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловВозврат"));
	Запрос.УстановитьПараметр("ХозОперацияЭкономияСписание", ХозяйственнаяОперацияПоИмениТЧ("ЭкономияМатериаловСписание"));
	Запрос.УстановитьПараметр("ХозОперацияРасход", ХозяйственнаяОперацияПоИмениТЧ("РасходМатериаловИРабот"));
	Запрос.УстановитьПараметр("ХозОперацияВыходныеИзделия", ХозяйственнаяОперацияПоИмениТЧ("ВыходныеИзделия"));
	Запрос.УстановитьПараметр("ХозОперацияПобочныеИзделия", ХозяйственнаяОперацияПоИмениТЧ("ПобочныеИзделия"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И ЗначениеЗаполнено(Выборка.Период) Тогда
		Период = Выборка.Период;
	Иначе
		Период = ЗапасыСервер.ДатаАктуальныхОстатков();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПериодСКоторогоНужноПересчитыватьВидыЗапасов", Период);
	
КонецПроцедуры

Функция ПорядокТЧ(ИмяТЧ)
	
	ТаблицыДокумента = ТаблицыДокумента();
	
	КоличествоСтрокВоВсехТЧ =
		ТаблицыДокумента.ВыходныеИзделия.Количество()
		+ ТаблицыДокумента.ПобочныеИзделия.Количество()
		+ ТаблицыДокумента.ОбеспечениеМатериаламиИРаботами.Количество()
		+ ТаблицыДокумента.ЭкономияМатериалов.Количество()
		+ ТаблицыДокумента.РасходМатериаловИРабот.Количество();
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Возврат 0;
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		Возврат КоличествоСтрокВоВсехТЧ;
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		Возврат КоличествоСтрокВоВсехТЧ * 2;
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
		Возврат КоличествоСтрокВоВсехТЧ * 3;
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		Возврат КоличествоСтрокВоВсехТЧ * 4;
	Иначе
		ТекстИсключения = НСтр("ru = 'Табличной части %ИмяТЧ% не поставлен порядок';
								|en = 'The order is not set for the %ИмяТЧ% table'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяТЧ%", ИмяТЧ);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ХозяйственнаяОперацияПоИмениТЧ(ИмяТЧ)
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		Возврат Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
	ИначеЕсли ИмяТЧ = "ЭкономияМатериаловВозврат" Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
	ИначеЕсли ИмяТЧ = "ЭкономияМатериаловСписание" Тогда
		Возврат Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ИначеЕсли  ИмяТЧ = "РасходМатериаловИРабот" Тогда
		Возврат Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВыпускПродукции;
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
	Иначе
		ТекстИсключения = НСтр("ru = 'Табличная часть %ИмяТЧ% не сопоставлена с хозяйственной операцией';
								|en = '%ИмяТЧ% table is not mapped with the business transaction'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяТЧ%", ИмяТЧ);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Заполняет аналитики учета номенклатуры в табличных частях документа, хранящих информацию о товарах.
// Если параметр не передан, тогда будет выполнено заполнение данных в табличных частях документа.
//
// Параметры:
//	ТаблицыДокумента - см. Документы.ЭтапПроизводства2_2.КоллекцияТабличныхЧастейТоваров.
//
Процедура ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров(ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = Документы.ЭтапПроизводства2_2.КоллекцияТабличныхЧастейТоваров();
		
		ЗаполнитьЗначенияСвойств(ТаблицыДокумента, ЭтотОбъект);
	КонецЕсли;
	
#Область ЗаполнениеКлючейАналитик
	
	// Получим все используемые склады и заполним месяц движений (реквизит "Период")
	МассивСкладов = Новый Массив;
	
	Для Каждого Строка Из ТаблицыДокумента.ВыходныеИзделия Цикл
		Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") Тогда
			МассивСкладов.Добавить(Строка.Получатель);
		КонецЕсли;
		
		Строка.Период = КонецМесяца(Строка.ДатаПроизводства);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицыДокумента.ПобочныеИзделия Цикл
		Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") Тогда
			МассивСкладов.Добавить(Строка.Получатель);
		КонецЕсли;
		
		Строка.Период = КонецМесяца(Строка.ДатаПроизводства);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицыДокумента.ОбеспечениеМатериаламиИРаботами Цикл
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПереданРанее Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Период = КонецМесяца(Строка.ДатаОтгрузки);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицыДокумента.РасходМатериаловИРабот Цикл
		Строка.Период = КонецМесяца(Строка.ДатаРасхода);
	КонецЦикла;

	Для Каждого Строка Из ТаблицыДокумента.ЭкономияМатериалов Цикл
		Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") Тогда
			МассивСкладов.Добавить(Строка.Получатель);
		КонецЕсли;
		
		Строка.Период = КонецМесяца(Строка.ДатаОперации);	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НазначениеНаправленияДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаправлениеДеятельности, "Назначение");
	
	РеквизитыСкладов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСкладов, "ЦеховаяКладовая, Подразделение");
	
	// Если изделия остаются для последующей обработки, то получатель не заполняется
	Если ОставитьИзделияУПереработчика Тогда
		РеквизитыПустогоСклада = Новый Структура;
		РеквизитыПустогоСклада.Вставить("ЦеховаяКладовая", Ложь);
		РеквизитыПустогоСклада.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		
		РеквизитыСкладов.Вставить(Справочники.Склады.ПустаяСсылка(), РеквизитыПустогоСклада);
	КонецЕсли;
	
	СтруктураАналитки = Новый Структура;
	СтруктураАналитки.Вставить("Номенклатура");
	СтруктураАналитки.Вставить("Характеристика");
	СтруктураАналитки.Вставить("Серия");
	СтруктураАналитки.Вставить("Склад");
	СтруктураАналитки.Вставить("Назначение");
	СтруктураАналитки.Вставить("СтатьяКалькуляции");
	
	// Выходные изделия
	Для Каждого Строка Из ТаблицыДокумента.ВыходныеИзделия Цикл
		
		Если Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураАналитки, Строка);
		
		Если Строка.СписатьНаРасходы
			Или ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады")
				И Не РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая
			Или ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады")
				И РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая
				И Строка.Подразделение <> РеквизитыСкладов[Строка.Получатель].Подразделение Тогда
			
			Если Строка.СтатусУказанияСерийОтправитель <> 14 Тогда
				СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			СтруктураАналитки.Склад = Строка.Подразделение;
			
			Если Строка.СписатьНаРасходы Тогда
				СтруктураАналитки.Назначение = НазначениеНаправленияДеятельности;
			КонецЕсли;
			
			Если ЯвляетсяНазначениемПродукции Тогда
				СтруктураАналитки.Назначение = Назначение;
			КонецЕсли;
			
		Иначе
			Если Строка.СтатусУказанияСерийПолучатель <> 14 Тогда
				СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			СтруктураАналитки.Склад = Строка.Получатель;
		КонецЕсли;
		
		Строка.АналитикаУчетаНоменклатуры = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(СтруктураАналитки);
		
		Если Строка.СписатьНаРасходы Тогда
			Строка.Назначение = Неопределено;
			//++ Устарело_Переработка24
			Строка.ОформитьОтчетДавальцу = Ложь;
			//-- Устарело_Переработка24
		КонецЕсли;
		
	КонецЦикла;
	
	// Побочные изделия
	Для Каждого Строка Из ТаблицыДокумента.ПобочныеИзделия Цикл
		
		Если Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураАналитки, Строка);
		
		Если Строка.СписатьНаРасходы
			Или ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады")
				И Не РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая
			Или ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады")
				И РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая
				И Строка.Подразделение <> РеквизитыСкладов[Строка.Получатель].Подразделение Тогда
			
			Если Строка.СтатусУказанияСерийОтправитель <> 14 Тогда
				СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			СтруктураАналитки.Склад = Строка.Подразделение;
			
			Если Строка.СписатьНаРасходы Тогда
				СтруктураАналитки.Назначение = НазначениеНаправленияДеятельности;
			КонецЕсли;
			
			Если ЯвляетсяНазначениемПродукции Тогда
				СтруктураАналитки.Назначение = Назначение;
			КонецЕсли;
			
		Иначе
			
			Если Строка.СтатусУказанияСерийПолучатель <> 14 Тогда
				СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			СтруктураАналитки.Склад = Строка.Получатель;
			
		КонецЕсли;
		
		СтруктураАналитки.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
		Строка.АналитикаУчетаНоменклатуры = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(СтруктураАналитки);
		
		Если Строка.СписатьНаРасходы Тогда
			Строка.Назначение = Неопределено;
			//++ Устарело_Переработка24
			Строка.ОформитьОтчетДавальцу = Ложь;
			//-- Устарело_Переработка24
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// ОбеспечениеМатериаламиИРаботами
	// АналитикаУчетаНоменклатуры
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
					Перечисления.ХозяйственныеОперации.ПередачаВПроизводство,
					Неопределено,
					Неопределено,
					Неопределено);
	
	// Учет по складам только при необходимости передачи
	ТекстПоляТовар =
		"ВЫБОР
		|		КОГДА Коллекция.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее)
		|			ТОГДА Коллекция.Подразделение
		|		ИНАЧЕ Коллекция.Склад
		|	КОНЕЦ";
	
	// Учет по назначениям только при обособленном учете
	ТекстПоляНазначение =
		"ВЫБОР 
		|		КОГДА Коллекция.Обособленно
		|			ТОГДА Коллекция.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
		|	КОНЕЦ";
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля",ТекстПоляНазначение));
	ИменаПолей.Вставить("Произвольный", "Склад");
	ИменаПолей.Вставить("Товар", Новый Структура("ТекстПоля",ТекстПоляТовар));
	ИменаПолей.Вставить("Работа", "Подразделение");
	ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицыДокумента.ОбеспечениеМатериаламиИРаботами,
																	МестаУчета,
																	ИменаПолей);
	
	// ОбеспечениеМатериаламиИРаботами
	// КорАналитикаУчетаНоменклатуры
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
					Перечисления.ХозяйственныеОперации.ПередачаВПроизводство,
					Неопределено,
					Неопределено,
					Неопределено);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
	ИменаПолей.Вставить("Произвольный", "Подразделение");
	ИменаПолей.Вставить("Работа", "Подразделение");
	ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийПолучатель");
	ИменаПолей.Вставить("АналитикаУчетаНоменклатуры", "КорАналитикаУчетаНоменклатуры");
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицыДокумента.ОбеспечениеМатериаламиИРаботами,
																	МестаУчета,
																	ИменаПолей);
	
	// РасходМатериаловИРабот
	// АналитикаУчетаНоменклатуры
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
					Перечисления.ХозяйственныеОперации.ВыпускПродукции,
					Неопределено,
					Неопределено,
					Неопределено);
		
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
	ИменаПолей.Вставить("Произвольный", "Подразделение");
	ИменаПолей.Вставить("Работа", "Подразделение");
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицыДокумента.РасходМатериаловИРабот,
																	МестаУчета,
																	ИменаПолей);
	
	// РасходМатериаловИРабот
	// КорАналитикаУчетаНоменклатуры
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
					Перечисления.ХозяйственныеОперации.ВыпускПродукции,
					Неопределено,
					Неопределено,
					Неопределено);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
	ИменаПолей.Вставить("Произвольный", "Подразделение");
	ИменаПолей.Вставить("Работа", "Подразделение");
	ИменаПолей.Вставить("СтатьяКалькуляции", "СтатьяКалькуляции");
	ИменаПолей.Вставить("АналитикаУчетаНоменклатуры", "КорАналитикаУчетаНоменклатуры");
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицыДокумента.РасходМатериаловИРабот,
																	МестаУчета,
																	ИменаПолей);
	
	//ЭкономияМатериалов
	//АналитикаУчетаНоменклатуры
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
					Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства,
					Неопределено,
					Неопределено,
					Неопределено);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	// Назначение возвращаемых материалов соответствует назначению, под которые материалы переданы под этап,
	//	то есть назначением является этап.
	ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
	ИменаПолей.Вставить("Произвольный", "Подразделение");
	ИменаПолей.Вставить("Работа", "Подразделение");
	ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицыДокумента.ЭкономияМатериалов,
																	МестаУчета,
																	ИменаПолей);
	
	//ЭкономияМатериалов
	// КорАналитикаУчетаНоменклатуры
	СтруктураАналитки = Новый Структура();
	СтруктураАналитки.Вставить("Номенклатура");
	СтруктураАналитки.Вставить("Характеристика");
	СтруктураАналитки.Вставить("Серия");
	СтруктураАналитки.Вставить("Склад");
	СтруктураАналитки.Вставить("Назначение");
	СтруктураАналитки.Вставить("СтатьяКалькуляции");
	
	Для Каждого Строка Из ТаблицыДокумента.ЭкономияМатериалов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураАналитки, Строка);
		
		Если Строка.СписатьНаРасходы
			Или ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады")
				И Не РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая
			Или ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады")
				И РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая
				И Не Строка.Подразделение = РеквизитыСкладов[Строка.Получатель].Подразделение Тогда
			
			Строка.КорАналитикаУчетаНоменклатуры = Справочники.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка();
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.СтатусУказанияСерийПолучатель <> 14 Тогда
			СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураАналитки.Склад = Строка.Получатель;
		
		Строка.КорАналитикаУчетаНоменклатуры = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(СтруктураАналитки);
		
	КонецЦикла;
	
#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиОбъекта

// При записи документа выполняется обновление нормативного графика производства,
// в случае если изменилась длительность этапа, либо его связи с другими документами
// (подробнее в ЗарегистрироватьОбновлениеПараметровНормативногоГрафика).
// Однако такое поведение может быть нежелательно при групповом изменении этапов.
// Для отключения пересчета нормативного графика следует использовать данную процедуру.
// В этом случае пересчет нормативного графика выполнен не будет, и его требуется
// инициировать самостоятельно.
//
Процедура ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючНеЗаполнятьНормативныйГрафик());
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не будет регистрироваться
// обработчик обновления состояния заказа на производство.
//
Процедура ОтключитьОбновлениеСостоянияЗаказа() Экспорт
	
	ДополнительныеСвойства.Вставить(КлючОтключитьОбновлениеСостоянияЗаказа());
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не контролируется изменение параметров размещения
// этапа в графике.
//
Процедура ОтключитьКонтрольПараметровРазмещенияВГрафике() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючОтключитьКонтрольПараметровРазмещенияВГрафике());
	
КонецПроцедуры

// Взводит служебный флаг сигнализирующий о том, что данный документ создается
// механизмами группового формирования этапов производства.
//
Процедура УстановитьРежимПакетногоФормирования() Экспорт
	
	ДополнительныеСвойства.Вставить(КлючПакетныйРежимФормирования());
	ДополнительныеСвойства.Вставить("ПроверкаДокументов_Отключить", Истина);
	
КонецПроцедуры

// Взводит служебный флаг сигнализирующий о том, что данный документ обрабатывается
// механизмами групповой передачи этапов к выполнению.
//
Процедура УстановитьРежимПакетнойПередачиКВыполнению() Экспорт
	
	ДополнительныеСвойства.Вставить(КлючОтключитьОбновлениеСостоянияЗаказа());
	
	ДополнительныеСвойства.Вставить(КлючПакетныйРежимПередачиКВыполнению());
	
КонецПроцедуры

Функция ВыполняетсяПакетноеФормирование() Экспорт
	
	Возврат УправлениеПроизводством.ВыполняетсяПакетноеФормированиеЭтапов(ЭтотОбъект);
	
КонецФункции

Функция ВыполняетсяПакетнаяПередачаКВыполнению()
	
	Возврат ДополнительныеСвойства.Свойство(КлючПакетныйРежимПередачиКВыполнению());
	
КонецФункции

Функция ОтключенКонтрольПараметровРазмещенияВГрафике()
	
	Возврат ДополнительныеСвойства.Свойство(КлючОтключитьКонтрольПараметровРазмещенияВГрафике());
	
КонецФункции

Функция ОтключеноОбновлениеСостоянияЗаказа()
	
	Возврат ДополнительныеСвойства.Свойство(КлючОтключитьОбновлениеСостоянияЗаказа());
	
КонецФункции

// Взводит служебный флаг, при наличии которого не будет выполняться проверка реквизитов цепочки этапов.
//
Процедура ОтключитьПроверкуРеквизитовЦепочкиЭтапов() Экспорт
	
	ДополнительныеСвойства.Вставить("ОтключитьПроверкуРеквизитовЦепочкиЭтапов");
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не будет выполняться запуск отложенного расчета длительности до выпуска по этапам производства.
//
Процедура ОтключитьРасчетДлительностиДоВыпускаПоЭтапамПроизводства() Экспорт
	
	ДополнительныеСвойства.Вставить("ОтключитьРасчетДлительностиДоВыпускаПоЭтапамПроизводства");
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСвязанныхДанных

#Область РегистрацияОбработчиков

Процедура ЗарегистрироватьОбновлениеСостоянияЭтапов(ДанныеДоИзменения)
	
	ИзменилисьСвязиЭтапов = Ложь;
	
	ПерваяТаблица = ДанныеДоИзменения.Последователи;
	ВтораяТаблица = Последователи;
	
	Для Сч = 1 По 2 Цикл
		
		Для Каждого Строка Из ПерваяТаблица Цикл
			
			Если ВтораяТаблица.Найти(Строка.Этап, "Этап") = Неопределено Тогда
				ИзменилисьСвязиЭтапов = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзменилисьСвязиЭтапов Тогда
			Прервать;
		Иначе
			ПерваяТаблица = Последователи;
			ВтораяТаблица = ДанныеДоИзменения.Последователи;
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменилосьПланироватьНеРанее = ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее <> ЭтотОбъект.ПланироватьНеРанее
		И (
			ТипЗнч(ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
			ИЛИ ТипЗнч(ЭтотОбъект.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
			);
			
	ИзмениласьМаршрутнаяКарта = ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта <> ЭтотОбъект.МаршрутнаяКарта
		И (
			ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта.Пустая()
			ИЛИ ЭтотОбъект.МаршрутнаяКарта.Пустая()
			);
			
	ИзменилосьОтмененноеКоличество = ДанныеДоИзменения.Реквизиты.КоличествоУпаковокОтменено <> ЭтотОбъект.КоличествоУпаковокОтменено;
	
	Если (ИзменилисьСвязиЭтапов
			ИЛИ ИзменилосьПланироватьНеРанее
			ИЛИ ИзмениласьМаршрутнаяКарта
			ИЛИ ИзменилосьОтмененноеКоличество
			ИЛИ ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения)
			ИЛИ ИзменилосьОбеспечениеМатериалами(ДанныеДоИзменения)
			ИЛИ ИзменилисьТрудозатратыКОформлению(ДанныеДоИзменения)
		) Тогда
		ДобавитьОбработчикОбновленияСвязанныхДанных(
			"ОбновитьСостоянияЭтапов",
			Документы.ЭтапПроизводства2_2.Последователи(Ссылка));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеСостоянияЗаказа(ДанныеДоИзменения)
	
	Если ОтключеноОбновлениеСостоянияЗаказа() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОбработчикОбновленияСвязанныхДанных("ОбновитьСостояниеЗаказаВОчереди");
	
КонецПроцедуры

Процедура ЗарегистрироватьРасчетОчередиПроизводственныхОпераций(ДанныеДоИзменения)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|	И Т.Владелец В(&ВладельцыОпераций)
	|";
	
	ВладельцыОпераций = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях")
		И МаршрутнаяКарта.Пустая() Тогда
		ВладельцыОпераций.Добавить(Этап);
	Иначе
		Если НЕ МаршрутнаяКарта.Пустая() Тогда
			ВладельцыОпераций.Добавить(МаршрутнаяКарта);
		КонецЕсли;
		Если НЕ ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта.Пустая() Тогда
			ВладельцыОпераций.Добавить(ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладельцыОпераций", ВладельцыОпераций);
	
	ДанныеПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(Подразделение);
	Если Не ДанныеПодразделения.ИспользоватьПооперационноеУправление
		ИЛИ ВладельцыОпераций.Количество() = 0
		ИЛИ Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСтатусы = УправлениеПроизводствомКлиентСервер.СтатусыДоступноПооперационноеУправление(ДанныеПодразделения);
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	ПереходыИсключения = Новый Соответствие;
	Если ДанныеПодразделения.ИспользоватьСменныеЗадания
		ИЛИ ДанныеПодразделения.ИспользоватьПооперационноеПланирование Тогда
		ПереходыИсключения.Вставить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат, ПроизводствоСервер.МассивЗначений(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению));
	КонецЕсли;
	
	ДобавленоОграничениеОчереди = ДополнительныеСвойства.Свойство("РеквизитыДеления");
	
	Если (ПроверяемыеСтатусы.Найти(Статус) <> Неопределено
			ИЛИ ПроверяемыеСтатусы.Найти(ДанныеДоИзменения.Реквизиты.Статус) <> Неопределено)
		И (ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения, ПереходыИсключения)
			ИЛИ СвойстваДокумента.ЭтоНовый
			ИЛИ МаршрутнаяКарта <> ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта
			ИЛИ КоэффициентМаршрутнойКарты <> ДанныеДоИзменения.Реквизиты.КоэффициентМаршрутнойКарты
			ИЛИ УпаковкаПлан <> ДанныеДоИзменения.Реквизиты.УпаковкаПлан
			ИЛИ КоличествоУпаковокПлан <> ДанныеДоИзменения.Реквизиты.КоличествоУпаковокПлан
			ИЛИ ДобавленоОграничениеОчереди) Тогда
		ДобавитьОбработчикОбновленияСвязанныхДанных("РассчитатьОчередьПроизводственныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровРазмещенияВГрафике(ДанныеДоИзменения)
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	Если СвойстваДокумента.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ НЕ РучноеРазмещениеВГрафике
			И Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован().Найти(Статус) = Неопределено
		ИЛИ ОтключенКонтрольПараметровРазмещенияВГрафике()
		ИЛИ ДинамическаяСтруктура Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыИзменились = СвойстваДокумента.ЭтоНовый;
	
	Если ДанныеИзКэшаОбъекта("ИзменилосьРучноеРазмещениеЭтапаВГрафике") Тогда
		
		ПараметрыИзменились = Истина;
		ДобавитьОбработчикОбновленияСвязанныхДанных("ЗаписатьРучноеРазмещениеЭтапаВГрафике");
		
	КонецЕсли;
	
	Если НЕ ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыРазмещенияВГрафикеРеквизиты(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если НЕ ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыРазмещенияВГрафикеТаблицы(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если ПараметрыИзменились Тогда
		
		Если РучноеРазмещениеВГрафике Тогда
			ДобавитьОбработчикОбновленияСвязанныхДанных("ПроверитьГрафикСмежныхЭтапов");
		КонецЕсли;
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ИзменилисьПараметрыРазмещенияВГрафике");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровНормативногоГрафика(ДанныеДоИзменения)
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	Если СвойстваДокумента.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		Или ДинамическаяСтруктура Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзменились = СвойстваДокумента.ЭтоНовый;
	
	// Проверка реквизитов шапки
	Если НЕ ПараметрыИзменились Тогда
		
		ПараметрыИзменились = Не ДанныеДоИзменения.Реквизиты.Проведен
			ИЛИ ДанныеДоИзменения.Реквизиты.ДлительностьЭтапа <> ЭтотОбъект.ДлительностьЭтапа
			ИЛИ ДанныеДоИзменения.Реквизиты.ЕдиницаИзмеренияДлительностиЭтапа <> ЭтотОбъект.ЕдиницаИзмеренияДлительностиЭтапа
			ИЛИ (
				ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее <> ЭтотОбъект.ПланироватьНеРанее
					И (ТипЗнч(ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
						ИЛИ ТипЗнч(ЭтотОбъект.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")));
		
	КонецЕсли;
	
	// Проверка табличных частей
	Если НЕ ПараметрыИзменились Тогда
		
		ПараметрыИзменились = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "Последователи");
		
	КонецЕсли;
	
	Если НЕ ПараметрыИзменились Тогда
			
		Реквизиты = Новый Массив;
		Реквизиты.Добавить("Назначение");
		Реквизиты.Добавить("ЭтапПотребитель");
		Реквизиты.Добавить("Отменено");
		
		ПараметрыИзменились = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВыходныеИзделия", Реквизиты)
			
	КонецЕсли;
	
	Если ПараметрыИзменились Тогда
		ДобавитьОбработчикОбновленияСвязанныхДанных("ИзменилисьПараметрыНормативногоГрафика")
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровНормативногоГрафикаСтруктурыЗаказа(ДанныеДоИзменения)
	
	Если Не ДинамическаяСтруктура Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	Если СвойстваДокумента.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзменились = СвойстваДокумента.ЭтоНовый;
	
	Если Не ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыРазмещенияВГрафикеРеквизиты(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если Не ПараметрыИзменились Тогда
		ПараметрыИзменились = ДанныеДоИзменения.Реквизиты.НомерЭтапа <> ЭтотОбъект.НомерЭтапа
			ИЛИ ДанныеДоИзменения.Реквизиты.НомерСледующегоЭтапа <> ЭтотОбъект.НомерСледующегоЭтапа;
	КонецЕсли;
	
	Если Не ПараметрыИзменились
			И ПланироватьРаботуВидовРабочихЦентров Тогда
		ПараметрыИзменились = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВидыРабочихЦентров")
			ИЛИ ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "АльтернативныеВидыРабочихЦентров");
	КонецЕсли;
	
	Если ПараметрыИзменились Тогда
		ДобавитьОбработчикОбновленияСвязанныхДанных("ИзменилисьПараметрыНормативногоГрафикаСтруктурыЗаказа")
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровРасчетаДлительностиДоВыпуска(ДанныеДоИзменения)
	
	Если Не ДинамическаяСтруктура Или ДополнительныеСвойства.Свойство("ОтключитьРасчетДлительностиДоВыпускаПоЭтапамПроизводства") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);

	Если СвойстваДокумента.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзменились = СвойстваДокумента.ЭтоНовый;
	
	Если Не ПараметрыИзменились Тогда
		ПараметрыИзменились = ДанныеДоИзменения.Реквизиты.ДлительностьЭтапа <> ЭтотОбъект.ДлительностьЭтапа;
	КонецЕсли;
	
	Если Не ПараметрыИзменились Тогда
		ПараметрыИзменились = (НЕ ДанныеДоИзменения.Реквизиты.Проведен И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение)
			ИЛИ (ДанныеДоИзменения.Реквизиты.Статус <> ЭтотОбъект.Статус И ДанныеДоИзменения.Реквизиты.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	КонецЕсли;

	Если ПараметрыИзменились Тогда
		ДобавитьОбработчикОбновленияСвязанныхДанных("ИзменилисьПараметрыРасчетаДлительностиДоВыпуска");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуГрафикаПроизводства()
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	Если СвойстваДокумента.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ГрафикПроизводства = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
		ГрафикРассчитан = ГрафикПроизводства.Количество() > 0
			И ГрафикПроизводства[0].Рассчитан;
		
		Если ГрафикРассчитан Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных("ОчиститьГрафикПроизводства")
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуЗаданийКРасчетуГрафикаПроизводства()
	
	Если ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		ЕстьЗаданияКРасчетуГрафика = НЕ РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ГрафикЭтапаАктуален(Ссылка);
		
		ОтменаПроведения = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).РежимЗаписи
			= РежимЗаписиДокумента.ОтменаПроведения;
		
		СтатусыПланирование = Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован();
		НеМожетБытьЗапланирован = (СтатусыПланирование.Найти(Статус) = Неопределено);
		
		РедактированиеРучногоРазмещения = ОтредактированыПараметрыРучногоРазмещенияВГрафике();
		
		Если ЕстьЗаданияКРасчетуГрафика
			И (ОтменаПроведения ИЛИ НеМожетБытьЗапланирован ИЛИ РедактированиеРучногоРазмещения) Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных(
				"ОчиститьЗаданияКРасчетуГрафикаПроизводства");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПроверкуГрафикаСмежныхЭтапов(ДанныеДоИзменения)
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	Если СвойстваДокумента.ЭтоНовый
		ИЛИ НЕ СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ ОтключенКонтрольПараметровРазмещенияВГрафике()
		ИЛИ НеобходимоВыполнитьОбработчик("ПроверитьГрафикСмежныхЭтапов") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеИзКэшаОбъекта("ИзменилосьРучноеРазмещениеЭтапаВГрафике")
		ИЛИ ДанныеДоИзменения.Реквизиты.ФактическоеНачалоЭтапа <> ЭтотОбъект.ФактическоеНачалоЭтапа
		ИЛИ ДанныеДоИзменения.Реквизиты.ДатаПроизводства <> ЭтотОбъект.ДатаПроизводства Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ПроверитьГрафикСмежныхЭтапов");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуПризнакаНаКритическомПути()
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	Если СвойстваДокумента.ЭтоНовый 
		ИЛИ СвойстваДокумента.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		ИЛИ Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ НеобходимоВыполнитьОбработчик("ОчиститьГрафикПроизводства") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
	
	Если ЗначениеЗаполнено(ДанныеГрафика) И ДанныеГрафика[0].НаКритическомПути Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ОчиститьПризнакЭтапНаКритическомПути");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИзменений

Функция ДанныеДоИзменения()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&СоставРеквизитов
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Получатель      КАК Получатель,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Таблица.Произведено     КАК Произведено,
		|	Таблица.Отменено        КАК Отменено,
		|	Таблица.Количество      КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Получатель      КАК Получатель,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Таблица.Произведено     КАК Произведено,
		|	Таблица.Отменено        КАК Отменено,
		|	Таблица.Количество      КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.ВариантОбеспечения КАК ВариантОбеспечения,
		|	Таблица.Производится       КАК Производится,
		|	Таблица.Склад              КАК Склад,
		|	Таблица.Количество         КАК Количество,
		|	Таблица.Отменено           КАК Отменено
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Этап КАК Этап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ВремяРаботы       КАК ВремяРаботы,
		|	Таблица.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Таблица.Использовать      КАК Использовать,
		|	Таблица.ВариантНаладки    КАК ВариантНаладки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ВремяРаботы       КАК ВремяРаботы,
		|	Таблица.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Таблица.Использовать      КАК Использовать,
		|	Таблица.ВариантНаладки    КАК ВариантНаладки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ДатаИнтервала     КАК ДатаИнтервала,
		|	Таблица.Количество        КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЗанятостьВидовРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабот КАК ВидРабот,
		|	Таблица.Исполнитель КАК Исполнитель,
		|	Таблица.Количество КАК Количество,
		|	Таблица.ДатаВыполнения КАК ДатаВыполнения,
		|	Таблица.Отменено КАК Отменено
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки";
	
	СоставРеквизитов = 
		"Статус, 
		|Проведен, 
		|МаршрутнаяКарта,
		|КоэффициентМаршрутнойКарты,
		|ДлительностьЭтапа, 
		|ЕдиницаИзмеренияДлительностиЭтапа, 
		|РучноеРазмещениеВГрафике,
		|ПланироватьНеРанее, 
		|ПланироватьРаботуВидовРабочихЦентров, 
		|ДатаОтгрузки, 
		|ПредварительныйБуфер, 
		|ЕдиницаИзмеренияПредварительногоБуфера, 
		|ЗавершающийБуфер, 
		|ЕдиницаИзмеренияЗавершающегоБуфера, 
		|Непрерывный,
		|ФактическоеНачалоЭтапа,
		|ФактическоеОкончаниеЭтапа,
		|ДатаПроизводства,
		|ПорядокРаботыВидовРабочихЦентров,
		|КоличествоУпаковокОтменено,
		|НомерЭтапа,
		|НомерСледующегоЭтапа,
		|УпаковкаПлан,
		|КоличествоУпаковокПлан";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СоставРеквизитов", СоставРеквизитов);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		
		Реквизиты = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(Реквизиты, ЭтотОбъект);
		
	Иначе
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		Реквизиты = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		
	КонецЕсли;
	
	ДанныеДоИзменения = Новый Структура;
	
	ДанныеДоИзменения.Вставить("Реквизиты", Реквизиты);
	ДанныеДоИзменения.Вставить("ВыходныеИзделия", РезультатЗапроса[1].Выгрузить());
	ДанныеДоИзменения.Вставить("ПобочныеИзделия", РезультатЗапроса[2].Выгрузить());
	ДанныеДоИзменения.Вставить("ОбеспечениеМатериаламиИРаботами", РезультатЗапроса[3].Выгрузить());
	ДанныеДоИзменения.Вставить("Последователи", РезультатЗапроса[4].Выгрузить());
	ДанныеДоИзменения.Вставить("ВидыРабочихЦентров", РезультатЗапроса[5].Выгрузить());
	ДанныеДоИзменения.Вставить("АльтернативныеВидыРабочихЦентров", РезультатЗапроса[6].Выгрузить());
	ДанныеДоИзменения.Вставить("ЗанятостьВидовРабочихЦентров", РезультатЗапроса[7].Выгрузить());
	ДанныеДоИзменения.Вставить("Трудозатраты", РезультатЗапроса[8].Выгрузить());
	
	Возврат ДанныеДоИзменения;
	
КонецФункции

Функция ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения, ПереходыИсключения = Неопределено)
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	Если (СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И НЕ ДанныеДоИзменения.Реквизиты.Проведен
		ИЛИ СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			И ДанныеДоИзменения.Реквизиты.Проведен)
		Тогда
		Возврат Истина;
	ИначеЕсли ПереходыИсключения <> Неопределено
			И ПереходыИсключения[ЭтотОбъект.Статус] <> Неопределено
			И ПереходыИсключения[ЭтотОбъект.Статус].Найти(ДанныеДоИзменения.Реквизиты.Статус) <> Неопределено
		Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ЭтотОбъект.Статус <> ДанныеДоИзменения.Реквизиты.Статус;
	
КонецФункции

Функция ИзменилосьОбеспечениеМатериалами(ДанныеДоИзменения)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номенклатура");
	Реквизиты.Добавить("Характеристика");
	Реквизиты.Добавить("ВариантОбеспечения");
	Реквизиты.Добавить("Производится");
	Реквизиты.Добавить("Склад");
	Реквизиты.Добавить("Количество");
	Реквизиты.Добавить("Отменено");
	
	Результат = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ОбеспечениеМатериаламиИРаботами", Реквизиты);
	Возврат Результат;
	
КонецФункции

Функция ИзменилисьТрудозатратыКОформлению(ДанныеДоИзменения)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("ВидРабот");
	Реквизиты.Добавить("Исполнитель");
	Реквизиты.Добавить("Количество");
	Реквизиты.Добавить("ДатаВыполнения");
	Реквизиты.Добавить("Отменено");
	
	ИзмененаТабличнаяЧасть = ИзмененаТабличнаяЧастьДокумента(
		ДанныеДоИзменения,
		"Трудозатраты",
		Реквизиты);
	
	Результат = ИзмененаТабличнаяЧасть ИЛИ ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения);
	Возврат Результат;
	
КонецФункции

Функция ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, ИмяТаблицы, Реквизиты = Неопределено)
	
	Возврат УправлениеПроизводством.ИзмененаТабличнаяЧастьДокумента(
				ЭтотОбъект,
				ДанныеДоИзменения,
				ИмяТаблицы,
				Реквизиты);
	
КонецФункции

Процедура ПроверитьИзменилисьПараметрыРазмещенияВГрафикеРеквизиты(ДанныеДоИзменения, ПараметрыИзменились)
	
	Реквизиты = ПараметрыРазмещенияВГрафикеРеквизиты();
	
	Для каждого Реквизит Из Реквизиты Цикл
		Если ДанныеДоИзменения.Реквизиты[Реквизит] <> ЭтотОбъект[Реквизит] Тогда
			
			Если Реквизит = "ПланироватьНеРанее"
				И ТипЗнч(ПланироватьНеРанее) = Тип("Дата")
				И ПланироватьНеРанее <> '00010101' Тогда
				
				ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
				
				Если ЗначениеЗаполнено(ДанныеГрафика)
					И ДанныеГрафика[0].НачалоЭтапа >= ПланироватьНеРанее Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыИзменились = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрыИзменились Тогда
		
		ПараметрыИзменились = НЕ ДанныеДоИзменения.Реквизиты.Проведен
			И ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменилисьПараметрыРазмещенияВГрафикеТаблицы(ДанныеДоИзменения, ПараметрыИзменились)
	
	ТаблицаИзменилась = Ложь;
	
	Если РучноеРазмещениеВГрафике Тогда
		
		ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ЗанятостьВидовРабочихЦентров");
		
	ИначеЕсли ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВидыРабочихЦентров");
		
		Если НЕ ТаблицаИзменилась Тогда
			
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "АльтернативныеВидыРабочихЦентров")
			
		КонецЕсли;
		
		Если НЕ ТаблицаИзменилась Тогда
			
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "Последователи")
			
		КонецЕсли;
		
		Если НЕ ТаблицаИзменилась Тогда
			
			Реквизиты = Новый Массив;
			Реквизиты.Добавить("Назначение");
			Реквизиты.Добавить("Отменено");
	
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВыходныеИзделия", Реквизиты)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаИзменилась Тогда
		
		ПараметрыИзменились = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРазмещенияВГрафикеРеквизиты()
	
	Результат = Новый Массив;
	
	Результат.Добавить("РучноеРазмещениеВГрафике");
	Результат.Добавить("ПланироватьНеРанее");
	
	Если НЕ РучноеРазмещениеВГрафике Тогда
		
		Результат.Добавить("ПланироватьРаботуВидовРабочихЦентров");
		
		Если ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Результат.Добавить("ПредварительныйБуфер");
			Результат.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
			Результат.Добавить("ЗавершающийБуфер");
			Результат.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
			Результат.Добавить("Непрерывный");
			Результат.Добавить("ПорядокРаботыВидовРабочихЦентров");
			
		Иначе
			
			Результат.Добавить("ДлительностьЭтапа");
			Результат.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтредактированыПараметрыРучногоРазмещенияВГрафике()
	
	Возврат РучноеРазмещениеВГрафике И ДополнительныеСвойства.Свойство("ГрафикПроизводства");
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанных

Процедура ОбновитьСвязанныеДанные(Отказ, УдалениеПроведения = Ложь)
	
	Перем ПараметрыОбработки;
	
	Если Отказ ИЛИ ОбновлениеСвязанныхДанныхНеТребуется() Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыРазмещенияВГрафике") Тогда
		
		Если РучноеРазмещениеВГрафике Тогда
			
			Если ЗанятостьВидовРабочихЦентров.Количество() > 0 Тогда
				
				КолонкиИнтервалов = "ВидРабочегоЦентра, ДатаИнтервала";
				Интервалы = ЗанятостьВидовРабочихЦентров.Выгрузить(, КолонкиИнтервалов);
				Интервалы.Свернуть(КолонкиИнтервалов);
				РегистрыНакопления.ДоступностьВидовРабочихЦентров.ПроверитьЗагрузкаНеПревышаетДоступностьГрафика(Интервалы);
				
			КонецЕсли;
			
		Иначе
			
			РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ПроверитьГрафикСмежныхЭтапов") Тогда
		
		УправлениеПроизводством.ПроверитьПорядокСледованияЭтапов(Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьГрафикПроизводства") Тогда
		
		МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ОчиститьГрафикЭтапов(МассивСсылок);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьЗаданияКРасчетуГрафикаПроизводства") Тогда
		
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.УдалитьЗадания(Распоряжение, Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыНормативногоГрафика") Тогда
		
		Автозапуск = НЕ ДополнительныеСвойства.Свойство(КлючНеЗаполнятьНормативныйГрафик());
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ДобавитьЗадание(Распоряжение, Автозапуск);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыНормативногоГрафикаСтруктурыЗаказа") Тогда
		
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадание(Распоряжение);
		
		// Логика запуска расчета нормативного графика структуры заказа аналогична
		// расчету "обычного" нормативного графика
		Автозапуск = НЕ ДополнительныеСвойства.Свойство(КлючНеЗаполнятьНормативныйГрафик());
		Если Автозапуск Тогда
			РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.ЗапуститьРасчет();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыРасчетаДлительностиДоВыпуска") Тогда
		
		Задание = Новый Структура;
		Задание.Вставить("ПартияПроизводства", ПартияПроизводства);
		Задание.Вставить("Этап",               Ссылка);
		
		ОтложенныеЗадания.ОбработатьЗаданияОчереди("ЗаданияКРасчетуДлительностиДоВыпускаПоЭтапамПроизводства", Задание);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьПризнакЭтапНаКритическомПути") Тогда
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ОчиститьПризнакЭтапНаКритическомПути(Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("РассчитатьОчередьПроизводственныхОпераций") Тогда
		
		Если ВыполняетсяПакетнаяПередачаКВыполнению() Тогда
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ДобавитьЗадание(Ссылка, Ложь);
		Иначе
			РегистрыСведений.ОчередьПроизводственныхОпераций.ДобавитьЗаданиеКРасчетуОчереди(Ссылка, УдалениеПроведения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОбновитьСостоянияЭтапов", ПараметрыОбработки) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПараметрыОбработки,
			Документы.ЭтапПроизводства2_2.Последователи(Ссылка),
			Истина);
		
		ЭтапыКОбновлению = ПараметрыОбработки; // Массив
		ЭтапыКОчистке = Новый Массив;
		Если УдалениеПроведения Тогда
			ЭтапыКОчистке.Добавить(Ссылка);
		Иначе
			ЭтапыКОбновлению.Добавить(Ссылка);
		КонецЕсли;
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(ЭтапыКОбновлению, ЭтапыКОчистке);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОбновитьСостояниеЗаказаВОчереди") Тогда
		
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжение);
		
	КонецЕсли;
	
	ОчиститьСписокОбработчиковОбновленияСвязанныхДанных();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ОбновлениеСвязанныхДанныхНеТребуется()
	
	Перем Обработчики;
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных", Обработчики) Тогда
		Возврат (Обработчики.Количество() = 0);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьСписокОбработчиковОбновленияСвязанныхДанных()
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных") Тогда
		ДополнительныеСвойства.Удалить("ОбработчикиОбновленияСвязанныхДанных");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбработчикОбновленияСвязанныхДанных(ИмяОбработчика, ПараметрыОбработки = Неопределено)
	
	ОбработчикиОбновленияСвязанныхДанных = ДополнительныеСвойства.ОбработчикиОбновленияСвязанныхДанных;
	ОбработчикиОбновленияСвязанныхДанных.Вставить(ИмяОбработчика, ПараметрыОбработки);
	
КонецПроцедуры

Функция НеобходимоВыполнитьОбработчик(ИмяОбработчика, ПараметрыОбработки = Неопределено)
	
	Перем Обработчики;
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных", Обработчики) Тогда
		Возврат Обработчики.Свойство(ИмяОбработчика, ПараметрыОбработки);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Константы

Функция КлючПакетныйРежимФормирования()
	
	Возврат УправлениеПроизводством.КлючПакетныйРежимФормированияЭтапов();
	
КонецФункции

Функция КлючПакетныйРежимПередачиКВыполнению()
	
	Возврат "ПакетныйРежимПередачиКВыполнению";
	
КонецФункции

Функция КлючНеЗаполнятьНормативныйГрафик()
	
	Возврат "НеЗаполнятьНормативныйГрафик"
	
КонецФункции

Функция КлючОтключитьКонтрольПараметровРазмещенияВГрафике()
	
	Возврат "ОтключитьКонтрольПараметровРазмещенияВГрафике";
	
КонецФункции

Функция КлючОтключитьОбновлениеСостоянияЗаказа()
	
	Возврат "ОтключитьОбновлениеСостоянияЗаказа";
	
КонецФункции

#КонецОбласти

#Область Прочее

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа()
// 		ЗапретитьРазделениеСтрок - Булево - Взводится при корректировке объекта (форма этапа закрыта), в случае если установлен статус Завершен,
// 											т.к. в этом статусе строки с Произведено = Ложь будут удалены, и разделение не имеет смысла.
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров.
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.ОтменитьНеотработанныеСтроки И Не СтруктураПараметров.СкорректироватьМерныеТовары Тогда
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(Неопределено)
	КонецЕсли;
	
	КоличествоСкорректированныхСтрок = 0;
	
	Если Не СтруктураПараметров.ПроверятьОстатки Тогда
		
		КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + ОбеспечениеМатериаламиИРаботами.Количество();
		ОбеспечениеМатериаламиИРаботами.Очистить();
		
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
	КонецЕсли;
	
	ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
	ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыМатериаловВПроизводство;
	ПараметрыЗаполнения.ИмяТабличнойЧасти = "ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
	ПараметрыОтмены.УдалятьСтроки = Истина;
	ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
		И СтруктураПараметров.СкорректироватьМерныеТовары;
	ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТовары;
	
	Возврат ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоОтгрузке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены);
	
КонецФункции

Процедура ЗаполнитьОбеспечениеПриУстановкеСтатуса(ДополнительныеПараметры)
	
	Если Не ДополнительныеПараметры.Свойство("ЗаполнитьОбеспечение") Или Не ДополнительныеПараметры.ЗаполнитьОбеспечение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВстраивания = Документы.ЭтапПроизводства2_2.ДоступныеОстаткиПараметрыВстраивания(ЭтотОбъект);
	ПараметрыУстановкиДействий = Документы.ЭтапПроизводства2_2.ПараметрыВыполненияКомандУстановкиДействий(Ссылка, ДополнительныеПараметры.КодДействия);
	Если ПараметрыУстановкиДействий.НуженВопрос Тогда
		ПараметрыУстановкиДействий.Вставить("СнятьФлагОтгружатьОднойДатой", Истина);
		ПараметрыУстановкиДействий.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Ложь);
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоОстаткамДляВыделенныхСтрокОбъекта(
		ЭтотОбъект,
		ДополнительныеПараметры.КодДействия,
		ПараметрыУстановкиДействий,
		Неопределено,
		ПараметрыВстраивания);
	
	Если ДополнительныеПараметры.ЗаменитьНаАналоги Тогда
		
		ИмяТаблицы = "ОбеспечениеМатериаламиИРаботами";
		
		ДополнительныеПараметрыЗаменыНаАналоги = Новый Структура;
		ДополнительныеПараметрыЗаменыНаАналоги.Вставить("ДоступныеОстаткиПараметрыВстраивания", ПараметрыВстраивания);
		
		РезультатЗамены = Документы.ЭтапПроизводства2_2.ЗаменитьНаАналоги(
							ЭтотОбъект,
							ИмяТаблицы,,
							ДополнительныеПараметры.КодДействияАналоги,
							ДополнительныеПараметрыЗаменыНаАналоги);
		
		Документы.ЭтапПроизводства2_2.ПослеЗаменыНаАналоги(ЭтотОбъект, ИмяТаблицы, РезультатЗамены);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НазначитьИсполнителяПриУстановкеСтатуса(ДополнительныеПараметры)
	
	Если Не ДополнительныеПараметры.Свойство("НазначитьИсполнителя") Или Не ДополнительныеПараметры.НазначитьИсполнителя Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(Подразделение);
	
	Если ПараметрыПодразделения.ИспользоватьПооперационноеУправление Тогда
		Возврат;
	КонецЕсли;

	ИнформацияОбИсполнителе = Неопределено;
	
	Если Не ДополнительныеПараметры.Свойство("ИнформацияОбИсполнителе", ИнформацияОбИсполнителе) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИнформацияОбИсполнителе = УправлениеПроизводством.ИнформацияОМестеРаботыИсполнителя(ДополнительныеПараметры.Исполнитель); 
		УстановитьПривилегированныйРежим(Ложь);
		ДополнительныеПараметры.Вставить("ИнформацияОбИсполнителе", ИнформацияОбИсполнителе); // кешируем
	КонецЕсли;
	
	ТипИсполнителя = ТипЗнч(ДополнительныеПараметры.Исполнитель);
	
	Если (ИнформацияОбИсполнителе.Подразделение = Подразделение Или Не ЗначениеЗаполнено(ИнформацияОбИсполнителе.Подразделение))
			И (ИнформацияОбИсполнителе.Организация = Организация Или Не ЗначениеЗаполнено(ИнформацияОбИсполнителе.Организация))
			И (ПараметрыПодразделения.ИспользоватьПерсональныеНаряды
						И ТипИсполнителя = Тип("СправочникСсылка.ФизическиеЛица")
//++ Локализация
				Или ПараметрыПодразделения.ИспользоватьПерсональныеНаряды
						И ТипИсполнителя = Тип("СправочникСсылка.Сотрудники")
//-- Локализация
				Или ПараметрыПодразделения.ИспользоватьБригадныеНаряды 
						И ТипИсполнителя = Тип("СправочникСсылка.Бригады")) Тогда
				
		Исполнитель = ДополнительныеПараметры.Исполнитель;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Для документа %Документ% не установлен исполнитель, исполнитель не соответствует Подразделению или Организации.';
							|en = 'The assignee is not specified for the ""%Документ%"" document. The assignee does not correspond to the Business unit or Company.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Ссылка);
		
		ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					Ссылка,
					"Статус",,); // ограничиваемся предупреждением 
		
	КонецЕсли;
	
КонецПроцедуры

// При переработке на стороне у всех этапов, включенных в один заказ переработчику, должен быть сквозной код строки.
//
Процедура ЗаполнитьНовыйКодСтрокиПриПереработкеНаСтороне(Отказ)

	Если ВыходныеИзделия.Найти(0, "КодСтроки") = Неопределено
		И ПобочныеИзделия.Найти(0, "КодСтроки") = Неопределено 
		И ОбеспечениеМатериаламиИРаботами.Найти(0, "КодСтроки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПереработчику", ЗаказПереработчику);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
								|en = 'Cannot lock production stages. Reason: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(МаксимальныеКодыСтрок.МаксимальныйКодСтрокиИзделия), 0)     КАК МаксимальныйКодСтрокиИзделия,
	|	ЕСТЬNULL(МАКСИМУМ(МаксимальныеКодыСтрок.МаксимальныйКодСтрокиОбеспечение), 0) КАК МаксимальныйКодСтрокиОбеспечение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПереработчику.ИзделияМаксимальныйКодСтроки   КАК МаксимальныйКодСтрокиИзделия,
	|		ЗаказыПереработчику.МатериалыМаксимальныйКодСтроки КАК МаксимальныйКодСтрокиОбеспечение
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК ЗаказыПереработчику
	|	ГДЕ
	|		ЗаказыПереработчику.Ссылка = &ЗаказПереработчику
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭтапыПроизводства.МаксимальныйКодСтрокиИзделия     КАК МаксимальныйКодСтрокиИзделия,
	|		ЭтапыПроизводства.МаксимальныйКодСтрокиОбеспечение КАК МаксимальныйКодСтрокиОбеспечение
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|	ГДЕ
	|		ЭтапыПроизводства.ЗаказПереработчику = &ЗаказПереработчику
	|	) КАК МаксимальныеКодыСтрок
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказПереработчику", ЗаказПереработчику);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаКоды = Результат.Выбрать();
	ВыборкаКоды.Следующий();
	МаксимальныйКодСтрокиИзделия     = ВыборкаКоды.МаксимальныйКодСтрокиИзделия;
	МаксимальныйКодСтрокиОбеспечение = ВыборкаКоды.МаксимальныйКодСтрокиОбеспечение;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗаказПереработчику);
	МенеджерДокумента.ЗаполнитьКодСтрокиВТабличнойЧасти(ВыходныеИзделия, Ложь, МаксимальныйКодСтрокиИзделия);
	МенеджерДокумента.ЗаполнитьКодСтрокиВТабличнойЧасти(ПобочныеИзделия, Ложь, МаксимальныйКодСтрокиИзделия);
	МенеджерДокумента.ЗаполнитьКодСтрокиВТабличнойЧасти(ОбеспечениеМатериаламиИРаботами, Ложь, МаксимальныйКодСтрокиОбеспечение);
	
КонецПроцедуры

Процедура УстановитьКлючВСтрокахТабличныхЧастей(Отказ)
	
	Если ПроизводствоНаСтороне И НЕ ЗаказПереработчику = Неопределено Тогда
		
		ЗаполнитьНовыйКодСтрокиПриПереработкеНаСтороне(Отказ);
		
	Иначе
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ВыходныеИзделия", "МаксимальныйКодСтрокиИзделия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ПобочныеИзделия", "МаксимальныйКодСтрокиИзделия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ОбеспечениеМатериаламиИРаботами", "МаксимальныйКодСтрокиОбеспечение");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ЭкономияМатериалов", "МаксимальныйКодСтрокиЭкономия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "Трудозатраты", "МаксимальныйКодСтрокиТрудозатраты");
		
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальнаяДатаПроизводстваВТЧ()
	
	Дата1 = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
		НайтиНеОтмененныеСтроки("ВыходныеИзделия"),
		"ДатаПроизводства");
	
	Дата2 = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
		НайтиНеОтмененныеСтроки("ПобочныеИзделия"),
		"ДатаПроизводства");
	
	Возврат Макс(Дата1, Дата2);
	
КонецФункции

Процедура ЗаполнитьМаксимальнуюДатуПроизводства() Экспорт
	
	Если НЕ ПроизводствоОднойДатой Тогда
		ДатаПроизводства = МаксимальнаяДатаПроизводстваВТЧ();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьМаксимальнуюДатуОтгрузки()
	
	Если НЕ НеОтгружатьЧастями Тогда
		ДатаОтгрузки = '000101010000';
		Для каждого ДанныеСтроки Из ОбеспечениеМатериаламиИРаботами Цикл
			Если ДанныеСтроки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				ДатаОтгрузки = Макс(ДанныеСтроки.ДатаОтгрузки, ДатаОтгрузки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаксимальнуюДатуРасхода() Экспорт
	
	Если НЕ РасходОднойДатой Тогда
		ДатаРасхода = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(РасходМатериаловИРабот, "ДатаРасхода"),
								Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(ЭкономияМатериалов, "ДатаОперации"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ, ПараметрыУказанияСерий = Неопределено)
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий[ИмяТЧ]);
	
КонецПроцедуры

Функция НачатоВыполнениеЭтапа()
	
	Возврат Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
КонецФункции

Функция ДанныеИзКэшаОбъекта(Ключ)
	
	Перем Результат, КэшированныеЗначения;
	
	Если Не ДополнительныеСвойства.Свойство("КэшированныеЗначения", КэшированныеЗначения) Тогда
		КэшированныеЗначения = Новый Структура();
		ДополнительныеСвойства.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	КонецЕсли;
	
	Если Не КэшированныеЗначения.Свойство(Ключ, Результат) Тогда
		
		Если Ключ = "ГрафикПроизводства" Тогда
			
			Результат = РегистрыСведений.ГрафикЭтаповПроизводства2_2.ГрафикПроизводства(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект.Ссылка));
			
		ИначеЕсли Ключ = "ИзменилосьРучноеРазмещениеЭтапаВГрафике" Тогда
			
			Результат = Ложь;
			
			Если ОтредактированыПараметрыРучногоРазмещенияВГрафике() Тогда
				
				Если РегистрыСведений.ГрафикЭтаповПроизводства2_2.ИзменилосьРазмещениеЭтапаВГрафике(
					ЭтотОбъект.Ссылка, ДополнительныеСвойства.ГрафикПроизводства) Тогда
					
					Результат = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КэшированныеЗначения.Вставить(Ключ, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиНеОтмененныеСтроки(ИмяТЧ)
	
	Возврат ЭтотОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("Отменено", Ложь));
	
КонецФункции

Процедура Пересчитать(Коэффициент) Экспорт
	
	КоличествоУпаковокПлан = КоличествоУпаковокПлан * Коэффициент;
	
	Если НЕ ПланироватьРаботуВидовРабочихЦентров
		И НЕ РучноеРазмещениеВГрафике Тогда
		ДлительностьЭтапа = ДлительностьЭтапа * Коэффициент;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	// Обеспечение
	Для Индекс = -ОбеспечениеМатериаламиИРаботами.Количество()+1 По 0 Цикл
		
		Строка = ОбеспечениеМатериаламиИРаботами[-Индекс];
		Строка.Количество = Строка.Количество * Коэффициент;
		
		Если Строка.Количество = 0 Тогда
			ОбеспечениеМатериаламиИРаботами.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбеспечениеМатериаламиИРаботами, СтруктураДействий, КэшированныеЗначения);
	
	// Выходные изделия
	СтрокиССериями = Новый Массив;
	
	Для Индекс = -ВыходныеИзделия.Количество()+1 По 0 Цикл
		
		Строка = ВыходныеИзделия[-Индекс];
		Строка.Количество = Строка.Количество * Коэффициент;
		
		Если Строка.Количество = 0 Тогда
			ВыходныеИзделия.Удалить(Строка);
		ИначеЕсли Строка.СтатусУказанияСерий <> 0 Тогда
			СтрокиССериями.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ВыходныеИзделия, СтруктураДействий, КэшированныеЗначения);
	
	Если СтрокиССериями.ВГраница() <> -1 Тогда
		
		Аналитики = "Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства";
		СтруктураПоиска = Новый Структура(Аналитики);
		Изделия = ВыходныеИзделия.Выгрузить(СтрокиССериями, Аналитики + ",Количество");
		Изделия.Свернуть(Аналитики, "Количество");
		
		Для каждого СтрокаИзделие Из Изделия Цикл
			Остаток = СтрокаИзделие.Количество;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИзделие);
			Для каждого СтрокаСерия Из ВыходныеИзделияСерии.НайтиСтроки(СтруктураПоиска) Цикл
				
				Если Остаток = 0 Тогда
					ВыходныеИзделияСерии.Удалить(СтрокаСерия);
				Иначе
					СтрокаСерия.Количество = Мин(СтрокаСерия.Количество, Остаток);
					Остаток = Остаток - СтрокаСерия.Количество;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ЗаполнитьСтатусыУказанияСерийВТЧ(
			"ВыходныеИзделия",
			Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект));
		
	КонецЕсли;
	
	// Побочные изделия
	СтрокиССериями.Очистить();
	
	Для Индекс = -ПобочныеИзделия.Количество()+1 По 0 Цикл
		
		Строка = ПобочныеИзделия[-Индекс];
		Строка.Количество = Строка.Количество * Коэффициент;
		
		Если Строка.Количество = 0 Тогда
			ПобочныеИзделия.Удалить(Строка);
		ИначеЕсли Строка.СтатусУказанияСерий <> 0 Тогда
			СтрокиССериями.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ПобочныеИзделия, СтруктураДействий, КэшированныеЗначения);
	
	Если СтрокиССериями.ВГраница() <> -1 Тогда
		
		Аналитики = "Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,ВладелецИзделия";
		СтруктураПоиска = Новый Структура(Аналитики);
		Изделия = ПобочныеИзделия.Выгрузить(СтрокиССериями, Аналитики + ",Количество");
		Изделия.Свернуть(Аналитики, "Количество");
		
		Для каждого СтрокаИзделие Из Изделия Цикл
			Остаток = СтрокаИзделие.Количество;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИзделие);
			Для каждого СтрокаСерия Из ПобочныеИзделияСерии.НайтиСтроки(СтруктураПоиска) Цикл
				
				Если Остаток = 0 Тогда
					ПобочныеИзделияСерии.Удалить(СтрокаСерия);
				Иначе
					СтрокаСерия.Количество = Мин(СтрокаСерия.Количество, Остаток);
					Остаток = Остаток - СтрокаСерия.Количество;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ЗаполнитьСтатусыУказанияСерийВТЧ(
			"ПобочныеИзделия",
			Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект));
		
	КонецЕсли;
	
	// Трудозатраты
	Для Индекс = -Трудозатраты.Количество()+1 По 0 Цикл
		
		Строка = Трудозатраты[-Индекс];
		Строка.Количество = Строка.Количество * Коэффициент;
		
		Если Строка.Количество = 0 Тогда
			Трудозатраты.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Виды рабочих центров
	Для Индекс = -ВидыРабочихЦентров.Количество()+1 По 0 Цикл
		
		Строка = ВидыРабочихЦентров[-Индекс];
		Строка.ВремяРаботы = Строка.ВремяРаботы * Коэффициент;
		
		Если Строка.ВремяРаботы = 0 Тогда
			ВидыРабочихЦентров.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Альтернативные виды рабочих центров
	Для Индекс = -АльтернативныеВидыРабочихЦентров.Количество()+1 По 0 Цикл
		
		Строка = АльтернативныеВидыРабочихЦентров[-Индекс];
		Строка.ВремяРаботы = Строка.ВремяРаботы * Коэффициент;
		
		Если Строка.ВремяРаботы = 0 Тогда
			АльтернативныеВидыРабочихЦентров.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьКоличествоФактВТЧ(Исполнитель = Неопределено) Экспорт
	
	Если КоличествоУпаковокПлан = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПартияПроизводства,
		"ОсновноеИзделиеНоменклатура, ОсновноеИзделиеХарактеристика");
	
	// Расчет коэффициента
	Коэффициент = 0;
	Если УпаковкаПлан = УпаковкаФакт Тогда
		Коэффициент = КоличествоУпаковокФакт/КоличествоУпаковокПлан;
	Иначе
		КоэффициентПлан = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
			УпаковкаПлан, ДанныеПартии.ОсновноеИзделиеНоменклатура);
		КоэффициентФакт = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
			УпаковкаФакт, ДанныеПартии.ОсновноеИзделиеНоменклатура);
		Коэффициент = (КоличествоУпаковокФакт * КоэффициентФакт) / (КоличествоУпаковокПлан * КоэффициентПлан);
	КонецЕсли;
	
	// Описание переменных
	СтруктураПоиска = Новый Структура("Подразделение, Номенклатура, Характеристика");
	СтруктураПоискаСерии = Новый Структура("Подразделение, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства");
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
	
	// Расход материалов и работ
	ТаблицаИтоги = ОбеспечениеМатериаламиИРаботами.Выгрузить(, "Подразделение, Номенклатура, Характеристика, Количество");
	ТаблицаИтоги.Свернуть("Подразделение, Номенклатура, Характеристика", "Количество");
	Для каждого Строка Из ТаблицаИтоги Цикл
		Строка.Количество = Строка.Количество * Коэффициент;
	КонецЦикла;
	ТаблицаИтоги.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
	
	ТаблицаРасход = РасходМатериаловИРабот.Выгрузить(, "Подразделение, Номенклатура, Характеристика, Количество");
	ВычестьСтрокиИзТаблицы(ТаблицаИтоги, ТаблицаРасход, Новый Структура("Подразделение, Номенклатура, Характеристика"), Ложь);
	
	ТаблицаОстатки = ОбеспечениеМатериаламиИРаботами.Выгрузить(
		Новый Структура("Отменено", Ложь),
		"Подразделение, Номенклатура, Характеристика, Серия, Упаковка, Количество, СтатьяКалькуляции");
	ТаблицаОстатки.Индексы.Добавить("Подразделение, Номенклатура, Характеристика, Серия");
	ТаблицаОстатки.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
	
	ТаблицаРасход = РасходМатериаловИРабот.Выгрузить(, "Подразделение, Номенклатура, Характеристика, Серия, Количество");
	ТаблицаЭкономия = ЭкономияМатериалов.Выгрузить(, "Подразделение, Номенклатура, Характеристика, Серия, Количество");
	
	ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(ТаблицаОстатки);
	ВычестьСтрокиИзТаблицы(ТаблицаОстатки, ТаблицаРасход, Новый Структура("Подразделение, Номенклатура, Характеристика, Серия"));
	ВычестьСтрокиИзТаблицы(ТаблицаОстатки, ТаблицаЭкономия, Новый Структура("Подразделение, Номенклатура, Характеристика, Серия"));
	ВычестьСтрокиИзТаблицы(ТаблицаОстатки, ТаблицаЭкономия, Новый Структура("Подразделение, Номенклатура, Характеристика"));
	ВычестьСтрокиИзТаблицы(ТаблицаОстатки, ТаблицаРасход, Новый Структура("Подразделение, Номенклатура, Характеристика"));
	
	Если РасходОднойДатой Тогда
		ДатаОперации = ДатаРасхода;
	ИначеЕсли ФактическоеОкончаниеЭтапа <> '000101010000'
			И Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		ДатаОперации = НачалоДня(ФактическоеОкончаниеЭтапа);
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Для Индекс = 0 По ТаблицаОстатки.Количество()-1 Цикл
		
		СтрокаОстатки = ТаблицаОстатки[Индекс];
		Если СтрокаОстатки.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОстатки);
		НайденныеСтроки = ТаблицаИтоги.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.ВГраница() = -1 
				ИЛИ НайденныеСтроки[0].Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИтоги = НайденныеСтроки[0];
		
		НоваяСтрока = РасходМатериаловИРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатки,, "Количество");
		НоваяСтрока.Количество = Мин(СтрокаОстатки.Количество, СтрокаИтоги.Количество);
		НоваяСтрока.ДатаРасхода = ДатаОперации;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		СтрокаИтоги.Количество = СтрокаИтоги.Количество - НоваяСтрока.Количество;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("РасходМатериаловИРабот", ПараметрыУказанияСерий);
	
	// Выходные и побочные изделия
	Если ПроизводствоОднойДатой Тогда
		ДатаОперации = ДатаПроизводства;
	ИначеЕсли ФактическоеОкончаниеЭтапа <> '000101010000'
			И Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		ДатаОперации = НачалоДня(ФактическоеОкончаниеЭтапа);
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Для Сч = 1 По 2 Цикл
		
		Если Сч = 1 Тогда
			ИмяТЧ      = "ВыходныеИзделия";
			ИмяТЧСерии = "ВыходныеИзделияСерии";
		Иначе
			ИмяТЧ      = "ПобочныеИзделия";
			ИмяТЧСерии = "ПобочныеИзделияСерии";
		КонецЕсли;
		
		ТаблицаИтоги = ТабличнаяЧастьПоИмени(ИмяТЧ).Выгрузить(, "Подразделение, Номенклатура, Характеристика, Количество, Произведено");
		ТаблицаИтоги.Колонки.Добавить("КоличествоПроизведено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		ТаблицаИтоги.Колонки.Добавить("Распределить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		
		Для каждого Строка Из ТаблицаИтоги.НайтиСтроки(Новый Структура("Произведено", Истина)) Цикл
			Строка.КоличествоПроизведено = Строка.Количество;
		КонецЦикла;
		ТаблицаИтоги.Свернуть("Подразделение, Номенклатура, Характеристика", "Количество, КоличествоПроизведено, Распределить");
		Для каждого Строка Из ТаблицаИтоги Цикл
			Строка.Распределить = Строка.Количество * Коэффициент - Строка.КоличествоПроизведено;
		КонецЦикла;
		ТаблицаИтоги.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
		
		Индекс = 0;
		Пока Индекс < ЭтотОбъект[ИмяТЧ].Количество() Цикл
			
			Строка = ЭтотОбъект[ИмяТЧ][Индекс];
			Индекс = Индекс + 1;
			Если Строка.Произведено
				ИЛИ Строка.Отменено
				ИЛИ Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			СтрокаИтоги = ТаблицаИтоги.НайтиСтроки(СтруктураПоиска)[0];
			Если СтрокаИтоги.Распределить <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПроизведено = Строка;
			Если СтрокаИтоги.Распределить < Строка.Количество Тогда
				
				НоваяСтрока = ЭтотОбъект[ИмяТЧ].Вставить(Индекс);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "КодСтроки");
				НоваяСтрока.Количество = СтрокаИтоги.Распределить;
				
				Строка.Количество = Строка.Количество - СтрокаИтоги.Распределить;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
				
				Если ИмяТЧ = "ВыходныеИзделия" Тогда
					ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
						НоваяСтрока,
						Строка,
						СпособРаспределенияЗатратНаВыходныеИзделия);
				КонецЕсли;
				
				СтрокаПроизведено = НоваяСтрока;
				Индекс = Индекс + 1;
				
			КонецЕсли;
			
			Если СтрокаПроизведено.СтатусУказанияСерий <> 0 Тогда
				
				Распределить = СтрокаПроизведено.Количество;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаПроизведено);
				Для каждого СтрокаСерии Из ЭтотОбъект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСерии) Цикл
					
					Если Распределить >= СтрокаСерии.Количество Тогда
						СтрокаСерии.Произведено = Истина;
						СтрокаСерии.ДатаПроизводства = ДатаОперации;
						Распределить = Распределить - СтрокаСерии.Количество;
					Иначе
						НоваяСтрокаСерии = ЭтотОбъект[ИмяТЧСерии].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаСерии);
						НоваяСтрокаСерии.Количество = Распределить;
						НоваяСтрокаСерии.Произведено = Истина;
						НоваяСтрокаСерии.ДатаПроизводства = ДатаОперации;
						
						СтрокаСерии.Количество = СтрокаСерии.Количество - Распределить;
						Распределить = 0;
					КонецЕсли;
					
					Если Распределить = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаПроизведено.Произведено = Истина;
			СтрокаПроизведено.ДатаПроизводства = ДатаОперации;
				
			СтрокаИтоги.Распределить = СтрокаИтоги.Распределить - СтрокаПроизведено.Количество;

		КонецЦикла;
		
		Если ИмяТЧ = "ВыходныеИзделия"
			И Коэффициент > 1 Тогда
			КоэффициентФакт = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
				УпаковкаФакт, ДанныеПартии.ОсновноеИзделиеНоменклатура);
			КоличествоФакт = КоличествоУпаковокФакт * КоэффициентФакт;
			
			СтруктураПоискаИзделия = Новый Структура;
			СтруктураПоискаИзделия.Вставить("Номенклатура", ДанныеПартии.ОсновноеИзделиеНоменклатура);
			СтруктураПоискаИзделия.Вставить("Характеристика", ДанныеПартии.ОсновноеИзделиеХарактеристика);
			
			КоличествоВТаблице = ВыходныеИзделия.Выгрузить(СтруктураПоискаИзделия, "Количество").Итог("Количество");
			
			Если КоличествоФакт > КоличествоВТаблице Тогда
				СтруктураПоискаИзделия.Вставить("Произведено", Истина);
				СтруктураПоискаИзделия.Вставить("ДатаПроизводства", ДатаОперации);
				НайденныеСтроки = ВыходныеИзделия.НайтиСтроки(СтруктураПоискаИзделия);
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					Строка = НайденныеСтроки[0];
					Строка.Количество = Строка.Количество + (КоличествоФакт - КоличествоВТаблице);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
					
					Если Строка.СтатусУказанияСерий <> 0 Тогда
						ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, Строка);
						НайденныеСтрокиСерии = ВыходныеИзделияСерии.НайтиСтроки(СтруктураПоискаСерии);
						Если НайденныеСтрокиСерии.ВГраница() <> -1 Тогда
							НайденныеСтрокиСерии[0].Количество = НайденныеСтрокиСерии[0].Количество
								+ (КоличествоФакт - КоличествоВТаблице);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
			Документы.ЭтапПроизводства2_2.ЗаполнитьЦеныПоВидуЦен(ЭтотОбъект);
		КонецЕсли;
		
		ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ, ПараметрыУказанияСерий);
		
	КонецЦикла;
	
	// Трудозатраты
	СтруктураПоиска = Новый Структура("Подразделение, ВидРабот");
	Если Документы.ЭтапПроизводства2_2.ИспользуетсяОтметкаВыполненныхТрудозатрат(ЭтотОбъект) Тогда
		
		ТаблицаИтоги = Трудозатраты.Выгрузить(, "Подразделение, ВидРабот, Количество, Выполнено");
		ТаблицаИтоги.Колонки.Добавить("КоличествоВыполнено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		ТаблицаИтоги.Колонки.Добавить("Распределить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		
		Для каждого Строка Из ТаблицаИтоги.НайтиСтроки(Новый Структура("Выполнено", Истина)) Цикл
			Строка.КоличествоВыполнено = Строка.Количество;
		КонецЦикла;
		ТаблицаИтоги.Свернуть("Подразделение, ВидРабот", "Количество, КоличествоВыполнено, Распределить");
		Для каждого Строка Из ТаблицаИтоги Цикл
			Строка.Распределить = Строка.Количество * Коэффициент - Строка.КоличествоВыполнено;
		КонецЦикла;
		ТаблицаИтоги.Индексы.Добавить("Подразделение, ВидРабот");
		
		Если ВыполнениеРаботОднойДатой Тогда
			ДатаОперации = ДатаВыполненияРабот;
		ИначеЕсли ФактическоеОкончаниеЭтапа <> '000101010000'
				И Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
			ДатаОперации = НачалоДня(ФактическоеОкончаниеЭтапа);
		Иначе
			ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Индекс = 0;
		Пока Индекс < Трудозатраты.Количество() Цикл
			
			Строка = Трудозатраты[Индекс];
			Индекс = Индекс + 1;
			
			Если Строка.Выполнено
				И Не ЗначениеЗаполнено(Строка.Исполнитель)
				И ЗначениеЗаполнено(Исполнитель) Тогда
				Строка.Исполнитель = Исполнитель;
			КонецЕсли;
			
			Если Строка.Выполнено
				ИЛИ Строка.Отменено
				ИЛИ Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			СтрокаИтоги = ТаблицаИтоги.НайтиСтроки(СтруктураПоиска)[0];
			Если СтрокаИтоги.Распределить <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВыполнено = Строка;
			Если СтрокаИтоги.Распределить < Строка.Количество Тогда
				
				НоваяСтрока = Трудозатраты.Вставить(Индекс);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "КодСтроки,КлючВидРабот");
				НоваяСтрока.Количество = СтрокаИтоги.Распределить;
				
				Строка.Количество = Строка.Количество - СтрокаИтоги.Распределить;
				
				СтрокаВыполнено = НоваяСтрока;
				Индекс = Индекс + 1;
				
			КонецЕсли;
			СтрокаВыполнено.Выполнено = Истина;
			СтрокаВыполнено.ДатаВыполнения = ДатаОперации;
			Если ЗначениеЗаполнено(Исполнитель)
					И НЕ ЗначениеЗаполнено(СтрокаВыполнено.Исполнитель) Тогда
				СтрокаВыполнено.Исполнитель = Исполнитель;
			КонецЕсли;
			
			СтрокаИтоги.Распределить = СтрокаИтоги.Распределить - СтрокаВыполнено.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьКоличествоОтмененоВТЧ(ПричинаОтмены) Экспорт
	
	Если КоличествоУпаковокПлан = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет коэффициента
	Коэффициент = 0;
	Если УпаковкаПлан = УпаковкаОтменено Тогда
		Коэффициент = КоличествоУпаковокОтменено/КоличествоУпаковокПлан;
	Иначе
		Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПартияПроизводства, "ОсновноеИзделиеНоменклатура");
		КоэффициентПлан = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(УпаковкаПлан, Номенклатура);
		КоэффициентОтменено = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(УпаковкаОтменено, Номенклатура);
		Коэффициент = (КоличествоУпаковокОтменено * КоэффициентОтменено) / (КоличествоУпаковокПлан * КоэффициентПлан);
	КонецЕсли;
	
	// Описание переменных
	СтруктураПоиска = Новый Структура("Подразделение, Номенклатура, Характеристика");
	СтруктураПоискаСерии = Новый Структура("Подразделение, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства");
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
	
	// Обеспечение материалами и работами
	ТаблицаИтоги = ОбеспечениеМатериаламиИРаботами.Выгрузить(, "Подразделение, Номенклатура, Характеристика, Количество, Отменено");
	ТаблицаИтоги.Колонки.Добавить("КоличествоОтменено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаИтоги.Колонки.Добавить("Распределить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	Для каждого Строка Из ТаблицаИтоги.НайтиСтроки(Новый Структура("Отменено", Истина)) Цикл
		Строка.КоличествоОтменено = Строка.Количество;
	КонецЦикла;
	ТаблицаИтоги.Свернуть("Подразделение, Номенклатура, Характеристика", "Количество, КоличествоОтменено, Распределить");
	Для каждого Строка Из ТаблицаИтоги Цикл
		Строка.Распределить = Строка.Количество * Коэффициент - Строка.КоличествоОтменено;
	КонецЦикла;
	ТаблицаИтоги.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
	
	Индекс = 0;
	Пока Индекс < ОбеспечениеМатериаламиИРаботами.Количество() Цикл
		
		Строка = ОбеспечениеМатериаламиИРаботами[Индекс];
		Индекс = Индекс + 1;
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
			ИЛИ Строка.Отменено
			ИЛИ Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтрокаИтоги = ТаблицаИтоги.НайтиСтроки(СтруктураПоиска)[0];
		Если СтрокаИтоги.Распределить <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтменено = Строка;
		Если СтрокаИтоги.Распределить < Строка.Количество Тогда
			
			НоваяСтрока = ОбеспечениеМатериаламиИРаботами.Вставить(Индекс);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "КодСтроки,КлючНоменклатура");
			НоваяСтрока.Количество = СтрокаИтоги.Распределить;
			
			Строка.Количество = Строка.Количество - СтрокаИтоги.Распределить;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
			
			СтрокаОтменено = НоваяСтрока;
			Индекс = Индекс + 1;
			
		КонецЕсли;
		СтрокаОтменено.Отменено = Истина;
		СтрокаОтменено.ПричинаОтмены = ПричинаОтмены;
			
		СтрокаИтоги.Распределить = СтрокаИтоги.Распределить - СтрокаОтменено.Количество;
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("ОбеспечениеМатериаламиИРаботами", ПараметрыУказанияСерий);
	
	// Выходные и побочные изделия
	Для Сч = 1 По 2 Цикл
		
		ИмяТЧ = ?(Сч = 1, "ВыходныеИзделия", "ПобочныеИзделия");
		
		ТаблицаИтоги = ТабличнаяЧастьПоИмени(ИмяТЧ).Выгрузить(, "Подразделение, Номенклатура, Характеристика, Количество, Отменено");
		ТаблицаИтоги.Колонки.Добавить("КоличествоОтменено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		ТаблицаИтоги.Колонки.Добавить("Распределить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		
		Для каждого Строка Из ТаблицаИтоги.НайтиСтроки(Новый Структура("Отменено", Истина)) Цикл
			Строка.КоличествоОтменено = Строка.Количество;
		КонецЦикла;
		ТаблицаИтоги.Свернуть("Подразделение, Номенклатура, Характеристика", "Количество, КоличествоОтменено, Распределить");
		Для каждого Строка Из ТаблицаИтоги Цикл
			Строка.Распределить = Строка.Количество * Коэффициент - Строка.КоличествоОтменено;
		КонецЦикла;
		ТаблицаИтоги.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
		
		Индекс = 0;
		Пока Индекс < ЭтотОбъект[ИмяТЧ].Количество() Цикл
			
			Строка = ЭтотОбъект[ИмяТЧ][Индекс];
			Индекс = Индекс + 1;
			Если Строка.Произведено
				ИЛИ Строка.Отменено
				ИЛИ Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			СтрокаИтоги = ТаблицаИтоги.НайтиСтроки(СтруктураПоиска)[0];
			Если СтрокаИтоги.Распределить <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтменено = Строка;
			Если СтрокаИтоги.Распределить < Строка.Количество Тогда
				
				НоваяСтрока = ЭтотОбъект[ИмяТЧ].Вставить(Индекс);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "КодСтроки");
				НоваяСтрока.Количество = СтрокаИтоги.Распределить;
				
				Строка.Количество = Строка.Количество - СтрокаИтоги.Распределить;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
				
				Если ИмяТЧ = "ВыходныеИзделия" Тогда
					ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
						НоваяСтрока,
						Строка,
						СпособРаспределенияЗатратНаВыходныеИзделия);
				КонецЕсли;
				
				СтрокаОтменено = НоваяСтрока;
				Индекс = Индекс + 1;
				
			КонецЕсли;
			СтрокаОтменено.Отменено = Истина;
			СтрокаОтменено.ПричинаОтмены = ПричинаОтмены;
				
			СтрокаИтоги.Распределить = СтрокаИтоги.Распределить - СтрокаОтменено.Количество;

		КонецЦикла;
		
		ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ, ПараметрыУказанияСерий);
		
	КонецЦикла;
	
	// Трудозатраты
	СтруктураПоиска = Новый Структура("Подразделение, ВидРабот");
	
	ТаблицаИтоги = Трудозатраты.Выгрузить(, "Подразделение, ВидРабот, Количество, Отменено");
	ТаблицаИтоги.Колонки.Добавить("КоличествоОтменено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаИтоги.Колонки.Добавить("Распределить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	Для каждого Строка Из ТаблицаИтоги.НайтиСтроки(Новый Структура("Отменено", Истина)) Цикл
		Строка.КоличествоОтменено = Строка.Количество;
	КонецЦикла;
	ТаблицаИтоги.Свернуть("Подразделение, ВидРабот", "Количество, КоличествоОтменено, Распределить");
	Для каждого Строка Из ТаблицаИтоги Цикл
		Строка.Распределить = Строка.Количество * Коэффициент - Строка.КоличествоОтменено;
	КонецЦикла;
	ТаблицаИтоги.Индексы.Добавить("Подразделение, ВидРабот");
	
	Индекс = 0;
	Пока Индекс < Трудозатраты.Количество() Цикл
		
		Строка = Трудозатраты[Индекс];
		Индекс = Индекс + 1;
		Если Строка.Выполнено
			ИЛИ Строка.Отменено
			ИЛИ Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтрокаИтоги = ТаблицаИтоги.НайтиСтроки(СтруктураПоиска)[0];
		Если СтрокаИтоги.Распределить <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтменено = Строка;
		Если СтрокаИтоги.Распределить < Строка.Количество Тогда
			
			НоваяСтрока = Трудозатраты.Вставить(Индекс);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "КодСтроки,КлючВидРабот");
			НоваяСтрока.Количество = СтрокаИтоги.Распределить;
			
			Строка.Количество = Строка.Количество - СтрокаИтоги.Распределить;
			
			СтрокаОтменено = НоваяСтрока;
			Индекс = Индекс + 1;
			
		КонецЕсли;
		СтрокаОтменено.Отменено = Истина;
		СтрокаОтменено.ПричинаОтмены = ПричинаОтмены;
		
		СтрокаИтоги.Распределить = СтрокаИтоги.Распределить - СтрокаОтменено.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычестьСтрокиИзТаблицы(Таблица1, Таблица2, УсловиеПоиска, ОбработкаВПорядкеСтрок = Истина)
	
	Индекс2 = 0;
	
	Пока Индекс2 < Таблица2.Количество() Цикл
		
		Строка2 = Таблица2[Индекс2];
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка2);
		НайденныеСтроки = ?(ОбработкаВПорядкеСтрок,
			ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(Таблица1, УсловиеПоиска, Истина),
			Таблица1.НайтиСтроки(УсловиеПоиска));
		
		Для Индекс1 = 0 По НайденныеСтроки.ВГраница() Цикл

			Строка1 = НайденныеСтроки[Индекс1];
			Количество = Мин(Строка1.Количество, Строка2.Количество);
			
			Строка1.Количество = Строка1.Количество - Количество;
			Строка2.Количество = Строка2.Количество - Количество;
			
			Если Строка2.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Строка2.Количество = 0 Тогда
			Таблица2.Удалить(Строка2);
		Иначе
			Индекс2 = Индекс2 + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТабличнаяЧастьПоИмени(ИмяТЧ)

	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ВыходныеИзделия;
		
	ИначеЕсли ИмяТЧ = "ВыходныеИзделияСерии" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ВыходныеИзделияСерии;
		
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ПобочныеИзделия;
		
	ИначеЕсли ИмяТЧ = "ПобочныеИзделияСерии" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ПобочныеИзделия;

	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ОбеспечениеМатериаламиИРаботами;

	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		ТабличнаяЧасть = ЭтотОбъект.РасходМатериаловИРабот;

	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ЭкономияМатериалов;

	ИначеЕсли ИмяТЧ = "ЭкономияМатериаловСерии" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ЭкономияМатериаловСерии;

	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		ТабличнаяЧасть = ЭтотОбъект.Трудозатраты;

	ИначеЕсли ИмяТЧ = "ВидыРабочихЦентров" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ВидыРабочихЦентров;

	ИначеЕсли ИмяТЧ = "АльтернативныеВидыРабочихЦентров" Тогда
		ТабличнаяЧасть = ЭтотОбъект.АльтернативныеВидыРабочихЦентров;

	ИначеЕсли ИмяТЧ = "ЗанятостьВидовРабочихЦентров" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ЗанятостьВидовРабочихЦентров;

	ИначеЕсли ИмяТЧ = "Последователи" Тогда
		ТабличнаяЧасть = ЭтотОбъект.Последователи;

	ИначеЕсли ИмяТЧ = "ВидыЗапасовИзделия" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ВидыЗапасовИзделия;

	ИначеЕсли ИмяТЧ = "ВидыЗапасовМатериалы" Тогда
		ТабличнаяЧасть = ЭтотОбъект.ВидыЗапасовМатериалы;

	Иначе
		ТабличнаяЧасть = Неопределено;

	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

// Возвращает данные таблиц документа.
//
// Возвращаемое значение:
//	см. Документы.ЭтапПроизводства2_2.КоллекцияТабличныхЧастейТоваров
//
Функция ТаблицыДокумента()
	
	Если ДополнительныеСвойства.Свойство("ТаблицыЗаполненияВидовЗапасовПриОбмене")
			И ДополнительныеСвойства.ТаблицыЗаполненияВидовЗапасовПриОбмене <> Неопределено Тогда
		
		ТаблицыДокумента = ДополнительныеСвойства.ТаблицыЗаполненияВидовЗапасовПриОбмене;
		
	Иначе
		ТаблицыДокумента = Документы.ЭтапПроизводства2_2.КоллекцияТабличныхЧастейТоваров();
		
		ЗаполнитьЗначенияСвойств(ТаблицыДокумента, ЭтотОбъект);
	КонецЕсли;
	
	Возврат ТаблицыДокумента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
