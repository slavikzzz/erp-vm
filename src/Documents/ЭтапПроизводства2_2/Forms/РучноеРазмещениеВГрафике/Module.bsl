
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыРучногоРазмещения(Параметры);
	ЗаполнитьСохраненныеЗначения(ЭтаФорма);
	
	ОбновитьСоставКолонокЗанятости();
	ЗаполнитьЗанятостьВидовРабочихЦентров();
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаПроверкиЗанятостиВидовРабочихЦентров(Отказ);
	
	ОбработкаПроверкиПериодаВыполненияИИнтерваловЗанятости(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ ВыполняетсяЗакрытие И НЕ ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса       = НСтр("ru = 'Форма будет закрыта, все введенные данные будут потеряны. Продолжить?';
									|en = 'Form will be closed, all entered data will be lost. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		
		// Снятие модифицированности, т.к. перед закрытием признак проверяется
		Модифицированность = Ложь;
		
		Результат = Новый Структура;
		
		Результат.Вставить("РучноеРазмещениеВГрафике", РучноеРазмещениеВГрафике);
		Результат.Вставить("ДанныеРучноеРазмещениеВГрафике", ДанныеРучногоРазмещениеВГрафике(ЭтаФорма));
		Результат.Вставить("АдресЗанятоЭтапом", ЗанятоЭтапомВХранилище());
		
		ЭтаФорма.Закрыть(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДоступностьВидовРабочихЦентров();
	
КонецПроцедуры

&НаКлиенте
Процедура ИндикаторПерейтиКВводуДоступностиНажатие(Элемент)
	
	НачалоПериода = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	Если ОтображаемыеИнтервалы.Количество() > 0 Тогда
		НачалоПериода = ОтображаемыеИнтервалы[0].Значение;
	КонецЕсли;
	
	ВидРабочегоЦентра = Неопределено;
	Если Элементы.ЗанятостьВидовРабочихЦентров.ТекущиеДанные <> Неопределено Тогда
		ВидРабочегоЦентра = Элементы.ЗанятостьВидовРабочихЦентров.ТекущиеДанные.ВидРабочегоЦентра; 
	КонецЕсли;
	
	РежимРаботы = ПредопределенноеЗначение("Перечисление.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("РежимРаботы", РежимРаботы);
	
	ОткрытьФорму("Обработка.ДоступностьВидовРабочихЦентров.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПоказатьСмежныеЭтапыНажатие(Элемент)
	
	ИмяОткрываемойФормы = "Отчет.ДиаграммаСмежныхЭтаповПроизводства.ФормаОбъекта";
	
	СтатусГрафика = СтатусРабочийГрафик();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрКоманды", Ссылка);
	ПараметрыФормы.Вставить("СтатусГрафика", СтатусГрафика);
	
	ОткрытьФорму(
		ИмяОткрываемойФормы,
		ПараметрыФормы,
		ЭтотОбъект,
		Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗанятость(Команда)
	
	ЗаполнитьЗанятостьВидовРабочихЦентров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗанятость(Команда)
	
	ЗанятостьВидовРабочихЦентров.Очистить();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗанятостьВидовРабочихЦентров");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнтервалСлева(Команда)
	
	ДобавитьИнтервал(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнтервалСправа(Команда)
	
	ДобавитьИнтервал(1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НачалоЭтапаПриИзменении(Элемент)
	
	ПриИзмененииПараметровРазмещения("НачалоЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеЭтапаПриИзменении(Элемент)
	
	ПриИзмененииПараметровРазмещения("ОкончаниеЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеРазмещениеВГрафикеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РучноеРазмещениеВГрафике = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПрижатьКПредыдущемуНажатие(Элемент)
	
	НачалоЭтапа = ПараметрыПрижатия.ЛеваяГраница;
	
	ПриИзмененииПараметровРазмещения("НачалоЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПрижатьКСледующемуНажатие(Элемент)
	
	ОкончаниеЭтапа = ПараметрыПрижатия.ПраваяГраница;
	
	ПриИзмененииПараметровРазмещения("ОкончаниеЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерезаполнитьПериодВыполненияНажатие(Элемент)
	
	КоличествоИнтервалов = ОтображаемыеИнтервалы.Количество();
	
	Если КоличествоИнтервалов > 0 Тогда
		
		НачалоПериода = ОтображаемыеИнтервалы[0].Значение;
		ОкончаниеПериода = ОтображаемыеИнтервалы[КоличествоИнтервалов-1].Значение;
		
		ИсправитьПериодВыполненияЭтапа(НачалоПериода, ОкончаниеПериода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерезаполнитьИнтервалыЗанятостиНажатие(Элемент)
	
	ИсправитьИнтервалыЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОтклоненияОтНормативаНажатие(Элемент)
	
	Элементы.ГруппаОтклоненияОтНорматива.Видимость      = Истина;
	Элементы.ГиперссылкаОтклоненияОтНорматива.Видимость = Ложь;
	
	ВывестиОтклоненияОтНорматива();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЗакрытьОтклоненияОтНормативаНажатие(Элемент)
	
	Элементы.ГруппаОтклоненияОтНорматива.Видимость = Ложь;
	
	СкрытьОтклоненияОтНорматива();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыЗанятостьВидовРабочихЦентров

&НаКлиенте
Процедура ЗанятостьВидовРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗанятостьВидовРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.ИндикаторЗанято = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗанятостьВидовРабочихЦентровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработатьОкончаниеРедактированияЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗанятостьВидовРабочихЦентровПослеУдаления(Элемент)
	
	ОбработатьОкончаниеРедактированияЗанятости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗанятостьВидРабочегоЦентраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗанятостьВидовРабочихЦентров.ТекущиеДанные;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ТекущиеДанные.ВидРабочегоЦентра);
	
	ОбновитьДоступностьВидовРабочихЦентров(МассивСсылок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

// Заполняет параметры ручного размещения
//
// Параметры:
//  Параметры - Структура - содержит:
//               * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 -
//
&НаСервере
Процедура ЗаполнитьПараметрыРучногоРазмещения(Параметры)
	
	// Данные этапа
	
	Ссылка = Параметры.Ссылка;
	Статус = Параметры.Статус;
	
	ТолькоПросмотр = (Статус = СтатусЗавершен());
	
	Распоряжение  = Параметры.Распоряжение;
	Подразделение = Параметры.Подразделение;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Подразделение, 
		"ИнтервалПланирования,
		|НачалоИнтервалаПланирования,
		|ОкончаниеИнтервалаПланирования");
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыПодразделения);
	
	// График производства
	
	РучноеРазмещениеВГрафике = Параметры.РучноеРазмещениеВГрафике;
	
	Предшественники = Неопределено;
	Последователи   = Неопределено;
	
	МассивСсылок = Документы.ЭтапПроизводства2_2.СмежныеЭтапы(Ссылка, Предшественники, Последователи);
	ЕстьСмежныеЭтапы = (МассивСсылок.Количество() > 0);
	
	Если Параметры.ГрафикПроизводства <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ГрафикПроизводства);
	Иначе
		МассивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	ГрафикЭтаповПроизводства = РегистрыСведений.ГрафикЭтаповПроизводства2_2.ГрафикПроизводства(МассивСсылок);
	
	ОкончаниеПредыдущего = '00010101';
	НачалоСледующего = '00010101';
	
	Для Каждого График Из ГрафикЭтаповПроизводства Цикл
		
		Если График.Этап <> Ссылка Тогда
			
			Если НЕ График.Рассчитан Тогда
				Продолжить;
			КонецЕсли;
			
			Если Предшественники.Найти(График.Этап) <> Неопределено Тогда
				
				ОкончаниеПредыдущего = Макс(График.ОкончаниеЭтапа, ОкончаниеПредыдущего);
				
			Иначе 
				
				Если НачалоСледующего > '00010101' Тогда
					НачалоСледующего = Мин(График.НачалоЭтапа, НачалоСледующего);
				Иначе
					НачалоСледующего = График.НачалоЭтапа;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ЭтаФорма, График);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПрижатия = ПараметрыПрижатия();
	
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Распоряжение, "ДатаПотребности, НачатьНеРанее");
	
	Если ОкончаниеПредыдущего > '00010101' Тогда 
		
		ПараметрыПрижатия.ЛеваяГраница = ОкончаниеПредыдущего + 1;
		ПараметрыПрижатия.ШаблонЛеваяГраница = НСтр("ru = 'прижать к предыдущему (%1)';
													|en = 'press to the previous one (%1)'");
		
	ИначеЕсли РеквизитыРаспоряжения.НачатьНеРанее > ТекущаяДатаСеанса() Тогда
		
		ПараметрыПрижатия.ЛеваяГраница = РеквизитыРаспоряжения.НачатьНеРанее;
		ПараметрыПрижатия.ШаблонЛеваяГраница = НСтр("ru = 'прижать к началу (%1)';
													|en = 'press to start (%1)'");
		
	КонецЕсли;
	
	Если НачалоСледующего > '00010101' Тогда
		
		ПараметрыПрижатия.ПраваяГраница = НачалоСледующего - 1;
		ПараметрыПрижатия.ШаблонПраваяГраница = НСтр("ru = 'прижать к следующему (%1)';
													|en = 'press to the next one (%1)'");
		
	ИначеЕсли РеквизитыРаспоряжения.ДатаПотребности > ТекущаяДатаСеанса()
			И РеквизитыРаспоряжения.ДатаПотребности > ОкончаниеПредыдущего Тогда
		
		ПараметрыПрижатия.ПраваяГраница = РеквизитыРаспоряжения.ДатаПотребности;
		ПараметрыПрижатия.ШаблонПраваяГраница = НСтр("ru = 'прижать к дате потребности (%1)';
													|en = 'press to the demand date (%1)'");
		
	КонецЕсли;
	
	// Нормативы
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресНормативы) Тогда
		
		НормативыИзХранилища = ПолучитьИзВременногоХранилища(Параметры.АдресНормативы); // ТаблицаЗначений - 
		
		ОписаниеТипа = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный);
		НормативыИзХранилища.Колонки.Добавить("Количество", ОписаниеТипа);
		
		Для Каждого Строка Из НормативыИзХранилища Цикл
			
			Строка.Количество = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				Строка.ВремяРаботы, Строка.ЕдиницаИзмерения)/3600;
			
		КонецЦикла;
		
		НормативыИзХранилища.Свернуть("ВидРабочегоЦентра", "Количество");
		
		Нормативы.Загрузить(НормативыИзХранилища);
		
	КонецЕсли;
	
	// Занятость видов рабочих центров
	
	АдресСтруктураЗанятости = Параметры.АдресСтруктураЗанятости;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// текст "Общая доступность"
#Область ТекстОбщаяДоступность
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗанятостьИндикаторДоступность.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Общая доступность';
																|en = 'Total availability'"));
	
#КонецОбласти

	// текст "Свободно"
#Область ТекстСвободно
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗанятостьИндикаторСвободно.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Свободно';
																|en = 'Available'"));
	
#КонецОбласти

	// текст "Занять"
#Область ТекстЗанять
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗанятостьИндикаторЗанято.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Занять';
																|en = 'Reserve'"));
	
#КонецОбласти

	// выделение цветом превышение занятости
#Область ПревышениеЗанятости

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗанятостьИтогоЗанято.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗанятостьВидовРабочихЦентров.ИтогоСвободно");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЗанятостьВидовРабочихЦентров.ИтогоЗанято");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	Элементы.НачалоЭтапа.ФорматРедактирования = ФорматДатыГрафика;
	Элементы.ОкончаниеЭтапа.ФорматРедактирования = ФорматДатыГрафика;
	
	Элементы.ГруппаПланированиеПоПроизводственнымРесурсам.Видимость = ИспользуетсяПланированиеПоПроизводственнымРесурсам;
	
	Если ПараметрыПрижатия.ЛеваяГраница <> '00010101' Тогда
		
		Элементы.ГиперссылкаПрижатьКПредыдущему.Заголовок = СтрШаблон(ПараметрыПрижатия.ШаблонЛеваяГраница, 
			Формат(ПараметрыПрижатия.ЛеваяГраница, ФорматДатыГрафика));
		
	КонецЕсли;
	
	Если ПараметрыПрижатия.ПраваяГраница <> '00010101' Тогда
		
		Элементы.ГиперссылкаПрижатьКСледующему.Заголовок = СтрШаблон(ПараметрыПрижатия.ШаблонПраваяГраница, 
			Формат(ПараметрыПрижатия.ПраваяГраница, ФорматДатыГрафика));
		
	КонецЕсли;
	
	Элементы.ГиперссылкаПоказатьСмежныеЭтапы.Видимость = ЕстьСмежныеЭтапы;
	
	ОбновитьГиперссылкуОтклоненияОтНорматива();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Начало и окончание этапа
	Если СтруктураРеквизитов.Свойство("РучноеРазмещениеВГрафике") ИЛИ Инициализация Тогда
		
		Если Форма.РучноеРазмещениеВГрафике Тогда
			Элементы.НачалоЭтапа.ЦветТекста = WebЦвета.Черный;
			Элементы.ОкончаниеЭтапа.ЦветТекста = WebЦвета.Черный;
		Иначе
			Элементы.НачалоЭтапа.ЦветТекста = WebЦвета.Серый;
			Элементы.ОкончаниеЭтапа.ЦветТекста = WebЦвета.Серый;
		КонецЕсли;
		
	КонецЕсли;
	
	// Ручное размещение в графике
	Если СтруктураРеквизитов.Свойство("РучноеРазмещениеВГрафике") ИЛИ Инициализация Тогда
		
		Элементы.РучноеРазмещениеВГрафике.Видимость = 
			НЕ Форма.РучноеРазмещениеВГрафике И НЕ Форма.ТолькоПросмотр;
	
	КонецЕсли;
	
	// Прижать к предыдущему
	Если СтруктураРеквизитов.Свойство("НачалоЭтапа") ИЛИ Инициализация Тогда
		
		Элементы.ГиперссылкаПрижатьКПредыдущему.Видимость =
			Форма.ПараметрыПрижатия.ЛеваяГраница > '00010101'
			И Форма.НачалоЭтапа <> Форма.ПараметрыПрижатия.ЛеваяГраница
			И НЕ Форма.ТолькоПросмотр;
		
	КонецЕсли;
	
	// Прижать к следующему
	Если СтруктураРеквизитов.Свойство("ОкончаниеЭтапа") ИЛИ Инициализация Тогда
		
		Элементы.ГиперссылкаПрижатьКСледующему.Видимость = 
			Форма.ПараметрыПрижатия.ПраваяГраница > '00010101'
			И Форма.ОкончаниеЭтапа <> Форма.ПараметрыПрижатия.ПраваяГраница
			И НЕ Форма.ТолькоПросмотр;
		
	КонецЕсли;
	
	// Планирование по производственным ресурсам
	Если СтруктураРеквизитов.Свойство("РучноеРазмещениеВГрафике") ИЛИ Инициализация Тогда
		
		Элементы.ГруппаПланированиеПоПроизводственнымРесурсам.Доступность = Форма.РучноеРазмещениеВГрафике;
		
	КонецЕсли;
	
	// Перезаполнение интервалов
	Если СтруктураРеквизитов.Свойство("НачалоЭтапа")
		ИЛИ СтруктураРеквизитов.Свойство("ОкончаниеЭтапа")
		ИЛИ СтруктураРеквизитов.Свойство("ЗанятостьВидовРабочихЦентров") Тогда
		
		КодОшибки = ПроверитьПериодВыполненияИИнтервалыЗанятости(Форма);
		
		Элементы.ГруппаТребуетсяПерезаполнитьЗанятость.Видимость    = (КодОшибки > 0);
		Элементы.ГиперссылкаПерезаполнитьПериодВыполнения.Видимость = (КодОшибки > 0) И Форма.ОтображаемыеИнтервалы.Количество() > 0;
		
		Если КодОшибки > 0 Тогда
			Если КодОшибки = КодОшибкиЗанятостьВыходитЗаГраницыЭтапа() Тогда
				Элементы.ГруппаТекстОшибкиТребуетсяПерезаполнитьЗанятость.ТекущаяСтраница = Элементы.ГруппаЗанятостьВыходитЗаГраницыЭтапа;
			Иначе
				Элементы.ГруппаТекстОшибкиТребуетсяПерезаполнитьЗанятость.ТекущаяСтраница = Элементы.ГруппаПериодВыполненияНеСоответствуетИнтервалам;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Отклонения от нормативов 
	Если СтруктураРеквизитов.Свойство("ЕстьСмежныеЭтапы") ИЛИ Инициализация Тогда
		
		Элементы.ГиперссылкаПоказатьСмежныеЭтапы.Видимость = Форма.ЕстьСмежныеЭтапы;
		
	КонецЕсли;
	
	// Модифицированность
	Если СтруктураРеквизитов.Свойство("НачалоЭтапа")
		ИЛИ СтруктураРеквизитов.Свойство("ОкончаниеЭтапа")
		ИЛИ СтруктураРеквизитов.Свойство("РучноеРазмещениеВГрафике")
		ИЛИ СтруктураРеквизитов.Свойство("ЗанятостьВидовРабочихЦентров") Тогда
		
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохраненныеЗначения

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСохраненныеЗначения(Форма)
	
	ИменаРеквизитов = ИменаСохраняемыхРеквизитов();
	
	Форма.СохраненныеЗначения = Новый Структура(ИменаРеквизитов);
	
	ЗаполнитьЗначенияСвойств(Форма.СохраненныеЗначения, Форма, ИменаРеквизитов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьСохраненныеЗначения(Форма)
	
	ИменаРеквизитов = ИменаСохраняемыхРеквизитов();
	
	Если Форма.СохраненныеЗначения <> Неопределено Тогда
		ЗначенияЗаполнения = Форма.СохраненныеЗначения;
	Иначе
		ЗначенияЗаполнения = Новый Структура(ИменаРеквизитов);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, ЗначенияЗаполнения, ИменаРеквизитов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИзменилосьСохраненноеЗначение(Форма, ИмяРеквизита, Значение)
	
	Возврат Форма.СохраненныеЗначения = Неопределено
			 ИЛИ Форма.СохраненныеЗначения[ИмяРеквизита] <> Значение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаСохраняемыхРеквизитов()
	
	Результат = 
		"НачалоЭтапа,
		|ОкончаниеЭтапа,
		|РучноеРазмещениеВГрафике";
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РучноеРазмещениеВГрафике

#Область ПериодВыполнения

&НаКлиенте
Процедура ПриИзмененииПараметровРазмещения(ИмяРеквизита)
	
	Если ИзменилосьСохраненноеЗначение(ЭтаФорма, ИмяРеквизита, ЭтаФорма[ИмяРеквизита]) Тогда
		
		ПриИзмененииПараметровРазмещенияНаСервере(ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровРазмещенияНаСервере(ИмяРеквизита)
	
	ИзмененныеРеквизиты = ИмяРеквизита;
	Если НЕ РучноеРазмещениеВГрафике Тогда
		РучноеРазмещениеВГрафике = Истина;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РучноеРазмещениеВГрафике";
	КонецЕсли;

	Если НЕ РассчитатьГраницыЭтапа(ИмяРеквизита) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать границы этапа.';
								|en = 'Cannot calculate the stage limits.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяРеквизита);
		
		ВосстановитьСохраненныеЗначения(ЭтаФорма);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСохраненныеЗначения(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьПериодВыполненияЭтапа(НачалоПериода, ОкончаниеПериода)
	
	Если НЕ РассчитатьПериодВыполнения(НачалоПериода, ОкончаниеПериода) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать границы этапа.';
								|en = 'Cannot calculate the stage limits.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВосстановитьСохраненныеЗначения(ЭтаФорма);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСохраненныеЗначения(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НачалоЭтапа, ОкончаниеЭтапа");
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьИнтервалыЗанятости()
	
	ОбновитьСоставКолонокЗанятости();
	
	ОбновитьДоступностьВидовРабочихЦентров();
	
	РассчитатьОбщиеИтоги();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗанятостьВидовРабочихЦентров");

КонецПроцедуры

&НаСервере
Функция РассчитатьГраницыЭтапа(ИмяРеквизита)
	
	Если НачалоЭтапа > ОкончаниеЭтапа Тогда 
		Если НаправлениеРазмещения(ИмяРеквизита) > 0 Тогда
			ОкончаниеЭтапа = НачалоЭтапа;
		Иначе
			НачалоЭтапа = ОкончаниеЭтапа;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция РассчитатьПериодВыполнения(ЛеваяГраница = '00010101', ПраваяГраница = '00010101')
	
	Если ЛеваяГраница <> '00010101' Тогда
		
		НачалоЭтапа = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
			ЛеваяГраница, ИнтервалПланирования, НачалоИнтервалаПланирования);
			
	КонецЕсли;
	
	Если ПраваяГраница <> '00010101' Тогда
		
		ОкончаниеЭтапа = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(
			ПраваяГраница, ИнтервалПланирования, ОкончаниеИнтервалаПланирования);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ЗанятостьВидовРабочихЦентров

#Область Заполнение

&НаСервере
Процедура ОбновитьСоставКолонокЗанятости()
	
	ДобавляемыеИнтервалы = Новый Массив;
	УдаляемыеИнтервалы = Новый Массив;
	
	ИнтервалыПериода = ИнтервалыИзПериодаВыполнения(ЭтаФорма.НачалоЭтапа,
													ЭтаФорма.ОкончаниеЭтапа,
													ЭтаФорма.ИнтервалПланирования);
	
	// Новые интервалы.
	Для Каждого Интервал Из ИнтервалыПериода Цикл
		
		Если ОтображаемыеИнтервалы.НайтиПоЗначению(Интервал) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеИнтервалы.Добавить(Интервал);
		
	КонецЦикла;
	
	// Интервалы к удалению.
	Для Каждого ОтображаемыйИнтервал Из ОтображаемыеИнтервалы Цикл
		
		Интервал = ОтображаемыйИнтервал.Значение;
		
		Если ИнтервалыПериода.Найти(Интервал) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдаляемыеИнтервалы.Добавить(Интервал);
		
	КонецЦикла;
	
	ИзменитьСоставКолонокЗанятости(ДобавляемыеИнтервалы, УдаляемыеИнтервалы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставКолонокЗанятости(ДобавляемыеИнтервалы = Неопределено, УдаляемыеИнтервалы = Неопределено)
	
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	
	ПутьКДанным = "ЗанятостьВидовРабочихЦентров";
	
	ОписаниеГруппыКолонокИнтервал = ОписаниеГруппыКолонокИнтервал();
	
	// Реквизиты к добавлению.
	Если ДобавляемыеИнтервалы <> Неопределено Тогда
			
		Для Каждого Интервал Из ДобавляемыеИнтервалы Цикл
			
			ИмяКолонкиИнтервал = ИмяКолонкиИнтервал(Интервал);
			
			Для Каждого ОписаниеКолонки Из ОписаниеГруппыКолонокИнтервал Цикл
				
				ИмяКолонки = ИмяКолонкиИнтервал + ОписаниеКолонки.Имя;
				
				НоваяКолонка = Новый РеквизитФормы(
						ИмяКолонки, ОписаниеКолонки.Тип, ПутьКДанным);
				
				ДобавляемыеРеквизиты.Добавить(НоваяКолонка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Реквизиты к удалению.
	Если УдаляемыеИнтервалы <> Неопределено Тогда
		
		Для Каждого Интервал Из УдаляемыеИнтервалы Цикл
			
			ИмяКолонкиИнтервал = ИмяКолонкиИнтервал(Интервал);
			
			Для Каждого ОписаниеКолонки Из ОписаниеГруппыКолонокИнтервал Цикл
				
				ИмяКолонки = ИмяКолонкиИнтервал + ОписаниеКолонки.Имя;
				
				УдаляемыеРеквизиты.Добавить(ПутьКДанным + "." + ИмяКолонки);
				
				Элементы.Удалить(Элементы.Найти(ИмяКолонки));
				
			КонецЦикла;
			
			Элементы.Удалить(Элементы.Найти(ИмяКолонкиИнтервал + ИмяГруппыИнтервал()));
			
			ОтображаемыеИнтервалы.Удалить(ОтображаемыеИнтервалы.НайтиПоЗначению(Интервал));
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Удаляем и добавляем реквизиты формы.
	Если ДобавляемыеРеквизиты.Количество() > 0 ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
		
	КонецЕсли;
	
	КоличествоИнтервалов = ОтображаемыеИнтервалы.Количество();
	ТребуетсяУпорядоченнаяВставка = КоличествоИнтервалов > 0;
	
	// Добавляем элементы формы, если таких еще нет.
	Для Каждого Интервал Из ДобавляемыеИнтервалы Цикл
		
		ИмяКолонкиИнтервал = ИмяКолонкиИнтервал(Интервал);
		
		Если ТребуетсяУпорядоченнаяВставка Тогда
			
			Если Интервал < ОтображаемыеИнтервалы[0].Значение Тогда
				Индекс = 0;
			ИначеЕсли Интервал > ОтображаемыеИнтервалы[КоличествоИнтервалов-1].Значение Тогда
				Индекс = КоличествоИнтервалов;
			Иначе
				Индекс = 0;
				Для Каждого ОтображаемыйИнтервал Из ОтображаемыеИнтервалы Цикл
					Если Интервал < ОтображаемыйИнтервал.Значение Тогда
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			ОтображаемыеИнтервалы.Вставить(Индекс, Интервал, ИмяКолонкиИнтервал);
			
		Иначе
			
			ОтображаемыеИнтервалы.Добавить(Интервал, ИмяКолонкиИнтервал);
			
		КонецЕсли;
		
		КоличествоИнтервалов = КоличествоИнтервалов + 1;
		
		// Найдем колонку, перед которой нужно добавить новую
		ГраницаВставки = Элементы.ЗанятостьПраваяГраница;
		
		Для Каждого ТекущаяКолонка Из Элементы.ЗанятостьВидовРабочихЦентров.ПодчиненныеЭлементы Цикл
			
			Если СтрНайти(ТекущаяКолонка.Имя, ИмяГруппыИнтервал()) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийИнтервал = ИнтервалИзИмениКолонки(ТекущаяКолонка.Имя);
			Если ТекущийИнтервал > Интервал Тогда
				ГраницаВставки = ТекущаяКолонка;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим группу, в которой будут размещены новые элементы
		
		ГруппаКолонокИнтервал = Элементы.Вставить(
			ИмяКолонкиИнтервал + ИмяГруппыИнтервал(), 
			Тип("ГруппаФормы"), 
			Элементы.ЗанятостьВидовРабочихЦентров, 
			ГраницаВставки);
		
		ГруппаКолонокИнтервал.Заголовок = ЗаголовокКолонкиИнтервал(Интервал);
		ГруппаКолонокИнтервал.ОтображатьВШапке    = Истина;
		ГруппаКолонокИнтервал.ОтображатьЗаголовок = Истина;
		ГруппаКолонокИнтервал.Группировка = ГруппировкаКолонок.Вертикальная;
		
		// Добавим элементы
		Для Каждого ОписаниеКолонки Из ОписаниеГруппыКолонокИнтервал Цикл
			
			ИмяНовогоЭлемента = ИмяКолонкиИнтервал + ОписаниеКолонки.Имя;
			
			НовыйЭлемент = Элементы.Добавить(
					ИмяНовогоЭлемента, 
					Тип("ПолеФормы"), 
					ГруппаКолонокИнтервал);
			
			НовыйЭлемент.Вид    = ОписаниеКолонки.Вид;
			НовыйЭлемент.Формат = ОписаниеКолонки.Формат;
			НовыйЭлемент.Ширина = ОписаниеКолонки.Ширина;
			
			НовыйЭлемент.ПутьКДанным = ПутьКДанным + "." + ИмяНовогоЭлемента;
			НовыйЭлемент.ОтображатьВШапке = Ложь;
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИнтервал(Направление = 1)
	
	ДобавляемыеИнтервалы = Новый Массив;
	УдаляемыеИнтервалы   = Новый Массив;
	КоличествоИнтервалов = ОтображаемыеИнтервалы.Количество();
	
	Если КоличествоИнтервалов = 0 Тогда
		
		ИндексНачала = 0;
		ИндексКонца  = -1;
		
		ГраницаИнтервала = ТекущаяДатаСеанса();
		
	ИначеЕсли Направление > 0 Тогда 
		
		ИндексНачала = 0;
		ИндексКонца  = КоличествоИнтервалов-1;
		
		ГраницаИнтервала = ОтображаемыеИнтервалы[КоличествоИнтервалов-1].Значение;
		
	Иначе
		
		ИндексНачала = -КоличествоИнтервалов+1;
		ИндексКонца  = 0;
		
		ГраницаИнтервала = ОтображаемыеИнтервалы[0].Значение;
		
	КонецЕсли;
	
	Если Направление > 0 Тогда
		
		НовыйИнтервал = ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(
			ГраницаИнтервала+1, ИнтервалПланирования);
		
		ДобавляемыеИнтервалы.Добавить(НовыйИнтервал);
		
	Иначе
		
		НовыйИнтервал = ПланированиеПроизводстваКлиентСервер.ПредыдущийИнтервалПланирования(
			ГраницаИнтервала, ИнтервалПланирования);
		
		НовыйИнтервал = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
			НовыйИнтервал, ИнтервалПланирования);
		
		ДобавляемыеИнтервалы.Добавить(НовыйИнтервал);
		
	КонецЕсли;
	
	Для Индекс = ИндексНачала По ИндексКонца Цикл
		
		ОтображаемыйИнтервал = ОтображаемыеИнтервалы[МАКС(Индекс, -Индекс)];
		
		Интервал = ОтображаемыйИнтервал.Значение;
		ИмяКолонкиЗанято = ОтображаемыйИнтервал.Представление + ИмяПоляЗанято();
		
		ИнтервалЗанят = Ложь;
		Для Каждого СтрокаВРЦ Из ЗанятостьВидовРабочихЦентров Цикл
			Если СтрокаВРЦ[ИмяКолонкиЗанято] > 0 Тогда
				ИнтервалЗанят = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИнтервалЗанят Тогда
			Прервать;
		КонецЕсли;
		
		УдаляемыеИнтервалы.Добавить(Интервал);
		
	КонецЦикла;
	
	ИзменитьСоставКолонокЗанятости(ДобавляемыеИнтервалы, УдаляемыеИнтервалы);
	
	ОбновитьДоступностьВидовРабочихЦентров(, ДобавляемыеИнтервалы);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗанятостьВидовРабочихЦентров");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗанятостьВидовРабочихЦентров()
	
	ЗанятостьВидовРабочихЦентров.Очистить();
	
	Если ОтображаемыеИнтервалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресСтруктураЗанятости) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗанятости = ПолучитьИзВременногоХранилища(АдресСтруктураЗанятости);
	
	Если СтруктураЗанятости.МассивВРЦ.ВГраница() <> -1 Тогда
		
		ИмяПоляЗанято = ИмяПоляЗанято();
		ИмяПоляСвободно = ИмяПоляСвободно();
		ИмяПоляДоступность = ИмяПоляДоступность();
		
		ПараметрыОтбора = Новый Структура("ВидРабочегоЦентра, ДатаИнтервала");
		
		ЗанятоЭтапом = СтруктураЗанятости.ЗанятоЭтапом;
		
		ДоступноВИнтервале = ПрочитатьДоступностьВидовРабочихЦентров(
					СтруктураЗанятости.МассивВРЦ);
		
		Для Каждого ВидРабочегоЦентра Из СтруктураЗанятости.МассивВРЦ Цикл
			
			ПараметрыОтбора.ВидРабочегоЦентра = ВидРабочегоЦентра;
			
			НоваяСтрока = ЗанятостьВидовРабочихЦентров.Добавить();
			НоваяСтрока.ВидРабочегоЦентра = ВидРабочегоЦентра;
			НоваяСтрока.ИндикаторЗанято   = Истина;
			
			ИтогоЗанято = 0;
			ИтогоСвободно = 0;
			ИтогоДоступность = 0;
			
			Для Каждого ОтображаемыйИнтервал Из ОтображаемыеИнтервалы Цикл
		
				Интервал = ОтображаемыйИнтервал.Значение;
				
				ИмяКолонкиЗанято = ОтображаемыйИнтервал.Представление + ИмяПоляЗанято;
				ИмяКолонкиСвободно = ОтображаемыйИнтервал.Представление + ИмяПоляСвободно;
				ИмяКолонкиДоступность = ОтображаемыйИнтервал.Представление + ИмяПоляДоступность;
				
				ПараметрыОтбора.ДатаИнтервала = Интервал;
				
				Для Каждого Строка Из ЗанятоЭтапом.НайтиСтроки(ПараметрыОтбора) Цикл
					
					НоваяСтрока[ИмяКолонкиЗанято] = Строка.Количество/3600;
					ИтогоЗанято = ИтогоЗанято + Строка.Количество/3600;
					
					Прервать;
					
				КонецЦикла;
				
				Для Каждого Строка Из ДоступноВИнтервале.НайтиСтроки(ПараметрыОтбора) Цикл
					
					НоваяСтрока[ИмяКолонкиСвободно] = Строка.Свободно/3600;
					ИтогоСвободно = ИтогоСвободно + Строка.Свободно/3600;
					
					НоваяСтрока[ИмяКолонкиДоступность] = Строка.Доступность/3600;
					ИтогоДоступность = ИтогоДоступность + Строка.Доступность/3600;
					
					Прервать;
					
				КонецЦикла;
				
			КонецЦикла;
			
			НоваяСтрока.ИтогоЗанято = ИтогоЗанято;
			НоваяСтрока.ИтогоСвободно = ИтогоСвободно;
			НоваяСтрока.ИтогоДоступность = ИтогоДоступность;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗанятостьВидовРабочихЦентров");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьВидовРабочихЦентров(МассивВРЦ = Неопределено, Интервалы = Неопределено)
	
	Если МассивВРЦ = Неопределено Тогда
		МассивВРЦ = ОтображаемыеВидыРабочихЦентров();
	КонецЕсли;
	
	Если Интервалы = Неопределено Тогда
		Интервалы = ОтображаемыеИнтервалы.ВыгрузитьЗначения();
	КонецЕсли;
	
	ИмяПоляСвободно = ИмяПоляСвободно();
	ИмяПоляДоступность = ИмяПоляДоступность();
	
	ПараметрыОтбора = Новый Структура("ВидРабочегоЦентра, ДатаИнтервала");
	
	ДоступноВИнтервале = ПрочитатьДоступностьВидовРабочихЦентров(МассивВРЦ, Интервалы);
	
	Для Каждого СтрокаВРЦ Из ЗанятостьВидовРабочихЦентров Цикл
		
		Если МассивВРЦ.Найти(СтрокаВРЦ.ВидРабочегоЦентра) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИтогоСвободно = 0;
		ИтогоДоступность = 0;
		
		ПараметрыОтбора.ВидРабочегоЦентра = СтрокаВРЦ.ВидРабочегоЦентра;
		
		Для Каждого ОтображаемыйИнтервал Из ОтображаемыеИнтервалы Цикл
			
			ИмяКолонкиСвободно = ОтображаемыйИнтервал.Представление + ИмяПоляСвободно;
			ИмяКолонкиДоступность = ОтображаемыйИнтервал.Представление + ИмяПоляДоступность;
			
			Если Интервалы.Найти(ОтображаемыйИнтервал.Значение) <> Неопределено Тогда
				
				ПараметрыОтбора.ДатаИнтервала = ОтображаемыйИнтервал.Значение;
				
				СтрокаВРЦ[ИмяКолонкиСвободно] = 0;
				СтрокаВРЦ[ИмяКолонкиДоступность] = 0;
				
				Для Каждого Строка Из ДоступноВИнтервале.НайтиСтроки(ПараметрыОтбора) Цикл
					
					СтрокаВРЦ[ИмяКолонкиСвободно] = Строка.Свободно/3600;
					СтрокаВРЦ[ИмяКолонкиДоступность] = Строка.Доступность/3600;
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ИтогоСвободно = ИтогоСвободно + СтрокаВРЦ[ИмяКолонкиСвободно];
			ИтогоДоступность = ИтогоДоступность + СтрокаВРЦ[ИмяКолонкиДоступность];
			
		КонецЦикла;
		
		СтрокаВРЦ.ИтогоСвободно = ИтогоСвободно;
		СтрокаВРЦ.ИтогоДоступность = ИтогоДоступность;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьДоступностьВидовРабочихЦентров(МассивВРЦ = Неопределено, Интервалы = Неопределено)
	
	Если МассивВРЦ = Неопределено Тогда
		МассивВРЦ = ОтображаемыеВидыРабочихЦентров();
	КонецЕсли;
	
	Если Интервалы = Неопределено Тогда
		Интервалы = ОтображаемыеИнтервалы.ВыгрузитьЗначения();
	КонецЕсли;
	
	КоличествоИнтервалов = Интервалы.Количество();
	Если КоличествоИнтервалов = 0 ИЛИ МассивВРЦ.Количество() = 0 Тогда
		Возврат ПустаяТаблицаДоступность();
	КонецЕсли;
	
	НачалоПериода = Интервалы[0];
	ОкончаниеПериода = Интервалы[КоличествоИнтервалов-1];
	
	ПараметрыПланирования = Обработки.ПланированиеГрафикаПроизводства2_2.ПараметрыПланированияГрафика();
	
	Обработки.ПланированиеГрафикаПроизводства2_2.ПрочитатьРеквизитыРаспоряжения(
				ПараметрыПланирования, 
				Распоряжение);
	
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить(Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Обработки.ПланированиеГрафикаПроизводства2_2.СоздатьВТДоступностьВидовРЦ(
				МенеджерВременныхТаблиц,
				"ВТДоступность",
				МассивВРЦ,
				МассивЭтапов,
				НачалоПериода,
				ОкончаниеПериода,
				ПараметрыПланирования);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Исполнитель               КАК ВидРабочегоЦентра,
		|	Таблица.ДатаИнтервала             КАК ДатаИнтервала,
		|	СУММА(Таблица.КоличествоПриход)   КАК Доступность,
		|	СУММА(Таблица.КоличествоПриход
		|		- Таблица.КоличествоРасход)   КАК Свободно
		|ИЗ
		|	ВТДоступность КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Исполнитель,
		|	Таблица.ДатаИнтервала
		|
		|ИМЕЮЩИЕ
		|	СУММА(Таблица.КоличествоПриход) > 0");
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаДоступности = Запрос.Выполнить().Выгрузить();
	ТаблицаДоступности.Индексы.Добавить("ВидРабочегоЦентра, ДатаИнтервала");
	
	Возврат ТаблицаДоступности;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляЗанято()
	
	Возврат "Занято";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляСвободно()
	
	Возврат "Свободно";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляДоступность()
	
	Возврат "Доступность";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппыИнтервал()
	
	Возврат "ГруппаИнтервал";
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнтервалыИзПериодаВыполнения(Знач НачалоЭтапа, Знач ОкончаниеЭтапа, Знач ИнтервалПланирования)
	
	Возврат ИнтервалыПериода(НачалоЭтапа, ОкончаниеЭтапа, ИнтервалПланирования);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиИнтервал(Интервал)

	Возврат "_К" + Формат(Интервал, "ДФ=yyyyMMddHHmm");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалИзИмениКолонки(ИмяКолонки)

	Возврат Дата(Сред(ИмяКолонки,3,12));

КонецФункции

&НаСервере
Функция ЗаголовокКолонкиИнтервал(Интервал)
	
	Возврат ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(Интервал, ИнтервалПланирования);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьОписаниеКолонки(СписокКолонок, Имя, Тип)
	
	ОписаниеКолонки = Новый Структура( 
			"Имя,
			|Тип,
			|Вид,
			|Формат,
			|Ширина");
	
	ОписаниеКолонки.Имя = Имя;
	ОписаниеКолонки.Тип = Тип;
	
	СписокКолонок.Добавить(ОписаниеКолонки);
	
	Возврат ОписаниеКолонки;
	
КонецФункции

// Возвращает описание группы колонок интервал
//
// Возвращаемое значение:
//  Массив из Структура - содержит:
//             * Имя - Строка - 
//             * Тип - Тип -
//             * Вид - ВидПоляФормы -
//             * Формат - Строка - 
//             * Ширина - Число - 
//
&НаСервереБезКонтекста
Функция ОписаниеГруппыКолонокИнтервал()
	
	Результат = Новый Массив;
	
	ТипЧасы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный));
	
	НоваяКолонка = ДобавитьОписаниеКолонки(Результат, ИмяПоляДоступность(), ТипЧасы);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.Формат = "ЧДЦ=2; ЧН='0'";
	НоваяКолонка.Ширина = 14;
	
	НоваяКолонка = ДобавитьОписаниеКолонки(Результат, ИмяПоляСвободно(), ТипЧасы);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.Формат = "ЧДЦ=2; ЧН='0'";
	НоваяКолонка.Ширина = 14;
	
	НоваяКолонка = ДобавитьОписаниеКолонки(Результат, ИмяПоляЗанято(), ТипЧасы);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.Формат = "";
	НоваяКолонка.Ширина = 14;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустаяТаблицаЗанятости()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	Таблица.Колонки.Добавить("ДатаИнтервала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Количество");

	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустаяТаблицаДоступность()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	Таблица.Колонки.Добавить("ДатаИнтервала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Доступность");
	Таблица.Колонки.Добавить("Свободно");

	Возврат Таблица;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоСтроке(Строка, ОтображаемыеИнтервалы)
	
	ИмяПоляДоступность = ИмяПоляДоступность();
	ИмяПоляСвободно = ИмяПоляСвободно();
	ИмяПоляЗанято = ИмяПоляЗанято();
	
	ИтогоДоступность = 0;
	ИтогоСвободно = 0;
	ИтогоЗанято = 0;
	
	Для Каждого ОтображаемыйИнтервал Из ОтображаемыеИнтервалы Цикл
		
		ИтогоЗанято = ИтогоЗанято + Строка[ОтображаемыйИнтервал.Представление + ИмяПоляЗанято];
		ИтогоСвободно = ИтогоСвободно + Строка[ОтображаемыйИнтервал.Представление + ИмяПоляСвободно];
		ИтогоДоступность = ИтогоДоступность + Строка[ОтображаемыйИнтервал.Представление + ИмяПоляДоступность];
		
	КонецЦикла;
	
	Строка.ИтогоЗанято = ИтогоЗанято;
	Строка.ИтогоСвободно = ИтогоСвободно;
	Строка.ИтогоДоступность = ИтогоДоступность;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОбщиеИтоги()
	
	Для Каждого Строка Из ЗанятостьВидовРабочихЦентров Цикл
		РассчитатьИтогиПоСтроке(Строка, ОтображаемыеИнтервалы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОкончаниеРедактированияЗанятости()
	
	Идентификатор = Элементы.ЗанятостьВидовРабочихЦентров.ТекущаяСтрока;
	
	Если Идентификатор <> Неопределено Тогда
		
		ТекущаяСтрока = ЗанятостьВидовРабочихЦентров.НайтиПоИдентификатору(Идентификатор);
		РассчитатьИтогиПоСтроке(ТекущаяСтрока, ОтображаемыеИнтервалы);
		
	КонецЕсли;
	
	Если Элементы.ГруппаОтклоненияОтНорматива.Видимость Тогда
		
		ВывестиОтклоненияОтНорматива();
		
	Иначе
		
		ОбновитьГиперссылкуОтклоненияОтНорматива();
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗанятостьВидовРабочихЦентров");
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеВидыРабочихЦентров()
	
	Возврат ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ЗанятостьВидовРабочихЦентров, "ВидРабочегоЦентра");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПериодВыполненияИИнтервалыЗанятости(Форма)
	
	Если НЕ Форма.РучноеРазмещениеВГрафике
		ИЛИ Форма.ЗанятостьВидовРабочихЦентров.Количество() = 0
		Тогда
		Возврат 0;
	КонецЕсли;
	
	ИнтервалыПериода = ИнтервалыИзПериодаВыполнения(
									Форма.НачалоЭтапа,
									Форма.ОкончаниеЭтапа,
									Форма.ИнтервалПланирования);
	
	ОтображаемыеИнтервалы = Форма.ОтображаемыеИнтервалы.ВыгрузитьЗначения();
	
	Для Каждого Интервал Из ОтображаемыеИнтервалы Цикл
		
		Если ИнтервалыПериода.Найти(Интервал) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат КодОшибкиЗанятостьВыходитЗаГраницыЭтапа();
		
	КонецЦикла;
	
	Для Каждого Интервал Из ИнтервалыПериода Цикл
		
		Если ОтображаемыеИнтервалы.Найти(Интервал) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат КодОшибкиПериодВыполненияНеСоответствуетИнтервалам();
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ЗанятоЭтапомВХранилище()
	
	ИмяПоляЗанято = ИмяПоляЗанято();
	ТаблицаЗанятости = ПустаяТаблицаЗанятости();
	
	Для Каждого Строка Из ЗанятостьВидовРабочихЦентров Цикл
		
		Для Каждого ОтображаемыйИнтервал Из ОтображаемыеИнтервалы Цикл
			
			Если Строка[ОтображаемыйИнтервал.Представление + ИмяПоляЗанято] > 0 Тогда
				
				НоваяСтрока = ТаблицаЗанятости.Добавить();
				
				НоваяСтрока.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
				НоваяСтрока.ДатаИнтервала = ОтображаемыйИнтервал.Значение;
				
				НоваяСтрока.Количество = Строка[ОтображаемыйИнтервал.Представление + ИмяПоляЗанято] * 3600;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	ТаблицаЗанятости.Свернуть("ВидРабочегоЦентра, ДатаИнтервала", "Количество");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗанятости, УникальныйИдентификатор);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеРучногоРазмещениеВГрафике(Форма)
	
	Результат = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	Результат.Рассчитан = Истина;
	Результат.НачалоЭтапа                     = Форма.НачалоЭтапа;
	Результат.ОкончаниеПредварительногоБуфера = Форма.НачалоЭтапа;
	Результат.НачалоЗавершающегоБуфера        = Форма.ОкончаниеЭтапа;
	Результат.ОкончаниеЭтапа                  = Форма.ОкончаниеЭтапа;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОтклоненияОтНорматива

&НаСервере
Процедура ВывестиОтклоненияОтНорматива()
	
	ОтклоненияОтНорматива.Очистить();
	
	Области = ОбластиТаблицыОтклоненияОтНорматива();
	
	ОтклоненияОтНорматива.Вывести(Области.Заголовок);
	
	Для Каждого Строка Из ОтклоненияОтНорматива() Цикл
		
		Области.Строка.Параметры.Заполнить(Строка);
		
		ОтклоненияОтНорматива.Вывести(Области.Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбластиТаблицыОтклоненияОтНорматива()
	
	Результат = Новый Структура();
	
	Таблица = Новый ТабличныйДокумент;
	
	// Отступ
	Область = Таблица.Область("R1C1:R1C1");
	Область.ШиринаКолонки = 5;
	
	// Область "Заголовок"
	
	// Вид рабочего центра
	Область = ОбластьЯчеекЗаголовок(Таблица, "R2C2:R3C2", 50);
	Область.Текст = НСтр("ru = 'Вид рабочего центра';
						|en = 'Work center type'");
	
	// Время работы
	Область = ОбластьЯчеекЗаголовок(Таблица, "R2C3:R2C5", 45);
	Область.Текст = НСтр("ru = 'Время работы, ч';
						|en = 'Working hours, h'");
	
	// Норматив
	Область = ОбластьЯчеекЗаголовок(Таблица, "R3C3:R3C3", 15);
	Область.Текст = НСтр("ru = 'Норматив';
						|en = 'Standard'");
	
	// Занято
	Область = ОбластьЯчеекЗаголовок(Таблица, "R3C4:R3C4", 15);
	Область.Текст = НСтр("ru = 'Занято';
						|en = 'Used'");
	
	// Отклонение
	Область = ОбластьЯчеекЗаголовок(Таблица, "R3C5:R3C5", 15);
	Область.Текст = НСтр("ru = 'Отклонение';
						|en = 'Variance'");
	
	Результат.Вставить("Заголовок", Таблица.ПолучитьОбласть("R1C1:R3C5"));
	
	// Область "Строка"
	
	// Вид рабочего центра
	Область = ОбластьЯчеекВидРабочегоЦентра(Таблица, "R4C2:R4C2");
	
	// Норматив
	Область = ОбластьЯчеекКоличество(Таблица, "R4C3:R4C3");
	Область.Параметр = "Норматив";
	
	// Занято
	Область = ОбластьЯчеекКоличество(Таблица, "R4C4:R4C4");
	Область.Параметр = "Занято";
	
	// Отклонение
	Область = ОбластьЯчеекКоличество(Таблица, "R4C5:R4C5");
	Область.Параметр = "Отклонение";
	Область.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;

	Результат.Вставить("Строка", Таблица.ПолучитьОбласть("R4C1:R4C5"));
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ОбластьЯчеекЗаголовок(Таблица, ИмяОбласти, Ширина)
	
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Область = Таблица.Область(ИмяОбласти);
	
	Область.ЦветФона = WebЦвета.ДымчатоБелый;
	Область.Шрифт    = Новый Шрифт("Tahoma", 8);
	
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Верх;
	
	Область.ШиринаКолонки = Ширина;
	
	Область.Обвести(Рамка,Рамка,Рамка,Рамка);
	Область.Объединить();

	Возврат Область;
	
КонецФункции

&НаСервере
Функция ОбластьЯчеекВидРабочегоЦентра(Таблица, ИмяОбласти)
	
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Область = Таблица.Область(ИмяОбласти);
	
	Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	Область.Параметр            = "ВидРабочегоЦентра";
	Область.ПараметрРасшифровки = "ВидРабочегоЦентра";
	
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Низ;
	
	Область.Обвести(Рамка,Рамка,Рамка,Рамка);
	
	Возврат Область;
	
КонецФункции

&НаСервере
Функция ОбластьЯчеекКоличество(Таблица, ИмяОбласти)
	
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Область = Таблица.Область(ИмяОбласти);
	
	Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Низ;
	
	Область.Формат = "ЧДЦ=2";
	
	Область.Обвести(Рамка,Рамка,Рамка,Рамка);
	
	Возврат Область;
	
КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкуОтклоненияОтНорматива()
	
	ЕстьОтклонения = Ложь;
	
	Если Нормативы.Количество() > 0 Тогда
		
		ПараметрыОтбора = Новый Структура("ВидРабочегоЦентра");
		
		Соответствие = Новый Соответствие;
		
		Для Каждого Строка Из ЗанятостьВидовРабочихЦентров Цикл
			
			ПараметрыОтбора.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
			
			Если Нормативы.НайтиСтроки(ПараметрыОтбора).ВГраница() = -1 Тогда
				ЕстьОтклонения = Истина;
				Прервать;
			КонецЕсли;
			
			ТекущееЗначение = Соответствие.Получить(Строка.ВидРабочегоЦентра);
			
			Если ТекущееЗначение <> Неопределено Тогда
				Соответствие[Строка.ВидРабочегоЦентра] = ТекущееЗначение + Строка.ИтогоЗанято;
			Иначе
				Соответствие.Вставить(Строка.ВидРабочегоЦентра, Строка.ИтогоЗанято);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьОтклонения Тогда
			
			Для Каждого Строка Из Нормативы Цикл
				
				Если Соответствие.Получить(Строка.ВидРабочегоЦентра) <> Строка.Количество Тогда
					ЕстьОтклонения = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГиперссылкаОтклоненияОтНорматива.Видимость = ЕстьОтклонения;
	
КонецПроцедуры

&НаСервере
Функция ОтклоненияОтНорматива()
	
	Результат = ПустаяТаблицаОтклоненияОтНорматива();
	
	Для Каждого Строка Из Нормативы Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
		НоваяСтрока.Норматив          = Строка.Количество;
		НоваяСтрока.Отклонение        = -Строка.Количество;
	
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ВидРабочегоЦентра");
	
	Для Каждого Строка Из ЗанятостьВидовРабочихЦентров Цикл
		
		ПараметрыОтбора.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.ВГраница() = -1 Тогда
			ТекущаяСтрока = Результат.Добавить();
			ТекущаяСтрока.ВидРабочегоЦентра = Строка.ВидРабочегоЦентра;
		Иначе
			ТекущаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
		ТекущаяСтрока.Занято     = ТекущаяСтрока.Занято + Строка.ИтогоЗанято;
		ТекущаяСтрока.Отклонение = ТекущаяСтрока.Занято - ТекущаяСтрока.Норматив;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СкрытьОтклоненияОтНорматива()
	
	ОтклоненияОтНорматива.Очистить();
	
	ОбновитьГиперссылкуОтклоненияОтНорматива();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустаяТаблицаОтклоненияОтНорматива()
	
	Таблица = Новый ТаблицаЗначений;
	
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров");
	Таблица.Колонки.Добавить("ВидРабочегоЦентра", ОписаниеТипа);
	
	ОписаниеТипа = ОбщегоНазначения.ОписаниеТипаЧисло(10, 2);
	Таблица.Колонки.Добавить("Норматив",   ОписаниеТипа);
	Таблица.Колонки.Добавить("Занято",     ОписаниеТипа);
	Таблица.Колонки.Добавить("Отклонение", ОписаниеТипа);

	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполнения

&НаСервере
Процедура ОбработкаПроверкиЗанятостиВидовРабочихЦентров(Отказ)
	
	Если Не РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ЗанятостьВидовРабочихЦентров";
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Занятость видов рабочих центров"".';
							|en = 'Column ""%1"" in line %2 of list ""Stage placement in work center calendar"" is not filled in.'");
	
	НомерСтроки = 1;
	
	Для Каждого Строка Из ЗанятостьВидовРабочихЦентров Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ВидРабочегоЦентра) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						ИмяТабличнойЧасти, НомерСтроки, "ВидРабочегоЦентра");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, 
				НСтр("ru = 'Вид рабочего центра';
					|en = 'Work center type'"), НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, 
						Поле,, 
						Отказ); 
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиПериодаВыполненияИИнтерваловЗанятости(Отказ)

	КодОшибки = ПроверитьПериодВыполненияИИнтервалыЗанятости(ЭтаФорма);
	
	Если КодОшибки = КодОшибкиЗанятостьВыходитЗаГраницыЭтапа() Тогда
		
		Поле = "ЗанятостьВидовРабочихЦентров";
		
		ТекстСообщения = НСтр("ru = 'Занятость видов рабочих центров выходит за границы этапа';
								|en = 'Stage placement in work center calendar exceeds the stage'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					Поле,, 
					Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗавершен()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");

КонецФункции

&НаСервереБезКонтекста
Функция СтатусРабочийГрафик()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодОшибкиПериодВыполненияНеСоответствуетИнтервалам()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодОшибкиЗанятостьВыходитЗаГраницыЭтапа()
	
	Возврат 2;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПрижатия()

	Результат = Новый Структура;
	
	Результат.Вставить("ЛеваяГраница", '00010101');
	Результат.Вставить("ШаблонЛеваяГраница", "");
	
	Результат.Вставить("ПраваяГраница", '00010101');
	Результат.Вставить("ШаблонПраваяГраница", "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалыПериода(НачалоПериода, ОкончаниеПериода, ИнтервалПланирования)
	
	ИнтервалыПериода = Новый Массив;
	
	Если НачалоПериода = '000101010000' ИЛИ ОкончаниеПериода = '000101010000' Тогда
		Возврат ИнтервалыПериода;
	КонецЕсли;
	
	ГраницаПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
																НачалоПериода,
																ИнтервалПланирования);
	
	Пока ГраницаПериода <= ОкончаниеПериода Цикл
		
		ИнтервалыПериода.Добавить(ГраницаПериода);
		
		ГраницаПериода = ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(
																ГраницаПериода+1, 
																ИнтервалПланирования);
	КонецЦикла;
	
	Возврат ИнтервалыПериода;
	
КонецФункции

&НаСервереБезКонтекста
Функция НаправлениеРазмещения(ИмяРеквизита)

	Если Найти(ИмяРеквизита, "Начало") > 0 Тогда
		Возврат 1;
	Иначе
		Возврат -1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РазделОсновнойПрограммы

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти

