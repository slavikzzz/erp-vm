
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ОбновитьОтборыПриПовторномОткрытии;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПланируетсяГрафикПроизводства = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	КомандаПланированияДоступна = Обработки.ПланированиеГрафикаПроизводства2_2.ПланированиеДоступно();
	
	ФоновоеЗадание = Новый Структура("
		|ИмяЗадания,
		|ИдентификаторЗадания,
		|АдресХранилища");
	
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ОтборДатаЗапуска.СписокВыбора);
	
	УстановитьСвойстваДинамическогоСписка();
	
	Если Параметры.Свойство("СтруктураОтборов") Тогда
		ЗаполнитьОтборыПоСтруктуреОтборов(Параметры.СтруктураОтборов);
	ИначеЕсли Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		ЗаполнитьОтборыПоСтруктуреОтборов(Параметры.СтруктураБыстрогоОтбора);
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, Элементы.ОтборДатаЗапуска.СписокВыбора, ДатаСобытия, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Подразделение", Подразделение, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Распоряжение", Распоряжение, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Статус", Статус, СтруктураБыстрогоОтбора);
	
	ОтборПоСостояниюЭтаповПриСозданииНаСервере();
	
	ПравоДоступаУкомплектованность = ПравоДоступа("Использование", Метаданные.Отчеты.УкомплектованностьЗаказов);
	ПравоДоступаСостояниеОбеспечения = ПравоДоступа("Использование", Метаданные.Обработки.СостояниеОбеспеченияЗаказов);
	
	ПоляОграничения = Новый Массив;
	ПоляОграничения.Добавить("СписокЭтаповОстатокТрудоемкости");
	ПоляОграничения.Добавить("СписокЭтаповПроцентВыполнения");
	Список.УстановитьОграниченияИспользованияВГруппировке(ПоляОграничения);
	Список.УстановитьОграниченияИспользованияВПорядке(ПоляОграничения);
	Список.УстановитьОграниченияИспользованияВОтборе(ПоляОграничения);
	
	#Область УниверсальныеМеханизмы
	
	ТекущиеДелаПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Список);
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	#КонецОбласти
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	ПодключитьОбработчикОжиданияОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбновитьОтборыПриПовторномОткрытии = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ТребуетсяОбновитьУстановленныеОтборы(ИмяСобытия, Источник) Тогда
		
		УстановитьОтборыПоСтруктуреОтборов(Параметр);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗакрытиеЗаказов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Настройки.Удалить("ПодразделениеДиспетчер");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ДопПанельСвернута") = Истина Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоложениеДопПанели");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, СтруктураБыстрогоОтбора, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ОбеспечениеВДокументахКлиент.СписокПриИзменении(ЭтотОбъект, "Документ.ЭтапПроизводства2_2");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыСписка");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыСписка", 0.2, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	СписокКлючей = Строки.ПолучитьКлючи();
	
	Если СписокКлючей.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаОстатокТрудоемкости = Строки[СписокКлючей[0]].Данные.Свойство("ОстатокТрудоемкости");
	ЕстьКолонкаПроцентВыполнения = Строки[СписокКлючей[0]].Данные.Свойство("ПроцентВыполнения");
	
	Если ЕстьКолонкаОстатокТрудоемкости Или ЕстьКолонкаПроцентВыполнения Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокЭтапов", СписокКлючей);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Трудозатраты.Этап КАК Этап,
		|	СУММА(Трудозатраты.План) КАК План,
		|	СУММА(Трудозатраты.Остаток) КАК Остаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		Трудозатраты.Этап КАК Этап,
		|		Трудозатраты.ВидРабот КАК ВидРабот,
		|		СУММА(Трудозатраты.План) КАК План,
		|		ВЫБОР
		|			КОГДА СУММА(Трудозатраты.Факт) > СУММА(Трудозатраты.План)
		|				ТОГДА 0
		|			ИНАЧЕ СУММА(Трудозатраты.План) - СУММА(Трудозатраты.Факт)
		|		КОНЕЦ КАК Остаток
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Трудозатраты.Ссылка КАК Этап,
		|			Трудозатраты.ВидРабот КАК ВидРабот,
		|			ВЫБОР
		|				КОГДА Трудозатраты.ВидРабот.КратностьТрудоемкости = 0
		|					ТОГДА 0
		|				ИНАЧЕ Трудозатраты.Количество * Трудозатраты.ВидРабот.Трудоемкость / Трудозатраты.ВидРабот.КратностьТрудоемкости
		|			КОНЕЦ КАК План,
		|			ВЫБОР
		|				КОГДА НЕ Трудозатраты.Выполнено
		|				ИЛИ Трудозатраты.ВидРабот.КратностьТрудоемкости = 0
		|					ТОГДА 0
		|				ИНАЧЕ Трудозатраты.Количество * Трудозатраты.ВидРабот.Трудоемкость / Трудозатраты.ВидРабот.КратностьТрудоемкости
		|			КОНЕЦ КАК Факт
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
		|		ГДЕ
		|			Трудозатраты.Ссылка В (&СписокЭтапов)
		|			И НЕ Трудозатраты.Отменено
		|			И Трудозатраты.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ
		|			Этапы.Ссылка КАК Этап,
		|			ТрудозатратыОпераций.ВидРабот,
		|			0 КАК План,
		|			ВЫБОР
		|				КОГДА ТрудозатратыОпераций.ВидРабот.КратностьТрудоемкости = 0
		|					ТОГДА 0
		|				ИНАЧЕ ТрудозатратыОпераций.Количество * ТрудозатратыОпераций.ВидРабот.Трудоемкость /
		|					ТрудозатратыОпераций.ВидРабот.КратностьТрудоемкости
		|			КОНЕЦ КАК Факт
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2 КАК Этапы
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.Трудозатраты КАК ТрудозатратыОпераций
		|				ПО Этапы.Ссылка = ТрудозатратыОпераций.Ссылка.Этап
		|				И ТрудозатратыОпераций.Ссылка.Проведен
		|				И ТрудозатратыОпераций.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|		ГДЕ
		|			Этапы.Ссылка В (&СписокЭтапов)
		|			И Этапы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|			И Этапы.ОперацияКакРаспоряжениеВыработки) КАК Трудозатраты
		|	СГРУППИРОВАТЬ ПО
		|		Трудозатраты.Этап,
		|		Трудозатраты.ВидРабот) КАК Трудозатраты
		|СГРУППИРОВАТЬ ПО
		|	Трудозатраты.Этап
		|ИМЕЮЩИЕ
		|	СУММА(Трудозатраты.Остаток) > 0";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = Строки[Выборка.Этап].Данные;
			Если ЕстьКолонкаОстатокТрудоемкости Тогда
				ДанныеСтроки["ОстатокТрудоемкости"] = Выборка.Остаток;
			КонецЕсли;
			Если ЕстьКолонкаПроцентВыполнения Тогда
				ДанныеСтроки["ПроцентВыполнения"] = ОкруглитьПроценты(100-Выборка.Остаток*100/Выборка.План);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КоманднаяПанельЭтапы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЭтапПроизводства2_2.Диспетчирование.Команда.ОбновитьСписок");
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭтап(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранныеЭтапы[0]);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦепочкуЭтапов(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			ДанныеСтроки.Распоряжение,
			ДанныеСтроки.ПартияПроизводства,,
			ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПартию(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.ТипПроизводственногоПроцесса 
				= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для этапов заказа с типом производственного процесса ""Без спецификаций"" изменение партии недоступно';
					|en = 'For order stages with ""No BOM"" production process type, lot change is not available'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму(
			"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
			Новый Структура("ПартияПроизводства, Этап", ДанныеСтроки.ПартияПроизводства, ДанныеСтроки.Ссылка),
			ЭтаФорма,
			ДанныеСтроки.ПартияПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПартию(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		ОткрытьФорму(
			"Обработка.ДелениеПартииПроизводства.Форма.ЗаполнениеПоСпецификации",
			Новый Структура("ПартияПроизводства, Этап", ДанныеСтроки.ПартияПроизводства, ДанныеСтроки.Ссылка),
			ЭтотОбъект,
			ДанныеСтроки.ПартияПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьЗаказ(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	ОткрытьФормуПланированияЗаказа(ДанныеСтроки.Распоряжение);

КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВыбранные(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИЗапланировать(ВыбранныеЭтапы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланировать(Этапы)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПланированиеГрафикаЭтапов", Истина);
	ПараметрыФормы.Вставить("Этапы", Этапы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИЗапланироватьЗавершение", 
			ЭтотОбъект, Этапы);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.НастройкиПланированияСпискаРаспоряженийИЭтапов", 
			ПараметрыФормы, ЭтаФорма, 
			УникальныйИдентификатор,,, 
			ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланироватьЗавершение(Результат, Этапы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Этапы", Этапы);
	
	Для Каждого КлючИЗначение Из Результат Цикл
		ПараметрыЗадания.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ЗапуститьФоновоеЗадание("ПланироватьГрафикПроизводства", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПередатьКВыполнению(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке этапов будет установлен статус ""К выполнению"". Продолжить?';
						|en = '""Released"" status will be set for the selected stages. Continue?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередатьКВыполнениюЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьКВыполнениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "КВыполнению");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru = 'К выполнению';
																																					|en = 'Released'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьНачалоВыполнения(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы(); 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияИзВыделенныхСтрок = Новый Структура("Подразделение,Организация");
	
	МассивСсылок = ЭтапыДляИзмененияСтатуса("Начат", ВыделенныеСтроки, ЗначенияИзВыделенныхСтрок);
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", МассивСсылок);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьНачалоВыполненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Подразделение", ЗначенияИзВыделенныхСтрок.Подразделение);
		ПараметрыФормы.Вставить("Организация", ЗначенияИзВыделенныхСтрок.Организация);
		ОткрытьФорму(
			"Документ.ЭтапПроизводства2_2.Форма.ПараметрыУстановкиСтатуса",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не требуется изменять статус выбранных этапов.';
									|en = 'Do not change status of the selected stages.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьНачалоВыполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Начат", РезультатВопроса);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru = 'Начат';
																																					|en = 'Started'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьВыполненным(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭтапыДляИзмененияСтатуса("Завершен", ВыделенныеСтроки);
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		СписокЗаказов = Новый СписокЗначений;
		СписокЗаказов.ЗагрузитьЗначения(ВыделенныеСтроки);
		
		СтруктураЗакрытия = Новый Структура;
		СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказов);
		СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
		СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
		
		ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
						ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не требуется изменять статус выбранных этапов.';
									|en = 'Do not change status of the selected stages.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЦепочкеЭтаповПриИзменении(Команда)
	
	ТипОтбораПоЦепочкеЭтапов = Команда.Имя;
	
	УстановитьОтборПоЦепочкеЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораПоДаннымЭтапа(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("СтруктураОтбораПоДаннымЭтапа", СтруктураОтбораПоДаннымЭтапа);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииОтбораПоДаннымЭтапаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ОтборПоСодержанию",
					ПараметрыФормы,
					ЭтотОбъект,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораПоДаннымЭтапаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.ИспользуетсяОтборПоИзделию
			ИЛИ Результат.ИспользуетсяОтборПоМатериалу
			ИЛИ Результат.ИспользуетсяОтборПоВРЦ
			ИЛИ Результат.ИспользуетсяОтборПоИсполнителю Тогда
			
			СтруктураОтбораПоДаннымЭтапа = Результат;
			
		Иначе
			
			СтруктураОтбораПоДаннымЭтапа = Неопределено;
			
		КонецЕсли;
		
		УстановитьОтборыПоДаннымЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСнятииОтбораПоДаннымЭтапа(Команда)
	
	Если СтруктураОтбораПоДаннымЭтапа <> Неопределено Тогда
		
		СтруктураОтбораПоДаннымЭтапа = Неопределено;
		
		УстановитьОтборыПоДаннымЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОпераций(Команда)
	
	ВыбранныеСтроки = ВыбранныеЭтапы();
	Если ВыбранныеСтроки.Количество() > 0 Тогда
		УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(ВыбранныеСтроки, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьПартию(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.ТипПроизводственногоПроцесса 
				= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для этапов заказа с типом производственного процесса ""Без спецификаций"" изменение партии недоступно';
					|en = 'For order stages with ""No BOM"" production process type, lot change is not available'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПартияПроизводства", ДанныеСтроки.ПартияПроизводства);
		ПараметрыФормы.Вставить("Этап", ДанныеСтроки.Ссылка);
		ПараметрыФормы.Вставить("Разделить", Истина);
		
		ОткрытьФорму(
			"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
			ПараметрыФормы,
			ЭтотОбъект,
			"" + ДанныеСтроки.ПартияПроизводства.УникальныйИдентификатор() + "_Разделить");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьБрак(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.ТипПроизводственногоПроцесса 
				= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для этапов заказа с типом производственного процесса ""Без спецификаций"" изменение партии недоступно';
					|en = 'For order stages with ""No BOM"" production process type, lot change is not available'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПартияПроизводства", ДанныеСтроки.ПартияПроизводства);
		ПараметрыФормы.Вставить("Этап", ДанныеСтроки.Ссылка);
		ПараметрыФормы.Вставить("ОтразитьБрак", Истина);
		
		ОткрытьФорму(
			"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
			ПараметрыФормы,
			ЭтотОбъект,
			"" + ДанныеСтроки.ПартияПроизводства.УникальныйИдентификатор() + "_Брак");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьПартию(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.ТипПроизводственногоПроцесса 
				= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для этапов заказа с типом производственного процесса ""Без спецификаций"" изменение партии недоступно';
					|en = 'For order stages with ""No BOM"" production process type, lot change is not available'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПартияПроизводства", ДанныеСтроки.ПартияПроизводства);
		ПараметрыФормы.Вставить("Этап", ДанныеСтроки.Ссылка);
		ПараметрыФормы.Вставить("СократитьУвеличить", Истина);
		
		ОткрытьФорму(
			"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
			ПараметрыФормы,
			ЭтотОбъект,
			"" + ДанныеСтроки.ПартияПроизводства.УникальныйИдентификатор() + "_Сократить");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьЭтап(Команда)
	
	ВыбранныеЭтапы = ВыбранныеЭтапы();
	
	Если ВыбранныеЭтапы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбранныеЭтапы[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		ОткрытьФормуДеление = Истина;
		ТекстПредупреждения = "";
		
		РазделитьЭтапКомандаНаСервере(ДанныеСтроки.Ссылка, ОткрытьФормуДеление, ТекстПредупреждения);
		
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если ОткрытьФормуДеление Тогда
			
			ОткрытьФорму(
				"Документ.ЭтапПроизводства2_2.Форма.ДелениеДокумента",
				Новый Структура("Ссылка", ДанныеСтроки.Ссылка),,
				ДанныеСтроки.Ссылка,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазделитьЭтапКомандаНаСервере(Ссылка, ОткрытьФормуДеление, ТекстПредупреждения)
	
	Если Не Документы.ЭтапПроизводства2_2.МожноРазделитьДокумент(Ссылка, ТекстПредупреждения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипПроизводственногоПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Ссылка,
		"ТипПроизводственногоПроцесса");
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		
		Документы.ЭтапПроизводства2_2.РазделитьДокумент(
			Ссылка, 0, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), Ложь);
		ОткрытьФормуДеление = Ложь;
		
	Иначе
		ОткрытьФормуДеление = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Универсальные

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Обеспечение
       
&НаКлиенте
Процедура ОтгрузитьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_ОТГРУЗИТЬ_ПРИОРИТЕТНО_ОБОСОБЛЕННО",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ_ПРИОРИТЕТНО_ОБОСОБЛЕННО",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КОбеспечениюЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОбеспечиватьЗаказ(Команда)
	
	ОбеспечениеВДокументахКлиент.ВыполнитьДействиеВСпискеЗаказовРазныхТипов(
		"ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ",
		Элементы.Список,
		ПредопределенноеЗначение("Документ.ЭтапПроизводства2_2.ПустаяСсылка"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УкомплектованностьЭтапа(Команда)
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьУкомплектованность(Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭлементовФормы

#Область Шапка

&НаКлиенте
Процедура ОтборПодразделениеДиспетчерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПодразделениеДиспетчер));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Подразделение", Подразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Подразделение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСтатусНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеЗначения", Статус);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ОтборПоСтатусу",
					ПараметрыФормы,
					ЭтотОбъект,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОчистка(Элемент, СтандартнаяОбработка)
	
	Если Статус.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Статус.Очистить();
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Статус = ВыбранноеЗначение;
		УстановитьОтборПоСтатусу();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаЗапускаПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, Элементы.ОтборДатаЗапуска.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаЗапускаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ПриВыбореОтбораПоАктуальности(
		ВыбранноеЗначение, 
		СтандартнаяОбработка, 
		ЭтаФорма,
		Список, 
		"Актуальность",
		"ОтборДатаЗапуска",
		"ДатаСобытия");
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеПриИзменении(Элемент)
	
	УстановитьОтборПоРаспоряжению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = СтруктураОтбораПоРаспоряжению();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Если НЕ Распоряжение.Пустая() Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Распоряжение);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборРаспоряжениеОбработкаВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаВыбора", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтборРаспоряжениеОбработкаВыбораЗавершение(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОбработкаВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжение = ВыбранноеЗначение;
	
	УстановитьОтборПоРаспоряжению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		АвтоПодборЗаказовНаПроизводство(Текст, СтруктураОтбораПоРаспоряжению(), ДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		АвтоПодборЗаказовНаПроизводство(Текст, СтруктураОтбораПоРаспоряжению(), ДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если Распоряжение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжение = Неопределено;
	
	УстановитьОтборПоРаспоряжению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Распоряжение.Пустая() Тогда
		
		ПоказатьЗначение(,Распоряжение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационныйТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиПерейтиКТекущемуЭтапуЦепочки() Тогда
		
		Элементы.Список.ТекущаяСтрока = ТекущийЭтапЦепочки;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтключитьОтборПоЦепочкеЭтапов() Тогда
		
		ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьВсеЭтапы();
		
		УстановитьОтборПоЦепочкеЭтапов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбеспечениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СостояниеОбеспечения",
		Обеспечение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Обеспечение));
	
КонецПроцедуры

#КонецОбласти

#Область Список

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Поле.Имя = "СписокЭтаповОжидаетсяОбеспечение" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.СостояниеОбеспечения = ПредопределенноеЗначение("Перечисление.СостоянияОбеспеченияЭтапаПроизводства.ОжидаетсяОбеспечение") Тогда
			
			Если ТекущиеДанные.ДинамическаяСтруктура
				И ПравоДоступаУкомплектованность Тогда
				ОткрытьУкомплектованность(ВыбраннаяСтрока);
			ИначеЕсли Не ТекущиеДанные.ДинамическаяСтруктура
				И ПравоДоступаСостояниеОбеспечения Тогда
				ОткрытьСостояниеОбеспечения(ВыбраннаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокЭтаповТребуетсяПланироватьГрафик" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если КомандаПланированияДоступна Тогда
		
			ОткрытьФормуПланированияЗаказа(ТекущиеДанные.Распоряжение);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокЭтаповСостояниеОграниченийВГрафике" Тогда
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли Поле.Имя = "СписокЭтаповКодСостоянияОпераций" Тогда
		
		Если ТекущиеДанные.КодСостоянияОпераций = 0
			ИЛИ ТекущиеДанные.КодСостоянияОпераций = 1
			ИЛИ ТекущиеДанные.КодСостоянияОпераций = 2 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			УправлениеПроизводствомКлиент.РасшифроватьСостояниеОперацийЭтапа(
				ВыбраннаяСтрока,
				ТекущиеДанные.СостояниеОпераций,
				ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельДопОтборовЭтапы

&НаКлиенте
Процедура СвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоложениеДопПанели");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Ложь;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоложениеДопПанели");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСостояниюПриИзменении(Элемент)
	
	УстановитьОтборПоСостояниюЭтапов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Константы

&НаСервереБезКонтекста
Функция ЗначениеПоказатьВсеЭтапы()
	
	Возврат "ПоказатьВсеЭтапы";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоказатьЭтапИСмежныеЭтапы()
	
	Возврат "ПоказатьЭтапИСмежныеЭтапы";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоказатьПоследователей()
	
	Возврат "ПоказатьПоследователей";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоказатьПредшественников()
	
	Возврат "ПоказатьПредшественников";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеГиперссылкиПерейтиКТекущемуЭтапуЦепочки()
	
	Возврат "#ПерейтиКТекущемуЭтапуЦепочки";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтключитьОтборПоЦепочкеЭтапов()
	
	Возврат "#ОтключитьОтборПоЦепочкеЭтапов";
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Текст полей "Дата начала" и "Дата завершения" если график не рассчитан
	#Область ГрафикНеРассчитан
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаНачала.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ГрафикРассчитан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не рассчитана>';
																|en = '<not calculated>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	// Оформление цветом периода по графику производства
	#Область ЕстьОтставаниеОтГрафика
	
	// Дата начала
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ГрафикРассчитан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	СписокЗначений.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	СписокЗначений.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаАктуальности");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаНачала");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Дата завершения
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ГрафикРассчитан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаАктуальности");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаЗавершения");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	#КонецОбласти
	
	// Ожидаемая дата выпуска
	#Область ДатаПроизводства
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '00010101';

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указана>';
																|en = '<not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	// Не отображаем состояние в статусе "Завершен"
	#Область СостояниеЗавершен
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояниеЭтапа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	// дата начала
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "СписокЭтаповДатаНачала");
	
	// дата завершения
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "СписокЭтаповДатаЗавершения");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ЕстьДоступНаИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2);
	
	// Команды обеспечения видимы, если есть доступ на изменение этапов.
	Элементы.ОтгрузитьЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.РезервироватьЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.КОбеспечениюЗаказ.Видимость = ЕстьДоступНаИзменение;
	Элементы.НеОбеспечиватьЗаказ.Видимость = ЕстьДоступНаИзменение;
	
	// Настроим видимость элементов в зависимости от использования графика производства
	Элементы.СписокЭтаповТребуетсяПланироватьГрафик.Видимость   = ПланируетсяГрафикПроизводства;
	Элементы.ГруппаДопОтборТребуетсяПланироватьГрафик.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.СписокЭтаповСостояниеОграниченийВГрафике.Видимость = ПланируетсяГрафикПроизводства;
	Элементы.ГруппаДопОтборНаКритическомПути.Видимость          = ПланируетсяГрафикПроизводства;
	Элементы.ГруппаДопОтборДопОтборЗадерживаютЗаказ.Видимость   = ПланируетсяГрафикПроизводства;

	Элементы.ПланироватьЗаказ.Видимость                    = КомандаПланированияДоступна;
	Элементы.ПланироватьВыбранные.Видимость                = КомандаПланированияДоступна;
	Элементы.КонтекстноеМенюПланироватьЗаказ.Видимость     = КомандаПланированияДоступна;
	Элементы.КонтекстноеМенюПланироватьВыбранные.Видимость = КомандаПланированияДоступна;
	
	Элементы.СписокДатаПроизводства.Видимость =
			НЕ ПланируетсяГрафикПроизводства И ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство");
	Элементы.СписокДатаПроизводства.АвтоОтметкаНезаполненного = Ложь;
	Элементы.СписокДатаПроизводства.ОтметкаНезаполненного     = Ложь;
	
	// Установим по умолчанию отбор по цепочке этапов
	ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьВсеЭтапы();
	Элементы.ПоказатьВсеЭтапы.Пометка = Истина;
	
	// Видимость отбора по подразделениям-диспетчерам
	ИспользуетсяНесколькоДиспетчеров = Справочники.СтруктураПредприятия.ИспользуетсяНесколькоПодразделенийДиспетчеров();
	Элементы.ОтборПодразделениеДиспетчер.Видимость = ИспользуетсяНесколькоДиспетчеров;
	
	// Настроим видимость элементов в зависимости от использования пооперационного управления.
	ИспользуютсяОперации = ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеПланирование");
	
	Элементы.СписокЭтаповКодСостоянияОпераций.Видимость = ИспользуютсяОперации;
	Элементы.ДопОтборТребуетсяНазначитьОперации.Видимость = ИспользуютсяОперации;
	Элементы.ДекорацияИконкаДопОтборТребуетсяНазначитьОперации.Видимость = ИспользуютсяОперации;
	Элементы.ГруппаДопОтборТребуетсяЗаполнитьПоОперациям.Видимость = ИспользуютсяОперации;
	Элементы.СписокОткрытьВыполнениеОпераций.Видимость = ИспользуютсяОперации;
	
	ИзменитьВыделенныеДоступна = ПроизводствоСервер.ДоступнаКомандаИзменитьВыделенные(Метаданные.Документы.ЭтапПроизводства2_2);
	Элементы.ИзменитьВыделенные.Видимость                 = ИзменитьВыделенныеДоступна;
	Элементы.ИзменитьВыделенныеВКоманднойПанели.Видимость = ИзменитьВыделенныеДоступна;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("Статус") Тогда
		
		Если ЗначениеЗаполнено(Форма.Статус) Тогда
			Форма.СтатусСтрока = ПолучитьПредставлениеСтатуса(Форма.Статус);
		Иначе
			Форма.СтатусСтрока = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("Распоряжение") Тогда
		
		Если ЗначениеЗаполнено(Форма.Распоряжение) Тогда
			Форма.РаспоряжениеСтрока = ПолучитьПредставлениеРаспоряжения(Форма.Распоряжение);
		Иначе
			Форма.РаспоряжениеСтрока = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("ПоложениеДопПанели") Тогда
		
		Элементы.РазвернутьДопПанель.Видимость = Форма.ДопПанельСвернута;
		Элементы.СвернутьДопПанель.Видимость = НЕ Форма.ДопПанельСвернута;
		
		Элементы.ДекорацияОтобратьЭтапы.Заголовок = 
				?(Форма.ДопПанельСвернута, НСтр("ru = 'Отобрать';
												|en = 'Pick'"), НСтр("ru = 'Отобрать этапы, которые';
																		|en = 'Pick stages with status'"));
		
		Элементы.ДекорацияОтобратьЭтапыПродолжение.Заголовок = 
				?(НЕ Форма.ДопПанельСвернута, НСтр("ru = 'Прочее';
													|en = 'Other'"), "");
		
		ТекущееОтображениеПодсказки = ?(Форма.ДопПанельСвернута, 
											ОтображениеПодсказки.Всплывающая,
											ОтображениеПодсказки.ОтображатьСправа);
		
		МассивЭлементов = Новый Массив;
		
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаТребуетсяУточнение);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборГотовКВыполнению);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборОжидаетПредшественников);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборОжидаетНачала);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборОжидаетЗавершения);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборЗавершен);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборТребуетсяПланироватьГрафик);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборТребуетсяНазначитьОперации);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборТребуетсяЗаполнитьПоОперациям);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборПросрочен);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборНаКритическомПути);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборЗадерживаютЗаказ);
		
		Для Каждого ТекущийЭлемент Из МассивЭлементов Цикл
			
			ТекущийЭлемент.ОтображениеПодсказки = ТекущееОтображениеПодсказки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("УстановитьОтборПоЦепочкеЭтапов") Тогда
		
		ПоказатьВсеЭтапы          = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьВсеЭтапы();
		ПоказатьЭтапИСмежныеЭтапы = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьЭтапИСмежныеЭтапы();
		ПоказатьПоследователей    = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПоследователей();
		ПоказатьПредшественников  = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПредшественников();
		
		Если НЕ ПоказатьВсеЭтапы Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Установлен отбор по';
										|en = 'Filter is set by'"));
			МассивСтрок.Добавить(" ");
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'этапу';
																	|en = 'stage'"),,,, 
					ЗначениеГиперссылкиПерейтиКТекущемуЭтапуЦепочки()));
					
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(НСтр("ru = 'и всем его';
										|en = 'and all its'"));
			МассивСтрок.Добавить(" ");
			
			Если ПоказатьЭтапИСмежныеЭтапы Тогда
				МассивСтрок.Добавить(НСтр("ru = 'смежным этапам';
											|en = 'adjacent stages'"));
			ИначеЕсли ПоказатьПоследователей Тогда
				МассивСтрок.Добавить(НСтр("ru = 'последователям';
											|en = 'successors'"));
			ИначеЕсли ПоказатьПредшественников Тогда
				МассивСтрок.Добавить(НСтр("ru = 'предшественникам';
											|en = 'predecessors'"));
			КонецЕсли;
			
			МассивСтрок.Добавить(" (");
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить';
																	|en = 'disable'"),,,, 
					ЗначениеГиперссылкиОтключитьОтборПоЦепочкеЭтапов()));
			
			МассивСтрок.Добавить(") ");
			
			Форма.ИнформационныйТекст = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ИнформационныйТекст.Видимость = Истина;
			
		Иначе
			
			Форма.ИнформационныйТекст = Новый ФорматированнаяСтрока("");
			Элементы.ИнформационныйТекст.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ПоказатьВсеЭтапы.Пометка          = ПоказатьВсеЭтапы;
		Элементы.ПоказатьЭтапИСмежныеЭтапы.Пометка = ПоказатьЭтапИСмежныеЭтапы;
		Элементы.ПоказатьПоследователей.Пометка    = ПоказатьПоследователей;
		Элементы.ПоказатьПредшественников.Пометка  = ПоказатьПредшественников;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("УстановитьОтборыПоДаннымЭтапа") Тогда
		
		Элементы.СнятьОтборыПоДаннымЭтапа.Доступность = Форма.СтруктураОтбораПоДаннымЭтапа <> Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Список

&НаСервере
Функция ТекстЗапросаДинамическогоСпискаДиспетчированиеЭтапов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Этапы.Статус КАК Статус,
	|	&ПредставлениеЭтапа КАК ПредставлениеЭтапа,
	|	Этапы.Распоряжение КАК Распоряжение,
	|	Этапы.Распоряжение.Подразделение КАК ПодразделениеДиспетчер,
	|	Этапы.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|	Этапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	Этапы.Подразделение КАК Подразделение,
	|	Этапы.Спецификация КАК Спецификация,
	|	Этапы.ПартияПроизводства КАК ПартияПроизводства,
	|	Этапы.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	Этапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ВЫБОР
	|		КОГДА &ПланируетсяГрафикПроизводства
	|				И ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						РегистрСведений.ЗаданияКРасчетуГрафикаПроизводства КАК Т
	|					ГДЕ
	|						Т.Распоряжение = Этапы.Распоряжение
	|						И Т.ЭтапПроизводства = Этапы.Ссылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПланироватьГрафик,
	|
	|	ЕСТЬNULL(СостоянияЭтаповПроизводства.СостояниеОбеспечения, &ПустаяСсылкаСостояниеОбеспечения) КАК СостояниеОбеспечения,
	|	ЕСТЬNULL(СостоянияЭтаповПроизводства.СостояниеОбеспечения, &ПустаяСсылкаСостояниеОбеспечения)
	|		= ЗНАЧЕНИЕ(Перечисление.СостоянияОбеспеченияЭтапаПроизводства.ОжидаетсяОбеспечение) КАК ОжидаетсяОбеспечение,
	|
	|	ВЫБОР
	|		КОГДА &ПланируетсяГрафикПроизводства
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ГрафикПроизводства.ОграничиваетСрокВыпуска, ЛОЖЬ) = ИСТИНА
	|						ТОГДА 3
	|					КОГДА ЕСТЬNULL(ГрафикПроизводства.НаКритическомПути, ЛОЖЬ) = ИСТИНА
	|						ТОГДА 2
	|					ИНАЧЕ -1
	|				КОНЕЦ
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК СостояниеОграниченийВГрафике,
	|	ВЫБОР
	|		КОГДА Этапы.Статус = &СтатусЗавершен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповНаМежцеховомУровне.Завершен)
	|		ИНАЧЕ ЕСТЬNULL(СостоянияЭтаповПроизводства.СостояниеНаМежцеховомУровне, &ПустаяСсылкаСостояние)
	|	КОНЕЦ КАК СостояниеЭтапа,
	|	
	|	ЕСТЬNULL(СостоянияЭтаповПроизводства.СостояниеОпераций, &ПустаяСсылкаСостояниеОпераций) КАК СостояниеОпераций,
	|	ВЫБОР
	|		КОГДА Этапы.ТребуетсяЗаполнитьПоОперациям
	|			ТОГДА 3
	|		КОГДА СостоянияЭтаповПроизводства.СостояниеОпераций = ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.ОжидаетНазначения)
	|			ТОГДА 0
	|		КОГДА СостоянияЭтаповПроизводства.СостояниеОпераций = ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.ОжидаетЗавершения)
	|			ТОГДА 1
	|		КОГДА СостоянияЭтаповПроизводства.СостояниеОпераций = ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.Выполнено)
	|			ТОГДА 2
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК КодСостоянияОпераций,
	|	Этапы.ТребуетсяЗаполнитьПоОперациям КАК ТребуетсяЗаполнитьПоОперациям,
	|	НЕ Этапы.ТребуетсяЗаполнитьПоОперациям
	|		И СостоянияЭтаповПроизводства.СостояниеОпераций = ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЭтапаПроизводства.ОжидаетНазначения) КАК ТребуетсяНазначитьОперации,
	|	
	|	ВЫБОР
	|		КОГДА Этапы.ДинамическаяСтруктура
	|			ТОГДА НЕ НормативныйГрафикСтруктурыЗаказа.Этап ЕСТЬ NULL
	|		КОГДА &ПланируетсяГрафикПроизводства
	|			ТОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|		ИНАЧЕ НЕ НормативныйГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|	КОНЕЦ КАК ГрафикРассчитан,
	|	ВЫБОР
	|		КОГДА &ПланируетсяГрафикПроизводства
	|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|			ТОГДА НАЧАЛОПЕРИОДА(ГрафикПроизводства.НачалоЭтапа, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Этапы.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0)), ДЕНЬ)
	|	КОНЕЦ КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА &ДатаАктуальности > ВЫБОР
	|				КОГДА &ПланируетсяГрафикПроизводства
	|						И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|					ТОГДА ГрафикПроизводства.НачалоЭтапа
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(Этапы.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
	|			КОНЕЦ И Этапы.Статус В (&СтатусФормируется, &СтатусСформирован, &СтатусКВыполнению)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен,
	|	ВЫБОР
	|		КОГДА &ПланируетсяГрафикПроизводства
	|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|			ТОГДА ГрафикПроизводства.НачалоЭтапа
	|		КОГДА НормативныйГрафикСтруктурыЗаказа.Начало ЕСТЬ НЕ NULL
	|			ТОГДА НормативныйГрафикСтруктурыЗаказа.Начало
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Этапы.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА &ПланируетсяГрафикПроизводства
	|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|			ТОГДА ГрафикПроизводства.ОкончаниеЭтапа
	|		КОГДА НормативныйГрафикСтруктурыЗаказа.Окончание ЕСТЬ НЕ NULL
	|			ТОГДА НормативныйГрафикСтруктурыЗаказа.Окончание
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Этапы.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска + НормативныйГрафикПроизводства.Ресурсоемкость, 0))
	|	КОНЕЦ КАК ДатаЗавершения,
	|	ВЫБОР 
	|		КОГДА &ПланируетсяГрафикПроизводства И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL ТОГДА 
	|			ВЫБОР 
	|				КОГДА Этапы.Статус В (&СтатусФормируется, &СтатусСформирован, &СтатусКВыполнению) И РАЗНОСТЬДАТ(ГрафикПроизводства.НачалоЭтапа, &ДатаАктуальности, ДЕНЬ) > 0 ТОГДА
	|					РАЗНОСТЬДАТ(ГрафикПроизводства.НачалоЭтапа, &ДатаАктуальности, ДЕНЬ)
	|				КОГДА Этапы.Статус = &СтатусНачат И РАЗНОСТЬДАТ(ГрафикПроизводства.ОкончаниеЭтапа, &ДатаАктуальности, ДЕНЬ) > 0 ТОГДА
	|					РАЗНОСТЬДАТ(ГрафикПроизводства.ОкончаниеЭтапа, &ДатаАктуальности, ДЕНЬ)
	|				КОГДА Этапы.Статус = &СтатусЗавершен И РАЗНОСТЬДАТ(ГрафикПроизводства.ОкончаниеЭтапа, Этапы.ФактическоеОкончаниеЭтапа, ДЕНЬ) > 0 ТОГДА
	|					РАЗНОСТЬДАТ(ГрафикПроизводства.ОкончаниеЭтапа, Этапы.ФактическоеОкончаниеЭтапа, ДЕНЬ)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НормативныйГрафикСтруктурыЗаказа.Начало ЕСТЬ НЕ NULL ТОГДА
	|			ВЫБОР 
	|				КОГДА Этапы.Статус В (&СтатусФормируется, &СтатусСформирован, &СтатусКВыполнению) И РАЗНОСТЬДАТ(НормативныйГрафикСтруктурыЗаказа.Начало, &ДатаАктуальности, ДЕНЬ) > 0 ТОГДА
	|					РАЗНОСТЬДАТ(НормативныйГрафикСтруктурыЗаказа.Начало, &ДатаАктуальности, ДЕНЬ)
	|				КОГДА Этапы.Статус = &СтатусНачат И РАЗНОСТЬДАТ(НормативныйГрафикСтруктурыЗаказа.Окончание, &ДатаАктуальности, ДЕНЬ) > 0 ТОГДА
	|					РАЗНОСТЬДАТ(НормативныйГрафикСтруктурыЗаказа.Окончание, &ДатаАктуальности, ДЕНЬ)
	|				КОГДА Этапы.Статус = &СтатусЗавершен И РАЗНОСТЬДАТ(НормативныйГрафикСтруктурыЗаказа.Окончание, Этапы.ФактическоеОкончаниеЭтапа, ДЕНЬ) > 0 ТОГДА
	|					РАЗНОСТЬДАТ(НормативныйГрафикСтруктурыЗаказа.Окончание, Этапы.ФактическоеОкончаниеЭтапа, ДЕНЬ)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК Задержка,
	|	ВЫБОР
	|		КОГДА &ПланируетсяГрафикПроизводства
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|							И (&ДатаАктуальности > ГрафикПроизводства.НачалоЭтапа
	|									И Этапы.Статус В (&СтатусФормируется, &СтатусСформирован, &СтатусКВыполнению)
	|								ИЛИ &ДатаАктуальности > ГрафикПроизводства.ОкончаниеЭтапа
	|									И Этапы.Статус <> &СтатусЗавершен)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА НормативныйГрафикСтруктурыЗаказа.Начало ЕСТЬ НЕ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА &ДатаАктуальности > НормативныйГрафикСтруктурыЗаказа.Начало
	|									И Этапы.Статус В (&СтатусФормируется, &СтатусСформирован, &СтатусКВыполнению)
	|								ИЛИ &ДатаАктуальности > НормативныйГрафикСтруктурыЗаказа.Окончание
	|									И Этапы.Статус <> &СтатусЗавершен
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НормативныйГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
	|						И (&ДатаАктуальности > ДОБАВИТЬКДАТЕ(Этапы.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
	|								И Этапы.Статус В (&СтатусФормируется, &СтатусСформирован, &СтатусКВыполнению)
	|							ИЛИ &ДатаАктуальности > ДОБАВИТЬКДАТЕ(Этапы.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска + НормативныйГрафикПроизводства.Ресурсоемкость, 0))
	|								И Этапы.Статус <> &СтатусЗавершен)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЕстьОтставаниеОтГрафика,
	|	
	|	ВЫБОР
	|		КОГДА Этапы.РучноеРазмещениеВГрафике
	|			ТОГДА 1
	|		КОГДА &ПланируетсяГрафикПроизводства
	|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
	|				И (ТИПЗНАЧЕНИЯ(Этапы.ПланироватьНеРанее) = ТИП(ДАТА)
	|						И Этапы.ПланироватьНеРанее <> ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ТИПЗНАЧЕНИЯ(Этапы.ПланироватьНеРанее) = ТИП(Документ.ЭтапПроизводства2_2)
	|						И Этапы.ПланироватьНеРанее <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка))
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ДатаНачалаИндексКартинки,
	|	
	|	ВЫБОР
	|		КОГДА Этапы.РучноеРазмещениеВГрафике
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ДатаОкончанияИндексКартинки,
	|	
	|	Этапы.ДатаПроизводства КАК ДатаПроизводства,
	|	Этапы.ДинамическаяСтруктура КАК ДинамическаяСтруктура,
	|
	|	Этапы.КоличествоУпаковокПлан     КАК КоличествоПлан,
	|	Этапы.КоличествоУпаковокФакт     КАК КоличествоФакт,
	|	Этапы.КоличествоУпаковокОтменено КАК КоличествоОтменено,
	|	ВЫБОР
	|		КОГДА Этапы.УпаковкаПлан = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Этапы.УпаковкаПлан
	|	КОНЕЦ КАК КоличествоЕдиницаИзмерения,
	|
	|	0 КАК ОстатокТрудоемкости,
	|	0 КАК ПроцентВыполнения,
	|	
	|	Этапы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Этапы
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикПроизводства
	|		ПО Этапы.Ссылка = НормативныйГрафикПроизводства.ЭтапПроизводства
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭтаповПроизводства КАК СостоянияЭтаповПроизводства
	|		ПО Этапы.Распоряжение = СостоянияЭтаповПроизводства.Распоряжение
	|			И Этапы.Ссылка = СостоянияЭтаповПроизводства.Этап
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафикСтруктурыЗаказа
	|		ПО Этапы.Ссылка = НормативныйГрафикСтруктурыЗаказа.Этап
	|	
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
	|		ПО Этапы.Распоряжение = ГрафикПроизводства.Распоряжение
	|			И Этапы.Ссылка = ГрафикПроизводства.ЭтапПроизводства
	|			И (ГрафикПроизводства.СтатусГрафика = &СтатусРабочийГрафик)}
	|	
	|ГДЕ
	|	НЕ Этапы.ПометкаУдаления";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьПроценты(ОкругляемоеЧисло)
	
	Если ОкругляемоеЧисло > 99
		И ОкругляемоеЧисло < 100 Тогда
		
		ОкругляемоеЧисло = 99;
		
	КонецЕсли;
	
	Если ОкругляемоеЧисло > 0
		И ОкругляемоеЧисло < 1 Тогда
		
		ОкругляемоеЧисло = 1;
		
	КонецЕсли;
	
	Возврат Окр(ОкругляемоеЧисло);
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваДинамическогоСписка()
	
	ТекстЗапроса = ТекстЗапросаДинамическогоСпискаДиспетчированиеЭтапов();
	Документы.ЭтапПроизводства2_2.ВыполнитьПодстановкуПоляПредставлениеЭтапа(ТекстЗапроса, "&ПредставлениеЭтапа", "Этапы");
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	СвойстваСписка.ОсновнаяТаблица = Список.ОсновнаяТаблица;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДатаСеанса()));
	
	Список.Параметры.УстановитьЗначениеПараметра("ПланируетсяГрафикПроизводства", ПланируетсяГрафикПроизводства);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусРабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	Список.Параметры.УстановитьЗначениеПараметра("СтатусФормируется", Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусСформирован", Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусКВыполнению", Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусНачат",       Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусЗавершен",    Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяСсылкаСостояние", Перечисления.СостоянияЭтаповНаМежцеховомУровне.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяСсылкаСостояниеОпераций", Перечисления.СостоянияОперацийЭтапаПроизводства.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяСсылкаСостояниеОбеспечения", Перечисления.СостоянияОбеспеченияЭтапаПроизводства.ПустаяСсылка());
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура ЗаполнитьОтборыПоСтруктуреОтборов(СтруктураОтборов)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	
	Если СтруктураОтборов.Свойство("ПодразделениеДиспетчер", ПодразделениеДиспетчер) Тогда
		СтруктураБыстрогоОтбора.Вставить("ПодразделениеДиспетчер", ПодразделениеДиспетчер);
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Подразделение", Подразделение) Тогда
		СтруктураБыстрогоОтбора.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Статус", Статус) Тогда
		СтруктураБыстрогоОтбора.Вставить("Статус", Статус);
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Распоряжение", Распоряжение) Тогда
		СтруктураБыстрогоОтбора.Вставить("Распоряжение", Распоряжение);
	КонецЕсли;
	
	СтруктураОтборов.Свойство("ТребуетсяУточнение",            ДопОтборТребуетсяУточнение);
	СтруктураОтборов.Свойство("ГотовКВыполнению",              ДопОтборГотовКВыполнению);
	СтруктураОтборов.Свойство("ОжидаетПредшественников",       ДопОтборОжидаетПредшественников);
	СтруктураОтборов.Свойство("ОжидаетНачала",                 ДопОтборОжидаетНачала);
	СтруктураОтборов.Свойство("ОжидаетЗавершения",             ДопОтборОжидаетЗавершения);
	СтруктураОтборов.Свойство("ОтборЗавершен",                 ДопОтборЗавершен);
	СтруктураОтборов.Свойство("ТребуетсяПерерасчетГрафика",    ДопОтборТребуетсяПланироватьГрафик);
	СтруктураОтборов.Свойство("ТребуетсяНазначитьОперации",    ДопОтборТребуетсяНазначитьОперации);
	СтруктураОтборов.Свойство("ТребуетсяЗаполнитьПоОперациям", ДопОтборТребуетсяЗаполнитьПоОперациям);
	СтруктураОтборов.Свойство("Просрочен",                     ДопОтборПросрочен);
	СтруктураОтборов.Свойство("НаКритическомПути",             ДопОтборНаКритическомПути);
	СтруктураОтборов.Свойство("ЗадерживаютЗаказ",              ДопОтборЗадерживаютЗаказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоСтруктуреОтборов(СтруктураОтборов)
	
	ЗаполнитьОтборыПоСтруктуреОтборов(СтруктураОтборов);
	
	УстановитьОтборПоПодразделениюДиспетчеру();
	УстановитьОтборПоПодразделению();
	
	УстановитьОтборПоРаспоряжению();
	УстановитьОтборПоСтатусу();
	
	УстановитьОтборПоСостояниюЭтапов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюДиспетчеру()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПодразделениеДиспетчер));

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Подразделение", Подразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Подразделение));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Статус", Статус, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(Статус));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРаспоряжению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Распоряжение", Распоряжение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Распоряжение));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Распоряжение");

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостояниюЭтапов()
	
	МассивОтборов = Новый Массив;
	
	// Отбор по текущему состоянию этапа
	
	МассивЗначений = Новый Массив;
	
	Если ДопОтборТребуетсяУточнение Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения);
		
	КонецЕсли;
	
	Если ДопОтборГотовКВыполнению Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению);
		
	КонецЕсли;
	
	Если ДопОтборОжидаетПредшественников Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ОжидаетПредшественников);
		
	КонецЕсли;
	
	Если ДопОтборОжидаетНачала Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ОжидаетНачала);
		
	КонецЕсли;
	
	Если ДопОтборОжидаетЗавершения Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ОжидаетЗавершения);
		
	КонецЕсли;
	
	Если ДопОтборЗавершен Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.Завершен);
		
	КонецЕсли;
	
	Отбор = СтруктураОтбора("СостояниеЭтапа");
	Отбор.Использование = МассивЗначений.ВГраница() <> -1;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.Значение      = МассивЗначений;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по состоянию графика производства
	
	Отбор = СтруктураОтбора("ТребуетсяПланироватьГрафик");
	Отбор.Использование = ДопОтборТребуетсяПланироватьГрафик;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Значение      = Истина;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по состоянию назначения операций
	
	Отбор = СтруктураОтбора("ТребуетсяНазначитьОперации");
	Отбор.Использование = ДопОтборТребуетсяНазначитьОперации;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Значение      = Истина;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по состоянию выполнения операций
	
	Отбор = СтруктураОтбора("ТребуетсяЗаполнитьПоОперациям");
	Отбор.Использование = ДопОтборТребуетсяЗаполнитьПоОперациям;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Значение      = Истина;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по отставанию от графика
	
	Отбор = СтруктураОтбора("ЕстьОтставаниеОтГрафика");
	Отбор.Использование = ДопОтборПросрочен;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Значение      = Истина;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по состоянию ограничений в графике
	
	МассивЗначений = Новый Массив;
	
	Если ДопОтборНаКритическомПути Тогда
		МассивЗначений.Добавить(2);
		МассивЗначений.Добавить(3);
	КонецЕсли;
	
	Если ДопОтборЗадерживаютЗаказ Тогда
		МассивЗначений.Добавить(3);
	КонецЕсли;
	
	Отбор = СтруктураОтбора("СостояниеОграниченийВГрафике");
	Отбор.Использование = МассивЗначений.ВГраница() <> -1;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.Значение      = МассивЗначений;
	
	МассивОтборов.Добавить(Отбор);
	
	// Устанавливаем отборы
	
	Для Каждого ЭлементОтбора Из МассивОтборов Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
															Список,
															ЭлементОтбора.Поле,
															ЭлементОтбора.Значение,
															ЭлементОтбора.ВидСравнения,,
															ЭлементОтбора.Использование);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоЦепочкеЭтапов()
	
	МассивСсылок = Новый Массив();
	
	Если ТипОтбораПоЦепочкеЭтапов <> ЗначениеПоказатьВсеЭтапы() Тогда
		
		ТекущийЭтапЦепочки = Элементы.Список.ТекущаяСтрока;
		
		Если ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьЭтапИСмежныеЭтапы() Тогда
			
			МассивСсылок = Документы.ЭтапПроизводства2_2.СмежныеЭтапы(ТекущийЭтапЦепочки);
			
		ИначеЕсли ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПоследователей() Тогда
			
			МассивСсылок = Документы.ЭтапПроизводства2_2.ВсеПоследователи(ТекущийЭтапЦепочки);

		ИначеЕсли ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПредшественников() Тогда
			
			МассивСсылок = Документы.ЭтапПроизводства2_2.ВсеПредшественники(ТекущийЭтапЦепочки);
			
		КонецЕсли;
		
		МассивСсылок.Добавить(ТекущийЭтапЦепочки);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивСсылок, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(МассивСсылок));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "УстановитьОтборПоЦепочкеЭтапов");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоДаннымЭтапа()
	
	#Область ОтборПоВыходнымИзделиям
	
	Если СтруктураОтбораПоДаннымЭтапа <> Неопределено И СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоИзделию Тогда
		НоменклатураИзделия = СтруктураОтбораПоДаннымЭтапа.НоменклатураИзделия;
		ХарактеристикаИзделия = СтруктураОтбораПоДаннымЭтапа.ХарактеристикаИзделия;
	Иначе
		НоменклатураИзделия = Справочники.Номенклатура.ПустаяСсылка();
		ХарактеристикаИзделия = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ОтборПоВыходнымИзделиям = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по выходным изделиям';
			|en = 'Filter by finished products'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборПоВыходнымИзделиям.Элементы,
		НСтр("ru = 'Отбор по выходным изделиям (рассчитываемая стоимость)';
			|en = 'Filter by finished products (calculated cost)'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ВыходныеИзделия.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		НоменклатураИзделия,
		,
		ЗначениеЗаполнено(НоменклатураИзделия));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ВыходныеИзделия.Характеристика",
		ВидСравненияКомпоновкиДанных.Равно,
		ХарактеристикаИзделия,
		,
		ЗначениеЗаполнено(НоменклатураИзделия) И ЗначениеЗаполнено(ХарактеристикаИзделия));
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборПоВыходнымИзделиям.Элементы,
		НСтр("ru = 'Отбор по выходным изделиям (фиксированная стоимость)';
			|en = 'Filter by finished products (fixed cost)'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ПобочныеИзделия.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		НоменклатураИзделия,
		,
		ЗначениеЗаполнено(НоменклатураИзделия));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ПобочныеИзделия.Характеристика",
		ВидСравненияКомпоновкиДанных.Равно,
		ХарактеристикаИзделия,
		,
		ЗначениеЗаполнено(НоменклатураИзделия) И ЗначениеЗаполнено(ХарактеристикаИзделия));
	
	#КонецОбласти
	
	#Область ОтборПоМатериалам
	
	Если СтруктураОтбораПоДаннымЭтапа <> Неопределено И СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоМатериалу Тогда
		НоменклатураМатериала = СтруктураОтбораПоДаннымЭтапа.НоменклатураМатериала;
		ХарактеристикаМатериала = СтруктураОтбораПоДаннымЭтапа.ХарактеристикаМатериала;
	Иначе
		НоменклатураМатериала = Справочники.Номенклатура.ПустаяСсылка();
		ХарактеристикаМатериала = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ОтборПоМатериалам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по материалам';
			|en = 'Filter by materials'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборПоМатериалам.Элементы,
		НСтр("ru = 'Отбор по материалам (обеспечение)';
			|en = 'Filter by materials (supply)'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ОбеспечениеМатериаламиИРаботами.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		НоменклатураМатериала,
		,
		ЗначениеЗаполнено(НоменклатураМатериала));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ОбеспечениеМатериаламиИРаботами.Характеристика",
		ВидСравненияКомпоновкиДанных.Равно,
		ХарактеристикаМатериала,
		,
		ЗначениеЗаполнено(НоменклатураМатериала) И ЗначениеЗаполнено(ХарактеристикаМатериала));
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборПоМатериалам.Элементы,
		НСтр("ru = 'Отбор по материалам (расход)';
			|en = 'Filter by materials (expense)'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.РасходМатериаловИРабот.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		НоменклатураМатериала,
		,
		ЗначениеЗаполнено(НоменклатураМатериала));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.РасходМатериаловИРабот.Характеристика",
		ВидСравненияКомпоновкиДанных.Равно,
		ХарактеристикаМатериала,
		,
		ЗначениеЗаполнено(НоменклатураМатериала) И ЗначениеЗаполнено(ХарактеристикаМатериала));
	
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборПоМатериалам.Элементы,
		НСтр("ru = 'Отбор по материалам (экономия)';
			|en = 'Filter by materials (savings)'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ЭкономияМатериалов.Номенклатура",
		ВидСравненияКомпоновкиДанных.Равно,
		НоменклатураМатериала,
		,
		ЗначениеЗаполнено(НоменклатураМатериала));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоНоменклатуре,
		"Ссылка.ЭкономияМатериалов.Характеристика",
		ВидСравненияКомпоновкиДанных.Равно,
		ХарактеристикаМатериала,
		,
		ЗначениеЗаполнено(НоменклатураМатериала) И ЗначениеЗаполнено(ХарактеристикаМатериала));
	
	#КонецОбласти
	
	#Область ОтборПоВРЦ
	
	Если СтруктураОтбораПоДаннымЭтапа <> Неопределено И СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоВРЦ Тогда
		ВидРабочегоЦентра = СтруктураОтбораПоДаннымЭтапа.ВидРабочегоЦентра;
	Иначе
		ВидРабочегоЦентра = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
	КонецЕсли;
	
	ОтборПоВидам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по рабочим центрам';
			|en = 'Filter by work centers'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОтборПоВРЦ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборПоВидам.Элементы,
		НСтр("ru = 'Отбор по ВРЦ (основные)';
			|en = 'Filter by work center type (main)'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоВРЦ,
		"Ссылка.ВидыРабочихЦентров.ВидРабочегоЦентра",
		ВидСравненияКомпоновкиДанных.Равно,
		ВидРабочегоЦентра,
		,
		ЗначениеЗаполнено(ВидРабочегоЦентра));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоВРЦ,
		"Ссылка.ВидыРабочихЦентров.Использовать",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина,
		,
		ЗначениеЗаполнено(ВидРабочегоЦентра));
	
	ОтборПоВРЦ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборПоВидам.Элементы,
		НСтр("ru = 'Отбор по ВРЦ (альтернативные)';
			|en = 'Filter by work center type (alternate)'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоВРЦ,
		"Ссылка.АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра",
		ВидСравненияКомпоновкиДанных.Равно,
		ВидРабочегоЦентра,
		,
		ЗначениеЗаполнено(ВидРабочегоЦентра));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ОтборПоВРЦ,
		"Ссылка.АльтернативныеВидыРабочихЦентров.Использовать",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина,
		,
		ЗначениеЗаполнено(ВидРабочегоЦентра));
	
	#КонецОбласти
	
	#Область ОтборПоИсполнителям
	
	Если СтруктураОтбораПоДаннымЭтапа <> Неопределено И СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоИсполнителю Тогда
		Исполнитель = СтруктураОтбораПоДаннымЭтапа.Исполнитель;
	Иначе
		Исполнитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка.Трудозатраты.Исполнитель",
		Исполнитель,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Исполнитель));
	
	#КонецОбласти
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "УстановитьОтборыПоДаннымЭтапа");
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСостояниюЭтаповПриСозданииНаСервере()
	
	Если ДопОтборТребуетсяУточнение
		ИЛИ ДопОтборГотовКВыполнению
		ИЛИ ДопОтборОжидаетПредшественников
		ИЛИ ДопОтборОжидаетНачала
		ИЛИ ДопОтборОжидаетЗавершения
		ИЛИ ДопОтборЗавершен
		ИЛИ ДопОтборТребуетсяПланироватьГрафик
		ИЛИ ДопОтборТребуетсяНазначитьОперации
		ИЛИ ДопОтборТребуетсяЗаполнитьПоОперациям
		ИЛИ ДопОтборПросрочен
		ИЛИ ДопОтборНаКритическомПути
		ИЛИ ДопОтборЗадерживаютЗаказ Тогда
		
		УстановитьОтборПоСостояниюЭтапов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОбновитьУстановленныеОтборы(ИмяСобытия, Источник)
	
	Возврат ОбновитьОтборыПриПовторномОткрытии
			И ИмяСобытия = УправлениеПроизводствомКлиентСервер.ИмяСобытияОбновитьДиспетчированиеЭтапов()
			И Источник   = ВладелецФормы;
	
КонецФункции

&НаКлиенте
Функция СтруктураОтбораПоРаспоряжению()
	
	МассивДоступныхСтатусовРаспоряжения = Новый Массив;
	
	МассивДоступныхСтатусовРаспоряжения.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству"));
	МассивДоступныхСтатусовРаспоряжения.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт"));
			
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Статус", МассивДоступныхСтатусовРаспоряжения);
	
	Если НЕ ПодразделениеДиспетчер.Пустая() Тогда
		СтруктураОтбора.Вставить("Подразделение", ПодразделениеДиспетчер);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанных

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам()
	ОбеспечениеВДокументахКлиент.ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновитьДанные()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанные", 60, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикОжиданияОбновитьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанные");

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновитьДанныеПриАктивизации()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанные", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанные()
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(ОбновлениеПоРасписанию = Ложь)
	
	Если НЕ ОбновлениеПоРасписанию Тогда
		ОтключитьОбработчикОжиданияОбновитьДанные();
	КонецЕсли;
	
	Если ВводДоступен() Тогда
		
		Элементы.Список.Обновить();
		
		ПодключитьОбработчикОжиданияОбновитьДанные();
		
	Иначе
		
		ПодключитьОбработчикОжиданияОбновитьДанныеПриАктивизации();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	 
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, ПараметрыЗадания)
	
	ЗаданиеВыполнено = ЗапуститьФоновоеЗаданиеНаСервере(ИмяЗадания, ПараметрыЗадания);
	
	Если ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеЗаданияНаКлиенте(Ложь);
	Иначе
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(Знач ИмяЗадания, Знач ПараметрыЗадания)
	
	Если ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Неизвестное задание ""%1""';
								|en = 'Unknown job ""%1""'"),
							ИмяЗадания);
	КонецЕсли;
	
	ФоновоеЗадание.ИмяЗадания           = ИмяЗадания;
	ФоновоеЗадание.ИдентификаторЗадания = РезультатЗапускаЗадания.ИдентификаторЗадания;
	ФоновоеЗадание.АдресХранилища       = РезультатЗапускаЗадания.АдресХранилища;
	
	Возврат РезультатЗапускаЗадания.ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданияНаКлиенте(ОбновитьДанные = Истина)

	Если ФоновоеЗадание.ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		ЗавершениеЗаданияПланироватьГрафикПроизводства(ФоновоеЗадание.АдресХранилища, ОбновитьДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(
		ЭтаФорма, ФоновоеЗадание.ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() Тогда
			
			Если ЗаданиеВыполнено(ФоновоеЗадание.ИдентификаторЗадания) Тогда
				ОбработатьЗавершениеЗаданияНаКлиенте();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ВыполнениеЗаданий

&НаСервере
Функция ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Планирование графика этапов производства';
								|en = 'Production stage schedule planning'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикЭтапов",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаКлиенте
Процедура ЗавершениеЗаданияПланироватьГрафикПроизводства(АдресХранилища, ОбновитьДанные)
	
	Если ОбновитьДанные Тогда
		
		Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
		
	Иначе
		
		Результат = ЗавершениеЗаданияНаСервереБезКонтекста(АдресХранилища);
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПланированииГрафикаПроизводства(Результат);
	
КонецПроцедуры

&НаСервере
Функция ЗавершениеЗаданияНаСервере(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбновитьДанныеНаСервере();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗавершениеЗаданияНаСервереБезКонтекста(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УстановкаДействий

&НаКлиенте
Процедура ВыполнитьДействиеВСпискеЗаказовРазныхТиповЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	Иначе
		
		ЗаказыДляПроверкиЗаданияРаспределенияЗапасов.ЗагрузитьЗначения(ДополнительныеПараметры.Заказы);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам", 1, Истина);
		РезультатВыполненияДействий = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ОбеспечениеВДокументахКлиент.СообщитьОРезультатахВыполненияДействийВСпискеЗаказов(РезультатВыполненияДействий);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ВыбранныеЭтапы()

	Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);

КонецФункции

&НаКлиенте
Функция ЭтапыДляИзмененияСтатуса(НовыйСтатус, ВыделенныеСтроки, ЗначенияИзВыделенныхСтрок = Неопределено)
	
	КлючиЗначений = Новый Массив();
	КлючиИнициализированы = Ложь;
	
	Результат = Новый Массив;
	ЗначениеНовогоСтатуса = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2." + НовыйСтатус);
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		
		Если Не УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(ЗначениеНовогоСтатуса, ДанныеСтроки.Статус) > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ДанныеСтроки.Ссылка); 
		
		Если Не ЗначенияИзВыделенныхСтрок = Неопределено Тогда
			Если Не КлючиИнициализированы Тогда
				Для Каждого КлючИЗначение Из ЗначенияИзВыделенныхСтрок Цикл
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, КлючИЗначение.Ключ) Тогда
						ЗначенияИзВыделенныхСтрок[КлючИЗначение.Ключ] = ДанныеСтроки[КлючИЗначение.Ключ];
						КлючиЗначений.Добавить(КлючИЗначение.Ключ);
					КонецЕсли; 
				КонецЦикла;
				КлючиИнициализированы = Истина;
			Иначе
				Для Сч = -КлючиЗначений.ВГраница() По 0 Цикл
					Ключ = КлючиЗначений[-Сч];
					Если ДанныеСтроки[Ключ] = ЗначенияИзВыделенныхСтрок[Ключ] Тогда
						Продолжить;
					КонецЕсли;
					ЗначенияИзВыделенныхСтрок[Ключ] = Неопределено;
					КлючиЗначений.Удалить(-Сч);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтатуса(СписокСтатусов)
	
	Результат = "";
	СтатусЗавершен     = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");
	КоличествоСтатусов = Перечисления.СтатусыЭтаповПроизводства2_2.Количество();
	
	Если СписокСтатусов.Количество() = КоличествоСтатусов - 1
		И СписокСтатусов.НайтиПоЗначению(СтатусЗавершен) = Неопределено Тогда
		
		Результат = НСтр("ru = 'Незавершенные';
						|en = 'Unfinished'");
		
	Иначе
		
		Для Каждого Элемент Из СписокСтатусов Цикл
			
			Результат = Результат + ?(ПустаяСтрока(Результат), "", "; ") + Элемент.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеРаспоряжения(Распоряжение)
	
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Номер, Дата");
	
	НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыРаспоряжения.Номер), " " + РеквизитыРаспоряжения.Номер, "");
	ДатаДокумента = Формат(РеквизитыРаспоряжения.Дата, "ДЛФ=D");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '№%1 от %2';
												|en = 'No. %1 from %2'"),
											НомерДокумента,
											ДатаДокумента);
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОтбора(Поле = "")
	
	Возврат Новый Структура("Поле, Значение, ВидСравнения, Использование", Поле);
	
КонецФункции

&НаСервереБезКонтекста
Процедура АвтоПодборЗаказовНаПроизводство(Текст, СтруктураОтбора, ДанныеВыбора)
	
	МассивСсылок = Документы.ЗаказНаПроизводство2_2.АвтоПодборЗаказовНаПроизводство(Текст, СтруктураОтбора);
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивСсылок);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСостояниеОбеспечения(ВыбраннаяСтрока)
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыСостояниеОбеспеченияЗаказов("СПИСОКЗАКАЗОВ");
	ПараметрыФормы.Заказы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяСтрока);
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУкомплектованность(Этап)
	
	Отбор = Новый Структура("Этап", Этап);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПоЭтапуКонтекст");
	
	ОткрытьФорму("Отчет.УкомплектованностьЗаказов.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПланированияЗаказа(Распоряжение)
	
	ПараметрыФормы = Новый Структура("Распоряжение", Распоряжение);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.ПланированиеГрафикаЗаказа", ПараметрыФормы,, Распоряжение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Ссылка = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если Ссылка <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(Неопределено, Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Возврат УправлениеПроизводствомКлиент.СсылкаНаЭтапПроизводстваПоШтрихкоду(Штрихкод);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ВыделенаСтрокаСписка = ТекущиеДанные <> Неопределено
		И ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка");
	
	Элементы.СписокСостояниеОбеспеченияСпискаЗаказов.Видимость = ВыделенаСтрокаСписка
		И Не ТекущиеДанные.ДинамическаяСтруктура
		И ПравоДоступаСостояниеОбеспечения;
		
	Элементы.СписокУкомплектованностьЭтапа.Видимость = ВыделенаСтрокаСписка
		И ТекущиеДанные.ДинамическаяСтруктура
		И ПравоДоступаУкомплектованность;
	
	Элементы.РазделитьЭтап.Видимость = ВыделенаСтрокаСписка
		И Не(
			(ТекущиеДанные.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
				ИЛИ ТекущиеДанные.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Ремонт"))
			И ТекущиеДанные.НомерСледующегоЭтапа = 0)
		И ТекущиеДанные.КодСостоянияОпераций = -1;
	
	Элементы.ПерезаполнитьПартию.Видимость = ВыделенаСтрокаСписка
		И Не ТекущиеДанные.Спецификация.Пустая();
		
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ОбновитьОтборыПриПовторномОткрытии = Ложь;

#КонецОбласти

#КонецОбласти
