#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("КоличествоУпаковокПлан");
	Результат.Добавить("УпаковкаПлан");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("ВыпускПодДеятельность");
	
	Возврат Результат;

КонецФункции

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("СтруктураЗаказа");
	МеханизмыДокумента.Добавить("ДоступностьРабочихЦентров");
	МеханизмыДокумента.Добавить("Закупки");
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("ПриемВПереработку");
	МеханизмыДокумента.Добавить("ПриемНаОтветхранение");
	МеханизмыДокумента.Добавить("Продажи");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетРабот");
	
	ЭтапПроизводства2_2Локализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		ДокументОбъект = Документ;
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		ЗаполнитьПараметрыИнициализации(Запрос);
		ЗаполнитьПараметрыРасчетаСебестоимости(Запрос, ДопПараметры);
		ЗаполнитьПараметрыИнициализацииПоСсылке(Запрос);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = ТекстыЗапросаДляФормированияДвижений(Запрос, Регистры, ДопПараметры, ДокументОбъект);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ВыработкаСотрудников.ДобавитьКомандуСоздатьНаОснованииСозданиеВыработкиСотрудников(КомандыСозданияНаОсновании);
	
	Команда = Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьПередачуВПроизводствоНаОснованииЗаказа(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьВозвратИзПроизводстваНаОснованииЗаказа(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьПередачуИзПроизводстваНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.АктВыполненныхВнутреннихРабот.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПлановаяКалькуляция2_2.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Команда = Документы.ПроизводственнаяОперация2_2.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьОбеспечивающийЗаказ(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОснованииЗаказыПоставщикам(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
		
	Команда = Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Если Команда <> Неопределено Тогда
		СтатусыДокумента = Новый Массив;
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
		СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда,
															"Статус",
															СтатусыДокумента,
															ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ЭтапПроизводства2_2Локализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Добавляет команду создания документа "Этап производства".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
//Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭтапПроизводства2_2) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЭтапПроизводства2_2);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Команда = Отчеты.КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства.ДобавитьКомандуКонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства(КомандыОтчетов);
	Если Не Команда = Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПроизводствоНаСтороне", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Отчеты.ДиагностикаЭтапаПроизводства.ДобавитьКомандуДиагностикаГрафикаЭтапаПроизводства(КомандыОтчетов);
	
	Отчеты.ДиаграммаСмежныхЭтаповПроизводства.ДобавитьКомандуСмежныеЭтапыПроизводства(КомандыОтчетов);
	
	Отчеты.ДиаграммаПроизводстваПартииЗапуска.ДобавитьКомандуГрафикПартииЗапуска(КомандыОтчетов);
	
	Отчеты.ДеревоСебестоимостиПродукции.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Отчеты.ТрудоемкостьЗаказаНаПроизводство.ДобавитьКомандуОтчета(КомандыОтчетов, "ТрудоемкостьПоПартии");
	Отчеты.ТрудоемкостьЗаказаНаПроизводство.ДобавитьКомандуОтчета(КомандыОтчетов, "ТрудоемкостьПоЭтапу");
	
	Отчеты.ХодВыполненияПроизводственныхОпераций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	ЭтапПроизводства2_2Локализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "ПроизводствоНаСтороне";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = Новый Структура;
	
	НастройкиПроизводства = ПроизводствоСервер.ИспользованиеСерийВПроизводстве22();
	
	#Область ВыходныеИзделия
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Получатель");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("ДатаПроизводства");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Отменено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Подразделение");
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Получатель";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ВыходныеИзделия";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии = "ВыходныеИзделияСерии";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = (
																ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = (
																ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства);
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Отменено");
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");

	ПараметрыУказанияСерий.Вставить("ВыходныеИзделия", ПараметрыУказанияСерийТЧ);
	
	#КонецОбласти
	
	#Область ПобочныеИзделия
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Получатель");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("ДатаПроизводства");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Отменено");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Подразделение");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("ВладелецИзделия");
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Получатель";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ПобочныеИзделия";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии = "ПобочныеИзделияСерии";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = (
																ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = (
																ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства);
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Произведено");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Отменено");
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");
	
	ПараметрыУказанияСерий.Вставить("ПобочныеИзделия", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	#Область РасходМатериаловИРабот
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "РасходМатериаловИРабот";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии  = "РасходМатериаловИРабот";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры = НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве);
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Истина; // всегда используется форма регистрации серий (в ней можно также выбрать из остатков)
	
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерийТЧ.ПланированиеОтбора   = Ложь;
	
	ПараметрыУказанияСерий.Вставить("РасходМатериаловИРабот", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	#Область ЭкономияМатериалов
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ЭкономияМатериалов";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии  = "ЭкономияМатериаловСерии";
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Получатель";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = (
																ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = (
																ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
																ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры
																)
																И НЕ Объект.ПроизводствоНаСтороне;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ВозвратМатериаловИзПроизводстваПриемка);
	
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Получатель");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("ДатаОперации");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерийТЧ.ПоляСвязи.Добавить("Подразделение");
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Истина; // всегда используется форма регистрации серий (в ней можно также выбрать из остатков)
	
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерийТЧ.ПланированиеОтбора   = Ложь;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерий.Вставить("ЭкономияМатериалов", ПараметрыУказанияСерийТЧ);
	#КонецОбласти

	#Область ОбеспечениеМатериаламиИРаботами
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары      = "ОбеспечениеМатериаламиИРаботами";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии       = "ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура())
		ИЛИ НастройкиПроизводства.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура())
		ИЛИ НастройкиПроизводства.ИспользоватьСерииНоменклатуры;
	
	Если Объект.ПроизводствоНаСтороне Тогда
		ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	Иначе
		ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка);
	КонецЕсли; 
	
	ПараметрыУказанияСерийТЧ.ПараметрыЗапроса.Вставить("ПроизводствоНаСтороне", Объект.ПроизводствоНаСтороне);
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Отменено");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Подразделение");
	
	ПараметрыУказанияСерийТЧ.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерий.Вставить("ОбеспечениеМатериаламиИРаботами", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на распоряжение.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия"
		Или ПараметрыУказанияСерий.ИмяТЧТовары = "ПобочныеИзделия"
		Или ПараметрыУказанияСерий.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция"
		Или ПараметрыУказанияСерий.ИмяТЧТовары = "Товары" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия();
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "ОбеспечениеМатериаламиИРаботами" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийОбеспечениеМатериаламиИРаботами();
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "РасходМатериаловИРабот" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийРасходМатериаловИРабот();
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "ЭкономияМатериалов" Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийЭкономияМатериалов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область Обеспечение

// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на заказ, в который встроены команды создания корректировки назначения
//  ДополнительныеПараметры - Структура - струкура с полями:
//  * ИдентификаторВХранилище - УникальныйИдентификатор - Уникальный идентификатор, чтобы поместить товары документа в хранилище
//  * ЭтоСнятиеРезерва - Булево - Истина, если данные нужно получить для операции снятия резерва, Ложь, если для операции резервирования
//  Возвращаемое значение:
//   Структура - Данные документа, необходмые для выполнения команды создания корректировки назначения
Функция ДанныеДокументаДляСозданияКорректировкиНазначения(Ссылка, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ЭтоСнятиеРезерва", ДополнительныеПараметры.ЭтоСнятиеРезерва);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыДокумента.Проведен КАК Проведен
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК РеквизитыДокумента
		|ГДЕ
		|	РеквизитыДокумента.Ссылка = &Ссылка
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МатериалыЗаказа.Назначение КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК МатериалыЗаказа
		|ГДЕ
		|	МатериалыЗаказа.Ссылка = &Ссылка
		|		И МатериалыЗаказа.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		И (&ЭтоСнятиеРезерва ИЛИ НЕ МатериалыЗаказа.Отменено)
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МатериалыЗаказа.Номенклатура КАК Номенклатура,
		|	МатериалыЗаказа.Характеристика КАК Характеристика,
		|	МатериалыЗаказа.Назначение КАК Назначение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК МатериалыЗаказа
		|ГДЕ
		|	МатериалыЗаказа.Ссылка = &Ссылка
		|		И (&ЭтоСнятиеРезерва ИЛИ НЕ МатериалыЗаказа.Отменено)";
	ПакетРезультатовЗапоса = Запрос.ВыполнитьПакет();
	Выборка = ПакетРезультатовЗапоса[0].Выбрать();
	Выборка.Следующий();
	Проведен = Выборка.Проведен;
	Назначения = ПакетРезультатовЗапоса[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПакетРезультатовЗапоса[2].Выгрузить();
	Товары = ПакетРезультатовЗапоса[2].Выгрузить();
	АдресТоваров = ПоместитьВоВременноеХранилище(Товары, ДополнительныеПараметры.ИдентификаторВХранилище);
	
	ЕстьТоварыКОбособленномуОбеспечению = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(
		Назначения, АдресТоваров);
	
	ЕстьТоварыКСнятиюРезерва = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКСнятиюРезерва(
		Назначения, АдресТоваров);
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("Проведен", Проведен);
	ДанныеДокумента.Вставить("Назначения", Назначения);
	ДанныеДокумента.Вставить("АдресТоваров", АдресТоваров);
	ДанныеДокумента.Вставить("ЕстьТоварыКОбособленномуОбеспечению", ЕстьТоварыКОбособленномуОбеспечению);
	ДанныеДокумента.Вставить("ЕстьТоварыКСнятиюРезерва", ЕстьТоварыКСнятиюРезерва);
	Возврат ДанныеДокумента;

КонецФункции

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭтапПроизводства2_2 - документ
//  ДополнительныеПараметры - Структура - структура с полями:
//   * ВернутьПараметрыПроизводствоНаСтороне - Булево - необходимо получить параметры для производства на стороне
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания(ДокументОбъект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ВернутьПараметрыПроизводствоНаСтороне = ДополнительныеПараметры.ВернутьПараметрыПроизводствоНаСтороне;
	Иначе
		ВернутьПараметрыПроизводствоНаСтороне = ДокументОбъект.ПроизводствоНаСтороне
			И Не ДокументОбъект.ЗаказПереработчику = Неопределено
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ЗаказПереработчику, "Проведен");
	КонецЕсли;
	
	Если ВернутьПараметрыПроизводствоНаСтороне Тогда
		ПараметрыВстраивания = ДоступныеОстаткиПараметрыВстраиванияПроизводствоНаСтороне();
		Возврат ПараметрыВстраивания;
	КонецЕсли;
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки,КлючНоменклатура";
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "ОбеспечениеМатериаламиИРаботами";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "ОбеспечениеМатериаламиИРаботамиВариантОбеспечения";
	ЭлементыФормы.Доступно           = "ОбеспечениеМатериаламиИРаботамиДоступно";
	ЭлементыФормы.Серия              = "ОбеспечениеМатериаламиИРаботамиСерия";
	ЭлементыФормы.Обособленно        = "ОбеспечениеМатериаламиИРаботамиОбособленно";
	ЭлементыФормы.Склад              = "ОбеспечениеМатериаламиИРаботамиСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.ОбеспечениеМатериаламиИРаботами.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.ОбеспечениеМатериаламиИРаботами.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.ОбеспечениеМатериаламиИРаботами.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = Истина;
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыМатериаловВПроизводство";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	ПараметрыВстраивания.ИмяТаблицы = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	Реквизиты.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	ТабЧасть.НазначениеОбеспечения КАК Назначение,
		|	Реквизиты.Ссылка КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОбеспечению,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОтгрузке,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				ТабЧасть.ДатаОтгрузки
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	ТабЧасть.Отменено КАК Отменено,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	Реквизиты.Распоряжение.Приоритет КАК Приоритет,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
		|		ПО ИСТИНА
		|";
	
	// Шаблон сериализации данных формы.
	ОбеспечениеМатериаламиИРаботами = Новый Структура();
	ОбеспечениеМатериаламиИРаботами.Вставить("НомерСтроки",           Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Номенклатура",          Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Характеристика",        Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Склад",                 Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОбеспечениеМатериаламиИРаботами.Вставить("НазначениеОбеспечения", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ВариантОбеспечения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Обособленно",           Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Производится",          Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Количество",            Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КоличествоУпаковок",    Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Упаковка",              Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ДатаОтгрузки",          Новый ОписаниеТипов("Дата"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Серия",                 Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КодСтроки",             Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Отменено",              Новый ОписаниеТипов("Булево"));
	
	Объект = Новый Структура();
	Объект.Вставить("Подразделение",                   Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Объект.Вставить("Ссылка",                          Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Объект.Вставить("Статус",                          Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2"));
	Объект.Вставить("НеОтгружатьЧастями",              Новый ОписаниеТипов("Булево"));
	Объект.Вставить("ДатаОтгрузки",                    Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Дата",                            Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Распоряжение",                    Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Объект.Вставить("ОбеспечениеМатериаламиИРаботами", ОбеспечениеМатериаламиИРаботами);
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

// Позволяет исключить из обработки заказы.
// Параметры:
//  Заказы - Массив из ЛюбаяСсылка -
//  КодДействия - Строка -
//  СообщенияПользователю - Массив из Структура.
Процедура ПередВыполнениемДействийВСпискеЗаказов(Заказы, КодДействия, СообщенияПользователю) Экспорт
	
	Если НЕ (КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" Или КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ_ПРИОРИТЕТНО_ОБОСОБЛЕННО") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Заказы)
		|		И НЕ (Таблица.ПроизводствоНаСтороне И Таблица.НеОтгружатьЧастями И Таблица.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Заказы)
		|		И (Таблица.ПроизводствоНаСтороне И Таблица.НеОтгружатьЧастями И Таблица.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1))";
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ИсключаемыеСсылки = ПакетЗапросов[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
	Текст = НСтр("ru = 'Для %1 команда не может быть выполнена, так как в заказе переработчику установлен признак ""Отгружать одной датой"" и дата отгрузки не заполнена';
				|en = 'For %1, cannot execute the command as the ""One-day shipping"" checkbox is selected in the subcontracting purchase order, and the shipment date is not filled'");
	Для Каждого Ссылка Из ИсключаемыеСсылки Цикл 
		СообщенияПользователю.Добавить(Новый Структура("Текст,Ссылка", СтрШаблон(Текст, Ссылка), Ссылка));
	КонецЦикла;
	Если ИсключаемыеСсылки.Количество() > 0 Тогда
		Заказы = ПакетЗапросов[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецПроцедуры

// Изменяет желаемые даты обеспечения этапов.
//
// Параметры:
//  Этапы - ТаблицаЗначений - содержит колонки:
//		* ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - документ, который необходимо изменить.
//		* Дата - Дата - значение, которое необходимо установить в качестве желаемой даты обеспечения.
//
// Возвращаемое значение:
// 	Число - количество обработанных документов.
//
Функция ИзменитьЖелаемыеДатыОбеспечения(Этапы) Экспорт
	
	КоличествоОбработанных = 0;
	
	Для каждого СтрокаЭтапы Из Этапы Цикл
		
		ДокументОбъект = СтрокаЭтапы.ЭтапПроизводства.ПолучитьОбъект();
		
		Попытка
			
			ДокументОбъект.Заблокировать();
			
			ДатаОтгрузки = '00010101';
			Для каждого СтрокаОбеспечение Из ДокументОбъект.ОбеспечениеМатериаламиИРаботами Цикл
				
				Если СтрокаОбеспечение.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Тогда
					СтрокаОбеспечение.ДатаОтгрузки = СтрокаЭтапы.Дата;
				КонецЕсли;
				
				Если ДатаОтгрузки = '00010101' Тогда
					ДатаОтгрузки = СтрокаОбеспечение.ДатаОтгрузки;
				ИначеЕсли ДатаОтгрузки <> Неопределено
					И ДатаОтгрузки <> СтрокаОбеспечение.ДатаОтгрузки Тогда
					ДатаОтгрузки = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДокументОбъект.НеОтгружатьЧастями Тогда
				Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
					ДокументОбъект.ДатаОтгрузки = ДатаОтгрузки;
				ИначеЕсли ДатаОтгрузки = Неопределено Тогда
					ДокументОбъект.НеОтгружатьЧастями = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
			
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Перенос желаемой даты обеспечения';
							|en = 'Rescheduling requested supply date'", ОбщегоНазначения.КодОсновногоЯзыка());
					
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

// Возвращает материалы и работы этапа, необходимые для его выполнения
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап, данные которого необходимо получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - обеспечиваемые материалы и работы.
//
Функция ОбеспечиваемыеМатериалыИРаботы(Этап) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.КоличествоУпаковок,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.Отменено");
	
	Запрос.УстановитьПараметр("Ссылка", Этап);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает обеспечиваемые материалы этапа за вычетом израсходованных материалов.
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап производства.
//	Разрезы - Строка - перечень полей через запятую, в разрезе которых необходимо получить остатки.
//		Допустимые значения: Характеристика, Серия. Если не передано, то данные получаются только в
//		разрезе номенклатуры.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблицы с материалами.
//
Функция ОстаткиОбеспечиваемыхМатериалов(Этап, Разрезы = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляВыбор,
	|	МАКСИМУМ(ТабличнаяЧасть.Упаковка) КАК Упаковка,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТОбеспечение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Этап
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляВыбор,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТРасход
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Этап
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура,
	|	&ТекстДополнительныеПоляВыбор,
	|	ТабличнаяЧасть.Упаковка,
	|	ТабличнаяЧасть.Количество - ЕСТЬNULL(ВТРасход.Количество, 0) КАК Количество,
	|	ТабличнаяЧасть.Количество - ЕСТЬNULL(ВТРасход.Количество, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок
	|ИЗ
	|	ВТОбеспечение КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасход КАК ВТРасход
	|		ПО ТабличнаяЧасть.Номенклатура = ВТРасход.Номенклатура
	|			И &ТекстДополнительныеПоляСоединение
	|ГДЕ
	|	ТабличнаяЧасть.Количество - ЕСТЬNULL(ВТРасход.Количество, 0) > 0";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТабличнаяЧасть.Упаковка",
			"ТабличнаяЧасть.Номенклатура"));
			
	ТекстДопПоляВыбор = "";
	ТекстДопПоляГруппировка = "";
	ТекстДопПоляСоединение = "";
	
	Если ЗначениеЗаполнено(Разрезы) Тогда
		
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Разрезы, ",");
		
		Для каждого Поле Из МассивПолей Цикл
			
			Поле = СокрЛП(Поле);
			
			ТекстДопПоляВыбор = ТекстДопПоляВыбор
				+ "ТабличнаяЧасть." + Поле + " КАК " + Поле + ",";
			
			ТекстДопПоляГруппировка = ТекстДопПоляГруппировка
				+ ?(ЗначениеЗаполнено(ТекстДопПоляГруппировка), ", ", "")
				+ "ТабличнаяЧасть." + Поле;
			
			ТекстДопПоляСоединение = ТекстДопПоляСоединение
				+ " И ТабличнаяЧасть." + Поле + " = ВТРасход." + Поле;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДополнительныеПоляВыбор,", ТекстДопПоляВыбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстДополнительныеПоляГруппировка", ТекстДопПоляГруппировка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстДополнительныеПоляСоединение", ТекстДопПоляСоединение);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу для товаров документа для механизма создания на основании обеспечивающиего заказа.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - документ, по которому нужно получить товары
//  ПараметрыСоздания - см. ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц в котором будет создана таблица с колонками:
//   * НомерСтроки - Число - номер строки
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
//   * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка
//   * Склад - СправочникСсылка.Склады - склад
//   * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение
//   * Назначение - СправочникСсылка.Назначения - назначение
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения
//   * Обособленно - Булево - обособленно
//   * КоличествоЕдиниц - Число - количество единиц
//   * КоличествоПоДокументу - Число - количество упаковок
Процедура ТоварыДокументаДляСозданияОбеспечивающегоЗаказа(Ссылка, ПараметрыСоздания, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыНоменклатуры", ПараметрыСоздания.ТипыНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.Склад КАК Склад,
		|	Товары.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Товары.Обособленно
		|			ТОГДА
		|				Товары.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Назначение,
		|	Товары.ВариантОбеспечения КАК ВариантОбеспечения,
		|	Товары.Обособленно КАК Обособленно,
		|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
		|	Товары.Количество КАК КоличествоЕдиницПоДокументу,
		|	Товары.КоличествоУпаковок КАК КоличествоПоДокументу
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|		И НЕ Товары.Производится
		|		И НЕ Товары.Отменено
		|		И Товары.Номенклатура.ТипНоменклатуры В(&ТипыНоменклатуры)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСостояния

// Возвращает структуру, содержащую тексты запросов временных таблиц для расчета состояния.
//
// Возвращаемое значение:
//   - Структура - тексты запросов временных таблиц для расчета состояния.
//
Функция ВременныеТаблицыДляРасчетаСостояния() Экспорт
	
	Результат = Новый Структура();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                КАК Ссылка,
		|	Таблица.Проведен              КАК Проведен,
		|	Таблица.Статус                КАК Статус,
		|	Таблица.Распоряжение          КАК Распоряжение,
		|	Таблица.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	Таблица.МаршрутнаяКарта       КАК МаршрутнаяКарта,
		|	Таблица.Этап                  КАК Этап,
		|	Таблица.ДинамическаяСтруктура КАК ДинамическаяСтруктура,
		|	
		|	ВЫБОР КОГДА Таблица.Распоряжение.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|	КОНЕЦ                         КАК РассчитыватьОстаткиКЗаказу,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|	КОНЕЦ                         КАК СтатусЗавершен
		|	
		|ПОМЕСТИТЬ ВТРеквизитыДокумента
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивСсылок)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	Результат.Вставить("Реквизиты", ТекстЗапроса);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СУММА(ВЫБОР
		|					КОГДА ВложенныйЗапрос.ПредшественникСтатус = &СтатусЗавершен
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) = КОЛИЧЕСТВО(ВложенныйЗапрос.Предшественник)
		|			ТОГДА &ЗавершеныПредшественники
		|		КОГДА СУММА(ВЫБОР
		|					КОГДА ВложенныйЗапрос.ПредшественникСтатус = &СтатусНачат
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) > 0
		|			ТОГДА &НачатыПредшественники
		|		КОГДА СУММА(ВЫБОР
		|					КОГДА ВложенныйЗапрос.ПредшественникСтатус = &СтатусНачат
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) = 0
		|			ТОГДА &НеНачатыПредшественники
		|	КОНЕЦ КАК Состояние
		|ПОМЕСТИТЬ ВТСостоянияПредшественников
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСвязи.Этап КАК Ссылка,
		|		Предшественники.Ссылка КАК Предшественник,
		|		Предшественники.Статус КАК ПредшественникСтатус
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.Последователи КАК ТаблицаСвязи
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Предшественники
		|			ПО ТаблицаСвязи.Ссылка = Предшественники.Ссылка
		|	ГДЕ
		|		ТаблицаСвязи.Этап В(&МассивСсылок)
		|		И Предшественники.Проведен
		|		И НЕ Предшественники.Ссылка В (&МассивСсылокКОчистке)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		Таблица.Ссылка,
		|		Предшественники.Ссылка,
		|		Предшественники.Статус
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Таблица
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Предшественники
		|			ПО ((ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)) = Предшественники.Ссылка)
		|	ГДЕ
		|		Таблица.Ссылка В(&МассивСсылок)
		|		И (ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|		И Предшественники.Проведен
		|		И НЕ Предшественники.Ссылка В (&МассивСсылокКОчистке)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
	Результат.Вставить("СостоянияПредшественников", ТекстЗапроса);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЦепочкаЭтапов

// Возвращает цепочку этапов по партии производства.
//
// Параметры:
//  ПартияПроизводства	 - СправочникСсылка.ПартииПроизводства	 - партия производства.
//  Направление			 - НаправлениеСортировки				 - направление сортировки этапов в цепочке.
//
// Возвращаемое значение:
//  Массив - цепочка этапов
//
Функция ЦепочкаЭтапов(ПартияПроизводства, Направление = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.ПартияПроизводства = &ПартияПроизводства
	|	И НЕ Таблица.ПометкаУдаления
	|";
	
	Если Направление <> Неопределено Тогда
		ТекстСоединение = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
		|		ПО Таблица.Ссылка = НормативныйГрафик.ЭтапПроизводства
		|";
		Если Направление = НаправлениеСортировки.Возр Тогда
			ТекстУпорядочивание = "УПОРЯДОЧИТЬ ПО ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -Таблица.ДлительностьДоВыпуска)";
		ИначеЕсли Направление = НаправлениеСортировки.Убыв Тогда
			ТекстУпорядочивание = "УПОРЯДОЧИТЬ ПО ЕСТЬNULL(НормативныйГрафик.ДлительностьДоВыпуска, Таблица.ДлительностьДоВыпуска)";
		КонецЕсли;
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2 КАК Таблица";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстИсходнаяТаблица + ТекстСоединение);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстУпорядочивание;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Возвращает ближайших последователей
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап или список этапов.
//
// Возвращаемое значение:
//   - Массив - массив ближайших последователей.
//
Функция Последователи(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Этап КАК Последователь
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ПланироватьНеРанее В (&Ссылка)
		|	И Таблица.Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Массив;
		
	Иначе
		
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
		
	КонецЕсли;
	
КонецФункции

// Возвращает ближайших предшественников
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//   - Массив - массив ближайших предшественников.
//
Функция Предшественники(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Предшественник
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап = &Ссылка
		|	И Таблица.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Массив;
		
	Иначе
		
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
		
	КонецЕсли;
	
КонецФункции

// Возвращает ближайшее окружение этапа
//
// Параметры:
//  Ссылка			 - ДокументСсылка.ЭтапПроизводства2_2 - этап
//  Предшественники	 - Массив - в параметр будут записаны предшественники.
//  Последователи	 - Массив - в параметр будут записаны последователи.
//
// Возвращаемое значение:
//   - Массив - массив ближайших смежных этапов.
//
Функция СмежныеЭтапы(Ссылка, Предшественники = Неопределено, Последователи = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Предшественники = Предшественники(Ссылка);
	
	Для каждого Элемент Из Предшественники Цикл
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Последователи = Последователи(Ссылка);
	
	Для каждого Элемент Из Последователи Цикл
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дочерние цепочки этапов
//
// Параметры:
//  ПартияПроизводства	 - СправочникСсылка.ПартииПроизводства	 - партия производства.
//
// Возвращаемое значение:
//   - Массив - все дочерние этапы.
//
Функция ДочерниеЦепочки(ПартияПроизводства)
	
	ДочерниеЦепочки = Новый Массив();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДочерниеЦепочки.ПартияПроизводства КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВтДочерниеЦепочки
	|ИЗ (
	|ВЫБРАТЬ
	|	Таблица.ЭтапПотребитель.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&МассивСсылок)
	|	И Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.ЭтапПотребитель.ПометкаУдаления
	|	И Таблица.Ссылка.ПартияПроизводства <> Таблица.ЭтапПотребитель.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка.ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.ЭтапПотребитель В(&МассивСсылок)
	|	И НЕ Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И Таблица.ЭтапПотребитель.ПартияПроизводства <> Таблица.Ссылка.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.ЭтапПотребитель.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&МассивСсылок)
	|	И Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.ЭтапПотребитель.ПометкаУдаления
	|	И Таблица.Ссылка.ПартияПроизводства <> Таблица.ЭтапПотребитель.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка.ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
	|ГДЕ
	|	Таблица.ЭтапПотребитель В(&МассивСсылок)
	|	И НЕ Таблица.ОбработатьПоСпецификации
	|	И НЕ Таблица.Отменено
	|	И НЕ Таблица.Ссылка.ПометкаУдаления
	|	И Таблица.ЭтапПотребитель.ПартияПроизводства <> Таблица.Ссылка.ПартияПроизводства
	|
	|) КАК ДочерниеЦепочки
	|
	|ГДЕ
	|	НЕ ДочерниеЦепочки.ПартияПроизводства В (&МассивДочернихЦепочек)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ВтДочерниеЦепочки КАК ДочерниеЦепочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
	|		ПО ДочерниеЦепочки.ПартияПроизводства = Документ.ПартияПроизводства
	|ГДЕ
	|	НЕ Документ.ПометкаУдаления");
	
	Очередь = ЦепочкаЭтапов(ПартияПроизводства);
	
	Пока Очередь.Количество() > 0 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", Очередь);
		Запрос.УстановитьПараметр("МассивДочернихЦепочек", ДочерниеЦепочки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Очередь.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Очередь.Добавить(Выборка.Ссылка);
			ДочерниеЦепочки.Добавить(Выборка.ПартияПроизводства);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДочерниеЦепочки;
	
КонецФункции

// Возвращает всех последователей
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//   - Массив - массив всех последователей.
//
Функция ВсеПоследователи(Ссылка) Экспорт
	
	Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Распоряжение");
	
	НаправлениеОбхода = УправлениеПроизводством.НаправлениеОбходаГрафаВперед();
	
	Вершина = ГрафЦепочкиЭтапов(Идентификатор, НаправлениеОбхода).Найти(Ссылка, "Ссылка");
	
	Если Вершина <> Неопределено Тогда
		Возврат УправлениеПроизводством.НайтиОкружениеВершины(Вершина);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

// Возвращает всех предшественников
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//   - Массив - массив всех предшественников.
//
Функция ВсеПредшественники(Ссылка) Экспорт
	
	Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Распоряжение");
	
	НаправлениеОбхода = УправлениеПроизводством.НаправлениеОбходаГрафаНазад();
	
	Вершина = ГрафЦепочкиЭтапов(Идентификатор, НаправлениеОбхода).Найти(Ссылка, "Ссылка");
	
	Если Вершина <> Неопределено Тогда
		Возврат УправлениеПроизводством.НайтиОкружениеВершины(Вершина);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

// Текст запроса для создания временной таблицы ВТПоследователи.
//
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаВТПоследователи() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Этап   КАК Последователь
		|ПОМЕСТИТЬ ВТПоследователи
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Последователь";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере временную таблицу ВТПоследователи.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Этапы					 - Массив					 - этапы.
//
Процедура СоздатьВТПоследователи(МенеджерВременныхТаблиц, Этапы) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаВТПоследователи());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(Этапы) = Тип("Массив") Тогда
		МассивСсылок = Этапы;
	ИначеЕсли ТипЗнч(Этапы) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Этапы);
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Текст запроса для создания временной таблицы ВТПредшественники.
//
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаВТПредшественники() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Этап   КАК Ссылка,
		|	Таблица.Ссылка КАК Предшественник
		|ПОМЕСТИТЬ ВТПредшественники
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2)
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Предшественник";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере временную таблицу ВТПредшественники.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Этапы					 - Массив					 - этапы.
//
Процедура СоздатьВТПредшественники(МенеджерВременныхТаблиц, Этапы) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаВТПредшественники());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(Этапы) = Тип("Массив") Тогда
		МассивСсылок = Этапы;
	ИначеЕсли ТипЗнч(Этапы) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Этапы);
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает в менеджере временную таблицу ВТСвязиЭтапов.
//  Поля таблицы:
//  - Этап
//  - СледующийЭтап.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер для создания временной таблицы
//  МассивСсылок			 - Массив - этапы производства
//  ТолькоВнутренниеСвязи	 - Булево - признак, связи нужно получить в пределах одного распоряжения.
//
Процедура СоздатьВТСвязиЭтапов(МенеджерВременныхТаблиц, МассивСсылок, ТолькоВнутренниеСвязи = Ложь) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Этап,
		|	Таблица.Этап   КАК СледующийЭтап
		|ПОМЕСТИТЬ ВТСвязиЭтапов
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И Таблица.Этап.Проведен
		|	И &ОтборПоТипуСвязиПоследователи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	Таблица.Этап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|	И &ОтборПоТипуСвязиПоследователи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|	И &ОтборПоТипуСвязиПредшественники
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ПланироватьНеРанее В (&МассивСсылок)
		|	И Таблица.Ссылка.Проведен
		|	И &ОтборПоТипуСвязиПредшественники
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	СледующийЭтап";
		
	Если ТолькоВнутренниеСвязи Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоТипуСвязиПоследователи", 
			"Таблица.Ссылка.Распоряжение = Таблица.Этап.Распоряжение");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоТипуСвязиПредшественники", 
			"ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение = Таблица.Ссылка.Распоряжение");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоТипуСвязиПоследователи", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоТипуСвязиПредшественники", "");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает в менеджере временную таблицу ВТСвязиЭтапов.
//  Поля таблицы:
//  - Этап
//  - СледующийЭтап.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - менеджер для создания временной таблицы
//  Распоряжения			 - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - распоряжение
//  ТолькоВнутренниеСвязи	 - Булево - признак, связи нужно получить в пределах одного распоряжения.
//
Процедура СоздатьВТСвязиЭтаповПоРаспоряжению(МенеджерВременныхТаблиц, Распоряжения, ТолькоВнутренниеСвязи = Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Этап,
		|	Таблица.Этап   КАК СледующийЭтап
		|ПОМЕСТИТЬ ВТСвязиЭтапов
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка.Распоряжение В (&Распоряжения)
		|	И Таблица.Ссылка.Проведен
		|	И Таблица.Этап.Проведен
		|	И (&ТолькоВнутренниеСвязи И Таблица.Этап.Распоряжение = Таблица.Ссылка.Распоряжение
		|			ИЛИ НЕ &ТолькоВнутренниеСвязи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	Таблица.Этап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	НЕ &ТолькоВнутренниеСвязи
		|	И Таблица.Этап.Распоряжение В (&Распоряжения)
		|	И Таблица.Ссылка.Проведен
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение В (&Распоряжения)
		|	И Таблица.Проведен
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И (&ТолькоВнутренниеСвязи
		|		И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение = Таблица.Распоряжение
		|		ИЛИ НЕ &ТолькоВнутренниеСвязи)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	НЕ &ТолькоВнутренниеСвязи
		|	И Таблица.Проведен
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение В (&Распоряжения)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Этап,
		|	СледующийЭтап");
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("ТолькоВнутренниеСвязи", ТолькоВнутренниеСвязи);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выполняет поиск циклов в цепочке этапов. В качестве идентификатора
// может быть передан заказ на производство или партия производства.
//
// Параметры:
//  Идентификатор	 - ДокументСсылка.ЗаказНаПроизводство2_2, СправочникСсылка.ПартииПроизводства - Идентификатор цепочки.
//  ЭтапОшибка		 - ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на этап, в котором обнаружено зацикливание.
//
// Возвращаемое значение:
//   - Булево - Истина, если цикл найден.
//
Функция ЕстьЦиклыВЦепочкеЭтапов(Идентификатор, ЭтапОшибка = Неопределено) Экспорт
	
	Граф = ГрафЦепочкиЭтапов(Идентификатор);
	
	Возврат УправлениеПроизводством.ЕстьЦиклыВГрафе(Граф, ЭтапОшибка);
	
КонецФункции

// Возвращает назначения этапов
//
// Параметры:
//  МассивСсылок - Массив - массив этапов
//  РезультатВМассив - Булево - признак, результатом должен быть массив назначений.
//
// Возвращаемое значение:
//   - Массив, Соответствие - назначений этапов.
//
Функция НазначенияЭтапов(МассивСсылок, РезультатВМассив = Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Ссылка     КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Если РезультатВМассив Тогда
	
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	Иначе
		
		Результат = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Ссылка, Выборка.Назначение);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Возвращает этапы по назначению
//
// Параметры:
//  МассивСсылок - Массив - массив назначений
//  РезультатВМассив - Булево - признак, результатом должен быть массив этапов.
//
// Возвращаемое значение:
//   - Массив, Соответствие - найденные этапы.
//
Функция НайтиЭтапыПоНазначению(МассивСсылок, РезультатВМассив = Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка     КАК Ссылка,
		|	Таблица.Назначение КАК Назначение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Назначение В (&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Если РезультатВМассив Тогда
	
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	Иначе
		
		Результат = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Назначение, Выборка.Ссылка);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;

КонецФункции

// Возвращает основное изделие цепочки этапов (определяется по первой строке).
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап производства.
//
// Возвращаемое значение:
//   - Структура - номенклатура и характеристика основного изделия.
//
Функция ОсновноеИзделиеЦепочкиЭтапов(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Номенклатура,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)                          КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|	ПО Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|	И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
	|	И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Номенклатура,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)                          КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|	ПО Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|	И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
	|	И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Новый Структура("Номенклатура, Характеристика, Количество",,, 0);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список общих реквизитов цепочки этапов
//
// Параметры:
//  ВключитьРеквизитыРаспоряжения	 - Булево	 - признак, список необходимо дополнить реквизитами распоряжения.
//
// Возвращаемое значение:
//   - Массив - общие реквизиты цепочки этапов.
//
Функция ОбщиеРеквизитыЦепочкиЭтапов(ВключитьРеквизитыРаспоряжения = Ложь) Экспорт
	
	Реквизиты = Новый Массив;
	
	// общие реквизиты цепочки этапов
	Реквизиты.Добавить("Распоряжение");
	Реквизиты.Добавить("НазначениеПродукция");
	Реквизиты.Добавить("ПартияПроизводства");
	Реквизиты.Добавить("ТипПроизводственногоПроцесса");
	Реквизиты.Добавить("Спецификация");
	
	// реквизиты распоряжения
	Если ВключитьРеквизитыРаспоряжения Тогда
		
		Реквизиты.Добавить("ДинамическаяСтруктура");
		Реквизиты.Добавить("НаправлениеДеятельности");
		Реквизиты.Добавить("ХозяйственнаяОперация");
		Реквизиты.Добавить("Партнер");
		Реквизиты.Добавить("Договор");
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает подразделение-исполнитель этапов производства
//
// Параметры:
//  МассивСсылок	 - Массив	 - список этапов производства.
//
// Возвращаемое значение:
//  Соответствие - подразделения-исполнители этапов производства.
//
Функция ПодразделенияИсполнители(МассивСсылок) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "Подразделение");
	
КонецФункции

// Возвращает данные партии производства
//
// Параметры:
//  Распоряжение		 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  НазначениеПродукция	 - СправочникСсылка.Назначения			 - назначение продукции ( при обособлении по целевому назначению )
//  ПартияПроизводства	 - СправочникСсылка.ПартииПроизводства - партия производства
//
// Возвращаемое значение:
//  Структура - данные запущенной в производство партии.
//
Функция ДанныеПартииПроизводства(Распоряжение, НазначениеПродукция, ПартияПроизводства) Экспорт
	
	ДанныеПартии = Новый Структура("
		|Распоряжение,
		|НазначениеПродукция,
		|ПартияПроизводства,
		|Организация,
		|ВнутренняяПереработка,
		|ОрганизацияДавалец,
		|ХозяйственнаяОперация,
		|Партнер,
		|Договор,
		|НачалоПроизводства,
		|ПодразделениеДиспетчер,
		|НаправлениеДеятельности,
		|Спецификация,
		|ТипПроизводственногоПроцесса,
		|ОсновноеИзделиеНоменклатура,
		|ОсновноеИзделиеХарактеристика,
		|Номенклатура,
		|Характеристика,
		|Количество,
		|ДинамическаяСтруктура");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&Распоряжение                  КАК Распоряжение,
		|	&НазначениеПродукция           КАК НазначениеПродукция,
		|	&ПартияПроизводства            КАК ПартияПроизводства,
		|
		|	Заказы.Организация             КАК Организация,
		|	Заказы.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	Заказы.Партнер                 КАК Партнер,
		|	Заказы.Договор                 КАК Договор,
		|	Заказы.НачатьНеРанее           КАК НачалоПроизводства,
		|	Заказы.Подразделение           КАК ПодразделениеДиспетчер,
		|	Заказы.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Заказы.ДинамическаяСтруктура   КАК ДинамическаяСтруктура,
		|
		|	ЕСТЬNULL(Партии.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))          КАК Спецификация,
		|	ЕСТЬNULL(Партии.ТипПроцесса, ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)) КАК ТипПроизводственногоПроцесса,
		|	ЕСТЬNULL(Партии.ОсновноеИзделиеНоменклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))    КАК ОсновноеИзделиеНоменклатура,
		|	ЕСТЬNULL(Партии.ОсновноеИзделиеХарактеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ОсновноеИзделиеХарактеристика,
		|	ЕСТЬNULL(Партии.ВнутренняяПереработка, ЛОЖЬ)                                                    КАК ВнутренняяПереработка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Партии.ВнутренняяПереработка, ЛОЖЬ)
		|			ТОГДА ЕСТЬNULL(Партии.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ                          КАК ОрганизацияДавалец
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК Партии
		|		ПО Партии.Ссылка = &ПартияПроизводства
		|ГДЕ
		|	Заказы.Ссылка = &Распоряжение");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("НазначениеПродукция", НазначениеПродукция);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеПартии, Выборка);
	
	ДанныеПартии.Номенклатура = Выборка.ОсновноеИзделиеНоменклатура; // для совместимости механизма расчета нормативов
	ДанныеПартии.Характеристика = Выборка.ОсновноеИзделиеХарактеристика;
	ДанныеПартии.Количество = 0;
	
	Если Не ПартияПроизводства.Пустая() Тогда
		
		Если Выборка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(Изделия.Количество) КАК Количество
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Изделия
				|			ПО Изделия.Ссылка = ЭтапПроизводства.Ссылка
				|			И Изделия.Номенклатура = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура
				|			И Изделия.Характеристика = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеХарактеристика
				|ГДЕ
				|	ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
				|	И ЭтапПроизводства.Проведен
				|	И НЕ Изделия.Отменено
				|
				|ИМЕЮЩИЕ
				|	СУММА(Изделия.Количество) > 0";
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				ДанныеПартии.Количество = Выборка.Количество;
			КонецЕсли;
			
		Иначе
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(ВложенныйЗапрос.КоличествоТЧ)    КАК КоличествоТЧ,
				|	СУММА(ВложенныйЗапрос.КоличествоШапка) КАК КоличествоШапка
				|ИЗ
				|	(ВЫБРАТЬ
				|		СУММА(ЕСТЬNULL(Изделия.Количество, 0))       КАК КоличествоТЧ,
				|		СУММА(ЭтапПроизводства.КоличествоУпаковокПлан
				|				* ЕСТЬNULL(&КоэффициентУпаковки, 1)) КАК КоличествоШапка
				|	ИЗ
				|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
				|				ПО Изделия.Ссылка = ЭтапПроизводства.Ссылка
				|				И Изделия.Номенклатура = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура
				|				И Изделия.Характеристика = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеХарактеристика
				|				И НЕ Изделия.Отменено
				|	ГДЕ
				|		ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
				|		И ЭтапПроизводства.Проведен
				|		И ЭтапПроизводства.НомерСледующегоЭтапа = 0
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		СУММА(Изделия.Количество),
				|		0
				|	ИЗ
				|		Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
				|				ПО Изделия.Ссылка = ЭтапПроизводства.Ссылка
				|				И Изделия.Номенклатура = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура
				|				И Изделия.Характеристика = ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеХарактеристика
				|	ГДЕ
				|		ЭтапПроизводства.ПартияПроизводства = &ПартияПроизводства
				|		И ЭтапПроизводства.Проведен
				|		И ЭтапПроизводства.НомерСледующегоЭтапа = 0
				|		И НЕ Изделия.Отменено) КАК ВложенныйЗапрос
				|
				|ИМЕЮЩИЕ
				|	СУММА(ВложенныйЗапрос.КоличествоТЧ) > 0
				|		ИЛИ СУММА(ВложенныйЗапрос.КоличествоШапка) > 0";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"&КоэффициентУпаковки",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЭтапПроизводства.УпаковкаПлан",
					"ЭтапПроизводства.ПартияПроизводства.ОсновноеИзделиеНоменклатура"));
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				ДанныеПартии.Количество = ?(Выборка.КоличествоТЧ <> 0,
					Выборка.КоличествоТЧ,
					Выборка.КоличествоШапка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НазначениеПродукция) Тогда
		ДанныеПартии.НаправлениеДеятельности =
			УправлениеПроизводствомПовтИсп.НаправлениеДеятельностиНазначенияПродукции(НазначениеПродукция);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеПартии);
	
КонецФункции

// Возвращает долю стоимости выходных изделий остальных этапов цепочки
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЭтапПроизводства2_2 - этап производства.
//
// Возвращаемое значение:
//  Число - доля стоимости выходных изделий остальных этапов цепочки.
//
Функция ДоляСтоимостиОстальныхЭтаповЦепочки(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапыЦепочки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЭтапыПартии
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыЦепочки
	|	ПО ЭтапыЦепочки.ПартияПроизводства = ЭтапПроизводства.ПартияПроизводства
	|
	|ГДЕ
	|	ЭтапПроизводства.Ссылка = &Ссылка
	|	И НЕ ЭтапыЦепочки.Ссылка = &Ссылка
	|	И ЭтапыЦепочки.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТабличнаяЧасть.ДоляСтоимости) КАК ДоляСтоимости
	|ИЗ
	|	ЭтапыПартии КАК Документ
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|	ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Отменено
	|ИМЕЮЩИЕ
	|	СУММА(ТабличнаяЧасть.ДоляСтоимости) > 0
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ДоляСтоимости;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭтапами

// Формирует этапы производства.
//
// Параметры:
//  Параметры - Структура - настройки формирования документов.
//		См. Документы.ЭтапПроизводства2_2.ПараметрыФормированияЭтапов.
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат. Результатом является
//		количество записанных документов.
//
Процедура СформироватьЭтапы(Параметры, АдресХранилища) Экспорт
	
	// Формирование этапов
	КлючеваяОперация = "МежцеховоеУправление2_2.ФормированиеЭтаповПроизводства";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	РезультатФормирования = СформироватьЭтапыВнутриЗамераВремени(Параметры);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, РезультатФормирования.СформированоДокументов);
	
	Если РезультатФормирования.ЕстьОшибка Тогда
		ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Дополнительные действия после формирования этапов	
	Если Параметры.РассчитатьГрафик Тогда
		
		ПараметрыПланирования = Новый Структура;
		ПараметрыПланирования.Вставить("Распоряжения", Параметры.Распоряжения);
		ПараметрыПланирования.Вставить("ЗадействоватьРезервДоступности", Параметры.ПриРасчетеГрафикаЗадействоватьРезерв);
		АдресРезультатПланирования = ПоместитьВоВременноеХранилище(Неопределено);
		
		Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикРаспоряжений(
			ПараметрыПланирования,
			АдресРезультатПланирования);
		
		РезультатПланирования = ПолучитьИзВременногоХранилища(АдресРезультатПланирования);
		Если РезультатПланирования.ЕстьОшибки Тогда
			РезультатФормирования.ЕстьОшибка = Истина;
			РезультатФормирования.ОшибкаТекст = СтрШаблон(
				НСтр("ru = 'При планировании заказа %1 возникли ошибки. Подробнее см. в рабочем месте ""Планирование графика заказа"".';
					|en = 'Errors occurred when planning order %1. For more information, see the ""Order schedule planning"" workplace.'"),
				УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(РезультатПланирования.РаспоряжениеОшибка, ""));;
			РезультатФормирования.ОшибкаСсылка = РезультатПланирования.РаспоряжениеОшибка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПередатьЭтапыКВыполнению Тогда
		
		ПараметрыПередачи = Новый Структура("Распоряжения", Параметры.Распоряжения);
		АдресРезультатПередачи = ПоместитьВоВременноеХранилище(Неопределено);
		
		ПередатьЭтапыКВыполнениюОтложенно(ПараметрыПередачи, АдресРезультатПередачи);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
КонецПроцедуры

// Функция - конструктор структуры параметров формирования этапов
//
// Возвращаемое значение:
//  Структура - параметры формирования
//
Функция ПараметрыФормированияЭтапов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Распоряжения", Новый Массив);
	
	// Параметры обеспечения
	Результат.Вставить("РезервироватьМатериалы", Ложь);
	Результат.Вставить("РезервироватьПФ", Ложь);
	
	Результат.Вставить("ЗаменятьМатериалыНаАналоги", Ложь);
	Результат.Вставить("ЗаменятьПФНаАналоги", Ложь);

	Результат.Вставить("ДоступныеРезервыВГрафике");
	
	// Действия, выполняемые после формирования этапов
	Результат.Вставить("ПередатьЭтапыКВыполнению", Ложь);
	Результат.Вставить("РассчитатьГрафик", Ложь);
	Результат.Вставить("ПриРасчетеГрафикаЗадействоватьРезерв", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Помечает на удаление цепочки этапов по переданному отбору.
//
// Параметры:
//  Отбор               - ДокументСсылка.ЗаказНаПроизводство2_2, СправочникСсылка.ПартииПроизводства - отбор
//  ВключатьПодчиненные - Булево - определяет, будут ли помечены на удаление подчиненные цепочки.
//
// Возвращаемое значение:
//  Структура - результат
//
Функция ПометитьНаУдалениеЭтапы(Отбор, ВключатьПодчиненные = Истина) Экспорт
	
	Результат = Новый Структура("КоличествоОбработано,ЕстьОшибки,ОшибкаСсылка",0,Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.ПартияПроизводства КАК ПартияПроизводства,
		|	Таблица.Распоряжение КАК Распоряжение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
		|			ПО Таблица.Ссылка = НормативныйГрафик.ЭтапПроизводства
		|
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И &Отбор
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.ПартияПроизводства,
		|	Таблица.Распоряжение
		|
		|УПОРЯДОЧИТЬ ПО
		|	МИНИМУМ(ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -Таблица.ДлительностьДоВыпуска))
		|");
	
	УстановленыОтборы = Ложь;
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТипОтбора = ТипЗнч(Отбор);
		ДоступныеОтборы = Новый Структура;
		Если ТипОтбора = Тип("ДокументСсылка.ЗаказНаПроизводство2_2") Тогда
			ДоступныеОтборы.Вставить("Распоряжение", Отбор);
		ИначеЕсли ТипОтбора = Тип("СправочникСсылка.ПартииПроизводства") Тогда
			Если ВключатьПодчиненные Тогда
				Список = ДочерниеЦепочки(Отбор);
				Список.Добавить(Отбор);
			Иначе
				Список = Новый Массив;
				Список.Добавить(Отбор);
			КонецЕсли;
			ДоступныеОтборы.Вставить("ПартияПроизводства", Список);
		КонецЕсли;
		
		ТекстОтбора = "";
		
		Для каждого КлючЗначение Из ДоступныеОтборы Цикл
			
			ТекстОтбора = 
				ТекстОтбора
				+ ?(ПустаяСтрока(ТекстОтбора), "", " И ")
				+ " Таблица."
				+ КлючЗначение.Ключ
				+ " В(&"
				+ КлючЗначение.Ключ
				+ ")";
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
			УстановленыОтборы = Истина;
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", ?(ЗначениеЗаполнено(ТекстОтбора), ТекстОтбора, "ИСТИНА"));
		
	КонецЕсли;
	Если Не УстановленыОтборы Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПартияПроизводства = Выборка.ПартияПроизводства;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
			ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
			Блокировка.Заблокировать();
			
			ЦепочкаЭтапов = ЦепочкаЭтапов(ПартияПроизводства, НаправлениеСортировки.Возр);
			
			Если ЦепочкаЭтапов.ВГраница() = -1 Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка чтения этапов по партии производства';
										|en = 'An error occurred when reading production lot stages'");
			КонецЕсли;
			
			Для каждого СсылкаНаОбъект Из ЦепочкаЭтапов Цикл
				
				ДокументОбъект = СсылкаНаОбъект.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				
				Результат.КоличествоОбработано = Результат.КоличествоОбработано + 1;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Результат.ЕстьОшибки = Истина;
			Результат.ОшибкаСсылка = ПартияПроизводства;
			
			СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеПометкаНаУдалениеЭтапов();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось пометить на удаление цепочку этапов: %1 по причине: %2';
											|en = 'Cannot mark stage chain for deletion: %1. Reason: %2'"),
								ПартияПроизводства,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, ПартияПроизводства.Метаданные(), ПартияПроизводства, ТекстСообщения);
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создает новые/изменяет существующие этапы производства в рамках одной цепочки.
//
// Параметры:
//  Параметры		 - Структура					 - параметры изменения этапов:
//  					* Распоряжение               - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
//  					* ПартияПроизводства         - СправочникСсылка.ПартииПроизводства - партия производства.
//  					* ПоляПартии                 - Структура                             - описание партии производства.
//  					* Действия                   - Массив из Структура                   - список действий с этапами производства, содержит:
//  					   ** Ссылка - ДокументСсылка - 
//  					   ** Тип - Строка - 
//  					   ** ЗначенияЗаполнения - Структура - 
//  АдресХранилища	 - УникальныйИдентификатор, Строка	 - адрес во временном хранилище, по которому будет
//  	помещен результат работы процедуры - идентификатор цепочки.
//
Процедура РедактированиеЦепочкиЭтаповПроизводства(Параметры, АдресХранилища) Экспорт
	
	Распоряжение       = Параметры.Распоряжение;
	ПартияПроизводства = Параметры.ПартияПроизводства;
	ПоляПартии         = Параметры.ПоляПартии;
	Действия           = Параметры.Действия;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = 
		Параметры.ПроводитьБезКонтроляОстатковТоваровОрганизаций;
		
	УстановитьПривилегированныйРежим(Ложь);

	ЕстьОшибки = Ложь;
	ДатаДокумента = ТекущаяДатаСеанса();
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", Распоряжение);
		ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
		Блокировка.Заблокировать();
		
		ОписаниеПартии =
			Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(ПартияПроизводства, ПоляПартии, Истина);
		
		Если ОписаниеПартии.НоваяПартияПроизводства Тогда
			НовыйНомерЭтапаВПартииЗапуска = 1;
		Иначе
			НовыйНомерЭтапаВПартииЗапуска = НовыйНомерЭтапаВПартииЗапуска(ПартияПроизводства);
		КонецЕсли;
		
		Для каждого Действие Из Действия Цикл
			
			Если Действие.Тип = "Создать" Тогда
				
				ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
				ДокументОбъект.УстановитьСсылкуНового(Действие.Ссылка);
				
				ДокументОбъект.Дата = ДатаДокумента;
				ДокументОбъект.НомерПартииЗапуска = ОписаниеПартии.НомерПартииПроизводства;
				ДокументОбъект.НомерЭтапаВПартииЗапуска = НовыйНомерЭтапаВПартииЗапуска;
				
				Номер = "";
				Если ЗначениеЗаполнено(Распоряжение) Тогда
					РеквизитыРаспоряжения = УправлениеПроизводствомПовтИсп.ДанныеПроизводственногоЗаказа(Распоряжение);
					
					Номер = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(РеквизитыРаспоряжения.Номер);
					Номер = СокрЛП(Номер);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеПартии.НомерПартииПроизводства) И ЗначениеЗаполнено(НовыйНомерЭтапаВПартииЗапуска) Тогда
					Номер = НомерДокумента(Номер, ОписаниеПартии.НомерПартииПроизводства, НовыйНомерЭтапаВПартииЗапуска);
				КонецЕсли; 
				
				ДокументОбъект.Номер = Номер;
				
				Реквизиты = Действие.ЗначенияЗаполнения.РеквизитыШапки;
				Реквизиты.Вставить("Ссылка", Действие.Ссылка);
				
				ШаблонНазначения = Документы.ЭтапПроизводства2_2.ШаблонНазначения(Реквизиты);
				Справочники.Назначения.ПриЗаписиДокумента(Реквизиты.Назначение, ШаблонНазначения, ДокументОбъект, Реквизиты.Подразделение, Реквизиты.ВыпускПодДеятельность);
				
				НовыйНомерЭтапаВПартииЗапуска = НовыйНомерЭтапаВПартииЗапуска + 1;
				
			ИначеЕсли Действие.Тип = "Изменить" ИЛИ Действие.Тип = "Удалить" Тогда
				
				ДокументОбъект = Действие.Ссылка.ПолучитьОбъект();
				
				Если Действие.Тип = "Удалить" Тогда
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОбъект.Заполнить(Действие.ЗначенияЗаполнения);
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				
				ДокументОбъект.ОтключитьПроверкуРеквизитовЦепочкиЭтапов();
				ДокументОбъект.ОтключитьРасчетДлительностиДоВыпускаПоЭтапамПроизводства();
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Иначе
				ВызватьИсключение НСтр("ru = 'Найдены ошибки заполнения этапов производства';
										|en = 'There are errors in filled production stages'");
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИмяСобытия = ПроизводствоСервер.СобытиеРедактированиеЦепочкиЭтапов();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Если Не ЕстьОшибки Тогда
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(Распоряжение);
		РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.ЗапуститьРасчет();
	КонецЕсли;
	
	Результат = Новый Структура("ЕстьОшибки, Сообщения", ЕстьОшибки, ПолучитьСообщенияПользователю(Истина));
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Возвращает этапы по отбору
//
// Параметры:
//  Отбор			- Структура	- отбор
//  ВыбиратьПервые	- Число		- ограничение объема выборки
//
// Возвращаемое значение:
//  Массив - найденные этапы
//
Функция НайтиЭтапы(Отбор, ВыбиратьПервые = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	&Отбор");
	
	СписокТекстов = Новый Массив;
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		Для каждого КлючЗначение Из Отбор Цикл
			Если ТипЗнч(КлючЗначение.Ключ) = Тип("Массив") Тогда
				ТекстОтбора = СтрШаблон("Таблица.%1 В (&%1)", КлючЗначение.Ключ);
				СписокТекстов.Добавить(ТекстОтбора);
			Иначе
				ТекстОтбора = СтрШаблон("Таблица.%1 = &%1", КлючЗначение.Ключ);
				СписокТекстов.Добавить(ТекстОтбора);
			КонецЕсли;
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст =
		СтрЗаменить(
			Запрос.Текст,
			"&Отбор",
			?(СписокТекстов.Количество() > 0, СтрСоединить(СписокТекстов, " И "), "ИСТИНА"));
	
	Если ТипЗнч(ВыбиратьПервые) = Тип("Число") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Строка(ВыбиратьПервые)); //@Query-part-1 @Query-part-2
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0)
	
КонецФункции

// Определяет необходимость пометки удаления партии производства
// 
// Параметры:
//  ПартияПроизводства - СправочникСсылка.ПартииПроизводства -  Партия производства
// 
// Возвращаемое значение:
//  Булево -  Пометка удаления партии производства
Функция ПометкаУдаленияПартииПроизводства(ПартияПроизводства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ЭтапыЦепочки.ПометкаУдаления) КАК ПометкаУдаленияЭтапа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапыЦепочки
	|
	|ГДЕ
	|	ЭтапыЦепочки.ПартияПроизводства = &ПартияПроизводства
	|	И НЕ ЭтапыЦепочки.ТипПроизводственногоПроцесса =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
	|");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	Результат = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ПометкаУдаленияЭтапа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает сдвиги этапов внутрии партии
//
// Параметры:
//  Задания - ТаблицаЗначений - колонки соответствуют измерениям, ресурсам и реквизитам регистра сведений
//                              "ЗаданияКРасчетуДлительностиДоВыпускаПоЭтапамПроизводства", есть и служебные колонки:
//             * ПартияПроизводства     - СправочникСсылка.ПартииПроизводства -
//             * УдалитьЭтап            - ДокументСсылка.ЭтапПроизводства2_2 -
//             * ИдентификаторЗаписи    - УникальныйИдентификатор -
//             * УдалитьДеньРегистрации - Число  -
//             * ДатаЗаписи             - Дата   -
//             * ИдентификаторЗадания   - УникальныйИдентификатор - служебная
//             * ДатаЗадания            - Дата                    - служебная
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор 
//                                                                                   не выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ДополнительныеСвойства - Неопределено, Структура - дополнительные свойства выполнения заданий.
//
Процедура РассчитатьСдвигиЭтаповВнутриПартии(
			Задания,
			ИдентификаторыНеОбработанныхЗаписей,
			ДополнительныеСвойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.ПартияПроизводства  КАК ПартияПроизводства,
	|	Задания.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	Задания.ДатаЗаписи          КАК ДатаЗаписи
	|ПОМЕСТИТЬ Задания
	|ИЗ
	|	&Задания КАК Задания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.ПартияПроизводства           КАК ПартияПроизводства,
	|	МИНИМУМ(Задания.ИдентификаторЗаписи) КАК ИдентификаторЗаписи,
	|	МИНИМУМ(Задания.ДатаЗаписи)          КАК ДатаЗаписи
	|ИЗ
	|	Задания КАК Задания
	|СГРУППИРОВАТЬ ПО
	|	Задания.ПартияПроизводства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаписи,
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                                КАК Ссылка,
	|	Таблица.НомерЭтапа                            КАК НомерЭтапа,
	|	Таблица.НомерСледующегоЭтапа                  КАК НомерСледующегоЭтапа,
	|	ВЫБОР
	|		КОГДА Таблица.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА 60
	|		КОГДА Таблица.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА 3600
	|		КОГДА Таблица.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|			ТОГДА 86400
	|		КОГДА Таблица.ЕдиницаИзмеренияДлительностиЭтапа = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА 86400
	|		ИНАЧЕ 1
	|	КОНЕЦ * Таблица.ДлительностьЭтапа             КАК ДлительностьВСекундах,
	|
	|	Таблица.ДлительностьДоВыпуска КАК ДлительностьДоВыпускаВДокументе,
	|
	|	Таблица.Распоряжение          КАК Распоряжение,
	|	Таблица.ПартияПроизводства    КАК ПартияПроизводства,
	|
	|	Таблица.Проведен                                                              КАК Проведен,
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) КАК Завершен
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Задания КАК Задания
	|		ГДЕ
	|			Задания.ПартияПроизводства = Таблица.ПартияПроизводства)
	|	И НЕ Таблица.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Задания", Задания);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТаблицаПартии = Результаты[1].Выгрузить();
	
	ТаблицаЭтапов = Результаты[2].Выгрузить();
	ТаблицаЭтапов.Колонки.Добавить(
		"ДлительностьДоВыпуска",
		ОбщегоНазначения.ОписаниеТипаЧисло(14, 4, ДопустимыйЗнак.Неотрицательный));
		
	ТаблицаЭтапов.Индексы.Добавить("ПартияПроизводства");
	
	ОтборПартия             = Новый Структура("ПартияПроизводства");
	ОтборПроведенНеЗавершен = Новый Структура("Проведен, Завершен", Истина, Ложь);
		
	СписокРегистров = Новый Структура("СтруктураЗаказа");
	
	Для каждого СтрокаТаблицыПартии Из ТаблицаПартии Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПартия, СтрокаТаблицыПартии);
		
		ТаблицаЭтаповПартии = ТаблицаЭтапов.Скопировать(ОтборПартия);
		ТаблицаЭтаповПартии.Индексы.Добавить("НомерСледующегоЭтапа");
		ТаблицаЭтаповПартии.Индексы.Добавить("Проведен, Завершен");
		
		РассчитатьСдвиги(ТаблицаЭтаповПартии);
		
		СписокЭтапов = ТаблицаЭтаповПартии.Скопировать(ОтборПроведенНеЗавершен);
		Если СписокЭтапов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокЭтапов.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
		СписокЭтапов.Индексы.Добавить("Отметка");
		
		СписокКОбработке = СписокЭтапов;
		
		Граница = СписокКОбработке.Количество() - 1;
		Индекс = 0;
		
		ПродолжатьОбработку = Истина;
	
		КоличествоПопыток = 3;
		БылиОшибки = Ложь;
		
		ТекстыОшибок = Новый Соответствие;
		
		Пока ПродолжатьОбработку Цикл
			
			БылиОшибкиВТекущемЭтапе = Ложь;
			ТекущийЭтап = СписокКОбработке[Индекс];
			
			Если ТекущийЭтап.ДлительностьДоВыпуска <> ТекущийЭтап.ДлительностьДоВыпускаВДокументе Тогда
				
				НачатьТранзакцию();
				
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
					ЭлементБлокировки.УстановитьЗначение("Распоряжение",       ТекущийЭтап.Распоряжение);
					ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ТекущийЭтап.ПартияПроизводства);
					ЭлементБлокировки.УстановитьЗначение("Ссылка",             ТекущийЭтап.Ссылка);
					Блокировка.Заблокировать();
					
					ДокументОбъект = ТекущийЭтап.Ссылка.ПолучитьОбъект(); // ДокументОбъект - 
					
					Если ДокументОбъект <> Неопределено
					   И ДокументОбъект.Проведен
					   И ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
						
						ДокументОбъект.ОбменДанными.Загрузка = Истина;
						
						ЗаполнитьЗначенияСвойств(
							ДокументОбъект,
							ТекущийЭтап,,
							"Распоряжение,ПартияПроизводства,Ссылка");
						
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						ЗаписатьДвижения(ДокументОбъект, СписокРегистров, БылиОшибкиВТекущемЭтапе);
						
					КонецЕсли;
					
					Если ТекстыОшибок.Получить(ТекущийЭтап.Ссылка) <> Неопределено Тогда
						ТекстыОшибок.Удалить(ТекущийЭтап.Ссылка);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ИмяСобытия = ПроизводствоСервер.СобытиеРасчетДлительностиДоВыпускаПоЭтапамПроизводства();
					
					ШаблонОшибки = НСтр("ru = 'Не удалось зафиксировать сдвиги этапа производства: %1 по причине: %2';
										|en = 'Cannot commit production stage shifts: %1 due to: %2'");
					ТекстСообщения = СтрШаблон(
										ШаблонОшибки,
										ТекущийЭтап.Ссылка,
										ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						ИмяСобытия,
						УровеньЖурналаРегистрации.Ошибка,
						ТекущийЭтап.Ссылка.Метаданные(),
						ТекущийЭтап.Ссылка,
						ТекстСообщения);
					
					Если ТекстыОшибок.Получить(ТекущийЭтап.Ссылка) = Неопределено Тогда
						ТекстыОшибок.Вставить(ТекущийЭтап.Ссылка, ТекстСообщения);
					КонецЕсли;
					
					БылиОшибкиВТекущемЭтапе = Истина;
					
				КонецПопытки;
			
			КонецЕсли;
			
			ТекущийЭтап.Отметка = Не БылиОшибкиВТекущемЭтапе;
			БылиОшибки = БылиОшибки Или БылиОшибкиВТекущемЭтапе;
			
			Если Граница > Индекс Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			Если БылиОшибки И КоличествоПопыток > 0 Тогда
				СписокКОбработке = СписокЭтапов.НайтиСтроки(Новый Структура("Отметка", Ложь));
				Граница = СписокКОбработке.Количество() - 1;
				Индекс = 0;
				КоличествоПопыток = КоличествоПопыток - 1;
				БылиОшибки = Ложь;
				Продолжить;
			КонецЕсли;
			
			ПродолжатьОбработку = Ложь;
			
		КонецЦикла;
		
		Если БылиОшибки Тогда
			
			ПартияПроизводства = СтрокаТаблицыПартии.ПартияПроизводства;
			
			ИмяСобытия = ПроизводствоСервер.СобытиеРасчетДлительностиДоВыпускаПоЭтапамПроизводства();
			
			ТекстСообщения = СтрШаблон(
								НСтр("ru = 'Не удалось рассчитать сдвиги этапов внутри партии производства: %1';
									|en = 'Cannot calculate stage shifts within the production lot: %1'"),
								ПартияПроизводства);
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				ПартияПроизводства.Метаданные(),
				ПартияПроизводства,
				ТекстСообщения);
			
			МассивТекстовОшибок = Новый Массив;
			МассивТекстовОшибок.Добавить(ТекстСообщения);
			
			Для каждого ЭлементОшибка Из ТекстыОшибок Цикл
				МассивТекстовОшибок.Добавить(ЭлементОшибка.Значение);
			КонецЦикла;
			
			ТекстОшибки = ОтложенныеЗадания.ТекстОшибкиВыполнения(
							Новый Структура("ПартияПроизводства"),
							СтрокаТаблицыПартии,
							СтрСоединить(МассивТекстовОшибок, Символы.ПС));
			
			ИдентификаторыНеОбработанныхЗаписей.Вставить(СтрокаТаблицыПартии.ИдентификаторЗаписи, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрафикПроизводства

// Возвращает статусы документа, находясь в которых он может быть запланирован в графике производства.
//
// Возвращаемое значение:
//  Массив - массив статусов документа.
//
Функция СтатусыЭтапМожетБытьЗапланирован() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	
	Возврат Результат;
	
КонецФункции

// Период выполнения этапа по графику производства
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
// Возвращаемое значение:
//   - Структура - период выполнения этапа по графику производства.
//
Функция ГрафикПроизводства(Ссылка) Экспорт
	
	Результат = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	ГрафикПроизводства = РегистрыСведений.ГрафикЭтаповПроизводства2_2.ГрафикПроизводства(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
	
	Если ГрафикПроизводства.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(Результат, ГрафикПроизводства[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Период выполнения этапа по нормативному графику производства
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
// Возвращаемое значение:
//   - Структура - период выполнения этапа по нормативному графику производства.
//
Функция НормативныйГрафикПроизводства(Ссылка) Экспорт
	
	Результат = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	Если Ссылка.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.ЭтапПроизводства КАК Этап,
		|	ИСТИНА                   КАК Рассчитан,
		|	ДОБАВИТЬКДАТЕ(Таблица.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(Таблица.ДлительностьДоЗапуска, 0))                          КАК НачалоЭтапа,
		|	ДОБАВИТЬКДАТЕ(Таблица.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(Таблица.ДлительностьДоЗапуска + Таблица.Ресурсоемкость, 0)) КАК ОкончаниеЭтапа
		|ИЗ
		|	РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапПроизводства = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Плановая дата поступления изделий
//
// Если график производства используется, то дата окончания этапа из графика,
//  иначе плановая дата по нормативному графику.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
// Возвращаемое значение:
//   - Дата - плановая дата поступления изделий.
//
Функция ПлановаяДатаПоступления(Ссылка) Экспорт
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		ГрафикПроизводства = ГрафикПроизводства(Ссылка);
	Иначе
		ГрафикПроизводства = НормативныйГрафикПроизводства(Ссылка);
	КонецЕсли;
	
	ПлановаяДата = НачалоДня(ГрафикПроизводства.ОкончаниеЭтапа);
	
	Возврат ПлановаяДата;
	
КонецФункции

// Обновляет график движения товаров после расчета графика производства
//
// Параметры:
//  Этапы - Массив - Список этапов производства.
//
Процедура ОбновитьПланируемоеПоступлениеТоваров(Этапы) Экспорт
	
	ЛокальнаяТранзакция = НЕ ТранзакцияАктивна();
	
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
	
		УстановитьПривилегированныйРежим(Истина);
		
		// Блокировка данных
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Этапы.Распоряжение       КАК Распоряжение,
			|	Этапы.ПартияПроизводства КАК ПартияПроизводства,
			|	Этапы.Ссылка             КАК Ссылка
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|ГДЕ
			|	Этапы.Ссылка В (&Этапы)");
		Запрос.УстановитьПараметр("Этапы", Этапы);
		ИсточникДанных = Запрос.Выполнить().Выгрузить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Распоряжение", "Распоряжение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПартияПроизводства", "ПартияПроизводства");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		// Выполним ответственное чтение реквизитов
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭтапПроизводства22.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства22
		|ГДЕ
		|	ЭтапПроизводства22.Ссылка В(&Этапы)
		|	И ЭтапПроизводства22.Статус = &СтатусКВыполнению
		|	И ЭтапПроизводства22.Проведен");
		
		Запрос.УстановитьПараметр("Этапы", Этапы);
		Запрос.УстановитьПараметр("СтатусКВыполнению", Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
				
				ПроведениеДокументов.ПередЗаписьюДокумента(ДокументОбъект, РежимЗаписиДокумента.Проведение, Неопределено);
				ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(ДокументОбъект.Ссылка, "ЗапасыИПотребности");
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
				
				ДвиженияРегистра = ДокументОбъект.Движения["ЗапасыИПотребности"];
				ДвиженияРегистра.Записывать = Истина;
				ДвиженияРегистра.Загрузить(ТаблицыДляДвижений["Таблица" + "ЗапасыИПотребности"]);
				
				ПроведениеДокументов.УстановитьДопСвойстваРегистра(
					ДвиженияРегистра, 
					ДокументОбъект, 
					МенеджерВременныхТаблиц,
					Истина,
					Истина,
					Ложь,
					Ложь);
					
				ДокументОбъект.Движения.Записать(); 

				ПроведениеДокументов.СформироватьЗаданияНаОтложенныеДвижения(ДокументОбъект, МенеджерВременныхТаблиц);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Снимает признак ручного размещения в графике производства у этапов.
//
// Параметры:
//  Этапы - Массив - массив этапов производства, для которых необходимо снять признак ручного размещения в графике.
//	КонтролироватьПараметрыРазмещения - Булево - флаг, обозначающий что при записи этапа необходимо выполнить
//		контроль изменения параметров размещения в графике и соответственно при их изменении отметить этап
//		как требующий пересчета графика.
//
Процедура ОтменитьРучноеРазмещениеЭтаповВГрафике(Этапы, КонтролироватьПараметрыРазмещения) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Этап
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка В(&Этапы)
	|	И Т.РучноеРазмещениеВГрафике
	|	И Т.Проведен");
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Этап.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.РучноеРазмещениеВГрафике = Ложь;
			ДокументОбъект.ПланироватьРаботуВидовРабочихЦентров = ДокументОбъект.ВидыРабочихЦентров.Количество() > 0;
			
			Если НЕ КонтролироватьПараметрыРазмещения Тогда
				ДокументОбъект.ОтключитьКонтрольПараметровРазмещенияВГрафике();
			КонецЕсли;
			ДокументОбъект.ОтключитьОбновлениеСостоянияЗаказа();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		Исключение
		
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Отмена ручного размещения в графике';
							|en = 'Canceling manual placement in the schedule'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет график этапов по расписанию и устанавливает им способ планирования "Вручную".
//
// Параметры:
//  Расписание - ТаблицаЗначений - данные рсписания:
//		* Этап - ДокументСсылка.ЭтапПроизводства2_2.
//		* РабочийЦентр - СправочникСсылка.РабочиеЦентры.
//		* Начало - Дата.
//		* Окончание - Дата.
//
Процедура ЗаполнитьГрафикЭтаповПоДаннымРасписания(Расписание) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Расписание.Этап КАК Документ.ЭтапПроизводства2_2) КАК Этап,
		|	Расписание.РабочийЦентр КАК РабочийЦентр,
		|	Расписание.Начало КАК Начало,
		|	Расписание.Окончание КАК Окончание
		|ПОМЕСТИТЬ ВТРасписание
		|ИЗ
		|	&Расписание КАК Расписание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРасписание.Этап КАК Этап,
		|	РабочиеЦентры.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
		|	ВТРасписание.Начало КАК Начало,
		|	ДОБАВИТЬКДАТЕ(ВТРасписание.Окончание, СЕКУНДА, -1) КАК Окончание
		|ИЗ
		|	ВТРасписание КАК ВТРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ПО ВТРасписание.РабочийЦентр = РабочиеЦентры.Ссылка
		|ГДЕ
		|	РабочиеЦентры.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
		|ИТОГИ
		|	МИНИМУМ(Начало),
		|	МАКСИМУМ(Окончание)
		|ПО
		|	Этап");
	
	Запрос.УстановитьПараметр("Расписание", Расписание);
	ВыборкаЭтап = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭтап.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = ВыборкаЭтап.Этап.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			// Реквизиты документа
			ДокументОбъект.ПланироватьРаботуВидовРабочихЦентров	= Ложь;
			ДокументОбъект.РучноеРазмещениеВГрафике = Истина;
			ДокументОбъект.ПланироватьНеРанее = Неопределено;
			
			// Даты графика
			График = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
			График.Рассчитан                       = Истина;
			График.НачалоЭтапа                     = ВыборкаЭтап.Начало;
			График.ОкончаниеПредварительногоБуфера = ВыборкаЭтап.Начало;
			График.НачалоЗавершающегоБуфера        = ВыборкаЭтап.Окончание;
			График.ОкончаниеЭтапа                  = ВыборкаЭтап.Окончание;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ГрафикПроизводства", График);
			
			// Плановые даты поступления
			ДатаПоступления = НачалоДня(График.ОкончаниеЭтапа);
			
			ГрафикДоИзменения = ГрафикПроизводства(ВыборкаЭтап.Этап);
			ДатаПоступленияДоИзменения = НачалоДня(ГрафикДоИзменения.ОкончаниеЭтапа);
			
			УправлениеПроизводством.ОбновитьПлановыеДатыПоступления(
				ДокументОбъект, ДатаПоступления, ДатаПоступленияДоИзменения);
			
			// Виды рабочих центров
			ДокументОбъект.ЗанятостьВидовРабочихЦентров.Очистить();
			
			Выборка = ВыборкаЭтап.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ГраницаПериода = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(
					Выборка.Начало,
					ВыборкаЭтап.ИнтервалПланирования);
				
				Пока ГраницаПериода <= Выборка.Окончание Цикл
					
					СледующийИнтервал = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(
						ГраницаПериода,
						ВыборкаЭтап.ИнтервалПланирования) + 1;
					
					НоваяСтрока = ДокументОбъект.ЗанятостьВидовРабочихЦентров.Добавить();
					НоваяСтрока.ВидРабочегоЦентра = Выборка.ВидРабочегоЦентра;
					НоваяСтрока.ДатаИнтервала = ГраницаПериода;
					НоваяСтрока.Количество = Мин(СледующийИнтервал, Выборка.Окончание + 1) - Макс(ГраницаПериода, Выборка.Начало);
					
					ГраницаПериода = СледующийИнтервал;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		Исключение
		
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Заполнение графика по данным расписания';
							|en = 'Filling the schedule according to the timetable data'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусДокумента

// Формирует массив допустимых статусов на основании настроек программы
//
// Параметры:
//	ИмяДокумента - Строка - Имя вводимого документа.
//
// Возвращаемое значение:
//	Массив - массив допустимых статусов.
//
Функция ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента) Экспорт
	
	ДопустимыеСтатусы = Новый Массив;
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Возврат ДопустимыеСтатусы;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
 	ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2[НовыйСтатус];
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка                КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Статус                КАК ТекущийСтатус,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	&Статус                                 КАК НовыйСтатус,
		|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                   КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен              КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
		|	ИСТИНА                                  КАК ЗаписьПроведением,
		|	ТаблицаДокументов.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаДокументов.ЗаказПереработчику    КАК ЗаказПереработчику,
		|	ТаблицаДокументов.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
		|	ТаблицаДокументов.ДатаОтгрузки          КАК ДатаОтгрузки		
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)");
		
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2 - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению
		И УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(ЗначениеНовогоСтатуса, ВыборкаПроверки.ТекущийСтатус) < 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. этап уже был передан к выполнению';
							|en = 'The ""%Статус%"" status of the %Документ% document is not set as the stage has already been released'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		
		ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					ВыборкаПроверки.Ссылка,
					"Статус",,
					Отказ); 
	
	ИначеЕсли ВыборкаПроверки.ПроизводствоНаСтороне Тогда
		Если ВыборкаПроверки.ЗаказПереработчику = Неопределено Тогда
			Если УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(
					ЗначениеНовогоСтатуса,
					Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению) > 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. не оформлен заказ переработчику';
									|en = 'The ""%Статус%"" status of the %Документ% document is not set as the ""Subcontracting purchase order"" is not registered'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
				
				ОбщегоНазначения.СообщитьПользователю(
							ТекстОшибки,
							ВыборкаПроверки.Ссылка,
							"Статус",,
							Отказ);
			КонецЕсли;
		Иначе
			Если УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(
					ЗначениеНовогоСтатуса,
					Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению) < 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. на основании него оформлен заказ переработчику';
									|en = 'The ""%Статус%"" status of the %Документ% document is not set as the subcontracting purchase order is not registered'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
				
				ОбщегоНазначения.СообщитьПользователю(
							ТекстОшибки,
							ВыборкаПроверки.Ссылка,
							"Статус",,
							Отказ);
			КонецЕсли;
		КонецЕсли;
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КодДействия")
			И (ДополнительныеПараметры.КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" Или ДополнительныеПараметры.КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ_ПРИОРИТЕТНО_ОБОСОБЛЕННО")
			И ВыборкаПроверки.НеОтгружатьЧастями 
			И ВыборкаПроверки.ДатаОтгрузки = '00010101' Тогда
			
			ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. в заказе переработчику установлен признак ""Отгружать одной датой"" и дата отгрузки не заполнена';
								|en = 'The ""%Статус%"" status is not set for the ""%Документ%"" document as the ""One-day shipping"" checkbox is not selected for the subcontracting purchase order and the shipment date is not filled'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
			
			ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,
						ВыборкаПроверки.Ссылка,
						"Статус",,
						Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область Операции

// Возвращает статусы документа, в которых доступно выполнение производственных операций.
//
// Параметры:
//  Параметры	 - ДанныеФормыСтруктура, Структура	 - структура, содержащая параметры подразделения.
//
// Возвращаемое значение:
//  Массив - массив статусов документа.
//
Функция СтатусыДоступноВыполнениеОпераций(Параметры) Экспорт
	
	Результат = Новый Массив;
	
	Если Параметры.ИспользоватьСменныеЗадания
		ИЛИ Параметры.ИспользоватьПооперационноеПланирование Тогда
		Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	КонецЕсли;
	Результат.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные этапов для расчета очереди производственных операций.
//
// Параметры:
//  Ссылки - ДокументСсылка.ЭтапПроизводства2_2, Массив из ДокументСсылка.ЭтапПроизводства2_2 - этап производства.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на этап.
//   * Значение - Структура:
//        * Ключ - Строка - имя свойства.
//        * Значение - Строка - значение свойства.
//
Функция ДанныеДляРасчетаОчередиОпераций(Ссылки) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РеквизитыДокумента.Ссылка                        КАК Ссылка,
	|	РеквизитыДокумента.Статус                        КАК Статус,
	|	РеквизитыДокумента.Распоряжение                  КАК Распоряжение,
	|	РеквизитыДокумента.Подразделение                 КАК Подразделение,
	|	РеквизитыДокумента.Спецификация                  КАК Спецификация,
	|	РеквизитыДокумента.Этап                          КАК ЭтапСпецификации,
	|	РеквизитыДокумента.МаршрутнаяКарта               КАК МаршрутнаяКарта,
	|	РеквизитыДокумента.КоэффициентМаршрутнойКарты    КАК КоэффициентМаршрутнойКарты,
	|
	|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПервойОперации, 0)    КАК ИдентификаторПервойОперации,
	|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПоследнейОперации, 0) КАК ИдентификаторПоследнейОперации,
	|	ЕСТЬNULL(РеквизитыДеления.ОтмененоПоследняяОперация, 0)      КАК ОтмененоПоследняяОперация,
	|
	|	РеквизитыДокумента.ПартияПроизводства                               КАК ПартияПроизводства,
	|	РеквизитыДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Номенклатура,
	|	РеквизитыДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК Характеристика,
	|	РеквизитыДокумента.КоличествоУпаковокПлан                           КАК КоличествоУпаковокПлан,
	|	ЕСТЬNULL(&КоэффициентУпаковки, 1)                                   КАК КоэффициентУпаковки,
	|
	|	ВЫБОР
	|		КОГДА РеквизитыДокумента.Проведен
	|			И (
	|				(ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеПланирование, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьСменныеЗадания, ЛОЖЬ))
	|					И РеквизитыДокумента.Статус В (
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ИЛИ ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеУправление, ЛОЖЬ)
	|					И РеквизитыДокумента.Статус В (
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|			)
	|			И ВЫБОР
	|				КОГДА &ХранитьОперацииВРесурсныхСпецификациях
	|						И РеквизитыДокумента.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|					ТОГДА ИСТИНА В (
	|								ВЫБРАТЬ ПЕРВЫЕ 1
	|									ИСТИНА
	|								ИЗ
	|									Справочник.ТехнологическиеОперации КАК Т
	|								ГДЕ
	|									Т.Владелец = РеквизитыДокумента.Этап И НЕ Т.ПометкаУдаления)
	|				ИНАЧЕ РеквизитыДокумента.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяРассчитать,
	|
	|	ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьСменныеЗадания, ЛОЖЬ) КАК ИспользоватьСменныеЗадания,
	|
	|	РеквизитыДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) КАК ВАрхиве
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК РеквизитыДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
	|	ПО РеквизитыДокумента.Ссылка = РеквизитыДеления.Этап
	|ГДЕ
	|	РеквизитыДокумента.Ссылка В (&Ссылки)
	|";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"РеквизитыДокумента.УпаковкаПлан",
		"РеквизитыДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&КоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.УстановитьПараметр("ХранитьОперацииВРесурсныхСпецификациях",
		ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		Данные = Новый Структура(
			"Ссылка,
			|Статус,
			|Распоряжение,
			|Подразделение,
			|Спецификация,
			|ЭтапСпецификации,
			|МаршрутнаяКарта,
			|КоэффициентМаршрутнойКарты,
			|ИдентификаторПервойОперации,
			|ИдентификаторПоследнейОперации,
			|ОтмененоПоследняяОперация,
			|ПартияПроизводства,
			|Номенклатура,
			|Характеристика,
			|КоличествоУпаковокПлан,
			|КоэффициентУпаковки,
			|ТребуетсяРассчитать,
			|ИспользоватьСменныеЗадания,
			|ВАрхиве");
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		Результат.Вставить(Выборка.Ссылка, Данные);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Представление

// Возвращает строку, формирующую представление этапа производства, для подстановки в текст запроса.
//
// Параметры:
//  СинонимТаблицыЭтапПроизводства - Строка - синоним таблицы запроса, получающей данные документа ЭтапПроизводства2_2.
//
// Возвращаемое значение:
//  Строка - строка для подстановки в текст запроса.
//
Функция ТекстЗапросаПредставлениеЭтапа(СинонимТаблицыЭтапПроизводства) Экспорт
	
	Результат = "%1.Номер + "", "" + %1.НаименованиеЭтапа";
	Результат = СтрЗаменить(Результат, "%1", СинонимТаблицыЭтапПроизводства);
	
	Возврат Результат;
	
КонецФункции

// Выполняет подстановку в текст запроса поля "Представление этапа производства"
//
// Параметры:
//  ТекстЗапроса					 - Строка	 - текст запроса
//  ИмяПоля							 - Строка	 - имя поля
//  СинонимТаблицыЭтапПроизводства	 - Строка	 - синоним таблицы запроса, получающей данные документа ЭтапПроизводства2_2
//
Процедура ВыполнитьПодстановкуПоляПредставлениеЭтапа(ТекстЗапроса, ИмяПоля, СинонимТаблицыЭтапПроизводства) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоля, Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа(СинонимТаблицыЭтапПроизводства));
	
КонецПроцедуры

// Формирует представление этапа производства по данным документа.
// Если представление необходимо получить в запросе, то следует
// воспользоваться функцией ТекстЗапросаПредставлениеЭтапа.
//
// Параметры:
//  ДанныеЭтапа - Структура - данные этапа для формирования представления:
//		* Номер - Строка
//		* НаименованиеЭтапа - Строка
//
// Возвращаемое значение:
//  Строка - представление этапа производства.
//
Функция ПредставлениеЭтапа(ДанныеЭтапа) Экспорт
	
	Если ТипЗнч(ДанныеЭтапа) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЭтапа, "Номер,НаименованиеЭтапа");
	Иначе
		Реквизиты = ДанныеЭтапа;
	КонецЕсли;
	
	Возврат СтрШаблон("%1, %2", Реквизиты.Номер, Реквизиты.НаименованиеЭтапа);
	
КонецФункции

// Формирует расширенное представление этапа производства по данным документа.
// Если представление необходимо получить в запросе, то следует
// воспользоваться функцией ТекстЗапросаПредставлениеЭтапа.
//
// Параметры:
//  ДанныеЭтапа - Структура, ДокументСсылка.ЭтапПроизводства2_2 - данные этапа для формирования представления:
//		* Номер - Строка
//		* НаименованиеЭтапа - Строка
//		* Статус - Строка
//		* Подразделение - Строка
//
// Возвращаемое значение:
//  Строка - представление этапа производства.
//
Функция РасширенноеПредставлениеЭтапа(ДанныеЭтапа) Экспорт
	
	Если ТипЗнч(ДанныеЭтапа) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДанныеЭтапа);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЭтапПроизводства2_2.Номер                        КАК Номер,
		|	ЭтапПроизводства2_2.НаименованиеЭтапа            КАК НаименованиеЭтапа,
		|	ПРЕДСТАВЛЕНИЕ(ЭтапПроизводства2_2.Статус)        КАК СтатусПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЭтапПроизводства2_2.Подразделение) КАК ПодразделениеПредставление
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|ГДЕ
		|	ЭтапПроизводства2_2.Ссылка = &Ссылка";
		Реквизиты = Запрос.Выполнить().Выгрузить()[0];
	Иначе
		Реквизиты = ДанныеЭтапа;
	КонецЕсли;
	
	Возврат СтрШаблон("%1, %2, %3, %4", Реквизиты.Номер, Реквизиты.ПодразделениеПредставление, Реквизиты.НаименованиеЭтапа, Реквизиты.СтатусПредставление);
	
КонецФункции

// Формирует представление основного изделия этапа.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - этап.
//
// Возвращаемое значение:
//  Строка - представление основного изделия.
//
Функция ОсновноеИзделиеПредставление(Ссылка) Экспорт
	
	ОсновноеИзделиеПредставление = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Таблица.ПартияПроизводства.ОсновноеИзделиеНоменклатура.Наименование, """") КАК НоменклатураПредставление,
	|	ВЫБОР
	|		КОГДА Таблица.ПартияПроизводства.ОсновноеИзделиеХарактеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Таблица.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), 
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА Таблица.ПартияПроизводства.ОсновноеИзделиеХарактеристика.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ХарактеристикаПредставление
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	СУММА(Таблица.Количество) КАК Количество
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	Сумма(1) КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|			ПО (Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Ссылка.Проведен)
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сумма(1) КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|			ПО (Документ.ПартияПроизводства = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Ссылка.Проведен)
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|) КАК Таблица
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда

		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		
		ОсновноеИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
																	Выборка.НоменклатураПредставление,
																	Выборка.ХарактеристикаПредставление);
		
		ВыборкаСтрок = Результат[1].Выбрать();
		ВыборкаСтрок.Следующий();
	
		Если ВыборкаСтрок.Количество > 1 Тогда
			
			ОсновноеИзделиеПредставление =
				ОсновноеИзделиеПредставление
				+ " "
				+ СтрШаблон(НСтр("ru = 'и еще %1 %2';
								|en = 'also in %1 %2'"), 
					Формат(ВыборкаСтрок.Количество - 1, "ЧГ="),
					ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
						НСтр("ru = 'изделие';
							|en = 'product'"),
						НСтр("ru = 'изделия';
							|en = 'products'"),
						НСтр("ru = 'изделий';
							|en = 'products'"),
						ВыборкаСтрок.Количество - 1));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОсновноеИзделиеПредставление;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеЗаданий

// Передает этапы к выполнению
//
// Параметры:
//  Параметры		 - Структура - параметры передачи
//  АдресХранилища	 - Строка	 - адрес хранилища, в которое будет помещен результат.
//
Процедура ПередатьЭтапыКВыполнениюОтложенно(Параметры, АдресХранилища) Экспорт
	
	Перем Распоряжения;
	
	Если НЕ Параметры.Свойство("Распоряжения", Распоряжения) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("Количество", 0);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияЭтаповПроизводства.Этап КАК Ссылка,
	|	СостоянияЭтаповПроизводства.Этап.Распоряжение КАК Распоряжение,
	|	СостоянияЭтаповПроизводства.Этап.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	РегистрСведений.СостоянияЭтаповПроизводства КАК СостоянияЭтаповПроизводства
	|ГДЕ
	|	СостоянияЭтаповПроизводства.Распоряжение В (&Распоряжения)
	|	И СостоянияЭтаповПроизводства.СостояниеНаМежцеховомУровне = &ГотовКВыполнению");
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("ГотовКВыполнению", Перечисления.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СтатусСформирован = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
				ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
				ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", Выборка.ПартияПроизводства);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект - 
				Если ДокументОбъект = Неопределено ИЛИ ДокументОбъект.Статус <> СтатусСформирован Тогда
					ВызватьИсключение НСтр("ru = 'Обрабатываемый объект не соответствует условиям отбора.';
											|en = 'Processed object does not match filter conditions.'");
				КонецЕсли;
				
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
				
				ДокументОбъект.УстановитьРежимПакетнойПередачиКВыполнению();
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеПередачаЭтаповКВыполнению();
				
				ТекстСообщения = НСтр("ru = 'Не удалось передать к выполнению этап: %Ссылка% по причине: %Причина%';
										|en = 'Cannot pass the stage for completion: %Ссылка%. Reason: %Причина%'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
				
				Продолжить;
				
			КонецПопытки;
			
			Результат.Количество = Результат.Количество + 1;
			
		КонецЦикла;
		
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжения);
		
		Если ИспользоватьОперацииВЭтапах() Тогда
			
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
КонецПроцедуры

// Помечает на удаление цепочки этапов по переданному отбору.
//
// Параметры:
//  Отбор		     - Структура - структура параметров
//  АдресХранилища	 - Строка	 - адрес хранилища, в которое будет помещен результат.
//
Процедура ПометитьНаУдалениеЭтапыОтложенно(Отбор, АдресХранилища) Экспорт
	
	Если ТипЗнч(Отбор) = Тип("Массив") Тогда
		
		Результат = Новый Структура("КоличествоОбработано,ЕстьОшибки,ОшибкаСсылка",0,Ложь);
		Для каждого ЭлементОтбора Из Отбор Цикл
			
			РезультатПорции = ПометитьНаУдалениеЭтапы(ЭлементОтбора);
			
			Результат.КоличествоОбработано = Результат.КоличествоОбработано + РезультатПорции.КоличествоОбработано;
			
			Если РезультатПорции.ЕстьОшибки Тогда
				ЗаполнитьЗначенияСвойств(Результат,РезультатПорции,,"КоличествоОбработано");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Результат = ПометитьНаУдалениеЭтапы(Отбор);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
КонецПроцедуры

// Выполняет необходимые действия по очереди заданий к обработке этапов производства.
//
// Параметры:
//  Задания - ТаблицаЗначений - колонки соответствуют измерениям, ресурсам и реквизитам регистра сведений
//                              "ЗаданияКОбработкеЭтаповПроизводства", есть и служебные колонки:
//             * ЭтапПроизводства       - ДокументСсылка.ЭтапПроизводства2_2 -
//             * ИдентификаторЗаписи    - УникальныйИдентификатор -
//             * УдалитьДеньРегистрации - Число  -
//             * ОбновитьСостояние      - Булево -
//             * ЗаполнитьПоОперациям   - Булево -
//             * ДатаЗаписи             - Дата   -
//             * ИдентификаторЗадания   - УникальныйИдентификатор - служебная
//             * ДатаЗадания            - Дата                    - служебная
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор 
//                                                                                   не выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ДополнительныеСвойства - см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДополнительныеСвойства
//
Процедура ОбработатьДокументОтложенно(
			Задания,
			ИдентификаторыНеОбработанныхЗаписей,
			ДополнительныеСвойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.ЭтапПроизводства     КАК ЭтапПроизводства,
	|	Задания.ОбновитьСостояние    КАК ОбновитьСостояние,
	|	Задания.ЗаполнитьПоОперациям КАК ЗаполнитьПоОперациям,
	|	Задания.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	Задания.ДатаЗаписи           КАК ДатаЗаписи
	|ПОМЕСТИТЬ Задания
	|ИЗ
	|	&Задания КАК Задания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.ЭтапПроизводства              КАК ЭтапПроизводства,
	|	ВЫБОР
	|		КОГДА НЕ Задания.ОбновитьСостояние И НЕ Задания.ЗаполнитьПоОперациям
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Задания.ОбновитьСостояние
	|	КОНЕЦ                                 КАК ОбновитьСостояние,
	|	ВЫБОР
	|		КОГДА НЕ Задания.ОбновитьСостояние И НЕ Задания.ЗаполнитьПоОперациям
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Задания.ЗаполнитьПоОперациям
	|	КОНЕЦ                                 КАК ЗаполнитьПоОперациям,
	|	РеквизитыДокумента.Распоряжение       КАК Распоряжение,
	|	РеквизитыДокумента.ПартияПроизводства КАК ПартияПроизводства,
	|	ВЫБОР
	|		КОГДА (ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеПланирование, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьСменныеЗадания, ЛОЖЬ))
	|			И РеквизитыДокумента.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат))
	|				ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(РеквизитыДокумента.Подразделение.ИспользоватьПооперационноеУправление, ЛОЖЬ)
	|			И РеквизитыДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И РеквизитыДокумента.Проведен         КАК ТребуетсяОтразитьВыполнениеОпераций,
	|	Задания.ИдентификаторЗаписи           КАК ИдентификаторЗаписи,
	|	Задания.ДатаЗаписи                    КАК ДатаЗаписи,
	|	
	|	ПРЕДСТАВЛЕНИЕ(Задания.ЭтапПроизводства) КАК ЭтапПроизводстваПредставление
	|
	|ИЗ
	|	Задания КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыДокумента
	|		ПО Задания.ЭтапПроизводства = РеквизитыДокумента.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаписи,
	|	ЭтапПроизводства
	|
	|ИТОГИ
	|	МАКСИМУМ(ОбновитьСостояние)                   КАК ОбновитьСостояние,
	|	МАКСИМУМ(ЗаполнитьПоОперациям)                КАК ЗаполнитьПоОперациям,
	|	МАКСИМУМ(Распоряжение)                        КАК Распоряжение,
	|	МАКСИМУМ(ПартияПроизводства)                  КАК ПартияПроизводства,
	|	МАКСИМУМ(ТребуетсяОтразитьВыполнениеОпераций) КАК ТребуетсяОтразитьВыполнениеОпераций,
	|	МАКСИМУМ(ИдентификаторЗаписи)                 КАК ИдентификаторЗаписи,
	|	МИНИМУМ(ДатаЗаписи)                           КАК ДатаЗаписи
	|ПО
	|	ЭтапПроизводства
	|";
	
	Запрос.УстановитьПараметр("Задания", Задания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МетаРегистра = Неопределено;
	ИмяСобытия   = Неопределено;
	
	ПоляОшибки   = Неопределено;
	
	ИдентификаторыЗаданийОшибокБлокировкиЭтапа = Неопределено;
	Если ДополнительныеСвойства <> Неопределено Тогда
		ИдентификаторыЗаданийОшибокБлокировкиЭтапа = ДополнительныеСвойства.ИдентификаторыЗаданийОшибокБлокировкиЭтапа;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		Ссылка = Выборка.ЭтапПроизводства;
		
		Если Выборка.ЗаполнитьПоОперациям И Выборка.ТребуетсяОтразитьВыполнениеОпераций Тогда
			ДанныеОпераций = Документы.ПроизводственнаяОперация2_2.ДанныеВыполненныхОпераций(Ссылка);
		КонецЕсли;
		
		ТребуетсяЗаполнитьПоОперациям = Ложь;
		
		ДействиеВыполнено = Истина;
		
		БлокировкаДанныхДляРедактированияВыполнено = Неопределено;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение",       Выборка.Распоряжение);
			ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", Выборка.ПартияПроизводства);
			ЭлементБлокировки.УстановитьЗначение("Ссылка",             Ссылка);
			Блокировка.Заблокировать();
			
			Если Выборка.ЗаполнитьПоОперациям И Выборка.ТребуетсяОтразитьВыполнениеОпераций Тогда
				
				БлокировкаДанныхДляРедактированияВыполнено = Ложь;
				
				ЗаблокироватьДанныеДляРедактирования(Ссылка);
				
				БлокировкаДанныхДляРедактированияВыполнено = Истина;
				
				ТребуетсяЗаполнитьПоОперациям = Истина;
				
				ДокументОбъект = Ссылка.ПолучитьОбъект();
				ДокументОбъект.ЗаполнитьПоОперациям(ДанныеОпераций);
				
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокументОбъект.Прочитать();
					ДокументОбъект.ТребуетсяЗаполнитьПоОперациям = Истина;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если МетаРегистра = Неопределено Тогда
				МетаРегистра = Метаданные.РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства;
				ИмяСобытия   = ОтложенныеЗадания.ИмяСобытия();
			КонецЕсли;
			
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, МетаРегистра,, ТекстИсключения);
			
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			
			ДействиеВыполнено = Ложь;
			
		КонецПопытки;
		
		Если Не ДействиеВыполнено Тогда
			
			Попытка
				
				Если ТребуетсяЗаполнитьПоОперациям Тогда
					ДокументОбъект = Ссылка.ПолучитьОбъект();
					ДокументОбъект.ТребуетсяЗаполнитьПоОперациям = Истина;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
					ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка,
					МетаРегистра,,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
			Если ПоляОшибки = Неопределено Тогда
				ПоляОшибки = Новый Структура;
				ПоляОшибки.Вставить("ЭтапПроизводстваПредставление", "ЭтапПроизводства");
				ПоляОшибки.Вставить("ОбновитьСостояние");
				ПоляОшибки.Вставить("ЗаполнитьПоОперациям");
				ПоляОшибки.Вставить("ТребуетсяОтразитьВыполнениеОпераций");
			КонецЕсли;
			
			ТекстОшибки = ОтложенныеЗадания.ТекстОшибкиВыполнения(ПоляОшибки, Выборка, ТекстИсключения);
			
			ВыборкаИдентификаторы = Выборка.Выбрать();
			Пока ВыборкаИдентификаторы.Следующий() Цикл
				
				ИдентификаторЗаписи = ВыборкаИдентификаторы.ИдентификаторЗаписи;
				
				ИдентификаторыНеОбработанныхЗаписей.Вставить(ИдентификаторЗаписи, ТекстОшибки);
				
				Если БлокировкаДанныхДляРедактированияВыполнено = Ложь
				   И ИдентификаторыЗаданийОшибокБлокировкиЭтапа <> Неопределено Тогда
					ИдентификаторыЗаданийОшибокБлокировкиЭтапа.Добавить(ИдентификаторЗаписи);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Выборка.ОбновитьСостояние Тогда
			
			РегистрыСведений.СостоянияЭтаповПроизводства.ОбновитьСостояниеОпераций(Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//	 Документ           - ДокументСсылка - Документ, на основании которого осуществляется ввод
//	 Статус             - ПеречислениеСсылка - Статус документа, на основании которого осуществляется ввод
//	 ЕстьОшибкиПроведен - Булево - Если Истина - документ, на основании которого осуществляется ввод, не проведен
//	 КВыполнению        - Булево - Позволяет вводить документы в статусе КВыполнению.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ, Статус = Неопределено, ЕстьОшибкиПроведен = Ложь, КВыполнению = Ложь) Экспорт
	
	МассивДопустимыхСтатусов = ДопустимыеСтатусыВводаНаОсновании("");
	ЕстьОшибкиСтатус = МассивДопустимыхСтатусов.Найти(Статус) = Неопределено;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Документ, Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
КонецПроцедуры

#КонецОбласти

#Область Округление

// Возвращает параметры для округления
// 
// Возвращаемое значение:
// 	Структура - элементы содержат структуру параметров округления 
// 				см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров
// 
Функция ПараметрыТЧДляОкругления() Экспорт
	
	ПараметрыТЧ = Новый Структура;
	
	ИмяТЧ = "ВыходныеИзделия";
	ИмяПоляСклад = "Получатель";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	ИмяТЧ = "ПобочныеИзделия";
	ИмяПоляСклад = "Получатель";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	ИмяТЧ = "ОбеспечениеМатериаламиИРаботами";
	ИмяПоляСклад = "Склад";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	ИмяТЧ = "ЭкономияМатериалов";
	ИмяПоляСклад = "Получатель";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	Возврат ПараметрыТЧ;	

КонецФункции

#КонецОбласти

#Область Печать

// Возвращает правила печати печатной формы Задания на отбор (размещение) товаров.
//
// Возвращаемое значение:
//	Массив - элементами, которого является структура (См. Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати).
//
Функция ПравилаПечатиЗаданияНаОтборРазмещение() Экспорт
	
	ПравилаПечати = Новый Массив;
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ОперацияПоступления = Истина;
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ВыходныеИзделия";
	ПравилаПечатиЗадания.ИмяПоляСклад = "Получатель";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ОперацияПоступления = Истина;
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ПобочныеИзделия";
	ПравилаПечатиЗадания.ИмяПоляСклад = "Получатель";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.ОперацияПоступления = Истина;
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ЭкономияМатериалов";
	ПравилаПечатиЗадания.ИмяПоляСклад = "Получатель";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	ПравилаПечатиЗадания = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ПравилаПечатиЗаданияНаОтборРазмещение();
	ПравилаПечатиЗадания.СкладыВТЧ = Истина;
	ПравилаПечатиЗадания.ИмяТЧТовары = "ОбеспечениеМатериаламиИРаботами";
	
	ПравилаПечати.Добавить(ПравилаПечатиЗадания);
	
	Возврат ПравилаПечати;
	
КонецФункции

#КонецОбласти

#Область ИзменениеПартийЭтапов

// Сокращает/увеличивает размер партии с пересчетом данных в табличных частях.
//
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//  Параметры - Структура - параметры выполнения действия
//  РазмерПартии - см. НовыйРазмерПартии
//  Назначения - Структура - назначения изделий и материалов
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция ИзменитьРазмерПартии(ДанныеПартии, Параметры, РазмерПартии, Назначения, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("ЗаказИзменен", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	Этап = Параметры.Этап;
	ПересчитатьПоКоэффициенту = Параметры.ПересчитатьПоКоэффициенту;
	ОтменитьИзделиеВЗаказе = Параметры.ОтменитьИзделиеВЗаказе;
	
	// Выборка этапов с проверкой
	Если ЗначениеЗаполнено(Этап) Тогда
		Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Этап, Результат.Отказ, Результат.Сообщения);
		Если Результат.Отказ Тогда
			Возврат Результат;
		КонецЕсли;
		
		ДанныеЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Этап, "Проведен, Статус, Номер, ПроизводствоНаСтороне, ЗаказПереработчику");
		
		РезультатПроверки = ПроверитьТочкуДеления(ДанныеЭтапа);
		Если РезультатПроверки.Отказ Тогда
			Результат.Отказ = Истина;
			Результат.Сообщения.Добавить(РезультатПроверки.ТекстСообщения);
			Возврат Результат;
		КонецЕсли;
		
		Ссылки.Добавить(Этап);
	Иначе
		Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Неопределено, Результат.Отказ, Результат.Сообщения);
		Если Результат.Отказ Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	СсылкиКБлокировке = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
	Если ОтменитьИзделиеВЗаказе Тогда
		СсылкиКБлокировке.Добавить(ДанныеПартии.Распоряжение);
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		// Сокращение/увеличение
		ПараметрыПартии = Новый Структура("ДанныеПартии, РазмерПартии", ДанныеПартии, РазмерПартии);
		ДанныеЭтапов = ?(ПересчитатьПоКоэффициенту,
			ДанныеЭтаповДляИзмененияПартий(Ссылки, Ложь, Истина).ДанныеПересчета,
			ДанныеЭтаповДляИзмененияПартий(Ссылки, Истина, Ложь).ДанныеДополнения);
		
		ПараметрыИзменения = ИзменитьРазмерПартииВЭтапахПараметры();
		ЗаполнитьЗначенияСвойств(ПараметрыИзменения, Параметры);
		Если ПересчитатьПоКоэффициенту Тогда
			ПараметрыПересчета = ПересчитатьПоКоэффициентуПараметры();
			ПараметрыПересчета.ИзменятьФакт = Ложь;
			ПараметрыПересчета.ИзменятьНоменклатуруДеления = Ложь;
			ПараметрыИзменения.ПараметрыПересчетаПоКоэффициенту = ПараметрыПересчета;
		Иначе
			ПараметрыИзменения.ПересчитатьНоменклатуруДеленияВДанныхСпецификации = Ложь;
		КонецЕсли;
		
		Изменения = ИзменитьРазмерПартииВЭтапах(
			ПараметрыПартии, Ссылки, ДанныеЭтапов, ПересчитатьПоКоэффициенту, Назначения, Результат, ПараметрыИзменения);
		
		Если Результат.Отказ Тогда
			Для каждого Ссылка Из СсылкиКБлокировке Цикл
				РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
		Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
			Результат.ЭтапИзменен.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.ЭтапУдален Цикл
			Результат.ЭтапУдален.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
			Результат.КорректировкаСоздана.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.ЗаказИзменен Цикл
			Результат.ЗаказИзменен.Добавить(Ссылка);
		КонецЦикла;
		
		// Передача резервов
		Отправители = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ЭтапУдален);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отправители, Результат.ЭтапИзменен);
		Если Отправители.ВГраница() <> -1 Тогда
			
			Получатели = ?(Результат.ЭтапУдален.ВГраница() <> -1,
				ОбщегоНазначения.СкопироватьРекурсивно(Результат.ЭтапИзменен),
				Новый Массив);
			
			Изменения = ПередатьРезервы(Отправители, Получатели);
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение связанных регистров
		Если ДанныеПартии.ДинамическаяСтруктура Тогда
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадание(
				ДанныеПартии.Распоряжение,, Истина);
		Иначе
			РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ДобавитьЗадание(
				ДанныеПартии.Распоряжение, Истина);
		КонецЕсли;
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(ДанныеПартии.Распоряжение);
		Если ИспользоватьОперацииВЭтапах() Тогда
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
		КонецЕсли;
		
	Исключение
		
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Изменение размера партии';
					|en = 'Lot size change'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из СсылкиКБлокировке Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Перезаполняет документы по данным ресурсной спецификации.
//
// Параметры:
//  ПартияПроизводства - СправочникСсылка.ПартииПроизводства - ссылка на партию.
//  Параметры - Структура - параметры выполнения действия:
//		* Этап - ДокументСсылка.ЭтапПроизводства2_2 - документ, начиная с которого необходимо выполнить действие.
//		* ЭтапСпецификации - СправочникСсылка.ЭтапыПроизводства - элемент, начиная с которого необходимо выполнить действие.
//			В общем случае соответствует ссылке в этапе-документе. Если состав этапов спецификации был изменен, то параметр
//			уточняет место, начиная с котрого неоходимо создать документы.
//		* РезервироватьМатериалы - Булево.
//		* ЗаменятьМатериалыНаАналоги - Булево.
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция ПерезаполнитьПартию(ПартияПроизводства, Параметры, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	// Чтение реквизитов партии
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПартияПроизводства, "Документ, Назначение");
	
	ДанныеПартии = ДанныеПартииПроизводства(
		ЗначенияРеквизитов.Документ, ЗначенияРеквизитов.Назначение, ПартияПроизводства);
	ДанныеПартии = Новый Структура(ДанныеПартии);
	
	РазмерПартии = НовыйРазмерПартии(ДанныеПартии.Количество, Неопределено, Неопределено);
	
	Назначения = Новый Структура;
	Назначения.Вставить("НазначенияИзделий", Новый ТаблицаЗначений);
	Назначения.Вставить("НазначенияМатериалов", 
		ОбеспечениеПроизводства.КоэффицентыНазначенийОбеспеченияВЭтапеПроизводства(ДанныеПартии, Новый ТаблицаЗначений));
	
	Этап = Параметры.Этап;
	ЭтапСпецификации = ?(Параметры.Свойство("ЭтапСпецификации"), Параметры.ЭтапСпецификации, Неопределено);
	
	// Выборка этапов с проверкой
	Если ЗначениеЗаполнено(Этап) Тогда
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка КАК Ссылка,
			|	ЕСТЬNULL(НормативныйГрафикЭтаповПроизводства.ДлительностьДоВыпуска, ЭтапПроизводства2_2.ДлительностьДоВыпуска) КАК ДлительностьДоВыпуска,
			|	ЭтапПроизводства2_2.ТипПроизводственногоПроцесса В (
			|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
			|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт)) КАК ЭтоСборкаРемонт
			|ПОМЕСТИТЬ ВТЭтапы
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
			|	ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
			|ГДЕ
			|	ЭтапПроизводства2_2.ПартияПроизводства = &ПартияПроизводства
			|	И ЭтапПроизводства2_2.Проведен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Последователи.Ссылка КАК Ссылка
			|ИЗ
			|	ВТЭтапы КАК Этап
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапы КАК Последователи
			|	ПО Этап.ДлительностьДоВыпуска >= Последователи.ДлительностьДоВыпуска
			|ГДЕ
			|	Этап.Ссылка = &Ссылка
			|	И Последователи.Ссылка <> &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	-Последователи.ДлительностьДоВыпуска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьОграничениеПоВыпуску
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|ГДЕ
			|	Изделия.Ссылка В (
			|		ВЫБРАТЬ
			|			Этапы.Ссылка КАК Ссылка
			|		ИЗ
			|			ВТЭтапы КАК Этапы
			|		ГДЕ
			|			Этапы.ЭтоСборкаРемонт)
			|	И Изделия.Произведено");
		Если Не ЗначениеЗаполнено(ЭтапСпецификации) Тогда
			ТекстыЗапроса.Добавить(
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВЫБОР
				|		КОГДА НЕ ЕСТЬNULL(Документ.Этап.ПометкаУдаления, ЛОЖЬ)
				|			ТОГДА Документ.Этап
				|		ИНАЧЕ ЕСТЬNULL(ЭтапыПроизводства.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка))
				|	КОНЕЦ) КАК ЭтапСпецификации
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК Документ
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
				|	ПО Документ.Спецификация = ЭтапыПроизводства.Владелец
				|		И Документ.Этап.Наименование = ЭтапыПроизводства.Наименование
				|		И НЕ ЭтапыПроизводства.ПометкаУдаления
				|ГДЕ
				|	Документ.Ссылка = &Ссылка
				|
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(
				|		РАЗЛИЧНЫЕ ВЫБОР
				|			КОГДА НЕ ЕСТЬNULL(Документ.Этап.ПометкаУдаления, ЛОЖЬ)
				|				ТОГДА Документ.Этап
				|			ИНАЧЕ ЕСТЬNULL(ЭтапыПроизводства.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка))
				|		КОНЕЦ
				|	) = 1");
		КонецЕсли;
		
		Запрос = Новый Запрос(УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса));
		Запрос.УстановитьПараметр("Ссылка", Этап);
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Таблица = МассивРезультатов[1].Выгрузить();
		
		Вершина = Документы.ЭтапПроизводства2_2.ГрафЦепочкиЭтапов(
			ПартияПроизводства,
			УправлениеПроизводством.НаправлениеОбходаГрафаВперед()).Найти(Этап, "Ссылка");
		Если Вершина <> Неопределено Тогда
			Окружение = УправлениеПроизводством.НайтиОкружениеВершины(Вершина);
			Если Окружение.Количество() <> Таблица.Количество() Тогда
				Результат.Отказ = Истина;
				Результат.Сообщения.Добавить(
					НСтр("ru = 'В выбранной точке производственного процесса имеются параллельные маршруты выполнения, действие не может быть выполнено.';
						|en = 'There are parallel execution routes at the selected production process point; the action cannot be completed.'"));
			КонецЕсли;
		КонецЕсли;
		
		Если Не МассивРезультатов[2].Пустой() Тогда
			Результат.Отказ = Истина;
			Результат.Сообщения.Добавить(
				НСтр("ru = 'Этапы не могут быть перезаполнены, так как в партии оформлен выпуск изделий по рассчитываемой стоимости.';
					|en = 'The stages cannot be refilled as product release at the calculated cost is registered in the lot.'"));
		КонецЕсли;
		
		Ссылки = Таблица.ВыгрузитьКолонку("Ссылка");
		Ссылки.Добавить(Этап);
		
		Если Не ЗначениеЗаполнено(ЭтапСпецификации) Тогда
			Выборка = МассивРезультатов[3].Выбрать();
			Если Выборка.Следующий() Тогда
				ЭтапСпецификации = Выборка.ЭтапСпецификации;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Этапы.Ссылка КАК Ссылка,
			|	Этапы.ТипПроизводственногоПроцесса В (
			|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
			|		И ИСТИНА В (
			|			ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|			ГДЕ
			|				Изделия.Ссылка = Этапы.Ссылка
			|				И Изделия.Произведено) КАК ЕстьОграничениеПоВыпуску
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|	ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|	И Этапы.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -Этапы.ДлительностьДоВыпуска)");
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Если Таблица.Количество() = 0 Тогда
			Результат.Отказ = Истина;
			Результат.Сообщения.Добавить(
				НСтр("ru = 'Отсутствуют этапы партии для выполнения действия.';
					|en = 'There are no lot stages to complete the action.'"));
		ИначеЕсли Таблица.Найти(Истина, "ЕстьОграничениеПоВыпуску") <> Неопределено Тогда
			Результат.Отказ = Истина;
			Результат.Сообщения.Добавить(
				НСтр("ru = 'Этапы не могут быть перезаполнены, так как в партии оформлен выпуск изделий по рассчитываемой стоимости.';
					|en = 'The stages cannot be refilled as product release at the calculated cost is registered in the lot.'"));
		Иначе
			Ссылки = Таблица.ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из Ссылки Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		// Перезаполнение
		ПараметрыПартии = Новый Структура("ДанныеПартии, РазмерПартии", ДанныеПартии, РазмерПартии);
		ДанныеЭтапов = ДанныеЭтаповДляИзмененияПартий(Ссылки, Истина, Ложь).ДанныеДополнения;
		
		ПараметрыИзменения = ИзменитьРазмерПартииВЭтапахПараметры();
		ЗаполнитьЗначенияСвойств(ПараметрыИзменения, Параметры);
		ПараметрыИзменения.ПересчитатьНоменклатуруДеленияВДанныхСпецификации = Ложь;
		ПараметрыИзменения.ИзменятьСоставДокументов = Истина;
		ПараметрыИзменения.ЭтапСпецификации = ЭтапСпецификации;
		
		Изменения = ИзменитьРазмерПартииВЭтапах(
			ПараметрыПартии, Ссылки, ДанныеЭтапов, Ложь, Назначения, Результат, ПараметрыИзменения);
		
		Если Результат.Отказ Тогда
			Для каждого Ссылка Из Ссылки Цикл
				РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
		Для каждого Ссылка Из Изменения.ЭтапСоздан Цикл
			Результат.ЭтапСоздан.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
			Результат.ЭтапИзменен.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.ЭтапУдален Цикл
			Результат.ЭтапУдален.Добавить(Ссылка);
		КонецЦикла;
		Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
			Результат.КорректировкаСоздана.Добавить(Ссылка);
		КонецЦикла;
		
		// Передача резервов
		Отправители = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ЭтапУдален);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отправители, Результат.ЭтапИзменен);
		Если Отправители.ВГраница() <> -1 Тогда
			
			Получатели = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ЭтапСоздан);
			Если Результат.ЭтапУдален.ВГраница() <> -1 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, Результат.ЭтапИзменен);
			КонецЕсли;
			
			Изменения = ПередатьРезервы(Отправители, Получатели);
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение связанных регистров
		Если ДанныеПартии.ДинамическаяСтруктура Тогда
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадание(
				ДанныеПартии.Распоряжение,, Истина);
		Иначе
			РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ДобавитьЗадание(
				ДанныеПартии.Распоряжение, Истина);
		КонецЕсли;
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(ДанныеПартии.Распоряжение);
		Если ИспользоватьОперацииВЭтапах() Тогда
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
		КонецЕсли;
		
	Исключение
		
		Для каждого Ссылка Из Ссылки Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Изменение размера партии';
					|en = 'Lot size change'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из Ссылки Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Помечает на удаление этапы заданной партии производства.
//
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//  Параметры - Структура - параметры выполнения действия
//	ВыходныеИзделия - ТаблицаЗначений - выходные изделия по рассчитываемой стоимости,
//		которые будут помещены в выпускающий этап партии.
//		Состав полей аналогичен реквизитам одноименной табличной части этапа производства.
//	Серии - ТаблицаЗначений - серии выходных изделий.
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
//	
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция ОтменитьПартию(ДанныеПартии, Параметры, ВыходныеИзделия, Серии, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("ЗаказИзменен", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	СНачалаПартии = Параметры.СНачалаПартии;
	Этап = Параметры.Этап;
	ИдентификаторОперации = Параметры.ИдентификаторОперации;
	ЭтоБрак = Параметры.ЭтоБрак;
	КоличествоУпаковокБрак = Параметры.КоличествоУпаковокБрак;
	УпаковкаБрак = Параметры.УпаковкаБрак;
	ОтменитьИзделиеВЗаказе = Параметры.ОтменитьИзделиеВЗаказе;
	ПричинаОтменыИзделия = Параметры.ПричинаОтменыИзделия;
	
	// Выборка этапов с проверкой
	Если СНачалаПартии Тогда
		
		Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Неопределено, Результат.Отказ, Результат.Сообщения);
		Если Результат.Отказ Тогда
			Возврат Результат;
		КонецЕсли;
		
		МенеджерОчередь = Неопределено;
		ОтменитьВнутриЭтапа = Ложь;
		ЭтапПромежуточногоВыпуска = Неопределено;
		
		СсылкиКБлокировке = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
		СсылкиКПередачеДанных = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
		СсылкиКУдалению = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
		
	Иначе
		
		Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Этап, Результат.Отказ, Результат.Сообщения);
		Если Результат.Отказ Тогда
			Возврат Результат;
		КонецЕсли;
		
		ДанныеЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Этап, "Проведен, Статус, Номер, ПроизводствоНаСтороне, ЗаказПереработчику");
		
		РезультатПроверки = ПроверитьТочкуДеления(ДанныеЭтапа);
		Если РезультатПроверки.Отказ Тогда
			Результат.Отказ = Истина;
			Результат.Сообщения.Добавить(РезультатПроверки.ТекстСообщения);
			Возврат Результат;
		КонецЕсли;
		
		МенеджерОчередь = Новый МенеджерВременныхТаблиц();
		Обработки.ДелениеПартииПроизводства.СоздатьВТОчередьОперацийДляДеления(МенеджерОчередь, Этап);
		
		РезультатПроверки = ПроверитьОчередьТочкиДеления(ИдентификаторОперации, МенеджерОчередь, Ложь, ЭтоБрак, Не ЭтоБрак);
		Если РезультатПроверки.Отказ Тогда
			Результат.Отказ = Истина;
			Результат.Сообщения.Добавить(РезультатПроверки.ТекстСообщения);
			Возврат Результат;
		КонецЕсли;
	
		ОтменитьВнутриЭтапа = (ДанныеЭтапа.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат)
			Или РезультатПроверки.ЭтоИзменениеВнутриОчереди
			Или ЭтоБрак;
		ЭтапПромежуточногоВыпуска = ?(ОтменитьВнутриЭтапа, Этап, ЭтапДляПромежуточногоВыпуска(Этап));
		
		// Вспомогательные коллекции:
		//  КБлокировке - блокируются
		//  КПередачеДанных - передают в новые документы аналитику своих ТЧ и складские резервы
		//  УДалению - помечаются на удаление
		СсылкиКБлокировке = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
		СсылкиКБлокировке.Добавить(Этап);
		Если Не ОтменитьВнутриЭтапа И ЭтапПромежуточногоВыпуска <> Неопределено Тогда
			СсылкиКБлокировке.Добавить(ЭтапПромежуточногоВыпуска);
		КонецЕсли;
		Если ЭтапПромежуточногоВыпуска = Неопределено Тогда
			Предшественники = ПредшественникиВОчередиЭтапов(Этап);
			Для каждого Предшественник Из Предшественники Цикл
				СсылкиКБлокировке.Добавить(Предшественник);
			КонецЦикла;
		КонецЕсли;
		
		СсылкиКПередачеДанных = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
		СсылкиКПередачеДанных.Добавить(Этап);
		
		СсылкиКУдалению = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
		Если Не ОтменитьВнутриЭтапа Тогда
			СсылкиКУдалению.Добавить(Этап);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтменитьИзделиеВЗаказе Тогда
		СсылкиКБлокировке.Добавить(ДанныеПартии.Распоряжение);
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		// Корректировка назначений
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Запасы.Номенклатура КАК Номенклатура,
			|	Запасы.Характеристика КАК Характеристика,
			|	Запасы.Склад КАК Склад,
			|	Запасы.Назначение КАК ИсходноеНазначение,
			|	Запасы.ВНаличииОстаток КАК Количество,
			|	Запасы.ВНаличииОстаток КАК КоличествоУпаковок
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
			|		Назначение В(
			|			ВЫБРАТЬ
			|				Этапы.Назначение КАК Назначение
			|			ИЗ
			|				Документ.ЭтапПроизводства2_2 КАК Этапы
			|			ГДЕ
			|				Этапы.Ссылка В (&Ссылки))) КАК Запасы
			|ГДЕ
			|	Запасы.ВНаличииОстаток > 0");
		Запрос.УстановитьПараметр("Ссылки", СсылкиКПередачеДанных);
		Товары = Запрос.Выполнить().Выгрузить();
		Если Товары.Количество() > 0 Тогда
			РеквизитыШапки = Новый Структура();
			РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
			РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
			РеквизитыШапки.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкиКПередачеДанных[0], "Организация"));
			
			ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, Товары));
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
				ДокументОбъект,
				Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокументОбъект));
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					Событие = НСтр("ru = 'Этап производства';
									|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
						+ НСтр("ru = 'Отмена партии';
								|en = 'Lot cancellation'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(Событие,
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Результат.КорректировкаСоздана.Добавить(ДокументОбъект.Ссылка);
		КонецЕсли;
		
		// Пометка на удаление
		Для каждого Ссылка Из СсылкиКУдалению Цикл
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			Результат.ЭтапУдален.Добавить(Ссылка);
		КонецЦикла;
		
		Если Не СНачалаПартии Тогда
			// Обновление партии
			ОсновноеИзделие = Новый Структура;
			ОсновноеИзделие.Вставить("Номенклатура", ДанныеПартии.ОсновноеИзделиеНоменклатура);
			ОсновноеИзделие.Вставить("Характеристика", ДанныеПартии.ОсновноеИзделиеХарактеристика);
			Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
				ДанныеПартии.ПартияПроизводства,
				ПоляПартии(ДанныеПартии, ОсновноеИзделие),
				Истина);
			
			// Оформление промежуточного выпуска
			Если ЭтапПромежуточногоВыпуска = Неопределено Тогда
				НовыйЭтап = ОформитьПромежуточныйВыпускВНовомЭтапе(ДанныеПартии, Этап, ВыходныеИзделия, Серии, Параметры);
				
				Результат.ЭтапСоздан.Добавить(НовыйЭтап);
				
				// Если в этапе - точке деления был выпуск изделий промежуточного выпуска по фиксированной стоимости,
				// то необходимо отразить потребление этих изделий в "техническом" этапе для исключения
				// задвоения выпуска
				Корректировка = ОтразитьРасходПобочныхИзделийВПромежуточномВыпуске(НовыйЭтап, СсылкиКУдалению);
				Если Корректировка <> Неопределено Тогда
					Результат.КорректировкаСоздана.Добавить(Корректировка);
				КонецЕсли;
			Иначе
				ДокументОбъект = ЭтапПромежуточногоВыпуска.ПолучитьОбъект();
				
				Если ОтменитьВнутриЭтапа Тогда
					// Изменение шапки
					Если ЭтоБрак
						И ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат Тогда
						ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
						ДокументОбъект.ФактическоеНачалоЭтапа = ТекущаяДатаСеанса();
					КонецЕсли;
					
					Если ЭтоБрак Тогда
						Если ДокументОбъект.КоличествоУпаковокФакт = 0 Тогда
							ДокументОбъект.КоличествоУпаковокФакт = КоличествоУпаковокБрак;
							ДокументОбъект.УпаковкаФакт = УпаковкаБрак;
						КонецЕсли;
					Иначе
						Если ДокументОбъект.КоличествоУпаковокОтменено = 0 Тогда
							ДокументОбъект.УпаковкаОтменено = ДокументОбъект.УпаковкаПлан;
							Если ДокументОбъект.УпаковкаФакт = ДокументОбъект.УпаковкаПлан Тогда
								ДокументОбъект.КоличествоУпаковокОтменено = ДокументОбъект.КоличествоУпаковокПлан
									- ДокументОбъект.КоличествоУпаковокФакт;
							Иначе
								КоэффициентПлан = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
									ДокументОбъект.УпаковкаПлан, ДанныеПартии.ОсновноеИзделиеНоменклатура);
								КоэффициентФакт = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
									ДокументОбъект.УпаковкаФакт, ДанныеПартии.ОсновноеИзделиеНоменклатура);
								КоличествоУпаковокФакт = ДокументОбъект.КоличествоУпаковокФакт
									* КоэффициентФакт
									/ КоэффициентПлан;
								ДокументОбъект.КоличествоУпаковокОтменено = ДокументОбъект.КоличествоУпаковокПлан
									- КоличествоУпаковокФакт;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					УстановитьПоследнююОперацию(ДокументОбъект, ИдентификаторОперации, МенеджерОчередь);
					
					// Изменение ТЧ
					УдалитьПлановыеСтроки(ДанныеПартии, ДокументОбъект);
				КонецЕсли;
				
				ОформитьПромежуточныйВыпуск(ДанныеПартии, ДокументОбъект, ВыходныеИзделия, Серии, Параметры);
				
				Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				КонецЕсли;
				
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ПровестиСПонижениемСтатуса(ДокументОбъект);
				
				Результат.ЭтапИзменен.Добавить(ЭтапПромежуточногоВыпуска);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение связанных регистров
		Если ДанныеПартии.ДинамическаяСтруктура Тогда
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадание(
				ДанныеПартии.Распоряжение,, Истина);
		Иначе
			РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ДобавитьЗадание(
				ДанныеПартии.Распоряжение, Истина);
		КонецЕсли;
		Если ИспользоватьОперацииВЭтапах() Тогда
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
		КонецЕсли;
		
		// Изменение заказа
		Если ОтменитьИзделиеВЗаказе Тогда
			ДокументОбъект = ДанныеПартии.Распоряжение.ПолучитьОбъект(); // ДокументОбъект.ЗаказНаПроизводство2_2
			ДокументОбъект.ОтменитьПродукцию(
				ДанныеПартии.ОсновноеИзделиеНоменклатура,
				ДанныеПартии.ОсновноеИзделиеХарактеристика,
				ДанныеПартии.Спецификация,
				ДанныеПартии.Количество,
				ПричинаОтменыИзделия);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Результат.ЗаказИзменен.Добавить(ДанныеПартии.Распоряжение);
		КонецЕсли;
		
	Исключение
		
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Отмена партии';
					|en = 'Lot cancellation'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из СсылкиКБлокировке Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разделяет партию на несколько параллельных партий. Деление происходит с первого этапа.
// 
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
// 	НовыеПартии - Массив из см. НовыйРазмерПартии
//  Назначения - Массив из Структура - назначения изделий и материалов
//  Параметры - Структура - параметры выполнения действия
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 	
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция РазделитьПартию(ДанныеПартии, НовыеПартии, Назначения, Параметры, ИдентификаторФормы = Неопределено) Экспорт
	
	ЗаполнитьПоСпецификации = Параметры.ЗаполнитьПоСпецификации;
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	Если НовыеПартии.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Выборка этапов с проверкой
	Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Неопределено, Результат.Отказ, Результат.Сообщения);
	Если Результат.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из Ссылки Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		Если Не ЗаполнитьПоСпецификации Тогда
			
			ДанныеПересчета = ДанныеЭтаповДляИзмененияПартий(Ссылки, Ложь, Истина).ДанныеПересчета;
			
			// Изменение текущей партии (партия № 1)
			ПараметрыПартии = Новый Структура("ДанныеПартии, РазмерПартии", ДанныеПартии, НовыеПартии[0]);
			
			ПараметрыПересчета = ПересчитатьПоКоэффициентуПараметры();
			ПараметрыПересчета.ИзменятьФакт = Ложь;
			ПараметрыПересчета.ИзменятьНоменклатуруДеления = Истина;
			
			ПараметрыИзменения = ИзменитьРазмерПартииВЭтапахПараметры();
			ЗаполнитьЗначенияСвойств(ПараметрыИзменения, Параметры);
			ПараметрыИзменения.ПараметрыПересчетаПоКоэффициенту = ПараметрыПересчета;
			
			Изменения = ИзменитьРазмерПартииВЭтапах(
				ПараметрыПартии, Ссылки, ДанныеПересчета, Истина, Назначения[0], Результат, ПараметрыИзменения);
			
			Если Результат.Отказ Тогда
				Для каждого Ссылка Из Ссылки Цикл
					РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
				КонецЦикла;
				Возврат Результат;
			КонецЕсли;
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.ЭтапУдален Цикл
				Результат.ЭтапУдален.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
			// Реквизиты деления
			ДополнительныеРеквизиты = Новый Соответствие;
			Для каждого ДанныеЭтапа Из ДанныеПересчета.Реквизиты Цикл
				Если ДанныеЭтапа.ИдентификаторПервойОперации <> 0
					Или ДанныеЭтапа.ИдентификаторПоследнейОперации <> 0
					Или ЗначениеЗаполнено(ДанныеЭтапа.Предшественник) Тогда
					РеквизитыДеления = НовыйРеквизитыДеления();
					ЗаполнитьЗначенияСвойств(РеквизитыДеления, ДанныеЭтапа);
					ДополнительныеРеквизиты.Вставить(ДанныеЭтапа.Ссылка,
						Новый Структура("РеквизитыДеления", РеквизитыДеления));
				КонецЕсли;
			КонецЦикла;
			
			// Создание партий № 2+
			ПараметрыПересчета = ПересчитатьПоКоэффициентуПараметры();
			ПараметрыПересчета.УдалятьФакт = Истина;
			ПараметрыПересчета.ИзменятьНоменклатуруДеления = Истина;
			ПараметрыПересчета.ОчищатьКлючиСтрок = Истина;
			
			Для ИндексПартии = 1 По НовыеПартии.ВГраница() Цикл
				
				РезультатПересчета = СкопироватьПартиюИПересчитатьПоКоэффициенту(
					ДанныеПартии,
					ДанныеПересчета,
					Неопределено,
					НовыеПартии[ИндексПартии],
					ДанныеПартии,
					ДополнительныеРеквизиты,
					ПараметрыПересчета);
				Для каждого Ссылка Из РезультатПересчета Цикл
					Результат.ЭтапСоздан.Добавить(Ссылка);
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			ДанныеДополнения = ДанныеЭтаповДляИзмененияПартий(Ссылки, Истина, Ложь).ДанныеДополнения;
			
			// Получение данных спецификации для партий № 2+
			ДанныеСпецификаций = Новый Соответствие;
			Для ИндексПартии = 1 По НовыеПартии.ВГраница() Цикл
				ДанныеПартииКопия = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПартии);
				ДанныеПартииКопия.Количество = НовыеПартии[ИндексПартии].Количество;
				ДанныеСпецификации = ПолучитьНормативыПоСпецификации(ДанныеПартииКопия, Ложь);
				
				Справочники.РесурсныеСпецификации.ПроверитьРазмерПартии(
					ДанныеСпецификации, НовыеПартии[ИндексПартии].Количество, Результат.Отказ, Результат.Сообщения);
				Если Результат.Отказ Тогда
					Для каждого Ссылка Из Ссылки Цикл
						РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
					КонецЦикла;
					Возврат Результат;
				КонецЕсли;
				
				ДанныеСпецификаций.Вставить(ИндексПартии, ДанныеСпецификации);
			КонецЦикла;
			
			// Изменение текущей партии (партия № 1)
			ПараметрыПартии = Новый Структура("ДанныеПартии, РазмерПартии", ДанныеПартии, НовыеПартии[0]);
			
			ПараметрыИзменения = ИзменитьРазмерПартииВЭтапахПараметры();
			ЗаполнитьЗначенияСвойств(ПараметрыИзменения, Параметры);
			ПараметрыИзменения.ПересчитатьНоменклатуруДеленияВДанныхСпецификации = Истина;
			
			Изменения = ИзменитьРазмерПартииВЭтапах(
				ПараметрыПартии, Ссылки, ДанныеДополнения, Ложь, Назначения[0], Результат, ПараметрыИзменения);
			
			Если Результат.Отказ Тогда
				Для каждого Ссылка Из Ссылки Цикл
					РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
				КонецЦикла;
				Возврат Результат;
			КонецЕсли;
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.ЭтапУдален Цикл
				Результат.ЭтапУдален.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
			// Создание партий № 2+
			Для ИндексПартии = 1 По НовыеПартии.ВГраница() Цикл
				
				ДанныеСпецификации = ДанныеСпецификаций[ИндексПартии];
				
				// Очистка данных спецификации
				ДанныеСпецификации.ВходящиеИзделия.Очистить();
				
				// Дополнение данных спецификации
				ДополнительныеРеквизиты = Новый Соответствие;
				
				СтруктураПоиска = Новый Структура("Этап");
				Таблицы = СтрРазделить("МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы,ВидыРабочихЦентров,АльтернативныеВидыРабочихЦентров,Трудозатраты", ",");
				Для Индекс = -ДанныеСпецификации.Этапы.Количество()+1 По 0 Цикл
					ДанныеЭтапа = ДанныеСпецификации.Этапы[-Индекс];
					НайденнаяСтрока = ДанныеДополнения.Реквизиты.Найти(ДанныеЭтапа.Этап, "Этап");
					Если НайденнаяСтрока = Неопределено Тогда
						// Очистка данных по этапу
						СтруктураПоиска.Этап = ДанныеЭтапа.Этап;
						Для каждого Таблица Из Таблицы Цикл
							Для каждого СтрокаУдалить Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоиска) Цикл
								ДанныеСпецификации[Таблица].Удалить(СтрокаУдалить)
							КонецЦикла;
						КонецЦикла;
						ДанныеСпецификации.Этапы.Удалить(ДанныеЭтапа);
					ИначеЕсли НайденнаяСтрока.ИдентификаторПервойОперации <> 0
						Или НайденнаяСтрока.ИдентификаторПоследнейОперации <> 0
						Или ЗначениеЗаполнено(НайденнаяСтрока.Предшественник) Тогда
						// Реквизиты деления
						РеквизитыДеления = НовыйРеквизитыДеления();
						ЗаполнитьЗначенияСвойств(РеквизитыДеления, НайденнаяСтрока);
						ДополнительныеРеквизиты.Вставить(ДанныеЭтапа.Этап,
							Новый Структура("РеквизитыДеления", РеквизитыДеления));
					КонецЕсли;
				КонецЦикла;
				
				// Серии
				ВыходныеИзделияСерии = Новый ТаблицаЗначений;
				Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ВыходныеИзделияСерии.Реквизиты Цикл
					ВыходныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
				КонецЦикла;
				ВыходныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
				
				ПобочныеИзделияСерии = Новый ТаблицаЗначений;
				Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ПобочныеИзделияСерии.Реквизиты Цикл
					ПобочныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
				КонецЦикла;
				ПобочныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
				
				ДанныеСпецификации.Вставить("НазначенияМатериалов", Назначения[ИндексПартии].НазначенияМатериалов);
				
				ПодготовитьДанныеСпецификацииКСозданиюЭтапов(ДанныеСпецификации, ДанныеПартии);
				
				РаспределитьДанныеЭтаповНаДанныеСпецификации(
					ДанныеДополнения, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии, Назначения[ИндексПартии].НазначенияИзделий);
				
				Дробь = Новый Структура("Числитель, Знаменатель", 1, 1);
				Если ДанныеПартии.Количество <> 0 Тогда
					Дробь.Числитель = НовыеПартии[ИндексПартии].Количество;
					Дробь.Знаменатель = ДанныеПартии.Количество;
				КонецЕсли;
				ДобавитьНоменклатуруДеленияВДанныеСпецификации(ДанныеДополнения, ДанныеСпецификации, Дробь);
				
				// Создание этапов
				НовыеЭтапы = СоздатьЦепочкуЭтаповПриДелении(
					ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии, ДополнительныеРеквизиты, Параметры);
				
				Для каждого Ссылка Из НовыеЭтапы Цикл
					Результат.ЭтапСоздан.Добавить(Ссылка);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Передача резервов
		Отправители = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ЭтапУдален);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отправители, Результат.ЭтапИзменен);
		Если Отправители.ВГраница() <> -1 Тогда
			
			Получатели = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ЭтапСоздан);
			Если Результат.ЭтапУдален.ВГраница() <> -1 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, Результат.ЭтапИзменен);
			КонецЕсли;
			
			Изменения = ПередатьРезервы(Отправители, Получатели);
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение связанных регистров
		Если ДанныеПартии.ДинамическаяСтруктура Тогда
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадание(
				ДанныеПартии.Распоряжение,, Истина);
		Иначе
			РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ДобавитьЗадание(
				ДанныеПартии.Распоряжение, Истина);
		КонецЕсли;
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(ДанныеПартии.Распоряжение);
		Если ИспользоватьОперацииВЭтапах() Тогда
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
		КонецЕсли;
		
	Исключение
		
		Для каждого Ссылка Из Ссылки Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Деление партии';
					|en = 'Lot division'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из Ссылки Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разделяет партию на несколько параллельных партий. Деление происходит с заданного этапа.
// 
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//	Параметры - Структура:
//     * Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап с которого необходимо разделить партию.
//     * ЗаполнитьПоСпецификации - Булево
//     * СпособРаспределенияЗатратНаВыходныеИзделия - ПеречислениеСсылка.СпособыРаспределенияЗатратНаВыходныеИзделия
//	ВыходныеИзделия - ТаблицаЗначений - выходные изделия по рассчитываемой стоимости,
//		которые будут помещены в выпускающий этап партии.
//		Состав полей аналогичен реквизитам одноименной табличной части этапа производства.
//		Так же содержит поля, характеризующие партии, обработку которых необходимо продолжить
//		(то есть сформировать новые партии производства).
//	Серии - ТаблицаЗначений - серии выходных изделий.
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 	
// Возвращаемое значение:
//  Структура - где Ключ - выполненное действие, а Значение - массив ссылок на документы.
//
Функция РазделитьПартиюСЭтапа(ДанныеПартии, Параметры, ВыходныеИзделия, Серии, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("ЗаказИзменен", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	Этап = Параметры.Этап;
	ИдентификаторОперации = Параметры.ИдентификаторОперации;
	ЗаполнитьПоСпецификации = Параметры.ЗаполнитьПоСпецификации;
	ЭтоБрак = Параметры.ЭтоБрак;
	КоличествоУпаковокБрак = Параметры.КоличествоУпаковокБрак;
	УпаковкаБрак = Параметры.УпаковкаБрак;
	
	// Выборка этапов с проверкой
	Ссылки = ЭтапыПартииДляИзменения(ДанныеПартии.ПартияПроизводства, Этап, Результат.Отказ, Результат.Сообщения);
	Если Результат.Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Этап, "Проведен, Статус, Номер, ПроизводствоНаСтороне, ЗаказПереработчику");
	
	РезультатПроверки = ПроверитьТочкуДеления(ДанныеЭтапа);
	Если РезультатПроверки.Отказ Тогда
		Результат.Отказ = Истина;
		Результат.Сообщения.Добавить(РезультатПроверки.ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	МенеджерОчередь = Новый МенеджерВременныхТаблиц();
	Обработки.ДелениеПартииПроизводства.СоздатьВТОчередьОперацийДляДеления(МенеджерОчередь, Этап);
	
	РезультатПроверки = ПроверитьОчередьТочкиДеления(ИдентификаторОперации, МенеджерОчередь, Не ЭтоБрак, ЭтоБрак, Ложь);
	Если РезультатПроверки.Отказ Тогда
		Результат.Отказ = Истина;
		Результат.Сообщения.Добавить(РезультатПроверки.ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	РазделитьВнутриЭтапа = (ДанныеЭтапа.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат)
		Или РезультатПроверки.ЭтоИзменениеВнутриОчереди
		Или ЭтоБрак;
	ЭтапПромежуточногоВыпуска = ?(РазделитьВнутриЭтапа, Этап, ЭтапДляПромежуточногоВыпуска(Этап));
	ПотребителиПромежуточногоВыпуска = Новый Массив;
	
	// Вспомогательные коллекции:
	//  КБлокировке - блокируются
	//  КПередачеДанных - передают в новые документы аналитику своих ТЧ и складские резервы
	//  УДалению - помечаются на удаление
	СсылкиКБлокировке = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
	СсылкиКБлокировке.Добавить(Этап);
	Если Не РазделитьВнутриЭтапа И ЭтапПромежуточногоВыпуска <> Неопределено Тогда
		СсылкиКБлокировке.Добавить(ЭтапПромежуточногоВыпуска);
	КонецЕсли;
	Если ЭтапПромежуточногоВыпуска = Неопределено Тогда
		Предшественники = ПредшественникиВОчередиЭтапов(Этап);
		Для каждого Предшественник Из Предшественники Цикл
			СсылкиКБлокировке.Добавить(Предшественник);
		КонецЦикла;
	КонецЕсли;
	Если ВыходныеИзделия.Найти(Истина, "ОтменитьИзделиеВЗаказе") <> Неопределено Тогда
		СсылкиКБлокировке.Добавить(ДанныеПартии.Распоряжение);
	КонецЕсли;
	
	СсылкиКПередачеДанных = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
	СсылкиКПередачеДанных.Добавить(Этап);
	
	СсылкиКУдалению = ОбщегоНазначения.СкопироватьРекурсивно(Ссылки);
	Если Не РазделитьВнутриЭтапа Тогда
		СсылкиКУдалению.Добавить(Этап);
	КонецЕсли;
	
	ЗаказОбъект = Неопределено;
	
	Попытка
		
		// Блокировка объектов
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		ПолучитьДанныеДополнения = Ложь;
		ПолучитьДанныеПересчета = Ложь;
		
		// Если выбран режим заполнения по К. но "РС продолжить" отличается от "РС партии", то заполнение новой партии по РС
		ВыходныеИзделия.Колонки.Добавить("ЗаполнитьПоСпецификации", Новый ОписаниеТипов("Булево"));
		
		// Получение и проверка данных спецификации
		ДанныеСпецификаций = Новый Соответствие;
		Для ИндексПартия = 0 По ВыходныеИзделия.Количество()-1 Цикл
			Партия = ВыходныеИзделия[ИндексПартия];
			Если Партия.ПродолжитьОбработку Тогда
				
				Партия.ЗаполнитьПоСпецификации = ЗаполнитьПоСпецификации
					Или Партия.ПродолжитьСпецификация <> ДанныеПартии.Спецификация;
				
				Если Партия.ЗаполнитьПоСпецификации Тогда
					ПолучитьДанныеДополнения = Истина;
				
					РазмерПартии = НовыйРазмерПартии(
						Партия.КоличествоПартии,
						Партия.КоличествоУпаковокПартии,
						Партия.УпаковкаПартии);
					
					// Получение данных спецификации
					ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
					ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеПартии,
						"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности");
					ДанныеПоНоменклатуре.Спецификация = Партия.ПродолжитьСпецификация;
					ДанныеПоНоменклатуре.Номенклатура = Партия.ПродолжитьНоменклатура;
					ДанныеПоНоменклатуре.Характеристика = Партия.ПродолжитьХарактеристика;
					ДанныеПоНоменклатуре.Количество = РазмерПартии.Количество;
					
					МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
					
					Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
						МенеджерВременныхТаблиц,
						ДанныеПартии.Распоряжение);
					
					ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(, МенеджерВременныхТаблиц);
					ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
					ПараметрыВыборки.РассчитыватьДолиСтоимостиВыходныхИзделий = Истина;
					ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать = Истина;
					ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями = Истина;
					ПараметрыВыборки.ПолучитьПромежуточныйВыпуск = Истина;
					
					Если ПараметрыВыборки.ПереченьДанных.Найти("Операции") = Неопределено Тогда
						ПараметрыВыборки.ПереченьДанных.Добавить("Операции");
					КонецЕсли;
					
					ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
						ДанныеПоНоменклатуре,
						ПараметрыВыборки);
					
					Справочники.РесурсныеСпецификации.ПроверитьРазмерПартии(
						ДанныеСпецификации, РазмерПартии.Количество, Результат.Отказ, Результат.Сообщения);
					Если Результат.Отказ Тогда
						Для каждого Ссылка Из СсылкиКБлокировке Цикл
							РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
						КонецЦикла;
						Возврат Результат;
					КонецЕсли;
					
					ДанныеСпецификаций.Вставить(ИндексПартия, ДанныеСпецификации);
				Иначе
					ПолучитьДанныеПересчета = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Получение данных этапов для заполнения новых документов
		ДанныеЭтапов = Неопределено; // см. ДанныеЭтаповДляИзмененияПартий
		РеквизитыЭтапа = Неопределено;
		Если ПолучитьДанныеДополнения Или ПолучитьДанныеПересчета Тогда
			ДанныеЭтапов = ДанныеЭтаповДляИзмененияПартий(
				СсылкиКПередачеДанных, ПолучитьДанныеДополнения, ПолучитьДанныеПересчета);
			РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Этап,
				"Этап, Статус, ПроизводствоОднойДатой, ДатаПроизводства, ФактическоеНачалоЭтапа");
		КонецЕсли;
		
		// Пометка на удаление
		Для каждого Ссылка Из СсылкиКУдалению Цикл
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			Результат.ЭтапУдален.Добавить(Ссылка);
		КонецЦикла;
		
		// Обновление партии
		ОсновноеИзделие = Новый Структура;
		ОсновноеИзделие.Вставить("Номенклатура", ДанныеПартии.ОсновноеИзделиеНоменклатура);
		ОсновноеИзделие.Вставить("Характеристика", ДанныеПартии.ОсновноеИзделиеХарактеристика);
		Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
			ДанныеПартии.ПартияПроизводства,
			ПоляПартии(ДанныеПартии, ОсновноеИзделие),
			Истина);
		
		// Снятие резервов точки деления
		Если РазделитьВнутриЭтапа
			И ДанныеЭтапов <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("Ссылка, ВариантОбеспечения",
				Этап, Перечисления.ВариантыОбеспечения.СоСклада);
			НайденныеСтроки = ?(ПолучитьДанныеДополнения,
				ДанныеЭтапов.ДанныеДополнения.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска),
				ДанныеЭтапов.ДанныеПересчета.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска));
			Если НайденныеСтроки.ВГраница() <> -1 Тогда
				ДокументОбъект = Этап.ПолучитьОбъект();
				
				СтруктураПоиска = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.СоСклада);
				Для каждого Строка Из ДокументОбъект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска) Цикл
					Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
				КонецЦикла;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Результат.ЭтапИзменен.Добавить(Этап);
			КонецЕсли;
		КонецЕсли;
		
		// Создание новых цепочек этапов
		Для ИндексПартия = 0 По ВыходныеИзделия.Количество()-1 Цикл
			
			Партия  = ВыходныеИзделия[ИндексПартия];
			
			// Изменение заказа
			Если Партия.ОтменитьИзделиеВЗаказе Тогда
				Если ЗаказОбъект = Неопределено Тогда
					ЗаказОбъект = ДанныеПартии.Распоряжение.ПолучитьОбъект(); // ДокументОбъект.ЗаказНаПроизводство2_2
				КонецЕсли;
				
				Если Партия.ПродолжитьОбработку
					И Партия.ИзменитьВыпускаемоеИзделие Тогда
					КлючиПродукции = Новый Структура;
					КлючиПродукции.Вставить("Номенклатура", ДанныеПартии.ОсновноеИзделиеНоменклатура);
					КлючиПродукции.Вставить("Характеристика", ДанныеПартии.ОсновноеИзделиеХарактеристика);
					КлючиПродукции.Вставить("Спецификация", ДанныеПартии.Спецификация);
					
					КлючиНовойПродукции = Новый Структура;
					КлючиНовойПродукции.Вставить("Номенклатура", Партия.ПродолжитьНоменклатура);
					КлючиНовойПродукции.Вставить("Характеристика", Партия.ПродолжитьХарактеристика);
					КлючиНовойПродукции.Вставить("Спецификация", Партия.ПродолжитьСпецификация);
					
					ЗаказОбъект.ЗаменитьПродукцию(
						КлючиПродукции,
						Партия.КоличествоПартии,
						Партия.ПричинаОтменыИзделия,
						КлючиНовойПродукции);
				Иначе
					ЗаказОбъект.ОтменитьПродукцию(
						ДанныеПартии.ОсновноеИзделиеНоменклатура,
						ДанныеПартии.ОсновноеИзделиеХарактеристика,
						ДанныеПартии.Спецификация,
						Партия.КоличествоПартии,
						Партия.ПричинаОтменыИзделия);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Партия.ПродолжитьОбработку Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеЭтапы = Неопределено;
			Если Партия.ЗаполнитьПоСпецификации Тогда
				
				ДанныеСпецификации = ДанныеСпецификаций[ИндексПартия];
				
				// Сокращение данных спецификации по заданный этап
				НайденнаяСтрока = ДанныеСпецификации.Этапы.Найти(Партия.ПродолжитьЭтап, "Этап");
				Если НайденнаяСтрока <> Неопределено Тогда
					ЭтапыОставить = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Партия.ПродолжитьЭтап);
					ОчередьЭтапов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НайденнаяСтрока.НомерСледующегоЭтапа);
					
					СтруктураПоиска = Новый Структура("НомерЭтапа");
					Индекс = 0;
					Пока Индекс <= ОчередьЭтапов.ВГраница() Цикл
						СтруктураПоиска.НомерЭтапа = ОчередьЭтапов[Индекс];
						Для каждого НайденнаяСтрока Из ДанныеСпецификации.Этапы.НайтиСтроки(СтруктураПоиска) Цикл
							Если ОчередьЭтапов.Найти(НайденнаяСтрока.НомерСледующегоЭтапа) = Неопределено Тогда
								ОчередьЭтапов.Добавить(НайденнаяСтрока.НомерСледующегоЭтапа);
							КонецЕсли;
							ЭтапыОставить.Добавить(НайденнаяСтрока.Этап)
						КонецЦикла;
						Индекс = Индекс + 1;
					КонецЦикла;
					
					СтруктураПоиска = Новый Структура("Этап");
					Таблицы = СтрРазделить("ВходящиеИзделия,МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы,ВидыРабочихЦентров,АльтернативныеВидыРабочихЦентров,Трудозатраты", ",");
					Для Индекс = -ДанныеСпецификации.Этапы.Количество()+1 По 0 Цикл
						Строка = ДанныеСпецификации.Этапы[-Индекс];
						Если ЭтапыОставить.Найти(Строка.Этап) = Неопределено Тогда
							СтруктураПоиска.Этап = Строка.Этап;
							Для каждого Таблица Из Таблицы Цикл
								Для каждого СтрокаУдалить Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоиска) Цикл
									ДанныеСпецификации[Таблица].Удалить(СтрокаУдалить)
								КонецЦикла;
							КонецЦикла;
							ДанныеСпецификации.Этапы.Удалить(Строка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Сокращение данных спецификации по заданную операцию
				Если ЗначениеЗаполнено(Партия.ПродолжитьИдентификаторОперации)
					И Не Партия.ПродолжитьЭтоПерваяОперация Тогда
					НайденныеСтроки = ДанныеСпецификации.Операции.НайтиСтроки(
						Новый Структура("Этап, ИдентификаторОперации",
							Партия.ПродолжитьЭтап, Партия.ПродолжитьИдентификаторОперации));
					Если НайденныеСтроки.ВГраница() <> -1 Тогда
						СтруктураПоискаОперации = Новый Структура("Этап, НомерСледующейОперации",
							Партия.ПродолжитьЭтап, НайденныеСтроки[0].НомерОперации);
						ДанныеСпецификации.Операции.Индексы.Добавить("Этап, НомерСледующейОперации");
						ОчередьОпераций = ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаОперации);
						
						СтруктураПоискаДанныеОперации = Новый Структура("Этап, Операция", Партия.ПродолжитьЭтап);
						
						Пока ОчередьОпераций.ВГраница() <> -1 Цикл
							СтрокаОперация = ОчередьОпераций[0];
							СтруктураПоискаДанныеОперации.Операция = СтрокаОперация.Операция;
							
							Для каждого Таблица Из СтрРазделить("МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы,Трудозатраты", ",") Цикл
								Для каждого Строка Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоискаДанныеОперации) Цикл
									ДанныеСпецификации[Таблица].Удалить(Строка);
								КонецЦикла;
							КонецЦикла;
							
							СтруктураПоискаОперации.НомерСледующейОперации = СтрокаОперация.НомерОперации;
							Для каждого Строка Из ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаОперации) Цикл
								ОчередьОпераций.Добавить(Строка);
							КонецЦикла;
							
							ОчередьОпераций.Удалить(0);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				// Дополнение данных спецификации
				ДанныеСпецификации.ВходящиеИзделия.Очистить();
				
				ВыходныеИзделияСерии = Новый ТаблицаЗначений;
				Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ВыходныеИзделияСерии.Реквизиты Цикл
					ВыходныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
				КонецЦикла;
				ВыходныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
				
				ПобочныеИзделияСерии = Новый ТаблицаЗначений;
				Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ПобочныеИзделияСерии.Реквизиты Цикл
					ПобочныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
				КонецЦикла;
				ПобочныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
				
				ДанныеСпецификации.Вставить("НазначенияМатериалов", Партия.НазначенияМатериалов);
				
				ПодготовитьДанныеСпецификацииКСозданиюЭтапов(ДанныеСпецификации, ДанныеПартии);
				
				ЗаменаИзделия = Неопределено;
				Если Партия.ОтменитьИзделиеВЗаказе
					И Партия.ИзменитьВыпускаемоеИзделие Тогда
					ЗаменаИзделия = Новый Структура;
					ЗаменаИзделия.Вставить("Номенклатура", ДанныеПартии.ОсновноеИзделиеНоменклатура);
					ЗаменаИзделия.Вставить("Характеристика", ДанныеПартии.ОсновноеИзделиеХарактеристика);
					ЗаменаИзделия.Вставить("НоменклатураНовая", Партия.ПродолжитьНоменклатура);
					ЗаменаИзделия.Вставить("ХарактеристикаНовая", Партия.ПродолжитьХарактеристика);
				КонецЕсли;
				
				РаспределитьДанныеЭтаповНаДанныеСпецификации(
					ДанныеЭтапов.ДанныеДополнения, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии, Партия.НазначенияИзделий, ЗаменаИзделия);
				
				// Подмена основного изделия партии (при разборке)
				Если ДанныеПартии.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
					
					РеквизитыШапки = Новый Структура;
					РеквизитыШапки.Вставить("Распоряжение", ДанныеПартии.Распоряжение);
					РеквизитыШапки.Вставить("ПартияПроизводства", ДанныеСпецификации.ПартияПроизводства);
					РеквизитыШапки.Вставить("НазначениеПродукция", ДанныеПартии.НазначениеПродукция);
					РеквизитыШапки.Вставить("ТипПроизводственногоПроцесса", ДанныеСпецификации.ТипПроизводственногоПроцесса);
					РеквизитыШапки.Вставить("Спецификация", ДанныеСпецификации.Спецификация);
					
					ОсновноеИзделие = Новый Структура;
					ОсновноеИзделие.Вставить("Номенклатура", Партия.Номенклатура);
					ОсновноеИзделие.Вставить("Характеристика", Партия.Характеристика);
					
					ПоляПартии = ПоляПартии(РеквизитыШапки, ОсновноеИзделие,, ДанныеСпецификации);
					
					Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
						ДанныеСпецификации.ПартияПроизводства,
						ПоляПартии,
						Истина);
					
				КонецЕсли;
				
				// Дополнительные реквизиты
				ЗначенияРеквизитов = Новый Структура;
				
				Если РазделитьВнутриЭтапа
					И РеквизитыЭтапа.Этап = Партия.ПродолжитьЭтап Тогда
					ЗначенияРеквизитов.Вставить("ПроизводствоОднойДатой", РеквизитыЭтапа.ПроизводствоОднойДатой);
					ЗначенияРеквизитов.Вставить("ДатаПроизводства", РеквизитыЭтапа.ДатаПроизводства);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Партия.ПродолжитьИдентификаторОперации)
					И Не Партия.ПродолжитьЭтоПерваяОперация Тогда
					РеквизитыДеления = НовыйРеквизитыДеления();
					РеквизитыДеления.ИдентификаторПервойОперации = Партия.ПродолжитьИдентификаторОперации;
					РеквизитыДеления.ПерваяОперация = Партия.ПродолжитьОперация;
					ЗначенияРеквизитов.Вставить("РеквизитыДеления", РеквизитыДеления);
				КонецЕсли;
				
				ДополнительныеРеквизиты = Новый Соответствие;
				Если ЗначенияРеквизитов.Количество() > 0 Тогда
					ДополнительныеРеквизиты.Вставить(Партия.ПродолжитьЭтап, ЗначенияРеквизитов);
				КонецЕсли;
				
				// Создание этапов
				НовыеЭтапы = СоздатьЦепочкуЭтаповПриДелении(
					ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии, ДополнительныеРеквизиты, Параметры);
				
			Иначе
				
				СсылкиКОбработке = Неопределено;
				Если Партия.ПродолжитьЭтап <> РеквизитыЭтапа.Этап Тогда
					НайденнаяСтрока = ДанныеЭтапов.ДанныеПересчета.Реквизиты.Найти(Партия.ПродолжитьЭтап, "Этап");
					Если НайденнаяСтрока <> Неопределено Тогда
						СсылкиКОбработке = Новый Массив;
						СсылкиКОбработке.Добавить(НайденнаяСтрока.Ссылка);
						
						ОчередьЭтапов = Новый Массив;
						ОчередьЭтапов.Добавить(НайденнаяСтрока.НомерСледующегоЭтапа);
						
						СтруктураПоиска = Новый Структура("НомерЭтапа");
						Индекс = 0;
						Пока Индекс <= ОчередьЭтапов.ВГраница() Цикл
							СтруктураПоиска.НомерЭтапа = ОчередьЭтапов[Индекс];
							Для каждого НайденнаяСтрока Из ДанныеЭтапов.ДанныеПересчета.Реквизиты.НайтиСтроки(СтруктураПоиска) Цикл
								Если ОчередьЭтапов.Найти(НайденнаяСтрока.НомерСледующегоЭтапа) = Неопределено Тогда
									ОчередьЭтапов.Добавить(НайденнаяСтрока.НомерСледующегоЭтапа);
								КонецЕсли;
								СсылкиКОбработке.Добавить(НайденнаяСтрока.Ссылка);
							КонецЦикла;
							Индекс = Индекс + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				РазмерПартии = НовыйРазмерПартии(
					Партия.КоличествоПартии,
					Партия.КоличествоУпаковокПартии,
					Партия.УпаковкаПартии);
				
				ОсновноеИзделие = Новый Структура("Номенклатура, Характеристика",
					Справочники.Номенклатура.ПустаяСсылка(),
					Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				Если ДанныеПартии.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
					// При разборке основным изделием новой партии станет изделие промежуточного выпуска
					ЗаполнитьЗначенияСвойств(ОсновноеИзделие, Партия);
				Иначе
					ЗаполнитьЗначенияСвойств(ОсновноеИзделие, ДанныеПартии);
				КонецЕсли;
				
				ДополнительныеРеквизиты = Новый Соответствие;
				Если ЗначениеЗаполнено(Партия.ПродолжитьИдентификаторОперации)
					И Не Партия.ПродолжитьЭтоПерваяОперация Тогда
					Ключ = Неопределено;
					Если Партия.ПродолжитьЭтап = РеквизитыЭтапа.Этап Тогда
						Ключ = Этап;
					Иначе
						НайденнаяСтрока = ДанныеЭтапов.ДанныеПересчета.Реквизиты.Найти(Партия.ПродолжитьЭтап, "Этап");
						Если НайденнаяСтрока <> Неопределено Тогда
							Ключ = НайденнаяСтрока.Ссылка;
						КонецЕсли;
					КонецЕсли;
					
					Если Ключ <> Неопределено Тогда
						РеквизитыДеления = НовыйРеквизитыДеления();
						РеквизитыДеления.ИдентификаторПервойОперации = Партия.ПродолжитьИдентификаторОперации;
						РеквизитыДеления.ПерваяОперация = Партия.ПродолжитьОперация;
						ДополнительныеРеквизиты.Вставить(Ключ, Новый Структура("РеквизитыДеления", РеквизитыДеления));
					КонецЕсли;
				КонецЕсли;
				
				ПараметрыПересчета = ПересчитатьПоКоэффициентуПараметры();
				ПараметрыПересчета.УдалятьФакт = Истина;
				ПараметрыПересчета.УдалятьНоменклатуруДеления = Истина;
				ПараметрыПересчета.ОчищатьКлючиСтрок = Истина;
			
				// Создание этапов
				НовыеЭтапы = СкопироватьПартиюИПересчитатьПоКоэффициенту(
					ДанныеПартии,
					ДанныеЭтапов.ДанныеПересчета,
					СсылкиКОбработке,
					РазмерПартии,
					ОсновноеИзделие,
					ДополнительныеРеквизиты,
					ПараметрыПересчета);
				
			КонецЕсли;
			
			Для каждого Ссылка Из НовыеЭтапы Цикл
				Результат.ЭтапСоздан.Добавить(Ссылка);
			КонецЦикла;
			
			// Добавление номенклатуры промежуточного выпуска в обеспечение
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Документ.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК Документ
				|ГДЕ
				|	Документ.Ссылка В(&Ссылки)
				|	И НЕ ИСТИНА В
				|				(ВЫБРАТЬ ПЕРВЫЕ 1
				|					ИСТИНА
				|				ИЗ
				|					Документ.ЭтапПроизводства2_2.Последователи КАК Последователи
				|				ГДЕ
				|					Последователи.Этап = Документ.Ссылка)");
			Запрос.УстановитьПараметр("Ссылки", НовыеЭтапы);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ЭтапПроизводства2_2
				ДокументОбъект.Заблокировать();
				
				СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
				КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", Партия.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", Партия.Характеристика);
				СтруктураПоиска.Вставить("Отменено", Ложь);
				НайденныеСтроки = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.ВГраница() = -1 Тогда
					
					НоваяСтрока = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия);
					Если ДокументОбъект.НеОтгружатьЧастями Тогда
						НоваяСтрока.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
					КонецЕсли;
					Если Не ДокументОбъект.ДинамическаяСтруктура Тогда
						НоваяСтрока.Производится = Истина;
					КонецЕсли;
					НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
					НоваяСтрока.Обособленно = Истина;
					НоваяСтрока.НазначениеОбеспечения = ДокументОбъект.Назначение;
					НоваяСтрока.Назначение = ДокументОбъект.Назначение;
					НоваяСтрока.Склад = Партия.Получатель;
					НоваяСтрока.Подразделение = ДокументОбъект.Подразделение;
					НоваяСтрока.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе;
					
				Иначе
					
					Остаток = Партия.Количество;
					Для Индекс = 0 По НайденныеСтроки.ВГраница() Цикл
						
						Строка = НайденныеСтроки[Индекс];
						Если Не ДокументОбъект.ДинамическаяСтруктура Тогда
							Строка.Производится = Истина;
						КонецЕсли;
						Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
						Строка.Обособленно = Истина;
						Строка.НазначениеОбеспечения = ДокументОбъект.Назначение;
						Строка.Назначение = ДокументОбъект.Назначение;
						Строка.Склад = Партия.Получатель;
						
						Если Индекс = НайденныеСтроки.ВГраница()
							И Остаток > Строка.Количество Тогда
							Строка.Количество = Остаток;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
						КонецЕсли;
						
						Остаток = Остаток - Строка.Количество;
						Если Остаток <= 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
				
				ДокументОбъект.Комментарий = СтрШаблон(
					НСтр("ru = 'Создан при изменении партии этапа %1';
						|en = 'Created when changing the lot of stage %1'"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						?(ЭтапПромежуточногоВыпуска = Неопределено, Этап, ЭтапПромежуточногоВыпуска),
						"Номер"));
				
				Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				КонецЕсли;
				
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ПровестиСПонижениемСтатуса(ДокументОбъект);
				ДокументОбъект.Разблокировать();
				
				// Установка свойств промежуточного выпуска
				Партия.Назначение = ДокументОбъект.Назначение;
				Для каждого СтрокаСерия Из Серии.НайтиСтроки(Новый Структура("ИндексПартии", Партия.ИндексПартии)) Цикл
					СтрокаСерия.Назначение = ДокументОбъект.Назначение;
				КонецЦикла;
				Если ДанныеПартии.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
					Партия.ОбработатьПоСпецификации = Истина;
				КонецЕсли;
				
				ПотребителиПромежуточногоВыпуска.Добавить(ДокументОбъект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтапПромежуточногоВыпуска = Неопределено Тогда
			// Оформление промежуточного выпуска
			ЭтапПромежуточногоВыпуска = ОформитьПромежуточныйВыпускВНовомЭтапе(
				ДанныеПартии, Этап, ВыходныеИзделия, Серии, Параметры);
			
			// Если в этапе - точке деления был выпуск изделий промежуточного выпуска по фиксированной стоимости,
			// то необходимо отразить потребление этих изделий в "техническом" этапе для исключения
			// задвоения выпуска
			Корректировка = ОтразитьРасходПобочныхИзделийВПромежуточномВыпуске(
				ЭтапПромежуточногоВыпуска, СсылкиКУдалению);
			Если Корректировка <> Неопределено Тогда
				Результат.КорректировкаСоздана.Добавить(Корректировка);
			КонецЕсли;
			
			// Изменение резервов
			Изменения = ПередатьРезервы(СсылкиКПередачеДанных, Результат.ЭтапСоздан);
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
			Результат.ЭтапСоздан.Добавить(ЭтапПромежуточногоВыпуска);
		Иначе
			// Изменение резервов
			ОтправителиКУдалению = ?(РазделитьВнутриЭтапа,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтапПромежуточногоВыпуска),
				Неопределено);
			Изменения = ПередатьРезервы(СсылкиКПередачеДанных, Результат.ЭтапСоздан, ОтправителиКУдалению);
			Для каждого Ссылка Из Изменения.ЭтапИзменен Цикл
				Результат.ЭтапИзменен.Добавить(Ссылка);
			КонецЦикла;
			Для каждого Ссылка Из Изменения.КорректировкаСоздана Цикл
				Результат.КорректировкаСоздана.Добавить(Ссылка);
			КонецЦикла;
			
			// Оформление промежуточного выпуска
			ДокументОбъект = ЭтапПромежуточногоВыпуска.ПолучитьОбъект();
			
			Если РазделитьВнутриЭтапа Тогда
				// Изменение шапки
				Если ЭтоБрак
					И ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
					ДокументОбъект.ФактическоеНачалоЭтапа = ТекущаяДатаСеанса();
				КонецЕсли;
				
				РассчитатьОтменено = Ложь;
				Если ЭтоБрак Тогда
					Если ДокументОбъект.КоличествоУпаковокФакт = 0 Тогда
						ДокументОбъект.КоличествоУпаковокФакт = КоличествоУпаковокБрак;
						ДокументОбъект.УпаковкаФакт = УпаковкаБрак;
						РассчитатьОтменено = Истина;
					КонецЕсли;
				Иначе
					РассчитатьОтменено = Истина;
				КонецЕсли;
				
				Если РассчитатьОтменено
					И ДокументОбъект.КоличествоУпаковокОтменено = 0 Тогда
					ДокументОбъект.УпаковкаОтменено = ДокументОбъект.УпаковкаПлан;
					Если ДокументОбъект.УпаковкаФакт = ДокументОбъект.УпаковкаПлан Тогда
						ДокументОбъект.КоличествоУпаковокОтменено = ДокументОбъект.КоличествоУпаковокПлан
							- ДокументОбъект.КоличествоУпаковокФакт;
					Иначе
						КоэффициентПлан = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
							ДокументОбъект.УпаковкаПлан, ДанныеПартии.ОсновноеИзделиеНоменклатура);
						КоэффициентФакт = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
							ДокументОбъект.УпаковкаФакт, ДанныеПартии.ОсновноеИзделиеНоменклатура);
						КоличествоУпаковокФакт = ДокументОбъект.КоличествоУпаковокФакт
							* КоэффициентФакт
							/ КоэффициентПлан;
						ДокументОбъект.КоличествоУпаковокОтменено = ДокументОбъект.КоличествоУпаковокПлан
							- КоличествоУпаковокФакт;
					КонецЕсли;
				КонецЕсли;
				
				УстановитьПоследнююОперацию(ДокументОбъект, ИдентификаторОперации, МенеджерОчередь);
				
				// Изменение ТЧ
				УдалитьПлановыеСтроки(ДанныеПартии, ДокументОбъект);
			КонецЕсли;
			
			ОформитьПромежуточныйВыпуск(ДанныеПартии, ДокументОбъект, ВыходныеИзделия, Серии, Параметры);
			
			Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
			КонецЕсли;
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ПровестиСПонижениемСтатуса(ДокументОбъект);
			
			Результат.ЭтапИзменен.Добавить(ЭтапПромежуточногоВыпуска);
		КонецЕсли;
		
		// Запись этапа-предшественника
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Реквизиты.Этап КАК Этап,
			|	Реквизиты.ИдентификаторПервойОперации КАК ИдентификаторПервойОперации,
			|	Реквизиты.ПерваяОперация КАК ПерваяОперация,
			|	Реквизиты.ИдентификаторПоследнейОперации КАК ИдентификаторПоследнейОперации,
			|	Реквизиты.ПоследняяОперация КАК ПоследняяОперация,
			|	Реквизиты.ОтмененоПоследняяОперация КАК ОтмененоПоследняяОперация
			|ИЗ
			|	РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК Реквизиты
			|ГДЕ
			|	Реквизиты.Этап В (&Ссылки)");
		Запрос.УстановитьПараметр("Ссылки", ПотребителиПромежуточногоВыпуска);
		РеквизитыДеления = Запрос.Выполнить().Выгрузить();
		РеквизитыДеления.Индексы.Добавить("Этап");
		Для каждого Ссылка Из ПотребителиПромежуточногоВыпуска Цикл
			Набор = РегистрыСведений.РеквизитыДеленияЭтаповПроизводства.СоздатьНаборЗаписей();
			Набор.Отбор.Этап.Установить(Ссылка);
			
			НоваяЗапись = Набор.Добавить();
			НайденнаяСтрока = РеквизитыДеления.Найти(Ссылка, "Этап");
			Если НайденнаяСтрока <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяЗапись, НайденнаяСтрока);
			КонецЕсли;
			НоваяЗапись.Этап = Ссылка;
			НоваяЗапись.Предшественник = ЭтапПромежуточногоВыпуска;
			
			Набор.Записать();
		КонецЦикла;
		
		// Заполнение связанных регистров
		Если ДанныеПартии.ДинамическаяСтруктура Тогда
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадание(
				ДанныеПартии.Распоряжение,, Истина);
		Иначе
			РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ДобавитьЗадание(
				ДанныеПартии.Распоряжение, Истина);
		КонецЕсли;
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(ДанныеПартии.Распоряжение);
		Если ИспользоватьОперацииВЭтапах() Тогда
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
		КонецЕсли;
		
		// Запись заказа
		Если ЗаказОбъект <> Неопределено Тогда
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Результат.ЗаказИзменен.Добавить(ЗаказОбъект.Ссылка);
		КонецЕсли;
		
	Исключение
		
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Деление партии';
					|en = 'Lot division'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Для каждого Ссылка Из СсылкиКБлокировке Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Добавляет бракованное изделие в табличную часть выпуска по рассчитываемой стоимости.
// 
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//  Параметры - Структура
//  Изделие - СтрокаТаблицыЗначений, Структура - данные бракованного изделия
//	ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, инициировавшей
//		изменение данных. Используется для блокировки данных для редактирования.
// 
// Возвращаемое значение:
//  Структура
//
Функция ДобавитьБрак(ДанныеПартии, Параметры, Изделие, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЗаказИзменен", Новый Массив);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("Сообщения", Новый Массив);
	
	Этап = Параметры.Этап;
	КоличествоУпаковокБрак = Параметры.КоличествоУпаковокБрак;
	УпаковкаБрак = Параметры.УпаковкаБрак;
	ЗаполнитьДолиСтоимости = Параметры.ЗаполнитьДолиСтоимости;
	Серии = Параметры.Серии;
	
	СсылкиКБлокировке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Этап);
	Если Изделие.ОтменитьИзделиеВЗаказе Тогда
		СсылкиКБлокировке.Добавить(ДанныеПартии.Распоряжение);
	КонецЕсли;
	
	Попытка
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			ЗаблокироватьДанныеДляРедактирования(Ссылка,, ИдентификаторФормы);
		КонецЦикла;
		
		ДокументОбъект = Этап.ПолучитьОбъект();
		
		// Сокращение основного изделия
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ДанныеПартии.ОсновноеИзделиеНоменклатура);
		СтруктураПоиска.Вставить("Характеристика", ДанныеПартии.ОсновноеИзделиеХарактеристика);
		СтруктураПоиска.Вставить("Произведено", Ложь);
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		СтруктураПоискаСерии = Новый Структура("Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		КоэффициентУпаковкиБрак = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
			УпаковкаБрак, ДанныеПартии.ОсновноеИзделиеНоменклатура);
		Остаток = КоличествоУпаковокБрак * КоэффициентУпаковкиБрак;
		
		Для каждого Строка Из ДокументОбъект.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
			Количество = Мин(Строка.Количество, Остаток);
			Если Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.СтатусУказанияСерий <> 0 Тогда
				ОстатокСерии = Количество;
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, Строка);
				
				Для каждого СтрокаСерии Из ДокументОбъект.ВыходныеИзделияСерии.НайтиСтроки(СтруктураПоискаСерии) Цикл
					КоличествоСерии = Мин(СтрокаСерии.Количество, ОстатокСерии);
					
					Если СтрокаСерии.Количество = КоличествоСерии Тогда
						ДокументОбъект.ВыходныеИзделияСерии.Удалить(СтрокаСерии);
					Иначе
						СтрокаСерии.Количество = СтрокаСерии.Количество - КоличествоСерии;
					КонецЕсли;
					
					ОстатокСерии = ОстатокСерии - КоличествоСерии;
					Если ОстатокСерии = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Строка.Количество = Количество Тогда
				ДокументОбъект.ВыходныеИзделия.Удалить(Строка);
			Иначе
				Строка.Количество = Строка.Количество - Количество;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
			
			Остаток = Остаток - Количество;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Заполнение долей стоимости
		Если ЗаполнитьДолиСтоимости Тогда
			Для каждого Строка Из ДокументОбъект.ВыходныеИзделия Цикл
				Строка.ДоляСтоимости = Строка.Количество;
			КонецЦикла;
		КонецЕсли;
		
		// Бракованное изделие
		НоваяСтрока = ДокументОбъект.ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие);
		
		Если ДокументОбъект.УпаковкаФакт = УпаковкаБрак Тогда
			ДокументОбъект.КоличествоУпаковокФакт = ДокументОбъект.КоличествоУпаковокФакт + КоличествоУпаковокБрак;
		КонецЕсли;
		
		Для каждого Строка Из Серии Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ВыходныеИзделияСерии.Добавить(), Строка);
		КонецЦикла;
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			ДокументОбъект, ПараметрыУказанияСерий(ДокументОбъект).ВыходныеИзделия);
		
		// Проведение
		Если ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован
			ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению Тогда
			ДокументОбъект.УстановитьСтатус("Начат", Неопределено);
		КонецЕсли;
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		ПровестиСПонижениемСтатуса(ДокументОбъект);
		
		Результат.ЭтапИзменен.Добавить(ДокументОбъект.Ссылка);
		
		// Изменение заказа
		Если Изделие.ОтменитьИзделиеВЗаказе Тогда
			ЗаказОбъект = ДанныеПартии.Распоряжение.ПолучитьОбъект(); // ДокументОбъект.ЗаказНаПроизводство2_2
			
			ЗаказОбъект.ОтменитьПродукцию(
				ДанныеПартии.ОсновноеИзделиеНоменклатура,
				ДанныеПартии.ОсновноеИзделиеХарактеристика,
				ДанныеПартии.Спецификация,
				КоличествоУпаковокБрак * КоэффициентУпаковкиБрак,
				Изделие.ПричинаОтменыИзделия);
			
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Результат.ЗаказИзменен.Добавить(ЗаказОбъект.Ссылка);
		КонецЕсли;
	Исключение
		Для каждого Ссылка Из СсылкиКБлокировке Цикл
			РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
		КонецЦикла;
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
			+ НСтр("ru = 'Добавление брака';
					|en = 'Add nonconformity'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Для каждого Ссылка Из СсылкиКБлокировке Цикл
		РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПерезаполнитьПартииВФоне(Параметры, АдресХранилища) Экспорт
	
	ТаблицаПартий = Параметры.Партии;
	
	Отказ = Ложь;
	МассивРезультатов = Новый Массив;
	
	Для каждого Строка Из ТаблицаПартий Цикл
		
		РезультатПоСтроке = ПерезаполнитьПартию(
			Строка.ПартияПроизводства,
			Новый Структура("Этап", Строка.Этап),
			Параметры.ИдентификаторФормы);
			
		Если РезультатПоСтроке.Отказ Тогда
			
			Для каждого ТекстСообщения Из РезультатПоСтроке.Сообщения Цикл
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Перезаполнение партий по спецификации';
						|en = 'Refill lots by BOM'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
			КонецЦикла;
			
			Отказ = Истина;
			
		КонецЕсли;
		
		МассивРезультатов.Добавить(РезультатПоСтроке);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(
		Новый Структура("Отказ, МассивРезультатов", Отказ, МассивРезультатов),
		АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Конструктор структуры, определяющей размер партии производства.
// 
// Параметры:
// 	Количество - Число - количество изделий в базовых единицах номенклатуры.
// 	КоличествоУпаковок - Число - количество изделий в упаковках.
// 	Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка изделия.
// 	
// Возвращаемое значение:
// 	Структура - содержит:
// * Количество - Число - количество изделий в базовых единицах номенклатуры. 
// * КоличествоУпаковок - Число - количество изделий в упаковках. 
// * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка изделия.
//
Функция НовыйРазмерПартии(Количество, КоличествоУпаковок, Упаковка) Экспорт
	
	Возврат Новый Структура("Количество, КоличествоУпаковок, Упаковка",
		Количество, КоличествоУпаковок, Упаковка);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация) И
	|	(ЗначениеРазрешено(Подразделение)
	|	ИЛИ ЗначениеРазрешено(ОтветственноеПодразделение, ПустаяСсылка КАК Ложь))";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Прочее

// Формирует структуру параметров документа для встраивания документа в механимы обеспечения.
//
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраиванияПроизводствоНаСтороне()
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ИспользоватьПодпискиНаСобытия.ПередВыполнениемДействийВСпискеЗаказов = Истина;
	
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки,КлючНоменклатура";
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "ОбеспечениеМатериаламиИРаботами";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "ОбеспечениеМатериаламиИРаботамиВариантОбеспечения";
	ЭлементыФормы.Доступно           = "ОбеспечениеМатериаламиИРаботамиДоступно";
	ЭлементыФормы.Серия              = "ОбеспечениеМатериаламиИРаботамиСерия";
	ЭлементыФормы.Обособленно        = "ОбеспечениеМатериаламиИРаботамиОбособленно";
	ЭлементыФормы.Склад              = "ОбеспечениеМатериаламиИРаботамиСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.ОбеспечениеМатериаламиИРаботами.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.ОбеспечениеМатериаламиИРаботами.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.ОбеспечениеМатериаламиИРаботами.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = Истина;
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыКлиентов";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	ПараметрыВстраивания.ИмяТаблицы = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	ТабЧасть.НазначениеОбеспечения КАК Назначение,
		|	Реквизиты.ЗаказПереработчику КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОбеспечению,
		|	Реквизиты.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется) КАК ГотовКОтгрузке,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				ТабЧасть.ДатаОтгрузки
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	ТабЧасть.Отменено КАК Отменено,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК ДатаДокумента,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	Реквизиты.Распоряжение.Приоритет КАК Приоритет,
		|	ВЫБОР КОГДА Реквизиты.НеОтгружатьЧастями ТОГДА
		|				Реквизиты.ДатаОтгрузки
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
		|		ПО ИСТИНА
		|";
	
	// Шаблон сериализации данных формы.
	ОбеспечениеМатериаламиИРаботами = Новый Структура();
	ОбеспечениеМатериаламиИРаботами.Вставить("НомерСтроки",           Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Номенклатура",          Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Характеристика",        Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Склад",                 Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ОбеспечениеМатериаламиИРаботами.Вставить("НазначениеОбеспечения", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ВариантОбеспечения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Обособленно",           Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Производится",          Новый ОписаниеТипов("Булево"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Количество",            Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КоличествоУпаковок",    Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Упаковка",              Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ОбеспечениеМатериаламиИРаботами.Вставить("ДатаОтгрузки",          Новый ОписаниеТипов("Дата"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Серия",                 Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ОбеспечениеМатериаламиИРаботами.Вставить("КодСтроки",             Новый ОписаниеТипов("Число"));
	ОбеспечениеМатериаламиИРаботами.Вставить("Отменено",              Новый ОписаниеТипов("Булево"));
	
	Объект = Новый Структура();
	Объект.Вставить("Ссылка",                          Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Объект.Вставить("Статус",                          Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2"));
	Объект.Вставить("НеОтгружатьЧастями",              Новый ОписаниеТипов("Булево"));
	Объект.Вставить("ДатаОтгрузки",                    Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Дата",                            Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Распоряжение",                    Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	Объект.Вставить("ОбеспечениеМатериаламиИРаботами", ОбеспечениеМатериаламиИРаботами);
	Объект.Вставить(
		"ЗаказПереработчику",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказПереработчику2_5"));
	//++ Устарело_Переработка24
	Объект.Вставить(
		"ЗаказПереработчику",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказПереработчику,ДокументСсылка.ЗаказПереработчику2_5"));
	//-- Устарело_Переработка24
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов = "НЕОПРЕДЕЛЕНО";
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

// Формирует представление объекта метаданных на основном языке.
// Возвращаемое значение:
// Строка - Представление объекта метаданных на основном языке.
//
Функция ПредставлениеОбъектаНаОсновномЯзыке() Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	ПредставлениеОбъекта = НСтр(
		"ru = 'Этап производства';
		|en = 'Production stage'",
		КодОсновногоЯзыка);
		
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Определяет наличие права доступа "ДиспетчированиеЭтаповПроизводства" для текущего пользователя.
//
// Возвращаемое значение:
//   - Булево - Истина, если доступно диспетчирование этапов.
//
Функция ДоступноДиспетчированиеЭтапов() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ДиспетчированиеЭтаповПроизводства);
	
КонецФункции

// Считывает данные объекта и помещает их во временные таблицы
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2, ОбработкаОбъект.РедактированиеЭтаповПроизводства, Структура - объект, для которого необходимо прочитать данные.
//
// Возвращаемое значение:
//  МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция ВременныеТаблицыДанныхОбъекта(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		ДанныеЭтаповПроизводства = Объект;
	Иначе
		ДанныеЭтаповПроизводства = Объект.ДанныеЭтаповПроизводства();
	КонецЕсли;
	
	ТекстыЗапроса = Новый Массив;
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Дата КАК Дата,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ВнутренняяПереработка КАК ВнутренняяПереработка,
	|	Таблица.ОрганизацияДавалец КАК ОрганизацияДавалец,
	|	Таблица.ПартияПроизводства КАК ПартияПроизводства,
	|	Таблица.Распоряжение КАК Распоряжение,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ВыпускПодДеятельность КАК ВыпускПодДеятельность,
	|	Таблица.Статус КАК Статус,
	|
	|	Таблица.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	Таблица.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	Таблица.ПроизводствоНаСтороне2_5 КАК ПроизводствоНаСтороне2_5,
	|	Таблица.ЗаказПереработчику КАК ЗаказПереработчику,
	|	
	|	Таблица.ОставитьИзделияУПереработчика КАК ОставитьИзделияУПереработчика,
	|	Таблица.ПроизводствоОднойДатой КАК ПроизводствоОднойДатой,
	|	Таблица.ДатаПроизводства КАК ДатаПроизводства,
	|	Таблица.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Таблица.РасходОднойДатой КАК РасходОднойДатой,
	|	Таблица.ДатаРасхода КАК ДатаРасхода,
	|	Таблица.ВыполнениеРаботОднойДатой КАК ВыполнениеРаботОднойДатой,
	|	Таблица.ДатаВыполненияРабот КАК ДатаВыполненияРабот,
	|
	|	Таблица.ФактическоеНачалоЭтапа КАК ФактическоеНачалоЭтапа,
	|	Таблица.ФактическоеОкончаниеЭтапа КАК ФактическоеОкончаниеЭтапа,
	|
	|	Таблица.Назначение КАК Назначение,
	|
	|	Таблица.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	Таблица.КоэффициентМаршрутнойКарты КАК КоэффициентМаршрутнойКарты,
	|
	|	Таблица.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия
	|
	|ПОМЕСТИТЬ РеквизитыЭтапов
	|ИЗ
	|	&Реквизиты КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	Запрос.УстановитьПараметр("Реквизиты", ДанныеЭтаповПроизводства.Реквизиты);
	
	Если ДанныеЭтаповПроизводства.Свойство("РеквизитыЗаказаПереработчику")
		И ЗначениеЗаполнено(ДанныеЭтаповПроизводства.РеквизитыЗаказаПереработчику) Тогда
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	&ЗаказПереработчику КАК ЗаказПереработчику,
		|	&Проведен           КАК Проведен,
		|	&Статус             КАК Статус
		|ПОМЕСТИТЬ РеквизитыЗаказовПереработчику
		|");
		Запрос.УстановитьПараметр("ЗаказПереработчику", ДанныеЭтаповПроизводства.РеквизитыЗаказаПереработчику.ЗаказПереработчику);
		Запрос.УстановитьПараметр("Проведен",           ДанныеЭтаповПроизводства.РеквизитыЗаказаПереработчику.Проведен);
		Запрос.УстановитьПараметр("Статус",             ДанныеЭтаповПроизводства.РеквизитыЗаказаПереработчику.Статус);
		
	Иначе
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	РеквизитыЭтапов.ЗаказПереработчику КАК ЗаказПереработчику,
		|	ЗаказыПереработчику.Проведен       КАК Проведен,
		|	ЗаказыПереработчику.Статус         КАК Статус
		|ПОМЕСТИТЬ РеквизитыЗаказовПереработчику
		|ИЗ
		|	РеквизитыЭтапов КАК РеквизитыЭтапов
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ЗаказыПереработчику
		|	ПО ЗаказыПереработчику.Ссылка = РеквизитыЭтапов.ЗаказПереработчику
		|	И НЕ ЗаказыПереработчику.ДополнительнаяЗапись
		|	И НЕ РеквизитыЭтапов.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	РеквизитыЭтапов.ЗаказПереработчику,
		|	ЗаказыПереработчику.Проведен,
		|	ЗаказыПереработчику.Статус
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РеквизитыЭтапов.ЗаказПереработчику
		|");
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧВыходныеИзделия Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.СтатьяРасходов,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.ЭтапПотребитель,
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.ДатаПроизводства,
		|	ТабличнаяЧасть.ДоляСтоимости,
		|	ТабличнаяЧасть.Произведено,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.ОбработатьПоСпецификации,
		|	ТабличнаяЧасть.Спецификация,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ВладелецИзделия,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Произведено И НЕ ТабличнаяЧасть.Отменено
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПризнакПроизведено,
		//++ Устарело_Переработка24
		|	ТабличнаяЧасть.ОформитьОтчетДавальцу,
		//-- Устарело_Переработка24
		|	0 КАК Цена,
		|	ТабличнаяЧасть.Сумма,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.АналитикаРасходов,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.НастройкаСчетовУчета,
		|	ТабличнаяЧасть.ИдентификаторСтроки,
		|	ТабличнаяЧасть.КодСтроки,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение,
		|	&ТекстПоляТабличнаяЧастьНомерГТД_ КАК НомерГТД
		|ПОМЕСТИТЬ ВыходныеИзделия
		|ИЗ
		|	&ВыходныеИзделия КАК ТабличнаяЧасть
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.ВыходныеИзделия,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьНомерГТД_",
			"ТабличнаяЧасть",
			"НомерГТД",
			"ТабличнаяЧасть.НомерГТД",
			"ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)");
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВыходныеИзделия", ДанныеЭтаповПроизводства.ВыходныеИзделия);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧПобочныеИзделия Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.СтатьяРасходов,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.ЭтапПотребитель,
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.Произведено,
		|	ТабличнаяЧасть.ДатаПроизводства,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.ОбработатьПоСпецификации,
		|	ТабличнаяЧасть.Спецификация,
		|	ТабличнаяЧасть.Цена,
		|	ТабличнаяЧасть.Сумма,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ТабличнаяЧасть.ВладелецИзделия,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Произведено И НЕ ТабличнаяЧасть.Отменено
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПризнакПроизведено,
		//++ Устарело_Переработка24
		|	ТабличнаяЧасть.ОформитьОтчетДавальцу,
		//-- Устарело_Переработка24
		|	0 КАК ДоляСтоимости,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.АналитикаРасходов,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.НастройкаСчетовУчета,
		|	ТабличнаяЧасть.ИдентификаторСтроки,
		|	ТабличнаяЧасть.КодСтроки,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение,
		|	&ТекстПоляТабличнаяЧастьНомерГТД_ КАК НомерГТД
		|ПОМЕСТИТЬ ПобочныеИзделия
		|ИЗ
		|	&ПобочныеИзделия КАК ТабличнаяЧасть
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.ПобочныеИзделия,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьНомерГТД_",
			"ТабличнаяЧасть",
			"НомерГТД",
			"ТабличнаяЧасть.НомерГТД",
			"ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)");
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ПобочныеИзделия", ДанныеЭтаповПроизводства.ПобочныеИзделия);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧОбеспечениеМатериаламиИРаботами Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
		|				ИЛИ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Период, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
		|			ТОГДА 0
		|		ИНАЧЕ &ТекстПоляТабличнаяЧастьКоличествоПоРНПТ_
		|	КОНЕЦ КАК КоличествоПоРНПТ,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.ДатаОтгрузки,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.НазначениеОбеспечения,
		|	ТабличнаяЧасть.Производится,
		|	ТабличнаяЧасть.Спецификация,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.ВариантОбеспечения,
		|	ТабличнаяЧасть.Обособленно,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение,
		|	&ТекстПоляТабличнаяЧастьНомерГТД_ КАК НомерГТД
		|ПОМЕСТИТЬ ОбеспечениеМатериаламиИРаботами
		|ИЗ
		|	&ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.ОбеспечениеМатериаламиИРаботами,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьКоличествоПоРНПТ_",
			"ТабличнаяЧасть",
			"КоличествоПоРНПТ",
			"ТабличнаяЧасть.КоличествоПоРНПТ",
			"0");
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.ОбеспечениеМатериаламиИРаботами,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьНомерГТД_",
			"ТабличнаяЧасть",
			"НомерГТД",
			"ТабличнаяЧасть.НомерГТД",
			"ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)");
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ОбеспечениеМатериаламиИРаботами", ДанныеЭтаповПроизводства.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧРасходМатериаловИРабот Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
		|				ИЛИ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Период, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
		|			ТОГДА 0
		|		ИНАЧЕ &ТекстПоляТабличнаяЧастьКоличествоПоРНПТ_
		|	КОНЕЦ КАК КоличествоПоРНПТ,
		|	ТабличнаяЧасть.ДатаРасхода,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.Подразделение,
		|	&ТекстПоляТабличнаяЧастьНомерГТД_ КАК НомерГТД
		|ПОМЕСТИТЬ РасходМатериаловИРабот
		|ИЗ
		|	&РасходМатериаловИРабот КАК ТабличнаяЧасть
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.РасходМатериаловИРабот,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьКоличествоПоРНПТ_",
			"ТабличнаяЧасть",
			"КоличествоПоРНПТ",
			"ТабличнаяЧасть.КоличествоПоРНПТ",
			"0");
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.РасходМатериаловИРабот,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьНомерГТД_",
			"ТабличнаяЧасть",
			"НомерГТД",
			"ТабличнаяЧасть.НомерГТД",
			"ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)");
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("РасходМатериаловИРабот", ДанныеЭтаповПроизводства.РасходМатериаловИРабот);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧЭкономияМатериалов Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.Назначение,
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
		|				ИЛИ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Период, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
		|			ТОГДА 0
		|		ИНАЧЕ &ТекстПоляТабличнаяЧастьКоличествоПоРНПТ_
		|	КОНЕЦ КАК КоличествоПоРНПТ,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.ДатаОперации,
		|	ТабличнаяЧасть.СтатьяРасходов,
		|	ТабличнаяЧасть.АналитикаРасходов,
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Период,
		|	ТабличнаяЧасть.СтатусУказанияСерий,
		|	ТабличнаяЧасть.СтатусУказанияСерийПолучатель,
		|	ТабличнаяЧасть.Серия,
		|	ТабличнаяЧасть.СписатьНаРасходы,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.НастройкаСчетовУчета,
		|	ТабличнаяЧасть.ИдентификаторСтроки,
		|	ТабличнаяЧасть.Подразделение,
		|	&ТекстПоляТабличнаяЧастьНомерГТД_ КАК НомерГТД
		|ПОМЕСТИТЬ ЭкономияМатериалов
		|ИЗ
		|	&ЭкономияМатериалов КАК ТабличнаяЧасть
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|
		|";
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.ЭкономияМатериалов,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьКоличествоПоРНПТ_",
			"ТабличнаяЧасть",
			"КоличествоПоРНПТ",
			"ТабличнаяЧасть.КоличествоПоРНПТ",
			"0");
		
		ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
			ДанныеЭтаповПроизводства.ЭкономияМатериалов,
			ТекстЗапроса,
			"&ТекстПоляТабличнаяЧастьНомерГТД_",
			"ТабличнаяЧасть",
			"НомерГТД",
			"ТабличнаяЧасть.НомерГТД",
			"ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)");
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЭкономияМатериалов", ДанныеЭтаповПроизводства.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если ДанныеЭтаповПроизводства.ПроверятьТЧТрудозатраты Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Количество,
		|	ТабличнаяЧасть.Исполнитель,
		|	ТабличнаяЧасть.Выполнено,
		|	ТабличнаяЧасть.ДатаВыполнения,
		|	ТабличнаяЧасть.СтатьяКалькуляции,
		|	ТабличнаяЧасть.Отменено,
		|	ТабличнаяЧасть.ПричинаОтмены,
		|	ТабличнаяЧасть.Подразделение
		|ПОМЕСТИТЬ Трудозатраты
		|ИЗ
		|	&Трудозатраты КАК ТабличнаяЧасть
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		Запрос.УстановитьПараметр("Трудозатраты", ДанныеЭтаповПроизводства.Трудозатраты);
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Выполняет проверку заполнения реквизитов этапа
//
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2, ОбработкаОбъект.РедактированиеЭтаповПроизводства	 - объект, который нужно проверить
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит временные таблицы документа
//  Отказ - Булево - присваивается Истина, если есть ошибки
//  ПроверяемыеРеквизиты - Массив - параметр обработчика ОбработкаПроверкиЗаполнения.
//
Процедура ПроверитьЗаполнениеОбъекта(Объект, МенеджерВременныхТаблиц, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоЭтапа");
	МассивНепроверяемыхРеквизитов.Добавить("ФактическоеОкончаниеЭтапа");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаПроизводства");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаРасхода");
	МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполненияРабот");
	МассивНепроверяемыхРеквизитов.Добавить("ОрганизацияДавалец");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.АналитикаРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.АналитикаАктивовПассивов");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДатаПроизводства");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделияСерии.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Назначение");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.АналитикаРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.АналитикаАктивовПассивов");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ДатаПроизводства");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.Серия");
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.ВладелецИзделия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделияСерии.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Спецификация");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Серия");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.Назначение");
	МассивНепроверяемыхРеквизитов.Добавить("ОбеспечениеМатериаламиИРаботами.НазначениеОбеспечения");
	
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.ДатаРасхода");
	МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.Серия");
	
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Серия");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.ДатаОперации");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.АналитикаРасходов");
	
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Исполнитель");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.ДатаВыполнения");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Количество");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.ПричинаОтмены");
	
	ПроверитьРеквизитыШапки(Объект, МенеджерВременныхТаблиц, Отказ);
	
	ПроверитьВыходныеИзделия(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьОбеспечениеМатериаламиИРаботами(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьРасходМатериаловИРабот(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьЭкономияМатериалов(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьТрудозатраты(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьРавенствоПоМатериалам(Объект, МенеджерВременныхТаблиц, Отказ);
	
	ПроверитьПериодыОтраженияЗатрат(Объект, МенеджерВременныхТаблиц, Отказ);
	
	ПроверитьДатыПроизводстваНаСтороне(Объект, МенеджерВременныхТаблиц, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Возвращает список реквизитов обязательных к заполнению в статусе "Формируется"
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2	 - объект, для которого нужно подготовить список реквизитов.
//
// Возвращаемое значение:
//   - Массив - список обязательных реквизитов в статусе "Формируется".
//
Функция СписокОбязательныхРеквизитовВСтатусеФормируется(Объект) Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ Объект.ПланироватьРаботуВидовРабочихЦентров И НЕ Объект.РучноеРазмещениеВГрафике Тогда
		
		Результат.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
		
	КонецЕсли;
	
	Если Объект.ПланироватьРаботуВидовРабочихЦентров И НЕ Объект.РучноеРазмещениеВГрафике  Тогда
		
		Результат.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		Результат.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Заполняет реквизит "Цена" в побочном выпуске этапа производства
//
// Параметры:
//  Объект	 - ДокументОбъект	 - обрабатываемый документ.
//
Процедура ЗаполнитьЦеныПоВидуЦен(Объект) Экспорт
	
	Если Объект.ВидЦены.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКОбработке = Новый Массив;
	
	Для каждого Строка Из Объект.ПобочныеИзделия Цикл
		Если Строка.Произведено И НЕ Строка.Отменено Тогда
			СтрокиКОбработке.Добавить(Строка);
		КонецЕсли;
		Строка.Цена  = 0;
		Строка.Сумма = 0;
	КонецЦикла;
	
	Если СтрокиКОбработке.Количество() > 0 Тогда
	
		ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенВыпуска(
			Объект.ВидЦены,
			Объект.Валюта,
			Объект.ФактическоеНачалоЭтапа);
			
		ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
		
		ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
			Объект.ПобочныеИзделия, // Табличная часть
			СтрокиКОбработке, // Массив строк или структура отбора
			ПараметрыЗаполнения, // Параметры заполнения
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму",
				"КоличествоУпаковок"));
				
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет, требуется ли уточнить этапы для заказов
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - Заказы на производство.
//
// Возвращаемое значение:
//  Булево - Истина - требуется уточнить этапы.
//
Функция ТребуетсяУточнитьЭтапы(Заказы) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Заказы);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение В (&МассивСсылок)
		|	И Таблица.Статус = &СтатусФормируется
		|	И Таблица.Проведен");
		
	Запрос.УстановитьПараметр("МассивСсылок",      МассивСсылок);
	Запрос.УстановитьПараметр("СтатусФормируется", Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция возвращает текст запроса для проверки оснований при вводе
// актов выполнения внутренних работ.
//
// Возвращаемое значение:
//   - Строка - текст запроса для проверки оснований.
//
Функция ТекстЗапросаПроверкиОснованийАктовРабот() Экспорт
	
	Возврат "
	// Получатели выходных изделий (этапы производства)
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Реквизиты.ВнутренняяПереработка
	|			ТОГДА Реквизиты.ОрганизацияДавалец
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ								КАК Организация,
	|	Реквизиты.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель			КАК Подразделение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|		ПО ТаблицаТоваров.Ссылка = Реквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&ОбъектыОснований)
	|	И ТаблицаТоваров.Произведено
	|	И НЕ ТаблицаТоваров.Отменено
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаТоваров.Получатель) = ТИП(Справочник.СтруктураПредприятия)
	|	И НЕ ТаблицаТоваров.СписатьНаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВнутренняяПереработка
	|			ТОГДА Реквизиты.ОрганизацияДавалец
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получатели побочных изделий (этапы производства)
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваров.ВладелецИзделия
	|		КОГДА Реквизиты.ВнутренняяПереработка
	|			ТОГДА Реквизиты.ОрганизацияДавалец
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ								КАК Организация,
	|	Реквизиты.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель			КАК Подразделение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Реквизиты
	|		ПО ТаблицаТоваров.Ссылка = Реквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&ОбъектыОснований)
	|	И ТаблицаТоваров.Произведено
	|	И НЕ ТаблицаТоваров.Отменено
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаТоваров.Получатель) = ТИП(Справочник.СтруктураПредприятия)
	|	И НЕ ТаблицаТоваров.СписатьНаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.НаправлениеДеятельности,
	|	ТаблицаТоваров.Получатель,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваров.ВладелецИзделия
	|		КОГДА Реквизиты.ВнутренняяПереработка
	|			ТОГДА Реквизиты.ОрганизацияДавалец
	|		ИНАЧЕ Реквизиты.Организация
	|	КОНЕЦ
	|"
КонецФункции

// Подставляет в текст запроса выбираемые поля из выходных изделий
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//	ИсходныеПоля - Структура - содержит пути к полям в исходном тексте запроса в виде [ВедущаяТаблица].ИмяПоля:
//		* Номенклатура - Строка - путь к полю Номенклатура
//		* Характеристика - Строка - путь к полю Характеристика
//		* Назначение - Строка - путь к полю Назначение
//		* КодСтроки - Строка - путь к полю КодСтроки
//		* ДоляСтоимости - Строка - путь к полю ДоляСтоимости
//		* Количество - Строка - путь к полю Количество.
//
// Возвращаемое значение:
//  Строка - новый текст запроса
//
Функция ПодставитьВыбираемыеПоля(ТекстЗапроса, ИсходныеПоля) Экспорт
	
	ПоляВыходныхИзделий = Новый Соответствие;
	ПоляВыходныхИзделий.Вставить("Номенклатура", "Номенклатура");
	ПоляВыходныхИзделий.Вставить("Характеристика", "Характеристика");
	ПоляВыходныхИзделий.Вставить("Назначение", "Назначение");
	ПоляВыходныхИзделий.Вставить("ДоляСтоимости", "ДоляСтоимости");
	ПоляВыходныхИзделий.Вставить("Количество", "Количество");
	ПоляВыходныхИзделий.Вставить("КодСтроки", "КодСтроки");
	
	Для Каждого КлючИЗначение Из ИсходныеПоля Цикл
		
		ПолеИзделия = ПоляВыходныхИзделий.Получить(КлючИЗначение.Ключ);
		Если ПолеИзделия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВедущаяТаблица = Лев(КлючИЗначение.Значение, СтрНайти(КлючИЗначение.Значение, ".", НаправлениеПоиска.СНачала));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, КлючИЗначение.Значение, ВедущаяТаблица + ПолеИзделия);
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Подставляет в текст запроса соединение, необходимое для получения выходных изделий.
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//  ИмяПараметра	 - Строка - имя параметра на место которого будет подставлено соединение
//  ПоляСоединений	 - Структура - содержит пути к полям в исходном запросе в виде [ВедущаяТаблица].Номенклатура. Структура содержит возможные поля, можно передавать не все поля:
//		* Распоряжение - Строка - заказ на производство, по которому необходимо получить выходные изделия
//		* Этап - Строка - этап производства, из которого требуется получить выходные изделия
//		* Номенклатура - Строка - выходное изделие
//		* Характеристика - Строка - характеристика выходного изделия
//		* Назначение - Строка - Назначение выходного изделия.
//
// Возвращаемое значение:
//  Строка - новый текст запроса
//
Функция ПодставитьСоединениеДляПолученияВыходныхИзделий(ТекстЗапроса, ИмяПараметра, ПоляСоединений) Экспорт
	
	СоединяемыеПоляЭтапа = Новый Соответствие;
	СоединяемыеПоляЭтапа.Вставить("Распоряжение", "Ссылка.Распоряжение");
	СоединяемыеПоляЭтапа.Вставить("Этап", "Ссылка");
	СоединяемыеПоляЭтапа.Вставить("Номенклатура", "Номенклатура");
	СоединяемыеПоляЭтапа.Вставить("Характеристика", "Характеристика");
	СоединяемыеПоляЭтапа.Вставить("Назначение", "Назначение");
	
	РезультатПодстановки = ТекстЗапроса;
	Пока Истина Цикл
		
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		Если НачалоПараметра = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПоследнийСимвол = НачалоПараметра + СтрДлина(ИмяПараметра);
		НачалоСинонима = СтрНайти(РезультатПодстановки, "КАК", НаправлениеПоиска.СКонца, НачалоПараметра) + СтрДлина("КАК");
		Синоним = СокрЛП(СтрЗаменить(Сред(РезультатПодстановки, НачалоСинонима, НачалоПараметра - НачалоСинонима - 1), "ПО", ""));
		ПревыйСимвол = СтрНайти(РезультатПодстановки, "СОЕДИНЕНИЕ", НаправлениеПоиска.СКонца, НачалоСинонима) + СтрДлина("СОЕДИНЕНИЕ");
		
		ПодстрокаПоиска = Сред(РезультатПодстановки, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
		ПодстрокаЗамены = " Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК %Синоним%";
		
		СвязьУсловий = " ПО ";
		
		Для Каждого КлючИЗначение Из ПоляСоединений Цикл
			
			СоединяемоеПоле = СоединяемыеПоляЭтапа.Получить(КлючИЗначение.Ключ);
			Если СоединяемоеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПодстрокаЗамены = ПодстрокаЗамены + СвязьУсловий + КлючИЗначение.Значение + " = " + "%Синоним%." + СоединяемоеПоле;
			СвязьУсловий = " И ";
			
		КонецЦикла;
		
		ПодстрокаЗамены = ПодстрокаЗамены + " И НЕ %Синоним%.Отменено";
		
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "%Синоним%", Синоним);
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат РезультатПодстановки;
	
КонецФункции

// Возвращает текст выборки поля ЭтапИсточник для подстановки в запрос
//
// Параметры:
//  ПутьРаспоряжение - Строка	 - путь к данным поля Распоряжение
//  ПутьЭтап		 - Строка	 - путь к данным поля Этап
//  ПутьНазначение	 - Строка	 - путь к данным поля Назначение
//
// Возвращаемое значение:
//  Строка - текст для подстановки в запрос
//
Функция ТекстЗапросаПолеЭтапИсточник(ПутьРаспоряжение, ПутьЭтап, ПутьНазначение) Экспорт
	
	ТекстЗапроса =
	"ВЫБОР
	|	КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
	|		ТОГДА
	|			&Этап
	|	КОГДА ВЫРАЗИТЬ(&Распоряжение КАК Документ.ЗаказНаПроизводство2_2) = ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ КАК Документ.ЭтапПроизводства2_2).Распоряжение
	|		ТОГДА
	|			ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ КАК Документ.ЭтапПроизводства2_2)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|КОНЕЦ
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Распоряжение", ПутьРаспоряжение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Этап",         ПутьЭтап);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение",   ПутьНазначение);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = Новый Структура;
	
	Реквизиты    = "ПутьКДанным, РежимИзменения";
	РежимОчищать = РежимИзмененияСвязанногоЗначения.Очищать;
	
#Область ВыходныеИзделия

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = Новый Структура(Реквизиты, "Объект.ВыходныеИзделия.Номенклатура",   РежимОчищать);
	СвязиПараметровВыбора.Характеристика          = Новый Структура(Реквизиты, "Объект.ВыходныеИзделия.Характеристика", РежимОчищать);
	СвязиПараметровВыбора.НачалоПроизводства      = "НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "ПодразделениеДиспетчер";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификацийТЧ.СвязиПараметровВыбора.Вставить("Объект.ВыходныеИзделия.Спецификация", СвязиПараметровВыбора);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = Новый Структура(Реквизиты, "Объект.ПобочныеИзделия.Номенклатура",   РежимОчищать);
	СвязиПараметровВыбора.Характеристика          = Новый Структура(Реквизиты, "Объект.ПобочныеИзделия.Характеристика", РежимОчищать);
	СвязиПараметровВыбора.НачалоПроизводства      = "НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "ПодразделениеДиспетчер";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификацийТЧ.СвязиПараметровВыбора.Вставить("Объект.ПобочныеИзделия.Спецификация", СвязиПараметровВыбора);
	
	ПараметрыВыбораСпецификаций.Вставить("ВыходныеИзделия", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
#Область ОбеспечениеМатериаламиИРаботами

	ПараметрыВыбораСпецификацийТЧ = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	ПараметрыВыбораСпецификацийТЧ.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = Новый Структура(Реквизиты, "Объект.ОбеспечениеМатериаламиИРаботами.Номенклатура", РежимОчищать);
	СвязиПараметровВыбора.Характеристика          = "Объект.ОбеспечениеМатериаламиИРаботами.Характеристика";
	СвязиПараметровВыбора.НачалоПроизводства      = "НачатьНеРанее";
	СвязиПараметровВыбора.ПодразделениеДиспетчер  = "ПодразделениеДиспетчер";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификацийТЧ.СвязиПараметровВыбора.Вставить("Объект.ОбеспечениеМатериаламиИРаботами.Спецификация", СвязиПараметровВыбора);
	
	ПараметрыВыбораСпецификаций.Вставить("ОбеспечениеМатериаламиИРаботами", ПараметрыВыбораСпецификацийТЧ);
	
#КонецОбласти
	
	Возврат ПараметрыВыбораСпецификаций;

КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
//
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("ВыходныеИзделия", Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено = Истина;
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта = 
								?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Валюта"), 
								Объект.Валюта, 
								Справочники.Валюты.ПустаяСсылка());
	
	ПараметрыРаспределенияЗатрат.ДоляСтоимостиДругихДокументовВГруппировке = ДоляСтоимостиОстальныхЭтаповЦепочки(Объект.Ссылка);
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	#Область ОбеспечениеМатериаламиИРаботами
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ОбеспечениеМатериаламиИРаботами.НазначениеОбеспечения");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	Если Не Пользователи.РолиДоступны("ВыборПроизвольныхНазначенийВЭтапеПроизводства") Тогда
		ШаблонНазначения.Ссылка = "&ОтборСсылокВФормеВыбораНазначений";
	КонецЕсли;
	ШаблонНазначения.ИсключатьНазначениеСсылки = Ложь;
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ОбеспечениеМатериаламиИРаботами.НазначениеОбеспечения");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	Если Не Пользователи.РолиДоступны("ВыборПроизвольныхНазначенийВЭтапеПроизводства") Тогда
		ШаблонНазначения.Ссылка = "&ОтборСсылокВФормеВыбораНазначений";
	КонецЕсли;
	ШаблонНазначения.ИсключатьНазначениеСсылки = Ложь;
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ОбеспечениеМатериаламиИРаботами.НазначениеОбеспечения");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	Если Не Пользователи.РолиДоступны("ВыборПроизвольныхНазначенийВЭтапеПроизводства") Тогда
		ШаблонНазначения.Ссылка = "&ОтборСсылокВФормеВыбораНазначений";
	КонецЕсли;
	ШаблонНазначения.ИсключатьНазначениеСсылки = Ложь;
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	
	// Остатки товаров
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.ОбеспечениеМатериаламиИРаботами.НазначениеОбеспечения");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ОбеспечениеМатериаламиИРаботами.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ОбеспечениеМатериаламиИРаботами.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.ОбеспечениеМатериаламиИРаботами.Склад";
	
	#КонецОбласти
	
	// шаблон для выходных изделий по рассчитываемой стоимости
	#Область ВыходныеИзделия
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ВыходныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	//++ Устарело_Переработка24
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ВыходныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	//-- Устарело_Переработка24
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ВыходныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	// Потребности в выпущенной продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ВыходныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.ВыходныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ВыходныеИзделия.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.ВыходныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ВыходныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	#КонецОбласти
	
	// шаблон для побочных изделий по фиксированной стоимости
	#Область ПобочныеИзделия
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ПобочныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	//++ Устарело_Переработка24
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ПобочныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	//-- Устарело_Переработка24
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ПобочныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	// Потребности в выпущенной продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ПобочныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.ПобочныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ПобочныеИзделия.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.ПобочныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.ПобочныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Распоряжение     = "Объект.Распоряжение";
	
	#КонецОбласти
	
	#Область ЭкономияМатериалов
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ЭкономияМатериалов.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ИсключатьНазначениеСсылки = Ложь;
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	
	//++ Устарело_Переработка24
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ЭкономияМатериалов.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ИсключатьНазначениеСсылки = Ложь;
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	//-- Устарело_Переработка24
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.ЭкономияМатериалов.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ИсключатьНазначениеСсылки = Ложь;
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ВсеНазначения", Ложь, "Объект.ЭкономияМатериалов.Назначение");
	
	#КонецОбласти
	
	Возврат МакетФормы;
	
КонецФункции

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура	 - документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  См. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация             = Объект.Организация;
	ПараметрыЗаполнения.Дата                    = Объект.Дата;
	ПараметрыЗаполнения.Склад                   = Неопределено;
	ПараметрыЗаполнения.Договор                 = Неопределено;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	ПараметрыЗаполнения.ВыпускПродукцииИРабот = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Рассчитывает минимальную дату документа, записываемую в реестр документов
//
// Параметры:
//  Объект	 - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура	 - документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Дата - минимальная дата документа.
//
Функция ОсновнаяЗаписьРеестраДокументов(Объект) Экспорт
	
	МаксимальнаяДата = Дата(3999,12,31,23,59,59);
	Результат = МаксимальнаяДата;
	
	СтруктураОтбора = Новый Структура("Отменено", Ложь);
	
	ТаблицаВыходныеИзделия = Объект.ВыходныеИзделия.Выгрузить(СтруктураОтбора, "ДатаПроизводства");
	Для Каждого ТекСтрока Из ТаблицаВыходныеИзделия Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаПроизводства) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.ВыпускПродукции);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	ТаблицаПобочныеИзделия = Объект.ПобочныеИзделия.Выгрузить(СтруктураОтбора, "ДатаПроизводства");
	Для Каждого ТекСтрока Из ТаблицаПобочныеИзделия Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаПроизводства) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.ВыпускПродукции);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	ТаблицаРасходМатериаловИРабот = Объект.РасходМатериаловИРабот.Выгрузить(, "ДатаРасхода");
	Для Каждого ТекСтрока Из ТаблицаРасходМатериаловИРабот Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаРасхода) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаРасхода);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	ТаблицаЭкономияМатериалов = Объект.ЭкономияМатериалов.Выгрузить(, "ДатаОперации");
	Для Каждого ТекСтрока Из ТаблицаЭкономияМатериалов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДатаОперации) Тогда
			Результат = Мин(Результат, ТекСтрока.ДатаОперации);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат = МаксимальнаяДата Тогда
		ОсновнаяЗапись = Новый Структура;
		ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Результат);
		ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов",
			Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства);
		Возврат ОсновнаяЗапись;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОсновнаяЗапись = Новый Структура;
	ОсновнаяЗапись.Вставить("ДатаРеестраДокументов", Объект.Дата);
	ОсновнаяЗапись.Вставить("ОперацияРеестраДокументов", Перечисления.ХозяйственныеОперации.ВыпускПродукции);
	Возврат ОсновнаяЗапись;
	
КонецФункции

// Возвращает параметры выбора статей в документе.
// 
// Возвращаемое значение:
//  Массив, Структура - См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик(Объект) Экспорт
	
	ПараметрыВыбораСтатейИАналитик = Новый Массив;
	
#Область ВыходныеИзделия
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным         = "Объект.ВыходныеИзделия";
	ПараметрыВыбора.Статья              = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи           = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ДоступностьПоОперации = НЕ
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5
			//++ Устарело_Переработка24
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
			//-- Устарело_Переработка24
			Или Ложь);
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	УправлениеПроизводством.ЗаполнитьОтборСтатейРасходов(ПараметрыВыбора.ОтборСтатейРасходов);
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ВыходныеИзделияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ВыходныеИзделияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ВыходныеИзделияАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("Отменено", Ложь);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
#КонецОбласти
	
#Область ПобочныеИзделия
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным         = "Объект.ПобочныеИзделия";
	ПараметрыВыбора.Статья              = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи           = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ДоступностьПоОперации = Истина;
	//++ Устарело_Переработка24
	ПараметрыВыбора.ДоступностьПоОперации =
		Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	//-- Устарело_Переработка24
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	УправлениеПроизводством.ЗаполнитьОтборСтатейРасходов(ПараметрыВыбора.ОтборСтатейРасходов);
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ПобочныеИзделияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ПобочныеИзделияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ПобочныеИзделияАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("Отменено", Ложь);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
#КонецОбласти
	
#Область ЭкономияМатериалов
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным         = "Объект.ЭкономияМатериалов";
	ПараметрыВыбора.Статья              = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи           = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	ПараметрыВыбора.ДоступностьПоОперации = Истина;
	//++ Устарело_Переработка24
	ПараметрыВыбора.ДоступностьПоОперации =
		Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	//-- Устарело_Переработка24
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	УправлениеПроизводством.ЗаполнитьОтборСтатейРасходов(ПараметрыВыбора.ОтборСтатейРасходов);
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ЭкономияМатериаловСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ЭкономияМатериаловАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ЭкономияМатериаловАналитикаАктивовПассивов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
#КонецОбласти
	
	Возврат ПараметрыВыбораСтатейИАналитик;
	
КонецФункции

// Возвращает параметры настройки счетов учета в документе.
//  
// Возвращаемое значение:
//  Массив - см. НастройкаСчетовУчетаСервер.ПараметрыНастройки.
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	ПараметрыНастроек = Новый Массив;
	
	#Область ВыходныеИзделия
	
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ДоступностьПоОперации	= Истина;
	ПараметрыНастройки.ТипСтатьи				= "ТипСтатьи";
	ПараметрыНастройки.ПутьКДанным				= "Объект.ВыходныеИзделия";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("ВыходныеИзделияПредставлениеОтраженияОперации");
	
	ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках.Вставить("СписатьНаРасходы", Истина);
	ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках.Вставить("ПроизводствоНаСтороне", Ложь);
	
	ПараметрыНастройки.СкрыватьНедоступныйСчетУчетаВСтроках = Истина;
	
	ПараметрыНастроек.Добавить(ПараметрыНастройки);
	
	#КонецОбласти
	
	#Область ПобочныеИзделия
	
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ДоступностьПоОперации	= Истина;
	ПараметрыНастройки.ТипСтатьи				= "ТипСтатьи";
	ПараметрыНастройки.ПутьКДанным				= "Объект.ПобочныеИзделия";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("ПобочныеИзделияПредставлениеОтраженияОперации");
	
	ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках.Вставить("СписатьНаРасходы", Истина);
	ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках.Вставить("ПроизводствоНаСтороне", Ложь);
	
	ПараметрыНастройки.СкрыватьНедоступныйСчетУчетаВСтроках = Истина;
	
	ПараметрыНастроек.Добавить(ПараметрыНастройки);
	
	#КонецОбласти
	
	#Область ЭкономияМатериалов
	
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	ПараметрыНастройки.ДоступностьПоОперации	= Истина;
	ПараметрыНастройки.ТипСтатьи				= "ТипСтатьи";
	ПараметрыНастройки.ПутьКДанным				= "Объект.ЭкономияМатериалов";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("ЭкономияМатериаловПредставлениеОтраженияОперации");
	
	ПараметрыНастроек.Добавить(ПараметрыНастройки);
	
	#КонецОбласти
	
	Возврат ПараметрыНастроек;
	
КонецФункции

// Формирует движения этапов по регистру сведений Реестр документов
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - владелец этапов, движения которых будут обновлены
//  Этапы - Массив - ссылки на этапы
//
Процедура ОбновитьРеестрДокументов(Распоряжение, Этапы) Экспорт
	
	ЗаполнитьРеестрДокументовВПакетномРежиме(Распоряжение, Этапы, Истина);
	
КонецПроцедуры

// Проверяет возможность разделить документ на две части.
// 
// Параметры:
// 	Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на документ.
// 	ТекстСообщения - Строка - в переменную помещается описание ошибок (при наличии).
// 
// Возвращаемое значение:
//	Булево - Истина если документ может быть разделен.
// 
Функция МожноРазделитьДокумент(Ссылка, ТекстСообщения) Экспорт
	
	Результат = Истина;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ТипПроизводственногоПроцесса, НомерСледующегоЭтапа, ПроизводствоНаСтороне, ЗаказПереработчику");
	
	Если (Реквизиты.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ Реквизиты.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт)
		И Реквизиты.НомерСледующегоЭтапа = 0 Тогда
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не может быть несколько последних этапов.';
								|en = 'There cannot be more than one last stage.'");
		
	ИначеЕсли Реквизиты.ПроизводствоНаСтороне
		И НЕ Реквизиты.ЗаказПереработчику = Неопределено Тогда
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Для этапа создан заказ переработчику, действие не может быть выполнено.';
								|en = '""Subcontracting purchase order"" is created for the stage, action cannot be completed.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разделяет документ на две части: создает новый документ на заданное количество
// и уменьшает текущий документ на эту же величину.
// Этапы с типом производственного процесса "Без спецификаций" делятся в соотношении 50/50% (параметры
// КоличествоУпаковок и Упаковка в этом случае игнорируются).
// Данные табличных частей пересчитываются по пропорции.
// 
// Параметры:
// 	Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на разделяемый документ.
// 	КоличествоУпаковок - Число - размер нового документа. Количество должно быть меньше размера исходного документа. 
// 	Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения количества.
// 	Отказ - Булево - Истина если разделение не было выполнено из-за ошибок.
//
Процедура РазделитьДокумент(Ссылка, КоличествоУпаковок, Упаковка, Отказ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ДанныеЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Распоряжение,ПартияПроизводства");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", ДанныеЭтапа.Распоряжение);
		ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ДанныеЭтапа.ПартияПроизводства);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		
		ТекстСообщения = "";
		Если НЕ МожноРазделитьДокумент(Ссылка, ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ДанныеЭтапов = ДанныеЭтаповДляИзмененияПартий(Ссылка, Ложь, Истина).ДанныеПересчета;
		Этап = ДанныеЭтапов.Реквизиты[0];
		
		// Расчет коэффициентов (коэффициент 1 - для старого документа, коэффициент 2 - для нового)
		Если Этап.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			Коэффициент1 = 0.5;
			Коэффициент2 = 0.5;
		Иначе
			
			Если Этап.УпаковкаПлан = Упаковка Тогда
				Коэффициент2 = КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
			Иначе
				Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Этап.ПартияПроизводства, "ОсновноеИзделиеНоменклатура");
				КоэффициентНовый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Упаковка, Номенклатура);
				КоэффициентСтарый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Этап.УпаковкаПлан, Номенклатура);
				Коэффициент2 = (КоэффициентНовый / КоэффициентСтарый * КоличествоУпаковок)
					/ Этап.КоличествоУпаковокПлан;
			КонецЕсли;
			
			Если Коэффициент2 = 1 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Количество в новом документе должно отличаться от количества в текущем.';
						|en = 'Quantity in a new document should differ from quantity in the current document.'"),,,, Отказ);
				ОтменитьТранзакцию();
				Возврат;
			ИначеЕсли Коэффициент2 > 1 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Количество в новом документе не может быть больше количества в текущем.';
						|en = 'Quantity in a new document cannot be greater than in the current one.'"),,,, Отказ);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Коэффициент1 = 1 - Коэффициент2;
			
		КонецЕсли;
		
		Параметры = ПересчитатьПоКоэффициентуПараметры();
		Параметры.ИзменятьФакт = Истина;
		
		// Пересчет старого документа
		Параметры.ИзменятьНоменклатуруДеления = Ложь;
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент1, Параметры);
		ПересчитатьДолиСтоимостиПриДеленииДокумента(ЗначенияЗаполнения, Коэффициент1);
		
		РеквизитыШапки = Новый Структура;
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", Окр(Этап.КоличествоУпаковокПлан * Коэффициент1, 3));
		РеквизитыШапки.Вставить("КоличествоУпаковокФакт", Окр(Этап.КоличествоУпаковокФакт * Коэффициент1, 3));
		РеквизитыШапки.Вставить("КоличествоУпаковокОтменено", Окр(Этап.КоличествоУпаковокОтменено * Коэффициент1, 3));
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент1, 3));
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		// Создание нового документа
		Параметры.УдалятьНоменклатуруДеления = Истина;
		Параметры.ОчищатьКлючиСтрок = Истина;
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент2, Параметры);
		ПересчитатьДолиСтоимостиПриДеленииДокумента(ЗначенияЗаполнения, Коэффициент2);
		
		РеквизитыШапки = Новый Структура;
		Для каждого Колонка Из ДанныеЭтапов.Реквизиты.Колонки Цикл
			Если Колонка.Имя = "Ссылка"
				ИЛИ Колонка.Имя = "Назначение"
				ИЛИ Колонка.Имя = "КоличествоУпаковокПлан"
				ИЛИ Колонка.Имя = "УпаковкаПлан"
				ИЛИ Колонка.Имя = "КоэффициентМаршрутнойКарты"
				ИЛИ Колонка.Имя = "Номер"
				ИЛИ Колонка.Имя = "НомерЭтапаВПартииЗапуска" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыШапки.Вставить(Колонка.Имя, Этап[Колонка.Имя]);
		КонецЦикла;
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", КоличествоУпаковок);
		РеквизитыШапки.Вставить("УпаковкаПлан", Упаковка);
		РеквизитыШапки.Вставить("КоличествоУпаковокФакт", Окр(Этап.КоличествоУпаковокФакт * Коэффициент2, 3));
		РеквизитыШапки.Вставить("КоличествоУпаковокОтменено", Окр(Этап.КоличествоУпаковокОтменено * Коэффициент2, 3));
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент2, 3));
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		ЗначенияЗаполнения.Вставить("Последователи",
			ДанныеЭтапов.Последователи.Скопировать(Новый Структура("ТипСвязи", ТипСвязиПоследователь()))
				.ВыгрузитьКолонку("Этап"));
		
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НоваяСсылка = ДокументОбъект.Ссылка;
		
		// Связь с предшественниками
		Предшественники = ПредшественникиВОчередиЭтапов(Ссылка);
		Для каждого Предшественник Из Предшественники Цикл
			
			ДокументОбъект = Предшественник.ПолучитьОбъект(); // ДокументОбъект - 
			ДокументОбъект.Заблокировать();
			
			НоваяСтрока = ДокументОбъект.Последователи.Добавить();
			НоваяСтрока.Этап = НоваяСсылка;
			НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		КонецЦикла;
		
		// Корректировка выпуска под назначение и складских остатков
		ПередатьРезервы(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка),
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоваяСсылка));
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(Этап.Распоряжение);
		РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.ЗапуститьРасчет();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Деление документа';
							|en = 'Document splitting'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(),
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Создает новый этап на восполнение отмененного количества в заданном документе.
// 
// Параметры:
// 	Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - документ-источник данных.
// 	КоличествоУпаковок - Число - размер нового документа.
// 	Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения количества.
// 
// Возвращаемое значение:
// 	Неопределено, ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на созданный документ.
//
Функция СоздатьДокументНаОтмененноеКоличество(Ссылка, КоличествоУпаковок, Упаковка) Экспорт
	
	НоваяСсылка = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДанныеЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Распоряжение,ПартияПроизводства");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", ДанныеЭтапа.Распоряжение);
		ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ДанныеЭтапа.ПартияПроизводства);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		ДанныеЭтапов = ДанныеЭтаповДляИзмененияПартий(Ссылка, Ложь, Истина).ДанныеПересчета;
		
		// Снятие отмены строк
		СтруктураПоискаОтменено = Новый Структура("Отменено", Истина);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("Упаковка");
		СтруктураПоиска.Вставить("ВариантОбеспечения");
		СтруктураПоиска.Вставить("Склад");
		СтруктураПоиска.Вставить("Производится");
		СтруктураПоиска.Вставить("Спецификация");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("СтатьяКалькуляции");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
				ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Упаковка");
		СтруктураПоиска.Вставить("Получатель");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("Произведено");
		СтруктураПоиска.Вставить("СписатьНаРасходы");
		СтруктураПоиска.Вставить("СтатьяРасходов");
		СтруктураПоиска.Вставить("АналитикаРасходов");
		СтруктураПоиска.Вставить("АналитикаАктивовПассивов");
		//++ Устарело_Переработка24
		СтруктураПоиска.Вставить("ОформитьОтчетДавальцу");
		//-- Устарело_Переработка24
		СтруктураПоиска.Вставить("ОбработатьПоСпецификации");
		СтруктураПоиска.Вставить("Спецификация");
		СтруктураПоиска.Вставить("ЭтапПотребитель");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
				НайденныеСтроки[0].ДоляСтоимости = НайденныеСтроки[0].ДоляСтоимости + Строка.ДоляСтоимости;
				ДанныеЭтапов.ВыходныеИзделия.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Упаковка");
		СтруктураПоиска.Вставить("Получатель");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("Произведено");
		СтруктураПоиска.Вставить("Цена");
		СтруктураПоиска.Вставить("СписатьНаРасходы");
		СтруктураПоиска.Вставить("СтатьяРасходов");
		СтруктураПоиска.Вставить("АналитикаРасходов");
		СтруктураПоиска.Вставить("АналитикаАктивовПассивов");
		СтруктураПоиска.Вставить("СтатьяКалькуляции");
		//++ Устарело_Переработка24
		СтруктураПоиска.Вставить("ОформитьОтчетДавальцу");
		//-- Устарело_Переработка24
		СтруктураПоиска.Вставить("ОбработатьПоСпецификации");
		СтруктураПоиска.Вставить("Спецификация");
		СтруктураПоиска.Вставить("ЭтапПотребитель");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.ПобочныеИзделия.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
				НайденныеСтроки[0].Сумма = НайденныеСтроки[0].Сумма + Строка.Сумма;
				ДанныеЭтапов.ПобочныеИзделия.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидРабот");
		СтруктураПоиска.Вставить("СтатьяКалькуляции");
		СтруктураПоиска.Вставить("Исполнитель");
		СтруктураПоиска.Вставить("Выполнено");
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		Для каждого Строка Из ДанныеЭтапов.Трудозатраты.НайтиСтроки(СтруктураПоискаОтменено) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка,, "Отменено");
			НайденныеСтроки = ДанныеЭтапов.Трудозатраты.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.ВГраница() = -1 Тогда
				Строка.Отменено = Ложь;
				Строка.ПричинаОтмены = Неопределено;
			Иначе
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Строка.Количество;
				ДанныеЭтапов.Трудозатраты.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		// Расчет коэффициента
		Этап = ДанныеЭтапов.Реквизиты[0];
		Если Этап.УпаковкаПлан = Упаковка Тогда
			Коэффициент = КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
		Иначе
			Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Этап.ПартияПроизводства, "ОсновноеИзделиеНоменклатура");
			КоэффициентНовый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
				Упаковка, Номенклатура);
			КоэффициентСтарый = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
				Этап.УпаковкаПлан, Номенклатура);
			Коэффициент = (КоэффициентНовый / КоэффициентСтарый * КоличествоУпаковок)
				/ Этап.КоличествоУпаковокПлан;
		КонецЕсли;
		
		// Заполнение долей стоимости в исходном документе
		Если Коэффициент < 1 Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА
				|ИЗ
				|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
				|ГДЕ
				|	ВыходныеИзделия.Ссылка = &Ссылка
				|	И ВыходныеИзделия.ДоляСтоимости = 0
				|	И НЕ ВыходныеИзделия.Отменено");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			 
			Если НЕ Запрос.Выполнить().Пустой() Тогда
			
				ДокументОбъект = Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				
				ПересчитатьДолиСтоимостиПриДеленииДокумента(ДокументОбъект, 1-Коэффициент);
				
				Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				КонецЕсли;
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Создание нового документа
		Параметры = ПересчитатьПоКоэффициентуПараметры();
		Параметры.ИзменятьФакт = Истина;
		Параметры.УдалятьНоменклатуруДеления = Истина;
		Параметры.ОчищатьКлючиСтрок = Истина;
		
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент, Параметры);
		ПересчитатьДолиСтоимостиПриДеленииДокумента(ЗначенияЗаполнения, Коэффициент);
		
		РеквизитыШапки = Новый Структура;
		Для каждого Колонка Из ДанныеЭтапов.Реквизиты.Колонки Цикл
			Если Колонка.Имя = "Ссылка"
				ИЛИ Колонка.Имя = "Назначение"
				ИЛИ Колонка.Имя = "КоличествоУпаковокПлан"
				ИЛИ Колонка.Имя = "УпаковкаПлан"
				ИЛИ Колонка.Имя = "КоэффициентМаршрутнойКарты"
				ИЛИ Колонка.Имя = "Номер"
				ИЛИ Колонка.Имя = "НомерЭтапаВПартииЗапуска" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыШапки.Вставить(Колонка.Имя, Этап[Колонка.Имя]);
		КонецЦикла;
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", КоличествоУпаковок);
		РеквизитыШапки.Вставить("УпаковкаПлан", Упаковка);
		РеквизитыШапки.Вставить("КоличествоУпаковокФакт", 0);
		РеквизитыШапки.Вставить("КоличествоУпаковокОтменено", 0);
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент, 3));
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		ЗначенияЗаполнения.Вставить("Последователи",
			ДанныеЭтапов.Последователи.Скопировать(Новый Структура("ТипСвязи", ТипСвязиПоследователь()))
				.ВыгрузитьКолонку("Этап"));
		
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НоваяСсылка = ДокументОбъект.Ссылка;
		
		// Связь с предшественниками
		Предшественники = ПредшественникиВОчередиЭтапов(Ссылка);
		Для каждого Предшественник Из Предшественники Цикл
			
			ДокументОбъект = Предшественник.ПолучитьОбъект(); // ДокументОбъект.ЭтапПроизводства2_2 - 
			ДокументОбъект.Заблокировать();
			
			НоваяСтрока = ДокументОбъект.Последователи.Добавить();
			НоваяСтрока.Этап = НоваяСсылка;
			НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		КонецЦикла;
		
		РегистрыСведений.ЗаданияКРасчетуНормативногоГрафикаПроизводства.ЗапуститьЗадание(Этап.Распоряжение);
		РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.ЗапуститьРасчет();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Событие = НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Деление документа';
							|en = 'Document splitting'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(Событие,
			Ссылка.Метаданные(),
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат НоваяСсылка;
	
КонецФункции

// Возвращает структуру с наименованием табличных частей документа, хранящих информацию о товарах.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая следующие наименования табличных частей:
//		* ВыходныеИзделия - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о выходных изделиях.
//		* ПобочныеИзделия - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о побочных изделиях.
//		* РасходМатериаловИРабот - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о расходе материалов
//																					и работ.
//		* ОбеспечениеМатериаламиИРаботами - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные об обеспечении
//																							материалами и работами.
//		* ЭкономияМатериалов - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные об экономии материалов.
//		* Трудозатраты - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о трудозатратах.
//	
Функция КоллекцияТабличныхЧастейТоваров() Экспорт
	
	ТаблицыДокумента = Новый Структура;
	ТаблицыДокумента.Вставить("ВыходныеИзделия");
	ТаблицыДокумента.Вставить("ПобочныеИзделия");
	ТаблицыДокумента.Вставить("РасходМатериаловИРабот");
	ТаблицыДокумента.Вставить("ОбеспечениеМатериаламиИРаботами");
	ТаблицыДокумента.Вставить("ЭкономияМатериалов");
	ТаблицыДокумента.Вставить("Трудозатраты");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыВыполненияКомандУстановкиДействий(ВсеЗаказы, КодДействия) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказы", ВсеЗаказы);
	Запрос.УстановитьПараметр("ЭтоРезервироватьПоМереПоступления",
		КодДействия = "ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В(&Заказы)
		|		И Заказы.ПроизводствоНаСтороне
		|		И ЕСТЬNULL(Заказы.ЗаказПереработчику.Проведен, ЛОЖЬ)
		|		И (НЕ Заказы.ДинамическаяСтруктура ИЛИ НЕ &ЭтоРезервироватьПоМереПоступления)
		|;
		|//////////////////////////
		|ВЫБРАТЬ
		|	Заказы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В(&Заказы)
		|		И НЕ (Заказы.ПроизводствоНаСтороне
		|				И ЕСТЬNULL(Заказы.ЗаказПереработчику.Проведен, ЛОЖЬ))
		|		И (НЕ Заказы.ДинамическаяСтруктура ИЛИ НЕ &ЭтоРезервироватьПоМереПоступления)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Результаты = Новый Массив();
	ДополнительныеПараметры = Новый Структура("ВернутьПараметрыПроизводствоНаСтороне", Истина);
	Результат = Новый Структура("Заказы,ПараметрыВстраивания",
		РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"),
		Документы.ЭтапПроизводства2_2.ДоступныеОстаткиПараметрыВстраивания(Неопределено, ДополнительныеПараметры));
	Результаты.Добавить(Результат);
	ДополнительныеПараметры.ВернутьПараметрыПроизводствоНаСтороне = Ложь;
	Результат = Новый Структура("Заказы,ПараметрыВстраивания",
		РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"),
		Документы.ЭтапПроизводства2_2.ДоступныеОстаткиПараметрыВстраивания(Неопределено, ДополнительныеПараметры));
	Результаты.Добавить(Результат);
	
	ТекстыЗапроса = Новый Массив();
	Если КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ" Или КодДействия = "ДЕЙСТВИЕ_ОТГРУЗИТЬ_ПРИОРИТЕТНО_ОБОСОБЛЕННО" Тогда
		
		Для Каждого ТекущиеПараметры Из Результаты Цикл
			
			Заказы = ТекущиеПараметры.Заказы;
			ПараметрыВстраивания = ТекущиеПараметры.ПараметрыВстраивания;
			
			Если Заказы.Количество() > 0 Тогда
				
				Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА КАК НуженВопрос
					|ИЗ
					|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
					|		Заказ В(
					|			ВЫБРАТЬ
					|				Таблица.Ссылка КАК Заказ
					|			ИЗ
					|				&ТаблицаПереопределяемый КАК Таблица
					|			ГДЕ
					|				Таблица.Ссылка В(&Заказы)
					|				И Таблица.Проведен
					|				И &УсловиеПереопределяемый <> НЕОПРЕДЕЛЕНО
					|				И &УсловиеПереопределяемый < &ДатаОтгрузкиНовыхСтрок)) КАК Потребности
					|ГДЕ
					|	Потребности.РезервироватьНаСкладеОстаток > 0
					|		ИЛИ Потребности.РезервироватьПоМереПоступленияОстаток > 0
					|		ИЛИ Потребности.ОтложитьРезервированиеОстаток > 0
					|		ИЛИ Потребности.КОбеспечениюОстаток > 0
					|		ИЛИ Потребности.НеОбеспечиватьОстаток > 0
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА КАК НуженВопрос
					|ИЗ
					|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
					|		Заказ В(
					|			ВЫБРАТЬ
					|				Таблица.ЗаказПереработчику КАК Заказ
					|			ИЗ
					|				&ТаблицаПереопределяемый КАК Таблица
					|			ГДЕ
					|				Таблица.Ссылка В(&Заказы)
					|				И Таблица.Проведен
					|
					// такие заказы исключаются из обработки
					|		И НЕ Таблица.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
					|		И &УсловиеПереопределяемый <> НЕОПРЕДЕЛЕНО
					|		И &УсловиеПереопределяемый < &ДатаОтгрузкиНовыхСтрок)) КАК Потребности
					|ГДЕ
					|	Потребности.РезервироватьНаСкладеОстаток > 0
					|		ИЛИ Потребности.РезервироватьПоМереПоступленияОстаток > 0
					|		ИЛИ Потребности.ОтложитьРезервированиеОстаток > 0
					|		ИЛИ Потребности.КОбеспечениюОстаток > 0
					|		ИЛИ Потребности.НеОбеспечиватьОстаток > 0";
				Текст = СтрЗаменить(Текст, "&ТаблицаПереопределяемый", ПараметрыВстраивания.ИмяОбъекта);
				Текст = СтрЗаменить(Текст, "&УсловиеПереопределяемый",
					ПараметрыВстраивания.ВыражениеДляВопросаПриВыполненииДействияВСпискеЗаказов);
				ТекстыЗапроса.Добавить(Текст);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("НуженВопрос", Ложь);
	Результат.Вставить("ДатаОтгрузкиНовыхСтрок", Неопределено);
	Результат.Вставить("ПараметрыВыполнения", Результаты);
	Результат.Вставить("КодДействия", КодДействия);
	Результат.Вставить("СнятьФлагОтгружатьОднойДатой", Ложь);
	Результат.Вставить("ЗаполнитьДатуОтгрузкиОднойДатой", Истина);
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ДатаОтгрузкиНовыхСтрок = НачалоДня(ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ДатаОтгрузкиНовыхСтрок", ДатаОтгрузкиНовыхСтрок);
		Запрос.УстановитьПараметр("Заказы", ВсеЗаказы);
		
		Результат.НуженВопрос = Не Запрос.Выполнить().Пустой();
		Результат.ДатаОтгрузкиНовыхСтрок = ДатаОтгрузкиНовыхСтрок;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Объект - ДокументОбъект
// 	Изменения - ТаблицаЗначений
// 	Режим - Строка
// 	ПараметрыЗаполнения - Структура
// 	Параметры - см. УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса
// Возвращаемое значение:
// 	Строка - Описание
Функция ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения, Параметры) Экспорт
	
	ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузки(
		ПараметрыЗаполнения,
		Объект.НеОтгружатьЧастями,
		Объект.ДатаОтгрузки,
		Объект.ОбеспечениеМатериаламиИРаботами,
		"ДатаОтгрузки");
		
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		ОбеспечениеВДокументахСервер.ПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(
			Изменения.ВыгрузитьКолонку("Строка"),
			"ДатаОтгрузки",
			Объект.НеОтгружатьЧастями,
			Объект.ДатаОтгрузки);
			
	КонецЕсли;
		
	СтруктураДействий = Новый Структура("ЗаполнитьНазначениеВЭтапеПроизводства");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);
	
	ИзмененныеРеквизиты = "";
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		НовыйСтатус = Неопределено;
		// Учет ограничений указания вариантов обеспечения в этапе - если есть отгрузить, то меняется статус документа.
		Если Изменения.Количество() > 0
				И Изменения.Найти(Перечисления.ВариантыОбеспечения.Отгрузить, "ВариантОбеспечения") <> Неопределено Тогда
			Если Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется
					ИЛИ Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован
					ИЛИ Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению Тогда
				НовыйСтатус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
			КонецЕсли;
		// Учет ограничений указания вариантов обеспечения в этапе - если есть Резервировать, то меняется статус документа.
		ИначеЕсли Изменения.Количество() > 0
				И (Изменения.Найти(Перечисления.ВариантыОбеспечения.СоСклада, "ВариантОбеспечения") <> Неопределено
					Или Изменения.Найти(Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления, "ВариантОбеспечения") <> Неопределено) Тогда
			Если Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
				НовыйСтатус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НовыйСтатус <> Неопределено Тогда
			СтатусДоИзменения = Объект.Статус;
			Объект.Статус = НовыйСтатус;
			ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
				Объект,
				СтатусДоИзменения,
				Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		Объект,
		ПараметрыУказанияСерий(Объект).ОбеспечениеМатериаламиИРаботами);
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

Функция НоменклатураДеления(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбеспечениеМатериаламиИРаботами.Номенклатура КАК Номенклатура,
		|	ОбеспечениеМатериаламиИРаботами.Характеристика КАК Характеристика,
		|	ОбеспечениеМатериаламиИРаботами.Склад КАК Склад,
		|	ОбеспечениеМатериаламиИРаботами.Назначение КАК Назначение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
		|ГДЕ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка = &Ссылка
		|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
		|		ГДЕ
		|			ВыходныеИзделия.Ссылка В (
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					РеквизитыДеления.Предшественник
		|				ИЗ
		|					РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
		|				ГДЕ
		|					РеквизитыДеления.Этап = ОбеспечениеМатериаламиИРаботами.Ссылка)
		|			И ВыходныеИзделия.Номенклатура = ОбеспечениеМатериаламиИРаботами.Номенклатура
		|			И ВыходныеИзделия.Характеристика = ОбеспечениеМатериаламиИРаботами.Характеристика
		|			И (ВыходныеИзделия.Получатель = ОбеспечениеМатериаламиИРаботами.Склад
		|				ИЛИ ВыходныеИзделия.Получатель = ОбеспечениеМатериаламиИРаботами.Подразделение)
		|			И ВыходныеИзделия.Назначение = ОбеспечениеМатериаламиИРаботами.Назначение
		|		)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика КАК Характеристика,
		|	ВыходныеИзделия.Получатель КАК Получатель,
		|	ВыходныеИзделия.Назначение КАК Назначение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Ссылка
		|	И НЕ ВыходныеИзделия.Отменено
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
		|		ГДЕ
		|			ОбеспечениеМатериаламиИРаботами.Ссылка В (
		|				ВЫБРАТЬ
		|					РеквизитыДеления.Этап
		|				ИЗ
		|					РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
		|				ГДЕ
		|					РеквизитыДеления.Предшественник = ВыходныеИзделия.Ссылка)
		|			И ОбеспечениеМатериаламиИРаботами.Номенклатура = ВыходныеИзделия.Номенклатура
		|			И ОбеспечениеМатериаламиИРаботами.Характеристика = ВыходныеИзделия.Характеристика
		|			И (ОбеспечениеМатериаламиИРаботами.Склад = ВыходныеИзделия.Получатель
		|				ИЛИ ОбеспечениеМатериаламиИРаботами.Подразделение = ВыходныеИзделия.Получатель)
		|			И ОбеспечениеМатериаламиИРаботами.Назначение = ВыходныеИзделия.Назначение
		|		)
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Обеспечение = МассивРезультатов[0].Выгрузить();
	Обеспечение.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение");
	
	Изделия = МассивРезультатов[1].Выгрузить();
	Изделия.Индексы.Добавить("Номенклатура, Характеристика, Получатель, Назначение");
	
	Возврат Новый Структура("Обеспечение, Изделия", Обеспечение, Изделия);

КонецФункции

#Область Аналоги

// Формирует параметры выбора аналогов
//
// Параметры:
//  Объект - ФормаКлиентскогоПриложения, ДокументОбъект.ЭтапПроизводства2_2 - форма или объект документа
//                                                                            этап производства.
//  ИмяТаблицы - Строка - имя обрабатываемой таблицы
//  Режим - Число - 0 - показать аналоги,
//                  1 - подобрать аналоги,
//                  2 - заменить аналогами.
//  ДополнительныеПараметры - Структура - с ключами:
//                             * ДатаДействияРазрешений - Дата, Неопределено -
//                             * ДоступныеОстаткиПараметрыВстраивания -см. ДоступныеОстаткиПараметрыВстраивания
//
// Возвращаемое значение:
//  см. АналогиМатериалов.ПараметрыВыбораАналогов
//
Функция ПараметрыВыбораАналогов(Объект, ИмяТаблицы, Режим, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		
		ДанныеФормы = Новый Структура;
		ДанныеФормы.Вставить("Объект",                  Объект);
		ДанныеФормы.Вставить("УникальныйИдентификатор", Объект.УникальныйИдентификатор);
		ДанныеФормы.Вставить("Модифицированность",      Истина);
		
		ДанныеФормы.Вставить(
			"ДанныеПартииПроизводства",
			Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(
				Объект.Распоряжение,
				Объект.НазначениеПродукция,
				Объект.ПартияПроизводства));
		
		ДанныеФормы.Вставить(
			"ДоступныеОстаткиПараметрыВстраивания",
			ДополнительныеПараметры.ДоступныеОстаткиПараметрыВстраивания);
		
		ДополнительныеПараметрыАналогиМатериалов = АналогиМатериалов.ДополнительныеПараметры();
		ДополнительныеПараметрыАналогиМатериалов.ВызовИзФормы = Ложь;
		
	Иначе
		
		ДанныеФормы = Объект;
		
		ДополнительныеПараметрыАналогиМатериалов = Неопределено;
		
	КонецЕсли;
	
	ДанныеОбъекта = ДанныеФормы.Объект;
	ДанныеПартииПроизводства = ДанныеФормы.ДанныеПартииПроизводства;
	
	ТипИсточника = Новый ОписаниеТипов("УникальныйИдентификатор");
	ПараметрыФормы = АналогиМатериалов.ПараметрыВыбораАналогов(ТипИсточника);
	
	// ПараметрыОбщие
	ПараметрыФормы.ПараметрыОбщие.ПоказатьОстатки = Истина;
	
	// ПараметрыТоваров
	СтруктураПолей = АналогиМатериалов.СтруктураПолейТаблицыДляЗаменыНаАналоги();
	СтруктураПолей.ДополнительныеПоля.Вставить("Ссылка", ТипИсточника);
	СтруктураПолей.ПодменяемыеПоля.Вставить("Ссылка", "КлючСвязиНабор");
	
	ДанныеТоваров = АналогиМатериалов.ПолучитьДанныеТоваров(
		ДанныеФормы, "Объект", ИмяТаблицы, Режим, Истина, СтруктураПолей, ДополнительныеПараметрыАналогиМатериалов);
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы.ПараметрыТоваров, ДанныеТоваров);
	
	// ПараметрыАналогов
	ТаблицаПараметров = ПараметрыФормы.ПараметрыАналогов.ТаблицаПараметров;
	
	ДатаДействияРазрешений = Неопределено;
	Если Не ДополнительныеПараметры.Свойство("ДатаДействияРазрешений", ДатаДействияРазрешений)
	 Или Не ЗначениеЗаполнено(ДатаДействияРазрешений) Тогда
		ДатаДействияРазрешений = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПараметров.Добавить();
	СтрокаТаблицы.ДатаДействияРазрешений  = ДатаДействияРазрешений;
	СтрокаТаблицы.Ссылка                  = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	СтрокаТаблицы.Подразделение           = ДанныеОбъекта.Подразделение;
	СтрокаТаблицы.НаправлениеДеятельности = ДанныеОбъекта.НаправлениеДеятельности;
	СтрокаТаблицы.ЗаказНаПроизводство     = ДанныеПартииПроизводства.Распоряжение;
	СтрокаТаблицы.Спецификация            = ДанныеПартииПроизводства.Спецификация;
	СтрокаТаблицы.Этап                    = ДанныеОбъекта.Этап;
	СтрокаТаблицы.Изделие                 = ДанныеПартииПроизводства.Номенклатура;
	СтрокаТаблицы.ХарактеристикаИзделия   = ДанныеПартииПроизводства.Характеристика;
	
	Для каждого Строка Из ДанныеОбъекта.НаборыМатериаловИРабот Цикл
		
		СтрокаТаблицы = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТаблицаПараметров[0]);
		СтрокаТаблицы.Ссылка = Строка.КлючСвязи;
		
		СтрокаТаблицы.Спецификация = ?(ТипЗнч(Строка.Спецификация) = Тип("СправочникСсылка.РесурсныеСпецификации"),
										Строка.Спецификация,
										Строка.СпецификацияРодитель);
		
	КонецЦикла;
	
	ПараметрыФормы.ПараметрыАналогов.ТаблицаПараметров = ПоместитьВоВременноеХранилище(
															ТаблицаПараметров,
															ДанныеФормы.УникальныйИдентификатор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Выполняет замену на аналоги
//
// Параметры:
//  Объект                  - см. ПараметрыВыбораАналогов.Объект
//  ИмяТаблицы              - см. ПараметрыВыбораАналогов.ИмяТаблицы
//  АдресВХранилище         - см. АналогиМатериалов.ВыполнитьЗаменуНаАналоги.АдресВХранилище
//  КодДействияАналоги      - см. АналогиМатериалов.ВыполнитьЗаменуНаАналоги.КодДействияАналоги
//  ДополнительныеПараметры - см. ПараметрыВыбораАналогов.ДополнительныеПараметры
//
// Возвращаемое значение:
//  см. АналогиМатериалов.ВыполнитьЗаменуНаАналоги
//
Функция ЗаменитьНаАналоги(
			Объект,
			ИмяТаблицы,
			АдресВХранилище = Неопределено,
			КодДействияАналоги = "ДЕЙСТВИЕ_АНАЛОГИ_РЕЗЕРВИРОВАТЬ",
			ДополнительныеПараметры = Неопределено) Экспорт
	
	ДополнительныеПоля = "СтатьяКалькуляции, ДатаОтгрузки";
	
	ДанныеОбъекта = ?(ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2"), Объект, Объект.Объект);
	
	Если АдресВХранилище = Неопределено Тогда
		
		Результат = АналогиМатериалов.ВыполнитьЗаменуНаАналогиАвтоматически(
						ДанныеОбъекта[ИмяТаблицы],
						ПараметрыВыбораАналогов(Объект, ИмяТаблицы, 2, ДополнительныеПараметры),
						ДополнительныеПоля,
						КодДействияАналоги);
		
	Иначе
		
		Результат = АналогиМатериалов.ВыполнитьЗаменуНаАналоги(
						ДанныеОбъекта[ИмяТаблицы],
						АдресВХранилище,
						ДополнительныеПоля,
						КодДействияАналоги);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет необходимы реквизиты в измененных и новых строках после замены на аналогов
//
// Параметры:
//  Объект              - см. ПараметрыВыбораАналогов.Объект
//  ИмяТаблицы          - см. ПараметрыВыбораАналогов.ИмяТаблицы
//  РезультатЗамены     - см. ЗаменитьНаАналоги
//  СтруктураДействий   - Структура, Неопределено       - если передано структура, тогда в эту структуру добавляются
//                                                        структуры действия над новыми строками (используется в форме
//                                                        документа этап производства).
//                                                        По умолчанию Неопределено.
//  ИдентификаторыСтрок - Массив из Число, Неопределено - если передано массив, тогда в этот массив добавляются
//                                                        идентификаторы измененных и новых строк.
//                                                        По умолчанию Неопределено.
//
Процедура ПослеЗаменыНаАналоги(
			Объект,
			ИмяТаблицы,
			РезультатЗамены,
			СтруктураДействий = Неопределено,
			ИдентификаторыСтрок = Неопределено) Экспорт
	
	ИндексыИзмененныхСтрок = РезультатЗамены.ИндексыИзмененныхСтрок;
	ИндексыНовыхСтрок      = РезультатЗамены.ИндексыНовыхСтрок;
	
	КоличествоИзмененныхСтрок    = ИндексыИзмененныхСтрок.Количество();
	КоличествоНовыхСтрок         = ИндексыНовыхСтрок.Количество();
	КоличествоПроизведенныхЗамен = КоличествоИзмененныхСтрок + КоличествоНовыхСтрок; 
	
	Если КоличествоПроизведенныхЗамен = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		
		РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Объект.Распоряжение,
									"НачатьНеРанее, Подразделение");
		
		ДанныеФормы = Новый Структура;
		ДанныеФормы.Вставить("Объект", Объект);
		ДанныеФормы.Вставить("ОтражениеВыполненного", Ложь);
		
		ДанныеФормы.Вставить(
			"ПараметрыРедактированияЭтапа",
			Новый ФиксированнаяСтруктура(Документы.ЭтапПроизводства2_2.ПараметрыРедактированияЭтапа()));
		
		ДанныеФормы.Вставить(
			"ПараметрыУказанияСерий",
			Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
											Объект, 
											Документы.ЭтапПроизводства2_2)));
		
		ДанныеФормы.Вставить(
			"ПараметрыВыбораСпецификаций",
			УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЭтапПроизводства2_2));
		ДанныеФормы.Вставить("НачатьНеРанее", РеквизитыРаспоряжения.НачатьНеРанее);
		ДанныеФормы.Вставить("ПодразделениеДиспетчер", РеквизитыРаспоряжения.Подразделение);
		
		ДанныеФормы.Вставить(
			"ПараметрыЗаполненияНазначений",
			ОбеспечениеПроизводства.ПараметрыДействияЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(
				Объект,
				Объект.ВыходныеИзделия));
		
		ДанныеОбъекта = Объект;
		
		ВызовДляФормы = Ложь;
		
	Иначе
		
		ДанныеФормы = Объект;
		ДанныеОбъекта = ДанныеФормы.Объект;
		
		ВызовДляФормы = Истина;
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	Если КоличествоИзмененныхСтрок > 0 Тогда
		
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоЕдиниц",
			ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		Для каждого ИндексСтроки Из ИндексыИзмененныхСтрок Цикл
			
			СтрокаТЧ = ДанныеОбъекта[ИмяТаблицы][ИндексСтроки];
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
			Если ИдентификаторыСтрок <> Неопределено Тогда
				ИдентификаторыСтрок.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоличествоНовыхСтрок > 0 Тогда
		
		ТекущиееПодразделение = ДанныеОбъекта.Подразделение;
		
		ДатаОтгрузки = ?(ДанныеОбъекта.НеОтгружатьЧастями, ДанныеОбъекта.ДатаОтгрузки, Неопределено);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		ВариантОбеспеченияОтгрузить = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		СтруктураДействий.Очистить();
		
		Для каждого ИндексСтроки Из ИндексыНовыхСтрок Цикл
			
			СтрокаТЧ = ДанныеОбъекта[ИмяТаблицы][ИндексСтроки];
			СтрокаТЧ.Подразделение = ТекущиееПодразделение;
			
			ДополнительныеПараметры = Неопределено;
			
			УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатурыОбеспечениеМатериаламиИРаботамиВЭтапеПроизводства(
				СтрокаТЧ,
				ДанныеФормы,
				ДанныеОбъекта,
				СтруктураДействий,
				ДополнительныеПараметры);
			
			УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				СтрокаТЧ, 
				ИмяТаблицы, 
				ДанныеФормы,
				ДанныеОбъекта,
				СтруктураДействий,
				ДополнительныеПараметры,
				ВызовДляФормы);
			
			ЗаполнитьЗначенияСвойств(
				СтруктураДействий.ПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства,
				СтрокаТЧ,
				"ВариантОбеспечения, Обособленно");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
			Если ДатаОтгрузки <> Неопределено Тогда
				
				СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
				
			ИначеЕсли СтрокаТЧ.ВариантОбеспечения = ВариантОбеспеченияОтгрузить Тогда
				
				СтрокаТЧ.ДатаОтгрузки = ТекущаяДатаСеанса;
				
			КонецЕсли;
			
			Если ИдентификаторыСтрок <> Неопределено Тогда
				ИдентификаторыСтрок.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.ОбновитьТаблицуНаборыМатериаловИРабот(ДанныеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

Функция ПараметрыПроверкиРеквизитов(ИмяПоля = "", ИмяПоляПроверки = "")

	Возврат Новый Структура("ИмяПоля,ИмяПоляПроверки,ШаблонСообщения", ИмяПоля, ИмяПоляПроверки, "");

КонецФункции

Процедура СообщитьОбОшибкахЗаполнения(Объект, Выборка, СписокРеквизитов, ИмяТЧ = "", Отказ = Ложь) Экспорт
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("Структура")
		И Объект.Свойство("ЗаказПереработчику") Тогда
		МетаданныеОбъекта = Метаданные.Документы.ЭтапПроизводства2_2;
		КлючДанных = Неопределено;
		ПутьКДанным = "Объект";
	ИначеЕсли Не ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		МетаданныеОбъекта = Объект.Метаданные();
		КлючДанных = Неопределено;
		ПутьКДанным = Объект.ПутьКДаннымРеквизитаФормыРедактирования();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
		КлючДанных = Объект;
		ПутьКДанным = "";
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Для каждого ПараметрыПроверки Из СписокРеквизитов Цикл
			Если Выборка[ПараметрыПроверки.ИмяПоляПроверки] <> Истина Тогда
				Продолжить;
			КонецЕсли;
			Если ИмяТЧ <> "" Тогда // проверка табличной части
				ИмяСписка = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
				Если ЗначениеЗаполнено(ПараметрыПроверки.ШаблонСообщения) Тогда
					Шаблон = ПараметрыПроверки.ШаблонСообщения;
					Текст = СтрШаблон(Шаблон, Формат(Выборка.НомерСтроки, "ЧГ="), ИмяСписка);
				Иначе
					Синоним = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ПараметрыПроверки.ИмяПоля].Синоним;
					Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", Синоним, Формат(Выборка.НомерСтроки, "ЧГ="), ИмяСписка);
				КонецЕсли;
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ПараметрыПроверки.ИмяПоля);
				ОбщегоНазначения.СообщитьПользователю(Текст, КлючДанных, Поле, ПутьКДанным, Отказ);
			Иначе
				Если ЗначениеЗаполнено(ПараметрыПроверки.ШаблонСообщения) Тогда
					Текст = ПараметрыПроверки.ШаблонСообщения;
				Иначе
					Синоним = МетаданныеОбъекта.Реквизиты[ПараметрыПроверки.ИмяПоля].Синоним;
					Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", Синоним);
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(Текст, КлючДанных, ПараметрыПроверки.ИмяПоля, ПутьКДанным, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыШапки(Объект, МенеджерВременныхТаблиц, Отказ)
	
	СписокРеквизитов = Новый Массив;
	
#Область ВнутренняяПереработка
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ОрганизацияДавалец", "ОрганизацияДавалецНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ОрганизацияДавалец", "ОрганизацияДавалецСовпадаетСПереработчиком");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Организация-давалец совпадает с организацией-переработчиком.';
											|en = 'Material provider company and the subcontractor company are the same.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ОрганизацияДавалец", "ОрганизацияДавалецСвязанаСПереработчиком");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Организация-давалец не должна быть взаимосвязана с организацией-переработчиком по организационной структуре.';
											|en = 'Material provider company must not be interrelated to the subcontractor company by the organizational structure.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ОрганизацияДавалец", "ВалютыРеглДолжныСовпадать");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Валюты регламентированного учета организации-переработчика и организации-давальца должны совпадать.';
											|en = 'Local accounting currencies of the subcontractor company and the material provider company must be the same.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ОрганизацияДавалец", "СтраныРегистрацииДолжныСовпадать");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Страны регистрации организации-переработчика и организации-давальца должны совпадать.';
											|en = 'Countries of residence of the subcontractor company and the material provider company must be the same.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
#КонецОбласти
	
#Область ПроизводствоНаСтороне
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ЗаказПереработчику", "ЗаказПереработчикуНеОформлен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Проведение документа со статусом ""Начат"" или ""Завершен"" доступно только при наличии заказа переработчику.';
											|en = 'You can post a document with the Started or Completed status only if there is a ""Subcontracting purchase order"".'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ЗаказПереработчику", "ЗаказПереработчикуОформлен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Проведение документа со статусом ""Формируется"" или ""Сформирован"" доступно только при отсутствии заказа переработчику.';
											|en = 'You can post a document with the Being generated or Generated status only if a ""Subcontracting purchase order"" is missing.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти

#Область ДатаПроизводства
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть меньше даты начала этапа.';
											|en = 'Production date cannot be less than the stage start date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть больше даты выполнения этапа.';
											|en = 'Production date cannot be greater than the stage fulfillment date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ДатаОтгрузки
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаОтгрузки", "ДатаОтгрузки");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ДатаРасхода
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасхода");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть меньше даты начала этапа.';
											|en = 'Consumption date cannot be less than the stage start date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть больше даты выполнения этапа.';
											|en = 'Consumption date cannot be greater than the stage fulfillment date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ДатаВыполненияРабот
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполненияРабот", "ДатаВыполненияРабот");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работ не может быть меньше даты начала этапа.';
											|en = 'Work execution date cannot be less than the stage start date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работ не может быть больше даты выполнения этапа.';
											|en = 'Work execution date cannot be greater than the stage fulfillment date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ФактическоеНачалоЭтапа
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ФактическоеНачалоЭтапа", "ФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Поле ""Дата начала выполнения этапа"" не заполнена.';
											|en = '""Date of production stage start"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
#КонецОбласти
	
#Область ФактическоеОкончаниеЭтапа

	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ФактическоеОкончаниеЭтапа", "ФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Поле ""Дата завершения выполнения этапа"" не заполнена.';
											|en = '""Date of production stage end"" field is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ФактическоеОкончаниеЭтапа", "ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата начала выполнения этапа не может быть больше даты завершения этапа.';
											|en = 'Stage start date cannot be greater than the stage end date.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
#КонецОбласти
	
	ТекстЗапроса = ТекстЗапросаКоличествоСтрокВТЧДляПроверкиЗаполнения(МенеджерВременныхТаблиц) + 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ЗаказПереработчикуНеОформлен КАК ЗаказПереработчикуНеОформлен,
	|	ВложенныйЗапрос.ЗаказПереработчикуОформлен КАК ЗаказПереработчикуОформлен,
	|	ВложенныйЗапрос.ДатаПроизводстваНеЗаполнена КАК ДатаПроизводстваНеЗаполнена,
	|	ВложенныйЗапрос.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВложенныйЗапрос.ДатаРасхода КАК ДатаРасхода,
	|	ВложенныйЗапрос.ДатаВыполненияРабот КАК ДатаВыполненияРабот,
	|	ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа	КАК ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа КАК ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,	
	|	ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.ФактическоеНачалоЭтапа КАК ФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ФактическоеОкончаниеЭтапа КАК ФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа КАК ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ОрганизацияДавалецНеЗаполнена КАК ОрганизацияДавалецНеЗаполнена,
	|	ВложенныйЗапрос.ОрганизацияДавалецСовпадаетСПереработчиком КАК ОрганизацияДавалецСовпадаетСПереработчиком,
	|	ВложенныйЗапрос.ОрганизацияДавалецСвязанаСПереработчиком КАК ОрганизацияДавалецСвязанаСПереработчиком,
	|	ВложенныйЗапрос.ВалютыРеглДолжныСовпадать КАК ВалютыРеглДолжныСовпадать,
	|	ВложенныйЗапрос.СтраныРегистрацииДолжныСовпадать КАК СтраныРегистрацииДолжныСовпадать
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ФактическоеНачалоЭтапа = ДАТАВРЕМЯ(1,1,1)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ФактическоеОкончаниеЭтапа = ДАТАВРЕМЯ(1,1,1)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ФактическоеНачалоЭтапа > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И РеквизитыЭтапов.ФактическоеОкончаниеЭтапа <> ДАТАВРЕМЯ(1,1,1)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И РеквизитыЭтапов.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|					И (РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|						ИЛИ РеквизитыЭтапов.ПроизводствоНаСтороне
	|							И ЕСТЬNULL(РеквизитыЗаказовПереработчику.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.ПустаяСсылка)) В (
	|										ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|										ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|							И ЕСТЬNULL(РеквизитыЗаказовПереработчику.Проведен, ЛОЖЬ)
	|					)
	|					И (КоличествоСтрок.ВыходныеИзделия > 0 ИЛИ КоличествоСтрок.ПобочныеИзделия > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваНеЗаполнена,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И РеквизитыЭтапов.ДатаПроизводства < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И (КоличествоСтрок.ВыходныеИзделияПроизведено > 0 ИЛИ КоличествоСтрок.ПобочныеИзделияПроизведено > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоОднойДатой 
	|					И РеквизитыЭтапов.ДатаПроизводства > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И (КоличествоСтрок.ВыходныеИзделияПроизведено > 0 ИЛИ КоличествоСтрок.ПобочныеИзделияПроизведено > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.НеОтгружатьЧастями
	|					И РеквизитыЭтапов.ДатаОтгрузки = ДАТАВРЕМЯ(1,1,1)
	|					И КоличествоСтрок.ДатаОтгрузкиОбязательна
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.РасходОднойДатой
	|					И РеквизитыЭтапов.ДатаРасхода = ДАТАВРЕМЯ(1,1,1)
	|					И (КоличествоСтрок.Расход > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасхода,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.РасходОднойДатой
	|					И РеквизитыЭтапов.ДатаРасхода < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И (КоличествоСтрок.Расход > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.РасходОднойДатой
	|					И РеквизитыЭтапов.ДатаРасхода > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И (КоличествоСтрок.Расход > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВыполнениеРаботОднойДатой
	|					И РеквизитыЭтапов.ДатаВыполненияРабот = ДАТАВРЕМЯ(1,1,1)
	|					И (КоличествоСтрок.Трудозатраты > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияРабот,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВыполнениеРаботОднойДатой
	|					И РеквизитыЭтапов.ДатаВыполненияРабот < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И (КоличествоСтрок.Трудозатраты > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВыполнениеРаботОднойДатой
	|					И РеквизитыЭтапов.ДатаВыполненияРабот > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И (КоличествоСтрок.Трудозатраты > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
	|					И (РеквизитыЭтапов.Статус В (
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЗаказПереработчикуНеОформлен,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И НЕ РеквизитыЭтапов.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
	|					И (РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЗаказПереработчикуОформлен,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВнутренняяПереработка
	|				И РеквизитыЭтапов.ОрганизацияДавалец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОрганизацияДавалецНеЗаполнена,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВнутренняяПереработка
	|				И НЕ РеквизитыЭтапов.ОрганизацияДавалец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И РеквизитыЭтапов.ОрганизацияДавалец = РеквизитыЭтапов.Организация
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОрганизацияДавалецСовпадаетСПереработчиком,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВнутренняяПереработка
	|				И НЕ РеквизитыЭтапов.ОрганизацияДавалец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И ВТВзаимосвязанныеОрганизации.Организация1 ЕСТЬ НЕ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ОрганизацияДавалецСвязанаСПереработчиком,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВнутренняяПереработка
	|				И НЕ РеквизитыЭтапов.ОрганизацияДавалец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И НЕ РеквизитыЭтапов.ОрганизацияДавалец.ВалютаРегламентированногоУчета = РеквизитыЭтапов.Организация.ВалютаРегламентированногоУчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВалютыРеглДолжныСовпадать,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ВнутренняяПереработка
	|				И НЕ РеквизитыЭтапов.ОрганизацияДавалец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И НЕ РеквизитыЭтапов.ОрганизацияДавалец.СтранаРегистрации = РеквизитыЭтапов.Организация.СтранаРегистрации
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтраныРегистрацииДолжныСовпадать
	|	ИЗ
	|		РеквизитыЭтапов КАК РеквизитыЭтапов
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтрокВТЧ КАК КоличествоСтрок
	|		ПО РеквизитыЭтапов.Ссылка = КоличествоСтрок.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЗаказовПереработчику КАК РеквизитыЗаказовПереработчику
	|		ПО РеквизитыЗаказовПереработчику.ЗаказПереработчику = РеквизитыЭтапов.ЗаказПереработчику
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзаимосвязанныеОрганизации КАК ВТВзаимосвязанныеОрганизации
	|		ПО ВтВзаимосвязанныеОрганизации.Организация1 = РеквизитыЭтапов.ОрганизацияДавалец
	|		И ВтВзаимосвязанныеОрганизации.Организация2 = РеквизитыЭтапов.Организация
	|
	|) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.ЗаказПереработчикуНеОформлен
	|		ИЛИ ВложенныйЗапрос.ЗаказПереработчикуОформлен
	|		ИЛИ ВложенныйЗапрос.ДатаПроизводстваНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа	
	|		ИЛИ ВложенныйЗапрос.ДатаОтгрузки
	|		ИЛИ ВложенныйЗапрос.ДатаРасхода
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияРабот
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияРаботМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияРаботБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.ФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.ФактическоеОкончаниеЭтапаМеньшеФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ОрганизацияДавалецНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ОрганизацияДавалецСовпадаетСПереработчиком
	|		ИЛИ ВложенныйЗапрос.ОрганизацияДавалецСвязанаСПереработчиком
	|		ИЛИ ВложенныйЗапрос.ВалютыРеглДолжныСовпадать
	|		ИЛИ ВложенныйЗапрос.СтраныРегистрацииДолжныСовпадать
	|	)";
	
	Справочники.Организации.ПолучитьВзаимосвязанныеОрганизации(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,,
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьВыходныеИзделия(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)

	ПроверятьВыходныеИзделия = МенеджерВременныхТаблиц.Таблицы.Найти("ВыходныеИзделия") <> Неопределено;
	Если Не ПроверятьВыходныеИзделия Тогда
		ОтключитьПроверкуЗаполненияТЧ("ВыходныеИзделия", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	ПроверятьПобочныеИзделия = МенеджерВременныхТаблиц.Таблицы.Найти("ПобочныеИзделия") <> Неопределено;
	Если Не ПроверятьПобочныеИзделия Тогда
		ОтключитьПроверкуЗаполненияТЧ("ПобочныеИзделия", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	Если Не ПроверятьВыходныеИзделия И Не ПроверятьПобочныеИзделия Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Получатель", "ПолучательНеЗаполнен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""%2"".';
											|en = '""Recipient"" in line %1 of list ""%2"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "ЗапрещенВыборСУчетомПоГТД_Операции");
	ПараметрыПроверки.ШаблонСообщения =
		НСтр("ru = 'В строке %1 списка ""%2"" выбрана номенклатура, для которой ведется учет по ГТД.
			|При включенной опции ""Запретить оформление операций с импортными товарами без номеров ГТД"" выбор такой номенклатуры запрещен.';
			|en = 'Items with CCD records are selected in line %1 of the %2 list. 
			|you cannot select such products while the ""Prohibit registration of operations with imported goods without CCD numbers"" option is enabled.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
		
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "НоменклатураНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Получатель", "РаботыЗапрещеноВыпускатьНаСклад");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Работы можно выпустить в подразделение или списать на расходы, передача работ на склад не предусмотрена (строка %1 списка ""%2"").';
											|en = 'You can release works to business unit or write off as expenses, work transfer to warehouse is not available (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НазначениеНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Назначение"" в строке %1 списка ""%2"".';
											|en = '""Assignment"" in line %1 of list ""%2"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НазначениеСовпадаетСЭтапом");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Назначение изделия не может совпадать с назначением этапа производства (строке %1 списка ""%2"").';
											|en = 'The purpose of product cannot match with the purpose of production stage (to the %1 string of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "ДоляСтоимостиНеЗаполнена");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не удалось рассчитать долю стоимости для номенклатуры в строке %1 списка ""%2"".';
											|en = 'Cannot calculate cost share for products in line %1 of the ""%2"" list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Произведено", "ПроизведеноНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВладелецИзделия", "ВладелецИзделияНеЗаполнен");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть меньше даты начала этапа (строка %1 списка ""%2"").';
											|en = 'Production date cannot be less than the stage start date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата производства не может быть больше даты выполнения этапа (строка %1 списка ""%2"").';
											|en = 'Production date cannot be greater than the stage fulfillment date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ПричинаОтмены", "ПричинаОтменыНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "ПодразделениеДоговораНазначенияНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнено подразделение договора назначения (строка %1 списка ""%2"").';
											|en = 'Business unit of assignment contract is not filled in (string %1 of the list ""%2"").'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НельзяВыбиратьДавальческоеНазначение");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Запрещено выбирать назначение давальца при собственном производстве (строка %1 списка ""%2"").';
											|en = 'You cannot select the provider assignment for in-house production (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "ДавальческоеНазначениеНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнено назначение при производстве из давальческого сырья (строка %1 списка ""%2"").';
											|en = 'Subcontracting assignment is not filled (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "ВыбраноНеДавальческоеНазначение");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Необходимо выбрать назначение давальца при производстве из давальческого сырья (строка %1 списка ""%2"").';
											|en = 'Select the provider assignment for subcontracting (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.РаботыЗапрещеноВыпускатьНаСклад,
	|	ВложенныйЗапрос.НоменклатураНеЗаполнена,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.ПолучательНеЗаполнен,
	|	ВложенныйЗапрос.НазначениеНеЗаполнено,
	|	ВложенныйЗапрос.НазначениеСовпадаетСЭтапом,
	|	ВложенныйЗапрос.ДоляСтоимостиНеЗаполнена,
	|	ВложенныйЗапрос.ПроизведеноНеЗаполнено,
	|	ВложенныйЗапрос.ДатаПроизводстваНеЗаполнена,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено,
	|	ВложенныйЗапрос.ЗапрещенВыборСУчетомПоГТД_Операции,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.ВладелецИзделияНеЗаполнен,
	|	ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.ПричинаОтменыНеЗаполнена,
	|	ВложенныйЗапрос.ПодразделениеДоговораНазначенияНеЗаполнено,
	|	ВложенныйЗапрос.НельзяВыбиратьДавальческоеНазначение,
	|	ВложенныйЗапрос.ДавальческоеНазначениеНеЗаполнено,
	|	ВложенныйЗапрос.ВыбраноНеДавальческоеНазначение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА &ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД
	|				И ТабличнаяЧасть.Номенклатура.ВестиУчетПоГТД
	|				И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЗапрещенВыборСУчетомПоГТД_Операции,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НоменклатураНеЗаполнена,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|					И ТабличнаяЧасть.Получатель <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК РаботыЗапрещеноВыпускатьНаСклад,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Получатель В (
	|							НЕОПРЕДЕЛЕНО, 
	|							ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), 
	|							ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И (НЕ РеквизитыЭтапов.ОставитьИзделияУПереработчика
	|						ИЛИ ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПолучательНеЗаполнен,
	|		ВЫБОР
	|			КОГДА (ТабличнаяЧасть.Произведено
	|						И ТабличнаяЧасть.ОбработатьПоСпецификации
	|					ИЛИ ТабличнаяЧасть.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|						И РеквизитыЭтапов.Распоряжение.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется)
	|				И ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НазначениеНеЗаполнено,
	|		ВЫБОР
	|			КОГДА НЕ ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И ТабличнаяЧасть.Назначение = РеквизитыЭтапов.Назначение
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НазначениеСовпадаетСЭтапом,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДоляСтоимости = 0
	|					И РеквизитыЭтапов.СпособРаспределенияЗатратНаВыходныеИзделия В (
	// способ ""По долям стоимости"" проверяется отдельно
	|								ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости),
	|								ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоВесу),
	|								ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоОбъему))
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ &ПроверкаПобочногоВыпуска
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДоляСтоимостиНеЗаполнена,
	|		ВЫБОР
	|			КОГДА НЕ ТабличнаяЧасть.Произведено
	|					И РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПроизведеноНеЗаполнено,
	|		ВЫБОР
	|			КОГДА (ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|					И (НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|						И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|						ИЛИ РеквизитыЭтапов.ПроизводствоНаСтороне
	|							И ЕСТЬNULL(РеквизитыЗаказовПереработчику.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.ПустаяСсылка)) В (
	|										ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|										ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|							И ЕСТЬNULL(РеквизитыЗаказовПереработчику.Проведен, ЛОЖЬ)
	|					)
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ РеквизитыЭтапов.ПроизводствоОднойДатой
	|			)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И &ПроверкаПобочногоВыпуска
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА &ПроверкаПобочногоВыпуска
	|				И РеквизитыЭтапов.ВнутренняяПереработка
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И НЕ ЕСТЬNULL(ТабличнаяЧасть.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) В (
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВладелецИзделияНеЗаполнен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ТабличнаяЧасть.ДатаПроизводства < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.Произведено
	|					И НЕ РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ТабличнаяЧасть.ДатаПроизводства > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа 
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.Произведено
	|					И НЕ РеквизитыЭтапов.ПроизводствоОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПричинаОтменыНеЗаполнена,
	|		ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА НЕ &ПакетныйРежимФормированияЭтапов
	|					И РеквизитыЭтапов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|					И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|					И ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(ТабличнаяЧасть.Назначение КАК Справочник.Назначения).Заказ) <> ТИП(Документ.ЗаказДавальца)
	|					И ЕСТЬNULL(
	|						ВЫРАЗИТЬ(ТабличнаяЧасть.Назначение КАК Справочник.Назначения).Договор.Подразделение,
	|						ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	//-- Устарело_Переработка24
	|			КОГДА ИСТИНА
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ КАК ПодразделениеДоговораНазначенияНеЗаполнено,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|				И НЕ РеквизитыЭтапов.ХозяйственнаяОперация В (
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Назначение.ТипНазначения В(
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НельзяВыбиратьДавальческоеНазначение,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И РеквизитыЭтапов.ХозяйственнаяОперация В(
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И НЕ &ПроверкаПобочногоВыпуска
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДавальческоеНазначениеНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И РеквизитыЭтапов.ХозяйственнаяОперация =
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)
	|				И НЕ ТабличнаяЧасть.Назначение.ТипНазначения В(
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И НЕ &ПроверкаПобочногоВыпуска
	|				ТОГДА ИСТИНА
	//++ Устарело_Переработка24
	|			КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И РеквизитыЭтапов.ХозяйственнаяОперация =
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|				И НЕ ТабличнаяЧасть.Назначение.ТипНазначения В(
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И НЕ &ПроверкаПобочногоВыпуска
	|				ТОГДА ИСТИНА
	//-- Устарело_Переработка24
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбраноНеДавальческоеНазначение
	|	ИЗ
	|		ВыходныеИзделия КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЗаказовПереработчику КАК РеквизитыЗаказовПереработчику
	|		ПО РеквизитыЗаказовПереработчику.ЗаказПереработчику = РеквизитыЭтапов.ЗаказПереработчику
	|	) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.РаботыЗапрещеноВыпускатьНаСклад
	|			ИЛИ ВложенныйЗапрос.НоменклатураНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПолучательНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.НазначениеНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.НазначениеСовпадаетСЭтапом
	|			ИЛИ ВложенныйЗапрос.ДоляСтоимостиНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПроизведеноНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ДатаПроизводстваНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ЗапрещенВыборСУчетомПоГТД_Операции
	|			ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ВладелецИзделияНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.ДатаПроизводстваМеньшеЧемФактическоеНачалоЭтапа
	|			ИЛИ ВложенныйЗапрос.ДатаПроизводстваБольшеЧемФактическоеОкончаниеЭтапа
	|			ИЛИ ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПодразделениеДоговораНазначенияНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.НельзяВыбиратьДавальческоеНазначение
	|			ИЛИ ВложенныйЗапрос.ДавальческоеНазначениеНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ВыбраноНеДавальческоеНазначение
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр(
		"ХарактеристикиИспользуются",
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	Запрос.УстановитьПараметр(
		"ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД",
		ПолучитьФункциональнуюОпцию("ЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТД"));
	
	Запрос.УстановитьПараметр(
		"ПакетныйРежимФормированияЭтапов",
		Не ТипЗнч(Объект) = Тип("Структура")
		И ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные())
		И УправлениеПроизводством.ВыполняетсяПакетноеФормированиеЭтапов(Объект));
	
	Если ПроверятьВыходныеИзделия Тогда
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ПроверкаПобочногоВыпуска", Ложь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СообщитьОбОшибкахЗаполнения(Объект, Выборка, СписокРеквизитов, "ВыходныеИзделия", Отказ);
		
	КонецЕсли;
	
	Если ПроверятьПобочныеИзделия Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВыходныеИзделия КАК ТабличнаяЧасть", "ПобочныеИзделия КАК ТабличнаяЧасть");
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ПроверкаПобочногоВыпуска", Истина);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СообщитьОбОшибкахЗаполнения(Объект, Выборка, СписокРеквизитов, "ПобочныеИзделия", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбеспечениеМатериаламиИРаботами(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)

	ПроверятьОбеспечение = МенеджерВременныхТаблиц.Таблицы.Найти("ОбеспечениеМатериаламиИРаботами") <> Неопределено;
	Если Не ПроверятьОбеспечение Тогда
		ОтключитьПроверкуЗаполненияТЧ("ОбеспечениеМатериаламиИРаботами", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "НоменклатураНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаОтгрузки", "ДатаОтгрузкиНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Склад", "СкладНеЗаполнен");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Обособленно", "ВариантОбеспеченияПФ");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Для производимых полуфабрикатов необходимо установить обособленное обеспечение (строка %1 списка ""%2"").';
											|en = 'Set the assigned supply for the manufactured semi-finished products (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "НедоступнаОтгрузка");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Отгрузка материалов доступна только при статусах ""Начат"", ""Завершен"" (строка %1 списка ""%2"").';
											|en = 'Material shipment is available only for statuses ""Started"", ""Completed"" (%1 line of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "НедоступнаОтгрузкаСтатусЗаказа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Отгрузка материалов доступна только при статусах заказа переработчику ""К выполнению"", ""Закрыт"" (строка %1 списка ""%2"").';
											|en = 'Material shipment is available only if the subcontracting purchase order has the ""Released"" or ""Closed"" status (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "ВариантОбеспеченияЭтапЗавершен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В завершенном этапе для всех материалов необходимо установить действие ""Отгрузить"" или ""Отгрузить обособленно"" (строка %1 списка ""%2"").';
											|en = 'Select the Ship or Ship separately action (line %1 of the ""%2"" list) for all materials at the completed stage.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Указание статьи калькуляции является обязательным в статусах ""К выполнению"" и выше (строка %1 списка ""%2"").';
											|en = 'Specify product cost elements in the ""Released"" and higher status (line %1 of the ""%2"" list ).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ПричинаОтмены", "ПричинаОтменыНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НельзяВыбиратьДавальческоеНазначение");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Запрещено выбирать назначение давальца при собственном производстве (строка %1 списка ""%2"").';
											|en = 'You cannot select the provider assignment for in-house production (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	//++ Устарело_Переработка24
	Если ТипЗнч(Объект) <> Тип("ОбработкаОбъект.РедактированиеЭтаповПроизводства") Тогда // редактирование этапов производства на стороне
	//-- Устарело_Переработка24
	
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "НедоступнаОтгрузкаЗаказНеПроведен");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Отгрузка материалов недоступна т.к. заказ переработчику не проведен (строка %1 списка ""%2"").';
												|en = 'Material shipment is not available as the ""Purchase order — Subcontracting"" is not posted (%1 line of the ""%2"" list).'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ВариантОбеспечения", "НедоступнаОтгрузкаНетЗаказа");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Отгрузка материалов недоступна т.к. не оформлен заказ переработчику (строка %1 списка ""%2"").';
												|en = 'Material shipment is not available as the ""Purchase order — Subcontracting"" is not registered (%1 line of the ""%2"" list).'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
	//++ Устарело_Переработка24
	КонецЕсли;
	//-- Устарело_Переработка24
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("НазначениеОбеспечения", "НазначениеОбеспеченияНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НедоступнаОтгрузкаПоНазначениюНовогоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Нельзя провести документ с действием Отгрузить по назначению Нового этапа, т.к. не может быть остатков по такому назначению (строка %1 списка ""%2"").';
											|en = 'Cannot post the document with the ""Ship by new stage assignment"" action. There can be no balance by such assignment (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.НоменклатураНеЗаполнена,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.ДатаОтгрузкиНеЗаполнена,
	|	ВложенныйЗапрос.ВариантОбеспеченияПФ,
	|	ВложенныйЗапрос.ВариантОбеспеченияЭтапЗавершен,
	|	ВложенныйЗапрос.СкладНеЗаполнен,
	|	ВложенныйЗапрос.НедоступнаОтгрузка,
	|	ВложенныйЗапрос.НедоступнаОтгрузкаСтатусЗаказа,
	|	ВложенныйЗапрос.НедоступнаОтгрузкаЗаказНеПроведен,
	|	ВложенныйЗапрос.НедоступнаОтгрузкаНетЗаказа,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено,
	|	ВложенныйЗапрос.ПричинаОтменыНеЗаполнена,
	|	ВложенныйЗапрос.НельзяВыбиратьДавальческоеНазначение,
	|	ВложенныйЗапрос.НазначениеОбеспеченияНеЗаполнено,
	|	ВложенныйЗапрос.НедоступнаОтгрузкаПоНазначениюНовогоЭтапа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НоменклатураНеЗаполнена,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И ТабличнаяЧасть.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВариантОбеспеченияЭтапЗавершен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|					И НЕ РеквизитыЭтапов.НеОтгружатьЧастями
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаОтгрузкиНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузка,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И ЕСТЬNULL(РеквизитыЗаказовПереработчику.Проведен, ЛОЖЬ)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ ЕСТЬNULL(РеквизитыЗаказовПереработчику.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.ПустаяСсылка)) В (
	|									ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|									ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузкаСтатусЗаказа,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И НЕ ЕСТЬNULL(РеквизитыЗаказовПереработчику.Проведен, ЛОЖЬ)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузкаЗаказНеПроведен,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И РеквизитыЭтапов.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузкаНетЗаказа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее)
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СкладНеЗаполнен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Производится И НЕ ТабличнаяЧасть.Обособленно
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВариантОбеспеченияПФ,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПричинаОтменыНеЗаполнена,
	|		ВЫБОР
	|			КОГДА РеквизитыЭтапов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|				И НЕ РеквизитыЭтапов.ХозяйственнаяОперация В (
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				И ТабличнаяЧасть.Назначение.ТипНазначения В(
	//++ Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	//-- Устарело_Переработка24
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НельзяВыбиратьДавальческоеНазначение,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Обособленно
	|					И (ТабличнаяЧасть.НазначениеОбеспечения = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|						ИЛИ ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|					И НЕ ТабличнаяЧасть.Отменено
	|					И НЕ ТабличнаяЧасть.Производится
	|					И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НазначениеОбеспеченияНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Назначение = РеквизитыЭтапов.Назначение
	|					И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					И ТабличнаяЧасть.Обособленно
	|					И ТабличнаяЧасть.Ссылка = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедоступнаОтгрузкаПоНазначениюНовогоЭтапа
	|	ИЗ
	|		ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЗаказовПереработчику КАК РеквизитыЗаказовПереработчику
	|		ПО РеквизитыЗаказовПереработчику.ЗаказПереработчику = РеквизитыЭтапов.ЗаказПереработчику
	|	) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.СкладНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.НоменклатураНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ДатаОтгрузкиНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ВариантОбеспеченияПФ
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузка
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузкаСтатусЗаказа
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузкаЗаказНеПроведен
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузкаНетЗаказа
	|			ИЛИ ВложенныйЗапрос.ВариантОбеспеченияЭтапЗавершен
	|			ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.НельзяВыбиратьДавальческоеНазначение
	|			ИЛИ ВложенныйЗапрос.НазначениеОбеспеченияНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.НедоступнаОтгрузкаПоНазначениюНовогоЭтапа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));

	Выборка = Запрос.Выполнить().Выбрать();
	
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"ОбеспечениеМатериаламиИРаботами",
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьТрудозатраты(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)
	
	ПроверятьТрудозатраты = МенеджерВременныхТаблиц.Таблицы.Найти("Трудозатраты") <> Неопределено;
	Если Не ПроверятьТрудозатраты Тогда
		ОтключитьПроверкуЗаполненияТЧ("Трудозатраты", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Исполнитель", "ИсполнительНеЗаполнен");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Выполнено", "ВыполненоНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работы не может быть меньше даты начала этапа (строка %1 списка ""%2"").';
											|en = 'Work execution date cannot be less than the stage start date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работы не может быть больше даты выполнения этапа (строка %1 списка ""%2"").';
											|en = 'Work execution date cannot be greater than the stage fulfillment date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ПричинаОтмены", "ПричинаОтменыНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено,
	|	ВложенныйЗапрос.ИсполнительНеЗаполнен,
	|	ВложенныйЗапрос.ВыполненоНеЗаполнено,
	|	ВложенныйЗапрос.ДатаВыполненияНеЗаполнена,
	|	ВложенныйЗапрос.ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Выполнено И ТабличнаяЧасть.Исполнитель В (
	|													НЕОПРЕДЕЛЕНО,
	|													ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка),
	|													ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И НЕ РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИсполнительНеЗаполнен,
	|		ВЫБОР
	|			КОГДА НЕ ТабличнаяЧасть.Выполнено
	|				И РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыполненоНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Выполнено
	|				И ТабличнаяЧасть.ДатаВыполнения = ДАТАВРЕМЯ(1,1,1)
	|				И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ТабличнаяЧасть.ДатаВыполнения < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ) 
	|					И ТабличнаяЧасть.Выполнено
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ТабличнаяЧасть.ДатаВыполнения > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа 
	|					И ТабличнаяЧасть.Выполнено
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|					И НЕ ТабличнаяЧасть.Отменено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Отменено
	|					И ТабличнаяЧасть.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПричинаОтменыНеЗаполнена
	|	ИЗ
	|		Трудозатраты КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.КоличествоНеЗаполнено
	|		ИЛИ ВложенныйЗапрос.ИсполнительНеЗаполнен
	|		ИЛИ ВложенныйЗапрос.ВыполненоНеЗаполнено
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаВыполненияБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ПричинаОтменыНеЗаполнена
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"Трудозатраты",
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьРасходМатериаловИРабот(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)
	
	ПроверятьРасходМатериаловИРабот = МенеджерВременныхТаблиц.Таблицы.Найти("РасходМатериаловИРабот") <> Неопределено;
	Если Не ПроверятьРасходМатериаловИРабот Тогда
		ОтключитьПроверкуЗаполненияТЧ("РасходМатериаловИРабот", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "НоменклатураНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть меньше даты начала этапа (строка %1 списка ""%2"").';
											|en = 'Consumption date cannot be less than the stage start date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода не может быть больше даты выполнения этапа (строка %1 списка ""%2"").';
											|en = 'Consumption date cannot be greater than the stage fulfillment date (line %1 of the %2 list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("СтатьяКалькуляции", "СтатьяКалькуляцииНеЗаполнена");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В статусе ""Начат"" и ""Завершен"" указание статьи калькуляции является обязательным (строка %1 списка ""%2"").';
											|en = 'Product cost element specification is required in the Started and Completed status (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.НоменклатураНеЗаполнена,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена,
	|	ВложенныйЗапрос.ДатаРасходаНеЗаполнена,
	|	ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|	ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НоменклатураНеЗаполнена,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				И РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаРасхода = ДАТАВРЕМЯ(1, 1, 1)
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаРасхода <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ТабличнаяЧасть.ДатаРасхода < НАЧАЛОПЕРИОДА(РеквизитыЭтапов.ФактическоеНачалоЭтапа, ДЕНЬ)
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаРасхода <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ТабличнаяЧасть.ДатаРасхода > РеквизитыЭтапов.ФактическоеОкончаниеЭтапа
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|					И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|					И РеквизитыЭтапов.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено
	|	ИЗ
	|		РасходМатериаловИРабот КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.НоменклатураНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаНеЗаполнена
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаМеньшеЧемФактическоеНачалоЭтапа
	|		ИЛИ ВложенныйЗапрос.ДатаРасходаБольшеЧемФактическоеОкончаниеЭтапа
	|		ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|		ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки");
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"РасходМатериаловИРабот",
		Отказ);

КонецПроцедуры

Процедура ПроверитьЭкономияМатериалов(Объект, МенеджерВременныхТаблиц, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ)
	
	ПроверятьЭкономияМатериалов = МенеджерВременныхТаблиц.Таблицы.Найти("ЭкономияМатериалов") <> Неопределено;
	Если Не ПроверятьЭкономияМатериалов Тогда
		ОтключитьПроверкуЗаполненияТЧ("ЭкономияМатериалов", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		Возврат;
	КонецЕсли;

	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Номенклатура", "НоменклатураНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Характеристика", "ХарактеристикаНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Получатель", "ПолучательНеЗаполнен");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""%2"".';
											|en = '""Recipient"" in line %1 of list ""%2"" is not filled in.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Назначение", "НедопускаетсяОбособлениеТары");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Не допускается обособление тары (строка %1 списка ""%2"").';
											|en = 'Cannot separate package (line %1 of the ""%2"" list).'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаОперации", "ДатаОперацииНеЗаполнена");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("КоличествоУпаковок", "КоличествоУпаковокНеЗаполнено");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиРеквизитов("Количество", "КоличествоНеЗаполнено");
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2"".';
											|en = 'Zero quantity is detected when converted to storage unit in line %1 of the %2 list.'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.НоменклатураНеЗаполнена,
	|	ВложенныйЗапрос.ХарактеристикаНеЗаполнена,
	|	ВложенныйЗапрос.ПолучательНеЗаполнен,
	|	ВложенныйЗапрос.ДатаОперацииНеЗаполнена,
	|	ВложенныйЗапрос.НедопускаетсяОбособлениеТары,
	|	ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено,
	|	ВложенныйЗапрос.КоличествоНеЗаполнено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НоменклатураНеЗаполнена,
	|		ВЫБОР
	|			КОГДА &ХарактеристикиИспользуются
	|				И ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикаНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаОперации = ДАТАВРЕМЯ(1, 1, 1)
	|					И НЕ РеквизитыЭтапов.РасходОднойДатой
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаОперацииНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Получатель В (НЕОПРЕДЕЛЕНО,
	|						ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|						ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПолучательНеЗаполнен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НедопускаетсяОбособлениеТары,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.КоличествоУпаковок = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоУпаковокНеЗаполнено,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Количество = 0 И ТабличнаяЧасть.КоличествоУпаковок <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК КоличествоНеЗаполнено
	|	ИЗ
	|		ЭкономияМатериалов КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.НоменклатураНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ХарактеристикаНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ПолучательНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.ДатаОперацииНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.НедопускаетсяОбособлениеТары
	|			ИЛИ ВложенныйЗапрос.КоличествоУпаковокНеЗаполнено
	|			ИЛИ ВложенныйЗапрос.КоличествоНеЗаполнено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СообщитьОбОшибкахЗаполнения(
		Объект,
		Выборка,
		СписокРеквизитов,
		"ЭкономияМатериалов",
		Отказ);
	
КонецПроцедуры

Процедура ПроверитьРавенствоПоМатериалам(Объект, МенеджерВременныхТаблиц, Отказ)
	
	Если Отказ
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ОбеспечениеМатериаламиИРаботами") = Неопределено
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("РасходМатериаловИРабот") = Неопределено
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ЭкономияМатериалов") = Неопределено
		Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	// 0
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	РеквизитыЭтапов.Статус              КАК Статус,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ТабличнаяЧасть.Подразделение        КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
	|
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Подразделение,
	|	РеквизитыЭтапов.Статус,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ТабличнаяЧасть.Подразделение        КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	РасходМатериаловИРабот КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка               КАК Ссылка,
	|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ТабличнаяЧасть.Подразделение        КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
	|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
	|ПОМЕСТИТЬ Экономия
	|ИЗ
	|	ЭкономияМатериалов КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|		ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	Обеспечение.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).Представление                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(Обеспечение.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление  КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление           КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Обеспечение.Количество - (ЕСТЬNULL(Расход.Количество, 0) + ЕСТЬNULL(Экономия.Количество, 0)) КАК Количество
	|ИЗ
	|	Обеспечение КАК Обеспечение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеМатериаламиИРаботами КАК ИсходнаяТЧ
	|			ПО ИсходнаяТЧ.Ссылка      = Обеспечение.Ссылка
	|			 И ИсходнаяТЧ.НомерСтроки = Обеспечение.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расход КАК Расход
	|			ПО Расход.Ссылка         = Обеспечение.Ссылка
	|			 И Расход.Подразделение  = Обеспечение.Подразделение
	|			 И Расход.Номенклатура   = Обеспечение.Номенклатура
	|			 И Расход.Характеристика = Обеспечение.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Экономия КАК Экономия
	|			ПО Экономия.Ссылка         = Обеспечение.Ссылка
	|			 И Экономия.Подразделение  = Обеспечение.Подразделение
	|			 И Экономия.Номенклатура   = Обеспечение.Номенклатура
	|			 И Экономия.Характеристика = Обеспечение.Характеристика
	|ГДЕ
	|	Обеспечение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И Обеспечение.Количество > ЕСТЬNULL(Расход.Количество, 0) + ЕСТЬNULL(Экономия.Количество, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	Расход.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                  КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление   КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).Представление                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(Расход.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление    КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление        КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Расход.Количество - ЕСТЬNULL(Обеспечение.Количество, 0) КАК Количество
	|ИЗ
	|	Расход КАК Расход
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасходМатериаловИРабот КАК ИсходнаяТЧ
	|			ПО ИсходнаяТЧ.Ссылка      = Расход.Ссылка
	|			 И ИсходнаяТЧ.НомерСтроки = Расход.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|			ПО Расход.Ссылка         = Обеспечение.Ссылка
	|			 И Расход.Подразделение  = Обеспечение.Подразделение
	|			 И Расход.Номенклатура   = Обеспечение.Номенклатура
	|			 И Расход.Характеристика = Обеспечение.Характеристика
	|ГДЕ
	|	Расход.Количество > ЕСТЬNULL(Обеспечение.Количество, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5
	|ВЫБРАТЬ
	|	Экономия.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).Представление                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(Экономия.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление  КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление        КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Экономия.Количество - (ЕСТЬNULL(Обеспечение.Количество, 0) - ЕСТЬNULL(Расход.Количество, 0)) КАК Количество
	|ИЗ
	|	Экономия КАК Экономия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭкономияМатериалов КАК ИсходнаяТЧ
	|			ПО ИсходнаяТЧ.Ссылка      = Экономия.Ссылка
	|			 И ИсходнаяТЧ.НомерСтроки = Экономия.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|			ПО Экономия.Ссылка         = Обеспечение.Ссылка
	|			 И Экономия.Подразделение  = Обеспечение.Подразделение
	|			 И Экономия.Номенклатура   = Обеспечение.Номенклатура
	|			 И Экономия.Характеристика = Обеспечение.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расход КАК Расход
	|			ПО Экономия.Ссылка         = Расход.Ссылка
	|			 И Экономия.Подразделение  = Расход.Подразделение
	|			 И Экономия.Номенклатура   = Расход.Номенклатура
	|			 И Экономия.Характеристика = Расход.Характеристика
	|ГДЕ
	|	Экономия.Количество > (ЕСТЬNULL(Обеспечение.Количество, 0) - ЕСТЬNULL(Расход.Количество, 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Обеспечение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Расход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Экономия
	|;");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(ИсходнаяТЧ.Номенклатура КАК Справочник.Номенклатура)"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.ВыполнитьПакет();
	
	Если ТипЗнч(Объект) <> Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		КлючДанных = Неопределено;
		ПутьКДанным = Объект.ПутьКДаннымРеквизитаФормыРедактирования();
	Иначе
		КлючДанных = Объект;
		ПутьКДанным = "";
	КонецЕсли;
	
	// Не указан расход материала
	Если Не Результат[3].Пустой() Тогда
		
		ШаблонСообщенияОбеспечениеБольше = НСтр("ru = 'Не указан расход материала ""%1"" в количестве %2 %3';
												|en = 'The ""%1"" material consumption in the amount of %2 %3 is not specified'");
		ШаблонСообщенияОбеспечениеБольшеРабота = НСтр("ru = 'Не указан расход работ ""%1"" в количестве %2 %3';
														|en = 'The ""%1"" work consumption in the amount of %2 %3 is not specified'");
		
		Выборка = Результат[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										Выборка.Номенклатура, 
										Выборка.Характеристика);
										
			Если ЗначениеЗаполнено(Выборка.Упаковка)
				И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
					ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
				Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
				ЕдиницаИзмерения = Выборка.Упаковка;
			Иначе
				Количество = Выборка.Количество;
				ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			
			ТекстШаблона = ?(Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа, ШаблонСообщенияОбеспечениеБольшеРабота, ШаблонСообщенияОбеспечениеБольше);
			ТекстСообщения = СтрШаблон(ТекстШаблона, НоменклатураПредставление, Формат(Количество, "ЧН=0; ЧГ=0"), ЕдиницаИзмерения);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Расход превышает запланированное к обеспечению
	Если Не Результат[4].Пустой() Тогда
		
		ШаблонСообщенияРасходБольше = НСтр("ru = 'Количество расхода материала ""%1"" превышает доступное на %2 %3';
											|en = 'Material consumption amount ""%1"" exceeds the available one by %2 %3'");
		ШаблонСообщенияРасходБольшеРабота = НСтр("ru = 'Количество расхода работы ""%1"" превышает доступное на %2 %3';
												|en = 'Work consumption amount ""%1"" exceeds the available one by %2 %3'");
		
		Выборка = Результат[4].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										Выборка.Номенклатура, 
										Выборка.Характеристика);
										
			Если ЗначениеЗаполнено(Выборка.Упаковка)
				И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
					ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
				Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
				ЕдиницаИзмерения = Выборка.Упаковка;
			Иначе
				Количество = Выборка.Количество;
				ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			
			ТекстШаблона = ?(Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа, ШаблонСообщенияРасходБольшеРабота, ШаблонСообщенияРасходБольше);
			ТекстСообщения = СтрШаблон(ТекстШаблона, НоменклатураПредставление, Формат(Количество, "ЧН=0; ЧГ=0"), ЕдиницаИзмерения);
								
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасходМатериаловИРабот", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Количество неизрасходованного материала превышает запланированное к обеспечению
	Если Не Результат[5].Пустой() Тогда
		
		ШаблонСообщенияЭкономия =
			НСтр("ru = 'Количество неизрасходованного материала ""%1"" превышает доступное на %2 %3';
				|en = 'Unconsumed material amount ""%1"" exceeds the available one by %2 %3'");
		
		Выборка = Результат[5].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										Выборка.Номенклатура, 
										Выборка.Характеристика);
										
			Если ЗначениеЗаполнено(Выборка.Упаковка)
				И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
					ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
				Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
				ЕдиницаИзмерения = Выборка.Упаковка;
			Иначе
				Количество = Выборка.Количество;
				ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияЭкономия,
								НоменклатураПредставление,
								Формат(Количество, "ЧН=0; ЧГ=0"),
								ЕдиницаИзмерения);
								
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭкономияМатериалов", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатыПроизводстваНаСтороне(Объект, МенеджерВременныхТаблиц, Отказ)
	
	Если Отказ
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ВыходныеИзделия") = Неопределено
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ПобочныеИзделия") = Неопределено
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ОбеспечениеМатериаламиИРаботами") = Неопределено
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("РеквизитыЗаказовПереработчику") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыПроизводства.Ссылка                    КАК Ссылка,
	|	МАКСИМУМ(ДатыПроизводства.ДатаПроизводства) КАК ДатаПроизводства
	|ПОМЕСТИТЬ МаксимальныеДатыПроизводства
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеквизитыЭтапов.Ссылка                                КАК Ссылка,
	|		КОНЕЦПЕРИОДА(ВыходныеИзделия.ДатаПроизводства, МЕСЯЦ) КАК ДатаПроизводства
	|	ИЗ
	|		РеквизитыЭтапов КАК РеквизитыЭтапов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыходныеИзделия КАК ВыходныеИзделия
	|		ПО ВыходныеИзделия.Ссылка = РеквизитыЭтапов.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыЗаказовПереработчику КАК РеквизитыЗаказовПереработчику
	|		ПО РеквизитыЗаказовПереработчику.ЗаказПереработчику = РеквизитыЭтапов.ЗаказПереработчику
	|	
	|	ГДЕ
	|		РеквизитыЭтапов.ПроизводствоНаСтороне2_5
	|		И НЕ ВыходныеИзделия.Отменено
	|		И РеквизитыЗаказовПереработчику.Проведен
	|		И РеквизитыЗаказовПереработчику.Статус В(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеквизитыЭтапов.Ссылка                                КАК Ссылка,
	|		КОНЕЦПЕРИОДА(ПобочныеИзделия.ДатаПроизводства, МЕСЯЦ) КАК ДатаПроизводства
	|	ИЗ
	|		РеквизитыЭтапов КАК РеквизитыЭтапов
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПобочныеИзделия КАК ПобочныеИзделия
	|		ПО ПобочныеИзделия.Ссылка = РеквизитыЭтапов.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыЗаказовПереработчику КАК РеквизитыЗаказовПереработчику
	|		ПО РеквизитыЗаказовПереработчику.ЗаказПереработчику = РеквизитыЭтапов.ЗаказПереработчику
	|	
	|	ГДЕ
	|		РеквизитыЭтапов.ПроизводствоНаСтороне2_5
	|		И НЕ ПобочныеИзделия.Отменено
	|		И РеквизитыЗаказовПереработчику.Проведен
	|		И РеквизитыЗаказовПереработчику.Статус В(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|	) КАК ДатыПроизводства
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПроизводства.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыЭтапов.Ссылка                        КАК Ссылка,
	|	МаксимальныеДатыПроизводства.ДатаПроизводства КАК ДатаПроизводства
	|ИЗ
	|	РеквизитыЭтапов КАК РеквизитыЭтапов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыПроизводства КАК МаксимальныеДатыПроизводства
	|	ПО МаксимальныеДатыПроизводства.Ссылка = РеквизитыЭтапов.Ссылка
	|
	|ГДЕ
	|	РеквизитыЭтапов.НеОтгружатьЧастями
	|	И РеквизитыЭтапов.ДатаОтгрузки > МаксимальныеДатыПроизводства.ДатаПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбеспечениеМатериаламиИРаботами.Ссылка        КАК Ссылка,
	|	ОбеспечениеМатериаламиИРаботами.НомерСтроки   КАК НомерСтроки,
	|	МаксимальныеДатыПроизводства.ДатаПроизводства КАК ДатаПроизводства
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|	ПО РеквизитыЭтапов.Ссылка = ОбеспечениеМатериаламиИРаботами.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыПроизводства КАК МаксимальныеДатыПроизводства
	|	ПО МаксимальныеДатыПроизводства.Ссылка = ОбеспечениеМатериаламиИРаботами.Ссылка
	|
	|ГДЕ
	|	НЕ РеквизитыЭтапов.НеОтгружатьЧастями
	|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
	|	И ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки > МаксимальныеДатыПроизводства.ДатаПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаксимальныеДатыПроизводства
	|";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.ВыполнитьПакет();
	
	Если ТипЗнч(Объект) = Тип("Структура")
		И Объект.Свойство("ЗаказПереработчику") Тогда
		КлючДанных = Неопределено;
		ПутьКДанным = "Объект";
	ИначеЕсли Не ТипЗнч(Объект) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
		КлючДанных = Неопределено;
		ПутьКДанным = Объект.ПутьКДаннымРеквизитаФормыРедактирования();
	Иначе
		КлючДанных = Объект;
		ПутьКДанным = "";
	КонецЕсли;
	
	
	ТекстМесяцОтгрузки = НСтр("ru = 'Месяц отгрузки должен быть не больше месяца поступления изделий (%1)';
								|en = 'Shipment month cannot be greater than the month of finished product receipt (%1)'");
	
	// Не отгружать частями. Месяц отгрузки должен быть не больше месяца поступления продукции и возвратных отходов.
	Если Не Результат[1].Пустой() Тогда
		
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтрШаблон(ТекстМесяцОтгрузки, Формат(Выборка.ДатаПроизводства, "ДФ='ММММ гггг'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "ДатаОтгрузки", ПутьКДанным, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	// Отгружать частями. Месяц отгрузки должен быть не больше месяца поступления продукции и возвратных отходов.
	Если Не Результат[2].Пустой() Тогда
		
		Выборка = Результат[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтрШаблон(ТекстМесяцОтгрузки, Формат(Выборка.ДатаПроизводства, "ДФ='ММММ гггг'"));
			
			Поле =
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"ОбеспечениеМатериаламиИРаботами",
					Выборка.НомерСтроки,
					"ДатаОтгрузки");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаКоличествоСтрокВТЧДляПроверкиЗаполнения(МенеджерВременныхТаблиц)
	
	ТекстЗапросаКоличествоСтрок =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка                                           КАК Ссылка,
	|	СУММА(ТаблицаДанных.КоличествоСтрокВыходныеИзделия)            КАК ВыходныеИзделия,
	|	СУММА(ТаблицаДанных.КоличествоСтрокВыходныеИзделияПроизведено) КАК ВыходныеИзделияПроизведено,
	|	СУММА(ТаблицаДанных.КоличествоСтрокПобочныеИзделия)            КАК ПобочныеИзделия,
	|	СУММА(ТаблицаДанных.КоличествоСтрокПобочныеИзделияПроизведено) КАК ПобочныеИзделияПроизведено,
	|	СУММА(ТаблицаДанных.КоличествоСтрокОбеспечение)                КАК Обеспечение,
	|	МАКСИМУМ(ТаблицаДанных.ДатаОтгрузкиОбязательнаОбеспечение)     КАК ДатаОтгрузкиОбязательна,
	|	СУММА(ТаблицаДанных.КоличествоСтрокРасход)                     КАК Расход,
	|	СУММА(ТаблицаДанных.КоличествоСтрокТрудозатраты)               КАК Трудозатраты
	|ПОМЕСТИТЬ ВТКоличествоСтрокВТЧ
	|ИЗ
	|	&Данные КАК ТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Ссылка
	|	
	|;
	|////////////////////////////////////////////////////////////////
	|";
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеквизитыЭтапов.Ссылка             КАК Ссылка,
	|	0                                  КАК КоличествоСтрокВыходныеИзделия,
	|	0                                  КАК КоличествоСтрокВыходныеИзделияПроизведено,
	|	0                                  КАК КоличествоСтрокПобочныеИзделия,
	|	0                                  КАК КоличествоСтрокПобочныеИзделияПроизведено,
	|	0                                  КАК КоличествоСтрокОбеспечение,
	|	ЛОЖЬ                               КАК ДатаОтгрузкиОбязательнаОбеспечение,
	|	0                                  КАК КоличествоСтрокРасход,
	|	0                                  КАК КоличествоСтрокТрудозатраты
	|ИЗ
	|	РеквизитыЭтапов КАК РеквизитыЭтапов";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВыходныеИзделия") <> Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВыходныеИзделия.Ссылка             КАК Ссылка,
		|	1                                  КАК КоличествоСтрокВыходныеИзделия,
		|	ВыходныеИзделия.ПризнакПроизведено КАК КоличествоСтрокВыходныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокПобочныеИзделия,
		|	0                                  КАК КоличествоСтрокПобочныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокОбеспечение,
		|	ЛОЖЬ                               КАК ДатаОтгрузкиОбязательнаОбеспечение,
		|	0                                  КАК КоличествоСтрокРасход,
		|	0                                  КАК КоличествоСтрокТрудозатраты
		|ИЗ
		|	ВыходныеИзделия КАК ВыходныеИзделия";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ПобочныеИзделия") <> Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПобочныеИзделия.Ссылка             КАК Ссылка,
		|	0                                  КАК КоличествоСтрокВыходныеИзделия,
		|	0                                  КАК КоличествоСтрокВыходныеИзделияПроизведено,
		|	1                                  КАК КоличествоСтрокПобочныеИзделия,
		|	ПобочныеИзделия.ПризнакПроизведено КАК КоличествоСтрокПобочныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокОбеспечение,
		|	ЛОЖЬ                               КАК ДатаОтгрузкиОбязательнаОбеспечение,
		|	0                                  КАК КоличествоСтрокРасход,
		|	0                                  КАК КоличествоСтрокТрудозатраты
		|ИЗ
		|	ПобочныеИзделия КАК ПобочныеИзделия";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ОбеспечениеМатериаламиИРаботами") <> Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Обеспечение.Ссылка                 КАК Ссылка,
		|	0                                  КАК КоличествоСтрокВыходныеИзделия,
		|	0                                  КАК КоличествоСтрокВыходныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокПобочныеИзделия,
		|	0                                  КАК КоличествоСтрокПобочныеИзделияПроизведено,
		|	1                                  КАК КоличествоСтрокОбеспечение,
		|	Обеспечение.ВариантОбеспечения =
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) КАК ДатаОтгрузкиОбязательнаОбеспечение,
		|	0                                  КАК КоличествоСтрокРасход,
		|	0                                  КАК КоличествоСтрокТрудозатраты
		|ИЗ
		|	ОбеспечениеМатериаламиИРаботами КАК Обеспечение";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("РасходМатериаловИРабот") <> Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Расход.Ссылка                      КАК Ссылка,
		|	0                                  КАК КоличествоСтрокВыходныеИзделия,
		|	0                                  КАК КоличествоСтрокВыходныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокПобочныеИзделия,
		|	0                                  КАК КоличествоСтрокПобочныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокОбеспечение,
		|	ЛОЖЬ                               КАК ДатаОтгрузкиОбязательнаОбеспечение,
		|	1                                  КАК КоличествоСтрокРасход,
		|	0                                  КАК КоличествоСтрокТрудозатраты
		|ИЗ
		|	РасходМатериаловИРабот КАК Расход";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("Трудозатраты") <> Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Трудозатраты.Ссылка                КАК Ссылка,
		|	0                                  КАК КоличествоСтрокВыходныеИзделия,
		|	0                                  КАК КоличествоСтрокВыходныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокПобочныеИзделия,
		|	0                                  КАК КоличествоСтрокПобочныеИзделияПроизведено,
		|	0                                  КАК КоличествоСтрокОбеспечение,
		|	ЛОЖЬ                               КАК ДатаОтгрузкиОбязательнаОбеспечение,
		|	0                                  КАК КоличествоСтрокРасход,
		|	1                                  КАК КоличествоСтрокТрудозатраты
		|ИЗ
		|	Трудозатраты КАК Трудозатраты";
		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапросаКоличествоСтрок =
		СтрЗаменить(
			ТекстЗапросаКоличествоСтрок,
			"&Данные",
			СтрШаблон("(%1)", СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении())));
	
	Возврат ТекстЗапросаКоличествоСтрок;
	
КонецФункции

Процедура ОтключитьПроверкуЗаполненияТЧ(ИмяТЧ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов)
	
	Для Каждого ПутьКРеквизиту Из ПроверяемыеРеквизиты Цикл
		Если Найти(ПутьКРеквизиту, ИмяТЧ) > 0
			И МассивНепроверяемыхРеквизитов.Найти(ПутьКРеквизиту) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ПутьКРеквизиту);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИспользованиеПартионногоУчета22(Объект, Отказ) Экспорт
	
	ДатаДокумента = Дата('00010101');
	
	Для Каждого Строка Из Объект.ВыходныеИзделия Цикл
		Если ЗначениеЗаполнено(Строка.ДатаПроизводства) И ЗначениеЗаполнено(ДатаДокумента)
			И Не Строка.Отменено Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ПобочныеИзделия Цикл
		Если ЗначениеЗаполнено(Строка.ДатаПроизводства) И ЗначениеЗаполнено(ДатаДокумента)
			И Не Строка.Отменено Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаПроизводства);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		Если ЗначениеЗаполнено(Строка.ДатаОтгрузки) И ЗначениеЗаполнено(ДатаДокумента)
			И Не Строка.Отменено Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаОтгрузки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.РасходМатериаловИРабот Цикл
		Если ЗначениеЗаполнено(Строка.ДатаРасхода) И ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаРасхода);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ЭкономияМатериалов Цикл
		Если ЗначениеЗаполнено(Строка.ДатаОперации) И ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = Мин(ДатаДокумента,Строка.ДатаОперации);
		КонецЕсли;
	КонецЦикла;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(Объект, ДатаДокумента, Отказ);
	
КонецПроцедуры

Процедура ПроверитьПериодыОтраженияЗатрат(Объект, МенеджерВременныхТаблиц, Отказ)
	
	ПропуститьПобочныйВыпуск = МенеджерВременныхТаблиц.Таблицы.Найти("ПобочныеИзделия") = Неопределено;
	ПропуститьРасход         = МенеджерВременныхТаблиц.Таблицы.Найти("РасходМатериаловИРабот") = Неопределено;
	ПропуститьТрудозатраты   = МенеджерВременныхТаблиц.Таблицы.Найти("Трудозатраты") = Неопределено;
	
	Если Отказ
		ИЛИ МенеджерВременныхТаблиц.Таблицы.Найти("ВыходныеИзделия") = Неопределено
		ИЛИ (ПропуститьПобочныйВыпуск
			И ПропуститьРасход
			И ПропуститьТрудозатраты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	#Область ВтДатыПроизводства
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Произведено
	|				ТОГДА ТабличнаяЧасть.ДатаПроизводства
	|			ИНАЧЕ ДАТАВРЕМЯ(3999,12,31,23,59,59)
	|		КОНЕЦ, МЕСЯЦ))    КАК ДатаПроизводства
	|ПОМЕСТИТЬ ДатыПроизводства
	|ИЗ
	|	ВыходныеИзделия КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|	ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
	|
	|ГДЕ
	|	РеквизитыЭтапов.Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ РеквизитыЭтапов.ПроизводствоНаСтороне
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	Запрос.Выполнить();
	
	#КонецОбласти
	
	#Область ПобочныеИзделия
	
	Если Не ПропуститьПобочныйВыпуск Тогда
		
		СписокРеквизитов = Новый Массив;
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаПроизводства", "НеправильныйПериод");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В строке %1 списка ""%2"" дата производства превышает месяц крайнего выпуска изделий по рассчитываемой стоимости.';
												|en = 'In line %1 of the ""%2"" list, the production date exceeds the deadline month for releasing finished products at the calculated cost.'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка      КАК Ссылка,
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА                     КАК НеправильныйПериод
		|ИЗ
		|	ПобочныеИзделия КАК ТабличнаяЧасть
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПроизводства КАК ДатыПроизводства
		|	ПО ДатыПроизводства.Ссылка = ТабличнаяЧасть.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
		|	ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
		|
		|ГДЕ
		|	ТабличнаяЧасть.Произведено
		|	И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ РеквизитыЭтапов.ПроизводствоОднойДатой
		|	И ТабличнаяЧасть.ДатаПроизводства > ДатыПроизводства.ДатаПроизводства
		|";
		
		СообщитьОбОшибкахЗаполнения(Объект, Запрос.Выполнить().Выбрать(), СписокРеквизитов, "ПобочныеИзделия", Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасходМатериаловИРабот
	
	Если Не ПропуститьРасход Тогда
		
		СписокРеквизитов = Новый Массив;
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "НеправильныйПериод");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В строке %1 списка ""%2"" дата расхода превышает месяц крайнего выпуска изделий по рассчитываемой стоимости.';
												|en = 'In line %1 of the ""%2"" list, the consumption date exceeds the deadline month for releasing finished products at the calculated cost.'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка      КАК Ссылка,
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА                     КАК НеправильныйПериод
		|ИЗ
		|	РасходМатериаловИРабот КАК ТабличнаяЧасть
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПроизводства КАК ДатыПроизводства
		|	ПО ДатыПроизводства.Ссылка = ТабличнаяЧасть.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
		|	ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|	ПО СпрНоменклатура.Ссылка = ТабличнаяЧасть.Номенклатура
		|
		|ГДЕ
		|	НЕ РеквизитыЭтапов.РасходОднойДатой
		|	И ТабличнаяЧасть.ДатаРасхода > ДатыПроизводства.ДатаПроизводства
		|";
		
		СообщитьОбОшибкахЗаполнения(Объект, Запрос.Выполнить().Выбрать(), СписокРеквизитов, "РасходМатериаловИРабот", Отказ);
		
		СписокРеквизитов = Новый Массив;
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаРасхода", "НеправильныйПериод");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата расхода превышает месяц крайнего выпуска изделий по рассчитываемой стоимости.';
												|en = 'The consumption date exceeds the deadline month for releasing finished products at the calculated cost.'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка      КАК Ссылка,
		|	ИСТИНА                     КАК НеправильныйПериод
		|ИЗ
		|	РасходМатериаловИРабот КАК ТабличнаяЧасть
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПроизводства КАК ДатыПроизводства
		|	ПО ДатыПроизводства.Ссылка = ТабличнаяЧасть.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
		|	ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|	ПО СпрНоменклатура.Ссылка = ТабличнаяЧасть.Номенклатура
		|
		|ГДЕ
		|	РеквизитыЭтапов.РасходОднойДатой
		|	И ТабличнаяЧасть.ДатаРасхода > ДатыПроизводства.ДатаПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Ссылка
		|";
		
		СообщитьОбОшибкахЗаполнения(Объект, Запрос.Выполнить().Выбрать(), СписокРеквизитов,, Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Трудозатраты
	
	Если Не ПропуститьТрудозатраты Тогда
		
		СписокРеквизитов = Новый Массив;
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполнения", "НеправильныйПериод");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'В строке %1 списка ""%2"" дата выполнения превышает месяц крайнего выпуска изделий по рассчитываемой стоимости.';
												|en = 'In line %1 of the ""%2"" list, the fulfillment date exceeds the deadline month for releasing finished products at the calculated cost.'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка      КАК Ссылка,
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА                     КАК НеправильныйПериод
		|ИЗ
		|	Трудозатраты КАК ТабличнаяЧасть
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПроизводства КАК ДатыПроизводства
		|	ПО ДатыПроизводства.Ссылка = ТабличнаяЧасть.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
		|	ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
		|
		|ГДЕ
		|	ТабличнаяЧасть.Выполнено
		|	И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ РеквизитыЭтапов.ВыполнениеРаботОднойДатой
		|	И ТабличнаяЧасть.ДатаВыполнения > ДатыПроизводства.ДатаПроизводства
		|";
		
		СообщитьОбОшибкахЗаполнения(Объект, Запрос.Выполнить().Выбрать(), СписокРеквизитов, "Трудозатраты", Отказ);
		
		СписокРеквизитов = Новый Массив;
		
		ПараметрыПроверки = ПараметрыПроверкиРеквизитов("ДатаВыполненияРабот", "НеправильныйПериод");
		ПараметрыПроверки.ШаблонСообщения = НСтр("ru = 'Дата выполнения работ превышает месяц крайнего выпуска изделий по рассчитываемой стоимости.';
												|en = 'The work execution date exceeds the deadline month for releasing finished products at the calculated cost.'");
		СписокРеквизитов.Добавить(ПараметрыПроверки);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка      КАК Ссылка,
		|	ИСТИНА                     КАК НеправильныйПериод
		|ИЗ
		|	Трудозатраты КАК ТабличнаяЧасть
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПроизводства КАК ДатыПроизводства
		|	ПО ДатыПроизводства.Ссылка = ТабличнаяЧасть.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
		|	ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка
		|
		|ГДЕ
		|	ТабличнаяЧасть.Выполнено
		|	И НЕ ТабличнаяЧасть.Отменено
		|	И РеквизитыЭтапов.ВыполнениеРаботОднойДатой
		|	И ТабличнаяЧасть.ДатаВыполнения > ДатыПроизводства.ДатаПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Ссылка
		|";
		
		СообщитьОбОшибкахЗаполнения(Объект, Запрос.Выполнить().Выбрать(), СписокРеквизитов,, Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.Текст = "УНИЧТОЖИТЬ ДатыПроизводства";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаПроверитьДолиСтоимости(Объект, ПоляСвязи, ПолеГруппыЗатрат = "") Экспорт
	
	ТекстыЗапросов = Новый Массив;
	
	//++ Устарело_Переработка24
	ТекстыЗапросовЗаказПереработчику2_4 = ТекстыЗапросовПроверкиДолиСтоимостиВЗаказеПереработчику2_4(Объект);
	//-- Устарело_Переработка24
	ТекстыЗапросовЗаказПереработчику2_5 = ТекстыЗапросовПроверкиДолиСтоимостиВЗаказеПереработчику2_5(Объект);
	
	ТекстыЗапросовЗаказПереработчику = Неопределено;
	Если Не ТекстыЗапросовЗаказПереработчику2_5 = Неопределено Тогда
		ТекстыЗапросовЗаказПереработчику = ТекстыЗапросовЗаказПереработчику2_5;
	//++ Устарело_Переработка24
	ИначеЕсли Не ТекстыЗапросовЗаказПереработчику2_4 = Неопределено Тогда
		ТекстыЗапросовЗаказПереработчику = ТекстыЗапросовЗаказПереработчику2_4;
	//-- Устарело_Переработка24
	КонецЕсли;
	
	ТекстЗапроса = "
	|" + ?(ТекстыЗапросовЗаказПереработчику = Неопределено, "", ТекстыЗапросовЗаказПереработчику.ВременныеТаблицы) + "
	|ВЫБРАТЬ
	|	Документ.ПартияПроизводства КАК ПартияПроизводства,
	|	Таблица.Ссылка        		КАК Ссылка,
	|	Таблица.НомерСтроки    		КАК НомерСтроки,
	|	Таблица.Номенклатура   		КАК Номенклатура,
	|	Таблица.Характеристика 		КАК Характеристика,
	|	Таблица.ДоляСтоимости  		КАК ДоляСтоимости
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
	|	ПО Документ.Ссылка = Таблица.Ссылка
	|
	|ГДЕ
	|	&ОтборПартияПроизводства
	|	И Документ.Проведен
	|	И Документ.Статус <> Значение(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|	И НЕ Таблица.Отменено
	|	И &ОтборСпособРаспределенияЗатрат
	|	И &ОтборТекущийДокумент
	|" + ?(ТекстыЗапросовЗаказПереработчику = Неопределено, "", ТекстыЗапросовЗаказПереработчику.Источник) + "
	|;
	|////////////////////////////////////////////////////////////////
	|" + ПроизводствоСервер.ТекстЗапросаПроверитьДолиСтоимостиВыходныхИзделий(ПоляСвязи, ПолеГруппыЗатрат) + "
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПартияПроизводства",
		?(ТекстыЗапросовЗаказПереработчику = Неопределено,
			"Документ.ПартияПроизводства В(&ПартияПроизводства)",
			"Документ.ПартияПроизводства В(" + ТекстыЗапросовЗаказПереработчику.ПартииПоДолямСтоимости + ")"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборТекущийДокумент",
		?(ТекстыЗапросовЗаказПереработчику = Неопределено,
			"(ИСТИНА)",
			"НЕ Документ.Ссылка В(" + ТекстыЗапросовЗаказПереработчику.Этапы + ")"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСпособРаспределенияЗатрат",
		?(ТекстыЗапросовЗаказПереработчику = Неопределено,
			"&СпособРаспределенияЗатратНаВыходныеИзделия = Значение(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)",
			"(ИСТИНА)"));
		
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.ПартияПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	&ОтборПартияПроизводства
	|	И Таблица.Проведен
	|	И Таблица.Статус <> Значение(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
	|	И Таблица.НомерСледующегоЭтапа = 0 //ЭтоВыпускающийЭтап()
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ПартияПроизводства	
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таблица.СпособРаспределенияЗатратНаВыходныеИзделия) > 1
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПартияПроизводства",
		?(ТекстыЗапросовЗаказПереработчику = Неопределено, 
			"Таблица.ПартияПроизводства В(&ПартияПроизводства)",
			"Таблица.ПартияПроизводства В(" + ТекстыЗапросовЗаказПереработчику.Партии + ")"));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);

	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ Устарело_Переработка24

Функция ТекстыЗапросовПроверкиДолиСтоимостиВЗаказеПереработчику2_4(Объект)
	
	Если Не ТипЗнч(Объект) = Тип("ОбработкаОбъект.РедактированиеЭтаповПроизводства") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Структура;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИсточник.Распоряжение   КАК Этап,
	|	ТаблицаИсточник.НомерСтроки    КАК НомерСтроки,
	|	ТаблицаИсточник.Номенклатура   КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика КАК Характеристика,
	|	ТаблицаИсточник.ДоляСтоимости  КАК ДоляСтоимости,
	|	ТаблицаИсточник.Отменено       КАК Отменено
	|ПОМЕСТИТЬ ТаблицаИсточник
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник
	|ГДЕ
	|	НЕ ТаблицаИсточник.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.ПартияПроизводства						 КАК ПартияПроизводства,
	|	Документы.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатрат
	|ПОМЕСТИТЬ ТаблицаПартии
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточник КАК ТаблицаИсточник
	|		ПО Документы.Ссылка = ТаблицаИсточник.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособРаспределенияЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточник.Этап КАК Этап
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	ТаблицаИсточник КАК ТаблицаИсточник
	|";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстыЗапросов.Вставить("ВременныеТаблицы", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеквизитыЭтапа.ПартияПроизводства	КАК ПартияПроизводства,
	|	НЕОПРЕДЕЛЕНО						КАК Ссылка,
	|	ТаблицаИсточник.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаИсточник.Номенклатура		КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика		КАК Характеристика,
	|	ТаблицаИсточник.ДоляСтоимости		КАК ДоляСтоимости
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточник КАК ТаблицаИсточник
	|		ПО РеквизитыЭтапа.Ссылка = ТаблицаИсточник.Этап
	|ГДЕ
	|	РеквизитыЭтапа.СпособРаспределенияЗатратНаВыходныеИзделия = 
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)
	|";
	
	ТекстЗапроса = ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() + ТекстЗапроса;
	ТекстыЗапросов.Вставить("Источник", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Этап КАК Этап
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|";
	
	ТекстыЗапросов.Вставить("Этапы", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПартии.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ТаблицаПартии КАК ТаблицаПартии
	|";
	
	ТекстыЗапросов.Вставить("Партии", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПартии.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ТаблицаПартии КАК ТаблицаПартии
	|ГДЕ
	|	ТаблицаПартии.СпособРаспределенияЗатрат = 
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)
	|";
	
	ТекстыЗапросов.Вставить("ПартииПоДолямСтоимости", ТекстЗапроса);
	
	Возврат ТекстыЗапросов;
	
КонецФункции
//-- Устарело_Переработка24

Функция ТекстыЗапросовПроверкиДолиСтоимостиВЗаказеПереработчику2_5(Объект)
	
	Если Не ТипЗнч(Объект) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Структура;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИсточник.Ссылка         КАК Этап,
	|	ТаблицаИсточник.НомерСтроки    КАК НомерСтроки,
	|	ТаблицаИсточник.Номенклатура   КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика КАК Характеристика,
	|	ТаблицаИсточник.ДоляСтоимости  КАК ДоляСтоимости,
	|	ТаблицаИсточник.Отменено       КАК Отменено
	|ПОМЕСТИТЬ ТаблицаИсточник
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник
	|ГДЕ
	|	НЕ ТаблицаИсточник.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.ПартияПроизводства						 КАК ПартияПроизводства,
	|	Документы.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатрат
	|ПОМЕСТИТЬ ТаблицаПартии
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточник КАК ТаблицаИсточник
	|	ПО Документы.Ссылка = ТаблицаИсточник.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособРаспределенияЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточник.Этап КАК Этап
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	ТаблицаИсточник КАК ТаблицаИсточник
	|";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстыЗапросов.Вставить("ВременныеТаблицы", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеквизитыЭтапа.ПартияПроизводства	КАК ПартияПроизводства,
	|	НЕОПРЕДЕЛЕНО						КАК Ссылка,
	|	ТаблицаИсточник.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаИсточник.Номенклатура		КАК Номенклатура,
	|	ТаблицаИсточник.Характеристика		КАК Характеристика,
	|	ТаблицаИсточник.ДоляСтоимости		КАК ДоляСтоимости
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточник КАК ТаблицаИсточник
	|	ПО РеквизитыЭтапа.Ссылка = ТаблицаИсточник.Этап
	|ГДЕ
	|	РеквизитыЭтапа.СпособРаспределенияЗатратНаВыходныеИзделия = 
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)
	|";
	
	ТекстЗапроса = ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() + ТекстЗапроса;
	ТекстыЗапросов.Вставить("Источник", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Этап КАК Этап
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|";
	
	ТекстыЗапросов.Вставить("Этапы", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПартии.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ТаблицаПартии КАК ТаблицаПартии
	|";
	
	ТекстыЗапросов.Вставить("Партии", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПартии.ПартияПроизводства КАК ПартияПроизводства
	|ИЗ
	|	ТаблицаПартии КАК ТаблицаПартии
	|ГДЕ
	|	ТаблицаПартии.СпособРаспределенияЗатрат = 
	|		ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)
	|";
	
	ТекстыЗапросов.Вставить("ПартииПоДолямСтоимости", ТекстЗапроса);
	
	Возврат ТекстыЗапросов;
	
КонецФункции

#КонецОбласти

#Область Проведение

#Область Инициализация

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	Если ИмяРегистра = "РегистрНакопления.СебестоимостьТоваров"
		ИЛИ ИмяРегистра = "РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту" Тогда
		ИсточникиДанных.Вставить("РегистрНакопления.ТоварыОрганизаций");
	КонецЕсли;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ЭтапПроизводства2_2";
	СинонимТаблицыДокумента      = "ТабличнаяЧасть";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = ПереопределениеРасчетаПараметров(СинонимТаблицыДокумента + ".Ссылка");
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",             """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",      """""");
	ПереопределениеРасчетаПараметров.Вставить("РабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	ПереопределениеРасчетаПараметров.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям",
		Формат(ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоНазначениям"), "БЛ=Ложь; БИ=Истина"));
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "ЗаказыНаПроизводство" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПроизводство(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Неопределено, ТекстыЗапроса, ИмяРегистра);		
		
	ИначеЕсли ИмяРегистра = "РаспоряженияНаПередачуИзПроизводства" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРаспоряженияНаПередачуИзПроизводства(Неопределено, ТекстыЗапроса, Неопределено);
		
	ИначеЕсли ИмяРегистра = "ДвиженияСерийТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвиженияСерийТоваров(Неопределено, ТекстыЗапроса, Неопределено);
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Неопределено, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Неопределено, ТекстыЗапроса));
		
	ИначеЕсли ИмяРегистра = "ВыпускПродукции" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаВыпускПродукции(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыКОформлению(Неопределено, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТрудозатраты";
		
	//++ Устарело_Переработка24
	ИначеЕсли ИмяРегистра = "УслугиДавальцуКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Неопределено, ТекстыЗапроса, Неопределено);
	//-- Устарело_Переработка24
	ИначеЕсли ИмяРегистра = "ТоварыОрганизаций" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыОрганизаций(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "ОтражениеДокументовВРеглУчете" Тогда
		
		ЭтапПроизводства2_2Локализация.ДополнитьТекстыЗапросовПроведения(Неопределено, ТекстыЗапроса, ИмяРегистра);
		ТекстЗапроса = ТекстыЗапроса[ТекстыЗапроса.Количество() - 1].Значение;
		
	ИначеЕсли ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	ИначеЕсли ИмяРегистра = "СтруктураЗаказа" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСтруктураЗаказа(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтВсеИзделия", ТекстЗапросаВтВсеИзделия(ТекстыЗапроса));
		
		ЗначенияПараметров.Вставить("ПустойКлючСвязи", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыСтруктурыЗаказа" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыСтруктурыЗаказа(Неопределено, ТекстыЗапроса, ИмяРегистра);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
	 Или ИмяРегистра = "СтруктураЗаказа"
	 Или ИмяРегистра = "ТрудозатратыСтруктурыЗаказа" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстыЗапросаДляФормированияДвижений(
			Запрос,
			Регистры = Неопределено,
			ДопПараметры = Неопределено,
			ДокументОбъект = Неопределено)
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		//++ Устарело_Переработка24
		ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры);
		//-- Устарело_Переработка24
		ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРаспоряженияНаПередачуИзПроизводства(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыНаПроизводство(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСтруктураЗаказа(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТрудозатратыСтруктурыЗаказа(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(
			Запрос.Параметры.Ссылка, Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		
		ЭтапПроизводства2_2Локализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ОформитьПоступлениеТоваровПоОдноходовке(Запрос, ТекстыЗапроса, Регистры);
	
	ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	Возврат ТекстыЗапроса;
	
КонецФункции

// Заполняет параметры запроса, которые не зависят от конкретного экземпляра документа.
//
// Параметры:
//  Запрос - Запрос - запрос, инициализирующий данные документа.
//
Процедура ЗаполнитьПараметрыИнициализации(Запрос) Экспорт
	
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ПустаяСсылкаНазначение",Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаРаспоряжение", Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаЭтап", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.УстановитьПараметр(
		"РабочийГрафик", 
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	Запрос.УстановитьПараметр(
		"ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", 
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр(
		"АналитическийУчетПоГруппамПродукции", 
		ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции"));
		
	Запрос.УстановитьПараметр(
		"ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭтапПроизводства2_2")));
	
	РасчетСебестоимостиЛокализация.ДополнитьПараметрыЗапросаКонстантамиПоНДД(Запрос);
	
КонецПроцедуры

// Заполняет параметры запроса, которые зависят от конкретного экземпляра документа.
//
// Параметры:
//  Запрос - Запрос - запрос, инициализирующий данные документа.
//
Процедура ЗаполнитьПараметрыИнициализацииПоСсылке(Запрос)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка                             КАК Ссылка,
		|	Реквизиты.Дата                               КАК Период,
		|	Реквизиты.Статус                             КАК Статус,
		|	Реквизиты.Организация                        КАК Организация,
		|	Реквизиты.ВнутренняяПереработка              КАК ВнутренняяПереработка,
		|	Реквизиты.ОрганизацияДавалец                 КАК ОрганизацияДавалец,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Реквизиты.НазначениеПродукция.ВидДеятельностиНДС,ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|			ТОГДА Реквизиты.НазначениеПродукция.ВидДеятельностиНДС
		|		ИНАЧЕ Реквизиты.ВыпускПодДеятельность
		|	КОНЕЦ										 КАК ВыпускПодДеятельность,
		|	Реквизиты.Валюта                             КАК Валюта,
		|	Реквизиты.Подразделение                      КАК Подразделение,
		|	Реквизиты.Назначение                         КАК Назначение,
		|	Реквизиты.ПартияПроизводства                 КАК ПартияПроизводства,
		|	Реквизиты.ПартияПроизводства.ГруппаПродукции КАК ГруппаПродукции,
		|	Реквизиты.ПартияПроизводства.ВидДеятельностиНДС КАК ВидДеятельностиНДСНЗП,
		|	Реквизиты.Спецификация                       КАК Спецификация,
		|	Реквизиты.Распоряжение                       КАК Распоряжение,
		|	Реквизиты.ФактическоеНачалоЭтапа             КАК ФактическоеНачалоЭтапа,
		|	Реквизиты.ФактическоеОкончаниеЭтапа          КАК ФактическоеОкончаниеЭтапа,
		|	Реквизиты.РучноеРазмещениеВГрафике           КАК РучноеРазмещениеВГрафике,
		|	Реквизиты.ДатаОтгрузки                       КАК ДатаОтгрузки,
		|	Реквизиты.ДатаОтгрузки                       КАК ЖелаемаяДатаОбеспечения,
		|	Реквизиты.ПроизводствоНаСтороне              КАК ПроизводствоНаСтороне,
		|	Реквизиты.ПроизводствоНаСтороне2_5           КАК ПроизводствоНаСтороне2_5,
		|	Реквизиты.ОставитьИзделияУПереработчика КАК ОставитьИзделияУПереработчика,
		|	Реквизиты.Партнер                            КАК Партнер,
		|	Реквизиты.НаправлениеДеятельности            КАК НаправлениеДеятельности,
		|	Реквизиты.Номер                              КАК Номер,
		|	Реквизиты.НомерНаПечать                      КАК НомерНаПечать,
		|	Реквизиты.Ответственный                      КАК Ответственный,
		|	Реквизиты.Комментарий                        КАК Комментарий,
		|	Реквизиты.Проведен                           КАК Проведен,
		|	Реквизиты.ПометкаУдаления                    КАК ПометкаУдаления,
		|	Реквизиты.ВариантПриемкиТоваров              КАК ВариантПриемкиТоваров,
		|	Реквизиты.ЯвляетсяНазначениемПродукции       КАК ЯвляетсяНазначениемПродукции,
		|	Реквизиты.ТипПроизводственногоПроцесса       КАК ТипПроизводственногоПроцесса,
		|	Реквизиты.ОперацияКакРаспоряжениеВыработки   КАК ОперацияКакРаспоряжениеВыработки,
		|	Реквизиты.ДинамическаяСтруктура              КАК ДинамическаяСтруктура,
		|	Реквизиты.УникальныйИдентификатор            КАК УникальныйИдентификатор,
		|	Реквизиты.Подразделение.ИспользоватьПооперационноеУправление КАК ИспользоватьПооперационноеУправление,
		|	&ПереопределяемыеПоля
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка
		|";
	
	ПереопределяемыеПоля = "";
	
	ПереопределениеРасчетаПараметров = ПереопределениеРасчетаПараметров("Реквизиты");
	Для каждого КлючИЗначение Из ПереопределениеРасчетаПараметров Цикл
		
		ПереопределяемыеПоля = ПереопределяемыеПоля
			+ ?(ЗначениеЗаполнено(ПереопределяемыеПоля), "," + Символы.ПС, "")
			+ КлючИЗначение.Значение
			+ " КАК "
			+ КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПереопределяемыеПоля", ПереопределяемыеПоля);
	
	Запрос.Текст = ТекстЗапроса;
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ПериодыДвижений.Период, МЕСЯЦ) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Дата КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаПроизводства КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|		И ТаблицаТовары.Произведено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаПроизводства КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|		И ТаблицаТовары.Произведено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаОтгрузки КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|		И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|		И НЕ ТаблицаТовары.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаРасхода КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.ДатаОперации КАК Период
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	) КАК ПериодыДвижений
	|";
	
	МассивПериодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Период");
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализацииПоПериодам(
		Запрос,
		Запрос.Параметры,
		МассивПериодов);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасчетаСебестоимости(Запрос, ДопПараметры)
	
	ДополнительныеСвойства = Неопределено;
	
	Если ДопПараметры = Неопределено Тогда
		ДополнительныеСвойства = Новый Структура;
	ИначеЕсли ДопПараметры.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) Тогда
		ДополнительныеСвойства = ?(ДополнительныеСвойства <> Неопределено,
									ДопПараметры.ДополнительныеСвойства,
									Новый Структура);
	Иначе
		ДополнительныеСвойства = ДопПараметры;
	КонецЕсли;
	
	// Если период заполнения не задан, то переформировываются все движения документа.
	// Перезапись всех движений требуется для обработчиков обновления и процедур восстановления движений.
	ПериодЗаполнения = Неопределено;
	
	// Если документ проводится интерактивно или период заполнения передан, то сохраняем движения
	// до периода заполнения, а движения с начала периода заполнения переформировываются.
	Если ДополнительныеСвойства.Свойство("ПериодПерезаписиДвижений")
	 И НЕ РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().НеСохранятьРасчетныеДвижения Тогда
		
		ПериодЗаполнения = ДополнительныеСвойства.ПериодПерезаписиДвижений;
		
		КонецПериодаСохраняемыхДвижений = НачалоМесяца(ПериодЗаполнения) - 1;
		
		РегистрыНакопления.СебестоимостьТоваров.ИнициализироватьСохранениеДвиженийДокументаЗаПериод(
			ДополнительныеСвойства, // доп. свойства документа
			, // начало периода сохраняемых движений
			КонецПериодаСохраняемыхДвижений);
			
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодПерезаписиДвижений", ПериодЗаполнения);
	
КонецПроцедуры

Функция ПереопределениеРасчетаПараметров(ОсновнаяТаблица)
	
	Результат = Новый Структура;
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР
		//++ Устарело_Переработка24
		|	КОГДА ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Партнер
		//-- Устарело_Переработка24
		|	КОГДА ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Партнер
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("Переработчик", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		//++ Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|		ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику
		//-- Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|		ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику
		|	ИНАЧЕ %ОсновнаяТаблица%.Ссылка
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ДокументПоступления", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		//++ Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В(
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|		ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику 
		//-- Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В(
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|		ТОГДА %ОсновнаяТаблица%.ЗаказПереработчику 
		|	ИНАЧЕ НЕОПРЕДЕЛЕНО
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ЗаказПереработчику", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		//++ Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Контрагент
		//-- Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Контрагент
		|	КОГДА НЕ %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И %ОсновнаяТаблица%.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		ТОГДА %ОсновнаяТаблица%.Договор.Контрагент 
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("Контрагент", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		//++ Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Партнер
		//-- Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Партнер
		|	КОГДА НЕ %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|		ТОГДА %ОсновнаяТаблица%.Партнер
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ПартнерРеестраДокументов", ТекстПараметра);
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		//++ Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Договор
		//-- Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Договор
		|	КОГДА НЕ %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|		ТОГДА %ОсновнаяТаблица%.Договор
		|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("Договор", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		//++ Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Приоритет
		//-- Устарело_Переработка24
		|	КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|		ТОГДА ВЫРАЗИТЬ(%ОсновнаяТаблица%.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Приоритет
		|	ИНАЧЕ %ОсновнаяТаблица%.Распоряжение.Приоритет
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ПриоритетРеестраДокументов", ТекстПараметра);
	
	ТекстПараметра = СтрЗаменить(
		"ВЫБОР 
		//++ Устарело_Переработка24
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоУПереработчика)
		//-- Устарело_Переработка24
		|		КОГДА %ОсновнаяТаблица%.ПроизводствоНаСтороне
		|			И ТИПЗНАЧЕНИЯ(%ОсновнаяТаблица%.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоУПереработчика2_5)
		|		КОГДА %ОсновнаяТаблица%.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ТОГДА %ОсновнаяТаблица%.ХозяйственнаяОперация
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)
		|КОНЕЦ",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ХозяйственнаяОперация", ТекстПараметра);
	
	Результат.Вставить("ПустаяСсылкаНазначение", "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");
	
	
	ТекстПараметра = СтрЗаменить(
		"%ОсновнаяТаблица%.Распоряжение.УникальныйИдентификаторСтрока",
		"%ОсновнаяТаблица%",
		ОсновнаяТаблица);
	Результат.Вставить("ИдентификаторРаспоряжения", ТекстПараметра);
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)

	Если Запрос = Неопределено ИЛИ Запрос.Параметры.Свойство("КлючиАналитикиНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСтатус = Неопределено;
	Если Не Запрос.Параметры.Свойство("Статус", ТекущийСтатус)
	 Или (ТекущийСтатус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат
			И ТекущийСтатус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	//++ Устарело_Переработка24
	ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса);
	//-- Устарело_Переработка24
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Склад                        КАК Склад,
	|	ТаблицаТовары.Подразделение                КАК Подразделение,
	|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
	|	ТаблицаТовары.Характеристика               КАК Характеристика,
	|	ТаблицаТовары.СтатьяКалькуляции            КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ                                      КАК СерияОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ							           КАК СерияПолучатель,
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ ОбеспечениеМатериаламиИРаботами 
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Подразделение		           КАК Подразделение,
	|	ТаблицаТовары.Получатель                   КАК Получатель,
	|	ТаблицаТовары.Номенклатура		           КАК Номенклатура,
	|	ТаблицаТовары.Характеристика	           КАК Характеристика,
	|	ТаблицаТовары.Назначение                   КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ							           КАК СерияОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ                                      КАК СерияПолучатель,
	|	ТаблицаТовары.СписатьНаРасходы             КАК СписатьНаРасходы,
	//++ Устарело_Переработка24
	|	ТаблицаТовары.ОформитьОтчетДавальцу        КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТовары.Произведено                  КАК Произведено,
	|	ТаблицаТовары.Отменено                     КАК Отменено,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры
	|ПОМЕСТИТЬ ВыходныеИзделия
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	//++ Устарело_Переработка24
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОформитьОтчетДавальцу
	//-- Устарело_Переработка24
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Подразделение		           КАК Подразделение,
	|	ТаблицаТовары.Получатель		           КАК Получатель,
	|	ТаблицаТовары.Номенклатура		           КАК Номенклатура,
	|	ТаблицаТовары.Характеристика	           КАК Характеристика,
	|	ТаблицаТовары.Назначение                   КАК Назначение,
	|	ТаблицаТовары.СтатьяКалькуляции	           КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ							           КАК СерияОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ							           КАК СерияПолучатель,
	|	ТаблицаТовары.СписатьНаРасходы             КАК СписатьНаРасходы,
	//++ Устарело_Переработка24
	|	ТаблицаТовары.ОформитьОтчетДавальцу        КАК ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ ПобочныеИзделия
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	//++ Устарело_Переработка24
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОформитьОтчетДавальцу
	//-- Устарело_Переработка24
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.МестоХранения		КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|	ТаблицаТовары.Характеристика	КАК Характеристика,
	|	ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|	ТаблицаТовары.Назначение		КАК Назначение,
	|	ТаблицаТовары.Серия				КАК Серия
	|ИЗ
	|	(
	// Обеспечение по отправителю без назначения
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Склад			   КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура	   КАК Номенклатура,
	|		ТаблицаТовары.Характеристика   КАК Характеристика,
	|		&ПустаяСтатья				   КАК СтатьяКалькуляции,
	|		&ПустоеНазначение			   КАК Назначение,
	|		ТаблицаТовары.СерияОтправитель КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры  КАК ТипНоменклатуры
	|	ИЗ
	|		ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Обеспечение по получателю без назначения
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение	  КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура	  КАК Номенклатура,
	|		ТаблицаТовары.Характеристика  КАК Характеристика,
	|		&ПустаяСтатья				  КАК СтатьяКалькуляции,
	|		&ПустоеНазначение			  КАК Назначение,
	|		ТаблицаТовары.СерияПолучатель КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры КАК ТипНоменклатуры
	|	ИЗ
	|		ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Обеспечение по НЗП (план по материалам в НЗП)
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&Назначение						КАК Назначение,
	|		ТаблицаТовары.СерияПолучатель   КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Расход без назначения
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия,
	|		ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Расход комиссионных товаров
	|	ВЫБРАТЬ
	|		ВидыЗапасов.ВидЗапасов.ВладелецТовара	КАК МестоХранения,
	|		Аналитика.Номенклатура					КАК Номенклатура,
	|		Аналитика.Характеристика				КАК Характеристика,
	|		&ПустаяСтатья							КАК СтатьяКалькуляции,
	|		&ПустоеНазначение						КАК Назначение,
	|		&ПустаяСерия							КАК Серия,
	|		Аналитика.Номенклатура.ТипНоменклатуры  КАК ТипНоменклатуры
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ВидыЗапасов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ГДЕ
	|		ВидыЗапасов.Ссылка = &Ссылка
	|		И ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Экономия без назначения
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Получатель		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|				ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ &ПустаяСерия
	|		КОНЕЦ							КАК Серия,
	|		ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И НЕ ТаблицаТовары.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия без назначения по отправителю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ТаблицаТовары.СерияОтправитель  КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ВыходныеИзделия КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия для внутренней переработки по отправителю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение   КАК МестоХранения,
	|		Аналитика.Номенклатура        КАК Номенклатура,
	|		Аналитика.Характеристика      КАК Характеристика,
	|		Аналитика.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|		Аналитика.Назначение          КАК Назначение,
	|		Аналитика.Серия               КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры КАК ТипНоменклатуры
	|	ИЗ
	|		ВыходныеИзделия КАК ТаблицаТовары
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Ссылка = ТаблицаТовары.АналитикаУчетаНоменклатуры
	|	ГДЕ
	|		ТаблицаТовары.Произведено
	|		И НЕ ТаблицаТовары.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия без назначения по получателю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Получатель		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ТаблицаТовары.СерияПолучатель   КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ВыходныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		НЕ ТаблицаТовары.Получатель = ТаблицаТовары.Подразделение
	|		И НЕ ТаблицаТовары.СписатьНаРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Побочные изделия без назначения по отправителю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ТаблицаТовары.СерияОтправитель  КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия без назначения по получателю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Получатель		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ТаблицаТовары.СерияПолучатель   КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		НЕ ТаблицаТовары.Получатель = ТаблицаТовары.Подразделение
	|		И НЕ ТаблицаТовары.СписатьНаРасходы
	//++ Устарело_Переработка24
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по выходным изделиям с назначением
	|	ВЫБРАТЬ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение	КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		&ПустаяСтатья										КАК СтатьяКалькуляции,
	|		ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот	КАК Назначение,
	|		&ПустаяСерия										КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры                       КАК ТипНоменклатуры
	|	ИЗ
	|		ВыходныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.ОформитьОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по выходным изделиям без назначения
	|	ВЫБРАТЬ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		&ПустаяСерия					КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ВыходныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.ОформитьОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по побочным изделиям с назначением
	|	ВЫБРАТЬ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение	КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура							КАК Номенклатура,
	|		ТаблицаТовары.Характеристика						КАК Характеристика,
	|		&ПустаяСтатья										КАК СтатьяКалькуляции,
	|		ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот	КАК Назначение,
	|		&ПустаяСерия										КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры                       КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.ОформитьОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Работы давальца по побочным изделиям без назначения
	|	ВЫБРАТЬ
	|		ТаблицаЗаказовДавальцаПоНазначениям.Подразделение КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		&ПустаяСтатья					КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		&ПустаяСерия					КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|		ПО ТаблицаТовары.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|	
	|	ГДЕ
	|		ТаблицаТовары.ОформитьОтчетДавальцу
	//-- Устарело_Переработка24
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия по НЗП с назначением по отправителю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&Назначение						КАК Назначение,
	|		ТаблицаТовары.СерияОтправитель  КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия по НЗП без назначения по отправителю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ТаблицаТовары.СерияОтправитель  КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия по НЗП с назначением по получателю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&Назначение						КАК Назначение,
	|		ТаблицаТовары.СерияПолучатель   КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Побочные изделия по НЗП без назначения по получателю
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Подразделение		КАК МестоХранения,
	|		ТаблицаТовары.Номенклатура		КАК Номенклатура,
	|		ТаблицаТовары.Характеристика	КАК Характеристика,
	|		ТаблицаТовары.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|		&ПустоеНазначение				КАК Назначение,
	|		ТаблицаТовары.СерияПолучатель   КАК Серия,
	|		ТаблицаТовары.ТипНоменклатуры   КАК ТипНоменклатуры
	|	ИЗ
	|		ПобочныеИзделия КАК ТаблицаТовары
	|	) КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|			ГДЕ
	|				Аналитика.Номенклатура        = ТаблицаТовары.Номенклатура
	|				И Аналитика.Характеристика    = ТаблицаТовары.Характеристика
	|				И Аналитика.Серия             = ТаблицаТовары.Серия
	|				И Аналитика.МестоХранения     = ТаблицаТовары.МестоХранения
	|				И Аналитика.Назначение        = ТаблицаТовары.Назначение
	|				И Аналитика.СтатьяКалькуляции = ТаблицаТовары.СтатьяКалькуляции)
	|
	|	И (НЕ ТаблицаТовары.МестоХранения В (&ПустыеМестаХранения)
	|		ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И НЕ (ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И ТаблицаТовары.Назначение <> &ПустоеНазначение
	|			И НЕ ТИПЗНАЧЕНИЯ(ТаблицаТовары.МестоХранения) = ТИП(Справочник.СтруктураПредприятия)
	|		)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.МестоХранения,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.СтатьяКалькуляции,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ЗапросАналитики = Новый Запрос;
	ЗапросАналитики.Текст = СтрСоединить(ТекстыЗапроса.ВыгрузитьЗначения(), ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ПустыеМестаХранения = Новый Массив;
	ПустыеМестаХранения.Добавить(Неопределено);
	ПустыеМестаХранения.Добавить(Справочники.Склады.ПустаяСсылка());
	ПустыеМестаХранения.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ЗапросАналитики.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитики.УстановитьПараметр("Назначение",             Запрос.Параметры.Назначение);
	ЗапросАналитики.УстановитьПараметр("ПустаяСерия",            Справочники.СерииНоменклатуры.ПустаяСсылка());
	ЗапросАналитики.УстановитьПараметр("ПустаяСтатья",           Справочники.СтатьиКалькуляции.ПустаяСсылка());
	ЗапросАналитики.УстановитьПараметр("ПустоеНазначение",       Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитики.УстановитьПараметр("ПустыеМестаХранения",    ПустыеМестаХранения);
	
	Выборка = ЗапросАналитики.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;

	Запрос.УстановитьПараметр("КлючиАналитикиНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаТаблицаКоэффициентыПересчетаВалют(Запрос)
	
	ЗапросКурсов = Новый Запрос;
	ЗапросКурсов.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПроизводства.Период КАК Период
		|ПОМЕСТИТЬ втПериоды
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(Изделия.ДатаПроизводства, ДЕНЬ) КАК Период
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
		|	ГДЕ
		|		Изделия.Ссылка = &Ссылка
		|		И Изделия.Произведено
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(ЭтапПроизводства2_2ПобочныеИзделия.ДатаПроизводства, ДЕНЬ)
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ЭтапПроизводства2_2ПобочныеИзделия
		|	ГДЕ
		|		ЭтапПроизводства2_2ПобочныеИзделия.Ссылка = &Ссылка
		|		И НЕ ЭтапПроизводства2_2ПобочныеИзделия.Отменено) КАК ПериодыПроизводства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалют.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ЕСТЬNULL(КурсыВалют.БазоваяВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК БазоваяВалюта,
		|	втПериоды.Период КАК Период,
		|	МАКСИМУМ(ЕСТЬNULL(КурсыВалют.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПоследнегоКурса
		|ПОМЕСТИТЬ втДатыПоследнихКурсовВалют
		|ИЗ
		|	втПериоды КАК втПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
		|		ПО (КурсыВалют.Период <= втПериоды.Период)
		|			И (КурсыВалют.Валюта = &ВалютаРеглУчета
		|				ИЛИ КурсыВалют.Валюта = &ВалютаУпрУчета
		|				ИЛИ КурсыВалют.Валюта = &ВалютаДокумента)
		|			И (КурсыВалют.БазоваяВалюта = &ВалютаРеглУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	втПериоды.Период,
		|	ЕСТЬNULL(КурсыВалют.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
		|	ЕСТЬNULL(КурсыВалют.БазоваяВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаРеглУчета
		|				ТОГДА КурсыВалют.КурсЧислитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсРеглУчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаРеглУчета
		|				ТОГДА КурсыВалют.КурсЗнаменатель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КратностьРеглУчета,
		|	втДатыПоследнихКурсовВалют.Период КАК Период,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаУпрУчета
		|				ТОГДА КурсыВалют.КурсЧислитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсУпрУчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаУпрУчета
		|				ТОГДА КурсыВалют.КурсЗнаменатель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КратностьУпрУчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаДокумента
		|				ТОГДА КурсыВалют.КурсЧислитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсДокумента,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ КурсыВалют.Валюта ЕСТЬ NULL
		|					И КурсыВалют.Валюта = &ВалютаДокумента
		|				ТОГДА КурсыВалют.КурсЗнаменатель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КратностьДокумента
		|ПОМЕСТИТЬ втКурсыВалютНаДату
		|ИЗ
		|	втДатыПоследнихКурсовВалют КАК втДатыПоследнихКурсовВалют
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
		|		ПО втДатыПоследнихКурсовВалют.ДатаПоследнегоКурса = КурсыВалют.Период
		|			И втДатыПоследнихКурсовВалют.БазоваяВалюта = КурсыВалют.БазоваяВалюта
		|			И втДатыПоследнихКурсовВалют.Валюта = КурсыВалют.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	втДатыПоследнихКурсовВалют.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКурсыВалютНаДату.Период,
		|	ВЫБОР
		|		КОГДА втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсУпрУчета = 0
		|			ТОГДА 1
		|		ИНАЧЕ втКурсыВалютНаДату.КурсДокумента * втКурсыВалютНаДату.КратностьУпрУчета / (втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсУпрУчета)
		|	КОНЕЦ КАК КоэффициентПересчетаВВалютуУпр,
		|	ВЫБОР
		|		КОГДА втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсРеглУчета = 0
		|			ТОГДА 1
		|		ИНАЧЕ втКурсыВалютНаДату.КурсДокумента * втКурсыВалютНаДату.КратностьРеглУчета / (втКурсыВалютНаДату.КратностьДокумента * втКурсыВалютНаДату.КурсРеглУчета)
		|	КОНЕЦ КАК КоэффициентПересчетаВВалютуРегл
		|ИЗ
		|	втКурсыВалютНаДату КАК втКурсыВалютНаДату";

	ЗапросКурсов.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросКурсов.УстановитьПараметр("ВалютаДокумента", Запрос.Параметры.Валюта);
	ЗапросКурсов.УстановитьПараметр("ВалютаУпрУчета",  Константы.ВалютаУправленческогоУчета.Получить());
	ЗапросКурсов.УстановитьПараметр("ВалютаРеглУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос.Параметры.Ссылка, "Организация")));
	
	Запрос.УстановитьПараметр("ВтКоэффициентыПересчетаВалют", ЗапросКурсов.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаПустаяАналитикаУчетаПартий(Запрос)
	
	Если Не Запрос.Параметры.Свойство("АналитикаУчетаПартийТоваров") Тогда
		ОтборПоАналитикеПартии = Новый Структура("Дата, ВидЦенности", Запрос.Параметры.Период, Перечисления.ВидыЦенностей.Товары);
		Запрос.УстановитьПараметр("АналитикаУчетаПартийТоваров",
									Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(ОтборПоАналитикеПартии));
	КонецЕсли;
	
	Если Не Запрос.Параметры.Свойство("АналитикаУчетаПартийРабот") Тогда
		ОтборПоАналитикеПартии = Новый Структура("Дата, ВидЦенности", Запрос.Параметры.Период, Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Запрос.УстановитьПараметр("АналитикаУчетаПартийРабот",
									Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(ОтборПоАналитикеПартии));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовПроведения

#Область ТекстыЗапросовВременныеТаблицы

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Подразделения.Организация                   КАК Организация,
	|	Подразделения.ХозяйственнаяОперация	        КАК ХозяйственнаяОперация,
	|	Подразделения.Ссылка				        КАК Ссылка,
	|	Подразделения.Дата					        КАК Дата,
	|	Подразделения.Подразделение			        КАК Подразделение,
	|	МИНИМУМ(Подразделения.ДополнительнаяЗапись)	КАК ДополнительнаяЗапись
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	(
	// Основная запись реестра документов
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.Организация					КАК Организация,
	|		ТабличнаяЧасть.ОперацияРеестраДокументов	КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка						КАК Ссылка,
	|		ТабличнаяЧасть.ДатаРеестраДокументов		КАК Дата,
	|		ТабличнаяЧасть.Подразделение				КАК Подразделение,
	|		ЛОЖЬ										КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате выпуска продукции
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Ссылка.ВнутренняяПереработка
	|				ТОГДА ТабличнаяЧасть.Ссылка.ОрганизацияДавалец
	|			ИНАЧЕ ТабличнаяЧасть.Ссылка.Организация
	|		КОНЕЦ							КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка			КАК Ссылка,
	|		ТабличнаяЧасть.ДатаПроизводства	КАК Дата,
	|		ТабличнаяЧасть.Подразделение	КАК Подразделение,
	|		ИСТИНА							КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В (&Ссылка)
	|		И ТабличнаяЧасть.Произведено
	|		И НЕ ТабличнаяЧасть.Отменено
	|		И НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате выпуска побочных изделий
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА НЕ ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.ВладелецИзделия
	|			КОГДА ТабличнаяЧасть.Ссылка.ВнутренняяПереработка
	|				ТОГДА ТабличнаяЧасть.Ссылка.ОрганизацияДавалец
	|			ИНАЧЕ ТабличнаяЧасть.Ссылка.Организация
	|		КОНЕЦ							КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка			КАК Ссылка,
	|		ТабличнаяЧасть.ДатаПроизводства	КАК Дата,
	|		ТабличнаяЧасть.Подразделение	КАК Подразделение,
	|		ИСТИНА							КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В (&Ссылка)
	|		И ТабличнаяЧасть.Произведено
	|		И НЕ ТабличнаяЧасть.Отменено
	|		И НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате потребления/экономии материалов
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(ТабличнаяЧасть.ВидЗапасов.Организация, ТабличнаяЧасть.Ссылка.Организация) КАК Организация,
	|		ТабличнаяЧасть.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка                 КАК Ссылка,
	|		ТабличнаяЧасть.ДатаОперации           КАК Дата,
	|		ТабличнаяЧасть.Подразделение          КАК Подразделение,
	|		ИСТИНА                                КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В (&Ссылка)
	|		И НЕ ТабличнаяЧасть.ДатаОперации = ДАТАВРЕМЯ(1,1,1)
	|		И ТабличнаяЧасть.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства))
	|		И (НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|			ИЛИ НЕ ДанныеДокумента.ОперацияРеестраДокументов = ТабличнаяЧасть.ХозяйственнаяОперация)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Выпускающее подразделение по дате потребления работ
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства) КАК ХозяйственнаяОперация,
	|		ТабличнаяЧасть.Ссылка			КАК Ссылка,
	|		ТабличнаяЧасть.ДатаРасхода		КАК Дата,
	|		ТабличнаяЧасть.Подразделение	КАК Подразделение,
	|		ИСТИНА							КАК ДополнительнаяЗапись
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТабличнаяЧасть.Ссылка
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В (&Ссылка)
	|		И НЕ ТабличнаяЧасть.ДатаРасхода = ДАТАВРЕМЯ(1,1,1)
	|		И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		И (НЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаРасхода, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеДокумента.ДатаРеестраДокументов, ДЕНЬ)
	|			ИЛИ НЕ ДанныеДокумента.ОперацияРеестраДокументов = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|	) КАК Подразделения
	|
	|СГРУППИРОВАТЬ ПО
	|	Подразделения.Организация,
	|	Подразделения.Ссылка,
	|	Подразделения.Подразделение,
	|	Подразделения.Дата,
	|	Подразделения.ХозяйственнаяОперация
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКоэффициентыПересчетаВалют";
	
	УстановитьПараметрЗапросаТаблицаКоэффициентыПересчетаВалют(Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВтКоэффициентыПересчетаВалют.Период,
		|	ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр,
		|	ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл
		|ПОМЕСТИТЬ ВтКоэффициентыПересчетаВалют
		|ИЗ
		|	&ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""ВыходныеИзделия""	КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки	КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО					КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО					КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО					КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО					КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)
	|	КОНЕЦ							КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.ПартионныйУчетВерсии22
	|			ТОГДА ТаблицаДокумента.КодСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ							КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаПроизводства, МЕСЯЦ)
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.Отменено
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаОперации                  КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ВидЗапасов.Организация        КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов             КАК АналитикаРасходов,
	|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	&ВыпускПодДеятельность                       КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДСУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаСНДСРегл,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаБезНДСРегл,
	|	0                                            КАК ПостояннаяРазница,
	|	0                                            КАК ВременнаяРазница,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи           КАК ИдентификаторФинЗаписи,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость) 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыФиксированнаяСтоимость) 
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию) 
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию) КАК НастройкаХозяйственнойОперации,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТабличнаяЧасть
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Сумма = 0
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ                                        КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов             КАК АналитикаРасходов,
	|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	&ВыпускПодДеятельность                       КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДСУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаСНДСРегл,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаБезНДСРегл,
	|	0                                            КАК ПостояннаяРазница,
	|	0                                            КАК ВременнаяРазница,
	|	ТабличнаяЧасть.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)        КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию) КАК НастройкаХозяйственнойОперации,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Сумма = 0
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ                                        КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов             КАК АналитикаРасходов,
	|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
	|	&ВыпускПодДеятельность                       КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаБезНДСУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаСНДСРегл,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаБезНДСРегл,
	|	0                                            КАК ПостояннаяРазница,
	|	0                                            КАК ВременнаяРазница,
	|	ТабличнаяЧасть.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыФиксированнаяСтоимость) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию) КАК НастройкаХозяйственнойОперации,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Сумма = 0
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы(, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрЗапросаПустаяАналитикаУчетаПартий(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаОперации КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТабличнаяЧасть.ВидЗапасов.Организация  КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТабличнаяЧасть.СтатьяРасходов КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	&АналитикаУчетаПартийТоваров КАК АналитикаУчетаПартий,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	&ВыпускПодДеятельность КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК Стоимость,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СтоимостьРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК НДСРегл,
	|	0 КАК НДСУпр,
	|
	|	ТабличнаяЧасть.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииФиксированнаяСтоимость) КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ ВтИсходныеПартииПрочихРасходов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТабличнаяЧасть
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаПроизводства КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТабличнаяЧасть.СтатьяРасходов КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	&АналитикаУчетаПартийТоваров КАК АналитикаУчетаПартий,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	&ВыпускПодДеятельность КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК Стоимость,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СтоимостьРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК НДСРегл,
	|	0 КАК НДСУпр,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииФиксированнаяСтоимость) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов(, Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВсеИзделия(ТекстыЗапроса)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|
	|	ТабличнаяЧасть.Номенклатура                          КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                        КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
	|			ТОГДА ВЫБОР
	|				КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|					ТОГДА ТабличнаяЧасть.Подразделение
	|				ИНАЧЕ ТабличнаяЧасть.Получатель
	|			КОНЕЦ
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                                КАК Склад,
	|	ТабличнаяЧасть.Назначение                            КАК Назначение,
	|
	// поля ЗаказНаПоступление и ДатаПоступления должны заполняться синхронно с графиком поступления товаров
	|
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	//-- Устарело_Переработка24
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|		ИНАЧЕ ТабличнаяЧасть.Ссылка
	|	КОНЕЦ                              КАК ЗаказВГрафикеПоступления,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|					
	|					ТабличнаяЧасть.ДатаПроизводства
	|					
	|			ИНАЧЕ
	|				ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
	|									И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
	|											
	|								НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
	|												
	|						ИНАЧЕ
	|										
	|								ДАТАВРЕМЯ(1,1,1)
	|										
	|					КОНЕЦ
	|					
	|		КОНЕЦ КАК ДатаВГрафикеПоступления,
	|
	|	ТабличнаяЧасть.Ссылка.Статус                         КАК Статус,
	|
	|	ТабличнаяЧасть.Ссылка.Спецификация                   КАК Спецификация,
	|	ТабличнаяЧасть.Ссылка.Распоряжение                   КАК ЗаказНаПроизводство,
	|	ТабличнаяЧасть.Ссылка.ПартияПроизводства             КАК ПартияПроизводства,
	|
	|	ТабличнаяЧасть.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.Подразделение                         КАК Подразделение,
	|	ТабличнаяЧасть.ДатаПроизводства                      КАК ДатаПроизводства,
	|	ТабличнаяЧасть.Произведено                           КАК Произведено, 
	|
	|	ТабличнаяЧасть.Количество                            КАК Количество
	|
	|ПОМЕСТИТЬ ВтВсеИзделия
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
	|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
	|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
	// рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
	|		 И ГрафикПроизводства.СтатусГрафика    = 0
	|		 И ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
	|		ПО ИСТИНА
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|	И ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (НЕ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ НЕ ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)))
	|	И НЕ ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
	|							ТабличнаяЧасть.Подразделение
	|						ИНАЧЕ
	|							ТабличнаяЧасть.Получатель
	|					КОНЕЦ
	|			ИНАЧЕ
	|				ТабличнаяЧасть.Получатель
	|		КОНЕЦ В (
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|			НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|
	|	ТабличнаяЧасть.Номенклатура                          КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                        КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
	|							ТабличнаяЧасть.Подразделение
	|						ИНАЧЕ
	|							ТабличнаяЧасть.Получатель
	|					КОНЕЦ
	|			ИНАЧЕ
	|				ТабличнаяЧасть.Получатель
	|		КОНЕЦ                                            КАК Склад,
	|	ТабличнаяЧасть.Назначение                            КАК Назначение,  
	|
	// поля ЗаказНаПоступление и ДатаПоступления должны заполняться синхронно с графиком поступления товаров
	|
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	//-- Устарело_Переработка24
	|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|		ИНАЧЕ ТабличнаяЧасть.Ссылка
	|	КОНЕЦ                              КАК ЗаказВГрафикеПоступления,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|					
	|					ТабличнаяЧасть.ДатаПроизводства
	|					
	|			ИНАЧЕ
	|				ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
	|									И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
	|											
	|								НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
	|												
	|						ИНАЧЕ
	|										
	|								ДАТАВРЕМЯ(1,1,1)
	|										
	|					КОНЕЦ
	|					
	|		КОНЕЦ КАК ДатаВГрафикеПоступления,
	|
	|	ТабличнаяЧасть.Ссылка.Статус                         КАК Статус,
	|
	|	ТабличнаяЧасть.Ссылка.Спецификация                   КАК Спецификация,
	|	ТабличнаяЧасть.Ссылка.Распоряжение                   КАК ЗаказНаПроизводство,
	|	ТабличнаяЧасть.Ссылка.ПартияПроизводства             КАК ПартияПроизводства,
	|
	|	ТабличнаяЧасть.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.Подразделение                         КАК Подразделение,
	|	ТабличнаяЧасть.ДатаПроизводства                      КАК ДатаПроизводства,
	|	ТабличнаяЧасть.Произведено                           КАК Произведено, 
	|
	|	ТабличнаяЧасть.Количество                            КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
	|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
	|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
	// рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
	|		 И ГрафикПроизводства.СтатусГрафика    = 0
	|		 И ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
	|		ПО ИСТИНА
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|	И ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (НЕ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ НЕ ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)))
	|	И НЕ ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
	|							ТабличнаяЧасть.Подразделение
	|						ИНАЧЕ
	|							ТабличнаяЧасть.Получатель
	|					КОНЕЦ
	|			ИНАЧЕ
	|				ТабличнаяЧасть.Получатель
	|		КОНЕЦ В (
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
	|			НЕОПРЕДЕЛЕНО)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВтВсеИзделия");
	
	Возврат ТекстЗапроса;

КонецФункции

//++ Устарело_Переработка24

Функция ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса)
	
	ИмяТаблицы = "ВтТаблицаЗаказовДавальцаПоНазначениям";
	ТекстЗапроса = ДавальческаяСхема.ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям("ЭтапПроизводства2_2");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Устарело_Переработка24

#Область ТекстыЗапросовВтВидыЗапасов

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра)
	
	ИмяТаблицы = "ВтВидыЗапасов";
	
	ТекущийСтатус = Неопределено;
	Если Запрос = Неопределено
	 Или Не Запрос.Параметры.Свойство("Статус", ТекущийСтатус)
	 Или ТекущийСтатус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
	 Или ТекущийСтатус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		
		ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
		УстановитьПараметрЗапросаПустаяАналитикаУчетаПартий(Запрос);
		
		//++ Устарело_Переработка24
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаЗаказовДавальцаПоНазначениям", ТекстыЗапроса) Тогда
			ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса);
		КонецЕсли;
		//-- Устарело_Переработка24
		
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
			ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
			ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
		ТекстыВтВидыЗапасов = Новый Массив;
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовМатериалы());
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовИзделия());
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыОбеспечение());
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыРасход());
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыВыходныеИзделия());
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыПобочныеИзделия());
		//++ Устарело_Переработка24
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыДавальцуВыходныеИзделия());
		ТекстыВтВидыЗапасов.Добавить(ТекстЗапросаВтВидыЗапасовРаботыДавальцуПобочныеИзделия());
		//-- Устарело_Переработка24
		
		ТекстЗапроса = СтрСоединить(ТекстыВтВидыЗапасов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
	Иначе
		
		ТекстЗапроса = ТекстЗапросаВтВидыЗапасовПустаяТаблица();
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовПустаяТаблица()
	
	Возврат
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ЛОЖЬ                                                                 КАК ДополнениеДляДавальца,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)                        КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)                        КАК ВидЗапасовВладельца,
	|	ЛОЖЬ                                                                 КАК РеализацияЗапасовДругойОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)                        КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)                        КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)                          КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)    КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)    КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)                       КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)         КАК Характеристика,
	|	0                                                                    КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)            КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)     КАК НастройкаХозяйственнойОперации,
	|	ЛОЖЬ                                                                 КАК СписатьНаРасходы,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)    КАК КорАналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)    КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ДАТАВРЕМЯ(1, 1, 1)                                                   КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО                                                         КАК Получатель,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)               КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)         КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                                         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                         КАК АналитикаАктивовПассивов,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка) КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО                                                         КАК АналитикаУчетаПартий,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка) КАК РазделУчета,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка) КАК КорРазделУчета,
	|
	|	0                                                                    КАК Сумма,
	|	0                                                                    КАК СуммаУпр,
	|	0                                                                    КАК СуммаРегл,
	|	0                                                                    КАК СуммаЗабалансовая,
	|	0                                                                    КАК СуммаЗабалансоваяУпр,
	|	0                                                                    КАК СуммаЗабалансоваяРегл,
	|	""""                                                                 КАК ИдентификаторСтроки,
	|	""""                                                                 КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                                         КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО                                                         КАК КорАналитикаФинансовогоУчета
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовМатериалы()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ														КАК ДополнениеДляДавальца,
	|	ВидыЗапасов.ВидЗапасов.Организация							КАК Организация,
	|	ВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца					КАК ВидЗапасовВладельца,
	|	ВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации	КАК РеализацияЗапасовДругойОрганизации,
	|	ВидыЗапасов.ВидЗапасов										КАК ВидЗапасов,
	|	ВидыЗапасов.КорВидЗапасов									КАК КорВидЗапасов,
	|	ВидыЗапасов.НомерГТД										КАК НомерГТД,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры						КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики						КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура			КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика		КАК Характеристика,
	|	ВидыЗапасов.Количество										КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	НастройкиХозяйственныхОпераций.Ссылка						КАК НастройкаХозяйственнойОперации,
	|	ВидыЗапасов.СписатьНаРасходы								КАК СписатьНаРасходы,
	|	ВидыЗапасов.КорАналитикаУчетаНоменклатуры					КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики						КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации									КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|			И ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Подразделение
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|			И НЕ ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ														КАК Получатель,
	|	ВидыЗапасов.Подразделение									КАК Подразделение,
	|	ВидыЗапасов.СтатьяРасходов									КАК СтатьяРасходов,
	|	ВидыЗапасов.АналитикаРасходов								КАК АналитикаРасходов,
	|	ВидыЗапасов.АналитикаАктивовПассивов						КАК АналитикаАктивовПассивов,
	|	ВидыЗапасов.НастройкаСчетовУчета							КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО												КАК АналитикаУчетаПартий,
	|
	|	ВЫБОР
	// давальческие материалы и полуфабрикаты всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|		  ИЛИ ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	// при расходе на партии производства и списании на расходы
	// комиссионные товары всегда выкупаются и списываются с раздела "Товары на складах".
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И (ВидыЗапасов.СписатьНаРасходы
	|				ИЛИ ВидыЗапасов.ХозяйственнаяОперация =
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	// комиссионные товары всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	// принятые на хранении с правом продажи на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	// для собственных раздел учетом учета являются производственные затраты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	КОНЕЦ														КАК РазделУчета,
	|
	|	ВЫБОР
	// при списании на расходы происходит выбытие из себестоимости товаров 
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|			ТОГДА НЕОПРЕДЕЛЕНО
	// давальческие материалы и полуфабрикаты всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|		  ИЛИ ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	// списание собственных и комиссионных материалов на партии производства всегда в НЗП 
	|		КОГДА ВидыЗапасов.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
	// комиссионные товары всегда на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	// принятые на хранении с правом продажи на отдельном разделе учета
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	// в остальных случаях получателем выступают производственные затраты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	КОНЕЦ														КАК КорРазделУчета,
	|
	|	0															КАК Сумма,
	|	0															КАК СуммаУпр,
	|	0															КАК СуммаРегл,
	|	0															КАК СуммаЗабалансовая,
	|	0															КАК СуммаЗабалансоваяУпр,
	|	0															КАК СуммаЗабалансоваяРегл,
	|	ВидыЗапасов.ИдентификаторСтроки								КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи							КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО												КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ														КАК КорАналитикаФинансовогоУчета
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ВидыЗапасов.ХозяйственнаяОперация
	|
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

// Данные выходных изделий по рассчитываемой и по фиксированной стоимости.
//
Функция ТекстЗапросаВтВидыЗапасовИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ													КАК ДополнениеДляДавальца,
	|	ВидыЗапасов.ВидЗапасов.Организация						КАК Организация,
	|	НЕОПРЕДЕЛЕНО											КАК ВидЗапасовВладельца,
	|	ЛОЖЬ													КАК РеализацияЗапасовДругойОрганизации,
	|	ВидыЗапасов.ВидЗапасов									КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО											КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)				КАК НомерГТД,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры					КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики					КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура		КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика	КАК Характеристика,
	|	ВидыЗапасов.Количество									КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация						КАК ХозяйственнаяОперация,
	|	НастройкиХозяйственныхОпераций.Ссылка					КАК НастройкаХозяйственнойОперации,
	|	ВидыЗапасов.СписатьНаРасходы							КАК СписатьНаРасходы,
	// Аналитика учета отходов на партиях производства (с/без назначения)
	|	КорАналитика.КлючАналитики								КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики					КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации								КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|				И ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Подразделение
	|		КОГДА ВидыЗапасов.СписатьНаРасходы
	|				И НЕ ВидыЗапасов.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО	
	|	КОНЕЦ													КАК Получатель,
	|	ВидыЗапасов.Подразделение								КАК Подразделение,
	|	ВидыЗапасов.СтатьяРасходов								КАК СтатьяРасходов,
	|	ВидыЗапасов.АналитикаРасходов							КАК АналитикаРасходов,
	|	ВидыЗапасов.АналитикаАктивовПассивов					КАК АналитикаАктивовПассивов,
	|	ВидыЗапасов.НастройкаСчетовУчета						КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ &АналитикаУчетаПартийТоваров
	|	КОНЕЦ													КАК АналитикаУчетаПартий,
	|
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|		  ИЛИ ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	КОНЕЦ													КАК РазделУчета,
	|
	|	НЕОПРЕДЕЛЕНО											КАК КорРазделУчета,
	|
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|			ТОГДА 0
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчетГотовойПродукцииПоПлановойСтоимости
	|		 ИЛИ ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА ВидыЗапасов.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ													КАК Сумма,
	|	ВЫБОР КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|		ТОГДА 0 
	|		ИНАЧЕ ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2))
	|	КОНЕЦ													КАК СуммаУпр,
	|	ВЫБОР КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	|		ТОГДА 0 
	|		ИНАЧЕ ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2))
	|	КОНЕЦ													КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|			И ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА ВидыЗапасов.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ													КАК СуммаЗабалансовая,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|			И ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ													КАК СуммаЗабалансоваяУпр,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|			И ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|			ТОГДА ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ													КАК СуммаЗабалансоваяРегл,
	|	ВидыЗапасов.ИдентификаторСтроки							КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи						КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ХозяйственнаяОперация =
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|				И НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ													КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ВидыЗапасов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ВидыЗапасов.Период, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорАналитика.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитика.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитика.Назначение = &Назначение
	|	И КорАналитика.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитика.МестоХранения = ВидыЗапасов.Подразделение
	|	И КорАналитика.СтатьяКалькуляции = ВидыЗапасов.СтатьяКалькуляции
	|	И ВидыЗапасов.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.Подразделение
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.СтатьяКалькуляции
	|	И ВидыЗапасов.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.КодСтроки = ВидыЗапасов.КодСтроки
	|	И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВыходныеИзделия""
	|	И ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ВидыЗапасов.ХозяйственнаяОперация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ВидыЗапасов.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыОбеспечение()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ																КАК ДополнениеДляДавальца,
	|	&Организация														КАК Орагнизация,
	|	НЕОПРЕДЕЛЕНО														КАК ВидЗапасовВладельца,
	|	ЛОЖЬ																КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО														КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО														КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО														КАК НомерГТД,
	|	ОбеспечениеРаботами.АналитикаУчетаНоменклатуры						КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики								КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ОбеспечениеРаботами.Номенклатура									КАК Номенклатура,
	|	ОбеспечениеРаботами.Характеристика									КАК Характеристика,
	|	ОбеспечениеРаботами.Количество										КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)	КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВПроизводство) КАК НастройкаХозяйственнойОперации,
	|	ЛОЖЬ																КАК СписатьНаРасходы,
	|	ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры					КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики								КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ОбеспечениеРаботами.ДатаОтгрузки									КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО														КАК Получатель,
	|	ОбеспечениеРаботами.Подразделение									КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО														КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО														КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК РазделУчета,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК КорРазделУчета,
	|	0																	КАК Сумма,
	|	0																	КАК СуммаУпр,
	|	0																	КАК СуммаРегл,
	|	0																	КАК СуммаЗабалансовая,
	|	0																	КАК СуммаЗабалансоваяУпр,
	|	0																	КАК СуммаЗабалансоваяРегл,
	|	""""																КАК ИдентификаторСтроки,
	|	ОбеспечениеРаботами.ИдентификаторСтроки								КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО														КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ																КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеРаботами
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ОбеспечениеРаботами.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ОбеспечениеРаботами.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = ОбеспечениеРаботами.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = ОбеспечениеРаботами.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ОбеспечениеРаботами.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ОбеспечениеРаботами.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ОбеспечениеРаботами.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ОбеспечениеРаботами.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|ГДЕ
	|	ОбеспечениеРаботами.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ОбеспечениеРаботами.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ОбеспечениеРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ОбеспечениеРаботами.Отменено
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыРасход()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ										КАК ДополнениеДляДавальца,
	|	&Организация								КАК Организация,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК НомерГТД,
	|	РасходРабот.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	РасходРабот.Номенклатура					КАК Номенклатура,
	|	РасходРабот.Характеристика					КАК Характеристика,
	|	РасходРабот.Количество						КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеРасходовНаПартииПроизводства) КАК НастройкаХозяйственнойОперации,
	|	ЛОЖЬ										КАК СписатьНаРасходы,
	|	РасходРабот.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	РасходРабот.ДатаРасхода						КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО								КАК Получатель,
	|	РасходРабот.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО								КАК НастройкаСчетовУчета,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)		КАК РазделУчета,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)	КАК КорРазделУчета,
	|	0											КАК Сумма,
	|	0											КАК СуммаУпр,
	|	0											КАК СуммаРегл,
	|	0											КАК СуммаЗабалансовая,
	|	0											КАК СуммаЗабалансоваяУпр,
	|	0											КАК СуммаЗабалансоваяРегл,
	|	""""										КАК ИдентификаторСтроки,
	|	РасходРабот.ИдентификаторСтроки				КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК РасходРабот
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = РасходРабот.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = РасходРабот.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = РасходРабот.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = РасходРабот.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = РасходРабот.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = РасходРабот.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = РасходРабот.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = РасходРабот.КорАналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = РасходРабот.КорАналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = РасходРабот.КорАналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|ГДЕ
	|	РасходРабот.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И РасходРабот.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыВыходныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ															КАК ДополнениеДляДавальца,
	|	ВЫБОР
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ															КАК Организация,
	|	НЕОПРЕДЕЛЕНО													КАК ВидЗапасовВладельца,
	|	ЛОЖЬ															КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО													КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО													КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)						КАК НомерГТД,
	|	Работы.АналитикаУчетаНоменклатуры								КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики							КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.Номенклатура												КАК Номенклатура,
	|	Работы.Характеристика											КАК Характеристика,
	|	Работы.Количество												КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)	КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукции) КАК НастройкаХозяйственнойОперации,
	|	Работы.СписатьНаРасходы											КАК СписатьНаРасходы,
	|	НЕОПРЕДЕЛЕНО													КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО													КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.ДатаПроизводства											КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА Работы.СписатьНаРасходы
	|				И Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Подразделение
	|		КОГДА Работы.СписатьНаРасходы
	|				И НЕ Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ															КАК Получатель,
	|	Работы.Подразделение											КАК Подразделение,
	|	Работы.СтатьяРасходов											КАК СтатьяРасходов,
	|	Работы.АналитикаРасходов										КАК АналитикаРасходов,
	|	Работы.АналитикаАктивовПассивов									КАК АналитикаАктивовПассивов,
	|	Работы.НастройкаСчетовУчета										КАК НастройкаСчетовУчета,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий					КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО													КАК КорРазделУчета,
	|	Работы.Сумма													КАК Сумма,
	|	ВЫРАЗИТЬ(Работы.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(Работы.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	0																КАК СуммаЗабалансовая,
	|	0																КАК СуммаЗабалансоваяУпр,
	|	0																КАК СуммаЗабалансоваяРегл,
	|	Работы.ИдентификаторСтроки										КАК ИдентификаторСтроки,
	|	Работы.ИдентификаторСтроки										КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ Работы.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА Работы.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ															КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО													КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Работы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Работы.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Работы.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = Работы.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = Работы.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = Работы.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.КодСтроки = Работы.КодСтроки
	|	И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВыходныеИзделия""
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(Работы.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	Работы.Ссылка = &Ссылка
	|	И Работы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Работы.Произведено
	|	И НЕ Работы.Отменено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыПобочныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ЛОЖЬ										КАК ДополнениеДляДавальца,
	|	ВЫБОР
	|		КОГДА НЕ Работы.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Работы.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ										КАК Организация,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД,
	|	Работы.АналитикаУчетаНоменклатуры			КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.Номенклатура							КАК Номенклатура,
	|	Работы.Характеристика						КАК Характеристика,
	|	Работы.Количество							КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииФиксированнаяСтоимость) КАК НастройкаХозяйственнойОперации,
	|	Работы.СписатьНаРасходы						КАК СписатьНаРасходы,
	|	КорАналитика.КлючАналитики					КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	Работы.ДатаПроизводства						КАК ДатаОперации,
	|	ВЫБОР
	|		КОГДА Работы.СписатьНаРасходы
	|				И Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Подразделение
	|		КОГДА Работы.СписатьНаРасходы
	|				И НЕ Работы.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Работы.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК Получатель,
	|	Работы.Подразделение						КАК Подразделение,
	|	Работы.СтатьяРасходов						КАК СтатьяРасходов,
	|	Работы.АналитикаРасходов					КАК АналитикаРасходов,
	|	Работы.АналитикаАктивовПассивов				КАК АналитикаАктивовПассивов,
	|	Работы.НастройкаСчетовУчета					КАК НастройкаСчетовУчета,
	|	&АналитикаУчетаПартийРабот					КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорРазделУчета,
	|	Работы.Сумма								КАК Сумма,
	|	ВЫРАЗИТЬ(Работы.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(Работы.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	0											КАК СуммаЗабалансовая,
	|	0											КАК СуммаЗабалансоваяУпр,
	|	0											КАК СуммаЗабалансоваяРегл,
	|	Работы.ИдентификаторСтроки					КАК ИдентификаторСтроки,
	|	Работы.ИдентификаторСтроки					КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ Работы.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА Работы.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ &ГруппаПродукции = ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА &ГруппаПродукции
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Работы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Работы.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Работы.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = Работы.Характеристика
	|	И АналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И АналитикаБезНазначения.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И АналитикаБезНазначения.МестоХранения = Работы.АналитикаУчетаНоменклатуры.МестоХранения
	|	И АналитикаБезНазначения.СтатьяКалькуляции = Работы.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО КорАналитика.Номенклатура = Работы.Номенклатура
	|	И КорАналитика.Характеристика = Работы.Характеристика
	|	И КорАналитика.Назначение = &Назначение
	|	И КорАналитика.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитика.МестоХранения = Работы.Подразделение
	|	И КорАналитика.СтатьяКалькуляции = Работы.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = Работы.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = Работы.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = Работы.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = Работы.Подразделение
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = Работы.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(Работы.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	Работы.Ссылка = &Ссылка
	|	И Работы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Работы.Произведено
	|	И НЕ Работы.Отменено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|";
	
КонецФункции

//++ Устарело_Переработка24

Функция ТекстЗапросаВтВидыЗапасовРаботыДавальцуВыходныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ИСТИНА										КАК ДополнениеДляДавальца,
	|	ВЫБОР
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ										КАК Организация,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	ВидыЗапасов.ВидЗапасов						КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД,
	|	Аналитика.КлючАналитики						КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитика.Номенклатура						КАК Номенклатура,
	|	Аналитика.Характеристика					КАК Характеристика,
	|	ВидыЗапасов.Количество						КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	НастройкиХозяйственныхОпераций.Ссылка		КАК НастройкаХозяйственнойОперации,
	|	ЛОЖЬ										КАК СписатьНаРасходы,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации					КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО								КАК Получатель,
	|	ВидыЗапасов.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО								КАК НастройкаСчетовУчета,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий									КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорРазделУчета,
	|	ВидыЗапасов.Сумма							КАК Сумма,
	|	ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	0											КАК СуммаЗабалансовая,
	|	0											КАК СуммаЗабалансоваяУпр,
	|	0											КАК СуммаЗабалансоваяРегл,
	|	ВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
	|	ПО Изделия.Ссылка = ВидыЗапасов.Ссылка
	|	И Изделия.ИдентификаторСтроки = ВидыЗапасов.ИдентификаторСтроки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Изделия.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТаблицаЗаказовДавальцаПоНазначениям.Назначение = Изделия.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И Аналитика.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И Аналитика.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот
	|	И Аналитика.Серия = &ПустаяСсылкаСерия
	|	И Аналитика.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И Аналитика.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаБезНазначения.Серия = &ПустаяСсылкаСерия
	|	И АналитикаБезНазначения.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.КодСтроки = ВидыЗапасов.КодСтроки
	|	И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВыходныеИзделия""
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ВидыЗапасов.ХозяйственнаяОперация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ВидыЗапасов.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|	
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ВидыЗапасов.ОформитьОтчетДавальцу
	|";
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасовРаботыДавальцуПобочныеИзделия()
	
	Возврат
	"ВЫБРАТЬ
	|	ИСТИНА										КАК ДополнениеДляДавальца,
	|	ВЫБОР
	|		КОГДА НЕ ВидыЗапасов.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ										КАК Организация,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасовВладельца,
	|	ЛОЖЬ										КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО								КАК ВидЗапасов,
	|	ВидыЗапасов.ВидЗапасов						КАК КорВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД,
	|	Аналитика.КлючАналитики						КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики		КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитика.Номенклатура						КАК Номенклатура,
	|	Аналитика.Характеристика					КАК Характеристика,
	|	ВидыЗапасов.Количество						КАК Количество,
	|	ВидыЗапасов.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	НастройкиХозяйственныхОпераций.Ссылка		КАК НастройкаХозяйственнойОперации,
	|	ЛОЖЬ										КАК СписатьНаРасходы,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаБезНазначения.КлючАналитики		КАК КорАналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.ДатаОперации					КАК ДатаОперации,
	|	НЕОПРЕДЕЛЕНО								КАК Получатель,
	|	ВидыЗапасов.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО								КАК НастройкаСчетовУчета,
	|	&АналитикаУчетаПартийТоваров				КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)	КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорРазделУчета,
	|	ВидыЗапасов.Сумма							КАК Сумма,
	|	ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0) КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ВидыЗапасов.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	0											КАК СуммаЗабалансовая,
	|	0											КАК СуммаЗабалансоваяУпр,
	|	0											КАК СуммаЗабалансоваяРегл,
	|	ВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	ВидыЗапасов.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА &АналитическийУчетПоГруппамПродукции
	|				И НЕ ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета =
	|							ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО								КАК КорАналитикаФинансовогоУчета
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
	|	ПО Изделия.Ссылка = ВидыЗапасов.Ссылка
	|	И Изделия.ИдентификаторСтроки = ВидыЗапасов.ИдентификаторСтроки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(Изделия.ДатаПроизводства, МЕСЯЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТаблицаЗаказовДавальцаПоНазначениям.Назначение = Изделия.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И Аналитика.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И Аналитика.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.НазначениеРабот
	|	И Аналитика.Серия = &ПустаяСсылкаСерия
	|	И Аналитика.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И Аналитика.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И АналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И АналитикаБезНазначения.Серия = &ПустаяСсылкаСерия
	|	И АналитикаБезНазначения.МестоХранения = ТаблицаЗаказовДавальцаПоНазначениям.Подразделение
	|	И АналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитикаБезНазначения
	|	ПО КорАналитикаБезНазначения.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|	И КорАналитикаБезНазначения.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|	И КорАналитикаБезНазначения.Назначение = &ПустаяСсылкаНазначение
	|	И КорАналитикаБезНазначения.Серия = ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия
	|	И КорАналитикаБезНазначения.МестоХранения = ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения
	|	И КорАналитикаБезНазначения.СтатьяКалькуляции = ВидыЗапасов.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ВидыЗапасов.ХозяйственнаяОперация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ВидыЗапасов.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|	
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ВидыЗапасов.ОформитьОтчетДавальцу
	|";
	
КонецФункции
//-- Устарело_Переработка24

#КонецОбласти

#КонецОбласти

//++ Устарело_Переработка24

Функция ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УслугиДавальцуКОформлению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаЗаказовДавальцаПоНазначениям", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)							КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства									КАК Период,
	|	ТаблицаЗаказовДавальцаПоНазначениям.Договор						КАК Договор,
	|	ТаблицаЗаказовДавальцаПоНазначениям.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТабличнаяЧасть.Номенклатура										КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика									КАК Характеристика,
	|	ТабличнаяЧасть.Количество										КАК КОформлению,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)	КАК ПричинаОтмены,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС)					КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТабличнаяЧасть.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)							КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства									КАК Период,
	|	ТаблицаЗаказовДавальцаПоНазначениям.Договор						КАК Договор,
	|	ТаблицаЗаказовДавальцаПоНазначениям.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТабличнаяЧасть.Номенклатура										КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика									КАК Характеристика,
	|	ТабличнаяЧасть.Количество										КАК КОформлению,
	|	ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)	КАК ПричинаОтмены,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС)					КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаказовДавальцаПоНазначениям КАК ТаблицаЗаказовДавальцаПоНазначениям
	|	ПО ТабличнаяЧасть.Назначение = ТаблицаЗаказовДавальцаПоНазначениям.Назначение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Устарело_Переработка24

Функция ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДоступностьВидовРабочихЦентров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|
		|	ТабличнаяЧасть.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ТабличнаяЧасть.ДатаИнтервала     КАК ДатаИнтервала,
		|
		|	СУММА(ТабличнаяЧасть.Количество) КАК Занято,
		|
		|	ТабличнаяЧасть.ВидРабочегоЦентра.Подразделение КАК Подразделение
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЗанятостьВидовРабочихЦентров КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И &РучноеРазмещениеВГрафике
		|	
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.ВидРабочегоЦентра,
		|	ТабличнаяЧасть.ДатаИнтервала";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	// выпуск работ по расчитываемой стоимости
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаПроизводства        КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ                                 КАК Организация,
	|	ТабличнаяЧасть.Получатель             КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура           КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика         КАК Характеристика,
	|	ТабличнаяЧасть.Назначение             КАК Назначение,
	|	ТабличнаяЧасть.Количество             КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// выпуск работ по фиксированной стоимости
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаПроизводства,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ,
	|	ТабличнаяЧасть.Получатель,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// потребление работ
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОтгрузки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Организация,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Назначение,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход работ под назначение этапа
	// Необходимо для оформления отчета переработчика 2.5
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОтгрузки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Ссылка.Назначение КАК Назначение,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &ПроизводствоНаСтороне2_5
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыпускПродукции";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ										КАК Организация,
	|	ТабличнаяЧасть.Подразделение				КАК Подразделение,
	|	ТабличнаяЧасть.ДатаПроизводства				КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаКонстанты.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.Ссылка.Дата >= НАЧАЛОПЕРИОДА(ТаблицаКонстанты.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ										КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка										КАК Распоряжение,
	|	ТабличнаяЧасть.КодСтроки					КАК КодСтроки,
	|	ТабличнаяЧасть.Количество					КАК Количество,
	|	ТабличнаяЧасть.СтатьяРасходов				КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов			КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТабличнаяЧасть.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО Аналитика.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И Аналитика.Характеристика = АналитикаБезНазначения.Характеристика
	|		И &ПустаяСсылкаНазначение = АналитикаБезНазначения.Назначение
	|		И Аналитика.Серия = АналитикаБезНазначения.Серия
	|		И Аналитика.МестоХранения = АналитикаБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты
	|	ПО ИСТИНА
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ										КАК Организация,
	|	ТабличнаяЧасть.Подразделение				КАК Подразделение,
	|	ТабличнаяЧасть.ДатаПроизводства				КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаКонстанты.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.Ссылка.Дата >= НАЧАЛОПЕРИОДА(ТаблицаКонстанты.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям, МЕСЯЦ)
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ										КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка										КАК Распоряжение,
	|	ТабличнаяЧасть.КодСтроки					КАК КодСтроки,
	|	ТабличнаяЧасть.Количество					КАК Количество,
	|	ТабличнаяЧасть.СтатьяРасходов				КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов			КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТабличнаяЧасть.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО Аналитика.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И Аналитика.Характеристика = АналитикаБезНазначения.Характеристика
	|		И &ПустаяСсылкаНазначение = АналитикаБезНазначения.Назначение
	|		И Аналитика.Серия = АналитикаБезНазначения.Серия
	|		И Аналитика.МестоХранения = АналитикаБезНазначения.МестоХранения
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты
	|	ПО ИСТИНА
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	// Отгрузка материалов из цеховой кладовой
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ТабличнаяЧасть.ДатаОтгрузки                             КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Склад                                    КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПередачаВПроизводствоОтгрузка) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	НЕ ТабличнаяЧасть.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|		ИЛИ ДанныеШапки.Дата < ТабличнаяЧасть.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Склад.ЦеховаяКладовая
	|	И ТабличнаяЧасть.Склад.Подразделение = ТабличнаяЧасть.Подразделение
	|	И НЕ ДанныеШапки.ПроизводствоНаСтороне
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Производство продукции в подразделении
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Производство продукции в подразделении
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                           	КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                               КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ИСТИНА                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приемка продукции в цеховую кладовую
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА ДанныеШапки.Дата
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                 	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА ДанныеШапки.Дата
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приемка продукции в цеховую кладовую
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА ДанныеШапки.Дата
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА ДанныеШапки.Дата
	|		ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|	КОНЕЦ													КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  	КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                               КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|				ИЛИ НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ВЫБОР
	|						КОГДА ТабличнаяЧасть.ДатаПроизводства = ДАТАВРЕМЯ(1,1,1)
	|							ТОГДА ДанныеШапки.Дата
	|						ИНАЧЕ ТабличнаяЧасть.ДатаПроизводства
	|					КОНЕЦ < ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  	КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|	И ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Возврат неизрасходованных материалов в нашу кладовую
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                    КАК Регистратор,
	|	ТабличнаяЧасть.ДатаОперации                              КАК Период,
	|	ТабличнаяЧасть.Номенклатура                              КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                            КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Назначение,
	|	ТабличнаяЧасть.Серия                                     КАК Серия,
	|	ТабличнаяЧасть.Количество                                КАК Количество,
	|	ТабличнаяЧасть.Подразделение                             КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                                КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратМатериаловИзПроизводстваПриемка) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                  КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ТабличнаяЧасть.ДатаОперации < ТабличнаяЧасть.Получатель.ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель.ЦеховаяКладовая
	|	И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                    КАК Регистратор,
	|	ТабличнаяЧасть.ДатаОперации                              КАК Период,
	|	ТабличнаяЧасть.Номенклатура                              КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                            КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                  КАК Назначение,
	|	ТабличнаяЧасть.Серия                                   КАК Серия,
	|	ТабличнаяЧасть.Количество                              КАК Количество,
	|	ТабличнаяЧасть.Подразделение                           КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                              КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратМатериаловИзПроизводстваПриемка) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                  КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Получатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|				ИЛИ ТабличнаяЧасть.ДатаОперации < ТабличнаяЧасть.Получатель.ДатаНачалаОрдернойСхемыПриПоступлении 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериаловСерии КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Получатель <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И ТабличнаяЧасть.Получатель.ЦеховаяКладовая
	|	И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Расход материалов
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                   КАК Регистратор,
	|	ТабличнаяЧасть.ДатаРасхода                              КАК Период,
	|	ТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                           КАК Характеристика,
	|	ДанныеШапки.Назначение                                  КАК Назначение,
	|	ТабличнаяЧасть.Серия                                    КАК Серия,
	|	ТабличнаяЧасть.Количество                               КАК Количество,
	|	ТабличнаяЧасть.Подразделение                            КАК Отправитель,
	|	ТабличнаяЧасть.Подразделение                            КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве) КАК СкладскаяОперация,
	|	ТабличнаяЧасть.Ссылка                                   КАК Документ,
	|	ИСТИНА                                                  КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)		КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации					КАК Период,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ										КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД						КАК НомерГТД,
	|	ТабличнаяЧасть.Количество					КАК Количество,
	|	0											КАК КоличествоПоРНПТ,
	|	0											КАК КОформлениюСписания,
	|	0											КАК КОформлениюСписанияПоРНПТ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца.Организация
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов.Организация
	|	КОНЕЦ										КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаНоменклатурыПоУмолчанию		КАК КорАналитикаУчетаНоменклатуры,
	|	&ВидЗапасовПоУмолчанию						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации						КАК Период,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ											КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД							КАК НомерГТД,
	|	ТабличнаяЧасть.Количество						КАК Количество,
	|	ТабличнаяЧасть.КоличествоПоРНПТ					КАК КоличествоПоРНПТ,
	|	0												КАК КОформлениюСписания,
	|	0												КАК КОформлениюСписанияПоРНПТ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца.Организация
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов.Организация
	|	КОНЕЦ											КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорВидЗапасов					КАК КорВидЗапасов,
	|	ТабличнаяЧасть.СтатьяРасходов					КАК СтатьяРасходов,
	|	ТабличнаяЧасть.АналитикаРасходов				КАК АналитикаРасходов,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов			КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации						КАК Период,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ											КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД							КАК НомерГТД,
	|	ТабличнаяЧасть.Количество						КАК Количество,
	|	ТабличнаяЧасть.КоличествоПоРНПТ					КАК КоличествоПоРНПТ,
	|	0												КАК КОформлениюСписания,
	|	0												КАК КОформлениюСписанияПоРНПТ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ВидЗапасовВладельца.Организация
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов.Организация
	|	КОНЕЦ											КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаНоменклатурыПоУмолчанию			КАК КорАналитикаУчетаНоменклатуры,
	|	&ВидЗапасовПоУмолчанию							КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО									КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО									КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)		КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации					КАК Период,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.ВидЗапасов					КАК ВидЗапасов,
	|	ТабличнаяЧасть.НомерГТД						КАК НомерГТД,
	|	0											КАК Количество,
	|	0											КАК КоличествоПоРНПТ,
	|	ТабличнаяЧасть.Количество					КАК КОформлениюСписания,
	|	ТабличнаяЧасть.КоличествоПоРНПТ				КАК КОформлениюСписанияПоРНПТ,
	|	ТабличнаяЧасть.ВидЗапасов.Организация		КАК Организация,
	|	ТабличнаяЧасть.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаНоменклатурыПоУмолчанию		КАК КорАналитикаУчетаНоменклатуры,
	|	&ВидЗапасовПоУмолчанию						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаАктивовПассивов
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)
	|	И ТабличнаяЧасть.ВидЗапасов.ТипЗапасов В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи))
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&АналитикаУчетаНоменклатурыПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ВидЗапасовПоУмолчанию",
								"ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКПередаче";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации						КАК Период,
	|	ТабличнаяЧасть.ВидЗапасовВладельца.Организация	КАК ОрганизацияВладелец,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.ВидЗапасов						КАК ВидЗапасовПродавца,
	|	ТабличнаяЧасть.НомерГТД							КАК НомерГТД,
	|	ТабличнаяЧасть.Количество						КАК Количество,
	|	ТабличнаяЧасть.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	&ВыпускПодДеятельность							КАК НалогообложениеНДС
	|ИЗ
	|	втВидыЗапасов КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.РеализацияЗапасовДругойОрганизации
	|	И ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.ДатаОперации																КАК ДатаПоступления,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Номенклатура	КАК Номенклатура,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Характеристика	КАК Характеристика,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Серия					КАК Серия,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Назначение		КАК Назначение,
	|	ТабличнаяЧасть.ВидЗапасов																	КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)						КАК НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваров
	|	ПО ТабличнаяЧасть.ВидЗапасов = ПоступленияТоваров.ВидЗапасов
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Номенклатура = ПоступленияТоваров.Номенклатура
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Характеристика = ПоступленияТоваров.Характеристика
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Серия = ПоступленияТоваров.Серия
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Назначение = ПоступленияТоваров.Назначение
	|	И ПоступленияТоваров.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|ГДЕ
	|	ТабличнаяЧасть.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
	|	И ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры =
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И НЕ ТабличнаяЧасть.ДополнениеДляДавальца
	|	И (ПоступленияТоваров.ВидЗапасов ЕСТЬ NULL 
	|		ИЛИ ПоступленияТоваров.ДатаПоступления < ТабличнаяЧасть.ДатаОперации)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыМатериаловВПроизводство";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                        КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ДанныеШапки.Дата                             КАК Период,
	|	ТабличнаяЧасть.Ссылка                        КАК Распоряжение,
	|	ТабличнаяЧасть.Подразделение                 КАК Подразделение,
	|	ТабличнаяЧасть.Подразделение                 КАК Получатель,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ТабличнаяЧасть.Серия                         КАК Серия,
	|	ТабличнаяЧасть.Склад                         КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно ТОГДА
	|				ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	ДанныеШапки.Назначение                       КАК Назначение,
	|	ТабличнаяЧасть.Количество                    КАК Заказано,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|			ТОГДА ТабличнаяЧасть.Количество
	|	КОНЕЦ                                        КАК ВРезерве,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			ТОГДА ТабличнаяЧасть.Количество
	|	КОНЕЦ                                        КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И НЕ ДанныеШапки.ПроизводствоНаСтороне
	|
	|	И ТабличнаяЧасть.ВариантОбеспечения В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                        КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОтгрузки                  КАК Период,
	|	ТабличнаяЧасть.Ссылка                        КАК Распоряжение,
	|	ТабличнаяЧасть.Подразделение                 КАК Подразделение,
	|	ТабличнаяЧасть.Подразделение                 КАК Получатель,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ТабличнаяЧасть.Серия                         КАК Серия,
	|	ТабличнаяЧасть.Склад                         КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	ДанныеШапки.Назначение                       КАК Назначение,
	|	ТабличнаяЧасть.Количество                    КАК Заказано,
	|	0                                            КАК ВРезерве,
	|	ТабличнаяЧасть.Количество                    КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И НЕ ДанныеШапки.ПроизводствоНаСтороне
	|
	|	И (ТабличнаяЧасть.Склад.ЦеховаяКладовая
	|		И ТабличнаяЧасть.Склад.Подразделение = ТабличнаяЧасть.Подразделение)
	|
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРаспоряженияНаПередачуИзПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РаспоряженияНаПередачуИзПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ТабличнаяЧасть.Подразделение                 КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                    КАК Получатель,
	|	&Организация                                 КАК Организация,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                    КАК Назначение,
	|	ВЫБОР
	|		КОГДА &ЯвляетсяНазначениемПродукции
	|			ТОГДА &Назначение
	|		ИНАЧЕ ТабличнаяЧасть.Назначение
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТабличнаяЧасть.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                        КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК Операция,
	|	ТабличнаяЧасть.Количество                    КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И (НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|		ИЛИ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение <> ТабличнаяЧасть.Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ТабличнаяЧасть.Подразделение                 КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                    КАК Получатель,
	|	&Организация                                 КАК Организация,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                    КАК Назначение,
	|	ВЫБОР
	|		КОГДА &ЯвляетсяНазначениемПродукции
	|			ТОГДА &Назначение
	|		ИНАЧЕ ТабличнаяЧасть.Назначение
	|	КОНЕЦ                                        КАК НазначениеОтправителя,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТабличнаяЧасть.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                        КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК Операция,
	|	ТабличнаяЧасть.Количество                    КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И (НЕ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).ЦеховаяКладовая
	|		ИЛИ ВЫРАЗИТЬ(ТабличнаяЧасть.Получатель КАК Справочник.Склады).Подразделение <> ТабличнаяЧасть.Подразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.КодСтроки                     КАК КодСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОперации                  КАК Период,
	|	ТабличнаяЧасть.Подразделение                 КАК Отправитель,
	|	ТабличнаяЧасть.Получатель                    КАК Получатель,
	|	&Организация                                 КАК Организация,
	|	&Ссылка                                      КАК Распоряжение,
	|	ТабличнаяЧасть.Номенклатура                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                    КАК Назначение,
	|	&Назначение                                  КАК НазначениеОтправителя,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СтатусУказанияСерийОтправитель = 14
	|			ТОГДА ТабличнаяЧасть.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                        КАК Серия,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства) КАК Операция,
	|	ТабличнаяЧасть.Количество                    КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И (НЕ ТабличнаяЧасть.Получатель.ЦеховаяКладовая
	|		ИЛИ ТабличнаяЧасть.Получатель.Подразделение <> ТабличнаяЧасть.Подразделение)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	ТаблицаТрудозатраты.ДатаВыполнения            КАК Период,
	|	&Организация                                  КАК Организация,
	|	&ПартияПроизводства                           КАК ПартияПроизводства,
	|	ТаблицаТрудозатраты.Ссылка                    КАК Распоряжение,
	|	ТаблицаТрудозатраты.ВидРабот                  КАК ВидРабот,
	|	ТаблицаТрудозатраты.Исполнитель               КАК Исполнитель,
	|	ТаблицаТрудозатраты.Подразделение             КАК Подразделение,
	|	ТаблицаТрудозатраты.КодСтроки                 КАК КодСтрокиРаспоряжения,
	|	ТаблицаТрудозатраты.Количество                КАК Количество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК ТаблицаТрудозатраты
	|ГДЕ
	|	(НЕ &ИспользоватьПооперационноеУправление
	|	ИЛИ (&ИспользоватьПооперационноеУправление И НЕ &ОперацияКакРаспоряжениеВыработки)
	|	ИЛИ &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|	И ТаблицаТрудозатраты.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТаблицаТрудозатраты.Выполнено
	|	И НЕ ТаблицаТрудозатраты.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы("", Истина);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаОперации                  КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ТабличнаяЧасть.ВидЗапасов.Организация        КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК Статья,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаАктивовПассивов
	|	КОНЕЦ                                        КАК Аналитика,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК Сумма
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовИзделия КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ                                        КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК Статья,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаАктивовПассивов
	|	КОНЕЦ                                        КАК Аналитика,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК Сумма
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                   КАК НомерСтроки,
	|	ТабличнаяЧасть.ДатаПроизводства              КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.ВладелецИзделия = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.ВладелецИзделия
	|		КОГДА &ВнутренняяПереработка
	|			ТОГДА &ОрганизацияДавалец
	|		ИНАЧЕ &Организация
	|	КОНЕЦ                                        КАК Организация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.Подразделение
	|		ИНАЧЕ ТабличнаяЧасть.Получатель
	|	КОНЕЦ                                        КАК Подразделение,
	|	ТабличнаяЧасть.СтатьяРасходов                КАК Статья,
	|	ТабличнаяЧасть.АналитикаАктивовПассивов      КАК Аналитика,
	|	ТабличнаяЧасть.НастройкаСчетовУчета          КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) СуммаРегл,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ТабличнаяЧасть.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВыпускПродукцииФиксированнаяСтоимость) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
	|		ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПроизводства, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиАктивовПассивов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НачалоПериода(ДанныеШапки.Дата, День)  КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказКлиента,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Серия                   КАК Серия,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Склад                   КАК Склад,
	|	ТабличнаяЧасть.Количество              КАК Заказано,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ДанныеШапки.ПроизводствоНаСтороне
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И НЕ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОтгрузки            КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказКлиента,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Серия                   КАК Серия,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Склад                   КАК Склад,
	|	0                                      КАК Заказано,
	|	ТабличнаяЧасть.Количество              КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ПО РеестрДокументов.Ссылка = ДанныеШапки.ЗаказПереработчику
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И НЕ ДанныеШапки.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ДанныеШапки.ПроизводствоНаСтороне
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ЕСТЬNULL(РеестрДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.ПустаяСсылка)) В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НачалоПериода(ДанныеШапки.Дата, День)  КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказКлиента,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Серия                   КАК Серия,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Склад                   КАК Склад,
	|	-ТабличнаяЧасть.Количество             КАК Заказано,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ДанныеШапки.ПроизводствоНаСтороне
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"
	// Выходные изделия (заказано, к оформлению)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	НЕОПРЕДЕЛЕНО                           КАК Склад,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)
	|			И НЕ ТабличнаяЧасть.Отменено
	|			ТОГДА ТабличнаяЧасть.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КОформлению,
	|	0                                      КАК КПоступлению,
	|	ТабличнаяЧасть.Количество              КАК Заказано,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.ПроизводствоНаСтороне2_5
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия (заказано, отменено)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	НЕОПРЕДЕЛЕНО                           КАК Склад,
	|	0                                      КАК КОформлению,
	|	0                                      КАК КПоступлению,
	|	-ТабличнаяЧасть.Количество             КАК Заказано,
	|	0                                      КАК Сумма,
	|	ТабличнаяЧасть.ПричинаОтмены           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.ПроизводствоНаСтороне2_5
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия (к поступлению)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Получатель              КАК Склад,
	|	0                                      КАК КОформлению,
	|	ТабличнаяЧасть.Количество              КАК КПоступлению,
	|	0                                      КАК Заказано,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.ПроизводствоНаСтороне2_5
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)
	|	И НЕ ДанныеШапки.ОставитьИзделияУПереработчика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Побочные изделия (заказано, к оформлению)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	НЕОПРЕДЕЛЕНО                           КАК Склад,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)
	|			И НЕ ТабличнаяЧасть.Отменено
	|			ТОГДА ТабличнаяЧасть.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КОформлению,
	|	0                                      КАК КПоступлению,
	|	ТабличнаяЧасть.Количество              КАК Заказано,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.ПроизводствоНаСтороне2_5
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Побочные изделия (заказано, отменено)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	НЕОПРЕДЕЛЕНО                           КАК Склад,
	|	0                                      КАК КОформлению,
	|	0                                      КАК КПоступлению,
	|	-ТабличнаяЧасть.Количество             КАК Заказано,
	|	0                                      КАК Сумма,
	|	ТабличнаяЧасть.ПричинаОтмены           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.ПроизводствоНаСтороне2_5
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Побочные изделия (к поступлению)
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Получатель              КАК Склад,
	|	0                                      КАК КОформлению,
	|	ТабличнаяЧасть.Количество              КАК КПоступлению,
	|	0                                      КАК Заказано,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.ПроизводствоНаСтороне2_5
	|	И НЕ ВЫБОР
	//++ Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	//-- Устарело_Переработка24
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)
	|	И НЕ ДанныеШапки.ОставитьИзделияУПереработчика
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Получатель              КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)
	|			ТОГДА 0
	|		ИНАЧЕ ТабличнаяЧасть.Количество
	|	КОНЕЦ                                  КАК КОформлению,
	|	0                                      КАК КПоступлению,
	|	ТабличнаяЧасть.Количество              КАК Заказано,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ДанныеШапки.ПроизводствоНаСтороне
	|	И НЕ ВЫБОР
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ВЫБОР
	|					КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|						И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|							ТОГДА ДанныеШапки.ЗаказПереработчику 
	|					КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|						И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|							ТОГДА ДанныеШапки.ЗаказПереработчику 
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ) = ТИП(Документ.ЗаказПереработчику)
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеШапки.Дата                       КАК Период,
	|	ВЫБОР 
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|				ТОГДА ДанныеШапки.ЗаказПереработчику 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки               КАК КодСтроки,
	|	ТабличнаяЧасть.Получатель              КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)
	|			ТОГДА 0
	|		ИНАЧЕ ТабличнаяЧасть.Количество
	|	КОНЕЦ                                  КАК КОформлению,
	|	0                                      КАК КПоступлению,
	|	ТабличнаяЧасть.Количество              КАК Заказано,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
	|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ДанныеШапки.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ДанныеШапки.ПроизводствоНаСтороне
	|	И НЕ ВЫБОР
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|				И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|					ТОГДА ДанныеШапки.ЗаказПереработчику 
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ = НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ВЫБОР
	|					КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|						И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|							ТОГДА ДанныеШапки.ЗаказПереработчику 
	|					КОГДА ДанныеШапки.ПроизводствоНаСтороне
	|						И ТИПЗНАЧЕНИЯ(ДанныеШапки.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|						И ВЫРАЗИТЬ(ДанныеШапки.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Статус В (
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|							ТОГДА ДанныеШапки.ЗаказПереработчику 
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ) = ТИП(Документ.ЗаказПереработчику)
	|	И НЕ ТабличнаяЧасть.Отменено
	//-- Устарело_Переработка24
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКоэффициентыПересчетаВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.ДатаОперации									КАК Период,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ТабличнаяЧасть.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ТОГДА ВЫБОР
		|					КОГДА ТабличнаяЧасть.СтатьяРасходов.ВидЦенностиНДС В (
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
		|					КОГДА ТабличнаяЧасть.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
		|				КОНЕЦ
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ТабличнаяЧасть.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)
		|	КОНЕЦ										КАК ХозяйственнаяОперация,
		|	ТабличнаяЧасть.Организация					КАК Организация,
		|	ТабличнаяЧасть.Получатель					КАК Подразделение,
		|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	ТабличнаяЧасть.Подразделение				КАК Склад,
		|	ТабличнаяЧасть.ВидЗапасов					КАК ВидЗапасов,
		|	ТабличнаяЧасть.ВидЗапасов.ТипЗапасов		КАК ТипЗапасов,
		|	ТабличнаяЧасть.СтатьяРасходов				КАК СтатьяДоходовРасходов,
		|	ТабличнаяЧасть.АналитикаРасходов			КАК АналитикаРасходов,
		|	ТабличнаяЧасть.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
		|	ТабличнаяЧасть.Количество					КАК Количество,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0)  КАК ЧИСЛО(31,2)) КАК Стоимость,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуУпр, 0)  КАК ЧИСЛО(31,2)) КАК СтоимостьБезНДС,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * ЕСТЬNULL(ВтКоэффициентыПересчетаВалют.КоэффициентПересчетаВВалютуРегл, 0) КАК ЧИСЛО(31,2)) КАК СтоимостьРегл,
		|	ВЫБОР
		|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
		|			ТОГДА ТабличнаяЧасть.ВидЗапасов
		|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
		|	КОНЕЦ																				КАК ИсточникГФУНоменклатуры
		|ИЗ
		|	ВтВидыЗапасов КАК ТабличнаяЧасть
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК ВтКоэффициентыПересчетаВалют
		|	ПО НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, ДЕНЬ) = ВтКоэффициентыПересчетаВалют.Период
		|
		|ГДЕ
		|	ТабличнаяЧасть.СписатьНаРасходы
		|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураНоменклатура";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаОперации          КАК Период,
	|	ТабличнаяЧасть.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасовВладельца.Организация
	|		ИНАЧЕ ТабличнаяЧасть.Организация
	|	КОНЕЦ                                КАК Организация,
	|	&Подразделение                       КАК Подразделение,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                                КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасовВладельца.ТипЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов.ТипЗапасов
	|	КОНЕЦ                                КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.РеализацияЗапасовДругойОрганизации
	|			ТОГДА ТабличнаяЧасть.ВидЗапасовВладельца
	|		ИНАЧЕ ТабличнаяЧасть.ВидЗапасов
	|	КОНЕЦ                                КАК ВидЗапасов,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                                КАК КорАналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры.МестоХранения КАК КорСклад,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.КорВидЗапасов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов.ТипЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.КорВидЗапасов.ТипЗапасов
	|	КОНЕЦ                                КАК КорТипЗапасов,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.КорВидЗапасов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.КорВидЗапасов
	|	КОНЕЦ                                КАК КорВидЗапасов,
	|
	|	ТабличнаяЧасть.Количество            КАК Количество,
	|	ТабличнаяЧасть.Количество            КАК КорКоличество,
	|
	|	0                                    КАК Стоимость,
	|	0                                    КАК СтоимостьБезНДС,
	|	0                                    КАК СтоимостьРегл,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
	|	КОНЕЦ                                КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			И ТабличнаяЧасть.КорВидЗапасов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТабличнаяЧасть.ВидЗапасов
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТабличнаяЧасть.КорВидЗапасов
	|		ИНАЧЕ ТабличнаяЧасть.Номенклатура
	|	КОНЕЦ                                КАК КорИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                         КАК ДокументДвижения,
	|	НЕОПРЕДЕЛЕНО                         КАК КорОрганизация
	|ИЗ
	|	ВтВидыЗапасов КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
	|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаОперации, МЕСЯЦ)
	|
	|ГДЕ
	|	НЕ ТабличнаяЧасть.КорРазделУчета = НЕОПРЕДЕЛЕНО
	// Исключаем движения в которых совпадают отправитель и получатель
	|	И (НЕ ТабличнаяЧасть.РазделУчета = ТабличнаяЧасть.КорРазделУчета
	|		ИЛИ НЕ ТабличнаяЧасть.ВидЗапасов = ТабличнаяЧасть.КорВидЗапасов
	|		ИЛИ НЕ (ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатуры =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатуры)
	|		И НЕ (НЕ ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
	|			И ТабличнаяЧасть.АналитикаУчетаНоменклатурыБезНазначения =
	|					ТабличнаяЧасть.КорАналитикаУчетаНоменклатурыБезНазначения)
	|	)
	|	И НЕ (ТабличнаяЧасть.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И ТабличнаяЧасть.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ИдентификаторМетаданных                                  КАК ТипСсылки,
	|	Подразделения.Организация                                 КАК Организация,
	|	Подразделения.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Партнер                                    КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                                              КАК Контрагент,
	|	ВЫБОР 
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Договор
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Договор
	|		КОГДА НЕ ТабличнаяЧасть.ПроизводствоНаСтороне
	|			ТОГДА ТабличнаяЧасть.Договор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Договор,
	|	ТабличнаяЧасть.НаправлениеДеятельности                    КАК НаправлениеДеятельности,
	|	Подразделения.ДополнительнаяЗапись                        КАК ДополнительнаяЗапись,
	|	Подразделения.Подразделение                               КАК Подразделение,
	|	Подразделения.Подразделение                               КАК МестоХранения,
	|	Подразделения.Дата                                        КАК ДатаДокументаИБ,
	|	ТабличнаяЧасть.Ссылка                                     КАК Ссылка,
	|	ТабличнаяЧасть.Распоряжение.УникальныйИдентификаторСтрока КАК РазделительЗаписи,
	|	ТабличнаяЧасть.Номер                                      КАК НомерДокументаИБ,
	|	ТабличнаяЧасть.Статус                                     КАК Статус,
	|	ТабличнаяЧасть.Ответственный                              КАК Ответственный,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА (100))                           КАК Дополнительно,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Комментарий КАК СТРОКА (100))     КАК Комментарий,
	|	ТабличнаяЧасть.Проведен                                   КАК Проведен,
	|	ТабличнаяЧасть.ПометкаУдаления                            КАК ПометкаУдаления,
	|	Подразделения.Дата                                        КАК ДатаПервичногоДокумента,
	|	ТабличнаяЧасть.НомерНаПечать                              КАК НомерПервичногоДокумента,
	|	0                                                         КАК Сумма,
	|	ТабличнаяЧасть.Валюта                                     КАК Валюта,
	|	ЛОЖЬ                                                      КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                                              КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                              КАК ИсправляемыйДокумент,
	|	Подразделения.Дата                                        КАК ДатаОтраженияВУчете,
	|	ВЫБОР 
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|				ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Приоритет
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|				ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Приоритет
	|		ИНАЧЕ ТабличнаяЧасть.Распоряжение.Приоритет
	|	КОНЕЦ                                                     КАК Приоритет
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТабличнаяЧасть
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОснований КАК Подразделения
	|	ПО ТабличнаяЧасть.Ссылка = Подразделения.Ссылка
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
		// Обеспечение потребности в производстве
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
		|	ДанныеШапки.Дата                       КАК Период,
		|
		|	ДанныеШапки.Распоряжение               КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|
		|	ДанныеШапки.Спецификация               КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеШапки.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ВЫБОР
		|					КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|						ТОГДА ТабличнаяЧасть.Подразделение
		|					ИНАЧЕ ТабличнаяЧасть.Получатель
		|				  КОНЕЦ
		|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|
		|	ВЫБОР
		|		КОГДА ДанныеШапки.ДинамическаяСтруктура
		|			ТОГДА ТабличнаяЧасть.Ссылка
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ КАК ВыпускающийЭтап,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы        КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаАктивовПассивов,
		|
		|	0                                      КАК Требуется,
		|
		|	ВЫБОР КОГДА ДанныеШапки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)) ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Запланировано,
		|
		|	ВЫБОР
		|		КОГДА ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению) ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК ПереданоКПроизводству,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|				И НЕ ТабличнаяЧасть.Произведено 
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Производится,
		|
		|	ВЫБОР
		|		КОГДА ДанныеШапки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|					И ТабличнаяЧасть.Произведено
		|				ИЛИ ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|					И ДанныеШапки.ПроизводствоНаСтороне
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Произведено,
		|
		|	0                                      КАК ТребуетсяРазборка,
		|	0                                      КАК ГотовКРазборке,
		|	0                                      КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
		|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В (&Ссылка)
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.ОбработатьПоСпецификации
		|		И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
		|	ДанныеШапки.Дата                       КАК Период,
		|	ДанныеШапки.Распоряжение               КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|
		|	ДанныеШапки.Спецификация               КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеШапки.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ВЫБОР
		|					КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|						ТОГДА ТабличнаяЧасть.Подразделение
		|					ИНАЧЕ ТабличнаяЧасть.Получатель
		|				  КОНЕЦ
		|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ТабличнаяЧасть.Получатель
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|
		|	ВЫБОР
		|		КОГДА ДанныеШапки.ДинамическаяСтруктура
		|			ТОГДА ТабличнаяЧасть.Ссылка
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ КАК ВыпускающийЭтап,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы        КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                  КАК АналитикаАктивовПассивов,
		|
		|	0                                      КАК Требуется,
		|
		|	ВЫБОР КОГДА ДанныеШапки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован)) ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Запланировано,
		|
		|	ВЫБОР
		|		КОГДА ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК ПереданоКПроизводству,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|				И НЕ ТабличнаяЧасть.Произведено 
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Производится,
		|
		|	ВЫБОР 
		|		КОГДА ДанныеШапки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|							ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) 
		|					И ТабличнаяЧасть.Произведено
		|				ИЛИ ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|					И ДанныеШапки.ПроизводствоНаСтороне
		|			ТОГДА
		|
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                  КАК Произведено,
		|
		|	0                                      КАК ТребуетсяРазборка,
		|	0                                      КАК ГотовКРазборке,
		|	0                                      КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
		|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В (&Ссылка)
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.ОбработатьПоСпецификации
		|		И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Формирование потребности в обеспечении производства
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка                  КАК Регистратор,
		|	ДанныеШапки.Дата                       КАК Период,
		|	ДанныеШапки.Распоряжение               КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|
		|	ТабличнаяЧасть.Спецификация            КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеШапки.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.Ссылка
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|		ТабличнаяЧасть.Склад
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|		ТабличнаяЧасть.Подразделение
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|
		|	ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка) КАК ВыпускающийЭтап,
		|
		|   ЛОЖЬ                                    КАК СписатьНаРасходы,
		|	НЕОПРЕДЕЛЕНО                            КАК СтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                            КАК АналитикаРасходов,
		|	НЕОПРЕДЕЛЕНО                            КАК АналитикаАктивовПассивов,
		|
		|	ТабличнаяЧасть.Количество              КАК Требуется,
		|
		|	0                                      КАК Запланировано,
		|	0                                      КАК ПереданоКПроизводству,
		|	0                                      КАК Производится,
		|	0                                      КАК Произведено,
		|
		|	0                                      КАК ТребуетсяРазборка,
		|	0                                      КАК ГотовКРазборке,
		|	0                                      КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
		|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В (&Ссылка)
		|		И ТабличнаяЧасть.Производится И НЕ (&ТекстЗапросаРазбираемоеИзделие)
		|		И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка                КАК Регистратор,
		|	ДанныеШапки.Дата                     КАК Период,
		|
		|	ДанныеШапки.Распоряжение             КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|
		|	ДанныеШапки.Спецификация             КАК Спецификация,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Производится
		|			ТОГДА
		|				ТабличнаяЧасть.Назначение
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Назначение,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Производится
		|				И ВЫРАЗИТЬ(ДанныеШапки.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА
		|				ТабличнаяЧасть.Ссылка
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Этап,
		|
		|	ТабличнаяЧасть.Склад                                  КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)КАК Подразделение,
		|
		|	ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка) КАК ВыпускающийЭтап,
		|
		|   ЛОЖЬ                                                  КАК СписатьНаРасходы,
		|	НЕОПРЕДЕЛЕНО                                          КАК СтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                          КАК АналитикаРасходов,
		|	НЕОПРЕДЕЛЕНО                                          КАК АналитикаАктивовПассивов,
		|
		|	0                                    КАК Требуется,
		|	0                                    КАК Запланировано,
		|	0                                    КАК ПереданоКПроизводству,
		|	0                                    КАК Производится,
		|	0                                    КАК Произведено,
		|	0                                    КАК ТребуетсяРазборка,
		|	0                                    КАК ГотовКРазборке,
		|	ТабличнаяЧасть.Количество            КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
		|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В (&Ссылка) И (&ТекстЗапросаРазбираемоеИзделие)
		|		И ТабличнаяЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		И НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Формирование потребности в разборке
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка                КАК Регистратор,
		|	ДанныеШапки.Дата                     КАК Период,
		|
		|	ДанныеШапки.Распоряжение             КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|
		|	ТабличнаяЧасть.Спецификация          КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение            КАК Назначение,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеШапки.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                КАК Этап,
		|
		|	ТабличнаяЧасть.Получатель                             КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)КАК Подразделение,
		|
		|	ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка) КАК ВыпускающийЭтап,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы      КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаАктивовПассивов,
		|
		|	0                                    КАК Требуется,
		|
		|	0                                    КАК Запланировано,
		|	0                                    КАК ПереданоКПроизводству,
		|	0                                    КАК Производится,
		|	0                                    КАК Произведено,
		|
		|	ВЫБОР 
		|		КОГДА НЕ ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ТребуетсяРазборка,
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ГотовКРазборке,
		|
		|	0                                    КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
		|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В (&Ссылка)
		|		И ТабличнаяЧасть.ОбработатьПоСпецификации
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|	И НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка                КАК Регистратор,
		|	ДанныеШапки.Дата                     КАК Период,
		|
		|	ДанныеШапки.Распоряжение             КАК Распоряжение,
		|
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|
		|	ТабличнаяЧасть.Спецификация          КАК Спецификация,
		|
		|	ТабличнаяЧасть.Назначение            КАК Назначение,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеШапки.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется
		|			ТОГДА ТабличнаяЧасть.ЭтапПотребитель
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                                КАК Этап,
		|
		|	ТабличнаяЧасть.Получатель                             КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)КАК Подразделение,
		|
		|	ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка) КАК ВыпускающийЭтап,
		|
		|   ТабличнаяЧасть.СписатьНаРасходы      КАК СписатьНаРасходы,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаРасходов,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.СписатьНаРасходы
		|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                КАК АналитикаАктивовПассивов,
		|
		|	0                                    КАК Требуется,
		|	0                                    КАК Запланировано,
		|	0                                    КАК ПереданоКПроизводству,
		|	0                                    КАК Производится,
		|	0                                    КАК Произведено,
		|
		|	ВЫБОР 
		|		КОГДА НЕ ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ТребуетсяРазборка,
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.Произведено
		|			ТОГДА
		|		ТабличнаяЧасть.Количество
		|	КОНЕЦ                                КАК ГотовКРазборке,
		|
		|	0                                    КАК ЗапланированаРазборка
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДанныеШапки
		|		ПО ТабличнаяЧасть.Ссылка = ДанныеШапки.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В (&Ссылка)
		|		И ТабличнаяЧасть.ОбработатьПоСпецификации
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|	И НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
		|";
		
	// Разбираемое изделие в табличной части "Обеспечение материалами и работами" никак не идентифицировано (интерфейсное решение)
	//      - в обеспечении нет колонки <Разбираемое изделие>
	//      - в заказе на производство не указано под какое назначение приходит разбираемое изделие
	// (поиск выполняется по разбираемому изделию - основному изделию партии)
	ТекстЗапросаРазбираемоеИзделие = "
	|( ТабличнаяЧасть.Ссылка.ПартияПроизводства.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
	|	И ТабличнаяЧасть.Номенклатура   = ТабличнаяЧасть.Ссылка.ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|	И ТабличнаяЧасть.Характеристика = ТабличнаяЧасть.Ссылка.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаРазбираемоеИзделие", ТекстЗапросаРазбираемоеИзделие);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПроизводство(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПроизводство";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВсеИзделия", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВсеИзделия(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                КАК Регистратор,
	|
	|	ТабличнаяЧасть.Номенклатура                          КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                        КАК Характеристика,
	|	ТабличнаяЧасть.Склад                                 КАК Склад,
	|	ТабличнаяЧасть.Назначение                            КАК Назначение,
	|
	|	ТабличнаяЧасть.ЗаказНаПроизводство                   КАК ЗаказНаПроизводство,
	|
	|	ТабличнаяЧасть.Подразделение                         КАК Подразделение,
	|	ТабличнаяЧасть.ПартияПроизводства                    КАК Партия,
	|	ТабличнаяЧасть.Ссылка                                КАК Этап,
	|   
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Произведено
	|						ИЛИ ТабличнаяЧасть.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
	|				НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ
	|				ТабличнаяЧасть.ЗаказВГрафикеПоступления
	|		КОНЕЦ                                            КАК ЗаказНаПоступление,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Произведено
	|						ИЛИ ТабличнаяЧасть.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
	|				ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ
	|				ТабличнаяЧасть.ДатаВГрафикеПоступления
	|		КОНЕЦ                                            КАК ДатаПоступления,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ТабличнаяЧасть.Произведено
	|						ИЛИ ТабличнаяЧасть.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
	|				0
	|			ИНАЧЕ
	|				ТабличнаяЧасть.Количество
	|		КОНЕЦ)                                           КАК Запущено,
	|	СУММА(ВЫБОР
	|		КОГДА ТабличнаяЧасть.Произведено
	|						ИЛИ ТабличнаяЧасть.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ)                                           КАК Готово
	|ИЗ
	|	ВтВсеИзделия КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|		И ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура И ТабличнаяЧасть.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Склад,
	|	ТабличнаяЧасть.Назначение,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Произведено
	|						ИЛИ ТабличнаяЧасть.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
	|				НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ
	|				ТабличнаяЧасть.ЗаказВГрафикеПоступления
	|		КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Произведено
	|						ИЛИ ТабличнаяЧасть.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) ТОГДА
	|				ДАТАВРЕМЯ(1,1,1)
	|			ИНАЧЕ
	|				ТабличнаяЧасть.ДатаВГрафикеПоступления
	|		КОНЕЦ,
	|	ТабличнаяЧасть.Подразделение,
	|	ТабличнаяЧасть.ПартияПроизводства,
	|	ТабличнаяЧасть.ЗаказНаПроизводство
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСтруктураЗаказа(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СтруктураЗаказа";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВсеИзделия", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВсеИзделия(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Номенклатура                                               КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                             КАК Характеристика,
	|	ТабличнаяЧасть.Склад                                                      КАК Склад,
	|	ТабличнаяЧасть.Назначение                                                 КАК Назначение,
	|	ТабличнаяЧасть.ЗаказНаПроизводство                                        КАК ЗаказНаПроизводство,
	|	&ПустойКлючСвязи                                                          КАК КлючНоменклатура,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТабличнаяЧасть.ПартияПроизводства)                КАК КлючПартия,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТабличнаяЧасть.Ссылка)                            КАК КлючНабор,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Запущено)    КАК ВидСтроки,
	|	ТабличнаяЧасть.ЗаказВГрафикеПоступления                                   КАК ЗаказНаПоступление,
	|	ТабличнаяЧасть.ДатаВГрафикеПоступления                                    КАК ДатаПоступления,
	|	ТабличнаяЧасть.Подразделение                                              КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка                                                     КАК Этап,
	|	ТабличнаяЧасть.Спецификация                                               КАК Спецификация,
	|	ТабличнаяЧасть.Назначение                                                 КАК НазначениеСтруктуры,
	|	0                                                                         КАК Уровень,
	|	0                                                                         КАК ДлительностьДоВыпуска,
	|	СУММА(ТабличнаяЧасть.Количество)                                          КАК Запущено,
	|	0                                                                         КАК Требуется,
	|	0                                                                         КАК Готово,
	|	0                                                                         КАК НеОбеспечивать
	|
	|ИЗ
	|	ВтВсеИзделия КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|		И НЕ ТабличнаяЧасть.Произведено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Склад,
	|	ТабличнаяЧасть.Назначение,
	|	ТабличнаяЧасть.ЗаказВГрафикеПоступления,
	|	ТабличнаяЧасть.ДатаВГрафикеПоступления,
	|	ТабличнаяЧасть.ЗаказНаПроизводство,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.ПартияПроизводства,
	|	ТабличнаяЧасть.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Номенклатура                                               КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                             КАК Характеристика,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|				ТабличнаяЧасть.Подразделение
	|			ИНАЧЕ
	|				ТабличнаяЧасть.Склад
	|			КОНЕЦ                                                             КАК Склад,
	|	ТабличнаяЧасть.Назначение                                                 КАК Назначение,
	|
	|	ТабличнаяЧасть.Ссылка.Распоряжение                                        КАК ЗаказНаПроизводство,
	|
	|	ТабличнаяЧасть.КлючНоменклатура                                           КАК КлючНоменклатура,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТабличнаяЧасть.Ссылка.ПартияПроизводства)         КАК КлючПартия,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТабличнаяЧасть.Ссылка)                            КАК КлючНабор,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление) КАК ВидСтроки,
	|
	|	НЕОПРЕДЕЛЕНО                                                              КАК ЗаказНаПоступление,
	|	ДАТАВРЕМЯ(1,1,1)                                                          КАК ДатаПоступления,
	|	
	|	ТабличнаяЧасть.Подразделение                                              КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка                                                     КАК Этап,
	|	ТабличнаяЧасть.Ссылка.Спецификация                                        КАК Спецификация,
	|	
	|	ТабличнаяЧасть.НазначениеОбеспечения                                      КАК НазначениеСтруктуры,
	|
	|	ISNULL(МестоПартииВСтруктуреЗаказа.Уровень, 0)                            КАК Уровень,
	|	ISNULL(МестоПартииВСтруктуреЗаказа.ДлительностьДоВыпуска, 0)
	|		+ ТабличнаяЧасть.Ссылка.ДлительностьДоВыпуска
	|		+ ТабличнаяЧасть.Ссылка.ДлительностьЭтапа 
	|			* ВЫБОР
	|				ТабличнаяЧасть.Ссылка.ЕдиницаИзмеренияДлительностиЭтапа
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|						ТОГДА 60
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|						ТОГДА 3600
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|						ТОГДА 86400
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|						ТОГДА 86400
	|					ИНАЧЕ 1
	|				КОНЕЦ                                                         КАК ДлительностьДоВыпуска,
	|	
	|	0                                                                         КАК Запущено,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
	|			ТОГДА ТабличнаяЧасть.Количество
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                                                     КАК Требуется,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|			ТОГДА ТабличнаяЧасть.Количество
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                                                     КАК Готово,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|			ТОГДА ТабличнаяЧасть.Количество
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                                                     КАК НеОбеспечивать
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПартииВСтруктуреЗаказа КАК МестоПартииВСтруктуреЗаказа
	|		ПО МестоПартииВСтруктуреЗаказа.Партия = ТабличнаяЧасть.Ссылка.ПартияПроизводства
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|	И ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат))
	|	И ТабличнаяЧасть.ВариантОбеспечения В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется))
	|	И НЕ ТабличнаяЧасть.Отменено
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыСтруктурыЗаказа(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыСтруктурыЗаказа";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.ВидРабот                                                   КАК ВидРабот,
	|
	|	ТабличнаяЧасть.Ссылка.Распоряжение                                        КАК ЗаказНаПроизводство,
	|
	|	ТабличнаяЧасть.КлючВидРабот                                               КАК КлючВидРабот,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТабличнаяЧасть.Ссылка.ПартияПроизводства)         КАК КлючПартия,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТабличнаяЧасть.Ссылка)                            КАК КлючНабор,
	|
	|	ТабличнаяЧасть.Подразделение                                              КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка                                                     КАК Этап,
	|	ТабличнаяЧасть.Ссылка.Спецификация                                        КАК Спецификация,
	|
	|	ТабличнаяЧасть.Количество                                                 КАК Количество
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Проведен
	|	И ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат))
	|	И НЕ ТабличнаяЧасть.Выполнено
	|	И НЕ ТабличнаяЧасть.Отменено
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, ИмяРегистра);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	ВидыЗапасов.ДатаОперации				КАК Период,
	|	&Организация							КАК Организация,
	|	ВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	АналитикаКомитента.КлючАналитики		КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.ВидЗапасов.Валюта			КАК Валюта,
	|	ВидыЗапасов.НомерГТД					КАК НомерГТД,
	|	0										КАК Количество,
	|	0										КАК СуммаВыручки,
	|	0										КАК СуммаВыручкиРегл,
	|	0										КАК СуммаВыручкиУпр,
	|	ВидыЗапасов.Количество					КАК КоличествоСписано,
	|	0										КАК КоличествоКОформлению,
	|	0										КАК КоличествоКОформлениюПоРНПТ,
	|	0										КАК СуммаВыручкиКОформлению,
	|	ВидыЗапасов.Количество					КАК КоличествоСписаноКОформлению,
	|	ВидыЗапасов.КоличествоПоРНПТ			КАК КоличествоСписаноКОформлениюПоРНПТ,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура		КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика	КАК Характеристика,
	|	ВидыЗапасов.ХозяйственнаяОперация		КАК ХозяйственнаяОперация,
	|	&ВыпускПодДеятельность					КАК НалогообложениеНДС,
	|	ВидыЗапасов.ИдентификаторФинЗаписи		КАК ИдентификаторФинЗаписи,
	|	НастройкиХозяйственныхОпераций.Ссылка	КАК НастройкаХозяйственнойОперации,
	|	ВидыЗапасов.ИдентификаторСтроки         КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаКомитента
	|		ПО АналитикаКомитента.Номенклатура = ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
	|			И АналитикаКомитента.Характеристика = ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика
	|			И АналитикаКомитента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И АналитикаКомитента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			И АналитикаКомитента.МестоХранения = ВидыЗапасов.ВидЗапасов.ВладелецТовара
	|			И АналитикаКомитента.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = ВидыЗапасов.ХозяйственнаяОперация
	|
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И (ВидыЗапасов.СписатьНаРасходы
	|		ИЛИ ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	// Выходные изделия
	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                               КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА ТабличнаяЧасть.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК Накладная,
	|	ЛОЖЬ                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                        КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                        КАК НастройкаСчетовУчета,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|					ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|				ИНАЧЕ ТабличнаяЧасть.Ссылка
	|			КОНЕЦ
	|	КОНЕЦ                                               КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                     КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                           КАК Склад,
	|	ЕСТЬNULL(ЗаказыПереработчику.Партнер, ТабличнаяЧасть.Подразделение) КАК Отправитель,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика)
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)
	|	КОНЕЦ                                               КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                           КАК Назначение,
	|	0                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                        КАК Серия,
	|	ТабличнаяЧасть.Количество                           КАК Количество,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL                  КАК ЭтоНакладная,
	|	ЛОЖЬ                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|	ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|	И Кладовые.ЦеховаяКладовая
	|	И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ЗаказыПереработчику
	|	ПО ЗаказыПереработчику.Ссылка = ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|	И НЕ ЗаказыПереработчику.ДополнительнаяЗапись
	|	И НЕ ТабличнаяЧасть.Ссылка.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Получатель) = ТИП(Справочник.Склады)
	|	И (ТабличнаяЧасть.Произведено
	|		ИЛИ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> НЕОПРЕДЕЛЕНО
	|			И ЕСТЬNULL(ЗаказыПереработчику.Проведен, ЛОЖЬ)
	|			И ЕСТЬNULL(ЗаказыПереработчику.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.ПустаяСсылка)) В (
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|			И НЕ ТабличнаяЧасть.Ссылка.ОставитьИзделияУПереработчика)
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Отменено
	|";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		"ТабличнаяЧасть");
	
	// Побочные изделия
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                               КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА ТабличнаяЧасть.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК Накладная,
	|	ЛОЖЬ                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                        КАК ИсправляемыйДокумент,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|					ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|				ИНАЧЕ ТабличнаяЧасть.Ссылка
	|			КОНЕЦ
	|	КОНЕЦ                                               КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                     КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                           КАК Склад,
	|	ЕСТЬNULL(ЗаказыПереработчику.Партнер, ТабличнаяЧасть.Подразделение) КАК Отправитель,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика)
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)
	|	КОНЕЦ                                               КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                           КАК Назначение,
	|	0                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                        КАК Серия,
	|	ТабличнаяЧасть.Количество                           КАК Количество,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL                  КАК ЭтоНакладная,
	|	ЛОЖЬ                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|	ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|	И Кладовые.ЦеховаяКладовая
	|	И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ЗаказыПереработчику
	|	ПО ЗаказыПереработчику.Ссылка = ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|	И НЕ ЗаказыПереработчику.ДополнительнаяЗапись
	|	И НЕ ТабличнаяЧасть.Ссылка.ЗаказПереработчику = НЕОПРЕДЕЛЕНО
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Получатель) = ТИП(Справочник.Склады)
	|	И (ТабличнаяЧасть.Произведено 
	|		ИЛИ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТабличнаяЧасть.Ссылка.ЗаказПереработчику <> НЕОПРЕДЕЛЕНО
	|			И ЕСТЬNULL(ЗаказыПереработчику.Проведен, ЛОЖЬ)
	|			И ЕСТЬNULL(ЗаказыПереработчику.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.ПустаяСсылка)) В (
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|			И НЕ ТабличнаяЧасть.Ссылка.ОставитьИзделияУПереработчика)
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Отменено
	|";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		"ТабличнаяЧасть");
		
	// Экономия материалов
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                               КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА ТабличнаяЧасть.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК Накладная,
	|	ЛОЖЬ                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                        КАК ИсправляемыйДокумент,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			ВЫБОР 
	//++ Устарело_Переработка24
	|				КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|					И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|					ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	//-- Устарело_Переработка24
	|				КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|					И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|					И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|					ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|				ИНАЧЕ ТабличнаяЧасть.Ссылка
	|			КОНЕЦ
	|	КОНЕЦ                                               КАК Заказ,
	|	ТабличнаяЧасть.ДатаОперации                         КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                           КАК Склад,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Партнер
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                               КАК Отправитель,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика)
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)
	|	КОНЕЦ                                               КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                           КАК Назначение,
	|	0                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                        КАК Серия,
	|	ТабличнаяЧасть.Количество                           КАК Количество,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL                  КАК ЭтоНакладная,
	|	ЛОЖЬ                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Получатель) = ТИП(Справочник.Склады)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		"ТабличнаяЧасть");
	
КонецПроцедуры

Процедура ОформитьПоступлениеТоваровПоОдноходовке(Запрос, ТекстыЗапроса, Регистры)
	
	ТекущийОбъектМетаданных = Метаданные.Документы.ЭтапПроизводства2_2;
	
	// Передача выходных изделий в нашу кладовую
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                                        КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка                                                        КАК Накладная,
	|	ЛОЖЬ                                                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                                              КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                                  КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                                    КАК Склад,
	|	ТабличнаяЧасть.Подразделение                                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                                                    КАК Назначение,
	|	ТабличнаяЧасть.СтатусУказанияСерий                                           КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Серия                                                         КАК Серия,
	|	ТабличнаяЧасть.Количество                                                    КАК Количество,
	|	ИСТИНА                                                                       КАК ЭтоНакладная,
	|	ЛОЖЬ                                                                         КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                         КАК СверхЗаказа,
	|	ЛОЖЬ                                                                         КАК ЭтоКорректировкаВнутриНакладной
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL";
	
	ДополнительныеПоляСоединенияССериями = Новый Массив();
	ДополнительныеПоляСоединенияССериями.Добавить("ДатаПроизводства");
	ДополнительныеПоляСоединенияССериями.Добавить("Произведено");
	ДополнительныеПоляСоединенияССериями.Добавить("Отменено");
	ДополнительныеПоляСоединенияССериями.Добавить("Получатель");
	ДополнительныеПоляСоединенияССериями.Добавить("Подразделение");
	
	ПараметрыМодульногоПроведения = СкладыСервер.ПараметрыМодульногоПроведения();
	ПараметрыМодульногоПроведения.ИмяТЧСерии = "ВыходныеИзделияСерии";
	ПараметрыМодульногоПроведения.СинонимТаблицыДокумента = "ТабличнаяЧасть";
	ПараметрыМодульногоПроведения.ДополнительныеПоляСоединенияССериями = ДополнительныеПоляСоединенияССериями;
	
	СкладыСервер.ОформитьПоступлениеТоваровПоОдноходовкеСНастройкойСоединенияСерий(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных,
		ПараметрыМодульногоПроведения);
		
	// Передача побочных изделий в нашу кладовую
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                                        КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка                                                        КАК Накладная,
	|	ЛОЖЬ                                                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Заказ,
	|	ТабличнаяЧасть.ДатаПроизводства                                              КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                                  КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                                    КАК Склад,
	|	ТабличнаяЧасть.Подразделение                                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                                                    КАК Назначение,
	|	ТабличнаяЧасть.СтатусУказанияСерий                                           КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Серия                                                         КАК Серия,
	|	ТабличнаяЧасть.Количество                                                    КАК Количество,
	|	ИСТИНА                                                                       КАК ЭтоНакладная,
	|	ЛОЖЬ                                                                         КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                         КАК СверхЗаказа,
	|	ЛОЖЬ                                                                         КАК ЭтоКорректировкаВнутриНакладной
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Произведено
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL";
	
	ДополнительныеПоляСоединенияССериями = Новый Массив();
	ДополнительныеПоляСоединенияССериями.Добавить("ДатаПроизводства");
	ДополнительныеПоляСоединенияССериями.Добавить("Произведено");
	ДополнительныеПоляСоединенияССериями.Добавить("Отменено");
	ДополнительныеПоляСоединенияССериями.Добавить("Получатель");
	ДополнительныеПоляСоединенияССериями.Добавить("Подразделение");
	
	ПараметрыМодульногоПроведения = СкладыСервер.ПараметрыМодульногоПроведения();
	ПараметрыМодульногоПроведения.ИмяТЧСерии = "ПобочныеИзделияСерии";
	ПараметрыМодульногоПроведения.СинонимТаблицыДокумента = "ТабличнаяЧасть";
	ПараметрыМодульногоПроведения.ДополнительныеПоляСоединенияССериями = ДополнительныеПоляСоединенияССериями;
	
	СкладыСервер.ОформитьПоступлениеТоваровПоОдноходовкеСНастройкойСоединенияСерий(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных,
		ПараметрыМодульногоПроведения);
	
	// Передача неизрасходованных материалов в нашу кладовую
	ТекстЗапросаДокумента =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                                        КАК Ссылка,
	|	ТабличнаяЧасть.Ссылка                                                        КАК Накладная,
	|	ЛОЖЬ                                                                         КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК ИсправляемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Заказ,
	|	ТабличнаяЧасть.ДатаОперации                                                  КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                                 КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                                  КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                                    КАК Склад,
	|	ТабличнаяЧасть.Подразделение                                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                                  КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                                КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                                                    КАК Назначение,
	|	ТабличнаяЧасть.СтатусУказанияСерий                                           КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Серия                                                         КАК Серия,
	|	ТабличнаяЧасть.Количество                                                    КАК Количество,
	|	ИСТИНА                                                                       КАК ЭтоНакладная,
	|	ЛОЖЬ                                                                         КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                         КАК СверхЗаказа,
	|	ЛОЖЬ                                                                         КАК ЭтоКорректировкаВнутриНакладной
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Получатель
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL";
	
	ДополнительныеПоляСоединенияССериями = Новый Массив();
	ДополнительныеПоляСоединенияССериями.Добавить("ДатаОперации");
	ДополнительныеПоляСоединенияССериями.Добавить("Получатель");
	ДополнительныеПоляСоединенияССериями.Добавить("Подразделение");
	
	ПараметрыМодульногоПроведения = СкладыСервер.ПараметрыМодульногоПроведения();
	ПараметрыМодульногоПроведения.ИмяТЧСерии = "ЭкономияМатериаловСерии";
	ПараметрыМодульногоПроведения.СинонимТаблицыДокумента = "ТабличнаяЧасть";
	ПараметрыМодульногоПроведения.ДополнительныеПоляСоединенияССериями = ДополнительныеПоляСоединенияССериями;
	
	СкладыСервер.ОформитьПоступлениеТоваровПоОдноходовкеСНастройкойСоединенияСерий(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных,
		ПараметрыМодульногоПроведения);
	
КонецПроцедуры

Процедура ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                         КАК Ссылка,
	|	ВЫБОР КОГДА ТабличнаяЧасть.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|				ТабличнаяЧасть.ДатаОтгрузки
	|			ИНАЧЕ
	|				ТабличнаяЧасть.Ссылка.Дата
	|		КОНЕЦ                                     КАК Период,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|		ИНАЧЕ ТабличнаяЧасть.Ссылка
	|	КОНЕЦ                                         КАК Заказ,
	|	ТабличнаяЧасть.Ссылка                         КАК Накладная,
	|	ЛОЖЬ                                          КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                  КАК ИсправляемыйДокумент,
	|	ВЫБОР 
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Партнер
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                         КАК Получатель,
	|	ТабличнаяЧасть.Склад                          КАК Склад,
	|	ТабличнаяЧасть.Номенклатура                   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                 КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТабличнаяЧасть.Серия                          КАК Серия,
	|	ТабличнаяЧасть.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Количество                     КАК Количество,	
	|	ЛОЖЬ			                              КАК Отменено,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL            КАК ЭтоНакладная,
	|	ЛОЖЬ                                          КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                          КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Склад
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	СкладыСервер.ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
		
КонецПроцедуры

Процедура ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                         КАК Ссылка,
	|	ТабличнаяЧасть.ДатаОтгрузки                   КАК Период,
	|	ВЫБОР 
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
	|		ИНАЧЕ ТабличнаяЧасть.Ссылка
	|	КОНЕЦ                                         КАК Заказ,
	|	ТабличнаяЧасть.Ссылка                         КАК Накладная,
	|	ЛОЖЬ                                          КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                  КАК ИсправляемыйДокумент,
	|	ВЫБОР 
	//++ Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Партнер
	//-- Устарело_Переработка24
	|		КОГДА ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|			И ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
	|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
	|			ТОГДА ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Партнер
	|		ИНАЧЕ ТабличнаяЧасть.Подразделение
	|	КОНЕЦ                                         КАК Получатель,
	|	ТабличнаяЧасть.Склад                          КАК Склад,
	|	ТабличнаяЧасть.Номенклатура                   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                 КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТабличнаяЧасть.Серия                          КАК Серия,
	|	ТабличнаяЧасть.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Количество                     КАК Количество,	
	|	ЛОЖЬ			                              КАК Отменено,
	|	НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|		И НЕ Кладовые.Ссылка ЕСТЬ NULL            КАК ЭтоНакладная,
	|	ЛОЖЬ                                          КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                          КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Склад
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Отменено
	|";
	
	СкладыСервер.ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                         КАК Ссылка,
	|	ТабличнаяЧасть.ДатаОтгрузки                   КАК Период,
	|	ТабличнаяЧасть.Ссылка                         КАК Заказ,
	|	ТабличнаяЧасть.Ссылка                         КАК Накладная,
	|	ЛОЖЬ                                          КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                  КАК ИсправляемыйДокумент,
	|	ТабличнаяЧасть.Подразделение                  КАК Получатель,
	|	ТабличнаяЧасть.Склад                          КАК Склад,
	|	ТабличнаяЧасть.Номенклатура                   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                 КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Обособленно
	|			ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТабличнаяЧасть.Серия                          КАК Серия,
	|	ТабличнаяЧасть.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерий,
	|	ТабличнаяЧасть.Количество                     КАК Количество,	
	|	ЛОЖЬ                                          КАК ОтгрузкаПоЗаказу,
	|	ЛОЖЬ                                          КАК СверхЗаказа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Кладовые
	|		ПО Кладовые.Ссылка = ТабличнаяЧасть.Склад
	|		 И Кладовые.ЦеховаяКладовая
	|		 И Кладовые.Подразделение = ТабличнаяЧасть.Подразделение
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногоОборотнаяТара))
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ТабличнаяЧасть.Ссылка.ПроизводствоНаСтороне
	|	И НЕ Кладовые.Ссылка ЕСТЬ NULL
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	СкладыСервер.ОформитьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	Тексты = Новый СписокЗначений();
	
	#Область ОбеспечениеМатериаламиИРаботами
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата    КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Склад
		|			КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособленно ТОГДА
		|				ТабличнаяЧасть.Назначение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	
		|	ВЫБОР
		//++ Устарело_Переработка24
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		//-- Устарело_Переработка24
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ ТабличнаяЧасть.Ссылка
		|	КОНЕЦ                         КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	
		|	ИСТИНА                        КАК КонтрольСвободногоОстатка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка             КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата        КАК Период,
		|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабличнаяЧасть.Подразделение
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Обособленно ТОГДА
		|				ТабличнаяЧасть.Назначение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТабличнаяЧасть.Количество         КАК Количество,
		|	ТабличнаяЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	
		|	ВЫБОР
		//++ Устарело_Переработка24
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		//-- Устарело_Переработка24
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ ТабличнаяЧасть.Ссылка
		|	КОНЕЦ                             КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.НеОтгружатьЧастями ТОГДА
		|				ТабличнаяЧасть.Ссылка.ДатаОтгрузки
		|			ИНАЧЕ
		|				ТабличнаяЧасть.ДатаОтгрузки
		|		КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|		И ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И НЕ ТабличнаяЧасть.ВариантОбеспечения В
		|				(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПереданРанее),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
		|		И (ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура
		|				И НЕ ТабличнаяЧасть.ВариантОбеспечения В (
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)) ИЛИ НЕ ТабличнаяЧасть.Ссылка.ДинамическаяСтруктура)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	#КонецОбласти
	
	#Область ВыходныеИзделия
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ВЫБОР
		//++ Устарело_Переработка24
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		//-- Устарело_Переработка24
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|			И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ ТабличнаяЧасть.Ссылка
		|	КОНЕЦ                              КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|					
		|					ТабличнаяЧасть.ДатаПроизводства
		|					
		|			ИНАЧЕ
		|				ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|									И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
		|											
		|								НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
		|												
		|						ИНАЧЕ
		|										
		|								ДАТАВРЕМЯ(1,1,1)
		|										
		|					КОНЕЦ
		|					
		|		КОНЕЦ КАК ДатаПоступления,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1,1,1)
		|			ТОГДА
		|					
		|				ИСТИНА
		|					
		|			ИНАЧЕ
		|					
		|				НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|					И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение)
		|					
		|		КОНЕЦ КАК ДоступенДляРасхода,
		|	
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
		|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
		// рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
		|		 И ГрафикПроизводства.СтатусГрафика    = 0
		|		 И ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
		|		ПО ИСТИНА
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (НЕ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ИЛИ НЕ ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)))
		|	И НЕ ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ В (
		|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
		|			НЕОПРЕДЕЛЕНО)
		|	И (НЕ ТабличнаяЧасть.Ссылка.ОставитьИзделияУПереработчика
		|		ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		ИЛИ ТабличнаяЧасть.СписатьНаРасходы)
		|";
		
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	0                                  КАК Количество,
		|	НЕОПРЕДЕЛЕНО                       КАК ВариантОбеспечения,
		|	НЕОПРЕДЕЛЕНО                       КАК Заказ,
		|	НЕОПРЕДЕЛЕНО                       КАК ЖелаемаяДатаОтгрузки,
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|	И ТабличнаяЧасть.СписатьНаРасходы
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (НЕ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ИЛИ НЕ ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)))
		|	И НЕ ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ В (
		|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
		|			НЕОПРЕДЕЛЕНО)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка           КАК Ссылка,
		|	ТабличнаяЧасть.ДатаПроизводства КАК Период,
		|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика   КАК Характеристика,
		|	ТабличнаяЧасть.Получатель       КАК Склад,
		|	ТабличнаяЧасть.Назначение       КАК Назначение,
		|	ТабличнаяЧасть.Количество       КАК Количество,
		|	ИСТИНА                          КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка           КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.Произведено
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И (ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	#КонецОбласти
	
	#Область ПобочныеИзделия
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику2_5)
		|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику2_5).Проведен
		//++ Устарело_Переработка24
		|			ИЛИ ТИПЗНАЧЕНИЯ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику) = ТИП(Документ.ЗаказПереработчику)
		|				И ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка.ЗаказПереработчику КАК Документ.ЗаказПереработчику).Проведен
		//-- Устарело_Переработка24
		|			ТОГДА ТабличнаяЧасть.Ссылка.ЗаказПереработчику
		|		ИНАЧЕ
		|			ТабличнаяЧасть.Ссылка
		|		КОНЕЦ КАК Заказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|					
		|					ТабличнаяЧасть.ДатаПроизводства
		|					
		|			ИНАЧЕ
		|				ВЫБОР КОГДА НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|									И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение) ТОГДА
		|											
		|								НАЧАЛОПЕРИОДА(ГрафикПроизводства.ОкончаниеЭтапа, ДЕНЬ)
		|												
		|						ИНАЧЕ
		|										
		|								ДАТАВРЕМЯ(1,1,1)
		|										
		|					КОНЕЦ
		|					
		|		КОНЕЦ КАК ДатаПоступления,
		|
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ДатаПроизводства <> ДАТАВРЕМЯ(1,1,1)
		|			ТОГДА
		|					
		|				ИСТИНА
		|					
		|			ИНАЧЕ
		|					
		|				НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL
		|					И (КонстантаИспользоватьПланированиеПоМатериальнымРесурсам.Значение ИЛИ КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам.Значение)
		|					
		|		КОНЕЦ КАК ДоступенДляРасхода,
		|	
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО ГрафикПроизводства.ЭтапПроизводства = ТабличнаяЧасть.Ссылка
		|		 И ГрафикПроизводства.Распоряжение     = ТабличнаяЧасть.Ссылка.Распоряжение
		// рабочий график (см. РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик)
		|		 И ГрафикПроизводства.СтатусГрафика    = 0
		|		 И ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоМатериальнымРесурсам КАК КонстантаИспользоватьПланированиеПоМатериальнымРесурсам
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПланированиеПоПроизводственнымРесурсам КАК КонстантаИспользоватьПланированиеПоПроизводственнымРесурсам
		|		ПО ИСТИНА
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (НЕ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ИЛИ НЕ ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)))
		|	И НЕ ВЫБОР КОГДА ТабличнаяЧасть.СписатьНаРасходы ТОГДА
		|				ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|							ТабличнаяЧасть.Подразделение
		|						ИНАЧЕ
		|							ТабличнаяЧасть.Получатель
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ В (
		|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
		|			НЕОПРЕДЕЛЕНО)
		|	И (НЕ ТабличнаяЧасть.Ссылка.ОставитьИзделияУПереработчика
		|		ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		ИЛИ ТабличнаяЧасть.СписатьНаРасходы)
		|";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка              КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата         КАК Период,
		|	ТабличнаяЧасть.Номенклатура        КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика      КАК Характеристика,
		|	ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ КАК Склад,
		|	ТабличнаяЧасть.Назначение          КАК Назначение,
		|	0                                  КАК Количество,
		|	НЕОПРЕДЕЛЕНО                       КАК ВариантОбеспечения,
		|	НЕОПРЕДЕЛЕНО                       КАК Заказ,
		|	НЕОПРЕДЕЛЕНО                       КАК ЖелаемаяДатаОтгрузки,
		|	ИСТИНА                             КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабличнаяЧасть.Количество          КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.Отменено
		|	И ТабличнаяЧасть.СписатьНаРасходы
		|	И НЕ ТабличнаяЧасть.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (НЕ ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ИЛИ НЕ ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)))
		|	И НЕ ВЫБОР КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Подразделение
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Получатель
		|		КОНЕЦ В (
		|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
		|			НЕОПРЕДЕЛЕНО)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка           КАК Ссылка,
		|	ТабличнаяЧасть.ДатаПроизводства КАК Период,
		|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика   КАК Характеристика,
		|	ТабличнаяЧасть.Получатель       КАК Склад,
		|	ТабличнаяЧасть.Назначение       КАК Назначение,
		|	ТабличнаяЧасть.Количество       КАК Количество,
		|	ИСТИНА                          КАК ПоГрафику,
		|	ТабличнаяЧасть.Ссылка           КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|		И ТабличнаяЧасть.Произведено
		|		И НЕ ТабличнаяЧасть.Отменено
		|		И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И (ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение
		|			ИЛИ ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	#КонецОбласти
	
	#Область ЭкономияМатериалов
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.Ссылка.Дата    КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Получатель     КАК Склад,
		|	ТабличнаяЧасть.Назначение     КАК Назначение,
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	ТабличнаяЧасть.Ссылка         КАК Заказ,
		|	ТабличнаяЧасть.ДатаОперации   КАК ДатаПоступления,
		|	ИСТИНА                        КАК ДоступенДляРасхода,
		|	ЛОЖЬ                          КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                  КАК РаспоряжениеВГрафике,
		|	0                             КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		И (НЕ ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|				ИЛИ ТабличнаяЧасть.Получатель.Подразделение <> ТабличнаяЧасть.Подразделение)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	//
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка         КАК Ссылка,
		|	ТабличнаяЧасть.ДатаОперации   КАК Период,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Получатель     КАК Склад,
		|	ТабличнаяЧасть.Назначение     КАК Назначение,
		|	ТабличнаяЧасть.Количество     КАК Количество,
		|	ЛОЖЬ                          КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                  КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК ТабличнаяЧасть
		|ГДЕ
		|	НЕ ТабличнаяЧасть.СписатьНаРасходы
		|		И ТабличнаяЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
		|		И ТабличнаяЧасть.Получатель.ЦеховаяКладовая
		|		И ТабличнаяЧасть.Получатель.Подразделение = ТабличнаяЧасть.Подразделение";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, Тексты, Регистры, ТекстЗапросаТабЧасть);
	
	#КонецОбласти
	
	// Нужно объединить тексты запроса из-за особенностей пакетного формирования этапов.
	Если Тексты.Количество() > 0 Тогда
		Текст = СтрСоединить(Тексты.ВыгрузитьЗначения(), ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ТекстыЗапроса.Добавить(Текст, "ЗапасыИПотребности");
	КонецЕсли;
	
КонецПроцедуры

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтКоэффициентыПересчетаВалют");
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтКоэффициентыПересчетаВалют(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[1], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса, "СебестоимостьТоваров");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	ДанныеДляПроверки = ?(ТипЗнч(Документ) = Тип("ДокументОбъект.ЭтапПроизводства2_2"), Документ, Неопределено);
	
	Если ДанныеДляПроверки <> Неопределено
	   И ДанныеДляПроверки.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат
	   И ДанныеДляПроверки.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		
		Возврат ОписаниеОпераций;
		
	КонецЕсли;
	
	#Область ВнутреннееПоступление_ПриходВыпущеннойПродукции
	
	Если ДанныеДляПроверки = Неопределено
	 Или ДанныеДляПроверки.ВыходныеИзделия.Количество() > 0
	 Или ДанныеДляПроверки.ПобочныеИзделия.Количество() > 0 Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		// Описание документа
		|	ВтВидыЗапасов.ДатаОперации	КАК Период,
		|	ТаблицаДокумента.Ссылка		КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
		|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
		|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
		|	ВЫБОР
		|		КОГДА ВтВидыЗапасов.ХозяйственнаяОперация =
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
		|			ТОГДА ТаблицаДокумента.Ссылка
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ						КАК ДокументДвижения,
		|
		// Поля учета номенклатуры
		|	ВтВидыЗапасов.Организация					КАК Организация,
		|	ВтВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	ВтВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС, 
		|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|			ТОГДА ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС
		|		ИНАЧЕ ТаблицаДокумента.ВыпускПодДеятельность КОНЕЦ КАК ВидДеятельностиНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС, 
		|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|			ТОГДА ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС
		|		ИНАЧЕ ТаблицаДокумента.ВыпускПодДеятельность КОНЕЦ КАК ВидДеятельностиНДСДокумента,
		|
		// Поля аналитики учета партий
		|	ТаблицаДокумента.Ссылка				КАК Партия,
		|	ВтВидыЗапасов.АналитикаУчетаПартий	КАК АналитикаУчетаПартий,
		|	0									КАК КодСтроки,
		|
		// Корреспондирующие поля
		|	ВтВидыЗапасов.АналитикаУчетаПартий						КАК КорАналитикаУчетаПартий,
		|	ВЫБОР КОГДА ВтВидыЗапасов.ДополнениеДляДавальца
		|		ТОГДА ВтВидыЗапасов.КорАналитикаУчетаНоменклатуры
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ													КАК КорАналитикаУчетаНоменклатуры,
		|	ВЫБОР КОГДА ВтВидыЗапасов.ДополнениеДляДавальца
		|		ТОГДА ВтВидыЗапасов.КорВидЗапасов
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ													КАК КорВидЗапасов,
		|	НЕОПРЕДЕЛЕНО											КАК КорГруппаПродукции,
		|
		// Поля аналитики финансового учета
		|	НЕОПРЕДЕЛЕНО							КАК Сделка,
		|	ТаблицаДокумента.Подразделение			КАК Подразделение,
		|	ТаблицаДокумента.Ответственный			КАК Менеджер,
		|	ВтВидыЗапасов.АналитикаФинансовогоУчета КАК ГруппаПродукции,
		|
		// Количественные и суммовые показатели
		|	ВтВидыЗапасов.Количество			КАК Количество,
		|	ВтВидыЗапасов.СуммаУпр				КАК Стоимость,
		|	ВтВидыЗапасов.СуммаУпр				КАК СтоимостьБезНДС,
		|	ВтВидыЗапасов.СуммаРегл				КАК СтоимостьРегл,
		|	ВтВидыЗапасов.СуммаУпр				КАК СтоимостьУпр,
		|	ВтВидыЗапасов.СуммаЗабалансоваяУпр	КАК СтоимостьЗабалансовая,
		|	ВтВидыЗапасов.СуммаЗабалансоваяРегл	КАК СтоимостьЗабалансоваяРегл,
		|	0 КАК НДСРегл,
		|	0 КАК НДСУпр,
		|	0 КАК ДопРасходы,
		|	0 КАК ДопРасходыБезНДС,
		|	0 КАК ДопРасходыРегл,
		|	0 КАК ДопРасходыУпр,
		|	0 КАК ПостояннаяРазница,
		|	0 КАК ВременнаяРазница,
		|	0 КАК КорСтоимость,
		|
		// Прочие поля
		|	ВЫБОР КОГДА ВтВидыЗапасов.СписатьНаРасходы
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
		|	КОНЕЦ 											КАК ТипЗаписи,
		|	ВтВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
		|	ВтВидыЗапасов.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
		|	ВтВидыЗапасов.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
		|	ВтВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ВтВидыЗапасов
		|		ПО ИСТИНА
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&Ссылка)
		|	И ВтВидыЗапасов.ХозяйственнаяОперация В
		|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
		|	И (&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
		|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
		|			И ВтВидыЗапасов.ДатаОперации >= &ПериодПерезаписиДвижений)
		|";
	
		РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
			ОписаниеОпераций,
			Перечисления.ОперацииУчетаСебестоимости.ВнутреннееПоступление,
			ТекстЗапроса);
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область СписаниеНаРасходыАктивы_СписаниеМатериаловИВыпущеннойПродукцииИРаботНаРасходы
	
	Если ДанныеДляПроверки = Неопределено
	 Или ДанныеДляПроверки.ВыходныеИзделия.Количество() > 0
	   И ДанныеДляПроверки.ВыходныеИзделия.Найти(Истина, "СписатьНаРасходы") <> Неопределено
	 Или ДанныеДляПроверки.ПобочныеИзделия.Количество() > 0
	   И ДанныеДляПроверки.ПобочныеИзделия.Найти(Истина, "СписатьНаРасходы") <> Неопределено
	 Или ДанныеДляПроверки.ЭкономияМатериалов.Количество() > 0
	   И ДанныеДляПроверки.ЭкономияМатериалов.Найти(Истина, "СписатьНаРасходы") <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		// Описание документа
		|	ВтВидыЗапасов.ДатаОперации	КАК Период,
		|	ТаблицаДокумента.Ссылка		КАК Ссылка,
		|	&Ссылка						КАК ДокументДвижения,
		|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
		|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
		|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
		|
		// Поля учета номенклатуры
		|	ВтВидыЗапасов.Организация					КАК Организация,
		|	ВтВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	ВтВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС, 
		|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|			ТОГДА ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС
		|		ИНАЧЕ ТаблицаДокумента.ВыпускПодДеятельность КОНЕЦ КАК ВидДеятельностиНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС, 
		|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|			ТОГДА ВтВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.ВидДеятельностиНДС
		|		ИНАЧЕ ТаблицаДокумента.ВыпускПодДеятельность КОНЕЦ КАК ВидДеятельностиНДСДокумента,
		|
		// Поля аналитики учета партий
		|	ТаблицаДокумента.Ссылка				КАК Партия,
		|	ВтВидыЗапасов.АналитикаУчетаПартий	КАК АналитикаУчетаПартий,
		|
		// Корреспондирующие поля
		|	НЕОПРЕДЕЛЕНО 										КАК КорОрганизация,
		|	НЕОПРЕДЕЛЕНО 										КАК КорАналитикаУчетаНоменклатуры,
		|	НЕОПРЕДЕЛЕНО										КАК КорВидЗапасов,
		|	ВтВидыЗапасов.СтатьяРасходов						КАК СтатьяРасходовАктивов,
		|	ВЫБОР КОГДА ВтВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
		|		ТОГДА ВтВидыЗапасов.АналитикаРасходов
		|		ИНАЧЕ ВтВидыЗапасов.АналитикаАктивовПассивов
		|	КОНЕЦ												КАК АналитикаРасходовАктивов,
		|	ТаблицаДокумента.НаправлениеДеятельности			КАК КорНаправлениеДеятельности,
		|
		// Поля аналитики финансового учета
		|	НЕОПРЕДЕЛЕНО							КАК Сделка,
		|	ВтВидыЗапасов.Получатель				КАК Подразделение,
		|	ТаблицаДокумента.Ответственный			КАК Менеджер,
		|	ВтВидыЗапасов.АналитикаФинансовогоУчета КАК ГруппаПродукции,
		|
		// Количественные и суммовые показатели
		|	ВтВидыЗапасов.Количество			КАК Количество,
		|	ВтВидыЗапасов.СуммаУпр				КАК Стоимость,
		|	ВтВидыЗапасов.СуммаУпр				КАК СтоимостьБезНДС,
		|	ВтВидыЗапасов.СуммаРегл				КАК СтоимостьРегл,
		|	ВтВидыЗапасов.СуммаУпр				КАК СтоимостьУпр,
		|
		// Прочие поля
		|	ВЫБОР
		|		КОГДА ВтВидыЗапасов.ХозяйственнаяОперация В(
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Дополнение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)
		|	КОНЕЦ															КАК ТипЗаписи,
		|	ВтВидыЗапасов.НастройкаСчетовУчета								КАК НастройкаСчетовУчета,
		|	ВтВидыЗапасов.ИдентификаторСтроки								КАК ИдентификаторСтроки,
		|	ВтВидыЗапасов.ИдентификаторФинЗаписи							КАК ИдентификаторФинЗаписи,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВтВидыЗапасов.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ВтВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ТОГДА ВЫБОР
		|					КОГДА ВтВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС В (
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
		|					КОГДА ВтВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
		|				КОНЕЦ
		|		КОГДА ТИПЗНАЧЕНИЯ(ВтВидыЗапасов.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ВтВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		КОГДА ТИПЗНАЧЕНИЯ(ВтВидыЗапасов.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		КОГДА ВтВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыФиксированнаяСтоимость)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию)
		|	КОНЕЦ																			КАК ХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВтВидыЗапасов.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ВтВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ТОГДА ВЫБОР
		|					КОГДА ВтВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС В (
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
		|									ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставОС)
		|					КОГДА ВтВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаВСоставНМА)
		|				КОНЕЦ
		|		КОГДА ТИПЗНАЧЕНИЯ(ВтВидыЗапасов.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиРасходов)
		|				И ВтВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл =
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
		|		КОГДА ТИПЗНАЧЕНИЯ(ВтВидыЗапасов.СтатьяРасходов) =
		|						ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПередачаНаПрочиеЦели)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеТоваровПоТребованию)
		|	КОНЕЦ																			КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ВтВидыЗапасов
		|		ПО ИСТИНА
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&Ссылка)
		|	И ВтВидыЗапасов.СписатьНаРасходы
		|	И (&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
		|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
		|			И ВтВидыЗапасов.ДатаОперации >= &ПериодПерезаписиДвижений)
		|";

	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.СписаниеНаРасходыАктивы,
		ТекстЗапроса);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Перемещение_ПередачаМатериаловИзЦеховойКладовойВозвратВЦеховуюКладовую
	
	Если ДанныеДляПроверки = Неопределено
	 Или ДанныеДляПроверки.ОбеспечениеМатериаламиИРаботами.Количество() > 0
	 Или ДанныеДляПроверки.ЭкономияМатериалов.Количество() > 0 Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		// Описание документа
		|	ВтВидыЗапасов.ДатаОперации	КАК Период,
		|	ТаблицаДокумента.Ссылка		КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО				КАК КорректируемыйДокумент,
		|
		// Поля учета номенклатуры
		|	ВтВидыЗапасов.Организация					КАК Организация,
		|	ВтВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	ВтВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
		|	ТаблицаДокумента.ВыпускПодДеятельность		КАК ВидДеятельностиНДС,
		|	ТаблицаДокумента.ВыпускПодДеятельность		КАК ВидДеятельностиНДСДокумента,
		|
		// Корреспондирующие поля
		|	НЕОПРЕДЕЛЕНО								КАК КорОрганизация,
		|	НЕОПРЕДЕЛЕНО								КАК КорПартия,
		|	ВтВидыЗапасов.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
		|	ВтВидыЗапасов.КорВидЗапасов					КАК КорВидЗапасов,
		|
		// Поля аналитики финансового учета
		|	НЕОПРЕДЕЛЕНО								КАК Сделка,
		|	ТаблицаДокумента.Подразделение				КАК Подразделение,
		|	ТаблицаДокумента.Ответственный				КАК Менеджер,
		|	ВтВидыЗапасов.КорАналитикаФинансовогоУчета	КАК ГруппаПродукции,
		|
		// Количественные и суммовые показатели
		|	ВтВидыЗапасов.Количество КАК Количество,
		|
		// Прочие поля
		|	ВтВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
		|	ВтВидыЗапасов.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
		|	ВтВидыЗапасов.ХозяйственнаяОперация				КАК ХозяйственнаяОперация,
		|	ВтВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ВтВидыЗапасов
		|		ПО ИСТИНА
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
		|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ВтВидыЗапасов.ДатаОперации, МЕСЯЦ)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&Ссылка)
		|	И ВтВидыЗапасов.ХозяйственнаяОперация В
		|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства))
		|	И (&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
		|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
		|			И ВтВидыЗапасов.ДатаОперации >= &ПериодПерезаписиДвижений)
		// Исключаем движения в которых совпадают отправитель и получатель
		|	И НЕ (
		|		ВтВидыЗапасов.ВидЗапасов = ВтВидыЗапасов.КорВидЗапасов
		|		И ВЫБОР КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
		|			ТОГДА ВтВидыЗапасов.АналитикаУчетаНоменклатуры = ВтВидыЗапасов.КорАналитикаУчетаНоменклатуры
		|			ИНАЧЕ ВтВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения = ВтВидыЗапасов.КорАналитикаУчетаНоменклатурыБезНазначения
		|			КОНЕЦ
		|		)
		|";
	
		РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
			ОписаниеОпераций,
			Перечисления.ОперацииУчетаСебестоимости.Перемещение,
			ТекстЗапроса);
		
	КонецЕсли;
	
	#КонецОбласти
		
	#Область СписаниеНаДругиеПартии_РасходМатериаловИзПодразделенияИПриходНаПартиюПроизводства
	
	Если ДанныеДляПроверки = Неопределено
	 Или ДанныеДляПроверки.РасходМатериаловИРабот.Количество() > 0 Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		// Описание документа
		|	ВтВидыЗапасов.ДатаОперации	КАК Период,
		|	ТаблицаДокумента.Ссылка		КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО				КАК КорректируемыйДокумент,
		|
		// Поля учета номенклатуры
		|	ВтВидыЗапасов.Организация					КАК Организация,
		|	ВтВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
		|	ВтВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
		|	&ВидДеятельностиНДСНЗП						КАК ВидДеятельностиНДС,
		|	&ВидДеятельностиНДСНЗП						КАК ВидДеятельностиНДСДокумента,
		|
		// Корреспондирующие поля
		|	НЕОПРЕДЕЛЕНО								КАК КорОрганизация,
		|	ТаблицаДокумента.ПартияПроизводства			КАК КорПартия,
		|	ВтВидыЗапасов.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
		|	ВтВидыЗапасов.КорВидЗапасов					КАК КорВидЗапасов,
		|
		// Поля аналитики финансового учета
		|	НЕОПРЕДЕЛЕНО								КАК Сделка,
		|	ТаблицаДокумента.Подразделение				КАК Подразделение,
		|	ТаблицаДокумента.Ответственный				КАК Менеджер,
		|	ВтВидыЗапасов.КорАналитикаФинансовогоУчета	КАК ГруппаПродукции,
		|
		// Количественные и суммовые показатели
		|	ВтВидыЗапасов.Количество КАК Количество,
		|
		// Прочие поля
		|	ВтВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
		|	ВтВидыЗапасов.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
		|	ВтВидыЗапасов.ХозяйственнаяОперация				КАК ХозяйственнаяОперация,
		|	ВтВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ВтВидыЗапасов
		|		ПО ИСТИНА
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&Ссылка)
		|	И ВтВидыЗапасов.ХозяйственнаяОперация = 
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
		|	И (&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
		|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
		|			И ВтВидыЗапасов.ДатаОперации >= &ПериодПерезаписиДвижений)
		|";
	
		РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
			ОписаниеОпераций,
			Перечисления.ОперацииУчетаСебестоимости.СписаниеНаДругиеПартии,
			ТекстЗапроса);
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область ВнутреннееПоступление_ПриходВозвратныхОтходовНаПартиюПроизводства
	
	Если ДанныеДляПроверки = Неопределено
	 Или ДанныеДляПроверки.ПобочныеИзделия.Количество() > 0 Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		// Описание документа
		|	ВтВидыЗапасов.ДатаОперации	КАК Период,
		|	ТаблицаДокумента.Ссылка		КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
		|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
		|	НЕОПРЕДЕЛЕНО				КАК КорректируемыйДокумент,
		|	ТаблицаДокумента.Ссылка		КАК ДокументДвижения,
		|
		// Поля учета номенклатуры
		|	ВтВидыЗапасов.Организация	КАК Организация,
		|	ВЫБОР
		|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
		|			ТОГДА ВтВидыЗапасов.КорАналитикаУчетаНоменклатуры
		|		ИНАЧЕ ВтВидыЗапасов.КорАналитикаУчетаНоменклатурыБезНазначения
		|	КОНЕЦ										КАК АналитикаУчетаНоменклатуры,
		|	ВтВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
		|	ТаблицаДокумента.ВыпускПодДеятельность		КАК ВидДеятельностиНДС,
		|	ТаблицаДокумента.ВыпускПодДеятельность		КАК ВидДеятельностиНДСДокумента,
		|
		// Поля аналитики учета партий
		|	ТаблицаДокумента.ПартияПроизводства	КАК Партия,
		|	НЕОПРЕДЕЛЕНО						КАК АналитикаУчетаПартий,
		|	0									КАК КодСтроки,
		|
		// Корреспондирующие поля
		|	НЕОПРЕДЕЛЕНО														КАК КорАналитикаУчетаПартий,
		|	ВЫБОР
		|		КОГДА ВТПараметрыПартионногоУчетаДляПроведения.УчитыватьСебестоимостьТоваровПоНазначениям
		|			ТОГДА ВтВидыЗапасов.АналитикаУчетаНоменклатуры
		|		ИНАЧЕ ВтВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
		|	КОНЕЦ																КАК КорАналитикаУчетаНоменклатуры,
		|	НЕОПРЕДЕЛЕНО														КАК КорВидЗапасов,
		|	ВтВидыЗапасов.АналитикаФинансовогоУчета								КАК КорГруппаПродукции,
		|
		// Поля аналитики финансового учета
		|	НЕОПРЕДЕЛЕНО								КАК Сделка,
		|	ТаблицаДокумента.Подразделение				КАК Подразделение,
		|	ТаблицаДокумента.Ответственный				КАК Менеджер,
		|	ВтВидыЗапасов.КорАналитикаФинансовогоУчета	КАК ГруппаПродукции,
		|
		// Количественные и суммовые показатели
		|	-ВтВидыЗапасов.Количество	КАК Количество,
		|	-ВтВидыЗапасов.СуммаУпр		КАК Стоимость,
		|	-ВтВидыЗапасов.СуммаУпр		КАК СтоимостьБезНДС,
		|	-ВтВидыЗапасов.СуммаРегл	КАК СтоимостьРегл,
		|	-ВтВидыЗапасов.СуммаУпр		КАК СтоимостьУпр,
		|	0 КАК НДСРегл, 
		|	0 КАК НДСУпр, 
		|	-ВтВидыЗапасов.СуммаЗабалансоваяУпр	КАК СтоимостьЗабалансовая,
		|	-ВтВидыЗапасов.СуммаЗабалансоваяРегл	КАК СтоимостьЗабалансоваяРегл,
		|	0 КАК ДопРасходы, 
		|	0 КАК ДопРасходыБезНДС, 
		|	0 КАК ДопРасходыРегл, 
		|	0 КАК ДопРасходыУпр, 
		|	0 КАК ПостояннаяРазница, 
		|	0 КАК ВременнаяРазница, 
		|	0 КАК КорСтоимость,
		|
		// Прочие поля
		|	ВтВидыЗапасов.ИдентификаторСтроки				КАК ИдентификаторСтроки,
		|	ВтВидыЗапасов.ИдентификаторФинЗаписи			КАК ИдентификаторФинЗаписи,
		|	ВтВидыЗапасов.ХозяйственнаяОперация				КАК ХозяйственнаяОперация,
		|	ВтВидыЗапасов.НастройкаХозяйственнойОперации	КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ВтВидыЗапасов
		|		ПО ИСТИНА
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ВТПараметрыПартионногоУчетаДляПроведения
		|	ПО ВТПараметрыПартионногоУчетаДляПроведения.Период = НАЧАЛОПЕРИОДА(ВтВидыЗапасов.ДатаОперации, МЕСЯЦ)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&Ссылка)
		|	И ВтВидыЗапасов.ХозяйственнаяОперация = 
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
		|	И НЕ ВтВидыЗапасов.ДополнениеДляДавальца
		|	И (&ПериодПерезаписиДвижений = НЕОПРЕДЕЛЕНО
		|		ИЛИ &ПериодПерезаписиДвижений <> ДатаВремя(1,1,1)
		|			И ВтВидыЗапасов.ДатаОперации >= &ПериодПерезаписиДвижений)
		|";
	
		РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
			ОписаниеОпераций,
			Перечисления.ОперацииУчетаСебестоимости.ВнутреннееПоступление,
			ТекстЗапроса);
		
	КонецЕсли;
		
	#КонецОбласти
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроведениеРегламентированныйУчет

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ЭтапПроизводства2_2Локализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//  Строка - Текст запроса ВТОтражения в регл учете
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ЭтапПроизводства2_2Локализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область ПакетноеФормированиеДвижений

Процедура ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(Параметры, Этапы, МенеджерВТСпособыПолученияМатериалов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос);
	
	// Выборка очереди обработки
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100000000
		|	Этапы.Ссылка КАК Ссылка,
		|	АВТОНОМЕРЗАПИСИ() КАК Очередь
		|ПОМЕСТИТЬ ВТОчередьОбработки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПартииВСтруктуреЗаказа КАК МестоПартииВСтруктуреЗаказа
		|		ПО Этапы.ПартияПроизводства = МестоПартииВСтруктуреЗаказа.Партия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
		|		ПО Этапы.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
		|ГДЕ
		|	Этапы.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Этапы.Распоряжение.Приоритет.РеквизитДопУпорядочивания,
		|	Этапы.Распоряжение.Подразделение.РеквизитДопУпорядочивания,
		|	Этапы.Распоряжение.Очередь,
		|	ЕСТЬNULL(НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска, -(ЕСТЬNULL(МестоПартииВСтруктуреЗаказа.ДлительностьДоВыпуска, 0) + Этапы.ДлительностьДоВыпуска))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОчередьОбработки.Ссылка КАК Ссылка,
		|	ВТОчередьОбработки.Очередь КАК Очередь
		|ИЗ
		|	ВТОчередьОбработки КАК ВТОчередьОбработки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Очередь,
		|	Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Этапы);
	
	ОчередьОбработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ДвижимыеРегистры = РегистрыДляПакетногоФормированияДвижений(); // Структура
	ТекстыЗапроса    = ТекстыЗапросаДляФормированияДвижений(Запрос, ДвижимыеРегистры); // СписокЗначений
	
	ИмяТаблицыВерсииДанных   = "Таблица" + "ВерсииДанных";
	ТекстЗапросаВерсииДанных =
	"ВЫБРАТЬ
	|	Этапы.Ссылка             КАК Ссылка,
	|	Этапы.ВерсияДанных       КАК ВерсияДанных,
	|	ОчередьОбработки.Очередь КАК Очередь
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Этапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОчередьОбработки КАК ОчередьОбработки
	|		ПО Этапы.Ссылка = ОчередьОбработки.Ссылка
	|ГДЕ
	|	Этапы.Ссылка В (&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Очередь,
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапросаВерсииДанных, ИмяТаблицыВерсииДанных);
	
	// Обработка документов порциями по 1000 штук
	ПорцияОбработки = Новый Массив;
	МаксИндекс = ОчередьОбработки.ВГраница();
	
	Для Индекс = 0 По МаксИндекс Цикл
		
		ПорцияОбработки.Добавить(ОчередьОбработки[Индекс]);
		
		Если Индекс = МаксИндекс ИЛИ ПорцияОбработки.Количество() = 1000 Тогда
			
			// Заполнение обеспечения
			ЗаполнитьОбеспечениеВПакетномРежиме(ПорцияОбработки, Параметры, МенеджерВТСпособыПолученияМатериалов);
			
			// Формирование движений
			Для СчетчикПопыток = 1 По 2 Цикл
				
				Запрос.УстановитьПараметр("Ссылка", ПорцияОбработки);
				
				УстановитьПривилегированныйРежим(Истина);
				ТаблицыДляДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(
										Запрос, ТекстыЗапроса, Неопределено);
				УстановитьПривилегированныйРежим(Ложь);
				
				ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц,, "ВТОчередьОбработки");
				
				ТаблицаВерсииДанных = ТаблицыДляДвижений[ИмяТаблицыВерсииДанных];
				ТаблицыДляДвижений.Удалить(ИмяТаблицыВерсииДанных);
				
				ЭтапыОтказ = СформироватьДвиженияВПакетномРежиме(
								ТаблицыДляДвижений, ПорцияОбработки, ТаблицаВерсииДанных, ДвижимыеРегистры);
				
				Если ЭтапыОтказ.ВГраница() = -1 Тогда
					Прервать;
				Иначе
					
					ПорцияОбработки.Очистить();
					
					Для каждого КлючИЗначение Из ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЭтапыОтказ, "Статус") Цикл
						
						Ссылка = КлючИЗначение.Ключ;
						Статус = КлючИЗначение.Значение;
						ОтменитьПроведение = Истина;
						
						// Понижение статуса
						Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
							Попытка
								ДокументОбъект = Ссылка.ПолучитьОбъект();
								ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
								ДокументОбъект.ОбменДанными.Загрузка = Истина;
								ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
								
								// Повторная попытка проведения
								ПорцияОбработки.Добавить(Ссылка);
								ОтменитьПроведение = Ложь;
							Исключение
								Событие = НСтр("ru = 'Этап производства';
												|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
									+ НСтр("ru = 'Пакетное формирование движений';
											|en = 'Batch register records generation'", ОбщегоНазначения.КодОсновногоЯзыка());
								ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
						КонецЕсли;
						
						// Отмена проведения
						Если ОтменитьПроведение Тогда
							Попытка
								ДокументОбъект = Ссылка.ПолучитьОбъект();
								ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							Исключение
								Событие = НСтр("ru = 'Этап производства';
												|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
									+ НСтр("ru = 'Пакетное формирование движений';
											|en = 'Batch register records generation'", ОбщегоНазначения.КодОсновногоЯзыка());
								ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ПорцияОбработки.ВГраница() = -1 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПорцияОбработки.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РегистрыДляПакетногоФормированияДвижений()
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаказыКлиентов",					   "Таблица" + "ЗаказыКлиентов");
	Результат.Вставить("ЗаказыМатериаловВПроизводство",		   "Таблица" + "ЗаказыМатериаловВПроизводство");
	Результат.Вставить("ЗаказыПоставщикам",					   "Таблица" + "ЗаказыПоставщикам");
	Результат.Вставить("ДвиженияСерийТоваров",				   "Таблица" + "ДвиженияСерийТоваров");
	Результат.Вставить("ЗапасыИПотребности",				   "Таблица" + "ЗапасыИПотребности");
	Результат.Вставить("ОбеспечениеПроизводственныхПроцессов", "Таблица" + "ОбеспечениеПроизводственныхПроцессов");
	Результат.Вставить("ЗаказыНаПроизводство",                 "Таблица" + "ЗаказыНаПроизводство");
	Результат.Вставить("СтруктураЗаказа",					   "Таблица" + "СтруктураЗаказа");
	Результат.Вставить("ТрудозатратыСтруктурыЗаказа",		   "Таблица" + "ТрудозатратыСтруктурыЗаказа");
	Результат.Вставить("ТоварыКОтгрузке",					   "Таблица" + "ТоварыКОтгрузке");
	Результат.Вставить("РеестрДокументов",					   "Таблица" + "РеестрДокументов");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьОбеспечениеВПакетномРежиме(Этапы, Параметры, МенеджерВременныхТаблиц)
	
	Если Не Параметры.РезервироватьМатериалы Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЗаменятьМатериалыНаАналоги И МенеджерВременныхТаблиц.Таблицы.Найти("ВтИсключенияЗаменаНаАналоги") = Неопределено Тогда 
		Документы.ЗаказНаПроизводство2_2.СоздатьВтИсключенияЗаменаНаАналоги(МенеджерВременныхТаблиц, Параметры.Распоряжения);
	КонецЕсли; 
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Материалы.Номенклатура   КАК Номенклатура,
		|	Материалы.Характеристика КАК Характеристика,
		|	Материалы.Склад          КАК Склад,
		|	Материалы.НазначениеОбеспечения КАК Назначение
		|ПОМЕСТИТЬ ВТМатериалы
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В (&Этапы)
		|	И НЕ Материалы.Производится
		|	И НЕ Материалы.Отменено
		|	И Материалы.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))
		|	И Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Материалы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Материалы.Номенклатура   КАК Номенклатура,
		|	Материалы.Характеристика КАК Характеристика,
		|	Материалы.Склад          КАК Склад,
		|	Материалы.Назначение     КАК Назначение
		|ПОМЕСТИТЬ ВТАналитика
		|ИЗ
		|	ВТМатериалы КАК Материалы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Материалы.Номенклатура   КАК Номенклатура,
		|	Материалы.Характеристика КАК Характеристика,
		|	Материалы.Склад          КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
		|ИЗ
		|	ВТМатериалы КАК Материалы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Материалы.Номенклатура      КАК Номенклатура,
		|	Материалы.Характеристика    КАК Характеристика,
		|	Материалы.Склад             КАК Склад,
		|	Материалы.Назначение        КАК Назначение,
		|	СУММА(Материалы.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТРезервы
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&Этапы)
		|	И Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Материалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	И НЕ Материалы.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	Материалы.Номенклатура,
		|	Материалы.Характеристика,
		|	Материалы.Склад,
		|	Материалы.Назначение";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура      КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика    КАК Характеристика,
		|	ВложенныйЗапрос.Склад             КАК Склад,
		|	ВложенныйЗапрос.Назначение        КАК Назначение,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			Запасы.Номенклатура КАК Номенклатура,
		|			Запасы.Характеристика КАК Характеристика,
		|			Запасы.Склад КАК Склад,
		|			Запасы.Назначение КАК Назначение,
		|			Запасы.ВНаличииОстаток
		|				- Запасы.РезервироватьНаСкладеОстаток
		|				- Запасы.РезервироватьПоМереПоступленияОстаток
		|				- Запасы.ОтложитьРезервированиеОстаток
		|				- Запасы.КОбеспечениюОстаток КАК Количество
		|		ИЗ
		|			РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|				(Номенклатура, Характеристика, Склад, Назначение) В(
		|					ВЫБРАТЬ
		|						Таблица.Номенклатура   КАК Номенклатура,
		|						Таблица.Характеристика КАК Характеристика,
		|						Таблица.Склад          КАК Склад,
		|						Таблица.Назначение     КАК Назначение
		|					ИЗ
		|						ВТАналитика КАК Таблица)) КАК Запасы
		|		ГДЕ
		|			Запасы.ВНаличииОстаток
		|				- Запасы.РезервироватьНаСкладеОстаток
		|				- Запасы.РезервироватьПоМереПоступленияОстаток
		|				- Запасы.ОтложитьРезервированиеОстаток
		|				- Запасы.КОбеспечениюОстаток > 0
		|				
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			Резервы.Номенклатура   КАК Номенклатура,
		|			Резервы.Характеристика КАК Характеристика,
		|			Резервы.Склад          КАК Склад,
		|			Резервы.Назначение     КАК Назначение,
		|			-Резервы.Количество    КАК Количество
		|		ИЗ
		|			ВТРезервы КАК Резервы
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Этапы.Ссылка                                           КАК Этап,
		|	ЕСТЬNULL(НормативныйГрафикЭтаповПроизводства.ДлительностьДоЗапуска, -(ЕСТЬNULL(МестоПартииВСтруктуреЗаказа.ДлительностьДоВыпуска, 0) + Этапы.ДлительностьДоВыпуска)) КАК Очередь,
		|	Материалы.Подразделение                                КАК Подразделение,
		|	Материалы.НомерСтроки                                  КАК НомерСтроки,
		|	Материалы.КодСтроки                                    КАК КодСтроки,
		|	Материалы.КлючСвязиСпецификация                        КАК КлючСвязиСпецификация,
		|	Материалы.Номенклатура                                 КАК Номенклатура,
		|	Материалы.Номенклатура.ТипНоменклатуры                 КАК ТипНоменклатуры,
		|	Материалы.Характеристика                               КАК Характеристика,
		|	Материалы.Склад                                        КАК Склад,
		|	Материалы.НазначениеОбеспечения                        КАК НазначениеОбеспечения,
		|	Материалы.Серия                                        КАК Серия,
		|	Материалы.Обособленно                                  КАК Обособленно,
		|	Материалы.ВариантОбеспечения                           КАК ВариантОбеспечения,
		|	Материалы.ДатаОтгрузки                                 КАК ДатаОтгрузки,
		|	Материалы.Количество                                   КАК Количество,
		|
		|	Материалы.КлючСвязиНабор                               КАК КлючСвязиНабор,
		|	ВЫБОР
		|		КОГДА Наборы.Спецификация ССЫЛКА Справочник.РесурсныеСпецификации
		|				ТОГДА Наборы.Спецификация
		|		ИНАЧЕ Наборы.СпецификацияРодитель
		|	КОНЕЦ                                                  КАК СпецификацияНабор,
		|
		|	Этапы.Распоряжение                                     КАК ЗаказНаПроизводство,
		|	Этапы.Распоряжение.НаправлениеДеятельности             КАК НаправлениеДеятельности,
		|	Этапы.Спецификация                                     КАК Спецификация,
		|	Этапы.ПартияПроизводства.ОсновноеИзделиеНоменклатура   КАК Изделие,
		|	Этапы.ПартияПроизводства.ОсновноеИзделиеХарактеристика КАК ХарактеристикаИзделия,
		|
		|	&ТекстЗапросаПризнакЗаменаНаАналоги                    КАК ЗаменаНаАналоги
		|
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|		ПО Материалы.Ссылка = Этапы.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПартииВСтруктуреЗаказа КАК МестоПартииВСтруктуреЗаказа
		|		ПО Этапы.ПартияПроизводства = МестоПартииВСтруктуреЗаказа.Партия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
		|		ПО Этапы.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.НаборыМатериаловИРабот КАК Наборы
		|		ПО Наборы.Ссылка = Этапы.Ссылка
		|			И Наборы.КлючСвязи = Материалы.КлючСвязиНабор
		|
		|ГДЕ
		|	Этапы.Ссылка В(&Этапы)
		|	И НЕ Материалы.Производится
		|	И НЕ Материалы.Отменено
		|	И Материалы.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))
		|	И Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Материалы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И Материалы.Количество <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Этапы.Распоряжение.Приоритет.РеквизитДопУпорядочивания,
		|	Этапы.Распоряжение.Подразделение.РеквизитДопУпорядочивания,
		|	Этапы.Распоряжение.Очередь,
		|	Очередь,
		|	Этап,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Резервы.Номенклатура   КАК Номенклатура,
		|	Резервы.Характеристика КАК Характеристика,
		|	Резервы.Склад          КАК Склад,
		|	Резервы.Назначение     КАК Назначение,
		|	Резервы.Количество     КАК Количество
		|ИЗ
		|	ВТРезервы КАК Резервы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМатериалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТАналитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРезервы";
	
	Если Параметры.ЗаменятьМатериалыНаАналоги Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТекстЗапросаПризнакЗаменаНаАналоги",
			"НЕ ИСТИНА В
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВтИсключенияЗаменаНаАналоги КАК Исключения
			|		ГДЕ
			|			Исключения.Распоряжение     = Этапы.Распоряжение
			|			И Исключения.Номенклатура   = Материалы.Номенклатура
			|			И Исключения.Характеристика = Материалы.Характеристика
			|			И Исключения.Склад          = Материалы.Склад)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПризнакЗаменаНаАналоги", "ЛОЖЬ");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДоступныеРезервыВГрафике = Параметры.ДоступныеРезервыВГрафике;
	ЕстьДоступныеРезервыВГрафике = ЗначениеЗаполнено(ДоступныеРезервыВГрафике);
	
	Остатки = ПакетРезультатов[ПакетРезультатов.ВГраница()-5].Выгрузить();
	Материалы = ПакетРезультатов[ПакетРезультатов.ВГраница()-4].Выгрузить();
	Если Материалы.Количество() = 0
		ИЛИ Остатки.Количество() = 0 И Не ЕстьДоступныеРезервыВГрафике И Не Параметры.ЗаменятьМатериалыНаАналоги Тогда
		Возврат;
	КонецЕсли;
	
	Остатки.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение");
	СтруктураПоискаОстатки = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
	
	Материалы.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Материалы.Колонки.Добавить("ЗачетОбособленноНаСкладе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Материалы.Колонки.Добавить("ЗачетОбособленноВГрафике", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Материалы.Колонки.Добавить("ЗачетНеобособленноНаСкладе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	// Инициализация таблиц для замены на аналоги
	МатериалыЗаменить = Неопределено;
	Резервы = Неопределено;
	Если Параметры.ЗаменятьМатериалыНаАналоги Тогда
		
		МатериалыЗаменить = Материалы.СкопироватьКолонки(
			"Идентификатор, Очередь, Этап, Номенклатура, Характеристика, Подразделение,
			|НаправлениеДеятельности, ЗаказНаПроизводство, Спецификация,
			|Изделие, ХарактеристикаИзделия, Количество");
		
		Резервы = ПакетРезультатов[ПакетРезультатов.ВГраница()-3].Выгрузить();
		
	КонецЕсли;
	
	// Распределение остатков
	Идентификатор = 0;
	Для Индекс = 0 По Материалы.Количество()-1 Цикл
		
		Строка = Материалы[Индекс];
		
		Строка.Идентификатор = Идентификатор;
		Идентификатор = Идентификатор + 1;
		
		// Обособленный остаток
		Если Строка.Количество > 0
			И Остатки.Количество() <> 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, Строка, "Номенклатура, Характеристика, Склад");
			СтруктураПоискаОстатки.Назначение = Строка.НазначениеОбеспечения;
			
			НайденныеСтроки = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
			СтрокаОстаток = ?(НайденныеСтроки.ВГраница() <> -1, НайденныеСтроки[0], Неопределено);
			Если СтрокаОстаток <> Неопределено
				И СтрокаОстаток.Количество > 0 Тогда
				
				Строка.ЗачетОбособленноНаСкладе = Мин(Строка.Количество, СтрокаОстаток.Количество);
				Строка.Количество = Строка.Количество - Строка.ЗачетОбособленноНаСкладе;
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - Строка.ЗачетОбособленноНаСкладе;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Обособленный график поступления (мягкое обособленное резервирование)
		Если Строка.Количество > 0
			И ЕстьДоступныеРезервыВГрафике Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, Строка, "Номенклатура, Характеристика, Склад");
			СтруктураПоискаОстатки.Назначение = Строка.НазначениеОбеспечения;
				
			НайденныеСтроки = ДоступныеРезервыВГрафике.НайтиСтроки(СтруктураПоискаОстатки);
			СтрокаГрафик = ?(НайденныеСтроки.ВГраница() <> -1, НайденныеСтроки[0], Неопределено);
			Если СтрокаГрафик <> Неопределено
				И СтрокаГрафик.Количество > 0 Тогда
				
				Строка.ЗачетОбособленноВГрафике = Мин(Строка.Количество, СтрокаГрафик.Количество);
				Строка.Количество = Строка.Количество - Строка.ЗачетОбособленноВГрафике;
				СтрокаГрафик.Количество = СтрокаГрафик.Количество - Строка.ЗачетОбособленноВГрафике;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Необособленный остаток
		Если Строка.Количество > 0
			И Остатки.Количество() <> 0
			И Не Строка.Обособленно Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, Строка, "Номенклатура, Характеристика, Склад");
			СтруктураПоискаОстатки.Назначение = Справочники.Назначения.ПустаяСсылка();
			
			НайденныеСтроки = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
			СтрокаОстаток = ?(НайденныеСтроки.ВГраница() <> -1, НайденныеСтроки[0], Неопределено);
			Если СтрокаОстаток <> Неопределено
				И СтрокаОстаток.Количество > 0 Тогда
				
				Строка.ЗачетНеобособленноНаСкладе = Мин(Строка.Количество, СтрокаОстаток.Количество);
				Строка.Количество = Строка.Количество - Строка.ЗачетНеобособленноНаСкладе;
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - Строка.ЗачетНеобособленноНаСкладе;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение таблиц для замены на аналоги
		Если Параметры.ЗаменятьМатериалыНаАналоги Тогда
			
			Если Строка.ЗаменаНаАналоги И Не Строка.Обособленно И Строка.Количество > 0 Тогда
				НоваяСтрока = МатериалыЗаменить.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				Если ЗначениеЗаполнено(Строка.КлючСвязиНабор) Тогда
					НоваяСтрока.Спецификация = Строка.СпецификацияНабор;
				КонецЕсли;
			КонецЕсли;
			
			Если Строка.ЗачетНеобособленноНаСкладе > 0 Тогда
				НоваяСтрока = Резервы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "Количество");
				НоваяСтрока.Количество = Строка.ЗачетНеобособленноНаСкладе;
				НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение аналогов
	Аналоги = Неопределено;
	Если Параметры.ЗаменятьМатериалыНаАналоги
		И МатериалыЗаменить.Количество() > 0 Тогда
		
		МатериалыЗаменить.Сортировать("Очередь, Этап");
		Аналоги = АналогиМатериалов.ПолучитьТаблицуЗаменыДляФормированияЭтапов(МатериалыЗаменить, Резервы);
		Аналоги.Сортировать("Идентификатор, Разрешение");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Аналоги);
		Аналоги.Индексы.Добавить("Идентификатор");
		
	КонецЕсли;
	
	// Запись данных в документы
	Материалы.Сортировать("Очередь, Этап");
	СтруктураПоиска = Новый Структура("Идентификатор");
	СтруктураПоискаКлючСвязи = Новый Структура("КлючСвязиСпецификация");
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ДокументОбъект = Неопределено;
	ДокументИзменен = Ложь;
	
	Для Индекс = 0 По Материалы.Количество()-1 Цикл
		
		Строка = Материалы[Индекс];
		
		Если ДокументОбъект = Неопределено
			ИЛИ Строка.Этап <> ДокументОбъект.Ссылка Тогда
			
			ДокументОбъект = Строка.Этап.ПолучитьОбъект();
			ДокументИзменен = Ложь;
			
		КонецЕсли;
		
		ИсходнаяСтрока = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Найти(Строка.КодСтроки, "КодСтроки");
		Если ИсходнаяСтрока <> Неопределено Тогда
			
			// Зачет обособленных остатков
			Если Строка.ЗачетОбособленноНаСкладе <> 0 Тогда
				
				Если ИсходнаяСтрока.Количество = Строка.ЗачетОбособленноНаСкладе Тогда
					СтрокаЗаполнить = ИсходнаяСтрока;
				Иначе
					
					СтрокаЗаполнить = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Вставить(
						ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Индекс(ИсходнаяСтрока));
					ЗаполнитьЗначенияСвойств(СтрокаЗаполнить, ИсходнаяСтрока,, "КодСтроки, КлючНоменклатура");
					СтрокаЗаполнить.Количество = Строка.ЗачетОбособленноНаСкладе;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЗаполнить, СтруктураДействий, КэшированныеЗначения);
					
					ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - Строка.ЗачетОбособленноНаСкладе;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИсходнаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
				КонецЕсли;
				
				СтрокаЗаполнить.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				СтрокаЗаполнить.Обособленно = Истина;
				СтрокаЗаполнить.Назначение = СтрокаЗаполнить.НазначениеОбеспечения;
				
				ДокументИзменен = Истина;
				
			КонецЕсли;
			
			// Зачет обособленного графика поступления
			Если Строка.ЗачетОбособленноВГрафике <> 0 Тогда
				
				Если ИсходнаяСтрока.Количество = Строка.ЗачетОбособленноВГрафике Тогда
					СтрокаЗаполнить = ИсходнаяСтрока;
				Иначе
					
					СтрокаЗаполнить = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Вставить(
						ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Индекс(ИсходнаяСтрока));
					ЗаполнитьЗначенияСвойств(СтрокаЗаполнить, ИсходнаяСтрока,, "КодСтроки, КлючНоменклатура");
					СтрокаЗаполнить.Количество = Строка.ЗачетОбособленноВГрафике;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЗаполнить, СтруктураДействий, КэшированныеЗначения);
					
					ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - Строка.ЗачетОбособленноВГрафике;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИсходнаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
				КонецЕсли;
				
				СтрокаЗаполнить.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению; // нет действия "резервировать в графике"
				СтрокаЗаполнить.Обособленно = Истина;
				СтрокаЗаполнить.Назначение = СтрокаЗаполнить.НазначениеОбеспечения;
				
				ДокументИзменен = Истина;
				
			КонецЕсли;
			
			// Зачет необособленных остатков
			Если Строка.ЗачетНеобособленноНаСкладе <> 0 Тогда
				
				Если ИсходнаяСтрока.Количество = Строка.ЗачетНеобособленноНаСкладе Тогда
					СтрокаЗаполнить = ИсходнаяСтрока;
				Иначе
					
					СтрокаЗаполнить = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Вставить(
						ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Индекс(ИсходнаяСтрока));
					ЗаполнитьЗначенияСвойств(СтрокаЗаполнить, ИсходнаяСтрока,, "КодСтроки, КлючНоменклатура");
					СтрокаЗаполнить.Количество = Строка.ЗачетНеобособленноНаСкладе;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЗаполнить, СтруктураДействий, КэшированныеЗначения);
					
					ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - Строка.ЗачетНеобособленноНаСкладе;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИсходнаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
				КонецЕсли;
				
				СтрокаЗаполнить.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				СтрокаЗаполнить.Обособленно = Ложь;
				СтрокаЗаполнить.Назначение = Справочники.Назначения.ПустаяСсылка();
				
				ДокументИзменен = Истина;
				
			КонецЕсли;
			
			// Зачет аналогов
			Если Аналоги <> Неопределено И Строка.Количество <> 0 Тогда
				СтруктураПоиска.Идентификатор = Строка.Идентификатор;
				СтрокиАналоги = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(Аналоги, СтруктураПоиска, Истина);
				Если СтрокиАналоги.ВГраница() <> -1 Тогда
					
					Разрешение = Неопределено;
					Для ИндексАналог = 0 По СтрокиАналоги.ВГраница() Цикл
						
						СтрокаАналог = СтрокиАналоги[ИндексАналог];
						Если Разрешение = Неопределено ИЛИ Разрешение <> СтрокаАналог.Разрешение Тогда
							ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - СтрокаАналог.КоличествоЗамены;
							Разрешение = СтрокаАналог.Разрешение;
						КонецЕсли;
						
						НоваяСтрока = ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАналог, "Номенклатура, Характеристика, Склад, Количество");
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, "Подразделение, СтатьяКалькуляции, НазначениеОбеспечения");
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
						НоваяСтрока.Обособленно = Ложь; // Аналоги подбираются только в необособленном остатке
						НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
						НоваяСтрока.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
						
					КонецЦикла;
					
					Если ИсходнаяСтрока.Количество = 0 Тогда
						Если ЗначениеЗаполнено(ИсходнаяСтрока.КлючСвязиНабор) Тогда
							УправлениеДаннымиОбИзделиях.СкорректироватьТаблицуНаборыМатериаловИРабот(
								ДокументОбъект.НаборыМатериаловИРабот, ИсходнаяСтрока.КлючСвязиНабор, -1);
						КонецЕсли;
						ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Удалить(ИсходнаяСтрока);
					Иначе
						// При замене на аналоги исходная строка переводится в базовую ед. изм.
						ИсходнаяСтрока.КоличествоУпаковок = ИсходнаяСтрока.Количество;
						ИсходнаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;
					
					ДокументИзменен = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Индекс = Материалы.Количество()-1
			ИЛИ Материалы[Индекс+1].Этап <> ДокументОбъект.Ссылка Тогда
			
			Если ДокументИзменен Тогда
				
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
					ДокументОбъект,
					ПараметрыУказанияСерий(ДокументОбъект).ОбеспечениеМатериаламиИРаботами);
				
				СтруктураЗаказаПроведениеДокументов.ЭтапПроизводстваПередЗаписью(
					ДокументОбъект, ДокументОбъект.ДополнительныеСвойства, Ложь);
		
				ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
					ДокументОбъект, "ОбеспечениеМатериаламиИРаботами", "МаксимальныйКодСтрокиОбеспечение");
				
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Событие = НСтр("ru = 'Этап производства';
									|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
						+ НСтр("ru = 'Пакетное формирование движений';
								|en = 'Batch register records generation'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДвиженияВПакетномРежиме(ДанныеДвижений, Ссылки, ВерсииДанных, ДвижимыеРегистры)
	
	ЭтапыОтказ = Новый Массив;
	
	ДанныеЭтапов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Ссылки, "Распоряжение,ПартияПроизводства");
	
	ТаблицыНезависимыхРегистров = Новый Структура;
	
	ИмяТаблицы = "Таблица" + "СтруктураЗаказа";
	ТаблицыНезависимыхРегистров.Вставить(
		ИмяТаблицы,
		?(ДанныеДвижений.Свойство(ИмяТаблицы),
			ДанныеДвижений[ИмяТаблицы].СкопироватьКолонки(),
			РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей().Выгрузить()));
	
	ИмяТаблицы = "Таблица" + "ТрудозатратыСтруктурыЗаказа";	
	ТаблицыНезависимыхРегистров.Вставить(
		ИмяТаблицы,
		?(ДанныеДвижений.Свойство(ИмяТаблицы),
			ДанныеДвижений[ИмяТаблицы].СкопироватьКолонки(),
			РегистрыСведений.ТрудозатратыСтруктурыЗаказа.СоздатьНаборЗаписей().Выгрузить()));
	
	ИмяТаблицы = "Таблица" + "РеестрДокументов";
	ТаблицыНезависимыхРегистров.Вставить(
		ИмяТаблицы,
		?(ДанныеДвижений.Свойство(ИмяТаблицы),
			ДанныеДвижений[ИмяТаблицы].СкопироватьКолонки(),
			РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей().Выгрузить()));
	
	ИмяПоляПоискаПоУмолчанию   = "Регистратор";
	СтруктураПоискаПоУмолчанию = Новый Структура(ИмяПоляПоискаПоУмолчанию);
	
	ИменаПолейПоиска = Новый Структура;
	ИменаПолейПоиска.Вставить("СтруктураЗаказа",             "Этап");
	ИменаПолейПоиска.Вставить("ТрудозатратыСтруктурыЗаказа", "Этап");
	ИменаПолейПоиска.Вставить("РеестрДокументов",            "Ссылка");
	
	СтруктурыПоиска = Новый Структура;
	Для каждого ИмяПоляПоиска Из ИменаПолейПоиска Цикл
		СтруктурыПоиска.Вставить(ИмяПоляПоиска.Ключ, Новый Структура(ИмяПоляПоиска.Значение)); 
	КонецЦикла;
	
	ИндексироватьТаблицы = Истина;
	
	Для каждого ВерсияДанных Из ВерсииДанных Цикл
		
		ДокументСсылка = ВерсияДанных.Ссылка;
		СчетчикОшибок = 1;
		Пока Истина Цикл
			
			Для каждого ТаблицаРегистра Из ТаблицыНезависимыхРегистров Цикл
				ТаблицаРегистра.Значение.Очистить();
			КонецЦикла;
		
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Распоряжение", ДанныеЭтапов[ДокументСсылка].Распоряжение);
				ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ДанныеЭтапов[ДокументСсылка].ПартияПроизводства);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
				Блокировка.Заблокировать();
				
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				
				Если ДокументОбъект.ВерсияДанных <> ВерсияДанных.ВерсияДанных Тогда
					ОтменитьТранзакцию();
					Прервать;
				КонецЕсли;
				
				ДокументОбъект.УстановитьРежимПакетногоФормирования();
				ПроведениеДокументов.ПередЗаписьюДокумента(ДокументОбъект, РежимЗаписиДокумента.Проведение, Неопределено);
				
				СтруктураПоискаПоУмолчанию[ИмяПоляПоискаПоУмолчанию] = ДокументСсылка;
				Для каждого СтруктураПоиска Из СтруктурыПоиска Цикл
					СтруктураПоиска.Значение[ИменаПолейПоиска[СтруктураПоиска.Ключ]] = ДокументСсылка;
				КонецЦикла;
				
				Для каждого ДвижимыйРегистр Из ДвижимыеРегистры Цикл
					
					ИмяТаблицы = ДвижимыйРегистр.Значение;
					
					ТаблицаДляДвижений = ДанныеДвижений[ИмяТаблицы]; // ТаблицаЗначений
					
					Если ИндексироватьТаблицы Тогда
						
						ИмяПоляПоиска = Неопределено;
						Если Не ИменаПолейПоиска.Свойство(ДвижимыйРегистр.Ключ, ИмяПоляПоиска) Тогда
							ИмяПоляПоиска = ИмяПоляПоискаПоУмолчанию;
						КонецЕсли;
						
						ТаблицаДляДвижений.Индексы.Добавить(ИмяПоляПоиска);
						
					КонецЕсли;
					
					СтруктураПоиска = Неопределено;
					Если Не СтруктурыПоиска.Свойство(ДвижимыйРегистр.Ключ, СтруктураПоиска) Тогда
						СтруктураПоиска = СтруктураПоискаПоУмолчанию;
					КонецЕсли;
					
					НайденныеСтроки = ТаблицаДляДвижений.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
					
						Если ТаблицыНезависимыхРегистров.Свойство(ИмяТаблицы) Тогда
							ДвиженияПоРегистру = ТаблицыНезависимыхРегистров[ИмяТаблицы];
						Иначе
							ДвиженияПоРегистру = ДокументОбъект.Движения[ДвижимыйРегистр.Ключ];
							ДвиженияПоРегистру.Записывать = Истина;
						КонецЕсли;
						
						Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
							ЗаполнитьЗначенияСвойств(ДвиженияПоРегистру.Добавить(), СтрокаТаблицы);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ИндексироватьТаблицы Тогда
					ИндексироватьТаблицы = Ложь;
				КонецЕсли;
				
				Отказ = Ложь;
				УстановитьПривилегированныйРежим(Истина);
				
				РегистрыСведений.РеестрДокументов.ЗаписатьДанные(
					ТаблицыНезависимыхРегистров, ДокументОбъект.Ссылка, Неопределено, Отказ);
				
				ПроведениеДокументов.ЗаписатьДвиженияСКонтролем(ДокументОбъект, Отказ, Истина, Истина);
				
				СтруктураЗаказаПроведениеДокументов.ЗаписатьДанные(
					ТаблицыНезависимыхРегистров, ДокументОбъект.Ссылка, Неопределено, Ложь);
				
				УстановитьПривилегированныйРежим(Ложь);
				
				Если Отказ Тогда
					ОтменитьТранзакцию();
					ЭтапыОтказ.Добавить(ДокументСсылка);
					Прервать;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Если СчетчикОшибок < 3 Тогда
					Событие = НСтр("ru = 'Этап производства';
									|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
						+ НСтр("ru = 'Пакетное формирование движений';
								|en = 'Batch register records generation'", ОбщегоНазначения.КодОсновногоЯзыка());
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Неудачная попытка записи (%1): %2';
													|en = 'Unsuccessful attempt to write (%1): %2'"),
						СчетчикОшибок, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
					
					СчетчикОшибок = СчетчикОшибок + 1;
					Продолжить;
				КонецЕсли;
				
				Событие = НСтр("ru = 'Этап производства';
								|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Пакетное формирование движений';
							|en = 'Batch register records generation'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЭтапыОтказ.Добавить(ДокументСсылка);
				
			КонецПопытки;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЭтапыОтказ;

КонецФункции

Процедура ЗаполнитьРеестрДокументовВПакетномРежиме(Распоряжение, Этапы, ЗамещатьЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос);
	Запрос.УстановитьПараметр("Ссылка", Этапы);
	
	ТекстыЗапроса = ТекстыЗапросаДляФормированияДвижений(Запрос, Новый Структура("РеестрДокументов"));
	
	ТаблицыДляДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(
										Запрос, ТекстыЗапроса, Неопределено);
	
	РазделительЗаписиСтрокой = Строка(Распоряжение.УникальныйИдентификатор());
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеРазделителя(ТаблицыДляДвижений, РазделительЗаписиСтрокой, ЗамещатьЗаписи);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Задание на производство
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаданиеНаПроизводство";
	КомандаПечати.Представление = НСтр("ru = 'Задание на производство';
										|en = 'Shop floor papers'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент.ПечатьЗаданиеНаПроизводство";
	
	// Лист сопровождения партии производства
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЛистСопровожденияПартииПроизводства";
	КомандаПечати.Представление = НСтр("ru = 'Лист сопровождения партии производства';
										|en = 'Accompanying sheet for production lot'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент.ПечатьЛистСопровожденияПартииПроизводства";
	
	СтатусыДокумента = Новый Массив;
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СтатусыДокумента.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	// Задание на размещение товаров
	КомандаПечати = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати(КомандыПечати,
																							"ЗаданиеНаРазмещение");
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
														"Статус",
														СтатусыДокумента,
														ВидСравнения.ВСписке);
	
	// Задание на отбор товаров
	КомандаПечати = Обработки.ПечатьЗаданияНаОтборРазмещениеТоваров.ДобавитьКомандуПечати(КомандыПечати,
																							"ЗаданиеНаОтбор");
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
														"Статус",
														СтатусыДокумента,
														ВидСравнения.ВСписке);
	
	ЭтапПроизводства2_2Локализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаданиеНаПроизводство") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЗаданиеНаПроизводство(
			МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаданиеНаПроизводство",
			НСтр("ru = 'Задание на производство';
				|en = 'Shop floor papers'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСопровожденияПартииПроизводства") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЛистСопровожденияПартииПроизводства(
			МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистСопровожденияПартииПроизводства",
			НСтр("ru = 'Лист сопровождения партии производства';
				|en = 'Accompanying sheet for production lot'"),
			ТабличныйДокумент);
		
	КонецЕсли;
	
	ЭтапПроизводства2_2Локализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);
		
КонецПроцедуры

#Область ЗаданиеНаПроизводство

Функция СформироватьПечатнуюФормуЗаданиеНаПроизводство(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭтапПроизводства2_2_ЗаданиеНаПроизводство";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЭтапПроизводства2_2.ПФ_MXL_ЗаданиеНаПроизводство");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыЗаданиеНаПроизводство(МассивОбъектов, ПараметрыПечати);
	ВыборкаДокумент = ДанныеДляПечати.ВыборкаДокумент;
	
	Пока ВыборкаДокумент.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаданиеНаПроизводствоВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаДокумент);
		
		ЗаданиеНаПроизводствоВывестиШапку(ТабличныйДокумент, Макет, ВыборкаДокумент);
		
		ЗаданиеНаПроизводствоВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати, Истина);
			
		ЗаданиеНаПроизводствоВывестиМатериалы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати);
		
		ЗаданиеНаПроизводствоВывестиВыходныеИзделия(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати);
		
		ЗаданиеНаПроизводствоВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати, Ложь);
		
		ЗаданиеНаПроизводствоВывестиОперации(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаданиеНаПроизводство(МассивОбъектов, ПараметрыПечати)
	
	ТекстыЗапросовПакета = Новый Массив;
	ИндексыРезультатов = Новый Соответствие;
	Индекс = 0;
	
	#Область ТекстЗапросаШапка
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Ссылка,
	|	ДанныеДокумента.Номер             КАК Номер,
	|	ДанныеДокумента.НаименованиеЭтапа КАК НаименованиеЭтапа,
	|
	|	ДанныеДокумента.Распоряжение                КАК Распоряжение,
	|	ДанныеДокумента.Распоряжение.Представление  КАК ПредставлениеРаспоряжения,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.Подразделение.Представление КАК ПредставлениеПодразделения,
	|
	|	ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура                              КАК Изделие,
	|	ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика                            КАК ИзделиеХарактеристика,
	|	ЕСТЬNULL(ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура.Наименование, """") КАК ИзделиеПредставление,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ИспользованиеХарактеристик В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеХарактеристика.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                                                       КАК ИзделиеХарактеристикаПредставление,
	|
	|	ДанныеДокумента.Спецификация                                                                КАК Спецификация,
	|	ДанныеДокумента.Спецификация.Представление                                                  КАК ПредставлениеСпецификации,
	|	ДанныеДокумента.Этап                                                                        КАК ЭтапСпецификации,
	|
	|	ДанныеДокумента.Подразделение.ИспользоватьПооперационноеУправление  КАК ИспользоватьПооперационноеУправление,
	|	ДанныеДокумента.МаршрутнаяКарта                                     КАК МаршрутнаяКарта,
	|	ДанныеДокумента.КоэффициентМаршрутнойКарты                          КАК КоэффициентМаршрутнойКарты,
	|
	|	ДанныеДокумента.КоличествоУпаковокПлан     КАК Количество,
	|	ЕСТЬNULL(&КоэффициентУпаковки, 1)          КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.УпаковкаПлан = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.УпаковкаПлан)
	|	КОНЕЦ                                      КАК ПредставлениеЕдиницыИзмерения,
	|
	|	ЕСТЬNULL(ГрафикПроизводства.ОкончаниеЭтапа, ДАТАВРЕМЯ(1, 1, 1)) КАК ПлановоеОкончаниеЭтапа,
	|
	|	ДанныеДокумента.Исполнитель.Представление КАК ПредставлениеИсполнителя,
	|
	|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПервойОперации, 0) КАК ИдентификаторПервойОперации,
	|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПоследнейОперации, 0) КАК ИдентификаторПоследнейОперации
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
	|		ПО ДанныеДокумента.Ссылка = ГрафикПроизводства.ЭтапПроизводства
	|			И ДанныеДокумента.Распоряжение = ГрафикПроизводства.Распоряжение
	|			И (ГрафикПроизводства.СтатусГрафика = &РабочийГрафик)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
	|		ПО ДанныеДокумента.Ссылка = РеквизитыДеления.Этап
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДанныеДокумента.УпаковкаПлан",
		"ДанныеДокумента.ПартияПроизводства.ОсновноеИзделиеНоменклатура");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&КоэффициентУпаковки",
		ТекстЗапросаКоэффициентУпаковки);
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	ИндексыРезультатов.Вставить("ВыборкаДокумент", Индекс);
	Индекс = Индекс + 1;
	
	#КонецОбласти
	
	#Область ТекстЗапросаСмежныеЭтапы
	
	Если ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТСвязиЭтапов.СледующийЭтап КАК Ссылка,
		|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства,
		|	&ВТСвязиЭтаповПредставлениеЭтап КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).Подразделение КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.СледующийЭтап В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ЭтапПроизводства
		|ИТОГИ ПО
		|	Ссылка";
		
		ТекстПредставлениеЭтапа = ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.Этап");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеЭтап",
			ТекстПредставлениеЭтапа);
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПредшественники", Индекс);
		Индекс = Индекс + 1;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТСвязиЭтапов.Этап КАК Ссылка,
		|	ВТСвязиЭтапов.СледующийЭтап КАК ЭтапПроизводства,
		|	&ВТСвязиЭтаповПредставлениеСледующийЭтап КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).Подразделение КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.Этап В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ЭтапПроизводства
		|ИТОГИ ПО
		|	Ссылка";
		
		ТекстПредставлениеЭтапа = ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.СледующийЭтап");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеСледующийЭтап",
			ТекстПредставлениеЭтапа);
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПоследователи", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаМатериалы
	
	Если ЗаданиеНаПроизводствоПечататьМатериалы(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Материалы.Ссылка КАК Ссылка,
		|	Материалы.Номенклатура КАК Номенклатура,
		|	Материалы.Номенклатура.Код КАК Код,
		|	Материалы.Номенклатура.Артикул КАК Артикул,
		|	Материалы.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|	Материалы.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Материалы.Склад КАК Склад,
		|	Материалы.Склад.Представление КАК ПредставлениеСклада,
		|	ВЫБОР
		|		КОГДА Материалы.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Материалы.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Материалы.Упаковка)
		|	КОНЕЦ КАК ПредставлениеЕдиницыИзмерения,
		|	Материалы.КоличествоУпаковок КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&МассивОбъектов)
		|	И НЕ Материалы.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Материалы.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаМатериалы", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаВыходныеИзделия
	
	Если ЗаданиеНаПроизводствоПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Выпуск.Ссылка КАК Ссылка,
		|	Выпуск.Номенклатура КАК Номенклатура,
		|	Выпуск.Характеристика КАК Характеристика,
		|	Выпуск.Получатель КАК Получатель,
		|	ВЫБОР
		|		КОГДА Выпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Выпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Выпуск.Упаковка)
		|	КОНЕЦ КАК ПредставлениеЕдиницыИзмерения,		
		|	Выпуск.КоличествоУпаковок КАК Количество,
		|	Выпуск.Назначение КАК Назначение,
		|	Выпуск.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Выпуск.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТВыпуск
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Выпуск
		|ГДЕ
		|	Выпуск.Ссылка В(&МассивОбъектов)
		|	И НЕ Выпуск.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПобочныйВыпуск.Ссылка,
		|	ПобочныйВыпуск.Номенклатура,
		|	ПобочныйВыпуск.Характеристика,
		|	ПобочныйВыпуск.Получатель,
		|	ВЫБОР
		|		КОГДА ПобочныйВыпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Упаковка)
		|	КОНЕЦ,
		|	ПобочныйВыпуск.КоличествоУпаковок,
		|	ПобочныйВыпуск.Назначение,
		|	ПобочныйВыпуск.ЭтапПотребитель,
		|	ПобочныйВыпуск.НомерСтроки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныйВыпуск
		|ГДЕ
		|	ПобочныйВыпуск.Ссылка В(&МассивОбъектов)
		|	И НЕ ПобочныйВыпуск.Отменено
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Ссылка КАК Ссылка,
		|	Выпуск.Номенклатура КАК Номенклатура,
		|	Выпуск.Номенклатура.Код КАК Код,
		|	Выпуск.Номенклатура.Артикул КАК Артикул,
		|	Выпуск.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|	Выпуск.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Выпуск.ЭтапПотребитель <> &ПустаяСсылкаЭтап 
		|			ТОГДА &ПредставлениеЭтапа
		|		ИНАЧЕ Выпуск.Назначение.Представление
		|	КОНЕЦ КАК ПредставлениеНазначения,
		|	Выпуск.Получатель КАК Получатель,
		|	Выпуск.Получатель.Представление КАК ПредставлениеПолучателя,
		|	Выпуск.ПредставлениеЕдиницыИзмерения КАК ПредставлениеЕдиницыИзмерения,
		|	Выпуск.Количество КАК Количество
		|ИЗ
		|	ВТВыпуск КАК Выпуск
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Выпуск.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
			
		ТекстПредставлениеЭтапа = ТекстЗапросаПредставлениеЭтапа("Выпуск.ЭтапПотребитель");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ПредставлениеЭтапа",
			ТекстПредставлениеЭтапа);
		
		Индекс = Индекс + 1;
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаВыходныеИзделия", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СборкаТекста
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	#КонецОбласти
	
	#Область ВыполнениеЗапроса
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПустаяСсылкаЭтап", Документы.ЭтапПроизводства2_2.ПустаяСсылка());
	Запрос.УстановитьПараметр("РабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("ХранитьОперацииВРесурсныхСпецификациях", ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		СоздатьВТСвязиЭтапов(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, Ложь);
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	
	Для каждого Результат Из ИндексыРезультатов Цикл
		
		РезультатЗапроса = МассивРезультатов[Результат.Значение]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать(
			?(Результат.Ключ = "ВыборкаДокумент",
				ОбходРезультатаЗапроса.Прямой,
				ОбходРезультатаЗапроса.ПоГруппировкам));
		ДанныеДляПечати.Вставить(Результат.Ключ, Выборка);
		
	КонецЦикла;
	
	#КонецОбласти
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Выводит заголовок
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
//                     * Ссылка - ДокументСсылка - 
//
Процедура ЗаданиеНаПроизводствоВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаДокумент)
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	Область.Параметры.Заполнить(ВыборкаДокумент);
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		Область,
		ВыборкаДокумент.Ссылка);
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ЗаданиеНаПроизводствоВывестиШапку(ТабличныйДокумент, Макет, ВыборкаДокумент)
	
	ФорматнаяСтрока = УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства();
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	Область.Параметры.Заполнить(ВыборкаДокумент);
	
	Область.Параметры.ПредставлениеИзделия = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
															ВыборкаДокумент.ИзделиеПредставление, 
															ВыборкаДокумент.ИзделиеХарактеристикаПредставление);
	
	Область.Параметры.ПлановоеОкончаниеЭтапа = Формат(ВыборкаДокумент.ПлановоеОкончаниеЭтапа, ФорматнаяСтрока);
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

// Выводит смежные этапы
//
// Параметры:
//  ПараметрыПечати - Структура
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
// * Ссылка - ДокументСсылка -
//  ДанныеДляПечати - Структура - содержит:
// * ВыборкаПредшественники - ВыборкаИзРезультатаЗапроса
// * ВыборкаПоследователи - ВыборкаИзРезультатаЗапроса
//  Предшественники - Булево
Процедура ЗаданиеНаПроизводствоВывестиСмежныеЭтапы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати, Предшественники)
	
	Если НЕ ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		Если Предшественники Тогда
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПредшественники;
		Иначе
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПоследователи;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокумент.Ссылка);
		Если НЕ ВыборкаЭтапы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ОбластьЗаголовок = Макет.ПолучитьОбласть("СмежныеЭтапыЗаголовок");
	
	Если Предшественники Тогда
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Принять работу';
																	|en = 'Accept the job'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Сдать работу';
																	|en = 'Pass the work'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	//
	ОбластьСтрока = Макет.ПолучитьОбласть("СмежныеЭтапыСтрока");
	
	Выборка = ВыборкаЭтапы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("СмежныеЭтапыПодвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

// Выводит материалы
//
// Параметры:
//  ПараметрыПечати - Структура
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
// * Ссылка - ДокументСсылка -
//  ДанныеДляПечати - Структура - содержит:
// * ВыборкаМатериалы - ВыборкаИзРезультатаЗапроса
Процедура ЗаданиеНаПроизводствоВывестиМатериалы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати)
	
	Если НЕ ЗаданиеНаПроизводствоПечататьМатериалы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаМатериалы = ДанныеДляПечати.ВыборкаМатериалы;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокумент.Ссылка);
		Если НЕ ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицыМатериалы");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалы_СКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы_БезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалы_БезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаМатериалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Если ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВМатериалы(ПараметрыПечати) Тогда
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		ЗаданиеНаПроизводствоВывестиПустыеСтроки(ТабличныйДокумент, ОбластьСтрока, НомерСтроки);
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыМатериалы");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

// Выводит выходные изделия
//
// Параметры:
//  ПараметрыПечати - Структура
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//  Макет - ТабличныйДокумент, МакетОформленияКомпоновкиДанных, ОболочкаActiveDocument, ГеографическаяСхема, ТекстовыйДокумент, ОболочкаHTMLДокумента, ДвоичныеДанные, ГрафическаяСхема, СхемаКомпоновкиДанных -
//  ВыборкаДокумент - ВыборкаИзРезультатаЗапроса - содержит:
// * Ссылка - ДокументСсылка -
//  ДанныеДляПечати - Структура - содержит:
// * ВыборкаВыходныеИзделия - ВыборкаИзРезультатаЗапроса
Процедура ЗаданиеНаПроизводствоВывестиВыходныеИзделия(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент, ДанныеДляПечати)
	Если НЕ ЗаданиеНаПроизводствоПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаВыходныеИзделия = ДанныеДляПечати.ВыборкаВыходныеИзделия;
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокумент.Ссылка);
		Если НЕ ВыборкаВыходныеИзделия.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицыВыходныеИзделия");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделия_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделия_СКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделия_БезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделия_БезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаВыходныеИзделия.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Если ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВВыходныеИзделия(ПараметрыПечати) Тогда
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока);
		ЗаданиеНаПроизводствоВывестиПустыеСтроки(ТабличныйДокумент, ОбластьСтрока, НомерСтроки);
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыВыходныеИзделия");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаданиеНаПроизводствоВывестиОперации(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаДокумент)
	
	Если НЕ ЗаданиеНаПроизводствоПечататьОперации(ПараметрыПечати)
		ИЛИ НЕ ВыборкаДокумент.ИспользоватьПооперационноеУправление Тогда
		Возврат;
	Иначе
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицыМаршрутнаяКарта");
	ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДокумент);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМаршрутнаяКарта");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыМаршрутнаяКарта");
	НомерСтроки = 0;
	
	Если ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях") Тогда
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		
		ДанныеПоНоменклатуре.Номенклатура   = ВыборкаДокумент.Изделие;
		ДанныеПоНоменклатуре.Характеристика = ВыборкаДокумент.ИзделиеХарактеристика;
		ДанныеПоНоменклатуре.Спецификация   = ВыборкаДокумент.Спецификация;
		ДанныеПоНоменклатуре.Количество     = ВыборкаДокумент.Количество * ВыборкаДокумент.КоэффициентУпаковки;
		
		ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных("Операции");
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать = Истина;
		ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями = Истина;
		
		ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
			ДанныеПоНоменклатуре,
			ПараметрыВыборки,
			Новый Структура("Этап", ВыборкаДокумент.ЭтапСпецификации));
			
		Операции = ДанныеСпецификации.Операции;
		
	Иначе
	
		ДанныеМаршрутнойКарты = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
			ВыборкаДокумент.МаршрутнаяКарта,
			ВыборкаДокумент.КоэффициентМаршрутнойКарты,
			ВыборкаДокумент.Изделие,
			ВыборкаДокумент.ИзделиеХарактеристика,
			"Операции");
			
		Операции = ДанныеМаршрутнойКарты.Операции;
	
	КонецЕсли;
	
	// Сокращение маршрута слева
	Если ВыборкаДокумент.ИдентификаторПервойОперации <> 0 Тогда
		Операция = Операции.Найти(ВыборкаДокумент.ИдентификаторПервойОперации, "ИдентификаторОперации");
		Если Операция <> Неопределено Тогда
			Операции.Индексы.Добавить("НомерСледующейОперации");
			СтруктураПоиска = Новый Структура("НомерСледующейОперации", Операция.НомерОперации);
			Очередь = Операции.НайтиСтроки(СтруктураПоиска);
			Пока Очередь.ВГраница() <> -1 Цикл
				СтруктураПоиска.НомерСледующейОперации = Очередь[0].НомерОперации;
				Для каждого Строка Из Операции.НайтиСтроки(СтруктураПоиска) Цикл
					Очередь.Добавить(Строка);
				КонецЦикла;
				Операции.Удалить(Очередь[0]);
				Очередь.Удалить(0);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Сокращение маршрута справа
	Если ВыборкаДокумент.ИдентификаторПоследнейОперации <> 0 Тогда
		Операция = Операции.Найти(ВыборкаДокумент.ИдентификаторПоследнейОперации, "ИдентификаторОперации");
		Если Операция <> Неопределено Тогда
			Операции.Индексы.Добавить("НомерОперации");
			СтруктураПоиска = Новый Структура("НомерОперации", Операция.НомерСледующейОперации);
			Очередь = Операции.НайтиСтроки(СтруктураПоиска);
			Пока Очередь.ВГраница() <> -1 Цикл
				СтруктураПоиска.НомерОперации = Очередь[0].НомерСледующейОперации;
				Для каждого Строка Из Операции.НайтиСтроки(СтруктураПоиска) Цикл
					Очередь.Добавить(Строка);
				КонецЦикла;
				Операции.Удалить(Очередь[0]);
				Очередь.Удалить(0);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Операция Из Операции Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Операция);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если Операция.ВремяВыполненияЕдИзм = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда
			
			ВремяЧасы = Операция.ВремяВыполнения;
			
		Иначе
			
			ВремяСекунды = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				Операция.ВремяВыполнения, Операция.ВремяВыполненияЕдИзм);
				
			ВремяЧасы = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				ВремяСекунды, Перечисления.ЕдиницыИзмеренияВремени.Час);
				
		КонецЕсли;
		
		ОбластьСтрока.Параметры.ВремяЧасы = ВремяЧасы;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыМаршрутнаяКарта");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаданиеНаПроизводствоВывестиПустыеСтроки(ТабличныйДокумент, ОбластьСтрока, НомерСтроки)
	
	Количество = НомерСтроки/5;
	
	Если НЕ Количество = Цел(Количество) Тогда
		Количество = Цел(Количество) + 1;
	КонецЕсли;
	
	Для Сч = 1 По Количество Цикл
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаданиеНаПроизводствоПечататьСмежныеЭтапы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьСмежныеЭтапы") Тогда
		Возврат ПараметрыПечати.ПечататьСмежныеЭтапы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьСмежныеЭтапы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоПечататьМатериалы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьМатериалы") Тогда
		Возврат ПараметрыПечати.ПечататьМатериалы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьМатериалы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоПечататьВыходныеИзделия(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьВыходныеИзделия") Тогда
		Возврат ПараметрыПечати.ПечататьВыходныеИзделия;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьВыходныеИзделия");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоПечататьОперации(ПараметрыПечати)
	
	ИмяПараметра = "ПечататьОперации";
	
	Если ПараметрыПечати.Свойство(ИмяПараметра) Тогда
		Возврат ПараметрыПечати[ИмяПараметра];
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует параметр печати ""%1""';
										|en = 'The ""%1"" printing parameter is missing'"), ИмяПараметра);
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВМатериалы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ДобавлятьПустыеСтрокиВМатериалы") Тогда
		Возврат ПараметрыПечати.ДобавлятьПустыеСтрокиВМатериалы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ДобавлятьПустыеСтрокиВМатериалы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЗаданиеНаПроизводствоДобавлятьПустыеСтрокиВВыходныеИзделия(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ДобавлятьПустыеСтрокиВВыходныеИзделия") Тогда
		Возврат ПараметрыПечати.ДобавлятьПустыеСтрокиВВыходныеИзделия;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения , "ДобавлятьПустыеСтрокиВВыходныеИзделия");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЛистСопровожденияПартииПроизводства

Функция СформироватьПечатнуюФормуЛистСопровожденияПартииПроизводства(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭтапПроизводства2_2_ЛистСопровожденияПартииПроизводства";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЭтапПроизводства2_2.ПФ_MXL_ЛистСопровожденияПартииПроизводства");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыЛистСопровожденияПартииПроизводства(МассивОбъектов, ПараметрыПечати);
	ВыборкаПартии = ДанныеДляПечати.ВыборкаПартии;
	
	Пока ВыборкаПартии.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЛистСопровожденияПартииПроизводстваВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаПартии);
		
		ЛистСопровожденияПартииПроизводстваВывестиШапку(ТабличныйДокумент, Макет, ВыборкаПартии);
		
		ЛистСопровожденияПартииПроизводстваВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати, Истина);
		
		ЛистСопровожденияПартииПроизводстваВывестиЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати);
		
		ЛистСопровожденияПартииПроизводстваВывестиМатериалы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати);
		
		ЛистСопровожденияПартииПроизводстваВывестиВыходныеИзделия(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати);
		
		ЛистСопровожденияПартииПроизводстваВывестиСмежныеЭтапы(
			ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати, Ложь);
			
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Подписи"));
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаПартии.ПартияПроизводства);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЛистСопровожденияПартииПроизводства(МассивОбъектов, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	
	#Область ЧтениеЭтапов
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапПроизводства2_2.Ссылка КАК Ссылка,
		|	ЭтапПроизводства2_2.ПартияПроизводства КАК ПартияПроизводства
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|ГДЕ
		|	ЭтапПроизводства2_2.ПартияПроизводства В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ЭтапПроизводства2_2.ПартияПроизводства КАК ПартияПроизводства
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|			ГДЕ
		|				ЭтапПроизводства2_2.Ссылка В(&Ссылки))
		|	И ЭтапПроизводства2_2.Проведен";
	Запрос.УстановитьПараметр("Ссылки", МассивОбъектов);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Этапы = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	#КонецОбласти
	
	ТекстыЗапросовПакета = Новый Массив;
	ИндексыРезультатов = Новый Соответствие;
	Индекс = 0;
	
	#Область ТекстЗапросаШапка
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Документ.ПартияПроизводства                                                            КАК ПартияПроизводства,
	|	Документ.ПартияПроизводства.Код                                                        КАК ПартияПроизводстваКод,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура                                КАК Изделие,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.НаименованиеПолное             КАК ИзделиеНаименованиеПолное,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПартии,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика.НаименованиеПолное           КАК ХарактеристикаНаименованиеПолное,
	|	Документ.ПартияПроизводства.Спецификация                                               КАК Спецификация,
	|	Документ.ПартияПроизводства.Спецификация.Представление                                 КАК ПредставлениеСпецификации,
	|	Документ.Распоряжение.Номер                                                            КАК РаспоряжениеНомер,
	|	СУММА(ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|				И ТабличнаяЧасть.Характеристика = Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|				ТОГДА ТабличнаяЧасть.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                                                             КАК Количество,
	|	МАКСИМУМ(ЕСТЬNULL(График.ОкончаниеЭтапа, ДАТАВРЕМЯ(1,1,1)))                            КАК ПлановоеОкончание
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|			И (НЕ ТабличнаяЧасть.Отменено)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|		ПО Документ.Распоряжение = График.Распоряжение
	|			И Документ.Ссылка = График.ЭтапПроизводства
	|			И (График.СтатусГрафика = &РабочийГрафик)
	|ГДЕ
	|	Документ.Ссылка В(&Этапы)
	|	И Документ.ПартияПроизводства.ТипПроцесса В (
	|											ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства,
	|	Документ.Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.ПартияПроизводства,
	|	Документ.ПартияПроизводства.Код,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.НаименованиеПолное,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура.ЕдиницаИзмерения.Представление,
	|	Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика.НаименованиеПолное,
	|	Документ.ПартияПроизводства.Спецификация,
	|	Документ.ПартияПроизводства.Спецификация.Представление,
	|	Документ.Распоряжение.Номер,
	|	СУММА(ВЫБОР
	|			КОГДА ТабличнаяЧасть.Номенклатура = ПартияПроизводства.ОсновноеИзделиеНоменклатура
	|				И ТабличнаяЧасть.Характеристика = Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика
	|				ТОГДА ТабличнаяЧасть.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	МАКСИМУМ(ЕСТЬNULL(График.ОкончаниеЭтапа, ДАТАВРЕМЯ(1,1,1)))
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|			И (НЕ ТабличнаяЧасть.Отменено)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК График
	|		ПО Документ.Распоряжение = График.Распоряжение
	|			И Документ.Ссылка = График.ЭтапПроизводства
	|			И (График.СтатусГрафика = &РабочийГрафик)
	|ГДЕ
	|	Документ.Ссылка В(&Этапы)
	|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.ПартияПроизводства,
	|	Документ.Распоряжение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартияПроизводства";
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	ИндексыРезультатов.Вставить("ВыборкаПартии", Индекс);
	Индекс = Индекс + 1;
	
	#КонецОбласти
	
	#Область ТекстЗапросаСмежныеЭтапы
	
	Если ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства КАК ПартияПроизводства,
		|	ВТСвязиЭтапов.Этап                                                                        КАК Этап,
		|	&ВТСвязиЭтаповПредставлениеЭтап                                                           КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).Подразделение               КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.СледующийЭтап В(&Этапы)
		|	И ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|		<> ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Этап
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеЭтап",
			ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.Этап"));
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПредшественники", Индекс);
		Индекс = Индекс + 1;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства     КАК ПартияПроизводства,
		|	ВТСвязиЭтапов.СледующийЭтап                                                          КАК Этап,
		|	&ВТСвязиЭтаповПредставлениеСледующийЭтап                                             КАК ПредставлениеЭтапа,
		|	ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).Подразделение КАК Подразделение
		|ИЗ
		|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
		|ГДЕ
		|	ВТСвязиЭтапов.Этап В(&Этапы)
		|	И ВЫРАЗИТЬ(ВТСвязиЭтапов.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|		<> ВЫРАЗИТЬ(ВТСвязиЭтапов.Этап КАК Документ.ЭтапПроизводства2_2).ПартияПроизводства
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Этап
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ВТСвязиЭтаповПредставлениеСледующийЭтап",
			ТекстЗапросаПредставлениеЭтапа("ВТСвязиЭтапов.СледующийЭтап"));
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаПоследователи", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаЭтапы
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Документ.ПартияПроизводства                                        КАК ПартияПроизводства,
	|	Документ.Ссылка                                                    КАК Этап,
	|	&ПредставлениеЭтапа                                                КАК ПредставлениеЭтапа,
	|	Документ.Подразделение                                             КАК Подразделение,
	|	Документ.Подразделение.Представление                               КАК ПредставлениеПодразделения,
	|	ЕСТЬNULL(ГрафикЭтаповПроизводства2_2.НачалоЭтапа, НЕОПРЕДЕЛЕНО)    КАК Начало,
	|	ЕСТЬNULL(ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа, НЕОПРЕДЕЛЕНО) КАК Окончание
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ПО Документ.Распоряжение = ГрафикЭтаповПроизводства2_2.Распоряжение
	|			И Документ.Ссылка = ГрафикЭтаповПроизводства2_2.ЭтапПроизводства
	|			И (ГрафикЭтаповПроизводства2_2.СтатусГрафика = &РабочийГрафик)
	|ГДЕ
	|	Документ.Ссылка В(&Этапы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартияПроизводства,
	|	Ссылка
	|ИТОГИ ПО
	|	ПартияПроизводства";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПредставлениеЭтапа",
		ТекстЗапросаПредставлениеЭтапа("Документ.Ссылка"));
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	ИндексыРезультатов.Вставить("ВыборкаЭтапы", Индекс);
	Индекс = Индекс + 1;
	
	#КонецОбласти
	
	#Область ТекстЗапросаМатериалы
	
	Если ЛистСопровожденияПартииПроизводстваПечататьМатериалы(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Материалы.Ссылка.ПартияПроизводства         КАК ПартияПроизводства,
		|	Материалы.Номенклатура                      КАК Номенклатура,
		|	Материалы.Номенклатура.Код                  КАК Код,
		|	Материалы.Номенклатура.Артикул              КАК Артикул,
		|	Материалы.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Материалы.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Материалы.Склад                             КАК Склад,
		|	Материалы.Склад.Представление               КАК ПредставлениеСклада,
		|	ВЫБОР
		|		КОГДА Материалы.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Материалы.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Материалы.Упаковка)
		|	КОНЕЦ                                       КАК ПредставлениеЕдиницыИзмерения,
		|	Материалы.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&Этапы)
		|	И НЕ Материалы.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Материалы.Ссылка,
		|	Материалы.НомерСтроки
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаМатериалы", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ТекстЗапросаВыходныеИзделия
	
	Если ЛистСопровожденияПартииПроизводстваПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Выпуск.Ссылка.ПартияПроизводства         КАК ПартияПроизводства,
		|	Выпуск.Ссылка                            КАК Ссылка,
		|	Выпуск.НомерСтроки                       КАК НомерСтроки,
		|	Выпуск.Номенклатура                      КАК Номенклатура,
		|	Выпуск.Номенклатура.Код                  КАК Код,
		|	Выпуск.Номенклатура.Артикул              КАК Артикул,
		|	Выпуск.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Выпуск.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Выпуск.Получатель                        КАК Получатель,
		|	Выпуск.Получатель.Представление          КАК ПредставлениеПолучателя,
		|	ВЫБОР
		|		КОГДА Выпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(Выпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Выпуск.Упаковка)
		|	КОНЕЦ                                    КАК ПредставлениеЕдиницыИзмерения,
		|	Выпуск.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Выпуск
		|ГДЕ
		|	Выпуск.Ссылка В(&Этапы)
		|	И НЕ Выпуск.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПобочныйВыпуск.Ссылка.ПартияПроизводства         КАК ПартияПроизводства,
		|	ПобочныйВыпуск.Ссылка                            КАК Ссылка,
		|	ПобочныйВыпуск.НомерСтроки                       КАК НомерСтроки,
		|	ПобочныйВыпуск.Номенклатура                      КАК Номенклатура,
		|	ПобочныйВыпуск.Номенклатура.Код                  КАК Код,
		|	ПобочныйВыпуск.Номенклатура.Артикул              КАК Артикул,
		|	ПобочныйВыпуск.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	ПобочныйВыпуск.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	ПобочныйВыпуск.Получатель                        КАК Получатель,
		|	ПобочныйВыпуск.Получатель.Представление          КАК ПредставлениеПолучателя,
		|	ВЫБОР
		|		КОГДА ПобочныйВыпуск.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Номенклатура.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПобочныйВыпуск.Упаковка)
		|	КОНЕЦ                                            КАК ПредставлениеЕдиницыИзмерения,
		|	ПобочныйВыпуск.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныйВыпуск
		|ГДЕ
		|	ПобочныйВыпуск.Ссылка В(&Этапы)
		|	И НЕ ПобочныйВыпуск.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияПроизводства,
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	ПартияПроизводства";
		
		ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
		ИндексыРезультатов.Вставить("ВыборкаИзделия", Индекс);
		Индекс = Индекс + 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СборкаТекста
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	#КонецОбласти
	
	#Область ВыполнениеЗапроса
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Этапы", Этапы);
	Запрос.УстановитьПараметр("РабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		СоздатьВТСвязиЭтапов(Запрос.МенеджерВременныхТаблиц, Этапы, Ложь);
	КонецЕсли;
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	Для каждого Результат Из ИндексыРезультатов Цикл
		
		РезультатЗапроса = МассивРезультатов[Результат.Значение]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать(
			?(Результат.Ключ = "ВыборкаПартии",
				ОбходРезультатаЗапроса.Прямой,
				ОбходРезультатаЗапроса.ПоГруппировкам));
		ДанныеДляПечати.Вставить(Результат.Ключ, Выборка);
		
	КонецЦикла;
	
	#КонецОбласти
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ЛистСопровожденияПартииПроизводстваВывестиЗаголовок(ТабличныйДокумент, Макет, ВыборкаПартии)
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	Область.Параметры.Номер = СтрШаблон("%1.%2",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПартии.РаспоряжениеНомер, Истина, Истина),
		ВыборкаПартии.ПартияПроизводстваКод);
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		Область,
		ВыборкаПартии.ПартияПроизводства);
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиШапку(ТабличныйДокумент, Макет, ВыборкаПартии)
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(ВыборкаПартии);
	Область.Параметры.ПредставлениеИзделия = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		ВыборкаПартии.ИзделиеНаименованиеПолное,
		ВыборкаПартии.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
	Область.Параметры.ПлановоеОкончание = Формат(ВыборкаПартии.ПлановоеОкончание, "ДЛФ=D");
	
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиСмежныеЭтапы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати, Предшественники)
	
	Если НЕ ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		Если Предшественники Тогда
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПредшественники;
		Иначе
			ВыборкаЭтапы = ДанныеДляПечати.ВыборкаПоследователи;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
		Если НЕ ВыборкаЭтапы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ОбластьЗаголовок = Макет.ПолучитьОбласть("СмежныеЭтапыЗаголовок");
	
	Если Предшественники Тогда
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Принять работу';
																	|en = 'Accept the job'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ОбластьЗаголовок.Параметры.СмежныеЭтапыТекстЗаголовка = НСтр("ru = 'Сдать работу';
																	|en = 'Pass the work'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	//
	ОбластьСтрока = Макет.ПолучитьОбласть("СмежныеЭтапыСтрока");
	
	Выборка = ВыборкаЭтапы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("СмежныеЭтапыПодвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиЭтапы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати)
	
	ВыборкаЭтапы = ДанныеДляПечати.ВыборкаЭтапы; // РезультатЗапроса - 
		
	СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
	Если НЕ ВыборкаЭтапы.НайтиСледующий(СтруктураПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяГрафик = УправлениеПроизводством.ИспользуетсяГрафикПроизводства();
	Если ИспользуетсяГрафик Тогда
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыСГрафиком");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыСГрафиком"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
	Иначе
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыБезГрафика");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыБезГрафика"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаЭтапы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ИспользуетсяГрафик И ЗначениеЗаполнено(Выборка.Начало) Тогда
			Если НачалоДня(Выборка.Начало) = НачалоДня(Выборка.Окончание) Тогда
				ОбластьСтрока.Параметры.СрокПроизводства = Формат(Выборка.Начало, "ДФ=dd.MM");
			Иначе
				ОбластьСтрока.Параметры.СрокПроизводства = СтрШаблон("%1 - %2",
					Формат(Выборка.Начало, "ДФ=dd.MM"),
					Формат(Выборка.Окончание, "ДФ=dd.MM"));
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТаблицыЭтапы"));
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиМатериалы(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати)
	
	Если НЕ ЛистСопровожденияПартииПроизводстваПечататьМатериалы(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаМатериалы = ДанныеДляПечати.ВыборкаМатериалы;
		
		СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
		Если НЕ ВыборкаМатериалы.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалыСКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалыСКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалыБезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыМатериалыБезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаМатериалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыМатериалы");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЛистСопровожденияПартииПроизводстваВывестиВыходныеИзделия(ПараметрыПечати, ТабличныйДокумент, Макет, ВыборкаПартии, ДанныеДляПечати)
	
	Если НЕ ЛистСопровожденияПартииПроизводстваПечататьВыходныеИзделия(ПараметрыПечати) Тогда
		Возврат;
	Иначе
		
		ВыборкаИзделия = ДанныеДляПечати.ВыборкаИзделия;
		
		СтруктураПоиска = Новый Структура("ПартияПроизводства", ВыборкаПартии.ПартияПроизводства);
		Если НЕ ВыборкаИзделия.НайтиСледующий(СтруктураПоиска) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	Если ВыводитьКоды Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделияСКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделияСКодом";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	Иначе
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицыВыходныеИзделияБезКода");
		
		ИмяОбластиСтрока = "СтрокаТаблицыВыходныеИзделияБезКода";
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтрока); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	НомерСтроки = 0;
	Выборка = ВыборкаИзделия.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураНаименованиеПолное,
				Выборка.ХарактеристикаНаименованиеПолное,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалТаблицыВыходныеИзделия");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Функция ЛистСопровожденияПартииПроизводстваПечататьСмежныеЭтапы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьСмежныеЭтапы") Тогда
		Возврат ПараметрыПечати.ПечататьСмежныеЭтапы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьСмежныеЭтапы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЛистСопровожденияПартииПроизводстваПечататьМатериалы(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьМатериалы") Тогда
		Возврат ПараметрыПечати.ПечататьМатериалы;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьМатериалы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция ЛистСопровожденияПартииПроизводстваПечататьВыходныеИзделия(ПараметрыПечати)
	
	Если ПараметрыПечати.Свойство("ПечататьВыходныеИзделия") Тогда
		Возврат ПараметрыПечати.ПечататьВыходныеИзделия;
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Отсутствует параметр печати ""%1""';
								|en = 'The ""%1"" printing parameter is missing'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ПечататьВыходныеИзделия");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Серии

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	Товары.Получатель КАК Получатель,
	|	Товары.Произведено КАК Произведено,
	|	Товары.ДатаПроизводства КАК ДатаПроизводства,
	|	Товары.Количество КАК Количество,
	|	Товары.Отменено КАК Отменено,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Получатель КАК Получатель,
	|	Товары.Произведено КАК Произведено,
	|	Товары.ДатаПроизводства КАК ДатаПроизводства,
	|	Товары.Подразделение КАК Подразделение,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Получатель,
	|	Товары.Произведено,
	|	Товары.ДатаПроизводства,
	|	Товары.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение КАК Назначение,
	|	Серии.Получатель КАК Получатель,
	|	Серии.Произведено КАК Произведено,
	|	Серии.ДатаПроизводства КАК ДатаПроизводства,
	|	Серии.Подразделение КАК Подразделение,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение КАК Назначение,
	|	Серии.Получатель КАК Получатель,
	|	Серии.Произведено КАК Произведено,
	|	Серии.ДатаПроизводства КАК ДатаПроизводства,
	|	Серии.Подразделение КАК Подразделение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Получатель,
	|	Серии.Произведено,
	|	Серии.ДатаПроизводства,
	|	Серии.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ Товары.Произведено
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриПроизводствеПродукции
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 2
	|					КОГДА НЕ ТоварыДляЗапроса.Произведено
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 21
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Получатель = ТоварыДляЗапроса.Получатель
	|			И Товары.Произведено = ТоварыДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = ТоварыДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|			И Товары.Назначение = СерииДляЗапроса.Назначение
	|			И Товары.Получатель = СерииДляЗапроса.Получатель
	|			И Товары.Произведено = СерииДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = СерииДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = СерииДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				ИЛИ НЕ Склады.ЦеховаяКладовая
	|				ИЛИ Склады.Подразделение <> Товары.Подразделение
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ Товары.Произведено
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 10
	|					КОГДА НЕ ТоварыДляЗапроса.Произведено
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 8
	|					КОГДА НЕ ТоварыДляЗапроса.Произведено
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 27
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПродукцииИзПроизводства
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								КОГДА НЕ ТоварыДляЗапроса.Произведено
	|										И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|									ТОГДА 23
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							КОГДА НЕ ТоварыДляЗапроса.Произведено
	|									И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|								ТОГДА 21
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Получатель = ТоварыДляЗапроса.Получатель
	|			И Товары.Произведено = ТоварыДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = ТоварыДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|			И Товары.Назначение = СерииДляЗапроса.Назначение
	|			И Товары.Получатель = СерииДляЗапроса.Получатель
	|			И Товары.Произведено = СерииДляЗапроса.Произведено
	|			И Товары.ДатаПроизводства = СерииДляЗапроса.ДатаПроизводства
	|			И Товары.Подразделение = СерииДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Товары.Получатель = Склады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Товары.Получатель = ПолитикиУчетаСерий.Склад
	|			И (СправочникНоменклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	СтатусыПолучатель.СтатусУказанияСерий КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий В (13, 14, 15)
	|			ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|		КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО Товары.НомерСтроки = СтатусыОтправитель.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО Товары.НомерСтроки = СтатусыПолучатель.НомерСтроки
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ СтатусыПолучатель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий В (13, 14, 15)
	|					ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|				КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|			КОНЕЦ <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийОбеспечениеМатериаламиИРаботами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	Товары.Отменено КАК Отменено,
	|	Товары.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	// При отгрузке из нашей кладовой
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|				И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ЦеховаяКладовая
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).Подразделение = Товары.Подразделение
	|				И НЕ &ПроизводствоНаСтороне
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
	|				И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ЦеховаяКладовая
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).Подразделение = Товары.Подразделение
	|				И НЕ &ПроизводствоНаСтороне
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Товары.Склад = ПолитикиУчетаСерий.Склад
	|			И (СпрНоменклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|				И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ЦеховаяКладовая
	|				И ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).Подразделение = Товары.Подразделение
	|				И НЕ &ПроизводствоНаСтороне
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|				И ВидыНоменклатуры.ПолитикаУчетаСерий.УчетСерийПереданныхПереработчикуТоваров
	|				И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И &ПроизводствоНаСтороне
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|							ТОГДА 18
	|						ИНАЧЕ 17
	|					КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	СтатусыПолучатель.СтатусУказанияСерий КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО Товары.НомерСтроки = СтатусыОтправитель.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО Товары.НомерСтроки = СтатусыПолучатель.НомерСтроки
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ СтатусыПолучатель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыПолучатель.СтатусУказанияСерий <> 0
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ СтатусыОтправитель.СтатусУказанияСерий
	|			КОНЕЦ <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийРасходМатериаловИРабот()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриРасходеМатериалов
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийЭкономияМатериалов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Получатель КАК Склад,
	|	Товары.Назначение КАК Назначение,
	|	Товары.ДатаОперации КАК ДатаОперации,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Назначение КАК Назначение,
	|	Товары.ДатаОперации КАК ДатаОперации,
	|	Товары.Подразделение КАК Подразделение,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Назначение,
	|	Товары.ДатаОперации,
	|	Товары.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Получатель КАК Склад,
	|	Серии.Назначение КАК Назначение,
	|	Серии.ДатаОперации КАК ДатаОперации,
	|	Серии.Подразделение КАК Подразделение,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Склад КАК Склад,
	|	Серии.Назначение КАК Назначение,
	|	Серии.ДатаОперации КАК ДатаОперации,
	|	Серии.Подразделение КАК Подразделение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Склад,
	|	Серии.Назначение,
	|	Серии.ДатаОперации,
	|	Серии.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.ДатаОперации = ТоварыДляЗапроса.ДатаОперации
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				ИЛИ НЕ Склады.ЦеховаяКладовая
	|				ИЛИ Склады.Подразделение <> Товары.Подразделение
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 8
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПрочемуОприходованию
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.ДатаОперации = ТоварыДляЗапроса.ДатаОперации
	|			И Товары.Подразделение = ТоварыДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|			И Товары.Склад = СерииДляЗапроса.Склад
	|			И Товары.Назначение = СерииДляЗапроса.Назначение
	|			И Товары.ДатаОперации = СерииДляЗапроса.ДатаОперации
	|			И Товары.Подразделение = СерииДляЗапроса.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Товары.Склад = Склады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Товары.Склад = ПолитикиУчетаСерий.Склад
	|			И (СправочникНоменклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	СтатусыПолучатель.СтатусУказанияСерий КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий <> 0
	|			ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|		ИНАЧЕ СтатусыПолучатель.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО Товары.НомерСтроки = СтатусыОтправитель.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО Товары.НомерСтроки = СтатусыПолучатель.НомерСтроки
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ СтатусыПолучатель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий <> 0
	|					ТОГДА СтатусыОтправитель.СтатусУказанияСерий
	|				ИНАЧЕ СтатусыПолучатель.СтатусУказанияСерий
	|			КОНЕЦ <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПакетноеФормированиеЭтапов

Функция СформироватьЭтапыВнутриЗамераВремени(Параметры)
	
	РезультатФормирования = РезультатФормированияЭтапов(Параметры.Распоряжения);
	
	// Чтение потребностей к формированию этапов
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.ЗаказНаПроизводство2_2.СоздатьВТДанныеДляФормированияЭтапов(
		МенеджерВременныхТаблиц, Параметры.Распоряжения);
	
	ПроверитьДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, РезультатФормирования);
	
	Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
		МенеджерВременныхТаблиц, Параметры.Распоряжения);
	
	Очередь = ОчередьРаспоряженийДляФормированияЭтапов(МенеджерВременныхТаблиц);
	Если Очередь.Количество() = 0 Тогда
		Возврат РезультатФормирования;
	КонецЕсли;
	
	Изделия = ПродукцияИПолуфабрикатыДляФормированияЭтапов(МенеджерВременныхТаблиц);
	Изделия.Индексы.Добавить("Распоряжение");
	
	// Параметры разузлования
	ПараметрыРазузлования = РазузлованиеИзделий.ПараметрыРазузлования();
	ПараметрыРазузлования.ГруппироватьДанные = Истина;
	ПараметрыРазузлования.ПоляГруппировки = РазузлованиеИзделий.ПоляГруппировки("Распоряжение,НазначениеПродукция");
	ПараметрыРазузлования.РезервПФСоСклада = Параметры.РезервироватьПФ;
	ПараметрыРазузлования.РезервПФИмяПоляНазначение = "НазначениеМатериалы";
	ПараметрыРазузлования.ЗаменятьПФНаАналоги = Параметры.ЗаменятьПФНаАналоги;
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(, МенеджерВременныхТаблиц);
	ПараметрыВыборки.РассчитыватьДолиСтоимостиВыходныхИзделий = Истина;
	ПараметрыВыборки.ПолучитьПромежуточныйВыпуск = Истина;
	
	Пока Очередь.Следующий() Цикл
		
		ПараметрыРазузлования.РезервПФТолькоОбособленно = Очередь.ПроизводствоИзДавальческогоСырья;
		
		// Чтение данных спецификаций
		РезультатРазузлования = РазузлованиеИзделий.Разузловать(
			Изделия.Скопировать(Новый Структура("Распоряжение", Очередь.Распоряжение)),
			ПараметрыРазузлования,
			ПараметрыВыборки);
		
		Если РезультатРазузлования.ЕстьОшибка Тогда
			ЗаполнитьЗначенияСвойств(РезультатФормирования, РезультатРазузлования, "ЕстьОшибка, ОшибкаТекст, ОшибкаСсылка");
			Возврат РезультатФормирования;
		КонецЕсли;
		
		ДанныеСпецификаций = РезультатРазузлования.ДанныеСпецификаций;
		ДополнитьДанныеСпецификаций(ДанныеСпецификаций, Очередь.Распоряжение);
		
		// Формирование документов
		Этапы = Новый Массив;
		Для Индекс = 0 По ДанныеСпецификаций.ВГРаница() Цикл
			
			Ссылки = СоздатьЦепочкуЭтапов(ДанныеСпецификаций[Индекс]);
			
			Для каждого Ссылка Из Ссылки Цикл
				Этапы.Добавить(Ссылка);
			КонецЦикла;
			РезультатФормирования.СформированоДокументов = РезультатФормирования.СформированоДокументов + Ссылки.Количество();
			
		КонецЦикла;
		
		// Обособление выпуска в этапах, требующих разборку
		СтрокиОбособить = Изделия.НайтиСтроки(
			Новый Структура("Распоряжение, ОбособитьПодРазобрку", Очередь.Распоряжение, Истина));
		ЭтапыОбособить = Неопределено;
		Если СтрокиОбособить.ВГраница() <> -1 Тогда
			ЭтапыОбособить = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
				Изделия.Скопировать(СтрокиОбособить, "ЭтапИсточник").ВыгрузитьКолонку("ЭтапИсточник"));
			ОбособитьВыпускПодРазборку(ЭтапыОбособить, Этапы);
		КонецЕсли;
		
		РегистрыСведений.НормативныйГрафикЭтаповПроизводства.Рассчитать(Очередь.Распоряжение);
		
		// Заполнение обеспечения и формирование движений
		ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(Параметры, Этапы, МенеджерВременныхТаблиц);
		
		// Заполнение связанных регистров
		Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
			РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Этапы);
		КонецЕсли;
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(Этапы);
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Очередь.Распоряжение);
		Если ЭтапыОбособить <> Неопределено Тогда
			РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(ЭтапыОбособить);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатФормирования;
	
КонецФункции

Функция СформироватьЭтапыПоДаннымЗаказа21(Параметры, Распоряжение, ДанныеСпецификаций) Экспорт
	
	ДополнитьДанныеСпецификаций(ДанныеСпецификаций, Распоряжение);
		
	// Формирование документов
	Этапы = Новый Массив;
	СформированоДокументов = 0;
	Для Индекс = 0 По ДанныеСпецификаций.ВГРаница() Цикл
		
		Ссылки = СоздатьЦепочкуЭтапов(ДанныеСпецификаций[Индекс]);
		
		Для каждого Ссылка Из Ссылки Цикл
			Этапы.Добавить(Ссылка);
		КонецЦикла;
		СформированоДокументов = СформированоДокументов + Ссылки.Количество();
		
	КонецЦикла;
	РегистрыСведений.НормативныйГрафикЭтаповПроизводства.Рассчитать(Распоряжение);
	
	// Заполнение обеспечения и формирование движений
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
		МенеджерВременныхТаблиц,
		Параметры.Распоряжения);
	
	ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(Параметры, Этапы, МенеджерВременныхТаблиц);
	
	// Заполнение связанных регистров
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Этапы);
	КонецЕсли;
	РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(Этапы);
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжение);

	Возврат СформированоДокументов;
	
КонецФункции

Функция РезультатФормированияЭтапов(Распоряжения = Неопределено)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("ОшибкаТекст", Неопределено);
	Результат.Вставить("ОшибкаСсылка", Неопределено);
	
	Результат.Вставить("СформированоДокументов", 0);
	
	Результат.Вставить("Распоряжения", Распоряжения);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, РезультатФормирования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫРАЗИТЬ(ВТПотребности.Распоряжение КАК Документ.ЗаказНаПроизводство2_2) КАК Ссылка,
	|		ВЫРАЗИТЬ(ВТПотребности.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса
	|	ИЗ
	|		ВтДанныеДляФормированияЭтапов КАК ВТПотребности
	|	ГДЕ
	|		ВТПотребности.ЭтапИсточник = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|		И ВТПотребности.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВЫРАЗИТЬ(ВТПотребности.ЭтапИсточник КАК Документ.ЭтапПроизводства2_2) КАК Ссылка,
	|		ВЫРАЗИТЬ(ВТПотребности.ЭтапИсточник КАК Документ.ЭтапПроизводства2_2).ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса
	|	ИЗ
	|		ВтДанныеДляФормированияЭтапов КАК ВТПотребности
	|	ГДЕ
	|		ВТПотребности.ЭтапИсточник <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|		И ВТПотребности.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|) КАК Таблица");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
			Подстановка = НСтр("ru = 'производства (разборки)';
								|en = 'production (reverse kitting)'");
		ИначеЕсли Выборка.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
			Подстановка = НСтр("ru = 'производства (ремонта)';
								|en = 'production (R&M)'");
		Иначе
			Подстановка = НСтр("ru = 'производства';
								|en = 'production'");
		КонецЕсли;
		
		ТекстШаблон = НСтр("ru = 'Для %1 изделий необходимо создать этапы вручную (см. документ № %2)';
							|en = 'For the %1 goods, create stages manually (see document No.%2)'");
		ОшибкаТекст = СтрШаблон(ТекстШаблон, Подстановка, Выборка.Ссылка);

		РезультатФормирования.ЕстьОшибка = Истина;
		РезультатФормирования.ОшибкаТекст = ОшибкаТекст;
		РезультатФормирования.ОшибкаСсылка = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОчередьРаспоряженийДляФормированияЭтапов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Распоряжение КАК Распоряжение,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ХозяйственнаяОперация В (
	//++ Устарело_Переработка24
	|	                         ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья),
	//-- Устарело_Переработка24
	|	                         ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)) КАК ПроизводствоИзДавальческогоСырья,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Приоритет.РеквизитДопУпорядочивания     КАК Приоритет1,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Подразделение.РеквизитДопУпорядочивания КАК Приоритет2,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Очередь                                 КАК Приоритет3
	|
	|ИЗ
	|	ВтДанныеДляФормированияЭтапов КАК Таблица
	|	
	|ГДЕ
	|	Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет1,
	|	Приоритет2,
	|	Приоритет3
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПродукцияИПолуфабрикатыДляФормированияЭтапов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Распоряжение,
	|	
	|	Таблица.НазначениеПродукция КАК НазначениеПродукция,
	|	Таблица.НазначениеМатериалы КАК НазначениеМатериалы,
	|	
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|
	|	Таблица.Отправитель    КАК Отправитель,
	|	Таблица.Получатель     КАК Получатель,
	|	
	|	Таблица.ЭтапИсточник   КАК ЭтапИсточник,
	|	Таблица.Назначение     КАК Назначение,
	|	
	|	Таблица.Спецификация   КАК Спецификация,
	|
	|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
	|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
	|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	Таблица.НомерСтроки    КАК НомерСтроки,
	|	
	|	Таблица.Количество     КАК Количество,
	|	
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).НачатьНеРанее           КАК ДатаЗапуска,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).ДатаПотребности         КАК ДатаВыпуска,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).РазмещениеВыпуска       КАК РазмещениеВыпуска,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫРАЗИТЬ(Таблица.Распоряжение КАК Документ.ЗаказНаПроизводство2_2).Подразделение           КАК ПодразделениеДиспетчер,
	|
	|	Таблица.ЭтапИсточник <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)                КАК ОбособитьПодРазобрку
	|ИЗ
	|	ВтДанныеДляФормированияЭтапов КАК Таблица
	|	
	|ГДЕ
	|	Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбособитьВыпускПодРазборку(СсылкиПотребность, СсылкиОбеспечение)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка            КАК ЭтапПотребитель,
		|	ОбеспечениеМатериаламиИРаботами.Номенклатура      КАК Номенклатура,
		|	ОбеспечениеМатериаламиИРаботами.Характеристика    КАК Характеристика,
		|	ОбеспечениеМатериаламиИРаботами.Склад             КАК Получатель,
		|	ОбеспечениеМатериаламиИРаботами.Назначение        КАК Назначение,
		|	СУММА(ОбеспечениеМатериаламиИРаботами.Количество) КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
		|ГДЕ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.ЭтапПотребитель КАК Ссылка
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Т
		|			ГДЕ
		|				Т.Ссылка В (&СсылкиПотребность)
		|				И Т.ОбработатьПоСпецификации
		|				И Т.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				Т.ЭтапПотребитель
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Т
		|			ГДЕ
		|				Т.Ссылка В (&СсылкиПотребность)
		|				И Т.ОбработатьПоСпецификации
		|				И Т.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка))
		|	И ОбеспечениеМатериаламиИРаботами.Ссылка.Проведен
		|	И ОбеспечениеМатериаламиИРаботами.Производится
		|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбеспечениеМатериаламиИРаботами.Характеристика,
		|	ОбеспечениеМатериаламиИРаботами.Назначение,
		|	ОбеспечениеМатериаламиИРаботами.Номенклатура,
		|	ОбеспечениеМатериаламиИРаботами.Склад,
		|	ОбеспечениеМатериаламиИРаботами.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка.Спецификация КАК Спецификация,
		|	ОбеспечениеМатериаламиИРаботами.Ссылка              КАК ЭтапПотребитель,
		|	ОбеспечениеМатериаламиИРаботами.Номенклатура        КАК Номенклатура,
		|	ОбеспечениеМатериаламиИРаботами.Характеристика      КАК Характеристика,
		|	ОбеспечениеМатериаламиИРаботами.Назначение          КАК Назначение,
		|	ОбеспечениеМатериаламиИРаботами.Склад               КАК Получатель,
		|	ОбеспечениеМатериаламиИРаботами.Количество          КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
		|ГДЕ
		|	ОбеспечениеМатериаламиИРаботами.Ссылка В(&СсылкиОбеспечение)
		|	И ОбеспечениеМатериаламиИРаботами.Производится
		|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
		|	И ОбеспечениеМатериаламиИРаботами.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)");
	Запрос.УстановитьПараметр("СсылкиПотребность", СсылкиПотребность);
	Запрос.УстановитьПараметр("СсылкиОбеспечение", СсылкиОбеспечение);
	МассивРезультатов = Запрос.ВыполнитьПакет();  
	
	ОбеспечениеСтарое = МассивРезультатов[0].Выгрузить();
	ОбеспечениеСтарое.Индексы.Добавить("ЭтапПотребитель,Номенклатура,Характеристика,Получатель,Назначение");
	СтруктураПоиска1 = Новый Структура("ЭтапПотребитель,Номенклатура,Характеристика,Получатель,Назначение");
	
	ОбеспечениеНовое = МассивРезультатов[1].Выгрузить();
	ОбеспечениеНовое.Индексы.Добавить("Спецификация,Номенклатура,Характеристика,Получатель");
	СтруктураПоиска2 = Новый Структура("Спецификация,Номенклатура,Характеристика,Получатель");
	
	СтруктураПоиска = Новый Структура("ОбработатьПоСпецификации", Истина);
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = Неопределено;
	
	Для каждого Ссылка Из СсылкиПотребность Цикл
		
		Попытка
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			Для Сч = 1 По 2 Цикл
				
				ИмяТаблицы = ?(Сч=1, "ВыходныеИзделия", "ПобочныеИзделия");
				Для каждого Строка Из ДокументОбъект[ИмяТаблицы].НайтиСтроки(СтруктураПоиска) Цикл
					
					Остаток = Строка.Количество;
					
					Если НЕ Строка.ЭтапПотребитель.Пустая() Тогда
						ЗаполнитьЗначенияСвойств(СтруктураПоиска1, Строка);
						Для каждого СтрокаОбеспечение Из ОбеспечениеСтарое.НайтиСтроки(СтруктураПоиска1) Цикл
							Зачет = Мин(Остаток, СтрокаОбеспечение.Количество);
							СтрокаОбеспечение.Количество = СтрокаОбеспечение.Количество - Зачет;
							Остаток = Остаток - Зачет;
						КонецЦикла;
					КонецЕсли;
					Если Остаток = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска2, Строка);
					Для каждого СтрокаОбеспечение Из ОбеспечениеНовое.НайтиСтроки(СтруктураПоиска2) Цикл
						
						Зачет = Мин(Остаток, СтрокаОбеспечение.Количество);
						
						Если Строка.Количество > Зачет Тогда
							НоваяСтрока = ДокументОбъект[ИмяТаблицы].Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							НоваяСтрока.Количество = Зачет;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
							Строка.Количество = Строка.Количество - Зачет;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
							
							Если ИмяТаблицы = "ВыходныеИзделия" Тогда
								ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
									НоваяСтрока, Строка, ДокументОбъект.СпособРаспределенияЗатратНаВыходныеИзделия);
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбеспечение, "Назначение, ЭтапПотребитель");
						Иначе
							ЗаполнитьЗначенияСвойств(Строка, СтрокаОбеспечение, "Назначение, ЭтапПотребитель");
						КонецЕсли;
						
						Остаток = Остаток - Зачет;
						Если Остаток = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
			
			ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		Исключение
			
			Событие = НСтр("ru = 'Этап производства';
							|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Формирование этапов';
							|en = 'Generate stages'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(Событие,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Заполняет расход по данным обеспечения
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - содержит:
//            * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//  Режим - Число - 0 => заполнение происходит только по данным обеспечения (расход предварительно очищается),
//                  1 => к расходу добавляются данные из обеспечения,
//                  2 => расход корректируется (синхронизируется) по данным обеспечения.
//
Процедура ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект, Режим = 0) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Ссылка                                             КАК Ссылка,
	|	ОбеспечениеМатериаламиИРаботами.Подразделение       КАК Подразделение,
	|	ОбеспечениеМатериаламиИРаботами.НомерСтроки         КАК НомерСтроки,
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура        КАК Номенклатура,
	|	ОбеспечениеМатериаламиИРаботами.Характеристика      КАК Характеристика,
	|	ОбеспечениеМатериаламиИРаботами.Склад               КАК Склад,
	|	ОбеспечениеМатериаламиИРаботами.Серия               КАК Серия,
	|	ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	ОбеспечениеМатериаламиИРаботами.Упаковка            КАК Упаковка,
	|	ОбеспечениеМатериаламиИРаботами.Количество          КАК Количество,
	|	ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок  КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	&ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
	|ГДЕ
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ОбеспечениеМатериаламиИРаботами.Количество <> 0
	|	И ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка                                    КАК Ссылка,
	|	РасходМатериаловИРабот.Подразделение       КАК Подразделение,
	|	РасходМатериаловИРабот.НомерСтроки         КАК НомерСтроки,
	|	РасходМатериаловИРабот.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасходМатериаловИРабот.Номенклатура        КАК Номенклатура,
	|	РасходМатериаловИРабот.Характеристика      КАК Характеристика,
	|	РасходМатериаловИРабот.Серия               КАК Серия,
	|	РасходМатериаловИРабот.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	РасходМатериаловИРабот.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	РасходМатериаловИРабот.Упаковка            КАК Упаковка,
	|	РасходМатериаловИРабот.ДатаРасхода         КАК ДатаРасхода,
	|	РасходМатериаловИРабот.Количество          КАК Количество,
	|	РасходМатериаловИРабот.КоличествоУпаковок  КАК КоличествоУпаковок
	|ПОМЕСТИТЬ РасходЗаполненныеСерии
	|ИЗ
	|	&РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|ГДЕ
	|	РасходМатериаловИРабот.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И РасходМатериаловИРабот.Количество <> 0
	// Выбираем только правильно заполненные серии
	|	И РасходМатериаловИРабот.СтатусУказанияСерий В (0, 2, 14)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка                           КАК Ссылка,
	|	ЭкономияМатериалов.Подразделение  КАК Подразделение,
	|	ЭкономияМатериалов.Номенклатура   КАК Номенклатура,
	|	ЭкономияМатериалов.Характеристика КАК Характеристика,
	|	ЭкономияМатериалов.Серия          КАК Серия,
	|	ЭкономияМатериалов.Количество     КАК Количество
	|ПОМЕСТИТЬ Экономия
	|ИЗ
	|	&ЭкономияМатериалов КАК ЭкономияМатериалов
	|ГДЕ
	|	ЭкономияМатериалов.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЭкономияМатериалов.Количество <> 0");
	
	Запрос.УстановитьПараметр("Ссылка"                          , Объект.Ссылка);
	Запрос.УстановитьПараметр("Подразделение"                   , Объект.Подразделение);
	Запрос.УстановитьПараметр("ОбеспечениеМатериаламиИРаботами" , Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить());
	Запрос.УстановитьПараметр("РасходМатериаловИРабот"          , 
		Объект.РасходМатериаловИРабот.Выгрузить(?(Режим = 0, Новый Массив, Неопределено)));
	Запрос.УстановитьПараметр("ЭкономияМатериалов"              , Объект.ЭкономияМатериалов.Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если Объект.РасходОднойДатой Тогда
		ДатаОперации = Объект.ДатаРасхода;
	ИначеЕсли Объект.ФактическоеОкончаниеЭтапа <> '000101010000'
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен") Тогда
		ДатаОперации = Объект.ФактическоеОкончаниеЭтапа;
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(Объект).РасходМатериаловИРабот;
	
	Результат = РассчитатьРасходМатериалов(МенеджерВременныхТаблиц, ДатаОперации, Режим = 2);
	
	Объект.РасходМатериаловИРабот.Загрузить(Результат);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

// Заполняет неизрасходованные материалы
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - содержит:
//            * Ссылка - ДокументСсылка.ЭтапПроизводства2_2 - 
//
Процедура ЗаполнитьНеизрасходованныеМатериалы(Объект) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Ссылка                                             КАК Ссылка,
	|	ОбеспечениеМатериаламиИРаботами.Подразделение       КАК Подразделение,
	|	ОбеспечениеМатериаламиИРаботами.НомерСтроки         КАК НомерСтроки,
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура        КАК Номенклатура,
	|	ОбеспечениеМатериаламиИРаботами.Характеристика      КАК Характеристика,
	|	ОбеспечениеМатериаламиИРаботами.Склад               КАК Склад,
	|	ОбеспечениеМатериаламиИРаботами.Серия               КАК Серия,
	|	ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения  КАК ВариантОбеспечения,
	|	ОбеспечениеМатериаламиИРаботами.Назначение          КАК Назначение,
	|	ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	ОбеспечениеМатериаламиИРаботами.Упаковка            КАК Упаковка,
	|	ОбеспечениеМатериаламиИРаботами.Количество          КАК Количество,
	|	ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	ОбеспечениеМатериаламиИРаботами.Отменено            КАК Отменено
	|	
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	&ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	РасходМатериаловИРабот.Подразделение  КАК Подразделение,
	|	РасходМатериаловИРабот.НомерСтроки    КАК НомерСтроки,
	|	РасходМатериаловИРабот.Номенклатура   КАК Номенклатура,
	|	РасходМатериаловИРабот.Характеристика КАК Характеристика,
	|	РасходМатериаловИРабот.Количество     КАК Количество
	|	
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	&РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	*
	|ПОМЕСТИТЬ ЭкономияМатериалов
	|ИЗ
	|	&ЭкономияМатериалов КАК ЭкономияМатериалов
	|");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ОбеспечениеМатериаламиИРаботами", Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить());
	Запрос.УстановитьПараметр("РасходМатериаловИРабот", Объект.РасходМатериаловИРабот.Выгрузить());
	Запрос.УстановитьПараметр("ЭкономияМатериалов", Объект.ЭкономияМатериалов.Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если Объект.РасходОднойДатой Тогда
		ДатаОперации = Объект.ДатаРасхода;
	ИначеЕсли Объект.ФактическоеОкончаниеЭтапа <> '000101010000'
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен") Тогда
		ДатаОперации = Объект.ФактическоеОкончаниеЭтапа;
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Результат = РассчитатьЭкономиюМатериалов(МенеджерВременныхТаблиц, ДатаОперации);
	Объект.ЭкономияМатериалов.Загрузить(Результат);
	
КонецПроцедуры

// Установить действие отгрузить.
// 
// Параметры:
//  Объект - ДокументОбъект.ЭтапПроизводства2_2
//
Процедура УстановитьДействиеОтгрузить(Объект) Экспорт
	
	Если Объект.НеОтгружатьЧастями Тогда
		ДатаОперации = Объект.ДатаОтгрузки;
	Иначе
		ДатаОперации = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтрокиСПустымСкладом = Новый Массив;
	
	Для каждого ДанныеСтроки Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				ИЛИ ДанныеСтроки.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.ДатаОтгрузки = ДатаОперации;
		ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		Если НЕ ДанныеСтроки.Производится
			И НЕ ЗначениеЗаполнено(ДанныеСтроки.Склад) Тогда
			// Склад может быть не заполнен если не было запланировано обеспечение
			// Нужно его заполнить значением по умолчанию.
			СтрокиСПустымСкладом.Добавить(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Заполнение пустых складов
	Если СтрокиСПустымСкладом.Количество() <> 0 Тогда
		
		ТаблицаМатериалов = Новый ТаблицаЗначений;
		ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаМатериалов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		
		Для каждого ДанныеСтроки Из СтрокиСПустымСкладом Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаМатериалов.Добавить(), ДанныеСтроки);
		КонецЦикла;
		
		ПараметрыОбеспечения = ОбеспечениеПроизводства.ПараметрыОбеспеченияСпискаНоменклатуры(ТаблицаМатериалов);
		ПараметрыОбеспечения.Индексы.Добавить("Номенклатура,Характеристика,Подразделение");
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Подразделение");
		Для каждого ДанныеСтроки Из СтрокиСПустымСкладом Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
			СписокСтрок = ПараметрыОбеспечения.НайтиСтроки(СтруктураПоиска);
			ДанныеСтроки.Склад = СписокСтрок[0].Склад;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтменитьДействиеОтгрузить(Объект) Экспорт
	
	Для каждого ДанныеСтроки Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				И НЕ ДанныеСтроки.Отменено Тогда
			ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОтменитьДействиеРезервировать(Объект) Экспорт
	
	Для каждого ДанныеСтроки Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если (ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
					Или ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления)
				И Не ДанныеСтроки.Отменено Тогда
			ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьРасходМатериалов(МенеджерВременныхТаблиц, ДатаРасхода = '00010101', Синхронизировать = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Обеспечение.Ссылка                КАК Ссылка,
	|	Обеспечение.Подразделение         КАК Подразделение,
	|	Обеспечение.Номенклатура          КАК Номенклатура,
	|	Обеспечение.Характеристика        КАК Характеристика,
	|	Обеспечение.Серия                 КАК Серия,
	|	Обеспечение.СтатьяКалькуляции     КАК СтатьяКалькуляции,
	|	Обеспечение.Упаковка			  КАК Упаковка,
	|	СУММА(Обеспечение.Количество)     КАК Количество
	|ИЗ
	|	Обеспечение КАК Обеспечение
	|ГДЕ
	|	Обеспечение.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик =
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	СтатьяКалькуляции,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Экономия.Ссылка            КАК Ссылка,
	|	Экономия.Подразделение     КАК Подразделение,
	|	Экономия.Номенклатура      КАК Номенклатура,
	|	Экономия.Характеристика    КАК Характеристика,
	|	Экономия.Серия             КАК Серия,
	|	СУММА(Экономия.Количество) КАК Количество
	|ИЗ
	|	Экономия КАК Экономия
	|ГДЕ
	|	Экономия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИЛИ ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик =
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|		
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходЗаполненныеСерии.Ссылка              КАК Ссылка,
	|	РасходЗаполненныеСерии.Подразделение       КАК Подразделение,
	|	РасходЗаполненныеСерии.НомерСтроки         КАК НомерСтроки,
	|	РасходЗаполненныеСерии.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасходЗаполненныеСерии.Номенклатура        КАК Номенклатура,
	|	РасходЗаполненныеСерии.Характеристика      КАК Характеристика,
	|	РасходЗаполненныеСерии.Серия               КАК Серия,
	|	РасходЗаполненныеСерии.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	РасходЗаполненныеСерии.СтатьяКалькуляции   КАК СтатьяКалькуляции,
	|	РасходЗаполненныеСерии.Упаковка            КАК Упаковка,
	|	РасходЗаполненныеСерии.ДатаРасхода         КАК ДатаРасхода,
	|	РасходЗаполненныеСерии.Количество          КАК Количество
	|ИЗ
	|	РасходЗаполненныеСерии КАК РасходЗаполненныеСерии
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходЗаполненныеСерии.Ссылка,
	|	РасходЗаполненныеСерии.НомерСтроки
	|";
	
	Результат = Запрос.ВыполнитьПакет();  
	КоличествоПакетов = Результат.Количество();
	
	ОтгруженныеМатериалы				= Результат[КоличествоПакетов - 3].Выгрузить(); // ТаблицаЗначений - 
	ОтгруженныеМатериалы.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика, Серия, СтатьяКалькуляции");
	ОтгруженныеМатериалы.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика, Серия");
	ОтгруженныеМатериалы.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика");
	Если Не Синхронизировать Тогда
		ОтгруженныеМатериалы.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика, СтатьяКалькуляции");
	КонецЕсли;
	
	ЭкономияМатериалов					= Результат[КоличествоПакетов - 2].Выгрузить();
	РасходМатериаловИРаботКОбеспечению	= Результат[КоличествоПакетов - 1].Выгрузить();
	
	РасходМатериаловИРабот = УправлениеПроизводством.ТабличнаяЧастьДокументаЭтапПроизводства("РасходМатериаловИРабот");
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(РасходМатериаловИРабот, РасходМатериаловИРаботКОбеспечению); 
	
	// Обеспечим расход в разрезе серий и статей калькуляции
	ПоляОтбора      = "Ссылка, Подразделение, Номенклатура, Характеристика, Серия, СтатьяКалькуляции";
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	СкорректироватьТаблицы(ОтгруженныеМатериалы, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора);
	
	// Обеспечим экономию в разрезе серий
	ПоляОтбора      = "Ссылка, Подразделение, Номенклатура, Характеристика, Серия";
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	СкорректироватьТаблицы(ОтгруженныеМатериалы, ЭкономияМатериалов, СтруктураОтбора);
	
	// Обеспечим остаток расхода из пустых серий
	ПоляОтбора      = "Ссылка, Подразделение, Номенклатура, Характеристика, СтатьяКалькуляции";
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	СтруктураОтбора.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	СкорректироватьТаблицы(ОтгруженныеМатериалы, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора, ПоляОтбора);
	
	// Обеспечим остатки экономии без учета серий
	ПоляОтбора      = "Ссылка, Подразделение, Номенклатура, Характеристика";
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	СкорректироватьТаблицы(ОтгруженныеМатериалы, ЭкономияМатериалов, СтруктураОтбора);
	
	Если Синхронизировать Тогда
		
		РасходМатериаловИРабот.Индексы.Добавить("НомерСтроки");
		
		// Синхронизируем расход с обеспечением
		СтруктураОтбора = Новый Структура("НомерСтроки");
		СкорректироватьТаблицы(РасходМатериаловИРабот, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора);

		// Актуализируем номера строк
		Для каждого СтрокаТаблицы Из РасходМатериаловИРабот Цикл
			СтрокаТаблицы.НомерСтроки = РасходМатериаловИРабот.Индекс(СтрокаТаблицы) + 1;
		КонецЦикла;
	
	Иначе
	
		// Обеспечим остатки расхода без учета серий
		ПоляОтбора      = "Ссылка, Подразделение, Номенклатура, Характеристика, СтатьяКалькуляции";
		СтруктураОтбора = Новый Структура(ПоляОтбора);
		СкорректироватьТаблицы(ОтгруженныеМатериалы, РасходМатериаловИРаботКОбеспечению, СтруктураОтбора);
	
	КонецЕсли;
	
	// Перенесем остатки обеспечения в расход и перезаполним серии
	Для Каждого Строка Из ОтгруженныеМатериалы Цикл
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РасходМатериаловИРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ДатаРасхода = ДатаРасхода;
		НоваяСтрока.НомерСтроки = РасходМатериаловИРабот.Количество();
		
	КонецЦикла;
	
	// Пересчитаем количество упаковок в расходе
	СтруктураДейтсвий = Новый Структура;
	СтруктураДейтсвий.Вставить(
		"ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(РасходМатериаловИРабот, СтруктураДейтсвий, КэшированныеЗначения);
	
	Возврат РасходМатериаловИРабот;
	
КонецФункции

Функция РассчитатьЭкономиюМатериалов(МенеджерВременныхТаблиц, ДатаОперации = '00010101') Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Расход.Ссылка КАК Ссылка,
	|	Расход.Подразделение КАК Подразделение,
	|	Расход.Номенклатура КАК Номенклатура,
	|	Расход.Характеристика КАК Характеристика,
	|	СУММА(Расход.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаРасход
	|ИЗ
	|	Расход КАК Расход
	|ГДЕ
	|	Расход.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Расход.Количество <> 0
	|	И ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (Расход.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = 
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обеспечение.Ссылка КАК Ссылка,
	|	Обеспечение.Подразделение КАК Подразделение,
	|	Обеспечение.Номенклатура КАК Номенклатура,
	|	Обеспечение.Характеристика КАК Характеристика,
	|	Обеспечение.Склад КАК Склад,
	|	Обеспечение.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА &КонтролироватьПревышениеОбособленногоОбеспечения
	|				И Обеспечение.Назначение = ВЫРАЗИТЬ(Обеспечение.Ссылка КАК Документ.ЭтапПроизводства2_2).Назначение
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ Обеспечение.Назначение
	|	КОНЕЦ КАК Назначение,
	|	Обеспечение.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаОбеспечение
	|ИЗ
	|	Обеспечение КАК Обеспечение
	|ГДЕ
	|	Обеспечение.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Обеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И Обеспечение.Количество <> 0
	|	И ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (Обеспечение.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик =
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|	И НЕ Обеспечение.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбеспечение.Ссылка КАК Ссылка,
	|	ТаблицаОбеспечение.Подразделение КАК Подразделение,
	|	ТаблицаОбеспечение.Номенклатура КАК Номенклатура,
	|	ТаблицаОбеспечение.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаОбеспечение.Количество) - ЕСТЬNULL(МАКСИМУМ(ТаблицаРасход.Количество), 0) КАК Количество
	|ПОМЕСТИТЬ ТаблицаРаспределение
	|ИЗ
	|	ТаблицаОбеспечение КАК ТаблицаОбеспечение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасход КАК ТаблицаРасход
	|		ПО ТаблицаОбеспечение.Ссылка = ТаблицаРасход.Ссылка
	|			И ТаблицаОбеспечение.Подразделение = ТаблицаРасход.Подразделение
	|			И ТаблицаОбеспечение.Номенклатура = ТаблицаРасход.Номенклатура
	|			И ТаблицаОбеспечение.Характеристика = ТаблицаРасход.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбеспечение.Ссылка,
	|	ТаблицаОбеспечение.Подразделение,
	|	ТаблицаОбеспечение.Номенклатура,
	|	ТаблицаОбеспечение.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаОбеспечение.Количество) > ЕСТЬNULL(МАКСИМУМ(ТаблицаРасход.Количество), 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбеспечение.Ссылка КАК Ссылка,
	|	ТаблицаОбеспечение.Подразделение КАК Подразделение,
	|	ТаблицаОбеспечение.Номенклатура КАК Номенклатура,
	|	ТаблицаОбеспечение.Характеристика КАК Характеристика,
	|	ТаблицаОбеспечение.Склад КАК Получатель,
	|	ТаблицаОбеспечение.Назначение КАК Назначение,
	|	ТаблицаОбеспечение.Упаковка КАК Упаковка,
	|	ТаблицаОбеспечение.Количество КАК Количество,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОбеспечение.Склад КАК Справочник.Склады).ЦеховаяКладовая, ЛОЖЬ) КАК ЦеховаяКладовая,
	|	&ШтучныйТоварВМерныхЕдиницах КАК ШтучныйТоварВМерныхЕдиницах,
	|	НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаОбеспечение.Склад КАК Справочник.Склады).ЦеховаяКладовая, ЛОЖЬ)
	|	И &ШтучныйТоварВМерныхЕдиницах КАК НужноОкруглять
	|ИЗ
	|	&ТаблицаОбеспечение КАК ТаблицаОбеспечение
	|ГДЕ
	|	ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1 
	|				 ИСТИНА
	|			  ИЗ
	|			  	 ТаблицаРаспределение КАК ТаблицаРаспределение
	|			  ГДЕ
	|				 ТаблицаРаспределение.Ссылка = ТаблицаОбеспечение.Ссылка
	|				 И ТаблицаРаспределение.Подразделение = ТаблицаОбеспечение.Подразделение
	|				 И ТаблицаРаспределение.Номенклатура = ТаблицаОбеспечение.Номенклатура
	|				 И ТаблицаРаспределение.Характеристика = ТаблицаОбеспечение.Характеристика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаспределение.Ссылка КАК Ссылка,
	|	ТаблицаРаспределение.Подразделение КАК Подразделение,
	|	ТаблицаРаспределение.Номенклатура КАК Номенклатура,
	|	ТаблицаРаспределение.Характеристика КАК Характеристика,
	|	ТаблицаРаспределение.Количество КАК Количество
	|ИЗ
	|	ТаблицаРаспределение КАК ТаблицаРаспределение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ЭкономияМатериалов КАК ЭкономияМатериалов
	|");
	
	ТекстИсходнаяТаблица = "ТаблицаОбеспечение КАК ТаблицаОбеспечение
						   |	%1";
	ТекстИсходнаяТаблица = СтрШаблон(ТекстИсходнаяТаблица, "//&СоединениеШтучныйТоварВМернойЕдинице");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаОбеспечение КАК ТаблицаОбеспечение", ТекстИсходнаяТаблица);
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.Упаковка = Ложь;
	ПараметрыПрименения.КоличествоУпаковок = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Запрос.Текст, "ТаблицаОбеспечение", ПараметрыПрименения);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонтролироватьПревышениеОбособленногоОбеспечения",
		ОбеспечениеПовтИсп.КонтролироватьПревышениеОбособленногоОбеспечения());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ПоляОтбора = "Ссылка, Подразделение, Номенклатура, Характеристика";
	
	ВГраница = МассивРезультатов.ВГраница();	
	ТаблицаОбеспечение = МассивРезультатов[ВГраница - 2].Выгрузить();
	ТаблицаОбеспечение.Индексы.Добавить(ПоляОтбора);
	ТаблицаОбеспечение.Индексы.Добавить(ПоляОтбора + ", ШтучныйТоварВМерныхЕдиницах");
	ТаблицаОбеспечение.Индексы.Добавить(ПоляОтбора + ", ШтучныйТоварВМерныхЕдиницах, ЦеховаяКладовая");
	
	ТаблицаРаспределение = МассивРезультатов[ВГраница - 1].Выгрузить();
	
	ЭкономияМатериалов = УправлениеПроизводством.ТабличнаяЧастьДокументаЭтапПроизводства("ЭкономияМатериалов");
 	ЭкономияМатериалов.Колонки.Добавить("НужноОкруглять", Новый ОписаниеТипов("Булево"));
 	ЭкономияМатериалов.Индексы.Добавить("Ссылка, НомерСтроки");

	Выборка = МассивРезультатов[ВГраница].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЭкономияМатериалов.Добавить(), Выборка);
	КонецЦикла;
	
	ТаблицаКорректировки = ЭкономияМатериалов.Скопировать();
	
	ТаблицаЭкономия = ЭкономияМатериалов.СкопироватьКолонки();
	ТаблицаЭкономия.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика, Получатель, Назначение, Упаковка");
	ТаблицаЭкономия.Индексы.Добавить("Ссылка, Подразделение, Номенклатура, Характеристика, Получатель, Назначение");
	
	КоличествоСтрок = ТаблицаРаспределение.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок Цикл
		
		СтрокаТаблицыРаспределение = ТаблицаРаспределение[ИндексСтроки];
				
		Количество = СтрокаТаблицыРаспределение.Количество;
		КоличествоЦелаяЧасть = Цел(Количество);
		КоличествоДробнаяЧасть = Количество - КоличествоЦелаяЧасть;
		
		СтруктураОтбора = Новый Структура(ПоляОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицыРаспределение);
			
		// 1. КоличествоЦелаяЧасть - ЦеховаяКладовая = ЛОЖЬ И ШтучныйТоварВМерныхЕдиницах = ИСТИНА				
		Если КоличествоЦелаяЧасть > 0 Тогда
			СтруктураОтбора.Вставить("ЦеховаяКладовая", Ложь);
			СтруктураОтбора.Вставить("ШтучныйТоварВМерныхЕдиницах", Истина);
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, КоличествоЦелаяЧасть);
		КонецЕсли;

		// 2. КоличествоДробнаяЧасть - ЦеховаяКладовая = ИСТИНА И ШтучныйТоварВМерныхЕдиницах = ИСТИНА
		Если КоличествоДробнаяЧасть > 0 Тогда
			СтруктураОтбора.Вставить("ЦеховаяКладовая", Истина);
			СтруктураОтбора.Вставить("ШтучныйТоварВМерныхЕдиницах", Истина);
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, КоличествоДробнаяЧасть);
		КонецЕсли;
		
		// 3. КоличествоДробнаяЧасть - ШтучныйТоварВМерныхЕдиницах = ЛОЖЬ
		Если КоличествоДробнаяЧасть > 0 Тогда
			СтруктураОтбора.Удалить("ЦеховаяКладовая");
			СтруктураОтбора.Вставить("ШтучныйТоварВМерныхЕдиницах", Ложь);
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, КоличествоДробнаяЧасть);
		КонецЕсли;		
		
		// 4. Количество
		Количество = КоличествоЦелаяЧасть + КоличествоДробнаяЧасть;
		Если Количество > 0 Тогда
			
			Если СтруктураОтбора.Свойство("ЦеховаяКладовая") Тогда
				СтруктураОтбора.Удалить("ЦеховаяКладовая");
			КонецЕсли;
			
			СтруктураОтбора.Удалить("ШтучныйТоварВМерныхЕдиницах");
			РаспределитьКоличество(ТаблицаОбеспечение, ТаблицаЭкономия, СтруктураОтбора, Количество);
					
		КонецЕсли;		
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	КолонкиГруппировок = "Ссылка, Подразделение, Номенклатура, Характеристика, Получатель, Упаковка, Назначение, НужноОкруглять";
	ПроизводствоСервер.СвернутьТаблицуЗначений(ТаблицаЭкономия, КолонкиГруппировок, "Количество", Истина);
	
	ТаблицаЭкономия.ЗаполнитьЗначения(ДатаОперации, "ДатаОперации");
	
	ПоляОтбора = "Ссылка, Подразделение, Номенклатура, Характеристика, Получатель, Назначение, Упаковка";
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	СкорректироватьТаблицы(ТаблицаЭкономия, ТаблицаКорректировки, СтруктураОтбора);
	
	Если ТаблицаЭкономия.Количество() > 0 И ТаблицаКорректировки.Количество() > 0 Тогда
		ПоляОтбора = "Ссылка, Подразделение, Номенклатура, Характеристика, Получатель, Назначение";
		СтруктураОтбора = Новый Структура(ПоляОтбора);
		СкорректироватьТаблицы(ТаблицаЭкономия, ТаблицаКорректировки, СтруктураОтбора);
	КонецЕсли;
	
	Если ТаблицаКорректировки.Количество() > 0 Тогда
		ПоляОтбора = "Ссылка, НомерСтроки";
		СтруктураОтбора = Новый Структура(ПоляОтбора);
		СкорректироватьТаблицы(ЭкономияМатериалов, ТаблицаКорректировки, СтруктураОтбора);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаЭкономия Цикл
		ЗаполнитьЗначенияСвойств(ЭкономияМатериалов.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	СтруктураДейтсвий = Новый Структура;
	СтруктураДейтсвий.Вставить(
		"ПересчитатьКоличествоУпаковок", ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	НомерСтроки = 0;
	Для каждого СтрокаТаблицы Из ЭкономияМатериалов Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		
		Если СтрокаТаблицы.НужноОкруглять И СтрокаТаблицы.Количество <> Цел(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();	
		КонецЕсли;	
			
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДейтсвий, КэшированныеЗначения);
			
	КонецЦикла;	
	
	ТаблицаЭкономия.Колонки.Удалить("НужноОкруглять");
	
	Возврат ЭкономияМатериалов; 

КонецФункции

#КонецОбласти

#Область Назначения

// Возвращает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура - Этап производства, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		См. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5 Тогда
		
		ШаблонНазначения.Партнер       = Объект.Партнер;
		ШаблонНазначения.Договор       = Объект.Договор;
		ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое2_5;
		
	//++ Устарело_Переработка24
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
		
		ШаблонНазначения.Партнер = Объект.Партнер;
		ШаблонНазначения.Договор = Объект.Договор;
		
		ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22;
		
	//-- Устарело_Переработка24
	КонецЕсли;
	
	ШаблонНазначения.Заказ = Объект.Ссылка;
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Возвращает шаблон для подбора назначения к давальческому производству.
//
// Параметры:
// 		Объект - ДокументОбъект.ЭтапПроизводства2_2, ДанныеФормыСтруктура - Этап производства, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		См. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначенияПоУмолчаниюДляПобочныхИзделий(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ШаблонНазначения.Партнер = Объект.Партнер;
	ШаблонНазначения.Договор = Объект.Договор;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5 Тогда
		ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое2_5;
	Иначе
		ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Назначение по умолчанию для давальческого производства.
// 
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - общие реквизиты производства, либо ссылка на них.
// 
// Возвращаемое значение:
//  СправочникСсылка.Назначения - Назначение по умолчанию для давальческого производства
//
Функция НазначениеПоУмолчаниюДляПобочныхИзделий(Распоряжение) Экспорт
	
	РеквизитыРаспоряжения = Новый Структура;
	РеквизитыРаспоряжения.Вставить("ХозяйственнаяОперация");
	РеквизитыРаспоряжения.Вставить("ТипПроизводственногоПроцесса");
	РеквизитыРаспоряжения.Вставить("Партнер");
	РеквизитыРаспоряжения.Вставить("Договор");
	РеквизитыРаспоряжения.Вставить("НазначениеПродукция");
	РеквизитыРаспоряжения.Вставить("НаправлениеДеятельности");
	
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, РеквизитыРаспоряжения);
	
	Результат = Справочники.Назначения.ПустаяСсылка();
	
	Если РеквизитыРаспоряжения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5
		//++ Устарело_Переработка24
		Или РеквизитыРаспоряжения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
		//-- Устарело_Переработка24
		Или Ложь Тогда
		
		Если РеквизитыРаспоряжения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5
			И РеквизитыРаспоряжения.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			Результат = РеквизитыРаспоряжения.НазначениеПродукция;
		Иначе
			ШаблонНазначенияДавальческогоВыпуска = Документы.ЭтапПроизводства2_2.ШаблонНазначенияПоУмолчаниюДляПобочныхИзделий(РеквизитыРаспоряжения);
			Результат = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначенияДавальческогоВыпуска);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПартияПроизводства

// Поля партии.
// 
// Параметры:
//  РеквизитыШапки - Структура, ДокументОбъект.ЭтапПроизводства2_2, ОбработкаОбъект.РедактированиеПоследовательностиЭтаповПроизводства - реквизиты этапа производства
//  ОсновноеИзделие - Структура
//  ПолучатьИзКэша - Булево - Получать данные распоряжения из кэша
//  ДанныеСпецификации - Структура - см. Справочники.РесурсныеСпецификации.ДанныеСпецификацииКонструктор
//    Используется для расчета таблицы Организаций партии. Передается опционально. 
//    Альтернативно Организации могут быть рассчитаны по таблице с данными этапов (см. ниже) либо прочитаны из ссылок партии.
//  ДанныеЭтапов - Структура - ДанныеПересчета из ДанныеЭтаповДляИзмененияПартий. 
//    Используется для расчета таблицы Организаций партии. Передается опционально.
//    Если не переданы как ДанныеСпецификации так и ДанныеЭтапов, то Организации будут прочитаны из ссылок партии.
// 
// Возвращаемое значение:
//  Структура - Поля партии
//
Функция ПоляПартии(РеквизитыШапки, ОсновноеИзделие, ПолучатьИзКэша = Истина, ДанныеСпецификации = Неопределено, ДанныеЭтапов = Неопределено) Экспорт
	
	Если ПолучатьИзКэша Тогда
		ДанныеЗаполнения = УправлениеПроизводствомПовтИсп.ДанныеЗаполненияНовойПартииПроизводства(
			РеквизитыШапки.Распоряжение,
			РеквизитыШапки.НазначениеПродукция); // ревизиты не меняются в процессе работы, наследуются из заказа на производство
	Иначе
		ДанныеЗаполнения = УправлениеПроизводством.ДанныеЗаполненияНовойПартииПроизводства(
			РеквизитыШапки.Распоряжение,
			РеквизитыШапки.НазначениеПродукция);
	КонецЕсли;
	
	ПоляПартии = Справочники.ПартииПроизводства.ОписаниеПартииПроизводства();
	
	ПоляПартии.Документ = РеквизитыШапки.Распоряжение;
	Если РеквизитыШапки.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		ПоляПартии.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу;
	Иначе
		ПоляПартии.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям;
	КонецЕсли;
	
	ПоляПартии.ТипПроцесса = РеквизитыШапки.ТипПроизводственногоПроцесса;
	ПоляПартии.Спецификация = РеквизитыШапки.Спецификация;
	
	ПоляПартии.Организация = ДанныеЗаполнения.Организация;
	ПоляПартии.ВидДеятельностиНДС = ДанныеЗаполнения.ВидДеятельностиНДС;
	
	ПоляПартии.Назначение = ДанныеЗаполнения.Назначение;
	ПоляПартии.НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
	
	ПоляПартии.ОсновноеИзделиеНоменклатура = ОсновноеИзделие.Номенклатура;
	ПоляПартии.ОсновноеИзделиеХарактеристика = ОсновноеИзделие.Характеристика;
	
	Если ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции")
			И НЕ (ОсновноеИзделие.Свойство("ГруппаПродукции", ПоляПартии.ГруппаПродукции)
				ИЛИ ОсновноеИзделие.Свойство("ГруппаАналитическогоУчета", ПоляПартии.ГруппаПродукции))
			И ЗначениеЗаполнено(ОсновноеИзделие.Номенклатура) Тогда
		ПоляПартии.ГруппаПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновноеИзделие.Номенклатура, "ГруппаАналитическогоУчета");
	КонецЕсли;
	
	Организации = Новый ТаблицаЗначений;
	Организации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ДанныеСпецификации <> Неопределено Тогда
		
		// Организации по данным спецификации
		Для Каждого Этап Из ДанныеСпецификации.Этапы Цикл
			
			Если ЗначениеЗаполнено(Этап.Партнер)
				И ТипЗнч(Этап.Партнер) = Тип("СправочникСсылка.Организации")
				И Этап.Партнер <> ПоляПартии.Организация Тогда
				
				Если Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(Этап.Партнер, ПоляПартии.Организация) Тогда
					
					СтруктураПроверки = Справочники.Организации.СтраныРегистрацииИВалютыРегламентированногоУчетаСовпадают(Этап.Партнер, ПоляПартии.Организация);
					
					Если СтруктураПроверки.ВалютыСовпадают
						И СтруктураПроверки.СтраныСовпадают Тогда
						
						Если Организации.Количество() = 0 Тогда
							
							НоваяСтрока = Организации.Добавить();
							НоваяСтрока.Организация = ПоляПартии.Организация;
							
							НоваяСтрока = Организации.Добавить();
							НоваяСтрока.Организация = Этап.Партнер;
							
						ИначеЕсли Организации.Найти(Этап.Партнер, "Организация") = Неопределено Тогда
							НоваяСтрока = Организации.Добавить();
							НоваяСтрока.Организация = Этап.Партнер;
						КонецЕсли;
						
						ПоляПартии.ВнутренняяПереработка = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПоляПартии.ОтветственноеПодразделение = ДанныеСпецификации.ОтветственноеПодразделение;
		
	Иначе
		
		Если ДанныеЭтапов <> Неопределено Тогда
			
			// Организации по таблице этапов
			Для Каждого Этап Из ДанныеЭтапов.Реквизиты Цикл
				
				Если Этап.Организация <> ПоляПартии.Организация Тогда
					
					Если Организации.Количество() = 0 Тогда
						
						НоваяСтрока = Организации.Добавить();
						НоваяСтрока.Организация = ПоляПартии.Организация;
						
						НоваяСтрока = Организации.Добавить();
						НоваяСтрока.Организация = Этап.Организация;
						
					ИначеЕсли Организации.Найти(Этап.Организация, "Организация") = Неопределено Тогда
						НоваяСтрока = Организации.Добавить();
						НоваяСтрока.Организация = Этап.Организация;
					КонецЕсли;
					
					ПоляПартии.ВнутренняяПереработка = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(РеквизитыШапки.ПартияПроизводства) Тогда
			
			// Организации по ссылкам на этапы
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Этапы.Организация КАК Организация
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК Этапы
				|ГДЕ
				|	Этапы.ПартияПроизводства = &ПартияПроизводства
				|	И Этапы.Организация <> &Организация
				|	И Этапы.Проведен
				|");
			
			Запрос.УстановитьПараметр("ПартияПроизводства", РеквизитыШапки.ПартияПроизводства);
			Запрос.УстановитьПараметр("Организация",        ПоляПартии.Организация);
			Организации = Запрос.Выполнить().Выгрузить();
			
			Если Организации.Количество() > 0 Тогда
				
				ПоляПартии.ВнутренняяПереработка = Истина;
				
				НоваяСтрока = Организации.Добавить();
				НоваяСтрока.Организация = ПоляПартии.Организация;
				
			КонецЕсли;
			
			ПоляПартии.ПометкаУдаления = ПометкаУдаленияПартииПроизводства(РеквизитыШапки.ПартияПроизводства);
			
		КонецЕсли;
		
		ПоляПартии.ОтветственноеПодразделение =
			Справочники.РесурсныеСпецификации.ОтветственноеПодразделение(РеквизитыШапки.Спецификация);
		
	КонецЕсли;
	
	ПоляПартии.Организации = Организации;
	
	Возврат ПоляПартии;
	
КонецФункции

// Выборка этапов для изменения партии (деление, сокращение, отмена) и их проверка
Функция ЭтапыПартииДляИзменения(ПартияПроизводства, ПослеЭтапа, Отказ, СообщенияОтказ)
	
	Таблица = Неопределено;
	
	Если ЗначениеЗаполнено(ПослеЭтапа) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка                                        КАК Ссылка,
			|	ЭтапПроизводства2_2.Номер                                         КАК Номер,
			|	ЕСТЬNULL(НормативныйГрафикЭтаповПроизводства.ДлительностьДоВыпуска, ЭтапПроизводства2_2.ДлительностьДоВыпуска) КАК ДлительностьДоВыпуска,
			|	ЭтапПроизводства2_2.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) КАК ВыполнениеНачато,
			|	ЭтапПроизводства2_2.ПроизводствоНаСтороне
			|		И ЭтапПроизводства2_2.ЗаказПереработчику <> НЕОПРЕДЕЛЕНО      КАК СозданЗаказПереработчику
			|ПОМЕСТИТЬ ВТЭтапы
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
			|	ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафикЭтаповПроизводства.ЭтапПроизводства
			|ГДЕ
			|	ЭтапПроизводства2_2.ПартияПроизводства = &ПартияПроизводства
			|	И ЭтапПроизводства2_2.Проведен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Последователи.Ссылка                   КАК Ссылка,
			|	Последователи.Номер                    КАК Номер,
			|	Последователи.ВыполнениеНачато         КАК ВыполнениеНачато,
			|	Последователи.СозданЗаказПереработчику КАК СозданЗаказПереработчику
			|ИЗ
			|	ВТЭтапы КАК Этап
			|	
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапы КАК Последователи
			|	ПО Этап.ДлительностьДоВыпуска >= Последователи.ДлительностьДоВыпуска
			|ГДЕ
			|	Этап.Ссылка = &Ссылка
			|	И Последователи.Ссылка <> &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	-Последователи.ДлительностьДоВыпуска");
		Запрос.УстановитьПараметр("Ссылка", ПослеЭтапа);
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Вершина = Документы.ЭтапПроизводства2_2.ГрафЦепочкиЭтапов(
			ПартияПроизводства,
			УправлениеПроизводством.НаправлениеОбходаГрафаВперед()).Найти(ПослеЭтапа, "Ссылка");
		Если Вершина <> Неопределено Тогда
			Окружение = УправлениеПроизводством.НайтиОкружениеВершины(Вершина);
			Если Окружение.Количество() <> Таблица.Количество() Тогда
				Отказ = Истина;
				СообщенияОтказ.Добавить(
					НСтр("ru = 'В выбранной точке производственного процесса имеются параллельные маршруты выполнения, действие не может быть выполнено.';
						|en = 'There are parallel execution routes at the selected production process point; the action cannot be completed.'"));
			КонецЕсли;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Если Таблица.Найти(Истина, "ВыполнениеНачато") <> Неопределено Тогда
				Отказ = Истина;
				СообщенияОтказ.Добавить(
					НСтр("ru = 'Выполнение партии после выбранного этапа начато. Для выполнения действия необходимо указать последний незавершенный этап.';
						|en = 'Lot completion after the selected stage is started. To perform the action, specify the last uncompleted stage.'"));
			ИначеЕсли Таблица.Найти(Истина, "СозданЗаказПереработчику") <> Неопределено Тогда
				Отказ = Истина;
				СообщенияОтказ.Добавить(
					СтрШаблон(
						НСтр("ru = 'Для этапа %1 создан заказ переработчику. Для выполнения действия необходимо указать последующий этап.';
							|en = 'A subcontracting purchase order is created for stage %1. To perform the action, specify the next stage.'"),
						Таблица.Найти(Истина, "СозданЗаказПереработчику").Номер));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка                                        КАК Ссылка,
			|	ЭтапПроизводства2_2.Номер                                         КАК Номер,
			|	ЭтапПроизводства2_2.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)) КАК ВыполнениеНачато,
			|	ЭтапПроизводства2_2.ПроизводствоНаСтороне
			|		И ЭтапПроизводства2_2.ЗаказПереработчику <> НЕОПРЕДЕЛЕНО      КАК СозданЗаказПереработчику
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ
			|	ЭтапПроизводства2_2.ПартияПроизводства = &ПартияПроизводства
			|	И ЭтапПроизводства2_2.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -ЭтапПроизводства2_2.ДлительностьДоВыпуска)");
		Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Если Таблица.Количество() = 0 Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				НСтр("ru = 'Отсутствуют этапы партии для выполнения действия.';
					|en = 'There are no lot stages to complete the action.'"));
			
		ИначеЕсли Таблица.Найти(Истина, "ВыполнениеНачато") <> Неопределено Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				НСтр("ru = 'Выполнение партии начато. Для выполнения действия необходимо указать последний незавершенный этап.';
					|en = 'Lot completion is started. To perform the action, specify the last uncompleted stage.'"));
		
		ИначеЕсли Таблица.Найти(Истина, "СозданЗаказПереработчику") <> Неопределено Тогда
			
			Отказ = Истина;
			СообщенияОтказ.Добавить(
				СтрШаблон(
					НСтр("ru = 'Для этапа %1 создан заказ переработчику. Для выполнения действия необходимо указать последующий этап.';
						|en = 'A subcontracting purchase order is created for stage %1. To perform the action, specify the next stage.'"),
					Таблица.Найти(Истина, "СозданЗаказПереработчику").Номер));
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(Отказ ИЛИ Таблица = Неопределено,
		Неопределено,
		Таблица.ВыгрузитьКолонку("Ссылка"));
	
КонецФункции

// Возвращает данные этапов для изменения партий
//
// Параметры:
//  Ссылки - Массив из ДокументСсылка.ЭтапПроизводства2_2
//  ПолучитьДанныеДополнения - Булево
//  ПолучитьДанныеПересчета - Булево
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ДанныеДополнения - Структура -
//   * ДанныеПересчета - Структура - содержит:
//     ** Реквизиты - ТаблицаЗначений - содержит:
//         *** Ссылка - ДокументСсылка - 
//
Функция ДанныеЭтаповДляИзмененияПартий(Ссылки, ПолучитьДанныеДополнения, ПолучитьДанныеПересчета)
	
	// ДанныеДополнения содержат ограниченный перечень полей для дополнения данных спецификации
	// с целью сохранения важных изменений - выбранные варианты обеспечения, склады, исполнители работ и пр.
	// Индексируются по полям, по которым происходит сопоставление с данными спецификации.
	
	// ДанныеПересчета используются для пересчета данных этапов по коэффициенту (в том числе создания новых
	// документов на измененное количество). Содержат полный перечень данных документов и их ТЧ.
	// Индексируются по ссылке.
	// 
	// Таблицы без постфикса используются для сокращения размера партии.
	// Состав строк и их данные (реквизит Количество) изменяются.
	// 
	// Таблицы с постфиксом Исходная используются для увеличения размера партии.
	// Состав строк и их данные не изменяются.
	
	// Обе коллекции содержат общие таблицы с сериями выходных и побочных изделий.
	
	Результат = Новый Структура("ДанныеДополнения, ДанныеПересчета", Неопределено, Неопределено);
	
	Если ПолучитьДанныеДополнения Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЭтапПроизводства2_2.Ссылка КАК Ссылка,
			|	ЭтапПроизводства2_2.Этап КАК Этап,
			|	ЭтапПроизводства2_2.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ЭтапПроизводства2_2.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
			|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПервойОперации, 0) КАК ИдентификаторПервойОперации,
			|	ЕСТЬNULL(РеквизитыДеления.ПерваяОперация, НЕОПРЕДЕЛЕНО) КАК ПерваяОперация,
			|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПоследнейОперации, 0) КАК ИдентификаторПоследнейОперации,
			|	ЕСТЬNULL(РеквизитыДеления.ПоследняяОперация, НЕОПРЕДЕЛЕНО) КАК ПоследняяОперация,
			|	ЕСТЬNULL(РеквизитыДеления.ОтмененоПоследняяОперация, 0) КАК ОтмененоПоследняяОперация,
			|	ЕСТЬNULL(РеквизитыДеления.Предшественник, НЕОПРЕДЕЛЕНО) КАК Предшественник
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
			|	ПО ЭтапПроизводства2_2.Ссылка = РеквизитыДеления.Этап
			|ГДЕ
			|	ЭтапПроизводства2_2.Ссылка В(&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка.Этап КАК Этап,
			|	ОбеспечениеМатериаламиИРаботами.Подразделение КАК ПодразделениеЭтапа,
			|	ОбеспечениеМатериаламиИРаботами.Ссылка КАК Ссылка,
			|	ОбеспечениеМатериаламиИРаботами.НомерСтроки КАК НомерСтроки,
			|	ОбеспечениеМатериаламиИРаботами.КлючСвязиСпецификация КАК КлючСвязи,
			|	ОбеспечениеМатериаламиИРаботами.Номенклатура КАК Номенклатура,
			|	ОбеспечениеМатериаламиИРаботами.Характеристика КАК Характеристика,
			|	ОбеспечениеМатериаламиИРаботами.Серия КАК Серия,
			|	ОбеспечениеМатериаламиИРаботами.Упаковка КАК Упаковка,
			|	ОбеспечениеМатериаламиИРаботами.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ОбеспечениеМатериаламиИРаботами.Количество КАК Количество,
			|	ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения КАК ВариантОбеспечения,
			|	ОбеспечениеМатериаламиИРаботами.Обособленно КАК Обособленно,
			|	ОбеспечениеМатериаламиИРаботами.Назначение КАК Назначение,
			|	ОбеспечениеМатериаламиИРаботами.НазначениеОбеспечения КАК НазначениеОбеспечения,
			|	ОбеспечениеМатериаламиИРаботами.НазначениеОбеспечения
			|		= ОбеспечениеМатериаламиИРаботами.Ссылка.Назначение КАК ОбособлениеПодЭтап,
			|	ОбеспечениеМатериаламиИРаботами.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ОбеспечениеМатериаламиИРаботами.Склад КАК Склад,
			|	ОбеспечениеМатериаламиИРаботами.Производится КАК Производится,
			|	ОбеспечениеМатериаламиИРаботами.Спецификация КАК Спецификация,
			|	ОбеспечениеМатериаламиИРаботами.СтатьяКалькуляции КАК СтатьяКалькуляции,
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
			|		ГДЕ
			|			ВыходныеИзделия.Ссылка В (
			|				ВЫБРАТЬ ПЕРВЫЕ 1
			|					РеквизитыДеления.Предшественник
			|				ИЗ
			|					РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
			|				ГДЕ
			|					РеквизитыДеления.Этап = ОбеспечениеМатериаламиИРаботами.Ссылка)
			|			И ВыходныеИзделия.Номенклатура = ОбеспечениеМатериаламиИРаботами.Номенклатура
			|			И ВыходныеИзделия.Характеристика = ОбеспечениеМатериаламиИРаботами.Характеристика
			|			И (ВыходныеИзделия.Получатель = ОбеспечениеМатериаламиИРаботами.Склад
			|				ИЛИ ВыходныеИзделия.Получатель = ОбеспечениеМатериаламиИРаботами.Подразделение)
			|			И ВыходныеИзделия.Назначение = ОбеспечениеМатериаламиИРаботами.Назначение
			|		) КАК ЭтоНоменклатураДеления
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
			|ГДЕ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка В(&Ссылки)
			|	И НЕ ОбеспечениеМатериаламиИРаботами.Отменено
			|	И ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделия.Ссылка.Этап КАК Этап,
			|	ВыходныеИзделия.Подразделение КАК ПодразделениеЭтапа,
			|	ВыходныеИзделия.Подразделение КАК Подразделение,
			|	ВыходныеИзделия.Ссылка КАК Ссылка,
			|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
			|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
			|	ВыходныеИзделия.Характеристика КАК Характеристика,
			|	ВыходныеИзделия.Получатель КАК Получатель,
			|	ВыходныеИзделия.Назначение КАК Назначение,
			|	ВыходныеИзделия.ЭтапПотребитель КАК ЭтапПотребитель,
			|	ВыходныеИзделия.Произведено КАК Произведено,
			|	ВыходныеИзделия.ДатаПроизводства КАК ДатаПроизводства,
			|	ВыходныеИзделия.Упаковка КАК Упаковка,
			|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ВыходныеИзделия.Количество КАК Количество,
			|	ВыходныеИзделия.Серия КАК Серия,
			|	ВыходныеИзделия.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	ВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
			|	ВыходныеИзделия.ДоляСтоимостиНаЕдиницу КАК ДоляСтоимостиНаЕдиницу,
			|	ВыходныеИзделия.СписатьНаРасходы КАК СписатьНаРасходы,
			|	ВыходныеИзделия.СтатьяРасходов КАК СтатьяРасходов,
			|	ВыходныеИзделия.АналитикаРасходов КАК АналитикаРасходов,
			|	ВыходныеИзделия.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
			//++ Устарело_Переработка24
			|	ВыходныеИзделия.ОформитьОтчетДавальцу КАК ОформитьОтчетДавальцу,
			//-- Устарело_Переработка24
			|	ВыходныеИзделия.ОбработатьПоСпецификации КАК ОбработатьПоСпецификации,
			|	ВыходныеИзделия.Спецификация КАК Спецификация,
			|	ВыходныеИзделия.Ссылка.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
			|		ГДЕ
			|			ОбеспечениеМатериаламиИРаботами.Ссылка В (
			|				ВЫБРАТЬ
			|					РеквизитыДеления.Этап
			|				ИЗ
			|					РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
			|				ГДЕ
			|					РеквизитыДеления.Предшественник = ВыходныеИзделия.Ссылка)
			|			И ОбеспечениеМатериаламиИРаботами.Номенклатура = ВыходныеИзделия.Номенклатура
			|			И ОбеспечениеМатериаламиИРаботами.Характеристика = ВыходныеИзделия.Характеристика
			|			И (ОбеспечениеМатериаламиИРаботами.Склад = ВыходныеИзделия.Получатель
			|				ИЛИ ОбеспечениеМатериаламиИРаботами.Подразделение = ВыходныеИзделия.Получатель)
			|			И ОбеспечениеМатериаламиИРаботами.Назначение = ВыходныеИзделия.Назначение
			|		) КАК ЭтоНоменклатураДеления
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
			|ГДЕ
			|	ВыходныеИзделия.Ссылка В(&Ссылки)
			|	И НЕ ВыходныеИзделия.Отменено
			|	И НЕ ВыходныеИзделия.Произведено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделияСерии.Ссылка.Этап КАК Этап,
			|	ВыходныеИзделияСерии.Ссылка КАК Ссылка,
			|	ВыходныеИзделияСерии.Подразделение КАК Подразделение,
			|	ВыходныеИзделияСерии.НомерСтроки КАК НомерСтроки,
			|	ВыходныеИзделияСерии.Номенклатура КАК Номенклатура,
			|	ВыходныеИзделияСерии.Характеристика КАК Характеристика,
			|	ВыходныеИзделияСерии.Получатель КАК Получатель,
			|	ВыходныеИзделияСерии.Назначение КАК Назначение,
			|	ВыходныеИзделияСерии.Произведено КАК Произведено,
			|	ВыходныеИзделияСерии.ДатаПроизводства КАК ДатаПроизводства,
			|	ВыходныеИзделияСерии.Количество КАК Количество,
			|	ВыходныеИзделияСерии.Серия КАК Серия
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ВыходныеИзделияСерии
			|ГДЕ
			|	ВыходныеИзделияСерии.Ссылка В(&Ссылки)
			|	И НЕ ВыходныеИзделияСерии.Произведено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделия.Ссылка.Этап КАК Этап,
			|	ПобочныеИзделия.Подразделение КАК ПодразделениеЭтапа,
			|	ПобочныеИзделия.Подразделение КАК Подразделение,
			|	ПобочныеИзделия.Ссылка КАК Ссылка,
			|	ПобочныеИзделия.НомерСтроки КАК НомерСтроки,
			|	ПобочныеИзделия.Номенклатура КАК Номенклатура,
			|	ПобочныеИзделия.Характеристика КАК Характеристика,
			|	ПобочныеИзделия.Получатель КАК Получатель,
			|	ПобочныеИзделия.Назначение КАК Назначение,
			|	ПобочныеИзделия.ЭтапПотребитель КАК ЭтапПотребитель,
			|	ПобочныеИзделия.Произведено КАК Произведено,
			|	ПобочныеИзделия.ДатаПроизводства КАК ДатаПроизводства,
			|	ПобочныеИзделия.Количество КАК Количество,
			|	ПобочныеИзделия.Серия КАК Серия,
			|	ПобочныеИзделия.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	ПобочныеИзделия.СписатьНаРасходы КАК СписатьНаРасходы,
			|	ПобочныеИзделия.СтатьяРасходов КАК СтатьяРасходов,
			|	ПобочныеИзделия.АналитикаРасходов КАК АналитикаРасходов,
			|	ПобочныеИзделия.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
			|	ПобочныеИзделия.СтатьяКалькуляции КАК СтатьяКалькуляции,
			//++ Устарело_Переработка24
			|	ПобочныеИзделия.ОформитьОтчетДавальцу КАК ОформитьОтчетДавальцу,
			//-- Устарело_Переработка24
			|	ПобочныеИзделия.ОбработатьПоСпецификации КАК ОбработатьПоСпецификации,
			|	ПобочныеИзделия.Спецификация КАК Спецификация
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
			|ГДЕ
			|	ПобочныеИзделия.Ссылка В(&Ссылки)
			|	И НЕ ИСТИНА В
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА 
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Т
			|		ГДЕ
			|			Т.Ссылка = ПобочныеИзделия.Ссылка
			|			И Т.Номенклатура = ПобочныеИзделия.Номенклатура
			|			И Т.Характеристика = ПобочныеИзделия.Характеристика
			|			И Т.ЭтапПотребитель В (&Ссылки))
			|	И НЕ ПобочныеИзделия.Отменено
			|	И НЕ ПобочныеИзделия.Произведено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделияСерии.Ссылка.Этап КАК Этап,
			|	ПобочныеИзделияСерии.Ссылка КАК Ссылка,
			|	ПобочныеИзделияСерии.Подразделение КАК Подразделение,
			|	ПобочныеИзделияСерии.НомерСтроки КАК НомерСтроки,
			|	ПобочныеИзделияСерии.Номенклатура КАК Номенклатура,
			|	ПобочныеИзделияСерии.Характеристика КАК Характеристика,
			|	ПобочныеИзделияСерии.Получатель КАК Получатель,
			|	ПобочныеИзделияСерии.Назначение КАК Назначение,
			|	ПобочныеИзделияСерии.Произведено КАК Произведено,
			|	ПобочныеИзделияСерии.ДатаПроизводства КАК ДатаПроизводства,
			|	ПобочныеИзделияСерии.ВладелецИзделия КАК ВладелецИзделия,
			|	ПобочныеИзделияСерии.Количество КАК Количество,
			|	ПобочныеИзделияСерии.Серия КАК Серия
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ПобочныеИзделияСерии
			|ГДЕ
			|	ПобочныеИзделияСерии.Ссылка В(&Ссылки)
			|	И НЕ ПобочныеИзделияСерии.Произведено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Трудозатраты.Ссылка.Этап КАК Этап,
			|	Трудозатраты.Подразделение КАК ПодразделениеЭтапа,
			|	Трудозатраты.Ссылка КАК Ссылка,
			|	Трудозатраты.НомерСтроки КАК НомерСтроки,
			|	Трудозатраты.ВидРабот КАК ВидРабот,
			|	Трудозатраты.Исполнитель КАК Исполнитель,
			|	Трудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
			|	Трудозатраты.Количество КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
			|ГДЕ
			|	Трудозатраты.Ссылка В(&Ссылки)
			|	И НЕ Трудозатраты.Отменено
			|	И НЕ Трудозатраты.Выполнено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НаборыМатериаловИРабот.Ссылка.Этап КАК Этап,
			|	НаборыМатериаловИРабот.Ссылка КАК Ссылка,
			|	НаборыМатериаловИРабот.КлючСвязи КАК КлючСвязи,
			|	НаборыМатериаловИРабот.Спецификация КАК Спецификация,
			|	НаборыМатериаловИРабот.КлючСвязиРодитель КАК КлючСвязиРодитель,
			|	НаборыМатериаловИРабот.СпецификацияРодитель КАК СпецификацияРодитель,
			|	НаборыМатериаловИРабот.КоличествоСтрок КАК КоличествоСтрок,
			|	НаборыМатериаловИРабот.КлючСвязиСпецификация КАК КлючСвязиСпецификация
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.НаборыМатериаловИРабот КАК НаборыМатериаловИРабот
			|ГДЕ
			|	НаборыМатериаловИРабот.Ссылка В(&Ссылки)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Этап,
			|	Ссылка,
			|	НомерСтроки
			|");
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		МассивРезультатов = Запрос.ВыполнитьПакет();  
		
		ДанныеДополнения = Новый Структура;
		
		Таблица = МассивРезультатов[0].Выгрузить();
		Таблица.Индексы.Добавить("Этап");
		ДанныеДополнения.Вставить("Реквизиты", Таблица);
		
		Таблица = МассивРезультатов[1].Выгрузить();
		Таблица.Индексы.Добавить("Номенклатура, Характеристика, ПодразделениеЭтапа, Обособленно, Назначение");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ОбеспечениеМатериаламиИРаботами", Таблица);
		
		Таблица = МассивРезультатов[2].Выгрузить();
		Таблица.Индексы.Добавить("Номенклатура, Характеристика, ПодразделениеЭтапа");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ВыходныеИзделия", Таблица);
		
		Таблица = МассивРезультатов[3].Выгрузить();
		Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ВыходныеИзделияСерии", Таблица);
		
		Таблица = МассивРезультатов[4].Выгрузить();
		Таблица.Индексы.Добавить("Номенклатура, Характеристика, ПодразделениеЭтапа");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ПобочныеИзделия", Таблица);
		
		Таблица = МассивРезультатов[5].Выгрузить();
		Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение, ВладелецИзделия");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("ПобочныеИзделияСерии", Таблица);
		
		Таблица = МассивРезультатов[6].Выгрузить();
		Таблица.Индексы.Добавить("ВидРабот, ПодразделениеЭтапа");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("Трудозатраты", Таблица);
		
		Таблица = МассивРезультатов[7].Выгрузить();
		Таблица.Индексы.Добавить("КлючСвязи");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
		ДанныеДополнения.Вставить("НаборыМатериаловИРабот", Таблица);
		
		Результат.ДанныеДополнения = ДанныеДополнения;
		
	КонецЕсли;
	
	Если ПолучитьДанныеПересчета Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПервойОперации, 0) КАК ИдентификаторПервойОперации,
			|	ЕСТЬNULL(РеквизитыДеления.ПерваяОперация, НЕОПРЕДЕЛЕНО) КАК ПерваяОперация,
			|	ЕСТЬNULL(РеквизитыДеления.ИдентификаторПоследнейОперации, 0) КАК ИдентификаторПоследнейОперации,
			|	ЕСТЬNULL(РеквизитыДеления.ПоследняяОперация, НЕОПРЕДЕЛЕНО) КАК ПоследняяОперация,
			|	ЕСТЬNULL(РеквизитыДеления.ОтмененоПоследняяОперация, 0) КАК ОтмененоПоследняяОперация,
			|	ЕСТЬNULL(РеквизитыДеления.Предшественник, НЕОПРЕДЕЛЕНО) КАК Предшественник,
			|	ЭтапПроизводства2_2.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|	ПО ЭтапПроизводства2_2.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
			|	ПО ЭтапПроизводства2_2.Ссылка = РеквизитыДеления.Этап
			|ГДЕ
			|	ЭтапПроизводства2_2.Ссылка В(&Ссылки)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕСТЬNULL(НормативныйГрафик.ДлительностьДоЗапуска, -ЭтапПроизводства2_2.ДлительностьДоВыпуска)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
			|		ГДЕ
			|			ВыходныеИзделия.Ссылка В (
			|				ВЫБРАТЬ ПЕРВЫЕ 1
			|					РеквизитыДеления.Предшественник
			|				ИЗ
			|					РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
			|				ГДЕ
			|					РеквизитыДеления.Этап = ОбеспечениеМатериаламиИРаботами.Ссылка)
			|			И ВыходныеИзделия.Номенклатура = ОбеспечениеМатериаламиИРаботами.Номенклатура
			|			И ВыходныеИзделия.Характеристика = ОбеспечениеМатериаламиИРаботами.Характеристика
			|			И (ВыходныеИзделия.Получатель = ОбеспечениеМатериаламиИРаботами.Склад
			|				ИЛИ ВыходныеИзделия.Получатель = ОбеспечениеМатериаламиИРаботами.Подразделение)
			|			И ВыходныеИзделия.Назначение = ОбеспечениеМатериаламиИРаботами.Назначение
			|		) КАК ЭтоНоменклатураДеления,
			|	ОбеспечениеМатериаламиИРаботами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
			|		ИЛИ ОбеспечениеМатериаламиИРаботами.Отменено КАК ЭтоФакт,
			|	ОбеспечениеМатериаламиИРаботами.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
			|ГДЕ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка В (&Ссылки)
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка КАК Ссылка,
			|	ОбеспечениеМатериаламиИРаботами.Подразделение КАК Подразделение,
			|	ОбеспечениеМатериаламиИРаботами.Номенклатура КАК Номенклатура,
			|	ОбеспечениеМатериаламиИРаботами.Характеристика КАК Характеристика,
			|	СУММА(ОбеспечениеМатериаламиИРаботами.Количество) КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
			|ГДЕ
			|	ОбеспечениеМатериаламиИРаботами.Ссылка В (&Ссылки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбеспечениеМатериаламиИРаботами.Ссылка,
			|	ОбеспечениеМатериаламиИРаботами.Подразделение,
			|	ОбеспечениеМатериаламиИРаботами.Номенклатура,
			|	ОбеспечениеМатериаламиИРаботами.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
			|		ГДЕ
			|			ОбеспечениеМатериаламиИРаботами.Ссылка В (
			|				ВЫБРАТЬ
			|					РеквизитыДеления.Этап
			|				ИЗ
			|					РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК РеквизитыДеления
			|				ГДЕ
			|					РеквизитыДеления.Предшественник = ВыходныеИзделия.Ссылка)
			|			И ОбеспечениеМатериаламиИРаботами.Номенклатура = ВыходныеИзделия.Номенклатура
			|			И ОбеспечениеМатериаламиИРаботами.Характеристика = ВыходныеИзделия.Характеристика
			|			И (ОбеспечениеМатериаламиИРаботами.Склад = ВыходныеИзделия.Получатель
			|				ИЛИ ОбеспечениеМатериаламиИРаботами.Подразделение = ВыходныеИзделия.Получатель)
			|			И ОбеспечениеМатериаламиИРаботами.Назначение = ВыходныеИзделия.Назначение
			|		) КАК ЭтоНоменклатураДеления,
			|	ВыходныеИзделия.Произведено
			|		ИЛИ ВыходныеИзделия.Отменено КАК ЭтоФакт,
			|	ВыходныеИзделия.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
			|ГДЕ
			|	ВыходныеИзделия.Ссылка В (&Ссылки)
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделия.Ссылка КАК Ссылка,
			|	ВыходныеИзделия.Подразделение КАК Подразделение,
			|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
			|	ВыходныеИзделия.Характеристика КАК Характеристика,
			|	СУММА(ВыходныеИзделия.Количество) КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
			|ГДЕ
			|	ВыходныеИзделия.Ссылка В (&Ссылки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВыходныеИзделия.Ссылка,
			|	ВыходныеИзделия.Подразделение,
			|	ВыходныеИзделия.Номенклатура,
			|	ВыходныеИзделия.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделия.Произведено
			|		ИЛИ ПобочныеИзделия.Отменено КАК ЭтоФакт,
			|	ПобочныеИзделия.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
			|ГДЕ
			|	ПобочныеИзделия.Ссылка В (&Ссылки)
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделия.Ссылка КАК Ссылка,
			|	ПобочныеИзделия.Подразделение КАК Подразделение,
			|	ПобочныеИзделия.Номенклатура КАК Номенклатура,
			|	ПобочныеИзделия.Характеристика КАК Характеристика,
			|	СУММА(ПобочныеИзделия.Количество) КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
			|ГДЕ
			|	ПобочныеИзделия.Ссылка В (&Ссылки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПобочныеИзделия.Ссылка,
			|	ПобочныеИзделия.Подразделение,
			|	ПобочныеИзделия.Номенклатура,
			|	ПобочныеИзделия.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Трудозатраты.Выполнено
			|		ИЛИ Трудозатраты.Отменено КАК ЭтоФакт,
			|	Трудозатраты.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
			|ГДЕ
			|	Трудозатраты.Ссылка В (&Ссылки)
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Трудозатраты.Ссылка КАК Ссылка,
			|	Трудозатраты.Подразделение КАК Подразделение,
			|	Трудозатраты.ВидРабот КАК ВидРабот,
			|	СУММА(Трудозатраты.Количество) КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
			|ГДЕ
			|	Трудозатраты.Ссылка В (&Ссылки)
			|
			|СГРУППИРОВАТЬ ПО
			|	Трудозатраты.Ссылка,
			|	Трудозатраты.Подразделение,
			|	Трудозатраты.ВидРабот
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыРабочихЦентров.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК ВидыРабочихЦентров
			|ГДЕ
			|	ВидыРабочихЦентров.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АльтернативныеВидыРабочихЦентров.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК АльтернативныеВидыРабочихЦентров
			|ГДЕ
			|	АльтернативныеВидыРабочихЦентров.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Последователи.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Последователи КАК Последователи
			|ГДЕ
			|	Последователи.Ссылка В (&Ссылки)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НаборыМатериаловИРабот.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.НаборыМатериаловИРабот КАК НаборыМатериаловИРабот
			|ГДЕ
			|	НаборыМатериаловИРабот.Ссылка В (&Ссылки)
			|
			|";
		
		Если НЕ ПолучитьДанныеДополнения Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыходныеИзделияСерии.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделияСерии КАК ВыходныеИзделияСерии
			|ГДЕ
			|	ВыходныеИзделияСерии.Ссылка В (&Ссылки)
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПобочныеИзделияСерии.*
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделияСерии КАК ПобочныеИзделияСерии
			|ГДЕ
			|	ПобочныеИзделияСерии.Ссылка В (&Ссылки)
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки";
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		МассивРезультатов = Запрос.ВыполнитьПакет();  
		
		ДанныеПересчета = Новый Структура;
		ДанныеПересчета.Вставить("Реквизиты", МассивРезультатов[0].Выгрузить());
		ДанныеПересчета.Реквизиты.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ОбеспечениеМатериаламиИРаботами", МассивРезультатов[1].Выгрузить());
		ДанныеПересчета.ОбеспечениеМатериаламиИРаботами.Индексы.Добавить("Ссылка");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(ДанныеПересчета.ОбеспечениеМатериаламиИРаботами);
		
		ДанныеПересчета.Вставить("ОбеспечениеМатериаламиИРаботамиИсходная", МассивРезультатов[1].Выгрузить());
		ДанныеПересчета.ОбеспечениеМатериаламиИРаботамиИсходная.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ОбеспечениеМатериаламиИРаботамиИтоги", МассивРезультатов[2].Выгрузить());
		ДанныеПересчета.ОбеспечениеМатериаламиИРаботамиИтоги.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ВыходныеИзделия", МассивРезультатов[3].Выгрузить());
		ДанныеПересчета.ВыходныеИзделия.Индексы.Добавить("Ссылка");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(ДанныеПересчета.ВыходныеИзделия);
		
		ДанныеПересчета.Вставить("ВыходныеИзделияИсходная", МассивРезультатов[3].Выгрузить());
		ДанныеПересчета.ВыходныеИзделияИсходная.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ВыходныеИзделияИтоги", МассивРезультатов[4].Выгрузить());
		ДанныеПересчета.ВыходныеИзделияИтоги.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ПобочныеИзделия", МассивРезультатов[5].Выгрузить());
		ДанныеПересчета.ПобочныеИзделия.Индексы.Добавить("Ссылка");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(ДанныеПересчета.ПобочныеИзделия);
		
		ДанныеПересчета.Вставить("ПобочныеИзделияИсходная", МассивРезультатов[5].Выгрузить());
		ДанныеПересчета.ПобочныеИзделияИсходная.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ПобочныеИзделияИтоги", МассивРезультатов[6].Выгрузить());
		ДанныеПересчета.ПобочныеИзделияИтоги.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("Трудозатраты", МассивРезультатов[7].Выгрузить());
		ДанныеПересчета.Трудозатраты.Индексы.Добавить("Ссылка");
		ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(ДанныеПересчета.Трудозатраты);
		
		ДанныеПересчета.Вставить("ТрудозатратыИсходная", МассивРезультатов[7].Выгрузить());
		ДанныеПересчета.ТрудозатратыИсходная.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ТрудозатратыИтоги", МассивРезультатов[8].Выгрузить());
		ДанныеПересчета.ТрудозатратыИтоги.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("ВидыРабочихЦентров", МассивРезультатов[9].Выгрузить());
		ДанныеПересчета.ВидыРабочихЦентров.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("АльтернативныеВидыРабочихЦентров", МассивРезультатов[10].Выгрузить());
		ДанныеПересчета.АльтернативныеВидыРабочихЦентров.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("Последователи", МассивРезультатов[11].Выгрузить());
		ДанныеПересчета.Последователи.Индексы.Добавить("Ссылка");
		
		ДанныеПересчета.Вставить("НаборыМатериаловИРабот", МассивРезультатов[12].Выгрузить());
		ДанныеПересчета.НаборыМатериаловИРабот.Индексы.Добавить("Ссылка");
		
		Если ПолучитьДанныеДополнения Тогда
			
			ДанныеПересчета.Вставить("ВыходныеИзделияСерии", Результат.ДанныеДополнения.ВыходныеИзделияСерии);
			ДанныеПересчета.Вставить("ПобочныеИзделияСерии", Результат.ДанныеДополнения.ПобочныеИзделияСерии);
			
		Иначе
			
			Таблица = МассивРезультатов[13].Выгрузить();
			Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
			ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
			ДанныеПересчета.Вставить("ВыходныеИзделияСерии", Таблица);
			
			Таблица = МассивРезультатов[14].Выгрузить();
			Таблица.Индексы.Добавить("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение, ВладелецИзделия");
			ОбщегоНазначенияУТ.ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица);
			ДанныеПересчета.Вставить("ПобочныеИзделияСерии", Таблица);
			
		КонецЕсли;
		
		Результат.ДанныеПересчета = ДанныеПересчета;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РаспределитьДанныеЭтаповНаДанныеСпецификации(ДанныеЭтапов, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии, НазначенияИзделий, ЗаменаИзделия = Неопределено)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	// Этапы
	Если ДанныеСпецификации.Этапы.Колонки.Найти("ДатаОтгрузки") = Неопределено Тогда
		ДанныеСпецификации.Этапы.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
		ДанныеСпецификации.Этапы.Колонки.Добавить("НеОтгружатьЧастями", Новый ОписаниеТипов("Булево"));
		ДанныеСпецификации.Этапы.ЗаполнитьЗначения(Истина, "НеОтгружатьЧастями");
	КонецЕсли;
	
	Для каждого Строка Из ДанныеСпецификации.Этапы Цикл
		НайденнаяСтрока = ДанныеЭтапов.Реквизиты.Найти(Строка.Этап, "Этап");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, "ДатаОтгрузки, НеОтгружатьЧастями");
		КонецЕсли;
	КонецЦикла;
	
	// Материалы
	ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	Индекс = 0;
	СтруктураПоиска1 = Новый Структура("Номенклатура, Характеристика, ПодразделениеЭтапа");
	СтруктураПоиска2 = Новый Структура("Номенклатура, Характеристика, ПодразделениеЭтапа, НазначениеОбеспечения");
	СписокКолонок = "Серия,ВариантОбеспечения,Обособленно,Назначение,НазначениеОбеспечения,Склад,Производится,Спецификация,СтатьяКалькуляции"; // ДатаОтгрузки заполняется условно
	
	Пока Индекс < ДанныеСпецификации.МатериалыИУслуги.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.МатериалыИУслуги[Индекс];
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		ЭтапСпецификации = ДанныеСпецификации.Этапы.Найти(СтрокаРС.Этап, "Этап");
		ЗаполнитьДатуОтгрузки = НЕ ЭтапСпецификации.НеОтгружатьЧастями;
		
		СтруктураПоиска = ?(СтрокаРС.НазначениеОбеспечения = ЭтапСпецификации.Назначение,
			СтруктураПоиска1,
			СтруктураПоиска2);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами, СтруктураПоиска, Истина);
		
		Для Сч = 1 По 2 Цикл
			// При первом проходе используются строки с аналогичным значением флага Произведено, при втором - с отличающимся
			Для каждого СтрокаЭ Из НайденныеСтроки Цикл
				Если СтрокаЭ.Количество = 0
					Или Сч = 1 И СтрокаРС.Производится <> СтрокаЭ.Производится
					Или Сч = 2 И СтрокаРС.Производится = СтрокаЭ.Производится
					Или СтрокаЭ.ЭтоНоменклатураДеления Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
				
				СтрокиРазличаются = СтрокаРС.ВариантОбеспечения <> СтрокаЭ.ВариантОбеспечения
					ИЛИ СтрокаРС.Обособленно <> СтрокаЭ.Обособленно
					ИЛИ СтрокаРС.Назначение <> СтрокаЭ.Назначение
					ИЛИ СтрокаРС.НазначениеОбеспечения <> СтрокаЭ.НазначениеОбеспечения
					ИЛИ СтрокаРС.Склад <> СтрокаЭ.Склад
					ИЛИ СтрокаРС.Производится <> СтрокаЭ.Производится
					ИЛИ СтрокаРС.Спецификация <> СтрокаЭ.Спецификация
					ИЛИ СтрокаРС.СтатьяКалькуляции <> СтрокаЭ.СтатьяКалькуляции
					ИЛИ ЗначениеЗаполнено(СтрокаЭ.Серия)
					ИЛИ ЗаполнитьДатуОтгрузки И ЗначениеЗаполнено(СтрокаЭ.ДатаОтгрузки);
				
				Если СтрокиРазличаются Тогда
					Если СтрокаРС.Количество > КоличествоЗачет Тогда
						
						НоваяСтрока = ДанныеСпецификации.МатериалыИУслуги.Вставить(Индекс-1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
						Если ЗаполнитьДатуОтгрузки Тогда
							НоваяСтрока.ДатаОтгрузки = СтрокаЭ.ДатаОтгрузки;
						КонецЕсли;
						Если СтрокаЭ.ОбособлениеПодЭтап Тогда
							НоваяСтрока.НазначениеОбеспечения = ЭтапСпецификации.Назначение;
							Если НоваяСтрока.Обособленно Тогда
								НоваяСтрока.Назначение = ЭтапСпецификации.Назначение;
							КонецЕсли;
						КонецЕсли;
						НоваяСтрока.Количество = КоличествоЗачет;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
						
						СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРС, СтруктураДействий, КэшированныеЗначения);
						
						Индекс = Индекс + 1;
						
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
						Если ЗаполнитьДатуОтгрузки Тогда
							СтрокаРС.ДатаОтгрузки = СтрокаЭ.ДатаОтгрузки;
						КонецЕсли;
						Если СтрокаЭ.ОбособлениеПодЭтап Тогда
							СтрокаРС.НазначениеОбеспечения = ЭтапСпецификации.Назначение;
							Если СтрокаРС.Обособленно Тогда
								СтрокаРС.Назначение = ЭтапСпецификации.Назначение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
				Остаток = Остаток - КоличествоЗачет;
				Если Остаток = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Выходные изделия
	СтруктураПоискаСерии = Новый Структура("Ссылка, Номенклатура, Характеристика, Получатель, Назначение, Произведено, ДатаПроизводства, Подразделение");
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	
	ТипыСтатья = Новый Массив;
	ТипыСтатья.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТипыСтатья.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	
	Если ДанныеСпецификации.ВыходныеИзделия.Колонки.Найти("Назначение") = Неопределено Тогда
		ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	КонецЕсли;
	Если ДанныеСпецификации.ВыходныеИзделия.Колонки.Найти("ЭтапПотребитель") = Неопределено Тогда
		ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	КонецЕсли;
	Если ДанныеСпецификации.ВыходныеИзделия.Колонки.Найти("Получатель") = Неопределено Тогда
		ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("Получатель", Новый ОписаниеТипов(ТипыПолучатель));
		ДанныеСпецификации.ВыходныеИзделия.ЗагрузитьКолонку(
			ДанныеСпецификации.ВыходныеИзделия.ВыгрузитьКолонку("Склад"), "Получатель");
	КонецЕсли;
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("СписатьНаРасходы", Новый ОписаниеТипов("Булево"));
	
	Если ДанныеСпецификации.ВыходныеИзделия.Колонки.Найти("СтатьяРасходов") = Неопределено Тогда
		ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов(ТипыСтатья));
	КонецЕсли;
	
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("АналитикаАктивовПассивов", Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
	//++ Устарело_Переработка24
	ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("ОформитьОтчетДавальцу", Новый ОписаниеТипов("Булево"));
	//-- Устарело_Переработка24
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	СписокКолонок = "Получатель,Назначение,ЭтапПотребитель,Серия,ДоляСтоимостиНаЕдиницу,СписатьНаРасходы,СтатьяРасходов,
	//++ Устарело_Переработка24
	|ОформитьОтчетДавальцу,
	//-- Устарело_Переработка24
	|АналитикаРасходов,АналитикаАктивовПассивов,ОбработатьПоСпецификации,Спецификация,ДатаПроизводства";
	
	Пока Индекс < ДанныеСпецификации.ВыходныеИзделия.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.ВыходныеИзделия[Индекс];
		СтрокаРС.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка(); // тип статьи по умолчанию
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		Если ЗаменаИзделия <> Неопределено
			И СтрокаРС.Номенклатура = ЗаменаИзделия.НоменклатураНовая
			И СтрокаРС.Характеристика = ЗаменаИзделия.ХарактеристикаНовая Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЗаменаИзделия);
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		КонецЕсли;
		
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ВыходныеИзделия, СтруктураПоиска, Истина);
		Для каждого СтрокаЭ Из НайденныеСтроки Цикл
			
			Если СтрокаЭ.Количество = 0
				ИЛИ СтрокаЭ.ЭтоНоменклатураДеления Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
			
			Если НазначенияИзделий.Количество() <> 0 Тогда
				НайденнаяСтрока = НазначенияИзделий.Найти(СтрокаЭ.Назначение, "Назначение");
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				Иначе
					КоличествоЗачет = Мин(КоличествоЗачет, НайденнаяСтрока.Количество);
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - КоличествоЗачет;
					Если НайденнаяСтрока.Количество = 0 Тогда
						НазначенияИзделий.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокиРазличаются = СтрокаРС.Получатель <> СтрокаЭ.Получатель
				ИЛИ СтрокаРС.ОбработатьПоСпецификации <> СтрокаЭ.ОбработатьПоСпецификации
				ИЛИ СтрокаРС.Спецификация <> СтрокаЭ.Спецификация
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Назначение)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.ЭтапПотребитель)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Серия)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.ДатаПроизводства)
				//++ Устарело_Переработка24
				ИЛИ СтрокаЭ.ОформитьОтчетДавальцу
				//-- Устарело_Переработка24
				ИЛИ СтрокаЭ.СписатьНаРасходы;
			
			Если СтрокиРазличаются Тогда
				Если СтрокаРС.Количество > КоличествоЗачет Тогда
				
					НоваяСтрока = ДанныеСпецификации.ВыходныеИзделия.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
					НоваяСтрока.Количество = КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРС, СтруктураДействий, КэшированныеЗначения);
					
					ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
						НоваяСтрока, СтрокаРС, СтрокаЭ.СпособРаспределенияЗатратНаВыходныеИзделия);
					
					Индекс = Индекс + 1;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЭ.СтатусУказанияСерий <> 0 Тогда
				
				ОстатокСерии = КоличествоЗачет;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаЭ);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ВыходныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаС Из НайденныеСтрокиСерии Цикл
					
					Если СтрокаС.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ВыходныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаС,, "Количество,Этап");
					НоваяСтрока.Количество = Мин(ОстатокСерии, СтрокаС.Количество);
					НоваяСтрока.Этап = СтрокаРС.Этап;
					
					СтрокаС.Количество = СтрокаС.Количество - НоваяСтрока.Количество;
					
					ОстатокСерии = ОстатокСерии - НоваяСтрока.Количество;
					Если ОстатокСерии = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
			Остаток = Остаток - КоличествоЗачет;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Побочные изделия
	Если ДанныеСпецификации.ВозвратныеОтходы.Колонки.Найти("Назначение") = Неопределено Тогда
		ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	КонецЕсли;
	Если ДанныеСпецификации.ВозвратныеОтходы.Колонки.Найти("ЭтапПотребитель") = Неопределено Тогда
		ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	КонецЕсли;
	Если ДанныеСпецификации.ВозвратныеОтходы.Колонки.Найти("Получатель") = Неопределено Тогда
		ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("Получатель", Новый ОписаниеТипов(ТипыПолучатель));
		ДанныеСпецификации.ВозвратныеОтходы.ЗагрузитьКолонку(
			ДанныеСпецификации.ВозвратныеОтходы.ВыгрузитьКолонку("Склад"), "Получатель");
	КонецЕсли;
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("СписатьНаРасходы", Новый ОписаниеТипов("Булево"));
	
	Если ДанныеСпецификации.ВозвратныеОтходы.Колонки.Найти("СтатьяРасходов") = Неопределено Тогда
		ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов(ТипыСтатья));
	КонецЕсли;
	
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("АналитикаАктивовПассивов", Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
	//++ Устарело_Переработка24
	ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("ОформитьОтчетДавальцу", Новый ОписаниеТипов("Булево"));
	//-- Устарело_Переработка24
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ПодразделениеЭтапа");
	СписокКолонок =
		"Получатель,Назначение,ЭтапПотребитель,Серия,СтатьяКалькуляции,СписатьНаРасходы,СтатьяРасходов,АналитикаРасходов,
		//++ Устарело_Переработка24
		|ОформитьОтчетДавальцу,
		//-- Устарело_Переработка24
		|АналитикаАктивовПассивов,ОбработатьПоСпецификации,Спецификация,ДатаПроизводства";
	
	Пока Индекс < ДанныеСпецификации.ВозвратныеОтходы.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.ВозвратныеОтходы[Индекс];
		СтрокаРС.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка(); // тип статьи по умолчанию
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ПобочныеИзделия, СтруктураПоиска, Истина);
		
		Для каждого СтрокаЭ Из НайденныеСтроки Цикл
			
			Если СтрокаЭ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
			
			СтрокиРазличаются = СтрокаРС.Получатель <> СтрокаЭ.Получатель
				ИЛИ СтрокаРС.СтатьяКалькуляции <> СтрокаЭ.СтатьяКалькуляции
				ИЛИ СтрокаРС.ОбработатьПоСпецификации <> СтрокаЭ.ОбработатьПоСпецификации
				ИЛИ СтрокаРС.Спецификация <> СтрокаЭ.Спецификация
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Назначение)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.ЭтапПотребитель)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Серия)
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.ДатаПроизводства)
				//++ Устарело_Переработка24
				ИЛИ СтрокаЭ.ОформитьОтчетДавальцу
				//-- Устарело_Переработка24
				ИЛИ СтрокаЭ.СписатьНаРасходы;
			
			Если СтрокиРазличаются Тогда
				Если СтрокаРС.Количество > КоличествоЗачет Тогда
					
					НоваяСтрока = ДанныеСпецификации.ВозвратныеОтходы.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
					НоваяСтрока.Количество = КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаРС, СтруктураДействий, КэшированныеЗначения);
					
					Индекс = Индекс + 1;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЭ.СтатусУказанияСерий <> 0 Тогда
				
				ОстатокСерии = КоличествоЗачет;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаЭ);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ПобочныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаС Из НайденныеСтрокиСерии Цикл
					
					Если СтрокаС.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ПобочныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаС,, "Количество, Этап");
					НоваяСтрока.Количество = Мин(ОстатокСерии, СтрокаС.Количество);
					НоваяСтрока.Этап = СтрокаРС.Этап;
					
					СтрокаС.Количество = СтрокаС.Количество - НоваяСтрока.Количество;
					
					ОстатокСерии = ОстатокСерии - НоваяСтрока.Количество;
					Если ОстатокСерии = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
			Остаток = Остаток - КоличествоЗачет;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Трудозатраты
	ТипыИсполнитель = Новый Массив;
	ТипыИсполнитель.Добавить(Тип("СправочникСсылка.Бригады"));
	ТипыИсполнитель.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ДанныеСпецификации.Трудозатраты.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов(ТипыИсполнитель));
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("ВидРабот, ПодразделениеЭтапа");
	СписокКолонок = "Исполнитель,СтатьяКалькуляции";
		
	Пока Индекс < ДанныеСпецификации.Трудозатраты.Количество() Цикл
		
		СтрокаРС = ДанныеСпецификации.Трудозатраты[Индекс];
		Индекс = Индекс + 1;
		
		Если СтрокаРС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Остаток = СтрокаРС.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРС);
		НайденныеСтроки = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.Трудозатраты, СтруктураПоиска, Истина);
		
		Для каждого СтрокаЭ Из НайденныеСтроки Цикл
			
			Если СтрокаЭ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗачет = Мин(Остаток, СтрокаЭ.Количество);
			
			СтрокиРазличаются = СтрокаРС.СтатьяКалькуляции <> СтрокаЭ.СтатьяКалькуляции
				ИЛИ ЗначениеЗаполнено(СтрокаЭ.Исполнитель);
			
			Если СтрокиРазличаются Тогда
				Если СтрокаРС.Количество > КоличествоЗачет Тогда
					
					НоваяСтрока = ДанныеСпецификации.Трудозатраты.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРС);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭ, СписокКолонок);
					НоваяСтрока.Количество = КоличествоЗачет;
					
					СтрокаРС.Количество = СтрокаРС.Количество - КоличествоЗачет;
					
					Индекс = Индекс + 1;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаРС, СтрокаЭ, СписокКолонок);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаЭ.Количество = СтрокаЭ.Количество - КоличествоЗачет;
			Остаток = Остаток - КоличествоЗачет;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Свертка серий
	Если ВыходныеИзделияСерии.Количество() <> 0 Тогда
		
		Колонки = "";
		Для каждого Колонка Из ВыходныеИзделияСерии.Колонки Цикл
			Если Колонка.Имя <> "Количество" Тогда
				Колонки = Колонки + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		Колонки = Колонки + "Этап";
		
		ВыходныеИзделияСерии.Свернуть(Колонки, "Количество");
		
	КонецЕсли;
	Если ПобочныеИзделияСерии.Количество() <> 0 Тогда
		
		Колонки = "";
		Для каждого Колонка Из ПобочныеИзделияСерии.Колонки Цикл
			Если Колонка.Имя <> "Количество" Тогда
				Колонки = Колонки + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		Колонки = Колонки + "Этап";
		
		ПобочныеИзделияСерии.Свернуть(Колонки, "Количество");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНоменклатуруДеленияВДанныеСпецификации(ДанныеЭтапов, ДанныеСпецификации, Дробь)
	
	СтруктураПоискаДанныеЭтапов = Новый Структура("ЭтоНоменклатураДеления", Истина);
	СтруктураПоискаДанныеСпецификации = Новый Структура("Номенклатура, Характеристика");
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	// Материалы
	
	// Если между этапами настроен выпуск-потребление номенклатуры (т.е. это и есть "номенклатура деления"),
	// то необходимо удалить соответствующие строки в данных спецификации для исключения задвоения строк
	НайденныеСтроки = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоискаДанныеЭтапов);
	Для каждого СтрокаДанныеЭтапа Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаДанныеСпецификации, СтрокаДанныеЭтапа);
		Для каждого СтрокаДанныеСпецификации Из ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоискаДанныеСпецификации) Цикл
			ДанныеСпецификации.МатериалыИУслуги.Удалить(СтрокаДанныеСпецификации);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаДанныеЭтапа Из НайденныеСтроки Цикл
		НоваяСтрока = ДанныеСпецификации.МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеЭтапа);
		
		Если Не(Дробь.Числитель = 1 И Дробь.Знаменатель = 1) Тогда
			НоваяСтрока.Количество = НоваяСтрока.Количество * Дробь.Числитель / Дробь.Знаменатель;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
		ЭтапСпецификации = ДанныеСпецификации.Этапы.Найти(СтрокаДанныеЭтапа.Этап, "Этап");
		Если ЭтапСпецификации <> Неопределено Тогда
			Если НЕ ЭтапСпецификации.НеОтгружатьЧастями Тогда
				НоваяСтрока.ДатаОтгрузки = СтрокаДанныеЭтапа.ДатаОтгрузки;
			КонецЕсли;
			Если СтрокаДанныеЭтапа.ОбособлениеПодЭтап Тогда
				НоваяСтрока.НазначениеОбеспечения = ЭтапСпецификации.Назначение;
				Если НоваяСтрока.Обособленно Тогда
					НоваяСтрока.Назначение = ЭтапСпецификации.Назначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Выходные изделия
	
	// Если между этапами настроен выпуск-потребление номенклатуры (т.е. это и есть "номенклатура деления"),
	// то необходимо удалить соответствующие строки в данных спецификации для исключения задвоения строк
	НайденныеСтроки = ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоискаДанныеЭтапов);
	Для каждого СтрокаДанныеЭтапа Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаДанныеСпецификации, СтрокаДанныеЭтапа);
		Для каждого СтрокаДанныеСпецификации Из ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураПоискаДанныеСпецификации) Цикл
			ДанныеСпецификации.ВозвратныеОтходы.Удалить(СтрокаДанныеСпецификации);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаДанныеЭтапа Из НайденныеСтроки Цикл
		НоваяСтрока = ДанныеСпецификации.ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеЭтапа);
		
		Если Не(Дробь.Числитель = 1 И Дробь.Знаменатель = 1) Тогда
			НоваяСтрока.Количество = НоваяСтрока.Количество * Дробь.Числитель / Дробь.Знаменатель;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИзменитьРазмерПартииВЭтапахПараметры()
	
	Результат = Новый Структура;
	Результат.Вставить("РезервироватьМатериалы", Ложь);
	Результат.Вставить("ЗаменятьМатериалыНаАналоги", Ложь);
	Результат.Вставить("ПараметрыПересчетаПоКоэффициенту", Неопределено); // см. ПересчитатьПоКоэффициентуПараметры
	Результат.Вставить("ПересчитатьНоменклатуруДеленияВДанныхСпецификации", Ложь);
	Результат.Вставить("ИзменятьСоставДокументов", Ложь); // Используется при "ПересчитатьПоКоэффициенту = Ложь"
	Результат.Вставить("ЭтапСпецификации", Неопределено); // Используется при "ИзменятьСоставДокументов = Истина", определяет первый этап РС, начиная с которого нужно заполнить (создать) документы
	Результат.Вставить("ОтменитьИзделиеВЗаказе", Ложь);
	Результат.Вставить("ПричинаОтменыИзделия", Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция ИзменитьРазмерПартииВЭтапах(ПараметрыПартии, Ссылки, ДанныеЭтапов, ПересчитатьПоКоэффициенту, Назначения, ПараметрыОтказ, ПараметрыИзменения)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтапСоздан", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	Результат.Вставить("ЭтапУдален", Новый Массив);
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("ЗаказИзменен", Новый Массив);
	
	ДанныеПартии = ПараметрыПартии.ДанныеПартии;
	РазмерПартии = ПараметрыПартии.РазмерПартии;
	
	СсылкиКПроведению = Новый Массив; // Ссылки на документы для пакетного формирования движений
	
	Если ПересчитатьПоКоэффициенту Тогда
		
		#Область ПересчетПоКоэффициенту
		
		// При разветвлении документов будет оставлен только один документ для каждого этапа РС
		Запрос = Новый Запрос( 
			"ВЫБРАТЬ
			|	ЭтапПроизводства.Этап       КАК Этап,
			|	ЭтапПроизводства.Ссылка     КАК Ссылка,
			|	ЭтапПроизводства.Назначение КАК Назначение
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
			|ГДЕ
			|	ЭтапПроизводства.Ссылка В (&Ссылки)
			|	И ЭтапПроизводства.Этап В
			|		(ВЫБРАТЬ
			|			Т.Этап КАК Этап
			|		ИЗ
			|			Документ.ЭтапПроизводства2_2 КАК Т
			|		ГДЕ
			|			Т.Ссылка В (&Ссылки)
			|			И Т.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
			|		СГРУППИРОВАТЬ ПО
			|			Т.Этап
			|		ИМЕЮЩИЕ
			|			КОЛИЧЕСТВО(Т.Ссылка) > 1)
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка
			|ИТОГИ ПО
			|	Этап");
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		ВыборкаСсылкиУдалить = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктураПоиска = Новый Структура("ЭтапПотребитель");
		Пока ВыборкаСсылкиУдалить.Следующий() Цикл
			
			Ссылка = Документы.ЭтапПроизводства2_2.ПустаяСсылка();
			Назначение = Справочники.Назначения.ПустаяСсылка();
			
			Выборка = ВыборкаСсылкиУдалить.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Ссылка.Пустая() Тогда
					Ссылка = Выборка.Ссылка; // Первый документ в выборке не удаляется
					Назначение = Выборка.Назначение;
					Продолжить;
				КонецЕсли;
				
				// Корректировка данных этапов - исключение и замена ссылок на удаляемый этап
				НайденнаяСтрока = ДанныеЭтапов.Реквизиты.Найти(Выборка.Ссылка, "Ссылка");
				Если НайденнаяСтрока <> Неопределено Тогда
					ДанныеЭтапов.Реквизиты.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
				СтруктураПоиска.ЭтапПотребитель = Выборка.Ссылка;
				Для каждого Строка Из ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
					Строка.ЭтапПотребитель = Ссылка;
					Строка.Назначение = Назначение;
				КонецЦикла;
				Для каждого Строка Из ДанныеЭтапов.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
					Строка.ЭтапПотребитель = Ссылка;
					Строка.Назначение = Назначение;
				КонецЦикла;
				
				// Удаление документа
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				
				// Обновление коллекций
				Результат.ЭтапУдален.Добавить(Выборка.Ссылка);
				
			КонецЦикла;
			
		КонецЦикла;
	
		Для каждого Этап Из ДанныеЭтапов.Реквизиты Цикл
			
			Если Этап.КоличествоУпаковокПлан = 0 Тогда
				Коэффициент = 1;
			Иначе
				Если Этап.УпаковкаПлан = РазмерПартии.Упаковка Тогда
					Коэффициент = РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
				Иначе
					КоэффициентПартии = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
						РазмерПартии.Упаковка,
						ДанныеПартии.ОсновноеИзделиеНоменклатура);
					КоэффициентЭтапа = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
						Этап.УпаковкаПлан,
						ДанныеПартии.ОсновноеИзделиеНоменклатура);
					Коэффициент = КоэффициентПартии / КоэффициентЭтапа
						* РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
				КонецЕсли;
			КонецЕсли;
			
			ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(
				ДанныеЭтапов, Этап.Ссылка, Коэффициент, ПараметрыИзменения.ПараметрыПересчетаПоКоэффициенту);
			
			РеквизитыШапки = Новый Структура;
			РеквизитыШапки.Вставить("КоличествоУпаковокПлан", РазмерПартии.КоличествоУпаковок);
			РеквизитыШапки.Вставить("УпаковкаПлан", РазмерПартии.Упаковка);
			РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент, 3));
			ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
			
			ДокументОбъект = Этап.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьРежимПакетногоФормирования();
			
			Если Результат.ЭтапУдален.ВГраница() <> -1
				И ДокументОбъект.Последователи.Количество() > 0 Тогда
				
				Последователи = Новый Массив;
				Для каждого Строка Из ДокументОбъект.Последователи Цикл
					Если Результат.ЭтапУдален.Найти(Строка.Этап) = Неопределено
						И Строка.ТипСвязи = ТипСвязиПоследователь() Тогда
						Последователи.Добавить(Строка.Этап);
					КонецЕсли;
				КонецЦикла;
				
				ЗначенияЗаполнения.Вставить("Последователи", Последователи);
				
			КонецЕсли;
			
			ДокументОбъект.Заполнить(ЗначенияЗаполнения);
			
			Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
			КонецЕсли;
			
			ПровестиСПонижениемСтатуса(ДокументОбъект);
			
			Результат.ЭтапИзменен.Добавить(ДокументОбъект.Ссылка);
			СсылкиКПроведению.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
		#КонецОбласти
		
	Иначе
		
		#Область ЗаполнитьПоСпецификации
		
		// Получение и проверка данных спецификации
		ДанныеПартииКопия = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПартии);
		ДанныеПартииКопия.Количество = РазмерПартии.Количество;
		ДанныеСпецификации = ПолучитьНормативыПоСпецификации(ДанныеПартииКопия, Ложь);
		Если ДанныеСпецификации = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Справочники.РесурсныеСпецификации.ПроверитьРазмерПартии(
			ДанныеСпецификации, РазмерПартии.Количество, ПараметрыОтказ.Отказ, ПараметрыОтказ.Сообщения);
		Если ПараметрыОтказ.Отказ Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если ПараметрыИзменения.ИзменятьСоставДокументов Тогда
			// Сопоставление элементов справочника и документов
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ЭтапыПроизводства.Ссылка КАК СсылкаСправочник,
				|	МАКСИМУМ(ЕСТЬNULL(ДокументПоСсылке.Ссылка, ДокументПоНаименованию.Ссылка)) КАК СсылкаДокумент
				|ПОМЕСТИТЬ ВТСсылки
				|ИЗ
				|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДокументПоСсылке
				|	ПО ДокументПоСсылке.Ссылка В (&Ссылки)
				|		И ЭтапыПроизводства.Ссылка = ДокументПоСсылке.Этап
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ДокументПоНаименованию
				|	ПО ДокументПоНаименованию.Ссылка В (&Ссылки)
				|		И ЭтапыПроизводства.Наименование = ДокументПоНаименованию.НаименованиеЭтапа
				|		И ЭтапыПроизводства.Подразделение = ДокументПоНаименованию.Подразделение
				|ГДЕ
				|	ЭтапыПроизводства.Владелец = &Спецификация
				|	И НЕ ЭтапыПроизводства.ПометкаУдаления
				|СГРУППИРОВАТЬ ПО
				|	ЭтапыПроизводства.Ссылка
				|ИМЕЮЩИЕ
				|	МАКСИМУМ(ЕСТЬNULL(ДокументПоСсылке.Ссылка, ДокументПоНаименованию.Ссылка)) ЕСТЬ НЕ NULL
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Ссылки.СсылкаСправочник ЕСТЬ НЕ NULL
				|			И ИСТИНА НЕ В (
				|				ВЫБРАТЬ ПЕРВЫЕ 1
				|					ИСТИНА
				|				ИЗ
				|					ВТСсылки КАК Т
				|				ГДЕ
				|					Т.СсылкаДокумент = Ссылки.СсылкаДокумент
				|					И Т.СсылкаСправочник <> Ссылки.СсылкаСправочник)
				|			ТОГДА Ссылки.СсылкаСправочник
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
				|	КОНЕЦ КАК СсылкаСправочник,
				|	ЭтапПроизводства.Ссылка КАК СсылкаДокумент,
				|	ЭтапПроизводства.Назначение КАК Назначение,
				|	ЭтапПроизводства.НомерПартииЗапуска КАК НомерПартииЗапуска,
				|	ЭтапПроизводства.НомерЭтапаВПартииЗапуска КАК НомерЭтапаВПартииЗапуска,
				|	ЭтапПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат) КАК Начат,
				|	ЭтапПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) КАК Завершен,
				|	ЭтапПроизводства.ПроизводствоНаСтороне
				|		И ЭтапПроизводства.ЗаказПереработчику <> НЕОПРЕДЕЛЕНО КАК СозданЗаказПереработчику
				|ИЗ
				|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТСсылки КАК Ссылки
				|	ПО ЭтапПроизводства.Ссылка = Ссылки.СсылкаДокумент
				|ГДЕ
				|	ЭтапПроизводства.Ссылка В (&Ссылки)");
			Запрос.УстановитьПараметр("Спецификация", ДанныеПартии.Спецификация);
			Запрос.УстановитьПараметр("Ссылки", Ссылки);
			
			СоответствиеСсылок = Запрос.Выполнить().Выгрузить();
			СоответствиеСсылок.Индексы.Добавить("СсылкаСправочник");
			СоответствиеСсылок.Индексы.Добавить("СсылкаДокумент");
			
			// Очистка данных спецификации
			Если ЗначениеЗаполнено(ПараметрыИзменения.ЭтапСпецификации) Тогда
				НайденнаяСтрока = ДанныеСпецификации.Этапы.Найти(ПараметрыИзменения.ЭтапСпецификации, "Этап");
				Если НайденнаяСтрока <> Неопределено Тогда
					Этапы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыИзменения.ЭтапСпецификации);
					Очередь = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НайденнаяСтрока.НомерСледующегоЭтапа);
					
					СтруктураПоиска = Новый Структура("НомерЭтапа");
					Индекс = 0;
					Пока Индекс <= Очередь.ВГраница() Цикл
						СтруктураПоиска.НомерЭтапа = Очередь[Индекс];
						Для каждого НайденнаяСтрока Из ДанныеСпецификации.Этапы.НайтиСтроки(СтруктураПоиска) Цикл
							Если Очередь.Найти(НайденнаяСтрока.НомерСледующегоЭтапа) = Неопределено Тогда
								Очередь.Добавить(НайденнаяСтрока.НомерСледующегоЭтапа);
							КонецЕсли;
							Этапы.Добавить(НайденнаяСтрока.Этап)
						КонецЦикла;
						Индекс = Индекс + 1;
					КонецЦикла;
					
					СтруктураПоиска = Новый Структура("Этап");
					Таблицы = СтрРазделить("МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы,ВидыРабочихЦентров,АльтернативныеВидыРабочихЦентров,Трудозатраты", ",");
					Для Индекс = -ДанныеСпецификации.Этапы.Количество()+1 По 0 Цикл
						ДанныеЭтапа = ДанныеСпецификации.Этапы[-Индекс];
						Если Этапы.Найти(ДанныеЭтапа.Этап) = Неопределено Тогда
							СтруктураПоиска.Этап = ДанныеЭтапа.Этап;
							Для каждого Таблица Из Таблицы Цикл
								Для каждого СтрокаУдалить Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоиска) Цикл
									ДанныеСпецификации[Таблица].Удалить(СтрокаУдалить)
								КонецЦикла;
							КонецЦикла;
							ДанныеСпецификации.Этапы.Удалить(ДанныеЭтапа);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Сопоставление элементов справочника и документов
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ЭтапСправочник.Ссылка         КАК СсылкаСправочник,
				|	МАКСИМУМ(ЭтапДокумент.Ссылка) КАК СсылкаДокумент
				|ПОМЕСТИТЬ ВТСсылки
				|ИЗ
				|	Справочник.ЭтапыПроизводства КАК ЭтапСправочник
				|	
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапДокумент
				|	ПО ЭтапСправочник.Ссылка = ЭтапДокумент.Этап
				|ГДЕ
				|	ЭтапСправочник.Владелец = &Спецификация
				|	И НЕ ЭтапСправочник.ПометкаУдаления
				|	И ЭтапДокумент.Ссылка В (&Ссылки)
				|СГРУППИРОВАТЬ ПО
				|	ЭтапСправочник.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Ссылки.СсылкаСправочник КАК СсылкаСправочник,
				|	Ссылки.СсылкаДокумент КАК СсылкаДокумент,
				|	Ссылки.СсылкаДокумент.Назначение КАК Назначение,
				|	Ссылки.СсылкаДокумент.НомерПартииЗапуска КАК НомерПартииЗапуска,
				|	Ссылки.СсылкаДокумент.НомерЭтапаВПартииЗапуска КАК НомерЭтапаВПартииЗапуска,
				|	Ссылки.СсылкаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат) КАК Начат,
				|	Ссылки.СсылкаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен) КАК Завершен,
				|	Ссылки.СсылкаДокумент.ПроизводствоНаСтороне
				|		И Ссылки.СсылкаДокумент.ЗаказПереработчику <> НЕОПРЕДЕЛЕНО КАК СозданЗаказПереработчику
				|ИЗ
				|	ВТСсылки КАК Ссылки");
			Запрос.УстановитьПараметр("Спецификация", ДанныеПартии.Спецификация);
			Запрос.УстановитьПараметр("Ссылки", Ссылки);
			
			СоответствиеСсылок = Запрос.Выполнить().Выгрузить();
			СоответствиеСсылок.Индексы.Добавить("СсылкаСправочник");
			СоответствиеСсылок.Индексы.Добавить("СсылкаДокумент");
			
			Если СоответствиеСсылок.Количество() <> Ссылки.Количество() Тогда
				// Необходима дополнительная проверка.
				// Возможно количество расходится из-за дробления этапа либо наличия этапов, созданных вручную.
				Для каждого КлючИЗначение Из ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "Этап") Цикл
					Если СоответствиеСсылок.Найти(КлючИЗначение.Ключ, "СсылкаДокумент") = Неопределено
						И Не КлючИЗначение.Значение.Пустая()
						И СоответствиеСсылок.Найти(КлючИЗначение.Значение, "СсылкаСправочник") = Неопределено Тогда
						ПараметрыОтказ.Отказ = Истина;
						ПараметрыОтказ.Сообщения.Добавить(
							НСтр("ru = 'Не удалось сопоставить документы с этапами ресурсной спецификации.';
								|en = 'Cannot map the documents with BOM stages.'"));
						Возврат Результат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Очистка данных спецификации
			СтруктураПоиска = Новый Структура("Этап");
			Таблицы = СтрРазделить("МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы,ВидыРабочихЦентров,АльтернативныеВидыРабочихЦентров,Трудозатраты", ",");
			Для Индекс = -ДанныеСпецификации.Этапы.Количество()+1 По 0 Цикл
				ДанныеЭтапа = ДанныеСпецификации.Этапы[-Индекс];
				НайденнаяСтрока = СоответствиеСсылок.Найти(ДанныеЭтапа.Этап, "СсылкаСправочник");
				Если НайденнаяСтрока = Неопределено Тогда
					СтруктураПоиска.Этап = ДанныеЭтапа.Этап;
					Для каждого Таблица Из Таблицы Цикл
						Для каждого СтрокаУдалить Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоиска) Цикл
							ДанныеСпецификации[Таблица].Удалить(СтрокаУдалить)
						КонецЦикла;
					КонецЦикла;
					ДанныеСпецификации.Этапы.Удалить(ДанныеЭтапа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Дополнение данных спецификации
		ДанныеСпецификации.ВходящиеИзделия.Очистить();
		
		ДанныеСпецификации.Вставить("ПартияПроизводства", ДанныеПартии.ПартияПроизводства);
		ДанныеСпецификации.Вставить("НазначенияМатериалов", Назначения.НазначенияМатериалов);
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
		ДанныеСпецификации.Этапы.Колонки.Добавить("ЭтапПроизводства", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
		ДанныеСпецификации.Этапы.Колонки.Добавить("Назначение", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НомерПартииЗапуска", ОписаниеТипов);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НомерЭтапаВПартииЗапуска", ОписаниеТипов);
		
		Для каждого ДанныеЭтапа Из ДанныеСпецификации.Этапы Цикл
			НайденнаяСтрока = СоответствиеСсылок.Найти(ДанныеЭтапа.Этап, "СсылкаСправочник");
			Если НайденнаяСтрока <> Неопределено Тогда
				ДанныеЭтапа.ЭтапПроизводства = НайденнаяСтрока.СсылкаДокумент;
				ЗаполнитьЗначенияСвойств(ДанныеЭтапа, НайденнаяСтрока,
					"Назначение, НомерПартииЗапуска, НомерЭтапаВПартииЗапуска");
			КонецЕсли;
		КонецЦикла;
		
		// Сокращение данных спецификации на факт в документе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Обеспечение.Ссылка.Этап    КАК Этап,
			|	Обеспечение.Номенклатура   КАК Номенклатура,
			|	Обеспечение.Характеристика КАК Характеристика,
			|	Обеспечение.Подразделение  КАК ПодразделениеЭтапа,
			|	Обеспечение.Количество     КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
			|ГДЕ
			|	Обеспечение.Ссылка В (&Ссылки)
			|	И (Обеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
			|		ИЛИ Обеспечение.Отменено)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Изделия.Ссылка.Этап    КАК Этап,
			|	Изделия.Номенклатура   КАК Номенклатура,
			|	Изделия.Характеристика КАК Характеристика,
			|	Изделия.Подразделение  КАК ПодразделениеЭтапа,
			|	Изделия.Количество     КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|ГДЕ
			|	Изделия.Ссылка В (&Ссылки)
			|	И (Изделия.Произведено ИЛИ Изделия.Отменено)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Изделия.Ссылка.Этап    КАК Этап,
			|	Изделия.Номенклатура   КАК Номенклатура,
			|	Изделия.Характеристика КАК Характеристика,
			|	Изделия.Подразделение  КАК ПодразделениеЭтапа,
			|	Изделия.Количество     КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
			|ГДЕ
			|	Изделия.Ссылка В (&Ссылки)
			|	И (Изделия.Произведено ИЛИ Изделия.Отменено)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Трудозатраты.Ссылка.Этап   КАК Этап,
			|	Трудозатраты.ВидРабот      КАК ВидРабот,
			|	Трудозатраты.Подразделение КАК ПодразделениеЭтапа,
			|	Трудозатраты.Количество    КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
			|ГДЕ
			|	Трудозатраты.Ссылка В (&Ссылки)
			|	И (Трудозатраты.Выполнено ИЛИ Трудозатраты.Отменено)");
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ВычитаемыеДанные = Новый Структура;
		ВычитаемыеДанные.Вставить("МатериалыИУслуги", МассивРезультатов[0].Выгрузить());
		ВычитаемыеДанные.Вставить("ВыходныеИзделия", МассивРезультатов[1].Выгрузить());
		ВычитаемыеДанные.Вставить("ВозвратныеОтходы", МассивРезультатов[2].Выгрузить());
		ВычитаемыеДанные.Вставить("Трудозатраты", МассивРезультатов[3].Выгрузить());
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураПоиска = Новый Структура("Этап, Номенклатура, Характеристика, ПодразделениеЭтапа");
		Для каждого Таблица Из СтрРазделить("МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы", ",") Цикл
			ДанныеСпецификации[Таблица].Индексы.Добавить("Этап, Номенклатура, Характеристика, ПодразделениеЭтапа");
			Для Индекс = -ВычитаемыеДанные[Таблица].Количество()+1 По 0 Цикл
				СтрокаДокумент = ВычитаемыеДанные[Таблица][-Индекс];
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумент);
				Для каждого СтрокаСпецификация Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоиска) Цикл
					Количество = Мин(СтрокаДокумент.Количество, СтрокаСпецификация.Количество);
					
					Если СтрокаСпецификация.Количество = Количество Тогда
						ДанныеСпецификации[Таблица].Удалить(СтрокаСпецификация);
					Иначе
						СтрокаСпецификация.Количество = СтрокаСпецификация.Количество - Количество;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСпецификация, СтруктураДействий, КэшированныеЗначения);
					КонецЕсли;
					
					Если СтрокаДокумент.Количество = Количество Тогда
						ВычитаемыеДанные[Таблица].Удалить(СтрокаДокумент);
						Прервать;
					Иначе
						СтрокаДокумент.Количество = СтрокаДокумент.Количество - Количество;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("Этап, ВидРабот, ПодразделениеЭтапа");
		ДанныеСпецификации.Трудозатраты.Индексы.Добавить("Этап, ВидРабот, ПодразделениеЭтапа");
		Для Индекс = -ВычитаемыеДанные.Трудозатраты.Количество()+1 По 0 Цикл
			СтрокаДокумент = ВычитаемыеДанные.Трудозатраты[-Индекс];
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумент);
			Для каждого СтрокаСпецификация Из ДанныеСпецификации.Трудозатраты.НайтиСтроки(СтруктураПоиска) Цикл
				Количество = Мин(СтрокаДокумент.Количество, СтрокаСпецификация.Количество);
				
				Если СтрокаСпецификация.Количество = Количество Тогда
					ДанныеСпецификации.Трудозатраты.Удалить(СтрокаСпецификация);
				Иначе
					СтрокаСпецификация.Количество = СтрокаСпецификация.Количество - Количество;
				КонецЕсли;
				
				Если СтрокаДокумент.Количество = Количество Тогда
					ВычитаемыеДанные.Трудозатраты.Удалить(СтрокаДокумент);
					Прервать;
				Иначе
					СтрокаДокумент.Количество = СтрокаДокумент.Количество - Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Дополнение данных спецификации
		ПодготовитьДанныеСпецификацииКСозданиюЭтапов(ДанныеСпецификации, ДанныеПартии);
		
		ВыходныеИзделияСерии = Новый ТаблицаЗначений;
		Для каждого Реквизит Из Документы.ЭтапПроизводства2_2.ПустаяСсылка().Метаданные().ТабличныеЧасти.ВыходныеИзделияСерии.Реквизиты Цикл
			ВыходныеИзделияСерии.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		ВыходныеИзделияСерии.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		ПобочныеИзделияСерии = ВыходныеИзделияСерии.СкопироватьКолонки();
		
		РаспределитьДанныеЭтаповНаДанныеСпецификации(
			ДанныеЭтапов, ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии, Назначения.НазначенияИзделий);
		
		Дробь = Новый Структура("Числитель, Знаменатель", 1, 1);
		Если ПараметрыИзменения.ПересчитатьНоменклатуруДеленияВДанныхСпецификации
			И ДанныеПартии.Количество <> 0 Тогда
			Дробь.Числитель = РазмерПартии.Количество;
			Дробь.Знаменатель = ДанныеПартии.Количество;
		КонецЕсли;
		ДобавитьНоменклатуруДеленияВДанныеСпецификации(ДанныеЭтапов, ДанныеСпецификации, Дробь);
		
		// Пометка на удаление неактуальных документов
		Для каждого Ссылка Из Ссылки Цикл
			НайденнаяСтрока = СоответствиеСсылок.Найти(Ссылка, "СсылкаДокумент");
			Если НайденнаяСтрока = Неопределено
				Или (НайденнаяСтрока.СсылкаСправочник.Пустая()
					И Не НайденнаяСтрока.Начат
					И Не НайденнаяСтрока.Завершен
					И Не НайденнаяСтрока.СозданЗаказПереработчику) Тогда
				ДокументОбъект = Ссылка.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				Результат.ЭтапУдален.Добавить(Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Создание/изменение документов
		Для каждого ДанныеЭтапа Из ДанныеСпецификации.Этапы Цикл
			
			ЭтоНовыйДокумент = Истина;
			СсылкаДокумент = Неопределено;
			
			НайденнаяСтрока = СоответствиеСсылок.Найти(ДанныеЭтапа.Этап, "СсылкаСправочник");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.Завершен
					Или НайденнаяСтрока.СозданЗаказПереработчику Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтоНовыйДокумент = Ложь;
				СсылкаДокумент = НайденнаяСтрока.СсылкаДокумент;
			КонецЕсли;
			
			РеквизитыШапки = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
				ДанныеСпецификации.Распоряжение,
				ДанныеСпецификации.НазначениеПродукция,
				ДанныеСпецификации.ПартияПроизводства,
				ДанныеСпецификации.ТипПроизводственногоПроцесса,
				ДанныеСпецификации.Спецификация);
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
			ДанныеЗаполнения.Вставить("ДанныеСпецификации", ДанныеСпецификации);
			ДанныеЗаполнения.Вставить("ДанныеЭтапа", ДанныеЭтапа);
			ДанныеЗаполнения.Вставить("ВыходныеИзделияСерии",
				ВыходныеИзделияСерии.Скопировать(Новый Структура("Этап", ДанныеЭтапа.Этап)));
			ДанныеЗаполнения.Вставить("ПобочныеИзделияСерии",
				ПобочныеИзделияСерии.Скопировать(Новый Структура("Этап", ДанныеЭтапа.Этап)));
			
			Если ЭтоНовыйДокумент Тогда
				ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
				ДокументОбъект.УстановитьСсылкуНового(ДанныеЭтапа.ЭтапПроизводства);
				ДокументОбъект.УстановитьРежимПакетногоФормирования();
			Иначе
				ДокументОбъект = СсылкаДокумент.ПолучитьОбъект(); // ДокументОбъект.ЭтапПроизводства2_2
				ДокументОбъект.УстановитьРежимПакетногоФормирования();
				
				// Очистка шапки исключая данные факта
				Для каждого Реквизит Из ДокументОбъект.Метаданные().Реквизиты Цикл
					Если Реквизит.Имя = "Статус"
						Или Реквизит.Имя = "НеОтгружатьЧастями" Или Реквизит.Имя = "ДатаОтгрузки"
						Или Реквизит.Имя = "РасходОднойДатой" Или Реквизит.Имя = "ДатаРасхода"
						Или Реквизит.Имя = "ПроизводствоОднойДатой" Или Реквизит.Имя = "ДатаПроизводства"
						Или Реквизит.Имя = "ВыполнениеРаботОднойДатой" Или Реквизит.Имя = "ДатаВыполненияРабот"
						Или Реквизит.Имя = "КоличествоУпаковокФакт" Или Реквизит.Имя = "УпаковкаФакт"
						Или Реквизит.Имя = "КоличествоУпаковокОтменено" Или Реквизит.Имя = "УпаковкаОтменено"
						Или Реквизит.Имя = "ФактическоеНачалоЭтапа" Или Реквизит.Имя = "МаксимальныйКодСтрокиИзделия"
						Или Реквизит.Имя = "МаксимальныйКодСтрокиОбеспечение" Или Реквизит.Имя = "МаксимальныйКодСтрокиЭкономия"
						Или Реквизит.Имя = "МаксимальныйКодСтрокиТрудозатраты" Тогда
						Продолжить;
					КонецЕсли;
					ДокументОбъект[Реквизит.Имя] = Неопределено;
				КонецЦикла;
				
				// Очистка ТЧ, исключая данные факта
				ЭтапНачат = (ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
				Для каждого ТабличнаяЧасть Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
					Если ТабличнаяЧасть.Имя = "РасходМатериаловИРабот"
						Или ТабличнаяЧасть.Имя = "ЭкономияМатериалов"
						Или ТабличнаяЧасть.Имя = "ЭкономияМатериаловСерии"
						Или ТабличнаяЧасть.Имя = "ВидыЗапасовИзделия"
						Или ТабличнаяЧасть.Имя = "ВидыЗапасовМатериалы"
						Или ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты"
						Или ТабличнаяЧасть.Имя = "ШтрихкодыУпаковок"
						Или ТабличнаяЧасть.Имя = "ШтрихкодыУпаковокМатериалы" Тогда
						Продолжить;
					ИначеЕсли ТабличнаяЧасть.Имя = "ОбеспечениеМатериаламиИРаботами" И ЭтапНачат Тогда
						Для Индекс = -ДокументОбъект[ТабличнаяЧасть.Имя].Количество()+1 По 0 Цикл
							Строка = ДокументОбъект[ТабличнаяЧасть.Имя][-Индекс];
							Если Не(Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Или Строка.Отменено) Тогда
								ДокументОбъект[ТабличнаяЧасть.Имя].Удалить(Строка);
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли (ТабличнаяЧасть.Имя = "ВыходныеИзделия"
							Или ТабличнаяЧасть.Имя = "ПобочныеИзделия")
						И ЭтапНачат Тогда
						Для Индекс = -ДокументОбъект[ТабличнаяЧасть.Имя].Количество()+1 По 0 Цикл
							Строка = ДокументОбъект[ТабличнаяЧасть.Имя][-Индекс];
							Если Не(Строка.Произведено Или Строка.Отменено) Тогда
								ДокументОбъект[ТабличнаяЧасть.Имя].Удалить(Строка);
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли (ТабличнаяЧасть.Имя = "ВыходныеИзделияСерии"
							Или ТабличнаяЧасть.Имя = "ПобочныеИзделияСерии")
						И ЭтапНачат Тогда
						Для Индекс = -ДокументОбъект[ТабличнаяЧасть.Имя].Количество()+1 По 0 Цикл
							Строка = ДокументОбъект[ТабличнаяЧасть.Имя][-Индекс];
							Если Не(Строка.Произведено Или Строка.Отменено) Тогда
								ДокументОбъект[ТабличнаяЧасть.Имя].Удалить(Строка);
							Иначе
								ЗаполнитьЗначенияСвойств(ДанныеЗаполнения[ТабличнаяЧасть.Имя].Добавить(), Строка);
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ТабличнаяЧасть.Имя = "Трудозатраты" И ЭтапНачат Тогда
						Для Индекс = -ДокументОбъект[ТабличнаяЧасть.Имя].Количество()+1 По 0 Цикл
							Строка = ДокументОбъект[ТабличнаяЧасть.Имя][-Индекс];
							Если Не(Строка.Выполнено Или Строка.Отменено) Тогда
								ДокументОбъект[ТабличнаяЧасть.Имя].Удалить(Строка);
							КонецЕсли;
						КонецЦикла;
					Иначе
						ДокументОбъект[ТабличнаяЧасть.Имя].Очистить();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
			Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
			КонецЕсли;
			
			ПровестиСПонижениемСтатуса(ДокументОбъект);
			
			Результат[?(ЭтоНовыйДокумент, "ЭтапСоздан", "ЭтапИзменен")].Добавить(ДокументОбъект.Ссылка);
			СсылкиКПроведению.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
		#КонецОбласти
		
	КонецЕсли;
	
	Если СсылкиКПроведению.ВГраница() <> -1 Тогда
		ПараметрыФормирования = ПараметрыФормированияЭтапов();
		ПараметрыФормирования.Распоряжения.Добавить(ДанныеПартии.Распоряжение);
		Если Не ПересчитатьПоКоэффициенту Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ПараметрыИзменения,
				"РезервироватьМатериалы, ЗаменятьМатериалыНаАналоги");
		КонецЕсли;
		
		ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(
			ПараметрыФормирования, СсылкиКПроведению, Новый МенеджерВременныхТаблиц);
		
		Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
			РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(СсылкиКПроведению);
		КонецЕсли;
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(СсылкиКПроведению);
		
		Если ИспользоватьОперацииВЭтапах() Тогда
			ДанныеОчереди = ДанныеДляРасчетаОчередиОпераций(СсылкиКПроведению);
			
			Для каждого Ссылка Из СсылкиКПроведению Цикл
				Если ДанныеОчереди[Ссылка].ТребуетсяРассчитать Тогда
					РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ДобавитьЗадание(Ссылка, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение заказа
	Если ПараметрыИзменения.ОтменитьИзделиеВЗаказе
		И ДанныеПартии.Количество > РазмерПартии.Количество Тогда
		ДокументОбъект = ДанныеПартии.Распоряжение.ПолучитьОбъект(); // ДокументОбъект.ЗаказНаПроизводство2_2
		ДокументОбъект.ОтменитьПродукцию(
			ДанныеПартии.ОсновноеИзделиеНоменклатура,
			ДанныеПартии.ОсновноеИзделиеХарактеристика,
			ДанныеПартии.Спецификация,
			(ДанныеПартии.Количество - РазмерПартии.Количество),
			ПараметрыИзменения.ПричинаОтменыИзделия);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Результат.ЗаказИзменен.Добавить(ДанныеПартии.Распоряжение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Скопировать партию и пересчитать по коэффициенту.
// 
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//  ДанныеЭтапов - см. ДанныеЭтаповДляИзмененияПартий
//  Этапы - Массив из ДокументСсылка.ЭтапПроизводства2_2, Неопределено
//  РазмерПартии - см. НовыйРазмерПартии
//  ОсновноеИзделиеНовойПартии - Структура
//  ДополнительныеРеквизиты - Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.ЭтапПроизводства2_2 -
//   * Значение - Структура -
//  Параметры - см. ПересчитатьПоКоэффициентуПараметры
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭтапПроизводства2_2
Функция СкопироватьПартиюИПересчитатьПоКоэффициенту(ДанныеПартии, ДанныеЭтапов, Этапы, РазмерПартии, ОсновноеИзделиеНовойПартии, ДополнительныеРеквизиты, Параметры)
	
	Ссылки = Новый Массив;
	
	// Генерация ссылок на этапы и назначения
	НовыеСсылки = Новый Соответствие;
	Для каждого Этап Из ДанныеЭтапов.Реквизиты Цикл
		Если Этапы <> Неопределено
			И Этапы.Найти(Этап.Ссылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеСсылки.Вставить(
			Этап.Ссылка,
			Новый Структура("Этап, Назначение",
				Документы.ЭтапПроизводства2_2.ПолучитьСсылку(),
				Справочники.Назначения.ПолучитьСсылку()));
	КонецЦикла;
	
	// Создание партии
	ПартияПроизводстваНовая = Справочники.ПартииПроизводства.ПолучитьСсылку();
	
	НачатьТранзакцию();
	Попытка
		
		ОписаниеПартии =
			Справочники.ПартииПроизводства.СоздатьОбновитьПартиюПроизводства(
				ПартияПроизводстваНовая,
				ПоляПартии(ДанныеПартии, ОсновноеИзделиеНовойПартии,,, ДанныеЭтапов));
		
		НомерПартии = ОписаниеПартии.НомерПартииПроизводства;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	//
	СтруктураПоискаПоследователи = Новый Структура("ТипСвязи, Ссылка", ТипСвязиПоследователь());
	СтруктураПоискаСерии = Новый Структура("Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение,ВладелецИзделия");
	СтруктураПоискаНазначение = Новый Структура("НазначениеОбеспечения");
	НомерЭтапа = 1;
	
	Для каждого Этап Из ДанныеЭтапов.Реквизиты Цикл
		Если Этапы <> Неопределено
			И Этапы.Найти(Этап.Ссылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Этап.КоличествоУпаковокПлан = 0 Тогда
			Коэффициент = 1;
		Иначе
			Если Этап.УпаковкаПлан = РазмерПартии.Упаковка Тогда
				Коэффициент = РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
			Иначе
				КоэффициентПартии = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					РазмерПартии.Упаковка,
					ДанныеПартии.ОсновноеИзделиеНоменклатура);
				КоэффициентЭтапа = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
					Этап.УпаковкаПлан,
					ДанныеПартии.ОсновноеИзделиеНоменклатура);
				Коэффициент = КоэффициентПартии / КоэффициентЭтапа
					* РазмерПартии.КоличествоУпаковок / Этап.КоличествоУпаковокПлан;
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияЗаполнения = ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Этап.Ссылка, Коэффициент, Параметры);
		
		// Подготовка данных шапки
		РеквизитыШапки = Новый Структура;
		
		Для каждого Колонка Из ДанныеЭтапов.Реквизиты.Колонки Цикл
			Если Колонка.Имя = "Ссылка"
				ИЛИ Колонка.Имя = "ПартияПроизводства"
				ИЛИ Колонка.Имя = "Статус"
				ИЛИ Колонка.Имя = "КоличествоУпаковокПлан"
				ИЛИ Колонка.Имя = "УпаковкаПлан"
				ИЛИ Колонка.Имя = "КоэффициентМаршрутнойКарты"
				ИЛИ Колонка.Имя = "Назначение"
				ИЛИ Колонка.Имя = "Номер"
				ИЛИ Колонка.Имя = "НомерПартииЗапуска"
				ИЛИ Колонка.Имя = "НомерЭтапаВПартииЗапуска" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыШапки.Вставить(Колонка.Имя, Этап[Колонка.Имя]);
		КонецЦикла;
		
		РеквизитыШапки.Вставить("ПартияПроизводства", ПартияПроизводстваНовая);
		РеквизитыШапки.Вставить("Статус", Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
		РеквизитыШапки.Вставить("КоличествоУпаковокПлан", РазмерПартии.КоличествоУпаковок);
		РеквизитыШапки.Вставить("УпаковкаПлан", РазмерПартии.Упаковка);
		РеквизитыШапки.Вставить("КоэффициентМаршрутнойКарты", Окр(Этап.КоэффициентМаршрутнойКарты * Коэффициент, 3));
		РеквизитыШапки.Вставить("Назначение", НовыеСсылки[Этап.Ссылка].Назначение);
		РеквизитыШапки.Вставить("НомерПартииЗапуска", НомерПартии);
		РеквизитыШапки.Вставить("НомерЭтапаВПартииЗапуска", НомерЭтапа);
		
		НомерЭтапа = НомерЭтапа + 1;
		
		ЗначенияЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		
		// Замена ссылок и назначений, указывающих на этапы внутри цепочки
		СтруктураПоискаНазначение.НазначениеОбеспечения = Этап.Назначение;
		Для каждого Строка Из ЗначенияЗаполнения.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоискаНазначение) Цикл
			Строка.НазначениеОбеспечения = НовыеСсылки[Этап.Ссылка].Назначение;
			Если Строка.Обособленно Тогда
				Строка.Назначение = НовыеСсылки[Этап.Ссылка].Назначение;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Строка Из ЗначенияЗаполнения.ПобочныеИзделия Цикл
			Если НЕ Строка.ЭтапПотребитель.Пустая()
				И НовыеСсылки[Строка.ЭтапПотребитель] <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, Строка);
				Для каждого СтрокаСерия Из ЗначенияЗаполнения.ПобочныеИзделияСерии.НайтиСтроки(СтруктураПоискаСерии) Цикл
					СтрокаСерия.Назначение = НовыеСсылки[Строка.ЭтапПотребитель].Назначение;
				КонецЦикла;
				
				Строка.Назначение = НовыеСсылки[Строка.ЭтапПотребитель].Назначение;
				Строка.ЭтапПотребитель = НовыеСсылки[Строка.ЭтапПотребитель].Этап;
				
			КонецЕсли;
		КонецЦикла;
		
		// Последователи
		СтруктураПоискаПоследователи.Ссылка = Этап.Ссылка;
		Последователи = Новый Массив;
		Для каждого Строка Из ДанныеЭтапов.Последователи.НайтиСтроки(СтруктураПоискаПоследователи) Цикл
			Если НовыеСсылки[Строка.Этап] <> Неопределено Тогда
				Последователи.Добавить(НовыеСсылки[Строка.Этап].Этап);
			КонецЕсли;
		КонецЦикла;
		ЗначенияЗаполнения.Вставить("Последователи", Последователи);
		
		// Изменение этапов
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(НовыеСсылки[Этап.Ссылка].Этап);
		ДокументОбъект.УстановитьРежимПакетногоФормирования();
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		
		Реквизиты = ДополнительныеРеквизиты.Получить(Этап.Ссылка);
		Если Реквизиты <> Неопределено Тогда
			Если Реквизиты.Свойство("РеквизитыДеления") Тогда
				ДокументОбъект.ИзменитьРеквизитыДеления(Реквизиты.РеквизитыДеления);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		
		ПровестиСПонижениемСтатуса(ДокументОбъект);
		
		Ссылки.Добавить(ДокументОбъект.Ссылка);
		
	КонецЦикла;
	
	Если Ссылки.ВГраница() <> -1 Тогда
		ПараметрыФормирования = ПараметрыФормированияЭтапов();
		ПараметрыФормирования.Распоряжения.Добавить(ДанныеПартии.Распоряжение);
		
		ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(
			ПараметрыФормирования, Ссылки, Новый МенеджерВременныхТаблиц);
		
		Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
			РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Ссылки);
		КонецЕсли;
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(Ссылки);
		
		Если ИспользоватьОперацииВЭтапах() Тогда
			ДанныеОчереди = ДанныеДляРасчетаОчередиОпераций(Ссылки);
			
			Для каждого Ссылка Из Ссылки Цикл
				Если ДанныеОчереди[Ссылка].ТребуетсяРассчитать Тогда
					РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ДобавитьЗадание(Ссылка, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылки;
	
КонецФункции

// Параметры пересчета данных этапа по коэффициенту.
// Данные этапа для пересчета - см. ДанныеЭтаповДляИзмененияПартий
// 
// Возвращаемое значение:
//  Структура - Пересчитать по коэффициенту параметры:
// * ИзменятьФакт - Булево -
// * УдалятьФакт - Булево -
// * ИзменятьНоменклатуруДеления - Булево -
// * УдалятьНоменклатуруДеления - Булево -
Функция ПересчитатьПоКоэффициентуПараметры()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИзменятьФакт", Ложь);
	Результат.Вставить("УдалятьФакт", Ложь);
	
	Результат.Вставить("ИзменятьНоменклатуруДеления", Ложь);
	Результат.Вставить("УдалятьНоменклатуруДеления", Ложь);
	
	// При увеличении количества, в новых строках ключи очищаются всегда; при сокращении - очищаются условно по параметру
	Результат.Вставить("ОчищатьКлючиСтрок", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПересчитатьДанныеЭтапаПоКоэффициенту(ДанныеЭтапов, Ссылка, Коэффициент, Параметры)
	
	Результат = Новый Структура;
	
	ИзменятьФакт = Параметры.ИзменятьФакт;
	УдалятьФакт = Параметры.УдалятьФакт;
	ИзменятьНоменклатуруДеления = Параметры.ИзменятьНоменклатуруДеления;
	УдалятьНоменклатуруДеления = Параметры.УдалятьНоменклатуруДеления;
	ОчищатьКлючиСтрок = Параметры.ОчищатьКлючиСтрок;
	
	СтруктураПоискаСсылка = Новый Структура("Ссылка", Ссылка);
	СтруктураПоискаФакт = Новый Структура("ЭтоФакт", Истина);
	СтруктураПоискаСсылкаФакт = Новый Структура("Ссылка, ЭтоФакт", Ссылка, Истина);
	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если Коэффициент < 1 Тогда
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		#Область ВыходныеИзделия
		
		// Расчет остатка (лимита) для данной партии по аналитикам
		Остатки = ДанныеЭтапов.ВыходныеИзделияИтоги.Скопировать(СтруктураПоискаСсылка); // ТаблицаЗначений -
		
		ДобавитьИзделияВРезультат = Истина;
		ВыходныеИзделияКопия = Неопределено;
		Если Остатки.Количество() = 0
			И ДанныеЭтапов.ВыходныеИзделия.Количество() > 1
			И ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество() > 0 Тогда
			// Таблица изделий нужна для рассчета коэффициентов назначений обеспечения
			ПоследнийЭтап = ДанныеЭтапов.Реквизиты.Найти(0, "НомерСледующегоЭтапа");
			Если ПоследнийЭтап <> Неопределено
				И ПоследнийЭтап.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
				ДобавитьИзделияВРезультат = Ложь;
				СтруктураПоискаСсылка.Ссылка = ПоследнийЭтап.Ссылка;
				СтруктураПоискаСсылкаФакт.Ссылка = ПоследнийЭтап.Ссылка;
				ВыходныеИзделияКопия = ДанныеЭтапов.ВыходныеИзделия.Скопировать();
				Остатки = ДанныеЭтапов.ВыходныеИзделияИтоги.Скопировать(СтруктураПоискаСсылка); // ТаблицаЗначений -
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтрокаОстаток Из Остатки Цикл
			СтрокаОстаток.Количество = Окр(СтрокаОстаток.Количество * Коэффициент, 3);
		КонецЦикла;
		Остатки.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
		СтруктураПоискаОстатки = Новый Структура("Подразделение, Номенклатура, Характеристика");
		
		// Если факт не изменяется, то строки факт сразу сокращают остаток
		Если Не УдалятьФакт И Не ИзменятьФакт Тогда
			Для каждого СтрокаФакт Из ДанныеЭтапов.ВыходныеИзделия.НайтиСтроки(СтруктураПоискаСсылкаФакт) Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаФакт);
				СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
				Если СтрокиОстаток.ВГраница() <> -1 Тогда
					СтрокаОстаток = СтрокиОстаток[0];
					СтрокаОстаток.Количество = СтрокаОстаток.Количество - Мин(СтрокаОстаток.Количество, СтрокаФакт.Количество);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Результат пересчета
		ВыходныеИзделия = ДанныеЭтапов.ВыходныеИзделия.СкопироватьКолонки(); // ТаблицаЗначений -
		
		// Распределение номенклатуры
		СтрокиССериями = Новый Массив;
		СтрокиДокумента = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ВыходныеИзделия, СтруктураПоискаСсылка, Истина);
		КолонкиИсключения = ?(ОчищатьКлючиСтрок,
			"Количество, КодСтроки, ИдентификаторСтроки",
			"Количество");
		
		Для Индекс = 0 По СтрокиДокумента.Количество()-1 Цикл
			СтрокаДокумент = СтрокиДокумента[Индекс];
			Если СтрокаДокумент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Исключения
			Если СтрокаДокумент.ЭтоНоменклатураДеления Тогда
				Если УдалятьНоменклатуруДеления Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьНоменклатуруДеления Тогда
					НоваяСтрока = ВыходныеИзделия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
					Если НоваяСтрока.СтатусУказанияСерий <> 0 Тогда
						СтрокиССериями.Добавить(НоваяСтрока);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			ИначеЕсли СтрокаДокумент.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					НоваяСтрока = ВыходныеИзделия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
					Если НоваяСтрока.СтатусУказанияСерий <> 0 Тогда
						СтрокиССериями.Добавить(НоваяСтрока);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Остаток
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаДокумент);
			СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
			Если СтрокиОстаток.ВГраница() = -1
				Или СтрокиОстаток[0].Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОстаток = СтрокиОстаток[0];
			
			// Добавление строки
			Количество = Мин(СтрокаДокумент.Количество, СтрокаОстаток.Количество);
			
			НоваяСтрока = ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент,, КолонкиИсключения);
			НоваяСтрока.Количество = Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			СтрокаДокумент.Количество = СтрокаДокумент.Количество - Количество;
			СтрокаОстаток.Количество = СтрокаОстаток.Количество - Количество;
			
			Если НоваяСтрока.СтатусУказанияСерий <> 0 Тогда
				СтрокиССериями.Добавить(НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		// Распределение серий
		Если СтрокиССериями.ВГраница() <> -1
			И ДобавитьИзделияВРезультат Тогда
			
			ВыходныеИзделияСерии = ДанныеЭтапов.ВыходныеИзделияСерии.СкопироватьКолонки(); // ТаблицаЗначений - 
			
			Аналитики = "Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение";
			СтруктураПоискаСерии = Новый Структура(Аналитики);
			Изделия = ВыходныеИзделия.Скопировать(СтрокиССериями, Аналитики + ",Количество"); // ТаблицаЗначений - 
			Изделия.Свернуть(Аналитики, "Количество");
			
			Для каждого СтрокаИзделие Из Изделия Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаИзделие);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ВыходныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаСерия Из НайденныеСтрокиСерии Цикл
					
					Если СтрокаСерия.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ВыходныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерия);
					НоваяСтрока.Количество = Мин(СтрокаИзделие.Количество, СтрокаСерия.Количество);
					
					СтрокаСерия.Количество = СтрокаСерия.Количество - НоваяСтрока.Количество;
					
					СтрокаИзделие.Количество = СтрокаИзделие.Количество - НоваяСтрока.Количество;
					Если СтрокаИзделие.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			Результат.Вставить("ВыходныеИзделияСерии", ВыходныеИзделияСерии);
			
		КонецЕсли;
		
		Если ДобавитьИзделияВРезультат Тогда
			Результат.Вставить("ВыходныеИзделия", ВыходныеИзделия);
		Иначе
			СтруктураПоискаСсылка.Ссылка = Ссылка;
			СтруктураПоискаСсылкаФакт.Ссылка = Ссылка;
			ДанныеЭтапов.ВыходныеИзделия = ВыходныеИзделияКопия;
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Обеспечение
		
		// Назначения
		КоэффицентыНазначений = ?(ВыходныеИзделия.Количество() > 0,
			ОбеспечениеПроизводства.КоэффицентыНазначенийОбеспеченияВЭтапеПроизводства(
				ДанныеЭтапов.Реквизиты.Найти(Ссылка, "Ссылка"),
				ВыходныеИзделия),
			Неопределено);
		
		// Расчет остатка (лимита) для данной партии по аналитикам
		Если ЗначениеЗаполнено(КоэффицентыНазначений) Тогда
			Остатки = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботамиИтоги.Скопировать(СтруктураПоискаСсылка); // ТаблицаЗначений -
			Остатки.Колонки.Добавить("НазначениеОбеспечения", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
			Для Индекс = -Остатки.Количество()+1 По 0 Цикл
				СтрокаОстаток = Остатки[-Индекс];
				Для каждого СтрокаКоэффиценты Из КоэффицентыНазначений Цикл
					НоваяСтрока = Остатки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаток,, "Количество");
					НоваяСтрока.Количество = Окр(СтрокаОстаток.Количество * Коэффициент * СтрокаКоэффиценты.Коэффициент, 3);
					НоваяСтрока.НазначениеОбеспечения = СтрокаКоэффиценты.Назначение;
				КонецЦикла;
				Остатки.Удалить(СтрокаОстаток);
			КонецЦикла;
			ИменаКолонок = "Подразделение, Номенклатура, Характеристика, НазначениеОбеспечения";
		Иначе
			Остатки = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботамиИтоги.Скопировать(СтруктураПоискаСсылка); // ТаблицаЗначений - 
			Для каждого СтрокаОстаток Из Остатки Цикл
				СтрокаОстаток.Количество = Окр(СтрокаОстаток.Количество * Коэффициент, 3);
			КонецЦикла;
			ИменаКолонок = "Подразделение, Номенклатура, Характеристика";
		КонецЕсли;
		
		Остатки.Индексы.Добавить(ИменаКолонок);
		СтруктураПоискаОстатки = Новый Структура(ИменаКолонок);
		
		// Если факт не изменяется, то строки факт сразу сокращают остаток
		Если Не УдалятьФакт И Не ИзменятьФакт Тогда
			Для каждого СтрокаФакт Из ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоискаСсылкаФакт) Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаФакт);
				СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
				Если СтрокиОстаток.ВГраница() <> -1 Тогда
					СтрокаОстаток = СтрокиОстаток[0];
					СтрокаОстаток.Количество = СтрокаОстаток.Количество - Мин(СтрокаОстаток.Количество, СтрокаФакт.Количество);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Результат пересчета
		Обеспечение = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.СкопироватьКолонки(); // ТаблицаЗначений - 
		
		// Распределение номенклатуры
		СтрокиДокумента = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами, СтруктураПоискаСсылка, Истина);
		КолонкиИсключения = ?(ОчищатьКлючиСтрок,
			"Количество, КодСтроки, ИдентификаторСтроки, КлючНоменклатура",
			"Количество");
		
		Для Индекс = 0 По СтрокиДокумента.Количество()-1 Цикл
			СтрокаДокумент = СтрокиДокумента[Индекс];
			Если СтрокаДокумент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Исключения
			Если СтрокаДокумент.ЭтоНоменклатураДеления Тогда
				Если УдалятьНоменклатуруДеления Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьНоменклатуруДеления Тогда
					ЗаполнитьЗначенияСвойств(Обеспечение.Добавить(), СтрокаДокумент);
					Продолжить;
				КонецЕсли;
			ИначеЕсли СтрокаДокумент.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					ЗаполнитьЗначенияСвойств(Обеспечение.Добавить(), СтрокаДокумент);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Остаток
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаДокумент);
			СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
			Если СтрокиОстаток.ВГраница() = -1
				Или СтрокиОстаток[0].Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОстаток = СтрокиОстаток[0];
			
			// Добавление строки
			Количество = Мин(СтрокаДокумент.Количество, СтрокаОстаток.Количество);
			
			НоваяСтрока = Обеспечение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент,, КолонкиИсключения);
			НоваяСтрока.Количество = Количество;
			Если ОчищатьКлючиСтрок Тогда
				НоваяСтрока.КлючНоменклатура = ПустойКлючСвязи;
			КонецЕсли;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			СтрокаДокумент.Количество = СтрокаДокумент.Количество - Количество;
			СтрокаОстаток.Количество = СтрокаОстаток.Количество - Количество;
			
		КонецЦикла;
		
		Результат.Вставить("ОбеспечениеМатериаламиИРаботами", Обеспечение);
		
		#КонецОбласти
		
		#Область ПобочныеИзделия
		
		// Расчет лимитов для выпуска-потребления внутри текущей партии
		// Побочный выпуск в этом случае ограничен потребностями последующих этапов
		ВнутренниеПотребности = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.СкопироватьКолонки(
			"Ссылка, Номенклатура, Характеристика, Количество"); // ТаблицаЗначений -
		
		Остатки = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботамиИтоги.Скопировать(); // ТаблицаЗначений - 
		Для каждого СтрокаОстаток Из Остатки Цикл
			СтрокаОстаток.Количество = Окр(СтрокаОстаток.Количество * Коэффициент, 3);
		КонецЦикла;
		Остатки.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
		СтруктураПоискаОстатки = Новый Структура("Подразделение, Номенклатура, Характеристика");
		
		// Если факт не изменяется, то строки факт сразу сокращают остаток
		Если Не УдалятьФакт И Не ИзменятьФакт Тогда
			Для каждого СтрокаФакт Из ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоискаФакт) Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаФакт);
				СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
				Если СтрокиОстаток.ВГраница() <> -1 Тогда
					СтрокаОстаток = СтрокиОстаток[0];
					СтрокаОстаток.Количество = СтрокаОстаток.Количество - Мин(СтрокаОстаток.Количество, СтрокаФакт.Количество);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределение номенклатуры
		Для каждого СтрокаДокумент Из ДанныеЭтапов.ОбеспечениеМатериаламиИРаботами.Скопировать() Цикл
			Если СтрокаДокумент.Количество = 0
				Или Не СтрокаДокумент.Обособленно
				Или ДанныеЭтапов.Реквизиты.Найти(СтрокаДокумент.Назначение, "Назначение") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Исключения
			Если СтрокаДокумент.ЭтоНоменклатураДеления Тогда
				Если УдалятьНоменклатуруДеления Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьНоменклатуруДеления Тогда
					ЗаполнитьЗначенияСвойств(ВнутренниеПотребности.Добавить(), СтрокаДокумент);
					Продолжить;
				КонецЕсли;
			ИначеЕсли СтрокаДокумент.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					ЗаполнитьЗначенияСвойств(ВнутренниеПотребности.Добавить(), СтрокаДокумент);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Остаток
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаДокумент);
			СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
			Если СтрокиОстаток.ВГраница() = -1
				Или СтрокиОстаток[0].Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОстаток = СтрокиОстаток[0];
			
			// Добавление строки
			Количество = Мин(СтрокаДокумент.Количество, СтрокаОстаток.Количество);
			
			НоваяСтрока = ВнутренниеПотребности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент,, "Количество");
			НоваяСтрока.Количество = Количество;
			
			СтрокаОстаток.Количество = СтрокаОстаток.Количество - Количество;
		КонецЦикла;
		
		ВнутренниеПотребности.Свернуть("Ссылка, Номенклатура, Характеристика", "Количество");
		ВнутренниеПотребности.Индексы.Добавить("Ссылка, Номенклатура, Характеристика");
		СтруктураПоискаВнутренниеПотребности = Новый Структура("Ссылка, Номенклатура, Характеристика");
		
		// Расчет остатка (лимита) для данной партии по аналитикам
		Остатки = ДанныеЭтапов.ПобочныеИзделияИтоги.Скопировать(СтруктураПоискаСсылка); // ТаблицаЗначений - 
		Для каждого СтрокаОстаток Из Остатки Цикл
			СтрокаОстаток.Количество = Окр(СтрокаОстаток.Количество * Коэффициент, 3);
		КонецЦикла;
		Остатки.Индексы.Добавить("Подразделение, Номенклатура, Характеристика");
		СтруктураПоискаОстатки = Новый Структура("Подразделение, Номенклатура, Характеристика");
		
		// Если факт не изменяется, то строки факт сразу сокращают остаток
		Если Не УдалятьФакт И Не ИзменятьФакт Тогда
			Для каждого СтрокаФакт Из ДанныеЭтапов.ПобочныеИзделия.НайтиСтроки(СтруктураПоискаСсылкаФакт) Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаФакт);
				СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
				Если СтрокиОстаток.ВГраница() <> -1 Тогда
					СтрокаОстаток = СтрокиОстаток[0];
					СтрокаОстаток.Количество = СтрокаОстаток.Количество - Мин(СтрокаОстаток.Количество, СтрокаФакт.Количество);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Результат пересчета
		ПобочныеИзделия = ДанныеЭтапов.ПобочныеИзделия.СкопироватьКолонки(); // ТаблицаЗначений -
		ПобочныеИзделияСерии = ДанныеЭтапов.ПобочныеИзделияСерии.СкопироватьКолонки(); // ТаблицаЗначений -
		
		// Распределение номенклатуры
		СтрокиССериями = Новый Массив;
		СтрокиДокумента = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.ПобочныеИзделия, СтруктураПоискаСсылка, Истина);
		КолонкиИсключения = ?(ОчищатьКлючиСтрок,
			"Количество, КодСтроки, ИдентификаторСтроки",
			"Количество");
		
		Для Индекс = 0 По СтрокиДокумента.Количество()-1 Цикл
			СтрокаДокумент = СтрокиДокумента[Индекс];
			Если СтрокаДокумент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Исключения
			Если СтрокаДокумент.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					НоваяСтрока = ПобочныеИзделия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
					Если НоваяСтрока.СтатусУказанияСерий <> 0 Тогда
						СтрокиССериями.Добавить(НоваяСтрока);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Остаток
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаДокумент);
			СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
			Если СтрокиОстаток.ВГраница() = -1
				Или СтрокиОстаток[0].Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОстаток = СтрокиОстаток[0];
			
			// Расчет количества
			Количество = Мин(СтрокаДокумент.Количество, СтрокаОстаток.Количество);
			
			Если ЗначениеЗаполнено(СтрокаДокумент.ЭтапПотребитель)
				И ВнутренниеПотребности.Количество() > 0 Тогда
				СтруктураПоискаВнутренниеПотребности.Ссылка = СтрокаДокумент.ЭтапПотребитель;
				ЗаполнитьЗначенияСвойств(СтруктураПоискаВнутренниеПотребности, СтрокаДокумент,
					"Номенклатура, Характеристика");
				СтрокиПотребности = ВнутренниеПотребности.НайтиСтроки(СтруктураПоискаВнутренниеПотребности);
				Если СтрокиПотребности.ВГраница() <> -1 Тогда
					СтрокаПотребности = СтрокиПотребности[0];
					Если СтрокаПотребности.Количество = 0 Тогда
						Продолжить;
					Иначе
						Количество = Мин(Количество, СтрокаПотребности.Количество);
						СтрокаПотребности.Количество = СтрокаПотребности.Количество - Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Добавление строки
			НоваяСтрока = ПобочныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент,, КолонкиИсключения);
			НоваяСтрока.Количество = Количество;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			СтрокаДокумент.Количество = СтрокаДокумент.Количество - Количество;
			СтрокаОстаток.Количество = СтрокаОстаток.Количество - Количество;
			
			Если НоваяСтрока.СтатусУказанияСерий <> 0 Тогда
				СтрокиССериями.Добавить(НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		// Распределение серий
		Если СтрокиССериями.ВГраница() <> -1 Тогда
			
			Аналитики = "Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение,ВладелецИзделия";
			СтруктураПоискаСерии = Новый Структура(Аналитики);
			Изделия = ПобочныеИзделия.Скопировать(СтрокиССериями, Аналитики + ",Количество"); // ТаблицаЗначений - 
			Изделия.Свернуть(Аналитики, "Количество");
			
			Для каждого СтрокаИзделие Из Изделия Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаИзделие);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ПобочныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаСерия Из НайденныеСтрокиСерии Цикл
					
					Если СтрокаСерия.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ПобочныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерия);
					НоваяСтрока.Количество = Мин(СтрокаИзделие.Количество, СтрокаСерия.Количество);
					
					СтрокаСерия.Количество = СтрокаСерия.Количество - НоваяСтрока.Количество;
					
					СтрокаИзделие.Количество = СтрокаИзделие.Количество - НоваяСтрока.Количество;
					Если СтрокаИзделие.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Результат.Вставить("ПобочныеИзделия", ПобочныеИзделия);
		Результат.Вставить("ПобочныеИзделияСерии", ПобочныеИзделияСерии);
		
		#КонецОбласти
		
		#Область Трудозатраты
		
		// Расчет остатка (лимита) для данной партии по аналитикам
		Остатки = ДанныеЭтапов.ТрудозатратыИтоги.Скопировать(СтруктураПоискаСсылка); // ТаблицаЗначений - 
		Для каждого СтрокаОстаток Из Остатки Цикл
			СтрокаОстаток.Количество = Окр(СтрокаОстаток.Количество * Коэффициент, 3);
		КонецЦикла;
		Остатки.Индексы.Добавить("Подразделение, ВидРабот");
		СтруктураПоискаОстатки = Новый Структура("Подразделение, ВидРабот");
		
		// Если факт не изменяется, то строки факт сразу сокращают остаток
		Если Не УдалятьФакт И Не ИзменятьФакт Тогда
			Для каждого СтрокаФакт Из ДанныеЭтапов.Трудозатраты.НайтиСтроки(СтруктураПоискаСсылкаФакт) Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаФакт);
				СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
				Если СтрокиОстаток.ВГраница() <> -1 Тогда
					СтрокаОстаток = СтрокиОстаток[0];
					СтрокаОстаток.Количество = СтрокаОстаток.Количество - Мин(СтрокаОстаток.Количество, СтрокаФакт.Количество);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Результат пересчета
		Трудозатраты = ДанныеЭтапов.Трудозатраты.СкопироватьКолонки(); // ТаблицаЗначений - 
		
		// Распределение работ
		СтрокиДокумента = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
			ДанныеЭтапов.Трудозатраты, СтруктураПоискаСсылка, Истина);
		КолонкиИсключения = ?(ОчищатьКлючиСтрок,
			"Количество, КодСтроки, КлючВидРабот",
			"Количество");
		
		Для Индекс = 0 По СтрокиДокумента.Количество()-1 Цикл
			СтрокаДокумент = СтрокиДокумента[Индекс];
			Если СтрокаДокумент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Исключения
			Если СтрокаДокумент.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					ЗаполнитьЗначенияСвойств(Трудозатраты.Добавить(), СтрокаДокумент);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Остаток
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, СтрокаДокумент);
			СтрокиОстаток = Остатки.НайтиСтроки(СтруктураПоискаОстатки);
			Если СтрокиОстаток.ВГраница() = -1
				Или СтрокиОстаток[0].Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОстаток = СтрокиОстаток[0];
			
			// Добавление строки
			Количество = Мин(СтрокаДокумент.Количество, СтрокаОстаток.Количество);
			
			НоваяСтрока = Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент,, КолонкиИсключения);
			Если ОчищатьКлючиСтрок Тогда
				НоваяСтрока.КлючВидРабот = ПустойКлючСвязи;
			КонецЕсли;
			НоваяСтрока.Количество = Количество;
			
			СтрокаДокумент.Количество = СтрокаДокумент.Количество - Количество;
			СтрокаОстаток.Количество = СтрокаОстаток.Количество - Количество;
			
		КонецЦикла;
		
		Результат.Вставить("Трудозатраты", Трудозатраты);
		
		#КонецОбласти
		
	Иначе
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоЕдиниц",
			ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		#Область Обеспечение
		
		КолонкиИсключения = "ВариантОбеспечения, КодСтроки, ИдентификаторСтроки, КлючНоменклатура";
		
		Обеспечение = ДанныеЭтапов.ОбеспечениеМатериаламиИРаботамиИсходная.Скопировать(СтруктураПоискаСсылка);
		Для Индекс = -Обеспечение.Количество()+1 По 0 Цикл
			Строка = Обеспечение[-Индекс];
			Если Строка.ЭтоНоменклатураДеления Тогда
				Если УдалятьНоменклатуруДеления Тогда
					Обеспечение.Удалить(Строка);
					Продолжить;
				ИначеЕсли Не ИзменятьНоменклатуруДеления Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Строка.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					Обеспечение.Удалить(Строка);
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					Если Коэффициент > 1 И Не Строка.Отменено Тогда
						НоваяСтрока = Обеспечение.Вставить(-Индекс + 1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, КолонкиИсключения);
						НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
						НоваяСтрока.КлючНоменклатура = ПустойКлючСвязи;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок * (Коэффициент - 1);
						СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрока);
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
						НоваяСтрока.Количество = СтрокаСтруктурой.Количество;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * Коэффициент;
			СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
			Строка.Количество = СтрокаСтруктурой.Количество;
		КонецЦикла;
		Результат.Вставить("ОбеспечениеМатериаламиИРаботами", Обеспечение);
		
		#КонецОбласти
		
		#Область ВыходныеИзделия
		
		КолонкиИсключения = "Произведено, КодСтроки, ИдентификаторСтроки";
		
		ВыходныеИзделия = ДанныеЭтапов.ВыходныеИзделияИсходная.Скопировать(СтруктураПоискаСсылка);
		СтрокиССериями = Новый Массив;
		Для Индекс = -ВыходныеИзделия.Количество()+1 По 0 Цикл
			Строка = ВыходныеИзделия[-Индекс];
			Если Строка.ЭтоНоменклатураДеления Тогда
				Если УдалятьНоменклатуруДеления Тогда
					ВыходныеИзделия.Удалить(Строка);
					Продолжить;
				ИначеЕсли Не ИзменятьНоменклатуруДеления Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Строка.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					ВыходныеИзделия.Удалить(Строка);
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					Если Коэффициент > 1 И Не Строка.Отменено Тогда
						НоваяСтрока = ВыходныеИзделия.Вставить(-Индекс + 1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, КолонкиИсключения);
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок * (Коэффициент - 1);
						СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрока);
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
						НоваяСтрока.Количество = СтрокаСтруктурой.Количество;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * Коэффициент;
			СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
			Строка.Количество = СтрокаСтруктурой.Количество;
			Если Строка.СтатусУказанияСерий <> 0 Тогда
				СтрокиССериями.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Результат.Вставить("ВыходныеИзделия", ВыходныеИзделия);
		
		Если СтрокиССериями.ВГраница() <> -1 Тогда
			
			ВыходныеИзделияСерии = ДанныеЭтапов.ВыходныеИзделияСерии.СкопироватьКолонки(); // ТаблицаЗначений - 
			
			Аналитики = "Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение";
			СтруктураПоискаСерии = Новый Структура(Аналитики);
			Изделия = ВыходныеИзделия.Скопировать(СтрокиССериями, Аналитики + ",Количество"); // ТаблицаЗначений - 
			Изделия.Свернуть(Аналитики, "Количество");
			
			Для каждого СтрокаИзделие Из Изделия Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаИзделие);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ВыходныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаСерия Из НайденныеСтрокиСерии Цикл
					
					Если СтрокаСерия.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ВыходныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерия);
					НоваяСтрока.Количество = Мин(СтрокаИзделие.Количество, СтрокаСерия.Количество);
					
					СтрокаСерия.Количество = СтрокаСерия.Количество - НоваяСтрока.Количество;
					
					СтрокаИзделие.Количество = СтрокаИзделие.Количество - НоваяСтрока.Количество;
					Если СтрокаИзделие.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			Результат.Вставить("ВыходныеИзделияСерии", ВыходныеИзделияСерии);
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ПобочныеИзделия
		
		КолонкиИсключения = "Произведено, КодСтроки, ИдентификаторСтроки";
		
		ПобочныеИзделия = ДанныеЭтапов.ПобочныеИзделияИсходная.Скопировать(СтруктураПоискаСсылка); // ТаблицаЗначений - 
		ПобочныеИзделияСерии = ДанныеЭтапов.ПобочныеИзделияСерии.СкопироватьКолонки(); // ТаблицаЗначений - 
		СтрокиССериями = Новый Массив;
		Для Индекс = -ПобочныеИзделия.Количество()+1 По 0 Цикл
			Строка = ПобочныеИзделия[-Индекс];
			Если Строка.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					ПобочныеИзделия.Удалить(Строка);
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					Если Коэффициент > 1 И Не Строка.Отменено Тогда
						НоваяСтрока = ПобочныеИзделия.Вставить(-Индекс + 1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, КолонкиИсключения);
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок * (Коэффициент - 1);
						СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрока);
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
						НоваяСтрока.Количество = СтрокаСтруктурой.Количество;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * Коэффициент;
			СтрокаСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаСтруктурой, СтруктураДействий, КэшированныеЗначения);
			Строка.Количество = СтрокаСтруктурой.Количество;
			Если Строка.СтатусУказанияСерий <> 0 Тогда
				СтрокиССериями.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиССериями.ВГраница() <> -1 Тогда
			
			Аналитики = "Ссылка,Номенклатура,Характеристика,Назначение,Получатель,Произведено,ДатаПроизводства,Подразделение,ВладелецИзделия";
			СтруктураПоискаСерии = Новый Структура(Аналитики);
			Изделия = ПобочныеИзделия.Скопировать(СтрокиССериями, Аналитики + ",Количество");
			Изделия.Свернуть(Аналитики, "Количество");
			
			Для каждого СтрокаИзделие Из Изделия Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерии, СтрокаИзделие);
				НайденныеСтрокиСерии = ОбщегоНазначенияУТ.НайтиСтрокиССохранениемПорядка(
					ДанныеЭтапов.ПобочныеИзделияСерии, СтруктураПоискаСерии, Истина);
				
				Для каждого СтрокаСерия Из НайденныеСтрокиСерии Цикл
						
					Если СтрокаСерия.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ПобочныеИзделияСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерия);
					НоваяСтрока.Количество = Мин(СтрокаИзделие.Количество, СтрокаСерия.Количество);
					
					СтрокаСерия.Количество = СтрокаСерия.Количество - НоваяСтрока.Количество;
					
					СтрокаИзделие.Количество = СтрокаИзделие.Количество - НоваяСтрока.Количество;
					Если СтрокаИзделие.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Результат.Вставить("ПобочныеИзделия", ПобочныеИзделия);
		Результат.Вставить("ПобочныеИзделияСерии", ПобочныеИзделияСерии);
		
		#КонецОбласти
		
		#Область Трудозатраты
		
		КолонкиИсключения = "Выполнено, КодСтроки, КлючВидРабот";
		
		Трудозатраты = ДанныеЭтапов.ТрудозатратыИсходная.Скопировать(СтруктураПоискаСсылка);
		Для Индекс = -Трудозатраты.Количество()+1 По 0 Цикл
			Строка = Трудозатраты[-Индекс];
			Если Строка.ЭтоФакт Тогда
				Если УдалятьФакт Тогда
					Трудозатраты.Удалить(Строка);
					Продолжить;
				ИначеЕсли Не ИзменятьФакт Тогда
					Если Коэффициент > 1 И Не Строка.Отменено Тогда
						НоваяСтрока = Трудозатраты.Вставить(-Индекс + 1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, КолонкиИсключения);
						НоваяСтрока.КлючВидРабот = ПустойКлючСвязи;
						НоваяСтрока.Количество = НоваяСтрока.Количество * (Коэффициент - 1);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Строка.Количество = Строка.Количество * Коэффициент;
		КонецЦикла;
		Результат.Вставить("Трудозатраты", Трудозатраты);
		
		#КонецОбласти
		
	КонецЕсли;
	
	#Область Прочее
	
	// Виды рабочих центров
	ВидыРабочихЦентров = ДанныеЭтапов.ВидыРабочихЦентров.Скопировать(СтруктураПоискаСсылка);
	Для Индекс = -ВидыРабочихЦентров.Количество()+1 По 0 Цикл
		Строка = ВидыРабочихЦентров[-Индекс];
		Строка.ВремяРаботы = Строка.ВремяРаботы * Коэффициент;
		Если Строка.ВремяРаботы = 0 Тогда
			ВидыРабочихЦентров.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("ВидыРабочихЦентров", ВидыРабочихЦентров);
	
	// Альтернативные виды рабочих центров
	АльтернативныеВидыРабочихЦентров = ДанныеЭтапов.АльтернативныеВидыРабочихЦентров.Скопировать(СтруктураПоискаСсылка);
	Для Индекс = -АльтернативныеВидыРабочихЦентров.Количество()+1 По 0 Цикл
		Строка = АльтернативныеВидыРабочихЦентров[-Индекс];
		Строка.ВремяРаботы = Строка.ВремяРаботы * Коэффициент;
		Если Строка.ВремяРаботы = 0 Тогда
			АльтернативныеВидыРабочихЦентров.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("АльтернативныеВидыРабочихЦентров", АльтернативныеВидыРабочихЦентров);
	
	// Наборы материалов и работ
	НаборыМатериаловИРабот = ДанныеЭтапов.НаборыМатериаловИРабот.Скопировать(СтруктураПоискаСсылка);
	Результат.Вставить("НаборыМатериаловИРабот", НаборыМатериаловИРабот);
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьДолиСтоимостиПриДеленииДокумента(ДанныеЭтапа, Коэффициент)
	
	Если ДанныеЭтапа.ВыходныеИзделия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ДоляСтоимости, Отменено", 0, Ложь);
	НайденныеСтроки = ДанныеЭтапа.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Для каждого Строка Из ДанныеЭтапа.ВыходныеИзделия Цикл
			Строка.ДоляСтоимости = Строка.ДоляСтоимости * Коэффициент;
		КонецЦикла;
		
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		
		НайденныеСтроки[0].ДоляСтоимости = Коэффициент;
		
	Иначе
		
		КоличествоИтого = 0;
		Для каждого Строка Из НайденныеСтроки Цикл
			КоличествоИтого = КоличествоИтого + Строка.Количество;
		КонецЦикла;
		Если КоличествоИтого <> 0 Тогда
			Для каждого Строка Из НайденныеСтроки Цикл
				Строка.ДоляСтоимости = Строка.Количество * Коэффициент / КоличествоИтого;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПередатьРезервы(СсылкиОтправители, СсылкиПолучатели, ОтправителиКУдалению = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("КорректировкаСоздана", Новый Массив);
	Результат.Вставить("ЭтапИзменен", Новый Массив);
	
	// Корректировка назначений
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Этапы.Назначение                       КАК Назначение,
		|	Этапы.Ссылка В (&ОтправителиКУдалению) КАК КУдалению
		|ПОМЕСТИТЬ Отправители
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|ГДЕ
		|	Этапы.Ссылка В (&Отправители)
		|	И Этапы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение
		|;
		|
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыИПотребности.Номенклатура КАК Номенклатура,
		|	ЗапасыИПотребности.Характеристика КАК Характеристика,
		|	ЗапасыИПотребности.Склад КАК Склад,
		|	ЗапасыИПотребности.Назначение КАК Назначение,
		|	ВЫБОР
		|		КОГДА ИСТИНА В (
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Отправители КАК Т
		|				ГДЕ
		|					Т.Назначение = ЗапасыИПотребности.Назначение
		|					И Т.КУдалению)
		|			ТОГДА ЗапасыИПотребности.ВНаличииОстаток
		|		ИНАЧЕ ЗапасыИПотребности.ВНаличииОстаток
		|				- ЗапасыИПотребности.РезервироватьНаСкладеОстаток
		|				- ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток
		|				- ЗапасыИПотребности.КОбеспечениюОстаток
		|				- ЗапасыИПотребности.ОтложитьРезервированиеОстаток
		|				- ЗапасыИПотребности.НеОбеспечиватьОстаток
		|	КОНЕЦ КАК Количество
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Назначение В(
		|			ВЫБРАТЬ
		|				Отправители.Назначение КАК Назначение
		|			ИЗ
		|				Отправители)) КАК ЗапасыИПотребности
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ИСТИНА В (
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Отправители КАК Т
		|				ГДЕ
		|					Т.Назначение = ЗапасыИПотребности.Назначение
		|					И Т.КУдалению)
		|			ТОГДА ЗапасыИПотребности.ВНаличииОстаток
		|		ИНАЧЕ ЗапасыИПотребности.ВНаличииОстаток
		|				- ЗапасыИПотребности.РезервироватьНаСкладеОстаток
		|				- ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток
		|				- ЗапасыИПотребности.КОбеспечениюОстаток
		|				- ЗапасыИПотребности.ОтложитьРезервированиеОстаток
		|				- ЗапасыИПотребности.НеОбеспечиватьОстаток
		|	КОНЕЦ > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыИПотребности.Номенклатура КАК Номенклатура,
		|	ЗапасыИПотребности.Характеристика КАК Характеристика,
		|	ЗапасыИПотребности.Склад КАК Склад,
		|	ЗапасыИПотребности.Назначение КАК Назначение,
		|	-(ЗапасыИПотребности.ВНаличииОстаток
		|		- ЗапасыИПотребности.РезервироватьНаСкладеОстаток
		|		- ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток
		|		- ЗапасыИПотребности.КОбеспечениюОстаток
		|		- ЗапасыИПотребности.ОтложитьРезервированиеОстаток
		|		- ЗапасыИПотребности.НеОбеспечиватьОстаток) КАК Количество
		|ПОМЕСТИТЬ Потребности
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Назначение В(
		|			ВЫБРАТЬ
		|				Этапы.Назначение КАК Назначение
		|			ИЗ
		|				Документ.ЭтапПроизводства2_2 КАК Этапы
		|			ГДЕ
		|				Этапы.Ссылка В (&Получатели))) КАК ЗапасыИПотребности
		|ГДЕ
		|	ЗапасыИПотребности.ВНаличииОстаток
		|		- ЗапасыИПотребности.РезервироватьНаСкладеОстаток
		|		- ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток
		|		- ЗапасыИПотребности.КОбеспечениюОстаток
		|		- ЗапасыИПотребности.ОтложитьРезервированиеОстаток
		|		- ЗапасыИПотребности.НеОбеспечиватьОстаток < 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура                КАК Номенклатура,
		|	Остатки.Характеристика              КАК Характеристика,
		|	Остатки.Склад                       КАК Склад,
		|	Остатки.Назначение                  КАК ИсходноеНазначение,
		|	Остатки.Количество                  КАК Остаток,
		|	ЕСТЬNULL(Потребности.Назначение, 0) КАК НовоеНазначение,
		|	ЕСТЬNULL(Потребности.Количество, 0) КАК Потребность
		|ИЗ
		|	Остатки КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Потребности КАК Потребности
		|		ПО Потребности.Номенклатура = Остатки.Номенклатура
		|		 И Потребности.Характеристика = Остатки.Характеристика
		|		 И Потребности.Склад = Остатки.Склад
		|ГДЕ
		|	Остатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	ИсходноеНазначение";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Отправители", СсылкиОтправители);
	Запрос.УстановитьПараметр("Получатели", СсылкиПолучатели);
	Запрос.УстановитьПараметр("ОтправителиКУдалению", ОтправителиКУдалению);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Индексы.Добавить("Номенклатура, Характеристика, Склад, НовоеНазначение");
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Склад, НовоеНазначение");
	
	Если Таблица.Количество() > 0 Тогда
		
		Товары = Таблица.СкопироватьКолонки("Номенклатура, Характеристика, Склад, ИсходноеНазначение, НовоеНазначение");
		Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
		Для Индекс = 0 По Таблица.Количество()-1 Цикл
			
			Строка = Таблица[Индекс];
			
			Если Строка.Остаток > 0 И Строка.Потребность > 0 Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество = Мин(Строка.Остаток, Строка.Потребность);
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				
				Строка.Остаток = Строка.Остаток - НоваяСтрока.Количество;
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
				Для каждого НайденнаяСтрока Из Таблица.НайтиСтроки(СтруктураПоиска) Цикл
					НайденнаяСтрока.Потребность = НайденнаяСтрока.Потребность - НоваяСтрока.Количество;
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследняяСтрока = Ложь;
			Если Индекс <> Таблица.Количество()-1 Тогда
				
				СледующаяСтрока = Таблица[Индекс+1];
				Если СледующаяСтрока.Номенклатура = Строка.Номенклатура
					И СледующаяСтрока.Характеристика = Строка.Характеристика
					И СледующаяСтрока.Склад = Строка.Склад
					И СледующаяСтрока.ИсходноеНазначение = Строка.ИсходноеНазначение Тогда
						
					СледующаяСтрока.Остаток = Строка.Остаток;
					
				Иначе
					ПоследняяСтрока = Истина;
				КонецЕсли;
			Иначе
				ПоследняяСтрока = Истина;
			КонецЕсли;
			
			Если ПоследняяСтрока И Строка.Остаток <> 0 Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НовоеНазначение");
				НоваяСтрока.Количество = Строка.Остаток;
				НоваяСтрока.КоличествоУпаковок = Строка.Остаток;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыШапки = Новый Структура();
		РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
		РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений);
		РеквизитыШапки.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкиОтправители[0], "Организация"));
		
		ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, Товары));
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			ДокументОбъект,
			Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(ДокументОбъект));
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Событие = НСтр("ru = 'Этап производства';
								|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Корректировка назначений';
							|en = 'Adjust assignments'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(Событие,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Результат.КорректировкаСоздана.Добавить(ДокументОбъект.Ссылка);
	
	КонецЕсли;
	
	// Изменение назначения выпуска
	Если СсылкиПолучатели.ВГраница() <> -1 Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Обеспечение.Ссылка            КАК Ссылка,
			|	Обеспечение.Номенклатура      КАК Номенклатура,
			|	Обеспечение.Характеристика    КАК Характеристика,
			|	ВЫБОР
			|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|			ТОГДА Обеспечение.Подразделение
			|		ИНАЧЕ Обеспечение.Склад
			|	КОНЕЦ                         КАК Получатель,
			|	Обеспечение.Назначение        КАК Назначение,
			|	СУММА(Обеспечение.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТПотребность
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
			|ГДЕ
			|	Обеспечение.Ссылка В(&Получатели)
			|	И Обеспечение.Производится
			|	И НЕ Обеспечение.Отменено
			|	И Обеспечение.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	Обеспечение.Ссылка,
			|	Обеспечение.Номенклатура,
			|	Обеспечение.Характеристика,
			|	ВЫБОР
			|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|			ТОГДА Обеспечение.Подразделение
			|		ИНАЧЕ Обеспечение.Склад
			|	КОНЕЦ,
			|	Обеспечение.Назначение
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	Номенклатура,
			|	Характеристика,
			|	Получатель,
			|	Назначение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Номенклатура      КАК Номенклатура,
			|	ВложенныйЗапрос.Получатель        КАК Получатель,
			|	ВложенныйЗапрос.Характеристика    КАК Характеристика,
			|	ВложенныйЗапрос.Назначение        КАК Назначение,
			|	ВложенныйЗапрос.ЭтапПотребитель   КАК ЭтапПотребитель,
			|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТВыпуск
			|ИЗ
			|	(ВЫБРАТЬ
			|		Изделия.ЭтапПотребитель КАК ЭтапПотребитель,
			|		Изделия.Номенклатура    КАК Номенклатура,
			|		Изделия.Характеристика  КАК Характеристика,
			|		Изделия.Получатель      КАК Получатель,
			|		Изделия.Назначение      КАК Назначение,
			|		Изделия.Количество      КАК Количество
			|	ИЗ
			|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|	ГДЕ
			|		Изделия.ЭтапПотребитель В(&Получатели)
			|		И Изделия.Ссылка.Проведен
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Изделия.ЭтапПотребитель,
			|		Изделия.Номенклатура,
			|		Изделия.Характеристика,
			|		Изделия.Получатель,
			|		Изделия.Назначение,
			|		Изделия.Количество
			|	ИЗ
			|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
			|	ГДЕ
			|		Изделия.ЭтапПотребитель В(&Получатели)
			|		И Изделия.Ссылка.Проведен) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Получатель,
			|	ВложенныйЗапрос.Характеристика,
			|	ВложенныйЗапрос.Назначение,
			|	ВложенныйЗапрос.ЭтапПотребитель
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВложенныйЗапрос.ЭтапПотребитель,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Характеристика,
			|	ВложенныйЗапрос.Получатель,
			|	ВложенныйЗапрос.Назначение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТПотребность.Ссылка         КАК ЭтапПотребитель,
			|	ВТПотребность.Номенклатура   КАК Номенклатура,
			|	ВТПотребность.Характеристика КАК Характеристика,
			|	ВТПотребность.Получатель     КАК Получатель,
			|	ВТПотребность.Назначение     КАК Назначение,
			|	ВТПотребность.Количество - ЕСТЬNULL(ВТВыпуск.Количество, 0) КАК Количество
			|ИЗ
			|	ВТПотребность КАК ВТПотребность
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыпуск КАК ВТВыпуск
			|		ПО ВТПотребность.Ссылка = ВТВыпуск.ЭтапПотребитель
			|			И ВТПотребность.Номенклатура = ВТВыпуск.Номенклатура
			|			И ВТПотребность.Характеристика = ВТВыпуск.Характеристика
			|			И ВТПотребность.Получатель = ВТВыпуск.Получатель
			|			И ВТПотребность.Назначение = ВТВыпуск.Назначение
			|ГДЕ
			|	ВТПотребность.Количество - ЕСТЬNULL(ВТВыпуск.Количество, 0) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Обеспечение.Ссылка            КАК ЭтапПотребитель,
			|	Обеспечение.Номенклатура      КАК Номенклатура,
			|	Обеспечение.Характеристика    КАК Характеристика,
			|	ВЫБОР
			|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|			ТОГДА Обеспечение.Подразделение
			|		ИНАЧЕ Обеспечение.Склад
			|	КОНЕЦ                         КАК Получатель,
			|	Обеспечение.Назначение        КАК Назначение,
			|	СУММА(Обеспечение.Количество) КАК Количество
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
			|ГДЕ
			|	Обеспечение.Ссылка В(&Отправители)
			|	И Обеспечение.Производится
			|	И НЕ Обеспечение.Отменено
			|	И Обеспечение.Ссылка.Проведен
			|	И (Обеспечение.Ссылка НЕ В (&ОтправителиКУдалению)
			|		 ИЛИ Обеспечение.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
			|
			|СГРУППИРОВАТЬ ПО
			|	Обеспечение.Ссылка,
			|	Обеспечение.Номенклатура,
			|	Обеспечение.Характеристика,
			|	ВЫБОР
			|		КОГДА Обеспечение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|			ТОГДА Обеспечение.Подразделение
			|		ИНАЧЕ Обеспечение.Склад
			|	КОНЕЦ,
			|	Обеспечение.Назначение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Изделия.Ссылка          КАК Ссылка,
			|	Изделия.ЭтапПотребитель КАК ЭтапПотребитель,
			|	Изделия.Номенклатура    КАК Номенклатура,
			|	Изделия.Характеристика  КАК Характеристика,
			|	Изделия.Получатель      КАК Получатель,
			|	Изделия.Назначение      КАК Назначение,
			|	Изделия.Произведено     КАК Произведено,
			|	""ВыходныеИзделия""     КАК ИмяТЧ
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
			|ГДЕ
			|	Изделия.ЭтапПотребитель В(&Отправители)
			|	И НЕ Изделия.Произведено
			|	И Изделия.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Изделия.Ссылка,
			|	Изделия.ЭтапПотребитель,
			|	Изделия.Номенклатура,
			|	Изделия.Характеристика,
			|	Изделия.Получатель,
			|	Изделия.Назначение,
			|	Изделия.Произведено,
			|	""ПобочныеИзделия""
			|ИЗ
			|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
			|ГДЕ
			|	Изделия.ЭтапПотребитель В(&Отправители)
			|	И НЕ Изделия.Произведено
			|	И Изделия.Ссылка.Проведен
			|ИТОГИ ПО
			|	Ссылка";
		МассивРезультатов = Запрос.ВыполнитьПакет();  
		
		ПотребностьПолучатели = МассивРезультатов[2].Выгрузить();
		ПотребностьПолучатели.Индексы.Добавить("Номенклатура, Характеристика");
		
		ПотребностьОтправители = МассивРезультатов[3].Выгрузить();
		ПотребностьОтправители.Индексы.Добавить("ЭтапПотребитель, Номенклатура, Характеристика, Получатель, Назначение");
		
		ВыборкаИтоги = МассивРезультатов[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктураПоиска1 = Новый Структура("ЭтапПотребитель, Номенклатура, Характеристика, Получатель, Назначение, Произведено");
		СтруктураПоиска2 = Новый Структура("ЭтапПотребитель, Номенклатура, Характеристика, Получатель, Назначение");
		СтруктураПоиска3 = Новый Структура("Номенклатура, Характеристика");
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Пока ВыборкаИтоги.Следующий() Цикл
			
			ДокументОбъект = ВыборкаИтоги.Ссылка.ПолучитьОбъект(); // ДокументОбъект - 
			ДокументИзменен = Ложь;
			
			Выборка = ВыборкаИтоги.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска1, Выборка);
				ЗаполнитьЗначенияСвойств(СтруктураПоиска2, Выборка);
				
				Для каждого Строка Из ДокументОбъект[Выборка.ИмяТЧ].НайтиСтроки(СтруктураПоиска1) Цикл
					
					Количество = Строка.Количество;
					
					Для каждого Потребность Из ПотребностьОтправители.НайтиСтроки(СтруктураПоиска2) Цикл
						
						Если Потребность = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						КоличествоЗачет = Мин(Количество, Потребность.Количество);
						Потребность.Количество = Потребность.Количество - КоличествоЗачет;
						Количество = Количество - КоличествоЗачет;
						Если Количество = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска3, Строка);
					
					Для каждого Потребность Из ПотребностьПолучатели.НайтиСтроки(СтруктураПоиска3) Цикл
						
						Если Потребность.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						КоличествоЗачет = Мин(Количество, Потребность.Количество);
						
						Если КоличествоЗачет < Строка.Количество Тогда
							
							НоваяСтрока = ДокументОбъект[Выборка.ИмяТЧ].Вставить(ДокументОбъект[Выборка.ИмяТЧ].Индекс(Строка));
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,
								"КодСтроки, Назначение, Получатель, ЭтапПотребитель, Количество, КоличествоУпаковок");
							НоваяСтрока.Количество = КоличествоЗачет;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
								
							Строка.Количество = Строка.Количество - КоличествоЗачет;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
							
							СтрокаОбособить = НоваяСтрока;
						Иначе
							СтрокаОбособить = Строка;
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтрокаОбособить, Потребность, "Назначение, Получатель, ЭтапПотребитель");
						ДокументИзменен = Истина;
						
						ОстатокСерии = КоличествоЗачет;
						
						Если Выборка.ИмяТЧ = "ВыходныеИзделия" Тогда
							ИмяТабличнойЧастиСерии = "ВыходныеИзделияСерии";
							СтруктураПоиска4 = Новый Структура("Номенклатура, Характеристика, Назначение, Получатель, Произведено, ДатаПроизводства, Подразделение");
							ЗаполняемыеПоля = "Назначение, Получатель";
						ИначеЕсли Выборка.ИмяТЧ = "ПобочныеИзделия" Тогда
							ИмяТабличнойЧастиСерии = "ПобочныеИзделияСерии";
							СтруктураПоиска4 = Новый Структура("Номенклатура, Характеристика, Назначение, Получатель, Произведено, ДатаПроизводства, Подразделение, ВладелецИзделия");
							ЗаполняемыеПоля = "Назначение, Получатель, ВладелецИзделия";
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтруктураПоиска4, Строка);
						
						Для каждого СтрокаСерии Из ДокументОбъект[ИмяТабличнойЧастиСерии].НайтиСтроки(СтруктураПоиска4) Цикл
							
							Если СтрокаСерии.Количество = ОстатокСерии Тогда
								ЗаполнитьЗначенияСвойств(СтрокаСерии, Потребность, ЗаполняемыеПоля);
								Прервать;
							ИначеЕсли СтрокаСерии.Количество < ОстатокСерии Тогда
								ЗаполнитьЗначенияСвойств(СтрокаСерии, Потребность, ЗаполняемыеПоля);
								ОстатокСерии = ОстатокСерии - СтрокаСерии.Количество;
							Иначе
								НоваяСтрока = ДокументОбъект[ИмяТабличнойЧастиСерии].Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии,, "Количество," + ЗаполняемыеПоля);
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность, ЗаполняемыеПоля);
								НоваяСтрока.Количество = ОстатокСерии;
								
								СтрокаСерии.Количество = СтрокаСерии.Количество - ОстатокСерии;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Потребность.Количество = Потребность.Количество - КоличествоЗачет;
						
						Количество = Количество - КоличествоЗачет;
						Если Количество = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ДокументИзменен Тогда
				
				ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
				
				Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				КонецЕсли;
				
				ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
				ПровестиСПонижениемСтатуса(ДокументОбъект);
					
				Результат.ЭтапИзменен.Добавить(ДокументОбъект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОформитьПромежуточныйВыпускВНовомЭтапе(ДанныеПартии, ПередЭтапом, ВыходныеИзделия, Серии, ПараметрыВыпуска)
	
	// Создание "технического" этапа
	ДанныеЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПередЭтапом,
		"КоличествоУпаковокПлан, УпаковкаПлан, НомерЭтапа, НомерПартииЗапуска");
	
	РеквизитыШапкиНовый = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
		ДанныеПартии.Распоряжение,
		ДанныеПартии.НазначениеПродукция,
		ДанныеПартии.ПартияПроизводства,
		ДанныеПартии.ТипПроизводственногоПроцесса,
		ДанныеПартии.Спецификация);
	
	РеквизитыШапкиНовый.Вставить("Подразделение", 
		?(ВыходныеИзделия.Количество() > 0, ВыходныеИзделия[0].Подразделение, Неопределено));
	РеквизитыШапкиНовый.Вставить("НаименованиеЭтапа", НСтр("ru = 'Промежуточный выпуск';
															|en = 'Intermediate release'"));
	РеквизитыШапкиНовый.Вставить("КоличествоУпаковокПлан", ДанныеЭтапа.КоличествоУпаковокПлан);
	РеквизитыШапкиНовый.Вставить("УпаковкаПлан", ДанныеЭтапа.УпаковкаПлан);
	РеквизитыШапкиНовый.Вставить("УпаковкаФакт", ДанныеЭтапа.УпаковкаПлан);
	РеквизитыШапкиНовый.Вставить("УпаковкаОтменено", ДанныеЭтапа.УпаковкаПлан);
	РеквизитыШапкиНовый.Вставить("НомерЭтапа", ДанныеЭтапа.НомерЭтапа);
	РеквизитыШапкиНовый.Вставить("НомерПартииЗапуска", ДанныеЭтапа.НомерПартииЗапуска);
	РеквизитыШапкиНовый.Вставить("НомерЭтапаВПартииЗапуска",
		НовыйНомерЭтапаВПартииЗапуска(ДанныеПартии.ПартияПроизводства));
	РеквизитыШапкиНовый.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия",
		ПараметрыВыпуска.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	Если ВыходныеИзделия.Найти(Ложь, "Произведено") = Неопределено Тогда
		РеквизитыШапкиНовый.Вставить("Статус", Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
		РеквизитыШапкиНовый.Вставить("КоличествоУпаковокФакт", ДанныеЭтапа.КоличествоУпаковокПлан);
		РеквизитыШапкиНовый.Вставить("ФактическоеНачалоЭтапа", ТекущаяДатаСеанса());
		РеквизитыШапкиНовый.Вставить("ФактическоеОкончаниеЭтапа", ТекущаяДатаСеанса());
		РеквизитыШапкиНовый.Вставить("ПроизводствоОднойДатой", Истина);
		РеквизитыШапкиНовый.Вставить("ДатаПроизводства", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапкиНовый);
	ДанныеЗаполнения.Вставить("ВыходныеИзделия", ВыходныеИзделия);
	ДанныеЗаполнения.Вставить("ВыходныеИзделияСерии", Серии);
	
	ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	КонецЕсли;
	
	ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
	ПровестиСПонижениемСтатуса(ДокументОбъект);
	
	НовыйЭтап = ДокументОбъект.Ссылка;
	
	// Корректировка связей этапов
	СтруктураПоиска = Новый Структура("Этап, ТипСвязи", ПередЭтапом, ТипСвязиПоследователь());
	Предшественники = ПредшественникиВОчередиЭтапов(ПередЭтапом);
	Для каждого Предшественник Из Предшественники Цикл
		ДокументОбъект = Предшественник.ПолучитьОбъект(); // ДокументОбъект - 
		
		НайденныеСтроки = ДокументОбъект.Последователи.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			НайденныеСтроки[0].Этап = НовыйЭтап;
		КонецЕсли;
		
		ДокументОбъект.ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи();
		ПровестиСПонижениемСтатуса(ДокументОбъект);
	КонецЦикла;
	
	Возврат НовыйЭтап;
	
КонецФункции

Процедура ОформитьПромежуточныйВыпуск(ДанныеПартии, ДокументОбъект, ВыходныеИзделия, Серии, ПараметрыВыпуска)
	
	// Этап становится выпускающим
	ДокументОбъект.НомерСледующегоЭтапа = 0;
	ДокументОбъект.СпособРаспределенияЗатратНаВыходныеИзделия = 
		ПараметрыВыпуска.СпособРаспределенияЗатратНаВыходныеИзделия;
	ДокументОбъект.Последователи.Очистить();
	
	// Если в побочных изделиях есть номенклатура промежуточного выпуска,
	// то это считается задвоением строк. Побочный выпуск в этом случае сокращается.
	СтруктураПоиска1 = Новый Структура("Номенклатура, Характеристика, Произведено, Отменено");
	СтруктураПоиска2 = Новый Структура("Номенклатура, Характеристика, Назначение, Получатель, Произведено, ДатаПроизводства, Подразделение, ВладелецИзделия");
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ЕстьНоменклатураИсходногоКачества = ВыходныеИзделия.Колонки.Найти("НоменклатураИсходногоКачества") <> Неопределено;
	
	Для каждого СтрокаВыходныеИзделия Из ВыходныеИзделия Цикл
		
		Остаток = СтрокаВыходныеИзделия.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска1, СтрокаВыходныеИзделия);
		Если ЕстьНоменклатураИсходногоКачества
			И ЗначениеЗаполнено(СтрокаВыходныеИзделия.НоменклатураИсходногоКачества) Тогда
			СтруктураПоиска1.Номенклатура = СтрокаВыходныеИзделия.НоменклатураИсходногоКачества;
			СтруктураПоиска1.Характеристика = СтрокаВыходныеИзделия.ХарактеристикаИсходногоКачества;
		КонецЕсли;
		
		Для каждого СтрокаПобочныеИзделия Из ДокументОбъект.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска1) Цикл
			
			ОстатокСерии = Мин(Остаток, СтрокаПобочныеИзделия.Количество);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска2, СтрокаПобочныеИзделия);
			Для каждого СтрокаСерии Из ДокументОбъект.ПобочныеИзделияСерии.НайтиСтроки(СтруктураПоиска2) Цикл
				Если СтрокаСерии.Количество <= ОстатокСерии Тогда
					ОстатокСерии = ОстатокСерии - СтрокаСерии.Количество;
					ДокументОбъект.ПобочныеИзделияСерии.Удалить(СтрокаСерии);
				Иначе
					СтрокаСерии.Количество = СтрокаСерии.Количество - ОстатокСерии;
					ОстатокСерии = 0;
				КонецЕсли;
				Если ОстатокСерии = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаПобочныеИзделия.Количество <= Остаток Тогда
				Остаток = Остаток - СтрокаПобочныеИзделия.Количество;
				ДокументОбъект.ПобочныеИзделия.Удалить(СтрокаПобочныеИзделия);
			Иначе
				СтрокаПобочныеИзделия.Количество = СтрокаПобочныеИзделия.Количество - Остаток;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПобочныеИзделия, СтруктураДействий, КэшированныеЗначения);
				Остаток = 0;
			КонецЕсли;
			
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Наследование произведенных выходных изделий.
	// Совпадение аналитик в строках документа и данных РМ Деление считается задвоением строк,
	// данные документа вытесняют данные обработки.
	СтрокиПроизведено = ДокументОбъект.ВыходныеИзделия.НайтиСтроки(Новый Структура("Произведено", Истина));
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение, Получатель");
	// Вытеснение
	Для каждого СтрокаДокумент Из СтрокиПроизведено Цикл
		Остаток = СтрокаДокумент.Количество;
		ДоляСтоимости = 0;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумент);
		Для каждого СтрокаТаблица Из ВыходныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
			Если Остаток >= СтрокаТаблица.Количество Тогда
				Остаток = Остаток - СтрокаТаблица.Количество;
				ДоляСтоимости = ДоляСтоимости + СтрокаТаблица.ДоляСтоимости;
				ВыходныеИзделия.Удалить(СтрокаТаблица);
			Иначе
				ДоляСтоимости = ДоляСтоимости + (СтрокаТаблица.ДоляСтоимости * Остаток / СтрокаТаблица.Количество);
				СтрокаТаблица.ДоляСтоимости = СтрокаТаблица.ДоляСтоимости - (СтрокаТаблица.ДоляСтоимости * Остаток / СтрокаТаблица.Количество);
				СтрокаТаблица.Количество = СтрокаТаблица.Количество - Остаток;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблица, СтруктураДействий, КэшированныеЗначения);
				Остаток = 0;
			КонецЕсли;
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаДокумент.ДоляСтоимости = 0 Тогда
			СтрокаДокумент.ДоляСтоимости = ДоляСтоимости;
		КонецЕсли;
	КонецЦикла;
	// Добавление
	Для Индекс = 0 По СтрокиПроизведено.Количество()-1 Цикл
		НоваяСтрока = ВыходныеИзделия.Вставить(Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПроизведено[Индекс]);
	КонецЦикла;
	
	// Заполнение выходных изделий
	ВыходныеИзделия.ЗаполнитьЗначения(ДокументОбъект.Подразделение, "Подразделение");
	Серии.ЗаполнитьЗначения(ДокументОбъект.Подразделение, "Подразделение");
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВыходныеИзделия", ВыходныеИзделия);
	ДанныеЗаполнения.Вставить("ВыходныеИзделияСерии", Серии);
	
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
КонецПроцедуры

// Возвращает ссылки на этапы-предшественники в соответствии с описанием
// технологического процесса в ресурсной спецификации
//
Функция ПредшественникиВОчередиЭтапов(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап = &Ссылка
		|	И Таблица.ТипСвязи = &ТипСвязи
		|	И Таблица.Ссылка.Проведен");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязиПоследователь());
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ОтразитьРасходПобочныхИзделийВПромежуточномВыпуске(ЭтапПромежуточногоВыпуска, Ссылки)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭтапПромежуточногоВыпуска,
		"Статус, Назначение, Организация, ПартияПроизводства");
	Если ЗначенияРеквизитов.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыходныеИзделия.Номенклатура      КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика    КАК Характеристика,
		|	СУММА(ВыходныеИзделия.Количество) КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &ЭтапПромежуточногоВыпуска
		|	И НЕ ВыходныеИзделия.Отменено
		|СГРУППИРОВАТЬ ПО
		|	ВыходныеИзделия.Номенклатура,
		|	ВыходныеИзделия.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПобочныеИзделия.Номенклатура      КАК Номенклатура,
		|	ПобочныеИзделия.Характеристика    КАК Характеристика,
		|	ПобочныеИзделия.Получатель        КАК Склад,
		|	ПобочныеИзделия.Назначение        КАК Назначение,
		|	ПобочныеИзделия.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	СУММА(ПобочныеИзделия.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТПобочныеИзделия
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
		|ГДЕ
		|	ПобочныеИзделия.Ссылка.ПартияПроизводства = &ПартияПроизводства
		|	И ПобочныеИзделия.Ссылка.Проведен
		|	И ПобочныеИзделия.Произведено
		|	И НЕ ПобочныеИзделия.Отменено
		|	И ИСТИНА В (
		|		ВЫБРАТЬ
		|			ПЕРВЫЕ 1 ИСТИНА
		|		ИЗ
		|			Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
		|		ГДЕ
		|			ВыходныеИзделия.Ссылка = &ЭтапПромежуточногоВыпуска
		|			И ВыходныеИзделия.Номенклатура = ПобочныеИзделия.Номенклатура 
		|			И ВыходныеИзделия.Характеристика = ПобочныеИзделия.Характеристика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПобочныеИзделия.Номенклатура,
		|	ПобочныеИзделия.Характеристика,
		|	ПобочныеИзделия.Получатель,
		|	ПобочныеИзделия.Назначение,
		|	ПобочныеИзделия.СтатьяКалькуляции
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|///////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПобочныеИзделия.Номенклатура      КАК Номенклатура,
		|	ПобочныеИзделия.Характеристика    КАК Характеристика,
		|	ПобочныеИзделия.Склад             КАК Склад,
		|	ПобочныеИзделия.Назначение        КАК Назначение,
		|	ПобочныеИзделия.СтатьяКалькуляции КАК СтатьяКалькуляции,
		|	ПобочныеИзделия.Количество        КАК Количество
		|ИЗ
		|	ВТПобочныеИзделия КАК ПобочныеИзделия
		|;
		|
		|///////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.Склад КАК Склад,
		|	Запасы.Назначение КАК Назначение,
		|	Запасы.ВНаличииОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Т.Номенклатура КАК Номенклатура,
		|				Т.Характеристика КАК Характеристика,
		|				Т.Склад КАК Склад,
		|				Т.Назначение КАК Назначение
		|			ИЗ
		|				ВТПобочныеИзделия КАК Т)) КАК Запасы
		|ГДЕ
		|	Запасы.ВНаличииОстаток > 0";
	
	Запрос.УстановитьПараметр("ЭтапПромежуточногоВыпуска", ЭтапПромежуточногоВыпуска);
	Запрос.УстановитьПараметр("ПартияПроизводства", ЗначенияРеквизитов.ПартияПроизводства);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ПромежуточныйВыпуск = МассивРезультатов[0].Выгрузить();
	ПобочныйВыпуск = МассивРезультатов[2].Выгрузить();
	Остатки = МассивРезультатов[3].Выгрузить();
	
	Если ПромежуточныйВыпуск.Количество() = 0
		ИЛИ ПобочныйВыпуск.Количество() = 0
		ИЛИ Остатки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтапОбъект = ЭтапПромежуточногоВыпуска.ПолучитьОбъект(); // ДокументОбъект.ЭтапПроизводства2_2
	ЭтапОбъект.Заблокировать();
	
	ТаблицаКорректировка = Новый ТаблицаЗначений;
	ТаблицаКорректировка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаКорректировка.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаКорректировка.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаКорректировка.Колонки.Добавить("ИсходноеНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаКорректировка.Колонки.Добавить("НовоеНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаКорректировка.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	ТаблицаКорректировка.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	СтруктураПоиска1 = Новый Структура("Номенклатура, Характеристика");
	СтруктураПоиска2 = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
	
	Для каждого СтрокаПромежуточныйВыпуск Из ПромежуточныйВыпуск Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска1, СтрокаПромежуточныйВыпуск);
		Для каждого СтрокаПобочныйВыпуск Из ПобочныйВыпуск.НайтиСтроки(СтруктураПоиска1) Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска2, СтрокаПобочныйВыпуск);
			Для каждого СтрокаОстаток Из Остатки.НайтиСтроки(СтруктураПоиска2) Цикл
				
				Количество = Мин(СтрокаПромежуточныйВыпуск.Количество,
					СтрокаПобочныйВыпуск.Количество,
					СтрокаОстаток.Количество);
				
				Если Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПромежуточныйВыпуск.Количество = СтрокаПромежуточныйВыпуск.Количество - Количество;
				СтрокаПобочныйВыпуск.Количество = СтрокаПобочныйВыпуск.Количество - Количество;
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - Количество;
				
				// Обеспечение
				НоваяСтрока = ЭтапОбъект.ОбеспечениеМатериаламиИРаботами.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПобочныйВыпуск,, "Количество, Назначение");
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = Количество;
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				НоваяСтрока.ДатаОтгрузки = ТекущаяДатаСеанса();
				НоваяСтрока.НазначениеОбеспечения = ЗначенияРеквизитов.Назначение;
				НоваяСтрока.Подразделение = ЭтапОбъект.Подразделение;
				Если ЗначениеЗаполнено(СтрокаПобочныйВыпуск.Назначение) Тогда
					НоваяСтрока.Обособленно = Истина;
					НоваяСтрока.Назначение = ЗначенияРеквизитов.Назначение;
				КонецЕсли;
				
				// Расход
				НоваяСтрока = ЭтапОбъект.РасходМатериаловИРабот.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПобочныйВыпуск,, "Количество");
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = Количество;
				НоваяСтрока.ДатаРасхода = ТекущаяДатаСеанса();
				НоваяСтрока.Подразделение = ЭтапОбъект.Подразделение;
				
				// Корректировка
				Если ЗначениеЗаполнено(СтрокаПобочныйВыпуск.Назначение) Тогда
					НоваяСтрока = ТаблицаКорректировка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПобочныйВыпуск,, "Количество");
					НоваяСтрока.Количество = Количество;
					НоваяСтрока.КоличествоУпаковок = Количество;
					НоваяСтрока.ИсходноеНазначение = СтрокаПобочныйВыпуск.Назначение;
					НоваяСтрока.НовоеНазначение = ЗначенияРеквизитов.Назначение;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЭтапОбъект.Модифицированность() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись корректировки
	КорректировкаОбъект = Неопределено;
	КорректировкаПроведена = Ложь;
	Если ТаблицаКорректировка.Количество() > 0 Тогда
		КорректировкаОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
		
		РеквизитыШапки = Новый Структура();
		РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
		РеквизитыШапки.Вставить("ВидОперации", Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
		РеквизитыШапки.Вставить("Организация", ЗначенияРеквизитов.Организация);
		РеквизитыШапки.Вставить("Назначение", ЗначенияРеквизитов.Назначение);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		ДанныеЗаполнения.Вставить("Товары", ТаблицаКорректировка);
		
		КорректировкаОбъект.Заполнить(ДанныеЗаполнения);
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			КорректировкаОбъект,
			Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(КорректировкаОбъект));
		
		КорректировкаПроведена = Ложь;
		Если КорректировкаОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				КорректировкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КорректировкаПроведена = Истина;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Событие = НСтр("ru = 'Этап производства';
								|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Корректировка назначений';
							|en = 'Adjust assignment'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(Событие,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				КорректировкаОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			КорректировкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	// Запись этапа
	Если КорректировкаОбъект <> Неопределено И НЕ КорректировкаПроведена
		ИЛИ НЕ ЭтапОбъект.ПроверитьЗаполнение() Тогда
		
		ЭтапОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
			ЭтапОбъект,
			ЗначенияРеквизитов.Статус);
		
	КонецЕсли;
	
	ПровестиСПонижениемСтатуса(ЭтапОбъект);
	ЭтапОбъект.Разблокировать();
	
	Возврат ?(КорректировкаОбъект = Неопределено, Неопределено, КорректировкаОбъект.Ссылка);
	
КонецФункции

Функция ЭтапПоШтрихкодуПартииПроизводства(ПартияПроизводства) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|ГДЕ
		|	Документ.ПартияПроизводства = &ПартияПроизводства
		|	И Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И Документ.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка,
		|	2
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|ГДЕ
		|	Документ.ПартияПроизводства = &ПартияПроизводства
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И Документ.Проведен
		|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт), ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка,
		|	2
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеНоменклатура = ТабличнаяЧасть.Номенклатура
		|			И Документ.ПартияПроизводства.ОсновноеИзделиеХарактеристика = ТабличнаяЧасть.Характеристика
		|ГДЕ
		|	Документ.ПартияПроизводства = &ПартияПроизводства
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И Документ.Проведен
		|	И Документ.ПартияПроизводства.ТипПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

// Проводит документ. При возникновении исключения делается попытка провести документ в статусе Формируется.
// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект.ЭтапПроизводства2_2 - документ
//
Процедура ПровестиСПонижениемСтатуса(ДокументОбъект)
	
	Пока Истина Цикл
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Если ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
				Продолжить;
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
					ДокументОбъект.Ссылка);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Этап производства';
						|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Прервать;
		
	КонецЦикла
	
КонецПроцедуры

Функция ПроверитьТочкуДеления(ДанныеЭтапа)
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Если Не ДанныеЭтапа.Проведен Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Выбранный этап не проведен, действие не может быть выполнено.';
								|en = 'Selected stage is not posted, action cannot be completed.'");
	ИначеЕсли ДанныеЭтапа.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Выбранный этап завершен, действие не может быть выполнено.';
								|en = 'The selected stage is completed. The action cannot be performed.'");
	ИначеЕсли ДанныеЭтапа.ПроизводствоНаСтороне И ЗначениеЗаполнено(ДанныеЭтапа.ЗаказПереработчику) Тогда
		Отказ = Истина;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для этапа %1 создан заказ переработчику, действие не может быть выполнено.';
				|en = '""Subcontracting purchase order"" is created for the stage %1, action cannot be completed.'"),
			ДанныеЭтапа.Номер);
	КонецЕсли;
	
	Возврат Новый Структура("Отказ, ТекстСообщения", Отказ, ТекстСообщения);
	
КонецФункции

Функция ПроверитьОчередьТочкиДеления(ИдентификаторОперации, МенеджерВременныхТаблиц, ЭтоДеление, ЭтоБрак, ЭтоОтмена)
	
	Отказ = Ложь;
	ТекстСообщения = "";
	ЭтоИзменениеВнутриОчереди = Ложь;
	
	Если ИдентификаторОперации = 0 Тогда
		// По умолчанию считается что если операция не указана, то действие выполняется с первой операции.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПерваяОперация.ОперацийКНазначению > 0 КАК ЕстьОстатокКНазначению,
			|	ПерваяОперация.Начата                  КАК Начата,
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Последователи
			|		ГДЕ
			|			ПерваяОперация.НомерСледующейОперации <> 0
			|			И Последователи.НомерОперации >= ПерваяОперация.НомерСледующейОперации
			|			И Последователи.Начата)        КАК ПоследователиНачаты
			|ИЗ
			|	ВТОчередьОпераций КАК ПерваяОперация
			|ГДЕ
			|	НЕ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Предшественники
			|		ГДЕ
			|			Предшественники.НомерСледующейОперации = ПерваяОперация.НомерОперации)
			|УПОРЯДОЧИТЬ ПО
			|	ПерваяОперация.НомерОперации");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Не Выборка.ЕстьОстатокКНазначению
				Или Выборка.ПоследователиНачаты Тогда
				Отказ = Истина;
				ТекстСообщения =
					НСтр("ru = 'Выполнение операций этапа начато. Для выполнения действия необходимо указать операцию.';
						|en = 'Stage operation execution is started. To perform the action, specify an operation.'");
			КонецЕсли;
			
			ЭтоИзменениеВнутриОчереди = Выборка.Начата;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТекущаяОперация.ОперацийКНазначению > 0 КАК ЕстьОстатокКНазначению,
			|	ТекущаяОперация.Начата                  КАК Начата,
			|	НЕ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Предшественники
			|		ГДЕ
			|			Предшественники.НомерСледующейОперации = ТекущаяОперация.НомерОперации) КАК ЭтоПерваяОперация,
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Предшественники
			|		ГДЕ
			|			ТекущаяОперация.ИдентификаторКонтрольнойОперации <> 0
			|			И Предшественники.НомерСледующейОперации = ТекущаяОперация.НомерОперации
			|			И Предшественники.ИдентификаторКонтрольнойОперации = ТекущаяОперация.ИдентификаторКонтрольнойОперации) КАК ЭтоКонтролируемаяОперация,
			|	ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Последователи
			|		ГДЕ
			|			ТекущаяОперация.НомерСледующейОперации <> 0
			|			И Последователи.НомерОперации >= ТекущаяОперация.НомерСледующейОперации
			|			И Последователи.Начата) КАК ПоследователиНачаты
			|ИЗ
			|	ВТОчередьОпераций КАК ТекущаяОперация
			|ГДЕ
			|	ТекущаяОперация.ИдентификаторОперации = &ИдентификаторОперации");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ИдентификаторОперации", ИдентификаторОперации);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если (ЭтоДеление Или ЭтоОтмена)
				И Не Выборка.ЕстьОстатокКНазначению Тогда
				Отказ = Истина;
				ТекстСообщения =
					НСтр("ru = 'Выбранная операция назначена в полном объеме. Для выполнения действия необходимо отменить всю операцию (либо ее часть) или выбрать последующую операцию.';
						|en = 'The selected operation is assigned in full. To perform the action, cancel the whole operation (or its part) or select the next operation.'");
			КонецЕсли;
			
			Если ЭтоДеление
				И Выборка.ЭтоКонтролируемаяОперация
				И Не Отказ Тогда
				Отказ = Истина;
				ТекстСообщения =
					НСтр("ru = 'Выбрана контролируемая операция. Для выполнения действия необходимо указать операцию после контрольной.';
						|en = 'A controlled operation is selected. To perform the action, specify an operation after the controlled one.'");
			КонецЕсли;
			
			Если Выборка.ПоследователиНачаты
				И Не Отказ Тогда
				Отказ = Истина;
				ТекстСообщения =
					НСтр("ru = 'Последующие операции начаты. Для выполнения действия необходимо указать последнюю незавершенную операцию либо последующий этап.';
						|en = 'The next operations are started. To perform the action, specify the last uncompleted operation or the next stage.'");
			КонецЕсли;
			
			ЭтоИзменениеВнутриОчереди = Выборка.Начата
				Или Не Выборка.ЭтоПерваяОперация;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Отказ);
	Результат.Вставить("ТекстСообщения", ТекстСообщения);
	Результат.Вставить("ЭтоИзменениеВнутриОчереди", ЭтоИзменениеВнутриОчереди);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтапДляПромежуточногоВыпуска(ПередЭтапом)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МИНИМУМ(Таблица.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Этап = &Этап
		|	И Таблица.ТипСвязи = &ТипСвязиПоследователь
		|	И Таблица.Ссылка.Проведен
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Таблица.Ссылка) = 1
		|	И МИНИМУМ(Таблица.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))");
	Запрос.УстановитьПараметр("Этап", ПередЭтапом);
	Запрос.УстановитьПараметр("ТипСвязиПоследователь", ТипСвязиПоследователь());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

// Отменить часть этапа.
// 
// Параметры:
//  ДанныеПартии - см. ДанныеПартииПроизводства
//  ДокументОбъект - ДокументОбъект.ЭтапПроизводства2_2
//  ИдентификаторОперации - Число
//
Процедура УдалитьПлановыеСтроки(ДанныеПартии, ДокументОбъект)
	
	Исключения = НоменклатураДеления(ДокументОбъект.Ссылка);
	ИсключенияОбеспечение = Новый Структура("Номенклатура, Характеристика, Склад, Назначение");
	ИсключенияИзделия = Новый Структура("Номенклатура, Характеристика, Получатель, Назначение");
	
	СтруктураПоиска = Новый Структура("Отменено", Ложь);
	Для каждого Строка Из ДокументОбъект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска) Цикл
		Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			Продолжить;
		Иначе
			ЗаполнитьЗначенияСвойств(ИсключенияОбеспечение, Строка);
			Если Исключения.Обеспечение.НайтиСтроки(ИсключенияОбеспечение).ВГраница() <> -1 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ДокументОбъект.ОбеспечениеМатериаламиИРаботами.Удалить(Строка);
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Произведено, Отменено", Ложь, Ложь);
	Для каждого Строка Из ДокументОбъект.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
		ЗаполнитьЗначенияСвойств(ИсключенияИзделия, Строка);
		Если Исключения.Изделия.НайтиСтроки(ИсключенияИзделия).ВГраница() <> -1 Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.ВыходныеИзделия.Удалить(Строка);
	КонецЦикла;
	Для каждого Строка Из ДокументОбъект.ВыходныеИзделияСерии.НайтиСтроки(СтруктураПоиска) Цикл
		ЗаполнитьЗначенияСвойств(ИсключенияИзделия, Строка);
		Если Исключения.Изделия.НайтиСтроки(ИсключенияИзделия).ВГраница() <> -1 Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.ВыходныеИзделияСерии.Удалить(Строка);
	КонецЦикла;
	Для каждого Строка Из ДокументОбъект.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска) Цикл
		ДокументОбъект.ПобочныеИзделия.Удалить(Строка);
	КонецЦикла;
	Для каждого Строка Из ДокументОбъект.ПобочныеИзделияСерии.НайтиСтроки(СтруктураПоиска) Цикл
		ДокументОбъект.ПобочныеИзделияСерии.Удалить(Строка);
	КонецЦикла;
	
	ПараметрыПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(
		ДокументОбъект.Подразделение);
	ТрудозатратыВОперациях = ПараметрыПодразделения.ИспользоватьПооперационноеУправление
		И ДокументОбъект.ОперацияКакРаспоряжениеВыработки;
	
	Если Не ТрудозатратыВОперациях Тогда
		СтруктураПоиска = Новый Структура("Выполнено, Отменено", Ложь, Ложь);
		Для каждого Строка Из ДокументОбъект.Трудозатраты.НайтиСтроки(СтруктураПоиска) Цикл
			ДокументОбъект.Трудозатраты.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоследнююОперацию(ДокументОбъект, ИдентификаторОперации, МенеджерВременныхТаблиц)
	
	ИдентификаторПервойОперации = 0;
	ПерваяОперация = Неопределено;
	ИдентификаторПоследнейОперации = 0;
	ПоследняяОперация = Неопределено;
	ОтмененоПоследняяОперация = 0;
	Предшественник = Неопределено;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Реквизиты.ИдентификаторПервойОперации КАК ИдентификаторПервойОперации,
		|	Реквизиты.ПерваяОперация КАК ПерваяОперация,
		|	Реквизиты.ИдентификаторПоследнейОперации КАК ИдентификаторПоследнейОперации,
		|	Реквизиты.ОтмененоПоследняяОперация КАК ОтмененоПоследняяОперация,
		|	Реквизиты.Предшественник КАК Предшественник
		|ИЗ
		|	РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Этап = &Этап");
	ВыборкаРеквизиты = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Этап", ДокументОбъект.Ссылка);
	
	Если ИдентификаторОперации = 0 Тогда
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПерваяОперация.Операция              КАК Операция,
			|	ПерваяОперация.ИдентификаторОперации КАК ИдентификаторОперации,
			|	ПерваяОперация.ОперацийКНазначению   КАК ОперацийКНазначению
			|ИЗ
			|	ВТОчередьОпераций КАК ПерваяОперация
			|ГДЕ
			|	НЕ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			ВТОчередьОпераций КАК Предшественники
			|		ГДЕ
			|			Предшественники.НомерСледующейОперации = ПерваяОперация.НомерОперации)
			|УПОРЯДОЧИТЬ ПО
			|	ПерваяОперация.НомерОперации");
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
		
		ВыборкаОперация = МассивРезультатов[1].Выбрать();
		Если Не ВыборкаОперация.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторПоследнейОперации = ВыборкаОперация.ИдентификаторОперации;
		ПоследняяОперация = ВыборкаОперация.Операция;
		ОтмененоПоследняяОперация = ВыборкаОперация.ОперацийКНазначению;
	Иначе
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ТекущаяОперация.Операция                           КАК Операция,
			|	ТекущаяОперация.Начата                             КАК Начата,
			|	ТекущаяОперация.ОперацийКНазначению                КАК ОперацийКНазначению,
			|	ЕСТЬNULL(Предшественники.Операция, НЕОПРЕДЕЛЕНО)   КАК ОперацияПредшественник,
			|	ЕСТЬNULL(Предшественники.ИдентификаторОперации, 0) КАК ИдентификаторОперацииПредшественник
			|ИЗ
			|	ВТОчередьОпераций КАК ТекущаяОперация
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОчередьОпераций КАК Предшественники
			|	ПО ТекущаяОперация.НомерОперации = Предшественники.НомерСледующейОперации
			|ГДЕ
			|	ТекущаяОперация.ИдентификаторОперации = &ИдентификаторОперации");
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.УстановитьПараметр("ИдентификаторОперации", ИдентификаторОперации);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
		
		ВыборкаОперация = МассивРезультатов[1].Выбрать();
		Если Не ВыборкаОперация.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыборкаОперация.Начата
			Или ВыборкаОперация.ИдентификаторОперацииПредшественник = 0 Тогда
			ИдентификаторПоследнейОперации = ИдентификаторОперации;
			ПоследняяОперация = ВыборкаОперация.Операция;
			ОтмененоПоследняяОперация = ВыборкаОперация.ОперацийКНазначению;
		Иначе
			ИдентификаторПоследнейОперации = ВыборкаОперация.ИдентификаторОперацииПредшественник;
			ПоследняяОперация = ВыборкаОперация.ОперацияПредшественник;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаРеквизиты.Следующий() Тогда
		ИдентификаторПервойОперации = ВыборкаРеквизиты.ИдентификаторПервойОперации;
		ПерваяОперация = ВыборкаРеквизиты.ПерваяОперация;
		Предшественник = ВыборкаРеквизиты.Предшественник;
		
		Если ВыборкаРеквизиты.ИдентификаторПоследнейОперации = ИдентификаторПоследнейОперации Тогда
			ОтмененоПоследняяОперация = ОтмененоПоследняяОперация + ВыборкаРеквизиты.ОтмененоПоследняяОперация;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыДеления = НовыйРеквизитыДеления();
	РеквизитыДеления.ИдентификаторПервойОперации = ИдентификаторПервойОперации;
	РеквизитыДеления.ПерваяОперация = ПерваяОперация;
	РеквизитыДеления.ИдентификаторПоследнейОперации = ИдентификаторПоследнейОперации;
	РеквизитыДеления.ПоследняяОперация = ПоследняяОперация;
	РеквизитыДеления.ОтмененоПоследняяОперация = ОтмененоПоследняяОперация;
	РеквизитыДеления.Предшественник = Предшественник;
	
	ДокументОбъект.ИзменитьРеквизитыДеления(РеквизитыДеления);
	
КонецПроцедуры

Функция НовыйРеквизитыДеления()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПервойОперации", 0);
	Результат.Вставить("ПерваяОперация", Неопределено);
	Результат.Вставить("ИдентификаторПоследнейОперации", 0);
	Результат.Вставить("ПоследняяОперация", Неопределено);
	Результат.Вставить("ОтмененоПоследняяОперация", 0);
	Результат.Вставить("Предшественник", Неопределено);
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ЦепочкаЭтапов

Функция СоздатьЦепочкуЭтапов(ДанныеСпецификации)
	
	Результат = Новый Массив;
	
	РеквизитыШапки = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
		ДанныеСпецификации.Распоряжение,
		ДанныеСпецификации.НазначениеПродукция,
		ДанныеСпецификации.ПартияПроизводства,
		ДанныеСпецификации.ТипПроизводственногоПроцесса,
		ДанныеСпецификации.Спецификация);
	
	Для Индекс = 0 По ДанныеСпецификации.Этапы.Количество()-1 Цикл
		
		ДанныеЭтапа = ДанныеСпецификации.Этапы[Индекс];
				
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		ДанныеЗаполнения.Вставить("ДанныеСпецификации", ДанныеСпецификации);
		ДанныеЗаполнения.Вставить("ДанныеЭтапа", ДанныеЭтапа);
		
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДанныеЭтапа.ЭтапПроизводства);
		ДокументОбъект.УстановитьРежимПакетногоФормирования();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ПровестиСПонижениемСтатуса(ДокументОбъект);
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат.Добавить(ДокументОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьЦепочкуЭтаповПриДелении(ДанныеСпецификации, ВыходныеИзделияСерии, ПобочныеИзделияСерии, ДополнительныеРеквизиты, Параметры)
	
	Ссылки = Новый Массив;
	
	РеквизитыШапки = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
		ДанныеСпецификации.Распоряжение,
		ДанныеСпецификации.НазначениеПродукция,
		ДанныеСпецификации.ПартияПроизводства,
		ДанныеСпецификации.ТипПроизводственногоПроцесса,
		ДанныеСпецификации.Спецификация);
	
	ИменаРеквизитов = СтрРазделить("Статус,ПроизводствоОднойДатой,ДатаПроизводства,ФактическоеНачалоЭтапа", ",");
	
	Для Индекс = 0 По ДанныеСпецификации.Этапы.Количество()-1 Цикл
		
		ДанныеЭтапа = ДанныеСпецификации.Этапы[Индекс];
				
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
		ДанныеЗаполнения.Вставить("ДанныеСпецификации", ДанныеСпецификации);
		ДанныеЗаполнения.Вставить("ДанныеЭтапа", ДанныеЭтапа);
		ДанныеЗаполнения.Вставить("ВыходныеИзделияСерии",
			ВыходныеИзделияСерии.Скопировать(Новый Структура("Этап", ДанныеЭтапа.Этап)));
		ДанныеЗаполнения.Вставить("ПобочныеИзделияСерии",
			ПобочныеИзделияСерии.Скопировать(Новый Структура("Этап", ДанныеЭтапа.Этап)));
		
		ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДанныеЭтапа.ЭтапПроизводства);
		ДокументОбъект.УстановитьРежимПакетногоФормирования();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		Реквизиты = ДополнительныеРеквизиты.Получить(ДанныеЭтапа.Этап);
		Если Реквизиты <> Неопределено Тогда
			Для каждого Имя Из ИменаРеквизитов Цикл
				Если Реквизиты.Свойство(Имя) Тогда
					ДокументОбъект[Имя] = Реквизиты[Имя];
				КонецЕсли;
			КонецЦикла;
			Если Реквизиты.Свойство("РеквизитыДеления") Тогда
				ДокументОбъект.ИзменитьРеквизитыДеления(Реквизиты.РеквизитыДеления);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ПровестиСПонижениемСтатуса(ДокументОбъект);
		УстановитьПривилегированныйРежим(Ложь);
		
		Ссылки.Добавить(ДокументОбъект.Ссылка);
		
	КонецЦикла;
	
	Если Ссылки.ВГраница() <> -1 Тогда
		ПараметрыФормирования = ПараметрыФормированияЭтапов();
		ПараметрыФормирования.Распоряжения.Добавить(ДанныеСпецификации.Распоряжение);
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Параметры,
			"РезервироватьМатериалы, ЗаменятьМатериалыНаАналоги");
		
		ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(
			ПараметрыФормирования, Ссылки, Новый МенеджерВременныхТаблиц);
		
		Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
			РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Ссылки);
		КонецЕсли;
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(Ссылки);
		
		Если ИспользоватьОперацииВЭтапах() Тогда
			ДанныеОчереди = ДанныеДляРасчетаОчередиОпераций(Ссылки);
			
			Для каждого Ссылка Из Ссылки Цикл
				Если ДанныеОчереди[Ссылка].ТребуетсяРассчитать Тогда
					РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ДобавитьЗадание(Ссылка, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылки;
	
КонецФункции

// Формирует граф цепочки этапов по идентификатору цепочки
//  в качестве идентификатора может быть передан заказ на производство
//  или партия производства.
//
// Параметры:
//  Идентификатор		 - ДокументСсылка.ЗаказНаПроизводство2_2, СправочникСсылка.ПартииПроизводства - Идентификатор цепочки.
//  НаправлениеОбхода	 - Число - Направление обхода графа (1 - вперед, -1 - назад).
//
// Возвращаемое значение:
//  ТаблицаЗначений	 - см. описание функции Граф.
//
Функция ГрафЦепочкиЭтапов(Идентификатор, Знач НаправлениеОбхода = Неопределено) Экспорт
	
	// Схема запроса для получения связи этапов.
	// По умолчанию используется обход вперед по цепочке этапов заказа.
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Вершина,
		|	Таблица.Этап КАК СмежнаяВершина
		|ПОМЕСТИТЬ Ребра
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка.Распоряжение = &Идентификатор
		|	И Таблица.Ссылка.Проведен
		|	И Таблица.Этап.Распоряжение = &Идентификатор
		|	И Таблица.Этап.Проведен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2),
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение = &Идентификатор
		|	И Таблица.Проведен
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2) <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Распоряжение = &Идентификатор
		|	И ВЫРАЗИТЬ(Таблица.ПланироватьНеРанее КАК Документ.ЭтапПроизводства2_2).Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вершина
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вершины.Ссылка КАК Вершина,
		|	Ребра.СмежнаяВершина КАК СмежнаяВершина
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Вершины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Ребра КАК Ребра
		|		ПО Вершины.Ссылка = Ребра.Вершина
		|ГДЕ
		|	Вершины.Распоряжение = &Идентификатор
		|	И Вершины.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вершина");
	
	// Заменим идентификатор цепочки в зависимости от переданного параметра
	Если ТипЗнч(Идентификатор) = Тип("СправочникСсылка.ПартииПроизводства") Тогда
		
		Для каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
			Для каждого Оператор Из ПакетЗапроса.Операторы Цикл
				
				Для Индекс = 0 По Оператор.Отбор.Количество()-1 Цикл
					
					Если Найти(Оператор.Отбор[Индекс], ".Распоряжение") > 0 Тогда
						
						ТекстВыражения = СтрЗаменить(Оператор.Отбор[Индекс], 
								".Распоряжение", 
								".ПартияПроизводства");
								
						Оператор.Отбор[Индекс] = Новый ВыражениеСхемыЗапроса(ТекстВыражения);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для каждого Источник Из Оператор.Источники Цикл
					
					Для каждого Соединение Из Источник.Соединения Цикл
						
						Если Найти(Соединение.Условие, ".Распоряжение") > 0 Тогда
							
							ТекстВыражения = СтрЗаменить(Соединение.Условие, 
									".Распоряжение", 
									".ПартияПроизводства");
									
							Соединение.Условие = Новый ВыражениеСхемыЗапроса(ТекстВыражения);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// По направлению обхода настроим поля связи
	Если НаправлениеОбхода = УправлениеПроизводством.НаправлениеОбходаГрафаНазад() Тогда
		
		ПоляВершина = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти("Вершина").Поля;
		ПоляСмежнаяВершина = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти("СмежнаяВершина").Поля;
		
		ПоляВершина[0] = ПоляСмежнаяВершина[0];
		ПоляВершина[1] = ПоляСмежнаяВершина[1];
		
	КонецЕсли;

	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат УправлениеПроизводством.Граф(РезультатЗапроса);
	
КонецФункции

Функция ТекстЗапросаСписокДоступныхДляУдаленияЭтаповПроизводства() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.ПартияПроизводства КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ПартияПроизводства КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВТИсключаемыеЦепочки
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.ПартияПроизводства В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.ПартияПроизводства КАК ПартияПроизводства
	|			ИЗ
	|				ВТЭтапы КАК ВТЭтапы)
	|	И НЕ Т.Ссылка В (&МассивСсылок)
	|	И Т.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭтапы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТЭтапы КАК ВТЭтапы
	|ГДЕ
	|	НЕ ВТЭтапы.ПартияПроизводства В
	|				(ВЫБРАТЬ
	|					ВТИсключаемыеЦепочки.ПартияПроизводства
	|				ИЗ
	|					ВТИсключаемыеЦепочки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура РассчитатьСдвиги(СписокЭтапов) Экспорт
	
	Отбор = Новый Структура("НомерСледующегоЭтапа", 0);
	
	Очередь = СписокЭтапов.НайтиСтроки(Отбор);
	
	Пока Очередь.Количество() > 0 Цикл
		
		Вершина = Очередь[0];
		
		ДлительностьДоВыпуска = ?(Вершина.ДлительностьВСекундах > 0,
			Вершина.ДлительностьДоВыпуска + Вершина.ДлительностьВСекундах, Вершина.ДлительностьДоВыпуска + 0.0001);
		
		Отбор.НомерСледующегоЭтапа = Вершина.НомерЭтапа;
		
		Для каждого Узел Из СписокЭтапов.НайтиСтроки(Отбор) Цикл
			
			Узел.ДлительностьДоВыпуска = Макс(ДлительностьДоВыпуска, Узел.ДлительностьДоВыпуска);
			
			Если Очередь.Найти(Узел) = Неопределено Тогда
				Очередь.Добавить(Узел);
			КонецЕсли;
			
		КонецЦикла;
		
		Очередь.Удалить(0);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаЗаказа

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//		ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов -
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений:
//		* Заказ                - ДокументСсылка.ЗаказНаВнутреннееПотребление
//		* Номенклатура         - СправочникСсылка.Номенклатура
//		* Характеристика       - СправочникСсылка.ХарактеристикиНоменклатуры
//		* Склад                - СправочникСсылка.Склады
//		* Серия                - СправочникСсылка.СерииНоменклатуры
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(СписокРаспоряжений, ТипДвиженияЗапасов) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если Не ЗначениеЗаполнено(СписокРаспоряжений) Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Склад");
		Таблица.Колонки.Добавить("Серия");
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыКПоступлению.Распоряжение   КАК Заказ,
		|	ТоварыКПоступлению.Номенклатура   КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика КАК Характеристика,
		|	ТоварыКПоступлению.Склад          КАК Склад,
		|	ТоварыКПоступлению.Серия          КАК Серия,
		|	СУММА(ТоварыКПоступлению.КОформлениюПриход
		|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Обороты(&НачПериод,&КонПериод,,
		|		Распоряжение В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.Распоряжение,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика,
		|	ТоварыКПоступлению.Склад,
		|	ТоварыКПоступлению.Серия");
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыМатериаловВПроизводство",
		"Распоряжение В (&МассивРаспоряжений)", Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ПередачаВПереработку

Функция ТабличныеЧастиДляОформленияОтчетаПереработчика() Экспорт
	
	Результат = Новый Структура("ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами");
	
	Результат.ВыходныеИзделия =
		"ВЫБРАТЬ
		|	ВыходныеИзделияЭтапа.НомерСтроки                             КАК НомерСтроки,
		|	ВыходныеИзделияЭтапа.Ссылка                                  КАК Ссылка,
		|	ВыходныеИзделияЭтапа.КодСтроки                               КАК КодСтроки,
		|	ВыходныеИзделияЭтапа.Ссылка.НомерСледующегоЭтапа = 0         КАК ЭтоВыпускающийЭтап,
		|	ВыходныеИзделияЭтапа.Номенклатура                            КАК Номенклатура,
		|	ВыходныеИзделияЭтапа.Характеристика                          КАК Характеристика,
		|	ВыходныеИзделияЭтапа.Назначение                              КАК Назначение,
		|	ВыходныеИзделияЭтапа.Получатель                              КАК Получатель,
		|	ВыходныеИзделияЭтапа.СписатьНаРасходы                        КАК СписатьНаРасходы,
		|	ВыходныеИзделияЭтапа.СтатьяРасходов                          КАК СтатьяРасходов,
		|	ВыходныеИзделияЭтапа.АналитикаРасходов                       КАК АналитикаРасходов,
		|	ВыходныеИзделияЭтапа.АналитикаАктивовПассивов                КАК АналитикаАктивовПассивов,
		|	ВыходныеИзделияЭтапа.НастройкаСчетовУчета                    КАК НастройкаСчетовУчета,
		|	ВыходныеИзделияЭтапа.Упаковка                                КАК Упаковка,
		|	ВыходныеИзделияЭтапа.ДоляСтоимости                           КАК ДоляСтоимости,
		|	ВыходныеИзделияЭтапа.ДоляСтоимостиНаЕдиницу                  КАК ДоляСтоимостиНаЕдиницу,
		|	ВыходныеИзделияЭтапа.Количество                              КАК Количество,
		|	ВыходныеИзделияЭтапа.КоличествоУпаковок                      КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделияЭтапа
		|ГДЕ
		|	ВыходныеИзделияЭтапа.Ссылка В(&Этапы)
		|	И НЕ ВыходныеИзделияЭтапа.Отменено
		|";
	
	ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделияЭтапа";
	ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
												|	//&СоединениеШтучныйТоварВМернойЕдинице";
	Результат.ВыходныеИзделия =
		СтрЗаменить(Результат.ВыходныеИзделия, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Результат.ВыходныеИзделия, "ВыходныеИзделияЭтапа", ПараметрыПрименения);	
	
	Результат.ПобочныеИзделия =
		"ВЫБРАТЬ
		|	ПобочныеИзделияЭтапа.НомерСтроки                             КАК НомерСтроки,
		|	ПобочныеИзделияЭтапа.Ссылка                                  КАК Ссылка,
		|	ПобочныеИзделияЭтапа.КодСтроки                               КАК КодСтроки,
		|	ПобочныеИзделияЭтапа.Ссылка.НомерСледующегоЭтапа = 0         КАК ЭтоВыпускающийЭтап,
		|	ПобочныеИзделияЭтапа.Номенклатура                            КАК Номенклатура,
		|	ПобочныеИзделияЭтапа.Характеристика                          КАК Характеристика,
		|	ПобочныеИзделияЭтапа.Назначение                              КАК Назначение,
		|	ПобочныеИзделияЭтапа.Получатель                              КАК Получатель,
		|	ПобочныеИзделияЭтапа.СписатьНаРасходы                        КАК СписатьНаРасходы,
		|	ПобочныеИзделияЭтапа.СтатьяРасходов                          КАК СтатьяРасходов,
		|	ПобочныеИзделияЭтапа.АналитикаРасходов                       КАК АналитикаРасходов,
		|	ПобочныеИзделияЭтапа.АналитикаАктивовПассивов                КАК АналитикаАктивовПассивов,
		|	ПобочныеИзделияЭтапа.НастройкаСчетовУчета                    КАК НастройкаСчетовУчета,
		|	ПобочныеИзделияЭтапа.Упаковка                                КАК Упаковка,
		|	ПобочныеИзделияЭтапа.СтатьяКалькуляции                       КАК СтатьяКалькуляции,
		|	ПобочныеИзделияЭтапа.Цена                                    КАК Цена,
		|	ПобочныеИзделияЭтапа.Количество                              КАК Количество,
		|	ПобочныеИзделияЭтапа.КоличествоУпаковок                      КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделияЭтапа
		|ГДЕ
		|	ПобочныеИзделияЭтапа.Ссылка В(&Этапы)
		|	И НЕ ПобочныеИзделияЭтапа.Отменено
		|";
		
	ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделияЭтапа";
	ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
												|	//&СоединениеШтучныйТоварВМернойЕдинице";
	Результат.ПобочныеИзделия =
		СтрЗаменить(Результат.ПобочныеИзделия, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Результат.ПобочныеИзделия, "ПобочныеИзделияЭтапа", ПараметрыПрименения);	
	
	Результат.ОбеспечениеМатериаламиИРаботами =
		"ВЫБРАТЬ
		|	Обеспечение.НомерСтроки                КАК НомерСтроки,
		|	Обеспечение.Ссылка                     КАК Ссылка,
		|	Обеспечение.Номенклатура               КАК Номенклатура,
		|	Обеспечение.Характеристика             КАК Характеристика,
		|	
		|	ВЫБОР КОГДА Обеспечение.Обособленно ТОГДА
		|				Обеспечение.Назначение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                              КАК Назначение,
		|	
		|	Обеспечение.Упаковка                   КАК Упаковка,
		|	Обеспечение.СтатьяКалькуляции          КАК СтатьяКалькуляции,
		|	Обеспечение.Количество                 КАК Количество,
		|	Обеспечение.КоличествоУпаковок         КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
		|ГДЕ
		|	Обеспечение.Ссылка В(&Этапы)
		|	И НЕ Обеспечение.Отменено
		|";
		
	ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение";
	ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
												|	//&СоединениеШтучныйТоварВМернойЕдинице";
	Результат.ОбеспечениеМатериаламиИРаботами =
		СтрЗаменить(
			Результат.ОбеспечениеМатериаламиИРаботами,
			ТекстИсходнаяТаблица,
			ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(Результат.ОбеспечениеМатериаламиИРаботами, "Обеспечение", ПараметрыПрименения);	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЖурналДокументовПроизводства

// Возвращает таблицу используемых статусов документа учитывая зависимости от функциональных опций и иных параметров.
//
// Возвращаемое значение:
//  См. ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка
//
Функция СтатусыДокументаИзменяемыеИзСписка() Экспорт
		
	Таблица = ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка();
	
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Возврат Таблица;
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭтапПроизводства2_2.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|ГДЕ
		|	НЕ ЭтапПроизводства2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
		|	И (ЭтапПроизводства2_2.Организация = &Организация
		|		ИЛИ &ВсеОрганизации)
		|	И (ЭтапПроизводства2_2.Подразделение = &Подразделение
		|		ИЛИ &ВсеПодразделения)";
	
	Запрос.УстановитьПараметр("ВсеОрганизации", Не ЗначениеЗаполнено(Параметры.Организация));
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ВсеПодразделения", Не ЗначениеЗаполнено(Параметры.Подразделение));
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	ТекстГиперссылки = НСтр("ru = 'Этапы производства';
							|en = 'Production stages'");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			"Документ.ЭтапПроизводства2_2.Форма.Диспетчирование");
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			"Документ.ЭтапПроизводства2_2.Форма.Диспетчирование");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область МодификацияДанныхСпецификации

Процедура ПодготовитьДанныеСпецификацииКСозданиюЭтапов(ДанныеСпецификации, ДанныеПартии) Экспорт
	
	// Добавление полей
	ДанныеСпецификации.Вставить("Распоряжение", ДанныеПартии.Распоряжение);
	ДанныеСпецификации.Вставить("НазначениеПродукция", ДанныеПартии.НазначениеПродукция);
	ДанныеСпецификации.Вставить("ПланироватьНеРанееКодЭтапа", 0);
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	
	Для Сч = 1 По 2 Цикл
		
		ИмяТаблицы = ?(Сч = 1, "ВыходныеИзделия", "ВозвратныеОтходы");
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("Назначение") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить(
				"Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("ЭтапПотребитель") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить(
				"ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("Получатель") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить("Получатель", Новый ОписаниеТипов(ТипыПолучатель));
			ДанныеСпецификации[ИмяТаблицы].ЗагрузитьКолонку(
				ДанныеСпецификации[ИмяТаблицы].ВыгрузитьКолонку("Склад"), "Получатель");
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("КодЭтапаПолучателя") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить(
				"КодЭтапаПолучателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("ДатаПроизводства") = Неопределено Тогда
			ДанныеСпецификации[ИмяТаблицы].Колонки.Добавить(
				"ДатаПроизводства", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
		КонецЕсли;
		
	КонецЦикла;
	
	// Кодирование этапов
	Если ДанныеСпецификации.Этапы.Колонки.Найти("КодЭтапа") = Неопределено Тогда
		
		ДанныеСпецификации.Этапы.Колонки.Добавить(
			"КодЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
		КодЭтапа = 1;
		Для каждого Строка Из ДанныеСпецификации.Этапы Цикл
			Строка.КодЭтапа = КодЭтапа;
			КодЭтапа = КодЭтапа + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("НаборыМатериаловИРабот") Тогда
		УправлениеДаннымиОбИзделиях.ОбновитьТаблицуНаборыМатериаловИРабот(ДанныеСпецификации, "МатериалыИУслуги");
	КонецЕсли;
	
	// Заполнение желаемой даты
	Если ДанныеСпецификации.Этапы.Колонки.Найти("ДатаОтгрузки") = Неопределено Тогда
		
		ДанныеСпецификации.Этапы.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
		ДанныеСпецификации.Этапы.Колонки.Добавить("НеОтгружатьЧастями", Новый ОписаниеТипов("Булево"));
		ДанныеСпецификации.Этапы.ЗаполнитьЗначения(Истина, "НеОтгружатьЧастями");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МИНИМУМ(
			|		ДОБАВИТЬКДАТЕ(
			|			Этапы.Распоряжение.НачатьНеРанее,
			|			СЕКУНДА,
			|			НормативныйГрафик.ДлительностьДоЗапуска)) КАК Дата
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК Этапы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафик
			|		ПО Этапы.Ссылка = НормативныйГрафик.ЭтапПроизводства
			|ГДЕ 
			|	Этапы.ПартияПроизводства = &ПартияПроизводства
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(Этапы.Ссылка) > 0");
		Запрос.УстановитьПараметр("ПартияПроизводства", ДанныеПартии.ПартияПроизводства);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НачальнаяДата = Выборка.Дата;
			Если НачальнаяДата < ТекущаяДатаСеанса() Тогда
				НачальнаяДата = ТекущаяДатаСеанса();
			КонецЕсли;
			
			ДанныеСпецификации.Этапы.Сортировать("НомерЭтапа, НомерСледующегоЭтапа");
			
			СтруктураПоиска = Новый Структура("НомерЭтапа");
			Для Индекс = 0 По ДанныеСпецификации.Этапы.Количество()-1 Цикл
				
				Этап = ДанныеСпецификации.Этапы[Индекс];
				
				Если ДанныеСпецификации.Этапы.Найти(Этап.НомерЭтапа, "НомерСледующегоЭтапа") = Неопределено Тогда
					Этап.ДатаОтгрузки = НачальнаяДата;
				КонецЕсли;
				Если ЗначениеЗаполнено(Этап.ДатаОтгрузки )
						И Этап.НомерСледующегоЭтапа <> 0 Тогда
					
					СтруктураПоиска.НомерЭтапа = Этап.НомерСледующегоЭтапа;
					Для каждого СледующийЭтап Из ДанныеСпецификации.Этапы.НайтиСтроки(СтруктураПоиска) Цикл
						Если ЗначениеЗаполнено(СледующийЭтап.ДатаОтгрузки) Тогда
							СледующийЭтап.ДатаОтгрузки = Мин(
								СледующийЭтап.ДатаОтгрузки,
								Этап.ДатаОтгрузки + Этап.ДлительностьЭтапаВСекундах);
						Иначе
							СледующийЭтап.ДатаОтгрузки =
								Этап.ДатаОтгрузки + Этап.ДлительностьЭтапаВСекундах;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПартии.ДинамическаяСтруктура Тогда
		// Нет производимых в процессе полуфабрикатов
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Истина);
		Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска) Цикл
			Строка.ПроизводитсяВПроцессе = Ложь;
			Строка.Производится = Ложь;
			Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
		КонецЦикла;
	Иначе
		// Производимые полуфабрикаты обеспечиваются обособленно
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Истина);
		СтруктураПоиска.Вставить("СпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации);
		СтруктураПоиска.Вставить("Обособленно", Ложь);
		Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска) Цикл
			Строка.Обособленно = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьДанныеСпецификаций(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСпецификации),
		ДанныеПартии.Распоряжение);
	
	// Связывание данных по выпуску ПФ на этапе
	Если ДанныеСпецификации.ВозвратныеОтходы.Количество() > 0 Тогда
		ПоляГруппировки = Новый Структура("Номенклатура,Характеристика");
		
		Расчеты = Новый ТаблицаЗначений;
		Расчеты.Колонки.Добавить("Номенклатура");
		Расчеты.Колонки.Добавить("Характеристика");
		Расчеты.Индексы.Добавить("Номенклатура,Характеристика");
		
		Полуфабрикаты = Новый ТаблицаЗначений;
		Полуфабрикаты.Колонки.Добавить("Номенклатура");
		Полуфабрикаты.Колонки.Добавить("Характеристика");
		Полуфабрикаты.Колонки.Добавить("НомерЭтапа"); 
		Полуфабрикаты.Колонки.Добавить("ГруппаСтрок"); // 0 - приходы, 1 - расходы
		Полуфабрикаты.Колонки.Добавить("Строка");
		Полуфабрикаты.Колонки.Добавить("Количество");
		Полуфабрикаты.Колонки.Добавить("СтрокаЭтапы");
		
		ДанныеСпецификации.МатериалыИУслуги.Индексы.Добавить("Номенклатура,Характеристика");
		ДанныеСпецификации.Этапы.Индексы.Добавить("Этап");
		
		Для каждого СтрокаИзделие Из ДанныеСпецификации.ВозвратныеОтходы Цикл
			ДанныеЭтапаИзделия = ДанныеСпецификации.Этапы.Найти(СтрокаИзделие.Этап, "Этап");
			Если ДанныеЭтапаИзделия = Неопределено Или ДанныеЭтапаИзделия.НомерСледующегоЭтапа = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПоляГруппировки, СтрокаИзделие);
			
			Если Расчеты.НайтиСтроки(ПоляГруппировки).ВГраница() <> -1 Тогда
				Полуфабрикат = Полуфабрикаты.Добавить();
				ЗаполнитьЗначенияСвойств(Полуфабрикат, СтрокаИзделие);
				Полуфабрикат.Строка = СтрокаИзделие;
				Полуфабрикат.НомерЭтапа = ДанныеЭтапаИзделия.НомерЭтапа;
				Полуфабрикат.ГруппаСтрок = 0;
				Полуфабрикат.Количество = СтрокаИзделие.Количество;
			Иначе
				ЭтоПолуфабрикат = Ложь;
				НайденныеПолуфабрикаты = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(ПоляГруппировки);
				Для каждого НайденныйПолуфабрикат Из НайденныеПолуфабрикаты Цикл
					// ПФ, производимые в процессе, не закрываются побочным выпуском
					ПроизводитсяПоСпецификации = НайденныйПолуфабрикат.ПроизводитсяВПроцессе
						И НайденныйПолуфабрикат.СпособПолученияМатериала <> Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе;
					// В нединамических заказах связь по выпуску на этапе строго по соответствующей настройке РС
					ОграниченПоТипуЗаказа = Не ДанныеПартии.ДинамическаяСтруктура
						И НайденныйПолуфабрикат.СпособПолученияМатериала <> Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе;
					Если ПроизводитсяПоСпецификации
						Или ОграниченПоТипуЗаказа Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеЭтапаПолуфабриката = ДанныеСпецификации.Этапы.Найти(НайденныйПолуфабрикат.Этап, "Этап");
					Если ДанныеЭтапаПолуфабриката = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЭтоПолуфабрикат = Истина;
					Полуфабрикат = Полуфабрикаты.Добавить();
					ЗаполнитьЗначенияСвойств(Полуфабрикат, СтрокаИзделие);
					Полуфабрикат.Строка = НайденныйПолуфабрикат;
					Полуфабрикат.НомерЭтапа = ДанныеЭтапаПолуфабриката.НомерЭтапа;
					Полуфабрикат.ГруппаСтрок = 1;
					Полуфабрикат.Количество = НайденныйПолуфабрикат.Количество;
					Полуфабрикат.СтрокаЭтапы = ДанныеЭтапаПолуфабриката;
				КонецЦикла;
				Если ЭтоПолуфабрикат Тогда 
					Полуфабрикат = Полуфабрикаты.Добавить();
					ЗаполнитьЗначенияСвойств(Полуфабрикат, СтрокаИзделие);
					Полуфабрикат.Строка = СтрокаИзделие;
					Полуфабрикат.НомерЭтапа = ДанныеЭтапаИзделия.НомерЭтапа;
					Полуфабрикат.ГруппаСтрок = 0;
					Полуфабрикат.Количество = СтрокаИзделие.Количество;
					ЗаполнитьЗначенияСвойств(Расчеты.Добавить(), СтрокаИзделие);
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
		
		Полуфабрикаты.Сортировать("Номенклатура, Характеристика, ГруппаСтрок, НомерЭтапа", Новый СравнениеЗначений);
		
		ПоляГруппировки.Номенклатура = Неопределено;
		ПоляГруппировки.Характеристика = Неопределено;
		
		ИндексИзделия = -1;
		ГраницаИзделия = -1;
		
		Для ТекИндекс = 0 По Полуфабрикаты.Количество() - 1 Цикл
			ТекСтрока = Полуфабрикаты[ТекИндекс];
			
			Если ПоляГруппировки.Номенклатура <> ТекСтрока.Номенклатура
					Или ПоляГруппировки.Характеристика <> ТекСтрока.Характеристика Тогда
				ЗаполнитьЗначенияСвойств(ПоляГруппировки, ТекСтрока);
				ИндексИзделия = ТекИндекс;
				ГраницаИзделия = -1;
			КонецЕсли;
			Если ТекСтрока.ГруппаСтрок = 0 Тогда
				ГраницаИзделия = ТекИндекс;
				Продолжить;
			КонецЕсли;
			
			СтрокаМатериал = ТекСтрока;
			
			Пока ГраницаИзделия >= ИндексИзделия Цикл
				СтрокаИзделие = Полуфабрикаты[ИндексИзделия];
				
				Если СтрокаМатериал.НомерЭтапа <= СтрокаИзделие.НомерЭтапа Тогда
					Прервать;
				КонецЕсли; 
				
				Распределено = Мин(СтрокаМатериал.Количество, СтрокаИзделие.Количество);
				
				Если СтрокаИзделие.Строка.Количество > Распределено Тогда
					НоваяСтрока = ДанныеСпецификации.ВозвратныеОтходы.Вставить(
						ДанныеСпецификации.ВозвратныеОтходы.Индекс(СтрокаИзделие.Строка)+1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделие.Строка);
					НоваяСтрока.Количество = Распределено;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество
						* НоваяСтрока.ДанныеУпаковки.Знаменатель
						/ НоваяСтрока.ДанныеУпаковки.Числитель;
					
					СтрокаИзделие.Строка.Количество = СтрокаИзделие.Строка.Количество - Распределено;
					СтрокаИзделие.Строка.КоличествоУпаковок = СтрокаИзделие.Строка.Количество
						* СтрокаИзделие.Строка.ДанныеУпаковки.Знаменатель
						/ СтрокаИзделие.Строка.ДанныеУпаковки.Числитель;
					
					СтрокаЗаполнить = НоваяСтрока;
				Иначе
					СтрокаЗаполнить = СтрокаИзделие.Строка;
				КонецЕсли;
				
				СтрокаЗаполнить.Получатель = ?(СтрокаМатериал.Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа,
					СтрокаМатериал.Строка.ПодразделениеЭтапа,
					СтрокаМатериал.Строка.Склад);
				СтрокаЗаполнить.Назначение = СтрокаМатериал.Строка.Назначение;
				Если СтрокаМатериал.Строка.Назначение = СтрокаМатериал.СтрокаЭтапы.Назначение Тогда
					СтрокаЗаполнить.ЭтапПотребитель = СтрокаМатериал.СтрокаЭтапы.ЭтапПроизводства;
				КонецЕсли;
				
				СтрокаИзделие.Количество = СтрокаИзделие.Количество - Распределено;
				Если СтрокаИзделие.Количество = 0 Тогда
					ИндексИзделия = ИндексИзделия + 1;
				КонецЕсли;
				
				СтрокаМатериал.Количество = СтрокаМатериал.Количество - Распределено;
				Если СтрокаМатериал.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет данные спецификаций
// 
// Параметры:
//  ДанныеСпецификаций - Массив из Структура - массив из структур:
//    * Этапы - ТаблицаЗначений - 
//    * МатериалыИУслуги - ТаблицаЗначений - 
//    * ВходящиеИзделия - ТаблицаЗначений - 
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ
Процедура ДополнитьДанныеСпецификаций(ДанныеСпецификаций, Распоряжение)
	
	СхемыОбособления = Документы.ЗаказНаПроизводство2_2.СхемыОбособленияЗаказов(Распоряжение);
	
	ЭтапыПоКодам = Новый Соответствие;
	ЗаполнитьНазначения = Новый Массив;
	ЗаполнитьПлНеРанее = Новый Массив;
	
	ЗаполнитьНастройкуСчетовУчета = Новый ТаблицаЗначений;
	ЗаполнитьНастройкуСчетовУчета.Колонки.Добавить("СтрокаТаблицыИзделий",
		Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	ЗаполнитьНастройкуСчетовУчета.Колонки.Добавить("СтатьяРасходов",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	
	ИменаТЧ = СтрРазделить("ВыходныеИзделия,ВозвратныеОтходы", ",");
	
	НазначениеПобочногоВыпуска = Неопределено;
	НазначениеПродукцияРазборка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "НазначениеПродукция");
	
	ПартииПроизводства = Новый ТаблицаЗначений();
	ПартииПроизводства.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	ПартииПроизводства.Колонки.Добавить("ПартияПроизводства", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства"));
	ПартииПроизводства.Колонки.Добавить("ДанныеСпецификацииИндекс", Новый ОписаниеТипов("Число"));
	
	Для Каждого Реквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		ПартииПроизводства.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из Метаданные.Справочники.ПартииПроизводства.ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		ПартииПроизводства.Колонки.Добавить(ТабличнаяЧасть.Имя, Новый ОписаниеТипов("ТаблицаЗначений"));
	КонецЦикла;
	
	Для ИндексДанные = 0 По ДанныеСпецификаций.ВГраница() Цикл
		
		ДанныеСпецификации = ДанныеСпецификаций[ИндексДанные];
		
		// Добавление полей
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2");
		ДанныеСпецификации.Этапы.Колонки.Добавить("Распоряжение", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства");
		ДанныеСпецификации.Этапы.Колонки.Добавить("ПартияПроизводства", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
		ДанныеСпецификации.Этапы.Колонки.Добавить("НазначениеПродукция", ОписаниеТипов);
		ДанныеСпецификации.Этапы.Колонки.Добавить("НазначениеПолуфабрикаты", ОписаниеТипов);
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2, Дата",,, Новый КвалификаторыДаты);
		ДанныеСпецификации.Этапы.Колонки.Добавить("ПланироватьНеРанее", Новый ОписаниеТипов("Булево"));
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2");
		ДанныеСпецификации.Распоряжение = ОписаниеТипов.ПривестиЗначение(ДанныеСпецификации.Распоряжение);
		
		Если ДанныеСпецификации.Этапы.Колонки.Найти("ЭтапПроизводства") = Неопределено Тогда
			
			ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
			ДанныеСпецификации.Этапы.Колонки.Добавить("ЭтапПроизводства", ОписаниеТипов);
			
			ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
			ДанныеСпецификации.Этапы.Колонки.Добавить("Назначение", ОписаниеТипов);
			
			ОписаниеТипов = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла);
			ДанныеСпецификации.Этапы.Колонки.Добавить("НомерПартииЗапуска", ОписаниеТипов);
			ДанныеСпецификации.Этапы.Колонки.Добавить("НомерЭтапаВПартииЗапуска", ОписаниеТипов);
			
		КонецЕсли;
		
		Если ДанныеСпецификации.ВыходныеИзделия.Колонки.Найти("СтатьяРасходов") = Неопределено Тогда
			ТипыСтатей = Новый Массив;
			ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
			ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
			ОписаниеТипов = Новый ОписаниеТипов(ТипыСтатей);
			ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("СтатьяРасходов", ОписаниеТипов);
		КонецЕсли;
		Если ДанныеСпецификации.ВыходныеИзделия.Колонки.Найти("НастройкаСчетовУчета") = Неопределено Тогда
			ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций");
			ДанныеСпецификации.ВыходныеИзделия.Колонки.Добавить("НастройкаСчетовУчета", ОписаниеТипов);
		КонецЕсли;
		Если ДанныеСпецификации.ВозвратныеОтходы.Колонки.Найти("СтатьяРасходов") = Неопределено Тогда
			ТипыСтатей = Новый Массив;
			ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
			ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
			ОписаниеТипов = Новый ОписаниеТипов(ТипыСтатей);
			ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("СтатьяРасходов", ОписаниеТипов);
		КонецЕсли;
		Если ДанныеСпецификации.ВозвратныеОтходы.Колонки.Найти("НастройкаСчетовУчета") = Неопределено Тогда
			ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций");
			ДанныеСпецификации.ВозвратныеОтходы.Колонки.Добавить("НастройкаСчетовУчета", ОписаниеТипов);
		КонецЕсли;
		
		// Подготовка к созданию партии
		Если ДанныеСпецификации.Свойство("ПартияПроизводства")
			И ЗначениеЗаполнено(ДанныеСпецификации.ПартияПроизводства) Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ПартииПроизводства.Код КАК ПартияПроизводстваНомер,
				|	МАКСИМУМ(ЕСТЬNULL(Этапы.НомерЭтапаВПартииЗапуска, 0)) + 1 КАК НомерЭтапаВПартииЗапуска
				|ИЗ
				|	Справочник.ПартииПроизводства КАК ПартииПроизводства
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Этапы
				|	ПО ПартииПроизводства.Ссылка = Этапы.ПартияПроизводства
				|ГДЕ
				|	ПартииПроизводства.Ссылка = &Ссылка
				|СГРУППИРОВАТЬ ПО
				|	ПартииПроизводства.Код");
			Запрос.УстановитьПараметр("Ссылка", ДанныеСпецификации.ПартияПроизводства);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ПартияПроизводства = ДанныеСпецификации.ПартияПроизводства;
			ПартияПроизводстваНомер = Выборка.ПартияПроизводстваНомер;
			НомерЭтапаВПартииЗапуска = Выборка.НомерЭтапаВПартииЗапуска;
			
		Иначе
			
			ПартияПроизводства = Неопределено;
			ПартияПроизводстваНомер = -1;
			НомерЭтапаВПартииЗапуска = 1;
			
			ДанныеСпецификации.Вставить("ПартияПроизводства", Неопределено);
			ПоляПартии = ПоляПартии(ДанныеСпецификации, ДанныеСпецификации.ОсновноеИзделие,, ДанныеСпецификации);
			
			СтрокаПартия = ПартииПроизводства.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПартия, ПоляПартии);
			СтрокаПартия.ДанныеСпецификацииИндекс = ИндексДанные;
			
		КонецЕсли;
		
		// Заполнение этапов
		НазначениеПродукция = ДанныеСпецификации.НазначениеПродукция;
		СхемаОбособления = СхемыОбособления[Распоряжение][НазначениеПродукция];
		ДанныеСпецификации.Вставить("СхемаОбособления", СхемаОбособления);
		
		Для каждого ДанныеЭтапа Из ДанныеСпецификации.Этапы Цикл
			
			ДанныеЭтапа.Распоряжение = Распоряжение;
			ДанныеЭтапа.НазначениеПродукция = НазначениеПродукция;
			ДанныеЭтапа.ПартияПроизводства = ПартияПроизводства;
			
			Если ДанныеЭтапа.ЭтапПроизводства.Пустая() Тогда
				ДанныеЭтапа.ЭтапПроизводства = Документы.ЭтапПроизводства2_2.ПолучитьСсылку();
				ДанныеЭтапа.Назначение = Справочники.Назначения.ПолучитьСсылку();
				ДанныеЭтапа.НомерПартииЗапуска = ПартияПроизводстваНомер;
				ДанныеЭтапа.НомерЭтапаВПартииЗапуска = НомерЭтапаВПартииЗапуска;
				
				НомерЭтапаВПартииЗапуска = НомерЭтапаВПартииЗапуска + 1;
			КонецЕсли;
			
			НастройкиОбособления = ОбеспечениеПроизводства.НазначениеОбеспеченияЭтапаПроизводстваПоСхеме(
				СхемаОбособления,
				ДанныеЭтапа.Назначение);
			ДанныеЭтапа.НазначениеПолуфабрикаты = НастройкиОбособления.НазначениеПолуфабрикаты;
			
			ЭтапыПоКодам.Вставить(ДанныеЭтапа.КодЭтапа, ДанныеЭтапа);
			
		КонецЦикла;
		
		// Назначения материалов
		ЗаполнитьНазначениеМатериаловСпецификации(
			ДанныеСпецификации,
			ДанныеСпецификации.Этапы,
			СхемаОбособления,
			?(ДанныеСпецификации.Свойство("НазначенияМатериалов"), ДанныеСпецификации.НазначенияМатериалов, Неопределено));
		
		Для каждого ИмяТЧ Из ИменаТЧ Цикл
			Для каждого Строка Из ДанныеСпецификации[ИмяТЧ] Цикл
				// Подготовка к заполнению ссылок на этапы
				Если ЗначениеЗаполнено(Строка.КодЭтапаПолучателя) Тогда
					ЗаполнитьНазначения.Добавить(Строка);
				ИначеЕсли Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
					Строка.Назначение = Справочники.Назначения.ПустаяСсылка();
				ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Назначение) Тогда
					Если ДанныеСпецификации.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
						И ИмяТЧ = "ВыходныеИзделия" Тогда
						
						Строка.Назначение = НазначениеПродукцияРазборка;
						
					Иначе
						
						Если НазначениеПобочногоВыпуска = Неопределено Тогда
							// Подбор назначения для побочного выпуска
							НазначениеПобочногоВыпуска = Документы.ЭтапПроизводства2_2.НазначениеПоУмолчаниюДляПобочныхИзделий(Распоряжение);
						КонецЕсли;
						Строка.Назначение = НазначениеПобочногоВыпуска;
						
					КонецЕсли;
				КонецЕсли;
				
				// Подготовка к заполнению счетов учета
				Если ЗначениеЗаполнено(Строка.СтатьяРасходов)
					И ТипЗнч(Строка.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")
					И Не ЗначениеЗаполнено(Строка.НастройкаСчетовУчета) Тогда
					СтрокаЗаполнить = ЗаполнитьНастройкуСчетовУчета.Добавить();
					СтрокаЗаполнить.СтрокаТаблицыИзделий = Строка;
					СтрокаЗаполнить.СтатьяРасходов = Строка.СтатьяРасходов;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеСпецификации.ПланироватьНеРанееКодЭтапа) Тогда
			ЗаполнитьПлНеРанее.Добавить(ДанныеСпецификации);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ЗаполнитьНазначения Цикл
		Строка.ЭтапПотребитель = ЭтапыПоКодам[Строка.КодЭтапаПолучателя].ЭтапПроизводства;
		Строка.Назначение = ЭтапыПоКодам[Строка.КодЭтапаПолучателя].НазначениеПолуфабрикаты;
	КонецЦикла;
	Для каждого ДанныеСпецификации Из ЗаполнитьПлНеРанее Цикл
		Этап = ДанныеСпецификации.Этапы.Найти(1, "НомерЭтапа");
		Если Этап <> Неопределено Тогда
			Этап.ПланироватьНеРанее = ЭтапыПоКодам[ДанныеСпецификации.ПланироватьНеРанееКодЭтапа].ЭтапПроизводства;
		КонецЕсли;
	КонецЦикла;
	Если ЗаполнитьНастройкуСчетовУчета.Количество() > 0 Тогда
		Статьи = ЗаполнитьНастройкуСчетовУчета.Скопировать(, "СтатьяРасходов");
		Статьи.Свернуть("СтатьяРасходов");
		НастройкиСчетов = НастройкаСчетовУчетаСлужебныйВызовСервера.ДанныеНастроекСчетовУчетаПоУмолчанию(
			Статьи.ВыгрузитьКолонку("СтатьяРасходов"));
		
		Для каждого СтрокаЗаполнить Из ЗаполнитьНастройкуСчетовУчета Цикл
			Если НастройкиСчетов[СтрокаЗаполнить.СтатьяРасходов] <> Неопределено Тогда
				СтрокаЗаполнить.СтрокаТаблицыИзделий.НастройкаСчетовУчета = 
					НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(НастройкиСчетов[СтрокаЗаполнить.СтатьяРасходов].ДанныеНастройки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПартииПроизводства.Количество() <> 0 Тогда
		
		Справочники.ПартииПроизводства.СформироватьПартииПроизводстваДляСпискаЭтапов(ПартииПроизводства);
		
		Для Индекс = -ПартииПроизводства.Количество()+1 По 0 Цикл
			СтрокаПартия = ПартииПроизводства[-Индекс];
			Если СтрокаПартия.ПартияПроизводства.Пустая() Тогда
				// Партия не создана - цепочку документов создать нельзя
				ДанныеСпецификаций.Удалить(СтрокаПартия.ДанныеСпецификацииИндекс);
			Иначе
				ДанныеСпецификации = ДанныеСпецификаций[СтрокаПартия.ДанныеСпецификацииИндекс];
				ДанныеСпецификации.Вставить("ПартияПроизводства", СтрокаПартия.ПартияПроизводства);
				ДанныеСпецификации.Этапы.ЗаполнитьЗначения(СтрокаПартия.ПартияПроизводства, "ПартияПроизводства");
				ДанныеСпецификации.Этапы.ЗаполнитьЗначения(СтрокаПартия.Код, "НомерПартииЗапуска");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтапПроизводства2_2Локализация.ДополнитьДанныеСпецификаций(ДанныеСпецификаций);
	
КонецПроцедуры

Процедура ЗаполнитьНазначениеМатериаловСпецификации(ДанныеСпецификации, Этапы, СхемаОбособления, НазначенияМатериалов)
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Если ДанныеСпецификации.МатериалыИУслуги.Колонки.Найти("Назначение") = Неопределено Тогда
		ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("Назначение", ОписаниеТипов);
	КонецЕсли;
	Если ДанныеСпецификации.МатериалыИУслуги.Колонки.Найти("НазначениеОбеспечения") = Неопределено Тогда
		ДанныеСпецификации.МатериалыИУслуги.Колонки.Добавить("НазначениеОбеспечения", ОписаниеТипов);
	КонецЕсли;
	Если ДанныеСпецификации.ВходящиеИзделия.Колонки.Найти("Назначение") = Неопределено Тогда
		ДанныеСпецификации.ВходящиеИзделия.Колонки.Добавить("Назначение", ОписаниеТипов);
	КонецЕсли;
	Если ДанныеСпецификации.ВходящиеИзделия.Колонки.Найти("НазначениеОбеспечения") = Неопределено Тогда
		ДанныеСпецификации.ВходящиеИзделия.Колонки.Добавить("НазначениеОбеспечения", ОписаниеТипов);
	КонецЕсли;
	
	НазначенияМатериаловИзСхемы = (НазначенияМатериалов = Неопределено)
		ИЛИ НазначенияМатериалов.Количество() = 0;
	
	Если НазначенияМатериалов = Неопределено Тогда
		НазначенияМатериалов = Новый ТаблицаЗначений();
		НазначенияМатериалов.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		НазначенияМатериалов.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла()));
	КонецЕсли;
	
	Если НазначенияМатериаловИзСхемы Тогда
		НазначенияМатериалов.Добавить();
		НазначенияМатериалов[0].Коэффициент = 1;
	КонецЕсли;
	
	Для каждого Строка Из Этапы Цикл
		
		НастройкиОбособления = ОбеспечениеПроизводства.НазначениеОбеспеченияЭтапаПроизводстваПоСхеме(
			СхемаОбособления, Строка.Назначение);
		
		Если НазначенияМатериаловИзСхемы Тогда
			НазначенияМатериалов[0].Назначение = НастройкиОбособления.НазначениеМатериалы;
		КонецЕсли;
		
		ОбеспечениеПроизводства.ЗаполнитьНазначениеМатериаловСпецификации(
			ДанныеСпецификации,
			Строка.Этап,
			НазначенияМатериалов,
			НастройкиОбособления.НазначениеПолуфабрикаты);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаТоварыДокумента(Отбор, ХозяйственнаяОперация) Экспорт

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                                          КАК Распоряжение,
		|	Таблица.Номенклатура                                    КАК Номенклатура,
		|	Таблица.Характеристика                                  КАК Характеристика,
		|	ДанныеУчета.Назначение                                  КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя                       КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                                       КАК КодСтроки,
		|	ДанныеУчета.Серия                                       КАК Серия,
		|	Таблица.Количество                                      КАК Количество,
		|	Таблица.Упаковка                                        КАК Упаковка,
		|	ДАТАВРЕМЯ(1,1,1)                                        КАК ДатаОтгрузки,
		|	Таблица.Отменено                                        КАК Отменено,
		|	Таблица.СтатусУказанияСерий                             КАК СтатусУказанияСерий,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
		|	ЛОЖЬ                                                    КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                КАК Склад,
		|	Таблица.Цена * ЕСТЬNULL(Коэффициенты.КоэффициентПересчетаВВалютуУпр, 0) КАК Цена,
		|	Таблица.Сумма * ЕСТЬNULL(Коэффициенты.КоэффициентПересчетаВВалютуУпр, 0) КАК Сумма,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0)                    КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)                       КАК Заказано,
		|	ЛОЖЬ													КАК ПобочноеИзделие
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК Коэффициенты
		|	ПО Таблица.Ссылка.Валюта = Коэффициенты.Валюта
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И НЕ Таблица.Отменено
		|	И &Отбор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                          КАК Распоряжение,
		|	Таблица.Номенклатура                                    КАК Номенклатура,
		|	Таблица.Характеристика                                  КАК Характеристика,
		|	ДанныеУчета.Назначение                                  КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя                       КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                                       КАК КодСтроки,
		|	ДанныеУчета.Серия                                       КАК Серия,
		|	Таблица.Количество                                      КАК Количество,
		|	Таблица.Упаковка                                        КАК Упаковка,
		|	ДАТАВРЕМЯ(1,1,1)                                        КАК ДатаОтгрузки,
		|	Таблица.Отменено                                        КАК Отменено,
		|	Таблица.СтатусУказанияСерий                             КАК СтатусУказанияСерий,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
		|	ЛОЖЬ                                                    КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                КАК Склад,
		|	0														КАК Цена,
		|	0														КАК Сумма,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0)                    КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)                       КАК Заказано,
		|	ИСТИНА													КАК ПобочноеИзделие
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И НЕ Таблица.Отменено
		|	И &Отбор";
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ДанныеУчета.Назначение               КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя    КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Серия                        КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаОтгрузки                 КАК ДатаОтгрузки,
		|	ЛОЖЬ                                 КАК Отменено,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	Таблица.ВариантОбеспечения           КАК ВариантОбеспечения,
		|	Таблица.Обособленно                  КАК Обособленно,
		|	ЕСТЬNULL(Таблица.Ссылка.ПартияПроизводства.ГруппаПродукции,
		|				ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)) КАК ГруппаПродукции,
		|	Таблица.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|		И Таблица.Номенклатура   = ДанныеУчета.Номенклатура
		|		И Таблица.Характеристика = ДанныеУчета.Характеристика
		|		И Таблица.Серия          = ДанныеУчета.Серия
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И НЕ Таблица.Отменено
		|	И &Отбор";
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ДанныеУчета.Назначение               КАК Назначение,
		|	ДанныеУчета.НазначениеОтправителя    КАК НазначениеОтправителя,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	ДанныеУчета.Серия                    КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаОперации                 КАК ДатаОтгрузки,
		|	ЛОЖЬ                                 КАК Отменено,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
		|	ЛОЖЬ                                 КАК Обособленно,
		|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
		|	Таблица.Получатель                   КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка         = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки      = ДанныеУчета.КодСтроки
		|	
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И &Отбор";
		
		ТекстИсходнаяТаблица = "Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Таблица";
		ТекстСоединениеШтучныйТоварВМернойЕдинице = ТекстИсходнаяТаблица + "
													|	//&СоединениеШтучныйТоварВМернойЕдинице";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстИсходнаяТаблица, ТекстСоединениеШтучныйТоварВМернойЕдинице);
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Ошибка в процедуре %1. Обратитесь к администратору.';
								|en = 'Error in procedure %1. Please contact your administrator.'");
		
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ЭтапПроизводства2_2.ТекстЗапросаТоварыДокумента");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПараметрыПрименения = ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице();
	ПараметрыПрименения.КоличествоУпаковок = Ложь;
	ПараметрыПрименения.ШтучныйТоварВМерныхЕдиницах = Ложь;
	ПроизводствоСервер.ПрименитьНастройкиШтучногоТовараВМернойЕдинице(ТекстЗапроса, "Таблица", ПараметрыПрименения);
	
	ТекстОтбора = "ИСТИНА";
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		Для каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", ТекстОтбора);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция МаксимальнаяДатаВТЧ(КоллекцияСтрок, ПолеДата) Экспорт
	
	МаксимальнаяДата = '000101010000';
	
	Для каждого Строка Из КоллекцияСтрок Цикл 
		МаксимальнаяДата = Макс(МаксимальнаяДата, Строка[ПолеДата]);
	КонецЦикла;
	
	Возврат МаксимальнаяДата
	
КонецФункции

// Функция возвращает номер этапа на производство, который должен быть присвоен новому этапу.
//
// Параметры:
//  ПартияПроизводства	- ДокументСсылка.ЭтапПроизводства2_2 - идентификатор цепочки этапов.
//
// Возвращаемое значение:
//   - Число - номер этапа.
//
Функция НовыйНомерЭтапаВПартииЗапуска(ПартияПроизводства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЦепочкаЭтапов.НомерЭтапаВПартииЗапуска), 0) + 1 КАК СледующийНомерЭтапаВПартииЗапуска
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЦепочкаЭтапов
	|ГДЕ
	|	ЦепочкаЭтапов.ПартияПроизводства = &ПартияПроизводства
	|");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СледующийНомерЭтапаВПартииЗапуска;
	
КонецФункции

// Функция возвращает номер документа.
//
// Параметры:
//  Номер - Строка - Первая часть номера, номер распоряжения или пустая строка.
//  НомерПартииЗапуска	- Число - Номер партии запуска.
//  НомерЭтапаВПартииЗапуска - Число - Номер этапа в партии запуска.
//
// Возвращаемое значение:
//   - Строка - Номер документа.
//
Функция НомерДокумента(Номер, НомерПартииЗапуска, НомерЭтапаВПартииЗапуска) Экспорт
	
	Возврат Номер
			+ "."
			+ Формат(НомерПартииЗапуска, "ЧГ=0")
			+ "."
			+ Формат(НомерЭтапаВПартииЗапуска, "ЧГ=0");
	
КонецФункции

Функция ПараметрыРедактированияЭтапа() Экспорт
	
	ПараметрыРедактированияЭтапа = УправлениеПроизводством.ПараметрыРедактированияЭтапа("Объект");
	Возврат ПараметрыРедактированияЭтапа;
	
КонецФункции

// Возвращает нормативные данные спецификации для заданной партии.
// 
// Параметры:
//  ПартияПроизводства - см. ДанныеПартииПроизводства
//  ПолучатьМатериалыПоТребованию - Булево
//  ПереченьДанных - Строка
//  Отбор - Структура
// 
// Возвращаемое значение:
//  см. Справочники.РесурсныеСпецификации.ДанныеСпецификацииКонструктор.
//
Функция ПолучитьНормативыПоСпецификации(ПартияПроизводства, ПолучатьМатериалыПоТребованию, ПереченьДанных = Неопределено, Отбор = Неопределено) Экспорт
	
	Если ПартияПроизводства.Количество = 0
		Или ПартияПроизводства.Номенклатура.Пустая()
		Или ПартияПроизводства.Спецификация.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Начальная/конечная операция этапов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Документ.Этап                            КАК Этап,
		|	Реквизиты.ИдентификаторПервойОперации    КАК ИдентификаторПервойОперации,
		|	Реквизиты.ИдентификаторПоследнейОперации КАК ИдентификаторПоследнейОперации,
		|	Реквизиты.ОтмененоПоследняяОперация      КАК ОтмененоПоследняяОперация
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Документ
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыДеленияЭтаповПроизводства КАК Реквизиты
		|	ПО Документ.Ссылка = Реквизиты.Этап
		|ГДЕ
		|	Документ.ПартияПроизводства = &ПартияПроизводства
		|	И Документ.Проведен
		|	И (&ВсеЭтапы ИЛИ Документ.Этап = &Этап)");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства.ПартияПроизводства);
	Если ТипЗнч(Отбор) = Тип("Структура") И Отбор.Свойство("Этап") Тогда
		Запрос.УстановитьПараметр("ВсеЭтапы", Ложь);
		Запрос.УстановитьПараметр("Этап", Отбор.Этап);
	Иначе
		Запрос.УстановитьПараметр("ВсеЭтапы", Истина);
		Запрос.УстановитьПараметр("Этап", Неопределено);
	КонецЕсли;
	ВыборкаОграниченияПоОперациям = Запрос.Выполнить().Выбрать();
	
	// Получение данных спецификации
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ПартияПроизводства,
		"Распоряжение, НачалоПроизводства, ПодразделениеДиспетчер, НаправлениеДеятельности, Спецификация, Номенклатура, Характеристика, Количество");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.ЗаказНаПроизводство2_2.СоздатьВтСпособыПолученияМатериалов2_2(
		МенеджерВременныхТаблиц,
		ПартияПроизводства.Распоряжение);
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
		ПереченьДанных,
		МенеджерВременныхТаблиц);
	
	ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
	ПараметрыВыборки.СпособРасчетаМатериалов             = ?(ПолучатьМатериалыПоТребованию,
		Перечисления.СпособыРасчетаМатериалов.МаксимальноеПотребление,
		Перечисления.СпособыРасчетаМатериалов.МинимальноеПотребление);
	ПараметрыВыборки.РассчитыватьДолиСтоимостиВыходныхИзделий = Истина;
	ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.Использовать = Истина;
	ПараметрыВыборки.ПереопределениеНастройкиПартииВыпуска.ВыпускПроизвольнымиПорциями = Истина;
	ПараметрыВыборки.ПолучитьПромежуточныйВыпуск = Истина;
	
	Если ВыборкаОграниченияПоОперациям.Количество() > 0
		И ПараметрыВыборки.ПереченьДанных.Найти("Операции") = Неопределено Тогда
		ПараметрыВыборки.ПереченьДанных.Добавить("Операции");
	КонецЕсли;
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
		ДанныеПоНоменклатуре,
		ПараметрыВыборки,
		Отбор);
	
	Если ПартияПроизводства.ДинамическаяСтруктура Тогда
		// Нет производимых в процессе полуфабрикатов
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Истина);
		Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска) Цикл
			Строка.ПроизводитсяВПроцессе = Ложь;
			Строка.Производится = Ложь;
			Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
		КонецЦикла;
	Иначе
		// Производимые полуфабрикаты обеспечиваются обособленно
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Истина);
		СтруктураПоиска.Вставить("СпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации);
		СтруктураПоиска.Вставить("Обособленно", Ложь);
		Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска) Цикл
			Строка.Обособленно = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Сокращение данных по операциям
	Если ВыборкаОграниченияПоОперациям.Количество() > 0 Тогда
		
		ДанныеСпецификации.Операции.Индексы.Добавить("Этап, НомерСледующейОперации");
		ДанныеСпецификации.Операции.Индексы.Добавить("Этап, НомерОперации");
		
		ИменаТаблиц = СтрРазделить("МатериалыИУслуги,ВыходныеИзделия,ВозвратныеОтходы,Трудозатраты", ",");
		Для каждого Таблица Из ИменаТаблиц Цикл
			Если Не ДанныеСпецификации.Свойство(Таблица) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеСпецификации[Таблица].Индексы.Добавить("Этап, Операция");
		КонецЦикла;
		
		СтруктураПоискаОперация = Новый Структура("Этап, ИдентификаторОперации");
		СтруктураПоискаПредшественники = Новый Структура("Этап, НомерСледующейОперации");
		СтруктураПоискаПоследователи = Новый Структура("Этап, НомерОперации");
		СтруктураПоискаДанныеОперации = Новый Структура("Этап, Операция");
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Пока ВыборкаОграниченияПоОперациям.Следующий() Цикл
			
			СтруктураПоискаОперация.Этап = ВыборкаОграниченияПоОперациям.Этап;
			СтруктураПоискаПредшественники.Этап = ВыборкаОграниченияПоОперациям.Этап;
			СтруктураПоискаПоследователи.Этап = ВыборкаОграниченияПоОперациям.Этап;
			СтруктураПоискаДанныеОперации.Этап = ВыборкаОграниченияПоОперациям.Этап;
			
			Если ВыборкаОграниченияПоОперациям.ИдентификаторПервойОперации <> 0 Тогда
				СтруктураПоискаОперация.ИдентификаторОперации = ВыборкаОграниченияПоОперациям.ИдентификаторПервойОперации;
				НайденныеСтроки = ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаОперация);
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					СтруктураПоискаПредшественники.НомерСледующейОперации = НайденныеСтроки[0].НомерОперации;
					ОчередьОпераций = ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаПредшественники);
					Пока ОчередьОпераций.ВГраница() <> -1 Цикл
						СтрокаОперация = ОчередьОпераций[0];
						СтруктураПоискаДанныеОперации.Операция = СтрокаОперация.Операция;
						
						Для каждого Таблица Из ИменаТаблиц Цикл
							Если Не ДанныеСпецификации.Свойство(Таблица) Тогда
								Продолжить;
							КонецЕсли;
							Для каждого Строка Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоискаДанныеОперации) Цикл
								ДанныеСпецификации[Таблица].Удалить(Строка);
							КонецЦикла;
						КонецЦикла;
						
						СтруктураПоискаПредшественники.НомерСледующейОперации = СтрокаОперация.НомерОперации;
						Для каждого Строка Из ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаПредшественники) Цикл
							ОчередьОпераций.Добавить(Строка);
						КонецЦикла;
						
						ОчередьОпераций.Удалить(0);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ВыборкаОграниченияПоОперациям.ИдентификаторПоследнейОперации <> 0 Тогда
				СтруктураПоискаОперация.ИдентификаторОперации = ВыборкаОграниченияПоОперациям.ИдентификаторПоследнейОперации;
				НайденныеСтроки = ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаОперация);
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					ПоследняяОперация = НайденныеСтроки[0];
					
					// Удаление данных последующих операций
					СтруктураПоискаПоследователи.НомерОперации = ПоследняяОперация.НомерСледующейОперации;
					ОчередьОпераций = ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаПоследователи);
					Пока ОчередьОпераций.ВГраница() <> -1 Цикл
						СтрокаОперация = ОчередьОпераций[0];
						СтруктураПоискаДанныеОперации.Операция = СтрокаОперация.Операция;
						
						Для каждого Таблица Из ИменаТаблиц Цикл
							Если Не ДанныеСпецификации.Свойство(Таблица) Тогда
								Продолжить;
							КонецЕсли;
							Для каждого Строка Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоискаДанныеОперации) Цикл
								ДанныеСпецификации[Таблица].Удалить(Строка);
							КонецЦикла;
						КонецЦикла;
						
						СтруктураПоискаПоследователи.НомерОперации = СтрокаОперация.НомерСледующейОперации;
						Для каждого Строка Из ДанныеСпецификации.Операции.НайтиСтроки(СтруктураПоискаПоследователи) Цикл
							ОчередьОпераций.Добавить(Строка);
						КонецЦикла;
						
						ОчередьОпераций.Удалить(0);
					КонецЦикла;
					
					// Сокращение (удаление) данных последней операции
					Если ВыборкаОграниченияПоОперациям.ОтмененоПоследняяОперация <> 0 Тогда
						СтруктураПоискаДанныеОперации.Операция = ПоследняяОперация.Операция;
						Если ВыборкаОграниченияПоОперациям.ОтмененоПоследняяОперация >= ПоследняяОперация.КоличествоНаПартию Тогда
							// Удаление
							Для каждого Таблица Из ИменаТаблиц Цикл
								Если Не ДанныеСпецификации.Свойство(Таблица) Тогда
									Продолжить;
								КонецЕсли;
								Для каждого Строка Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоискаДанныеОперации) Цикл
									ДанныеСпецификации[Таблица].Удалить(Строка);
								КонецЦикла;
							КонецЦикла;
						ИначеЕсли ПоследняяОперация.КоличествоНаПартию <> 0 Тогда
							// Сокращение
							Числитель = ПоследняяОперация.КоличествоНаПартию - ВыборкаОграниченияПоОперациям.ОтмененоПоследняяОперация;
							Знаменатель = ПоследняяОперация.КоличествоНаПартию;
							Для каждого Таблица Из ИменаТаблиц Цикл
								Если Не ДанныеСпецификации.Свойство(Таблица) Тогда
									Продолжить;
								КонецЕсли;
								Для каждого Строка Из ДанныеСпецификации[Таблица].НайтиСтроки(СтруктураПоискаДанныеОперации) Цикл
									Строка.Количество = Строка.Количество * Числитель / Знаменатель;
									Если Строка.Количество = 0 Тогда
										ДанныеСпецификации[Таблица].Удалить(Строка);
									ИначеЕсли Таблица <> "Трудозатраты" Тогда
										ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

Процедура СкорректироватьТаблицы(ТаблицаИсходная, ТаблицаКорректировки, СтруктураОтбора, ПоляОтбора = Неопределено)
	
	ТекущийИндексКорректировки      = 0;
	МаксимальныйИндексКорректировки = ТаблицаКорректировки.Количество() - 1;
	Пока МаксимальныйИндексКорректировки > -1 Цикл
		
		Корректировка = ТаблицаКорректировки[ТекущийИндексКорректировки];
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Корректировка, ПоляОтбора);
		
		ИсходныеСтроки          = ТаблицаИсходная.НайтиСтроки(СтруктураОтбора);
		МаксимальныйИндексСтрок = ИсходныеСтроки.ВГраница();
		Пока МаксимальныйИндексСтрок > -1 Цикл
			
			ИсходнаяСтрока = ИсходныеСтроки[0];
			
			Количество = Мин(ИсходнаяСтрока.Количество, Корректировка.Количество);
			
			Корректировка.Количество  = Корректировка.Количество  - Количество;
			ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - Количество;
						
			Если ИсходнаяСтрока.Количество > 0 Тогда
				Прервать;	
			Иначе
				ИсходныеСтроки.Удалить(0);
				ТаблицаИсходная.Удалить(ИсходнаяСтрока);	
			КонецЕсли;
			
			Если Корректировка.Количество = 0 Тогда
				Прервать;
			КонецЕсли;	
			
			МаксимальныйИндексСтрок = МаксимальныйИндексСтрок - 1;
			
		КонецЦикла;
		
		Если Корректировка.Количество > 0 Тогда
			ТекущийИндексКорректировки = ТекущийИндексКорректировки + 1;	
		Иначе
			ТаблицаКорректировки.Удалить(Корректировка);	
		КонецЕсли;	
		
		МаксимальныйИндексКорректировки = МаксимальныйИндексКорректировки - 1;
			
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РаспределитьКоличество(ТаблицаИсточник, ТаблицаПриемник, СтруктураОтбора, Количество)
	
	НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаИсточник Из НайденныеСтроки Цикл
		
		СтрокаПриемник = ТаблицаПриемник.Добавить();		
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, "Количество");
		СтрокаПриемник.Количество = Мин(Количество, СтрокаИсточник.Количество);
				
		Количество = Количество - СтрокаПриемник.Количество;
		СтрокаИсточник.Количество = СтрокаИсточник.Количество - СтрокаПриемник.Количество;
				
		Если СтрокаИсточник.Количество = 0 Тогда
			ТаблицаИсточник.Удалить(СтрокаИсточник);	
		КонецЕсли;
						
		Если Количество = 0 Тогда
			Прервать;
		КонецЕсли;			
				
	КонецЦикла;	
	
КонецПроцедуры	

Функция ИспользуетсяОтметкаВыполненныхТрудозатрат(Объект) Экспорт
	
	Если Не Объект.ОперацияКакРаспоряжениеВыработки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	ИспользоватьПооперационноеУправление = ПараметрыПодразделения.ИспользоватьПооперационноеУправление;
	
	Если Не ИспользоватьПооперационноеУправление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТипСвязиПоследователь() Экспорт
	
	Возврат 0;
	
КонецФункции

Функция ТипСвязиПотребитель() Экспорт
	
	Возврат 1;
	
КонецФункции

Процедура ЗаписатьДвижения(ДокументОбъект, СписокРегистров, Отказ)
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ДокументОбъект, РежимЗаписиДокумента.Проведение, Неопределено);
	
	ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(ДокументОбъект.Ссылка, СписокРегистров);
	
	Для каждого КлючИЗначение Из СписокРегистров ЦИкл
		
		ДвиженияРегистра = ДокументОбъект.Движения.Найти(КлючИЗначение.Ключ);
		
		Если ДвиженияРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДвиженияРегистра.Записывать = Истина;
		ДвиженияРегистра.Загрузить(ТаблицыДляДвижений["Таблица" + КлючИЗначение.Ключ]);
		
		ПроведениеДокументов.УстановитьДопСвойстваРегистра(ДвиженияРегистра, ДокументОбъект);
		
	КонецЦикла;

	ДокументОбъект.Движения.Записать();
	
	СтруктураЗаказаПроведениеДокументов.ЗаписатьДанные(ТаблицыДляДвижений, ДокументОбъект.Ссылка, Неопределено, Отказ);
	
КонецПроцедуры

Функция ИспользоватьОперацииВЭтапах()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеПланирование");
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.14.30";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2964ecb4-a632-425e-a3f7-5edcc6aeb5bd");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭтапПроизводства2_2.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""(не используется) Сворачивать виды запасов по месяцам"".';
									|en = 'Fills the ""(not used) Collapse inventory owner attributes by month"" attribute.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ЭтапПроизводства2_2";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	#Область ТекстыЗапроса
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам());
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЭтапПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
		|ГДЕ
		|	// Заполнение поля УдалитьСворачиватьВидыЗапасовПоМесяцам
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам КАК ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам
		|		ГДЕ
		|			ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам.Ссылка = ЭтапПроизводства.Ссылка
		|			И НЕ ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам.УдалитьСворачиватьВидыЗапасовПоМесяцам =
		|					ЭтапПроизводства.УдалитьСворачиватьВидыЗапасовПоМесяцам
		|	)
		|");
		
	#КонецОбласти
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	#Область ТекстыЗапроса
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ОбновляемыеДанные.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ОбновляемыеДанные
		|ИЗ
		|	&ОбновляемыеДанные КАК ОбновляемыеДанные
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка");
	
	ТекстыЗапроса.Добавить(ТекстЗапросаЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам("ОбновляемыеДанные"));
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ОбновляемыеДанные.Ссылка      КАК Ссылка,
		|	ЭтапПроизводства.ВерсияДанных КАК ВерсияДанных,
		|	ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам КАК ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам
		|		ГДЕ
		|			ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам.Ссылка = ЭтапПроизводства.Ссылка
		|			И НЕ ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам.УдалитьСворачиватьВидыЗапасовПоМесяцам =
		|					ЭтапПроизводства.УдалитьСворачиватьВидыЗапасовПоМесяцам
		|	) КАК ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам
		|ИЗ
		|	ОбновляемыеДанные КАК ОбновляемыеДанные
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
		|	ПО ОбновляемыеДанные.Ссылка = ЭтапПроизводства.Ссылка
		|");
	
	#КонецОбласти
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить(ПолноеИмяОбъекта).УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если ДокументОбъект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				Если Выборка.ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам Тогда
					// Так как документ отмечен к обработке и реквизит это булево значение, просто инвертируем текущее.
					ДокументОбъект.УдалитьСворачиватьВидыЗапасовПоМесяцам = Не ДокументОбъект.УдалитьСворачиватьВидыЗапасовПоМесяцам;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ТекстЗапросаЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам(ИмяВТОтбораЭтапов = Неопределено)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыСДэльтой.Ссылка        КАК Ссылка,
		|	ЭтапыСДэльтой.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ЭтапыСДэльтой
		|ИЗ
		|	(ВЫБРАТЬ
		|		Этапы.Ссылка                                      КАК Ссылка,
		|		Этапы.Подразделение                               КАК Подразделение,
		|		ОбеспечениеМатериалами.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		ОбеспечениеМатериалами.ДатаОтгрузки               КАК ДатаОперации,
		|		ОбеспечениеМатериалами.Количество                 КАК Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Этапы
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериалами
		|		ПО ОбеспечениеМатериалами.Ссылка = Этапы.Ссылка
		|	ГДЕ
		|		&ВТОтбораЭтапов
		|		И Этапы.Проведен
		|		И Этапы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|		И ОбеспечениеМатериалами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		И НЕ ОбеспечениеМатериалами.Отменено
		|		И НЕ ОбеспечениеМатериалами.Номенклатура.ТипНоменклатуры =
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		И ОбеспечениеМатериалами.Склад.ЦеховаяКладовая
		|		И ОбеспечениеМатериалами.Склад.Подразделение = Этапы.Подразделение
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Этапы.Ссылка                        КАК Ссылка,
		|		Этапы.Подразделение                 КАК Подразделение,
		|		Экономия.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		Экономия.ДатаОперации               КАК ДатаОперации,
		|		Экономия.Количество                 КАК Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Этапы
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Экономия
		|		ПО Экономия.Ссылка = Этапы.Ссылка
		|	ГДЕ
		|		&ВТОтбораЭтапов
		|		И Этапы.Проведен
		|		И Этапы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|		И НЕ Экономия.КорАналитикаУчетаНоменклатуры =
		|				ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Этапы.Ссылка                           КАК Ссылка,
		|		Этапы.Подразделение                    КАК Подразделение,
		|		ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		ВидыЗапасов.ДатаОперации               КАК ДатаОперации,
		|		-ВидыЗапасов.Количество                КАК Количество
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Этапы
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВидыЗапасовМатериалы КАК ВидыЗапасов
		|		ПО ВидыЗапасов.Ссылка = Этапы.Ссылка
		|	ГДЕ
		|		&ВТОтбораЭтапов
		|		И Этапы.Проведен
		|		И Этапы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат)
		|		И ВидыЗапасов.ХозяйственнаяОперация В(
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства))
		|	) КАК ЭтапыСДэльтой
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыСДэльтой.Ссылка,
		|	ЭтапыСДэльтой.Подразделение,
		|	ЭтапыСДэльтой.АналитикаУчетаНоменклатуры,
		|	ЭтапыСДэльтой.ДатаОперации
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЭтапыСДэльтой.Количество) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыСДэльтой.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЭтапыСВстречнымПеремещением
		|ИЗ
		|	ЭтапыСДэльтой КАК ЭтапыСДэльтой
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериалами
		|	ПО ОбеспечениеМатериалами.Ссылка = ЭтапыСДэльтой.Ссылка
		|	И ОбеспечениеМатериалами.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|	И НЕ ОбеспечениеМатериалами.Отменено
		|	И НЕ ОбеспечениеМатериалами.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И ОбеспечениеМатериалами.Склад.ЦеховаяКладовая
		|	И ОбеспечениеМатериалами.Склад.Подразделение = ЭтапыСДэльтой.Подразделение
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Экономия
		|	ПО Экономия.Ссылка = ЭтапыСДэльтой.Ссылка
		|	И НЕ Экономия.КорАналитикаУчетаНоменклатуры =
		|			ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
		|	И Экономия.КорАналитикаУчетаНоменклатуры = ОбеспечениеМатериалами.АналитикаУчетаНоменклатуры
		|	И Экономия.Период = ОбеспечениеМатериалами.Период
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыСДэльтой.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЭтапыСВстречнымПеремещением.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                КАК УдалитьСворачиватьВидыЗапасовПоМесяцам
		|ПОМЕСТИТЬ ЗаполнитьУдалитьСворачиватьВидыЗапасовПоМесяцам
		|ИЗ
		|	ЭтапыСДэльтой КАК ЭтапыСДэльтой
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЭтапыСВстречнымПеремещением КАК ЭтапыСВстречнымПеремещением
		|	ПО ЭтапыСВстречнымПеремещением.Ссылка = ЭтапыСДэльтой.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
	
	ТекстЗамены = "ИСТИНА";
	Если ЗначениеЗаполнено(ИмяВТОтбораЭтапов) Тогда
		ТекстЗамены =
			"Этапы.Ссылка В(
			|	ВЫБРАТЬ
			|		Ссылка
			|	ИЗ
			|		%1)";
		ТекстЗамены = СтрШаблон(ТекстЗамены, ИмяВТОтбораЭтапов);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТОтбораЭтапов", ТекстЗамены);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
