///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(ГоловнаяОрганизация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.79";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f7929f99-776e-11ef-8138-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.УведомлениеОбИзмененииРасчетаПособия.ПовторноОбработатьСообщения107";
	Обработчик.Комментарий     = НСтр("ru = 'Обработка уведомлений об изменении расчета пособий.';
										|en = 'Обработка уведомлений об изменении расчета пособий.'");
	
КонецПроцедуры

// Обработка об изменении расчета пособий.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ПовторноОбработатьСообщения107(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК Идентификатор,
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата,
	|	ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИзмененииРасчетаПособия КАК Шапка
	|		ПО ВходящиеСообщенияСЭДОФСС.Идентификатор = Шапка.ИдентификаторСообщения
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Тип = 107
	|	И Шапка.Ссылка ЕСТЬ NULL
	|	И НЕ ВходящиеСообщенияСЭДОФСС.Новое
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ДатаЗагрузки,
	|	ДатаСоздания";
	
	Идентификаторы = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Идентификаторы.Добавить(Выборка.Идентификатор);
		Если Идентификаторы.Количество() > 999 Тогда
			СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(, , Идентификаторы);
			Идентификаторы.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Если Идентификаторы.Количество() > 0 Тогда
		СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(, , Идентификаторы);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СЭДО

Функция ТипСообщения() Экспорт
	Возврат 107;
КонецФункции

#КонецОбласти

#Область СоставДокументов

Функция ОбъектМетаданных() Экспорт
	Возврат Метаданные.Документы.УведомлениеОбИзмененииРасчетаПособия;
КонецФункции

// Возвращает описание состава документа
//
// Возвращаемое значение:
//   Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке()
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты());
КонецФункции

Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Не Документ.ПометкаУдаления И Документ.ПодтверждениеПолученоСФР;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьУведомлениеОНаличииСообщения107(Страхователь, ИдентификаторСообщения, ТребуетсяПодтверждение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		// Поиск документа по идентификатору сообщения.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Шапка.Ссылка КАК Ссылка,
		|	Шапка.Дата КАК Дата,
		|	Шапка.Страхователь КАК Страхователь,
		|	Шапка.ПометкаУдаления КАК ПометкаУдаления,
		|	Шапка.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	Документ.УведомлениеОбИзмененииРасчетаПособия КАК Шапка
		|ГДЕ
		|	Шапка.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Страхователь = Страхователь
				И Не Выборка.ПометкаУдаления
				И ТребуетсяПодтверждение = Выборка.ТребуетсяПодтверждение Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.УведомлениеОбИзмененииРасчетаПособия.СоздатьДокумент();
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		ДокументОбъект.Страхователь           = Страхователь;
		ДокументОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
		ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
		Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, "БЗК", РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке информиромации по временной нетрудоспособности и материнству%1 возникла ошибка: %2';
				|en = 'При загрузке информиромации по временной нетрудоспособности и материнству%1 возникла ошибка: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Загружает информацию о несоответствии сведений о застрахованном лице в базу данных.
Процедура ЗагрузитьСообщение107(Страхователь, ИдентификаторСообщения, ТекстXML, ТребуетсяПодтверждение, Результат, Кэш) Экспорт
	// Пример:
	//<urn:proactiveNotification xmlns:urn="urn:ru:fss:integration:types:proactive:notifications:v01">
	//	<urn:socialAssistNum>10001</urn:socialAssistNum>
	//	<urn:procClosedOpenNew>
	//		<urn:reason>Причина</urn:reason>
	//		<urn:newSocialAssistNum>10002</urn:newSocialAssistNum>
	//	</urn:procClosedOpenNew>
	//	<urn:receivedConfirmationOtherInsurer>
	//		<urn:paymentMethod>oneInsurerAssignment</urn:paymentMethod>
	//		<urn:years>
	//			<urn:year>2021</urn:year>
	//			<urn:year>2020</urn:year>
	//		</urn:years>
	//	</urn:receivedConfirmationOtherInsurer>
	//</urn:proactiveNotification>
	
	Объект = СоздатьДокументПоСообщению(Страхователь, ИдентификаторСообщения);
	Объект.ДатаСообщения = СЭДОФСС.ДатаСообщения(ИдентификаторСообщения, Кэш);
	Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	Если Не Объект.Загружен Тогда
		Объект.Дата = ТекущаяДатаСеанса();
		Объект.Загружен = Истина;
	КонецЕсли;
	
	// Поиск корневого узла.
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "proactiveNotification");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM.ЭлементДокумента;
	КонецЕсли;
	
	// Чтение реквизитов.
	РеквизитыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "socialAssistNum,procClosedOpenNew,receivedConfirmationOtherInsurer");
	Объект.НомерПроцесса = СериализацияБЗК.ЧислоИзXML(РеквизитыКорня.socialAssistNum);
	
	// Закрытие процесса
	Если РеквизитыКорня.procClosedOpenNew <> Неопределено Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОбИзмененииРасчетаПособия.ПроцессЗакрыт;
		РеквизитыЗакрытия = СериализацияБЗК.УзлыЭлементаDOM(РеквизитыКорня.procClosedOpenNew, "reason,newSocialAssistNum");
		Объект.Причина = СериализацияБЗК.СтрокаИзXML(РеквизитыЗакрытия.reason);
		Объект.НомерНовогоПроцесса = СериализацияБЗК.ЧислоИзXML(РеквизитыЗакрытия.newSocialAssistNum);
	// Прием сообщения 101 по страховому случаю от другого страхователя
	ИначеЕсли РеквизитыКорня.receivedConfirmationOtherInsurer <> Неопределено Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОбИзмененииРасчетаПособия.ПолученОтветДругогоСтрахователя;
		Реквизиты101 = СериализацияБЗК.УзлыЭлементаDOM(РеквизитыКорня.receivedConfirmationOtherInsurer, "paymentMethod,years");
		МетодНазначенияИВыплатыПособия = СериализацияБЗК.СтрокаИзXML(Реквизиты101.paymentMethod);
		Объект.МетодНазначенияИВыплатыПособия = Перечисления.МетодыНазначенияИВыплатыПособийСФР.ЗначениеИзXML(МетодНазначенияИВыплатыПособия);
		Если Реквизиты101.years <> Неопределено Тогда
			Годы = Реквизиты101.years.ДочерниеУзлы;
			Для НомерГода = 1 По Годы.Количество() Цикл
				Объект["РасчетныйГод" + НомерГода] = СериализацияБЗК.ЧислоИзXML(Годы[НомерГода - 1]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Данные = ДанныеСвязанныхДокументов(Объект.Страхователь, Объект.НомерПроцесса, Объект.ДатаСообщения);
	ЗаполнитьЗначенияСвойств(Объект, Данные);
	
	Объект.ОбновитьВторичныеДанные();
	
	СЭДОФСС.ЗаписатьДокумент(Объект, Истина, "БЗК", РежимЗаписиДокумента.Проведение);
	
	Результат.Обработано = Истина;
КонецПроцедуры

Функция СоздатьДокументПоСообщению(Страхователь, ИдентификаторСообщения)
	Ссылка = НайтиДокументПоСообщению(Страхователь, ИдентификаторСообщения);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка.ПолучитьОбъект();
	Иначе
		Объект = СоздатьДокумент();
		Объект.Страхователь = Страхователь;
		Объект.ИдентификаторСообщения = ИдентификаторСообщения;
		Возврат Объект;
	КонецЕсли;
КонецФункции

Функция НайтиДокументПоСообщению(Страхователь, ИдентификаторСообщения)
	ВыбираемыеПоля = "Ссылка";
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	НастройкиЗапроса.Количество = 1;
	ЗапросыБЗК.ДобавитьОтбор(НастройкиЗапроса.Отбор, "ИдентификаторСообщения", , ИдентификаторСообщения);
	ЗапросыБЗК.ДобавитьОтбор(НастройкиЗапроса.Отбор, "Страхователь",           , Страхователь);
	Запрос = ЗапросыБЗК.ЗапросКТаблице(ОбъектМетаданных(), ВыбираемыеПоля, НастройкиЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ДанныеСвязанныхДокументов(Страхователь, НомерПроцесса, ДатаСообщения) Экспорт
	
	Реквизиты = Новый Структура("ОтветНаЗапрос,ВходящийЗапрос,ФизическоеЛицо,СНИЛС,Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтветНаЗапросФССДляРасчетаПособия.Ссылка КАК ОтветНаЗапрос,
	|	ОтветНаЗапросФССДляРасчетаПособия.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветНаЗапросФССДляРасчетаПособия.СотрудникСНИЛС КАК СНИЛС,
	|	ОтветНаЗапросФССДляРасчетаПособия.ВходящийЗапрос КАК ВходящийЗапрос,
	|	ОтветНаЗапросФССДляРасчетаПособия.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФССДляРасчетаПособия
	|ГДЕ
	|	ОтветНаЗапросФССДляРасчетаПособия.Страхователь = &Страхователь
	|	И ОтветНаЗапросФССДляРасчетаПособия.НомерПроцесса = &НомерПроцесса
	|	И НЕ ОтветНаЗапросФССДляРасчетаПособия.ПометкаУдаления
	|	И ОтветНаЗапросФССДляРасчетаПособия.ДатаОтправки <= &ДатаСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтветНаЗапросФССДляРасчетаПособия.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВходящийЗапросФССДляРасчетаПособия.ОтветНаЗапрос КАК ОтветНаЗапрос,
	|	ВходящийЗапросФССДляРасчетаПособия.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВходящийЗапросФССДляРасчетаПособия.СотрудникСНИЛС КАК СНИЛС,
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК ВходящийЗапрос,
	|	ВходящийЗапросФССДляРасчетаПособия.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.Страхователь = &Страхователь
	|	И ВходящийЗапросФССДляРасчетаПособия.НомерПроцесса = &НомерПроцесса
	|	И НЕ ВходящийЗапросФССДляРасчетаПособия.ПометкаУдаления
	|	И ВходящийЗапросФССДляРасчетаПособия.ДатаСообщения <= &ДатаСообщения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВходящийЗапросФССДляРасчетаПособия.ДатаСообщения";
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ДатаСообщения", ДатаСообщения);
	Запрос.УстановитьПараметр("НомерПроцесса", НомерПроцесса);
	
	Пакет = Запрос.ВыполнитьПакет();
	Если Не Пакет[0].Пустой() Тогда
		Выборка = Пакет[0].Выбрать();
	ИначеЕсли Не Пакет[1].Пустой() Тогда
		Выборка = Пакет[1].Выбрать();
	Иначе
		Возврат Реквизиты;
	КонецЕсли;

	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	Возврат Реквизиты;

КонецФункции

// См. п.7 Положения № 1 утвержденного Постановлением Правительства РФ от 21.04.2011 N 294.
Функция МаксимальнаяДатаПодтвержденияПолучения(Объект) Экспорт
	Возврат СЭДОФСС.СледующийРабочийДень(Объект.ДатаСообщения, 1);
КонецФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "ПодтверждениеПолучения";
	Шаблон.ОснованиеЗаполнения = "ИдентификаторСообщения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТребуетсяПодтверждение");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаОтправкиПодтверждения");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПодтверждениеПолученоСФР");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "НомерПроцесса";
	Шаблон.ИмяГруппы           = "НомерПроцесса";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Страхователь", Истина);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФизическоеЛицо", Истина);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СНИЛС", Истина);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Сотрудник", Истина);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящийЗапрос", Истина);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОтветНаЗапрос", Истина);
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "МаксимальнаяДатаПодтверждения";
	Шаблон.ОснованиеЗаполнения = "ДатаСообщения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "МаксимальнаяДатаПодтверждения", Истина);
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли