#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Должность");
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Подразделение");
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Владелец");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
		ИначеЕсли ДанныеЗаполнения.Свойство("Организация") Тогда
			Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ЭтотОбъект, Отказ, РежимПроведения);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.РабочиеМестаСотрудников.Скопировать(, "Сотрудник, Период"), Ссылка, "Период");
	
	РабочиеМестаОхраныТруда.СформироватьДвиженияПоРабочимМестам(Движения, ДанныеДляПроведения);
	
	УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииВУчетаСтажаПФР());
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, НачалоПериода, "Объект.НачалоПериода", Отказ, НСтр("ru = 'Начало периода';
																										|en = 'Period start'"), , , Ложь);
	
	Если ЗначениеЗаполнено(ОкончаниеПериода) И ОкончаниеПериода < НачалоПериода Тогда
		
		ТекстСообщения = НСтр("ru = 'Неверно задано окончание периода';
								|en = 'Period end is specified incorrectly'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.ОкончаниеПериода", , Отказ);
		
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		Сотрудники.ВыгрузитьКолонку("Сотрудник"),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.Сотрудники"));
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения", "НачалоПериода");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НазначениеРабочихМест.НачалоПериода КАК Период,
		|	НазначениеРабочихМестСотрудники.Сотрудник КАК Сотрудник,
		|	НазначениеРабочихМест.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НазначениеРабочихМестСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НазначениеРабочихМестРабочиеМеста.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	Документ.НазначениеРабочихМестСотрудникам КАК НазначениеРабочихМест
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.Сотрудники КАК НазначениеРабочихМестСотрудники
		|		ПО НазначениеРабочихМест.Ссылка = &Ссылка
		|		И НазначениеРабочихМест.Ссылка = НазначениеРабочихМестСотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.РабочиеМеста КАК НазначениеРабочихМестРабочиеМеста
		|		ПО НазначениеРабочихМестРабочиеМеста.Ссылка = НазначениеРабочихМестСотрудники.Ссылка
		|		И НазначениеРабочихМестРабочиеМеста.ИдентификаторСтрокиРабочегоМеста = НазначениеРабочихМестСотрудники.ИдентификаторСтрокиРабочегоМеста";
	
	РабочиеМестаСотрудников = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		
		РабочиеМестаСотрудников.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
		РабочиеМестаСотрудников.ЗаполнитьЗначения(КонецДня(ОкончаниеПериода) + 1, "ДействуетДо");
		
	КонецЕсли;
	
	Данные = Новый Структура("РабочиеМестаСотрудников", РабочиеМестаСотрудников);
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР()
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ДанныеДляРегистрации = Документы.НазначениеРабочихМестСотрудникам.ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок);
	
	Возврат ДанныеДляРегистрации[Ссылка];	
КонецФункции	

Процедура ЗаполнитьСотрудников(ИдентификаторыРабочихМест) Экспорт
	
	Сотрудники.Очистить();
	
	Для Каждого СтрокаРабочегоМеста Из РабочиеМеста Цикл
		МассивСотрудников = ИдентификаторыРабочихМест.Получить(СтрокаРабочегоМеста.ИдентификаторСтрокиРабочегоМеста);
		Если МассивСотрудников = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ДанныеСотрудника Из МассивСотрудников Цикл
			НоваяСтрока = Сотрудники.Добавить();
			НоваяСтрока.ИдентификаторСтрокиРабочегоМеста = СтрокаРабочегоМеста.ИдентификаторСтрокиРабочегоМеста;
			НоваяСтрока.Сотрудник = ДанныеСотрудника.Сотрудник;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли