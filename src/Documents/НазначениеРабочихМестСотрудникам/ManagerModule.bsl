#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НазначениеРабочихМестСотрудникам";
	КомандаПечати.Представление = НСтр("ru = 'Назначение рабочих мест сотрудникам';
										|en = 'Assignment of workplaces to employees'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОтбораПоОрганизации(Настройки, , "ОхранаТруда");
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОбъектаСПрисоединеннымиФайлами(Настройки);
КонецПроцедуры

#КонецОбласти

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.НазначениеРабочихМестСотрудникам;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

Функция ОписаниеПодписейДокумента() Экспорт 

	ОписаниеПодписей = ПодписиДокументов.ОписаниеТаблицыПодписей();
	
	ОписаниеПодписи = ПодписиДокументов.ОписаниеРеквизитовПодписанта();
	ОписаниеПодписи.ФизическоеЛицо = "СпециалистПоОхранеТруда";
	ОписаниеПодписи.Должность = "ДолжностьСпециалистаПоОхранеТруда";
	ОписаниеПодписи.ОснованиеПодписи = "ОснованиеПодписиСпециалистаПоОхранеТруда";
	
	ПереопределяемыеИмена = Новый Соответствие;
	ПереопределяемыеИмена.Вставить("ОтветственныйЗаОхрануТруда", ОписаниеПодписи);

	РолиОтветственных = "Руководитель, ОтветственныйЗаОхрануТруда";
	ПодписиДокументов.ДобавитьОписаниеПодписейОрганизации(ОписаниеПодписей, РолиОтветственных, ПереопределяемыеИмена);
	
	Возврат ОписаниеПодписей;

КонецФункции

Функция СвойстваИсправляемогоДокумента(ДокументСсылка) Экспорт
	
	Реквизиты = ИсправлениеДокументовЗарплатаКадры.РеквизитыИсправляемогоДокумента();
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Реквизиты);
	
КонецФункции

Функция ПараметрыИсправляемогоДокумента(ДокументСсылка) Экспорт
	
	Возврат ИсправлениеДокументовЗарплатаКадры.ПараметрыИсправляемогоДокумента(ДокументСсылка,
		СвойстваИсправляемогоДокумента(ДокументСсылка));
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Печать назначения
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "НазначениеРабочихМестСотрудникам");
	Если ПечатнаяФорма <> Неопределено Тогда
		// имена файлов
		ИменаФайлов = Новый Соответствие;
		Шаблон = НСтр("ru = 'Назначение рабочих мест сотрудникам: [КраткийСоставДокумента] - [Организация] (№[Номер] от [Дата])';
						|en = 'Assignment of workplaces to employees: [КраткийСоставДокумента] - [Организация] (#[Номер] dated [Дата])'");
		ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "Организация,КраткийСоставДокумента,Номер,Дата,Ссылка");
		Для Каждого Ссылка Из МассивОбъектов Цикл
			РеквизитыДокумента = ЗначенияРеквизитовДокументов[Ссылка];
			РеквизитыДокумента.КраткийСоставДокумента = РеквизитыДокумента.КраткийСоставДокумента;
			РеквизитыДокумента.Дата = Формат(РеквизитыДокумента.Дата, "ДЛФ=D");
			РеквизитыДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[Ссылка]);
			ИменаФайлов.Вставить(Ссылка, ИмяФайла);
		КонецЦикла;
		
		// описание печатной формы
		ПечатнаяФорма.ТабличныйДокумент = ПечатьНазначенияРабочихМестСотрудникам(МассивОбъектов, ОбъектыПечати);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Назначение рабочих мест сотрудникам';
											|en = 'Assignment of workplaces to employees'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Документ.НазначениеРабочихМестСотрудникам.ПФ_MXL_НазначениеРабочихМестСотрудникам";
		ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИменаФайлов;
	КонецЕсли;
	
КонецПроцедуры

#Область ПечатьНазначения

Функция ПечатьНазначенияРабочихМестСотрудникам(Назначения, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_НазначениеРабочихМестСотрудникам";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НазначениеРабочихМестСотрудникам.ПФ_MXL_НазначениеРабочихМестСотрудникам");
	
	ДанныеДляПечати = ДанныеПечатиНазначений(Назначения);
	
	// Вывод форм для субъектов.
	ПервыйДокумент = Истина;
	Для Каждого ОписаниеНазначения Из ДанныеДляПечати Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		// Формируем печатную форму Назначения.
		НазначениеФорма = Новый ТабличныйДокумент;
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ОписаниеНазначения);
		НазначениеФорма.Вывести(ОбластьМакета);
		НазначениеФорма.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
		ТаблицаСотрудников = ОписаниеНазначения.ТаблицаСотрудников;
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина,
			ОписаниеНазначения.СписокСотрудников,
			"РабочееМестоОхраныТруда",
			ОписаниеНазначения.НачалоПериода,
			ПоляОтбораПериодическихДанных(ОписаниеНазначения.ДокументСсылка));
		Для Каждого СтрокаСотрудник Из ТаблицаСотрудников Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(ОписаниеНазначения);
			ОбластьМакета.Параметры.Заполнить(СтрокаСотрудник);
			НайденныеКадровыеДанные =
				КадровыеДанныеСотрудников.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудник.Сотрудник));
			Если НайденныеКадровыеДанные.Количество() > 0 
				И ЗначениеЗаполнено(НайденныеКадровыеДанные[0].РабочееМестоОхраныТруда) Тогда
					
				ОбластьМакета.Параметры.РабочееМестоПрежнее = НайденныеКадровыеДанные[0].РабочееМестоОхраныТруда;
			Иначе
				ОбластьМакета.Параметры.РабочееМестоПрежнее = НСтр("ru = '< Не назначено >';
																	|en = '< Not assigned >'");
			КонецЕсли;
			НазначениеФорма.Вывести(ОбластьМакета);
		КонецЦикла;
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ОписаниеНазначения);
		НазначениеФорма.Вывести(ОбластьМакета);
		ТабличныйДокумент.Вывести(НазначениеФорма);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОписаниеНазначения.ДокументСсылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеПечатиНазначений(Назначения)
	
	ДанныеПечати = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначения", Назначения);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Назначение.Ссылка КАК ДокументСсылка,
		|	Назначение.Номер КАК Номер,
		|	Назначение.Дата КАК Дата,
		|	Назначение.Организация КАК Организация,
		|	Назначение.Организация.ИНН КАК ОрганизацияИНН,
		|	Назначение.Организация.ОГРН КАК ОрганизацияОГРН,
		|	Назначение.Подразделение КАК Подразделение,
		|	Назначение.НачалоПериода КАК НачалоПериода,
		|	Назначение.ОкончаниеПериода КАК ОкончаниеПериода,
		|	Назначение.ДолжностьРуководителя КАК ОтветственныйДолжность,
		|	Назначение.Руководитель.Фамилия КАК ОтветственныйФамилия,
		|	Назначение.Руководитель.Имя КАК ОтветственныйИмя,
		|	Назначение.Руководитель.Отчество КАК ОтветственныйОтчество,
		|	Назначение.Руководитель.Инициалы КАК ОтветственныйИнициалы,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.НазначениеРабочихМестСотрудникам.Сотрудники КАК Сотрудники
		|			ГДЕ
		|				Сотрудники.Ссылка = Назначение.Ссылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьСотрудники
		|ИЗ
		|	Документ.НазначениеРабочихМестСотрудникам КАК Назначение
		|ГДЕ
		|	Назначение.Ссылка В (&Назначения)
		|УПОРЯДОЧИТЬ ПО
		|	ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеМеста.Ссылка КАК ДокументСсылка,
		|	РабочиеМеста.НомерСтроки КАК НомерСтроки,
		|	РабочиеМеста.РабочееМесто КАК РабочееМесто,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.НазначениеРабочихМестСотрудникам.РабочиеМеста КАК РабочиеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.Сотрудники КАК Сотрудники
		|		ПО РабочиеМеста.Ссылка В (&Назначения)
		|		И РабочиеМеста.Ссылка = Сотрудники.Ссылка
		|		И РабочиеМеста.ИдентификаторСтрокиРабочегоМеста = Сотрудники.ИдентификаторСтрокиРабочегоМеста
		|УПОРЯДОЧИТЬ ПО
		|	ДокументСсылка,
		|	НомерСтроки";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСотрудников = РезультатыЗапроса[1].Выбрать();
	ВыборкаНазначений = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаНазначений.Следующий() Цикл
		Описание = ОписаниеДляПечати();
		ЗаполнитьОписаниеНазначения(Описание, ВыборкаНазначений, ВыборкаСотрудников);
		ДанныеПечати.Добавить(Описание);
	КонецЦикла;
	
	Возврат ДанныеПечати;
	
КонецФункции

Функция ОписаниеДляПечати()
	
	Описание = Новый Структура(
		"ДокументСсылка,
		|Дата,
		|Номер,
		|НачалоПериода,
		|ОкончаниеПериода,
		|ОрганизацияПредставление,
		|ФормаСобственностиПредставление,
		|ОКВЭДПредставление,
		|ПодразделениеПредставление,
		|СписокСотрудников,
		|ТаблицаСотрудников,
		|ОтветственныйДолжностьПредставление,
		|ОтветственныйФИО");
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("ДокументСсылка", Новый ОписаниеТипов("ДокументСсылка.НазначениеРабочихМестСотрудникам"));
	ТаблицаСотрудников.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаСотрудников.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаОхраныТруда"));
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Описание.ТаблицаСотрудников = ТаблицаСотрудников;
	Описание.СписокСотрудников = Новый Массив;
	
	Возврат Описание;
	
КонецФункции

Процедура ЗаполнитьОписаниеНазначения(Описание, ВыборкаНазначений, ВыборкаСотрудников)
	
	ЗаполнитьЗначенияСвойств(Описание, ВыборкаНазначений);
	
	Описание.Дата = Формат(ВыборкаНазначений.Дата, "ДЛФ=D");
	Описание.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаНазначений.Номер);
	
	ЗаполнитьРеквизитыОрганизации(ВыборкаНазначений.Организация, Описание);
	
	Описание.ПодразделениеПредставление = Строка(ВыборкаНазначений.Подразделение);
	
	Описание.ОтветственныйДолжностьПредставление = Строка(ВыборкаНазначений.ОтветственныйДолжность);
	Если ЗначениеЗаполнено(ВыборкаНазначений.ОтветственныйФамилия) Тогда
		СтруктураФИО = Новый Структура;
		СтруктураФИО.Вставить("Фамилия", ВыборкаНазначений.ОтветственныйФамилия);
		СтруктураФИО.Вставить("Имя", ВыборкаНазначений.ОтветственныйИмя);
		СтруктураФИО.Вставить("Отчество", ВыборкаНазначений.ОтветственныйОтчество);
		СтруктураФИО.Вставить("Инициалы", ВыборкаНазначений.ОтветственныйИнициалы);
		Описание.ОтветственныйФИО = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СтруктураФИО);
	КонецЕсли;
	
	Если ВыборкаНазначений.ЕстьСотрудники Тогда
		Пока ВыборкаСотрудников.НайтиСледующий(ВыборкаНазначений.ДокументСсылка, "ДокументСсылка") Цикл
			ЗаполнитьЗначенияСвойств(Описание.ТаблицаСотрудников.Добавить(), ВыборкаСотрудников);
			Описание.СписокСотрудников.Добавить(ВыборкаСотрудников.Сотрудник);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОрганизации(Организация, Описание)
	
	ИменаПолей =
	"НаимЮЛПол,
	|ИННЮЛ,
	|ОГРН,
	|ПолныйАдрЮР,
	|ТелОрганизации,
	|ФаксОрганизации,
	|АдресЭлектроннойПочтыОрганизации,
	|ОКФС,
	|НаименованиеОКФС,
	|ОКВЭД,
	|ОКВЭД2,
	|ОснВидДеят,
	|ОснВидДеят2";
	
	УстановитьПривилегированныйРежим(Истина);
	СведенияОрганизации = ЗарплатаКадры.СведенияОбОрганизации(Организация, ИменаПолей);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьПредставлениеОрганизации(СведенияОрганизации, Описание.ОрганизацияПредставление);
	ЗаполнитьОКВЭДОрганизации(СведенияОрганизации, Описание.ОКВЭДПредставление);
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеОрганизации(СведенияОрганизации, Представление)
	
	Представление = "";
	
	Если ЗначениеЗаполнено(СведенияОрганизации.ИННЮЛ) Тогда
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИНН %1,';
																									|en = 'TIN %1,'"), СведенияОрганизации.ИННЮЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОрганизации.ОГРН) Тогда
		Если Не ПустаяСтрока(Представление) Тогда
			Представление = Представление + Символы.НПП;
		КонецЕсли;
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ОГРН %1,';
																									|en = 'PSRN %1'"), СведенияОрганизации.ОГРН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрЗаменить(СведенияОрганизации.ПолныйАдрЮР, ",", "")) Тогда
		Если Не ПустаяСтрока(Представление) Тогда
			Представление = Представление + Символы.ПС;
		КонецЕсли;
		Представление = Представление + СведенияОрганизации.ПолныйАдрЮР + ",";
		Если ЗначениеЗаполнено(СведенияОрганизации.ТелОрганизации) Тогда
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + " ";
			КонецЕсли;
			СведенияОрганизации.ТелОрганизации = СтрЗаменить(СведенияОрганизации.ТелОрганизации, " ", Символы.НПП);
			Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'тел.%2%1,';
																										|en = 'phone%2%1'"), СведенияОрганизации.ТелОрганизации, Символы.НПП);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОрганизации.ФаксОрганизации) Тогда
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + " ";
			КонецЕсли;
			СведенияОрганизации.ФаксОрганизации = СтрЗаменить(СведенияОрганизации.ФаксОрганизации, " ", Символы.НПП);
			Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'факс%2%1,';
																										|en = 'fax%2%1'"), СведенияОрганизации.ФаксОрганизации, Символы.НПП);
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОрганизации.АдресЭлектроннойПочтыОрганизации) Тогда
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + " ";
			КонецЕсли;
			Представление = Представление + СведенияОрганизации.АдресЭлектроннойПочтыОрганизации + ",";
		КонецЕсли;
		Если Прав(Представление, 1) = "," Тогда
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Представление);
		КонецЕсли;
	КонецЕсли;
	
	Представление = СведенияОрганизации.НаимЮЛПол + Символы.ПС + Представление;
	
КонецПроцедуры

Процедура ЗаполнитьОКВЭДОрганизации(СведенияОрганизации, Представление)
	
	Представление = "";
	
	Если ЗначениеЗаполнено(СведенияОрганизации.ОКФС) Тогда
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Форма собственности %1';
				|en = 'Ownership form %1'"), 
			СведенияОрганизации.ОКФС);
		Если ЗначениеЗаполнено(СведенияОрганизации.НаименованиеОКФС) Тогда
			Представление = Представление + ", " + СведенияОрганизации.НаименованиеОКФС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОрганизации.ОКВЭД) Тогда
		Если Не ПустаяСтрока(Представление) Тогда
			Представление = Представление + Символы.ПС;
		КонецЕсли;
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ОКВЭД %1';
																									|en = 'OKVED %1'"), СведенияОрганизации.ОКВЭД);
		Если ЗначениеЗаполнено(СведенияОрганизации.ОснВидДеят) Тогда
			Представление = Представление + ", " + СведенияОрганизации.ОснВидДеят;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОрганизации.ОКВЭД2) Тогда
		Если Не ПустаяСтрока(Представление) Тогда
			Представление = Представление + Символы.ПС;
		КонецЕсли;
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ОКВЭД %1';
																									|en = 'OKVED %1'"), СведенияОрганизации.ОКВЭД2);
		Если ЗначениеЗаполнено(СведенияОрганизации.ОснВидДеят2) Тогда
			Представление = Представление + ", " + СведенияОрганизации.ОснВидДеят2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НазначениеРабочихМест.Ссылка КАК Ссылка,
	|	НазначениеРабочихМестСотрудники.Сотрудник КАК Сотрудник,
	|	НазначениеРабочихМестРабочиеМеста.РабочееМесто КАК РабочееМесто,
	|	НазначениеРабочихМест.НачалоПериода КАК ДатаНачала,
	|	НазначениеРабочихМест.ОкончаниеПериода КАК ДатаОкончания,
	|	НазначениеРабочихМест.Организация КАК Организация
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.НазначениеРабочихМестСотрудникам КАК НазначениеРабочихМест
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.Сотрудники КАК НазначениеРабочихМестСотрудники
	|		ПО НазначениеРабочихМест.Ссылка В (&МассивСсылок)
	|		И НазначениеРабочихМест.Ссылка = НазначениеРабочихМестСотрудники.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.РабочиеМеста КАК НазначениеРабочихМестРабочиеМеста
	|		ПО НазначениеРабочихМестРабочиеМеста.Ссылка = НазначениеРабочихМестСотрудники.Ссылка
	|		И НазначениеРабочихМестРабочиеМеста.ИдентификаторСтрокиРабочегоМеста = НазначениеРабочихМестСотрудники.ИдентификаторСтрокиРабочегоМеста";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументов", "Сотрудник,ДатаНачала");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ВидЗанятости");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Сотрудник КАК Сотрудник,
	|	ДанныеДокументов.ДатаНачала КАК ДатаНачала,
	|	ДанныеДокументов.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.РабочееМесто КАК РабочееМесто,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачала = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
			ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
			ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Перемещение;
			ОписаниеПериода.ВидЗанятости = Выборка.ВидЗанятости;
			
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
			
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "РабочееМесто", Выборка.РабочееМесто);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДляРегистрацииВУчете;
	
КонецФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.НазначениеРабочихМестСотрудникам);
	
КонецФункции

Функция ПоляОтбораПериодическихДанных(ДокументСсылка) Экспорт
	
	Отбор = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отбор, "Регистратор", "<>", ДокументСсылка);
	
	ПоляОтбораПериодическихДанных = Новый Структура;
	ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", Отбор);
	ПоляОтбораПериодическихДанных.Вставить("ГрафикРаботыСотрудников",	 Отбор);
	ПоляОтбораПериодическихДанных.Вставить("РабочиеМестаСотрудников",	 Отбор);
	
	Возврат ПоляОтбораПериодическихДанных;
	
КонецФункции

#КонецОбласти

#КонецЕсли