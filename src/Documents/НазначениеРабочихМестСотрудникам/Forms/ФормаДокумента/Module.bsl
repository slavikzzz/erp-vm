#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда 
		ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект, Документы.НазначениеРабочихМестСотрудникам.ОписаниеПодписейДокумента());
	КонецЕсли;
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			Объект.НачалоПериода = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.НазначениеРабочихМестСотрудникам.Форма.ФормаВыбораСотрудников" Тогда
		РазбитьРабочееМесто(ВыбранноеЗначение);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ЗаполнитьСотрудников(ИдентификаторыРабочихМест());
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда 
		ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	КонецЕсли;	
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	КадровыйУчетФормыРасширенный.ЗапуститьОтложеннуюОбработкуДанных(
		ТекущийОбъект, Метаданные.Документы.НазначениеРабочихМестСотрудникам.ТабличныеЧасти.Сотрудники.Реквизиты.Сотрудник);
	
	ДанныеВРеквизиты();
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ЗаполнитьСотрудников(ИдентификаторыРабочихМест());
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	УстановитьПараметрыФункциональныхОпций(ЭтотОбъект);
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыНаСервере();
	
КонецПроцедуры

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура РабочиеМестаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "РабочиеМестаКомандаСотрудники" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Сотрудники", Новый Массив(ТекущиеДанные.МассивСотрудников));
		ПараметрыОткрытия.Вставить("РабочееМесто", ТекущиеДанные.РабочееМесто);
		
		ОткрытьФорму("Документ.НазначениеРабочихМестСотрудникам.Форма.НовоеРабочееМесто",
			ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	РабочиеМестаПередУдалениемНаСервере(Элемент.ТекущиеДанные.ИдентификаторСтрокиРабочегоМеста);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочиеМестаОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(ЭтотОбъект);
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура Подбор(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата начала периода.';
								|en = 'Start date is required.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.РабочиеМеста,
		Объект.Организация,
		Объект.Подразделение,
		Объект.НачалоПериода,
		Объект.ОкончаниеПериода,
		,
		АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация.';
								|en = 'Company is not specified.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата начала периода.';
								|en = 'Start date is required.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРабочиеМеста();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРабочиеМеста(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация.';
								|en = 'Company is not specified.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата начала периода.';
								|en = 'Start date is required.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьРабочиеМестаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьСтроки(Команда)
	
	ВыделенныеСтроки = Элементы.РабочиеМеста.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		ВызватьИсключение НСтр("ru = 'Для объединения необходимо выделить хотя бы 2 строки.';
								|en = 'Select at least 2 lines to merge.'");
	КонецЕсли;
	
	СтруктураВозврата = ПроверитьПередОбъединением(ВыделенныеСтроки);
	
	Если СтруктураВозврата.РазныеПодразделения Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось объединить выделенные строки: выберите строки с одинаковыми подразделениями.';
								|en = 'Cannot merge the selected lines: select lines with the same business units.'");
	ИначеЕсли СтруктураВозврата.РазныеДолжности Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось объединить выделенные строки: выберите строки с одинаковыми должностями.';
								|en = 'Cannot merge the selected lines: select lines with the same job titles.'");
	ИначеЕсли СтруктураВозврата.ОдинаковыеГрафики Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось объединить выделенные строки: выберите строки с разными графиками.';
								|en = 'Cannot merge the selected lines: select lines with different schedules.'");
	КонецЕсли;
		
	 ОбъединитьСтрокиРабочихМест(ВыделенныеСтроки, СтруктураВозврата.МассивИдентификаторовСтрок);
	 
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	Если ВыбранаСтрокаДляВыполненияКоманды(Элементы.РабочиеМеста) Тогда
		
		ПроверитьРазбитьРабочееМестоСервер();
		
		ТекущиеДанные = Элементы.РабочиеМеста.ТекущиеДанные;
		
		АдресСотрудников = ПоместитьСотрудниковВХранилище(ТекущиеДанные.МассивСотрудников);
		ПараметрыФормы = Новый Структура("АдресСотрудников", АдресСотрудников);
		ПараметрыФормы.Вставить("Подразделение", ТекущиеДанные.Подразделение);
		ПараметрыФормы.Вставить("Должность", ТекущиеДанные.Должность);
		ОткрытьФорму("Документ.НазначениеРабочихМестСотрудникам.Форма.ФормаВыбораСотрудников", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда 
		ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	КонецЕсли;	
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСотрудниковВХранилище(Сотрудники)
	
	Возврат ПоместитьВоВременноеХранилище(Сотрудники, УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ИдентификаторыРабочихМест()
	
	ИдентификаторыРабочихМест = Новый Соответствие;
	
	Для Каждого РабочееМесто Из Объект.РабочиеМеста Цикл
		ИдентификаторыРабочихМест.Вставить(РабочееМесто.ИдентификаторСтрокиРабочегоМеста, РабочееМесто.МассивСотрудников);
	КонецЦикла;
	
	Возврат ИдентификаторыРабочихМест
	
КонецФункции

&НаСервере
Процедура ОбъединитьСтрокиРабочихМест(ВыделенныеСтроки, МассивИдентификаторовСтрок)
		
	СтрокаРабочегоМеста = Объект.РабочиеМеста.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	МассивСотрудниковПриемник = Новый Массив(СтрокаРабочегоМеста.МассивСотрудников);
	
	СтрокаПропущена = Ложь;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Если Не СтрокаПропущена Тогда
			СтрокаПропущена = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаКОбъединению = Объект.РабочиеМеста.НайтиПоИдентификатору(Идентификатор);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудниковПриемник, СтрокаКОбъединению.МассивСотрудников, Истина);
		
		РабочиеМестаПередУдалениемНаСервере(СтрокаКОбъединению.ИдентификаторСтрокиРабочегоМеста);
		
		Объект.РабочиеМеста.Удалить(СтрокаКОбъединению);	
		
	КонецЦикла;
	
	СтрокаРабочегоМеста.МассивСотрудников = Новый ФиксированныйМассив(МассивСотрудниковПриемник);
	СтрокаРабочегоМеста.КомандаСотрудники = КраткийСоставСотрудников(СтрокаРабочегоМеста.МассивСотрудников, Объект.НачалоПериода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеСтрокиСотрудника()
	
	Описание = Новый Структура(
		"Сотрудник,
		|ГрафикРаботы,
		|ФамилияИО");
	Описание.Вставить("РабочееМесто", Справочники.РабочиеМестаОхраныТруда.ПустаяСсылка());
	
	Возврат Описание;
	
КонецФункции

&НаКлиенте
Функция ВыбранаСтрокаДляВыполненияКоманды(ТаблицаФормы)
	
	Если Не ЗначениеЗаполнено(ТаблицаФормы.ВыделенныеСтроки) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.';
										|en = 'To execute the command, select a table row.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьРазбитьРабочееМестоСервер()
	
	СтрокаРабочегоМеста = Объект.РабочиеМеста.НайтиПоИдентификатору(Элементы.РабочиеМеста.ТекущаяСтрока);
	КоличествоСотрудников = СтрокаРабочегоМеста.МассивСотрудников.Количество();
	Если КоличествоСотрудников < 2 Тогда
		ВызватьИсключение НСтр("ru = 'Разбиение строки возможно для рабочих мест, на которых находится более одного сотрудника.';
								|en = 'You can split lines for workplaces occupied by more than one employee.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазбитьРабочееМесто(Сотрудники)
	
	РабочееМестоВНовойСтроке = Неопределено;
	
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		РабочееМестоВНовойСтроке = Сотрудники.РабочееМестоВНовойСтроке;
		МассивСотрудников = Новый Массив;
		Для Каждого Строка Из ПолучитьИзВременногоХранилища(Сотрудники.АдресСотрудников) Цикл
			Описание = ОписаниеСтрокиСотрудника();
			ЗаполнитьЗначенияСвойств(Описание, Строка);
			МассивСотрудников.Добавить(Описание);	
		КонецЦикла;	
	Иначе
		МассивСотрудников = Сотрудники;
	КонецЕсли;
	
	ИдентификаторРабочегоМеста = Элементы.РабочиеМеста.ТекущаяСтрока;
	
	СтрокаРабочегоМеста = Объект.РабочиеМеста.НайтиПоИдентификатору(ИдентификаторРабочегоМеста); 
	МассивПервойСтроки = Новый Массив(СтрокаРабочегоМеста.МассивСотрудников);
	
	НоваяСтрока = Объект.РабочиеМеста.Вставить(СтрокаРабочегоМеста.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРабочегоМеста);
	Если ЗначениеЗаполнено(РабочееМестоВНовойСтроке) Тогда
		НоваяСтрока.РабочееМесто = РабочееМестоВНовойСтроке;
	КонецЕсли;
	МаксимальныйИдентификаторСтрокиРабочегоМеста = МаксимальныйИдентификаторСтрокиРабочегоМеста + 1;
	НоваяСтрока.ИдентификаторСтрокиРабочегоМеста = МаксимальныйИдентификаторСтрокиРабочегоМеста;
	НовыйМассивСотрудников = Новый Массив;
	
	Для Каждого ДанныеСотрудника Из МассивСотрудников Цикл
		Для Каждого СтрокаСотрудника Из МассивПервойСтроки Цикл
			Если ОбщегоНазначения.ДанныеСовпадают(ДанныеСотрудника, СтрокаСотрудника) Тогда
				МассивПервойСтроки.Удалить(МассивПервойСтроки.Найти(СтрокаСотрудника));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйМассивСотрудников, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСотрудника), Истина);
	КонецЦикла;
	
	НоваяСтрока.МассивСотрудников = Новый ФиксированныйМассив(НовыйМассивСотрудников);
	НоваяСтрока.КомандаСотрудники = КраткийСоставСотрудников(НоваяСтрока.МассивСотрудников, Объект.НачалоПериода);
	
	СтрокаРабочегоМеста.МассивСотрудников = Новый ФиксированныйМассив(МассивПервойСтроки);
	СтрокаРабочегоМеста.КомандаСотрудники = КраткийСоставСотрудников(СтрокаРабочегоМеста.МассивСотрудников, Объект.НачалоПериода);
		
	Элементы.РабочиеМеста.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура РабочиеМестаОбработкаВыбораНаСервере(ВыбранныеСотрудники)
	
	Если ТипЗнч(ВыбранныеСотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВыбранныеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеСотрудники);
	КонецЕсли;
	
	СуществующиеСотрудники = Новый Массив();
	Для Каждого СтрокаРабочегоМеста Из Объект.РабочиеМеста Цикл
		Для Каждого СтрокаСотрудника Из СтрокаРабочегоМеста.МассивСотрудников Цикл
			СуществующиеСотрудники.Добавить(СтрокаСотрудника.Сотрудник);
		КонецЦикла;
	КонецЦикла;
	
	ДобавитьДанныеПоСотрудникам(ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВыбранныеСотрудники, СуществующиеСотрудники));
	
КонецПроцедуры

&НаСервере
Процедура РабочиеМестаПередУдалениемНаСервере(ИдентификаторСтрокиРабочегоМеста)
	
	СтруктураПоискаСотрудников = Новый Структура("ИдентификаторСтрокиРабочегоМеста", ИдентификаторСтрокиРабочегоМеста);
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураПоискаСотрудников);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.Сотрудники.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРабочиеМеста()
	
	Объект.РабочиеМеста.Очистить();
	Объект.Сотрудники.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация = Объект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода = Объект.НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода = Объект.НачалоПериода;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Подразделение = Объект.Подразделение;
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
	КадровыеДанные = "РабочееМестоОхраныТруда, Подразделение, Должность, ГрафикРаботы,ФамилияИО";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные, ПоляОтбораПериодическихДанных(Объект.Ссылка));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	КадровыеДанныеСотрудников.ФамилияИО КАК ФамилияИО
	|ПОМЕСТИТЬ ВТСотрудникиБезРабочихМест
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
	|		ПО КадровыеДанныеСотрудников.РабочееМестоОхраныТруда = РабочиеМестаОхраныТруда.Ссылка
	|ГДЕ
	|	РабочиеМестаОхраныТруда.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезРабочихМест.Сотрудник КАК Сотрудник,
	|	СотрудникиБезРабочихМест.Должность КАК Должность,
	|	СотрудникиБезРабочихМест.Подразделение КАК Подразделение,
	|	СотрудникиБезРабочихМест.ГрафикРаботы КАК ГрафикРаботы,
	|	СотрудникиБезРабочихМест.ФамилияИО КАК ФамилияИО,
	|	РабочиеМестаОхраныТруда.Ссылка КАК РабочееМесто
	|ИЗ
	|	ВТСотрудникиБезРабочихМест КАК СотрудникиБезРабочихМест
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
	|		ПО СотрудникиБезРабочихМест.Должность = РабочиеМестаОхраныТруда.Должность
	|			И СотрудникиБезРабочихМест.Подразделение = РабочиеМестаОхраныТруда.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	Должность,
	|	Сотрудник
	|ИТОГИ
	|	МАКСИМУМ(Должность),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(ГрафикРаботы),
	|	МАКСИМУМ(ФамилияИО)
	|ПО
	|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСотрудников = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		НайденныеСтроки = Объект.РабочиеМеста.НайтиСтроки(Новый Структура("Должность,Подразделение", ВыборкаСотрудников.Должность, ВыборкаСотрудников.Подразделение));
		ВыборкаРабочихМест = ВыборкаСотрудников.Выбрать();

		СотрудникДобавлен = Ложь;
		Если НайденныеСтроки.Количество() = 0 Тогда
			Пока ВыборкаРабочихМест.Следующий() Цикл
				Если СотрудникДобавлен Тогда
					Прервать;
				КонецЕсли;
				ДобавитьРабочееМесто(ВыборкаРабочихМест, , Ложь, СотрудникДобавлен);
			КонецЦикла;
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			Если ГрафикРаботыНаРабочемМестеЗанят(НайденнаяСтрока.МассивСотрудников, ВыборкаСотрудников.ГрафикРаботы) Тогда
				Пока ВыборкаРабочихМест.Следующий() Цикл
					Если СотрудникДобавлен Тогда
						Прервать;
					КонецЕсли;
					ДобавитьРабочееМесто(ВыборкаРабочихМест, , Ложь, СотрудникДобавлен);
				КонецЦикла;
			Иначе
				ДополнитьМассивСотрудников(НайденнаяСтрока, ВыборкаСотрудников);
				СотрудникДобавлен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СотрудникДобавлен Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если СотрудникДобавлен Тогда
					Прервать;
				КонецЕсли;
				Если Не ГрафикРаботыНаРабочемМестеЗанят(НайденнаяСтрока.МассивСотрудников, ВыборкаСотрудников.ГрафикРаботы) Тогда
					ДополнитьМассивСотрудников(НайденнаяСтрока, ВыборкаСотрудников);
					СотрудникДобавлен = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не СотрудникДобавлен Тогда
				Пока ВыборкаРабочихМест.Следующий() Цикл
					Если СотрудникДобавлен Тогда
						Прервать;
					КонецЕсли;
					ДобавитьРабочееМесто(ВыборкаРабочихМест, , Ложь, СотрудникДобавлен);
				КонецЦикла;
			КонецЕсли;
			Если Не СотрудникДобавлен Тогда
				ДобавитьРабочееМесто(ВыборкаСотрудников);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоляОтбораПериодическихДанных(Ссылка)
	
	Возврат Документы.НазначениеРабочихМестСотрудникам.ПоляОтбораПериодическихДанных(Ссылка);
	
КонецФункции

&НаСервере
Процедура ДобавитьРабочееМесто(ДанныеЗаполнения, ЗаполнятьТекущееРабочееМесто = Ложь, ДобавитьБезРабочегоМеста = Истина, СотрудникДобавлен = Ложь)
	
	Если ЗаполнятьТекущееРабочееМесто Тогда
		ИмяПоляРабочегоМеста = "РабочееМестоОхраныТруда";
	Иначе
		ИмяПоляРабочегоМеста = "РабочееМесто";
	КонецЕсли;
	
	СтрокиРабочегоМеста = Объект.РабочиеМеста.НайтиСтроки(Новый Структура("РабочееМесто", ДанныеЗаполнения[ИмяПоляРабочегоМеста]));
	РабочееМестоНайдено = СтрокиРабочегоМеста.Количество() > 0;
	
	Если РабочееМестоНайдено И Не ДобавитьБезРабочегоМеста Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникДобавлен = Истина;
	
	НоваяСтрока = Объект.РабочиеМеста.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения,,
		?(РабочееМестоНайдено И ИмяПоляРабочегоМеста = "РабочееМесто", "РабочееМесто", ""));
	МаксимальныйИдентификаторСтрокиРабочегоМеста = МаксимальныйИдентификаторСтрокиРабочегоМеста + 1;
	НоваяСтрока.ИдентификаторСтрокиРабочегоМеста = МаксимальныйИдентификаторСтрокиРабочегоМеста;
	
	Описание = ОписаниеСтрокиСотрудника();
	Если ЗаполнятьТекущееРабочееМесто Тогда
		ЗаполнитьЗначенияСвойств(Описание, ДанныеЗаполнения);
		Описание.РабочееМесто = ДанныеЗаполнения[ИмяПоляРабочегоМеста];
		НоваяСтрока.РабочееМесто = ДанныеЗаполнения[ИмяПоляРабочегоМеста];
	Иначе
		ЗаполнитьЗначенияСвойств(Описание, ДанныеЗаполнения, , "РабочееМесто");
	КонецЕсли;
	
	НоваяСтрока.МассивСотрудников = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Описание));
	НоваяСтрока.КомандаСотрудники = КраткийСоставСотрудников(НоваяСтрока.МассивСотрудников, Объект.НачалоПериода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГрафикРаботыНаРабочемМестеЗанят(МассивСотрудников, ГрафикРаботы)
	
	МассивГрафиков = Новый Массив;
	Для Каждого ДанныеСотрудника Из МассивСотрудников Цикл
		МассивГрафиков.Добавить(ДанныеСотрудника.ГрафикРаботы);
	КонецЦикла;
	
	Возврат Не МассивГрафиков.Найти(ГрафикРаботы) = Неопределено;
	
КонецФункции

&НаСервере
Процедура СоздатьРабочиеМестаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРабочихМест", Объект.РабочиеМеста.Выгрузить());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРабочихМест.Должность,
		|	ТаблицаРабочихМест.Подразделение,
		|	ТаблицаРабочихМест.РабочееМесто,
		|	ТаблицаРабочихМест.ИдентификаторСтрокиРабочегоМеста
		|ПОМЕСТИТЬ ВТРабочиеМеста
		|ИЗ
		|	&ТаблицаРабочихМест КАК ТаблицаРабочихМест
		|ГДЕ
		|	ТаблицаРабочихМест.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочиеМеста.ИдентификаторСтрокиРабочегоМеста КАК Идентификатор,
		|	РабочиеМеста.Подразделение КАК Подразделение,
		|	РабочиеМеста.Должность КАК Должность
		|ИЗ
		|	ВТРабочиеМеста КАК РабочиеМеста";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.РабочиеМеста.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРабочегоМеста", Выборка.Идентификатор));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.РабочееМесто = НовоеРабочееМесто(Выборка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовоеРабочееМесто(ДанныеРабочегоМеста)
	
	РабочееМестоОбъект = Справочники.РабочиеМестаОхраныТруда.СоздатьЭлемент();
	РабочееМестоОбъект.Владелец = Объект.Организация;
	РабочееМестоОбъект.Подразделение = ДанныеРабочегоМеста.Подразделение;
	РабочееМестоОбъект.Должность = ДанныеРабочегоМеста.Должность;
	РабочееМестоОбъект.ПорядковыйНомер =
		Справочники.РабочиеМестаОхраныТруда.МаксимальныйНомерРабочегоМеста(РабочееМестоОбъект.Владелец, РабочееМестоОбъект.Подразделение) + 1;
	РабочееМестоОбъект.Номер = Строка(РабочееМестоОбъект.ПорядковыйНомер);
	РабочееМестоОбъект.Наименование = РабочиеМестаОхраныТруда.НаименованиеРабочегоМеста(
		РабочееМестоОбъект.Подразделение,
		РабочееМестоОбъект.Должность, 
		РабочееМестоОбъект.Номер);
	РабочееМестоОбъект.Записать();
	
	Возврат РабочееМестоОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПередОбъединением(ВыделенныеСтроки)
	
	СоответствиеПодразделений = Новый Соответствие;
	СоответствиеДолжностей = Новый Соответствие;
	СоответствиеГрафиков = Новый Соответствие;
	
	МассивИдентификаторовСтрок = Новый Массив;
	СтруктураВозврата = Новый Структура;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаРабочегоМеста = Объект.РабочиеМеста.НайтиПоИдентификатору(Идентификатор);
		
		СоответствиеПодразделений.Вставить(СтрокаРабочегоМеста.Подразделение,"");
		СоответствиеДолжностей.Вставить(СтрокаРабочегоМеста.Должность,"");
		Для Каждого СтрокаДанных Из СтрокаРабочегоМеста.МассивСотрудников Цикл
			СоответствиеГрафиков.Вставить(СтрокаДанных.ГрафикРаботы,"");
		КонецЦикла;
		
		МассивИдентификаторовСтрок.Добавить(СтрокаРабочегоМеста.ИдентификаторСтрокиРабочегоМеста);
	КонецЦикла;
		
	Если СоответствиеПодразделений.Количество() > 1 Тогда
		СтруктураВозврата.Вставить("РазныеПодразделения",	Истина);
		Возврат СтруктураВозврата;
	ИначеЕсли СоответствиеДолжностей.Количество() > 1 Тогда
		СтруктураВозврата.Вставить("РазныеПодразделения",	Ложь);
		СтруктураВозврата.Вставить("РазныеДолжности",		Истина);
	ИначеЕсли СоответствиеГрафиков.Количество() = 1 Тогда
		СтруктураВозврата.Вставить("РазныеПодразделения",	Ложь);
		СтруктураВозврата.Вставить("РазныеДолжности",		Ложь);
		СтруктураВозврата.Вставить("ОдинаковыеГрафики",		Истина);
	Иначе
		СтруктураВозврата.Вставить("РазныеПодразделения",	Ложь);
		СтруктураВозврата.Вставить("РазныеДолжности",		Ложь);
		СтруктураВозврата.Вставить("ОдинаковыеГрафики",		Ложь);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("МассивИдентификаторовСтрок",МассивИдентификаторовСтрок);
	
	Возврат СтруктураВозврата;	
		
КонецФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

#Область КлючевыеРеквизитыЗаполненияФормы

&НаСервере
// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.РабочиеМеста");
	Массив.Добавить("Объект.Сотрудники");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации';
																						|en = 'companies'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Подразделение", НСтр("ru = 'подразделения';
																						|en = 'business units'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область ИсправлениеДокументов

&НаКлиенте
Процедура УстановитьПоляИсправленияНаКлиенте() Экспорт
	
	УстановитьПоляИсправления(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПоляИсправления(Форма)

	ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(Форма, "ПериодическиеСведения");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	МаксимальныйИдентификаторСтрокиРабочегоМеста = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(
		Объект.РабочиеМеста, "ИдентификаторСтрокиРабочегоМеста");
		
	УстановитьПараметрыФункциональныхОпций(ЭтотОбъект);
	
	ДополнитьФорму();
	ДанныеВРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	
	ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	СписокСотрудников = Объект.Сотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Если СписокСотрудников.Количество() > 0 Тогда
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина,
			СписокСотрудников,
			"РабочееМестоОхраныТруда,ГрафикРаботы,ФамилияИО",
			Объект.НачалоПериода,
			ПоляОтбораПериодическихДанных(Объект.Ссылка));
		ТекущиеКадровыеДанныеСотрудников.Загрузить(КадровыеДанныеСотрудников);
		Для Каждого СтрокаРабочегоМеста Из Объект.РабочиеМеста Цикл
			ЗаполнитьМассивСотрудников(СтрокаРабочегоМеста);
		КонецЦикла;
	КонецЕсли;
	
	// заполним предупреждения 
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
	ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтотОбъект, "ПериодическиеСведения");
	УстановитьПоляИсправления(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоСотрудникам(СотрудникКДобавлению)
	
	Если ТипЗнч(СотрудникКДобавлению) = Тип("СправочникСсылка.Сотрудники") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникКДобавлению);
	Иначе
		СписокСотрудников = СотрудникКДобавлению;
	КонецЕсли;
	
	КадровыеДанные = "РабочееМестоОхраныТруда,Должность,Подразделение,ГрафикРаботы,ФамилияИО";
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, 
		СписокСотрудников, 
		КадровыеДанные, 
		Объект.НачалоПериода,
		ПоляОтбораПериодическихДанных(Объект.Ссылка));
	
	Для каждого ДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		СтрокиРабочегоМеста = Объект.РабочиеМеста.НайтиСтроки(
			Новый Структура("РабочееМесто,Должность,Подразделение",
							ДанныеСотрудника.РабочееМестоОхраныТруда,
							ДанныеСотрудника.Должность,
							ДанныеСотрудника.Подразделение));
		
		Если СтрокиРабочегоМеста.Количество() = 0 Тогда
			СтрокиРабочегоМеста = Объект.РабочиеМеста.НайтиСтроки(
				Новый Структура("Должность,Подразделение", ДанныеСотрудника.Должность, ДанныеСотрудника.Подразделение));
		КонецЕсли;
		
		Если СтрокиРабочегоМеста.Количество() > 0 Тогда
			СтрокаРабочегоМеста = СтрокиРабочегоМеста[0];
			Если Не ЗначениеЗаполнено(СтрокаРабочегоМеста.РабочееМесто) Тогда
				ДобавитьРабочееМесто(ДанныеСотрудника, Истина);
			ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.РабочееМестоОхраныТруда) И Не СтрокаРабочегоМеста.РабочееМесто = ДанныеСотрудника.РабочееМестоОхраныТруда Тогда
				ДобавитьРабочееМесто(ДанныеСотрудника, Истина);
			ИначеЕсли ГрафикРаботыНаРабочемМестеЗанят(СтрокаРабочегоМеста.МассивСотрудников, ДанныеСотрудника.ГрафикРаботы) Тогда
				ДобавитьРабочееМесто(ДанныеСотрудника, Истина);
			Иначе
				ДополнитьМассивСотрудников(СтрокаРабочегоМеста, ДанныеСотрудника, Истина);
			КонецЕсли;
		Иначе
			ДобавитьРабочееМесто(ДанныеСотрудника, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	МассивСотрудников = Новый Массив;
	
	Для Каждого СтрокаРабочегоМеста Из Объект.РабочиеМеста Цикл
		Для Каждого СтрокаСотрудника Из СтрокаРабочегоМеста.МассивСотрудников Цикл
			МассивСотрудников.Добавить(СтрокаСотрудника.Сотрудник);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(МассивСотрудников, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыФункциональныхОпций(Форма)
	
	ПараметрыФункциональныхОпций = Новый Структура("Организация", Форма.Объект.Организация);
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивСотрудников(СтрокаРабочегоМеста)
	
	СотрудникиНаРабочемМесте = Новый Массив;
	
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(
		Новый Структура("ИдентификаторСтрокиРабочегоМеста", СтрокаРабочегоМеста.ИдентификаторСтрокиРабочегоМеста));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
		Описание = ОписаниеСтрокиСотрудника();
		ЗаполнитьЗначенияСвойств(Описание, НайденнаяСтрока);
		НайденныеКадровыеДанные = ТекущиеКадровыеДанныеСотрудников.НайтиСтроки(Новый Структура("Сотрудник", НайденнаяСтрока.Сотрудник));
		Если НайденныеКадровыеДанные.Количество() > 0 Тогда
			Описание.РабочееМесто = НайденныеКадровыеДанные[0].РабочееМестоОхраныТруда;
			Описание.ГрафикРаботы = НайденныеКадровыеДанные[0].ГрафикРаботы;
			Описание.ФамилияИО = НайденныеКадровыеДанные[0].ФамилияИО;
		КонецЕсли;
		СотрудникиНаРабочемМесте.Добавить(Описание);
	КонецЦикла;
	
	СтрокаРабочегоМеста.МассивСотрудников = Новый ФиксированныйМассив(СотрудникиНаРабочемМесте);
	СтрокаРабочегоМеста.КомандаСотрудники = КраткийСоставСотрудников(СотрудникиНаРабочемМесте, Объект.НачалоПериода);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьМассивСотрудников(СтрокаРабочегоМеста, ДанныеДляДополнения, ЗаполнятьТекущееРабочееМесто = Ложь)
	
	Описание = ОписаниеСтрокиСотрудника();
	Если ЗаполнятьТекущееРабочееМесто Тогда
		ЗаполнитьЗначенияСвойств(Описание, ДанныеДляДополнения);
		Описание.РабочееМесто = ДанныеДляДополнения["РабочееМестоОхраныТруда"];
	Иначе
		ЗаполнитьЗначенияСвойств(Описание, ДанныеДляДополнения, , "РабочееМесто");
	КонецЕсли;
	
	МассивСотрудниковПриемник = Новый Массив(СтрокаРабочегоМеста.МассивСотрудников);
	МассивСотрудниковПриемник.Добавить(Описание);
	СтрокаРабочегоМеста.МассивСотрудников = Новый ФиксированныйМассив(МассивСотрудниковПриемник);
	СтрокаРабочегоМеста.КомандаСотрудники = КраткийСоставСотрудников(СтрокаРабочегоМеста.МассивСотрудников, Объект.НачалоПериода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КраткийСоставСотрудников(МассивДанныхСотрудников, Дата)
	
	МассивСотрудников = Новый Массив;
	
	Для Каждого ДанныеСотрудника Из МассивДанныхСотрудников Цикл
		ЧастиСтрокиСотрудник = Новый Массив;
		ЧастиСтрокиСотрудник.Добавить(Строка(ДанныеСотрудника.ФамилияИО));
		ЧастиСтрокиСотрудник.Добавить(НСтр("ru = 'График:';
											|en = 'Schedule:'") + " " + Строка(ДанныеСотрудника.ГрафикРаботы));
		РабочееМестоТекст = ?(ЗначениеЗаполнено(ДанныеСотрудника.РабочееМесто),
							Строка(ДанныеСотрудника.РабочееМесто),
							НСтр("ru = '< не назначено >';
								|en = '< not assigned >'"));
		ЧастиСтрокиСотрудник.Добавить(НСтр("ru = 'Рабочее место:';
											|en = 'Workplace:'") + Символы.НПП + РабочееМестоТекст);
		МассивСотрудников.Добавить(СтрСоединить(ЧастиСтрокиСотрудник, ";" + Символы.НПП));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСотрудников, Символы.ПС);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииДатыНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", НСтр("ru = '< Не назначены рабочему месту >';
						|en = '< Not assigned to workplace >'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РабочиеМеста.УсловияТруда");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("РабочиеМестаУсловияТруда");
	
КонецПроцедуры

#КонецОбласти

