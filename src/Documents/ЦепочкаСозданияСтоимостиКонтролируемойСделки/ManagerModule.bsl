#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
// 
// Параметры:
//  Список - ОбъектМетаданных - список, для которого нужно вернуть текст ограничения.
//                              В процедуре ПриЗаполненииСписковСОграничениемДоступа нужно
//                              указать для списка значение Ложь, иначе вызова не будет.
//
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//  МассивОбъектов  - Массив Из ДокументСсылка.ЗаявлениеОВвозеТоваров   - ссылки на объекты, которые нужно распечатать.
//  ПараметрыПечати - Структура - дополнительные настройки печати.
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений Из ДокументСсылка.ЗаявлениеОВвозеТоваров - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр).
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

// На основании служебных данных по контролируемым сделкам, определяет какие сделки относятся в разряд контролируемых и
// какие нет, возвращает эти данные в виде временных таблиц.
//	Параметры:
//		ОтчетныйГод - Дата - дата начала отчетного периода за который подается уведомление о контролируемых сделках 
//							с цепочками стоимости сделок и подготавливаются врменные таблицы.
//		Организации - Массив из СправончикСсылка.Организации - организации, для которых формируются цепочки стоимости сделок.
//																		если список пуст, что выбираются все организации.
//	Возвращаемое значение:
//		МенеджерВременныхТаблиц - содержит в себе следующие таблицы:
//			УчастникиКонтролируемыхСделок - организации или контрагенты, сделки с которыми подлежат контролю;
//			КонтролируемыеСделки - данные из регистра накопления "КонтролируемыеСделкиОрганизаций", со сведениями о признаках по которым каждая конкретная сделка контролиурется;
//			КонтрагентыПоМинимальнойСумме - Сделки с контрагентами, которые контролируются так как сумма оборотов по ним превышает мимнимально контролируемую;
//			КонтрагентыКонтролируемыеПоОбщейСумме - Сделки с невзаимозависимыми контрагентами, которые контролируются так как сумма оборотов по ним превышает общую сумму;
//			КонтрагентыКонтролируемыеПоНДПИ - Сделки с контрагентами, контролируемые по НДПИ;
//			КонтрагентыКонтролируемыеПоСпецРежиму - Сделки с контрагентами, контролируемые по спецрежиму (сделка облагается ЕНВД или сделка с плательщиком ЕСХН);
//			КонтрагентыКонтролируемыеПоПрибыли - Сделки с контрагентами, контролируемые по налогу на прибыль;
//			КонтрагентыКонтролируемыеПоОЭЗ - Сделки с контрагентами, контролируемые в виду того, что контрагент зарегистрирован в особой экономической зоне;
//			КонтрагентыКонтролируемыеПоРегистрацииНеВРФ - Сделки с контрагентами, контролируемые в виду того, что контрагент зарегистрирован в стране с льготным налогообложением
//				или сделка совершается по товарам мировой биржевой торговли.
//
Функция ВременныеТаблицыДляЗаполненияЦепочекСозданияСтоимостиКонтролируемыхСделок(ОтчетныйГод, Организации) Экспорт
	
	// Цепочки создания стоимости контролируемых сделок используются для уведомлений, подаваемых за 2024 год и позднее.
	// Приказ ФНС от 02.12.2024 № ЕД-7-13/1088@
	ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2024();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = КонтролируемыеСделки.ПолучитьВременныеТаблицыДляЗаполненияСделок(
		Новый Структура ("ОтчетныйГод, Организации", ОтчетныйГод, Организации));
	Запрос.Параметры.Вставить("ОтчетныйГод", ОтчетныйГод);
	Запрос.Параметры.Вставить("УчитыватьСпецрежимДляПосредников",
		ОтчетныйГод >= КонтролируемыеСделки.ДатаНачалаУчетаСпецрежимовДляНевзаимозависимыхПосредников());
	Запрос.Параметры.Вставить("УчитыватьЕНВД", ОтчетныйГод < КонтролируемыеСделкиКлиентСервер.ДатаОтказаОтЕНВД());
	Запрос.Параметры.Вставить("УчитыватьИнвестиционныйВычет", 
		КонтролируемыеСделки.УчитываютсяСделкиСИнвестиционнымНалоговымВычетом(ОтчетныйГод));
	
	ГраницыКонтролируемостиСделок = КонтролируемыеСделки.ГраницыКонтролируемостиСделок(ОтчетныйГод, ВерсияУведомления);
	КонтролируемыеСделки.ДобавитьВПараметрыЗапроса(Запрос, ГраницыКонтролируемостиСделок);
	
	ГраницыДляКонтроля = КонтролируемыеСделки.ГраницыДляКонтроля(ВерсияУведомления);
	КонтролируемыеСделки.ДобавитьВПараметрыЗапроса(Запрос, ГраницыДляКонтроля);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	КонтролируемыеКонтрагенты.Контрагент КАК Контрагент,
	|	КонтролируемыеКонтрагенты.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации,
	|	ИностранныеКонтрагенты.Контрагент ЕСТЬ NULL КАК КонтрагентЗарегистрированВРФ,
	|	ЕСТЬNULL(ИностранныеКонтрагенты.СделкаВОбластиВнешнейТорговли, ЛОЖЬ) КАК СделкаВОбластиВнешнейТорговли,
	|	ЕСТЬNULL(ИностранныеКонтрагенты.ЗарегистрированВСтранеСЛьготнымНалогообложением, ЛОЖЬ) КАК ЗарегистрированВСтранеСЛьготнымНалогообложением
	|ПОМЕСТИТЬ УчастникиКонтролируемыхСделок
	|ИЗ
	|	КонтролируемыеКонтрагенты КАК КонтролируемыеКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КонтролируемыеКонтрагенты.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИностранныеКонтрагенты КАК ИностранныеКонтрагенты
	|		ПО (ИностранныеКонтрагенты.Контрагент = КонтролируемыеКонтрагенты.Контрагент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемыеКонтрагенты.Контрагент,
	|	КонтролируемыеКонтрагенты.ГоловнойКонтрагент,
	|	Организации.СтранаРегистрации,
	|	НЕ Организации.ОтделениеИностраннойОрганизации,
	|	ЕСТЬNULL(ИностранныеОрганизации.СделкаВОбластиВнешнейТорговли, ЛОЖЬ) КАК СделкаВОбластиВнешнейТорговли,
	|	ЕСТЬNULL(ИностранныеОрганизации.ЗарегистрированаВСтранеСЛьготнымНалогообложением, ЛОЖЬ)
	|ИЗ
	|	КонтролируемыеКонтрагенты КАК КонтролируемыеКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО КонтролируемыеКонтрагенты.Контрагент = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИностранныеОрганизации КАК ИностранныеОрганизации
	|		ПО (ИностранныеОрганизации.Организация = КонтролируемыеКонтрагенты.Контрагент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОКонтролируемыхСделках.Организация КАК Организация,
	|	УведомлениеОКонтролируемыхСделках.Ссылка КАК Уведомление,
	|	КонтролируемыеСделкиОрганизаций.Период КАК ПериодСделки,
	|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
	|	КонтролируемыеСделкиОрганизаций.Контрагент КАК Контрагент,
	|	УчастникиКонтролируемыхСделок.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	КонтролируемыеСделкиОрганизаций.Договор КАК Договор,
	|	КонтролируемыеСделкиОрганизаций.Комиссионер КАК Комиссионер,
	|	КонтролируемыеСделкиОрганизаций.РасчетныйДокумент КАК РасчетныйДокумент,
	|	КонтролируемыеСделкиОрганизаций.ПредметСделки КАК ПредметСделки,
	|	КонтролируемыеСделкиОрганизаций.СуммаБезНДСВРублях КАК СуммаБезНДСВРублях,
	|	КонтролируемыеСделкиОрганизаций.СуммаБезНДСВВалютеРасчетов КАК СуммаБезНДСВВалютеРасчетов,
	|	УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ КАК КонтрагентЗарегистрированВРФ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомНалогаНаПрибыль, ЛОЖЬ) <> ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ЯвляетсяПлательщикомНалогаНаПрибыль, ЛОЖЬ)
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомНалогаНаПрибыль, ЛОЖЬ) = ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ЯвляетсяПлательщикомНалогаНаПрибыль, ЛОЖЬ)
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|				И (ЕСТЬNULL(ДоговорыУчастниковКонтролируемыхСделок.СтороныПрименяютРазныеСтавкиПоНалогуНаПрибыль, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ЗарегистрированВОЭЗ, ЛОЖЬ) <> ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ЗарегистрированВОЭЗ, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта, ЛОЖЬ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоРазнымСтавкамНалогаНаПрибыль,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыМировойБиржевойТорговли.ПредметСделки ЕСТЬ NULL
	|				И УчастникиКонтролируемыхСделок.СделкаВОбластиВнешнейТорговли = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаВнешнейТорговлиТоваромМировойБиржевойТорговли,
	|	УчастникиКонтролируемыхСделок.ЗарегистрированВСтранеСЛьготнымНалогообложением КАК ЗарегистрированВСтранеСЛьготнымНалогообложением,
	|	ВЫБОР
	|		КОГДА (ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомНДПИ, ЛОЖЬ)
	|					И КонтролируемыеСделкиОрганизаций.ТипКонтролируемойСделки = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролируемыхСделок.ПолученДоход)
	|					И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ЯвляетсяПлательщикомНДПИ, ЛОЖЬ)
	|					И КонтролируемыеСделкиОрганизаций.ТипКонтролируемойСделки = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролируемыхСделок.ОсуществленРасход))
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|				И ЕСТЬNULL(КонтролируемыеСделкиОрганизаций.ПредметСделки.ОблагаетсяНДПИПоПроцентнойСтавке, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоНДПИ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ЗарегистрированВОЭЗ, ЛОЖЬ) <> ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ЗарегистрированВОЭЗ, ЛОЖЬ)
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоРегистрацииВОЭЗ,
	|	ВЫБОР
	|		КОГДА &УчитыватьЕНВД
	|				И (ЕСТЬNULL(КонтролируемыеСделкиОрганизаций.ОперацияОблагаетсяЕНВД, ЛОЖЬ)
	|						И КонтролируемыеСделкиОрганизаций.ТипКонтролируемойСделки = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролируемыхСделок.ПолученДоход)
	|						И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ЯвляетсяПлательщикомЕНВД, ЛОЖЬ)
	|						И КонтролируемыеСделкиОрганизаций.ТипКонтролируемойСделки = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролируемыхСделок.ОсуществленРасход)
	|						И ЕСТЬNULL(КонтролируемыеСделкиОрганизаций.ОперацияОблагаетсяЕНВД, ЛОЖЬ)
	|						И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ))
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаимозависимыеЛицаПоПериодам.НевзаимозависимыйПосредник
	|							И НЕ &УчитыватьСпецрежимДляПосредников
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ЯвляетсяПлательщикомЕСХН, ЛОЖЬ)
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаимозависимыеЛицаПоПериодам.НевзаимозависимыйПосредник
	|							И НЕ &УчитыватьСпецрежимДляПосредников
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаСПлательщикомЕСХН,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорыУчастниковКонтролируемыхСделок.СделкаОтноситсяКДеятельностиНовогоМорскогоМесторождения, ЛОЖЬ)
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаМорскогоМесторождения,
	|	ВЫБОР
	|		КОГДА (ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта, ЛОЖЬ))
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоИнвестиционнымПроектам,
	|	ВЫБОР
	|		КОГДА (ЕСТЬNULL(СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ОсвобожденОтУплатыНДС, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ОсвобожденОтУплатыНДС, ЛОЖЬ))
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоОсвобождениюНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПоУчастникамПоПериодам.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль, ЛОЖЬ)
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|				И &УчитыватьИнвестиционныйВычет
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоИнвестиционномуВычету,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорыУчастниковКонтролируемыхСделок.СделкаОтноситсяКДеятельностиОблагаемойНалогомНаДопДоход, ЛОЖЬ)
	|				И УчастникиКонтролируемыхСделок.КонтрагентЗарегистрированВРФ
	|				И ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ВзаимозависимыеЛица, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаКонтролируетсяПоДополнительномуДоходуОтСырья,
	|	ЕСТЬNULL(ДоговорыУчастниковКонтролируемыхСделок.СделкаНеЯвляетсяКонтролируемойПоП4, ЛОЖЬ) КАК СделкаНеЯвляетсяКонтролируемойПоП4,
	|	ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ТипВзаимозависимости, ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)) КАК ТипВзаимозависимости,
	|	КонтролируемыеСделкиОрганизаций.ТипПредметаСделки КАК ТипПредметаСделки,
	|	КонтролируемыеСделкиОрганизаций.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КонтролируемыеСделкиОрганизаций.СтранаПроисхожденияПредметаСделки КАК СтранаПроисхожденияПредметаСделки,
	|	КонтролируемыеСделкиОрганизаций.ТипКонтролируемойСделки КАК ТипКонтролируемойСделки,
	|	КонтролируемыеСделкиОрганизаций.Грузоотправитель КАК Грузоотправитель,
	|	КонтролируемыеСделкиОрганизаций.Грузополучатель КАК Грузополучатель,
	|	КонтролируемыеСделкиОрганизаций.НаименованиеПредметаСделки КАК НаименованиеПредметаСделки,
	|	КонтролируемыеСделкиОрганизаций.Валюта КАК Валюта,
	|	КонтролируемыеСделкиОрганизаций.Количество КАК Количество,
	|	КонтролируемыеСделкиОрганизаций.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	КонтролируемыеСделкиОрганизаций.ДатаПроцентнойСтавки КАК ДатаПроцентнойСтавки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ТипВзаимозависимости, ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)) = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|				ИЛИ ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ТипВзаимозависимости, ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)) = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимыйПосредник)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СтороныВзаимозависимыПоКодексу,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВзаимозависимыеЛицаПоПериодам.ТипВзаимозависимости, ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)) = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимыйПосредник)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СделкаСНезависимымПосредником
	|ПОМЕСТИТЬ КонтролируемыеСделки
	|ИЗ
	|	РегистрНакопления.КонтролируемыеСделкиОрганизаций КАК КонтролируемыеСделкиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|		ПО КонтролируемыеСделкиОрганизаций.Уведомление = УведомлениеОКонтролируемыхСделках.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчастникиКонтролируемыхСделок КАК УчастникиКонтролируемыхСделок
	|		ПО КонтролируемыеСделкиОрганизаций.Контрагент = УчастникиКонтролируемыхСделок.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВзаимозависимыеЛицаПоПериодам КАК ВзаимозависимыеЛицаПоПериодам
	|		ПО КонтролируемыеСделкиОрганизаций.Организация = ВзаимозависимыеЛицаПоПериодам.Организация
	|			И КонтролируемыеСделкиОрганизаций.Контрагент = ВзаимозависимыеЛицаПоПериодам.Контрагент
	|			И КонтролируемыеСделкиОрганизаций.Период >= ВзаимозависимыеЛицаПоПериодам.НачалоПериода
	|			И КонтролируемыеСделкиОрганизаций.Период <= ВзаимозависимыеЛицаПоПериодам.ОкончаниеПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам КАК СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам
	|		ПО КонтролируемыеСделкиОрганизаций.Организация = СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.Организация
	|			И КонтролируемыеСделкиОрганизаций.Период >= СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.НачалоПериода
	|			И КонтролируемыеСделкиОрганизаций.Период <= СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам.ОкончаниеПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыМировойБиржевойТорговли КАК ТоварыМировойБиржевойТорговли
	|		ПО КонтролируемыеСделкиОрганизаций.ПредметСделки = ТоварыМировойБиржевойТорговли.ПредметСделки
	|			И ТоварыМировойБиржевойТорговли.ДатаНачалаДействия <= КонтролируемыеСделкиОрганизаций.Период
	|			И ТоварыМировойБиржевойТорговли.ДатаОкончанияДействия >= КонтролируемыеСделкиОрганизаций.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоУчастникамКонтролируемыхСделокПоПериодам КАК ДанныеПоУчастникамПоПериодам
	|		ПО КонтролируемыеСделкиОрганизаций.Контрагент = ДанныеПоУчастникамПоПериодам.Контрагент
	|			И КонтролируемыеСделкиОрганизаций.Период >= ДанныеПоУчастникамПоПериодам.НачалоПериода
	|			И КонтролируемыеСделкиОрганизаций.Период <= ДанныеПоУчастникамПоПериодам.ОкончаниеПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорыУчастниковКонтролируемыхСделок КАК ДоговорыУчастниковКонтролируемыхСделок
	|		ПО КонтролируемыеСделкиОрганизаций.Организация = ДоговорыУчастниковКонтролируемыхСделок.Организация
	|			И КонтролируемыеСделкиОрганизаций.Контрагент = ДоговорыУчастниковКонтролируемыхСделок.Контрагент
	|			И КонтролируемыеСделкиОрганизаций.Договор = ДоговорыУчастниковКонтролируемыхСделок.ДоговорКонтрагента
	|ГДЕ
	|	КонтролируемыеСделкиОрганизаций.Период = &ОтчетныйГод
	|	И &Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ПредметСделки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыПоМинимальнойСумме
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) > &МинимальнаяГраницаДляВключенияСделокВУведомление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоОбщейСумме
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФПоОбщейСумме
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаОбщейСуммыСделок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыРФКонтролируемыеПоУсловию
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФПоУсловиям
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И (КонтролируемыеСделки.СделкаКонтролируетсяПоРазнымСтавкамНалогаНаПрибыль
	|			ИЛИ КонтролируемыеСделки.СделкаКонтролируетсяПоНДПИ
	|			ИЛИ КонтролируемыеСделки.СделкаОблагаетсяЕНВД
	|			ИЛИ КонтролируемыеСделки.СделкаСПлательщикомЕСХН
	|			ИЛИ КонтролируемыеСделки.СделкаКонтролируетсяПоНалогуНаПрибыль
	|			ИЛИ КонтролируемыеСделки.СделкаМорскогоМесторождения
	|			ИЛИ КонтролируемыеСделки.СделкаКонтролируетсяПоОсвобождениюНДС
	|			ИЛИ КонтролируемыеСделки.СделкаКонтролируетсяПоИнвестиционномуВычету
	|			ИЛИ КонтролируемыеСделки.СделкаКонтролируетсяПоДополнительномуДоходуОтСырья)
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаОбщейСуммыСделок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоНДПИ
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФНДПИ
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И КонтролируемыеСделки.СделкаКонтролируетсяПоНДПИ
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаСуммыСделокНДПИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоСпецРежиму
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФСпецРежим
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И (КонтролируемыеСделки.СделкаОблагаетсяЕНВД
	|			ИЛИ КонтролируемыеСделки.СделкаСПлательщикомЕСХН)
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаСуммыСделокСпецРежим
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоПрибыли
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФПрибыль
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И КонтролируемыеСделки.СделкаКонтролируетсяПоНалогуНаПрибыль
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаСуммыСделокПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоОЭЗ
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФРегистрацияОЭЗ
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И КонтролируемыеСделки.СделкаКонтролируетсяПоРегистрацииВОЭЗ
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаСуммыСделокОЭЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоМорскомуМесторождению
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФНовоеМорскоеМесторождение
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И КонтролируемыеСделки.СделкаМорскогоМесторождения
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаНовоеМорскоеМесторождение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоИнвестиционнымПроектам
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФРегиональныйИнвестПроект
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И КонтролируемыеСделки.СделкаКонтролируетсяПоИнвестиционнымПроектам
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаРегиональныйИнвестиционныйПроект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоОсвобождениюНДС
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФОсвобождениеНДС
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И КонтролируемыеСделки.СделкаКонтролируетсяПоОсвобождениюНДС
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаОсвобождениеНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоИнвестиционномуВычету
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	&КонтролироватьЗависимыхЛицРФИнвестиционныйВычет
	|	И КонтролируемыеСделки.КонтрагентЗарегистрированВРФ
	|	И КонтролируемыеСделки.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И КонтролируемыеСделки.СделкаКонтролируетсяПоИнвестиционномуВычету
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаИнвестиционныйВычет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеПоРегистрацииНеВРФ
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	КонтролируемыеСделки.ТипВзаимозависимости = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|	И (КонтролируемыеСделки.ЗарегистрированВСтранеСЛьготнымНалогообложением
	|			ИЛИ КонтролируемыеСделки.СделкаВнешнейТорговлиТоваромМировойБиржевойТорговли)
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаСуммыСделокИностранныхНезависимыхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтролируемыеСделки.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) КАК СуммаБезНДСВРублях
	|ПОМЕСТИТЬ КонтрагентыКонтролируемыеКакПрочиеЗависимыеЛица
	|ИЗ
	|	КонтролируемыеСделки КАК КонтролируемыеСделки
	|ГДЕ
	|	(КонтролируемыеСделки.ТипВзаимозависимости = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимыйПосредник)
	|			ИЛИ КонтролируемыеСделки.СтороныВзаимозависимыПоКодексу
	|				И НЕ КонтролируемыеСделки.КонтрагентЗарегистрированВРФ)
	|	И НЕ КонтролируемыеСделки.СделкаНеЯвляетсяКонтролируемойПоП4
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтролируемыеСделки.ГоловнойКонтрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(КонтролируемыеСделки.СуммаБезНДСВРублях) >= &ГраницаПрочиеВзаимозависимыеЛица";
	
	Если Организации.Количество() <> 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Организации", "КонтролируемыеСделкиОрганизаций.Организация В(&Организации)");
		Запрос.Параметры.Вставить("Организации", Организации);
	Иначе
		Запрос.Параметры.Вставить("Организации", Истина);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Загружает из файла данные о цепочках создания стоимости контролируемых сделок согласно параметрам
// 
// Параметры:
//  Параметры - Структура - параметры загрузки файла:
//  * ИмяФайла                          - Строка - имя загружаемого файла.
//  * Хранение                          - Строка - адрес хранилища значений временного файла.
//  * НомерСтроки                       - Число - номер строки с которого должа начинаться загрузка файла.
//  * НомерМаксимальнойСтроки           - Число - номер строки, до корогой нужно загрузать данные из файла.
//  * ЗагружатьДоСтроки                 - Булево - Истина, если нужно загружать не весь файл, а данные до указанной строки.
//  АдресХранилищаРезультата            - Строка - адрес хранилища значений результата выполнения процедуры.
//
Процедура ЗагрузитьЦепочкиСделок(Параметры, АдресХранилищаРезультата) Экспорт
	
	НомерСтроки = Параметры.НомерСтроки;
	НомерМаксимальнойСтроки = Параметры.НомерМаксимальнойСтроки;
	ЗагружатьДоСтроки = Параметры.ЗагружатьДоСтроки;
	СообщенияПользователю = Новый Массив;
	
	ТабДок = Новый ТабличныйДокумент;

	ТабДок.Прочитать(Параметры.ИмяФайла);
	
	УдалитьИзВременногоХранилища(Параметры.Хранение);
	
	ВысотаТаблицы = ТабДок.ВысотаТаблицы;
	
	Если НЕ ЗагружатьДоСтроки
		ИЛИ НомерМаксимальнойСтроки = 0 Тогда
			
		НомерМаксимальнойСтроки = ВысотаТаблицы;
		
	КонецЕсли;
	
	НачалоЗаголовкаНумерацииСтрок = ТабДок.НайтиТекст("№ п/п");
	
	Если НачалоЗаголовкаНумерацииСтрок = Неопределено Тогда
		
		СообщенияПользователю.Добавить(НСтр("ru = 'Не найдено начало строк для загрузки.';
											|en = 'Не найдено начало строк для загрузки.'"));
		Возврат;
		
	КонецЕсли;
	
	ОтступЗаголовка = НачалоЗаголовкаНумерацииСтрок.Низ + 1;
	
	НомерСтроки = НомерСтроки + ОтступЗаголовка;
	
	Если НомерСтроки > ВысотаТаблицы Тогда
		СообщенияПользователю.Добавить(НСтр("ru = 'Номер строки начала загрузки превышает конец файла.';
											|en = 'Номер строки начала загрузки превышает конец файла.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗагружатьДоСтроки
		И НомерМаксимальнойСтроки < ВысотаТаблицы Тогда
			
		НомерМаксимальнойСтроки = НомерМаксимальнойСтроки + ОтступЗаголовка;
		
	КонецЕсли;
	
	Если НомерМаксимальнойСтроки > ВысотаТаблицы Тогда
		СообщенияПользователю.Добавить(НСтр("ru = 'Номер строки, до которой осущевляется загрузка, превышает конец файла.';
											|en = 'Номер строки, до которой осущевляется загрузка, превышает конец файла.'"));
		Возврат;
	КонецЕсли;
	
	// Инициализация данных строки цепочки
	
	// Инициализация реквиитов шапки документа
	Организация = "";
	Контрагент = "";
	Договор = "";
	ПредметСделки = "";
	ДокуметСделки = "";
	ВидЦепочки = "";
	Количество = 0;
	ЕдиницаИзмерения = "";
	Уведомление = "";
	ДатаДокументаСделки = '00010101';
	
	// Инициализация 1-го уровня цепочки
	ТипИспользования1 = "";
	НаименованиеИспользованияПроисхожденияТовара1 = "";
	ДатаСделки1 = '00010101';
	Количество1 = 0;
	ЕдиницаИзмерения1 = "";
	ТипУчастника1 = "";
	УчастникиВзаимозависимы1 = Ложь;
	КонтрагентЦепочки1 = "";
	ДоговорДата1 = '00010101';
	ДоговорНомер1 = "";
	Цена1 = 0;
	Стоимость1 = 0;
	Валюта1 = "";
	КодУсловий1 = "";
	Страна1 = "";
	ОКТМО1 = "";
	
	// Инициализация 2-го уровня цепочки
	ТипИспользования2 = "";
	НаименованиеИспользованияПроисхожденияТовара2 = "";
	ДатаСделки2 = "";
	Количество2 = 0;
	ЕдиницаИзмерения2 = "";
	ТипУчастника2 = "";
	УчастникиВзаимозависимы2 = Ложь;
	КонтрагентЦепочки2 = "";
	ДоговорДата2 = "";
	ДоговорНомер2 = "";
	Цена2 = 0;
	Стоимость2 = 0;
	Валюта2 = "";
	КодУсловий2 = "";
	Страна2 = "";
	ОКТМО2 = "";
	
	// Инициализация 3-го уровня цепочки
	ТипИспользования3 = "";
	НаименованиеИспользованияПроисхожденияТовара3 = "";
	ДатаСделки3 = '00010101';
	Количество3 = 0;
	ЕдиницаИзмерения3 = "";
	ТипУчастника3 = "";
	УчастникиВзаимозависимы3 = Ложь;
	КонтрагентЦепочки3 = "";
	ДоговорДата3 = '00010101';
	ДоговорНомер3 = "";
	Цена3 = 0;
	Стоимость3 = 0;
	Валюта3 = "";
	КодУсловий3 = "";
	Страна3 = "";
	ОКТМО3 = "";
	
	// Инициализация 4-го уровня цепочки
	ТипИспользования4 = "";
	НаименованиеИспользованияПроисхожденияТовара4 = "";
	ДатаСделки4 = '00010101';
	Количество4 = 0;
	ЕдиницаИзмерения4 = "";
	ТипУчастника4 = "";
	УчастникиВзаимозависимы4 = Ложь;
	КонтрагентЦепочки4 = "";
	ДоговорДата4 = '00010101';
	ДоговорНомер4 = "";
	Цена4 = 0;
	Стоимость4 = 0;
	Валюта4 = "";
	КодУсловий4 = "";
	Страна4 = "";
	ОКТМО4 = "";
	
	ЕстьОшибкиВСтроке = Ложь;
	ЗаписыватьСтроку = Ложь;
	КоличествоЗагруженныхЦепочек = 0;
	
	СоответствиеТиповДокументовСделки = СоответствиеТиповДокументовСделки();
	
	Для Индекс = НомерСтроки По НомерМаксимальнойСтроки Цикл
		
		// Инициализация данных строки цепочки для новой итерации
	
		// Инициализация реквиитов шапки документа
		Организация = "";
		Контрагент = "";
		Договор = "";
		ПредметСделки = "";
		ДокуметСделки = "";
		ВидЦепочки = "";
		Количество = 0;
		ЕдиницаИзмерения = "";
		Уведомление = "";
		ДатаДокументаСделки = '00010101';
		
		// Инициализация 1-го уровня цепочки
		ТипИспользования1 = "";
		НаименованиеИспользованияПроисхожденияТовара1 = "";
		ДатаСделки1 = '00010101';
		Количество1 = 0;
		ЕдиницаИзмерения1 = "";
		ТипУчастника1 = "";
		УчастникиВзаимозависимы1 = Ложь;
		КонтрагентЦепочки1 = "";
		ДоговорДата1 = '00010101';
		ДоговорНомер1 = "";
		Цена1 = 0;
		Стоимость1 = 0;
		Валюта1 = "";
		КодУсловий1 = "";
		Страна1 = "";
		ОКТМО1 = "";
		
		// Инициализация 2-го уровня цепочки
		ТипИспользования2 = "";
		НаименованиеИспользованияПроисхожденияТовара2 = "";
		ДатаСделки2 = '00010101';
		Количество2 = 0;
		ЕдиницаИзмерения2 = "";
		ТипУчастника2 = "";
		УчастникиВзаимозависимы2 = Ложь;
		КонтрагентЦепочки2 = "";
		ДоговорДата2 = '00010101';
		ДоговорНомер2 = "";
		Цена2 = 0;
		Стоимость2 = 0;
		Валюта2 = "";
		КодУсловий2 = "";
		Страна2 = "";
		ОКТМО2 = "";
		
		// Инициализация 3-го уровня цепочки
		ТипИспользования3 = "";
		НаименованиеИспользованияПроисхожденияТовара3 = "";
		ДатаСделки3 = '00010101';
		Количество3 = 0;
		ЕдиницаИзмерения3 = "";
		ТипУчастника3 = "";
		УчастникиВзаимозависимы3 = Ложь;
		КонтрагентЦепочки3 = "";
		ДоговорДата3 = '00010101';
		ДоговорНомер3 = "";
		Цена3 = 0;
		Стоимость3 = 0;
		Валюта3 = "";
		КодУсловий3 = "";
		Страна3 = "";
		ОКТМО3 = "";
		
		// Инициализация 4-го уровня цепочки
		ТипИспользования4 = "";
		НаименованиеИспользованияПроисхожденияТовара4 = "";
		ДатаСделки4 = '00010101';
		Количество4 = 0;
		ЕдиницаИзмерения4 = "";
		ТипУчастника4 = "";
		УчастникиВзаимозависимы4 = Ложь;
		КонтрагентЦепочки4 = "";
		ДоговорДата4 = '00010101';
		ДоговорНомер4 = "";
		Цена4 = 0;
		Стоимость4 = 0;
		Валюта4 = "";
		КодУсловий4 = "";
		Страна4 = "";
		ОКТМО4 = "";
		
		НомерПоПорядку = Индекс - ОтступЗаголовка;
		
		// Определяем необходимость заполнения документа или строки табличной части цепочки сделок по полю "Код использования",
		// если он не заполен, то заполение документа или строки пропускаем.
		
		// 1-й уровень цепочки
		КодИспользования = СокрЛП(ТабДок.Область(Индекс, 24).Текст);
		
		ЕстьОшибкиВСтроке = Ложь;
		ЗаписыватьСтроку = ЗначениеЗаполнено(КодИспользования);
		ЧастиДатыДата = ЧастиДаты.Дата;
		ЧастиДатыДатаВремя = ЧастиДаты.ДатаВремя;
		
		Если НЕ ЗаписыватьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		ТипИспользования1 = НайтиТипИспользования(КодИспользования);
		Если НЕ ЗначениеЗаполнено(ТипИспользования1) Тогда
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 для 1-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2';
							|en = 'В строке %1 для 1-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2'"), 
			НомерПоПорядку, КодИспользования));
		КонецЕсли;
		
		НаименованиеИспользованияПроисхожденияТовара1 = СокрЛП(ТабДок.Область(Индекс, 22).Текст);
		
		// Реквизиты шапки документа
		GUIDОрганизация = СокрЛП(ТабДок.Область(Индекс, 2).Текст);
		
		УстановитьОрганизацию(GUIDОрганизация, Организация, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю);
		
		ТипКонтрагента = СокрЛП(ТабДок.Область(Индекс, 3).Текст);
		GUIDКонтрагент = СокрЛП(ТабДок.Область(Индекс, 4).Текст);
		
		УстановитьКонтрагента(GUIDКонтрагент, Контрагент, ТипКонтрагента, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю);
		
		ТипДоговора = СокрЛП(ТабДок.Область(Индекс, 5).Текст);
		GUIDДоговор = СокрЛП(ТабДок.Область(Индекс, 6).Текст);
		
		УстановитьДоговор(GUIDДоговор, Договор, ТипДоговора, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю);
		
		GUIDПредметСделки = СокрЛП(ТабДок.Область(Индекс, 7).Текст);
		
		УстановитьПредметСделки(GUIDПредметСделки, ПредметСделки, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю);
		
		ТипДокументаСделки= СокрЛП(ТабДок.Область(Индекс, 8).Текст);
		GUIDДокументСделки = СокрЛП(ТабДок.Область(Индекс, 9).Текст);

		УстановитьДокуметСделки(GUIDДокументСделки, ДокуметСделки, ТипДокументаСделки,
			СоответствиеТиповДокументовСделки, НомерПоПорядку, ЕстьОшибкиВСтроке, СообщенияПользователю);
		
		GUIDУведомление = Новый УникальныйИдентификатор(СокрЛП(ТабДок.Область(Индекс, 10).Текст));
		УстановитьУведомление(GUIDУведомление, Уведомление, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю);
		
		ДатаДокументаСделкиТекст = СокрЛП(ТабДок.Область(Индекс, 15).Текст);
		ДатаДокументаСделки = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаДокументаСделкиТекст, ЧастиДатыДатаВремя);
		
		Если ДатаДокументаСделки = '00010101' Тогда
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 пустая дата документа сделки';
							|en = 'В строке %1 пустая дата документа сделки'"), НомерПоПорядку));
		КонецЕсли;
		
		НаименованиеВидаЦепочки = СокрЛП(ТабДок.Область(Индекс, 16).Текст);
		ВидЦепочки = НайтиВидЦепочки(НаименованиеВидаЦепочки);
		
		Если НЕ ЗначениеЗаполнено(ВидЦепочки) Тогда
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 не определяется вид цепочки  ""%2""';
							|en = 'В строке %1 не определяется вид цепочки  ""%2""'"), 
			НомерПоПорядку, НаименованиеВидаЦепочки));
		КонецЕсли;
		
		КоличествоТекст = СокрЛП(ТабДок.Область(Индекс, 17).Текст);
		Количество = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КоличествоТекст);
		
		Если НЕ ЗначениеЗаполнено(Количество) Тогда
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 не допустимое значение количества  ""%2""';
							|en = 'В строке %1 не допустимое значение количества  ""%2""'"), 
			НомерПоПорядку, КоличествоТекст));
		КонецЕсли;
		
		ЕдиницаИзмеренияКодОКЕИ = СокрЛП(ТабДок.Область(Индекс, 18).Текст);
		ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ЕдиницаИзмеренияКодОКЕИ);
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 не определяется единица измерения с кодом  ""%2""';
							|en = 'В строке %1 не определяется единица измерения с кодом  ""%2""'"), 
			НомерПоПорядку, ЕдиницаИзмеренияКодОКЕИ));
		КонецЕсли;
		
		// 1-я строка табличной части документа
		ДатаСделкиТекст = СокрЛП(ТабДок.Область(Индекс, 19).Текст);
		ДатаСделки1 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСделкиТекст, ЧастиДатыДата);
		
		КоличествоТекст = СокрЛП(ТабДок.Область(Индекс, 20).Текст);
		Количество1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КоличествоТекст);
		
		ЕдиницаИзмеренияКодОКЕИ = СокрЛП(ТабДок.Область(Индекс, 21).Текст);
		ЕдиницаИзмерения1 = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ЕдиницаИзмеренияКодОКЕИ);
		
		КодТипаУчастника =  СокрЛП(ТабДок.Область(Индекс, 22).Текст);
		ТипУчастника1 = НайтиТипУчастника(КодТипаУчастника);
		
		УчастникиВзаимозависимы =  ВРег(СокрЛП(ТабДок.Область(Индекс, 23).Текст));
		
		Если УчастникиВзаимозависимы = "ДА"
			ИЛИ УчастникиВзаимозависимы  = "ИСТИНА"
			ИЛИ УчастникиВзаимозависимы  = "TRUE" Тогда
			
			УчастникиВзаимозависимы1 = Истина;
			
		Иначе
			
			УчастникиВзаимозависимы1 = Ложь;	
			
		КонецЕсли;
		
		ТипКонтрагентаЦепочки = СокрЛП(ТабДок.Область(Индекс, 26).Текст);
		GUIDКонтрагентЦепочки = СокрЛП(ТабДок.Область(Индекс, 27).Текст);
		
		Если ЗначениеЗаполнено (GUIDКонтрагентЦепочки) Тогда
		УстановитьКонтрагента(GUIDКонтрагентЦепочки, КонтрагентЦепочки1, ТипКонтрагентаЦепочки,
			НомерПоПорядку, ЕстьОшибкиВСтроке, СообщенияПользователю);
		КонецЕсли;
		
		ДоговорДатаТекст = СокрЛП(ТабДок.Область(Индекс, 29).Текст);
		ДоговорДата1 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДоговорДатаТекст, ЧастиДатыДата);
		
		ДоговорНомер1 = СокрЛП(ТабДок.Область(Индекс, 30).Текст);
		
		ЦенаТекст = СокрЛП(ТабДок.Область(Индекс, 31).Текст);
		Цена1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦенаТекст);
		
		СтоимостьТекст = СокрЛП(ТабДок.Область(Индекс, 32).Текст);
		Стоимость1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтоимостьТекст);
		
		КодВвалютыОКВ = СокрЛП(ТабДок.Область(Индекс, 33).Текст);
		Валюта1 = Справочники.Валюты.НайтиПоКоду(КодВвалютыОКВ);
		
		КодУсловий1 = СокрЛП(ТабДок.Область(Индекс, 34).Текст);
		
		КодСтраныОКСМ = СокрЛП(ТабДок.Область(Индекс, 35).Текст);
		Страна1 = Справочники.СтраныМира.НайтиПоКоду(КодСтраныОКСМ);
		
		ОКТМО1 = СокрЛП(ТабДок.Область(Индекс, 36).Текст);
		
		// 2-й уровень цепочки
		КодИспользования = СокрЛП(ТабДок.Область(Индекс, 42).Текст);
		
		Если ЗначениеЗаполнено(КодИспользования) Тогда
			// 2-я строка табличной части документа
			ТипИспользования2 = НайтиТипИспользования(КодИспользования);
			Если НЕ ЗначениеЗаполнено(ТипИспользования1) Тогда
				ЕстьОшибкиВСтроке = Истина;
				СообщенияПользователю.Добавить(
				СтрШаблон(НСтр("ru = 'В строке %1 для 2-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2';
								|en = 'В строке %1 для 2-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2'"), 
				НомерПоПорядку, КодИспользования));
			КонецЕсли;
			
			НаименованиеИспользованияПроисхожденияТовара2 = СокрЛП(ТабДок.Область(Индекс, 43).Текст);
			
			ДатаСделкиТекст = СокрЛП(ТабДок.Область(Индекс, 37).Текст);
			ДатаСделки2 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСделкиТекст, ЧастиДатыДата);
			
			КоличествоТекст = СокрЛП(ТабДок.Область(Индекс, 38).Текст);
			Количество2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КоличествоТекст);
			
			ЕдиницаИзмеренияКодОКЕИ = СокрЛП(ТабДок.Область(Индекс, 39).Текст);
			ЕдиницаИзмерения2 = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ЕдиницаИзмеренияКодОКЕИ);
			
			КодТипаУчастника =  СокрЛП(ТабДок.Область(Индекс, 40).Текст);
			ТипУчастника2 = НайтиТипУчастника(КодТипаУчастника);
			
			УчастникиВзаимозависимы =  ВРег(СокрЛП(ТабДок.Область(Индекс, 41).Текст));
			
			Если УчастникиВзаимозависимы = "ДА"
				ИЛИ УчастникиВзаимозависимы  = "ИСТИНА"
				ИЛИ УчастникиВзаимозависимы  = "TRUE" Тогда
					
				УчастникиВзаимозависимы2 = Истина;
				
			Иначе
				
				УчастникиВзаимозависимы2 = Ложь;	
				
			КонецЕсли;
			
			ТипКонтрагентаЦепочки = СокрЛП(ТабДок.Область(Индекс, 44).Текст);
			GUIDКонтрагентЦепочки = СокрЛП(ТабДок.Область(Индекс, 45).Текст);
			
			Если ЗначениеЗаполнено (GUIDКонтрагентЦепочки) Тогда
				УстановитьКонтрагента(GUIDКонтрагентЦепочки, КонтрагентЦепочки2, ТипКонтрагентаЦепочки,
				НомерПоПорядку, ЕстьОшибкиВСтроке, СообщенияПользователю);
			КонецЕсли;
			
			ДоговорДатаТекст = СокрЛП(ТабДок.Область(Индекс, 47).Текст);
			ДоговорДата2 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДоговорДатаТекст, ЧастиДатыДата);
			
			ДоговорНомер2 = СокрЛП(ТабДок.Область(Индекс, 48).Текст);
			
			ЦенаТекст = СокрЛП(ТабДок.Область(Индекс, 49).Текст);
			Цена2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦенаТекст);
			
			СтоимостьТекст = СокрЛП(ТабДок.Область(Индекс, 50).Текст);
			Стоимость2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтоимостьТекст);
			
			КодВвалютыОКВ = СокрЛП(ТабДок.Область(Индекс, 51).Текст);
			Валюта2 = Справочники.Валюты.НайтиПоКоду(КодВвалютыОКВ);
			
			КодУсловий2 = СокрЛП(ТабДок.Область(Индекс, 52).Текст);
			
			КодСтраныОКСМ = СокрЛП(ТабДок.Область(Индекс, 53).Текст);
			Страна2 = Справочники.СтраныМира.НайтиПоКоду(КодСтраныОКСМ);
			
			ОКТМО2 = СокрЛП(ТабДок.Область(Индекс, 54).Текст);
			
			// 3-й уровень цепочки
			КодИспользования = СокрЛП(ТабДок.Область(Индекс, 60).Текст);
			
			Если ЗначениеЗаполнено(КодИспользования) Тогда
				// 3-я строка табличной части документа
				ТипИспользования3 = НайтиТипИспользования(КодИспользования);
				Если НЕ ЗначениеЗаполнено(ТипИспользования3) Тогда
					ЕстьОшибкиВСтроке = Истина;
					СообщенияПользователю.Добавить(
					СтрШаблон(НСтр("ru = 'В строке %1 для 3-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2';
									|en = 'В строке %1 для 3-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2'"), 
					НомерПоПорядку, КодИспользования));
				КонецЕсли;
			
				НаименованиеИспользованияПроисхожденияТовара3 = СокрЛП(ТабДок.Область(Индекс, 61).Текст);
			
				ДатаСделкиТекст = СокрЛП(ТабДок.Область(Индекс, 55).Текст);
				ДатаСделки3 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСделкиТекст, ЧастиДатыДата);
				
				КоличествоТекст = СокрЛП(ТабДок.Область(Индекс, 56).Текст);
				Количество3 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КоличествоТекст);
				
				ЕдиницаИзмеренияКодОКЕИ = СокрЛП(ТабДок.Область(Индекс, 57).Текст);
				ЕдиницаИзмерения3 = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ЕдиницаИзмеренияКодОКЕИ);
			
				КодТипаУчастника =  СокрЛП(ТабДок.Область(Индекс, 58).Текст);
				ТипУчастника3 = НайтиТипУчастника(КодТипаУчастника);
				
				УчастникиВзаимозависимы =  ВРег(СокрЛП(ТабДок.Область(Индекс, 59).Текст));
				
				Если УчастникиВзаимозависимы = "ДА"
					ИЛИ УчастникиВзаимозависимы  = "ИСТИНА"
					ИЛИ УчастникиВзаимозависимы  = "TRUE" Тогда
						
					УчастникиВзаимозависимы3 = Истина;
					
				Иначе
					
					УчастникиВзаимозависимы3 = Ложь;	
					
				КонецЕсли;
				
				ТипКонтрагентаЦепочки = СокрЛП(ТабДок.Область(Индекс, 62).Текст);
				GUIDКонтрагентЦепочки = СокрЛП(ТабДок.Область(Индекс, 63).Текст);
				
				Если ЗначениеЗаполнено (GUIDКонтрагентЦепочки) Тогда
					УстановитьКонтрагента(GUIDКонтрагентЦепочки, КонтрагентЦепочки3, ТипКонтрагентаЦепочки,
					НомерПоПорядку, ЕстьОшибкиВСтроке, СообщенияПользователю);
				КонецЕсли;
				
				ДоговорДатаТекст = СокрЛП(ТабДок.Область(Индекс, 65).Текст);
				ДоговорДата3 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДоговорДатаТекст, ЧастиДатыДата);
				
				ДоговорНомер3 = СокрЛП(ТабДок.Область(Индекс, 66).Текст);
				
				ЦенаТекст = СокрЛП(ТабДок.Область(Индекс, 67).Текст);
				Цена3 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦенаТекст);
				
				СтоимостьТекст = СокрЛП(ТабДок.Область(Индекс, 68).Текст);
				Стоимость3 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтоимостьТекст);
				
				КодВвалютыОКВ = СокрЛП(ТабДок.Область(Индекс, 69).Текст);
				Валюта3 = Справочники.Валюты.НайтиПоКоду(КодВвалютыОКВ);
				
				КодУсловий3 = СокрЛП(ТабДок.Область(Индекс, 70).Текст);
				
				КодСтраныОКСМ = СокрЛП(ТабДок.Область(Индекс, 71).Текст);
				Страна3 = Справочники.СтраныМира.НайтиПоКоду(КодСтраныОКСМ);
				
				ОКТМО3 = СокрЛП(ТабДок.Область(Индекс, 72).Текст);
				
				// 4-й уровень цепочки
				КодИспользования = СокрЛП(ТабДок.Область(Индекс, 78).Текст);
				
				Если ЗначениеЗаполнено(КодИспользования) Тогда
					// 4-я строка табличной части документа
					ТипИспользования4 = НайтиТипИспользования(КодИспользования);
					Если НЕ ЗначениеЗаполнено(ТипИспользования3) Тогда
						ЕстьОшибкиВСтроке = Истина;
						СообщенияПользователю.Добавить(
						СтрШаблон(НСтр("ru = 'В строке %1 для 4-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2';
										|en = 'В строке %1 для 4-го уровня цепочки не найден тип использования(происхождения) товаров по коду %2'"), 
						НомерПоПорядку, КодИспользования));
					КонецЕсли;
				
					НаименованиеИспользованияПроисхожденияТовара4 = СокрЛП(ТабДок.Область(Индекс, 79).Текст);
			
					ДатаСделкиТекст = СокрЛП(ТабДок.Область(Индекс, 73).Текст);
					ДатаСделки4 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСделкиТекст, ЧастиДатыДата);
					
					КоличествоТекст = СокрЛП(ТабДок.Область(Индекс, 74).Текст);
					Количество4 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КоличествоТекст);
					
					ЕдиницаИзмеренияКодОКЕИ = СокрЛП(ТабДок.Область(Индекс, 75).Текст);
					ЕдиницаИзмерения4 = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ЕдиницаИзмеренияКодОКЕИ);
					
					КодТипаУчастника =  СокрЛП(ТабДок.Область(Индекс, 76).Текст);
					ТипУчастника4 = НайтиТипУчастника(КодТипаУчастника);
					
					УчастникиВзаимозависимы =  ВРег(СокрЛП(ТабДок.Область(Индекс, 77).Текст));
					
					Если УчастникиВзаимозависимы = "ДА"
						ИЛИ УчастникиВзаимозависимы  = "ИСТИНА"
						ИЛИ УчастникиВзаимозависимы  = "TRUE" Тогда
							
						УчастникиВзаимозависимы4 = Истина;
						
					Иначе
						
						УчастникиВзаимозависимы4 = Ложь;	
						
					КонецЕсли;
					
					ТипКонтрагентаЦепочки = СокрЛП(ТабДок.Область(Индекс, 80).Текст);
					GUIDКонтрагентЦепочки = СокрЛП(ТабДок.Область(Индекс, 81).Текст);
					
					Если ЗначениеЗаполнено (GUIDКонтрагентЦепочки) Тогда
						УстановитьКонтрагента(GUIDКонтрагентЦепочки, КонтрагентЦепочки4, ТипКонтрагентаЦепочки,
							НомерПоПорядку, ЕстьОшибкиВСтроке, СообщенияПользователю);
					КонецЕсли;
					
					ДоговорДатаТекст = СокрЛП(ТабДок.Область(Индекс, 83).Текст);
					ДоговорДата4 = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДоговорДатаТекст, ЧастиДатыДата);
					
					ДоговорНомер4 = СокрЛП(ТабДок.Область(Индекс, 84).Текст);
					
					ЦенаТекст = СокрЛП(ТабДок.Область(Индекс, 85).Текст);
					Цена4 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦенаТекст);
					
					СтоимостьТекст = СокрЛП(ТабДок.Область(Индекс, 86).Текст);
					Стоимость4 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтоимостьТекст);
					
					КодВвалютыОКВ = СокрЛП(ТабДок.Область(Индекс, 87).Текст);
					Валюта4 = Справочники.Валюты.НайтиПоКоду(КодВвалютыОКВ);
					
					КодУсловий4 = СокрЛП(ТабДок.Область(Индекс, 88).Текст);
					
					КодСтраныОКСМ = СокрЛП(ТабДок.Область(Индекс, 89).Текст);
					Страна4 = Справочники.СтраныМира.НайтиПоКоду(КодСтраныОКСМ);
					
					ОКТМО4 = СокрЛП(ТабДок.Область(Индекс, 90).Текст);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьОшибкиВСтроке Тогда
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'Цепочка строки %1 не была записана.';
							|en = 'Цепочка строки %1 не была записана.'"), 
			НомерПоПорядку));
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
			
		Попытка
			
			ДокументОбъект = Документы.ЦепочкаСозданияСтоимостиКонтролируемойСделки.СоздатьДокумент();
			
			// Инициализация шапки документа
			ДокументОбъект.Дата = ДатаДокументаСделки;
			ДокументОбъект.УведомлениеОКонтролируемойСделке = Уведомление;
			ДокументОбъект.Организация = Организация;
			ДокументОбъект.Контрагент = Контрагент;
			ДокументОбъект.ДоговорКонтрагента = Договор;
			ДокументОбъект.ПредметСделки = ПредметСделки;
			ДокументОбъект.РасчетныйДокумент = ДокуметСделки;
			ДокументОбъект.ТипСделки = ВидЦепочки;
			ДокументОбъект.Количество = Количество;
			ДокументОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			// Инициализация 1-го уровня цепочки
			
			Если ЗначениеЗаполнено(ТипИспользования1) Тогда
				СтрокаСделки = ДокументОбъект.Сделки.Добавить();
				СтрокаСделки.ИспользованиеПроисхождениеТовара = ТипИспользования1;
				СтрокаСделки.НаименованиеИспользованияПроисхожденияТовара = НаименованиеИспользованияПроисхожденияТовара1;
				СтрокаСделки.ПризнакУчастникаСделки = ТипУчастника1;
				СтрокаСделки.ДатаСовершенияСделки = ДатаСделки1;
				СтрокаСделки.Контрагент = КонтрагентЦепочки1;
				СтрокаСделки.УчастникиВзаимозависимы = УчастникиВзаимозависимы1;
				СтрокаСделки.НомерДоговора = ДоговорНомер1;
				СтрокаСделки.ДатаДоговора = ДоговорДата1;
				СтрокаСделки.КодУсловийПоставки = КодУсловий1;
				СтрокаСделки.СтранаСовершенияСделки = Страна1;
				СтрокаСделки.ОКТМОСовершенияСделки = ОКТМО1;
				СтрокаСделки.Количество = Количество1;
				СтрокаСделки.ЕдиницаИзмерения = ЕдиницаИзмерения1;
				СтрокаСделки.Цена = Цена1;
				СтрокаСделки.Валюта = Валюта1;
				СтрокаСделки.Стоимость = Стоимость1;
			КонецЕсли;
			
			// Инициализация 2-го уровня цепочки
			Если ЗначениеЗаполнено(ТипИспользования2) Тогда
				СтрокаСделки = ДокументОбъект.Сделки.Добавить();
				СтрокаСделки.ИспользованиеПроисхождениеТовара = ТипИспользования2;
				СтрокаСделки.НаименованиеИспользованияПроисхожденияТовара = НаименованиеИспользованияПроисхожденияТовара2;
				СтрокаСделки.ПризнакУчастникаСделки = ТипУчастника2;
				СтрокаСделки.ДатаСовершенияСделки = ДатаСделки2;
				СтрокаСделки.Контрагент = КонтрагентЦепочки2;
				СтрокаСделки.УчастникиВзаимозависимы = УчастникиВзаимозависимы2;
				СтрокаСделки.НомерДоговора = ДоговорНомер2;
				СтрокаСделки.ДатаДоговора = ДоговорДата2;
				СтрокаСделки.КодУсловийПоставки = КодУсловий2;
				СтрокаСделки.СтранаСовершенияСделки = Страна2;
				СтрокаСделки.ОКТМОСовершенияСделки = ОКТМО2;
				СтрокаСделки.Количество = Количество2;
				СтрокаСделки.ЕдиницаИзмерения = ЕдиницаИзмерения2;
				СтрокаСделки.Цена = Цена2;
				СтрокаСделки.Валюта = Валюта2;
				СтрокаСделки.Стоимость = Стоимость2;
			КонецЕсли;
			
			// Инициализация 3-го уровня цепочки
			Если ЗначениеЗаполнено(ТипИспользования3) Тогда
				СтрокаСделки = ДокументОбъект.Сделки.Добавить();
				СтрокаСделки.ИспользованиеПроисхождениеТовара = ТипИспользования3;
				СтрокаСделки.НаименованиеИспользованияПроисхожденияТовара = НаименованиеИспользованияПроисхожденияТовара3;
				СтрокаСделки.ПризнакУчастникаСделки = ТипУчастника3;
				СтрокаСделки.ДатаСовершенияСделки = ДатаСделки3;
				СтрокаСделки.Контрагент = КонтрагентЦепочки3;
				СтрокаСделки.УчастникиВзаимозависимы = УчастникиВзаимозависимы3;
				СтрокаСделки.НомерДоговора = ДоговорНомер3;
				СтрокаСделки.ДатаДоговора = ДоговорДата3;
				СтрокаСделки.КодУсловийПоставки = КодУсловий3;
				СтрокаСделки.СтранаСовершенияСделки = Страна3;
				СтрокаСделки.ОКТМОСовершенияСделки = ОКТМО3;
				СтрокаСделки.Количество = Количество3;
				СтрокаСделки.ЕдиницаИзмерения = ЕдиницаИзмерения3;
				СтрокаСделки.Цена = Цена3;
				СтрокаСделки.Валюта = Валюта3;
				СтрокаСделки.Стоимость = Стоимость3;
			КонецЕсли;
			
			// Инициализация 4-го уровня цепочки
			Если ЗначениеЗаполнено(ТипИспользования4) Тогда
				СтрокаСделки = ДокументОбъект.Сделки.Добавить();
				СтрокаСделки.ИспользованиеПроисхождениеТовара = ТипИспользования4;
				СтрокаСделки.НаименованиеИспользованияПроисхожденияТовара = НаименованиеИспользованияПроисхожденияТовара4;
				СтрокаСделки.ПризнакУчастникаСделки = ТипУчастника4;
				СтрокаСделки.ДатаСовершенияСделки = ДатаСделки4;
				СтрокаСделки.Контрагент = КонтрагентЦепочки4;
				СтрокаСделки.УчастникиВзаимозависимы = УчастникиВзаимозависимы4;
				СтрокаСделки.НомерДоговора = ДоговорНомер4;
				СтрокаСделки.ДатаДоговора = ДоговорДата4;
				СтрокаСделки.КодУсловийПоставки = КодУсловий4;
				СтрокаСделки.СтранаСовершенияСделки = Страна4;
				СтрокаСделки.ОКТМОСовершенияСделки = ОКТМО4;
				СтрокаСделки.Количество = Количество4;
				СтрокаСделки.ЕдиницаИзмерения = ЕдиницаИзмерения4;
				СтрокаСделки.Цена = Цена4;
				СтрокаСделки.Валюта = Валюта4;
				СтрокаСделки.Стоимость = Стоимость4;
			КонецЕсли;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
			
			КоличествоЗагруженныхЦепочек = КоличествоЗагруженныхЦепочек + 1;
			
		Исключение
			ОтменитьТранзакцию();
			СообщенияПользователю.Добавить(
				СтрШаблон(НСтр("ru = 'Цепочка строки %1 не была записана по причине %2';
								|en = 'Цепочка строки %1 не была записана по причине %2'"), 
				НомерПоПорядку, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;

	КонецЦикла;
	
	СообщенияПользователю.Добавить(
		СтрШаблон(НСтр("ru = 'Обработано строк: %1. Загружено цепочек: %2';
						|en = 'Обработано строк: %1. Загружено цепочек: %2'"),
			НомерПоПорядку, КоличествоЗагруженныхЦепочек));
	
	ПоместитьВоВременноеХранилище(СообщенияПользователю, АдресХранилищаРезультата);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает массив наименований незаполяемых полей для строки сделки.
//
// Параметры:
//  ИспользованиеПроисхождениеТовара - ПеречислениеСсылка.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок - тип
//                                     использования происходжения товара контролируемой сделки.
//  ПризнакУчастникаСделки           - ПеречислениеСсылка.ТипыУчастниковЦепочкиКонтролируемыхСделок - тип участника
//                                     цепочки контролируемой сделки.
// 
// Возвращаемое значение:
//  Массив из Строка     - массив наименований незаполяемых полей для строки сделки.
//
Функция НезаполняемыеПоляСтрокиСделок(ИспользованиеПроисхождениеТовара, ПризнакУчастникаСделки) Экспорт
	
	НезаполняемыеПоля = Новый Массив;
	
	Если ИспользованиеПроисхождениеТовара <> Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.Иное Тогда
		НезаполняемыеПоля.Добавить("НаименованиеИспользованияПроисхожденияТовара");
	КонецЕсли;
	
	Если Не КонтролируемыеСделкиКлиентСервер.НужноЗаполнятьСведенияОСделкеЛиста1В(ИспользованиеПроисхождениеТовара) Тогда
		НезаполняемыеПоля.Добавить("ДатаСовершенияСделки");
		НезаполняемыеПоля.Добавить("ПризнакУчастникаСделки");
		НезаполняемыеПоля.Добавить("Контрагент");
		НезаполняемыеПоля.Добавить("НомерДоговора");
		НезаполняемыеПоля.Добавить("ДатаДоговора");
		НезаполняемыеПоля.Добавить("КодУсловийПоставки");
		НезаполняемыеПоля.Добавить("Количество");
		НезаполняемыеПоля.Добавить("ЕдиницаИзмерения");
		НезаполняемыеПоля.Добавить("Цена");
		НезаполняемыеПоля.Добавить("Валюта");
		НезаполняемыеПоля.Добавить("Стоимость");
		НезаполняемыеПоля.Добавить("СтранаСовершенияСделки");
		НезаполняемыеПоля.Добавить("ОКТМОСовершенияСделки");
	ИначеЕсли КонтролируемыеСделкиКлиентСервер.ЭтоРозничнаяПродажаЦепочкиСделок(ПризнакУчастникаСделки) Тогда
		НезаполняемыеПоля.Добавить("ДатаСовершенияСделки");
		НезаполняемыеПоля.Добавить("Контрагент");
		НезаполняемыеПоля.Добавить("НомерДоговора");
		НезаполняемыеПоля.Добавить("ДатаДоговора");
		НезаполняемыеПоля.Добавить("КодУсловийПоставки");
		НезаполняемыеПоля.Добавить("Цена");
		НезаполняемыеПоля.Добавить("СтранаСовершенияСделки");
		НезаполняемыеПоля.Добавить("ОКТМОСовершенияСделки");
	КонецЕсли;
	
	Возврат НезаполняемыеПоля;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет контрагента по строковому предствлению универсального идентификатора.
// В случае ошибки добавляет сообщение пользователю в массив сообщений.
// 
// Параметры:
//  GUIDОрганизация       - Строка - строкавое предствление универсального идентификатора.
//  Организация           - СправочникСсылка.Организации - организация, подающая уведомление.
//  НомерПоПорядку        - Число - номер строки по порядку в файле загузки.
//  ЕстьОшибкиВСтроке     - Булево - Истина, если были ошибки в ходя выполнения процедуры.
//  СообщенияПользователю - Массив из Строка - массив для добвления сообщений пользователю.
// 
Процедура УстановитьОрганизацию(GUIDОрганизация, Организация, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(GUIDОрганизация) Тогда
		
		Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDОрганизация));
		
	Иначе
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 GUID организации не соответствует формату уникального идентификатора';
							|en = 'В строке %1 GUID организации не соответствует формату уникального идентификатора'"), 
			НомерПоПорядку));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
		СтрШаблон(НСтр("ru = 'В строке %1 не найдено соответствие организации по GUID %2';
						|en = 'В строке %1 не найдено соответствие организации по GUID %2'"), 
			НомерПоПорядку, GUIDОрганизация));
	КонецЕсли;
	
КонецПроцедуры

// Определяет контрагента по строковому предствлению универсального идентификатора и наименованию синонима метаданных.
// В случае ошибки добавляет сообщение пользователю в массив сообщений.
// 
// Параметры:
//  GUIDКонтрагент        - Строка - строкавое предствление универсального идентификатора.
//  Контрагент            - СправочникСсылка.Контрагенты,СправочникСсылка.Организации - контрагент.
//  ТипКонтрагента        - Строка - синоним метаданных, относящихся к контрагентам контролируемых сделок.
//  НомерПоПорядку        - Число - номер строки по порядку в файле загузки.
//  ЕстьОшибкиВСтроке     - Булево - Истина, если были ошибки в ходя выполнения процедуры.
//  СообщенияПользователю - Массив из Строка - массив для добвления сообщений пользователю.
// 
Процедура УстановитьКонтрагента(GUIDКонтрагент, Контрагент, ТипКонтрагента, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(GUIDКонтрагент) Тогда
		
		Если ТипКонтрагента = "Контрагент" Тогда
			Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDКонтрагент));
		ИначеЕсли ТипКонтрагента = "Организация" Тогда
			Контрагент = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDКонтрагент));
		Иначе
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 неизвестный тип контагента типа ""%2"" по GUID %3';
							|en = 'В строке %1 неизвестный тип контагента типа ""%2"" по GUID %3'"), 
				НомерПоПорядку, ТипКонтрагента, GUIDКонтрагент));
		КонецЕсли;
		
	Иначе
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 GUID контрагента не соответствует формату уникального идентификатора';
							|en = 'В строке %1 GUID контрагента не соответствует формату уникального идентификатора'"),
				НомерПоПорядку));
	КонецЕсли;
	
КонецПроцедуры

// Определяет договор по строковому предствлению универсального идентификатора и наименованию синонима метаданных.
// В случае ошибки добавляет сообщение пользователю в массив сообщений.
// 
// Параметры:
//  GUIDДоговор           - Строка - строкавое предствление универсального идентификатора.
//  Договор               - СправочникСсылка.ДоговорыМеждуОрганизациями,
//                        - СправочникСсылка.ДоговорыКонтрагентов,
//                        - СправочникСсылка.ДоговорыКредитовИДепозитов,
//                        - СправочникСсылка.ДоговорыАренды - договор.
//  ТипДоговора           - Строка - синоним метаданных, относящихся к договорам.
//  НомерПоПорядку        - Число - номер строки по порядку в файле загузки.
//  ЕстьОшибкиВСтроке     - Булево - Истина, если были ошибки в ходя выполнения процедуры.
//  СообщенияПользователю - Массив из Строка - массив для добвления сообщений пользователю.
// 
Процедура УстановитьДоговор(GUIDДоговор, Договор, ТипДоговора, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(GUIDДоговор) Тогда

		Если ТипДоговора = "Договор с контрагентом" Тогда
			Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDДоговор));
		ИначеЕсли ТипДоговора = "Договор между организациями" Тогда
			Договор = Справочники.ДоговорыМеждуОрганизациями.ПолучитьСсылку(
				Новый УникальныйИдентификатор(GUIDДоговор));
		ИначеЕсли ТипДоговора = "Договор кредита (депозита)" Тогда
				Договор = Справочники.ДоговорыКредитовИДепозитов.ПолучитьСсылку(
				Новый УникальныйИдентификатор(GUIDДоговор));
		ИначеЕсли ТипДоговора = "Договор аренды (лизинга)" Тогда
			Договор = Справочники.ДоговорыАренды.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDДоговор));
		Иначе
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 неизвестный тип контагента типа ""%2"" по GUID %3';
							|en = 'В строке %1 неизвестный тип контагента типа ""%2"" по GUID %3'"), 
			НомерПоПорядку, ТипДоговора, GUIDДоговор));
		КонецЕсли;
		
	Иначе
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 GUID контрагента не соответствует формату уникального идентификатора';
							|en = 'В строке %1 GUID контрагента не соответствует формату уникального идентификатора'"),
				НомерПоПорядку));
	КонецЕсли;
	
КонецПроцедуры

// Определяет предмет сделки по строковому предствлению универсального идентификатора и наименованию синонима метаданных.
// В случае ошибки добавляет сообщение пользователю в массив сообщений.
// 
// Параметры:
//  GUIDПредметСделки     - Строка - строковое предствление универсального идентификатора.
//  ПредметСделки         - СправочникСсылка.Номенклатура - предмет сделки, соответствующий значению
//                                                          универсального идентификатора.
//  НомерПоПорядку        - Число - номер строки по порядку в файле загузки.
//  ЕстьОшибкиВСтроке     - Булево - Истина, если были ошибки в ходя выполнения процедуры.
//  СообщенияПользователю - Массив из Строка - массив для добвления сообщений пользователю.
// 
Процедура УстановитьПредметСделки(GUIDПредметСделки, ПредметСделки, НомерПоПорядку, ЕстьОшибкиВСтроке,
			СообщенияПользователю)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(GUIDПредметСделки) Тогда
		
		ПредметСделки = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDПредметСделки));
		
	Иначе
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 GUID предмета сделки не соответствует формату уникального идентификатора';
							|en = 'В строке %1 GUID предмета сделки не соответствует формату уникального идентификатора'"),
				НомерПоПорядку));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПредметСделки) Тогда
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
		СтрШаблон(НСтр("ru = 'В строке %1 не найдено соответствие предмета сделки по GUID %2';
						|en = 'В строке %1 не найдено соответствие предмета сделки по GUID %2'"), 
		НомерПоПорядку, GUIDПредметСделки));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствия наименований документов сдлелок и их имен метаданных.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - соответствие наименований документов сдлелок и их имен метаданных.
//
Функция СоответствиеТиповДокументовСделки()
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Передача давальцу", "ПередачаДавальцу");
	Соответствие.Вставить("Возврат товаров от клиента", "ВозвратТоваровОтКлиента");
	Соответствие.Вставить("Приобретение товаров и услуг", "ПриобретениеТоваровУслуг");
	Соответствие.Вставить("Поступление услуг по аренде", "ПоступлениеУслугПоАренде");
	Соответствие.Вставить("Отчет комиссионера (агента) о продажах", "ОтчетКомиссионера");
	Соответствие.Вставить("Отчет давальцу (2.4)", "ОтчетДавальцу");
	Соответствие.Вставить("Поступление сырья от давальца", "ПоступлениеСырьяОтДавальца");
	Соответствие.Вставить("Возврат товаров поставщику", "ВозвратТоваровПоставщику");
	Соответствие.Вставить("Списание безналичных ДС", "СписаниеБезналичныхДенежныхСредств");
	Соответствие.Вставить("Отчет по комиссии между организациями", "ОтчетПоКомиссииМеждуОрганизациями");
	Соответствие.Вставить("Отчет комитенту (принципалу) о продажах", "ОтчетКомитенту");
	Соответствие.Вставить("Реализация услуг и прочих активов", "РеализацияУслугПрочихАктивов");
	Соответствие.Вставить("Возврат сырья давальцу", "ВозвратСырьяДавальцу");
	Соответствие.Вставить("Регистрация прочих контролируемых сделок", "РегистрацияПрочихКонтролируемыхСделок");
	Соответствие.Вставить("Корректировка реализации", "КорректировкаРеализации");
	Соответствие.Вставить("Реализация товаров и услуг", "РеализацияТоваровУслуг");
	Соответствие.Вставить("Передача сырья переработчику", "ПередачаСырьяПереработчику");
	Соответствие.Вставить("Корректировка приобретения", "КорректировкаПриобретения");
	Соответствие.Вставить("Отчет комитенту о списании", "ОтчетКомитентуОСписании");
	Соответствие.Вставить("Отчет переработчика (2.4)", "ОтчетПереработчика");
	Соответствие.Вставить("Выкуп возвратной тары клиентом", "ВыкупВозвратнойТарыКлиентом");
	Соответствие.Вставить("Приобретение услуг и прочих активов", "ПриобретениеУслугПрочихАктивов");
	Соответствие.Вставить("Акт выполненных работ", "АктВыполненныхРабот");
	Соответствие.Вставить("Отчет давальцу", "ОтчетДавальцу2_5");
	Соответствие.Вставить("Возврат сырья от переработчика", "ВозвратСырьяОтПереработчика");
	Соответствие.Вставить("Возврат товаров между организациями", "ВозвратТоваровМеждуОрганизациями");
	Соответствие.Вставить("Отчет комиссионера о списании", "ОтчетКомиссионераОСписании");
	Соответствие.Вставить("Передача товаров между организациями", "ПередачаТоваровМеждуОрганизациями");
	Соответствие.Вставить("Выкуп возвратной тары у поставщика", "ВыкупВозвратнойТарыУПоставщика");
	Соответствие.Вставить("Начисления по кредитам и депозитам", "НачисленияКредитовИДепозитов");
	Соответствие.Вставить("Отчет переработчика", "ОтчетПереработчика2_5");
	Соответствие.Вставить("Поступление безналичных ДС", "ПоступлениеБезналичныхДенежныхСредств");
	Соответствие.Вставить("Выкуп товаров хранителем", "ВыкупТоваровХранителем");
	Соответствие.Вставить("Поступление от переработчика", "ПоступлениеОтПереработчика");
	Соответствие.Вставить("Заключение договора аренды", "ЗаключениеДоговораАренды");
	Соответствие.Вставить("Отчет комитенту (принципалу) о закупках", "ОтчетКомитентуОЗакупках");
	Соответствие.Вставить("Отчет давальцу между организациями", "ОтчетДавальцуМеждуОрганизациями");
	
	Возврат Соответствие;
	
КонецФункции

// Определяет документ сделки по строковому предствлению универсального идентификатора и наименованию синонима метаданных.
// В случае ошибки добавляет сообщение пользователю в массив сообщений.
// 
// Параметры:
//  GUIDДокументСделки                - Строка - строкавое предствление универсального идентификатора.
//  ДокуметСделки                     - ДокументСсылка - документ, соответствующий значению универсального идентификатора.
//  ТипДокументаСделки                - Строка - наименование документа сдлелки.
//  СоответствиеТиповДокументовСделки - Соответствие из КлючИЗначение - соответствие наименований документов сдлелок и
//                                      их имен метаданных.
//  НомерПоПорядку                    - Число - номер строки по порядку в файле загузки.
//  ЕстьОшибкиВСтроке                 - Булево - Истина, если были ошибки в ходя выполнения процедуры.
//  СообщенияПользователю             - Массив из Строка - массив для добвления сообщений пользователю.
// 
Процедура УстановитьДокуметСделки(GUIDДокументСделки, ДокуметСделки, ТипДокументаСделки,
			СоответствиеТиповДокументовСделки, НомерПоПорядку, ЕстьОшибкиВСтроке, СообщенияПользователю)
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(GUIDДокументСделки) Тогда
		
		GUIDДокументСделки = Новый УникальныйИдентификатор(GUIDДокументСделки);
		Тип = СоответствиеТиповДокументовСделки[ТипДокументаСделки];
		Если ЗначениеЗаполнено(Тип) Тогда
			ДокуметСделки = Документы[Тип].ПолучитьСсылку(GUIDДокументСделки);
		Иначе
			ЕстьОшибкиВСтроке = Истина;
			СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 неизвестный тип документа сделки типа ""%2"" по GUID %3';
							|en = 'В строке %1 неизвестный тип документа сделки типа ""%2"" по GUID %3'"), 
			НомерПоПорядку, ТипДокументаСделки, GUIDДокументСделки));
		КонецЕсли;
		
	Иначе
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 GUID документа сделки не соответствует формату уникального идентификатора';
							|en = 'В строке %1 GUID документа сделки не соответствует формату уникального идентификатора'"),
				НомерПоПорядку));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокуметСделки) Тогда
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
		СтрШаблон(НСтр("ru = 'В строке %1 не найден документ сделки типа ""%2"" по GUID %3';
						|en = 'В строке %1 не найден документ сделки типа ""%2"" по GUID %3'"), 
			НомерПоПорядку, ТипДокументаСделки, GUIDДокументСделки));
	КонецЕсли;
	
КонецПроцедуры

// Определяет уведомление о контролируемой сделки по строковому предствлению универсального идентификатора.
// В случае ошибки добавляет сообщение пользователю в массив сообщений.
// 
// Параметры:
//  GUIDУведомление       - Строка - строкавое предствление универсального идентификатора.
//  Уведомление           - ДокументСсылка.УведомлениеОКонтролируемыхСделках - уведомление о контролируемых сделках,
//                          соответствующие значению универсального идентификатора.
//  НомерПоПорядку        - Число - номер строки по порядку в файле загузки.
//  ЕстьОшибкиВСтроке     - Булево - Истина, если были ошибки в ходя выполнения процедуры.
//  СообщенияПользователю - Массив из Строка - массив для добвления сообщений пользователю.
// 
Процедура УстановитьУведомление(GUIDУведомление, Уведомление, НомерПоПорядку, ЕстьОшибкиВСтроке, 
			СообщенияПользователю);
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(GUIDУведомление) Тогда
		
		Уведомление = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСсылку(
				Новый УникальныйИдентификатор(GUIDУведомление));
		
	Иначе
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
			СтрШаблон(НСтр("ru = 'В строке %1 GUID уведомления о контролируемых сделках не соответствует формату уникального идентификатора';
							|en = 'В строке %1 GUID уведомления о контролируемых сделках не соответствует формату уникального идентификатора'"),
				НомерПоПорядку));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Уведомление) Тогда
		ЕстьОшибкиВСтроке = Истина;
		СообщенияПользователю.Добавить(
		СтрШаблон(НСтр("ru = 'В строке %1 не найдено соответствие уведомления о контролируемых сделках по GUID %2';
						|en = 'В строке %1 не найдено соответствие уведомления о контролируемых сделках по GUID %2'"), 
		НомерПоПорядку, GUIDУведомление));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает по наименованию вида цепочки тип сделки в цепочке контролируемых сделок.
//
// Параметры:
//  НаименованиеВидаЦепочки - Строка - наименование типа сделки: последующая реализация или предществующая покупка.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыСделокВЦепочкеКонтролируемыхСделок - тип сделки в цепочке контролируемых сделок.
//  Неопределено - если не удалось определить тип сделки в цепочке контролируемых сделок.
//
Функция НайтиВидЦепочки(НаименованиеВидаЦепочки)
	Если НаименованиеВидаЦепочки = "Последующая реализация" Тогда
		Возврат Перечисления.ТипыСделокВЦепочкеКонтролируемыхСделок.ПоследующаяРеализация;
	ИначеЕсли НаименованиеВидаЦепочки = "Предшествующая покупка" Тогда
		Возврат Перечисления.ТипыСделокВЦепочкеКонтролируемыхСделок.ПредшествующаяПокупка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает по коду участника тип участника в цепочке контролируемых сделок.
//
// Параметры:
//  КодТипаУчастника - Строка - коду участника контролируемой сделки.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыУчастниковЦепочкиКонтролируемыхСделок - тип участника в цепочке контролируемых сделок.
//  Неопределено - если не удалось определить тип участника контролируемых сделок.
//
Функция НайтиТипУчастника(КодТипаУчастника)
	Если КодТипаУчастника = "0" Тогда
		Возврат Перечисления.ТипыУчастниковЦепочкиКонтролируемыхСделок.ОтсутствуетИнформация;
	ИначеЕсли КодТипаУчастника = "1" Тогда
		Возврат Перечисления.ТипыУчастниковЦепочкиКонтролируемыхСделок.Производитель;
	ИначеЕсли КодТипаУчастника = "2" Тогда
		Возврат Перечисления.ТипыУчастниковЦепочкиКонтролируемыхСделок.КонечныйОптовыйПокупатель;
	ИначеЕсли КодТипаУчастника = "3" Тогда
		Возврат Перечисления.ТипыУчастниковЦепочкиКонтролируемыхСделок.КонечныйРозничныйПокупатель;
	ИначеЕсли КодТипаУчастника = "4" Тогда
		Возврат Перечисления.ТипыУчастниковЦепочкиКонтролируемыхСделок.ТорговыйПосредник;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает по коду использования тип использования/происхождения товара в цепочке контролируемых сделок.
//
// Параметры:
//  КодИспользования - Строка - коду использования/происхождения товара в цепочке контролируемых сделок.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок - тип использования/происхождения товара
//                                                                                в цепочке контролируемых сделок.
//  Неопределено - если не удалось определить тип использования/происхождения товара в цепочке контролируемых сделок.
//
Функция НайтиТипИспользования(КодИспользования)
	Если КодИспользования = "1" Тогда
		Возврат Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.Перепродажа;
	ИначеЕсли КодИспользования = "2" Тогда
		Возврат Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.Смешение;
	ИначеЕсли КодИспользования = "3" Тогда
		Возврат Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.Переработка;
	ИначеЕсли КодИспользования = "4" Тогда
		Возврат Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.Производство;
	ИначеЕсли КодИспользования = "5" Тогда
		Возврат Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.Иное;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецЕсли

