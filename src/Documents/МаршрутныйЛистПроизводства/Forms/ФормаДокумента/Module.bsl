//++ Устарело_Производство21
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// Ограничим тип ввода операции
	Элементы.ОперацииОперация.ОграничениеТипа         = Новый ОписаниеТипов("Строка");
	Элементы.ВыходныеИзделияОперация.ОграничениеТипа  = Новый ОписаниеТипов("Строка");
	Элементы.МатериалыИУслугиОперация.ОграничениеТипа = Новый ОписаниеТипов("Строка");
	Элементы.ТрудозатратыОперация.ОграничениеТипа     = Новый ОписаниеТипов("Строка");
	
	ЗаполнитьДоступныеСтатусыДокумента();
	
	Если Параметры.Свойство("КлючСвязи") Тогда
		// Форма нужно открыть и установить текущую операцию
		СтрокаОперация = НайтиОперациюПоКлючу(Параметры.КлючСвязи);
		Если СтрокаОперация <> Неопределено Тогда
			Элементы.Операции.ТекущаяСтрока = СтрокаОперация.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СостояниеРасписания = СостояниеРасписания;
	
	Если ТекущийОбъект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		И СтатусДоРедактирования = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		И ТекущийОбъект.Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		
		ТекущийОбъект.Очередь = 0;
		Если ТекущийОбъект.СостояниеРасписания = Перечисления.СостоянияРасписанияРабочихЦентров.Сформировано Тогда
			ТекущийОбъект.СостояниеРасписания = Перечисления.СостоянияРасписанияРабочихЦентров.НеАктуально;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перенесем уточнение рабочего центра в объект
	Для каждого СтрокаВидРабочегоЦентра Из ВидыРабочихЦентров Цикл
		Если СтрокаВидРабочегоЦентра.РабочийЦентрИзменен Тогда
			СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", СтрокаВидРабочегоЦентра.ВидРабочегоЦентра);
			СписокСтрок = ТекущийОбъект.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаВидРабочегоЦентраОбъекта Из СписокСтрок Цикл
				СтрокаВидРабочегоЦентраОбъекта.РабочийЦентр = СтрокаВидРабочегоЦентра.РабочийЦентр;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ВключитьВРасписаниеКлючевойВидРабочегоЦентра(ТекущийОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПорядокОперацийПроверенПоСтатусу();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОперативныйУчетПроизводстваКлиент.ОповеститьОЗаписиМаршрутныхЛистов(УникальныйИдентификатор,, Объект.Ссылка);
				
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		Если ИсточникВыбора.ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия" Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ВыходныеИзделия,  ВыбранноеЗначение);
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.МатериалыИУслуги, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_МаршрутныйЛистПроизводства" И Источник <> УникальныйИдентификатор Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство" Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия);
	КонецЕсли;
	
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр = Объект.Ссылка Тогда
		
		СформироватьНадписьМаркировкаПродукции();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОперативныйУчетПроизводстваКлиент.СобытиеРасписаниеВидаРабочегоЦентраИзменилось(ИмяСобытия)
			ИЛИ ОперативныйУчетПроизводстваКлиент.СобытиеКлючевойВидРабочегоЦентраИзменился(ИмяСобытия) Тогда 
			
			ПрочитатьИнформациюОРасписании();
			
		ИначеЕсли ОперативныйУчетПроизводстваКлиент.СобытиеРасписаниеОперацийИзменилось(ИмяСобытия) Тогда

			ПриИзмененииРасписанияОпераций();
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		
		Если Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоУББВ");
			
			Если НЕ НачатоВыполнениеМаршрутногоЛиста Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоББВ");
			КонецЕсли; 
			
			Если ФактическоеНачалоББВ <> '000101010000'
				И Объект.ДатаВыполненияРаботВПредварительномБуфере <> '000101010000' 
				И ФактическоеНачалоББВ > Объект.ДатаВыполненияРаботВПредварительномБуфере Тогда
				
				ТекстСообщения = НСтр("ru = 'Дата начала выполнения маршрутного листа должна быть раньше даты готовности к работе ключевого рабочего центра.';
										|en = 'Start date of route sheet execution must be earlier than the date of readiness of the key work center for operation.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ФактическоеНачалоББВ",, Отказ);
			КонецЕсли;
			
		Иначе	
			
			МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоББВ");
			
			Если НЕ НачатоВыполнениеМаршрутногоЛиста Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоУББВ");
			КонецЕсли; 
			
			Если ФактическоеНачалоУББВ <> '000101010000'
				И Объект.ФактическоеОкончание <> '000101010000' 
				И ФактическоеНачалоУББВ > Объект.ФактическоеОкончание Тогда
				
				ТекстСообщения = НСтр("ru = 'Дата начала выполнения маршрутного листа должна быть раньше даты окончания.';
										|en = 'Start date of the route sheet execution must be earlier than the end date.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ФактическоеНачалоУББВ",, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоББВ");
		МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоУББВ");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#Область МаршрутББВ

&НаКлиенте
Процедура НачатоВыполнениеМаршрутногоЛистаПриИзменении(Элемент)
	
	Если НЕ НачатоВыполнениеМаршрутногоЛиста Тогда
		Объект.ГотовоКРаботеКлючевогоРабочегоЦентра   = Ложь;
		Объект.ЗавершенаРаботаКлючевогоРабочегоЦентра = Ложь;
		Объект.ЗавершеноВыполнениеМаршрутногоЛиста    = Ложь;
	КонецЕсли; 
	
	ПриИзмененииМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ГотовоКРаботеКлючевогоРабочегоЦентраПриИзменении(Элемент)
	
	Если НЕ Объект.ГотовоКРаботеКлючевогоРабочегоЦентра Тогда
		Объект.ЗавершенаРаботаКлючевогоРабочегоЦентра = Ложь;
		Объект.ЗавершеноВыполнениеМаршрутногоЛиста 	= Ложь;
	Иначе
		НачатоВыполнениеМаршрутногоЛиста = Истина;
	КонецЕсли; 
	
	ПриИзмененииМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенаРаботаКлючевогоРабочегоЦентраПриИзменении(Элемент)
	
	Если НЕ Объект.ЗавершенаРаботаКлючевогоРабочегоЦентра Тогда
		Объект.ЗавершеноВыполнениеМаршрутногоЛиста = Ложь;
	Иначе
		НачатоВыполнениеМаршрутногоЛиста = Истина;
		Объект.ГотовоКРаботеКлючевогоРабочегоЦентра = Истина;
	КонецЕсли; 
	
	ПриИзмененииМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершеноВыполнениеМаршрутногоЛистаПриИзменении(Элемент)
	
	Если Объект.ЗавершеноВыполнениеМаршрутногоЛиста Тогда
		НачатоВыполнениеМаршрутногоЛиста = Истина;
		Объект.ЗавершенаРаботаКлючевогоРабочегоЦентра = Истина;
		Объект.ГотовоКРаботеКлючевогоРабочегоЦентра = Истина;
	КонецЕсли;
	
	ПриИзмененииМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеНачалоББВПриИзменении(Элемент)
	
	Объект.ФактическоеНачало = ФактическоеНачалоББВ;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыполненияРаботВПредварительномБуфереПриИзменении(Элемент)
	
	Объект.ЗатраченоВремениОтПредварительногоБуфера = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыполненияРаботВЗавершающемБуфереПриИзменении(Элемент)
	
	Объект.ЗатраченоВремениОтЗавершающегоБуфера = 0;
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутУББВ

&НаКлиенте
Процедура НачатоВыполнениеМаршрутногоЛиста1ПриИзменении(Элемент)
	
	Если НЕ НачатоВыполнениеМаршрутногоЛиста И Объект.ЗавершеноВыполнениеМаршрутногоЛиста Тогда
		Объект.ЗавершеноВыполнениеМаршрутногоЛиста = Ложь;
	КонецЕсли;
	
	ПриИзмененииМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершеноВыполнениеМаршрутногоЛиста2ПриИзменении(Элемент)
	
	Если Объект.ЗавершеноВыполнениеМаршрутногоЛиста И НЕ НачатоВыполнениеМаршрутногоЛиста Тогда
		НачатоВыполнениеМаршрутногоЛиста = Истина;
	КонецЕсли;
	
	ПриИзмененииМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеНачалоУББВПриИзменении(Элемент)
	
	Объект.ФактическоеНачало = ФактическоеНачалоУББВ;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеОкончаниеПриИзменении(Элемент)
	
	Объект.ЗатраченоВремениОтДлительностиЭтапа = 0;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура РаспоряжениеСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Ключ,АктивироватьСтрокуПродукции", 
					Объект.Распоряжение,Объект.КодСтроки);
					
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыФормы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзделиеСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(,Объект.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МногоэтапныйПроизводственныйПроцесс Тогда
		Если ЗначениеЗаполнено(Объект.ЭтапПродукции) Тогда
			ПоказатьЗначение(,Объект.ЭтапПродукции);
		Иначе
		ПоказатьЗначение(,Объект.Этап);
		КонецЕсли; 
	Иначе
		ПоказатьЗначение(,Объект.Спецификация);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(,Объект.НоменклатураПолуфабриката);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПолуфабрикатаСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МногоэтапныйПроизводственныйПроцессПолуфабриката Тогда
		ПоказатьЗначение(,Объект.Этап);
	Иначе
		ПоказатьЗначение(,Объект.СпецификацияПолуфабриката);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированоПриИзменении(Элемент)
	
	Если ЗапланированоДоРедактирования <> 0 И Объект.Запланировано <> 0 Тогда
		
		ЗапланированоПриИзмененииНаСервере();
		УстановитьРасписаниеНеАктуально();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеБракаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеБрака",
		НСтр("ru = 'Описание брака';
			|en = 'Description of defective goods'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	
	Если Объект.Начало > НачалоРаботыКлючевогоРабочегоЦентра
		И НачалоРаботыКлючевогоРабочегоЦентра <> '000101010000'
		И Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
		Объект.Начало = НачалоРаботыКлючевогоРабочегоЦентра;
	КонецЕсли;
	
	Если Объект.УправлениеМаршрутнымиЛистами = ПредопределенноеЗначение(
			"Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование") Тогда
		УстановитьРасписаниеНеАктуально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)
	
	Если Объект.Окончание < ОкончаниеРаботыКлючевогоРабочегоЦентра 
		И ОкончаниеРаботыКлючевогоРабочегоЦентра <> '000101010000'
		И Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
		Объект.Окончание = ОкончаниеРаботыКлючевогоРабочегоЦентра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутнаяКартаПриИзменении(Элемент)
	
	Если Объект.МаршрутнаяКарта.Пустая() Тогда
		ЗаполнитьБуферыПриИзмененииМаршрутнойКарты();
		Возврат;
	КонецЕсли;
	
	ПодтвердитьЗаполнениеДокумента("ОбработчикМаршрутнаяКартаПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Приоритет) И НЕ Объект.УправлениеМаршрутнымиЛистами
		= ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ") Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПриоритетПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ТекстВопроса = НСтр("ru = 'Назначить выбранный приоритет операциям?';
							|en = 'Assign the selected priority to operations?'");
	
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРабочихЦентров

&НаКлиенте
Процедура ВидыРабочихЦентровББВВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВидыРабочихЦентровББВВидРабочегоЦентра" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.ВидыРабочихЦентровББВ.ТекущиеДанные.ВидРабочегоЦентра);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровУББВВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВидыРабочихЦентровУББВВидРабочегоЦентра" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.ВидыРабочихЦентровУББВ.ТекущиеДанные.ВидРабочегоЦентра);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровББВРабочийЦентрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентровББВ.ТекущиеДанные;
	ТекущиеДанные.РабочийЦентрИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровУББВРабочийЦентрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентровУББВ.ТекущиеДанные;
	ТекущиеДанные.РабочийЦентрИзменен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОперацииРасписаниеВведеноВручную" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаОперация = Элементы.Операции.ДанныеСтроки(ВыбраннаяСтрока);
		СтрокаОперация.РасписаниеВведеноВручную = НЕ СтрокаОперация.РасписаниеВведеноВручную;
		
		УстановитьРасписаниеНеАктуально();
		
		Модифицированность = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
		ТекущиеДанные.СтатусВыполненияТекущий = Неопределено;
		ТекущиеДанные.СтатусВыполнения = Неопределено;
		
		Если НЕ Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно
			ИЛИ ПорядокСтрокСовпадаетСПорядкомВыполненияОпераций(ТекущиеДанные.КлючСвязи) Тогда
			ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
		
		Если ТекущиеДанные.КлючСвязи <> ПустойКлючСвязи Тогда
			
			ОбновитьСведенияОбОперацииВТабличныхЧастях(ЭтаФорма, ТекущиеДанные);
			
		КонецЕсли; 
		
		Если НоваяСтрока Тогда
			ПорядокОперацийПроверен = Ложь;
			УстановитьРасписаниеНеАктуально();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередУдалением(Элемент, Отказ)

	// Нельзя использовать стандартное удаление
	Отказ = Истина;
	
	// Получим удаляемые операции
	УдаляемыеОперации   = Новый Массив;
	УдаляемыеОперацииИД = Новый Массив;
	ЕстьВложенныйМаршрут = Ложь;
	ВыделенныеСтроки = Элементы.Операции.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаОперация = Элементы.Операции.ДанныеСтроки(ИдентификаторСтроки);
		УдаляемыеОперации.Добавить(СтрокаОперация);
		УдаляемыеОперацииИД.Добавить(ИдентификаторСтроки);
	КонецЦикла; 
	
	Если УдаляемыеОперации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УдаляемыеОперации.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить операцию?';
							|en = 'Remove transaction?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранные операции?';
							|en = 'Delete the selected operations?'");
	КонецЕсли; 
	
	// Получим связанные данные
	ВыходныеИзделияСтроки = СтрокиТаблицыСвязанныеСОперациями(УдаляемыеОперации, Объект.ВыходныеИзделия);
	МатериалыИУслугиСтроки = СтрокиТаблицыСвязанныеСОперациями(УдаляемыеОперации, Объект.МатериалыИУслуги);
	ТрудозатратыСтроки = СтрокиТаблицыСвязанныеСОперациями(УдаляемыеОперации, Объект.Трудозатраты);
	ВспомогательныеРЦСтроки = СтрокиТаблицыСвязанныеСОперациями(УдаляемыеОперации, Объект.ВспомогательныеРабочиеЦентры);
	
	// Откроем форму для подтверждения удаления
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыФормы.Вставить("ВыходныеИзделияКоличество",  ВыходныеИзделияСтроки.Количество());
	ПараметрыФормы.Вставить("МатериалыИУслугиКоличество", МатериалыИУслугиСтроки.Количество());
	ПараметрыФормы.Вставить("ТрудозатратыКоличество",     ТрудозатратыСтроки.Количество());
	
	ДополнительныеПараметрыУдаленияОперации = Новый Структура;
	ДополнительныеПараметрыУдаленияОперации.Вставить("ВыходныеИзделияСтроки", ВыходныеИзделияСтроки);
	ДополнительныеПараметрыУдаленияОперации.Вставить("МатериалыИУслугиСтроки", МатериалыИУслугиСтроки);
	ДополнительныеПараметрыУдаленияОперации.Вставить("ТрудозатратыСтроки", ТрудозатратыСтроки);
	ДополнительныеПараметрыУдаленияОперации.Вставить("ВспомогательныеРЦСтроки", ВспомогательныеРЦСтроки);
	ДополнительныеПараметрыУдаленияОперации.Вставить("УдаляемыеОперации", УдаляемыеОперации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаУдаленияОперации", ЭтотОбъект, ДополнительныеПараметрыУдаленияОперации);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.УдалениеОперации", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНомерОперацииПриИзменении(Элемент)
	
	ПорядокОперацийПроверен = Ложь;
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНомерСледующейОперацииПриИзменении(Элемент)
	
	ПорядокОперацийПроверен = Ложь;
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОперацииОперацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаОперация = Элементы.Операции.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаОперация.Операция)
		И ТипЗнч(СтрокаОперация.Операция) = Тип("СправочникСсылка.ТехнологическиеОперации") Тогда
		
		ПоказатьЗначение(,СтрокаОперация.Операция);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииРабочийЦентрПриИзменении(Элемент)
	
	СтрокаОперация = Элементы.Операции.ТекущиеДанные;
	Если СтрокаОперация.РабочийЦентр.Пустая() Тогда
		Если СтрокаОперация.РабочийЦентрЗаданВРасписании Тогда
			СтрокаОперация.РабочийЦентр = СтрокаОперация.РабочийЦентрПоРасписанию;
		Иначе
			СтрокаОперация.РабочийЦентрПоРасписанию = СтрокаОперация.РабочийЦентр;
		КонецЕсли;
	Иначе
		СтрокаОперация.РабочийЦентрЗаданВРасписании = Ложь;
	КонецЕсли;
	
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВидРабочегоЦентраПриИзменении(Элемент)
	
	СтрокаОперация = Элементы.Операции.ТекущиеДанные;
	
	ПустойРабочийЦентр = ПредопределенноеЗначение("Справочник.РабочиеЦентры.ПустаяСсылка");
	СтрокаОперация.РабочийЦентр = ПустойРабочийЦентр;
	СтрокаОперация.РабочийЦентрПоРасписанию = ПустойРабочийЦентр;
	
	УстановитьРасписаниеНеАктуально();
	
	ОперацииВидРабочегоЦентраПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНепрерывнаяПриИзменении(Элемент)
	
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВариантНаладкиПриИзменении(Элемент)
	
	ОперацииВариантНаладкиПриИзмененииНаСервере();
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВспомогательныеРабочиеЦентрыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ВспомогательныеРабочиеЦентры", Элементы.Операции.ТекущиеДанные.ВспомогательныеРабочиеЦентры);
	
	ТекущаяСтрока = Элементы.Операции.ТекущаяСтрока;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОперацииВспомогательныеРабочиеЦентрыВыборЗавершение", ЭтотОбъект, ТекущаяСтрока);
	
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ВводВспомогательныхРабочихЦентров",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриАктивизацииСтроки(Элемент)
	
	УстановитьЗначенияПолейАвтовыбораВыходныхИзделий("ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если Поле = Элементы.ВыходныеИзделияСерия 
		ИЛИ Поле = Элементы.ВыходныеИзделияСтатусУказанияСерий Тогда
		
		Если ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьПодборСерий("ВыходныеИзделия");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
		
		Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
			ТекущиеДанные.Получатель = Объект.Подразделение;
		Иначе
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
		ЗаполнитьНазначениеВыходногоИзделия(ТекущиеДанные);
	КонецЕсли;
	
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ВыходныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(Объект);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ВыходныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения, "ВыходныеИзделия");
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ВыходныеИзделия, Истина);
	Если НеобходимоОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ВыходныеИзделия);
	КонецЕсли;
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();

	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	ВыходныеИзделияПослеУдаленияНаСервере(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВыходныеИзделия", ТекущиеДанные));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",       Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ВыходныеИзделия"));
		
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", Объект.Подразделение);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ВыходныеИзделия);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
	ЗаполнитьНазначениеВыходногоИзделия(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, Новый Структура, КэшированныеЗначения);
	
	ЗаполнитьНазначениеВыходногоИзделия(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ВыходныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ВыходныеИзделия", Элемент.ТекстРедактирования, Элементы.ВыходныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ВыбратьОперацию(ТекущиеДанные, "ВыходныеИзделия", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОперацияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ТекущиеДанные.КлючСвязиОперации = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ТекущиеДанные.Операция          = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВыходныеИзделия", ТекущиеДанные));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц("ВыходныеИзделия", ТекущиеДанные, "Факт"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	Для каждого ИдентификаторСтроки Из Элементы.ВыходныеИзделия.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.ВыходныеИзделия.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Из списка продукции нельзя удалить полуфабрикат.';
										|en = 'Cannot delete the semi-finished product from the product list.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриАктивизацииСтроки(Элемент)
	
	УстановитьЗначенияПолейАвтовыбораВыходныхИзделий("ВозвратныеОтходы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
		Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
			ТекущиеДанные.Получатель = Объект.Подразделение;
		Иначе
			ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
		ЗаполнитьНазначениеВыходногоИзделия(ТекущиеДанные, Истина);
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(Объект);
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",       Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВозвратныеОтходы", ТекущиеДанные));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение");
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущиеДанные.Получатель = Объект.Подразделение;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("ВозвратныеОтходы", ТекущиеДанные));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц("ВозвратныеОтходы", ТекущиеДанные, "Факт"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	ВыбратьОперацию(ТекущиеДанные, "ВозвратныеОтходы", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОперацияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ТекущиеДанные.КлючСвязиОперации = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ТекущиеДанные.Операция          = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	Для Каждого ИдентификаторСтроки Из Элементы.ВозвратныеОтходы.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.ВозвратныеОтходы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Из списка нельзя удалить полуфабрикат.';
										|en = 'Cannot delete the semi-finished product from the list.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
	КонецЕсли; 
	
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.МатериалыИУслуги, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрокаМатериалы = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	
	Если НЕ ОтменаРедактирования ИЛИ НЕ НоваяСтрока Тогда
		ДанныеСтроки = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если ДанныеСтроки.Количество + ДанныеСтроки.КоличествоОтклонение < 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательному потреблению.';
										|en = 'Variance from standard should not result in a negative consumption.'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрокаМатериалы);
	КонецЕсли; 
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.МатериалыИУслуги) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения, "МатериалыИУслуги");
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.МатериалыИУслуги);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.СведенияАвтовыбора) Тогда
		
		Если НЕ ТекущиеДанные.Номенклатура.Пустая() И (НЕ ТекущиеДанные.Характеристика.Пустая()	ИЛИ НЕ ТекущиеДанные.ХарактеристикиИспользуются) Тогда
				
			ТекущиеДанные.СведенияАвтовыбора = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПослеУдаления(Элемент)
	
	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.МатериалыИУслуги, Истина);
	Если НеобходимоОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.МатериалыИУслуги);
	КонецЕсли;
	
	МатериалыИУслугиПослеУдаленияНаСервере(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("МатериалыИУслуги", ТекущаяСтрока));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));
		
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", Объект.Подразделение);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.МатериалыИУслуги);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьОстаткиМатериаловВПодразделении(Элементы.МатериалыИУслуги.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ЗаполнитьОстаткиМатериаловВПодразделении(Элементы.МатериалыИУслуги.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "МатериалыИУслуги");
	
	ТекущиеДанные.ЕстьОтличияОтНорматива = (ТекущиеДанные.КоличествоОтклонение <> 0); 
	ЗаполнитьОстаткиМатериаловВПодразделении(Элементы.МатериалыИУслуги.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "МатериалыИУслуги");
	
	ТекущиеДанные.ЕстьОтличияОтНорматива = (ТекущиеДанные.КоличествоОтклонение <> 0); 
	ЗаполнитьДатуРасходаМатериала(ТекущиеДанные);
	
	ЗаполнитьСтатусыУказанияСерийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "МатериалыИУслуги");
	
	ТекущиеДанные.ЕстьОтличияОтНорматива = (ТекущиеДанные.КоличествоОтклонение <> 0); 
	ЗаполнитьДатуРасходаМатериала(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ВыбратьОперацию(ТекущиеДанные, "МатериалыИУслуги", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОперацияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ТекущиеДанные.КлючСвязиОперации = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ТекущиеДанные.Операция          = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.МатериалыИУслуги);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.МатериалыИУслуги, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("МатериалыИУслуги", Элемент.ТекстРедактирования, Элементы.МатериалыИУслуги.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиМатериалИзрасходованПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	УправлениеПроизводствомВызовСервера.УстановитьДатуПоОтметке(
		ТекущиеДанные.МатериалИзрасходован,
		ТекущиеДанные.ДатаРасхода);
	
	Если ТекущиеДанные.МатериалИзрасходован
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению")
		И Объект.УправлениеМаршрутнымиЛистами = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ") Тогда
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется");
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", Объект.Подразделение);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.МатериалыИУслуги);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиДатаРасходаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ТекущиеДанные.МатериалИзрасходован = (ТекущиеДанные.ДатаРасхода <> '000101010000');
	
	Если ТекущиеДанные.МатериалИзрасходован
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению")
		И Объект.УправлениеМаршрутнымиЛистами = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ") Тогда
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется");
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования ИЛИ НЕ НоваяСтрока Тогда
		ДанныеСтроки = Элементы.Трудозатраты.ТекущиеДанные;
		Если ДанныеСтроки.Количество + ДанныеСтроки.КоличествоОтклонение < 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательным трудозатратам.';
										|en = 'Variance from standard should not result in negative labor costs.'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПослеУдаления(Элемент)
	
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ВыбратьОперацию(ТекущиеДанные, "Трудозатраты", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОперацияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ТекущиеДанные.КлючСвязиОперации = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ТекущиеДанные.Операция          = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ПриИзмененииНорматива(ТекущиеДанные, "Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ПриИзмененииФакта(ТекущиеДанные, "Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоОтклонениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ПриИзмененииОтклонения(ТекущиеДанные, "Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура КомандаПоказатьСхемуОпераций(Команда)
	
	ПоказатьСхемуОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПорядокВыполненияОперацийЗадаетсяПорядкомСтрок(Команда)
	
	Если Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно Тогда
		ТекстВопроса = НСтр("ru = 'Установить порядок выполнения операций по порядку строк?';
							|en = 'Set the operation sequence by the line order?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПорядокВыполненияОперацийЗадаетсяПорядкомСтрок", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПорядокВыполненияОперацийЗадаетсяПроизвольно(Команда)
	
	Если НЕ Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно Тогда
		
		ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок();
		
		Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно = Истина;
		УстановитьПараметрыФормыДляНастройкиПорядкаОпераций(ЭтаФорма);
		
		ОбновитьСведенияОбОперацииВТабличныхЧастях(ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюВниз(Команда)
	
	ПереместитьОперацию(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюВВерх(Команда)
	
	ПереместитьОперацию(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьПорядокОпераций(Команда)
	
	Если Объект.Операции.Количество() <> 0 
		И ПроверитьПорядокОперацийВызовСервера() Тогда
		ТекстПредупреждения = НСтр("ru = 'Порядок операций указан верно.';
									|en = 'Operation sequence is correct.'");
   		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПорядокОперацийПоследовательно(Команда)
	
	Если НЕ Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Порядок выполнения операций задается в порядке строк.
									|Выполнять команду не требуется.';
									|en = 'Operation execution sequence is specified by the line sequence.
									|The operation execution is not required.'")); 
		Возврат;
	КонецЕсли;
	
	СтрокаОперация = Элементы.Операции.ТекущиеДанные;
	Если СтрокаОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить порядок выполнения в соответствии с порядком строк?';
						|en = 'Populate the execution sequence in accordance to the line sequence?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПорядокОперацийПоследовательно", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУточнитьМатериалПредыдущий(Команда)
	
	ПерейтиКМатериалуКоторыйТребуетсяУточнить(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУточнитьМатериалСледующий(Команда)
	
	ПерейтиКМатериалуКоторыйТребуетсяУточнить(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьВыходноеИзделиеПредыдущий(Команда)
	ПерейтиКВыходномуИзделиюКотороеТребуетсяУточнить(-1);
КонецПроцедуры

&НаКлиенте
Процедура УточнитьВыходноеИзделиеСледующий(Команда)
	ПерейтиКВыходномуИзделиюКотороеТребуетсяУточнить(1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьМатериалИзЗаказа(Команда)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;	
	Если ТекущаяСтрока = Неопределено 
		ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Распоряжение",         Объект.Распоряжение);
	ПараметрыФормы.Вставить("КодСтрокиЭтапыГрафик", Объект.КодСтрокиЭтапыГрафик);
	ПараметрыФормы.Вставить("МатериалыИУслуги",     Объект.МатериалыИУслуги);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораМатериала", ЭтотОбъект, ТекущаяСтрока.ПолучитьИдентификатор());
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ВыборМатериалаУслугиИзЗаказа", 
					ПараметрыФормы, 
					ЭтаФорма,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнениеЗавершеноПланирование(Команда)
	
	ИзменитьСтатусОперацииПланирование(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.Завершено"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнениеЗавершеноРегистрация(Команда)
	
	ИзменитьСтатусОперацииРегистрация(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.Завершено"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнениеНачалосьПланирование(Команда)
	
	ИзменитьСтатусОперацииПланирование(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.Начато"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнениеНачалосьРегистрация(Команда)
	
	ИзменитьСтатусОперацииРегистрация(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.Начато"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнениеНеНачалосьПланирование(Команда)
	
	ИзменитьСтатусОперацииПланирование(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.НеНачато"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнениеНеНачалосьРегистрация(Команда)
	
	ИзменитьСтатусОперацииРегистрация(ПредопределенноеЗначение("Перечисление.СтатусыВыполненияОпераций.НеНачато"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьКачествоНоменклатуры(Команда)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Нельзя изменить качество полуфабриката';
									|en = 'Cannot change quality of the semi-finished product'"));
		Возврат;
	КонецЕсли;
	
	ИзменитьКачество(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоОтхода(Команда)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Нельзя изменить качество полуфабриката';
									|en = 'Cannot change quality of the semi-finished product'"));
		Возврат;
	КонецЕсли;
	
	ИзменитьКачество(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьСтрокуИзделий(Команда)
	
	ТаблицаФормы  = Элементы.ВыходныеИзделия;
	ДанныеТаблицы = Объект.ВыходныеИзделия;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковокФакт";
	ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите фактическое количество в новой строке';
												|en = 'Enter actual quantity in a new line'");
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("КомандаРазбитьСтрокуИзделийЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьСтрокуИзделийЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.Количество = 0;
		НоваяСтрока.КоличествоУпаковок = 0;
		
		ПриИзмененииФакта(ТекущаяСтрока, "ВыходныеИзделия");
		ПриИзмененииФакта(НоваяСтрока, "ВыходныеИзделия");
		
	КонецЕсли;
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуОтхода(Команда)
	
	ТаблицаФормы  = Элементы.ВозвратныеОтходы;
	ДанныеТаблицы = Объект.ВозвратныеОтходы;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковокФакт";
	ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите фактическое количество в новой строке';
												|en = 'Enter actual quantity in a new line'");
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуОтходаЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуОтходаЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.Количество = 0;
		НоваяСтрока.КоличествоУпаковок = 0;
		
		ПриИзмененииФакта(ТекущаяСтрока, "ВозвратныеОтходы");
		ПриИзмененииФакта(НоваяСтрока, "ВозвратныеОтходы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьСтрокуМатериалов(Команда)
	
	ТаблицаФормы  = Элементы.МатериалыИУслуги;
	ДанныеТаблицы = Объект.МатериалыИУслуги;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковокФакт";
	ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите фактическое количество в новой строке';
												|en = 'Enter actual quantity in a new line'");
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("КомандаРазбитьСтрокуМатериаловЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьСтрокуМатериаловЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.Количество = 0;
		НоваяСтрока.КоличествоУпаковок = 0;
		
		ПриИзмененииФакта(ТекущаяСтрока, "МатериалыИУслуги");
		ПриИзмененииФакта(НоваяСтрока, "МатериалыИУслуги");
		
		// Нужно распределить норматив между двумя строками
		Коэффициенты = Новый Массив;
		Коэффициенты.Добавить(ТекущаяСтрока.КоличествоФакт);
		Коэффициенты.Добавить(НоваяСтрока.КоличествоФакт);
		РезультатРаспределения = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(ТекущаяСтрока.КоличествоУпаковок, Коэффициенты);
		Если РезультатРаспределения <> Неопределено Тогда
			ТекущаяСтрока.КоличествоУпаковок = РезультатРаспределения[0];
			НоваяСтрока.КоличествоУпаковок = РезультатРаспределения[1];
			ПриИзмененииНорматива(ТекущаяСтрока, "МатериалыИУслуги");
			ПриИзмененииНорматива(НоваяСтрока, "МатериалыИУслуги");
		КонецЕсли; 
		
		ТекущаяСтрока.ЕстьОтличияОтНорматива = (ТекущаяСтрока.КоличествоОтклонение <> 0); 
		НоваяСтрока.ЕстьОтличияОтНорматива   = (НоваяСтрока.КоличествоОтклонение <> 0); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьНеизрасходованныеМатериалы(Команда)
	
	ПоказатьНеизрасходованныеМатериалы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьОтличияОтНормативаМатериалыИУслуги(Команда)
	
	ПоказатьОтличияОтНорматива();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьРасписание(Команда)
	
	ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ.';
						|en = 'To continue, save the document.'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписание", ЭтотОбъект);
	ЗаписатьОбъектИПродолжитьВыполнение(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапланироватьДопроизводство(Команда)
	
	ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ.';
						|en = 'To continue, save the document.'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапланироватьДопроизводство", ЭтотОбъект);
	ЗаписатьОбъектИПродолжитьВыполнение(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьРезультатВыполненияМаршрутногоЛиста(Команда)
	
	ИзменитьРезультатВыполненияМаршрутногоЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоЗаказу(Команда)
	ЗаполнитьПоЗаказуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииВыходныеИзделия(Команда)
	
	ОткрытьПодборСерий("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьРасходМатериалов(Команда)
	
	МассивСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.МатериалыИУслуги.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ИдентификаторСтроки);
	   	Если ДанныеСтроки.КоличествоФакт <> 0 Тогда
			МассивСтрок.Добавить(ИдентификаторСтроки);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивСтрок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо материалы для которых заполнено фактическое количество.';
									|en = 'Materials are required for which actual quantity is filled in.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтметитьРасходМатериаловЗавершение", ЭтотОбъект, МассивСтрок);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			ОбщегоНазначенияКлиент.ДатаСеанса(),
			НСтр("ru = 'Введите дату расхода материалов (работ)';
				|en = 'Enter the material (work) consumption date'"), 
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКМатериалам(Команда)
	
	ТекущиеДанные = ПроверитьИВернутьДанныеВыбраннойОперации();
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("КлючСвязиОперации", ТекущиеДанные.КлючСвязи);
		НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
		
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			
			УстановитьОтборПоОперации("МатериалыИУслуги", ТекущиеДанные.КлючСвязи);
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМатериалы;
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'Материалы по выбранной операции отсутствуют';
										|en = 'No materials for the selected operation'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУстановитьОтборПоОперации(Команда)
	
	ВыбратьОперациюДляУстановкиОтбора("МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиОтменитьОтборПоОперации(Команда)
	
	ОтменитьОтборПоОперации("МатериалыИУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТрудозатратам(Команда)
	
	ТекущиеДанные = ПроверитьИВернутьДанныеВыбраннойОперации();
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("КлючСвязиОперации", ТекущиеДанные.КлючСвязи);
		НайденныеСтроки = Объект.Трудозатраты.НайтиСтроки(СтруктураПоиска);
		
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			
			УстановитьОтборПоОперации("Трудозатраты", ТекущиеДанные.КлючСвязи);
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТрудозатраты;
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'Трудозатраты по выбранной операции отсутствуют';
										|en = 'No labor costs by the selected operation'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыУстановитьОтборПоОперации(Команда)
	
	ВыбратьОперациюДляУстановкиОтбора("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьОтборПоОперации(Команда)
	
	ОтменитьОтборПоОперации("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ОбновлениеРеквизитовФормы

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен Тогда
		Элементы.Статус.РежимВыбораИзСписка = Ложь;
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗаказНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Назначение, "Заказ");
	//++ Устарело_Переработка24
	ПроизводствоПодЗаказДавальца = ТипЗнч(ЗаказНазначения) = Тип("ДокументСсылка.ЗаказДавальца");
	//-- Устарело_Переработка24
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.МаршрутныйЛистПроизводства.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	
	ВыполнениеОперацийНаДату = ТекущаяДатаСеанса();
	
	УстановитьПорядокОперацийПроверенПоСтатусу();
	
	ЗапланированоДоРедактирования = Объект.Запланировано;
	ПроизведеноДоРедактирования = Объект.Произведено;
	БракДоРедактирования = Объект.Брак;
	
	СтатусДоРедактирования = Объект.Статус;
	
	ЗаполнитьВидыРабочихЦентров();
	ПрочитатьИнформациюОРасписании();
	ОпределитьВидМаршрута();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьПараметрыФормыДляНастройкиПорядкаОпераций(ЭтаФорма);
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ЗаполнитьСтроковыеРеквизитыФормы();
	
	ИнициализироватьМаршрутПриЧтении();
	
	ФактическоеНачалоББВ = Объект.ФактическоеНачало;
	ФактическоеНачалоУББВ = Объект.ФактическоеНачало;
	
	Элементы.ОписаниеБрака.ТолькоПросмотр = (Объект.Брак = 0);
	
	УправлениеВидимостью(); 
	
	УправлениеДоступностьюПоСтатусу();
	
	ОпределитьНеобходимостьОформитьДопроизводство();
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	ЗаполнитьСлужебныеРеквизитыВыходныеИзделия();
	
	ЗаполнитьСлужебныеРеквизитыВозвратныеОтходы();
	
	ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги();
	
	ОбновитьСведенияОбОперацииВТабличныхЧастях(ЭтаФорма);
	
	ЗаполнитьОстаткиМатериаловВПодразделении();
	
	Для каждого СтрокаМатериал Из Объект.МатериалыИУслуги Цикл
		СтрокаМатериал.ЕстьОтличияОтНорматива = (СтрокаМатериал.КоличествоОтклонение <> 0);
	КонецЦикла; 
	
	Если НЕ КлючевойВидРабочегоЦентра.Пустая() Тогда
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", КлючевойВидРабочегоЦентра);
  		СписокСтрок = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			СписокСтрок[0].Ключевой = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		ИЛИ Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		ОперацииЗаполнитьСтатусВыполненияТекущий();
		ОперацииЗаполнитьСлужебныеРеквизитыВидовРЦ();
		ОперацииЗаполнитьВспомогательныеРабочиеЦентры();
	КонецЕсли;
	
	СписокВидовРабочихЦентров = ВидыРабочихЦентров.Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра");
	ИспользованиеВариантовНаладки = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокВидовРабочихЦентров, "ИспользуютсяВариантыНаладки");
	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		ИспользуютсяВариантыНаладки = ИспользованиеВариантовНаладки.Получить(СтрокаВидРЦ.ВидРабочегоЦентра);
		СтрокаВидРЦ.ИспользуетсяВариантНаладки = (ИспользуютсяВариантыНаладки = Истина);
	КонецЦикла;
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	Для Каждого Строка Из Объект.ВыходныеИзделия Цикл
		
		Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		Иначе
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из Объект.ВозвратныеОтходы Цикл
		
		Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		Иначе
			Строка.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВыходныеИзделия()
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Действие);
	
	Действие = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Действие);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВыходныеИзделия,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВозвратныеОтходы()
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Действие);
	
	Действие = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Действие);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыМатериалыИУслуги()
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Действие);	            	
		
	Действие = Новый Структура("Номенклатура", "Артикул");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Действие);
		
	Действие = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Действие);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиМатериаловВПодразделении(ТекущаяСтрока = Неопределено)

	Если Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		ИЛИ Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
			ИЛИ ТекущиеДанные.Количество = 0 Тогда
			
			ТекущиеДанные.ОстатокВПодразделении = 0;
			ТекущиеДанные.ДефицитМатериалов = 0;
			Возврат;
		КонецЕсли; 
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекущиеДанные);
	КонецЕсли; 
	
	ОстаткиМатериалов = Документы.МаршрутныйЛистПроизводства.ОстаткиМатериаловВПодразделенииМаршрутногоЛиста(Объект);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		КоллекцияМатериалов = МассивСтрок;
	Иначе
		КоллекцияМатериалов = Объект.МатериалыИУслуги;
	КонецЕсли; 
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаМатериал Из КоллекцияМатериалов Цикл
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение", 
							СтрокаМатериал.Номенклатура, СтрокаМатериал.Характеристика, СтрокаМатериал.Назначение);
  		СписокСтрок = ОстаткиМатериалов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			СтрокаДефицит = СписокСтрок[0];
			Если ЗначениеЗаполнено(СтрокаМатериал.Упаковка) И ЗначениеЗаполнено(СтрокаМатериал.Номенклатура) Тогда
				ЗначенияРеквизитов = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьКоэффициентУпаковки(
												СтрокаМатериал.Упаковка,
												КэшированныеЗначения,
												СтрокаМатериал.Номенклатура);
												
				ОстатокВПодразделении = СтрокаДефицит.ОстатокВПодразделении / ЗначенияРеквизитов.Коэффициент;
			Иначе	
				ОстатокВПодразделении = СтрокаДефицит.ОстатокВПодразделении;
			КонецЕсли;
			СтрокаМатериал.ОстатокВПодразделении = ОстатокВПодразделении;
			СтрокаМатериал.ДефицитМатериалов = СтрокаДефицит.ДефицитМатериалов;
		Иначе
			СтрокаМатериал.ОстатокВПодразделении = 0;
			СтрокаМатериал.ДефицитМатериалов = 0;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтроковыеРеквизитыФормы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	Спецификация.Представление КАК Спецификация,
	|	Этап.Владелец КАК СпецификацияЭтапа,
	|	Этап.Владелец.Представление КАК СпецификацияЭтапаПредставление,
	|	Этап.Владелец.МногоэтапныйПроизводственныйПроцесс КАК СпецификацияЭтапаМногоэтапныйПроизводственныйПроцесс,
	|	Этап.Представление КАК Этап
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Спецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этап
	|		ПО (Этап.Ссылка = &Этап)
	|ГДЕ
	|	Спецификация.Ссылка = &Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	Спецификация.Представление КАК Спецификация,
	|	Этап.Владелец КАК СпецификацияЭтапа,
	|	Этап.Владелец.Представление КАК СпецификацияЭтапаПредставление,
	|	Этап.Владелец.МногоэтапныйПроизводственныйПроцесс КАК СпецификацияЭтапаМногоэтапныйПроизводственныйПроцесс,
	|	Этап.Представление КАК Этап
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК Спецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК Этап
	|		ПО (Этап.Ссылка = &ЭтапПолуфабриката)
	|ГДЕ
	|	Спецификация.Ссылка = &СпецификацияПолуфабриката
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Представление КАК Номенклатура,
	|	Характеристика.Представление КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристика
	|		ПО (Характеристика.Ссылка = &Характеристика)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Представление КАК Номенклатура,
	|	Характеристика.Представление КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристика
	|		ПО (Характеристика.Ссылка = &ХарактеристикаПолуфабриката)
	|ГДЕ
	|	Номенклатура.Ссылка = &НоменклатураПолуфабриката
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распоряжение.Номер КАК РаспоряжениеНомер,
	|	Распоряжение.Дата КАК РаспоряжениеДата
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК Распоряжение
	|ГДЕ
	|	Распоряжение.Ссылка = &Распоряжение";
	
	Запрос.УстановитьПараметр("Спецификация",   Объект.Спецификация);
	Запрос.УстановитьПараметр("Этап",           ?(ЗначениеЗаполнено(Объект.ЭтапПродукции), Объект.ЭтапПродукции, Объект.Этап));
	Запрос.УстановитьПараметр("Номенклатура",   Объект.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
	Запрос.УстановитьПараметр("Распоряжение",   Объект.Распоряжение);
	
	Запрос.УстановитьПараметр("СпецификацияПолуфабриката", Объект.СпецификацияПолуфабриката);
	Запрос.УстановитьПараметр("ЭтапПолуфабриката",         Объект.Этап);
	
	Запрос.УстановитьПараметр("НоменклатураПолуфабриката",   Объект.НоменклатураПолуфабриката);
	Запрос.УстановитьПараметр("ХарактеристикаПолуфабриката", Объект.ХарактеристикаПолуфабриката);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаСпецификация = Результат[0].Выбрать();
	Если ВыборкаСпецификация.Следующий() Тогда
		
		МногоэтапныйПроизводственныйПроцесс = ВыборкаСпецификация.МногоэтапныйПроизводственныйПроцесс;
	
		СпецификацияСтрока = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЭтапа(
										ВыборкаСпецификация.Спецификация,
										ВыборкаСпецификация.Этап,
										МногоэтапныйПроизводственныйПроцесс,
										Объект.ЭтапВосстановленияБрака);
										
	КонецЕсли; 
	
	ПроизводствоПолуфабриката = НЕ Объект.СпецификацияПолуфабриката.Пустая();
	
	ВыборкаСпецификацияПолуфабриката = Результат[1].Выбрать();
	Если ВыборкаСпецификацияПолуфабриката.Следующий() Тогда
		
		МногоэтапныйПроизводственныйПроцессПолуфабриката = ВыборкаСпецификацияПолуфабриката.МногоэтапныйПроизводственныйПроцесс;
	
		СпецификацияПолуфабрикатаСтрока = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЭтапа(
										ВыборкаСпецификацияПолуфабриката.Спецификация,
										ВыборкаСпецификацияПолуфабриката.Этап,
										МногоэтапныйПроизводственныйПроцессПолуфабриката,
										Объект.ЭтапВосстановленияБрака);
										
	КонецЕсли; 
	
	ВыборкаНоменклатура = Результат[2].Выбрать();
	Если ВыборкаНоменклатура.Следующий() Тогда
		ИзделиеСтрока = ВыборкаНоменклатура.Номенклатура;
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.Характеристика) Тогда
			ИзделиеСтрока = ИзделиеСтрока + ", " + ВыборкаНоменклатура.Характеристика;
		КонецЕсли; 
	КонецЕсли;
	
	ВыборкаПолуфабрикат = Результат[3].Выбрать();
	Если ВыборкаПолуфабрикат.Следующий() Тогда
		ПолуфабрикатСтрока = ВыборкаПолуфабрикат.Номенклатура;
		Если ЗначениеЗаполнено(ВыборкаПолуфабрикат.Характеристика) Тогда
			ПолуфабрикатСтрока = ПолуфабрикатСтрока + ", " + ВыборкаПолуфабрикат.Характеристика;
		КонецЕсли; 
	КонецЕсли;
	
	ВыборкаРаспоряжение = Результат[4].Выбрать();
	Если ВыборкаРаспоряжение.Следующий() Тогда
		РаспоряжениеСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '№ %1 от %2';
												|en = 'No. %1 from %2'"),
											ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаРаспоряжение.РаспоряжениеНомер, Ложь, Истина),
											Формат(ВыборкаРаспоряжение.РаспоряжениеДата, "ДЛФ=D"));
	КонецЕсли; 

	Если ПроизводствоПолуфабриката Тогда
		Элементы.СтраницыПродукцияИлиПолуфабрикат.ТекущаяСтраница = Элементы.СтраницаПолуфабрикат;
	Иначе
		Элементы.СтраницыПродукцияИлиПолуфабрикат.ТекущаяСтраница = Элементы.СтраницаПродукция;
	КонецЕсли;
	
	Если Объект.Назначение.Пустая() Тогда
		Если ПроизводствоПолуфабриката Тогда
			Элементы.СтраницыНазначениеПолуфабрикат.ТекущаяСтраница = Элементы.СтраницаНазначениеПолуфабрикатНеЗадано;
		Иначе
			Элементы.СтраницыНазначениеПродукция.ТекущаяСтраница = Элементы.СтраницаНазначениеПродукцияНеЗадано;
		КонецЕсли; 
	Иначе
		Если ПроизводствоПолуфабриката Тогда
			Элементы.СтраницыНазначениеПолуфабрикат.ТекущаяСтраница = Элементы.СтраницаНазначениеПолуфабрикатЕсть;
		Иначе
			Элементы.СтраницыНазначениеПродукция.ТекущаяСтраница = Элементы.СтраницаНазначениеПродукцияЕсть;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентров()

	ЕстьПараллельнаяЗагрузка = Ложь;
	
	ТаблицаВидыРабочихЦентров = Объект.ВидыРабочихЦентров.Выгрузить();
	ТаблицаВидыРабочихЦентров.Свернуть("ВидРабочегоЦентра,РабочийЦентр,ВариантНаладки");
	
	ВидыРабочихЦентров.Загрузить(ТаблицаВидыРабочихЦентров);
	
	СписокВидовРЦ = ТаблицаВидыРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра");
	РеквизитыВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокВидовРЦ, "ПараллельнаяЗагрузка,ЕдиницаИзмеренияЗагрузки,ПланироватьРаботуРабочихЦентров");
	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		РеквизитыВидаРЦ = РеквизитыВидовРЦ.Получить(СтрокаВидРЦ.ВидРабочегоЦентра);
		СтрокаВидРЦ.ПараллельнаяЗагрузка = РеквизитыВидаРЦ.ПараллельнаяЗагрузка;
		СтрокаВидРЦ.ПланироватьРаботуРабочихЦентров = РеквизитыВидаРЦ.ПланироватьРаботуРабочихЦентров;
		Если РеквизитыВидаРЦ.ПараллельнаяЗагрузка Тогда
			СтрокаВидРЦ.ЕдиницаИзмеренияЗагрузки = РеквизитыВидаРЦ.ЕдиницаИзмеренияЗагрузки;
			ЕстьПараллельнаяЗагрузка = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьВремяРаботыВидовРЦ();
	
	Элементы.ВидыРабочихЦентровББВЗагрузка.Видимость = ЕстьПараллельнаяЗагрузка;
	Элементы.ВидыРабочихЦентровББВЕдиницаИзмеренияЗагрузки.Видимость = ЕстьПараллельнаяЗагрузка;
	
	Элементы.ВидыРабочихЦентровУББВЗагрузка.Видимость = ЕстьПараллельнаяЗагрузка;
	Элементы.ВидыРабочихЦентровУББВЕдиницаИзмеренияЗагрузки.Видимость = ЕстьПараллельнаяЗагрузка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВремяРаботыВидовРЦ(ОбновитьДанныеВОбъекте = Ложь)

	ВыбранныеРабочиеЦентры = Новый Массив;
	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		Если ЗначениеЗаполнено(СтрокаВидРЦ.РабочийЦентр) Тогда
			ВыбранныеРабочиеЦентры.Добавить(СтрокаВидРЦ.РабочийЦентр);
		КонецЕсли; 
	КонецЦикла; 
	
	КоэффициентыВремениРаботыРЦ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВыбранныеРабочиеЦентры, "КоэффициентВремениРаботы");
	
	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", СтрокаВидРЦ.ВидРабочегоЦентра);
  		ВидыРабочихЦентровОбъекта = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		
		Если ОбновитьДанныеВОбъекте Тогда
			ОбновитьВремяРаботыВидаРЦОбъекта(ВидыРабочихЦентровОбъекта, СтрокаВидРЦ.ПараллельнаяЗагрузка);
			
			ЗанятостьВидаРЦПоГрафикуОбъекта = Объект.ЗанятостьВидовРабочихЦентровПоГрафику.НайтиСтроки(СтруктураПоиска);
			ОбновитьВремяРаботыВидаРЦОбъекта(ЗанятостьВидаРЦПоГрафикуОбъекта, СтрокаВидРЦ.ПараллельнаяЗагрузка);
		КонецЕсли;
		
		ВремяРаботы = 0;
		Для каждого ДанныеВидаРЦ Из ВидыРабочихЦентровОбъекта Цикл
			ВремяРаботы = ВремяРаботы + ДанныеВидаРЦ.ВремяРаботы;
		КонецЦикла; 
		СтрокаВидРЦ.ВремяРаботы = ВремяРаботы / 3600;
		СтрокаВидРЦ.Загрузка = ВидыРабочихЦентровОбъекта[0].Загрузка;
		
		КоэффициентВремениРаботы = КоэффициентыВремениРаботыРЦ.Получить(СтрокаВидРЦ.РабочийЦентр);
		Если КоэффициентВремениРаботы <> Неопределено Тогда
			СтрокаВидРЦ.ВремяРаботы = СтрокаВидРЦ.ВремяРаботы * КоэффициентВремениРаботы;
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОбновитьВремяРаботыВидаРЦОбъекта(ВидыРабочихЦентровОбъекта, ПараллельнаяЗагрузка)
	
	Для каждого СтрокаВидРЦОбъекта Из ВидыРабочихЦентровОбъекта Цикл
		Если ПараллельнаяЗагрузка Тогда
			СтрокаВидРЦОбъекта.Загрузка = ОперативныйУчетПроизводстваКлиентСервер.Загрузка(
												СтрокаВидРЦОбъекта.ЗагрузкаНорматив,
												Объект.Запланировано,
												Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		
		Иначе
			СтрокаВидРЦОбъекта.ВремяРаботы = ОперативныйУчетПроизводстваКлиентСервер.ОбъемРабот(
													СтрокаВидРЦОбъекта.ВремяРаботыНорматив, 
													Объект.Запланировано,
													Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПолейАвтовыбораВыходныхИзделий(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		СведенияАвтовыбора = "";
		СведенияАвтовыбораТекущаяСтрока = 0;
		
	Иначе
		
		СведенияАвтовыбора = ТекущиеДанные.СведенияАвтовыбора;
		СведенияАвтовыбораТекущаяСтрока = ТекущиеДанные.НомерСтроки + 
			?(ИмяТЧ = "ВозвратныеОтходы", Объект.ВыходныеИзделия.Количество(), 0);
			
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПоддержкаСвязиОперацийСДругимиДанными

&НаКлиенте
Процедура ВыбратьОперацию(ТекущиеДанные, ИмяТабличнойЧасти, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Операции",  Объект.Операции);
	ПараметрыФормы.Вставить("КлючСвязи", ТекущиеДанные.КлючСвязиОперации);
	
	ДополнительныеПараметрыОбработкиВыбора = Новый Структура;
	ДополнительныеПараметрыОбработкиВыбора.Вставить("ИмяТабличнойЧасти",   ИмяТабличнойЧасти);
	ДополнительныеПараметрыОбработкиВыбора.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораОперации", ЭтотОбъект, ДополнительныеПараметрыОбработкиВыбора);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ВыборОпераций", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат
	КонецЕсли; 
	
	ТекущиеДанные = Элементы[ДополнительныеПараметры.ИмяТабличнойЧасти].ДанныеСтроки(ДополнительныеПараметры.ИдентификаторСтроки);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Операция          = РезультатЗакрытия.Операция;
	ТекущиеДанные.НомерОперации     = РезультатЗакрытия.НомерОперации;
	ТекущиеДанные.КлючСвязиОперации = РезультатЗакрытия.КлючСвязи;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСведенияОбОперацииВТабличныхЧастях(Форма, ТекущиеДанные = Неопределено)

	ЗаполнитьРеквизитОперация(Форма, "ВыходныеИзделия",  ТекущиеДанные);
	ЗаполнитьРеквизитОперация(Форма, "ВозвратныеОтходы",  ТекущиеДанные);
	ЗаполнитьРеквизитОперация(Форма, "МатериалыИУслуги", ТекущиеДанные);
	ЗаполнитьРеквизитОперация(Форма, "Трудозатраты",     ТекущиеДанные);

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитОперация(Форма, ИмяТабличнойЧасти, ТекущиеДанные = Неопределено)
	
	Объект = Форма.Объект;
	ПустойКлючСвязи = Форма.ПустойКлючСвязи;
	
	Для каждого ЭлементКоллекции Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если ЭлементКоллекции.КлючСвязиОперации = ПустойКлючСвязи 
			ИЛИ ТекущиеДанные <> Неопределено
				И ЭлементКоллекции.КлючСвязиОперации <> ТекущиеДанные.КлючСвязи Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОперация = Неопределено;
		
		Если ТекущиеДанные = Неопределено Тогда
			НайденныеСтроки = Объект.Операции.НайтиСтроки(Новый Структура("КлючСвязи", ЭлементКоллекции.КлючСвязиОперации));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				СтрокаОперация = НайденныеСтроки[0];
			КонецЕсли;
		Иначе
			СтрокаОперация = ТекущиеДанные;
		КонецЕсли;
		
		Если СтрокаОперация <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаОперация, "НомерОперации, Операция");
		Иначе
			ЭлементКоллекции.КлючСвязиОперации = ПустойКлючСвязи;
			ЭлементКоллекции.НомерОперации     = "";
			ЭлементКоллекции.Операция          = Неопределено;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиТаблицыСвязанныеСОперациями(СписокОпераций, ТабличнаяЧасть)

	СписокСтрок = Новый Массив;
	
	Для каждого СтрокаОперация Из СписокОпераций Цикл
		Для каждого ЭлементКоллекции Из ТабличнаяЧасть Цикл
			Если ЭлементКоллекции.КлючСвязиОперации = СтрокаОперация.КлючСвязи 
				И СписокСтрок.Найти(ЭлементКоллекции) = Неопределено Тогда
				
				СписокСтрок.Добавить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 

	Возврат СписокСтрок;
	
КонецФункции 
 
&НаКлиенте
Процедура ОбновитьДанныеПриУдаленииОпераций(СписокСтрок,  УдалитьСвязанныеДанные, ТабличнаяЧасть)

	Для каждого ЭлементКоллекции Из СписокСтрок Цикл
		Если УдалитьСвязанныеДанные Тогда
			ТабличнаяЧасть.Удалить(ЭлементКоллекции);
		Иначе
			ЭлементКоллекции.КлючСвязиОперации = ПустойКлючСвязи;
			ЭлементКоллекции.НомерОперации     = "";
			ЭлементКоллекции.Операция          = Неопределено;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

&НаСервере
Функция ПроверитьПорядокОперацийВызовСервера()

	ПорядокОперацийПроверен = Документы.МаршрутныйЛистПроизводства.ПроверитьПорядокОпераций(Объект.Операции,, "Объект");
	Возврат ПорядокОперацийПроверен;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеОпераций

&НаКлиенте
Процедура ИзменитьСтатусОперацииПланирование(НовыйСтатус)
	
	ТекущиеДанные = ПроверитьИВернутьДанныеВыбраннойОперации();
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = "";
		ИзменитьСтатусОперацииПланированиеНаСервере(ТекущиеДанные.КлючСвязи, НовыйСтатус, ТекстПредупреждения);
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусОперацииПланированиеНаСервере(ОперацияКлючСвязи, НовыйСтатус, ТекстПредупреждения)
	
	ТекущийСтатус = СтатусВыполненияОперацииПоДаннымРасписания(ОперацияКлючСвязи, ВыполнениеОперацийНаДату);
		
	Если ТекущийСтатус = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для выбранной операции не рассчитано расписание производства,
			|статус не может быть установлен.';
			|en = 'Production timetable is not calculated for the selected operation,
			|the status cannot be set.'");
			
	ИначеЕсли ТекущийСтатус = НовыйСтатус Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Выбранный статус выполнения уже установлен.';
									|en = 'The selected execution status is already set.'");
			
	Иначе
	
		ОперацииДляИзменения = Новый Массив;
		ОперацииДляИзменения.Добавить(ОперацияКлючСвязи);
		РегистрыСведений.ПооперационноеРасписание.ИзменитьСтатусОпераций(ОперацииДляИзменения, НовыйСтатус);
		
		ОперацииЗаполнитьСтатусВыполненияТекущий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатусОперацииРегистрация(НовыйСтатус)
	
	ТекущиеДанные = ПроверитьИВернутьДанныеВыбраннойОперации();
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ТекущиеДанные.СтатусВыполнения = НовыйСтатус Тогда
			
			ИзменитьСтатусОперацииРегистрацияНаСервере(ТекущиеДанные.КлючСвязи, НовыйСтатус);
			
		Иначе
			
			ПоказатьПредупреждение(,НСтр("ru = 'Выбранный статус выполнения уже установлен.';
										|en = 'The selected execution status is already set.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусОперацииРегистрацияНаСервере(ОперацияКлючСвязи, НовыйСтатус)
	
	ОперацииДляИзменения = Новый Массив;
	ОперацииДляИзменения.Добавить(ОперацияКлючСвязи);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Документы.МаршрутныйЛистПроизводства.ИзменитьСтатусОпераций(ОперацииДляИзменения, НовыйСтатус, ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОперацииЗаполнитьСтатусВыполненияТекущий();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИВернутьДанныеВыбраннойОперации()

	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Выберите строку табличной части';
									|en = 'Select a table row'"));
	КонецЕсли;

	Возврат ТекущиеДанные;
	
КонецФункции

#КонецОбласти

#Область ПорядокВыполненияОпераций

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыФормыДляНастройкиПорядкаОпераций(Форма)

	Форма.Элементы.ДеревоОперацийОперацииВыполняютсяПоследовательно.Пометка           = НЕ Форма.Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно;
	Форма.Элементы.ДеревоОперацийПорядокВыполненияОперацийЗадаетсяПроизвольно.Пометка = Форма.Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок()

	НомерОперации      = 1;
	СтрокаОперация     = Неопределено;
	КоличествоОпераций = Объект.Операции.Количество();
	Для каждого СтрокаОперация Из Объект.Операции Цикл
		
		НомерСледующейОперации = ?(НомерОперации <> КоличествоОпераций, НомерОперации + 1, 0);
		
		Если СтрокаОперация.НомерОперации <> НомерОперации
			ИЛИ СтрокаОперация.НомерСледующейОперации <> НомерСледующейОперации Тогда
			
			СтрокаОперация.НомерОперации          = НомерОперации;
			СтрокаОперация.НомерСледующейОперации = ?(НомерОперации <> КоличествоОпераций, НомерОперации + 1, 0);
		
		КонецЕсли;
		
		НомерОперации = НомерОперации + 1;
		
	КонецЦикла;

	ПорядокОперацийПроверен = Истина;
	
	ОбновитьСведенияОбОперацииВТабличныхЧастях(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПорядокСтрокСовпадаетСПорядкомВыполненияОпераций(ИсключитьСтроку = Неопределено)

	ПорядокСовпадает = Истина;
	
	НомерОперации = 1;
	СтрокаОперация = Неопределено;
	Для каждого СтрокаОперация Из Объект.Операции Цикл
		Если ИсключитьСтроку <> Неопределено И СтрокаОперация.Ключсвязи = ИсключитьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОперация.НомерОперации <> НомерОперации 
			ИЛИ СтрокаОперация.НомерСледующейОперации <> 0 
				И СтрокаОперация.НомерСледующейОперации <> НомерОперации + 1 Тогда
			
			ПорядокСовпадает = Ложь;
			Прервать;
		КонецЕсли;
		НомерОперации = НомерОперации + 1;
	КонецЦикла;
	
	Возврат ПорядокСовпадает; 
	
КонецФункции
 
&НаКлиенте
Процедура ПереместитьОперацию(Знач Направление)

	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементов = Объект.Операции;
	
	ПорядокСтрокСовпадаетСПорядкомВыполненияОпераций = ПорядокСтрокСовпадаетСПорядкомВыполненияОпераций();
	
	Если Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно И НЕ ПорядокСтрокСовпадаетСПорядкомВыполненияОпераций Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Невозможно переместить операцию,
									|т.к. задан произвольный порядок выполнения.';
									|en = 'Cannot move the operation
									|as an arbitrary execution order is specified.'"));
		Возврат;
	КонецЕсли;
	
	ИндексТекущейСтроки = КоллекцияЭлементов.Индекс(ТекущиеДанные);
	Если Направление = 1 И ИндексТекущейСтроки = КоллекцияЭлементов.Количество() - 1 Тогда
		Направление = -(КоллекцияЭлементов.Количество() - 1);
	ИначеЕсли Направление = -1 И ИндексТекущейСтроки = 0 Тогда
		Направление = (КоллекцияЭлементов.Количество() - 1);
	КонецЕсли; 
	
	КоллекцияЭлементов.Сдвинуть(ИндексТекущейСтроки, Направление);

	Если Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно Тогда
		Если ПорядокСтрокСовпадаетСПорядкомВыполненияОпераций Тогда
			ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок();
		КонецЕсли;
	Иначе
		ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок();
	КонецЕсли; 
	
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура ПодтвердитьЗаполнениеДокумента(ОбработчикПослеПодтверждения)

	Если Объект.Операции.Количество() <> 0
		ИЛИ Объект.ВыходныеИзделия.Количество() <> 0 
		ИЛИ Объект.МатериалыИУслуги.Количество() <> 0 
		ИЛИ Объект.Трудозатраты.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Перезаполнить маршрутный лист?';
							|en = 'Refill the route sheet?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(ОбработчикПослеПодтверждения, ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ОбработчикПослеПодтверждения, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеМаршрутнойКарты()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДобавитьДанныеМаршрутнойКарты();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБуферыПриИзмененииМаршрутнойКарты()
									
	Если НЕ Объект.МаршрутнаяКарта.Пустая() Тогда
		ДанныеБуферов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
											Объект.МаршрутнаяКарта, 
											"ПредварительныйБуфер,ЕдиницаИзмеренияПредварительногоБуфера,
											|ЗавершающийБуфер,ЕдиницаИзмеренияЗавершающегоБуфера");
	Иначе
		ДанныеБуферов = Новый Структура("ПредварительныйБуфер,ЕдиницаИзмеренияПредварительногоБуфера,
									|ЗавершающийБуфер,ЕдиницаИзмеренияЗавершающегоБуфера", 0, 0);
	КонецЕсли;

	Если ДанныеБуферов.ПредварительныйБуфер = 0 И ДанныеБуферов.ЗавершающийБуфер = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
		|			ИЛИ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ПредварительныйБуфер = 0
		|			ТОГДА ЗаказНаПроизводствоЭтапы.ПредварительныйБуфер
		|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ПредварительныйБуфер 
		|	КОНЕЦ                                                            КАК ПредварительныйБуфер,
		|	ВЫБОР
		|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
		|			ИЛИ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ПредварительныйБуфер = 0
		|			ТОГДА ЗаказНаПроизводствоЭтапы.ЕдиницаИзмеренияПредварительногоБуфера
		|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЕдиницаИзмеренияПредварительногоБуфера 
		|	КОНЕЦ                                                            КАК ЕдиницаИзмеренияПредварительногоБуфера,
		|	ВЫБОР
		|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
		|			ИЛИ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЗавершающийБуфер = 0
		|			ТОГДА ЗаказНаПроизводствоЭтапы.ЗавершающийБуфер
		|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЗавершающийБуфер 
		|	КОНЕЦ                                                            КАК ЗавершающийБуфер,
		|	ВЫБОР
		|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
		|			ИЛИ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЗавершающийБуфер = 0
		|			ТОГДА ЗаказНаПроизводствоЭтапы.ЕдиницаИзмеренияЗавершающегоБуфера
		|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЕдиницаИзмеренияЗавершающегоБуфера 
		|	КОНЕЦ                                                            КАК ЕдиницаИзмеренияЗавершающегоБуфера
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
		|		ПО ЗаказНаПроизводствоПродукция.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка
		|			И ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция
		|ГДЕ
		|	ЗаказНаПроизводствоЭтапы.Ссылка = &Ссылка
		|	И ЗаказНаПроизводствоЭтапы.Этап = &Этап
		|	И ЗаказНаПроизводствоПродукция.КодСтроки = &КодСтроки";
		
		Запрос.УстановитьПараметр("Ссылка",    Объект.Распоряжение);
		Запрос.УстановитьПараметр("КодСтроки", Объект.КодСтроки);
		Запрос.УстановитьПараметр("Этап",      Объект.Этап);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если ДанныеБуферов.ПредварительныйБуфер = 0 Тогда
			ДанныеБуферов.ПредварительныйБуфер                   = Выборка.ПредварительныйБуфер;
			ДанныеБуферов.ЕдиницаИзмеренияПредварительногоБуфера = Выборка.ЕдиницаИзмеренияПредварительногоБуфера;
		КонецЕсли; 
		Если ДанныеБуферов.ЗавершающийБуфер = 0 Тогда
			ДанныеБуферов.ЗавершающийБуфер                   = Выборка.ЗавершающийБуфер;
			ДанныеБуферов.ЕдиницаИзмеренияЗавершающегоБуфера = Выборка.ЕдиницаИзмеренияЗавершающегоБуфера;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеБуферов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоРаспоряжению();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьВидыРабочихЦентров();
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьРасходМатериаловЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		ОтметитьРасходМатериаловНаСервере(ВыбраннаяДата, МассивВыделенныхСтрок);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьРасходМатериаловНаСервере(ВыбраннаяДата, МассивВыделенныхСтрок)

	Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
		СтрокаТаблицы = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаТаблицы.ДатаРасхода = ВыбраннаяДата;
		СтрокаТаблицы.МатериалИзрасходован = Истина;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область УточнениеМатериалов

&НаКлиенте
Функция ПерейтиКМатериалуКоторыйТребуетсяУточнитьВСписке(ТекущийИндекс, Направление)

	// Определим параметры цикла по этапам
	Если Направление = 1 Тогда
		ИндексПервогоМатериала    = ТекущийИндекс;
		ИндексПоследнегоМатериала = Объект.МатериалыИУслуги.Количество() - 1;
	Иначе
		ИндексПервогоМатериала    = -ТекущийИндекс;
		ИндексПоследнегоМатериала = 0;
	КонецЕсли; 
	ИндексПервогоМатериала = ИндексПервогоМатериала + 1;
	
	Для СчМатериал = ИндексПервогоМатериала По ИндексПоследнегоМатериала Цикл
		Если Направление = 1 Тогда
			СтрокаМатериал = Объект.МатериалыИУслуги.Получить(СчМатериал);
		Иначе
			СтрокаМатериал = Объект.МатериалыИУслуги.Получить(-СчМатериал);
		КонецЕсли; 
		Если СтрокаМатериал.ИспользуетсяАвтовыбор 
			И (СтрокаМатериал.Номенклатура.Пустая() 
				ИЛИ СтрокаМатериал.Характеристика.Пустая() И СтрокаМатериал.ХарактеристикиИспользуются) Тогда
			
			Элементы.МатериалыИУслуги.ТекущаяСтрока = СтрокаМатериал.ПолучитьИдентификатор();
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ПерейтиКМатериалуКоторыйТребуетсяУточнить(Направление)
	
 	Если Объект.МатериалыИУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Объект.МатериалыИУслуги.Получить(0);
	КонецЕсли;

	ТекущийИндекс = Объект.МатериалыИУслуги.Индекс(ТекущиеДанные);
	Если НЕ ПерейтиКМатериалуКоторыйТребуетсяУточнитьВСписке(ТекущийИндекс, Направление) Тогда
		Если Направление = 1 Тогда
			ТекущийИндекс = 0;
		Иначе
			ТекущийИндекс = Объект.МатериалыИУслуги.Количество() - 1;
		КонецЕсли;
		ПерейтиКМатериалуКоторыйТребуетсяУточнитьВСписке(ТекущийИндекс, Направление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыходномуИзделиюКотороеТребуетсяУточнить(Направление)
	
	ВыходныеИзделияКоличество = Объект.ВыходныеИзделия.Количество();
	ВозвратныеОтходыКоличество = Объект.ВозвратныеОтходы.Количество();
	
	Если ВыходныеИзделияКоличество + ВозвратныеОтходыКоличество = 0 
		ИЛИ СведенияАвтовыбораТекущаяСтрока = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = 1 Тогда
		ИндексПервойСтроки    = СведенияАвтовыбораТекущаяСтрока;
		ИндексПоследнейСтроки = (ВыходныеИзделияКоличество + ВозвратныеОтходыКоличество)-1;
	Иначе
		ИндексПервойСтроки    = -СведенияАвтовыбораТекущаяСтрока+2;
		ИндексПоследнейСтроки = 0;
	КонецЕсли;
	
	Для Ит = ИндексПервойСтроки По ИндексПоследнейСтроки Цикл
		
		ИндексСтрокиТЧ = Ит * Направление;
		Если ИндексСтрокиТЧ < ВыходныеИзделияКоличество Тогда
			ИмяТЧ = "ВыходныеИзделия";
		Иначе
			ИмяТЧ = "ВозвратныеОтходы";
			ИндексСтрокиТЧ = ИндексСтрокиТЧ - ВыходныеИзделияКоличество;
		КонецЕсли;
		
		ТекущаяСтрока = Объект[ИмяТЧ].Получить(ИндексСтрокиТЧ);
		
		Если ТекущаяСтрока.ИспользуетсяАвтовыбор 
			И (ТекущаяСтрока.Номенклатура.Пустая() 
				ИЛИ ТекущаяСтрока.Характеристика.Пустая() И ТекущаяСтрока.ХарактеристикиИспользуются) Тогда
				
			ЭтаФорма.ТекущийЭлемент = Элементы[ИмяТЧ];
			Элементы[ИмяТЧ].ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			
			УстановитьЗначенияПолейАвтовыбораВыходныхИзделий(ИмяТЧ);
			
			Прервать;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораМатериала(РезультатЗакрытия, ИдентификаторТекущейСтроки) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ДанныеСтроки(ИдентификаторТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Номенклатура   = РезультатЗакрытия.Номенклатура;
	ТекущаяСтрока.Характеристика = РезультатЗакрытия.Характеристика;
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц("МатериалыИУслуги", ТекущаяСтрока));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Планирование

&НаСервере
Процедура ОпределитьВидМаршрута()

	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		ИЛИ Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		
		ИспользуетсяМаршрут = Ложь;
	    Элементы.СтраницаМаршрутВиды.ТекущаяСтраница = Элементы.СтраницаМаршрутОперации;
		
	Иначе
		
		ИспользуетсяМаршрут = Истина;
		Если Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			Элементы.СтраницаМаршрутВиды.ТекущаяСтраница = Элементы.СтраницаМаршрутББВ;
		Иначе	
			Элементы.СтраницаМаршрутВиды.ТекущаяСтраница = Элементы.СтраницаМаршрутУББВ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРасписанияОпераций()

	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		Если Модифицированность Тогда
			ПрочитатьИнформациюОРасписании();
		Иначе
			ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ПриЧтенииСозданииНаСервере();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура ПрочитатьИнформациюОРасписании()

	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		ПрочитатьРасписаниеКлючевогоРабочегоЦентра();
	ИначеЕсли Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		СостояниеРасписания = Объект.СостояниеРасписания;
	КонецЕсли;
	
	ОпределитьВидМаршрута();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасписаниеКлючевогоРабочегоЦентра()

	КлючевойРабочийЦентрИЕгоРасписание = ОперативныйУчетПроизводства.КлючевойРабочийЦентрИЕгоРасписание(Объект);
	
	КлючевойВидРабочегоЦентра              = КлючевойРабочийЦентрИЕгоРасписание.КлючевойВидРабочегоЦентра;
	КлючевойРабочийЦентр                   = КлючевойРабочийЦентрИЕгоРасписание.КлючевойРабочийЦентр;
	НачалоРаботыКлючевогоРабочегоЦентра    = КлючевойРабочийЦентрИЕгоРасписание.НачалоРаботыКлючевогоРабочегоЦентра;
	ОкончаниеРаботыКлючевогоРабочегоЦентра = КлючевойРабочийЦентрИЕгоРасписание.ОкончаниеРаботыКлючевогоРабочегоЦентра;
	СоставлятьРасписание                   = КлючевойРабочийЦентрИЕгоРасписание.СоставлятьРасписание;
	
	Для каждого СтрокаВидРабочегоЦентра Из ВидыРабочихЦентров Цикл
		Если СтрокаВидРабочегоЦентра.ВидРабочегоЦентра = КлючевойВидРабочегоЦентра Тогда
			СтрокаВидРабочегоЦентра.Ключевой = Истина;
			Если ЗначениеЗаполнено(КлючевойРабочийЦентр) Тогда
				// Перезаполним по данным расписания
				СтрокаВидРабочегоЦентра.РабочийЦентр = КлючевойРабочийЦентр;
				СтрокаВидРабочегоЦентра.ВремяРаботы  = КлючевойРабочийЦентрИЕгоРасписание.ВремяРаботы / 3600;
			КонецЕсли; 
		Иначе
			СтрокаВидРабочегоЦентра.Ключевой = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ КлючевойВидРабочегоЦентра.Пустая() Тогда
		
		Если НачалоРаботыКлючевогоРабочегоЦентра = НачалоДня(НачалоРаботыКлючевогоРабочегоЦентра)
			И ОкончаниеРаботыКлючевогоРабочегоЦентра = КонецДня(ОкончаниеРаботыКлючевогоРабочегоЦентра) Тогда
			ФорматДаты = "ДЛФ=D";
			ПериодСТочностьюДоЧасов = Ложь;
		Иначе
			ФорматДаты = "ДФ='dd.MM.yyyy ЧЧ:мм'";
			ПериодСТочностьюДоЧасов = Истина;
		КонецЕсли;
		
		Если НачалоДня(НачалоРаботыКлючевогоРабочегоЦентра) = НачалоДня(ОкончаниеРаботыКлючевогоРабочегоЦентра) Тогда
			Если ПериодСТочностьюДоЧасов Тогда
				ИнформацияОРасписанииКлючевогоРЦ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Выполнение маршрутного листа ключевым рабочим центром запланировано на %1 с %2 по %3.';
															|en = 'Route sheet execution by the key work center is planned on %1, %2 to %3.'"),
														Формат(НачалоРаботыКлючевогоРабочегоЦентра, "ДЛФ=D"),
														Формат(НачалоРаботыКлючевогоРабочегоЦентра, "ДФ='ЧЧ:мм'"),
														Формат(ОкончаниеРаботыКлючевогоРабочегоЦентра, "ДФ='ЧЧ:мм'"));
			Иначе
				ИнформацияОРасписанииКлючевогоРЦ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Выполнение маршрутного листа ключевым рабочим центром запланировано на %1.';
															|en = 'Route sheet execution by the key work center is planned on %1.'"),
														Формат(НачалоРаботыКлючевогоРабочегоЦентра, ФорматДаты));
			КонецЕсли; 
		Иначе
			ИнформацияОРасписанииКлючевогоРЦ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Выполнение маршрутного листа ключевым рабочим центром запланировано с %1 по %2.';
														|en = 'Route sheet execution by the key work center is planned from %1 to %2.  '"),
													Формат(НачалоРаботыКлючевогоРабочегоЦентра, ФорматДаты),
													Формат(ОкончаниеРаботыКлючевогоРабочегоЦентра, ФорматДаты));
		КонецЕсли; 
		
		Элементы.ИнформацияОРасписанииКлючевогоРЦ.Заголовок = ИнформацияОРасписанииКлючевогоРЦ;
		Если НЕ СоставлятьРасписание Тогда
			Элементы.ИзменитьРасписание.Видимость = Ложь;
		КонецЕсли;
	Иначе
		
		Элементы.ИнформацияОРасписанииКлючевогоРЦ.Видимость = Ложь;
		Элементы.ИзменитьРасписание.Видимость = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВРасписаниеКлючевойВидРабочегоЦентра(ТекущийОбъект)

	Если НЕ ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров Тогда
		Возврат
	КонецЕсли;
		
	// Если для ключевого вида РЦ указан РЦ, но нет еще расписания, то добавим в расписание, но без времени.
	СтруктураПоиска = Новый Структура("Ключевой,РабочийЦентрИзменен,ПланироватьРаботуРабочихЦентров", Истина, Истина, Истина);
	СписокСтрок = ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КлючевойВидРабочегоЦентраОбъекта = СписокСтрок[0].ВидРабочегоЦентра;
	
	СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", КлючевойВидРабочегоЦентраОбъекта);
	ТаблицаКлючевыхВидовРЦ = ТекущийОбъект.ВидыРабочихЦентров.Выгрузить(СтруктураПоиска);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасписаниеРаботыРабочихЦентров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("МаршрутныйЛист", Объект.Ссылка);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКлючевыхВидовРЦ.ВидРабочегоЦентра,
	|	ТаблицаКлючевыхВидовРЦ.РабочийЦентр,
	|	ТаблицаКлючевыхВидовРЦ.ВремяРаботы,
	|	ТаблицаКлючевыхВидовРЦ.Загрузка,
	|	ТаблицаКлючевыхВидовРЦ.ДатаИнтервала
	|ПОМЕСТИТЬ ТаблицаКлючевыхВидовРЦ
	|ИЗ
	|	&ТаблицаКлючевыхВидовРЦ КАК ТаблицаКлючевыхВидовРЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКлючевыхВидовРЦ.ВидРабочегоЦентра,
	|	ТаблицаКлючевыхВидовРЦ.РабочийЦентр,
	|	ТаблицаКлючевыхВидовРЦ.ВремяРаботы,
	|	ТаблицаКлючевыхВидовРЦ.Загрузка,
	|	ТаблицаКлючевыхВидовРЦ.ДатаИнтервала
	|ИЗ
	|	ТаблицаКлючевыхВидовРЦ КАК ТаблицаКлючевыхВидовРЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ПО (РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = &МаршрутныйЛист)
	|			И (РасписаниеРаботыРабочихЦентров.ДатаИнтервала = ТаблицаКлючевыхВидовРЦ.ДатаИнтервала)
	|			И (РасписаниеРаботыРабочихЦентров.РабочийЦентр = ТаблицаКлючевыхВидовРЦ.РабочийЦентр)
	|ГДЕ
	|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ТаблицаКлючевыхВидовРЦ", ТаблицаКлючевыхВидовРЦ);
	Запрос.УстановитьПараметр("МаршрутныйЛист", ТекущийОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьРасписание = РегистрыСведений.РасписаниеРаботыРабочихЦентров.СоздатьМенеджерЗаписи();
		ЗаписьРасписание.МаршрутныйЛист = ТекущийОбъект.Ссылка;
		ЗаписьРасписание.ДатаИнтервала  = Выборка.ДатаИнтервала;
		
		Если ЗначениеЗаполнено(Выборка.РабочийЦентр) Тогда
			ЗаписьРасписание.РабочийЦентр             = Выборка.РабочийЦентр;
			ЗаписьРасписание.Количество               = ТекущийОбъект.Запланировано;
			ЗаписьРасписание.ВремяРаботы              = Выборка.ВремяРаботы;
			ЗаписьРасписание.ВремяРаботыВРабочееВремя = Выборка.ВремяРаботы;
			ЗаписьРасписание.Загрузка                 = Выборка.Загрузка;
												
			ЗаписьРасписание.Записать();
		Иначе
			ЗаписьРасписание.Удалить();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	#Область СтандартноеОформлениеНоменклатуры
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВыходныеИзделияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "МатериалыИУслугиХарактеристика",
																		     "Объект.МатериалыИУслуги.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения",
																   "Объект.ВыходныеИзделия.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения",
																   "Объект.ВозвратныеОтходы.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "МатериалыИУслугиНоменклатураЕдиницаИзмерения",
																   "Объект.МатериалыИУслуги.Упаковка");
																   
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары", "МатериалыИУслугиСерия", "Объект.МатериалыИУслуги.СтатусУказанияСерий", "Объект.МатериалыИУслуги.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь, "ВыходныеИзделияСерия", "Объект.ВыходныеИзделия.СтатусУказанияСерий", "Объект.ВыходныеИзделия.ТипНоменклатуры");
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь, "ВыходныеИзделияСтатусУказанияСерий", "Объект.ВыходныеИзделия.СтатусУказанияСерий");
	#КонецОбласти

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРабочийЦентр.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.РабочийЦентр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УправлениеМаршрутнымиЛистами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстСправочнойНадписи);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<определяется при формировании расписания>';
																|en = '<determined while generating a timetable>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРабочийЦентр.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.РабочийЦентр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииРабочийЦентр.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.РабочийЦентрЗаданВРасписании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстСправочнойНадписи);

	//

	// полуфабрикат в выходных изделиях выделяется коричневым
	#Область ВыделитьПолуфабрикатВТЧВыходныеИзделия
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатураТипНоменклатуры.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковокФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковокОтклонение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияОписаниеИзделия.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСклад.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияОперация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНомерОперации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	#КонецОбласти

	// полуфабрикат в возвратных отходах выделяется коричневым
	#Область ВыделитьПолуфабрикатВТЧВозвратныеОтходы
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатураТипНоменклатуры.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковокФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковокОтклонение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСтатьяКалькуляции.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОписаниеИзделия.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСклад.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОперация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНомерОперации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Статью калькуляции для полуфабрикатов заполнять не требуется

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСтатьяКалькуляции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	// полуфабрикат в материалах выделяется коричневым
	#Область ВыделитьПолуфабрикатВТЧМатериалыИУслуги
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатураТипНоменклатуры.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатураКод.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатураАртикул.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиЕстьИнформацияКМатериалу.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковокФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковокОтклонение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОперация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНомерОперации.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковокОтклонение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиПрименениеМатериала.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Статью калькуляции для полуфабрикатов заполнять не требуется

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	#КонецОбласти

	// некоторые данные полуфабриката в выходных изделиях менять нельзя
	#Область ЗапретИзмененияПолуфабрикатовВТЧВыходныеИзделия
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// некоторые данные полуфабриката в возвратных отходах менять нельзя
	#Область ЗапретИзмененияПолуфабрикатовВТЧВозвратныеОтходы
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// некоторые данные полуфабриката в материалах менять нельзя
	#Область ЗапретИзмененияПолуфабрикатовВТЧМатериалыИУслуги
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоИзделийСТипомСтоимостиРассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// доля стоимости не объязательна к заполнению для статуса "Создан"

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ОтметкаНезаполненного для статьи калькуляции в материалах
	// Статью не обязательно заполнять, если МЛ не выполнен или материал фактически не потребили.
	#Область МатериалыИУслугиСтатьяКалькуляции_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСтатьяКалькуляции.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КоличествоУпаковокФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти

	// ОтметкаНезаполненного в возвратных отходах для статьи калькуляции
	// Статью не обязательно заполнять, если МЛ не выполнен или возвратный отход фактически не выпустили.
	#Область ВозвратныеОтходыСтатьяКалькуляции_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСтатьяКалькуляции.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.КоличествоУпаковокФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// направление выпуска изделий для работ только в подразделение

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// направление выпуска отходов для работ только в подразделение

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// ОтметкаНезаполненного в возвратных отходах для статьи калькуляции и для бригады
	// Статью не обязательно заполнять, если МЛ не выполнен или возвратный отход фактически не выпустили.
	#Область Трудозатраты_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыСтатьяКалькуляции.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыИсполнитель.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.КоличествоФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти


	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеРасписания.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеРасписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано);
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.НеАктуально);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеРасписания.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеРасписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияРасписанияРабочихЦентров.Сформировано;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияОперация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНомерОперации.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОперация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНомерОперации.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОперация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНомерОперации.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыОперация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыНомерОперации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УправлениеМаршрутнымиЛистами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование);
	СписокЗначений.Добавить(Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииНачало.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииОкончание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеРасписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано);
	СписокЗначений.Добавить(Перечисления.СостоянияРасписанияРабочихЦентров.НеАктуально);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииСтатусВыполненияТекущий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.СтатусВыполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыВыполненияОпераций.НеЗапланировано;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыполненияРаботВПредварительномБуфере.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГотовоКРаботеКлючевогоРабочегоЦентра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФактическоеНачалоББВ.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФактическоеНачалоУББВ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НачатоВыполнениеМаршрутногоЛиста");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗавершенаРаботаКлючевогоРабочегоЦентра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыполненияРаботВЗавершающемБуфере.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФактическоеОкончание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗавершеноВыполнениеМаршрутногоЛиста");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииНачало.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииОкончание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.РасписаниеВведеноВручную");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыСодержаниеРабот.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УправлениеМаршрутнымиЛистами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование);
	СписокЗначений.Добавить(Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрыть колонки в созданном МЛ
	#Область СкрытьКолонкиВСозданномМЛ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковокФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковокОтклонение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковокФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковокОтклонение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковокФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковокОтклонение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиМатериалИзрасходован.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДатаРасхода.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличествоФакт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличествоОтклонение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОписаниеБрака.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Брак");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровББВВариантНаладки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровУББВВариантНаладки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровББВЗагрузка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ПараллельнаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФактическоеНачалоВыполненияОпераций.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыполненияОпераций.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Запрет изменения строки в которой материал обособлен
	#Область ЗапретИзмененияЕслиМатериалОбособлен
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Скрыть остатки материалов, если Мл выполнен или отменен
	#Область СкрытьОстатокВПодразделении
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДефицитМатериалов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиОстатокВПодразделении.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
	СписокОтбора.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен);
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// ТолькоПросмотр поля ДатаРасхода
	#Область ТолькоПросмотрДатаРасхода
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиМатериалИзрасходован.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДатаРасхода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КоличествоФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Отметка незаполненного поля ДатаРасхода
	#Область ОтметкаНезаполненногоДатаРасхода
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиДатаРасхода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.МатериалИзрасходован");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Варианты наладки в таблице операций не используются
	#Область ОперацииВариантыНаладкиНеИспользуются 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВариантНаладки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Запрет редактирования времени работы, если применяется синхронная загрузка
	#Область ОперацииНормыВремениПриСинхроннойЗагрузке
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВремяПЗ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВремяПЗЕдИзм.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// ОтметкаНезаполненного для поля Загрузка
	#Область ОперацииЗагрузка_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииЗагрузка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операции.ПараллельнаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Скрываем реквизиты операций, не используемые при управлении МЛ по методике "Пооперационное планирование".
	#Область ОперацииВидимость_Скрыть_ПооперационноеПланирование
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииПриоритет.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УправлениеМаршрутнымиЛистами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Скрываем реквизиты операций, не используемые при управлении МЛ по методике "Регистрация операций".
	#Область ОперацииВидимость_Скрыть_РегистрацияОпераций
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииНачало.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииОкончание.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииВспомогательныеРабочиеЦентры.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииНепрерывная.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.УправлениеМаршрутнымиЛистами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Снятие свойства ОтметкаНезаполненного в ТЧ ВыходныеИзделия для количества
	#Область ОтметкаНезаполненногоВыходныеИзделия
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковокФакт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.КоличествоУпаковокФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Снятие свойства ОтметкаНезаполненного в ТЧ ВозвратныеОтходы для количества
	#Область ОтметкаНезаполненногоВозвратныеОтходы
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковокФакт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.КоличествоУпаковокФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Снятие свойства ОтметкаНезаполненного в ТЧ МатериалыИУслуги для количества
	#Область ОтметкаНезаполненногоМатериалыИУслуги
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковокФакт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.КоличествоУпаковокФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти

	// Снятие свойства ОтметкаНезаполненного в ТЧ Трудозатраты для количества
	#Область ОтметкаНезаполненногоТрудозатраты
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличествоФакт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.КоличествоФакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Текст 'На склад' в поле ВыходныеИзделия.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	// Текст 'В подразделение' в поле ВыходныеИзделия.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To business unit'"));
	
	// Текст 'На склад'  в поле ВозвратныеОтходы.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	// Текст 'В подразделение'  в поле ВозвратныеОтходы.НаправлениеВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНаправлениеВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To business unit'"));
	
	// Отметка незаполненного у полей, зависимых от поля Произведено
	#Область ОтметкаНезаполненногоПоПроизведено
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияКоличествоУпаковокФакт.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыКоличествоУпаковокФакт.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиКоличествоУпаковокФакт.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеНеАктуально()

	Если СостояниеРасписания = ПредопределенноеЗначение("Перечисление.СостоянияРасписанияРабочихЦентров.Сформировано") Тогда
		СостояниеРасписания = ПредопределенноеЗначение("Перечисление.СостоянияРасписанияРабочихЦентров.НеАктуально");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьСтрокиДерева(ДеревоИлиСтрока, СписокСтрок)
	
	УдаляемыеСтроки = Новый Массив;
	
	ГруппаНачинаяОтКоторойУдалили = Неопределено;
	
	СписокЭлементов = ДеревоИлиСтрока.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из СписокЭлементов Цикл
		Если СписокСтрок.Найти(СтрокаДерева.ПолучитьИдентификатор()) <> Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаДерева);
			
			Если ГруппаНачинаяОтКоторойУдалили = Неопределено Тогда
				ГруппаНачинаяОтКоторойУдалили = ДеревоИлиСтрока;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого СтрокаДерева Из УдаляемыеСтроки Цикл
		СписокЭлементов.Удалить(СтрокаДерева);
	КонецЦикла; 

	Для каждого СтрокаДерева Из СписокЭлементов Цикл
		ПодчиненнаяГруппаНачинаяОтКоторойУдалили = УдалитьСтрокиДерева(СтрокаДерева, СписокСтрок);
		Если ГруппаНачинаяОтКоторойУдалили = Неопределено Тогда
			ГруппаНачинаяОтКоторойУдалили = ПодчиненнаяГруппаНачинаяОтКоторойУдалили;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ГруппаНачинаяОтКоторойУдалили; 
	
КонецФункции

&НаКлиенте
Функция ОперацияКлючевогоРабочегоЦентра(Корень)

	КоллекцияЭлементов = Корень.ПолучитьЭлементы();
	Для каждого СтрокаОперация Из КоллекцияЭлементов Цикл
		Если СтрокаОперация.ВидРабочегоЦентра = КлючевойВидРабочегоЦентра Тогда
			Возврат СтрокаОперация;
		КонецЕсли;
		
		Если СтрокаОперация.СодержитВложенныйМаршрут Тогда
			ОперацияКлючевогоРабочегоЦентра = ОперацияКлючевогоРабочегоЦентра(СтрокаОперация);
			Если ОперацияКлючевогоРабочегоЦентра <> Неопределено Тогда
				Возврат ОперацияКлючевогоРабочегоЦентра;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНеизрасходованныеМатериалы()

	ПоказатьНеизрасходованныеМатериалы = НЕ ПоказатьНеизрасходованныеМатериалы;
	
	Если ПоказатьОтличияОтНормативаМатериалыИУслуги Тогда
		ПоказатьОтличияОтНормативаМатериалыИУслуги = Ложь;
		ОбновитьОтметкуКомандыПоказатьОтличияОтНорматива();
	КонецЕсли;
	
	ОбновитьОтметкуКомандыПоказатьНеизрасходованныеМатериалы();
	
	Если ПоказатьНеизрасходованныеМатериалы Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("МатериалИзрасходован", Ложь);
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли; 
	
	Элементы.МатериалыИУслуги.ОтборСтрок = ОтборСтрок;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтличияОтНорматива()

	ПоказатьОтличияОтНормативаМатериалыИУслуги = НЕ ПоказатьОтличияОтНормативаМатериалыИУслуги;
	
	Если ПоказатьНеизрасходованныеМатериалы Тогда
		ПоказатьНеизрасходованныеМатериалы = Ложь;
		ОбновитьОтметкуКомандыПоказатьНеизрасходованныеМатериалы();
	КонецЕсли;
	
	ОбновитьОтметкуКомандыПоказатьОтличияОтНорматива();
	
	Если ПоказатьОтличияОтНормативаМатериалыИУслуги Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОтличияОтНорматива", Истина);
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли; 
	
	Элементы.МатериалыИУслуги.ОтборСтрок = ОтборСтрок;

КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьОтметкуКомандыПоказатьОтличияОтНорматива()

	Элементы.МатериалыИУслугиПоказатьОтличияОтНормативаМатериалыИУслуги.Пометка = ПоказатьОтличияОтНормативаМатериалыИУслуги;
	Элементы.МатериалыИУслугиКонтекстноеМенюПоказатьОтличияОтНормативаМатериалыИУслуги.Пометка = ПоказатьОтличияОтНормативаМатериалыИУслуги;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтметкуКомандыПоказатьНеизрасходованныеМатериалы()

	Элементы.МатериалыИУслугиПоказатьНеизрасходованныеМатериалы.Пометка = ПоказатьНеизрасходованныеМатериалы;
	Элементы.МатериалыИУслугиКонтекстноеМенюПоказатьНеизрасходованныеМатериалы.Пометка = ПоказатьНеизрасходованныеМатериалы;

КонецПроцедуры

&НаСервере
Функция НайтиОперациюПоКлючу(КлючСвязиОперация)

	СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязиОперация);
 	СписокСтрок = Объект.Операции.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		Возврат СписокСтрок[0];
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьПорядокОперацийПроверенПоСтатусу()

	ПорядокОперацийПроверен = (Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.КВыполнению
									ИЛИ Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется
									ИЛИ Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМаршрута()
	
	ОперативныйУчетПроизводстваКлиентСервер.ПриИзмененииМаршрута(
			Объект, 
			НачатоВыполнениеМаршрутногоЛиста,
			ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ФактическоеНачалоББВ = Объект.ФактическоеНачало;
	ФактическоеНачалоУББВ = Объект.ФактическоеНачало;
	
	ДоступностьЭлементовМаршрута(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьЭлементовМаршрута(Форма)

	Если Форма.Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
		// Ввод даты доступен когда установлен флажок
		Форма.Элементы.ФактическоеНачалоББВ.ТолькоПросмотр = НЕ Форма.НачатоВыполнениеМаршрутногоЛиста;
		Форма.Элементы.ДатаВыполненияРаботВПредварительномБуфере.ТолькоПросмотр = НЕ Форма.Объект.ГотовоКРаботеКлючевогоРабочегоЦентра;
		Форма.Элементы.ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра.ТолькоПросмотр = НЕ Форма.Объект.ЗавершенаРаботаКлючевогоРабочегоЦентра;
		Форма.Элементы.ДатаВыполненияРаботВЗавершающемБуфере.ТолькоПросмотр = НЕ Форма.Объект.ЗавершеноВыполнениеМаршрутногоЛиста;
	Иначе
		// Ввод даты доступен когда установлен флажок
		Форма.Элементы.ФактическоеНачалоУББВ.ТолькоПросмотр = НЕ Форма.НачатоВыполнениеМаршрутногоЛиста;
		Форма.Элементы.ФактическоеОкончание.ТолькоПросмотр = НЕ Форма.Объект.ЗавершеноВыполнениеМаршрутногоЛиста;
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ИнициализироватьМаршрутПриЧтении()

	Если НЕ ИспользуетсяМаршрут Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен") Тогда
		
		НачатоВыполнениеМаршрутногоЛиста = Истина;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется") Тогда
		
		НачатоВыполнениеМаршрутногоЛиста = Истина;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан") Тогда
		
		НачатоВыполнениеМаршрутногоЛиста = Ложь;
		
	КонецЕсли;

	ДоступностьЭлементовМаршрута(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковки(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "Факт"));
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
													
	ОперативныйУчетПроизводстваКлиентСервер.ПроверитьОтклонение(СтрокаТабличнойЧасти);
	
	Если ИмяТабличнойЧасти = "МатериалыИУслуги" Тогда
		ЗаполнитьОстаткиМатериаловВПодразделении(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииНорматива(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	ЕстьУпаковки = (ИмяТабличнойЧасти = "ВыходныеИзделия" 
					ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" 
					ИЛИ ИмяТабличнойЧасти = "МатериалыИУслуги");
					
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", ЕстьУпаковки);
	Если ЕстьУпаковки Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти));
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	// В статусе Создан факт всегда равен нормативу
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан")
		И (ИмяТабличнойЧасти = "МатериалыИУслуги" ИЛИ ИмяТабличнойЧасти = "Трудозатраты") Тогда
		
		СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.КоличествоОтклонение = 0;
		Если ЕстьУпаковки Тогда
			СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковок;
			СтрокаТабличнойЧасти.КоличествоУпаковокОтклонение = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииФакта(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииФакта(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтклонения(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)

	ЕстьУпаковки = (ИмяТабличнойЧасти = "ВыходныеИзделия" 
					ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" 
					ИЛИ ИмяТабличнойЧасти = "МатериалыИУслуги");
	
	Если ЕстьУпаковки Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "Отклонение"));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
 	КонецЕсли; 

	Если ЕстьУпаковки Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковокФакт = СтрокаТабличнойЧасти.КоличествоУпаковок
														+ СтрокаТабличнойЧасти.КоличествоУпаковокОтклонение;

 	КонецЕсли; 

 	СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.Количество
											+ СтрокаТабличнойЧасти.КоличествоОтклонение;

	
КонецПроцедуры

&НаСервере
Процедура ЗапланированоПриИзмененииНаСервере()

	КоэффициентПересчетаНормативов = Объект.Запланировано / ЗапланированоДоРедактирования;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ПересчитатьФакт(ЗапланированоДоРедактирования, 2);
	ДокументОбъект.ПересчитатьНормативы(КоэффициентПересчетаНормативов);
	ДокументОбъект.ПересчитатьОтклонениеОтНормативов();
	ДокументОбъект.ЗаполнитьЗанятостьВидовРЦПоЗаказу();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьВидыРабочихЦентров();
	ЗаполнитьСлужебныеРеквизиты();
	
	ЗапланированоДоРедактирования = Объект.Запланировано;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПорядокВыполненияОперацийЗадаетсяПорядкомСтрок(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно = Ложь;
	УстановитьПараметрыФормыДляНастройкиПорядкаОпераций(ЭтаФорма);
	
	ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок();
	
	ОбновитьСведенияОбОперацииВТабличныхЧастях(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПорядокОперацийПоследовательно(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок();
		ОбновитьСведенияОбОперацииВТабличныхЧастях(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикМаршрутнаяКартаПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДобавитьДанныеМаршрутнойКарты();
		УстановитьРасписаниеНеАктуально();
	Иначе
		ЗаполнитьБуферыПриИзмененииМаршрутнойКарты();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСхемуОпераций()
	
	Если НЕ Объект.ПорядокВыполненияОперацийЗадаетсяПроизвольно Тогда
		ЗаполнитьПорядокВыполненияОперацийПоПорядкуСтрок();
	КонецЕсли; 
	
	Если НЕ ПорядокОперацийПроверен И НЕ ПроверитьПорядокОперацийВызовСервера() Тогда
		Возврат;
	КонецЕсли; 
	
	СхемаОпераций = СформироватьСхемуОпераций();
	
	ЗаголовокСхемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Схема операций маршрутного листа № %1';
									|en = 'Chart of operations of route sheet No. %1'"), 
								ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Ложь, Истина));
	СхемаОпераций.Показать(ЗаголовокСхемы);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСхемуОпераций()

	Этапы = Новый ТаблицаЗначений();
	Этапы.Колонки.Добавить("Этап");
	Этапы.Колонки.Добавить("Счетчик");
	Этапы.Колонки.Добавить("Родитель");
	Этапы.Колонки.Добавить("ПорядковыйНомер");
	Этапы.Колонки.Добавить("НомерОперации");
	Этапы.Колонки.Добавить("ДлительностьДней");
	Этапы.Колонки.Добавить("ЭтапыПредшественники");
	Этапы.Колонки.Добавить("Текст1");
	Этапы.Колонки.Добавить("Текст2");
	Этапы.Колонки.Добавить("ПредставлениеЭтапа");
	Этапы.Колонки.Добавить("Расшифровка");
	УниверсальнаяОбработкаПроцессов.ДобавитьОбязательныеКолонкиВЭтапыПроцесса(Этапы);
	
	ОтборПредшественники = Новый Структура;
	
	Для каждого СтрокаОперация Из Объект.Операции Цикл
		
		НоваяСтрока = Этапы.Добавить();
		НоваяСтрока.Этап             = СтрокаОперация.ПолучитьИдентификатор();
		НоваяСтрока.Счетчик          = 1;
		НоваяСтрока.Родитель         = Неопределено;
		НоваяСтрока.ПорядковыйНомер  = СтрокаОперация.НомерОперации;
		НоваяСтрока.НомерОперации    = СтрокаОперация.НомерОперации;
		НоваяСтрока.ДлительностьДней = 0;
		
		// Добавим описание
		ПредставлениеЭтапа = Строка(СтрокаОперация.Операция);
		
		НоваяСтрока.ПредставлениеЭтапа = ПредставлениеЭтапа;
		НоваяСтрока.Текст1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Номер: %1';
											|en = 'Number: %1'"),
										Формат(СтрокаОперация.НомерОперации, "ЧГ="));
		
		НоваяСтрока.Расшифровка = СтрокаОперация.Операция;
		
		Если СтрокаОперация.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Завершено Тогда
			НоваяСтрока.ПараметрыВывода.Вставить("ЦветФонаЭтапа", ЦветаСтиля.ЦветФонаЗавершеннойОперации);
		КонецЕсли; 
		
		// Получим предшествующие операции
		НоваяСтрока.ЭтапыПредшественники = Новый ТаблицаЗначений;
		НоваяСтрока.ЭтапыПредшественники.Колонки.Добавить("ЭтапПроцесса", Новый ОписаниеТипов("Число"));
		НоваяСтрока.ЭтапыПредшественники.Колонки.Добавить("Группа", Новый ОписаниеТипов("Число"));
		
		Для каждого ЭлементКоллекции Из Объект.Операции Цикл
			Если ЭлементКоллекции.НомерСледующейОперации = СтрокаОперация.НомерОперации Тогда
				НоваяСтрока.ЭтапыПредшественники.Добавить().ЭтапПроцесса = ЭлементКоллекции.ПолучитьИдентификатор();
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	ПараметрыВывода = УниверсальнаяОбработкаПроцессов.НовыеПараметрыВывода();
	ПараметрыВывода.ТекущийЭтап = Неопределено;
	
	ГрафическоеПредставление = УниверсальнаяОбработкаПроцессов.СформироватьГрафическоеПредставлениеПроцесса(Этапы, ПараметрыВывода);
	СхемаОпераций = ГрафическоеПредставление.ТабличныйДокумент;
	СхемаОпераций.ТолькоПросмотр      = Истина;
	СхемаОпераций.ОтображатьСетку     = Ложь;
	СхемаОпераций.ОтображатьЗаголовки = Ложь;

	Возврат СхемаОпераций;
	
КонецФункции

&НаСервере
Процедура СтатусПриИзмененииНаСервере(ЗаполнитьПроизведено = Истина)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПриИзмененииСтатуса(СтатусДоРедактирования,, ЗаполнитьПроизведено);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.МаршрутныйЛистПроизводства.ПараметрыУказанияСерий(Объект));
	
	ФактическоеНачалоББВ = Объект.ФактическоеНачало;
	ФактическоеНачалоУББВ = Объект.ФактическоеНачало;
	
	ПроизведеноДоРедактирования = Объект.Произведено;
	БракДоРедактирования = Объект.Брак;
	СтатусДоРедактирования	= Объект.Статус;
	
	ЗаполнитьСлужебныеРеквизиты();
	ИнициализироватьМаршрутПриЧтении();
	
	УправлениеДоступностьюПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачество(ДанныеСтроки)
	
	ОчиститьСообщения();
	
	Если ДанныеСтроки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите строку табличной части';
								|en = 'Select a table row'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ДанныеСтроки.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",       Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",               Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеСтроки.Упаковка);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ДанныеСтроки.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ДанныеСтроки.Упаковка);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьКачествоЗавершение", ЭтотОбъект);
	СкладыКлиент.ИзменитьКачество(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	
	Если Объект.ВидыРабочихЦентров.Количество() = 0 Тогда
		Элементы.ВидыРабочихЦентровУББВ.Видимость = Ложь;
		Элементы.НачалоРаботыРабочихЦентровУББВ.Видимость = Ложь;
		Элементы.ОкончаниеРаботыРабочихЦентровУББВ.Видимость = Ложь;
	КонецЕсли;
	
	МетодикаРегистрацияОпераций =
		(Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций);
	МетодикаПооперационноеПланирование =
		(Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование);
	
	Элементы.Приоритет.Видимость = МетодикаРегистрацияОпераций;
	Элементы.СостояниеРасписания.Видимость = МетодикаПооперационноеПланирование;
	
	Элементы.ВыполнениеНачалосьПланирование.Видимость = МетодикаПооперационноеПланирование;
	Элементы.ВыполнениеЗавершеноПланирование.Видимость = МетодикаПооперационноеПланирование;
	Элементы.ВыполнениеНеНачалосьПланирование.Видимость = МетодикаПооперационноеПланирование;
	
	Элементы.ВыполнениеНачалосьРегистрация.Видимость = МетодикаРегистрацияОпераций;
	Элементы.ВыполнениеЗавершеноРегистрация.Видимость = МетодикаРегистрацияОпераций;
	Элементы.ВыполнениеНеНачалосьРегистрация.Видимость = МетодикаРегистрацияОпераций;
	
	Элементы.МатериалыИУслугиУстановитьОтборПоОперации.Видимость = МетодикаРегистрацияОпераций
		ИЛИ МетодикаПооперационноеПланирование;
	Элементы.МатериалыИУслугиОтменитьОтборПоОперации.Видимость = МетодикаРегистрацияОпераций
		ИЛИ МетодикаПооперационноеПланирование;
	Элементы.ТрудозатратыУстановитьОтборПоОперации.Видимость = МетодикаРегистрацияОпераций
		ИЛИ МетодикаПооперационноеПланирование;
	Элементы.ТрудозатратыОтменитьОтборПоОперации.Видимость = МетодикаРегистрацияОпераций
		ИЛИ МетодикаПооперационноеПланирование;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюПоСтатусу()

	ДоступенВводФакта = (Объект.Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан);
	
	Элементы.ВыходныеИзделияРазбитьСтрокуИзделий.Доступность = ДоступенВводФакта;
	Элементы.ВозвратныеОтходыРазбитьСтрокуОтхода.Доступность = ДоступенВводФакта;
	Элементы.МатериалыИУслугиОтметитьРасходМатериалов.Доступность = ДоступенВводФакта;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезультатВыполненияМаршрутногоЛиста()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Запланировано", Объект.Запланировано);
	ПараметрыФормы.Вставить("Произведено", Объект.Произведено);
	ПараметрыФормы.Вставить("Брак", Объект.Брак);
	ПараметрыФормы.Вставить("ОписаниеБрака", Объект.ОписаниеБрака);
	ПараметрыФормы.Вставить("ПроизведеноДоРедактирования", ПроизведеноДоРедактирования);
	ПараметрыФормы.Вставить("БракДоРедактирования", БракДоРедактирования);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРезультатВыполненияМаршрутногоЛистаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.РезультатВыполненияМаршрутногоЛиста", ПараметрыФормы,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезультатВыполненияМаршрутногоЛистаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Объект.Произведено = ПроизведеноДоРедактирования;
		Объект.Брак = БракДоРедактирования;
		Возврат;
	КонецЕсли;
	
	Объект.Произведено = РезультатЗакрытия.Произведено;
	Объект.Брак = РезультатЗакрытия.Брак;
	Объект.ОписаниеБрака = РезультатЗакрытия.ОписаниеБрака;
	
	ИзменитьРезультатВыполненияМаршрутногоЛистаНаСервере(РезультатЗакрытия.ПересчетФакта);
	
	ПроизведеноДоРедактирования = Объект.Произведено;
	БракДоРедактирования = Объект.Брак;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРезультатВыполненияМаршрутногоЛистаНаСервере(ВариантПересчетаФакта)

	Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;
	
	Если ПроизведеноДоРедактирования <> 0 Тогда
		КоэффициентПересчетаНормативов = Объект.Произведено / ПроизведеноДоРедактирования;
		ИсходныйНорматив = ПроизведеноДоРедактирования;
	Иначе
		КоэффициентПересчетаНормативов = Объект.Произведено / Объект.Запланировано;
		ИсходныйНорматив = Объект.Запланировано;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Сначала пересчет факта, т.к. он расчитывается от норматива
	ДокументОбъект.ПересчитатьФакт(ИсходныйНорматив, ВариантПересчетаФакта);
	ДокументОбъект.ПересчитатьНормативы(КоэффициентПересчетаНормативов, Ложь);
	ДокументОбъект.ПересчитатьОтклонениеОтНормативов();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьСлужебныеРеквизиты();
	
	ОпределитьНеобходимостьОформитьДопроизводство();
	
	СтатусПриИзмененииНаСервере(Ложь);
	
	Элементы.ОписаниеБрака.ТолькоПросмотр = (Объект.Брак = 0);
	
КонецПроцедуры 

&НаСервере
Процедура ОпределитьНеобходимостьОформитьДопроизводство()

	ОсталосьДопроизвести = 0;
	
	НеобходимоЗапланироватьДопроизводство = Ложь;
	
	Допроизвести = Объект.Запланировано - Объект.Произведено - Объект.Брак;
	Если Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		И Допроизвести > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот 
		|		- ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот
		|		- ЭтапыПроизводстваОбороты.КВыполнениюОборот
		|		- ЭтапыПроизводстваОбороты.ВыполненоОборот
		|		- ЭтапыПроизводстваОбороты.БракОборот 
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.ЗапланированоПроизводством, 0)
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.КВыполнению, 0) 
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.Выполнено, 0) 
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.Брак, 0)
		|		- &ЗапланированоПроизводством КАК ОсталосьЗапланировать
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства.Обороты(
		|			,
		|			,
		|			,
		|			Распоряжение = &Распоряжение
		|				И КодСтрокиПродукция = &КодСтрокиПродукция
		|				И КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
		|				И Этап = &Этап
		|				И Подразделение = &Подразделение) КАК ЭтапыПроизводстваОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводстваТекущий
		|		ПО (ЭтапыПроизводстваТекущий.Регистратор = &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
		|		ПО (МаршрутныйЛистПроизводства.ДопроизводствоМаршрутногоЛиста = &Ссылка)
		|			И (МаршрутныйЛистПроизводства.Проведен)
		|ГДЕ 
		|	МаршрутныйЛистПроизводства.Ссылка ЕСТЬ NULL
		|	И (ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот 
		|		- ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот
		|		- ЭтапыПроизводстваОбороты.КВыполнениюОборот
		|		- ЭтапыПроизводстваОбороты.ВыполненоОборот
		|		- ЭтапыПроизводстваОбороты.БракОборот 
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.ЗапланированоПроизводством, 0)
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.КВыполнению, 0) 
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.Выполнено, 0) 
		|		+ ЕСТЬNULL(ЭтапыПроизводстваТекущий.Брак, 0)
		|		- &ЗапланированоПроизводством) > 0";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
		Запрос.УстановитьПараметр("КодСтрокиПродукция", Объект.КодСтроки);
		Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", Объект.КодСтрокиЭтапыГрафик);
		Запрос.УстановитьПараметр("Этап", Объект.Этап);
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
		Запрос.УстановитьПараметр("ЗапланированоПроизводством", Объект.Произведено + Объект.Брак);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			НеобходимоЗапланироватьДопроизводство = Истина;
			ОсталосьДопроизвести = Мин(Выборка.ОсталосьЗапланировать, Допроизвести);
			ЗаголовокКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Сформировать новый маршрутный лист чтобы допроизвести %1 ед/партий изделий';
										|en = 'Generate a new route sheet to  manufacture %1 additional product units/batches'"),
									ОсталосьДопроизвести);
									
			Элементы.ЗапланироватьДопроизводство.Заголовок = ЗаголовокКоманды;
		КонецЕсли;
	КонецЕсли; 
	
	Элементы.ЗапланироватьДопроизводство.Видимость = НеобходимоЗапланироватьДопроизводство;

КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьДопроизводство(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		// Отказались от записи
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Распоряжение", Объект.Распоряжение);
	ДанныеЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ДанныеЗаполнения.Вставить("УправлениеМаршрутнымиЛистами", Объект.УправлениеМаршрутнымиЛистами);
	ДанныеЗаполнения.Вставить("КодСтроки", Объект.КодСтроки);
	ДанныеЗаполнения.Вставить("КодСтрокиЭтапыГрафик", Объект.КодСтрокиЭтапыГрафик);
	ДанныеЗаполнения.Вставить("Этап", Объект.Этап);
	ДанныеЗаполнения.Вставить("Начало", Объект.Начало);
	ДанныеЗаполнения.Вставить("Окончание", Объект.Окончание);
	ДанныеЗаполнения.Вставить("НачалоРаботыКлючевогоРабочегоЦентра", Объект.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику);
	ДанныеЗаполнения.Вставить("ОкончаниеРаботыКлючевогоРабочегоЦентра", Объект.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику);
	ДанныеЗаполнения.Вставить("Запланировано", ОсталосьДопроизвести);
	ДанныеЗаполнения.Вставить("ДопроизводствоМаршрутногоЛиста", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ДатаИнтервалаНачало", НачалоРаботыКлючевогоРабочегоЦентра);
	ПараметрыФормы.Вставить("МаршрутныйЛист", Объект.Ссылка);
	ОткрытьФорму("Обработка.ФормированиеРасписанияРабочихЦентров.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектИПродолжитьВыполнение(ВыполняемоеОповещение, ТекстВопроса, НедопускаетсяМодифицированность = Ложь)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать и продолжить';
															|en = 'Save and continue'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьОбъектИПродолжитьВыполнениеЗавершение", ЭтотОбъект, ВыполняемоеОповещение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектИПродолжитьВыполнениеЗавершение(РезультатВопроса, ВыполняемоеОповещение) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиПослеУдаленияНаСервере(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения)

	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения, "МатериалыИУслуги");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия)

	Если ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство" Тогда
		ОпределитьНеобходимостьОформитьДопроизводство();
	КонецЕсли; 
	
	Если ИмяСобытия = "Запись_МаршрутныйЛистПроизводства" 
		ИЛИ ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство" 
		ИЛИ ИмяСобытия = "Запись_ВозвратМатериаловИзПроизводства" Тогда
		
		ЗаполнитьОстаткиМатериаловВПодразделении();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуРасходаМатериала(ТекущиеДанные)

	Если ТекущиеДанные.КоличествоФакт = 0 И ТекущиеДанные.ДатаРасхода <> '000101010000' Тогда
		ТекущиеДанные.ДатаРасхода = '000101010000';
		ТекущиеДанные.МатериалИзрасходован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыходныеИзделияПослеУдаленияНаСервере(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения)

	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения, "ВыходныеИзделия");
	КонецЕсли;
	
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииФакта(ТекущаяСтрока, ИмяТабличнойЧасти, СтруктураДействий)

	ЕстьУпаковки = (ИмяТабличнойЧасти = "ВыходныеИзделия" 
					ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" 
					ИЛИ ИмяТабличнойЧасти = "МатериалыИУслуги");
	
	Если ЕстьУпаковки Тогда
		ПараметрыПересчетаКоличестваЕдиниц = ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, ТекущаяСтрока, "Факт");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", ПараметрыПересчетаКоличестваЕдиниц);
	КонецЕсли; 
	СтруктураДействий.Вставить("ПересчитатьКоличествоОтклонение", ЕстьУпаковки);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусВыполненияОперацииПоДаннымРасписания(ОперацияКлючСвязи, ОтметкаНаДату)
	
	ДокОперации = Новый Массив;
	ДокОперации.Добавить(ОперацияКлючСвязи);
	
	ТекущиеСтатусы = РегистрыСведений.ПооперационноеРасписание.СтатусыВыполненияОпераций(
		ДокОперации, ОтметкаНаДату);
	
	Если ЗначениеЗаполнено(ТекущиеСтатусы) Тогда
		Возврат ТекущиеСтатусы[0].СтатусВыполнения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОперацииВидРабочегоЦентраПриИзмененииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ОперацииВариантНаладкиПриИзмененииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеОпераций()
	
	ТекущаяСтрока = Элементы.Операции.ТекущаяСтрока;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ТекущиеДанные = Объект.Операции.НайтиПоИдентификатору(ТекущаяСтрока);
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			РедакторПроизводственногоПроцесса.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				Неопределено, Неопределено, Истина, ТекущиеДанные);
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ВремяРаботы) Тогда
				
				ТекущиеДанные.ВремяВыполнения = ТекущиеДанные.ВремяРаботы;
				ТекущиеДанные.ВремяВыполненияЕдИзм = ТекущиеДанные.ЕдиницаИзмерения;
				
				ТекущиеДанные.ВремяШтучное = ТекущиеДанные.ВремяРаботы;
				ТекущиеДанные.ВремяШтучноеЕдИзм = ТекущиеДанные.ЕдиницаИзмерения;
				
				ТекущиеДанные.ВремяПЗ = 0;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОперацииЗаполнитьСлужебныеРеквизитыВидовРЦ()
	
	ВидыРЦ = Новый Массив;
	ВариантыНаладки = Новый Массив;
	
	Для каждого Строка Из Объект.Операции Цикл
		Если ЗначениеЗаполнено(Строка.ВидРабочегоЦентра) Тогда
			ВидыРЦ.Добавить(Строка.ВидРабочегоЦентра);
			Если ЗначениеЗаполнено(Строка.ВариантНаладки) Тогда
				ВариантыНаладки.Добавить(Строка.ВариантНаладки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВидыРЦ) Тогда
		
		ЗначенияРеквизитовВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ВидыРЦ, "ИспользуютсяВариантыНаладки, ПараллельнаяЗагрузка, ВариантЗагрузки, ВремяРаботы, ЕдиницаИзмерения");
		
		Если ЗначениеЗаполнено(ВариантыНаладки) Тогда
			ЗначенияРеквизитовВариантовНаладки = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				ВариантыНаладки, "ВремяРаботы, ЕдиницаИзмерения");
		Иначе
			ЗначенияРеквизитовВариантовНаладки = Новый Соответствие;
		КонецЕсли;
		
		Для каждого Строка Из Объект.Операции Цикл
			Если ЗначениеЗаполнено(Строка.ВидРабочегоЦентра) Тогда
				
				РеквизитыВидаРЦ = ЗначенияРеквизитовВидовРЦ.Получить(Строка.ВидРабочегоЦентра);
				РеквизитыВариантаНаладки = ЗначенияРеквизитовВариантовНаладки.Получить(Строка.ВариантНаладки);
				
				РедакторПроизводственногоПроцесса.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
					РеквизитыВидаРЦ, РеквизитыВариантаНаладки, Ложь, Строка);
					
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОперацииЗаполнитьСтатусВыполненияТекущий()
	
	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		
		ДокОперации = Объект.Операции.Выгрузить(, "КлючСвязи").ВыгрузитьКолонку("КлючСвязи");
		ТекущиеСтатусы = РегистрыСведений.ПооперационноеРасписание.СтатусыВыполненияОпераций(
			ДокОперации, ВыполнениеОперацийНаДату);
	
		Для каждого Строка Из Объект.Операции Цикл
			СтрокаПоиск = ТекущиеСтатусы.Найти(Строка.КлючСвязи, "Операция");
			Если НЕ СтрокаПоиск = Неопределено Тогда
				Строка.СтатусВыполненияТекущий = СтрокаПоиск.СтатусВыполнения;
			Иначе
				Строка.СтатусВыполненияТекущий = Перечисления.СтатусыВыполненияОпераций.НеНачато;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		
		Для каждого Строка Из Объект.Операции Цикл
			Строка.СтатусВыполненияТекущий = Строка.СтатусВыполнения;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОперацииЗаполнитьВспомогательныеРабочиеЦентры()
	
	СтруктураПоиска = Новый Структура("КлючСвязиОперации");
	
	Для каждого Строка Из Объект.Операции Цикл
		
		СтруктураПоиска.КлючСвязиОперации = Строка.КлючСвязи;
		СписокСтрок = Объект.ВспомогательныеРабочиеЦентры.НайтиСтроки(СтруктураПоиска);
		
		Если ЗначениеЗаполнено(СписокСтрок) Тогда
			
			СписокРЦ = Новый СписокЗначений;
			Для каждого СтрокаСписка Из СписокСтрок Цикл
				СписокРЦ.Добавить(СтрокаСписка.РабочийЦентр);
			КонецЦикла;
			
			Строка.ВспомогательныеРабочиеЦентры = СписокРЦ;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВспомогательныеРабочиеЦентрыВыборЗавершение(РезультатЗакрытия, ИдентификаторТекущейСтроки)Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.Операции.ДанныеСтроки(ИдентификаторТекущейСтроки);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекущаяСтрока.ВспомогательныеРабочиеЦентры = РезультатЗакрытия;
			ЗагрузитьВспомогательныеРабочиеЦентрыОперацииНаСервере(ТекущаяСтрока.КлючСвязи, РезультатЗакрытия);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		УстановитьРасписаниеНеАктуально();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВспомогательныеРабочиеЦентрыОперацииНаСервере(КлючСвязиОперации, ОбслуживающиеРЦ)
	
	СтруктураПоиска = Новый Структура("КлючСвязиОперации", КлючСвязиОперации);
	СписокСтрок = Объект.ВспомогательныеРабочиеЦентры.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из СписокСтрок Цикл
		Объект.ВспомогательныеРабочиеЦентры.Удалить(Строка);
	КонецЦикла;
	
	Для каждого Элемент Из ОбслуживающиеРЦ Цикл
		НоваяСтрока = Объект.ВспомогательныеРабочиеЦентры.Добавить();
		НоваяСтрока.КлючСвязиОперации = КлючСвязиОперации;
		НоваяСтрока.РабочийЦентр = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначениеВыходногоИзделия(ТекущиеДанные, ЭтоВозвратныеОтходы = Ложь)

	Если ПроизводствоПодЗаказДавальца Тогда
		
		ТекущиеДанные.Назначение = Объект.Назначение;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Назначение)
		И ТекущиеДанные.Номенклатура = Объект.Номенклатура 
		И ТекущиеДанные.Характеристика = Объект.Характеристика 
		И НЕ ЭтоВозвратныеОтходы Тогда
		
		ТекущиеДанные.Назначение = Объект.Назначение;
		
	Иначе
		
		ТекущиеДанные.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Строка Из Объект.Операции Цикл
			Строка.Приоритет = Объект.Приоритет;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОперациюДляУстановкиОтбора(ИмяТабличнойЧасти)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Операции",  Объект.Операции);
	ПараметрыФормы.Вставить("КлючСвязи", КлючСвязиОперацииОтбор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьОтборПоОперацииВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.Форма.ВыборОпераций", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОперацииВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		УстановитьОтборПоОперации(ДополнительныеПараметры.ИмяТабличнойЧасти, Результат.КлючСвязи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОперации(ИмяТабличнойЧасти, КлючСвязиОперации);
	
	ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязиОперации", КлючСвязиОперации);
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = ОтборСтрок;
	Элементы[ИмяТабличнойЧасти + "ОтменитьОтборПоОперации"].Доступность = Истина;
	
	КлючСвязиОперацииОтбор = КлючСвязиОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтборПоОперации(ИмяТабличнойЧасти)
	
	Элементы[ИмяТабличнойЧасти].ОтборСтрок = Неопределено;
	Элементы[ИмяТабличнойЧасти + "ОтменитьОтборПоОперации"].Доступность = Ложь;
	
	КлючСвязиОперацииОтбор = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУдаленияОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подтверждение получено
	Для каждого СтрокаОперация Из ДополнительныеПараметры.УдаляемыеОперации Цикл
		СтруктураПоиска = Новый Структура("НомерСледующейОперации", СтрокаОперация.НомерОперации);
  		СписокСтрок = Объект.Операции.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаПредыдущаяОперация Из СписокСтрок Цикл
			СтрокаПредыдущаяОперация.НомерСледующейОперации = СтрокаОперация.НомерСледующейОперации;
		КонецЦикла; 
		Объект.Операции.Удалить(СтрокаОперация);
	КонецЦикла; 
	
	// Обновим связанные данные
	ОбновитьДанныеПриУдаленииОпераций(ДополнительныеПараметры.ВыходныеИзделияСтроки,  
										РезультатЗакрытия.УдалитьСвязанныеДанные, 
										Объект.ВыходныеИзделия);
										
	ОбновитьДанныеПриУдаленииОпераций(ДополнительныеПараметры.МатериалыИУслугиСтроки, 
										РезультатЗакрытия.УдалитьСвязанныеДанные, 
										Объект.МатериалыИУслуги);
										
	ОбновитьДанныеПриУдаленииОпераций(ДополнительныеПараметры.ТрудозатратыСтроки,
										РезультатЗакрытия.УдалитьСвязанныеДанные,
										Объект.Трудозатраты);
										
	ОбновитьДанныеПриУдаленииОпераций(ДополнительныеПараметры.ВспомогательныеРЦСтроки,
										Истина,
										Объект.ВспомогательныеРабочиеЦентры);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, ТекущаяСтрока, Суффикс = Неопределено)

	НужноОкруглятьКоличество = Истина;
	
	Если ИмяТабличнойЧасти = "ВыходныеИзделия" ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		Если ТипЗнч(ТекущаяСтрока.Получатель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			НужноОкруглятьКоличество = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяТабличнойЧасти = "МатериалыИУслуги" Тогда
		НужноОкруглятьКоличество = Ложь;
	КонецЕсли; 
	
	Если НЕ НужноОкруглятьКоличество Тогда
		ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
		Если Суффикс <> Неопределено Тогда
			ПараметрыПересчета.Вставить("Суффикс", Суффикс);
		КонецЕсли; 
		Возврат ПараметрыПересчета;
	КонецЕсли; 
	
	Возврат ?(Суффикс <> Неопределено, Суффикс, Неопределено);
	
КонецФункции

#КонецОбласти

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииФакта(ПараметрыФормыУказанияСерий, "ВыходныеИзделия", СтруктураДействий);
	Иначе
		СтруктураДействий = Неопределено;
	КонецЕсли; 
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийНаСервере()

	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущаяСтрока;
	ТекущиеДанные = Объект.МатериалыИУслуги.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные.КоличествоФакт = 0 Тогда
		ТекущиеДанные.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	СтрокиДляОбработки.Добавить(ТекущиеДанные);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.МатериалыИУслуги, СтрокиДляОбработки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения, ИмяТЧ)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
		ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ], ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий[ИмяТЧ], Текст, ТекущиеДанные) Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ПараметрыУказанияСерий, ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВремяШтучноеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;

	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации21(
		ТекущиеДанные, Объект.Запланировано);
	
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВремяШтучноеЕдИзмПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации21(
		ТекущиеДанные, Объект.Запланировано);
	
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВремяПЗПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации21(
		ТекущиеДанные, Объект.Запланировано);
	
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВремяПЗЕдИзмПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации21(
		ТекущиеДанные, Объект.Запланировано);
	
	УстановитьРасписаниеНеАктуально();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеСтатусыДокумента()
	
	ДоступныеСтатусы = Новый Массив;
	ДоступныеСтатусы.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан);
	ДоступныеСтатусы.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.КВыполнению);
	Если Объект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		ДоступныеСтатусы.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется);
	КонецЕсли;
	ДоступныеСтатусы.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
	
	Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(ДоступныеСтатусы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.МатериалыИУслуги) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект, ПараметрыУказанияСерий.МатериалыИУслуги);	
		ЗаполнитьСлужебныеРеквизиты();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.МатериалыИУслуги);

КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.МатериалыИУслугиСерия.Видимость = ПараметрыУказанияСерий.МатериалыИУслуги.ИспользоватьСерииНоменклатуры;
	Элементы.МатериалыИУслугиЗаполнитьСерииПоFEFO.Видимость = ПараметрыУказанияСерий.МатериалыИУслуги.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры
//Конец ИнтеграцияГИСМ

#КонецОбласти

#Область Прочее

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров';
							|en = 'Register goods marking'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана';
							|en = 'Goods marking is not created'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.Основание = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1';
										|en = 'Goods marking: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ГиперссылкаЦвет,
		,
		ИмяКоманды);
	
КонецПроцедуры 
// Конец ИнтеграцияГИСМ

#КонецОбласти

#КонецОбласти
//-- Устарело_Производство21
