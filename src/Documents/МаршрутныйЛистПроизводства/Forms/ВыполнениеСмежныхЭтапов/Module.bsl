//++ Устарело_Производство21
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.МаршрутныйЛист, "Номер,Дата");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Выполнение смежных этапов маршрутного листа №%1 от %2';
							|en = 'Execution of adjacent stages of route sheet No.%1 from %2'"),
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Ложь, Истина),
						Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьПредыдущиеЭтапы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_МаршрутныйЛистПроизводства" Тогда
		ОбновитьДанные();
		РазвернутьПредыдущиеЭтапы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредыдущиеЭтапы

&НаКлиенте
Процедура ПредыдущиеЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПредыдущиеЭтапы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСтроки = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДанные()

	КоллекцияЭлементов = ПредыдущиеЭтапы.ПолучитьЭлементы();
	КоллекцияЭлементов.Очистить();
	СледующиеЭтапы.Очистить();
	
	ВыполнениеСмежныхЭтапов = Документы.МаршрутныйЛистПроизводства.ВыполнениеСмежныхЭтапов(Параметры.МаршрутныйЛист);
	
	МаршрутныеЛистыЭтапов = МаршрутныеЛистыЭтапов(ВыполнениеСмежныхЭтапов);
	
	ПредыдущиеЭтапыДерево = РеквизитФормыВЗначение("ПредыдущиеЭтапы");
	Для каждого ДанныеЭтапа Из ВыполнениеСмежныхЭтапов Цикл
		Если ДанныеЭтапа.ЭтоПредыдущийЭтап Тогда
			СтрокаЭтап = ПредыдущиеЭтапыДерево.Строки.Добавить();
		Иначе
			СтрокаЭтап = СледующиеЭтапы.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа);
		
		Если ДанныеЭтапа.ЭтоПредыдущийЭтап Тогда
			СтрокаЭтап.Представление = ДанныеЭтапа.НаименованиеЭтапа;
			
			СтруктураПоиска = Новый Структура("КодСтрокиПродукция,КодСтрокиЭтапыГрафик", 
									ДанныеЭтапа.КодСтрокиПродукция, ДанныеЭтапа.КодСтрокиЭтапыГрафик);
	  		СписокМЛЭтапа = МаршрутныеЛистыЭтапов.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеМЛ Из СписокМЛЭтапа Цикл
				СтрокМЛ = СтрокаЭтап.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокМЛ, ДанныеМЛ);
				
				СтрокМЛ.ТипСтроки = 1;
				СтрокМЛ.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '№ %1 от %2';
														|en = 'No. %1 from %2'"),
													ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеМЛ.Номер, Ложь, Истина),
													Формат(ДанныеМЛ.Дата, "ДЛФ=D"));
				
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	ПредыдущиеЭтапыДерево.Строки.Сортировать("НомерЭтапа,Представление");
	СледующиеЭтапы.Сортировать("НомерЭтапа,НаименованиеЭтапа");
	
	ЗначениеВРеквизитФормы(ПредыдущиеЭтапыДерево, "ПредыдущиеЭтапы");
	
КонецПроцедуры

&НаСервере
Функция МаршрутныеЛистыЭтапов(ВыполнениеСмежныхЭтапов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеСмежныхЭтапов.Распоряжение КАК Распоряжение,
	|	ВыполнениеСмежныхЭтапов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ВыполнениеСмежныхЭтапов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ВыполнениеСмежныхЭтапов
	|ИЗ
	|	&ВыполнениеСмежныхЭтапов КАК ВыполнениеСмежныхЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Ссылка,
	|	МаршрутныйЛистПроизводства.Диспетчер,
	|	МаршрутныйЛистПроизводства.Начало,
	|	МаршрутныйЛистПроизводства.Окончание,
	|	МаршрутныйЛистПроизводства.Запланировано,
	|	МаршрутныйЛистПроизводства.Произведено,
	|	МаршрутныйЛистПроизводства.Брак,
	|	МаршрутныйЛистПроизводства.Статус КАК ТекстСостояния,
	|	МаршрутныйЛистПроизводства.Номер,
	|	МаршрутныйЛистПроизводства.Дата,
	|	ВыполнениеСмежныхЭтапов.КодСтрокиПродукция,
	|	ВыполнениеСмежныхЭтапов.КодСтрокиЭтапыГрафик
	|ИЗ
	|	ВыполнениеСмежныхЭтапов КАК ВыполнениеСмежныхЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО ВыполнениеСмежныхЭтапов.Распоряжение = МаршрутныйЛистПроизводства.Распоряжение
	|			И ВыполнениеСмежныхЭтапов.КодСтрокиПродукция = МаршрутныйЛистПроизводства.КодСтроки
	|			И ВыполнениеСмежныхЭтапов.КодСтрокиЭтапыГрафик = МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик
	|			И МаршрутныйЛистПроизводства.Проведен
	|			И МаршрутныйЛистПроизводства.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))";
	
	Запрос.УстановитьПараметр("ВыполнениеСмежныхЭтапов", ВыполнениеСмежныхЭтапов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура РазвернутьПредыдущиеЭтапы()

	КоллекцияЭлементов = ПредыдущиеЭтапы.ПолучитьЭлементы();
	Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		Элементы.ПредыдущиеЭтапы.Развернуть(ЭлементКоллекции.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Не показываем полуфабрикат для строк МЛ
	#Область СкрытьПолуфабрикат
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредыдущиеЭтапыПолуфабрикат.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредыдущиеЭтапыПолуфабрикатХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредыдущиеЭтапы.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти

КонецПроцедуры
 
#КонецОбласти
//-- Устарело_Производство21