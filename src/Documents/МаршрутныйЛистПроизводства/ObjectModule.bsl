//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет табличные части "РаспоряжениеСпецификация", "РаспоряжениеТрудозатраты" по данным распоряжения.
//
Процедура ЗаполнитьДанныеРаспоряжения() Экспорт
	
	РаспоряжениеСпецификация.Очистить();
	
	ЗапланированоОстаток = СколькоОсталосьЗапланировать();
	
	Если ЗапланированоОстаток = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//0
	"ВЫБРАТЬ
	|	СУММА(ЗаказыНаПроизводство.КоличествоПоЗаказу) * &Коэффициент КАК КоличествоПоЗаказу,
	|	ЗаказыНаПроизводство.Номенклатура              КАК Номенклатура,
	|	ЗаказыНаПроизводство.Характеристика            КАК Характеристика,
	|	ЗаказыНаПроизводство.Склад                     КАК Получатель,
	|	ЗаказыНаПроизводство.Назначение                КАК Назначение,
	|	ЗаказыНаПроизводство.ПроизводитсяВПроцессе     КАК ПроизводитсяВПроцессе
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпецификацииЗаказов.ЗаказаноОстаток       КАК КоличествоПоЗаказу,
	|		СпецификацииЗаказов.Номенклатура          КАК Номенклатура,
	|		СпецификацииЗаказов.Характеристика        КАК Характеристика,
	|		СпецификацииЗаказов.Склад                 КАК Склад,
	|		СпецификацииЗаказов.Назначение            КАК Назначение,
	|		СпецификацииЗаказов.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводствоСпецификации.Остатки(
	|				,
	|				ЗаказНаПроизводство = &Распоряжение
	|					И КодСтрокиПродукция = &КодСтрокиПродукция
	|					И КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|					И Этап = &Этап) КАК СпецификацииЗаказов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификацииЗаказов.Заказано              КАК КоличествоПоЗаказу,
	|		СпецификацииЗаказов.Номенклатура          КАК Номенклатура,
	|		СпецификацииЗаказов.Характеристика        КАК Характеристика,
	|		СпецификацииЗаказов.Склад                 КАК Склад,
	|		СпецификацииЗаказов.Назначение            КАК Назначение,
	|		СпецификацииЗаказов.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводствоСпецификации КАК СпецификацииЗаказов
	|	ГДЕ
	|		СпецификацииЗаказов.Регистратор = &Регистратор
	|		И СпецификацииЗаказов.Активность
	|		И СпецификацииЗаказов.ЗаказНаПроизводство = &Распоряжение
	|		И СпецификацииЗаказов.КодСтрокиПродукция = &КодСтрокиПродукция
	|		И СпецификацииЗаказов.КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|		И СпецификацииЗаказов.Этап = &Этап) КАК ЗаказыНаПроизводство
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаПроизводство.Номенклатура,
	|	ЗаказыНаПроизводство.Характеристика,
	|	ЗаказыНаПроизводство.Склад,
	|	ЗаказыНаПроизводство.Назначение,
	|	ЗаказыНаПроизводство.ПроизводитсяВПроцессе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. РаспоряжениеТрудозатраты
	|ВЫБРАТЬ
	|	ТрудозатратыОстатки.ВидРабот,
	|	СУММА(ТрудозатратыОстатки.КоличествоПоЗаказу) * &Коэффициент КАК КоличествоПоЗаказу
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыНаПроизводствоТрудозатратыОстатки.ВидРабот КАК ВидРабот,
	|		ЗаказыНаПроизводствоТрудозатратыОстатки.ПоЗаказуОстаток КАК КоличествоПоЗаказу
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводствоТрудозатраты.Остатки(
	|				,
	|				ЗаказНаПроизводство = &Распоряжение
	|					И КодСтрокиПродукция = &КодСтрокиПродукция
	|					И КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|					И Этап = &Этап) КАК ЗаказыНаПроизводствоТрудозатратыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификацииЗаказов.ВидРабот,
	|		СпецификацииЗаказов.ПоЗаказу
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводствоТрудозатраты КАК СпецификацииЗаказов
	|	ГДЕ
	|		СпецификацииЗаказов.Регистратор = &Регистратор
	|		И СпецификацииЗаказов.Активность
	|		И СпецификацииЗаказов.ЗаказНаПроизводство = &Распоряжение
	|		И СпецификацииЗаказов.КодСтрокиПродукция = &КодСтрокиПродукция
	|		И СпецификацииЗаказов.КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|		И СпецификацииЗаказов.Этап = &Этап) КАК ТрудозатратыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыОстатки.ВидРабот";
	
	// Определим коэффициент по которому будем рассчитывать количество требуемых материалов.
	ЗапланированоПоДокументу = ?(Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен, Произведено + Брак, Запланировано);
	Если ЗапланированоПоДокументу < ЗапланированоОстаток Тогда
		// Возьмем от остатка материалов только часть
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Коэффициент", "&Запланировано / &ЗапланированоОстаток");
		Запрос.УстановитьПараметр("Запланировано", ЗапланированоПоДокументу);
		Запрос.УстановитьПараметр("ЗапланированоОстаток", ЗапланированоОстаток);
	Иначе
		// Возьмем весь остаток материалов
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Коэффициент", "1");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор",          Ссылка);
	Запрос.УстановитьПараметр("Этап",                 Этап);
	Запрос.УстановитьПараметр("Подразделение",        Подразделение);
	Запрос.УстановитьПараметр("Распоряжение",         Распоряжение);
	Запрос.УстановитьПараметр("КодСтрокиПродукция",   КодСтроки);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", КодСтрокиЭтапыГрафик);
	
	Результат = Запрос.ВыполнитьПакет();
	РаспоряжениеСпецификация.Загрузить(Результат[0].Выгрузить());
	РаспоряжениеТрудозатраты.Загрузить(Результат[1].Выгрузить());
	
КонецПроцедуры

// Заполняет документ по маршрутной карте с учетом вложенных маршрутных карт
//      
// Параметры:
//  ДанныеЗаполнения - Структура - вспомогательные данные для заполнения:
//		* КлючевыеВидыРабочихЦентров - Массив - ключевые виды РЦ данного этапа производства.
//
Процедура ДобавитьДанныеМаршрутнойКарты(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если МаршрутнаяКарта.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СоставМаршрутнойКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										МаршрутнаяКарта, 
										"ИспользоватьОперации,ИспользоватьВыходныеИзделия,
										|ИспользоватьМатериалы,ИспользоватьТрудозатраты");
	
	СтруктураДанных = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
											МаршрутнаяКарта, 
											Запланировано, 
											?(НЕ НоменклатураПолуфабриката.Пустая(), НоменклатураПолуфабриката, Номенклатура), 
											?(НЕ НоменклатураПолуфабриката.Пустая(), ХарактеристикаПолуфабриката, Характеристика));
											
	Если СоставМаршрутнойКарты.ИспользоватьОперации 
		И УправлениеМаршрутнымиЛистами <> Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		
		Операции.Загрузить(СтруктураДанных.Операции);
		ЗаполнитьПриоритетОпераций(ДанныеЗаполнения);
		ЗаполнитьСтатусВыполненияОпераций();
		ВспомогательныеРабочиеЦентры.Загрузить(СтруктураДанных.ВспомогательныеРабочиеЦентры);
		ПорядокВыполненияОперацийЗадаетсяПроизвольно = Истина; // После заполнения считаем что порядок произвольный.
	КонецЕсли; 
	
	Если СоставМаршрутнойКарты.ИспользоватьВыходныеИзделия Тогда
		ВыходныеИзделия.Загрузить(СтруктураДанных.ВыходныеИзделия);
		ВозвратныеОтходы.Загрузить(СтруктураДанных.ВозвратныеОтходы);
		ЗаполнитьКоличествоОтклонение(ВыходныеИзделия, Истина);
		ЗаполнитьКоличествоОтклонение(ВозвратныеОтходы, Истина);
	КонецЕсли; 
	
	Если СоставМаршрутнойКарты.ИспользоватьТрудозатраты Тогда
		Трудозатраты.Загрузить(СтруктураДанных.Трудозатраты);
		ЗаполнитьФактВТабличнойЧасти(Трудозатраты, Ложь);
	КонецЕсли; 
	
	Если СоставМаршрутнойКарты.ИспользоватьМатериалы Тогда
		ДозаполнитьМатериалыПоЗаказу(СтруктураДанных.Материалы);
		МатериалыИУслуги.Загрузить(СтруктураДанных.Материалы);
		ЗаполнитьФактВТабличнойЧасти(МатериалыИУслуги, Истина);
	КонецЕсли;
	
	// Обновим данные в ТЧ "РаспоряжениеСпецификация"
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(ЭтотОбъект);
	
КонецПроцедуры

// Заполняет документ по данным распоряжения.
//
// Параметры:
//  ДанныеЗаполнения - Структура - вспомогательные данные для заполнения:
//		* КлючевыеВидыРабочихЦентров - Массив - ключевые виды РЦ данного этапа производства.
//
Процедура ЗаполнитьПоРаспоряжению(ДанныеЗаполнения = Неопределено) Экспорт
	
	МаксимальныйКодСтрокиИзделия = 0;
	МаксимальныйКодСтрокиТрудозатраты = 0;
	
	Операции.Очистить();
	ВыходныеИзделия.Очистить();
	ВозвратныеОтходы.Очистить();
	МатериалыИУслуги.Очистить();
	Трудозатраты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.Ссылка.Организация                  КАК Организация,
	|	ЗаказНаПроизводствоЭтапы.Ссылка.Приоритет                        КАК Приоритет,
	|	ЗаказНаПроизводствоПродукция.Номенклатура                        КАК Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Характеристика                      КАК Характеристика,
	|	ЗаказНаПроизводствоПродукция.Спецификация                        КАК Спецификация,
	|	ЗаказНаПроизводствоПолуфабрикат.Номенклатура                     КАК НоменклатураПолуфабриката,
	|	ЗаказНаПроизводствоПолуфабрикат.Характеристика                   КАК ХарактеристикаПолуфабриката,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПотреблениеПолуфабриката.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.РесурсныеСпецификации
	|			ТОГДА ЗаказНаПроизводствоПотреблениеПолуфабриката.ИсточникПолученияПолуфабриката
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	КОНЕЦ                                                            КАК СпецификацияПолуфабриката,
	|	ЗаказНаПроизводствоПотреблениеПолуфабриката.Этап                 КАК ЭтапПродукции,
	|	ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта                         КАК МаршрутнаяКарта,
	|	ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия, ЛОЖЬ)   КАК ИспользоватьВыходныеИзделия,
	|	ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы, ЛОЖЬ)         КАК ИспользоватьМатериалы,
	|	ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ИспользоватьОперации, ЛОЖЬ)          КАК ИспользоватьОперации,
	|	ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты, ЛОЖЬ)      КАК ИспользоватьТрудозатраты,
	|	ЗаказНаПроизводствоЭтапы.Подразделение                           КАК Подразделение,
	|	ЗаказНаПроизводствоЭтапы.ЭтапВосстановленияБрака                 КАК ЭтапВосстановленияБрака,
	|	ЗаказНаПроизводствоЭтапы.Количество                              КАК Количество,
	|	ЗаказНаПроизводствоЭтапы.Непрерывный                             КАК Непрерывный,
	|	ЗаказНаПроизводствоЭтапы.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.ПредварительныйБуфер
	|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ПредварительныйБуфер 
	|	КОНЕЦ                                                            КАК ПредварительныйБуфер,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.ЕдиницаИзмеренияПредварительногоБуфера
	|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЕдиницаИзмеренияПредварительногоБуфера 
	|	КОНЕЦ                                                            КАК ЕдиницаИзмеренияПредварительногоБуфера,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.ЗавершающийБуфер
	|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЗавершающийБуфер 
	|	КОНЕЦ                                                            КАК ЗавершающийБуфер,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта = ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.ЕдиницаИзмеренияЗавершающегоБуфера
	|		ИНАЧЕ ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.ЕдиницаИзмеренияЗавершающегоБуфера 
	|	КОНЕЦ                                                            КАК ЕдиницаИзмеренияЗавершающегоБуфера,
	|	ЗаказНаПроизводствоЭтапы.ДлительностьЭтапа                       КАК ДлительностьЭтапа,
	|	ЗаказНаПроизводствоЭтапы.ЕдиницаИзмеренияДлительностиЭтапа       КАК ЕдиницаИзмеренияДлительностиЭтапа,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПродукция.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоПродукция.Назначение
	|		КОГДА ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат <> &ПустойКлючСвязи
	|			ТОГДА ЗаказНаПроизводствоПродукция.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                                            КАК Назначение,
	|	ЗаказНаПроизводствоПродукция.КлючСвязи                           КАК КлючСвязиПродукция,
	|	ЗаказНаПроизводствоЭтапы.КлючСвязи                               КАК КлючСвязиЭтапы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЗаказНаПроизводствоПродукция.Ссылка
	|			И ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = &КодСтрокиЭтапыГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ПО ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка
	|			И ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказНаПроизводствоПолуфабрикат
	|		ПО ЗаказНаПроизводствоПолуфабрикат.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка
	|			И ЗаказНаПроизводствоПолуфабрикат.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция
	|			И ЗаказНаПроизводствоПолуфабрикат.КлючСвязиПолуфабрикат = ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат
	|			И ЗаказНаПроизводствоПолуфабрикат.ПроизводитсяВПроцессе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоПотреблениеПолуфабриката
	|		ПО ЗаказНаПроизводствоПотреблениеПолуфабриката.Ссылка = ЗаказНаПроизводствоПолуфабрикат.Ссылка
	|			И ЗаказНаПроизводствоПотреблениеПолуфабриката.КлючСвязиПродукция = ЗаказНаПроизводствоПолуфабрикат.КлючСвязиПродукция
	|			И ЗаказНаПроизводствоПотреблениеПолуфабриката.КлючСвязи = ЗаказНаПроизводствоПолуфабрикат.КлючСвязиПолуфабрикат
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &Распоряжение
	|	И ЗаказНаПроизводствоПродукция.КодСтроки = &КодСтроки";
	
	Запрос.УстановитьПараметр("Распоряжение",         Распоряжение);
	Запрос.УстановитьПараметр("Этап",                 Этап);
	Запрос.УстановитьПараметр("КодСтроки",            КодСтроки);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", КодСтрокиЭтапыГрафик);
	Запрос.УстановитьПараметр("ПустойКлючСвязи",      Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СписокСвойств = "Организация,Подразделение,Приоритет,Назначение,ЭтапВосстановленияБрака,
						|Спецификация,СпецификацияПолуфабриката,ЭтапПродукции,
						|МаршрутнаяКарта,Номенклатура,Характеристика,
						|НоменклатураПолуфабриката,ХарактеристикаПолуфабриката,
						|ПредварительныйБуфер,ЕдиницаИзмеренияПредварительногоБуфера,
						|ЗавершающийБуфер,ЕдиницаИзмеренияЗавершающегоБуфера,
						|ДлительностьЭтапа,ЕдиницаИзмеренияДлительностиЭтапа,
						|ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,Непрерывный";
						
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, СписокСвойств);
		
		СоставМаршрутнойКарты = Новый Структура;
		СоставМаршрутнойКарты.Вставить("ИспользоватьТрудозатраты", Выборка.ИспользоватьТрудозатраты);
		СоставМаршрутнойКарты.Вставить("ИспользоватьВыходныеИзделия", Выборка.ИспользоватьВыходныеИзделия);
		СоставМаршрутнойКарты.Вставить("ИспользоватьМатериалы", Выборка.ИспользоватьМатериалы);
		СоставМаршрутнойКарты.Вставить("ИспользоватьОперации", Выборка.ИспользоватьОперации);
		
	Иначе	
		
		СоставМаршрутнойКарты = Новый Структура;
		СоставМаршрутнойКарты.Вставить("ИспользоватьТрудозатраты", Ложь);
		СоставМаршрутнойКарты.Вставить("ИспользоватьВыходныеИзделия", Ложь);
		СоставМаршрутнойКарты.Вставить("ИспользоватьМатериалы", Ложь);
		СоставМаршрутнойКарты.Вставить("ИспользоватьОперации", Ложь);
		
	КонецЕсли;
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
	УправлениеМаршрутнымиЛистами = ПараметрыПодразделения.УправлениеМаршрутнымиЛистами;
	
	ЗаполнитьЗанятостьВидовРЦПоЗаказу();
	
	// Определим требуется ли планировать работу видов РЦ
	#Область ОпределитьПланироватьРаботуВидовРабочихЦентров
	ПланироватьРаботуВидовРабочихЦентров = Ложь;
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ
		И ВидыРабочихЦентров.Количество() <> 0 Тогда
		
		КлючевыеВидыРабочихЦентров = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
											Подразделение,
											ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(НачалоРаботыКлючевогоРабочегоЦентраПоГрафику, ПараметрыПодразделения.ИнтервалПланирования),
											ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику, ПараметрыПодразделения.ИнтервалПланирования));
											
		Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
	  		СтрокаКлючевойВидРЦ = КлючевыеВидыРабочихЦентров.Найти(СтрокаВидРЦ.ВидРабочегоЦентра, "ВидРабочегоЦентра");
			Если СтрокаКлючевойВидРЦ <> Неопределено И СтрокаКлючевойВидРЦ.Ключевой Тогда
				ПланироватьРаботуВидовРабочихЦентров = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	#КонецОбласти
	
	// Определим длительность этапа, чтобы выполнять диспетчирование по УББВ
	#Область ДлительностьЭтапаПриУББВ
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ
		И ВидыРабочихЦентров.Количество() <> 0
		И НЕ ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ДлительностьЭтапа = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
													ПредварительныйБуфер, 
													ЕдиницаИзмеренияПредварительногоБуфера)
							+ ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
													ЗавершающийБуфер, 
													ЕдиницаИзмеренияЗавершающегоБуфера);
													
		ДлительностьЭтапа = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
								ДлительностьЭтапа, 
								Перечисления.ЕдиницыИзмеренияВремени.День);
								
		// Добавим количество дней работы видов РЦ
		ДниРаботы = Новый Массив;
		Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
			Если ДниРаботы.Найти(НачалоДня(СтрокаВидРЦ.ДатаИнтервала)) = Неопределено Тогда
				ДниРаботы.Добавить(НачалоДня(СтрокаВидРЦ.ДатаИнтервала));
			КонецЕсли; 
		КонецЦикла; 
		// Длительность этапа всегда определяется в днях
		ДлительностьЭтапа = ДлительностьЭтапа + ДниРаботы.Количество();
	КонецЕсли;
	#КонецОбласти
	
	// Заполним табличные части
	#Область ЗаполнениеТЧ
	
	// ТЧ РаспоряжениеСпецификация, РаспоряжениеТрудозатраты
	ЗаполнитьДанныеРаспоряжения();
	
	// ТЧ Операции, ВыходныеИзделия, ВозвратныеОтходы, МатериалыИУслуги, Трудозатраты
	Если НЕ СоставМаршрутнойКарты.ИспользоватьТрудозатраты
		ИЛИ НЕ СоставМаршрутнойКарты.ИспользоватьВыходныеИзделия
		ИЛИ НЕ СоставМаршрутнойКарты.ИспользоватьМатериалы Тогда
		
		ЗаполнитьПоДаннымРаспоряжения(СоставМаршрутнойКарты);
		
	КонецЕсли; 
	
	Если СоставМаршрутнойКарты.ИспользоватьТрудозатраты
		ИЛИ СоставМаршрутнойКарты.ИспользоватьВыходныеИзделия
		ИЛИ СоставМаршрутнойКарты.ИспользоватьМатериалы
		ИЛИ СоставМаршрутнойКарты.ИспользоватьОперации Тогда
		
		ЗаполнитьПоМаршрутнойКарте(ДанныеЗаполнения);
		
	КонецЕсли; 
	
	// Обновим данные в ТЧ "РаспоряжениеСпецификация", "РаспоряжениеТрудозатраты"
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(ЭтотОбъект);
	
	#КонецОбласти
	
	ПараметрыУказанияСерий = Документы.МаршрутныйЛистПроизводства.ПараметрыУказанияСерий(ЭтотОбъект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИУслуги);
	
	// Нужно очистить серию, если ее не требуется указывать
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если ЗначениеЗаполнено(СтрокаМатериал.Серия) И СтрокаМатериал.СтатусУказанияСерий = 0 Тогда
			СтрокаМатериал.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Заполняет табличные части ВидыРабочихЦентров, ЗанятостьВидовРабочихЦентровПоГрафику по заказу на производство.
//
Процедура ЗаполнитьЗанятостьВидовРЦПоЗаказу() Экспорт

	ЗанятостьВидовРабочихЦентровПоГрафику.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра                                                   КАК ВидРабочегоЦентра,
	|	ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра.ПараллельнаяЗагрузка                              КАК ПараллельнаяЗагрузка,
	|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала                                                       КАК ДатаИнтервала,
	|	ЕСТЬNULL(ВидыРабочихЦентров.ВариантНаладки, АльтернативныеВидыРабочихЦентров.ВариантНаладки)     КАК ВариантНаладки,
	|	ЕСТЬNULL(ВидыРабочихЦентров.ВремяРаботы, АльтернативныеВидыРабочихЦентров.ВремяРаботы)           КАК ВремяРаботы,
	|	ЕСТЬNULL(ВидыРабочихЦентров.ЕдиницаИзмерения, АльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	СУММА(ЗанятостьВидовРабочихЦентров.Количество)                                                   КАК ЗанятоеВремяРаботы,
	|	ЕСТЬNULL(ВидыРабочихЦентров.Загрузка, АльтернативныеВидыРабочихЦентров.Загрузка)                 КАК ЗагрузкаНорматив
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЗаказНаПроизводствоПродукция.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = &КодСтрокиЭтапыГрафик)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЗанятостьВидовРабочихЦентров КАК ЗанятостьВидовРабочихЦентров
	|		ПО (ЗанятостьВидовРабочихЦентров.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗанятостьВидовРабочихЦентров.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|			И (ЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|		ПО (ВидыРабочихЦентров.Ссылка = ЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ВидыРабочихЦентров.КлючСвязиЭтапы = ЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ВидыРабочихЦентров.КлючСвязиПродукция = ЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|			И (ВидыРабочихЦентров.ВидРабочегоЦентра = ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.АльтернативныеВидыРабочихЦентров КАК АльтернативныеВидыРабочихЦентров
	|		ПО (АльтернативныеВидыРабочихЦентров.Ссылка = ЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (АльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (АльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|			И (АльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &Распоряжение
	|	И ЗаказНаПроизводствоПродукция.КодСтроки = &КодСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала,
	|	ЕСТЬNULL(ВидыРабочихЦентров.ВариантНаладки, АльтернативныеВидыРабочихЦентров.ВариантНаладки),
	|	ЕСТЬNULL(ВидыРабочихЦентров.ВремяРаботы, АльтернативныеВидыРабочихЦентров.ВремяРаботы),
	|   ЕСТЬNULL(ВидыРабочихЦентров.ЕдиницаИзмерения, АльтернативныеВидыРабочихЦентров.ЕдиницаИзмерения),
	|	ЕСТЬNULL(ВидыРабочихЦентров.Загрузка, АльтернативныеВидыРабочихЦентров.Загрузка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжение",         Распоряжение);
	Запрос.УстановитьПараметр("КодСтроки",            КодСтроки);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", КодСтрокиЭтапыГрафик);
	
	Результат = Запрос.Выполнить();
	ЗанятостьВидовРабочихЦентров = Результат.Выгрузить();
	СписокВидовРЦ = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ЗанятостьВидовРабочихЦентров.ВыгрузитьКолонку("ВидРабочегоЦентра"));
	Для каждого ВидРабочегоЦентра Из СписокВидовРЦ Цикл
		
		// Нужно для определения времени работы в каждом интервале на одну единицу/партию изделий
		// Например, графиком запланировано выполнение 10 ед/партий этапа на два интервала: в первом занято 2ч, во втором 8ч.
		// Нормативное время выполнение одной единицы/партии изделий 5ч.
		// Следовательно в первом интервале планируется работать: 5ч * 2ч / 10ч = 1ч
		// А во втором: 5ч * 8ч / 10ч = 4ч.
		ДоляВремениРаботыВИнтервалах = Новый Массив;
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
  		СтрокиЗанятостьВидаРЦ = ЗанятостьВидовРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого ЗанятостьВидаРЦ Из СтрокиЗанятостьВидаРЦ Цикл
			ДоляВремениРаботыВИнтервалах.Добавить(ЗанятостьВидаРЦ.ЗанятоеВремяРаботы);
			
			ВремяРаботы = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
											ЗанятостьВидаРЦ.ВремяРаботы, 
											ЗанятостьВидаРЦ.ЕдиницаИзмерения);
											
		КонецЦикла; 
		
		ВремяРаботыВИнтервалах = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(ВремяРаботы, ДоляВремениРаботыВИнтервалах, 0);
		
		Для Сч = 0 По СтрокиЗанятостьВидаРЦ.Количество() - 1 Цикл
			ЗанятостьВидаРЦ = СтрокиЗанятостьВидаРЦ[Сч];
			ДанныеВидаРЦ = ЗанятостьВидовРабочихЦентровПоГрафику.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеВидаРЦ, ЗанятостьВидаРЦ);
			
			ДанныеВидаРЦ.ВремяРаботыНорматив = ВремяРаботыВИнтервалах[Сч];
			Если ЗанятостьВидаРЦ.ПараллельнаяЗагрузка Тогда
				ДанныеВидаРЦ.ВремяРаботы = ДанныеВидаРЦ.ВремяРаботыНорматив;
				ДанныеВидаРЦ.Загрузка = ОперативныйУчетПроизводстваКлиентСервер.Загрузка(
													ДанныеВидаРЦ.ЗагрузкаНорматив,
													Запланировано,
													ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
			
			Иначе
				ДанныеВидаРЦ.ВремяРаботы = ОперативныйУчетПроизводстваКлиентСервер.ОбъемРабот(
														ДанныеВидаРЦ.ВремяРаботыНорматив, 
														Запланировано,
														ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
			КонецЕсли; 
			ДанныеВидаРЦ.ВремяРаботы = Макс(ДанныеВидаРЦ.ВремяРаботы, 60);
			ДанныеВидаРЦ.ВремяРаботыНорматив = Макс(ДанныеВидаРЦ.ВремяРаботыНорматив, 60);
		КонецЦикла; 
		
	КонецЦикла;
	ВидыРабочихЦентров.Загрузить(ЗанятостьВидовРабочихЦентровПоГрафику.Выгрузить());
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	СтатусДоИзменения = Статус;
	ЗначениеНовогоСтатуса = Перечисления.СтатусыМаршрутныхЛистовПроизводства[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПриИзмененииСтатуса(СтатусДоИзменения);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	СтатусДоИзменения = Статус;
	Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан;
	
	Произведено   = 0;
	Брак          = 0;
	ОписаниеБрака = "";
	
	МаксимальныйКодСтрокиИзделия   = 0;
	МаксимальныйКодСтрокиТрудозатраты = 0;
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(ВыходныеИзделия, 0, "КодСтроки");
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(ВозвратныеОтходы, 0, "КодСтроки");
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(МатериалыИУслуги, 0, "КодСтроки");
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Трудозатраты, 0, "КодСтроки");
	
	ОбновитьРеквизитыОперацийПриКопировании();
	
	ВыходныеИзделияСерии.Очистить();
	
	ЗаполнитьРеквизитыПоУмолчанию();
	
	ПриИзмененииСтатуса(СтатусДоИзменения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ВыходныеИзделия", "МаксимальныйКодСтрокиИзделия");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", "МаксимальныйКодСтрокиИзделия");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "МатериалыИУслуги", "МаксимальныйКодСтрокиМатериалы");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Трудозатраты", "МаксимальныйКодСтрокиТрудозатраты");
	
	ПараметрыОкругления = НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "ВыходныеИзделия";
	ПараметрыОкругления.ИмяПоляКоличествоСуффикс = "КоличествоФакт";
	ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления = "ВыходныеИзделия.Получатель ССЫЛКА Справочник.Склады";
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);

	ПараметрыОкругления = НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "ВозвратныеОтходы";
	ПараметрыОкругления.ИмяПоляКоличествоСуффикс = "КоличествоФакт";
	ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления = "ВозвратныеОтходы.Получатель ССЫЛКА Справочник.Склады";
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	#Область ПроверкаДатыЗапретаИзменений
	
	ПериодПроверки = Дата(3999,12,31);
	Если ЗначениеЗаполнено(ФактическоеОкончание) Тогда
		ПериодПроверки = Мин(ПериодПроверки, ФактическоеОкончание);
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Ресурсы", "Количество,КоличествоУпаковок");
	ПараметрыПроверки.Вставить("Дата", "ДатаРасхода");
	
	ОписаниеТабличныхЧастей = Новый Структура;
	ОписаниеТабличныхЧастей.Вставить("МатериалыИУслуги", ПараметрыПроверки);
	
	РезультатПроверки =
		РасчетСебестоимостиПрикладныеАлгоритмы.ПериодыИзмененияТабличныеЧастиДокумента(
			ЭтотОбъект,
			ОписаниеТабличныхЧастей);
	
	Если Не РезультатПроверки.ОбщийМинимальныйПериод = Неопределено Тогда
		ПериодПроверки = Мин(ПериодПроверки, РезультатПроверки.ОбщийМинимальныйПериод);
	КонецЕсли;
	
	ДанныеДляПроверки  = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	
	НоваяСтрока        = ДанныеДляПроверки.Добавить();
	НоваяСтрока.Дата   = НачалоДня(ПериодПроверки);
	НоваяСтрока.Раздел = "Производство";
	НоваяСтрока.Объект = Организация;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("НоваяВерсия", Истина);
	ОписаниеДанных.Вставить("Данные",      Ссылка);
	
	ОписаниеОшибки = "";
	Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ОписаниеДанных, ОписаниеОшибки) Тогда
		Отказ = Истина;
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	#КонецОбласти
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
		ИЛИ Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен Тогда
		
		СостояниеРасписания = Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано;
		
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
			РегистрыСведений.ПооперационноеРасписание.ОчиститьРасписаниеМаршрутныйЛист(Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		Выполнено = Запланировано;
	Иначе
		Выполнено = 0;
	КонецЕсли;
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		ФактическоеНачало = ФактическоеНачалоВыполненияОпераций;
		ФактическоеОкончание = ДатаВыполненияОпераций;
	ИначеЕсли ПланироватьРаботуВидовРабочихЦентров Тогда
		ФактическоеОкончание = ДатаВыполненияРаботВЗавершающемБуфере;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(Неопределено, Подразделение, Подразделение, Неопределено);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(МатериалыИУслуги, МестаУчета);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ВыходныеИзделия, МестаУчета);
	КонецЕсли;
	
	ОпределитьЗатратыБуферов();

	ПривестиКПустомуЗначениюСкладЕслиОнНеВыбран(ВыходныеИзделия);
	ПривестиКПустомуЗначениюСкладЕслиОнНеВыбран(ВозвратныеОтходы);
	
	// Изменение статуса выполнения операций.
	Если ЭтотОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		И ЭтотОбъект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		
		Для каждого Строка Из Операции Цикл
			Строка.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Завершено;
		КонецЦикла;
		
	КонецЕсли;
	
	// Серии
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.МаршрутныйЛистПроизводства);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,ПараметрыУказанияСерий.МатериалыИУслуги);
	
	// ИнтеграцияГИСМ
	ЗаполнитьПризнакЕстьМаркируемаяПродукция();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	Если ЭтотОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		И ЭтотОбъект.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		
		УстановитьОперациямРасписанияСтатусЗавершено();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Блокировка доступности видов рабочих центров для чтения
	УстановитьБлокировкуДоступностьВидовРабочихЦентров();
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Распоряжение") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		НачалоРаботыКлючевогоРабочегоЦентраПоГрафику    = ДанныеЗаполнения.НачалоРаботыКлючевогоРабочегоЦентра;
		ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику = ДанныеЗаполнения.ОкончаниеРаботыКлючевогоРабочегоЦентра;
		
		ЗаполнитьПоРаспоряжению(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоУмолчанию();
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Количество");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.СтатьяКалькуляции");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.СтатьяКалькуляции");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Характеристика");
	
	МассивНепроверяемыхРеквизитов.Добавить("Операции.Начало");
	МассивНепроверяемыхРеквизитов.Добавить("Операции.Окончание");
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.ДатаРасхода");
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Бригада");
	
	// Нужно удалить проверку количества, т.к. в документе особая логика проверки
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВыходныеИзделия.КоличествоУпаковокФакт"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВозвратныеОтходы.КоличествоУпаковокФакт"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("МатериалыИУслуги.КоличествоУпаковокФакт"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВыходныеИзделия.КоличествоУпаковок"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВозвратныеОтходы.КоличествоУпаковок"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("МатериалыИУслуги.КоличествоУпаковок"));
	
	ОтключитьПроверкуПоУсловию(МассивНепроверяемыхРеквизитов);
	
	ПроверитьДатыМаршрута(Отказ);
	
	ПроверитьЗаполнениеКоличества(ПроверяемыеРеквизиты, Отказ);
	
	ПроверитьЗаполнениеДокументаВЗависимостиОтСтатуса(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьЗаполнениеОтклонений("ВыходныеИзделия",   Отказ);
	ПроверитьЗаполнениеОтклонений("ВозвратныеОтходы",  Отказ);
	ПроверитьЗаполнениеОтклонений("МатериалыИУслуги",  Отказ);
	ПроверитьЗаполнениеОтклонений("Трудозатраты",      Отказ);
	
	ПроверитьОперации(Отказ);
	
	Если НЕ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Приоритет");
		МассивНепроверяемыхРеквизитов.Добавить("Операции.Приоритет");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если (Произведено + Брак) > Запланировано И Запланировано <> 0 Тогда
		Если Произведено <> 0 И Брак = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Количество произведенных единиц/партий изделий не может превышать запланированное количество.';
									|en = 'Quantity of manufactured product units/batches cannot exceed the planned quantity.'");
		ИначеЕсли Произведено = 0 И Брак <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Количество брака не может превышать запланированное количество.';
									|en = 'Quantity of defective goods cannot exceed the planned quantity.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Количество произведенных единиц/партий изделий и брака не может превышать запланированное количество.';
									|en = 'Quantity of manufactured product units/batches and defective goods cannot exceed the planned quantity.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Произведено",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличества(ПроверяемыеРеквизиты, Отказ)
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("Количество", "КоличествоФакт");
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("КоличествоУпаковок", "КоличествоУпаковокФакт");
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "ВыходныеИзделия.Получатель ССЫЛКА Справочник.Склады";
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("Количество", "КоличествоФакт");
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("КоличествоУпаковок", "КоличествоУпаковокФакт");
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "ВозвратныеОтходы.Получатель ССЫЛКА Справочник.Склады";
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
	ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьРеквизитыПоУмолчанию()
	
	Диспетчер = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ЗаполнитьПоМаршрутнойКарте(ДанныеЗаполнения = Неопределено)

	ДобавитьДанныеМаршрутнойКарты(ДанныеЗаполнения);
	
	// Заполним реквизиты по заказу, если они не заполнены
	Для каждого СтрокаРаспоряжения Из РаспоряжениеСпецификация Цикл
		Если СтрокаРаспоряжения.КоличествоПоЗаказу = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаРаспоряжения.Номенклатура, СтрокаРаспоряжения.Характеристика);
		СписокСтрок = ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Получатель) Тогда
				ДанныеСтроки.Получатель = СтрокаРаспоряжения.Получатель;
				ДанныеСтроки.ПроизводитсяВПроцессе = СтрокаРаспоряжения.ПроизводитсяВПроцессе;
				ДанныеСтроки.Назначение = СтрокаРаспоряжения.Назначение;
			КонецЕсли; 
		КонецЦикла;
		СписокСтрок = ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Получатель) Тогда
				ДанныеСтроки.Получатель = СтрокаРаспоряжения.Получатель;
				ДанныеСтроки.ПроизводитсяВПроцессе = СтрокаРаспоряжения.ПроизводитсяВПроцессе;
				ДанныеСтроки.Назначение = СтрокаРаспоряжения.Назначение;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымРаспоряжения(СоставМаршрутнойКарты)

	Запрос = Новый Запрос;
	// 0 ТаблицаЭтапыГрафик
	#Область ТаблицаЭтапыГрафик
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукция.КлючСвязи КАК КлючСвязиПродукция,
	|	ТаблицаЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ТаблицаЭтапыГрафик.КлючСвязи КАК КлючСвязиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаЭтапыГрафик
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаПродукция.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаПродукция.КлючСвязи)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = &КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	ТаблицаПродукция.Ссылка = &Распоряжение
	|	И ТаблицаПродукция.КодСтроки = &КодСтрокиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	ТаблицаЭтапыГрафик.Количество КАК Количество
	|ИЗ
	|	ТаблицаЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	#КонецОбласти
	
	// 2. ВыходныеИзделия
	#Область ВыходныеИзделия
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ТаблицаВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ТаблицаВыходныеИзделия.Характеристика КАК Характеристика,
	|	ТаблицаВыходныеИзделия.Назначение КАК Назначение,
	|	ТаблицаВыходныеИзделия.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВыходныеИзделия.Подразделение
	|		ИНАЧЕ ТаблицаВыходныеИзделия.Склад
	|	КОНЕЦ КАК Получатель,
	|	ТаблицаВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|	ВЫРАЗИТЬ(ТаблицаВыходныеИзделия.СведенияАвтовыбора КАК СТРОКА(500)) КАК СведенияАвтовыбора,
	|	ТаблицаВыходныеИзделия.ОписаниеИзделия КАК ОписаниеИзделия,
	|	СУММА(ТаблицаВыходныеИзделияГрафик.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаВыходныеИзделияГрафик.Количество) КАК Количество,
	|	ТаблицаВыходныеИзделия.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТаблицаВыходныеИзделияГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ТаблицаВыходныеИзделияГрафик.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязи = ТаблицаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаВыходныеИзделияГрафик.КлючСвязиПродукция)
	|			И (ТаблицаЭтапыГрафик.КлючСвязиЭтапыГрафик = ТаблицаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТаблицаВыходныеИзделияГрафик.Ссылка = &Распоряжение
	|	И &ИспользоватьВыходныеИзделия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Характеристика,
	|	ТаблицаВыходныеИзделия.Назначение,
	|	ТаблицаВыходныеИзделия.Упаковка,
	|	ТаблицаВыходныеИзделия.ДоляСтоимости,
	|	ВЫРАЗИТЬ(ТаблицаВыходныеИзделия.СведенияАвтовыбора КАК СТРОКА(500)),
	|	ТаблицаВыходныеИзделия.ОписаниеИзделия,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1),
	|	ТаблицаВыходныеИзделия.ПроизводитсяВПроцессе,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВыходныеИзделия.Подразделение
	|		ИНАЧЕ ТаблицаВыходныеИзделия.Склад
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроизводитсяВПроцессе УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	#КонецОбласти
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаВыходныеИзделия.Упаковка",
		"ТаблицаВыходныеИзделия.Номенклатура"));
		
	// 3. ВозвратныеОтходы
	#Область ВозвратныеОтходы
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ТаблицаВозвратныеОтходы.Номенклатура КАК Номенклатура,
	|	ТаблицаВозвратныеОтходы.Характеристика КАК Характеристика,
	|	ТаблицаВозвратныеОтходы.Назначение КАК Назначение,
	|	ТаблицаВозвратныеОтходы.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвратныеОтходы.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВозвратныеОтходы.Подразделение
	|		ИНАЧЕ ТаблицаВозвратныеОтходы.Склад
	|	КОНЕЦ КАК Получатель,
	|	ТаблицаВозвратныеОтходы.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	ТаблицаВозвратныеОтходы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ВЫРАЗИТЬ(ТаблицаВозвратныеОтходы.СведенияАвтовыбора КАК СТРОКА(500)) КАК СведенияАвтовыбора,
	|	ТаблицаВозвратныеОтходы.ОписаниеИзделия КАК ОписаниеИзделия,
	|	СУММА(ТаблицаВозвратныеОтходыГрафик.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаВозвратныеОтходыГрафик.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВозвратныеОтходыГрафик КАК ТаблицаВозвратныеОтходыГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|		ПО (ТаблицаВозвратныеОтходы.Ссылка = ТаблицаВозвратныеОтходыГрафик.Ссылка)
	|			И (ТаблицаВозвратныеОтходы.КлючСвязи = ТаблицаВозвратныеОтходыГрафик.КлючСвязиВозвратныеОтходы)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаВозвратныеОтходыГрафик.КлючСвязиПродукция)
	|			И (ТаблицаЭтапыГрафик.КлючСвязиЭтапыГрафик = ТаблицаВозвратныеОтходыГрафик.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТаблицаВозвратныеОтходыГрафик.Ссылка = &Распоряжение
	|	И &ИспользоватьВыходныеИзделия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Характеристика,
	|	ТаблицаВозвратныеОтходы.Назначение,
	|	ТаблицаВозвратныеОтходы.Упаковка,
	|	ТаблицаВозвратныеОтходы.СтатьяКалькуляции,
	|	ТаблицаВозвратныеОтходы.ПроизводитсяВПроцессе,
	|	ВЫРАЗИТЬ(ТаблицаВозвратныеОтходы.СведенияАвтовыбора КАК СТРОКА(500)),
	|	ТаблицаВозвратныеОтходы.ОписаниеИзделия,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1),
	|	ВЫБОР
	|		КОГДА ТаблицаВозвратныеОтходы.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВозвратныеОтходы.Подразделение
	|		ИНАЧЕ ТаблицаВозвратныеОтходы.Склад
	|	КОНЕЦ
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ПроизводитсяВПроцессе УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	#КонецОбласти
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаВозвратныеОтходы.Упаковка",
		"ТаблицаВозвратныеОтходы.Номенклатура"));
		
	// 4. Трудозатраты
	#Область Трудозатраты
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ТаблицаТрудозатраты.ВидРабот КАК ВидРабот,
	|	ТаблицаТрудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	СУММА(ТаблицаТрудозатратыГрафик.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ТрудозатратыГрафик КАК ТаблицаТрудозатратыГрафик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Трудозатраты КАК ТаблицаТрудозатраты
	|		ПО (ТаблицаТрудозатраты.Ссылка = ТаблицаТрудозатратыГрафик.Ссылка)
	|			И (ТаблицаТрудозатраты.КлючСвязи = ТаблицаТрудозатратыГрафик.КлючСвязиТрудозатраты)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаТрудозатратыГрафик.КлючСвязиПродукция)
	|			И (ТаблицаЭтапыГрафик.КлючСвязиЭтапыГрафик = ТаблицаТрудозатратыГрафик.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТаблицаТрудозатратыГрафик.Ссылка = &Распоряжение
	|	И &ИспользоватьТрудозатраты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТрудозатраты.ВидРабот,
	|	ТаблицаТрудозатраты.СтатьяКалькуляции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	#КонецОбласти
	
	Если НЕ СоставМаршрутнойКарты.ИспользоватьМатериалы Тогда
	
	// 5,6. МатериалыИУслуги
	#Область МатериалыИУслуги
	Запрос.Текст = Запрос.Текст + ТекстЗапросаМатериалыЗаказа() +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	#КонецОбласти
	
	// 7. Выполнение этапов
	#Область ВыполнениеЭтапов
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	СУММА(ЭтапыПроизводства.ЗапланированоЗаказом) КАК ЗапланированоЗаказом,
	|	СУММА(ЭтапыПроизводства.ЗапланированоПроизводством) КАК ЗапланированоПроизводством
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот           КАК ЗапланированоЗаказом,
	|		ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот 
	|			+ ЭтапыПроизводстваОбороты.КВыполнениюОборот 
	|			+ ЭтапыПроизводстваОбороты.ВыполненоОборот 
	|			+ ЭтапыПроизводстваОбороты.БракОборот                     КАК ЗапланированоПроизводством
	|	ИЗ
	|		РегистрНакопления.ЭтапыПроизводства.Обороты(
	|				,
	|				,
	|				,
	|					Распоряжение = &Распоряжение
	|					И КодСтрокиПродукция = &КодСтрокиПродукция
	|					И КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|					И Этап = &Этап
	|					И Подразделение = &Подразделение) КАК ЭтапыПроизводстваОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		-ЭтапыПроизводства.ЗапланированоПроизводством 
	|			- ЭтапыПроизводства.КВыполнению 
	|			- ЭтапыПроизводства.Выполнено
	|			- ЭтапыПроизводства.Брак
	|	ИЗ
	|		РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|	ГДЕ
	|		ЭтапыПроизводства.Регистратор = &Регистратор
	|		И ЭтапыПроизводства.Активность
	|		И ЭтапыПроизводства.Распоряжение = &Распоряжение
	|		И ЭтапыПроизводства.КодСтрокиПродукция = &КодСтрокиПродукция
	|		И ЭтапыПроизводства.КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|		И ЭтапыПроизводства.Этап = &Этап
	|		И ЭтапыПроизводства.Подразделение = &Подразделение) КАК ЭтапыПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	#КонецОбласти
	
	// 8. Использованные материалы
	#Область ИспользованныеМатериалы
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ТаблицаМатериалыИУслуги.Номенклатура        КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика      КАК Характеристика,
	|	ТаблицаМатериалыИУслуги.Назначение          КАК Назначение,
	|	ТаблицаМатериалыИУслуги.Серия               КАК Серия,
	|	СУММА(ТаблицаМатериалыИУслуги.Количество)   КАК Количество
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО ТаблицаМатериалыИУслуги.Ссылка = МаршрутныйЛистПроизводства.Ссылка
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)
	|	И МаршрутныйЛистПроизводства.Проведен
	|	И МаршрутныйЛистПроизводства.Распоряжение = &Распоряжение
	|	И МаршрутныйЛистПроизводства.КодСтроки = &КодСтрокиПродукция
	|	И МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|	И МаршрутныйЛистПроизводства.Ссылка <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика,
	|	ТаблицаМатериалыИУслуги.Назначение,
	|	ТаблицаМатериалыИУслуги.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	#КонецОбласти
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор",          Ссылка);
	Запрос.УстановитьПараметр("Этап",                 Этап);
	Запрос.УстановитьПараметр("Спецификация",         Спецификация);
	Запрос.УстановитьПараметр("Подразделение",        Подразделение);
	Запрос.УстановитьПараметр("Распоряжение",         Распоряжение);
	Запрос.УстановитьПараметр("КодСтроки",            КодСтроки);
	Запрос.УстановитьПараметр("КодСтрокиПродукция",   КодСтроки);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", КодСтрокиЭтапыГрафик);
	Запрос.УстановитьПараметр("Назначение",           Назначение);
	
	Запрос.УстановитьПараметр("ИспользоватьВыходныеИзделия", НЕ СоставМаршрутнойКарты.ИспользоватьВыходныеИзделия);
	Запрос.УстановитьПараметр("ИспользоватьМатериалы", НЕ СоставМаршрутнойКарты.ИспользоватьМатериалы);
	Запрос.УстановитьПараметр("ИспользоватьТрудозатраты", НЕ СоставМаршрутнойКарты.ИспользоватьТрудозатраты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Количество этапа на которое рассчитаны нормативы изделий, материалов и т.д.
	ЗапланированоПоЗаказу = 0;
	ВыборкаСтрокаГрафика = Результат[1].Выбрать();
	Если ВыборкаСтрокаГрафика.Следующий() Тогда
		ЗапланированоПоЗаказу = ВыборкаСтрокаГрафика.Количество;
	КонецЕсли;
	
	Если ЗапланированоПоЗаказу <> 0 Тогда
		КоэффициентСверхЗаказа = Макс(Запланировано - СколькоОсталосьЗапланировать(), 0) / ЗапланированоПоЗаказу;
	Иначе
		КоэффициентСверхЗаказа = 0;
	КонецЕсли; 
	
	ТаблицаРаспоряжениеСпецификация = РаспоряжениеСпецификация.Выгрузить();
	ТаблицаРаспоряжениеСпецификация.Свернуть("Номенклатура,Характеристика,Получатель,Назначение,ПроизводитсяВПроцессе", 
											"КоличествоПоЗаказу,Количество");
	
	// ВыходныеИзделия
	Если НЕ СоставМаршрутнойКарты.ИспользоватьВыходныеИзделия Тогда
		ВыходныеИзделияЗаказа = Результат[2].Выгрузить();
		ЗаполнитьНаОснованииТабличнойЧастиЗаказа(
				ВыходныеИзделия, 
				ТаблицаРаспоряжениеСпецификация, 
				ВыходныеИзделияЗаказа, 
				"Номенклатура,Характеристика,Получатель,Назначение", 
				КоэффициентСверхЗаказа,
				Истина,
				Ложь);
	КонецЕсли; 
			
	// ВозвратныеОтходы
	Если НЕ СоставМаршрутнойКарты.ИспользоватьВыходныеИзделия Тогда
		ВозвратныеОтходыЗаказа = Результат[3].Выгрузить();
		ЗаполнитьНаОснованииТабличнойЧастиЗаказа(
				ВозвратныеОтходы, 
				ТаблицаРаспоряжениеСпецификация, 
				ВозвратныеОтходыЗаказа, 
				"Номенклатура,Характеристика,Получатель,Назначение", 
				КоэффициентСверхЗаказа,
				Истина,
				Ложь);
	КонецЕсли; 
	
	// Трудозатраты
	Если НЕ СоставМаршрутнойКарты.ИспользоватьТрудозатраты Тогда
		ТрудозатратыЗаказа = Результат[4].Выгрузить();
		ЗаполнитьНаОснованииТабличнойЧастиЗаказа(
				Трудозатраты,
				РаспоряжениеТрудозатраты,
				ТрудозатратыЗаказа,
				"ВидРабот",
				КоэффициентСверхЗаказа, 
				Ложь);
	КонецЕсли; 
	
	// МатериалыИУслуги
	Если НЕ СоставМаршрутнойКарты.ИспользоватьМатериалы Тогда
		ЗаполнитьМатериалыНаОснованииТабличнойЧастиЗаказа(
				Результат[6].Выгрузить(), 
				Результат[7].Выгрузить(), 
				Результат[8].Выгрузить());
	КонецЕсли; 
			
КонецПроцедуры

Процедура ЗаполнитьКоличествоОтклонение(ТабличнаяЧасть, ЕстьУпаковки)

	Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		ДанныеСтроки.КоличествоОтклонение = ДанныеСтроки.КоличествоФакт - ДанныеСтроки.Количество;
		Если ЕстьУпаковки Тогда
			ДанныеСтроки.КоличествоУпаковокОтклонение = ДанныеСтроки.КоличествоУпаковокФакт - ДанныеСтроки.КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Добавляет в табличную часть документа данные заказа, рассчитывает норматив и факт.
//
Процедура ЗаполнитьНаОснованииТабличнойЧастиЗаказа(ТабличнаяЧастьДокумента, ОстаткиПоРаспоряжению, ТабличнаяЧастьЗаказа, ПоляГруппировки, КоэффициентСверхЗаказа, ЕстьУпаковки, ЗаполнитьФакт = Истина)

	// Пример данных
	// Есть заказ на производство:
	// Этап - 10 ед/партий, материал - 10 шт.
	//
	// Создается маршрутный лист на этап, но в количестве 12 ед/партий
	// ОстаткиПоРаспоряжению: материал - 10 шт
	// ТабличнаяЧастьЗаказа: материал - 10 шт
	// КоэффициентСверхЗаказа: 2/10 = 0.2
	// ТабличнаяЧастьДокумента: материал - (10 + 10*0.2) = 12 шт.
	
	ТабличнаяЧастьЗаказаКопия = ТабличнаяЧастьЗаказа.Скопировать(, ПоляГруппировки);
	ТабличнаяЧастьЗаказаКопия.Свернуть(ПоляГруппировки);
	
	СтруктураПоиска        = Новый Структура(ПоляГруппировки);
	СтруктураПоискаОстатки = Новый Структура(ПоляГруппировки);
	
	Если ЕстьУпаковки Тогда
		НеЗаполнятьКоличество = "Количество,КоличествоУпаковок";
	Иначе
		НеЗаполнятьКоличество = "Количество";
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из ТабличнаяЧастьЗаказаКопия Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатки, ДанныеСтроки);
		
		СтрокиЗаказа = ТабличнаяЧастьЗаказа.НайтиСтроки(СтруктураПоиска);
		
		МассивРезультата = Неопределено;
		ОстатокПоРаспоряжению = ОстаткиПоРаспоряжению.НайтиСтроки(СтруктураПоискаОстатки);
		Для каждого СтрокаОстатокПоРаспоряжению Из ОстатокПоРаспоряжению Цикл
			Если СтрокаОстатокПоРаспоряжению.КоличествоПоЗаказу <> 0 Тогда
				МассивКоэффициентов = Новый Массив;
				Для каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
					МассивКоэффициентов.Добавить(СтрокаЗаказа.Количество);
				КонецЦикла;
				МассивРезультата = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												СтрокаОстатокПоРаспоряжению.КоличествоПоЗаказу, 
												МассивКоэффициентов,
												3);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Сч = 0 По СтрокиЗаказа.Количество() - 1 Цикл
			
			СтрокаЗаказа = СтрокиЗаказа[Сч];
			
			Если МассивРезультата = Неопределено И СтрокаЗаказа.Количество * КоэффициентСверхЗаказа = 0 Тогда
				// Новая строка не добавляется, так как количество не будет заполнено.
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказа,, НеЗаполнятьКоличество);
			
			// Добавим остаток по распоряжению
			Если МассивРезультата <> Неопределено Тогда
				НоваяСтрока.Количество = МассивРезультата[Сч];
			КонецЕсли;
			
			// Добавим количество сверх распоряжения
			НоваяСтрока.Количество = НоваяСтрока.Количество + СтрокаЗаказа.Количество * КоэффициентСверхЗаказа;
			
			Если ЕстьУпаковки Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество / СтрокаЗаказа.УпаковкаКоэффициент;
			КонецЕсли;
			
			// Заполним фактическое количество
			Если ЗаполнитьФакт Тогда
				НоваяСтрока.КоличествоФакт = НоваяСтрока.Количество;
				Если ЕстьУпаковки Тогда
					НоваяСтрока.КоличествоУпаковокФакт = НоваяСтрока.КоличествоУпаковок;
				КонецЕсли;
			Иначе
				НоваяСтрока.КоличествоОтклонение = НоваяСтрока.КоличествоФакт - НоваяСтрока.Количество;
				Если ЕстьУпаковки Тогда
					НоваяСтрока.КоличествоУпаковокОтклонение = НоваяСтрока.КоличествоУпаковокФакт - НоваяСтрока.КоличествоУпаковок;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыНаОснованииТабличнойЧастиЗаказа(МатериалыИУслугиЗаказа, ВыполнениеЭтапов, ИспользованныеМатериалы)
	
	ЗапланированоПроизводством = ?(ЗначениеЗаполнено(ВыполнениеЭтапов[0].ЗапланированоПроизводством),
		ВыполнениеЭтапов[0].ЗапланированоПроизводством + Запланировано,
		Запланировано);
	
	Для каждого МатериалЗаказа Из МатериалыИУслугиЗаказа Цикл
		
		Расход = 0;
		Если ЗначениеЗаполнено(МатериалЗаказа.Серия) Тогда
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Серия");
		Иначе
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, МатериалЗаказа);
		Для каждого Строка Из ИспользованныеМатериалы.НайтиСтроки(СтруктураПоиска) Цикл
			Расход = Расход + Строка.Количество;
		КонецЦикла;
		
		Если МатериалЗаказа.КоличествоОкруглено Тогда
			// Если количество в заказе округлено то нельзя использовать количество в базовой единице.
			КоличествоУпаковокНорматив = ЗапланированоПроизводством / МатериалЗаказа.КоличествоЭтап * МатериалЗаказа.КоличествоУпаковок 
				- (Расход * МатериалЗаказа.УпаковкаКоэффициент);
			КоличествоНорматив =  КоличествоУпаковокНорматив * МатериалЗаказа.УпаковкаКоэффициент;
		Иначе
			КоличествоНорматив = ЗапланированоПроизводством / МатериалЗаказа.КоличествоЭтап * МатериалЗаказа.Количество - Расход;
			КоличествоУпаковокНорматив = КоличествоНорматив / МатериалЗаказа.УпаковкаКоэффициент;
		КонецЕсли; 
									
		Если КоличествоНорматив <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, МатериалЗаказа);
		
		НоваяСтрока.Количество = КоличествоНорматив;
		НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокНорматив;
		НоваяСтрока.КоличествоФакт = НоваяСтрока.Количество;
		НоваяСтрока.КоличествоУпаковокФакт = НоваяСтрока.КоличествоУпаковок;
	КонецЦикла; 
	
	ЗаполнитьНазначениеПроизводимыхВПроцессеПолуфабрикатов();
	
КонецПроцедуры

Процедура ДозаполнитьМатериалыПоЗаказу(ТаблицаМатериалыИУслуги)

	ТаблицаМатериалыИУслуги.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("ПроизводитсяВПроцессе", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаМатериалыЗаказа();
	Запрос.УстановитьПараметр("ИспользоватьМатериалы", Истина);
	Запрос.УстановитьПараметр("Распоряжение",          Распоряжение);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик",  КодСтрокиЭтапыГрафик);
	
	ТаблицаМатериалыЗаказа = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаМатериал Из ТаблицаМатериалыИУслуги Цикл
		
		// Среди материалов могут быть строки которые нужно уточнить
		// Если в заказе уже выполнили уточнение по такой же строке, то перенесем его в маршрутный лист.
		Если ЗначениеЗаполнено(СтрокаМатериал.ПрименениеМатериала)
			И (СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве 
				ИЛИ СтрокаМатериал.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве) Тогда
		
			СтруктураПоиска = Новый Структура("ПрименениеМатериала", СтрокаМатериал.ПрименениеМатериала);
		 	СписокСтрок = ТаблицаМатериалыЗаказа.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 1 Тогда
				ДанныеЗаказа = СписокСтрок[0];
				СтрокаМатериал.Номенклатура = ДанныеЗаказа.Номенклатура;
				СтрокаМатериал.Характеристика = ДанныеЗаказа.Характеристика;
				СтрокаМатериал.СведенияАвтовыбора = "";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", СтрокаМатериал.Номенклатура, СтрокаМатериал.Характеристика);
  		СписокСтрок = ТаблицаМатериалыЗаказа.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеЗаказа Из СписокСтрок Цикл
			Если ДанныеЗаказа.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМатериал.Серия = ДанныеЗаказа.Серия;
			СтрокаМатериал.Назначение = ДанныеЗаказа.Назначение;
			СтрокаМатериал.ПроизводитсяВПроцессе = ДанныеЗаказа.ПроизводитсяВПроцессе;
			ДанныеЗаказа.Количество = ДанныеЗаказа.Количество - Мин(СтрокаМатериал.Количество, ДанныеЗаказа.Количество);
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаМатериалыЗаказа()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаМатериалыИУслуги.Ссылка КАК Распоряжение,
	|	ТаблицаМатериалыИУслуги.КодСтроки КАК КодСтрокиРаспоряжения,
	|	ТаблицаМатериалыИУслуги.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ТаблицаМатериалыИУслуги.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ТаблицаМатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	ТаблицаМатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ТаблицаМатериалыИУслуги.ПрименениеМатериала КАК ПрименениеМатериала,
	|	ТаблицаМатериалыИУслуги.ИспользуетсяАвтовыбор КАК ИспользуетсяАвтовыбор
	|ПОМЕСТИТЬ ВТМатериалыЗаказа
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО ТаблицаЭтапыГрафик.Ссылка = ТаблицаМатериалыИУслуги.Ссылка
	|			И ТаблицаЭтапыГрафик.КлючСвязиЭтапы = ТаблицаМатериалыИУслуги.КлючСвязиЭтапы
	|ГДЕ
	|	ТаблицаЭтапыГрафик.Ссылка = &Распоряжение
	|	И ТаблицаЭтапыГрафик.КодСтроки = &КодСтрокиЭтапыГрафик
	|	И &ИспользоватьМатериалы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыМатериалов.Номенклатура КАК Номенклатура,
	|	ЗаказыМатериалов.Характеристика КАК Характеристика,
	|	ЗаказыМатериалов.Серия КАК Серия,
	|	ЗаказыМатериалов.Назначение КАК Назначение,
	|	ЗаказыМатериалов.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК УпаковкаКоэффициент,
	|	МатериалыЗаказа.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	МатериалыЗаказа.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	МатериалыЗаказа.ПрименениеМатериала КАК ПрименениеМатериала,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказыМатериалов.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И ЗаказыМатериалов.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					И ЗаказыМатериалов.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|					И ЗаказыМатериалов.Упаковка.ТипИзмеряемойВеличины В (ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес), ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем), ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь), ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КоличествоОкруглено,
	|	СУММА(ЗаказыМатериалов.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЗаказыМатериалов.Количество) КАК Количество,
	|	МАКСИМУМ(ТаблицаЭтапы.Количество) КАК КоличествоЭтап,
	|	МАКСИМУМ(МатериалыЗаказа.ИспользуетсяАвтовыбор) КАК ИспользуетсяАвтовыбор
	|ИЗ
	|	ВТМатериалыЗаказа КАК МатериалыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок КАК ЗаказыМатериалов
	|		ПО МатериалыЗаказа.Распоряжение = ЗаказыМатериалов.Распоряжение
	|			И МатериалыЗаказа.КодСтрокиРаспоряжения = ЗаказыМатериалов.КодСтрокиРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО МатериалыЗаказа.Распоряжение = ТаблицаЭтапы.Ссылка
	|			И МатериалыЗаказа.КлючСвязиЭтапы = ТаблицаЭтапы.КлючСвязи
	|			И МатериалыЗаказа.КлючСвязиПродукция = ТаблицаЭтапы.КлючСвязиПродукция
	|ГДЕ
	|	ЗаказыМатериалов.Распоряжение = &Распоряжение
	|	И НЕ ЗаказыМатериалов.Отменено
	|	И &ИспользоватьМатериалы
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыМатериалов.Номенклатура,
	|	ЗаказыМатериалов.Характеристика,
	|	ЗаказыМатериалов.Серия,
	|	ЗаказыМатериалов.Назначение,
	|	МатериалыЗаказа.ПроизводитсяВПроцессе,
	|	МатериалыЗаказа.СтатьяКалькуляции,
	|	МатериалыЗаказа.ПрименениеМатериала,
	|	ЗаказыМатериалов.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыМатериалов.Количество) <> 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказыМатериалов.Упаковка",
		"ЗаказыМатериалов.Номенклатура"));
		
	Возврат ТекстЗапроса;

КонецФункции

Процедура ЗаполнитьПриоритетОпераций(ДанныеЗаполнения)
	
	Если НЕ Операции.Количество() = 0
		И УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		
		Для каждого Строка Из Операции Цикл
			Строка.Приоритет = Приоритет;
		КонецЦикла;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("КлючевыеВидыРабочихЦентров") Тогда
			
			КлючевыеВРЦ = ДанныеЗаполнения.КлючевыеВидыРабочихЦентров;
			ВысокийПриоритет = СледующийБольшийПриоритет(Приоритет);
			Если ЗначениеЗаполнено(КлючевыеВРЦ) И ЗначениеЗаполнено(ВысокийПриоритет) Тогда
				
				НомераСледующихОпераций = Новый Массив;
				
				СтруктураПоиска = Новый Структура("ВидРабочегоЦентра");
				Для каждого ВидРабочегоЦентра Из КлючевыеВРЦ Цикл
					СтруктураПоиска.ВидРабочегоЦентра = ВидРабочегоЦентра;
					НайденныеСтроки = Операции.НайтиСтроки(СтруктураПоиска);
					Для каждого Строка Из НайденныеСтроки Цикл
						НомераСледующихОпераций.Добавить(Строка.НомерОперации);
					КонецЦикла;
				КонецЦикла;
				
				СтруктураПоиска = Новый Структура("НомерСледующейОперации");
				ОбработанныеНомера = Новый Массив;
				ТекущийИндекс = 0;
				
				Пока ТекущийИндекс <= НомераСледующихОпераций.ВГраница() Цикл
					
					ТекущийНомер = НомераСледующихОпераций[ТекущийИндекс];
					Если ОбработанныеНомера.Найти(ТекущийНомер) = Неопределено Тогда
						СтруктураПоиска.НомерСледующейОперации = ТекущийНомер;
						НайденныеСтроки = Операции.НайтиСтроки(СтруктураПоиска);
						Для каждого Строка Из НайденныеСтроки Цикл
							Строка.Приоритет = ВысокийПриоритет;
							НомераСледующихОпераций.Добавить(Строка.НомерОперации);
						КонецЦикла;
						
						ОбработанныеНомера.Добавить(ТекущийНомер);
					КонецЕсли;
					
					ТекущийИндекс = ТекущийИндекс + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СледующийБольшийПриоритет(Знач ТекущийПриоритет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриоритетСледующий.Ссылка КАК Приоритет,
	|	ПриоритетСледующий.РеквизитДопУпорядочивания КАК Порядок
	|ИЗ
	|	Справочник.Приоритеты КАК ПриоритетТекущий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Приоритеты КАК ПриоритетСледующий
	|		ПО ПриоритетТекущий.РеквизитДопУпорядочивания > ПриоритетСледующий.РеквизитДопУпорядочивания
	|ГДЕ
	|	ПриоритетТекущий.Ссылка = &ТекущийПриоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ");
	
	Запрос.УстановитьПараметр("ТекущийПриоритет", ТекущийПриоритет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Приоритет;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтатусВыполненияОпераций()
	
	Если НЕ Операции.Количество() = 0 
		И УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		
		Для каждого Строка Из Операции Цикл
			Строка.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.НеНачато;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеСклада(Отказ)

	ШаблонСообщенияПодразделение = НСтр("ru = 'Не указано подразделение-получатель в строке %1.';
										|en = 'Receiving business unit is not specified in line %1.'");
	ШаблонСообщенияСклад = НСтр("ru = 'Не указан склад-получатель в строке %1.';
								|en = 'Receiving warehouse is not specified in line %1.'");
	
	ТипНоменклатурыИзделий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВыходныеИзделия.ВыгрузитьКолонку("Номенклатура"), "ТипНоменклатуры");
	
	Для каждого СтрокаТаблицы Из ВыходныеИзделия Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Получатель) И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ТипНоменклатуры = ТипНоменклатурыИзделий.Получить(СтрокаТаблицы.Номенклатура);
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
				ИЛИ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				ШаблонСообщения = ШаблонСообщенияСклад;
			Иначе
				ШаблонСообщения = ШаблонСообщенияПодразделение;
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", СтрокаТаблицы.НомерСтроки, "Получатель");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
	ТипНоменклатурыИзделий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВозвратныеОтходы.ВыгрузитьКолонку("Номенклатура"), "ТипНоменклатуры");
	
	Для каждого СтрокаТаблицы Из ВозвратныеОтходы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Получатель) И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ТипНоменклатуры = ТипНоменклатурыИзделий.Получить(СтрокаТаблицы.Номенклатура);
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
				ИЛИ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				ШаблонСообщения = ШаблонСообщенияСклад;
			Иначе
				ШаблонСообщения = ШаблонСообщенияПодразделение;
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", СтрокаТаблицы.НомерСтроки, "Получатель");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ПроверитьЗаполнениеВыполненногоМЛ(Отказ)
	
	// Статью калькуляции можно не заполнять если фактическое количество равно 0
	
	// ВозвратныеОтходы
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Побочный и промежуточный выпуск"".';
							|en = 'The ""Costing item"" column is not populated in line %1 of the ""Side and intermediate release"" list.'");
	Для каждого СтрокаОтход Из ВозвратныеОтходы Цикл
		Если НЕ СтрокаОтход.СтатьяКалькуляции.Пустая() ИЛИ СтрокаОтход.КоличествоУпаковокФакт = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаОтход.НомерСтроки);
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", СтрокаОтход.НомерСтроки, "СтатьяКалькуляции");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
	КонецЦикла;
	
	// МатериалыИУслуги
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Материалы и работы"".';
							|en = 'The ""Costing item"" column is not populated in line %1 of the ""Materials and works"" list.'");
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если НЕ СтрокаМатериал.СтатьяКалькуляции.Пустая() ИЛИ СтрокаМатериал.КоличествоУпаковокФакт = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаМатериал.НомерСтроки);
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "СтатьяКалькуляции");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
	КонецЦикла; 
	
	// Трудозатраты
	ШаблонСообщенияСтатья = НСтр("ru = 'Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Трудозатраты"".';
								|en = 'The ""Costing item"" column is not populated in line %1 of the ""Labor costs"" list.'");
	ШаблонСообщенияБригада = НСтр("ru = 'Не заполнена колонка ""Бригада"" в строке %1 списка ""Трудозатраты"".';
									|en = 'The ""Team"" column is not populated in line %1 of the ""Labor costs"" list.'");
	Для каждого СтрокаТрудозатрата Из Трудозатраты Цикл
		Если СтрокаТрудозатрата.СтатьяКалькуляции.Пустая() И СтрокаТрудозатрата.КоличествоФакт <> 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияСтатья, СтрокаТрудозатрата.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", СтрокаТрудозатрата.НомерСтроки, "СтатьяКалькуляции");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли;
		Если СтрокаТрудозатрата.Бригада.Пустая() И СтрокаТрудозатрата.КоличествоФакт <> 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБригада, СтрокаТрудозатрата.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", СтрокаТрудозатрата.НомерСтроки, "Бригада");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура ПроверитьЗаполнениеОтклонений(ИмяТаблицы, Отказ)
	
	Если НРег(ИмяТаблицы) = НРег("ВыходныеИзделия") Тогда
		ИмяРеквизитаКоличество = "КоличествоУпаковок";
		ИмяРеквизита           = "КоличествоУпаковокОтклонение";
		
		ШаблонСообщения = НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательному выпуску.';
								|en = 'Variance from standard should not result in a negative release.'");
		Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
			ШаблонСообщенияКоличество = НСтр("ru = 'Не заполнена колонка ""Норматив"" в строке %1 списка ""Продукция"".';
											|en = 'The ""Standard"" column is not populated in line %1 of the ""Products"" list.'");
		Иначе
			ШаблонСообщенияКоличество = НСтр("ru = 'Необходимо заполнить колонку ""Норматив"" или ""Факт"" в строке %1 списка ""Продукция"".';
											|en = 'Fill in the ""Standard"" or ""Fact"" column in line %1 of the ""Products"" list.'");
		КонецЕсли; 
		
	ИначеЕсли НРег(ИмяТаблицы) = НРег("ВозвратныеОтходы") Тогда
		ИмяРеквизитаКоличество = "КоличествоУпаковок";
		ИмяРеквизита           = "КоличествоУпаковокОтклонение";
		
		ШаблонСообщения = НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательному выпуску.';
								|en = 'Variance from standard should not result in a negative release.'");
		Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
			ШаблонСообщенияКоличество = НСтр("ru = 'Не заполнена колонка ""Норматив"" в строке %1 списка ""Побочный и промежуточный выпуск"".';
											|en = 'The ""Standard"" column is not populated in line %1 of the ""Side and intermediate release"" list.'");
		Иначе
			ШаблонСообщенияКоличество = НСтр("ru = 'Необходимо заполнить колонку ""Норматив"" или ""Факт"" в строке %1 списка ""Побочный и промежуточный выпуск"".';
											|en = 'Fill in the ""Standard"" or ""Fact"" column in line %1 of the ""Side and intermediate release"" list.'");
		КонецЕсли; 
		
	ИначеЕсли НРег(ИмяТаблицы) = НРег("МатериалыИУслуги") Тогда
		ИмяРеквизитаКоличество = "КоличествоУпаковок";
		ИмяРеквизита           = "КоличествоУпаковокОтклонение";
		
		ШаблонСообщения = НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательному потреблению.';
								|en = 'Variance from standard should not result in a negative consumption.'");
		Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
			ШаблонСообщенияКоличество = НСтр("ru = 'Не заполнена колонка ""Норматив"" в строке %1 списка ""Материалы и работы"".';
											|en = 'The ""Standard"" column is not populated in line %1 of the ""Materials and works"" list.'");
		Иначе
			ШаблонСообщенияКоличество = НСтр("ru = 'Необходимо заполнить колонку ""Норматив"" или ""Факт"" в строке %1 списка ""Материалы и работы"".';
											|en = 'Fill in the ""Standard"" or ""Fact"" column in line %1 of the ""Materials and works"" list.'");
		КонецЕсли; 
		
	ИначеЕсли НРег(ИмяТаблицы) = НРег("Трудозатраты") Тогда
		ИмяРеквизитаКоличество = "Количество";
		ИмяРеквизита           = "КоличествоОтклонение";
		
		ШаблонСообщения = НСтр("ru = 'Отклонение от норматива не должно приводить к отрицательным трудозатратам.';
								|en = 'Variance from standard should not result in negative labor costs.'");
		Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
			ШаблонСообщенияКоличество = НСтр("ru = 'Не заполнена колонка ""Норматив"" в строке %1 списка ""Трудозатраты"".';
											|en = 'The ""Standard"" column is not populated in line %1 of the ""Labor costs"" list.'");
		Иначе
			ШаблонСообщенияКоличество = НСтр("ru = 'Необходимо заполнить колонку ""Норматив"" или ""Факт"" в строке %1 списка ""Трудозатраты"".';
											|en = 'Fill in the ""Standard"" or ""Fact"" column in line %1 of the ""Labor costs"" list.'");
		КонецЕсли; 
		
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из ЭтотОбъект[ИмяТаблицы] Цикл
		
		Если ДанныеСтроки.Количество + ДанныеСтроки.КоличествоОтклонение < 0 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДанныеСтроки.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, ДанныеСтроки.НомерСтроки, ИмяРеквизита);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		ИначеЕсли ДанныеСтроки.Количество = 0 
			И ДанныеСтроки.КоличествоОтклонение = 0 
			
			// Если ничего не произвели то норматив заполнять не нужно
			И Произведено <> 0 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияКоличество, ДанныеСтроки.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, ДанныеСтроки.НомерСтроки, ИмяРеквизитаКоличество);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьДатуРасходаМатериалов(Отказ)

	ШаблонСообщения = НСтр("ru = 'Материал (работа) фактически израсходован, но не указана дата расхода в строке %1 списка ""Материалы и работы""';
							|en = 'Material (work) is actually consumed but the consumption date is not specified in line %1 of the ""Materials and works"" list'");
	
	Для каждого СтрокаТаблицы Из МатериалыИУслуги Цикл
		Если СтрокаТаблицы.ДатаРасхода = '000101010000'
			И СтрокаТаблицы.КоличествоФакт <> 0 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
																						Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
																						
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаТаблицы.НомерСтроки, "ДатаРасхода");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДолиСтоимости(Отказ)
	
	Если ВыходныеИзделия.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Доля стоимости"" в строке %1 списка ""Продукция""';
							|en = 'The ""Cost share"" field is not populated in line %1 of the ""Products"" list'");
	Для каждого СтрокаТаблицы Из ВыходныеИзделия Цикл
		Если СтрокаТаблицы.ДоляСтоимости = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
																						Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
																						
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", СтрокаТаблицы.НомерСтроки, "ДоляСтоимости");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаВЗависимостиОтСтатуса(МассивНепроверяемыхРеквизитов, Отказ)
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.КВыполнению
		ИЛИ Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется
		ИЛИ Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
			ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
			Документы.МаршрутныйЛистПроизводства.ПроверитьПорядокОпераций(Операции, ЭтотОбъект,, Отказ);
			ПроверитьПериодВыполненияВведенныйВручную(Отказ);
		КонецЕсли;
		
		ПроверитьЗаполнениеСклада(Отказ);
		ПроверитьЗаполнениеДолиСтоимости(Отказ);
	
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
			ПроверитьЗаполнениеВыполненногоМЛ(Отказ);
			ПроверитьДатуРасходаМатериалов(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен Тогда
		
		// Проверка заполнения серий
		ПараметрыУказанияСерий = Документы.МаршрутныйЛистПроизводства.ПараметрыУказанияСерий(ЭтотОбъект);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыУказанияСерий.ВыходныеИзделия);
		МассивПараметров.Добавить(ПараметрыУказанияСерий.МатериалыИУслуги);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
			МассивПараметров,
			Отказ,
			МассивНепроверяемыхРеквизитов);
		
	КонецЕсли; 
	
	ПроверитьСоответствиеСтатусаИМетодикиУправления(Отказ);
	
КонецПроцедуры

Процедура ОтключитьПроверкуПоУсловию(МассивНепроверяемыхРеквизитов)

	Если НЕ ГотовоКРаботеКлючевогоРабочегоЦентра
		ИЛИ НЕ ПланироватьРаботуВидовРабочихЦентров
		ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполненияРаботВПредварительномБуфере");
	КонецЕсли;
	Если НЕ ЗавершеноВыполнениеМаршрутногоЛиста
		ИЛИ НЕ ПланироватьРаботуВидовРабочихЦентров
		ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполненияРаботВЗавершающемБуфере");
	КонецЕсли;
	Если НЕ ЗавершеноВыполнениеМаршрутногоЛиста
		ИЛИ ПланироватьРаботуВидовРабочихЦентров
		ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФактическоеОкончание");
	КонецЕсли;
	Если НЕ ЗавершенаРаботаКлючевогоРабочегоЦентра
		ИЛИ НЕ ПланироватьРаботуВидовРабочихЦентров Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра");
 	КонецЕсли;

	Если Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		ИЛИ УправлениеМаршрутнымиЛистами <> Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		ИЛИ УправлениеМаршрутнымиЛистами <> Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоВыполненияОпераций");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполненияОпераций");
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Операции.Операция");
		МассивНепроверяемыхРеквизитов.Добавить("Операции.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Получатель");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Получатель");
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Произведено");
	КонецЕсли; 
	
	Если Брак = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОписаниеБрака");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПериодВыполненияВведенныйВручную(Отказ)

	ШаблонСообщенияНачало    = НСтр("ru = 'Не заполнена колонка ""Начало"" в строке %1 списка ""Операции"".';
									|en = 'The ""Start"" column is not populated in line %1 of the ""Operations"" list.'");
	ШаблонСообщенияОкончание = НСтр("ru = 'Не заполнена колонка ""Окончание"" в строке %1 списка ""Операции"".';
									|en = 'The ""End"" column is not populated in line %1 of the ""Operations"" list.'");
		
	СтруктураПоиска = Новый Структура("РасписаниеВведеноВручную", Истина);
 	СписокСтрок = Операции.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаОперация Из СписокСтрок Цикл
		Если СтрокаОперация.Начало = '000101010000' Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщенияНачало, 
										СтрокаОперация.НомерСтроки);
										
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Операции", СтрокаОперация.НомерСтроки, "Начало");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
		Если СтрокаОперация.Окончание = '000101010000' Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщенияОкончание, 
										СтрокаОперация.НомерСтроки);
										
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Операции", СтрокаОперация.НомерСтроки, "Окончание");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьДатыМаршрута(Отказ)

	Если Начало > Окончание И Начало <> '000101010000' И Окончание <> '000101010000' Тогда
		ТекстСообщения = НСтр("ru = 'Начало выполнения маршрутного листа должно быть раньше даты окончания выполнения маршрутного листа.';
								|en = 'Start date of route sheet execution must be earlier than the end date.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Начало",, Отказ);
	КонецЕсли; 
	
	Если ДатаВыполненияРаботВПредварительномБуфере <> '000101010000'
		И ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра <> '000101010000' 
		И ДатаВыполненияРаботВПредварительномБуфере > ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра 
		И ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата готовности к работе ключевого рабочего центра должна быть раньше даты завершения работы ключевого рабочего центра.';
								|en = 'Date of readiness of the key work center for operation must be earlier than the date of the key work center''s operation end.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаВыполненияРаботВПредварительномБуфере",, Отказ);
		
	ИначеЕсли ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра <> '000101010000'
		И ДатаВыполненияРаботВЗавершающемБуфере <> '000101010000' 
		И ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра > ДатаВыполненияРаботВЗавершающемБуфере
		И ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата завершения работы ключевого рабочего центра должна быть раньше даты завершения выполнения маршрутного листа.';
								|en = 'End date of key work center operation must be earlier than the end date of route sheet execution.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра",, Отказ);
		
	КонецЕсли; 
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеЭкспортныеПроцедуры

Процедура ПересчитатьНормативы(Коэффициент, ПересчитатьОтклонениеОтНормативов = Истина) Экспорт

	Если Коэффициент = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьВремяВыполненияОпераций();
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(ВыходныеИзделия,  Коэффициент, Истина);
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(ВозвратныеОтходы, Коэффициент, Истина);
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(МатериалыИУслуги, Коэффициент, Истина);
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(Трудозатраты,     Коэффициент, Ложь);
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
		
		ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(МатериалыИУслуги, 1, Истина, "Факт", "");
		ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(Трудозатраты,     1, Ложь,   "Факт", "");
		
	КонецЕсли; 
	
	Если ПересчитатьОтклонениеОтНормативов Тогда
		ПересчитатьОтклонениеОтНормативов();
	КонецЕсли; 
	
	ЗаполнитьДанныеРаспоряжения();

	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияМаршрутногоЛиста(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПересчитатьОтклонениеОтНормативов() Экспорт

	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить(Новый Структура("ИмяТЧ,ЕстьУпаковки", "ВыходныеИзделия", Истина));
	СписокТЧ.Добавить(Новый Структура("ИмяТЧ,ЕстьУпаковки", "ВозвратныеОтходы", Истина));
	СписокТЧ.Добавить(Новый Структура("ИмяТЧ,ЕстьУпаковки", "МатериалыИУслуги", Истина));
	СписокТЧ.Добавить(Новый Структура("ИмяТЧ,ЕстьУпаковки", "Трудозатраты", Ложь));
	
	Для каждого ОписаниеТЧ Из СписокТЧ Цикл
		СписокСтрок = ЭтотОбъект[ОписаниеТЧ.ИмяТЧ];
		Для каждого СтрокаТабличнойЧасти Из СписокСтрок Цикл
			
			СтрокаТабличнойЧасти.КоличествоОтклонение = СтрокаТабличнойЧасти.КоличествоФакт 
															- СтрокаТабличнойЧасти.Количество;
			Если ОписаниеТЧ.ЕстьУпаковки Тогда
				СтрокаТабличнойЧасти.КоличествоУпаковокОтклонение = СтрокаТабличнойЧасти.КоличествоУпаковокФакт 
																	- СтрокаТабличнойЧасти.КоличествоУпаковок;
																	
			КонецЕсли; 													
				
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

Процедура ПересчитатьФакт(ИсходныйНорматив, ВариантПересчетаФакта) Экспорт

	Если ВариантПересчетаФакта = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныйНорматив = 0 Тогда
		Коэффициент = 0;
		КоэффициентВыход = 0;
	ИначеЕсли ВариантПересчетаФакта = 1 Тогда
		// с учетом брака
		Коэффициент = (Произведено + Брак) / ИсходныйНорматив;
		КоэффициентВыход = Произведено / ИсходныйНорматив;
	Иначе
		// без учета брака
		Коэффициент = Произведено / ИсходныйНорматив;
		КоэффициентВыход = Произведено / ИсходныйНорматив;
	КонецЕсли;
	
	// Факт рассчитывается так: Норматив * Коэффициент
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(ВыходныеИзделия,  КоэффициентВыход, Истина, "Факт", "");
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(ВозвратныеОтходы, КоэффициентВыход, Истина, "Факт", "");
	
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(МатериалыИУслуги, Коэффициент, Истина, "Факт", "");
	ОперативныйУчетПроизводства.ПересчитатьКоличествоТабличнойЧасти(Трудозатраты,     Коэффициент, Ложь,   "Факт", "");
	
КонецПроцедуры

Процедура ЗаполнитьНазначениеПроизводимыхВПроцессеПолуфабрикатов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
 	|	ТаблицаМатериалыИУслуги.Номенклатура КАК Номенклатура,
 	|	ТаблицаМатериалыИУслуги.Характеристика КАК Характеристика
 	|ПОМЕСТИТЬ ТаблицаМатериалыИУслуги
 	|ИЗ
 	|	&ТаблицаМатериалыИУслуги КАК ТаблицаМатериалыИУслуги
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
 	|ВЫБРАТЬ
 	|	ТаблицаМатериалыИУслуги.Номенклатура КАК Номенклатура,
 	|	ТаблицаМатериалыИУслуги.Характеристика КАК Характеристика,
 	|	МаршрутныйЛистПроизводстваВыпуск.Ссылка КАК МаршрутныйЛистВыпуск,
 	|	МаршрутныйЛистПроизводстваВыпуск.Назначение КАК Назначение
 	|ПОМЕСТИТЬ СписокДокументовИМаршрутныйЛистВыпуск
 	|ИЗ
 	|	ТаблицаМатериалыИУслуги КАК ТаблицаМатериалыИУслуги
			// Получаем этап графика где потребляется полуфабрикат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафикПотребление
 	|		ПО (ТаблицаЭтапыГрафикПотребление.Ссылка = &Распоряжение)
 	|			И (ТаблицаЭтапыГрафикПотребление.КодСтроки = &КодСтрокиЭтапыГрафик)
	
			// Получаем этап где потребляется полуфабрикат
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапыПотребление
 	|		ПО (ТаблицаЭтапыПотребление.Ссылка = ТаблицаЭтапыГрафикПотребление.Ссылка)
 	|			И (ТаблицаЭтапыПотребление.КлючСвязи = ТаблицаЭтапыГрафикПотребление.КлючСвязиЭтапы)
 	|			И (ТаблицаЭтапыПотребление.КлючСвязиПродукция = ТаблицаЭтапыГрафикПотребление.КлючСвязиПродукция)
	
			// Получаем строку полуфабриката по найденному этапу
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслугиПотребление
 	|		ПО (ТаблицаМатериалыИУслугиПотребление.Ссылка = ТаблицаЭтапыПотребление.Ссылка)
 	|			И (ТаблицаМатериалыИУслугиПотребление.КлючСвязиЭтапы = ТаблицаЭтапыПотребление.КлючСвязи)
 	|			И (ТаблицаМатериалыИУслугиПотребление.КлючСвязиПродукция = ТаблицаЭтапыПотребление.КлючСвязиПродукция)
 	|			И (ТаблицаМатериалыИУслугиПотребление.Номенклатура = ТаблицаМатериалыИУслуги.Номенклатура)
 	|			И (ТаблицаМатериалыИУслугиПотребление.Характеристика = ТаблицаМатериалыИУслуги.Характеристика)
 	|			И (ТаблицаМатериалыИУслугиПотребление.ПроизводитсяВПроцессе)
	
			// Получаем строку выходных изделий где выпускается этот полуфабрикат
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаМатериалыИУслугиВыпуск
 	|		ПО (ТаблицаМатериалыИУслугиВыпуск.Ссылка = ТаблицаМатериалыИУслугиПотребление.Ссылка)
 	|			И (ТаблицаМатериалыИУслугиВыпуск.КлючСвязиПродукция = ТаблицаМатериалыИУслугиПотребление.КлючСвязиПродукция)
 	|			И (ТаблицаМатериалыИУслугиВыпуск.КлючСвязиПолуфабрикат = ТаблицаМатериалыИУслугиПотребление.КлючСвязи)
	|			И (ТаблицаМатериалыИУслугиВыпуск.Номенклатура = ТаблицаМатериалыИУслугиПотребление.Номенклатура)
 	|			И (ТаблицаМатериалыИУслугиВыпуск.Характеристика = ТаблицаМатериалыИУслугиПотребление.Характеристика)
  	|			И (ТаблицаМатериалыИУслугиВыпуск.ПроизводитсяВПроцессе)
	
			// Получаем этап где выпускается найденное выходное изделие
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапыВыпуск
 	|		ПО (ТаблицаЭтапыВыпуск.Ссылка = ТаблицаМатериалыИУслугиВыпуск.Ссылка)
 	|			И (ТаблицаЭтапыВыпуск.КлючСвязи = ТаблицаМатериалыИУслугиВыпуск.КлючСвязиЭтапы)
 	|			И (ТаблицаЭтапыВыпуск.КлючСвязиПродукция = ТаблицаМатериалыИУслугиВыпуск.КлючСвязиПродукция)
	
			// Получаем этапы графика где выпускается найденное выходное изделие
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафикВыпуск
 	|		ПО (ТаблицаЭтапыГрафикВыпуск.Ссылка = ТаблицаЭтапыВыпуск.Ссылка)
 	|			И (ТаблицаЭтапыГрафикВыпуск.КлючСвязиЭтапы = ТаблицаЭтапыВыпуск.КлючСвязи)
 	|			И (ТаблицаЭтапыГрафикВыпуск.КлючСвязиПродукция = ТаблицаЭтапыВыпуск.КлючСвязиПродукция)
	
			// Получаем маршрутные листы по найденным этапам графика, в которых выпускается полуфабрикат.
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводстваВыпуск
 	|		ПО (МаршрутныйЛистПроизводстваВыпуск.Распоряжение = ТаблицаЭтапыГрафикВыпуск.Ссылка)
 	|			И (МаршрутныйЛистПроизводстваВыпуск.КодСтрокиЭтапыГрафик = ТаблицаЭтапыГрафикВыпуск.КодСтроки)
 	|			И (МаршрутныйЛистПроизводстваВыпуск.Проведен)
 	|			И (МаршрутныйЛистПроизводстваВыпуск.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен))
 	|ГДЕ
 	|	НЕ МаршрутныйЛистПроизводстваВыпуск.Ссылка ЕСТЬ NULL 
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
	// Назначения указанные в выпусках
	|ВЫБРАТЬ
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Номенклатура КАК Номенклатура,
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Характеристика КАК Характеристика,
 	|	МАКСИМУМ(ТаблицаВыпускПродукции.Назначение) КАК Назначение
 	|ИЗ
 	|	СписокДокументовИМаршрутныйЛистВыпуск КАК СписокДокументовИМаршрутныйЛистВыпуск
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
 	|		ПО (ТаблицаВыходныеИзделия.Ссылка = СписокДокументовИМаршрутныйЛистВыпуск.МаршрутныйЛистВыпуск)
 	|			И (ТаблицаВыходныеИзделия.Номенклатура = СписокДокументовИМаршрутныйЛистВыпуск.Номенклатура)
 	|			И (ТаблицаВыходныеИзделия.Характеристика = СписокДокументовИМаршрутныйЛистВыпуск.Характеристика)
 	|			И (ТаблицаВыходныеИзделия.ПроизводитсяВПроцессе)
 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыпускПродукции.Товары КАК ТаблицаВыпускПродукции
 	|		ПО (ТаблицаВыпускПродукции.Распоряжение = ТаблицаВыходныеИзделия.Ссылка)
 	|			И (ТаблицаВыпускПродукции.КодСтроки = ТаблицаВыходныеИзделия.КодСтроки)
 	|			И (ТаблицаВыпускПродукции.Ссылка.Проведен)
 	|ГДЕ
 	|	НЕ ТаблицаВыпускПродукции.Ссылка ЕСТЬ NULL 
 	|
 	|СГРУППИРОВАТЬ ПО
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Номенклатура,
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Характеристика
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
 	// Назначения указанные в маршрутных листах
	|ВЫБРАТЬ
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Номенклатура,
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Характеристика,
 	|	МАКСИМУМ(СписокДокументовИМаршрутныйЛистВыпуск.Назначение) КАК Назначение
 	|ИЗ
 	|	СписокДокументовИМаршрутныйЛистВыпуск КАК СписокДокументовИМаршрутныйЛистВыпуск
 	|
 	|СГРУППИРОВАТЬ ПО
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Номенклатура,
 	|	СписокДокументовИМаршрутныйЛистВыпуск.Характеристика";

	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", КодСтрокиЭтапыГрафик);
	
	ТаблицаМатериалыИУслуги = МатериалыИУслуги.Выгрузить(Новый Структура("ПроизводитсяВПроцессе", Истина), "Номенклатура,Характеристика");
										
	Запрос.УстановитьПараметр("ТаблицаМатериалыИУслуги", ТаблицаМатериалыИУслуги);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаНазначенияМЛ = Результат[Результат.ВГраница()].Выгрузить();
	ТаблицаНазначенияВыпусков = Результат[Результат.ВГраница()-1].Выгрузить();
	
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		Если НЕ ДанныеСтроки.ПроизводитсяВПроцессе Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", ДанныеСтроки.Номенклатура, ДанныеСтроки.Характеристика);
		СписокСтрок = ТаблицаНазначенияВыпусков.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Если ДанныеСтроки.Назначение <> СписокСтрок[0].Назначение Тогда
				ДанныеСтроки.Назначение = СписокСтрок[0].Назначение;
			КонецЕсли; 
		Иначе
			СписокСтрок = ТаблицаНазначенияМЛ.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0
				И ДанныеСтроки.Назначение <> СписокСтрок[0].Назначение Тогда
				ДанныеСтроки.Назначение = СписокСтрок[0].Назначение;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Выполняет действия необходимые при изменения статуса документа
//
// Параметры:
//  СтатусДоИзменения	 - Перечисления.СтатусыМаршрутныхЛистовПроизводства - статус до изменений
//  ДатаСобытия						- Дата - дата изменения статуса, используется для заполнения прохождения маршрута
//  ЗаполнитьПроизведено			- Булево - Истина, если требуется заполнить поле Произведено в выполненном МЛ (по умолчанию Истина).
//
Процедура ПриИзмененииСтатуса(СтатусДоИзменения, ДатаСобытия = Неопределено, ЗаполнитьПроизведено = Истина) Экспорт
	
	ПроизведеноДоРедактирования = Произведено;
	ДатаСобытия = ?(ДатаСобытия = Неопределено, ТекущаяДатаСеанса(), ДатаСобытия);
	
	Если Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		Произведено = 0;
		Брак = 0;
	КонецЕсли; 
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
		
		СписокТЧ = Новый Массив;
		СписокТЧ.Добавить("ВыходныеИзделия");
		СписокТЧ.Добавить("ВозвратныеОтходы");
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			Для каждого ДанныеСтроки Из ЭтотОбъект[ИмяТЧ] Цикл
				ДанныеСтроки.КоличествоФакт = 0;
				ДанныеСтроки.КоличествоУпаковокФакт = 0;
				ДанныеСтроки.КоличествоОтклонение = -ДанныеСтроки.Количество;
				ДанныеСтроки.КоличествоУпаковокОтклонение = -ДанныеСтроки.КоличествоУпаковок;
			КонецЦикла; 
		КонецЦикла; 
		
		Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
			ДанныеСтроки.МатериалИзрасходован = Ложь;
			ДанныеСтроки.ДатаРасхода = '000101010000';
		КонецЦикла;
		
	ИначеЕсли Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен 
		И (Произведено + Брак) = 0 
		И ЗаполнитьПроизведено Тогда
		
		Произведено = Запланировано;
		ЗаполнитьФактВТабличнойЧасти(ВыходныеИзделия, Истина, Ложь);
		ЗаполнитьФактВТабличнойЧасти(ВозвратныеОтходы, Истина, Ложь);
		
	КонецЕсли;
	
	// Если выполненный МЛ делают не выполненным то нужно пересчитать нормативы по отношению к Запланировано.
	Если СтатусДоИзменения = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
		И Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен 
		И ПроизведеноДоРедактирования <> 0 Тогда
		
		КоэффициентПересчетаНормативов = Запланировано / ПроизведеноДоРедактирования;

		ПересчитатьНормативы(КоэффициентПересчетаНормативов);
	
	КонецЕсли;
	
	УстановитьОтметкуМаршрутаПоСтатусу(ДатаСобытия);
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		ЗаполнитьДатуРасходаМатериаловВыполненномМЛ();
	КонецЕсли; 
	
	// Серии
	ПараметрыУказанияСерий = Документы.МаршрутныйЛистПроизводства.ПараметрыУказанияСерий(ЭтотОбъект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий.МатериалыИУслуги);
	
КонецПроцедуры

Процедура УстановитьОтметкуМаршрутаПоСтатусу(ДатаСобытия)

	НачатоВыполнениеМаршрутногоЛиста = (Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется
										ИЛИ Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
	
		Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан
			ИЛИ Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.КВыполнению Тогда
			
			ГотовоКРаботеКлючевогоРабочегоЦентра     = Ложь;
			ЗавершенаРаботаКлючевогоРабочегоЦентра   = Ложь;
			ЗавершеноВыполнениеМаршрутногоЛиста      = Ложь;
			
		ИначеЕсли Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
			
			ГотовоКРаботеКлючевогоРабочегоЦентра   = Истина;
			ЗавершенаРаботаКлючевогоРабочегоЦентра = Истина;
			ЗавершеноВыполнениеМаршрутногоЛиста    = Истина;
			
		КонецЕсли;
		
		ОперативныйУчетПроизводстваКлиентСервер.УстановитьДатуПоОтметке(
					НачатоВыполнениеМаршрутногоЛиста, 
					ФактическоеНачало,
					ДатаСобытия);
		
		ОперативныйУчетПроизводстваКлиентСервер.УстановитьДатуПоОтметке(
					ГотовоКРаботеКлючевогоРабочегоЦентра, 
					ДатаВыполненияРаботВПредварительномБуфере,
					ДатаСобытия);
					
		ОперативныйУчетПроизводстваКлиентСервер.УстановитьДатуПоОтметке(
					ЗавершенаРаботаКлючевогоРабочегоЦентра, 
					ФактическоеОкончаниеРаботыКлючевогоРабочегоЦентра,
					ДатаСобытия);
					
		ОперативныйУчетПроизводстваКлиентСервер.УстановитьДатуПоОтметке(
					ЗавершеноВыполнениеМаршрутногоЛиста, 
					ДатаВыполненияРаботВЗавершающемБуфере,
					ДатаСобытия);
					
		ОперативныйУчетПроизводстваКлиентСервер.УстановитьДатуПоОтметке(
					ЗавершеноВыполнениеМаршрутногоЛиста, 
					ФактическоеОкончание,
					ДатаСобытия);
					
	Иначе

		Если НачатоВыполнениеМаршрутногоЛиста
			И ФактическоеНачалоВыполненияОпераций = '000101010000' Тогда
			
			ОперативныйУчетПроизводстваКлиентСервер.УстановитьДатуПоОтметке(
						Истина, 
						ФактическоеНачалоВыполненияОпераций,
						ДатаСобытия);
		КонецЕсли; 
		
		Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен
			И ДатаВыполненияОпераций = '000101010000' Тогда
			
			ОперативныйУчетПроизводстваКлиентСервер.УстановитьДатуПоОтметке(
						Истина, 
						ДатаВыполненияОпераций,
						ДатаСобытия);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФактВТабличнойЧасти(ТабличнаяЧасть, ЕстьУпаковки, ЗаполнятьНеПустыеЗначения = Истина)

	Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗаполнятьНеПустыеЗначения И ДанныеСтроки.КоличествоФакт <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.КоличествоФакт = ДанныеСтроки.Количество;
		Если ЕстьУпаковки Тогда
			ДанныеСтроки.КоличествоУпаковокФакт = ДанныеСтроки.КоличествоУпаковок;
		КонецЕсли;
		
		ДанныеСтроки.КоличествоОтклонение = 0;
		Если ЕстьУпаковки Тогда
			ДанныеСтроки.КоличествоУпаковокОтклонение = 0;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьДатуРасходаМатериаловВыполненномМЛ()
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		ДатаФакта = ДатаВыполненияОпераций;
	Иначе
		ДатаФакта = ФактическоеОкончание;
	КонецЕсли;
	
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		Если ДанныеСтроки.ДатаРасхода = '000101010000' И ДанныеСтроки.КоличествоФакт <> 0 Тогда
			ДанныеСтроки.ДатаРасхода = ДатаФакта;
			ДанныеСтроки.МатериалИзрасходован = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция СколькоОсталосьЗапланировать()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЭтапыПроизводства.ЗапланированоЗаказом) - СУММА(ЭтапыПроизводства.ЗапланированоПроизводством) КАК ЗапланированоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот           КАК ЗапланированоЗаказом,
	|		ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот 
	|			+ ЭтапыПроизводстваОбороты.КВыполнениюОборот 
	|			+ ЭтапыПроизводстваОбороты.ВыполненоОборот 
	|			+ ЭтапыПроизводстваОбороты.БракОборот                     КАК ЗапланированоПроизводством
	|	ИЗ
	|		РегистрНакопления.ЭтапыПроизводства.Обороты(
	|				,
	|				,
	|				,
	|					Распоряжение = &Распоряжение
	|					И КодСтрокиПродукция = &КодСтрокиПродукция
	|					И КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|					И Этап = &Этап
	|					И Подразделение = &Подразделение) КАК ЭтапыПроизводстваОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		-ЭтапыПроизводства.ЗапланированоПроизводством 
	|			- ЭтапыПроизводства.КВыполнению 
	|			- ЭтапыПроизводства.Выполнено
	|			- ЭтапыПроизводства.Брак
	|	ИЗ
	|		РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|	ГДЕ
	|		ЭтапыПроизводства.Регистратор = &Регистратор
	|		И ЭтапыПроизводства.Активность
	|		И ЭтапыПроизводства.Распоряжение = &Распоряжение
	|		И ЭтапыПроизводства.КодСтрокиПродукция = &КодСтрокиПродукция
	|		И ЭтапыПроизводства.КодСтрокиЭтапыГрафик = &КодСтрокиЭтапыГрафик
	|		И ЭтапыПроизводства.Этап = &Этап
	|		И ЭтапыПроизводства.Подразделение = &Подразделение) КАК ЭтапыПроизводства
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЭтапыПроизводства.ЗапланированоЗаказом) > СУММА(ЭтапыПроизводства.ЗапланированоПроизводством)";
	
	Запрос.УстановитьПараметр("Регистратор",          Ссылка);
	Запрос.УстановитьПараметр("Этап",                 Этап);
	Запрос.УстановитьПараметр("Подразделение",        Подразделение);
	Запрос.УстановитьПараметр("Распоряжение",         Распоряжение);
	Запрос.УстановитьПараметр("КодСтрокиПродукция",   КодСтроки);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", КодСтрокиЭтапыГрафик);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ЗапланированоОстаток
	
КонецФункции

// Заполняет затраты буферов если они еще не заполнены
//
Процедура ОпределитьЗатратыБуферов()

	Если ПланироватьРаботуВидовРабочихЦентров Тогда
		
		// Заполнение реквизита ЗатраченоВремениОтПредварительногоБуфера
		Если ЗатраченоВремениОтПредварительногоБуфера = 0
			И ГотовоКРаботеКлючевогоРабочегоЦентра 
			И ДатаВыполненияРаботВПредварительномБуфере <> '000101010000' Тогда
			
			ЗаполнитьСтатусПредварительныйБуфер();
			
		ИначеЕсли ЗатраченоВремениОтПредварительногоБуфера <> 0
			И (НЕ ГотовоКРаботеКлючевогоРабочегоЦентра
				ИЛИ ДатаВыполненияРаботВПредварительномБуфере = '000101010000') Тогда
			
			ЗатраченоВремениОтПредварительногоБуфера = 0;
		КонецЕсли;
		
		// Заполнение реквизита ЗатраченоВремениОтЗавершающегоБуфера
		Если ЗатраченоВремениОтЗавершающегоБуфера = 0
			И ЗавершеноВыполнениеМаршрутногоЛиста
			И ДатаВыполненияРаботВЗавершающемБуфере <> '000101010000' Тогда
			
			ЗаполнитьСтатусЗавершающийБуфер();
			
		ИначеЕсли ЗатраченоВремениОтЗавершающегоБуфера <> 0
			И (НЕ ЗавершеноВыполнениеМаршрутногоЛиста
				ИЛИ ДатаВыполненияРаботВЗавершающемБуфере = '000101010000') Тогда
			
			ЗатраченоВремениОтЗавершающегоБуфера = 0;
		КонецЕсли;
		
	Иначе
		
		Если ЗатраченоВремениОтДлительностиЭтапа = 0
			И ЗавершеноВыполнениеМаршрутногоЛиста 
			И ФактическоеОкончание <> '000101010000' Тогда
			
			ЗаполнитьСтатусЭтапа();
			
		ИначеЕсли ЗатраченоВремениОтДлительностиЭтапа <> 0
			И (НЕ ЗавершеноВыполнениеМаршрутногоЛиста 
				ИЛИ ФактическоеОкончание = '000101010000') Тогда
				
			ЗатраченоВремениОтДлительностиЭтапа = 0;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьСтатусПредварительныйБуфер()

	Если ГотовоКРаботеКлючевогоРабочегоЦентра 
		И ДатаВыполненияРаботВПредварительномБуфере <> '000101010000' Тогда
		
		КлючевойРабочийЦентрИЕгоРасписание = ОперативныйУчетПроизводства.КлючевойРабочийЦентрИЕгоРасписание(ЭтотОбъект);
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		
		ГрафикРаботыПодразделения = ?(ПараметрыПодразделения.ГрафикиРаботы.Количество() <> 0,
			ПараметрыПодразделения.ГрафикиРаботы[0],
			Справочники.Календари.ПустаяСсылка());
			
		ЗатраченоВремени = РассчитатьЗатраченноеВремя(КлючевойРабочийЦентрИЕгоРасписание.НачалоРаботыКлючевогоРабочегоЦентра, 
									ПредварительныйБуфер, 
									ЕдиницаИзмеренияПредварительногоБуфера, 
									ДатаВыполненияРаботВПредварительномБуфере,
									ГрафикРаботыПодразделения);
	Иначе
		ЗатраченоВремени = 0;
	КонецЕсли;
														
	ЗатраченоВремениОтПредварительногоБуфера = ЗатраченоВремени;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусЗавершающийБуфер()

	Если ЗавершеноВыполнениеМаршрутногоЛиста
		И ДатаВыполненияРаботВЗавершающемБуфере <> '000101010000' Тогда
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		
		ГрафикРаботыПодразделения = ?(ПараметрыПодразделения.ГрафикиРаботы.Количество() <> 0,
			ПараметрыПодразделения.ГрафикиРаботы[0],
			Справочники.Календари.ПустаяСсылка());
			
		ЗатраченоВремени = РассчитатьЗатраченноеВремя(Окончание + 60, 
									ЗавершающийБуфер, 
									ЕдиницаИзмеренияЗавершающегоБуфера, 
									ДатаВыполненияРаботВЗавершающемБуфере,
									ГрафикРаботыПодразделения);
	Иначе
		ЗатраченоВремени = 0;
	КонецЕсли;
		
	ЗатраченоВремениОтЗавершающегоБуфера = ЗатраченоВремени;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусЭтапа()
	
	ЗатраченоВремени = 0;
	
	Если ЗавершеноВыполнениеМаршрутногоЛиста 
		И ФактическоеОкончание <> '000101010000' Тогда
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		
		ГрафикРаботыПодразделения = ?(ПараметрыПодразделения.ГрафикиРаботы.Количество() <> 0,
			ПараметрыПодразделения.ГрафикиРаботы[0],
			Справочники.Календари.ПустаяСсылка());
			
		Если ДлительностьЭтапа <> 0 Тогда
			НормативноеВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
													ДлительностьЭтапа, 
													ЕдиницаИзмеренияДлительностиЭтапа);
		Иначе
			НормативноеВремя = Окончание - Начало;
			Если НормативноеВремя > 86400 Тогда
				НормативноеВремя = КалендарныеГрафики.РазностьДатПоКалендарю(
												ГрафикРаботыПодразделения,
												Начало,
												Окончание);
				НормативноеВремя = НормативноеВремя * 86400; 
			КонецЕсли;
		КонецЕсли; 
											
		ЗатраченоВремени = РассчитатьЗатраченноеВремя(
									Окончание, 
									НормативноеВремя, 
									Перечисления.ЕдиницыИзмеренияВремени.Секунда, 
									ФактическоеОкончание, 
									ГрафикРаботыПодразделения);
															
	КонецЕсли;
	
	ЗатраченоВремениОтДлительностиЭтапа = ЗатраченоВремени;

КонецПроцедуры

Функция РассчитатьЗатраченноеВремя(КонтрольнаяДата, НормативноеВремя, ЕдиницаИзмеренияВремени, ДатаВыполненияРабот, ГрафикРаботы)

	НормативноеВремяВСекундах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(НормативноеВремя, ЕдиницаИзмеренияВремени);
	Если НормативноеВремяВСекундах = 0 Тогда
		Если ДатаВыполненияРабот > КонтрольнаяДата Тогда
			Возврат 100;
		Иначе
			Возврат 0;
		КонецЕсли; 
	КонецЕсли;
	
	Если НормативноеВремяВСекундах <= 86400 Тогда
		ОстатокВремени = КонтрольнаяДата - ДатаВыполненияРабот;
	Иначе
		ОстатокВремени = КалендарныеГрафики.РазностьДатПоКалендарю(ГрафикРаботы, ДатаВыполненияРабот, КонтрольнаяДата);
		ОстатокВремени = ОстатокВремени * 86400;
		Если ДатаВыполненияРабот > КонтрольнаяДата И ОстатокВремени > 0 Тогда
			ОстатокВремени = -ОстатокВремени;
		КонецЕсли; 
	КонецЕсли; 
	
	ЗатраченоВремени = (НормативноеВремяВСекундах - ОстатокВремени) * 100 / НормативноеВремяВСекундах;
	
	Возврат Макс(ЗатраченоВремени, 0);

КонецФункции

Процедура ПривестиКПустомуЗначениюСкладЕслиОнНеВыбран(ТабличнаяЧасть)

	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если ДанныеСтроки.Получатель = Неопределено Тогда
			ДанныеСтроки.Получатель = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьБлокировкуДоступностьВидовРабочихЦентров()
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		ТребуетсяИзменениеДоступности = Истина;
	Иначе
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасписаниеРаботыРабочихЦентров");
		ЭлементБлокировки.УстановитьЗначение("МаршрутныйЛист", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист
		|ИЗ
		|	РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
		|ГДЕ
		|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		ТребуетсяИзменениеДоступности = НЕ Результат.Пустой();
	КонецЕсли; 
	
	// При проведении будет прочитана доступность видов РЦ
	// Поэтому нужно заблокировать читаемые данные.
	Если ТребуетсяИзменениеДоступности Тогда
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДоступностьВидовРабочихЦентров");
		
		ЭлементБлокировки.ИсточникДанных = ВидыРабочихЦентров;
		
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидРабочегоЦентра", "ВидРабочегоЦентра");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаИнтервала",     "ДатаИнтервала");
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверитьОперации(Отказ)
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
		ИЛИ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
		
		ВидыРЦ = ВидыРабочихЦентровОпераций();
		РеквизитыВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРЦ, "ИспользуютсяВариантыНаладки, ПараллельнаяЗагрузка");
		
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка %1 в строке %2 списка ""Операции"".';
								|en = 'Column %1 is not populated in line %2 of the ""Operations"" list.'");
		НомерСтроки = 0;
		
		Для каждого Строка Из Операции Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НЕ ЗначениеЗаполнено(Строка.Операция) Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Операции", НомерСтроки, "Операция");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НСтр("ru = '""Операция""';
						|en = '""Operation""'"),
					НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ВидРабочегоЦентра) Тогда
				ИспользуютсяВариантыНаладки = РеквизитыВидовРЦ.Получить(Строка.ВидРабочегоЦентра).ИспользуютсяВариантыНаладки;
				ПараллельнаяЗагрузка = РеквизитыВидовРЦ.Получить(Строка.ВидРабочегоЦентра).ПараллельнаяЗагрузка;
			Иначе
				ИспользуютсяВариантыНаладки = Ложь;
				ПараллельнаяЗагрузка = Ложь;
			КонецЕсли;
			
			Если ИспользуютсяВариантыНаладки И НЕ ЗначениеЗаполнено(Строка.ВариантНаладки) Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Операции", НомерСтроки, "ВариантНаладки");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НСтр("ru = '""Вариант наладки""';
						|en = '""Setup option""'"),
					НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
			Если ПараллельнаяЗагрузка И НЕ ЗначениеЗаполнено(Строка.Загрузка) Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Операции", НомерСтроки, "Загрузка");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НСтр("ru = '""Загрузка (для единицы)""';
						|en = '""Load (for unit)""'"),
					НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьВремяВыполненияОпераций()
	
	// Нормативное время меняем только в созданном МЛ
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
		
		ВидыРЦ = ВидыРабочихЦентровОпераций();
		
		Если ЗначениеЗаполнено(ВидыРЦ) Тогда
			РеквизитыВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРЦ, "ПараллельнаяЗагрузка");
		Иначе
			РеквизитыВидовРЦ = Неопределено;
		КонецЕсли;
		
		Для каждого СтрокаОперация Из Операции Цикл
			
			Если РеквизитыВидовРЦ = Неопределено Тогда
				ПараллельнаяЗагрузка = Ложь;
			Иначе
				ПараллельнаяЗагрузка = РеквизитыВидовРЦ.Получить(СтрокаОперация.ВидРабочегоЦентра).ПараллельнаяЗагрузка;
			КонецЕсли;
			
			Если НЕ ПараллельнаяЗагрузка Тогда
				СтрокаОперация.ВремяВыполнения = (СтрокаОперация.ВремяШтучное * Запланировано) + СтрокаОперация.ВремяПЗ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыРабочихЦентровОпераций()
	
	Результат = Новый Массив;
	Для каждого Строка Из Операции Цикл
		Если ЗначениеЗаполнено(Строка.ВидРабочегоЦентра) Тогда
			Результат.Добавить(Строка.ВидРабочегоЦентра);
		КонецЕсли;
	КонецЦикла;
	Результат = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОперациямРасписанияСтатусЗавершено()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПооперационноеРасписание.ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.Моделирование = ЛОЖЬ
	|	И ПооперационноеРасписание.МаршрутныйЛист = &МаршрутныйЛист
	|	И ПооперационноеРасписание.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)");
	Запрос.УстановитьПараметр("МаршрутныйЛист", ЭтотОбъект.Ссылка);
	
	ОперацииДляИзменения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторОперации");
	Если ОперацииДляИзменения.Количество() > 0 Тогда
		РегистрыСведений.ПооперационноеРасписание.ИзменитьСтатусОпераций(ОперацииДляИзменения, Перечисления.СтатусыВыполненияОпераций.Завершено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыОперацийПриКопировании()
	
	ОкончаниеВыполненияОпераций = '00010101';
	ФактическоеНачалоВыполненияОпераций = '00010101';
	ДатаВыполненияОпераций = '00010101';
	
	СостояниеРасписания = Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано;
	
	Для каждого Строка Из Операции Цикл
		Строка.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.НеНачато;
	КонецЦикла;
	
	ПерезаполнитьКлючСвязиОпераций();
	
КонецПроцедуры

Процедура ПерезаполнитьКлючСвязиОпераций()
	
	СтруктураПоиска = Новый Структура("КлючСвязиОперации");
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("ВыходныеИзделия");
	ТабличныеЧасти.Добавить("ВозвратныеОтходы");
	ТабличныеЧасти.Добавить("МатериалыИУслуги");
	ТабличныеЧасти.Добавить("Трудозатраты");
	ТабличныеЧасти.Добавить("ВспомогательныеРабочиеЦентры");
	
	Для каждого Строка Из Операции Цикл
		
		КлючСвязиНовый = Новый УникальныйИдентификатор;
		СтруктураПоиска.КлючСвязиОперации = Строка.КлючСвязи;
		
		Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			НайденныеСтроки = ЭтотОбъект[ТабличнаяЧасть].НайтиСтроки(СтруктураПоиска);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.КлючСвязиОперации = КлючСвязиНовый;
			КонецЦикла;
			
		КонецЦикла;
		
		Строка.КлючСвязи = КлючСвязиНовый;
		
	КонецЦикла;
	
КонецПроцедуры

// ИнтеграцияГИСМ
Процедура ЗаполнитьПризнакЕстьМаркируемаяПродукция()
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаНоменклатура
	|ГДЕ
	|	ТаблицаНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
	|	И ТаблицаНоменклатура.Ссылка В (&ВыходныеИзделия)
	|	ИЛИ ТаблицаНоменклатура.Ссылка В (&ВозвратныеОтходы)";
	
	Запрос.УстановитьПараметр("ВыходныеИзделия", ВыходныеИзделия.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ВозвратныеОтходы", ВозвратныеОтходы.ВыгрузитьКолонку("Номенклатура"));
	ЕстьМаркируемаяПродукцияГИСМ = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

Процедура ПроверитьСоответствиеСтатусаИМетодикиУправления(Отказ)
	
	Если Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполняется
		И НЕ УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
			ПараметрМетодика = НСтр("ru = 'Пооперационное планирование';
									|en = 'Manufacturing execution system'");
		Иначе
			ПараметрМетодика = НСтр("ru = 'Регистрация операций';
									|en = 'Operation registration'");
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Статус ""Выполняется"" не может быть установлен для документа с методикой управления ""%1"".';
				|en = 'The ""In progress"" status cannot be set for document with management method ""%1"".'"),
			ПараметрМетодика);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Статус",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21