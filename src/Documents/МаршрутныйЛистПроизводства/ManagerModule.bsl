//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ДоступностьРабочихЦентров");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("Производство");
	МеханизмыДокумента.Добавить("Производство21");
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетРабот");
	МеханизмыДокумента.Добавить("УчетНДС");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.МаршрутныйЛистПроизводства") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаЭтапыПроизводства(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаОперацииМаршрутовПроизводства(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСостоянияРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыНаПроизводствоТрудозатраты(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРаспоряженияНаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаБракВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПотребностьВМатериалахВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ВыработкаСотрудников.ДобавитьКомандуСоздатьНаОснованииСозданиеВыработкиСотрудников(КомандыСозданияНаОсновании);
	
	Документы.ВозвратМатериаловИзПроизводства.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Обработки.ВводКорректировкиЗаказаМатериалов.ДобавитьКомандуСоздатьНаОснованииОтгрузкаПоМаршрутнымЛистам(КомандыСозданияНаОсновании);
	
	Документы.ВыпускПродукции.ДобавитьКомандуСоздатьНаОснованииМаршрутныхЛистов(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Маршрутный лист производства".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.МаршрутныйЛистПроизводства) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.МаршрутныйЛистПроизводства.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.МаршрутныйЛистПроизводства);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ НЕ УТКА
	Отчеты.ПередачаМатериаловПоЗаказу.ДобавитьКомандуПередачаМатериаловПоЗаказуМЛ(КомандыОтчетов);
	//-- НЕ УТКА
	
КонецПроцедуры

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Получатель,Подразделение,Статус,Дата,ХозяйственнаяОперация,Спецификация,СпецификацияПолуфабриката";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для материалов, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыСерийОтправитель = СкладыСервер.ИспользованиеСерийВПодразделении(Объект.Подразделение);

	#Область Материалы
	ПараметрыУказанияСерийМатериалов = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийМатериалов.ПолноеИмяОбъекта = "Документ.МаршрутныйЛистПроизводства";
	
	ПараметрыУказанияСерийМатериалов.ПараметрыЗапроса.Вставить("Спецификация", ?(Объект.СпецификацияПолуфабриката.Пустая(), 
																					Объект.Спецификация, 
																					Объект.СпецификацияПолуфабриката));
	
	ПараметрыУказанияСерийМатериалов.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийМатериалов.ИмяТЧТовары = "МатериалыИУслуги";
	ПараметрыУказанияСерийМатериалов.ИмяТЧСерии  = "МатериалыИУслуги";
	
	ПараметрыУказанияСерийМатериалов.ИмяПоляКоличество = "КоличествоФакт";
	
	ИспользуетсяСправочноеУказаниеСерий = НоменклатураСервер.ИспользуетсяСправочноеУказаниеСерийВМаршрутныхЛистах(
											Объект.Спецификация, Перечисления.ВидыСтрокДереваСпецификаций.Материал);
											
	ПараметрыУказанияСерийМатериалов.ИспользоватьСерииНоменклатуры  = ПараметрыСерийОтправитель.ИспользоватьСерииНоменклатуры
																		ИЛИ ИспользуетсяСправочноеУказаниеСерий;
																		
	ПараметрыУказанияСерийМатериалов.УчитыватьСебестоимостьПоСериям = ПараметрыСерийОтправитель.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерийМатериалов.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве);
	
	ПараметрыУказанияСерийМатериалов.ИменаПолейДополнительные.Добавить("Назначение");
	ПараметрыУказанияСерийМатериалов.ИменаПолейДополнительные.Добавить("МатериалИзрасходован");
	
	ПараметрыУказанияСерийМатериалов.ЭтоНакладная = Истина;
	ПараметрыУказанияСерийМатериалов.РегистрироватьСерии = Истина; // всегда используется форма регистрации серий (в ней можно также выбрать из остатков)
	
	ПараметрыУказанияСерийМатериалов.ПланированиеОтгрузки = (Объект.Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
	ПараметрыУказанияСерийМатериалов.ПланированиеОтбора   = (Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
	ПараметрыУказанияСерийМатериалов.ФактОтбора           = (Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
	
	ПараметрыУказанияСерийМатериалов.Дата = Объект.Дата;
	#КонецОбласти
	
	#Область Изделия
	ПараметрыУказанияСерийИзделий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийИзделий.ПолноеИмяОбъекта = "Документ.МаршрутныйЛистПроизводства";
	
	ПараметрыУказанияСерийИзделий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерийИзделий.ПоляСвязи.Добавить("Получатель");
	
	ПараметрыУказанияСерийИзделий.ПараметрыЗапроса.Вставить("Спецификация", ?(Объект.СпецификацияПолуфабриката.Пустая(), 
																					Объект.Спецификация, 
																					Объект.СпецификацияПолуфабриката));
	
	ПараметрыУказанияСерийИзделий.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийИзделий.ИмяТЧТовары = "ВыходныеИзделия";
	ПараметрыУказанияСерийИзделий.ИмяТЧСерии  = "ВыходныеИзделияСерии";
	
	ПараметрыУказанияСерийИзделий.ИмяПоляКоличество = "КоличествоФакт";
	
	ИспользуетсяСправочноеУказаниеСерий = НоменклатураСервер.ИспользуетсяСправочноеУказаниеСерийВМаршрутныхЛистах(
												Объект.Спецификация, Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие);
												
	ПараметрыУказанияСерийИзделий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийОтправитель.ИспользоватьСерииНоменклатуры
																	ИЛИ ИспользуетсяСправочноеУказаниеСерий;
																	
	ПараметрыУказанияСерийИзделий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийОтправитель.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерийИзделий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПроизводствоПродукции);
	ПараметрыУказанияСерийИзделий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	ПараметрыУказанияСерийИзделий.ФактОтбора = (Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
	
	ПараметрыУказанияСерийИзделий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийИзделий.Дата = Объект.Дата;
	ПараметрыУказанияСерийИзделий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");
	#КонецОбласти
		
	ПараметрыУказанияСерий = Новый Структура;
	ПараметрыУказанияСерий.Вставить("МатериалыИУслуги", ПараметрыУказанияСерийМатериалов);
	ПараметрыУказанияСерий.Вставить("ВыходныеИзделия", ПараметрыУказанияСерийИзделий);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПроизводствоПродукции) <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийИзделия();
	Иначе
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалы();
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//    поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//   ДокументСсылка.МаршрутныйЛистПроизводства
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыМаршрутныхЛистовПроизводства[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.Статус КАК ТекущийСтатус,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ * ИЗ втДокументы КАК втДокументы";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Если ВыборкаПроверки.ТекущийСтатус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен Тогда
		
		ТекстОшибки = НСтр("ru = 'Не допускается изменять статус отмененного маршрутного листа.';
							|en = 'It is not allowed to change the status of a canceled route sheet.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет порядок операций
//
// Параметры:
//	Операции		- ТабличнаяЧасть, ТаблицаЗначений - содержит данные табличной части "Операции"
//	КлючДанных		- ДокументСсылка.МаршрутныйЛистПроизводства - ссылка на маршрутный лист,
//		которому принадлежат проверяемые операции
//  ПутьКДанным     - Строка - путь к данным (путь к реквизиту формы), используется для корректного вывода сообщений
//  Отказ 			- Булево - истина, если найдены ошибки.
//
// Возвращаемое значение:
//   Булево   - Истина, если порядок операций правильный.
//
Функция ПроверитьПорядокОпераций(Операции, КлючДанных = Неопределено, ПутьКДанным = "", Отказ = Ложь) Экспорт

	ЕстьОшибки = Ложь;
	
	СтруктураСообщений = Новый Структура;
	
	СтруктураСообщений.Вставить(
		"НетПервойОперации", НСтр("ru = 'Отсутствует первая операция.';
									|en = 'The first operation is missing.'"));
	
	СтруктураСообщений.Вставить(
		"НесколькоПервыхОпераций", НСтр("ru = 'Не может быть несколько первых операций.';
										|en = 'There cannot be several first operations.'"));
	
	СтруктураСообщений.Вставить(
		"НетПоследнейОперации", НСтр("ru = 'Отсутствует последняя операция.';
									|en = 'The last operation is missing.'"));
	
	СтруктураСообщений.Вставить(
		"НетСледующейОперации", НСтр("ru = 'Операция ""%1"" ссылается на несуществующую операцию.';
									|en = 'The ""%1"" operation refers to a non-existing operation.'"));
	
	СтруктураСообщений.Вставить(
		"НомерСледующейБольше", НСтр("ru = 'Номер операции ""%1"" должен быть меньше номера следующей.';
									|en = 'The ""%1"" operation number should be less than the number of the following one.'"));
	
	КоличествоПервыхОпераций    = 0;
	КоличествоПоследнихОпераций = 0;
	Для каждого СтрокаОперация Из Операции Цикл
		
		Если СтрокаОперация.НомерОперации = 1 Тогда
			КоличествоПервыхОпераций = КоличествоПервыхОпераций + 1;
		КонецЕсли;
		
		Если СтрокаОперация.НомерСледующейОперации = 0 Тогда
			КоличествоПоследнихОпераций = КоличествоПоследнихОпераций + 1;
		КонецЕсли; 
		
		Если СтрокаОперация.НомерСледующейОперации <> 0 Тогда
			СтруктураПоиска = Новый Структура("НомерОперации", СтрокаОперация.НомерСледующейОперации);
	  		СписокСтрок = Операции.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											СтруктураСообщений.НетСледующейОперации,
											СтрокаОперация.Операция);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Операции", СтрокаОперация.НомерСтроки, "НомерСледующейОперации");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ); 
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		Если (СтрокаОперация.НомерОперации >= СтрокаОперация.НомерСледующейОперации 
				И СтрокаОперация.НомерСледующейОперации <> 0)
			ИЛИ (СтрокаОперация.НомерОперации = 0
				И СтрокаОперация.НомерСледующейОперации = 0) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										СтруктураСообщений.НомерСледующейБольше,
										СтрокаОперация.Операция);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Операции", СтрокаОперация.НомерСтроки, "НомерОперации");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ); 
			ЕстьОшибки = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если КоличествоПервыхОпераций = 0 И Операции.Количество() <> 0 Тогда
		ТекстСообщения = СтруктураСообщений.НетПервойОперации;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных,, ПутьКДанным, Отказ); 
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если КоличествоПервыхОпераций > 1 Тогда
		ТекстСообщения = СтруктураСообщений.НесколькоПервыхОпераций;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных,, ПутьКДанным, Отказ); 
		ЕстьОшибки = Истина;
	КонецЕсли; 
	
	Если КоличествоПоследнихОпераций = 0 И Операции.Количество() <> 0 Тогда
		ТекстСообщения = СтруктураСообщений.НетПоследнейОперации;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных,, ПутьКДанным, Отказ); 
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;

КонецФункции

// Возвращает данные о выполнении смежных этапов
//
// Параметры:
//  МаршрутныеЛисты	- Массив, ДокументСсылка.МаршрутныйЛистПроизводства - маршрутные листы, по которым нужно получить данные о выполнении смежных этапов.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - данные о выполнении смежных этапов.
//
Функция ВыполнениеСмежныхЭтапов(МаршрутныеЛисты) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|	МаршрутныйЛистПроизводства.Подразделение КАК Подразделение,
	|	МаршрутныйЛистПроизводства.Распоряжение КАК Распоряжение,
	|	МаршрутныйЛистПроизводства.КодСтроки КАК КодСтрокиПродукция,
	|	МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ВТ_ВыборкаДокументов
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка В(&МаршрутныеЛисты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БракОстатки.МаршрутныйЛист.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	БракОстатки.МаршрутныйЛист.Распоряжение КАК Распоряжение,
	|	СУММА(БракОстатки.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ ВТБрак
	|ИЗ
	|	РегистрНакопления.БракВПроизводстве.Остатки КАК БракОстатки
	|ГДЕ
	|	БракОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	БракОстатки.МаршрутныйЛист.Распоряжение,
	|	БракОстатки.МаршрутныйЛист.КодСтрокиЭтапыГрафик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыполнениеЭтаповГрафика.Распоряжение КАК Распоряжение,
	|	ВыполнениеЭтаповГрафика.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ВыполнениеЭтаповГрафика.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ВыполнениеЭтаповГрафика.ЗапланированоЗаказомОборот КАК Запланировано,
	|	ВыполнениеЭтаповГрафика.ЗапланированоПроизводствомОборот КАК ЗапланированоПроизводством,
	|	ВыполнениеЭтаповГрафика.КВыполнениюОборот КАК КВыполнению,
	|	ВыполнениеЭтаповГрафика.ВыполненоОборот КАК Выполнено,
	|	ВыполнениеЭтаповГрафика.БракОборот КАК Брак
	|ПОМЕСТИТЬ ВыполнениеЭтаповГрафика
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			(Распоряжение, КодСтрокиПродукция) В
	|				(ВЫБРАТЬ
	|					ВТ_ВыборкаДокументов.Распоряжение,
	|					ВТ_ВыборкаДокументов.КодСтрокиПродукция
	|				ИЗ
	|					ВТ_ВыборкаДокументов)) КАК ВыполнениеЭтаповГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|	МаршрутныйЛистПроизводства.Распоряжение КАК Распоряжение,
	|	ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НаименованиеЭтапа,
	|	ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерЭтапа,
	|	ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Подразделение,
	|	ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Подразделение.ТекущийРуководитель КАК Диспетчер,
	|	ЕСТЬNULL(ВыполнениеЭтаповГрафика.Запланировано, ЗаказНаПроизводствоЭтапы.Количество) КАК Запланировано,
	|	ЕСТЬNULL(ВыполнениеЭтаповГрафика.Выполнено, 0) КАК Произведено,
	|	ЕСТЬNULL(ВТБрак.Количество, 0) КАК Брак,
	|	ЕСТЬNULL(ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.НачалоПредварительногоБуфера, ДАТАВРЕМЯ(1, 1, 1)) КАК Начало,
	|	ЕСТЬNULL(ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.ОкончаниеЗавершающегоБуфера, ДАТАВРЕМЯ(1, 1, 1)) КАК Окончание,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = ЗаказНаПроизводствоЭтапы.НомерЭтапа
	|				ИЛИ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи
	|					И ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПредыдущийЭтап,
	|	ЕСТЬNULL(ЗаказНаПроизводствоМатериалыИУслуги.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Полуфабрикат,
	|	ЕСТЬNULL(ЗаказНаПроизводствоМатериалыИУслуги.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ПолуфабрикатХарактеристика,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.Ссылка ЕСТЬ NULL 
	|			ТОГДА 9
	|		КОГДА ЕСТЬNULL(ВТБрак.Количество, 0) = 0
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.Выполнено, 0) + ЕСТЬNULL(ВыполнениеЭтаповГрафика.Брак, 0) = ЕСТЬNULL(ВыполнениеЭтаповГрафика.Запланировано, 0)
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.Запланировано, 0) > 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ВТБрак.Количество, 0) > 0
	|			ТОГДА 3
	|		КОГДА &НачалоТекущегоЧаса >= ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.ОкончаниеЭтапа
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.ЗапланированоПроизводством, 0) = 0
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.КВыполнению, 0) = 0
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.Выполнено, 0) + ЕСТЬNULL(ВыполнениеЭтаповГрафика.Брак, 0) <> ЕСТЬNULL(ВыполнениеЭтаповГрафика.Запланировано, 0)
	|			ТОГДА 4
	|		КОГДА &НачалоТекущегоЧаса >= ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.НачалоЭтапа
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.ЗапланированоПроизводством, 0) = 0
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.КВыполнению, 0) = 0
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.Выполнено, 0) + ЕСТЬNULL(ВыполнениеЭтаповГрафика.Брак, 0) <> ЕСТЬNULL(ВыполнениеЭтаповГрафика.Запланировано, 0)
	|			ТОГДА 5
	|		КОГДА &НачалоТекущегоЧаса <= ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.НачалоПредварительногоБуфера
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.ЗапланированоПроизводством, 0) = 0
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.КВыполнению, 0) = 0
	|				И ЕСТЬNULL(ВыполнениеЭтаповГрафика.Выполнено, 0) + ЕСТЬNULL(ВыполнениеЭтаповГрафика.Брак, 0) <> ЕСТЬNULL(ВыполнениеЭтаповГрафика.Запланировано, 0)
	|			ТОГДА 6
	|		КОГДА &НачалоТекущегоЧаса >= ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.ОкончаниеЭтапа
	|				И (ЕСТЬNULL(ВыполнениеЭтаповГрафика.КВыполнению, 0) > 0
	|					ИЛИ ЕСТЬNULL(ВыполнениеЭтаповГрафика.ЗапланированоПроизводством, 0) > 0)
	|			ТОГДА 7
	|		КОГДА &НачалоТекущегоЧаса >= ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.ОкончаниеЗавершающегоБуфера
	|				И (ЕСТЬNULL(ВыполнениеЭтаповГрафика.КВыполнению, 0) > 0
	|					ИЛИ ЕСТЬNULL(ВыполнениеЭтаповГрафика.ЗапланированоПроизводством, 0) > 0)
	|			ТОГДА 8
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК КодСостояния,
	|	МаршрутныйЛистПроизводства.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязи,
	|	ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПолуфабрикат,
	|	ЕСТЬNULL(ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КодСтроки, 0) КАК КодСтрокиЭтапыГрафик
	|ИЗ
	|	ВТ_ВыборкаДокументов КАК МаршрутныйЛистПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = МаршрутныйЛистПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки = МаршрутныйЛистПроизводства.КодСтрокиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = МаршрутныйЛистПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы
	|		ПО (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПолуфабрикат = ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат
	|					И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = ЗаказНаПроизводствоЭтапы.НомерЭтапа
	|						ИЛИ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерЭтапа = ЗаказНаПроизводствоЭтапы.НомерСледующегоЭтапа)
	|				ИЛИ ЗаказНаПроизводствоЭтапы.НомерСледующегоЭтапа = 0
	|					И ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапы.КлючСвязиЭтапы
	|				ИЛИ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи
	|					И ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.Ссылка = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КлючСвязиЭтапы = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполнениеЭтаповГрафика КАК ВыполнениеЭтаповГрафика
	|		ПО (ВыполнениеЭтаповГрафика.Распоряжение = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.Ссылка)
	|			И (ВыполнениеЭтаповГрафика.КодСтрокиПродукция = ЗаказНаПроизводствоПродукция.КодСтроки)
	|			И (ВыполнениеЭтаповГрафика.КодСтрокиЭтапыГрафик = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КодСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказНаПроизводствоМатериалыИУслуги
	|		ПО (ЗаказНаПроизводствоМатериалыИУслуги.Ссылка = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязиПродукция = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоМатериалыИУслуги.КлючСвязи = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПолуфабрикат)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБрак КАК ВТБрак
	|		ПО (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.Ссылка = ВТБрак.Распоряжение)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КодСтроки = ВТБрак.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	НЕ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка ЕСТЬ NULL";
	
	Если ТипЗнч(МаршрутныеЛисты) = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		СписокМаршрутныхЛистов = Новый Массив;
		СписокМаршрутныхЛистов.Добавить(МаршрутныеЛисты);
	Иначе
		СписокМаршрутныхЛистов = МаршрутныеЛисты;
	КонецЕсли;
	Запрос.УстановитьПараметр("МаршрутныеЛисты", СписокМаршрутныхЛистов);
	
	Запрос.УстановитьПараметр("НачалоТекущегоЧаса", НачалоЧаса(ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("ТекстСостояния", Новый ОписаниеТипов("Строка"));
	ТаблицаСостоянийЭтапов = Обработки.ДиспетчированиеГрафикаПроизводства.ТаблицаСостоянийЭтапов();
	Для каждого ДанныеОВыполненииЭтапа Из Результат Цикл
		СтрокаСостояние = ТаблицаСостоянийЭтапов.Найти(ДанныеОВыполненииЭтапа.КодСостояния, "КодСостояния");
		Если СтрокаСостояние <> Неопределено Тогда
			ДанныеОВыполненииЭтапа.ТекстСостояния = СтрокаСостояние.ТекстСостояния;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные о выполнении предыдущих этапов
//
// Параметры:
//  МаршрутныеЛисты	- Массив - маршрутные листы, по которым нужно получить данные о выполнении предыдущих этапов.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - данные о выполнении предыдущих этапов.
//
Функция ВыполнениеПредыдущихЭтапов(МаршрутныеЛисты) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|	МаршрутныйЛистПроизводства.Подразделение КАК Подразделение,
	|	МаршрутныйЛистПроизводства.Распоряжение КАК Распоряжение,
	|	МаршрутныйЛистПроизводства.КодСтроки КАК КодСтрокиПродукция,
	|	МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ВТ_ВыборкаДокументов
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка В(&МаршрутныеЛисты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыполнениеЭтаповГрафика.Распоряжение КАК Распоряжение,
	|	ВыполнениеЭтаповГрафика.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ВыполнениеЭтаповГрафика.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ВыполнениеЭтаповГрафика.ЗапланированоЗаказомОборот КАК Запланировано,
	|	ВыполнениеЭтаповГрафика.ЗапланированоПроизводствомОборот КАК ЗапланированоПроизводством,
	|	ВыполнениеЭтаповГрафика.КВыполнениюОборот КАК КВыполнению,
	|	ВыполнениеЭтаповГрафика.ВыполненоОборот КАК Выполнено,
	|	ВыполнениеЭтаповГрафика.БракОборот КАК Брак
	|ПОМЕСТИТЬ ВыполнениеЭтаповГрафика
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			(Распоряжение, КодСтрокиПродукция) В
	|				(ВЫБРАТЬ
	|					ВТ_ВыборкаДокументов.Распоряжение,
	|					ВТ_ВыборкаДокументов.КодСтрокиПродукция
	|				ИЗ
	|					ВТ_ВыборкаДокументов)) КАК ВыполнениеЭтаповГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВыполнениеЭтаповГрафика.Выполнено, 0) КАК Произведено
	|ИЗ
	|	ВТ_ВыборкаДокументов КАК МаршрутныйЛистПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = МаршрутныйЛистПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки = МаршрутныйЛистПроизводства.КодСтрокиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = МаршрутныйЛистПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы
	|		ПО (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПолуфабрикат = ЗаказНаПроизводствоЭтапы.КлючСвязиПолуфабрикат
	|					И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = ЗаказНаПроизводствоЭтапы.НомерЭтапа
	|						ИЛИ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерЭтапа = ЗаказНаПроизводствоЭтапы.НомерСледующегоЭтапа)
	|				ИЛИ ЗаказНаПроизводствоЭтапы.НомерСледующегоЭтапа = 0
	|					И ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапы.КлючСвязиЭтапы
	|				ИЛИ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи
	|					И ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.НомерСледующегоЭтапа = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик
	|		ПО (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.Ссылка = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КлючСвязиЭтапы = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КлючСвязиПродукция = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыполнениеЭтаповГрафика КАК ВыполнениеЭтаповГрафика
	|		ПО (ВыполнениеЭтаповГрафика.Распоряжение = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.Ссылка)
	|			И (ВыполнениеЭтаповГрафика.КодСтрокиПродукция = ЗаказНаПроизводствоПродукция.КодСтроки)
	|			И (ВыполнениеЭтаповГрафика.КодСтрокиЭтапыГрафик = ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапыГрафик.КодСтроки)
	|ГДЕ
	|	НЕ ЗаказНаПроизводствоПредыдущиеИСледующиеЭтапы.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("МаршрутныеЛисты", МаршрутныеЛисты);
	Запрос.УстановитьПараметр("НачалоТекущегоЧаса", НачалоЧаса(ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает остатки материалов в подразделении по маршрутным листам
//
// Параметры:
//  СписокМаршрутныхЛистов	- Массив - маршрутные листы, по которым нужно получить остатки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные о дефиците материалов.
//		Значение дефицита 0 - материалов хватит всем созданным и переданным к выполнению МЛ (индикатор не выводится).
//		Значение дефицита 1 - материалов хватит текущему МЛ, но остальным МЛ может не хватить (выводится желтый индикатор).
//		Значение дефицита 2 - материалов не хватает текущему МЛ (выводится красный индикатор).
//
Функция ОстаткиМатериаловВПодразделенииПоМаршрутнымЛистам(СписокМаршрутныхЛистов) Экспорт

	// Для оптимизации алгоритм выборки такой
	// 1. Найти среди выбранных МЛ те которым не хватает материалов
	// 2. Для тех которым хватает получить остальные МЛ и проверить хватит ли всем.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаршрутныеЛисты", СписокМаршрутныхЛистов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Ссылка,
	|	МаршрутныйЛистПроизводства.Организация,
	|	МаршрутныйЛистПроизводства.Статус,
	|	МаршрутныйЛистПроизводства.Подразделение КАК Подразделение,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Характеристика КАК Характеристика,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Назначение КАК Назначение,
	|	СУММА(МаршрутныйЛистПроизводстваМатериалыИУслуги.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_МатериалыВыбранныхМЛ
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК МаршрутныйЛистПроизводстваМатериалыИУслуги
	|		ПО (МаршрутныйЛистПроизводстваМатериалыИУслуги.Ссылка = МаршрутныйЛистПроизводства.Ссылка)
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка В(&МаршрутныеЛисты)
	|	И (МаршрутныйЛистПроизводства.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан), 
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению), 
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется)))
	|
	|	И МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура.ТипНоменклатуры 
	|						В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Характеристика,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Назначение,
	|	МаршрутныйЛистПроизводства.Ссылка,
	|	МаршрутныйЛистПроизводства.Организация,
	|	МаршрутныйЛистПроизводства.Статус,
	|	МаршрутныйЛистПроизводства.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаОстаткиМатериаловВПодразделенииПоМаршрутнымЛистам();
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МатериалыВыбранныхМЛ.Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА НЕ ВТ_МатериалыМЛКоторымНеХватает.Ссылка ЕСТЬ NULL
	|					ТОГДА 2
	|				КОГДА ВТ_МатериалыВыбранныхМЛ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|						И ЕСТЬNULL(ВТ_МатериалыВсехМЛ.КоличествоВсе, 0) > ЕСТЬNULL(ВТ_ОстаткиВПодразделенииПоВсемМЛ.Количество, 0)
	|					ТОГДА 1
	|				КОГДА ВТ_МатериалыВыбранныхМЛ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|						И ЕСТЬNULL(ВТ_МатериалыВсехМЛ.КоличествоТолькоКВыполнению, 0) > ЕСТЬNULL(ВТ_ОстаткиВПодразделенииПоВсемМЛ.Количество, 0)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДефицитМатериалов
	|ИЗ
	|	ВТ_МатериалыВыбранныхМЛ КАК ВТ_МатериалыВыбранныхМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалыМЛКоторымНеХватает КАК ВТ_МатериалыМЛКоторымНеХватает
	|		ПО ВТ_МатериалыМЛКоторымНеХватает.Ссылка = ВТ_МатериалыВыбранныхМЛ.Ссылка
	|			И ВТ_МатериалыМЛКоторымНеХватает.Номенклатура = ВТ_МатериалыВыбранныхМЛ.Номенклатура
	|			И ВТ_МатериалыМЛКоторымНеХватает.Характеристика = ВТ_МатериалыВыбранныхМЛ.Характеристика
	|			И ВТ_МатериалыМЛКоторымНеХватает.Назначение = ВТ_МатериалыВыбранныхМЛ.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалыМЛКоторымХватает КАК ВТ_МатериалыМЛКоторымХватает
	|		ПО ВТ_МатериалыМЛКоторымХватает.Ссылка = ВТ_МатериалыВыбранныхМЛ.Ссылка
	|			И ВТ_МатериалыМЛКоторымХватает.Номенклатура = ВТ_МатериалыВыбранныхМЛ.Номенклатура
	|			И ВТ_МатериалыМЛКоторымХватает.Характеристика = ВТ_МатериалыВыбранныхМЛ.Характеристика
	|			И ВТ_МатериалыМЛКоторымХватает.Назначение = ВТ_МатериалыВыбранныхМЛ.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалыВсехМЛ КАК ВТ_МатериалыВсехМЛ
	|		ПО ВТ_МатериалыВсехМЛ.Номенклатура = ВТ_МатериалыМЛКоторымХватает.Номенклатура
	|			И ВТ_МатериалыВсехМЛ.Характеристика = ВТ_МатериалыМЛКоторымХватает.Характеристика
	|			И ВТ_МатериалыВсехМЛ.Назначение = ВТ_МатериалыМЛКоторымХватает.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиВПодразделенииПоВсемМЛ КАК ВТ_ОстаткиВПодразделенииПоВсемМЛ
	|		ПО ВТ_ОстаткиВПодразделенииПоВсемМЛ.Номенклатура = ВТ_МатериалыМЛКоторымХватает.Номенклатура
	|			И ВТ_ОстаткиВПодразделенииПоВсемМЛ.Характеристика = ВТ_МатериалыМЛКоторымХватает.Характеристика
	|			И ВТ_ОстаткиВПодразделенииПоВсемМЛ.Назначение = ВТ_МатериалыМЛКоторымХватает.Назначение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МатериалыВыбранныхМЛ.Ссылка";
	
	ОстаткиМатериалов = Запрос.Выполнить().Выгрузить();

	Возврат ОстаткиМатериалов;
	
КонецФункции

// Возвращает остатки материалов в подразделении по маршрутному листу.
//
// Параметры:
//  Объект	- ДанныеФормыСтруктура - документ "Маршрутный лист производства".
//  МассивСтрок - Массив - строки ТЧ МатериалыИУслуги по номенклатуре которых необходимо получить остатки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные о дефиците материалов.
//		Значение дефицита 0 - материалов хватит всем созданным и переданным к выполнению МЛ (индикатор не выводится).
//		Значение дефицита 1 - материалов хватит текущему МЛ, но остальным МЛ может не хватить (выводится желтый индикатор).
//		Значение дефицита 2 - материалов не хватает текущему МЛ (выводится красный индикатор).
//
Функция ОстаткиМатериаловВПодразделенииМаршрутногоЛиста(Объект, МассивСтрок = Неопределено) Экспорт
	
	// Для оптимизации алгоритм выборки такой
	// 1. Найти среди выбранных МЛ те которым не хватает материалов
	// 2. Для тех которым хватает получить остальные МЛ и проверить хватит ли всем.
	
	ТаблицаМатериалы = Объект.МатериалыИУслуги.Выгрузить(МассивСтрок, "Номенклатура,Характеристика,Назначение,Количество");
	ТаблицаМатериалы.Свернуть("Номенклатура,Характеристика,Назначение", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Статус", Объект.Статус);
	Запрос.УстановитьПараметр("ТаблицаМатериалы", ТаблицаМатериалы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Характеристика,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Назначение,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаМатериалы
	|ИЗ
	|	&ТаблицаМатериалы КАК МаршрутныйЛистПроизводстваМатериалыИУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка,
	|	&Подразделение КАК Подразделение,
	|	&Организация КАК Организация,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Характеристика,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Назначение КАК Назначение,
	|	МаршрутныйЛистПроизводстваМатериалыИУслуги.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_МатериалыВыбранныхМЛ
	|ИЗ
	|	ВТ_ТаблицаМатериалы КАК МаршрутныйЛистПроизводстваМатериалыИУслуги
	|ГДЕ
	|	ВЫРАЗИТЬ(МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры 
	|						В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаОстаткиМатериаловВПодразделенииПоМаршрутнымЛистам();
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МатериалыВыбранныхМЛ.Ссылка,
	|	ВТ_МатериалыВыбранныхМЛ.Номенклатура,
	|	ВТ_МатериалыВыбранныхМЛ.Характеристика,
	|	ВТ_МатериалыВыбранныхМЛ.Назначение,
	|	ЕСТЬNULL(ВТ_МатериалыМЛКоторымНеХватает.ОстатокВПодразделении, ЕСТЬNULL(ВТ_ОстаткиВПодразделенииПоВсемМЛ.Количество, 0)) КАК ОстатокВПодразделении,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_МатериалыМЛКоторымНеХватает.Ссылка ЕСТЬ NULL
	|			ТОГДА 2
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|				И ЕСТЬNULL(ВТ_МатериалыВсехМЛ.КоличествоВсе, 0) > ЕСТЬNULL(ВТ_ОстаткиВПодразделенииПоВсемМЛ.Количество, 0)
	|			ТОГДА 1
	|		КОГДА &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|				И ЕСТЬNULL(ВТ_МатериалыВсехМЛ.КоличествоТолькоКВыполнению, 0) > ЕСТЬNULL(ВТ_ОстаткиВПодразделенииПоВсемМЛ.Количество, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДефицитМатериалов
	|ИЗ
	|	ВТ_МатериалыВыбранныхМЛ КАК ВТ_МатериалыВыбранныхМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалыМЛКоторымНеХватает КАК ВТ_МатериалыМЛКоторымНеХватает
	|		ПО ВТ_МатериалыМЛКоторымНеХватает.Ссылка = ВТ_МатериалыВыбранныхМЛ.Ссылка
	|			И ВТ_МатериалыМЛКоторымНеХватает.Номенклатура = ВТ_МатериалыВыбранныхМЛ.Номенклатура
	|			И ВТ_МатериалыМЛКоторымНеХватает.Характеристика = ВТ_МатериалыВыбранныхМЛ.Характеристика
	|			И ВТ_МатериалыМЛКоторымНеХватает.Назначение = ВТ_МатериалыВыбранныхМЛ.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалыМЛКоторымХватает КАК ВТ_МатериалыМЛКоторымХватает
	|		ПО ВТ_МатериалыМЛКоторымХватает.Ссылка = ВТ_МатериалыВыбранныхМЛ.Ссылка
	|			И ВТ_МатериалыМЛКоторымХватает.Номенклатура = ВТ_МатериалыВыбранныхМЛ.Номенклатура
	|			И ВТ_МатериалыМЛКоторымХватает.Характеристика = ВТ_МатериалыВыбранныхМЛ.Характеристика
	|			И ВТ_МатериалыМЛКоторымХватает.Назначение = ВТ_МатериалыВыбранныхМЛ.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатериалыВсехМЛ КАК ВТ_МатериалыВсехМЛ
	|		ПО ВТ_МатериалыВсехМЛ.Номенклатура = ВТ_МатериалыМЛКоторымХватает.Номенклатура
	|			И ВТ_МатериалыВсехМЛ.Характеристика = ВТ_МатериалыМЛКоторымХватает.Характеристика
	|			И ВТ_МатериалыВсехМЛ.Назначение = ВТ_МатериалыМЛКоторымХватает.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиВПодразделенииПоВсемМЛ КАК ВТ_ОстаткиВПодразделенииПоВсемМЛ
	|		ПО ВТ_ОстаткиВПодразделенииПоВсемМЛ.Номенклатура = ВТ_МатериалыМЛКоторымХватает.Номенклатура
	|			И ВТ_ОстаткиВПодразделенииПоВсемМЛ.Характеристика = ВТ_МатериалыМЛКоторымХватает.Характеристика
	|			И ВТ_ОстаткиВПодразделенииПоВсемМЛ.Назначение = ВТ_МатериалыМЛКоторымХватает.Назначение";
	
	ОстаткиМатериалов = Запрос.Выполнить().Выгрузить();

	Возврат ОстаткиМатериалов;

КонецФункции

// Разбивает строку
//
// Параметры:
//  СтрокаДокумента	 - СтрокаТабличнойЧасти - исходная строка, которую нужно разбить
//  НовоеКоличество	 - Число - новое количество в исходной строке
//  ИмяПоля			 - Строка - Имя поле "Количество" или "КоличествоФакт"
//  Объект			 - ДокументОбъект - документ.
//
// Возвращаемое значение:
//   - СтрокаТабличнойЧасти   - новая строка.
//
Функция РазбитьСтроку(СтрокаДокумента, НовоеКоличество, ИмяПоля, Объект) Экспорт

	КоличествоИсходное = СтрокаДокумента.Количество;
	КоличествоФактИсходное = СтрокаДокумента.КоличествоФакт;
	
	// В исходной строке меняем количество
	СтрокаДокумента[ИмяПоля] = НовоеКоличество;
	Если Объект.Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан Тогда
		Если ИмяПоля = "Количество" Тогда
			СтрокаДокумента.КоличествоФакт = Мин(СтрокаДокумента.Количество, СтрокаДокумента.КоличествоФакт);
		Иначе
			СтрокаДокумента.Количество = Мин(СтрокаДокумента.Количество, СтрокаДокумента.КоличествоФакт);
		КонецЕсли; 
	Иначе
		СтрокаДокумента.КоличествоФакт = СтрокаДокумента.Количество;
	КонецЕсли; 
	
	Если СтрокаДокумента.НомерСтроки >= Объект.МатериалыИУслуги.Количество() Тогда
		НоваяСтрока = Объект.МатериалыИУслуги.Вставить(СтрокаДокумента.НомерСтроки + 1);
	Иначе
		НоваяСтрока = Объект.МатериалыИУслуги.Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
	
	НоваяСтрока.Количество = КоличествоИсходное - СтрокаДокумента.Количество;
	НоваяСтрока.КоличествоФакт = КоличествоФактИсходное - СтрокаДокумента.КоличествоФакт;
	
	// Пересчет отклонений
	СтрокаДокумента.КоличествоОтклонение = СтрокаДокумента.КоличествоФакт - СтрокаДокумента.Количество;
	НоваяСтрока.КоличествоОтклонение = НоваяСтрока.КоличествоФакт - НоваяСтрока.Количество;

	Возврат НоваяСтрока;
	
КонецФункции

// Актуализирует маршрутные листы производства при изменении заказа на производство.
//
// Параметры:
// 	Параметры - Структура - Данные распоряжения, по которому нужно актуализировать МЛ.
//
Процедура АктуализироватьМаршрутныеЛистыПроизводства(Параметры) Экспорт
	
	Распоряжение = Параметры.Распоряжение;
	МассивКодовСтрокПродукции = Параметры.МассивКодовСтрокПродукции;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Блокировка маршрутных листов по распоряжению
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.МаршрутныйЛистПроизводства");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Распоряжение", Распоряжение);
	
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.КодСтрокиПродукция КАК КодСтрокиПродукция,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
		|
		|ПОМЕСТИТЬ ВТЭтапыГрафик
		|
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЭтапыГрафик
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО (Продукция.Ссылка = &Распоряжение)
		|			И (Продукция.Ссылка.Проведен)
		|			И (Продукция.ГрафикРассчитан)
		|			И (ЭтапыГрафик.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|													ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)))
		|			И (Продукция.КлючСвязи = ЭтапыГрафик.КлючСвязиПродукция)
		|
		|	ПО (Продукция.КодСтроки = ЭтапыПроизводства.КодСтрокиПродукция)
		|		И (ЭтапыГрафик.КодСтроки = ЭтапыПроизводства.КодСтрокиЭтапыГрафик)
		|		И (ЭтапыГрафик.Ссылка = &Распоряжение)
		|
		|ГДЕ
		|	ЭтапыПроизводства.Активность
		|	И &УсловиеОтбораПоРаспоряжению
		|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроизводства.КодСтрокиПродукция,
		|	ЭтапыПроизводства.КодСтрокиЭтапыГрафик
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЭтапыПроизводства.ЗапланированоПроизводством)
		|		+ СУММА(ЭтапыПроизводства.КВыполнению)
		|		+ СУММА(ЭтапыПроизводства.Выполнено)
		|		+ СУММА(ЭтапыПроизводства.Брак) > МАКСИМУМ(ЕСТЬNULL(ЭтапыГрафик.Количество, 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МаршрутныйЛистПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
		|
		|ГДЕ
		|	МаршрутныйЛистПроизводства.Проведен
		|	И МаршрутныйЛистПроизводства.Распоряжение = &Распоряжение
		|	И МаршрутныйЛистПроизводства.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
		|	И (МаршрутныйЛистПроизводства.КодСтроки, МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик) В
		|			(ВЫБРАТЬ
		|				ЭтапыГрафик.КодСтрокиПродукция КАК КодСтрокиПродукция,
		|				ЭтапыГрафик.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
		|			ИЗ
		|				ВТЭтапыГрафик КАК ЭтапыГрафик)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	// Установим параметры
	
	Запрос.УстановитьПараметр("Распоряжение", Параметры.Распоряжение);
	
	УсловиеОтбораПоРаспоряжению = "ЭтапыПроизводства.Распоряжение = &Распоряжение";
	
	Если МассивКодовСтрокПродукции <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("МассивКодовСтрокПродукции", МассивКодовСтрокПродукции);
		
		УсловиеОтбораПоРаспоряжению = УсловиеОтбораПоРаспоряжению 
			+ " И ЭтапыПроизводства.КодСтрокиПродукция В (&МассивКодовСтрокПродукции)";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораПоРаспоряжению", УсловиеОтбораПоРаспоряжению);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			МаршрутныйЛистПроизводства = Выборка.Ссылка.ПолучитьОбъект();
			МаршрутныйЛистПроизводства.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен;
			МаршрутныйЛистПроизводства.ДополнительныеСвойства.Вставить("ТребуетсяПроверкаГрафика", Ложь);
			МаршрутныйЛистПроизводства.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении статуса выполнения операции
//
// Параметры:
//  СтрокаОперация	- ДанныеФормыСтруктура - строка операции
//  Объект			- ДанныеФормыСтруктура - маршрутный лист.
//
Процедура ПриИзмененииСтатусаВыполненияОперации(СтрокаОперация, Объект) Экспорт

	СтруктураПоиска = Новый Структура("КлючСвязиОперации", СтрокаОперация.КлючСвязи);
  	СписокСтрок = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаМатериал Из СписокСтрок Цикл
			
		Если СтрокаОперация.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Завершено Тогда
			
			Если СтрокаМатериал.ДатаРасхода = '000101010000' 
				И СтрокаМатериал.КоличествоФакт <> 0 Тогда
				
				СтрокаМатериал.ДатаРасхода = ТекущаяДатаСеанса();
				
			КонецЕсли;
				
		Иначе
			
			Если СтрокаМатериал.ДатаРасхода <> '000101010000' Тогда
				СтрокаМатериал.ДатаРасхода = '000101010000';
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаМатериал.МатериалИзрасходован = (СтрокаМатериал.ДатаРасхода <> '000101010000');
		
	КонецЦикла;

КонецПроцедуры

// Записывает в маршрутные листы информацию о расчете пооперационного расписания.
//
// Параметры:
//  Расписание - Соответствие - содержит данные пооперационного расписания, где:
//		* Ключ - ДокументСсылка.МаршрутныйЛистПроизводства - документ, операции которого были перепланированы.
//		* Значение - Структура - содержит пооперационное расписание соответствующего маршрутного листа.
//
Процедура ЗаписатьПооперационноеРасписание(Расписание) Экспорт
	
	Для каждого Запись Из Расписание Цикл
		
		ДокументОбъект = Запись.Ключ.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ПредставлениеДокумента = ПользовательскоеПредставлениеДокумента(ДокументОбъект.Ссылка);
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить маршрутный лист %1. Возможно, документ в настоящий момент редактируется.';
					|en = 'Cannot change route sheet %1. The document is probably locked for editing.'"),
				ПредставлениеДокумента);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
		Если Запись.Значение.Свойство("Операции") Тогда
			Для каждого Операция Из Запись.Значение.Операции Цикл
				СтрокаОперация = ДокументОбъект.Операции.Найти(Операция.КлючСвязи, "КлючСвязи");
				СтрокаОперация.Начало    = Операция.Начало;
				СтрокаОперация.Окончание = Операция.Окончание;
				СтрокаОперация.РабочийЦентрПоРасписанию = Операция.РабочийЦентр;
			КонецЦикла;
		КонецЕсли;
		
		РасписаниеСформировано = Истина;
		Для каждого Строка Из ДокументОбъект.Операции Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Начало) Тогда
				РасписаниеСформировано = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если РасписаниеСформировано Тогда
			ДокументОбъект.СостояниеРасписания = Перечисления.СостоянияРасписанияРабочихЦентров.Сформировано;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументОбъект.Разблокировать();
		
	КонецЦикла;
	
КонецПроцедуры

// Назначает операциям маршрутного листа полученный статус.
// В процессе работы статус так же изменяется у связанных операций (последующих и предшествующих).
//
// Параметры:
//  ИдентификаторыОпераций - Массив - массив идентификаторов операций, статус которых необходимо изменить.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыВыполненияОпераций - назначаемый статус.
//	ДокументОбъект - ДокументОбъект.МаршрутныйЛистПроизводства - владелец изменяемых операций.
//
Процедура ИзменитьСтатусОпераций(ИдентификаторыОпераций, НовыйСтатус, ДокументОбъект = Неопределено) Экспорт
	
	Если ДокументОбъект = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МаршрутныйЛистПроизводстваОперации.Ссылка КАК Ссылка,
		|	МаршрутныйЛистПроизводстваОперации.КлючСвязи,
		|	МаршрутныйЛистПроизводстваОперации.НомерОперации,
		|	МаршрутныйЛистПроизводстваОперации.НомерСледующейОперации
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
		|ГДЕ
		|	МаршрутныйЛистПроизводстваОперации.КлючСвязи В(&ИдентификаторыОпераций)
		|	И МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> &СтатусВыполнения
		|ИТОГИ ПО
		|	Ссылка");
		
		Запрос.УстановитьПараметр("ИдентификаторыОпераций", ИдентификаторыОпераций);
		Запрос.УстановитьПараметр("СтатусВыполнения", НовыйСтатус);
		
		ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИтоги.Следующий() Цикл
			
			ДокументОбъект = ВыборкаИтоги.Ссылка.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ПредставлениеДокумента = ПользовательскоеПредставлениеДокумента(ДокументОбъект.Ссылка);
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить маршрутный лист %1. Возможно, документ в настоящий момент редактируется.';
					|en = 'Cannot change route sheet %1. The document is probably locked for editing.'"),
				ПредставлениеДокумента);
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
			
			ОбработанныеОперации = Новый Массив;
			СтрокиМаршрута = Новый Массив;
			
			Выборка = ВыборкаИтоги.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НайденнаяСтрока = ДокументОбъект.Операции.Найти(Выборка.КлючСвязи, "КлючСвязи");
				НайденнаяСтрока.СтатусВыполнения = НовыйСтатус;
				
				ОбработанныеОперации.Добавить(Выборка.КлючСвязи);
				СтрокиМаршрута.Добавить(НайденнаяСтрока);
				
			КонецЦикла;
			
			ИзменитьСтатусСвязанныхОпераций(ДокументОбъект, СтрокиМаршрута, НовыйСтатус, ОбработанныеОперации);
			ЗаполнитьСрокиВыполненияОперацийПриИзмененииСтатуса(ДокументОбъект, НовыйСтатус);
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументОбъект.Разблокировать();
			
		КонецЦикла;
		
	Иначе
		
		ОбработанныеОперации = Новый Массив;
		СтрокиМаршрута = Новый Массив;
		
		Для каждого КлючСвязи Из ИдентификаторыОпераций Цикл
			
			НайденнаяСтрока = ДокументОбъект.Операции.Найти(КлючСвязи, "КлючСвязи");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока.СтатусВыполнения = НовыйСтатус;
				ОбработанныеОперации.Добавить(КлючСвязи);
				СтрокиМаршрута.Добавить(НайденнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОбработанныеОперации.Количество() = 0 Тогда
			ИзменитьСтатусСвязанныхОпераций(ДокументОбъект, СтрокиМаршрута, НовыйСтатус, ОбработанныеОперации);
			ЗаполнитьСрокиВыполненияОперацийПриИзмененииСтатуса(ДокументОбъект, НовыйСтатус);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Если ИмяРегистра = "МатериалыИРаботыВПроизводстве" Тогда
		ИсточникиДанных.Вставить("Распоряжение");
	КонецЕсли;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = ПолноеИмяДокумента();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ПодразделениеЭтапа", "ТабличнаяЧасть.Ссылка.Подразделение");
	ПереопределениеРасчетаПараметров.Вставить("СрокПоставки", "ТабличнаяЧасть.Ссылка.Начало");
	ПереопределениеРасчетаПараметров.Вставить("ПодразделениеДокумента", "ТабличнаяЧасть.Ссылка.Подразделение");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	
	Если ИмяРегистра = "МатериалыИРаботыВПроизводстве" Тогда
		
		ПереопределениеРасчетаПараметров.Вставить("НалогообложениеНДС", "ТабличнаяЧасть.Ссылка.Распоряжение.ЗаказПодДеятельность");
		
		ТекстЗапроса = ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "РаспоряженияНаВыпускПродукции" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРаспоряженияНаВыпускПродукции(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
	
	ИначеЕсли ИмяРегистра = "ДвиженияСерийТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвиженияСерийТоваров(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
	
	ИначеЕсли ИмяРегистра = "ОперацииМаршрутовПроизводства" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОперацииМаршрутовПроизводства(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ЗаказыНаПроизводствоСпецификации" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыКОформлению(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка                                    КАК Ссылка,
		|	Реквизиты.Дата                                      КАК Дата,
		|	Реквизиты.Статус                                    КАК Статус,
		|	Реквизиты.Распоряжение                              КАК Распоряжение,
		|	Реквизиты.Распоряжение.Дата                         КАК РаспоряжениеДата,
		
		|	ВЫБОР
		|		КОГДА Реквизиты.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|			ТОГДА Реквизиты.НоменклатураПолуфабриката
		|		ИНАЧЕ Реквизиты.Номенклатура
		|	КОНЕЦ                                               КАК Изделие,
		
		|	ВЫБОР
		|		КОГДА Реквизиты.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|			ТОГДА Реквизиты.ХарактеристикаПолуфабриката
		|		ИНАЧЕ Реквизиты.Характеристика
		|	КОНЕЦ                                               КАК ХарактеристикаИзделия,
		
		|	Реквизиты.Распоряжение.Подразделение                КАК Подразделение,
		|	Реквизиты.Подразделение                				КАК ПодразделениеДокумента,
		|	Реквизиты.Распоряжение.Организация                  КАК Организация,
		|	Реквизиты.Распоряжение.ЗаказПодДеятельность         КАК ЗаказПодДеятельность,
		|	Реквизиты.КодСтроки                                 КАК КодСтроки,
		|	Реквизиты.КодСтрокиЭтапыГрафик                      КАК КодСтрокиЭтапыГрафик,
		|	Реквизиты.Этап                                      КАК Этап,
		|	Реквизиты.Подразделение                             КАК ПодразделениеЭтапа,
		|	Реквизиты.Начало                                    КАК Начало,
		|	Реквизиты.Окончание                                 КАК Окончание,
		|	Реквизиты.ФактическоеОкончание                      КАК ФактическоеОкончание,
		|	Реквизиты.Номенклатура                              КАК Номенклатура,
		|	Реквизиты.Характеристика                            КАК Характеристика,
		|	Реквизиты.Запланировано                             КАК Запланировано,
		|	Реквизиты.Спецификация                              КАК Спецификация,
		|	Реквизиты.МаршрутнаяКарта                           КАК МаршрутнаяКарта,
		|	Реквизиты.УправлениеМаршрутнымиЛистами              КАК УправлениеМаршрутнымиЛистами,
		|	Реквизиты.ВариантПриемкиТоваров                     КАК ВариантПриемкиТоваров
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("Период",               Реквизиты.Дата);
	Запрос.УстановитьПараметр("Этап",                 Реквизиты.Этап);
	Запрос.УстановитьПараметр("Изделие",              Реквизиты.Изделие);
	Запрос.УстановитьПараметр("ХарактеристикаИзделия",Реквизиты.ХарактеристикаИзделия);
	Запрос.УстановитьПараметр("Распоряжение",         Реквизиты.Распоряжение);
	Запрос.УстановитьПараметр("НалогообложениеНДС",   Реквизиты.ЗаказПодДеятельность);
	Запрос.УстановитьПараметр("РаспоряжениеДата",     Реквизиты.РаспоряжениеДата);
	Запрос.УстановитьПараметр("КодСтроки",            Реквизиты.КодСтроки);
	Запрос.УстановитьПараметр("КодСтрокиЭтапыГрафик", Реквизиты.КодСтрокиЭтапыГрафик);
	Запрос.УстановитьПараметр("Подразделение",        Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеЭтапа",   Реквизиты.ПодразделениеЭтапа);
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("Статус",               Реквизиты.Статус);
	Запрос.УстановитьПараметр("СрокПоставки",         Реквизиты.Начало);
	Запрос.УстановитьПараметр("Начало",         	  Реквизиты.Начало);
	Запрос.УстановитьПараметр("Окончание",            Реквизиты.Окончание);
	Запрос.УстановитьПараметр("ФактическоеОкончание", Реквизиты.ФактическоеОкончание);
	Запрос.УстановитьПараметр("Номенклатура",         Реквизиты.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",       Реквизиты.Характеристика);
	Запрос.УстановитьПараметр("Запланировано",        Реквизиты.Запланировано);
	Запрос.УстановитьПараметр("Спецификация",         Реквизиты.Спецификация);
	Запрос.УстановитьПараметр("МаршрутнаяКарта",      Реквизиты.МаршрутнаяКарта);
	Запрос.УстановитьПараметр("УправлениеМаршрутнымиЛистами", Реквизиты.УправлениеМаршрутнымиЛистами);
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	Запрос.УстановитьПараметр("ПодразделениеДокумента", Реквизиты.ПодразделениеДокумента);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЭтапыПроизводства(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ЭтапыПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МаршрутныйЛист.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику КАК Период,
	|	МаршрутныйЛист.Этап                                            КАК Этап,
	|	МаршрутныйЛист.Подразделение                                   КАК Подразделение,
	|	МаршрутныйЛист.Распоряжение                                    КАК Распоряжение,
	|	МаршрутныйЛист.КодСтроки                                       КАК КодСтрокиПродукция,
	|	МаршрутныйЛист.КодСтрокиЭтапыГрафик                            КАК КодСтрокиЭтапыГрафик,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛист.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|			ТОГДА МаршрутныйЛист.Запланировано
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                          КАК ЗапланированоПроизводством,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛист.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению)
	|			ИЛИ МаршрутныйЛист.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется)
	|			ТОГДА МаршрутныйЛист.Запланировано
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                          КАК КВыполнению,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛист.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|			ТОГДА МаршрутныйЛист.Произведено
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                          КАК Выполнено,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛист.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|			ТОГДА МаршрутныйЛист.Брак
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                          КАК Брак,
	|	МаршрутныйЛист.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику    КАК НачалоЭтапа,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛист.ФактическоеНачало <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МаршрутныйЛист.ФактическоеНачало
	|		ИНАЧЕ МаршрутныйЛист.Начало                                          
	|	КОНЕЦ                                                          КАК НачалоПредварительногоБуфера,
	|	ВЫБОР
	|		КОГДА МаршрутныйЛист.ФактическоеОкончание <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МаршрутныйЛист.ФактическоеОкончание
	|		ИНАЧЕ МаршрутныйЛист.Окончание                                          
	|	КОНЕЦ                                                          КАК ОкончаниеЗавершающегоБуфера
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Ссылка = &Ссылка
	|	И МаршрутныйЛист.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
		
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДоступностьВидовРабочихЦентров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТЗанятоЗаказом", ТекстыЗапроса) Тогда
		ТекстЗапросаВТЗанятоЗаказом(ТекстыЗапроса);
	КонецЕсли; 
	
	// Первым запросом объединения выполняется сторнирование занятости по данным таблицы "ВТЗанятоЗаказом".
	// Вторым запросом объединения выполняется получение занятости, образованной расписанием работы РЦ.
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                       КАК Период,
	|	&Распоряжение                                 КАК Распоряжение,
	|	ЗанятоЗаказом.ВидРабочегоЦентра               КАК ВидРабочегоЦентра,
	|	ЗанятоЗаказом.ВидРабочегоЦентра.Подразделение КАК Подразделение,
	|	ЗанятоЗаказом.ДатаИнтервала                   КАК ДатаИнтервала,
	|	ВЫБОР 
	|		КОГДА МАКСИМУМ(ЕСТЬNULL(ЗанятоМаршрутнымЛистом.Занято, 0)) - СУММА(ЕСТЬNULL(ЗанятоЗаказомПредыдущиеИнтервалы.Занято, 0)) > ЗанятоЗаказом.Занято
	|			ТОГДА -ЗанятоЗаказом.Занято
	|		ИНАЧЕ -(МАКСИМУМ(ЕСТЬNULL(ЗанятоМаршрутнымЛистом.Занято, 0)) - СУММА(ЕСТЬNULL(ЗанятоЗаказомПредыдущиеИнтервалы.Занято, 0)))
	|	КОНЕЦ                                        КАК Занято,
	|	МАКСИМУМ(ЗанятоЗаказом.КодСтрокиПродукция)   КАК КодСтрокиПродукция,
	|	МАКСИМУМ(ЗанятоЗаказом.КодСтрокиЭтапыГрафик) КАК КодСтрокиЭтапыГрафик,
	|	МАКСИМУМ(ЗанятоЗаказом.ВариантНаладки)       КАК ВариантНаладки,
	|	ЛОЖЬ                                         КАК ЭтоДвижениеВводаДоступности,
	|	ЛОЖЬ                                         КАК ЭтоДвижениеЗаказаНаПроизводство,
	|	ИСТИНА                                       КАК ЭтоДвижениеМаршрутногоЛиста
	|ИЗ
	|	ВТЗанятоЗаказом КАК ЗанятоЗаказом
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗанятоЗаказом КАК ЗанятоЗаказомПредыдущиеИнтервалы
	|		ПО ЗанятоЗаказом.ВидРабочегоЦентра = ЗанятоЗаказомПредыдущиеИнтервалы.ВидРабочегоЦентра
	|			И ЗанятоЗаказом.ДатаИнтервала > ЗанятоЗаказомПредыдущиеИнтервалы.ДатаИнтервала
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВидыРабочихЦентров.ВидРабочегоЦентра  КАК ВидРабочегоЦентра,
	|			ВидыРабочихЦентров.ВариантНаладки     КАК ВариантНаладки,
	|			СУММА(ВидыРабочихЦентров.ВремяРаботы) КАК Занято
	|		ИЗ
	|			Документ.МаршрутныйЛистПроизводства.ЗанятостьВидовРабочихЦентровПоГрафику КАК ВидыРабочихЦентров
	|
	|		ГДЕ
	|			ВидыРабочихЦентров.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВидыРабочихЦентров.ВидРабочегоЦентра,
	|			ВидыРабочихЦентров.ВариантНаладки) КАК ЗанятоМаршрутнымЛистом
	|		ПО (ЗанятоМаршрутнымЛистом.ВидРабочегоЦентра = ЗанятоЗаказом.ВидРабочегоЦентра)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятоЗаказом.ВидРабочегоЦентра,
	|	ЗанятоЗаказом.ВидРабочегоЦентра.Подразделение,
	|	ЗанятоЗаказом.ДатаИнтервала,
	|	ЗанятоЗаказом.Занято
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР КОГДА МАКСИМУМ(ЕСТЬNULL(ЗанятоМаршрутнымЛистом.Занято, 0)) - СУММА(ЕСТЬNULL(ЗанятоЗаказомПредыдущиеИнтервалы.Занято, 0))
	|		> ЗанятоЗаказом.Занято ТОГДА
	|		ЗанятоЗаказом.Занято
	|	ИНАЧЕ
	|		МАКСИМУМ(ЕСТЬNULL(ЗанятоМаршрутнымЛистом.Занято, 0)) - СУММА(ЕСТЬNULL(ЗанятоЗаказомПредыдущиеИнтервалы.Занято, 0))
	|	КОНЕЦ > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                                                      КАК Период,
	|	&Распоряжение                                                                КАК Распоряжение,
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра                КАК ВидРабочегоЦентра,
	|	РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра.Подразделение  КАК Подразделение,
	|	РасписаниеРаботыРабочихЦентров.ДатаИнтервала                                 КАК ДатаИнтервала,
	|	РасписаниеРаботыРабочихЦентров.ВремяРаботыВРабочееВремя        КАК Занято,
	|	МаршрутныйЛистПроизводства.КодСтроки                           КАК КодСтрокиПродукция,
	|	МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик                КАК КодСтрокиЭтапыГрафик,
	|	РасписаниеРаботыРабочихЦентров.ВариантНаладки                  КАК ВариантНаладки,
	|	ЛОЖЬ                                                           КАК ЭтоДвижениеВводаДоступности,
	|	ЛОЖЬ                                                           КАК ЭтоДвижениеЗаказаНаПроизводство,
	|	ИСТИНА                                                         КАК ЭтоДвижениеМаршрутногоЛиста
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|		ПО РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = МаршрутныйЛистПроизводства.Ссылка
	|
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка = &Ссылка
	|	И РасписаниеРаботыРабочихЦентров.ВремяРаботыВРабочееВремя > 0
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется))";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	ТабличнаяЧасть.ВидРабот КАК ВидРабот,
	|	&ПодразделениеЭтапа КАК Подразделение,
	|	ТабличнаяЧасть.Бригада КАК Исполнитель,
	|	ТабличнаяЧасть.Количество + ТабличнаяЧасть.КоличествоОтклонение КАК Количество,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Ссылка КАК Распоряжение,
	|	ТабличнаяЧасть.КодСтроки КАК КодСтрокиРаспоряжения
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И (&Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|		ИЛИ (&УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
	|			ИЛИ &УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций))
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению))
	|	И ТабличнаяЧасть.Бригада <> ЗНАЧЕНИЕ(Справочник.Бригады.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаРасхода КАК Период,
	|	&Окончание КАК ДатаРегистратора,
	|	&Организация КАК Организация,
	|	&ПодразделениеЭтапа КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ВЫБОР КОГДА ТабличнаяЧасть.СтатусУказанияСерий В (6, 10, 14) ТОГДА
	|		ТабличнаяЧасть.Серия
	|	КОНЕЦ КАК Серия,
	|	ТабличнаяЧасть.АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.КоличествоФакт КАК Количество,
	|	ТабличнаяЧасть.СтатьяКалькуляции,
	|	&Этап КАК Этап,
	|	&Распоряжение КАК ЗаказНаПроизводство,
	|	&КодСтроки КАК КодСтрокиПродукция,
	|	ТабличнаяЧасть.Назначение КАК Назначение,
	|	&НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.МатериалИзрасходован
	|	И ТабличнаяЧасть.КоличествоФакт <> 0
	|	И (&Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|		ИЛИ (&УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
	|			ИЛИ &УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций))
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&ФактическоеОкончание КАК Период,
	|	&Окончание КАК ДатаРегистратора,
	|	&Организация КАК Организация,
	|	&ПодразделениеЭтапа КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	-ТабличнаяЧасть.КоличествоФакт КАК Количество,
	|	ТабличнаяЧасть.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	&Этап КАК Этап,
	|	&Распоряжение КАК ЗаказНаПроизводство,
	|	&КодСтроки КАК КодСтрокиПродукция,
	|	ТабличнаяЧасть.Назначение КАК Назначение,
	|	&НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТабличнаяЧасть.Номенклатура = Аналитика.Номенклатура
	|		И ТабличнаяЧасть.Характеристика = Аналитика.Характеристика
	|		И ТабличнаяЧасть.Назначение = Аналитика.Назначение
	|		И (Аналитика.МестоХранения = &ПодразделениеЭтапа)
	|		И (Аналитика.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус = Значение(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|	И ТабличнаяЧасть.КоличествоФакт > 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ЗаказыНаПроизводствоСпецификации";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки                      КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
	|	&СрокПоставки                                   КАК Период,
	|	&Распоряжение                                   КАК ЗаказНаПроизводство,
	|	&ПодразделениеЭтапа                             КАК Подразделение,
	|	ТабличнаяЧасть.ПроизводитсяВПроцессе            КАК ПроизводитсяВПроцессе,
	|	ТабличнаяЧасть.Получатель                       КАК Склад,
	|	ТабличнаяЧасть.Назначение                       КАК Назначение,
	|	&Этап                                           КАК Этап,
	|	ТабличнаяЧасть.Номенклатура                     КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                   КАК Характеристика,
	|	&КодСтроки                                      КАК КодСтрокиПродукция,
	|	&КодСтрокиЭтапыГрафик                           КАК КодСтрокиЭтапыГрафик,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипДвиженияЗапасов,
	|	ТабличнаяЧасть.КоличествоПоЗаказу               КАК Заказано
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.КоличествоПоЗаказу <> 0
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПроизводствоТрудозатраты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПроизводствоТрудозатраты";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&СрокПоставки                           КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	РаспоряжениеТрудозатраты.НомерСтроки    КАК НомерСтроки,
	|	&Распоряжение                           КАК ЗаказНаПроизводство,
	|	&КодСтроки                              КАК КодСтрокиПродукция,
	|	&КодСтрокиЭтапыГрафик                   КАК КодСтрокиЭтапыГрафик,
	|	&Этап                                   КАК Этап,
	|	РаспоряжениеТрудозатраты.ВидРабот       КАК ВидРабот,
	|	РаспоряжениеТрудозатраты.Количество     КАК ПоЗаказу
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.РаспоряжениеТрудозатраты КАК РаспоряжениеТрудозатраты
	|ГДЕ
	|	РаспоряжениеТрудозатраты.Ссылка = &Ссылка
	|	И РаспоряжениеТрудозатраты.КоличествоПоЗаказу <> 0
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРаспоряженияНаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РаспоряженияНаВыпускПродукции";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА &ФактическоеОкончание <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НАЧАЛОПЕРИОДА(&ФактическоеОкончание, ДЕНЬ) 
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	&Ссылка КАК Распоряжение,
	|	&ПодразделениеЭтапа КАК Подразделение,
	|	ТабличнаяЧасть.Получатель КАК Склад,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки КАК КодСтроки,
	|	ТабличнаяЧасть.ДоляСтоимости КАК ДоляСтоимости,
	|	Значение(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ТабличнаяЧасть.КоличествоФакт КАК Заказано,
	|	ВЫБОР
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|			ТОГДА ТабличнаяЧасть.КоличествоФакт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОформлению,
	|	КлючиАналитикиУчета.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.Назначение КАК Назначение
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитикиУчета
	|		ПО ТабличнаяЧасть.Номенклатура = КлючиАналитикиУчета.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = КлючиАналитикиУчета.Характеристика
	|			И ТабличнаяЧасть.Назначение = КлючиАналитикиУчета.Назначение
	|			И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = КлючиАналитикиУчета.СтатьяКалькуляции
		|			И (ТабличнаяЧасть.Получатель = КлючиАналитикиУчета.МестоХранения)
	|			И (ВЫБОР
	|				КОГДА ТабличнаяЧасть.СтатусУказанияСерий = 14 
	|				ТОГДА ТабличнаяЧасть.Серия = КлючиАналитикиУчета.Серия
	|				ИНАЧЕ КлючиАналитикиУчета.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Количество + ТабличнаяЧасть.КоличествоОтклонение > 0
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА &ФактическоеОкончание <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НАЧАЛОПЕРИОДА(&ФактическоеОкончание, ДЕНЬ) 
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	&Ссылка КАК Распоряжение,
	|	&ПодразделениеЭтапа КАК Подразделение,
	|	ТабличнаяЧасть.Получатель КАК Склад,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.КодСтроки КАК КодСтроки,
	|	0 КАК ДоляСтоимости,
	|	Значение(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная) КАК ТипСтоимости,
	|	ТабличнаяЧасть.Количество + ТабличнаяЧасть.КоличествоОтклонение КАК Заказано,
	|	ВЫБОР
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|			ТОГДА ТабличнаяЧасть.Количество + ТабличнаяЧасть.КоличествоОтклонение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОформлению,
	|	КлючиАналитикиУчета.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	ТабличнаяЧасть.Назначение КАК Назначение
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитикиУчета
	|		ПО ТабличнаяЧасть.Номенклатура = КлючиАналитикиУчета.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = КлючиАналитикиУчета.Характеристика
	|			И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = КлючиАналитикиУчета.СтатьяКалькуляции
	|			И ТабличнаяЧасть.Назначение = КлючиАналитикиУчета.Назначение
	|			И (ТабличнаяЧасть.Получатель = КлючиАналитикиУчета.МестоХранения)
	|			И (КлючиАналитикиУчета.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Количество + ТабличнаяЧасть.КоличествоОтклонение > 0
	|
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаБракВПроизводстве(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "БракВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МаршрутныйЛистПроизводства.Ссылка КАК МаршрутныйЛист,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	МаршрутныйЛистПроизводства.Брак КАК Количество
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка = &Ссылка
	|	И МаршрутныйЛистПроизводства.Брак > 0
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПотребностьВМатериалахВПроизводстве(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПотребностьВМатериалахВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                        КАК Период,
	|	&Организация                   КАК Организация,
	|	&ПодразделениеЭтапа            КАК Подразделение,
	|	&Распоряжение                  КАК Распоряжение,
	|	ТаблицаТовары.Номенклатура     КАК Номенклатура,
	|	ТаблицаТовары.Характеристика   КАК Характеристика,
	|	ТаблицаТовары.Назначение       КАК Назначение,
	|	&КодСтрокиЭтапыГрафик          КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаТовары.КоличествоФакт   КАК Количество
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КоличествоФакт <> 0
	|	И НЕ ТаблицаТовары.МатериалИзрасходован
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура           КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика         КАК Характеристика,
	|	ТабличнаяЧасть.Назначение             КАК Назначение,
	|	ТабличнаяЧасть.Серия                  КАК Серия,
	|	ТабличнаяЧасть.КоличествоФакт         КАК Количество,
	|	&ПодразделениеЭтапа                   КАК Отправитель,
	|	&ПодразделениеЭтапа                   КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	&Ссылка                               КАК Документ,
	|	&Период                               КАК Период,
	|	ИСТИНА                                КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.КоличествоФакт <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ	
	|	
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура           КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика         КАК Характеристика,
	|	ТабличнаяЧасть.Назначение             КАК Назначение,
	|	ТабличнаяЧасть.Серия                  КАК Серия,
	|	ТабличнаяЧасть.КоличествоФакт         КАК Количество,
	|	&ПодразделениеЭтапа                   КАК Отправитель,
	|	&ПодразделениеЭтапа                   КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции) КАК СкладскаяОперация,
	|	&Ссылка                               КАК Документ,
	|	&Период                               КАК Период,
	|	ИСТИНА                                КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.КоличествоФакт <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ	
	|	
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение           КАК Назначение,
	|	ТабличнаяЧасть.Серия                КАК Серия,
	|	ТабличнаяЧасть.КоличествоФакт       КАК Количество,
	|	&ПодразделениеЭтапа                 КАК Отправитель,
	|	&Ссылка                             КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве) КАК СкладскаяОперация,
	|	&Ссылка                             КАК Документ,
	|	&Период                             КАК Период,
	|	ИСТИНА                              КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТабличнаяЧасть.КоличествоФакт <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТЗанятоЗаказом(ТекстыЗапроса)
	
	ИмяРегистра = "ВТЗанятоЗаказом";
	
	// Занятость видов рабочих центров, выполненная заказом на производство,
	// с учетом сторно, сделанного другими маршрутными листами по этому же заказу на производство.
	// Необходима для сторнирования.
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра              КАК ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентров.ДатаИнтервала                  КАК ДатаИнтервала,
	|	СУММА(ДоступностьВидовРабочихЦентров.Занято)                  КАК Занято,
	|	МАКСИМУМ(ДоступностьВидовРабочихЦентров.КодСтрокиПродукция)   КАК КодСтрокиПродукция,
	|	МАКСИМУМ(ДоступностьВидовРабочихЦентров.КодСтрокиЭтапыГрафик) КАК КодСтрокиЭтапыГрафик,
	|	МАКСИМУМ(ДоступностьВидовРабочихЦентров.ВариантНаладки)       КАК ВариантНаладки
	|
	|ПОМЕСТИТЬ ВТЗанятоЗаказом
	|
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛист
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
	|		ПО ДоступностьВидовРабочихЦентров.Активность
	|			И (НЕ ДоступностьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности)
	|			И (ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					И ДоступностьВидовРабочихЦентров.Регистратор = МаршрутныйЛист.Распоряжение
	|					И ДоступностьВидовРабочихЦентров.Занято > 0
	|				ИЛИ ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И ДоступностьВидовРабочихЦентров.Регистратор <> &Ссылка
	|					И ВЫРАЗИТЬ(ДоступностьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение = МаршрутныйЛист.Распоряжение
	|					И ДоступностьВидовРабочихЦентров.Занято < 0)
	|			И (ДоступностьВидовРабочихЦентров.КодСтрокиПродукция = МаршрутныйЛист.КодСтроки)
	|			И (ДоступностьВидовРабочихЦентров.КодСтрокиЭтапыГрафик = МаршрутныйЛист.КодСтрокиЭтапыГрафик)
	|			И ((ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра, ДоступностьВидовРабочихЦентров.ДатаИнтервала) В
	|				(ВЫБРАТЬ
	|					ВидыРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|					ВидыРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала
	|				ИЗ
	|					Документ.МаршрутныйЛистПроизводства.ЗанятостьВидовРабочихЦентровПоГрафику КАК ВидыРабочихЦентров
	|				ГДЕ
	|					ВидыРабочихЦентров.Ссылка = &Ссылка))
	|
	|ГДЕ
	|	МаршрутныйЛист.Ссылка = &Ссылка
	|	И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|			ИЛИ &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|				И 1 В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						1
	|					ИЗ
	|						РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
	|					ГДЕ
	|						РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = &Ссылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентров.ДатаИнтервала
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДоступностьВидовРабочихЦентров.Занято) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра,
	|	ДатаИнтервала";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОперацииМаршрутовПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОперацииМаршрутовПроизводства";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.КлючСвязи КАК ИдентификаторОперации,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|			ТОГДА ТабличнаяЧасть.ВидРабочегоЦентра
	|		ИНАЧЕ ТабличнаяЧасть.РабочийЦентр
	|	КОНЕЦ КАК РабочийЦентрМаршрута,
	|	&Начало КАК ДатаЗапуска,
	|	&Окончание КАК ДатаВыпуска,
	|	ТабличнаяЧасть.Ссылка КАК МаршрутныйЛист,
	|	&Распоряжение КАК Распоряжение,
	|	ТабличнаяЧасть.ВариантНаладки КАК ВариантНаладки,
	|	ТабличнаяЧасть.Непрерывная КАК Непрерывная,
	|	ТабличнаяЧасть.Загрузка,
	|	&Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Запланировано КАК Количество,
	|	&ПодразделениеЭтапа КАК Подразделение,
	|	&Спецификация КАК Спецификация,
	|	&МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	ТабличнаяЧасть.Операция,
	|	ТабличнаяЧасть.НомерОперации,
	|	ТабличнаяЧасть.НомерСледующейОперации,
	|	ТабличнаяЧасть.СтатусВыполнения,
	|	ТабличнаяЧасть.Приоритет,
	|	ТабличнаяЧасть.ВремяВыполнения,
	|	ТабличнаяЧасть.ВремяВыполненияЕдИзм,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
	|			ТОГДА ТабличнаяЧасть.ВремяШтучное
	|		КОГДА ТабличнаяЧасть.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ТабличнаяЧасть.ВремяШтучное * 60
	|		КОГДА ТабличнаяЧасть.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ТабличнаяЧасть.ВремяШтучное * 3600
	|		КОГДА ТабличнаяЧасть.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|				ИЛИ ТабличнаяЧасть.ВремяШтучноеЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ТабличнаяЧасть.ВремяШтучное * 86400
	|		ИНАЧЕ ТабличнаяЧасть.ВремяШтучное
	|	КОНЕЦ КАК ВремяШтучное,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Секунда)
	|			ТОГДА ТабличнаяЧасть.ВремяПЗ
	|		КОГДА ТабличнаяЧасть.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ТабличнаяЧасть.ВремяПЗ * 60
	|		КОГДА ТабличнаяЧасть.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ТабличнаяЧасть.ВремяПЗ * 3600
	|		КОГДА ТабличнаяЧасть.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|				ИЛИ ТабличнаяЧасть.ВремяПЗЕдИзм = ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ТабличнаяЧасть.ВремяПЗ * 86400
	|		ИНАЧЕ ТабличнаяЧасть.ВремяПЗ
	|	КОНЕЦ КАК ВремяПЗ
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И (&УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
	|			ИЛИ &УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций))
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСостоянияРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СостоянияРабочихЦентров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	МаршрутныйЛистПроизводстваОперации.Ссылка КАК МаршрутныйЛист,
	               |	ЕСТЬNULL(ДоступностьРабочихЦентров.Начало, ПооперационноеРасписание.Начало) КАК Период,
	               |	&ПодразделениеЭтапа КАК Подразделение,
	               |	ПооперационноеРасписание.РабочийЦентр.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	               |	ПооперационноеРасписание.РабочийЦентр КАК РабочийЦентр,
	               |	СУММА(ВЫБОР
	               |			КОГДА НЕ ПооперационноеРасписание.ЭтоПереналадка
	               |				ТОГДА ПооперационноеРасписание.ВремяПлан
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВремяРаботы,
	               |	СУММА(ВЫБОР
	               |			КОГДА ПооперационноеРасписание.ЭтоПереналадка
	               |				ТОГДА ПооперационноеРасписание.ВремяПлан
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВремяПереналадки
	               |ИЗ
	               |	Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	               |		ПО МаршрутныйЛистПроизводстваОперации.Ссылка = ПооперационноеРасписание.МаршрутныйЛист
	               |			И МаршрутныйЛистПроизводстваОперации.КлючСвязи = ПооперационноеРасписание.ИдентификаторОперации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьРабочихЦентров КАК ДоступностьРабочихЦентров
	               |		ПО (ПооперационноеРасписание.РабочийЦентр = ДоступностьРабочихЦентров.РабочийЦентр)
	               |			И (ПооперационноеРасписание.Начало МЕЖДУ ДоступностьРабочихЦентров.Начало И ДоступностьРабочихЦентров.Окончание)
	               |ГДЕ
	               |	МаршрутныйЛистПроизводстваОперации.Ссылка = &Ссылка
	               |	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен)
	               |	И ПооперационноеРасписание.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МаршрутныйЛистПроизводстваОперации.Ссылка,
	               |	ЕСТЬNULL(ДоступностьРабочихЦентров.Начало, ПооперационноеРасписание.Начало),
	               |	ПооперационноеРасписание.РабочийЦентр.ВидРабочегоЦентра,
	               |	ПооперационноеРасписание.РабочийЦентр";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)

	Если Запрос = Неопределено ИЛИ Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Назначение КАК Назначение,
	|		ТаблицаТовары.Получатель КАК Склад,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.СтатусУказанияСерий = 14 
	|			ТОГДА ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ КАК Серия
	|	ИЗ
	|		Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Назначение КАК Назначение,
	|		&Подразделение КАК Склад,
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
	|	ИЗ
	|		Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
		|		ТаблицаТовары.Назначение КАК Назначение,
	|		ТаблицаТовары.Получатель КАК Склад,
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
	|	ИЗ
	|		Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	) КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаТовары.Номенклатура = Аналитика.Номенклатура
	|		И ТаблицаТовары.Характеристика = Аналитика.Характеристика
	|		И ТаблицаТовары.Назначение = Аналитика.Назначение
	|		И ТаблицаТовары.Склад = Аналитика.МестоХранения
	|		И ТаблицаТовары.Серия = Аналитика.Серия
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Подразделение", Запрос.Параметры.ПодразделениеЭтапа);

	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;

	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Процедура ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                               КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Накладная,
	|	ЛОЖЬ                                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                        КАК ИсправляемыйДокумент,
	|	ТабличнаяЧасть.Ссылка.Распоряжение                                  КАК Заказ,	
	|	ТабличнаяЧасть.Ссылка.Дата                                          КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                           КАК Склад,
	|	ТабличнаяЧасть.Ссылка.Подразделение                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                                           КАК Назначение,
	|	0                                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Серия,
	|	ТабличнаяЧасть.КоличествоФакт                                       КАК Количество,
	|	ЛОЖЬ                                                                КАК СверхЗаказа,
	|	ЛОЖЬ                                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                КАК ЭтоНакладная
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.КоличествоФакт > 0
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка                                               КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Накладная,
	|	ЛОЖЬ                                                                КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                        КАК ИсправляемыйДокумент,
	|	ТабличнаяЧасть.Ссылка.Распоряжение                                  КАК Заказ,
	|	ТабличнаяЧасть.Ссылка.Дата                                          КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Соглашение,
	|	ТабличнаяЧасть.Ссылка.ВариантПриемкиТоваров                         КАК ВариантПриемкиТоваров,
	|	ТабличнаяЧасть.Получатель                                           КАК Склад,
	|	ТабличнаяЧасть.Ссылка.Подразделение                                 КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад) КАК ХозяйственнаяОперация,
	|	ТабличнаяЧасть.Номенклатура                                         КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                       КАК Характеристика,
	|	ТабличнаяЧасть.Назначение                                           КАК Назначение,
	|	0                                                                   КАК СтатусУказанияСерий,
	|	НЕОПРЕДЕЛЕНО                                                        КАК Серия,
	|	ТабличнаяЧасть.КоличествоФакт                                       КАК Количество,
	|	ЛОЖЬ                                                                КАК СверхЗаказа,
	|	ЛОЖЬ                                                                КАК ПоступлениеПоЗаказам,
	|	ЛОЖЬ                                                                КАК ЭтоНакладная
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка В (&Ссылка)
	|	И ТабличнаяЧасть.КоличествоФакт > 0
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТабличнаяЧасть.Получатель ССЫЛКА Справочник.Склады
	|	И ТабличнаяЧасть.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		"ТабличнаяЧасть");
	
КонецПроцедуры

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		// Выходные изделия.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата         КАК Период,
		|	ТабЧасть.Номенклатура        КАК Номенклатура,
		|	ТабЧасть.Характеристика      КАК Характеристика,
		|	ТабЧасть.Получатель          КАК Склад,
		|	ТабЧасть.Назначение          КАК Назначение,
		|	
		|	ВЫБОР КОГДА ТабЧасть.КоличествоФакт <> 0 ТОГДА
		|				ТабЧасть.КоличествоФакт
		|			ИНАЧЕ
		|				ТабЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ТабЧасть.Ссылка.Распоряжение КАК Заказ,
		|	ТабЧасть.Ссылка.Окончание    КАК ДатаПоступления,
		|	ИСТИНА                       КАК ДоступенДляРасхода,
		|	ЛОЖЬ                         КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                 КАК РаспоряжениеВГрафике,
		|	0                            КАК КоличествоВГрафике
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
		|		И (ТабЧасть.Получатель ССЫЛКА Справочник.Склады
		|			ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И (ТабЧасть.КоличествоФакт <> 0 ИЛИ ТабЧасть.Количество <> 0)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	// Возвратные отходы.
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата         КАК Период,
		|	ТабЧасть.Номенклатура        КАК Номенклатура,
		|	ТабЧасть.Характеристика      КАК Характеристика,
		|	ТабЧасть.Получатель          КАК Склад,
		|	ТабЧасть.Назначение          КАК Назначение,
		|	
		|	ВЫБОР КОГДА ТабЧасть.КоличествоФакт <> 0 ТОГДА
		|				ТабЧасть.КоличествоФакт
		|			ИНАЧЕ
		|				ТабЧасть.Количество
		|		КОНЕЦ КАК Количество,
		|	
		|	ТабЧасть.Ссылка.Распоряжение КАК Заказ,
		|	ТабЧасть.Ссылка.Окончание    КАК ДатаПоступления,
		|	ИСТИНА                       КАК ДоступенДляРасхода,
		|	ЛОЖЬ                         КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                 КАК РаспоряжениеВГрафике,
		|	0                            КАК КоличествоВГрафике
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
		|		И (ТабЧасть.Получатель ССЫЛКА Справочник.Склады
		|			ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|		И (ТабЧасть.КоличествоФакт <> 0 ИЛИ ТабЧасть.Количество <> 0)";
		
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	// Сторно заказа на производство.
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата         КАК Период,
		|	ТабЧасть.Номенклатура        КАК Номенклатура,
		|	ТабЧасть.Характеристика      КАК Характеристика,
		|	ТабЧасть.Получатель          КАК Склад,
		|	ТабЧасть.Назначение          КАК Назначение,
		|	0                            КАК Количество,
		|	НЕОПРЕДЕЛЕНО                 КАК Заказ,
		|	ДАТАВРЕМЯ(1, 1, 1)           КАК ДатаПоступления,
		|	ЛОЖЬ                         КАК ДоступенДляРасхода,
		|	ИСТИНА                       КАК ПоГрафику,
		|	ТабЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике,
		|	ТабЧасть.КоличествоПоЗаказу  КАК КоличествоВГрафике
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.РаспоряжениеСпецификация КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
		|		И ТабЧасть.КоличествоПоЗаказу <> 0
		|		И (ТабЧасть.Получатель ССЫЛКА Справочник.Склады
		|			ИЛИ ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
		
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПравоДоступа("Чтение", Метаданные.Документы.МаршрутныйЛистПроизводства) Тогда
		
		// Маршрутный лист
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент.ПечатьМаршрутныйЛистПроизводства";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "МаршрутныйЛист";
		КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист';
											|en = 'Operation sheet'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм, 
						"МаршрутныйЛист", 
						НСтр("ru = 'Маршрутный лист';
							|en = 'Operation sheet'"), 
						ПечатнаяФормаМаршрутногоЛиста(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаМаршрутногоЛиста(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МаршрутныйЛистПроизводства.ПФ_MXL_МаршрутныйЛист");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.Распоряжение,
	|	Реквизиты.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	Реквизиты.Распоряжение.Дата КАК РаспоряжениеДата,
	|	Реквизиты.КодСтроки КАК КодСтроки,
	|	ВЫБОР КОГДА Реквизиты.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ТОГДА Реквизиты.СпецификацияПолуфабриката.МногоэтапныйПроизводственныйПроцесс 
	|		ИНАЧЕ Реквизиты.Спецификация.МногоэтапныйПроизводственныйПроцесс 
	|	КОНЕЦ КАК МногоэтапныйПроизводственныйПроцесс,
	|	ВЫБОР КОГДА Реквизиты.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ТОГДА Реквизиты.СпецификацияПолуфабриката 
	|		ИНАЧЕ Реквизиты.Спецификация 
	|	КОНЕЦ КАК Спецификация,
	|	ВЫБОР КОГДА Реквизиты.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ТОГДА Реквизиты.СпецификацияПолуфабриката.Представление 
	|		ИНАЧЕ Реквизиты.Спецификация.Представление 
	|	КОНЕЦ КАК СпецификацияПредставление,
	|	Реквизиты.Этап КАК Этап,
	|	Реквизиты.Этап.Представление КАК ЭтапПредставление,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.Подразделение.Представление КАК ПодразделениеПредставление,
	|	Реквизиты.Подразделение.Код КАК КодПодразделения,
	|	Реквизиты.Номенклатура КАК Номенклатура,
	|	Реквизиты.Номенклатура.Представление КАК НоменклатураПредставление,
	|	Реквизиты.Характеристика КАК Характеристика,
	|	Реквизиты.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	Реквизиты.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	Реквизиты.МаршрутнаяКарта.Представление КАК МаршрутнаяКартаПредставление,
	|	Реквизиты.УправлениеМаршрутнымиЛистами КАК УправлениеМаршрутнымиЛистами,
	|	Реквизиты.Начало,
	|	Реквизиты.Окончание,
	|	Реквизиты.Запланировано,
	|	Реквизиты.Произведено,
	|	Реквизиты.Брак
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реквизиты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыходныеИзделия.Ссылка КАК Ссылка,
	|	ТаблицаВыходныеИзделия.НомерСтроки,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаВыходныеИзделия.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаВыходныеИзделия.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1 КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковок КАК Норматив,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|			ТОГДА ТаблицаВыходныеИзделия.КоличествоУпаковокФакт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Факт,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|			ТОГДА ТаблицаВыходныеИзделия.КоличествоУпаковокОтклонение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отклонение,
	|	ЕСТЬNULL(ТаблицаОперации.НомерОперации, """") КАК НомерОперации,
	|	ЕСТЬNULL(ТаблицаОперации.Операция, НЕОПРЕДЕЛЕНО) КАК Операция
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК ТаблицаОперации
	|		ПО (ТаблицаОперации.Ссылка = ТаблицаВыходныеИзделия.Ссылка)
	|			И (ТаблицаОперации.КлючСвязи = ТаблицаВыходныеИзделия.КлючСвязиОперации)
	|ГДЕ
	|	ТаблицаВыходныеИзделия.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалыИУслуги.Ссылка КАК Ссылка,
	|	ТаблицаМатериалыИУслуги.НомерСтроки,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаМатериалыИУслуги.Характеристика.Наименование КАК ХарактеристикаПредставление,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения2 КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаМатериалыИУслуги.КоличествоУпаковок КАК Норматив,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалыИУслуги.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|			ТОГДА ТаблицаМатериалыИУслуги.КоличествоУпаковокФакт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Факт,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалыИУслуги.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется),
	|														ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен))
	|			ТОГДА ТаблицаМатериалыИУслуги.КоличествоУпаковокОтклонение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отклонение,
	|	ЕСТЬNULL(ТаблицаОперации.НомерОперации, """") КАК НомерОперации,
	|	ЕСТЬNULL(ТаблицаОперации.Операция, НЕОПРЕДЕЛЕНО) КАК Операция
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК ТаблицаОперации
	|		ПО (ТаблицаОперации.Ссылка = ТаблицаМатериалыИУслуги.Ссылка)
	|			И (ТаблицаОперации.КлючСвязи = ТаблицаМатериалыИУслуги.КлючСвязиОперации)
	|ГДЕ
	|	ТаблицаМатериалыИУслуги.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОперации.Ссылка КАК Ссылка,
	|	ТаблицаОперации.Операция КАК Операция,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаОперации.Операция)         КАК ОперацияПредставление,
	|	ТаблицаОперации.НомерОперации                         КАК НомерОперации,
	|	ТаблицаОперации.ВремяВыполнения                       КАК ВремяВыполнения,
	|	ТаблицаОперации.ВремяВыполненияЕдИзм                  КАК ВремяВыполненияЕдИзм,
	|	ТаблицаОперации.ВремяПЗ                 КАК ВремяПЗ,
	|	ТаблицаОперации.ВремяПЗЕдИзм            КАК ВремяПЗЕдИзм
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК ТаблицаОперации
	|ГДЕ
	|	ТаблицаОперации.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаВыходныеИзделия.Упаковка",
			"ТаблицаВыходныеИзделия.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаМатериалыИУслуги.Упаковка",
			"ТаблицаМатериалыИУслуги.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛистПроизводства_МаршрутныйЛист";
	
	МассивРезультатов  = Запрос.ВыполнитьПакет();
	
	ДанныеПечати = МассивРезультатов[0].Выбрать();
	
	ТаблицаВыходныеИзделия = МассивРезультатов[1].Выгрузить();
	ТаблицаВыходныеИзделия.Индексы.Добавить("Ссылка");
	
	ТаблицаМатериалыИУслуги = МассивРезультатов[2].Выгрузить();
	ТаблицаМатериалыИУслуги.Индексы.Добавить("Ссылка");
	
	ТаблицаОперации = МассивРезультатов[3].Выгрузить();
	ТаблицаОперации.Индексы.Добавить("Ссылка");
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	
	ПервыйДокумент = Истина;
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Пока ДанныеПечати.Следующий() Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
		// Выводим общие реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		// Используем структуру для заполнения параметров, т.к. макет может изменяться пользователем.
		ДополнительныеПараметрыОбластьМакета = Новый Структура;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер);
		ДополнительныеПараметрыОбластьМакета.Вставить("НомерДокумента", НомерДокумента);
		ДополнительныеПараметрыОбластьМакета.Вставить("ДатаДокумента", Формат(ДанныеПечати.Дата, "ДЛФ=D"));
		
		// РаспоряжениеПредставление
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.РаспоряжениеНомер);
		РаспоряжениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '№%1 от %2 (код строки %3)';
											|en = 'No. %1 from %2 (line code %3)'"),
										НомерДокумента,
										Формат(ДанныеПечати.Дата, "ДЛФ=D"),
										Формат(ДанныеПечати.КодСтроки, "ЧГ="));
										
		ДополнительныеПараметрыОбластьМакета.Вставить("РаспоряжениеПредставление", РаспоряжениеПредставление);
		
		Если Минута(ДанныеПечати.Начало) = 0 
			И Час(ДанныеПечати.Начало) = 0 
			И Минута(ДанныеПечати.Окончание) = 59 
			И Час(ДанныеПечати.Окончание) = 23 Тогда
			
			ФорматПериода = "ДЛФ=D";
		Иначе
			ФорматПериода = "ДФ='dd.MM.yy ЧЧ:мм'";
		КонецЕсли;
		
		// НачатьНеРаньше
		НачатьНеРаньше = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															НСтр("ru = '(не раньше %1)';
																|en = '(not earlier than %1)'"),
															Формат(ДанныеПечати.Начало, ФорматПериода));
		
		ДополнительныеПараметрыОбластьМакета.Вставить("НачатьНеРаньше", НачатьНеРаньше);
		
		// СрокНеПозже
		СрокНеПозже = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															НСтр("ru = '(не позже %1)';
																|en = '(not later than %1)'"),
															Формат(ДанныеПечати.Окончание, ФорматПериода));
															
		ДополнительныеПараметрыОбластьМакета.Вставить("СрокНеПозже", СрокНеПозже);
		
		// ИзделиеПредставление
		ИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
									ДанныеПечати.НоменклатураПредставление, 
									ДанныеПечати.ХарактеристикаПредставление,
									,
									,
									ДопПараметрыПредставлениеНоменклатуры);
									
		ДополнительныеПараметрыОбластьМакета.Вставить("ИзделиеПредставление", ИзделиеПредставление);
		
		// СпецификацияПредставление
		СпецификацияПредставление = ДанныеПечати.СпецификацияПредставление;
		Если ДанныеПечати.МногоэтапныйПроизводственныйПроцесс Тогда
			СпецификацияПредставление = СпецификацияПредставление + ", " + ДанныеПечати.ЭтапПредставление;
		КонецЕсли;
		ДополнительныеПараметрыОбластьМакета.Вставить("СпецификацияПредставление", СпецификацияПредставление);
		
		ОбластьМакета.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы = 1;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// ВыходныеИзделия
		ПараметрыВывода = Новый Структура;
		ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
		ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "ВыходныеИзделия");
		ПараметрыВывода.Вставить("КолонкаКодов", ИмяКолонкиКодов);
		ПараметрыВывода.Вставить("ПредставлениеКолонкиКодов", ПредставлениеКолонкиКодов);
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоТабличнойЧасти = ТаблицаВыходныеИзделия.Скопировать(СтруктураПоиска);
		ВыборкаПоТабличнойЧасти.Сортировать("НомерСтроки");
		ВывестиТабличнуюЧасть(ПараметрыВывода, 
								СтруктураПоиска, 
								ВыборкаПоТабличнойЧасти, 
								Макет, 
								МассивВыводимыхОбластей, 
								НомерСтраницы, 
								ТабличныйДокумент);
		
		// МатериалыИУслуги
		Если ПараметрыПечати.ВывестиМатериалы Тогда
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "МатериалыИУслуги");
			ПараметрыВывода.Вставить("КолонкаКодов", ИмяКолонкиКодов);
			ПараметрыВывода.Вставить("ПредставлениеКолонкиКодов", ПредставлениеКолонкиКодов);
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоТабличнойЧасти = ТаблицаМатериалыИУслуги.Скопировать(СтруктураПоиска);
			ВыборкаПоТабличнойЧасти.Сортировать("НомерСтроки");
			ВывестиТабличнуюЧасть(ПараметрыВывода, 
									СтруктураПоиска, 
									ВыборкаПоТабличнойЧасти, 
									Макет, 
									МассивВыводимыхОбластей, 
									НомерСтраницы, 
									ТабличныйДокумент);
		КонецЕсли; 
		
		// Операции
		Если ПараметрыПечати.ВывестиОперации Тогда
			
			ВыборкаПоТабличнойЧасти = Неопределено;
			Если ДанныеПечати.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
				ИЛИ ДанныеПечати.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.РегистрацияОпераций Тогда
				
				СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
				ВыборкаПоТабличнойЧасти = ТаблицаОперации.Скопировать(СтруктураПоиска);
				
			ИначеЕсли НЕ ДанныеПечати.МаршрутнаяКарта.Пустая() Тогда
			
				СтруктураДанных = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКартыДляПечати(
											ДанныеПечати.МаршрутнаяКарта, 
											ДанныеПечати.Запланировано, 
											ДанныеПечати.Номенклатура, 
											ДанныеПечати.Характеристика,
											"Операции");
											
				ВыборкаПоТабличнойЧасти = СтруктураДанных.Операции;
				
			КонецЕсли;
			
			Если ВыборкаПоТабличнойЧасти <> Неопределено Тогда
				ВыборкаПоТабличнойЧасти.Сортировать("НомерОперации");
				
				ПараметрыВывода = Новый Структура;
				ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "Операции");
				ВывестиТабличнуюЧасть(ПараметрыВывода, 
										СтруктураПоиска, 
										ВыборкаПоТабличнойЧасти, 
										Макет, 
										МассивВыводимыхОбластей, 
										НомерСтраницы, 
										ТабличныйДокумент);
			КонецЕсли;

		КонецЕсли; 
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиТабличнуюЧасть(ПараметрыВывода, СтруктураПоиска, ВыборкаПоТабличнойЧасти, Макет, МассивВыводимыхОбластей, НомерСтраницы, ТабличныйДокумент)

	Если ВыборкаПоТабличнойЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьКоды = ПараметрыВывода.Свойство("КолонкаКодов") И ЗначениеЗаполнено(ПараметрыВывода.КолонкаКодов);
	
	ИмяТабличнойЧасти = ПараметрыВывода.ИмяТабличнойЧасти;
	ОбластьИмяТаблицы       = Макет.ПолучитьОбласть("ИмяТаб_"   + ИмяТабличнойЧасти);
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаб_" + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	ОбластьПодвалТаблицы    = Макет.ПолучитьОбласть("Подвал_"   + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка_"   + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	
	ТабличныйДокумент.Вывести(ОбластьИмяТаблицы);
	ТабличныйДокумент.НачатьГруппуСтрок(ИмяТабличнойЧасти);
	
	Если ВыводитьКоды Тогда
		ОбластьЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = ПараметрыВывода.ПредставлениеКолонкиКодов;
	КонецЕсли; 
	
	НомерСтроки = 0;
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для каждого СтрокаТовары Из ВыборкаПоТабличнойЧасти Цикл
		
		НомерСтроки = НомерСтроки + 1;
	
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если НомерСтроки = 1 Тогда
		
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
		
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			
			Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Используем структуру для заполнения параметров, т.к. макет может изменяться пользователем.
		ДополнительныеПараметрыОбластьМакета = Новый Структура;
		
		ДополнительныеПараметрыОбластьМакета.Вставить("НомерСтроки", НомерСтроки);
		
		Если ПараметрыВывода.Свойство("ПолучитьПредставлениеНоменклатурыДляПечати") Тогда
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
										СтрокаТовары.НоменклатураПредставление, 
										СтрокаТовары.ХарактеристикаПредставление,
										,
										,
										ДопПараметрыПредставлениеНоменклатуры);
										
			ДополнительныеПараметрыОбластьМакета.Вставить("НоменклатураПредставление", НоменклатураПредставление);
		КонецЕсли;
		
		
		Если ПараметрыВывода.Свойство("НаПродукцию") Тогда
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТовары.Номер);
			МаршрутныйЛистПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = '№%1 от %2';
															|en = 'No. %1 from %2'"), 
														НомерДокумента, 
														Формат(СтрокаТовары.Дата, "ДЛФ=D"));
			ДополнительныеПараметрыОбластьМакета.Вставить("МаршрутныйЛистПредставление", МаршрутныйЛистПредставление);
			ДополнительныеПараметрыОбластьМакета.Вставить("МаршрутныйЛист", СтрокаТовары.Ссылка);
		КонецЕсли; 
		
		Если ВыводитьКоды Тогда
			ДополнительныеПараметрыОбластьМакета.Вставить("Артикул", СтрокаТовары["Номенклатура" + ПараметрыВывода.КолонкаКодов]);
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Операции" Тогда
			НормативноеВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(СтрокаТовары.ВремяВыполнения, СтрокаТовары.ВремяВыполненияЕдИзм);
			НормативноеВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
									НормативноеВремя, 
									Перечисления.ЕдиницыИзмеренияВремени.Час);
			ДополнительныеПараметрыОбластьМакета.Вставить("НормативноеВремя", НормативноеВремя);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
			
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Назначение КАК Назначение,
	|	&СкладОтправитель КАК СкладОтправитель,
	|	Товары.КоличествоФакт КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.МатериалИзрасходован КАК МатериалИзрасходован,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА Товары.Количество = 0
	|			ТОГДА 0
	|		КОГДА НЕ ТребуетсяСправочноеУказаниеСерий.Спецификация ЕСТЬ NULL
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) И НЕ &ФактОтбора И НЕ Товары.МатериалИзрасходован
	|						ТОГДА 21
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|							И Товары.Количество > 0
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ &ФактОтбора И НЕ Товары.МатериалИзрасходован
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) И НЕ &ФактОтбора И НЕ Товары.МатериалИзрасходован
	|						ТОГДА 11
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|							И Товары.Количество > 0
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) И НЕ &ФактОтбора И НЕ Товары.МатериалИзрасходован
	|						ТОГДА 25
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|							И Товары.Количество > 0
	|						ТОГДА 6
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриРасходеМатериалов
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) И НЕ &ФактОтбора И НЕ Товары.МатериалИзрасходован
	|						ТОГДА 21
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|							И Товары.Количество > 0
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.СкладОтправитель)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяСправочноеУказаниеСерий КАК ТребуетсяСправочноеУказаниеСерий
	|		ПО ТребуетсяСправочноеУказаниеСерий.Спецификация = &Спецификация
	|			И ТребуетсяСправочноеУказаниеСерий.Номенклатура = Товары.Номенклатура
	|			И ТребуетсяСправочноеУказаниеСерий.ВидСтрокиСпецификации = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокДереваСпецификаций.Материал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийИзделия()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	&Склад КАК Подразделение,
	|	Товары.Получатель КАК Получатель,
	|	Товары.КоличествоФакт КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Получатель КАК Получатель,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Подразделение,
	|	Товары.Получатель,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение КАК Назначение,
	|	Серии.Получатель КАК Получатель,
	|	Серии.КоличествоФакт КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Назначение КАК Назначение,
	|	Серии.Получатель КАК Получатель,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА ТребуетсяСправочноеУказаниеСерий.Спецификация ЕСТЬ НЕ NULL 
	|				ИЛИ (ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ НЕ NULL 
	|					И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПроизводствеПродукции)
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество > 0
	|							И ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|						ТОГДА 2
	|					КОГДА (НЕ &ФактОтбора
	|							ИЛИ ТоварыДляЗапроса.Количество = 0)
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 21
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Получатель = ТоварыДляЗапроса.Получатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|			И Товары.Назначение = СерииДляЗапроса.Назначение
	|			И Товары.Получатель = СерииДляЗапроса.Получатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Товары.Подразделение = ПолитикиУчетаСерий.Склад
	|			И (СправочникНоменклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяСправочноеУказаниеСерий КАК ТребуетсяСправочноеУказаниеСерий
	|		ПО (ТребуетсяСправочноеУказаниеСерий.Спецификация = &Спецификация)
	|			И (ТребуетсяСправочноеУказаниеСерий.Номенклатура = Товары.Номенклатура)
	|			И (ТребуетсяСправочноеУказаниеСерий.ВидСтрокиСпецификации = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокДереваСпецификаций.ВыходноеИзделие))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	СтатусыПолучатель КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяДокумента()

	Возврат "Документ.МаршрутныйЛистПроизводства";

КонецФункции

#КонецОбласти

#Область Прочее

Процедура НазначитьРабочийЦентрОперациям(Операции, РабочийЦентр) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МаршрутныйЛистПроизводстваОперации.Ссылка КАК Ссылка,
	|	МаршрутныйЛистПроизводстваОперации.КлючСвязи
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|ГДЕ
	|	МаршрутныйЛистПроизводстваОперации.КлючСвязи В(&Операции)
	|	И МаршрутныйЛистПроизводстваОперации.РабочийЦентр <> &РабочийЦентр
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("Операции", Операции);
	Запрос.УстановитьПараметр("РабочийЦентр", РабочийЦентр);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		
		ДокументОбъект = ВыборкаИтоги.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ПредставлениеДокумента = ПользовательскоеПредставлениеДокумента(ДокументОбъект.Ссылка);
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить маршрутный лист %1. Возможно, документ в настоящий момент редактируется.';
					|en = 'Cannot change route sheet %1. The document is probably locked for editing.'"),
				ПредставлениеДокумента);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НайденнаяСтрока = ДокументОбъект.Операции.Найти(Выборка.КлючСвязи, "КлючСвязи");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока.РабочийЦентр = РабочийЦентр;
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументОбъект.Разблокировать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаОстаткиМатериаловВПодразделенииПоМаршрутнымЛистам()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ОстаткиВПодразделении.КоличествоОстаток) КАК Количество,
	|	ОстаткиВПодразделении.Организация КАК Организация,
	|	ОстаткиВПодразделении.Номенклатура КАК Номенклатура,
	|	ОстаткиВПодразделении.Характеристика КАК Характеристика,
	|	ОстаткиВПодразделении.Назначение КАК Назначение,
	|	ОстаткиВПодразделении.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
	|			,
	|			(Организация, Номенклатура,Характеристика,Назначение,Подразделение) В
	|				(ВЫБРАТЬ
	|					ВТ_МатериалыВыбранныхМЛ.Организация,
	|					ВТ_МатериалыВыбранныхМЛ.Номенклатура,
	|					ВТ_МатериалыВыбранныхМЛ.Характеристика,
	|					ВТ_МатериалыВыбранныхМЛ.Назначение,
	|					ВТ_МатериалыВыбранныхМЛ.Подразделение
	|				ИЗ
	|					ВТ_МатериалыВыбранныхМЛ)) КАК ОстаткиВПодразделении
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВПодразделении.Организация,
	|	ОстаткиВПодразделении.Номенклатура,
	|	ОстаткиВПодразделении.Характеристика,
	|	ОстаткиВПодразделении.Назначение,
	|	ОстаткиВПодразделении.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МатериалыВыбранныхМЛ.Ссылка,
	|	ВТ_МатериалыВыбранныхМЛ.Организация,
	|	ВТ_МатериалыВыбранныхМЛ.Номенклатура,
	|	ВТ_МатериалыВыбранныхМЛ.Характеристика,
	|	ВТ_МатериалыВыбранныхМЛ.Назначение,
	|	ЕСТЬNULL(ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ.Количество, 0) КАК ОстатокВПодразделении
	|ПОМЕСТИТЬ ВТ_МатериалыМЛКоторымНеХватает
	|ИЗ
	|	ВТ_МатериалыВыбранныхМЛ КАК ВТ_МатериалыВыбранныхМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ КАК ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ
	|		ПО (ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ.Номенклатура = ВТ_МатериалыВыбранныхМЛ.Номенклатура)
	|			И (ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ.Характеристика = ВТ_МатериалыВыбранныхМЛ.Характеристика)
	|			И (ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ.Назначение = ВТ_МатериалыВыбранныхМЛ.Назначение)
	|			И (ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ.Подразделение = ВТ_МатериалыВыбранныхМЛ.Подразделение)
	|			И (ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ.Организация = ВТ_МатериалыВыбранныхМЛ.Организация)
	|ГДЕ
	|	ВТ_МатериалыВыбранныхМЛ.Количество > ЕСТЬNULL(ВТ_ОстаткиВПодразделенииПоВыбраннымМЛ.Количество, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МатериалыВыбранныхМЛ.Ссылка,
	|	ВТ_МатериалыВыбранныхМЛ.Организация,
	|	ВТ_МатериалыВыбранныхМЛ.Подразделение,
	|	ВТ_МатериалыВыбранныхМЛ.Номенклатура,
	|	ВТ_МатериалыВыбранныхМЛ.Характеристика,
	|	ВТ_МатериалыВыбранныхМЛ.Назначение
	|ПОМЕСТИТЬ ВТ_МатериалыМЛКоторымХватает
	|ИЗ
	|	ВТ_МатериалыВыбранныхМЛ КАК ВТ_МатериалыВыбранныхМЛ
	|ГДЕ
	|	НЕ (ВТ_МатериалыВыбранныхМЛ.Ссылка, ВТ_МатериалыВыбранныхМЛ.Номенклатура, ВТ_МатериалыВыбранныхМЛ.Характеристика, ВТ_МатериалыВыбранныхМЛ.Назначение) В
	|				(ВЫБРАТЬ
	|					ВТ_МатериалыМЛКоторымНеХватает.Ссылка,
	|					ВТ_МатериалыМЛКоторымНеХватает.Номенклатура,
	|					ВТ_МатериалыМЛКоторымНеХватает.Характеристика,
	|					ВТ_МатериалыМЛКоторымНеХватает.Назначение
	|				ИЗ
	|					ВТ_МатериалыМЛКоторымНеХватает)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_МатериалыМЛКоторымХватает.Организация,
	|	ВТ_МатериалыМЛКоторымХватает.Подразделение,
	|	ВТ_МатериалыМЛКоторымХватает.Номенклатура,
	|	ВТ_МатериалыМЛКоторымХватает.Характеристика,
	|	ВТ_МатериалыМЛКоторымХватает.Назначение
	|ПОМЕСТИТЬ ВТ_ТолькоМатериалыМЛКоторымХватает
	|ИЗ
	|	ВТ_МатериалыМЛКоторымХватает КАК ВТ_МатериалыМЛКоторымХватает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Организация КАК Организация,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Номенклатура КАК Номенклатура,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Характеристика КАК Характеристика,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Назначение КАК Назначение,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Подразделение КАК Подразделение,
	|	СУММА(МаршрутныйЛистПроизводстваМатериалыИУслуги.Количество) КАК КоличествоВсе,
	|	СУММА(ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан)
	|				ТОГДА МаршрутныйЛистПроизводстваМатериалыИУслуги.Количество
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоТолькоКВыполнению
	|ПОМЕСТИТЬ ВТ_МатериалыВсехМЛ
	|ИЗ
	|	ВТ_ТолькоМатериалыМЛКоторымХватает КАК ВТ_ТолькоМатериалыМЛКоторымХватает
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Подразделение = ВТ_ТолькоМатериалыМЛКоторымХватает.Подразделение)
	|			И (МаршрутныйЛистПроизводства.Проведен)
	|			И (МаршрутныйЛистПроизводства.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Создан), 
	|													ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению), 
	|													ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК МаршрутныйЛистПроизводстваМатериалыИУслуги
	|		ПО (МаршрутныйЛистПроизводстваМатериалыИУслуги.Ссылка = МаршрутныйЛистПроизводства.Ссылка)
	|			И (МаршрутныйЛистПроизводстваМатериалыИУслуги.Номенклатура = ВТ_ТолькоМатериалыМЛКоторымХватает.Номенклатура)
	|			И (МаршрутныйЛистПроизводстваМатериалыИУслуги.Характеристика = ВТ_ТолькоМатериалыМЛКоторымХватает.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Организация,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Номенклатура,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Характеристика,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Назначение,
	|	ВТ_ТолькоМатериалыМЛКоторымХватает.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОстаткиВПодразделении.КоличествоОстаток) КАК Количество,
	|	ОстаткиВПодразделении.Организация КАК Организация,
	|	ОстаткиВПодразделении.Номенклатура КАК Номенклатура,
	|	ОстаткиВПодразделении.Характеристика КАК Характеристика,
	|	ОстаткиВПодразделении.Назначение КАК Назначение,
	|	ОстаткиВПодразделении.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ОстаткиВПодразделенииПоВсемМЛ
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
	|			,
	|			(Организация,Номенклатура,Характеристика,Назначение,Подразделение) В
	|				(ВЫБРАТЬ
	|					ВТ_МатериалыВсехМЛ.Организация,
	|					ВТ_МатериалыВсехМЛ.Номенклатура,
	|					ВТ_МатериалыВсехМЛ.Характеристика,
	|					ВТ_МатериалыВсехМЛ.Назначение,
	|					ВТ_МатериалыВсехМЛ.Подразделение
	|				ИЗ
	|					ВТ_МатериалыВсехМЛ)) КАК ОстаткиВПодразделении
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВПодразделении.Организация,
	|	ОстаткиВПодразделении.Номенклатура,
	|	ОстаткиВПодразделении.Характеристика,
	|	ОстаткиВПодразделении.Назначение,
	|	ОстаткиВПодразделении.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПользовательскоеПредставлениеДокумента(ДокументСсылка)
	
	НомерДата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата");
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДата.Номер);
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№%1 от %2';
				|en = 'No. %1 from %2'"), 
			НомерНаПечать, 
			Формат(НомерДата.Дата, "ДЛФ=D"));
			
	Возврат Результат;
	
КонецФункции

Процедура ИзменитьСтатусСвязанныхОпераций(ДокументОбъект, Операции, НовыйСтатус, ОбработанныеОперации)
		
	Если НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.НеНачато Тогда
		
		НомераСледующихОпераций = Новый Массив;
		Для каждого Операция Из Операции Цикл
			НомераСледующихОпераций.Добавить(Операция.НомерСледующейОперации);
		КонецЦикла;
		СтатусСледующих = Перечисления.СтатусыВыполненияОпераций.НеНачато;
		ИзменитьСтатусСледующихОпераций(ДокументОбъект, НомераСледующихОпераций, СтатусСледующих, ОбработанныеОперации);
		
	ИначеЕсли НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.Начато Тогда
		
		НомераОпераций = Новый Массив;
		Для каждого Операция Из Операции Цикл
			НомераОпераций.Добавить(Операция.НомерОперации);
		КонецЦикла;
		СтатусПредшествующих = Перечисления.СтатусыВыполненияОпераций.Завершено;
		ИзменитьСтатусПредшествующихОпераций(ДокументОбъект, НомераОпераций, СтатусПредшествующих, ОбработанныеОперации);
		
		НомераСледующихОпераций = Новый Массив;
		Для каждого Операция Из Операции Цикл
			НомераСледующихОпераций.Добавить(Операция.НомерСледующейОперации);
		КонецЦикла;
		СтатусСледующих = Перечисления.СтатусыВыполненияОпераций.НеНачато;
		ИзменитьСтатусСледующихОпераций(ДокументОбъект, НомераСледующихОпераций, СтатусСледующих, ОбработанныеОперации);
		
	ИначеЕсли НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.Завершено Тогда
		
		НомераОпераций = Новый Массив;
		Для каждого Операция Из Операции Цикл
			НомераОпераций.Добавить(Операция.НомерОперации);
		КонецЦикла;
		СтатусПредшествующих = Перечисления.СтатусыВыполненияОпераций.Завершено;
		ИзменитьСтатусПредшествующихОпераций(ДокументОбъект, НомераОпераций, СтатусПредшествующих, ОбработанныеОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСтатусСледующихОпераций(ДокументОбъект, НомераОпераций, НовыйСтатус, ОбработанныеОперации)
	
	СтруктураПоиска = Новый Структура("НомерОперации");
	
	Пока НомераОпераций.Количество() > 0 Цикл
		
		СтруктураПоиска.НомерОперации = НомераОпераций[0];
		НайденныеСтроки = ДокументОбъект.Операции.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			Если ОбработанныеОперации.Найти(Строка.КлючСвязи) = Неопределено Тогда
				
				Строка.СтатусВыполнения = НовыйСтатус;
				ОбработанныеОперации.Добавить(Строка.КлючСвязи);
				НомераОпераций.Добавить(Строка.НомерСледующейОперации);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомераОпераций.Удалить(0);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьСтатусПредшествующихОпераций(ДокументОбъект, НомераОпераций, НовыйСтатус, ОбработанныеОперации)
	
	СтруктураПоиска = Новый Структура("НомерСледующейОперации");
	
	Пока НомераОпераций.Количество() > 0 Цикл
		
		СтруктураПоиска.НомерСледующейОперации = НомераОпераций[0];
		НайденныеСтроки = ДокументОбъект.Операции.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			Если ОбработанныеОперации.Найти(Строка.КлючСвязи) = Неопределено Тогда
				
				Строка.СтатусВыполнения = НовыйСтатус;
				ОбработанныеОперации.Добавить(Строка.КлючСвязи);
				НомераОпераций.Добавить(Строка.НомерОперации);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомераОпераций.Удалить(0);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСрокиВыполненияОперацийПриИзмененииСтатуса(ДокументОбъект, НовыйСтатус)
	
	Если НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.Начато
		И НЕ ЗначениеЗаполнено(ДокументОбъект.ФактическоеНачалоВыполненияОпераций) Тогда
		
		ДокументОбъект.ФактическоеНачалоВыполненияОпераций = ТекущаяДатаСеанса();
		
	ИначеЕсли НовыйСтатус = Перечисления.СтатусыВыполненияОпераций.Завершено
		И НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаВыполненияОпераций) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ФактическоеНачалоВыполненияОпераций) Тогда
			ДокументОбъект.ФактическоеНачалоВыполненияОпераций = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ВсеОперацииЗавершены = Истина;
		Для каждого Строка Из ДокументОбъект.Операции Цикл
			Если НЕ Строка.СтатусВыполнения = Перечисления.СтатусыВыполненияОпераций.Завершено Тогда
				ВсеОперацииЗавершены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеОперацииЗавершены Тогда
			ДокументОбъект.ДатаВыполненияОпераций = ТекущаяДатаСеанса();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21
