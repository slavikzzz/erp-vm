
&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	ЗадатьЗначенияНовогоДокумента();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(
		ЭтаФорма, "ГруппаОрганизация");
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	ЗаявлениеОтправлено = ЗаявлениеОтправлено(Объект.Ссылка);
	
	Если НЕ ЭтоНовый Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	Иначе
		Объект.Статус			= "Не отправлено";
		Объект.ДатаОтправкиВФСС	= Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	ПрорисоватьСтатус();
	
	ТекущаяДатаДокумента = ТекущаяДатаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Создано заявление на формирование справки о расчетах с СФР");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОчиститьРеквизитыСтрахователя();
	
	РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИмяФайлаСправкиНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВходящийФайлСПодписьюФонда) Тогда
		СсылкаНаФайл = Объект.ВходящийФайлСПодписьюФонда;
	Иначе
		СсылкаНаФайл = Объект.ВходящийФайл;
	КонецЕсли;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(СсылкаНаФайл,
		Неопределено, УникальныйИдентификатор, Неопределено);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьПослеСохранения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокФормы(Форма)
	
	Объект 		= Форма.Объект;
	Заголовок 	= НСтр("ru = 'Запрос на сверку: Справка о расчетах (%1)';
						|en = 'Запрос на сверку: Справка о расчетах (%1)'");
	
	// Для нового документа в скобках пишем "создание", 
	// для записанного - период.
	Если Форма.ЭтоНовый Тогда
		Заголовок = СтрШаблон(Заголовок, НСтр("ru = 'создание';
												|en = 'создание'"));
	Иначе
		Заголовок = СтрШаблон(Заголовок, Формат(Объект.ДатаЗадолженности, "ДФ='на dd.MM.yyyy'"));
	КонецЕсли;
	
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОбратногоВызова = Новый ОписаниеОповещения("ОбновитьОтправкуПослеПолучения", ЭтотОбъект);
	Организации = Новый Массив;
	Организации.Добавить(Объект.Организация);
	КонтекстЭДОКлиент.ПолучитьВходящиеСообщенияСЭДОФСС(
		ОповещениеОбратногоВызова,
		Организации,
		Истина,
		Истина);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗадатьЗначенияНовогоДокумента()

	Если ЭтоНовый Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗадатьОрганизациюПоУмолчанию();
			
			СтруктураПараметров = Новый Структура("Организация, ДатаЗадолженности");
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Параметры);
			ЗаполнитьДокументПоСтруктуре(СтруктураПараметров);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			
			Если Параметры.ЗначенияЗаполнения.Свойство("Организация")
				И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
				
				Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
			КонецЕсли;
			
			Если Параметры.ЗначенияЗаполнения.Свойство("ДатаЗадолженности")
				И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ДатаЗадолженности) Тогда
				
				Объект.ДатаЗадолженности = Параметры.ЗначенияЗаполнения.ДатаЗадолженности;
			КонецЕсли;
			
			Если Параметры.ЗначенияЗаполнения.Свойство("Ссылка")
				И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ДатаЗадолженности) Тогда
				
				Объект.ДатаЗадолженности = Параметры.ЗначенияЗаполнения.ДатаЗадолженности;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗадолженности) Тогда
			Объект.ДатаЗадолженности = НачалоКвартала(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаявлениеОтправлено(Ссылка)
	
	СтатусОтправки = КонтекстЭДОСервер().ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	ЗаявлениеОтправлено = 
		ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
		
	Возврат ЗаявлениеОтправлено;
	
КонецФункции

&НаСервере
Процедура ЗадатьОрганизациюПоУмолчанию()

	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ОргПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.Отправить.Видимость = Не ЗначениеЗаполнено(Объект.ДатаОтправкиВФСС);
	Элементы.Записать.ТолькоВоВсехДействиях = ЗначениеЗаполнено(Объект.ДатаОтправкиВФСС);
	
	Элементы.ДекорацияИмяФайлаСправки.Видимость = ЗначениеЗаполнено(Объект.ИмяФайлаСправки);
	Элементы.ДекорацияИмяФайлаСправки.Заголовок = ?(ЗначениеЗаполнено(Объект.ИмяФайлаСправкиПредставление),
		"Справка о расчетах", "");
	
	Форма.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДатаОтправкиВФСС) ИЛИ Форма.ТолькоПросмотр;
	Элементы.ОбновитьОтправку.Доступность = Истина;
	
	УправлениеФорматомОтвета(Форма);
	УправлениеВнешнимВидомОтправленногоЗаявления(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФорматомОтвета(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.ФорматОтветаПредставление = НСтр("ru = 'Документ Adobe PDF (.pdf)';
											|en = 'Документ Adobe PDF (.pdf)'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтекстЭДОСервер()
	
	Возврат ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
КонецФункции

&НаСервере
Функция ПрорисоватьСтатус()
	
	Статус = Объект.Статус;
	ЭтоНовый = Параметры.Ключ.Пустая();
	Если НЕ ЭтоНовый И Статус = "Подготовлено" ИЛИ Статус = "Не отправлено" Тогда
		
		Элементы.НаименованиеЭтапа.Заголовок	= "Не отправлено";
		Элементы.БлокСостоянияОтправки.ЦветФона	= ЦветаСтиля.ЦветФонаНеначавшейсяОтправки;
		Элементы.ОбновитьОтправку.Видимость		= Ложь;
		Элементы.ЭтапыОтправки.Видимость		= Ложь;
		
	ИначеЕсли Статус = "Отправлено" Тогда
		
		СвойстваПоследнейОтправки =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваПоследнейОтправкиОтчетаВФСС(Объект.Ссылка);
		Элементы.НаименованиеЭтапа.Заголовок = ?(СвойстваПоследнейОтправки <> Неопределено
			И СвойстваПоследнейОтправки.ОбменЧерезОператора И НЕ СвойстваПоследнейОтправки.ДоставленоВСФР,
			НСтр("ru = 'Отправлено оператору';
				|en = 'Отправлено оператору'"), НСтр("ru = 'Отправлено в СФР';
														|en = 'Отправлено в СФР'"));
		Элементы.БлокСостоянияОтправки.ЦветФона	= ЦветаСтиля.ЦветФонаТекущейОтправки;
		Элементы.ОбновитьОтправку.Видимость		= Истина;
		
	ИначеЕсли Статус = "Зарегистрировано" Тогда
		
		Элементы.НаименованиеЭтапа.Заголовок	= "Принято в обработку";
		Элементы.БлокСостоянияОтправки.ЦветФона	= ЦветаСтиля.ЦветФонаТекущейОтправки;
		Элементы.ОбновитьОтправку.Видимость		= Истина;
		
	ИначеЕсли Статус = "Справка получена" Тогда
		
		Элементы.НаименованиеЭтапа.Заголовок	= "Готово";
		Элементы.ОбновитьОтправку.Видимость		= Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументПоСтруктуре(СтруктураПараметров)
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Объект.Организация = СтруктураПараметров.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыОрганизацииНаСервере(Организация)
	
	Если ТипЗнч(Объект.Организация) = Тип("СправочникСсылка.Организации")
		И Объект.Организация <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		
		СвойстваОрганизации = ДокументооборотСКОВызовСервера.ПолучитьСвойстваОрганизации(Объект.Организация);
		
		Объект.Страхователь_ЮридическоеЛицо = СвойстваОрганизации.ЭтоЮридическоеЛицо;
		
		Объект.РегистрационныйНомерФСС = ДокументооборотСКОВызовСервера.ПолучитьРеквизит(
			Объект.Организация,
			"РегистрационныйНомерФСС");
			
		Объект.КодПодчиненностиФСС = ДокументооборотСКОВызовСервера.ПолучитьРеквизит(
			Объект.Организация,
			"КодПодчиненностиФСС");
		Если НЕ ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
			Объект.КодПодчиненностиФСС = Лев(Объект.РегистрационныйНомерФСС, 5);
		КонецЕсли;
		
		Если СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
			Объект.СтраховательЮЛ_НаимОрг	= СвойстваОрганизации.НаимЮЛПол;
			Объект.СтраховательЮЛ_ИНН		= СвойстваОрганизации.ИННЮЛ;
			Объект.СтраховательЮЛ_КПП		= СвойстваОрганизации.КППЮЛ;
		Иначе
			СтруктураФИО = РегламентированнаяОтчетность.РазложитьФИО(СвойстваОрганизации.ФИО);
			
			Объект.СтраховательФЛ_Имя			= СтруктураФИО.Имя;
			Объект.СтраховательФЛ_Фамилия		= СтруктураФИО.Фамилия;
			Объект.СтраховательФЛ_Отчество		= СтруктураФИО.Отчество;
			
			Объект.СтраховательФЛ_ИНН = СвойстваОрганизации.ИННФЛ;
			
			Объект.СтраховательФЛ_ДатаВыдачиДокумента = СвойстваОрганизации.ДатаУдЛичн;
			Объект.СтраховательФЛ_ВидДокумента = 
				Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(СвойстваОрганизации.ВидУдЛичн);
			Объект.СтраховательФЛ_СерияДокумента = СвойстваОрганизации.СерияУдЛичн;
			Объект.СтраховательФЛ_НомерДокумента = СвойстваОрганизации.НомерУдЛичн;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьРеквизитыСтрахователя()
	
	Объект.КодПодчиненностиФСС 					= "";
	Объект.РегистрационныйНомерФСС 				= "";
	Объект.СтраховательЮЛ_НаимОрг 				= "";
	Объект.СтраховательЮЛ_ИНН 					= "";
	Объект.СтраховательЮЛ_КПП 					= "";
	Объект.СтраховательФЛ_Имя 					= "";
	Объект.СтраховательФЛ_Фамилия 				= "";
	Объект.СтраховательФЛ_Отчество 				= "";
	Объект.СтраховательФЛ_ИНН 					= "";
	Объект.СтраховательФЛ_ДатаВыдачиДокумента 	= Дата(1,1,1);
	Объект.СтраховательФЛ_ВидДокумента 			=
		ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	Объект.СтраховательФЛ_СерияДокумента 		= "";
	Объект.СтраховательФЛ_НомерДокумента 		= "";
	Объект.Страхователь_ЮридическоеЛицо 		= Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеДокумента()
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Текст = НСтр("ru = 'Выберите страхователя из справочника ""Организации""';
					|en = 'Выберите страхователя из справочника ""Организации""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст, , "Организация");
		Возврат Ложь;
	КонецЕсли;
	
	РезультатыПроверки = ПроверитьВозможностьВыгрузкиЗаявленияНаФормированиеСправкиОРасчетахСФР();
	
	Если РезультатыПроверки.Количество() <> 0 Тогда
		Для каждого РезультатПроверки Из РезультатыПроверки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки, , РезультатПроверки.Поле);
		КонецЦикла;
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузкиЗаявленияНаФормированиеСправкиОРасчетахСФР()
	
	Результат = Новый Массив;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ГодДатыСеанса = Год(ДатаСеанса);
	МинимальнаяДата = Дата(1990, 1, 1);
	ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
	МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
	МаксимальнаяДата = КонецГода(МаксимальнаяДата);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаЗадолженности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата, на которую производится расчет задолженности';
				|en = 'Не задана дата, на которую производится расчет задолженности'"), "ДатаЗадолженности"));
	ИначеЕсли Объект.ДатаЗадолженности > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Дата, на которую производится расчет задолженности, не может быть больше максимальной даты';
				|en = 'Дата, на которую производится расчет задолженности, не может быть больше максимальной даты'"),
				"ДатаЗадолженности"));
	ИначеЕсли Объект.ДатаЗадолженности < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Дата, на которую производится расчет задолженности, не может быть меньше минимальной даты';
				|en = 'Дата, на которую производится расчет задолженности, не может быть меньше минимальной даты'"),
				"ДатаЗадолженности"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан код подчиненности СФР';
				|en = 'Не задан код подчиненности СФР'"), "КодПодчиненностиФСС"));
	ИначеЕсли СтрДлина(Объект.КодПодчиненностиФСС) <> 5 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный код подчиненности СФР';
				|en = 'Указан некорректный код подчиненности СФР'"), "КодПодчиненностиФСС"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана регистрационный номер страхователя';
				|en = 'Не задана регистрационный номер страхователя'"), "РегистрационныйНомерФСС"));
	ИначеЕсли СтрДлина(Объект.РегистрационныйНомерФСС) <> 10 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный регистрационный номер страхователя';
				|en = 'Указан некорректный регистрационный номер страхователя'"), "РегистрационныйНомерФСС"));
	КонецЕсли;
	
	Если Объект.Страхователь_ЮридическоеЛицо Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательЮЛ_НаимОрг) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование страхователя';
					|en = 'Не задано наименование страхователя'"), "СтраховательЮЛ_НаимОрг"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательЮЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН страхователя';
					|en = 'Не задан ИНН страхователя'"), "СтраховательЮЛ_ИНН"));
		ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
			Объект.СтраховательЮЛ_ИНН, Истина, "") Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН организации доверителя';
					|en = 'Указан некорректный ИНН организации доверителя'"), "СтраховательЮЛ_ИНН"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательЮЛ_КПП) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан КПП страхователя';
					|en = 'Не задан КПП страхователя'"), "СтраховательЮЛ_КПП"));
		ИначеЕсли СтрДлина(Объект.СтраховательЮЛ_КПП) <> 9 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный КПП организации доверителя';
					|en = 'Указан некорректный КПП организации доверителя'"), "СтраховательЮЛ_КПП"));
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательФЛ_Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано имя страхователя';
					|en = 'Не задано имя страхователя'"), "СтраховательФЛ_Имя"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательФЛ_Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана фамилия страхователя';
					|en = 'Не задана фамилия страхователя'"), "СтраховательФЛ_Фамилия"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательФЛ_ДатаВыдачиДокумента) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата выдачи документа, удостоверяющего личность страхователя';
					|en = 'Не задана дата выдачи документа, удостоверяющего личность страхователя'"),
					"СтраховательФЛ_ДатаВыдачиДокумента"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательФЛ_ВидДокумента) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан вид документа, удостоверяющего личность страхователя';
					|en = 'Не задан вид документа, удостоверяющего личность страхователя'"),
					"СтраховательФЛ_ВидДокумента"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательФЛ_СерияДокумента) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана серия документа, удостоверяющего личность страхователя';
					|en = 'Не задана серия документа, удостоверяющего личность страхователя'"),
					"СтраховательФЛ_СерияДокумента"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтраховательФЛ_НомерДокумента) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан номер документа, удостоверяющего личность страхователя';
					|en = 'Не задан номер документа, удостоверяющего личность страхователя'"),
					"СтраховательФЛ_НомерДокумента"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПослеСохранения()
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправкиВФСС) Тогда
		Оповещение = Новый ОписаниеОповещения("ОтправитьПослеВопросаОПовторе", ЭтотОбъект);
		Шаблон = НСтр("ru = 'Заявление на формирование справки о расчетах было отправлено %1. Отправить повторно?';
						|en = 'Заявление на формирование справки о расчетах было отправлено %1. Отправить повторно?'");
		ТекстВопроса = СтрШаблон(Шаблон, Объект.ДатаОтправкиВФСС);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
		Возврат;
	КонецЕсли;
	
	ОтправитьПослеВопросаОПовторе(КодВозвратаДиалога.ОК, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеВопросаОПовторе(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьПослеОтправки",
		ЭтотОбъект);
		
	ОтправитьВСФР(ОписаниеОповещения, Объект.Ссылка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВСФР(
		ОповещениеОбратногоВызова,
		ДокументОтвета,
		ЗадаватьВопросОТестовомСервере = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова",		ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ДокументОтвета",					ДокументОтвета);
	ДополнительныеПараметры.Вставить("ЗадаватьВопросОТестовомСервере",	ЗадаватьВопросОТестовомСервере);
	ДополнительныеПараметры.Вставить("ИдентификаторыСообщенияОтвета",	Новый Соответствие);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент",				Неопределено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьПослеПолученияКонтекста",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Выполнено Тогда
		СохранитьРезультатОтправки(Результат);
		Заголовок = НСтр("ru = 'Отправка заявления на формирование справки о расчетах в ФСС';
						|en = 'Отправка заявления на формирование справки о расчетах в ФСС'");
		Заголовок = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Заголовок, Истина);
		ТекстСообщения = НСтр("ru = 'Заявление на формирование справки о расчетах было успешно отправлено в ФСС.';
								|en = 'Заявление на формирование справки о расчетах было успешно отправлено в ФСС.'");
		ТекстСообщения = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ТекстСообщения, Истина);
		ПоказатьПредупреждение( , ТекстСообщения, , Заголовок);
	Иначе
		Заголовок = НСтр("ru = 'Ошибка при отправке заявления на формирование справки о расчетах в ФСС';
						|en = 'Ошибка при отправке заявления на формирование справки о расчетах в ФСС'");
		Заголовок = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Заголовок, Истина);
		ПоказатьПредупреждение( ,Результат.ОписаниеОшибки, , Заголовок);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ПрорисоватьСтатус();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова 		= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	КонтекстЭДОКлиент 						= Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО 	= Результат.ТекстОшибки;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.КонтекстЭДОКлиент = КонтекстЭДОКлиент;
	ОтправитьЗаявлениеНаФормированиеСправкиОРасчетахЦикл(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявлениеНаФормированиеСправкиОРасчетахЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторыСообщенияОтвета 	= ДополнительныеПараметры.ИдентификаторыСообщенияОтвета;
	ЗадаватьВопросОТестовомСервере 	= ДополнительныеПараметры.ЗадаватьВопросОТестовомСервере;
	ОповещениеОбратногоВызова 		= ДополнительныеПараметры.ОповещениеОбратногоВызова;
	КонтекстЭДОКлиент 				= ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если НЕ Результат = Неопределено
		И НЕ Результат.Выполнено Тогда
		Результат.Вставить("ИдентификаторыСообщенияОтвета", ИдентификаторыСообщенияОтвета);
		ОтправитьПослеОтправки(Результат, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкаСообщения = КонтекстЭДОКлиент.ПараметрыОтправитьСообщениеСЭДОФСС();
	ПараметрыОтправкаСообщения.Вставить("РегистрационныйНомерФСС", "");
	ПараметрыОтправкаСообщения.Вставить("ТипВзаимодействия", 		Неопределено);
	ПараметрыОтправкаСообщения.Вставить("СвойстваДляОбмена", 		Неопределено);
	ПараметрыОтправкаСообщения.Вставить("НастройкиЗаписиОтправки", 	Неопределено);
	
	ЗаполнитьПараметрыОтправкиПоДокументу(ПараметрыОтправкаСообщения, Объект.Ссылка);
	Если ПараметрыОтправкаСообщения.СодержимоеСообщения = "" Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьПослеОтправки",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПараметрыОтправкаСообщения.ОповещениеОбратногоВызова = Оповещение;
	ПараметрыОтправкаСообщения.ОписаниеОшибки =
		НСтр("ru = 'Не удалось отправить запрос на сверку.';
			|en = 'Не удалось отправить запрос на сверку.'")
		+ Символы.ПС + "%1";
	
	КонтекстЭДОКлиент.ОтправитьСообщениеСЭДОФСС(
		ПараметрыОтправкаСообщения,
		ЗадаватьВопросОТестовомСервере,
		Ложь,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправкуПослеПолучения(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	ПрорисоватьСтатус();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатОтправки(РезультатОтправки)
	
	Объект.ИдентификаторСообщения	= РезультатОтправки.ИдентификаторЗапроса;
	Объект.ДатаОтправкиВФСС			= ТекущаяДатаСеанса();
	Объект.Статус					= "Отправлено";
	Записать();
	
	Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(
		Объект.Организация).ОбменПоСЭДОНапрямую Тогда
		
		ЭлектронныйДокументооборотСФСС.ДобавитьОтправкуФССПоСЭДО(
			Объект.Ссылка,
			РезультатОтправки.ИдентификаторЗапроса,
			Объект.Организация,
			Объект.ДатаОтправкиВФСС);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОтправкиПоДокументу(ПараметрыОтправкаСообщения, Ссылка)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтправкаСообщения.ТипСообщения = "317";
	ПараметрыОтправкаСообщения.Организация = Ссылка.Организация;
	ПараметрыОтправкаСообщения.СодержимоеСообщения =
		КонтекстЭДОСервер.СформироватьФайлЗаявленияНаФормированиеСправкиОРасчетахСФР(Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВнешнимВидомОтправленногоЗаявления(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;

	Если ЗначениеЗаполнено(Объект.ДатаОтправкиВФСС ) Тогда
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.Организация.Вид 	= ВидПоляФормы.ПолеНадписи;
		Элементы.Организация.МаксимальнаяШирина = 30;
		Элементы.Организация.Ширина = 30;
		Элементы.Организация.АвтоМаксимальнаяШирина = Ложь;
		
		Элементы.Получатель.Вид 	= ВидПоляФормы.ПолеНадписи;
		
		// Обход ошибки платформы: при изменении вида сбрасываются размеры.
		Элементы.Получатель.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Получатель.МаксимальнаяШирина = 30;
		Элементы.Получатель.Ширина = 30;
		Элементы.Получатель.АвтоМаксимальнаяШирина = Ложь;
		
		Элементы.ДатаЗадолженности.Вид 	= ВидПоляФормы.ПолеНадписи;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти