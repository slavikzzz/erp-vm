#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ВидОперации = Объект.ВидОперации;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьДоступностьСубконто();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.РасшифровкаНалогов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Продолжить?';
							|en = 'The table will be cleared. Do you want to continue?'");
		Оповещение = Новый ОписаниеОповещения("ВопросСменаОперацииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВидОперации = Объект.ВидОперации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаНалогов

&НаКлиенте
Процедура РасшифровкаНалоговПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"РасшифровкаНалоговСубконто1", "РасшифровкаНалоговСубконто2", "РасшифровкаНалоговСубконто3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетУчета, ЭтотОбъект, ПоляФормы, Неопределено, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговТипНалогаПриИзменении(Элемент)
	
	РасшифровкаНалоговТипНалогаПриИзмененииНаСервере();
	РасшифровкаНалоговУточнитьКБК();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаНалоговТипНалогаПриИзмененииНаСервере()
	
	СтрокаРасшифровки = Объект.РасшифровкаНалогов.НайтиПоИдентификатору(Элементы.РасшифровкаНалогов.ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ТипНалога) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРасшифровки.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(СтрокаРасшифровки.ТипНалога);
	ОбработатьИзменениеСчетаУчета(ЭтотОбъект, СтрокаРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСчетУчетаПриИзменении(Элемент)
	ОбработатьИзменениеСчетаУчета(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	СтатьиДоходовБюджетаРФ = ЕдиныйНалоговыйСчет.КБКПоТипамНалогов(Объект.Дата);
	
	ТипыСвязанныеСОрганизацией = НастройкаСчетовУчетаСервер.ТипыСвязанныеСОрганизацией();
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Платежный документ
	
	ВидимостьПлатежногоДокумента = Новый СписокЗначений;
	ВидимостьПлатежногоДокумента.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета);
	ВидимостьПлатежногоДокумента.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов);
	ВидимостьПлатежногоДокумента.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговПлатежныйДокумент"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидимостьПлатежногоДокумента;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Вид движения
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговВидДвижения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Вид платежа
	
	ВидимостьВидПлатежа = Новый СписокЗначений;
	ВидимостьВидПлатежа.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов);
	ВидимостьВидПлатежа.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговВидПлатежа"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидимостьВидПлатежа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Счет и субконто
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСчетУчета"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ГруппаСубконто"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто1"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто2"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто3"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Тип налога, срок уплаты и КБК
	
	ВидимостьТипНалога = Новый СписокЗначений;
	ВидимостьТипНалога.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов);
	ВидимостьТипНалога.Добавить(Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговГруппаНалог"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговТипНалога"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговКодБК"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСрокУплаты"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидимостьТипНалога;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Для Индекс = 1 По 3 Цикл
		
		// Подсказка субконто
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто" + Индекс].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс + "Доступность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
		
		// Доступность субконто
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто" + Индекс].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс + "Доступность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
	//
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаНалогов Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетУчета, СтрокаТаблицы, ПоляОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчетаУчета(Форма, СтрокаТаблицы)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"РасшифровкаНалоговСубконто1", "РасшифровкаНалоговСубконто2", "РасшифровкаНалоговСубконто3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СтрокаТаблицы.СчетУчета, Форма, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	ПоляОбъекта.Вставить("Организация", Форма.Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы["СчетУчета"], СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы)
	
	ПараметрыДокумента = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСубконто(Форма.Объект.Организация, СтрокаТаблицы, "Субконто%Индекс%", "СчетУчета");
	НастройкаСчетовУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, СтрокаТаблицы, "Субконто%Индекс%", "РасшифровкаНалоговСубконто%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные      = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	ПараметрыДокумента = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСубконто(ЭтотОбъект.Объект.Организация, ТекущиеДанные, "Субконто%Индекс%", "СчетУчета");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПараметрыВыбора(Элемент)
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговУточнитьКБК()
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	
	КБКПоТипуНалога = СтатьиДоходовБюджетаРФ.Получить(ТекущиеДанные.ТипНалога);
	Если Не ЗначениеЗаполнено(КБКПоТипуНалога) Тогда
		ТекущиеДанные.КодБК = "";
		Возврат;
	КонецЕсли;
	
	Если КБКПоТипуНалога.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаНалоговУточнитьКБКЗавершение", ЭтотОбъект, ТекущиеДанные);
		ПоказатьВыборИзСписка(ОписаниеОповещения, КБКПоТипуНалога, Элементы.РасшифровкаНалоговКодБК);
	Иначе
		РасшифровкаНалоговУточнитьКБКЗавершение(КБКПоТипуНалога.Получить(0), ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговУточнитьКБКЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КБК = Результат.Значение;
	
	КБКПоВидуПлатежа = "";
	Для Каждого ПодвидДохода Из КБК.ПодвидыДохода Цикл
		Если ПодвидДохода.Значение.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог") Тогда
			КБКПоВидуПлатежа = КБК.Администратор + КБК.ВидДохода + ПодвидДохода.Ключ + КБК.КОСГУ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные.КодБК = КБКПоВидуПлатежа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Ответ, РезультатВыбора) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаНалогов.Очистить();
	Объект.Организация = РезультатВыбора;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСменаОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВидОперации = Объект.ВидОперации;
		Объект.РасшифровкаНалогов.Очистить();
	Иначе
		Объект.ВидОперации = ВидОперации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти