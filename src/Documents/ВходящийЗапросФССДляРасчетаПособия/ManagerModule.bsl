///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Страхователь)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия;
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО()
		Или Не ПравоДоступа("Изменение", МетаданныеДокумента) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(МетаданныеДокумента.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	ВРаботе                  = Требования.Количество();
	ТребуетсяЗагрузить       = Требования.НайтиСтроки(Новый Структура("ТребуетсяЗагрузить", Истина)).Количество();
	ТребуетсяОтветитьВсего   = Требования.НайтиСтроки(Новый Структура("ТребуетсяОтветить", Истина)).Количество();
	ТребуетсяОтветитьСегодня = Требования.НайтиСтроки(Новый Структура("ТребуетсяОтветитьСегодня", Истина)).Количество();
	ТребуетсяОтветитьЗавтра  = ТребуетсяОтветитьВсего - ТребуетсяОтветитьСегодня;
	ИмяДокумента             = МетаданныеДокумента.Имя;
	ПредставлениеСписка      = МетаданныеДокумента.ПредставлениеСписка;
	
	Для Каждого Раздел Из Разделы Цикл
		
		ПолноеИмяРаздела = СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_ВРаботе_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ВРаботе > 0);
		Дело.Важное         = (ТребуетсяОтветитьСегодня > 0);
		Дело.Владелец       = Раздел;
		Дело.Представление  = ПредставлениеСписка;
		Дело.Количество     = ВРаботе;
		Дело.ПараметрыФормы = Новый Структура("ТолькоВРаботе", Истина);
		Дело.Форма          = "Документ.ВходящийЗапросФССДляРасчетаПособия.ФормаСписка";
		
		ИдентификаторРодителя = Дело.Идентификатор;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Загрузить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяЗагрузить > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Получить новые';
									|en = 'Get new to-do list items'");
		Дело.Количество     = ТребуетсяЗагрузить;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_ОтветитьСегодня_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяОтветитьСегодня > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Ответить на запрос сегодня';
									|en = 'Respond to the request today'");
		Дело.Количество     = ТребуетсяОтветитьСегодня;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДокумента + "_Ответить_" + ПолноеИмяРаздела;
		Дело.ЕстьДела       = (ТребуетсяОтветитьЗавтра > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = ИдентификаторРодителя;
		Дело.Представление  = НСтр("ru = 'Ответить на запрос';
									|en = 'Respond to the request'");
		Дело.Количество     = ТребуетсяОтветитьЗавтра;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТипСообщения() Экспорт
	Возврат 100;
КонецФункции

// Возникает при заполнении документа ИсходящееСообщениеОСтраховомСлучаеФСС на основании больничного.
Процедура ЗаполнитьИсходящееСообщениеОСтраховомСлучаеФСС(ВходящийЗапрос, ДокументСЭДО, Реквизиты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.АктоваяЗаписьОРожденииДата КАК АктоваяЗаписьОРожденииДата,
	|	ВходящийЗапросФССДляРасчетаПособия.АктоваяЗаписьОРожденииНомер КАК АктоваяЗаписьОРожденииНомер,
	|	ВходящийЗапросФССДляРасчетаПособия.ВидПособия КАК ВидПособия,
	|	ВходящийЗапросФССДляРасчетаПособия.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВходящийЗапросФССДляРасчетаПособия.ИнойДокументОРожденииДатаВыдачи КАК ИнойДокументОРожденииДатаВыдачи,
	|	ВходящийЗапросФССДляРасчетаПособия.ИнойДокументОРожденииНомер КАК ИнойДокументОРожденииНомер,
	|	ВходящийЗапросФССДляРасчетаПособия.ИнойДокументОРожденииСерия КАК ИнойДокументОРожденииСерия,
	|	ВходящийЗапросФССДляРасчетаПособия.НомерЛН КАК НомерЛН,
	|	ВходящийЗапросФССДляРасчетаПособия.Организация КАК Организация,
	|	ВходящийЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаНачала КАК ОтпускПоУходуДатаНачала,
	|	ВходящийЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаОкончания КАК ОтпускПоУходуДатаОкончания,
	|	ВходящийЗапросФССДляРасчетаПособия.Ребенок КАК Ребенок,
	|	ВходящийЗапросФССДляРасчетаПособия.РебенокДатаРождения КАК РебенокДатаРождения,
	|	ВходящийЗапросФССДляРасчетаПособия.РебенокИмя КАК РебенокИмя,
	|	ВходящийЗапросФССДляРасчетаПособия.РебенокКодСвязи КАК РебенокКодСвязи,
	|	ВходящийЗапросФССДляРасчетаПособия.РебенокОтчество КАК РебенокОтчество,
	|	ВходящийЗапросФССДляРасчетаПособия.РебенокПол КАК РебенокПол,
	|	ВходящийЗапросФССДляРасчетаПособия.РебенокСНИЛС КАК РебенокСНИЛС,
	|	ВходящийЗапросФССДляРасчетаПособия.РебенокФамилия КАК РебенокФамилия,
	|	ВходящийЗапросФССДляРасчетаПособия.СвидетельствоОРожденииДатаВыдачи КАК СвидетельствоОРожденииДатаВыдачи,
	|	ВходящийЗапросФССДляРасчетаПособия.СвидетельствоОРожденииНомер КАК СвидетельствоОРожденииНомер,
	|	ВходящийЗапросФССДляРасчетаПособия.СвидетельствоОРожденииСерия КАК СвидетельствоОРожденииСерия,
	|	ВходящийЗапросФССДляРасчетаПособия.Сотрудник КАК Сотрудник,
	|	ВходящийЗапросФССДляРасчетаПособия.СотрудникДатаРождения КАК СотрудникДатаРождения,
	|	ВходящийЗапросФССДляРасчетаПособия.СотрудникКатегория КАК СотрудникКатегория,
	|	ВходящийЗапросФССДляРасчетаПособия.СотрудникОтчество КАК СотрудникОтчество,
	|	ВходящийЗапросФССДляРасчетаПособия.СотрудникСНИЛС КАК СотрудникСНИЛС,
	|	ВходящийЗапросФССДляРасчетаПособия.СотрудникФамилия КАК СотрудникФамилия,
	|	ВходящийЗапросФССДляРасчетаПособия.СправкаОРожденииДатаВыдачи КАК СправкаОРожденииДатаВыдачи,
	|	ВходящийЗапросФССДляРасчетаПособия.СправкаОРожденииНомер КАК СправкаОРожденииНомер,
	|	ВходящийЗапросФССДляРасчетаПособия.СправкаОРожденииФорма КАК СправкаОРожденииФорма,
	|	ВходящийЗапросФССДляРасчетаПособия.Страхователь КАК Страхователь,
	|	ВходящийЗапросФССДляРасчетаПособия.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ВходящийЗапрос);
	РеквизитыВходящегоЗапроса = Запрос.Выполнить().Выгрузить()[0];
	
	ЗаполнитьЗначенияСвойств(Реквизиты, РеквизитыВходящегоЗапроса);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.163";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("19260314-4630-11ed-810e-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ВходящийЗапросФССДляРасчетаПособия.ЗаполнитьИнформациюОПерерасчете";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение информации о перерасчете в документах ""Входящий запрос ФСС для расчета пособия"".';
										|en = 'Заполнение информации о перерасчете в документах ""Входящий запрос ФСС для расчета пособия"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.47";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("43fee353-270a-11ee-8117-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ВходящийЗапросФССДляРасчетаПособия.ЗаполнитьЗапросыПоСпецификации_2_34";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение документов ""Входящий запрос ФСС для расчета пособия"" по версии спецификации ""2.34"".';
										|en = 'Заполнение документов ""Входящий запрос ФСС для расчета пособия"" по версии спецификации ""2.34"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.191";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("46921ef8-da15-11ee-8120-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ВходящийЗапросФССДляРасчетаПособия.ЗаполнитьЗапросыПоСпецификации_2_36";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение документов ""Входящий запрос ФСС для расчета пособия"" по версии спецификации ""2.36"".';
										|en = 'Заполнение документов ""Входящий запрос ФСС для расчета пособия"" по версии спецификации ""2.36"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.56";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("47c3fb73-5aeb-11ef-812d-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ВходящийЗапросФССДляРасчетаПособия.ЗаполнитьЗапросыПоСпецификации_2_41";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение документов ""Входящий запрос ФСС для расчета пособия"" по версии спецификации ""2.41"".';
										|en = 'Заполнение документов ""Входящий запрос ФСС для расчета пособия"" по версии спецификации ""2.41"".'");
	
КонецПроцедуры

// Заполнение информации о перерасчете в документах "Входящий запрос ФСС для расчета пособия".
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьИнформациюОПерерасчете(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК ИдентификаторСообщения,
	|	ВходящиеСообщенияСЭДОФСС.Организация КАК Страхователь,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое,
	|	ЕСТЬNULL(ВходящийЗапросФСС.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВходящийЗапросФСС.Страхователь ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВходящийЗапросФСС.Страхователь = ВходящиеСообщенияСЭДОФСС.Организация
	|			ТОГДА 1
	|		КОГДА ВходящийЗапросФСС.ГоловнаяОрганизация = Страхователи.ГоловнаяОрганизация
	|			ТОГДА 2
	|		КОГДА ВходящийЗапросФСС.Страхователь > ВходящиеСообщенияСЭДОФСС.Организация
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Приоритет,
	|	ВходящийЗапросФСС.Перерасчет КАК Перерасчет,
	|	ВходящийЗапросФСС.ПерерасчетИдентификаторСтрокиРеестра КАК ПерерасчетИдентификаторСтрокиРеестра
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Страхователи
	|		ПО ВходящиеСообщенияСЭДОФСС.Организация = Страхователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФСС
	|		ПО ВходящиеСообщенияСЭДОФСС.Идентификатор = ВходящийЗапросФСС.ИдентификаторСообщения
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Тип = 100
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ИсходныеДанные.Страхователь КАК Страхователь,
	|	МИНИМУМ(ИсходныеДанные.Приоритет) КАК МинимальныйПриоритет
	|ПОМЕСТИТЬ МинимальныеПриоритеты
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.ИдентификаторСообщения,
	|	ИсходныеДанные.Страхователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ИсходныеДанные.Страхователь КАК Страхователь,
	|	ИсходныеДанные.Содержимое КАК Содержимое,
	|	ИсходныеДанные.Ссылка КАК Ссылка
	|ИЗ
	|	МинимальныеПриоритеты КАК МинимальныеПриоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходныеДанные КАК ИсходныеДанные
	|		ПО МинимальныеПриоритеты.ИдентификаторСообщения = ИсходныеДанные.ИдентификаторСообщения
	|			И МинимальныеПриоритеты.Страхователь = ИсходныеДанные.Страхователь
	|			И МинимальныеПриоритеты.МинимальныйПриоритет = ИсходныеДанные.Приоритет
	|ГДЕ
	|	ИсходныеДанные.Перерасчет = ЛОЖЬ
	|	И ИсходныеДанные.ПерерасчетИдентификаторСтрокиРеестра = """"""""";
	
	НовыеИдентификаторы = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстXML = Выборка.Содержимое.Получить();
		Если ТипЗнч(ТекстXML) <> Тип("Строка") Или ПустаяСтрока(ТекстXML) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
		УзелПерерасчет = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "recalculation");
		Если УзелПерерасчет = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Реквизиты = УзлыЭлементаDOM(УзелПерерасчет, "batchNum");
		ИдентификаторСтрокиРеестра = СериализацияБЗК.СтрокаИзXML(Реквизиты.batchNum);
		Если Не ЗначениеЗаполнено(ИдентификаторСтрокиРеестра) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			НовыеИдентификаторы.Добавить(Выборка.ИдентификаторСообщения);
			Продолжить;
		КонецЕсли;
		ВходящийЗапросОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВходящийЗапросОбъект.Перерасчет = Истина;
		ВходящийЗапросОбъект.ПерерасчетИдентификаторСтрокиРеестра = ИдентификаторСтрокиРеестра;
		СЭДОФСС.ЗаписатьДокумент(ВходящийЗапросОбъект);
	КонецЦикла;
	
	Если НовыеИдентификаторы.Количество() > 0 Тогда
		СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(Неопределено, , НовыеИдентификаторы);
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

// Заполнение документов "Входящий запрос ФСС для расчета пособия" по версии спецификации "2.34".
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьЗапросыПоСпецификации_2_34(ПараметрыОбновления = Неопределено) Экспорт
	ДатаНачала = '20230601';
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
	|	ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|		ПО ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения = ВходящиеСообщенияСЭДОФСС.Идентификатор
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.ДатаСообщения >= &ДатаСообщения
	|	И ВходящийЗапросФССДляРасчетаПособия.Загружен
	|	И ВходящийЗапросФССДляРасчетаПособия.ВерсияСпецификации = """"";
	Запрос.УстановитьПараметр("ДатаСообщения", ДатаНачала);
	
	Идентификаторы = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстXML = Выборка.Содержимое.Получить();
		Если ТипЗнч(ТекстXML) <> Тип("Строка") Или ПустаяСтрока(ТекстXML) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
		Если СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "paymentMethod") <> Неопределено
			Или СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "sumType") <> Неопределено Тогда
			Идентификаторы.Добавить(Выборка.ИдентификаторСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Если Идентификаторы.Количество() > 0 Тогда
		СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления, Неопределено, Идентификаторы);
	Иначе
		Если ПараметрыОбновления <> Неопределено Тогда
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение документов "Входящий запрос ФСС для расчета пособия" по версии спецификации "2.36".
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьЗапросыПоСпецификации_2_36(ПараметрыОбновления = Неопределено) Экспорт
	ДатаНачала = СЭДОФСС.ДатаПереходаНаВерсиюПроактива_2_36();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
	|	ВходящийЗапросФССДляРасчетаПособия.ВидПособия КАК ВидПособия,
	|	ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|		ПО ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения = ВходящиеСообщенияСЭДОФСС.Идентификатор
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.ДатаСообщения >= &ДатаСообщения
	|	И ВходящийЗапросФССДляРасчетаПособия.Загружен
	|	И ВходящийЗапросФССДляРасчетаПособия.ВерсияСпецификации <> ""2.36""";
	Запрос.УстановитьПараметр("ДатаСообщения", ДатаНачала);
	
	Идентификаторы = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстXML = Выборка.Содержимое.Получить();
		Если ТипЗнч(ТекстXML) <> Тип("Строка") Или ПустаяСтрока(ТекстXML) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ТекстXML, "severalInsurersInTwoPrevYearAssignment") > 0 Тогда
			Идентификаторы.Добавить(Выборка.ИдентификаторСообщения);
		Иначе
			ВидПособия = СЭДОФСС.СведенияОВидеПособия(Выборка.ВидПособия);
			СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
			Если (ВидПособия.ЭтоОтпускПоУходу
					И СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "twoPrevYearsInsurers") <> Неопределено)
				Или СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "insurancePaymentObligation") <> Неопределено
				Или (Не ВидПособия.ЭтоОбычныйБольничный
					И Не ВидПособия.ЭтоБольничныйПоБиР
					И СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "contractsType") <> Неопределено)
				Тогда
				Идентификаторы.Добавить(Выборка.ИдентификаторСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Идентификаторы.Количество() > 0 Тогда
		СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления, Неопределено, Идентификаторы);
	Иначе
		Если ПараметрыОбновления <> Неопределено Тогда
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение документов "Входящий запрос ФСС для расчета пособия" по версии спецификации "2.41".
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьЗапросыПоСпецификации_2_41(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания >= &ДатаСообщения
	|	И ВходящиеСообщенияСЭДОФСС.Тип = 100
	|	И ВходящиеСообщенияСЭДОФСС.ОшибкаОбработкиСообщения <> """"
	|	И НЕ ВходящиеСообщенияСЭДОФСС.Новое
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|		ПО ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения = ВходящиеСообщенияСЭДОФСС.Идентификатор
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.ДатаСообщения >= &ДатаСообщения
	|	И ВходящийЗапросФССДляРасчетаПособия.Загружен
	|	И (ВходящийЗапросФССДляРасчетаПособия.ПервыйРасчетныйГодВидЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаГодовогоЗаработкаСФР.ПустаяСсылка)
	|			ИЛИ ВходящийЗапросФССДляРасчетаПособия.ВторойРасчетныйГодВидЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаГодовогоЗаработкаСФР.ПустаяСсылка))";
	Запрос.УстановитьПараметр("ДатаСообщения", '20240801');
	
	Идентификаторы = КоллекцииБЗК.УникальныеЗначенияКолонки(Запрос.Выполнить().Выгрузить(), "ИдентификаторСообщения");
	Если Идентификаторы.Количество() > 0 Тогда
		СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления, Неопределено, Идентификаторы);
	Иначе
		Если ПараметрыОбновления <> Неопределено Тогда
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область МногофункциональныеДокументы

// Возвращает метаданные разделов документа.
//
// Возвращаемое значение:
//   Соответствие, Неопределено - Описание разделов документа.
//
Функция ОписаниеРазделовДанных() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗККлиентСервер");
		ВсеРазделы = Модуль.РазделыДанных();
		
		ОписаниеРазделовДанных = Новый Соответствие();
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.КадровыеДанные, ОписаниеРаздела);
		ОписаниеРаздела.РеквизитСостояние    = "Проведен";
		ОписаниеРаздела.РеквизитОтветсвенный = "Ответственный";
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.НачисленнаяЗарплата, ОписаниеРаздела);
		Возврат ОписаниеРазделовДанных;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает значения по которым будут проверяться права на документ.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Структура - Значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульМногофункциональныеДокументыБЗК = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗК");
		Возврат МодульМногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
			ДокументОбъект,
			ДокументОбъект.Организация);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ВводНаОсновании

// Формирует структуру данных для заполнения документа "Больничный лист".
//
// Параметры:
//   Ссылка - ДокументСсылка.ВходящийЗапросФССДляРасчетаПособия
//
Функция ДанныеДляЗаполненияБольничного(Ссылка) Экспорт
	ИменаРеквизитов = "Организация, Сотрудник, ФизическоеЛицо, НомерЛН";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	ЗначенияРеквизитов.Вставить("НомерЛисткаНетрудоспособности", ЗначенияРеквизитов.НомерЛН);
	Возврат ЗначенияРеквизитов;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СЭДО

Процедура ЗагрузитьУведомлениеОНаличииСообщения100(Страхователь, ИдентификаторСообщения, ТребуетсяПодтверждение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		// Поиск документа по идентификатору сообщения.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗапросСведений.Ссылка КАК Ссылка,
		|	ЗапросСведений.Дата КАК Дата,
		|	ЗапросСведений.ПометкаУдаления КАК ПометкаУдаления,
		|	ЗапросСведений.Организация КАК Организация,
		|	ЗапросСведений.Страхователь КАК Страхователь,
		|	ЗапросСведений.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ЗапросСведений
		|ГДЕ
		|	ЗапросСведений.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Страхователь = Страхователь
				И Не Выборка.ПометкаУдаления
				И ТребуетсяПодтверждение = Выборка.ТребуетсяПодтверждение Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.ВходящийЗапросФССДляРасчетаПособия.СоздатьДокумент();
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация = Страхователь;
		КонецЕсли;
		ДокументОбъект.Страхователь           = Страхователь;
		ДокументОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
		ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
		ДокументОбъект.ЗаполнитьДату();
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о наличии входящего запроса сведений для расчета пособия ФСС %1 возникла ошибка: %2';
				|en = 'An error occurred when importing the notification of incoming information request for the %1 SSF allowance calculation: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьСообщение100(Страхователь, ИдентификаторСообщения, ТекстXML, ТребуетсяПодтверждение, Результат, Кэш) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "confirmationRequest");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM.ЭлементДокумента;
	КонецЕсли;
	
	ДатаСообщения = СЭДОФСС.ДатаСообщения(ИдентификаторСообщения, Кэш);
	
	// Подготовка структуры документа.
	Документ = Новый Структура;
	Документ.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПустаяСсылка());
	Документ.Вставить("Страхователь", Страхователь);
	Документ.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	Документ.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
	Документ.Вставить("Загружен", Истина);
	Документ.Вставить("ДатаСообщения", ДатаСообщения);
	// Место работы:
	Документ.Вставить("Организация", Страхователь);
	Документ.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	// Реквизиты для поиска физического лица:
	Документ.Вставить("СотрудникСНИЛС", "");
	Документ.Вставить("СотрудникФамилия", "");
	Документ.Вставить("СотрудникИмя", "");
	Документ.Вставить("СотрудникОтчество", "");
	// Реквизиты для поиска ребенка:
	Документ.Вставить("РебенокДатаРождения", '00010101');
	Документ.Вставить("РебенокСНИЛС", "");
	Документ.Вставить("РебенокФамилия", "");
	Документ.Вставить("РебенокИмя", "");
	Документ.Вставить("РебенокОтчество", "");
	Документ.Вставить("РебенокКодСвязи", "");
	Документ.Вставить("РебенокПол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	Документ.Вставить("ТекстОшибки", "");
	// Флажки, обозначающие отсутствие или наличие определенных тегов:
	Документ.Вставить("Перерасчет", Ложь);
	
	// Чтение реквизитов XML.
	РеквизитыКорня = УзлыЭлементаDOM(КореньDOM, "socialAssistNum,
	|benefit1Approve, benefit2Approve, benefit4Approve, benefit5Approve, benefit6Approve,
	|recalculation");
	
	Попытка
		// Чтение реквизитов XML.
		Документ.Вставить("НомерПроцесса", СериализацияБЗК.ЗначениеXML(РеквизитыКорня.socialAssistNum, Тип("Число")));
		Если ТипЗнч(РеквизитыКорня.benefit1Approve) = Тип("ЭлементDOM") Тогда
			Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности;
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit1Approve);
		КонецЕсли;
		Если ТипЗнч(РеквизитыКорня.benefit2Approve) = Тип("ЭлементDOM") Тогда
			Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам;
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit2Approve);
		КонецЕсли;
		Если ТипЗнч(РеквизитыКорня.benefit4Approve) = Тип("ЭлементDOM") Тогда
			Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка;
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit4Approve);
		КонецЕсли;
		Если ТипЗнч(РеквизитыКорня.benefit5Approve) = Тип("ЭлементDOM") Тогда
			Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком;
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit5Approve);
		КонецЕсли;
		Если ТипЗнч(РеквизитыКорня.benefit6Approve) = Тип("ЭлементDOM") Тогда
			Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве;
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit6Approve);
		КонецЕсли;
		Если ТипЗнч(РеквизитыКорня.recalculation) = Тип("ЭлементDOM") Тогда
			Документ.Перерасчет = Истина;
			ЗаполнитьРеквизитыПерерасчета(Документ, РеквизитыКорня.recalculation);
		КонецЕсли;
		ЗаполнитьФизическоеЛицо(Документ);
		ЗаполнитьСотрудникаИОрганизацию(Документ);
		ЗаполнитьРебенка(Документ);
		ЗаполнитьКартуМИР(Документ);
		ЗаполнитьГражданство(Документ);
	Исключение
		СЭДОФСС.ОшибкаОбработки(Результат, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Попытка
		ЗаполнитьСвойстваРеквизитов(Документ, СтруктураDOM);
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При заполнении свойств реквизитов входящего запроса сведений для расчета пособия %1 возникла ошибка: %2';
				|en = 'An error occurred while filling attribute properties of the incoming information request for calculation of the %1 allowance: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	
	// Удаление кэшей.
	Документ.Удалить("ВерсияСпецификацииЧислом");
	
	// Поиск документа по идентификатору сообщения.
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
		|	ВходящийЗапросФССДляРасчетаПособия.Дата КАК Дата,
		|	ВходящийЗапросФССДляРасчетаПособия.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
		|ГДЕ
		|	ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.ВходящийЗапросФССДляРасчетаПособия.СоздатьДокумент();
			ДокументОбъект.Организация            = Страхователь;
			ДокументОбъект.Страхователь           = Страхователь;
			ДокументОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
		КонецЕсли;
		
		ЕстьИзменения = Не ДокументОбъект.Проведен;
		
		Если ДокументОбъект.ЗаполнитьДату() Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Документ Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
				ЗначениеДоИзменения = ДокументОбъект[КлючИЗначение.Ключ].Выгрузить();
				ДокументОбъект[КлючИЗначение.Ключ].Загрузить(КлючИЗначение.Значение);
				ЗначениеПослеизменения = ДокументОбъект[КлючИЗначение.Ключ].Выгрузить();
				Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(ЗначениеДоИзменения, ЗначениеПослеизменения) Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			Иначе
				ЗначениеДоИзменения = ДокументОбъект[КлючИЗначение.Ключ];
				ДокументОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				Если ЗначениеДоИзменения <> ДокументОбъект[КлючИЗначение.Ключ] Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументОбъект.ЗаполнитьПервичныйДокумент() Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ДокументОбъект.ЗаполнитьДатыОтправки() Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СЭДОФСС.ОшибкаОбработки(Результат, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Результат.Обработано = Истина;
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСообщения100(Документ, ЭлементDOM) Экспорт
	ВидПособия = СЭДОФСС.СведенияОВидеПособия(Документ.ВидПособия);
	
	Реквизиты = УзлыЭлементаDOM(ЭлементDOM, "");
	
	Если Реквизиты.Свойство("elnInfo") Тогда
		ЗагрузитьСведенияОбЭЛН(Документ, УзлыЭлементаDOM(Реквизиты.elnInfo, ""));
	КонецЕсли;
	
	Если Реквизиты.Свойство("insurerInfo") Тогда
		ЗагрузитьСведенияОСтрахователе(Документ, УзлыЭлементаDOM(Реквизиты.insurerInfo, ""));
	КонецЕсли;
	
	Если Реквизиты.Свойство("insuredInfo") Тогда
		ЗагрузитьСведенияОСотруднике(Документ, УзлыЭлементаDOM(Реквизиты.insuredInfo, ""));
	КонецЕсли;
	
	Если Реквизиты.Свойство("receivePayment") Тогда
		ИменаПолей = "bankInfo, cardMir, otherFinOrg, currentAddress, currentAddressFias, otherOrg";
		СпособВыплаты = УзлыЭлементаDOM(Реквизиты.receivePayment, ИменаПолей);
		ЗагрузитьСпособВыплаты(Документ, СпособВыплаты);
	КонецЕсли;
	
	Если Реквизиты.Свойство("calculationData") Тогда
		ЗагрузитьДанныеДляРасчета(Документ, УзлыЭлементаDOM(Реквизиты.calculationData, ""));
	КонецЕсли;
	
	Если Реквизиты.Свойство("assignmentParams") Тогда
		ЗагрузитьПараметрыНазначения(Документ, ВидПособия, УзлыЭлементаDOM(Реквизиты.assignmentParams, ""));
	КонецЕсли;
	
	Если Реквизиты.Свойство("insuranceCase") Тогда
		ЗагрузитьДанныеНСПЗ(Документ, УзлыЭлементаDOM(Реквизиты.insuranceCase, ""));
	КонецЕсли;
	
	Если Реквизиты.Свойство("notice") Тогда
		ЗагрузитьДанныеИзвещения(Документ, Реквизиты.notice);
	КонецЕсли;
	
	Если Реквизиты.Свойство("vacation") Тогда
		ИменаПолей = "num, issueDate, beginDate, endDate";
		ОтпускПоУходуDOM = УзлыЭлементаDOM(Реквизиты.vacation, ИменаПолей);
		ЗагрузитьОтпускПоБиР(Документ, ОтпускПоУходуDOM);
	КонецЕсли;
	
	Если Реквизиты.Свойство("wardInfo") Тогда
		ИменаПолей = "type, num, issueDate";
		УсыновлениеОпекаDOM = УзлыЭлементаDOM(Реквизиты.wardInfo, ИменаПолей);
		ЗагрузитьРешениеОбУсыновленииОпеке(Документ, УсыновлениеОпекаDOM);
	КонецЕсли;
	
	Если Реквизиты.Свойство("refFamilyInfo") Тогда
		ИменаПолей = "num, issueDate";
		ПередачаНаВоспитаниеDOM = УзлыЭлементаDOM(Реквизиты.refFamilyInfo, ИменаПолей);
		ЗагрузитьДоговорПередачиНаВоспитание(Документ, ПередачаНаВоспитаниеDOM);
	КонецЕсли;
	
	Если Реквизиты.Свойство("birthInfo") Тогда
		ЗагрузитьИнформациюОРожденииРебенка(Документ, УзлыЭлементаDOM(Реквизиты.birthInfo, ""));
	КонецЕсли;
	
	Если Реквизиты.Свойство("childInfo") Тогда
		ИменаПолей = "birthDate, fullName, snils, gender";
		РебенокDOM = УзлыЭлементаDOM(Реквизиты.childInfo, ИменаПолей);
		ЗагрузитьСведенияОРебенке(Документ, РебенокDOM);
	КонецЕсли;
	
	Если Реквизиты.Свойство("refNpayOther") Тогда
		ИменаПолей = "num, issueDate";
		СправкаОтДругогоРодителяDOM = УзлыЭлементаDOM(Реквизиты.refNpayOther, ИменаПолей);
		ЗагрузитьСправкуОтДругогоРодителя(Документ, СправкаОтДругогоРодителяDOM);
	КонецЕсли;
	
	Если Реквизиты.Свойство("otherMissing") Тогда
		Документ.Вставить("ДругойРодительОтсутствует", СериализацияБЗК.БулевоИзXML(Реквизиты.otherMissing));
	КонецЕсли;
	
	Если Реквизиты.Свойство("refNpay") Тогда
		Если ТипЗнч(Реквизиты.refNpay) = Тип("Массив") Тогда
			Для Каждого СправкаDOM Из Реквизиты.refNpay Цикл
				ЗагрузитьСправкуОНеполученииПособия(Документ, СправкаDOM);
			КонецЦикла;
		Иначе
			ЗагрузитьСправкуОНеполученииПособия(Документ, Реквизиты.refNpay);
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьПрочиеСведенияОтпускаПоУходу(Документ, Реквизиты);
	
	// Основания для назначения пособия.
	Если Реквизиты.Свойство("baseDocuments") Тогда
		ОснованияDOM = УзлыЭлементаDOM(Реквизиты.baseDocuments, "");
		Если ОснованияDOM.Свойство("vacation") Тогда
			ЗагрузитьОтпускПоУходу(Документ, ОснованияDOM.vacation);
		КонецЕсли;
		Если ОснованияDOM.Свойство("identifyDocument") Тогда
			ЗагрузитьДокументыОРождении(Документ, ОснованияDOM.identifyDocument);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСведенияОбЭЛН(Документ, ЭЛНDOM)
	Если ЭЛНDOM.Свойство("code") Тогда
		НомерЛН = СериализацияБЗК.СтрокаИзXML(ЭЛНDOM.code);
		Если ТипЗнч(НомерЛН) = Тип("Строка") И ЗначениеЗаполнено(НомерЛН) Тогда
			Документ.Вставить("НомерЛН", НомерЛН);
		КонецЕсли;
	КонецЕсли;
	Если ЭЛНDOM.Свойство("mseInvalidLoss") Тогда
		УтратаТрудоспобности = СериализацияБЗК.СтрокаИзXML(ЭЛНDOM.mseInvalidLoss);
		Если ТипЗнч(УтратаТрудоспобности) = Тип("Строка") И ЗначениеЗаполнено(УтратаТрудоспобности) Тогда
			Документ.Вставить("УтратаТрудоспобности", УтратаТрудоспобности);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьСведенияОСтрахователе(Документ, СтраховательDOM)
	Если СтраховательDOM.Свойство("regNum") Тогда
		Документ.Вставить("РегистрационныйНомерФСС", СериализацияБЗК.СтрокаИзXML(СтраховательDOM.regNum));
	КонецЕсли;
	Если СтраховательDOM.Свойство("regNumSFR") Тогда
		Документ.Вставить("РегистрационныйНомерСФР", СериализацияБЗК.СтрокаИзXML(СтраховательDOM.regNumSFR));
		ПоднятьВерсиюСпецификации(Документ, "2.41");
	КонецЕсли;
	Если СтраховательDOM.Свойство("parentNo") Тогда
		Документ.Вставить("КодПодчиненностиФСС", СериализацияБЗК.СтрокаИзXML(СтраховательDOM.parentNo));
	КонецЕсли;
	Если СтраховательDOM.Свойство("partTime") Тогда
		partTime = СериализацияБЗК.СтрокаИзXML(СтраховательDOM.partTime);
		Документ.Вставить("ВнешнееСовместительство", СтрСравнить(partTime, "OUTER") = 0);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьСведенияОСотруднике(Документ, СотрудникDOM)
	// Категория застрахованного лица, СНИЛС, ИНН.
	Если СотрудникDOM.Свойство("category") И СотрудникDOM.category <> Неопределено Тогда
		Документ.Вставить("СотрудникКатегория", СериализацияБЗК.СтрокаИзXML(СотрудникDOM.category));
	КонецЕсли;
	Если СотрудникDOM.Свойство("snils") И СотрудникDOM.snils <> Неопределено Тогда
		Документ.Вставить("СотрудникСНИЛС", СЭДОФСС.СНИЛСИзXML(СотрудникDOM.snils));
	КонецЕсли;
	Если СотрудникDOM.Свойство("inn") И СотрудникDOM.inn <> Неопределено Тогда
		Документ.Вставить("СотрудникИНН", СериализацияБЗК.СтрокаИзXML(СотрудникDOM.inn));
	КонецЕсли;
	
	// ФИО.
	Если СотрудникDOM.Свойство("fullName") И СотрудникDOM.fullName <> Неопределено Тогда
		ФИО = СЭДОФСС.ФИОИзXML(СотрудникDOM.fullName);
		Документ.Вставить("СотрудникФамилия",  ФИО.Фамилия);
		Документ.Вставить("СотрудникИмя",      ФИО.Имя);
		Документ.Вставить("СотрудникОтчество", ФИО.Отчество);
	КонецЕсли;
	
	// Дата рождения.
	Если СотрудникDOM.Свойство("birthDate") И СотрудникDOM.birthDate <> Неопределено Тогда
		Документ.Вставить("СотрудникДатаРождения", СериализацияБЗК.ДатаИзXML(СотрудникDOM.birthDate));
	КонецЕсли;
	
	// Пол.
	Если СотрудникDOM.Свойство("gender") И СотрудникDOM.gender <> Неопределено Тогда
		Пол = ВРег(СокрЛП(СериализацияБЗК.СтрокаИзXML(СотрудникDOM.gender)));
		Если Пол = "MALE" Тогда
			Документ.Вставить("СотрудникПол", Перечисления.ПолФизическогоЛица.Мужской);
		ИначеЕсли Пол = "FEMALE" Тогда
			Документ.Вставить("СотрудникПол", Перечисления.ПолФизическогоЛица.Женский);
		Иначе
			Документ.Вставить("СотрудникПол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	// Код статуса налогоплательщика, код страны гражданства, адрес регистрации.
	Если СотрудникDOM.Свойство("taxpayer") И ТипЗнч(СотрудникDOM.taxpayer) = Тип("ЭлементDOM") Тогда
		ИменаПолей = "taxpayerStatus, countryCode, address, postalCode, foreignAddress";
		НалогоплательщикDOM = УзлыЭлементаDOM(СотрудникDOM.taxpayer, ИменаПолей);
		Если НалогоплательщикDOM.taxpayerStatus <> Неопределено Тогда
			Документ.Вставить("КодСтатусаНалогоплательщика", СериализацияБЗК.СтрокаИзXML(НалогоплательщикDOM.taxpayerStatus));
		КонецЕсли;
		Если НалогоплательщикDOM.countryCode <> Неопределено Тогда
			Документ.Вставить("КодСтраныГражданства", СериализацияБЗК.СтрокаИзXML(НалогоплательщикDOM.countryCode));
		КонецЕсли;
		Если НалогоплательщикDOM.address <> Неопределено Тогда
			ЗагрузитьАдрес(Документ, "АдресРегистрации", НалогоплательщикDOM, "address", "foreignAddress");
		КонецЕсли;
	КонецЕсли;
	
	// Удостоверение личности тип "IdType" пространства имен "http://www.fss.ru/integration/types/person/v02".
	Если СотрудникDOM.Свойство("id") И ТипЗнч(СотрудникDOM.id) = Тип("ЭлементDOM") Тогда
		ЗагрузитьУдостоверениеЛичности(Документ, СотрудникDOM.id);
	КонецЕсли;
	
	// Разрешение на проживание тип "residenceDocumentType" пространства имен "http://www.fss.ru/integration/types/person/v02".
	Если СотрудникDOM.Свойство("residenceDocument") И ТипЗнч(СотрудникDOM.residenceDocument) = Тип("ЭлементDOM") Тогда
		ЗагрузитьРазрешениеНаПроживание(Документ, СотрудникDOM.residenceDocument);
	КонецЕсли;
	
	// Срочный трудовой договор.
	Если СотрудникDOM.Свойство("workContract") И СотрудникDOM.workContract <> Неопределено Тогда
		ИменаПолей = "begin,end";
		ТрудовойДоговорDOM = УзлыЭлементаDOM(СотрудникDOM.workContract, ИменаПолей);
		Документ.Вставить("ТрудовойДоговорДатаНачала",    СериализацияБЗК.ДатаИзXML(ТрудовойДоговорDOM.begin));
		Документ.Вставить("ТрудовойДоговорДатаОкончания", СериализацияБЗК.ДатаИзXML(ТрудовойДоговорDOM.end));
	КонецЕсли;
	
	// Код родственной связи с ребенком.
	Если СотрудникDOM.Свойство("childRelType") И СотрудникDOM.childRelType <> Неопределено Тогда
		Документ.Вставить("РебенокКодСвязи", СериализацияБЗК.СтрокаИзXML(СотрудникDOM.childRelType));
	КонецЕсли;
	
	// Номер телефона застрахованного.
	Если СотрудникDOM.Свойство("personPhone") И СотрудникDOM.personPhone <> Неопределено Тогда
		Документ.Вставить("СотрудникТелефонПредставление", СериализацияБЗК.СтрокаИзXML(СотрудникDOM.personPhone));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьУдостоверениеЛичности(Документ, ЭлементDOM)
	
	// См. тип IdType пространства имен "http://www.fss.ru/integration/types/person/v02".
	ИменаПолей = "type, series, num, issueDate, dept, endDate";
	Паспорт = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	КодМВД       = СериализацияБЗК.СтрокаИзXML(Паспорт.type);
	Серия        = СериализацияБЗК.СтрокаИзXML(Паспорт.series);
	Номер        = СериализацияБЗК.СтрокаИзXML(Паспорт.num);
	ДатаВыдачи   = СериализацияБЗК.ДатаИзXML(Паспорт.issueDate);
	КемВыдан     = СериализацияБЗК.СтрокаИзXML(Паспорт.dept);
	СрокДействия = СериализацияБЗК.ДатаИзXML(Паспорт.endDate);
	Если ЗначениеЗаполнено(КодМВД) Тогда
		Вид = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", КодМВД);
		Документ.Вставить("УдостоверениеЛичностиВидКодМВД", КодМВД);
		Документ.Вставить("УдостоверениеЛичностиВид",       Вид);
	КонецЕсли;
	Если ЗначениеЗаполнено(Серия) Тогда
		Документ.Вставить("УдостоверениеЛичностиСерия",        Серия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Номер) Тогда
		Документ.Вставить("УдостоверениеЛичностиНомер",        Номер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаВыдачи) Тогда
		Документ.Вставить("УдостоверениеЛичностиДатаВыдачи",   ДатаВыдачи);
	КонецЕсли;
	Если ЗначениеЗаполнено(КемВыдан) Тогда
		Документ.Вставить("УдостоверениеЛичностиКемВыдан",     КемВыдан);
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокДействия) Тогда
		Документ.Вставить("УдостоверениеЛичностиСрокДействия", СрокДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРазрешениеНаПроживание(Документ, ЭлементDOM)
	
	// См. тип "residenceDocumentType" пространства имен "http://www.fss.ru/integration/types/person/v02"..
	ИменаПолей = "type, number, issueDate";
	УзелРВП = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	КодМВД       = СериализацияБЗК.СтрокаИзXML(УзелРВП.type);
	СерияНомер   = СериализацияБЗК.СтрокаИзXML(УзелРВП.number);
	ДатаВыдачи   = СериализацияБЗК.ДатаИзXML(УзелРВП.issueDate);
	Если ЗначениеЗаполнено(КодМВД) Тогда
		Вид = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", КодМВД);
		Документ.Вставить("РазрешениеНаПроживаниеВидКодМВД", КодМВД);
		Документ.Вставить("РазрешениеНаПроживаниеВид",       Вид);
	КонецЕсли;
	Если ЗначениеЗаполнено(СерияНомер) Тогда
		Позиция = СтрНайти(СерияНомер, " ");
		Если Позиция = 0 Тогда
			Документ.Вставить("РазрешениеНаПроживаниеСерия", "");
			Документ.Вставить("РазрешениеНаПроживаниеНомер", СерияНомер);
		Иначе
			Документ.Вставить("РазрешениеНаПроживаниеСерия", Лев(СерияНомер, Позиция - 1));
			Документ.Вставить("РазрешениеНаПроживаниеНомер", СокрЛ(Сред(СерияНомер, Позиция)));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаВыдачи) Тогда
		Документ.Вставить("РазрешениеНаПроживаниеДатаВыдачи", ДатаВыдачи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСпособВыплаты(Документ, СпособВыплаты)
	
	Если ТипЗнч(СпособВыплаты.bankInfo) = Тип("ЭлементDOM") Тогда
		ИменаПолей = "bankName,bik,corAccNum,accountNum";
		БанкDOM = УзлыЭлементаDOM(СпособВыплаты.bankInfo, ИменаПолей);
		Документ.Вставить("БанкНаименование", СериализацияБЗК.СтрокаИзXML(БанкDOM.bankName));
		Документ.Вставить("БанкБИК",          СериализацияБЗК.СтрокаИзXML(БанкDOM.bik));
		Документ.Вставить("БанкКоррСчет",     СериализацияБЗК.СтрокаИзXML(БанкDOM.corAccNum));
		Документ.Вставить("НомерСчета",       СериализацияБЗК.СтрокаИзXML(БанкDOM.accountNum));
		Документ.Вставить("Банк",             СЭДОФСС.НайтиБанкПоБИК(Документ.БанкБИК, Документ.БанкКоррСчет));
		Если ЗначениеЗаполнено(Документ.БанкБИК) И ЗначениеЗаполнено(Документ.НомерСчета) Тогда
			Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ЧерезБанк);
		КонецЕсли;
	КонецЕсли;
	
	Если СпособВыплаты.cardMir <> Неопределено Тогда
		НомерКартыМИР = СериализацияБЗК.СтрокаИзXML(СпособВыплаты.cardMir);
		Если ЗначениеЗаполнено(НомерКартыМИР) Тогда
			РезультатПроверки = ПроверкиБЗККлиентСервер.РезультатПроверкиНомераКарты(НомерКартыМИР, Истина);
			Если РезультатПроверки.Успех Тогда
				Документ.Вставить("НомерКартыМИР", НомерКартыМИР);
			Иначе
				СообщенияБЗК.СообщитьОПроблеме(РезультатПроверки.Текст);
			КонецЕсли;
			Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.НаКартуМИР);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СпособВыплаты.otherFinOrg) = Тип("ЭлементDOM") Тогда
		ИменаПолей = "name,bik,inn";
		ИнаяОрганизацияDOM = УзлыЭлементаDOM(СпособВыплаты.otherFinOrg, ИменаПолей);
		Документ.Вставить("ИнаяОрганизацияНаименование", СериализацияБЗК.СтрокаИзXML(ИнаяОрганизацияDOM.name));
		Документ.Вставить("ИнаяОрганизацияБИК",          СериализацияБЗК.СтрокаИзXML(ИнаяОрганизацияDOM.bik));
		Документ.Вставить("ИнаяОрганизацияИНН",          СериализацияБЗК.СтрокаИзXML(ИнаяОрганизацияDOM.inn));
		Если ЗначениеЗаполнено(Документ.ИнаяОрганизацияБИК) Или ЗначениеЗаполнено(Документ.ИнаяОрганизацияИНН) Тогда
			Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ИнаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СпособВыплаты.otherOrg) = Тип("ЭлементDOM") Тогда
		Узлы = УзлыЭлементаDOM(СпособВыплаты.otherOrg, "");
		Если Узлы.Свойство("nameOrg") Тогда
			Документ.Вставить("ИнаяОрганизацияНаименование", СериализацияБЗК.СтрокаИзXML(Узлы.nameOrg));
		КонецЕсли;
		Если Узлы.Свойство("bik") Тогда
			Документ.Вставить("ИнаяОрганизацияБИК", СериализацияБЗК.СтрокаИзXML(Узлы.bik));
			Если ЗначениеЗаполнено(Документ.ИнаяОрганизацияБИК) Тогда
				Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ИнаяОрганизация);
			КонецЕсли;
		КонецЕсли;
		Если Узлы.Свойство("accountNum") Тогда
			Документ.Вставить("ИнаяОрганизацияНомерСчетаСтрахователя", СериализацияБЗК.СтрокаИзXML(Узлы.accountNum));
		КонецЕсли;
		Если Узлы.Свойство("personalOrgAccount") Тогда
			Документ.Вставить("ИнаяОрганизацияЛицевойСчетОрганизации", СериализацияБЗК.СтрокаИзXML(Узлы.personalOrgAccount));
		КонецЕсли;
		Если Узлы.Свойство("personalInsuredAccount") Тогда
			Документ.Вставить("ИнаяОрганизацияЛицевойСчетСотрудника", СериализацияБЗК.СтрокаИзXML(Узлы.personalInsuredAccount));
		КонецЕсли;
		Если Узлы.Свойство("kbk") Тогда
			Документ.Вставить("ИнаяОрганизацияКБК", СериализацияБЗК.СтрокаИзXML(Узлы.kbk));
		КонецЕсли;
		Если Узлы.Свойство("regNumCorrectionalFacility") Тогда
			ИнаяОрганизацияРегистрационныйНомер = СериализацияБЗК.СтрокаИзXML(Узлы.regNumCorrectionalFacility);
			Документ.Вставить("ИнаяОрганизацияРегистрационныйНомер", ИнаяОрганизацияРегистрационныйНомер);
		КонецЕсли;
		Если Узлы.Свойство("regNumSFRCorrectionalFacility") Тогда
			ИнаяОрганизацияРегистрационныйНомерСФР = СериализацияБЗК.СтрокаИзXML(Узлы.regNumSFRCorrectionalFacility);
			Документ.Вставить("ИнаяОрганизацияРегистрационныйНомерСФР", ИнаяОрганизацияРегистрационныйНомерСФР);
			ПоднятьВерсиюСпецификации(Документ, "2.41");
		КонецЕсли;
		Если Узлы.Свойство("innCorrectionalFacility") Тогда
			Документ.Вставить("ИнаяОрганизацияИНН", СериализацияБЗК.СтрокаИзXML(Узлы.innCorrectionalFacility));
			Если ЗначениеЗаполнено(Документ.ИнаяОрганизацияИНН) Тогда
				Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ИнаяОрганизация);
			КонецЕсли;
		КонецЕсли;
		Если Узлы.Свойство("kppCorrectionalFacility") Тогда
			Документ.Вставить("ИнаяОрганизацияКПП", СериализацияБЗК.СтрокаИзXML(Узлы.kppCorrectionalFacility));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузитьАдрес(Документ, "АдресПроживания", СпособВыплаты, "currentFiasAddress") Тогда
		Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ПочтовымПереводом);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПричинуЛьгот(Документ, ПричинаЛьготDOM)
	
	Менеджер = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом;
	ПричинаПредоставленияЛьготыСтрокой = СериализацияБЗК.СтрокаИзXML(ПричинаЛьготDOM);
	Если ПричинаПредоставленияЛьготыСтрокой = "1" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.Чернобыль);
	ИначеЕсли ПричинаПредоставленияЛьготыСтрокой = "2" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.Семипалатинск);
	ИначеЕсли ПричинаПредоставленияЛьготыСтрокой = "3" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.Маяк);
	ИначеЕсли ПричинаПредоставленияЛьготыСтрокой = "4" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.ПодразделенияОсобогоРиска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеДляРасчета(Документ, Расчет)
	
	Если Расчет.Свойство("baseCalcDays") Тогда
		Документ.Вставить("КалендарныхДнейРасчетногоПериода", СериализацияБЗК.ЧислоИзXML(Расчет.baseCalcDays));
	КонецЕсли;
	
	// Одновременный уход за несколькими детьми: Среднемесячный заработок.
	Если Расчет.Свойство("multipart") Тогда
		Если СериализацияБЗК.ЭтоЭлементТипаНеопределено(Расчет.multipart) Тогда
			Документ.Вставить("УходЗаНесколькимиДетьми", Ложь);
		Иначе
			Документ.Вставить("УходЗаНесколькимиДетьми", Истина);
			Уход = УзлыЭлементаDOM(Расчет.multipart, "");
			Если Уход.Свойство("avgSal") Тогда
				Документ.Вставить("СреднемесячныйЗаработок", СериализацияБЗК.ЧислоИзXML(Уход.avgSal));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Флаг наличия заявления о замене годов, Года для расчета, Сумма заработка за год.
	Если Расчет.Свойство("years") Тогда
		ТекстОшибки = "";
		НомерГода = 0;
		Для Каждого УзелDOM Из Расчет.years.ДочерниеУзлы Цикл
			Если УзелDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			Если СтрСравнить(УзелDOM.ЛокальноеИмя, "changeYear") = 0 Тогда
				Документ.Вставить("ЗаменаЛетРасчетногоПериода", СериализацияБЗК.БулевоИзXML(УзелDOM));
			ИначеЕсли СтрСравнить(УзелDOM.ЛокальноеИмя, "year") = 0 Тогда
				РеквизитыГодаDOM = УзлыЭлементаDOM(УзелDOM, "calc, baseSum, sumType");
				Если РеквизитыГодаDOM.sumType <> Неопределено Тогда
					ПоднятьВерсиюСпецификации(Документ, "2.34");
				КонецЕсли;
				НомерГода = НомерГода + 1;
				Если НомерГода = 1 Тогда
					Документ.Вставить("ПервыйРасчетныйГод", СериализацияБЗК.ЧислоИзXML(РеквизитыГодаDOM.calc));
					Документ.Вставить("ПервыйРасчетныйГодЗаработок", СериализацияБЗК.ЧислоИзXML(РеквизитыГодаDOM.baseSum));
					Документ.Вставить("ПервыйРасчетныйГодВидЗаработка", Перечисления.СпособыУчетаГодовогоЗаработкаСФР.ЗначениеИзXML(
						СериализацияБЗК.СтрокаИзXML(РеквизитыГодаDOM.sumType)));
				ИначеЕсли НомерГода = 2 Тогда
					Документ.Вставить("ВторойРасчетныйГод", СериализацияБЗК.ЧислоИзXML(РеквизитыГодаDOM.calc));
					Документ.Вставить("ВторойРасчетныйГодЗаработок", СериализацияБЗК.ЧислоИзXML(РеквизитыГодаDOM.baseSum));
					Документ.Вставить("ВторойРасчетныйГодВидЗаработка", Перечисления.СпособыУчетаГодовогоЗаработкаСФР.ЗначениеИзXML(
						СериализацияБЗК.СтрокаИзXML(РеквизитыГодаDOM.sumType)));
				Иначе
					ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(
						НСтр("ru = '- Расчетный период № %1: год ""%2"", заработок ""%3"", вид заработка ""%4""';
							|en = '- Payroll period No. %1: year ""%2"", earnings ""%3"", earnings kind ""%4""'"),
						НомерГода,
						СериализацияБЗК.СтрокаИзXML(РеквизитыГодаDOM.calc),
						СериализацияБЗК.СтрокаИзXML(РеквизитыГодаDOM.baseSum),
						СериализацияБЗК.СтрокаИзXML(РеквизитыГодаDOM.sumType));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ТекстОшибки <> "" Тогда
			ТекстОшибки = НСтр("ru = 'Более двух расчетных периодов:';
								|en = 'More than two payroll periods:'") + ТекстОшибки;
			Документ.ТекстОшибки = Документ.ТекстОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Районный коэффициент.
	Если Расчет.Свойство("kfReg") Тогда
		Документ.Вставить("РайонныйКоэффициент", СериализацияБЗК.ЧислоИзXML(Расчет.kfReg));
	КонецЕсли;
	
	// Количество ставок при неполном рабочем времени (от 0 до 1).
	Если Расчет.Свойство("kfShotDays") Тогда
		Документ.Вставить("ДоляВремени", СериализацияБЗК.ЧислоИзXML(Расчет.kfShotDays));
	КонецЕсли;
	
	// Страховой стаж, Нестраховой период.
	Если Расчет.Свойство("experience") Тогда
		ИменаПолей = "insurYY, insurMM, notInsurYY, notInsurMM";
		СтажDOM = УзлыЭлементаDOM(Расчет.experience, ИменаПолей);
		Документ.Вставить("СтраховойСтажЛет",       СериализацияБЗК.ЧислоИзXML(СтажDOM.insurYY));
		Документ.Вставить("СтраховойСтажМесяцев",   СериализацияБЗК.ЧислоИзXML(СтажDOM.insurMM));
		Документ.Вставить("НестраховойСтажЛет",     СериализацияБЗК.ЧислоИзXML(СтажDOM.notInsurYY));
		Документ.Вставить("НестраховойСтажМесяцев", СериализацияБЗК.ЧислоИзXML(СтажDOM.notInsurMM));
	КонецЕсли;
	
	// Условия исчисления.
	Если Расчет.Свойство("calcConditionList") Тогда
		ТекстОшибки = "";
		Номер = 0;
		Для Каждого УсловиеИсчисленияDOM Из Расчет.calcConditionList.ДочерниеУзлы Цикл
			Если УсловиеИсчисленияDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			Номер = Номер + 1;
			Если Номер < 4 Тогда
				Документ.Вставить("УсловияИсчисленияКод" + Номер, СериализацияБЗК.СтрокаИзXML(УсловиеИсчисленияDOM));
			Иначе
				ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(
					НСтр("ru = '- Условие исчисления № %1: ""%2""';
						|en = '- Calculation condition No. %1: ""%2""'"),
					Номер,
					СериализацияБЗК.СтрокаИзXML(УсловиеИсчисленияDOM));
			КонецЕсли;
		КонецЦикла;
		Если ТекстОшибки <> "" Тогда
			ТекстОшибки = НСтр("ru = 'Более трех условий исчисления:';
								|en = 'More than three calculation conditions:'") + ТекстОшибки;
			Документ.ТекстОшибки = Документ.ТекстОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Льготы: Проживание / работа в особой зоне.
	Если Расчет.Свойство("liveCond") Тогда
		ВидОсобойЗоныЧислом = СериализацияБЗК.ЧислоИзXML(Расчет.liveCond);
		Документ.Вставить("ВидОсобойЗоны", СЭДОФСС.ВидОсобойЗоны(ВидОсобойЗоныЧислом));
	КонецЕсли;
	
	// Льготы: Причина воздействия радиации.
	Если Расчет.Свойство("causeRadiation") Тогда
		ЗагрузитьПричинуЛьгот(Документ, Расчет.causeRadiation);
	КонецЕсли;
	
	// Период за который начисляется пособие ФСС.
	Если Расчет.Свойство("payPeriodFSS") Тогда
		ПериодDOM = УзлыЭлементаDOM(Расчет.payPeriodFSS, "begin, end");
		Документ.Вставить("ОплатаФССДатаНачала",    СериализацияБЗК.ДатаИзXML(ПериодDOM.begin));
		Документ.Вставить("ОплатаФССДатаОкончания", СериализацияБЗК.ДатаИзXML(ПериодDOM.end));
	КонецЕсли;
	
	Если Расчет.Свойство("notice") Тогда
		ЗагрузитьДанныеИзвещения(Документ, Расчет.notice);
	КонецЕсли;
	
	// Периоды за которые не начисляется пособие за счет ФСС.
	ЗагрузитьИсключаемыеПериоды(Документ, Расчет);
	
	// Периоды простоя.
	ЗагрузитьПериодыПростоя(Документ, Расчет);
	
	// Приостановления трудовых договоров.
	ЗагрузитьПриостановленияТД(Документ, Расчет);
	
КонецПроцедуры

Процедура ЗагрузитьПараметрыНазначения(Документ, ВидПособия, Назначение)
	
	Если Назначение.Свойство("insuredWorksSeveralInsurers") Тогда
		Документ.Вставить("ЧислитсяУНесколькихСтрахователей",
			СериализацияБЗК.БулевоИзXML(Назначение.insuredWorksSeveralInsurers));
	КонецЕсли;
	
	Если Назначение.Свойство("twoPrevYearsInsurers") Тогда
		СтрокаXML = СериализацияБЗК.СтрокаИзXML(Назначение.twoPrevYearsInsurers);
		Документ.Вставить("СоставСтрахователейЗаДваГода",
			Перечисления.ВариантыИзмененияСоставаСтрахователейСФР.ЗначениеИзXML(СтрокаXML));
		Если СтрокаXML <> "" И ВидПособия.ЭтоОтпускПоУходу Тогда
			ПоднятьВерсиюСпецификации(Документ, "2.36");
		КонецЕсли;
	КонецЕсли;
	
	Если Назначение.Свойство("paymentMethod") Тогда
		ПоднятьВерсиюСпецификации(Документ, "2.34");
		Документ.Вставить("МетодНазначенияИВыплатыПособия",
			Перечисления.МетодыНазначенияИВыплатыПособийСФР.ЗначениеИзXML(
				СериализацияБЗК.СтрокаИзXML(Назначение.paymentMethod)));
	КонецЕсли;
	
	Если Назначение.Свойство("choiceInsurerConfirmedByInsured") Тогда
		Документ.Вставить("ВыборПодтвержденЗастрахованнымЛицом",
			СериализацияБЗК.БулевоИзXML(Назначение.choiceInsurerConfirmedByInsured));
	КонецЕсли;
	
	Если Назначение.Свойство("contractsType") Тогда
		Для Каждого ДочернийУзелDOM Из Назначение.contractsType.ДочерниеУзлы Цикл
			Если ДочернийУзелDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			ВидДоговораXML = СериализацияБЗК.СтрокаИзXML(ДочернийУзелDOM);
			Если СтрСравнить(ВидДоговораXML, "workerContract") = 0 Тогда
				Документ.Вставить("ВидДоговораТрудовой", Истина);
			ИначеЕсли СтрСравнить(ВидДоговораXML, "GPHcontract") = 0 Тогда
				Документ.Вставить("ВидДоговораГПХ", Истина);
			Иначе
				Продолжить;
			КонецЕсли;
			Если Не ВидПособия.ЭтоОбычныйБольничный И Не ВидПособия.ЭтоБольничныйПоБиР Тогда
				ПоднятьВерсиюСпецификации(Документ, "2.36");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Назначение.Свойство("insurancePaymentObligation") Тогда
		Документ.Вставить("ДоговорГПХОблагаетсяВзносамиНС",
			СериализацияБЗК.БулевоИзXML(Назначение.ДоговорГПХОблагаетсяВзносамиНС));
		ПоднятьВерсиюСпецификации(Документ, "2.36");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеНСПЗ(Документ, УзелНСПЗ)
	// insuranceCaseState - boolean - Статус страхового случая:
	// Ложь - если случай не признается НС и ПЗ; Истина - если случай считается НС и ПЗ.
	Если УзелНСПЗ.Свойство("insuranceCaseState") Тогда
		Признан = СериализацияБЗК.БулевоИзXML(УзелНСПЗ.insuranceCaseState);
		Если Признан = Истина Тогда
			Документ.Вставить("ПризнаниеСлучаяСтраховым", Перечисления.ПризнаниеСлучаяСтраховым.Признан);
		ИначеЕсли Признан = Ложь Тогда
			Документ.Вставить("ПризнаниеСлучаяСтраховым", Перечисления.ПризнаниеСлучаяСтраховым.НеПризнан);
		КонецЕсли;
	КонецЕсли;
	
	// n1 - Номер акта Н1, Дата акта Н1.
	Если УзелНСПЗ.Свойство("n1") И УзелНСПЗ.n1 <> Неопределено Тогда
		УзелАкт = УзлыЭлементаDOM(УзелНСПЗ.n1, "num, issueDate");
		Документ.Вставить("АктН1Номер",      СериализацияБЗК.СтрокаИзXML(УзелАкт.num));
		Документ.Вставить("АктН1ДатаВыдачи", СериализацияБЗК.ДатаИзXML(УзелАкт.issueDate));
	КонецЕсли;
	
	// profIllnessAct - Дата акта о профессиональном заболевании.
	Если УзелНСПЗ.Свойство("profIllnessAct") И УзелНСПЗ.profIllnessAct <> Неопределено Тогда
		УзелАкт = УзлыЭлементаDOM(УзелНСПЗ.profIllnessAct, "issueDate");
		Документ.Вставить("АктПЗДатаВыдачи", СериализацияБЗК.ДатаИзXML(УзелАкт.issueDate));
	КонецЕсли;
	
	// freeFormAct - Номер акта в произвольной форме, Дата акта в произвольной форме.
	Если УзелНСПЗ.Свойство("freeFormAct") И УзелНСПЗ.freeFormAct <> Неопределено Тогда
		УзелАкт = УзлыЭлементаDOM(УзелНСПЗ.freeFormAct, "num, issueDate");
		Документ.Вставить("АктВПроизвольнойФормеНомер",      СериализацияБЗК.СтрокаИзXML(УзелАкт.num));
		Документ.Вставить("АктВПроизвольнойФормеДатаВыдачи", СериализацияБЗК.ДатаИзXML(УзелАкт.issueDate));
	КонецЕсли;
	
	// courtDecision - Номер решения суда, Дата решения суда.
	Если УзелНСПЗ.Свойство("courtDecision") И УзелНСПЗ.courtDecision <> Неопределено Тогда
		УзелАкт = УзлыЭлементаDOM(УзелНСПЗ.courtDecision, "num, issueDate");
		Документ.Вставить("РешениеСудаНомер",      СериализацияБЗК.СтрокаИзXML(УзелАкт.num));
		Документ.Вставить("РешениеСудаДатаВыдачи", СериализацияБЗК.ДатаИзXML(УзелАкт.issueDate));
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьИсключаемыеПериоды(Документ, Расчет)
	// Периоды за которые не начисляется пособие за счет ФСС.
	Если Расчет.Свойство("excludePeriodList") Тогда
		ИсключаемыеПериоды = Новый ТаблицаЗначений;
		ИсключаемыеПериоды.Колонки.Добавить("КодПричины",    Новый ОписаниеТипов("Строка"));
		ИсключаемыеПериоды.Колонки.Добавить("ДатаНачала",    Новый ОписаниеТипов("Дата"));
		ИсключаемыеПериоды.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		Для Каждого ИсключаемыйПериодDOM Из Расчет.excludePeriodList.ДочерниеУзлы Цикл
			Если ИсключаемыйПериодDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			ИсключаемыйПериод = УзлыЭлементаDOM(ИсключаемыйПериодDOM, "type, period");
			Если ИсключаемыйПериод.period = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = УзлыЭлементаDOM(ИсключаемыйПериод.period, "begin, end");
			Строка = ИсключаемыеПериоды.Добавить();
			Строка.КодПричины    = СериализацияБЗК.СтрокаИзXML(ИсключаемыйПериод.type);
			Строка.ДатаНачала    = СериализацияБЗК.ДатаИзXML(Период.begin);
			Строка.ДатаОкончания = СериализацияБЗК.ДатаИзXML(Период.end);
		КонецЦикла;
		Документ.Вставить("ИсключаемыеПериоды", ИсключаемыеПериоды);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьПериодыПростоя(Документ, Расчет)
	// Периоды простоя.
	Если Расчет.Свойство("downPeriodList") Тогда
		ПериодыПростоя = Новый ТаблицаЗначений;
		ПериодыПростоя.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ПериодыПростоя.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		ПериодыПростоя.Колонки.Добавить("СреднийЗаработок", Новый ОписаниеТипов("Число"));
		Для Каждого ПериодПростояDOM Из Расчет.downPeriodList.ДочерниеУзлы Цикл
			Если ПериодПростояDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			ПериодПростоя = УзлыЭлементаDOM(ПериодПростояDOM, "period, idleAverage");
			Если ПериодПростоя.period = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = УзлыЭлементаDOM(ПериодПростоя.period, "begin, end");
			Строка = ПериодыПростоя.Добавить();
			Строка.СреднийЗаработок = СериализацияБЗК.ЧислоИзXML(ПериодПростоя.idleAverage);
			Строка.ДатаНачала       = СериализацияБЗК.ДатаИзXML(Период.begin);
			Строка.ДатаОкончания    = СериализацияБЗК.ДатаИзXML(Период.end);
		КонецЦикла;
		Документ.Вставить("ПериодыПростоя", ПериодыПростоя);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьПриостановленияТД(Документ, Расчет)
	// Приостановления трудовых договоров.
	Если Расчет.Свойство("mobilPeriods") Тогда
		ПриостановленияТД = Новый ТаблицаЗначений;
		ПриостановленияТД.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ПриостановленияТД.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		ПриостановленияТД.Колонки.Добавить("ОснованиеНПА", Новый ОписаниеТипов("ПеречислениеСсылка.ОснованияПриостановленияТрудовыхДоговоровСФР"));
		МенеджерПеречисления = Перечисления.ОснованияПриостановленияТрудовыхДоговоровСФР;
		Для Каждого ПериодПриостановленияDOM Из Расчет.mobilPeriods.ДочерниеУзлы Цикл
			Если ПериодПриостановленияDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			Период = УзлыЭлементаDOM(ПериодПриостановленияDOM, "beginDate, endDate, periodType");
			Строка = ПриостановленияТД.Добавить();
			Строка.ДатаНачала    = СериализацияБЗК.ДатаИзXML(Период.beginDate);
			Строка.ДатаОкончания = СериализацияБЗК.ДатаИзXML(Период.endDate);
			Строка.ОснованиеНПА  = МенеджерПеречисления.ЗначениеИзСтрокиСЭДОXML(СериализацияБЗК.СтрокаИзXML(Период.periodType));
		КонецЦикла;
		Документ.Вставить("ПриостановленияТрудовыхДоговоров", ПриостановленияТД);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьДанныеИзвещения(Документ, ИзвещениеXTDO)
	СвойстваИзвещенияDOM = УзлыЭлементаDOM(ИзвещениеXTDO, "num, date");
	Документ.Вставить("ИзвещениеФССНомер", СериализацияБЗК.СтрокаИзXML(СвойстваИзвещенияDOM.num));
	Документ.Вставить("ИзвещениеФССДата",  СериализацияБЗК.ДатаИзXML(СвойстваИзвещенияDOM.date));
КонецПроцедуры

Процедура ЗагрузитьОтпускПоБиР(Документ, УзлыDOM)
	Документ.Вставить("ОтпускПоУходуНомер",         СериализацияБЗК.СтрокаИзXML(УзлыDOM.num));
	Документ.Вставить("ОтпускПоУходуДата",          СериализацияБЗК.ДатаИзXML(УзлыDOM.issueDate));
	Документ.Вставить("ОтпускПоУходуДатаНачала",    СериализацияБЗК.ДатаИзXML(УзлыDOM.beginDate));
	Документ.Вставить("ОтпускПоУходуДатаОкончания", СериализацияБЗК.ДатаИзXML(УзлыDOM.endDate));
КонецПроцедуры

Процедура ЗагрузитьОтпускПоУходу(Документ, ЭлементDOM)
	УзелОтпуск = УзлыЭлементаDOM(ЭлементDOM, "begin, end, holidORD, holidChORD");
	Документ.Вставить("ОтпускПоУходуДатаНачала",    СериализацияБЗК.ДатаИзXML(УзелОтпуск.begin));
	Документ.Вставить("ОтпускПоУходуДатаОкончания", СериализацияБЗК.ДатаИзXML(УзелОтпуск.end));
	Если УзелОтпуск.holidORD <> Неопределено Тогда
		УзелНомерДата = УзлыЭлементаDOM(УзелОтпуск.holidORD, "num, issueDate");
		Документ.Вставить("ОтпускПоУходуНомер", СериализацияБЗК.СтрокаИзXML(УзелНомерДата.num));
		Документ.Вставить("ОтпускПоУходуДата",  СериализацияБЗК.ДатаИзXML(УзелНомерДата.issueDate));
	КонецЕсли;
	Если УзелОтпуск.holidChORD <> Неопределено Тогда
		УзелЗаменаОтпуска = УзлыЭлементаDOM(УзелОтпуск.holidChORD, "num, issueDate");
		Документ.Вставить("ЗаменаПослеродовогоОтпускаНомер", СериализацияБЗК.СтрокаИзXML(УзелЗаменаОтпуска.num));
		Документ.Вставить("ЗаменаПослеродовогоОтпускаДата",  СериализацияБЗК.ДатаИзXML(УзелЗаменаОтпуска.issueDate));
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьДокументыОРождении(Документ, ЭлементDOM)
	УзелДокумент = УзлыЭлементаDOM(ЭлементDOM, "birthCertificate, birthDocOtherCountry, birthRecord");
	// Свидетельство о рождении.
	Если УзелДокумент.birthCertificate <> Неопределено Тогда
		Свидетельство = УзлыЭлементаDOM(УзелДокумент.birthCertificate, "series, number, issueDate");
		Документ.Вставить("СвидетельствоОРожденииСерия",      СериализацияБЗК.СтрокаИзXML(Свидетельство.series));
		Документ.Вставить("СвидетельствоОРожденииНомер",      СериализацияБЗК.СтрокаИзXML(Свидетельство.number));
		Документ.Вставить("СвидетельствоОРожденииДатаВыдачи", СериализацияБЗК.ДатаИзXML(Свидетельство.issueDate));
	КонецЕсли;
	// Иной документ подтверждающий рождение ребенка.
	Если УзелДокумент.birthDocOtherCountry <> Неопределено Тогда
		ИнойДокумент = УзлыЭлементаDOM(УзелДокумент.birthDocOtherCountry, "series, number, issueDate");
		Документ.Вставить("ИнойДокументОРожденииСерия",      СериализацияБЗК.СтрокаИзXML(ИнойДокумент.series));
		Документ.Вставить("ИнойДокументОРожденииНомер",      СериализацияБЗК.СтрокаИзXML(ИнойДокумент.number));
		Документ.Вставить("ИнойДокументОРожденииДатаВыдачи", СериализацияБЗК.ДатаИзXML(ИнойДокумент.issueDate));
	КонецЕсли;
	// Актовая запись ЗАГС.
	Если УзелДокумент.birthRecord <> Неопределено Тогда
		АктЗАГС = УзлыЭлементаDOM(УзелДокумент.birthRecord, "num, issueDate");
		Документ.Вставить("АктоваяЗаписьОРожденииНомер", СериализацияБЗК.СтрокаИзXML(АктЗАГС.num));
		Документ.Вставить("АктоваяЗаписьОРожденииДата",  СериализацияБЗК.ДатаИзXML(АктЗАГС.issueDate));
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьРешениеОбУсыновленииОпеке(Документ, УсыновлениеОпекаDOM)
	Документ.Вставить("УсыновлениеОпекаТип",   СериализацияБЗК.СтрокаИзXML(УсыновлениеОпекаDOM.type));
	Документ.Вставить("УсыновлениеОпекаНомер", СериализацияБЗК.СтрокаИзXML(УсыновлениеОпекаDOM.num));
	Документ.Вставить("УсыновлениеОпекаДата",  СериализацияБЗК.ДатаИзXML(УсыновлениеОпекаDOM.issueDate));
КонецПроцедуры

Процедура ЗагрузитьДоговорПередачиНаВоспитание(Документ, ПередачаНаВоспитаниеDOM)
	Документ.Вставить("ПередачаНаВоспитаниеНомер", СериализацияБЗК.СтрокаИзXML(ПередачаНаВоспитаниеDOM.num));
	Документ.Вставить("ПередачаНаВоспитаниеДата",  СериализацияБЗК.ДатаИзXML(ПередачаНаВоспитаниеDOM.issueDate));
КонецПроцедуры

Процедура ЗагрузитьИнформациюОРожденииРебенка(Документ, ИнформацияDOM)
	// Узел birthInfo 4го пособия претерпел ряд крупных изменений.
	// Условно будем обозначать эти версии:
	// 1. Пространство "urn:ru:fss:integration:types:proactive:benefit4:v01":
	// 1.1. Спецификация от 2021-01-14.
	// 1.2. Спецификация от 2021-05-31.
	// 2. Пространство "urn:ru:fss:integration:types:proactive:benefit4:v02":
	// 2.1. Спецификация от 2021-05-31.
	
	Если ИнформацияDOM.Свойство("zagsAct") Тогда
		ИменаПолей = "num, issueDate, cert";
		АктDOM = УзлыЭлементаDOM(ИнформацияDOM.zagsAct, ИменаПолей);
		Если АктDOM.num <> Неопределено Тогда
			Документ.Вставить("АктоваяЗаписьОРожденииНомер", СериализацияБЗК.СтрокаИзXML(АктDOM.num));
		КонецЕсли;
		Если АктDOM.issueDate <> Неопределено Тогда
			Документ.Вставить("АктоваяЗаписьОРожденииДата", СериализацияБЗК.ДатаИзXML(АктDOM.issueDate));
		КонецЕсли;
		Если АктDOM.cert <> Неопределено Тогда // Обратная совместимость (1.1 и 1.2).
			ЗагрузитьСвидетельствоОРождении(Документ, АктDOM.cert);
		КонецЕсли;
	КонецЕсли;
	
	Если ИнформацияDOM.Свойство("cert") Тогда
		ЗагрузитьСвидетельствоОРождении(Документ, ИнформацияDOM.cert);
	КонецЕсли;
	
	Если ИнформацияDOM.Свойство("otherDoc") Тогда
		ИнойДокументDOM = УзлыЭлементаDOM(ИнформацияDOM.otherDoc, "");
		Если ИнойДокументDOM.Свойство("num") Тогда
			Документ.Вставить("ИнойДокументОРожденииНомер", СериализацияБЗК.СтрокаИзXML(ИнойДокументDOM.num));
		КонецЕсли;
		Если ИнойДокументDOM.Свойство("series") Тогда
			Документ.Вставить("ИнойДокументОРожденииСерия", СериализацияБЗК.СтрокаИзXML(ИнойДокументDOM.series));
		КонецЕсли;
		Если ИнойДокументDOM.Свойство("issueDate") Тогда
			Документ.Вставить("ИнойДокументОРожденииДатаВыдачи", СериализацияБЗК.ДатаИзXML(ИнойДокументDOM.issueDate));
		КонецЕсли;
		Если ИнойДокументDOM.Свойство("cert") Тогда // Обратная совместимость (1.1).
			ЗагрузитьСвидетельствоОРождении(Документ, ИнойДокументDOM.cert);
		КонецЕсли;
	КонецЕсли;
	
	// Справка о рождении.
	Если ИнформацияDOM.Свойство("birthReference") Тогда
		ИменаПолей = "number, issueDate, refType";
		АктDOM = УзлыЭлементаDOM(ИнформацияDOM.birthReference, ИменаПолей);
		Если АктDOM.number <> Неопределено Тогда
			Документ.Вставить("СправкаОРожденииНомер", СериализацияБЗК.СтрокаИзXML(АктDOM.number));
		КонецЕсли;
		Если АктDOM.issueDate <> Неопределено Тогда
			Документ.Вставить("СправкаОРожденииДатаВыдачи", СериализацияБЗК.ДатаИзXML(АктDOM.issueDate));
		КонецЕсли;
		Если АктDOM.refType <> Неопределено Тогда
			КодФормы = СериализацияБЗК.СтрокаИзXML(АктDOM.refType);
			Форма    = Перечисления.ФормыСправкиОРожденииРебенка.ЗначениеПоКоду(КодФормы);
			Документ.Вставить("СправкаОРожденииФорма", Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если ИнформацияDOM.Свойство("birthDate") Тогда
		Документ.Вставить("РебенокДатаРождения", СериализацияБЗК.ДатаИзXML(ИнформацияDOM.birthDate));
	КонецЕсли;
	
	Если ИнформацияDOM.Свойство("fullName") Тогда
		ФИО = СЭДОФСС.ФИОИзXML(ИнформацияDOM.fullName);
		Документ.Вставить("РебенокФамилия",  ФИО.Фамилия);
		Документ.Вставить("РебенокИмя",      ФИО.Имя);
		Документ.Вставить("РебенокОтчество", ФИО.Отчество);
	КонецЕсли;
	
	Если ИнформацияDOM.Свойство("snils") Тогда
		Документ.Вставить("РебенокСНИЛС", СЭДОФСС.СНИЛСИзXML(ИнформацияDOM.snils));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСведенияОРебенке(Документ, ИнформацияDOM)
	
	Документ.Вставить("РебенокДатаРождения", СериализацияБЗК.ДатаИзXML(ИнформацияDOM.birthDate));
	
	ФИО = СЭДОФСС.ФИОИзXML(ИнформацияDOM.fullName);
	Документ.Вставить("РебенокФамилия",  ФИО.Фамилия);
	Документ.Вставить("РебенокИмя",      ФИО.Имя);
	Документ.Вставить("РебенокОтчество", ФИО.Отчество);
	
	Документ.Вставить("РебенокСНИЛС", СЭДОФСС.СНИЛСИзXML(ИнформацияDOM.snils));
	
	Пол = ВРег(СокрЛП(СериализацияБЗК.СтрокаИзXML(ИнформацияDOM.gender)));
	Если Пол = "MALE" Тогда
		Документ.Вставить("РебенокПол", Перечисления.ПолФизическогоЛица.Мужской);
	ИначеЕсли Пол = "FEMALE" Тогда
		Документ.Вставить("РебенокПол", Перечисления.ПолФизическогоЛица.Женский);
	Иначе
		Документ.Вставить("РебенокПол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСвидетельствоОРождении(Документ, ЭлементDOM)
	ИменаПолей = "num, issueDate";
	СвидетельствоDOM = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	Если СвидетельствоDOM.num <> Неопределено Тогда
		Документ.Вставить("СвидетельствоОРожденииСерияНомер", СериализацияБЗК.СтрокаИзXML(СвидетельствоDOM.num));
	КонецЕсли;
	Если СвидетельствоDOM.issueDate <> Неопределено Тогда
		Документ.Вставить("СвидетельствоОРожденииДатаВыдачи", СериализацияБЗК.ДатаИзXML(СвидетельствоDOM.issueDate));
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьСправкуОтДругогоРодителя(Документ, СправкаОтДругогоРодителяDOM)
	Документ.Вставить("СправкаОтДругогоРодителяНомер", СериализацияБЗК.СтрокаИзXML(СправкаОтДругогоРодителяDOM.num));
	Документ.Вставить("СправкаОтДругогоРодителяДата",  СериализацияБЗК.ДатаИзXML(СправкаОтДругогоРодителяDOM.issueDate));
КонецПроцедуры

Процедура ЗагрузитьСправкуОНеполученииПособия(Документ, ЭлементDOM)
	ИменаПолей = "refType, num, issueDate";
	СправкаDOM = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	
	ВидСправки = СериализацияБЗК.ЧислоИзXML(СправкаDOM.refType);
	Номер      = СериализацияБЗК.СтрокаИзXML(СправкаDOM.num);
	ДатаВыдачи = СериализацияБЗК.ДатаИзXML(СправкаDOM.issueDate);
	
	Если ВидСправки = 1 Тогда
		Документ.Вставить("СправкаОНеполученииПособияОтОтцаНомер",      Номер);
		Документ.Вставить("СправкаОНеполученииПособияОтОтцаДатаВыдачи", ДатаВыдачи);
	ИначеЕсли ВидСправки = 2 Тогда
		Документ.Вставить("СправкаОНеполученииПособияОтМатериНомер",      Номер);
		Документ.Вставить("СправкаОНеполученииПособияОтМатериДатаВыдачи", ДатаВыдачи);
	ИначеЕсли ВидСправки = 3 Тогда
		Документ.Вставить("СправкаОНеполученииПособияПоДругомуМестуРаботыНомер",      Номер);
		Документ.Вставить("СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи", ДатаВыдачи);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьПрочиеСведенияОтпускаПоУходу(Документ, Реквизиты)
	Если Реквизиты.Свойство("childSer") Тогда
		Документ.Вставить("РебенокОчередность", СериализацияБЗК.ЧислоИзXML(Реквизиты.childSer));
	КонецЕсли;
	Если Реквизиты.Свойство("motherOut") Тогда
		Документ.Вставить("НаличиеРешенияСудаОЛишенииПрав", СериализацияБЗК.БулевоИзXML(Реквизиты.motherOut));
	КонецЕсли;
	Если Реквизиты.Свойство("otherChild") Тогда
		ДокументыНаДругихДетей = УзлыЭлементаDOM(Реквизиты.otherChild, "");
		Если ДокументыНаДругихДетей.Свойство("otherChildFlagBirth") Тогда
			Флаг = СериализацияБЗК.ЧислоИзXML(ДокументыНаДругихДетей.otherChildFlagBirth);
			Документ.Вставить("НаличиеДокументовОРожденииПредыдущихДетей", ?(Флаг = 1, Истина, Ложь));
		КонецЕсли;
		Если ДокументыНаДругихДетей.Свойство("otherChildFlagDeath") Тогда
			Флаг = СериализацияБЗК.ЧислоИзXML(ДокументыНаДругихДетей.otherChildFlagDeath);
			Документ.Вставить("НаличиеСвидетельстваОСмертиПредыдущихДетей", ?(Флаг = 1, Истина, Ложь));
		КонецЕсли;
	КонецЕсли;
	Если Реквизиты.Свойство("expirationDate") Тогда
		Документ.Вставить("ВходящийСрокОтвета", СериализацияБЗК.ДатаИзXML(Реквизиты.expirationDate));
		ПоднятьВерсиюСпецификации(Документ, "2.41");
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьАдрес(Документ, Префикс, Родитель, ИмяОбъектаАдреса, ИмяПоляЗаПределамиРФ = "")
	Если Родитель = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПоляИндекс = "postalCode";
	ИменаПолей = ИмяОбъектаАдреса + "," + ИмяПоляИндекс + ?(ИмяПоляЗаПределамиРФ = "", "", "," + ИмяПоляЗаПределамиРФ);
	Реквизиты = ОбщегоНазначенияБЗК.ЗначенияСвойств(Родитель, ИменаПолей);
	
	ОбъектАдресаDOM = Реквизиты[ИмяОбъектаАдреса];
	Если ОбъектАдресаDOM = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// См. тип "AddressFiasType" пространства имен "http://www.fss.ru/integration/types/common/v01".
	ИменаПолей = "houseGuid, guid, house, building, flat";
	АдресФИАСDOM = УзлыЭлементаDOM(ОбъектАдресаDOM, ИменаПолей);
	Документ.Вставить(Префикс + "ФИАСДом",  СериализацияБЗК.СтрокаИзXML(АдресФИАСDOM.houseGuid));
	Документ.Вставить(Префикс + "ФИАСРО",   СериализацияБЗК.СтрокаИзXML(АдресФИАСDOM.guid));
	Документ.Вставить(Префикс + "Дом",      СериализацияБЗК.СтрокаИзXML(АдресФИАСDOM.house));
	Документ.Вставить(Префикс + "Корпус",   СериализацияБЗК.СтрокаИзXML(АдресФИАСDOM.building));
	Документ.Вставить(Префикс + "Квартира", СериализацияБЗК.СтрокаИзXML(АдресФИАСDOM.flat));
	
	Документ.Вставить(Префикс + "Индекс", СериализацияБЗК.СтрокаИзXML(Реквизиты[ИмяПоляИндекс]));
	
	Если ИмяПоляЗаПределамиРФ <> "" Тогда
		Документ.Вставить(Префикс + "ЗаПределамиРФ", СериализацияБЗК.СтрокаИзXML(Реквизиты[ИмяПоляЗаПределамиРФ]));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ[Префикс + "ФИАСДом"]) Тогда
		Идентификатор = Документ[Префикс + "ФИАСДом"];
		ЭтоИдентификаторДома = Истина;
	ИначеЕсли ЗначениеЗаполнено(Документ[Префикс + "ФИАСРО"]) Тогда
		Идентификатор = Документ[Префикс + "ФИАСРО"];
		ЭтоИдентификаторДома = Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеАдреса = НайтиАдресПоСведенияОЗастрахованномЛицеФСС(Документ, Префикс, Идентификатор, ЭтоИдентификаторДома);
	Документ.Вставить(Префикс, ЗначениеАдреса);
	Возврат Истина;
КонецФункции

Функция НайтиАдресПоСведенияОЗастрахованномЛицеФСС(Документ, Префикс, Идентификатор, ЭтоИдентификаторДома)
	Если Не ЗначениеЗаполнено(Документ.СотрудникСНИЛС) Или Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗастрахованномЛицеФСС.Дата КАК Дата,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживания КАК ЗначениеАдреса,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияИндекс КАК Индекс,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияДом КАК Дом,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияКорпус КАК Корпус,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияКвартира КАК Квартира
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.СНИЛС = &СНИЛС
	|	И СведенияОЗастрахованномЛицеФСС.АдресПроживанияФИАСДом = &Идентификатор
	|	И НЕ СведенияОЗастрахованномЛицеФСС.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗастрахованномЛицеФСС.Дата,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрации,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииИндекс,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииДом,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииКорпус,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииКвартира
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.СНИЛС = &СНИЛС
	|	И СведенияОЗастрахованномЛицеФСС.АдресРегистрацииФИАСДом = &Идентификатор
	|	И НЕ СведенияОЗастрахованномЛицеФСС.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("СНИЛС",         Документ.СотрудникСНИЛС);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Если Не ЭтоИдентификаторДома Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФИАСДом", "ФИАСРО");
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Индекс = Документ[Префикс + "Индекс"]
			И НРег(СокрЛП(СтрокаТаблицы.Дом)) = НРег(СокрЛП(Документ[Префикс + "Дом"]))
			И НРег(СокрЛП(СтрокаТаблицы.Корпус)) = НРег(СокрЛП(Документ[Префикс + "Корпус"]))
			И НРег(СокрЛП(СтрокаТаблицы.Квартира)) = НРег(СокрЛП(Документ[Префикс + "Квартира"])) Тогда
			Возврат СтрокаТаблицы.ЗначениеАдреса;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция УзлыЭлементаDOM(ЭлементDOM, ИменаРеквизитов = "")
	Возврат СериализацияБЗК.УзлыЭлементаDOM(ЭлементDOM, ИменаРеквизитов);
КонецФункции

Процедура ЗаполнитьФизическоеЛицо(Документ)
	
	РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(
		Документ.СотрудникСНИЛС,
		Документ.СотрудникФамилия,
		Документ.СотрудникИмя,
		Документ.СотрудникОтчество);
	
	Документ.Вставить("СотрудникТекстОшибкиПоиска", "");
	Документ.Вставить("ФизическоеЛицо", РезультатПоиска.ФизическоеЛицо);
	
	Если Не ЗначениеЗаполнено(Документ.ФизическоеЛицо) Тогда
		Если ЗначениеЗаполнено(Документ.СотрудникСНИЛС) Тогда
			Документ.СотрудникТекстОшибкиПоиска = СтрШаблон(
				НСтр("ru = 'Не удалось найти физическое лицо по СНИЛС ""%1"": %2.';
					|en = 'Cannot find the individual by SNILS ""%1"": %2.'"),
				Документ.СотрудникСНИЛС,
				РезультатПоиска.ТекстОшибки);
		Иначе // Скорее всего, в эту ветку код никогда не попадет
			Документ.СотрудникТекстОшибкиПоиска = СтрШаблон(
				НСтр("ru = 'Не удалось найти физическое лицо по ФИО ""%1 %2 %3"": %4.';
					|en = 'Cannot find the individual by full name ""%1 %2 %3"": %4.'"),
				Документ.СотрудникФамилия,
				Документ.СотрудникИмя,
				Документ.СотрудникОтчество,
				РезультатПоиска.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСотрудникаИОрганизацию(Документ)
	Если ЗначениеЗаполнено(Документ.ФизическоеЛицо) Тогда
		КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
			Документ.Страхователь,
			Документ.ФизическоеЛицо,
			"Организация",
			ТекущаяДатаСеанса(),
			Ложь,
			Документ.СотрудникТекстОшибкиПоиска);
		Если КадровыеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(КадровыеДанные.Организация) Тогда
				Документ.Организация = КадровыеДанные.Организация;
			КонецЕсли;
			Документ.Сотрудник = КадровыеДанные.Сотрудник;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРебенка(Документ)
	Документ.РебенокФамилия        = ТРег(СокрЛП(Документ.РебенокФамилия));
	Документ.РебенокИмя            = ТРег(СокрЛП(Документ.РебенокИмя));
	Документ.РебенокОтчество       = ТРег(СокрЛП(Документ.РебенокОтчество));
	Если Не ЗначениеЗаполнено(Документ.ФизическоеЛицо) // Работник с таким СНИЛС не числится.
		Или Не ЗначениеЗаполнено(Документ.РебенокФамилия)
		Или Не ЗначениеЗаполнено(Документ.РебенокИмя) Тогда
		Возврат;
	КонецЕсли;
	
	Родственники = СЭДОФСС.ПустаяТаблицаРодственников();
	
	Родственник = Родственники.Добавить();
	Родственник.Фамилия      = Документ.РебенокФамилия;
	Родственник.Имя          = Документ.РебенокИмя;
	Родственник.Отчество     = Документ.РебенокОтчество;
	Родственник.ДатаРождения = Документ.РебенокДатаРождения;
	Родственник.СНИЛС        = Документ.РебенокСНИЛС;
	Родственник.КодСвязи     = Документ.РебенокКодСвязи;
	
	СЭДОФСС.ЗаполнитьСсылкиРодственников(Документ.ФизическоеЛицо, Родственники);
	
	Документ.Вставить("Ребенок", Родственник.Ссылка);
КонецПроцедуры

Процедура ЗаполнитьКартуМИР(Документ)
	НомерКартыМИР = ОбщегоНазначенияБЗК.ЗначениеСвойства(Документ, "НомерКартыМИР");
	Документ.Удалить("НомерКартыМИР");
	Если Не ЗначениеЗаполнено(НомерКартыМИР) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Документ.ФизическоеЛицо) Тогда
		МаскированныйНомер = Лев(НомерКартыМИР, 6) + "****************";
		МаскированныйНомер = Лев(МаскированныйНомер, СтрДлина(НомерКартыМИР) - 6) + Прав(НомерКартыМИР, 6);
		Документ.СотрудникТекстОшибкиПоиска = Документ.СотрудникТекстОшибкиПоиска
			+ Символы.ПС + СтрШаблон(НСтр("ru = 'Не удалось добавить карту %1.';
											|en = 'Cannot add card %1.'"), МаскированныйНомер);
		Возврат;
	КонецЕсли;
	
	Начало = СтрЗаменить(Лев(НомерКартыМИР, 6), "*", "");
	Окончание = СтрЗаменить(Прав(НомерКартыМИР, 4), "*", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеКартыКонтрагентов.Ссылка КАК Ссылка,
	|	БанковскиеКартыКонтрагентов.Владелец КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.БанковскиеКартыКонтрагентов КАК БанковскиеКартыКонтрагентов
	|ГДЕ
	|	БанковскиеКартыКонтрагентов.Код ПОДОБНО &Шаблон";
	Запрос.УстановитьПараметр("Шаблон", Начало + "%" + Окончание);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	СтрокаТаблицы = Таблица.Найти(Документ.ФизическоеЛицо, "ФизическоеЛицо");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Таблица.Найти(Справочники.ФизическиеЛица.ПустаяСсылка(), "ФизическоеЛицо");
	КонецЕсли;
	Если СтрокаТаблицы = Неопределено Тогда
		Свойства = Новый Структура("ЭтоНациональныйПлатежныйИнструмент", Истина);
		ОсновныеРеквизитыКарты = Справочники.БанковскиеКартыКонтрагентов.ОсновныеРеквизитыКарты();
		ОсновныеРеквизитыКарты.ОсновнойНомерДержателяКарты = НомерКартыМИР;
		КартаМИР = Справочники.БанковскиеКартыКонтрагентов.Добавить(
			Документ.ФизическоеЛицо,
			ОсновныеРеквизитыКарты,
			Свойства,
			Ложь);
	Иначе
		КартаМИР = СтрокаТаблицы.Ссылка;
	КонецЕсли;
	Документ.Вставить("КартаМИР", КартаМИР);
КонецПроцедуры

Процедура ЗаполнитьГражданство(Документ)
	КодСтраныГражданства = ОбщегоНазначенияБЗК.ЗначениеСвойства(Документ, "КодСтраныГражданства");
	Если Не ЗначениеЗаполнено(КодСтраныГражданства) Тогда
		Возврат;
	КонецЕсли;
	Документ.Вставить("СотрудникГражданство", Справочники.СтраныМира.НайтиПоКоду(КодСтраныГражданства));
КонецПроцедуры

Процедура ЗаполнитьСвойстваРеквизитов(Документ, СтруктураDOM)
	СвойстваРеквизитов = Новый ТаблицаЗначений;
	СвойстваРеквизитов.Колонки.Добавить("ТипРеквизита", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРеквизитовДляРасчетаПособияФСС"));
	СвойстваРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	СвойстваРеквизитов.Колонки.Добавить("ИмяТаблицы", Новый ОписаниеТипов("Строка"));
	СвойстваРеквизитов.Колонки.Добавить("Изменяемый", Новый ОписаниеТипов("Булево, Число"));
	СвойстваРеквизитов.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево, Число"));
	ВыражениеXPath = СериализацияБЗК.ВычислитьВыражениеXPath(СтруктураDOM, "//*/@*");
	БыстрыйПоиск = Перечисления.ТипыРеквизитовДляРасчетаПособияФСС.СоответствиеДляПоискаПоИменам();
	Пока Истина Цикл
		АтрибутDOM = ВыражениеXPath.ПолучитьСледующий();
		Если АтрибутDOM = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если НРег(АтрибутDOM.ЛокальноеИмя) = "editable" Тогда
			ИмяСвойства = "Изменяемый";
		ИначеЕсли НРег(АтрибутDOM.ЛокальноеИмя) = "required" Тогда
			ИмяСвойства = "Обязательный";
		Иначе
			Продолжить;
		КонецЕсли;
		ЗначениеСвойства = СериализацияБЗК.ЗначениеXML(АтрибутDOM.ТекстовоеСодержимое, Тип("Булево"));
		// Определение имени реквизита.
		ЭлементDOM = АтрибутDOM.ЭлементВладелец;
		ИмяРеквизита = НРег(ЭлементDOM.ЛокальноеИмя);
		// Определение пути к реквизиту.
		МассивИмен = Новый Массив;
		ЭлементDOM = ЭлементDOM.РодительскийУзел;
		ЛокальноеИмя = НРег(ЭлементDOM.ЛокальноеИмя);
		Пока ЛокальноеИмя <> "socialassistnum"
			И ЛокальноеИмя <> "benefit1approve"
			И ЛокальноеИмя <> "benefit2approve"
			И ЛокальноеИмя <> "benefit4approve"
			И ЗначениеЗаполнено(ЛокальноеИмя) Цикл
			МассивИмен.Вставить(0, ЛокальноеИмя);
			ЭлементDOM = ЭлементDOM.РодительскийУзел;
			ЛокальноеИмя = НРег(ЭлементDOM.ЛокальноеИмя);
		КонецЦикла;
		ИмяТаблицы = СтрСоединить(МассивИмен, ".");
		// Поиск и добавление строки результата.
		Фильтр = Новый Структура("ИмяРеквизита, ИмяТаблицы", ИмяРеквизита, ИмяТаблицы);
		Фильтр.Вставить(ИмяСвойства, Неопределено);
		Найденные = СвойстваРеквизитов.НайтиСтроки(Фильтр);
		Если Найденные.Количество() > 0 Тогда
			СтрокаТаблицы = Найденные[0];
		Иначе
			ПолноеИмя = ?(ИмяТаблицы = "", "", ИмяТаблицы + ".") + ИмяРеквизита;
			СтрокаТаблицы = СвойстваРеквизитов.Добавить();
			СтрокаТаблицы.ИмяРеквизита = ИмяРеквизита;
			СтрокаТаблицы.ИмяТаблицы   = ИмяТаблицы;
			СтрокаТаблицы.ТипРеквизита = БыстрыйПоиск[ПолноеИмя];
		КонецЕсли;
		СтрокаТаблицы[ИмяСвойства] = ЗначениеСвойства;
	КонецЦикла;
	Документ.Вставить("СвойстваРеквизитов", СвойстваРеквизитов);
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПерерасчета(Документ, ЭлементDOM) Экспорт
	Реквизиты = УзлыЭлементаDOM(ЭлементDOM, "batchNum");
	Документ.Вставить("ПерерасчетИдентификаторСтрокиРеестра", СериализацияБЗК.СтрокаИзXML(Реквизиты.batchNum));
КонецПроцедуры

Процедура ПоднятьВерсиюСпецификации(Документ, Версия)
	ВерсияЧисломБыло  = ОбщегоНазначенияБЗК.ЗначениеСвойства(Документ, "ВерсияСпецификацииЧислом");
	ВерсияЧисломСтало = СЭДОФСС.ВерсияЧислом(Версия);
	Если ВерсияЧисломБыло = Неопределено Или ВерсияЧисломБыло < ВерсияЧисломСтало Тогда
		Документ.Вставить("ВерсияСпецификации",       Версия);
		Документ.Вставить("ВерсияСпецификацииЧислом", ВерсияЧисломСтало);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Регламенты

Функция МаксимальнаяДатаОтвета(Объект) Экспорт
	Если ЗначениеЗаполнено(Объект.ДатаСообщения) Тогда
		ДатаОтсчета = Объект.ДатаСообщения;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
		ДатаОтсчета = Объект.ДатаСоздания;
	Иначе
		ДатаОтсчета = Объект.Дата;
	КонецЕсли;
	Возврат СЭДОФСС.СледующийРабочийДень(ДатаОтсчета, РабочихДнейНаОтправкуОтвета(Объект.ВидПособия));
КонецФункции

// Возвращает количество рабочих дней в течении которых страхователь должен ответить на входящий запрос.
Функция РабочихДнейНаОтправкуОтвета(ВидПособия)
	Если ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка Тогда
		// Пункт 32 Правил, утвержденных Постановлением Правительства РФ от 23.11.2021 № 2010.
		// 32. Страхователь не позднее 2 рабочих дней со дня получения запроса страховщика,
		// указанного в пункте 31 настоящих Правил, направляет страховщику сведения о районном коэффициенте,
		// используемом при исчислении пособий.
		Возврат 2;
	Иначе
		// Пункты 8 и 11 статьи 13 Федерального закона от 29.12.2006 N 255-ФЗ.
		// 8. Страхователи не позднее трех рабочих дней со дня получения данных о закрытом ЭЛН,
		// передают в ФСС сведения, необходимые для назначения и выплаты пособий по ВН, БиР.
		// 11. Страхователи представляют в ФСС сведения, необходимые для назначения
		// ежемесячного пособия по уходу за ребенком, в срок не позднее трех рабочих дней
		// со дня подачи застрахованным лицом заявления о назначении ежемесячного пособия по уходу за ребенком.
		Возврат 3;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Функция ТребованияПоОтправке()
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоРабочегоДня = НачалоДня(СЭДОФСС.БлижайшийРабочийДень(НачалоТекущегоДня));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
	|	НЕ ВходящийЗапросФССДляРасчетаПособия.Загружен КАК ТребуетсяЗагрузить,
	|	ВходящийЗапросФССДляРасчетаПособия.Загружен КАК ТребуетсяОтветить,
	|	ВЫБОР
	|		КОГДА ВходящийЗапросФССДляРасчетаПособия.Загружен
	|				И ВходящийЗапросФССДляРасчетаПособия.МаксимальнаяДатаОтвета <= &НачалоРабочегоДня
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяОтветитьСегодня
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	НЕ ВходящийЗапросФССДляРасчетаПособия.Обработан
	|	И НЕ ВходящийЗапросФССДляРасчетаПособия.ПометкаУдаления";
	Запрос.УстановитьПараметр("НачалоРабочегоДня", НачалоРабочегоДня);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область Заполнение

Процедура ПриЗаписиПервичногоДокумента(ПервичныйДокументОбъект, Отказ) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаРеквизитов = "НомерЛисткаНетрудоспособности, Организация, ГоловнаяОрганизация, ИсправленныйДокумент, Сотрудник, ФизическоеЛицо";
	Значения = ОбщегоНазначенияБЗК.ЗначенияСвойств(ПервичныйДокументОбъект, ИменаРеквизитов);
	НомерЛН              = Значения.НомерЛисткаНетрудоспособности;
	ГоловнаяОрганизация  = Значения.ГоловнаяОрганизация;
	ИсправленныйДокумент = Значения.ИсправленныйДокумент;
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(Значения.Организация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Значения.Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапрос.Ссылка КАК Ссылка,
	|	ВходящийЗапрос.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВходящийЗапрос.НомерЛН КАК НомерЛН,
	|	ВходящийЗапрос.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВходящийЗапрос.Сотрудник КАК Сотрудник,
	|	ВходящийЗапрос.Организация КАК Организация
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапрос
	|ГДЕ
	|	ВходящийЗапрос.НомерЛН = &НомерЛН
	|	И ВходящийЗапрос.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВходящийЗапрос.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Если Не ПервичныйДокументОбъект.ПометкаУдаления
				И (Не ЗначениеЗаполнено(Выборка.ПервичныйДокумент)
					Или Выборка.ПервичныйДокумент = ПервичныйДокументОбъект.Ссылка
					Или Выборка.ПервичныйДокумент = ИсправленныйДокумент) Тогда
				ПервичныйДокумент  = ПервичныйДокументОбъект.Ссылка;
				ЗначенияРеквизитов = Значения;
			Иначе
				ИменаРеквизитов = "Ссылка, Организация, Сотрудник, ФизическоеЛицо";
				ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
					Выборка.НомерЛН,
					Выборка.ГоловнаяОрганизация,
					,
					ИменаРеквизитов);
				Если ЗначенияРеквизитов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПервичныйДокумент = ЗначенияРеквизитов.Ссылка;
			КонецЕсли;
			РеквизитыДляОбновления = Новый Структура;
			Если ПервичныйДокумент <> Выборка.ПервичныйДокумент Тогда
				РеквизитыДляОбновления.Вставить("ПервичныйДокумент", ПервичныйДокумент);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Сотрудник)
				Или ЗначениеЗаполнено(ЗначенияРеквизитов.ФизическоеЛицо) Тогда
				РеквизитыДляОбновления.Вставить("Сотрудник",      ЗначенияРеквизитов.Сотрудник);
				РеквизитыДляОбновления.Вставить("ФизическоеЛицо", ЗначенияРеквизитов.ФизическоеЛицо);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация) Тогда
				РеквизитыДляОбновления.Вставить("Организация", ЗначенияРеквизитов.Организация);
			КонецЕсли;
			Если РеквизитыДляОбновления.Количество() > 0 Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДляОбновления);
				ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось обновить Входящий запрос ФСС для расчета пособия ""%1"": %2';
					|en = 'Cannot update Incoming SSF request for allowance calculation ""%1"": %2'"),
				Выборка.Ссылка,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция СписокВыбораЗаявлений(ФизическоеЛицо, ПервичныйДокумент, ИсключаемоеЗаявление, Количество) Экспорт
	Результат = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	// Если первичный документ заполнен - получить последнее заявление по документу.
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Отбор.Вставить("ДокументОснование", ПервичныйДокумент);
	Иначе
		Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	КонецЕсли;
	Поля = "Ссылка, Дата";
	Сортировки = "Дата Убыв, Ссылка Убыв";
	Запрос = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗапросПоДокументу(Отбор, Поля, Количество, Сортировки);
	Таблица = Запрос.Выполнить().Выгрузить();
	Результат.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Ссылка"));
	Если ЗначениеЗаполнено(ИсключаемоеЗаявление) Тогда
		ЭлементСписка = Результат.НайтиПоЗначению(ИсключаемоеЗаявление);
		Если ЭлементСписка <> Неопределено Тогда
			Результат.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция РеестрыПоЗаявлению(Заявление, ПервичныйДокумент, ИсключаемоеЗаявление, Количество) Экспорт
	Если Не ЗначениеЗаполнено(Заявление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Реестр.Ссылка КАК Ссылка,
	|	Реестр.СтатусДокумента КАК СтатусДокумента,
	|	Реестр.Номер КАК Номер,
	|	Реестр.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС)
	|			ТОГДА 6
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС)
	|			ТОГДА 5
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен)
	|			ТОГДА 4
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС)
	|			ТОГДА 3
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Аннулирован)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВесСостояния,
	|	Реестр.ПометкаУдаления КАК ПометкаУдаления,
	|	Реестр.Проведен КАК Проведен
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ТаблицаСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК Реестр
	|		ПО ТаблицаСведений.Ссылка = Реестр.Ссылка
	|ГДЕ
	|	&Условия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Проведен УБЫВ,
	|	ВесСостояния УБЫВ,
	|	Дата УБЫВ";
	
	Если Количество = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	ИначеЕсли Количество > 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(Количество, "ЧГ="));
	КонецЕсли;
	
	Условия = Новый Массив;
	Условия.Добавить("ТаблицаСведений.Заявление = &Заявление");
	Запрос.УстановитьПараметр("Заявление", Заявление);
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Условия.Добавить("ТаблицаСведений.ПервичныйДокумент = &ПервичныйДокумент");
		Запрос.УстановитьПараметр("ПервичныйДокумент", ПервичныйДокумент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсключаемоеЗаявление) Тогда
		Условия.Добавить("ТаблицаСведений.Заявление <> &ИсключаемоеЗаявление");
		Запрос.УстановитьПараметр("ИсключаемоеЗаявление", ИсключаемоеЗаявление);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", СтрСоединить(Условия, " И "));
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ПриЗаписиОтветаНаЗапрос(ОтветНаЗапрос) Экспорт
	ВходящиеЗапросы = Новый Массив;
	Если ЗначениеЗаполнено(ОтветНаЗапрос.ВходящийЗапрос) Тогда
		ВходящиеЗапросы.Добавить(ОтветНаЗапрос.ВходящийЗапрос);
	КонецЕсли;
	ЗначенияДоЗаписи = ОтветНаЗапрос.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	Если ЗначенияДоЗаписи.ВходящийЗапрос <> ОтветНаЗапрос.ВходящийЗапрос
		И ЗначениеЗаполнено(ЗначенияДоЗаписи.ВходящийЗапрос) Тогда
		ВходящиеЗапросы.Добавить(ЗначенияДоЗаписи.ВходящийЗапрос);
	КонецЕсли;
	Количество = ВходящиеЗапросы.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтветНаЗапросФСС.Ссылка КАК ОтветНаЗапросПоследний,
	|	ЕСТЬNULL(ВходящийЗапросФСС.ОтветНаЗапрос, НЕОПРЕДЕЛЕНО) КАК ОтветНаЗапросИспользуемый,
	|	ОтветНаЗапросФСС.ВходящийЗапрос КАК ВходящийЗапрос,
	|	ОтветНаЗапросФСС.ДатаОтправки КАК ДатаОтправки
	|ИЗ
	|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФСС
	|		ПО ОтветНаЗапросФСС.ВходящийЗапрос = ВходящийЗапросФСС.Ссылка
	|ГДЕ
	|	ОтветНаЗапросФСС.ВходящийЗапрос = &ВходящийЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтветНаЗапросФСС.Дата УБЫВ,
	|	ОтветНаЗапросФСС.Проведен УБЫВ,
	|	ОтветНаЗапросФСС.ДатаОтправки УБЫВ,
	|	ОтветНаЗапросФСС.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("ВходящийЗапрос", ВходящиеЗапросы[0]);
	Если Количество = 2 Тогда
		Текст2 = СтрЗаменить(Запрос.Текст, "&ВходящийЗапрос", "&ВходящийЗапрос2");
		Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + Текст2;
		Запрос.УстановитьПараметр("ВходящийЗапрос2", ВходящиеЗапросы[1]);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Пакет = Запрос.ВыполнитьПакет();
	Для Каждого Результат Из Пакет Цикл
		Таблица = Результат.Выгрузить();
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Если СтрокаТаблицы.ОтветНаЗапросПоследний = СтрокаТаблицы.ОтветНаЗапросИспользуемый Тогда
				Продолжить;
			КонецЕсли;
			ДокументОбъект = СтрокаТаблицы.ВходящийЗапрос.ПолучитьОбъект();
			ДокументОбъект.ОтветНаЗапрос = СтрокаТаблицы.ОтветНаЗапросПоследний;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаОтправки) Тогда
				ДокументОбъект.Обработан = Истина;
				ДокументОбъект.ЗаполнитьДатыОтправки();
			КонецЕсли;
			ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// В сообщениях 100 Фонд явно указывает СНИЛС и появление сообщений 100 явно связано с тем,
	// к какому РНС относятся сведения о застрахованном лице "по версии Фонда",
	// поэтому в них требуется актуализировать ссылки физлиц.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВходящийЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапрос
	|ГДЕ
	|	ВходящийЗапрос.СотрудникСНИЛС = &НовыйСНИЛС
	|	И ВходящийЗапрос.ФизическоеЛицо <> &ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВходящийЗапрос.Ссылка
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапрос
	|ГДЕ
	|	ВходящийЗапрос.ФизическоеЛицо = &ФизическоеЛицо
	|	И ВходящийЗапрос.СотрудникСНИЛС <> &НовыйСНИЛС";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВходящийЗапрос.СотрудникСНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВходящийЗапрос.СотрудникСНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаВыборки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = СтрокаВыборки.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.СотрудникСНИЛС = НовыйСНИЛС И ЗначениеЗаполнено(НовыйСНИЛС) Тогда
			ДокументОбъект.ФизическоеЛицо = ФизическоеЛицо;
		Иначе
			ДокументОбъект.ФизическоеЛицо = Неопределено;
		КонецЕсли;
		ДокументОбъект.Организация = ДокументОбъект.Страхователь;
		ДокументОбъект.Сотрудник   = Справочники.Сотрудники.ПустаяСсылка();
		ЗаполнитьСотрудникаИОрганизацию(ДокументОбъект);
		ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи) Экспорт
	ДокументОбъект.ДействияПередЗаписью();
	СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписи);
	ДокументОбъект.ДействияПриЗаписи();
КонецПроцедуры

#КонецОбласти

#КонецЕсли
