///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Входящие документы от ФСС загружаются в автоматическом режиме';
								|en = 'Incoming SSF documents are imported automatically'");
	КонецЕсли;
	
	Элементы.СведенияВЗапросеГруппа.ТолькоПросмотр = Истина;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	СЭДОФСС.ПриСозданииФормыЗапросаИлиОтветаДляРасчетаПособия(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_ОтпускПоУходуЗаРебенком"
		Или ИмяСобытия = "Запись_Отпуск"
		Или ИмяСобытия = "Запись_ЗаявлениеСотрудникаНаВыплатуПособия"
		Или ИмяСобытия = "Запись_РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий"
		Или ИмяСобытия = "Запись_УведомлениеОбИзмененииРасчетаПособия"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВходящийЗапросФССДляРасчетаПособия", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПособияПриИзменении(Элемент)
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОшибкаПриПоискеСотрудникаНажатие(Элемент)
	ОшибкаПриПоискеФизическогоЛицаНадписьНажатие(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриПоискеФизическогоЛицаНадписьНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнформированиеПользователяКлиент.ПоказатьПодробности(Объект.СотрудникТекстОшибкиПоиска, , БиблиотекаКартинок.Предупреждение24БЗК);
КонецПроцедуры

&НаКлиенте
Процедура СсылкиПрямыхВыплатФССОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	Если Адрес = "СоздатьСведения" Тогда
		СтандартнаяОбработка = Ложь;
		ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ОткрытьЗаявлениеСотрудникаПоОснованию(Объект.ПервичныйДокумент);
	ИначеЕсли Адрес = "ПоказатьВсе" Тогда
		СтандартнаяОбработка = Ложь;
		ОтборыСписка = Новый Структура;
		ОтборыСписка.Вставить("ГоловнаяОрганизация",           Объект.ГоловнаяОрганизация);
		ОтборыСписка.Вставить("НомерЛисткаНетрудоспособности", Объект.НомерЛН);
		ПараметрыСписка = Новый Структура;
		ПараметрыСписка.Вставить("Отбор", ОтборыСписка);
		УникальностьСписка = Объект.НомерЛН;
		ОткрытьФорму("Документ.ЗаявлениеСотрудникаНаВыплатуПособия.ФормаСписка", ПараметрыСписка, , УникальностьСписка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановленаУтратаТрудоспобностиПриИзменении(Элемент)
	Объект.УтратаТрудоспобности = ?(УстановленаУтратаТрудоспобности,
		Элементы.УтратаТрудоспобности.СписокВыбора[0].Значение,
		"");
КонецПроцедуры

&НаКлиенте
Процедура РазрешениеНаПроживаниеВидАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Или Не ЗначениеЗаполнено(Текст) Тогда
		// Событие было вызвано для формирования списка быстрого выбора.
		// Несмотря на СтандартнаяОбработка = Ложь, СписокВыбора из свойств поля все равно будет показан.
		// Добавлять к нему ничего не требуется.
		СтандартнаяОбработка = Ложь;
	Иначе
		// Событие было вызвано при вводе текста.
		СписокДляПодбора = Новый СписокЗначений;
		Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Если СтрНайти(ЭлементСписка.Представление, Текст) > 0 Тогда
				ЗаполнитьЗначенияСвойств(СписокДляПодбора.Добавить(), ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокДляПодбора;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьРедактирования(Команда)
	ВключитьВозможностьРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТекстXML(Команда)
	СЭДОФССКлиент.ПоказатьТекстXML(Объект.ИдентификаторСообщения);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СвертываемыеГруппы

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы) Экспорт
	// I. Группы, аналогичные документу ОтветНаЗапросФССДляРасчетаПособия.
	Группы.Добавить(Элементы.СведенияОЗастрахованномЛицеГруппа);
	Группы.Добавить(Элементы.АдресРегистрацииГруппа);
	Группы.Добавить(Элементы.УдостоверениеЛичностиГруппа);
	Группы.Добавить(Элементы.РазрешениеНаПроживаниеГруппа);
	Группы.Добавить(Элементы.ВидДоговораГруппа);
	Группы.Добавить(Элементы.СрочныйТрудовойДоговорГруппа);
	Группы.Добавить(Элементы.ЛьготыГруппа);
	Группы.Добавить(Элементы.УсловияИсчисленияГруппа);
	Группы.Добавить(Элементы.ДанныеДляРасчетаГруппа);
	Группы.Добавить(Элементы.ПараметрыНазначенияГруппа);
	Группы.Добавить(Элементы.ОтпускПоУходуГруппа);
	Группы.Добавить(Элементы.ЗаменаПослеродовогоОтпускаГруппа);
	Группы.Добавить(Элементы.ДокументОРожденииГруппа);
	Группы.Добавить(Элементы.РебенокГруппа);
	Группы.Добавить(Элементы.СправкаОтДругогоРодителяГруппа);
	Группы.Добавить(Элементы.СправкаОНеполученииПособияГруппа);
	Группы.Добавить(Элементы.УсыновлениеОпекаГруппа);
	Группы.Добавить(Элементы.ПередачаНаВоспитаниеГруппа);
	Группы.Добавить(Элементы.СпособВыплатыГруппа);
	Группы.Добавить(Элементы.ИсключаемыеПериодыГруппа);
	Группы.Добавить(Элементы.ПериодыПростояГруппа);
	Группы.Добавить(Элементы.ПриостановленияТрудовыхДоговоровГруппа);
	Группы.Добавить(Элементы.ДокументыНСПЗГруппа);
	Группы.Добавить(Элементы.ИзвещениеФССГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
	Группы.Добавить(Элементы.ПерерасчетГруппа);
	// II. Группы, которых нет в документе ОтветНаЗапросФССДляРасчетаПособия.
	Группы.Добавить(Элементы.ТекстОшибкиГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп() Экспорт
	// Обработка не требуется.
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость) Экспорт
	
	// I. Группы, аналогичные документу ОтветНаЗапросФССДляРасчетаПособия.
	Если Группа = Элементы.СведенияОЗастрахованномЛицеГруппа Тогда
		Представление = ПредставлениеЗастрахованногоЛица();
		
	ИначеЕсли Группа = Элементы.АдресРегистрацииГруппа Тогда
		Представление = ПредставлениеАдреса("АдресРегистрации", Истина);
		
	ИначеЕсли Группа = Элементы.УдостоверениеЛичностиГруппа Тогда
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.УдостоверениеЛичностиВид,
			Объект.УдостоверениеЛичностиСерия,
			Объект.УдостоверениеЛичностиНомер,
			Объект.УдостоверениеЛичностиДатаВыдачи,
			Объект.УдостоверениеЛичностиСрокДействия,
			Объект.УдостоверениеЛичностиКемВыдан);
		
	ИначеЕсли Группа = Элементы.РазрешениеНаПроживаниеГруппа Тогда
		ОбновитьЭлементыГруппыРазрешениеНаПроживание(Группа, Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.ВидДоговораГруппа Тогда
		ОбновитьЭлементыГруппыВидДоговора(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СрочныйТрудовойДоговорГруппа Тогда
		ОбновитьЭлементыГруппыТрудовойДоговор(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ЛьготыГруппа Тогда
		ОбновитьЭлементыГруппыЛьготы(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.УсловияИсчисленияГруппа Тогда
		ОбновитьЭлементыГруппыУсловияИсчисления(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ДанныеДляРасчетаГруппа Тогда
		ОбновитьЭлементыГруппыДанныеДляРасчета(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ПараметрыНазначенияГруппа Тогда
		ОбновитьЭлементыГруппыПараметрыНазначения(Группа, Представление, Заполнена, Развернута, Видимость);
		
	ИначеЕсли Группа = Элементы.ОтпускПоУходуГруппа Тогда
		ОбновитьЭлементыГруппыОтпускПоУходу(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ЗаменаПослеродовогоОтпускаГруппа Тогда
		ОбновитьЭлементыГруппыЗаменаПослеродовогоОтпуска(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ДокументОРожденииГруппа Тогда
		ОбновитьЭлементыГруппыДокументОРождении(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.РебенокГруппа Тогда
		ОбновитьЭлементыГруппыРебенок(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СправкаОтДругогоРодителяГруппа Тогда
		ОбновитьЭлементыГруппыСправкаОтДругогоРодителя(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СправкаОНеполученииПособияГруппа Тогда
		ОбновитьЭлементыГруппыСправкаОНеполученииПособия(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.УсыновлениеОпекаГруппа Тогда
		ОбновитьЭлементыГруппыУсыновлениеОпека(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ПередачаНаВоспитаниеГруппа Тогда
		ОбновитьЭлементыГруппыПередачаНаВоспитание(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СпособВыплатыГруппа Тогда
		ОбновитьЭлементыГруппыСпособВыплаты(Видимость, Представление, Развернута);
		
	ИначеЕсли Группа = Элементы.ИсключаемыеПериодыГруппа Тогда
		Видимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Заполнена = Объект.ИсключаемыеПериоды.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеИсключаемыхПериодов();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ПериодыПростояГруппа Тогда
		Видимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Заполнена = Объект.ПериодыПростоя.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеПериодовПростоя();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ПриостановленияТрудовыхДоговоровГруппа Тогда
		Видимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Заполнена = Объект.ПриостановленияТрудовыхДоговоров.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеПриостановленийТрудовыхДоговоров();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ДокументыНСПЗГруппа Тогда
		ОбновитьЭлементыГруппыДокументыНСПЗ(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ИзвещениеФССГруппа Тогда
		ОбновитьЭлементыГруппыИзвещениеФСС(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		ОбновитьЭлементыГруппыСтрахователь(Видимость, Представление);
		
	ИначеЕсли Группа = Элементы.ПерерасчетГруппа Тогда
		Представление = ПредставлениеПерерасчета();
		
	// II. Группы, которых нет в документе ОтветНаЗапросФССДляРасчетаПособия.
	ИначеЕсли Группа = Элементы.ТекстОшибкиГруппа Тогда
		Видимость     = ЗначениеЗаполнено(Объект.ТекстОшибки);
		Заполнена     = Истина;
		Представление = "-";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвернутьРазвернутьГруппу(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	СЭДОФСС.СвернутьРазвернутьГруппу(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	ПервичнаяИнициализицияФормы = (Элементы.УсловияИсчисленияКод1.СписокВыбора.Количество() = 0);
	Если ПервичнаяИнициализицияФормы Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод1);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод2);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод3);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораТипРодственнойСвязи(Элементы.РебенокКодСвязи);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораУтратаТрудоспобности(Элементы.УтратаТрудоспобности);
		СЭДОФСС.СписокВыбораКатегорийЗастрахованныхЛиц(Элементы.СотрудникКатегория.СписокВыбора);
		СЭДОФСС.НастроитьПолеВидУдостоверенияЛичности(
			Элементы.РазрешениеНаПроживаниеВид,
			Объект.РазрешениеНаПроживаниеВид,
			"12,15,19,61,62,63");
	КонецЕсли;
	ЗаполнитьСвязанныеДокументы();
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитать()
	ОтключитьОбработчикОжидания("ПрочитатьНаКлиенте");
	ПодключитьОбработчикОжидания("ПрочитатьНаКлиенте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНаКлиенте()
	Если Модифицированность Тогда
		ОбновитьЭлементыФормы();
	Иначе
		Прочитать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	ТолькоПросмотр = Не Объект.Загружен;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СЭДОФСС.СведенияОВидеПособия(Объект.ВидПособия));
	
	Особенности = Документы.ОтветНаЗапросФССДляРасчетаПособия.ОсобенностиВыгрузки(Объект);
	
	ОбновитьВидимостьЭлементовПоПравам();
	
	ОбновитьСсылкиПрямыхВыплатФСС();
	
	Элементы.ОшибкаПриПоискеФизическогоЛицаГруппа.Видимость = ЗначениеЗаполнено(Объект.СотрудникТекстОшибкиПоиска)
		И Не ЗначениеЗаполнено(Объект.ФизическоеЛицо);
	Элементы.УдостоверениеЛичностиВидКодМВД.Видимость = ЗначениеЗаполнено(Объект.УдостоверениеЛичностиВидКодМВД)
		И Не ЗначениеЗаполнено(Объект.УдостоверениеЛичностиВид);
	
	СЭДОФСС.ОбновитьСвертываемыеГруппы(ЭтотОбъект);;
	
	ОбновитьЭлементыШапки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовПоПравам()
	ЭтоРасчетчик = СЭДОФСС.ЕстьПравоПросмотраФактическихНачисленийВДокументе(Объект);
	Элементы.ПервыйРасчетныйГодЗаработок.Видимость = ЭтоРасчетчик;
	Элементы.ВторойРасчетныйГодЗаработок.Видимость = ЭтоРасчетчик;
	Элементы.СреднемесячныйЗаработок.Видимость     = ЭтоРасчетчик;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСсылкиПрямыхВыплатФСС()
	Если ЗначениеЗаполнено(Объект.ПервичныйДокумент)
		И ТипЗнч(Объект.ПервичныйДокумент) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахования.ОбновитьНадписьВБольничном(
			Элементы.СсылкиПрямыхВыплатФСС,
			Объект.ПервичныйДокумент,
			Ложь);
	Иначе
		Элементы.СсылкиПрямыхВыплатФСС.Заголовок = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыШапки()
	Элементы.НомерЛН.Видимость = ЭтоЛН;
	Элементы.Ребенок.Видимость = (ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу) И СЭДОФСС.ВидимостьПоляРодственник();
	Элементы.ВходящийСрокОтвета.Видимость = ЗначениеЗаполнено(Объект.ВходящийСрокОтвета)
		Или (Особенности.Версия_2_41 И ЭтоОтпускПоУходу);
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	Иначе
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Страхователь);
	КонецЕсли;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСтрахователь(Видимость, Представление)
	Представления = Новый Массив;
	
	ЕстьРегномерСФР = ЗначениеЗаполнено(Объект.РегистрационныйНомерСФР);
	ЕстьРегномерФСС = ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС);
	Элементы.РегистрационныйНомерФСС.Видимость = ЕстьРегномерФСС Или Не ЕстьРегномерСФР Или ВозможностьРедактирования;
	Элементы.РегистрационныйНомерСФР.Видимость = ЕстьРегномерСФР Или Не ЕстьРегномерФСС Или ВозможностьРедактирования;
	
	Если ЕстьРегномерСФР Тогда
		Представления.Добавить(НСтр("ru = 'регистрационный номер СФР';
									|en = 'registration number in Social Insurance Fund of Russia'") + " " + Объект.РегистрационныйНомерСФР);
	ИначеЕсли ЕстьРегномерФСС Тогда
		Представления.Добавить(НСтр("ru = 'регистрационный номер ФСС';
									|en = 'SSF registration number'") + " " + Объект.РегистрационныйНомерФСС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Представления.Добавить(НСтр("ru = 'код подчиненности';
									|en = 'subordination code'") + " " + Объект.КодПодчиненностиФСС);
	КонецЕсли;
	Если Представления.Количество() = 0 И ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Представления.Добавить(Строка(Объект.Страхователь));
	КонецЕсли;
	
	Представление = СтрСоединить(Представления, ", ");
КонецПроцедуры

#КонецОбласти

#Область Сотрудник

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо");
	Иначе
		Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗастрахованногоЛица()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.СотрудникФамилия + " " + Объект.СотрудникИмя + " " + Объект.СотрудникОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения';
									|en = 'Date of birth'") + " " + Формат(Объект.СотрудникДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
												|en = 'SNILS: %1'"), Объект.СотрудникСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыРазрешениеНаПроживание(Группа, Представление, Заполнена, Развернута, Видимость)
	Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
		Объект.РазрешениеНаПроживаниеВид,
		Объект.РазрешениеНаПроживаниеСерия,
		Объект.РазрешениеНаПроживаниеНомер,
		Объект.РазрешениеНаПроживаниеДатаВыдачи);
	Видимость = СЭДОФСС.ПоказыватьРазрешениеНаПроживание(Объект.КодСтраныГражданства)
		Или ЗначениеЗаполнено(Представление);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыВидДоговора(Видимость, Представление)
	Видимость = (ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР Или Особенности.Версия_2_36)
		И (Особенности.Версия_2_34 Или Объект.ВидДоговораТрудовой Или Объект.ВидДоговораГПХ);
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	Если Объект.ВидДоговораТрудовой Тогда
		Массив.Добавить(НСтр("ru = 'Трудовой';
							|en = 'Employment contract'"));
	КонецЕсли;
	Если Объект.ВидДоговораГПХ Тогда
		Массив.Добавить(НСтр("ru = 'ГПХ';
							|en = 'Civil law contract'"));
	КонецЕсли;
	Представление = СтрСоединить(Массив, ", ");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыТрудовойДоговор(Видимость, Представление)
	Видимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ Или ЭтоПособиеПриРождении;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаНачала)
		И ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаОкончания) Тогда
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ТрудовойДоговорДатаНачала, Объект.ТрудовойДоговорДатаОкончания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыЛьготы(Видимость, Представление)
	Видимость = ЭтоЛН Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Элементы.ВидОсобойЗоны.Видимость = ЭтоОтпускПоУходу;
	Представление = Строка(Объект.ПричинаПредоставленияЛьготы);
	Если ЭтоОтпускПоУходу Тогда
		Представление = Представление + ?(Представление = "", "", ", ") + Строка(Объект.ВидОсобойЗоны);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПредставлениеАдреса(Префикс, ЕстьПолеЗаПределамиРФ)
	Если ЕстьПолеЗаПределамиРФ И ЗначениеЗаполнено(Объект[Префикс + "ЗаПределамиРФ"]) Тогда
		Возврат Объект[Префикс + "ЗаПределамиРФ"];
	КонецЕсли;
	
	ЗначениеАдреса = Объект[Префикс];
	Дом            = Объект[Префикс + "Дом"];
	Корпус         = Объект[Префикс + "Корпус"];
	Квартира       = Объект[Префикс + "Квартира"];
	ФИАСДом        = Объект[Префикс + "ФИАСДом"];
	ФИАСРО         = Объект[Префикс + "ФИАСРО"];
	Представление  = "";
	
	// Поиск адреса был осуществлен при загрузке входящего запроса - по сведениям о застрахованном лице.
	Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
	КонецЕсли;
	
	// Поиск адреса по идентификатору дома.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСДом) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСДом, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3';
						|en = 'An error occurred when searching for %1 address by %2 ID: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСДом, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск адреса по идентификатору родительского объекта.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСРО) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСРО, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3';
						|en = 'An error occurred when searching for %1 address by %2 ID: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСРО, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Дом) Тогда
				Представление = Представление + ", " + Дом;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Корпус) Тогда
				Представление = Представление + ", " + Корпус;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

#КонецОбласти

#Область ДанныеДляРасчета

&НаСервере
Процедура ОбновитьЭлементыГруппыУсловияИсчисления(Видимость, Представление)
	Видимость = ЭтоЛН;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представления = Новый Массив;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод1) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод2) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод3) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод3);
	КонецЕсли;
	Представление = СтрСоединить(Представления, ", ");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыДанныеДляРасчета(Видимость, Представление)
	ВидимостьВидаЗаработка = Особенности.Версия_2_34
		Или ЗначениеЗаполнено(Объект.ПервыйРасчетныйГодВидЗаработка)
		Или ЗначениеЗаполнено(Объект.ВторойРасчетныйГодВидЗаработка);
	
	Элементы.РасчетныйПериодГруппа.Видимость            = ВидимостьРасчетногоПериода();
	Элементы.СтажГруппа.Видимость                       = ВидимостьСтажа();
	Элементы.ДоляВремени.Видимость                      = ВидимостьДолиВремени();
	Элементы.КалендарныхДнейРасчетногоПериода.Видимость = ЭтоЛН Или ЭтоОтпускПоУходу;
	Элементы.ПериодОплатыЗаСчетФССГруппа.Видимость      = ВидимостьПериодаОплатыЗаСчетФСС();
	Элементы.ПервыйРасчетныйГодВидЗаработка.Видимость   = ВидимостьВидаЗаработка;
	Элементы.ВторойРасчетныйГодВидЗаработка.Видимость   = ВидимостьВидаЗаработка;
	
	Представление = ПредставлениеГруппыДанныеДляРасчета();
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыДанныеДляРасчета()
	Представления = Новый Массив;
	
	Если ВидимостьРасчетногоПериода() Тогда
		Годы = Новый Массив;
		Если ЗначениеЗаполнено(Объект.ПервыйРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ПервыйРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВторойРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ВторойРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если Годы.Количество() > 0 Тогда
			Представления.Добавить(СтрШаблон(НСтр("ru = 'Расчетные годы: %1';
													|en = 'Payroll years: %1'"), СтрСоединить(Годы, ", ")));
		КонецЕсли;
	КонецЕсли;
	
	Если ВидимостьСтажа() Тогда
		Если ЗначениеЗаполнено(Объект.СтраховойСтажЛет) Или ЗначениеЗаполнено(Объект.СтраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Страховой стаж: %1';
					|en = 'Pensionable service: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.СтраховойСтажЛет, Объект.СтраховойСтажМесяцев)));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.НестраховойСтажЛет) Или ЗначениеЗаполнено(Объект.НестраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Нестраховой стаж: %1';
					|en = 'Non-pensionable service: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.НестраховойСтажЛет, Объект.НестраховойСтажМесяцев)));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'РК: %1';
												|en = 'RK: %1'"), Объект.РайонныйКоэффициент));
	КонецЕсли;
	Если ВидимостьДолиВремени() И ЗначениеЗаполнено(Объект.ДоляВремени) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'Ставок: %1';
												|en = 'Rates: %1'"), Объект.ДоляВремени));
	КонецЕсли;
	
	Если ВидимостьПериодаОплатыЗаСчетФСС()
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаНачала)
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаОкончания) Тогда
		Представления.Добавить(СтрШаблон(
			НСтр("ru = 'Оплата за счет ФСС: %1';
				|en = 'Payment out of SSF fund: %1'"),
			ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ОплатаФССДатаНачала, Объект.ОплатаФССДатаОкончания)));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ВидимостьРасчетногоПериода()
	Возврат ЭтоЛН Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьСтажа()
	Возврат ЭтоЛН Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьДолиВремени()
	Возврат ЭтоЛН Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьПериодаОплатыЗаСчетФСС()
	Возврат ЭтоОбычныйБольничный Или ЭтоНСПЗ;
КонецФункции

#КонецОбласти

#Область ПараметрыНазначения

&НаСервере
Процедура ОбновитьЭлементыГруппыПараметрыНазначения(Группа, Представление, Заполнена, Развернута, Видимость)
	Видимость = (Особенности.Версия_2_34 И Не Объект.Перерасчет)
		Или Объект.ЧислитсяУНесколькихСтрахователей
		Или ЗначениеЗаполнено(Объект.СоставСтрахователейЗаДваГода)
		Или ЗначениеЗаполнено(Объект.МетодНазначенияИВыплатыПособия)
		Или Объект.ВыборПодтвержденЗастрахованнымЛицом;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	
	Элементы.ЧислитсяУНесколькихСтрахователей.Видимость = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР Или ЭтоОтпускПоУходу;
	Если Элементы.ЧислитсяУНесколькихСтрахователей.Видимость Тогда
		Если Объект.ЧислитсяУНесколькихСтрахователей Тогда
			Массив.Добавить(НСтр("ru = 'Числится у нескольких страхователей';
								|en = 'Registered with multiple insurants'"));
		Иначе
			Массив.Добавить(НСтр("ru = 'Числится у одного страхователя';
								|en = 'Registered with one insurant'"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СоставСтрахователейЗаДваГода.Видимость = ЭтоОбычныйБольничный 
		Или ЭтоБольничныйПоБиР Или (Особенности.Версия_2_36 И ЭтоОтпускПоУходу);
	Если Элементы.СоставСтрахователейЗаДваГода.Видимость
		И ЗначениеЗаполнено(Объект.СоставСтрахователейЗаДваГода) Тогда
		Массив.Добавить(Строка(Объект.СоставСтрахователейЗаДваГода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.МетодНазначенияИВыплатыПособия) Тогда
		ПредставлениеЗначения = Строка(Объект.МетодНазначенияИВыплатыПособия);
		Массив.Добавить(НСтр("ru = 'Назначить пособие';
							|en = 'Grant allowance'") + " " + НРег(ПредставлениеЗначения));
	КонецЕсли;
	
	Элементы.ВыборПодтвержденЗастрахованнымЛицом.Видимость = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР Или ЭтоОтпускПоУходу;
	Если Элементы.ВыборПодтвержденЗастрахованнымЛицом.Видимость Тогда
		Если Объект.ВыборПодтвержденЗастрахованнымЛицом Тогда
			Массив.Добавить(НСтр("ru = 'Выбор подтвержден застрахованным лицом';
								|en = 'Choice is confirmed by insured person'"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДоговорГПХОблагаетсяВзносамиНС.Видимость = ЭтоНСПЗ И Особенности.Версия_2_36;
	
	Представление = СтрСоединить(Массив, "; ");
КонецПроцедуры

#КонецОбласти

#Область Ребенок

&НаСервере
Процедура ОбновитьЭлементыГруппыОтпускПоУходу(Видимость, Представление)
	Видимость = ЭтоБольничныйПоБиР Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоБольничныйПоБиР Тогда
		Элементы.ОтпускПоУходуГруппа.Заголовок = НСтр("ru = 'Отпуск по беременности и родам';
														|en = 'Maternity leave'");
	Иначе
		Элементы.ОтпускПоУходуГруппа.Заголовок = НСтр("ru = 'Отпуск по уходу за ребенком';
														|en = 'Child care leave'");
	КонецЕсли;
	Представление = ПредставлениеОтпускаПоУходу();
КонецПроцедуры

&НаСервере
Функция ПредставлениеОтпускаПоУходу()
	Представления = Новый Массив;
	
	НомерДата = ПредставлениеНомераИДаты(Объект.ОтпускПоУходуНомер, Объект.ОтпускПоУходуДата);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НомерДата);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаНачала)
		И ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаОкончания) Тогда
		Представления.Добавить(ОбщегоНазначенияБЗК.НаименованиеПериода(
			Объект.ОтпускПоУходуДатаНачала,
			Объект.ОтпускПоУходуДатаОкончания));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыЗаменаПослеродовогоОтпуска(Видимость, Представление)
	Видимость = ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.ЗаменаПослеродовогоОтпускаНомер, Объект.ЗаменаПослеродовогоОтпускаДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыДокументОРождении(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представления = Новый Массив;
	
	// Свидетельство о рождении.
	ОдноПолеСерияНомер = ЭтоПособиеПриРождении И ЗначениеЗаполнено(Объект.СвидетельствоОРожденииСерияНомер);
	Элементы.СвидетельствоОРожденииСерияНомер.Видимость = ОдноПолеСерияНомер;
	Элементы.СвидетельствоОРожденииСерия.Видимость      = Не ОдноПолеСерияНомер;
	Элементы.СвидетельствоОРожденииНомер.Видимость      = Не ОдноПолеСерияНомер;
	Если ОдноПолеСерияНомер Тогда
		СерияНомер = Объект.СвидетельствоОРожденииСерияНомер;
	Иначе
		СерияНомер = СокрЛП(Объект.СвидетельствоОРожденииСерия + " " + Объект.СвидетельствоОРожденииНомер);
	КонецЕсли;
	НомерДата = ПредставлениеНомераИДаты(СерияНомер, Объект.СвидетельствоОРожденииДатаВыдачи);
	Если НомерДата <> "" Тогда
		Текст = Элементы.СвидетельствоОРожденииЗаголовок.Заголовок;
		Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	// Справка о рождении.
	Элементы.СправкаОРожденииГруппа.Видимость = ЭтоПособиеПриРождении;
	Если Элементы.СправкаОРожденииГруппа.Видимость Тогда
		НомерДата = ПредставлениеНомераИДаты(Объект.СправкаОРожденииНомер, Объект.СправкаОРожденииДатаВыдачи);
		Если НомерДата <> "" Тогда
			Текст = Элементы.СправкаОРожденииЗаголовок.Заголовок;
			Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
			Представления.Добавить(НомерДата);
			Если ЗначениеЗаполнено(Объект.СправкаОРожденииФорма) Тогда
				Представления.Добавить(Объект.СправкаОРожденииФорма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Иной документ.
	ОдноПолеСерияНомер = ЭтоПособиеПриРождении
		И ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерияНомер)
		И Не ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерия)
		И Не ЗначениеЗаполнено(Объект.ИнойДокументОРожденииНомер);
	Элементы.ИнойДокументОРожденииСерияНомер.Видимость = ОдноПолеСерияНомер;
	Элементы.ИнойДокументОРожденииСерия.Видимость      = Не ОдноПолеСерияНомер;
	Элементы.ИнойДокументОРожденииНомер.Видимость      = Не ОдноПолеСерияНомер;
	Если ОдноПолеСерияНомер Тогда
		СерияНомер = Объект.ИнойДокументОРожденииСерияНомер;
	Иначе
		СерияНомер = СокрЛП(Объект.ИнойДокументОРожденииСерия + " " + Объект.ИнойДокументОРожденииНомер);
	КонецЕсли;
	НомерДата = ПредставлениеНомераИДаты(СерияНомер, Объект.ИнойДокументОРожденииДатаВыдачи);
	Если НомерДата <> "" Тогда
		Текст = Элементы.ИнойДокументОРожденииЗаголовок.Заголовок;
		Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	// Актовая запись ЗАГС.
	НомерДата = ПредставлениеНомераИДаты(Объект.АктоваяЗаписьОРожденииНомер, Объект.АктоваяЗаписьОРожденииДата);
	Если НомерДата <> "" Тогда
		Текст = Элементы.АктоваяЗаписьОРожденииЗаголовок.Заголовок;
		Представления.Добавить(Лев(Текст, СтрДлина(Текст) - 1));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	Представление = СтрСоединить(Представления, " ");
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыРебенок(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РебенокОчередностьГруппа.Видимость = ЭтоОтпускПоУходу;
	Элементы.НаличиеДокументовНаПредыдущихДетейГруппа.Видимость = Объект.РебенокОчередность > 1;
	Элементы.УходЗаНесколькимиДетьмиГруппа.Видимость = ЭтоОтпускПоУходу;
	Элементы.НаличиеРешенияСудаОЛишенииПрав.Видимость = ЭтоОтпускПоУходу;
	Элементы.СреднемесячныйЗаработок.Видимость = Объект.УходЗаНесколькимиДетьми;
	
	Представление = ПредставлениеГруппыРебенок();
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыРебенок()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.РебенокФамилия + " " + Объект.РебенокИмя + " " + Объект.РебенокОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения';
									|en = 'Date of birth'") + " " + Формат(Объект.РебенокДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1';
												|en = 'SNILS: %1'"), Объект.РебенокСНИЛС));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокКодСвязи) Тогда
		ЭлементСписка = Элементы.РебенокКодСвязи.СписокВыбора.НайтиПоЗначению(Объект.РебенокКодСвязи);
		Если ЭлементСписка = Неопределено Тогда
			Представление = Объект.РебенокКодСвязи;
		Иначе
			Представление = ЭлементСписка.Представление;
		КонецЕсли;
		Представления.Добавить(СтрШаблон(НСтр("ru = 'код связи: %1';
												|en = 'relationship code: %1'"), Представление));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыГруппыСправкаОтДругогоРодителя(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.СправкаОтДругогоРодителяНомер, Объект.СправкаОтДругогоРодителяДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыУсыновлениеОпека(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении Или ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Если Объект.УсыновлениеОпекаТип = "1" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении';
														|en = 'Adoption order'");
	ИначеЕсли Объект.УсыновлениеОпекаТип = "2" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об установлении опеки над ребенком';
														|en = 'Decision on child custody establishment'");
	Иначе
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении / опеке';
														|en = 'Adoption order / custody decision'");
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.УсыновлениеОпекаНомер, Объект.УсыновлениеОпекаДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыПередачаНаВоспитание(Видимость, Представление)
	Видимость = ЭтоПособиеПриРождении;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеНомераИДаты(Объект.ПередачаНаВоспитаниеНомер, Объект.ПередачаНаВоспитаниеДата);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСправкаОНеполученииПособия(Видимость, Представление)
	Видимость = ЭтоОтпускПоУходу;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представление = ПредставлениеГруппыСправкаОНеполученииПособия();
	
	Элементы.СправкаОНеполученииПособияОтМатериГруппа.Видимость = (
		ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтМатериНомер)
		Или ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтМатериДатаВыдачи)
		Или Объект.РебенокКодСвязи <> "38"); // 38 - мать.
	Элементы.СправкаОНеполученииПособияОтОтцаГруппа.Видимость = (
		ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтОтцаНомер)
		Или ЗначениеЗаполнено(Объект.СправкаОНеполученииПособияОтОтцаДатаВыдачи)
		Или Объект.РебенокКодСвязи <> "39"); // 39 - отец.
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыСправкаОНеполученииПособия()
	Представления = Новый Массив;
	
	НомерДата = ПредставлениеНомераИДаты(
		Объект.СправкаОНеполученииПособияОтМатериНомер,
		Объект.СправкаОНеполученииПособияОтМатериДатаВыдачи);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НСтр("ru = 'От матери:';
									|en = 'From mother:'"));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	НомерДата = ПредставлениеНомераИДаты(
		Объект.СправкаОНеполученииПособияОтОтцаНомер,
		Объект.СправкаОНеполученииПособияОтОтцаДатаВыдачи);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НСтр("ru = 'От отца:';
									|en = 'From father:'"));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	НомерДата = ПредставлениеНомераИДаты(
		Объект.СправкаОНеполученииПособияПоДругомуМестуРаботыНомер,
		Объект.СправкаОНеполученииПособияПоДругомуМестуРаботыДатаВыдачи);
	Если НомерДата <> "" Тогда
		Представления.Добавить(НСтр("ru = 'По другому месту работы:';
									|en = 'At another place of employment:'"));
		Представления.Добавить(НомерДата);
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

#КонецОбласти

#Область ИсключаемыеПериоды

&НаСервере
Функция ПредставлениеИсключаемыхПериодов()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ИсключаемыеПериоды Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.КодПричины) Тогда
			Представление = Представление + " (" + Строка(Период.КодПричины) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ПериодыПростоя

&НаСервере
Функция ПредставлениеПериодовПростоя()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ПериодыПростоя Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.СреднийЗаработок) Тогда
			Представление = Представление + " (" + Строка(Период.СреднийЗаработок) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ПриостановленияТрудовыхДоговоров

&НаСервере
Функция ПредставлениеПриостановленийТрудовыхДоговоров()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ПриостановленияТрудовыхДоговоров Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Представление = Представление + " - " + Строка(Период.ОснованиеНПА);
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область СпособВыплаты

&НаСервере
Процедура ОбновитьЭлементыГруппыСпособВыплаты(Видимость, Представление, Развернута)
	СпособВыплаты = Объект.СпособВыплатыПособия;
	// Список выбора.
	СЭДОФСС.СписокВыбораСпособовВыплаты(Элементы.СпособВыплатыПособия.СписокВыбора, СпособВыплаты);
	// Страница способа выплаты.
	Если СпособВыплаты = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьНаКартуМИР);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьЧерезБанк);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьПочтовымПереводом);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьИнаяОрганизация);
	Иначе
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Неопределено);
	КонецЕсли;
	Если Развернута Тогда
		Если СпособВыплаты = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
			// Результат проверки номера счета.
			РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(
				Объект.НомерСчета,
				Объект.БанкБИК,
				Объект.БанкКоррСчет);
			Элементы.РезультатПроверкиНомераСчета.Заголовок = РезультатПроверки.Пояснение;
			Если РезультатПроверки.Успех Тогда
				Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаУспешнойОперацииБЗК;
			Иначе
				Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаПредупрежденияБЗК;
			КонецЕсли;
		ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
			ЕстьРегномерСФР = ЗначениеЗаполнено(Объект.ИнаяОрганизацияРегистрационныйНомер);
			ЕстьРегномерФСС = ЗначениеЗаполнено(Объект.ИнаяОрганизацияРегистрационныйНомерСФР);
			Элементы.ИнаяОрганизацияРегистрационныйНомер.Видимость    = ЕстьРегномерФСС Или Не ЕстьРегномерСФР Или ВозможностьРедактирования;
			Элементы.ИнаяОрганизацияРегистрационныйНомерСФР.Видимость = ЕстьРегномерСФР Или Не ЕстьРегномерФСС Или ВозможностьРедактирования;
		КонецЕсли;
	Иначе
		Если Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
			Представление = ПредставлениеАдреса("АдресПроживания", Ложь);
		Иначе
			Представление = СЭДОФСС.ПредставлениеСпособаВыплаты(Объект);
		КонецЕсли;
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ИзвещениеФСС

&НаСервере
Процедура ОбновитьЭлементыГруппыИзвещениеФСС(Видимость, Представление)
	Представление = ПредставлениеНомераИДаты(Объект.ИзвещениеФССНомер, Объект.ИзвещениеФССДата);
КонецПроцедуры

#КонецОбласти

#Область ДокументыНСПЗ

&НаСервере
Процедура ОбновитьЭлементыГруппыДокументыНСПЗ(Видимость, Представление)
	Видимость = (ЭтоОбычныйБольничный Или ЭтоНСПЗ);
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	Представления = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ПризнаниеСлучаяСтраховым) Тогда
		ПредставлениеЗначения = Строка(Объект.ПризнаниеСлучаяСтраховым);
		Представления.Добавить(НСтр("ru = 'Страховой случай';
									|en = 'Insured event'"));
		Представления.Добавить(НРег(Лев(ПредставлениеЗначения, 1)) + Сред(ПредставлениеЗначения, 2));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АктН1ДатаВыдачи) Или ЗначениеЗаполнено(Объект.АктН1Номер) Тогда
		Представления.Добавить(НСтр("ru = 'Акт формы Н-1';
									|en = 'Certificate N-1'"));
		Представления.Добавить(ПредставлениеНомераИДаты(Объект.АктН1Номер, Объект.АктН1ДатаВыдачи));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АктПЗДатаВыдачи) Тогда
		Представления.Добавить(Элементы.АктПЗДатаВыдачи.Заголовок);
		Представления.Добавить(Формат(Объект.АктПЗДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АктВПроизвольнойФормеДатаВыдачи) Или ЗначениеЗаполнено(Объект.АктВПроизвольнойФормеНомер) Тогда
		Представления.Добавить(НСтр("ru = 'Акт в произвольной форме';
									|en = 'Certificate in an arbitrary form'"));
		Представления.Добавить(ПредставлениеНомераИДаты(Объект.АктВПроизвольнойФормеНомер, Объект.АктВПроизвольнойФормеДатаВыдачи));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РешениеСудаДатаВыдачи) Или ЗначениеЗаполнено(Объект.РешениеСудаНомер) Тогда
		Представления.Добавить(НСтр("ru = 'Решение суда';
									|en = 'Court decision'"));
		Представления.Добавить(ПредставлениеНомераИДаты(Объект.РешениеСудаНомер, Объект.РешениеСудаДатаВыдачи));
	КонецЕсли;
	УстановленаУтратаТрудоспобности = (Объект.УтратаТрудоспобности
		= Элементы.УтратаТрудоспобности.СписокВыбора[0].Значение);
	УтратаТрудоспобностиВидимость = ЭтоОбычныйБольничный Или ЭтоНСПЗ Или ЗначениеЗаполнено(Объект.УтратаТрудоспобности);
	Элементы.УстановленаУтратаТрудоспобности.Видимость = УтратаТрудоспобностиВидимость;
	Если УтратаТрудоспобностиВидимость И ЗначениеЗаполнено(Объект.УтратаТрудоспобности) Тогда
		ЭлементСписка = Элементы.УтратаТрудоспобности.СписокВыбора.НайтиПоЗначению(Объект.УтратаТрудоспобности);
		Если ЭлементСписка = Неопределено Тогда
			Представления.Добавить(НСтр("ru = 'Утрата проф. трудоспобности';
										|en = 'Occupational disability'"));
			Представления.Добавить(Объект.УтратаТрудоспобности);
			Элементы.УтратаТрудоспобности.Видимость = Истина;
			Элементы.УтратаТрудоспобности.РежимВыбораИзСписка = Ложь;
		Иначе
			Представления.Добавить(ЭлементСписка.Представление);
		КонецЕсли;
	КонецЕсли;
	Представление = СтрСоединить(Представления, " ");
КонецПроцедуры

#КонецОбласти

#Область Перерасчет

&НаКлиенте
Процедура ПерерасчетПриИзменении(Элемент)
	Элементы.ПерерасчетИдентификаторСтрокиРеестра.Видимость = Объект.Перерасчет;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ПредставлениеПерерасчета()
	Элементы.ПерерасчетИдентификаторСтрокиРеестра.Видимость = Объект.Перерасчет;
	Если Не Объект.Перерасчет Тогда
		Возврат "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПерерасчетИдентификаторСтрокиРеестра) Тогда
		Возврат НСтр("ru = 'Да, но не заполнен идентификатор строки реестра';
					|en = 'Yes, but the registry line ID is not filled'");
	КонецЕсли;
	МассивСтрок = СтрРазделить(Объект.ПерерасчетИдентификаторСтрокиРеестра, "_:", Ложь);
	Если МассивСтрок.Количество() >= 7 Тогда
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
		Год          = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[2]);
		Месяц        = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[3]);
		День         = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[4]);
		НомерРеестра = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[5]);
		НомерСтроки  = ОписаниеТиповЧисло.ПривестиЗначение(МассивСтрок[6]);
		Если Год > 2000 И Месяц > 0 И День > 0 И НомерРеестра > 0 И НомерСтроки > 0 Тогда
			Возврат СтрШаблон(
				НСтр("ru = 'Да, по реестру от %1 № %2, строка № %3';
					|en = 'Yes, according to registry No. %2 dated %1, line #%3'"),
				Формат(Дата(Год, Месяц, День), "ДЛФ=D"),
				Формат(НомерРеестра, "ЧГ="),
				Формат(НомерСтроки, "ЧГ="));
		КонецЕсли;
	КонецЕсли;
	Возврат СтрШаблон(
		НСтр("ru = 'Да, по идентификатору строки реестра %1';
			|en = 'Yes, by registry line ID %1'"),
		Объект.ПерерасчетИдентификаторСтрокиРеестра);
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницу(Страницы, ТекущаяСтраница)
	Для Каждого Страница Из Страницы.ПодчиненныеЭлементы Цикл
		Страница.Видимость = (Страница = ТекущаяСтраница);
	КонецЦикла;
	Если ТекущаяСтраница <> Неопределено Тогда
		Страницы.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНомераИДаты(Номер, Дата)
	Если ЗначениеЗаполнено(Номер) Или ЗначениеЗаполнено(Дата) Тогда
		Возврат СтрШаблон(НСтр("ru = '№ %1 от %2';
								|en = 'No. %1 from %2'"), Номер, Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	Возврат "";
КонецФункции

#КонецОбласти

#Область Команды

&НаСервере
Процедура ВключитьВозможностьРедактированияНаСервере()
	ВозможностьРедактирования = Истина;
	Элементы.СведенияВЗапросеГруппа.ТолькоПросмотр = Ложь;
	Элементы.СлужебныеПоляГруппа.ТолькоПросмотр = Ложь;
	Элементы.Страхователь.ТолькоПросмотр = Ложь;
	Элементы.Дата.ТолькоПросмотр = Ложь;
	Элементы.Номер.ТолькоПросмотр = Ложь;
	Элементы.ВидПособия.ТолькоПросмотр = Ложь;
	Элементы.ВходящийСрокОтвета.ТолькоПросмотр = Ложь;
	Элементы.ВерсияСпецификации.ТолькоПросмотр = Ложь;
	Элементы.ИсключаемыеПериоды.ИзменятьСоставСтрок      = Истина;
	Элементы.ИсключаемыеПериоды.ИзменятьПорядокСтрок     = Истина;
	Элементы.ИсключаемыеПериоды.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	Элементы.ПериодыПростоя.ИзменятьСоставСтрок      = Истина;
	Элементы.ПериодыПростоя.ИзменятьПорядокСтрок     = Истина;
	Элементы.ПериодыПростоя.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	ОбновитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Вложения = Новый Массив;
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

#Область Поддержка

&НаСервере
Процедура ЗаполнитьСвязанныеДокументы()
	
	ВидУведомления = "";
	УведомлениеОбИзменении = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УведомлениеОбИзмененииРасчетаПособия.Ссылка КАК УведомлениеОбИзменении,
		|	УведомлениеОбИзмененииРасчетаПособия.ВидУведомления КАК ВидУведомления
		|ИЗ
		|	Документ.УведомлениеОбИзмененииРасчетаПособия КАК УведомлениеОбИзмененииРасчетаПособия
		|ГДЕ
		|	НЕ УведомлениеОбИзмененииРасчетаПособия.ПометкаУдаления
		|	И УведомлениеОбИзмененииРасчетаПособия.ВходящийЗапрос = &ВходящийЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	УведомлениеОбИзмененииРасчетаПособия.ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("ВходящийЗапрос", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		УведомлениеОбИзменении = Выборка.УведомлениеОбИзменении;
		ВидУведомления = Перечисления.ВидыУведомленийОбИзмененииРасчетаПособия.ОписаниеВидаУведомления(Выборка.ВидУведомления);
	КонецЕсли;
	
	Элементы.ГруппаИнформирование.Видимость = ЗначениеЗаполнено(УведомлениеОбИзменении);
	Элементы.ВидУведомления.Заголовок = ВидУведомления;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
