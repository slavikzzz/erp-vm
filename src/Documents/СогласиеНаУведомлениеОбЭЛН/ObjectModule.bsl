///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	// Очистка второстепенных реквизитов шапки.
	НаименованиеСтрахователя = Неопределено;
	ЮридическийАдресСтрахователя = Неопределено;
	ФИООтветственногоЗаОбработкуПерсональныхДанных = Неопределено;
	ФИОСотрудника = Неопределено;
	АдресСотрудника = Неопределено;
	ПаспортСотрудника = Неопределено;
	Ответственный = Неопределено;
	Комментарий = Неопределено;
	ДатаСоздания = Неопределено;
	ФизическоеЛицо = Неопределено;
	Страхователь = Неопределено;
	ФиксацияИзменений.Очистить();
	
	// Заполнение ключевых реквизитов шапки.
	Организация = ОбъектКопирования.Организация;
	Сотрудник = ОбъектКопирования.Сотрудник;
	ОтветственныйЗаОбработкуПерсональныхДанных = ОбъектКопирования.ОтветственныйЗаОбработкуПерсональныхДанных;
КонецПроцедуры

Процедура ОбработкаЗаполнения(СсылкаОснования, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(СсылкаОснования) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаОснования, "Организация, Сотрудник");
		Организация = РеквизитыОснования.Организация;
		Сотрудник   = РеквизитыОснования.Сотрудник;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Проверка что сотрудник не уволен на момент согласия.
	КадровыеДанные = КадровыеДанныеСотрудника(Сотрудник, "ДатаУвольнения, ПриказОбУвольнении", Дата);
	Если КадровыеДанные <> Неопределено
		И ЗначениеЗаполнено(КадровыеДанные.ДатаУвольнения)
		И НачалоДня(КадровыеДанные.ДатаУвольнения) < НачалоДня(Дата) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно оформить согласие (%1) после увольнения сотрудника (%2).';
				|en = 'Cannot register the consent (%1) after dismissal of employee (%2).'"),
			Формат(Дата, "ДЛФ=D"),
			Формат(КадровыеДанные.ДатаУвольнения, "ДЛФ=D"));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "Дата");
	КонецЕсли;
	
	// Проверка что на дату нет других действующих согласий.
	ФизическоеЛицо = СЭДОФССРасширенный.ФизическоеЛицоСотрудника(Сотрудник);
	СогласиеИОтзыв = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ПолучитьПаруСогласиеИОтзывНаДату(
		Страхователь,
		ФизическоеЛицо,
		Дата,
		Ссылка);
	Если СогласиеИОтзыв <> Неопределено 
		И ЗначениеЗаполнено(СогласиеИОтзыв.Согласие)
		И СогласиеИОтзыв.Согласие <> Ссылка
		И (Не ЗначениеЗаполнено(СогласиеИОтзыв.Отзыв) Или НачалоДня(СогласиеИОтзыв.ДатаОтзыва) > НачалоДня(Дата)) Тогда
		ТекстОшибки = НСтр("ru = 'На %1 уже есть действующее согласие от %2';
							|en = 'There already is and effective consent from %2 as of %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Формат(Дата, "ДЛФ=D"), Формат(СогласиеИОтзыв.ДатаСогласия, "ДЛФ=D"));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, ТекстОшибки, "Дата");
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("КритичныеПроверкиЗаполненияВыполнены") Тогда
		Ошибки = КритичныеОшибкиЗаполнения();
		Для Каждого Ошибка Из Ошибки Цикл
			Отказ = Истина;
			Ошибка.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИОСотрудника) Тогда
		Наименование = СтрШаблон(
			НСтр("ru = 'Согласие %1 на уведомление об ЭЛН от %2';
				|en = 'Consent %1 to ESLR notification from %2'"),
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				ФИОСотрудника,
				2),
			Формат(Дата, "ДЛФ=D"));
	Иначе
		Наименование = СтрШаблон(
			НСтр("ru = 'Согласие на уведомление об ЭЛН от %1';
				|en = 'Consent to ESLR notification from %1'"),
			Формат(Дата, "ДЛФ=D"))
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("КритичныеПроверкиЗаполненияВыполнены") Тогда
		Ошибки = КритичныеОшибкиЗаполнения();
		Если Ошибки.Количество() > 0 Тогда
			ТекстыОшибок = Новый Массив;
			Для Каждого Ошибка Из Ошибки Цикл
				ТекстыОшибок.Добавить(Ошибка.Текст);
			КонецЦикла;
			ВызватьИсключение СтрСоединить(ТекстыОшибок, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата(); // АПК:143 Для фильтрации событий в журнале регистрации требуется дата сервера.
	КонецЕсли;
	
	Реквизиты = Реквизиты();
	ЗначенияРеквизитовДоЗаписи = ЗначенияРеквизитовДоЗаписи(Реквизиты);
	
	Если ЗначенияРеквизитовДоЗаписи = Неопределено
		Или ЗначенияРеквизитовДоЗаписи.Сотрудник <> Сотрудник Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
		Иначе
			ФизическоеЛицо = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеИзменений = ПредставлениеИзменений(РежимЗаписи, Реквизиты, ЗначенияРеквизитовДоЗаписи);
	
	ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи);
	ДополнительныеСвойства.Вставить("ПредставлениеИзменений", ПредставлениеИзменений);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		ЗаписьЖурналаРегистрации(
			СЭДОФССРасширенный.ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Примечание,
			Сотрудник.Метаданные(),
			Сотрудник,
			НСтр("ru = 'Состав изменений не вычислен, поскольку документ был записан в режиме отключения бизнес-логики. Вероятно, он был изменен в другой информационной базе.';
				|en = 'The composition of the changes has not been calculated because the document was saved with business logic disabled. It was probably changed in another infobase.'"),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СогласияНаУведомленияОбЭЛН.Обновить(Страхователь, Сотрудник);
	
	ДоЗаписи = ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	Если ДоЗаписи <> Неопределено
		И (ДоЗаписи.Сотрудник <> Сотрудник Или ДоЗаписи.Страхователь <> Страхователь) Тогда
		РегистрыСведений.СогласияНаУведомленияОбЭЛН.Обновить(ДоЗаписи.Страхователь, ДоЗаписи.Сотрудник);
	КонецЕсли;
	
	ПредставлениеИзменений = ДополнительныеСвойства.ПредставлениеИзменений;
	Если ПредставлениеИзменений <> "" Тогда
		ЗаписьЖурналаРегистрации(
			СЭДОФССРасширенный.ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Информация,
			Сотрудник.Метаданные(),
			Сотрудник,
			ПредставлениеИзменений,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Реквизиты()
	Если ЭтоНовый() Тогда
		Возврат Неопределено;
	КонецЕсли;
	МетаданныеРеквизитов = Метаданные().Реквизиты;
	ИменаРеквизитов = Новый Массив;
	Для Каждого РеквизитМетаданных Из МетаданныеРеквизитов Цикл
		ИменаРеквизитов.Добавить(РеквизитМетаданных.Имя);
	КонецЦикла;
	Возврат Новый Структура("Имена, Метаданные", ИменаРеквизитов, МетаданныеРеквизитов);
КонецФункции

Функция ЗначенияРеквизитовДоЗаписи(Реквизиты)
	Если ЭтоНовый() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИменаРеквизитовСтрокой = СтрСоединить(Реквизиты.Имена, ",") + ",Дата,Проведен,ПометкаУдаления";
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитовСтрокой);
КонецФункции

Функция ПредставлениеИзменений(РежимЗаписи, Реквизиты, ЗначенияРеквизитовДоЗаписи)
	Если ЭтоНовый() Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Возврат НСтр("ru = 'Сотрудник подписал согласие (документ создан и проведен).';
						|en = 'The employee signed the consent (the document was created and posted).'");
		Иначе
			Возврат НСтр("ru = 'Создано согласие.';
						|en = 'Consent created.'");
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеИзменений = "";
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		БудетПроведен = Истина;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		БудетПроведен = Ложь;
	Иначе
		БудетПроведен = Проведен;
	КонецЕсли;
	Если БудетПроведен <> ЗначенияРеквизитовДоЗаписи.Проведен Тогда
		Если БудетПроведен Тогда
			ДобавитьТекст(ПредставлениеИзменений, НСтр("ru = 'Сотрудник подписал согласие, документ проведен';
														|en = 'The employee signed the consent, the document was posted'"));
		Иначе
			ДобавитьТекст(ПредставлениеИзменений, НСтр("ru = 'Отменено проведение документа';
														|en = 'Document posting canceled'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ПометкаУдаления <> ЗначенияРеквизитовДоЗаписи.ПометкаУдаления Тогда
		Если ПометкаУдаления Тогда
			ДобавитьТекст(ПредставлениеИзменений, НСтр("ru = 'Установлена пометка удаления';
														|en = 'Deletion mark is set'"));
		Иначе
			ДобавитьТекст(ПредставлениеИзменений, НСтр("ru = 'Снята пометка удаления';
														|en = 'Deletion mark cleared'"));
		КонецЕсли;
	КонецЕсли;
	
	ИзмененныеРеквизитыПодробно = Новый Массив;
	Для Каждого ИмяРеквизита Из Реквизиты.Имена Цикл
		Если ЭтотОбъект[ИмяРеквизита] <> ЗначенияРеквизитовДоЗаписи[ИмяРеквизита] Тогда
			ИзмененныеРеквизитыПодробно.Добавить(СтрШаблон(
				НСтр("ru = '%1 (было %2, стало %3)';
					|en = '%1 (previous value %2, new value %3)'"),
				Реквизиты.Метаданные[ИмяРеквизита].Представление(),
				ЗначениеВСтрокуСКавычками(ЗначенияРеквизитовДоЗаписи[ИмяРеквизита]),
				ЗначениеВСтрокуСКавычками(ЭтотОбъект[ИмяРеквизита])));
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененныеРеквизитыПодробно.Количество() > 0 Тогда
		Если ПредставлениеИзменений = "" Тогда
			ПредставлениеИзменений = НСтр("ru = 'Изменены реквизиты:';
											|en = 'Attributes modified:'");
		Иначе
			ПредставлениеИзменений = ПредставлениеИзменений + ", " + НСтр("ru = 'а также изменены реквизиты:';
																			|en = 'and the following attributes were modified:'");
		КонецЕсли;
		Разделитель = Символы.ПС + "  • ";
		ПредставлениеИзменений = ПредставлениеИзменений + Разделитель + СтрСоединить(ИзмененныеРеквизитыПодробно, ";" + Разделитель) + ".";
	ИначеЕсли ПредставлениеИзменений <> "" Тогда
		ПредставлениеИзменений = ПредставлениеИзменений + ".";
	КонецЕсли;
	
	Возврат ПредставлениеИзменений;
КонецФункции

Процедура ДобавитьТекст(Текст, ДобавляемыйТекст, Разделитель = ", ")
	Если Текст = "" Тогда
		Текст = ДобавляемыйТекст;
	Иначе
		Текст = Текст + Разделитель + ДобавляемыйТекст;
	КонецЕсли;
КонецПроцедуры

Функция ЗначениеВСтрокуСКавычками(Значение)
	Возврат ?(ЗначениеЗаполнено(Значение), """" + Значение + """", НСтр("ru = 'не заполнено';
																		|en = 'is missing'"));
КонецФункции

Функция КадровыеДанныеСотрудника(СсылкаСотрудника, КадровыеДанныеЧерезЗапятую, ДатаПолученияДанных)
	Если Не ЗначениеЗаполнено(СсылкаСотрудника) Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(СсылкаСотрудника);
	ТаблицаЗначений = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, КадровыеДанныеЧерезЗапятую, ДатаПолученияДанных);
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ТаблицаЗначений[0];
КонецФункции

Функция КритичныеОшибкиЗаполнения() Экспорт
	Ошибки = Новый Массив;
	
	Если Не ПометкаУдаления Тогда
		ДругоеСогласиеНаДату = Документы.СогласиеНаУведомлениеОбЭЛН.ДругоеСогласиеНаДату(Дата, Ссылка, Сотрудник);
		Если ЗначениеЗаполнено(ДругоеСогласиеНаДату) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'На %1 уже создано %2.';
											|en = 'The %2 has already been created as of %1.'"), Формат(Дата, "ДЛФ=D"), ДругоеСогласиеНаДату);
			Сообщение.Поле  = "Дата";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Ошибки.Добавить(Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КритичныеПроверкиЗаполненияВыполнены", Истина);
	
	Возврат Ошибки;
КонецФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.СогласиеНаУведомлениеОбЭЛН.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Если ОбновитьДанныеОрганизации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеСтрахователя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеОтветственногоЗаОбработкуПерсональныхДанных(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеСотрудника(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Возврат Проведен;
КонецФункции

Функция ОбновитьДанныеОрганизации(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура("Страхователь");
	РеквизитыДокумента.Страхователь = СЭДОФСС.СтраховательОрганизации(Организация);
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеСтрахователя(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура("НаименованиеСтрахователя, ЮридическийАдресСтрахователя");
	
	Если ЗначениеЗаполнено(Страхователь) Тогда
		// АПК:277-выкл Получение сведений об организации
		//   средствами подсистемы Защита персональных данных.
		ДанныеОрганизации = ЗащитаПерсональныхДанных.ОписаниеДанныхОрганизации();
		ЗащитаПерсональныхДанныхПереопределяемый.ДополнитьДанныеОрганизацииОператораПерсональныхДанных(Страхователь, ДанныеОрганизации, Дата);
		// АПК:277-вкл
		РеквизитыДокумента.НаименованиеСтрахователя     = ДанныеОрганизации.НаименованиеОрганизации;
		РеквизитыДокумента.ЮридическийАдресСтрахователя = ДанныеОрганизации.АдресОрганизации;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеОтветственногоЗаОбработкуПерсональныхДанных(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура("ФИООтветственногоЗаОбработкуПерсональныхДанных");
	
	Если ЗначениеЗаполнено(ОтветственныйЗаОбработкуПерсональныхДанных) Тогда
		// АПК:277-выкл Получение ФИО ответственного за обработку персональных данных
		//   средствами подсистемы Защита персональных данных.
		ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьФИОФизическогоЛица(
			ОтветственныйЗаОбработкуПерсональныхДанных,
			РеквизитыДокумента.ФИООтветственногоЗаОбработкуПерсональныхДанных);
		// АПК:277-вкл
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеСотрудника(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура("ФИОСотрудника, АдресСотрудника, ПаспортСотрудника");
	ФизическоеЛицо = Неопределено; // Заполняется безусловно, т.к. определяет права.
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		НеобходимыеКадровыеДанныеСотрудника = Новый Массив;
		НеобходимыеКадровыеДанныеСотрудника.Добавить("ФИОПолные");
		НеобходимыеКадровыеДанныеСотрудника.Добавить("АдресПоПропискеПредставление");
		НеобходимыеКадровыеДанныеСотрудника.Добавить("ДокументПредставление");
		НеобходимыеКадровыеДанныеСотрудника.Добавить("ФизическоеЛицо");
		
		ТаблицаЗначений = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), НеобходимыеКадровыеДанныеСотрудника, Дата);
		Если ТаблицаЗначений.Количество() > 0 Тогда
			КадровыеДанныеСотрудника = ТаблицаЗначений[0];
			
			ФизическоеЛицо = КадровыеДанныеСотрудника.ФизическоеЛицо;
			РеквизитыДокумента.ФИОСотрудника     = КадровыеДанныеСотрудника.ФИОПолные;
			РеквизитыДокумента.АдресСотрудника   = КадровыеДанныеСотрудника.АдресПоПропискеПредставление;
			РеквизитыДокумента.ПаспортСотрудника = КадровыеДанныеСотрудника.ДокументПредставление;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли