///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Наименование");
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Данные.Наименование) Тогда
		СтандартнаяОбработка = Ложь;
		Представление = Данные.Наименование;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если СтрСравнить(ВидФормы, "ФормаОбъекта") = 0 Тогда
		Значения = ОбщегоНазначенияБЗК.ЗначенияСвойств(Параметры, "Ключ, Сотрудник");
		Если Не ЗначениеЗаполнено(Значения.Ключ) И ЗначениеЗаполнено(Значения.Сотрудник) Тогда
			ДругоеСогласие = ДругоеСогласиеНаДату(ТекущаяДатаСеанса(), Неопределено, Значения.Сотрудник);
			Если ЗначениеЗаполнено(ДругоеСогласие) Тогда
				Параметры.Вставить("Ключ", ДругоеСогласие);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = ИдентификаторКомандыПечатиСогласия();
	КомандаПечати.Представление = НСтр("ru = 'Согласие на уведомление об ЭЛН';
										|en = 'Consent to ESLR notification'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПриПечатиСогласия(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//  Параметры                  - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ОтзывСогласияНаОбработкуПерсональныхДанных.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
//  Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Страхователь)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОтбораПоОрганизации(Настройки);
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОбъектаСПрисоединеннымиФайлами(Настройки);
КонецПроцедуры

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты());
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// Реквизиты организации.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Организация";
	Шаблон.ИмяГруппы           = "Организация";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Страхователь");
	
	// Реквизиты страхователя.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Страхователь";
	Шаблон.ИмяГруппы           = "Страхователь";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеСтрахователя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ЮридическийАдресСтрахователя");
	
	// Ответственный за обработку персональных данных.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "ОтветственныйЗаОбработкуПерсональныхДанных";
	Шаблон.ИмяГруппы           = "ОтветственныйЗаОбработкуПерсональныхДанных";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФИООтветственногоЗаОбработкуПерсональныхДанных");
	
	// Субъект персональных данных.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Сотрудник";
	Шаблон.ИмяГруппы           = "КадровыеДанныеСотрудника";
	Шаблон.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФИОСотрудника");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "АдресСотрудника");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПаспортСотрудника");
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

Функция ИдентификаторКомандыПечатиСогласия()
	Возврат "СогласиеНаУведомлениеОбЭЛН";
КонецФункции

// Процедура печати согласия на обработку персональных данных.
//
Процедура ПриПечатиСогласия(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ИдентификаторКомандыПечатиСогласия());
	Если ПечатнаяФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_" + ИдентификаторКомандыПечатиСогласия();
	
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Согласие на уведомление об ЭЛН';
										|en = 'Consent to ESLR notification'");
	ПечатнаяФорма.ПолныйПутьКМакету = "Документ.СогласиеНаУведомлениеОбЭЛН.ПФ_MXL_СогласиеНаУведомлениеОбЭЛН";
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = Новый Соответствие;
	
	ИменаПараметровОбластей = УправлениеПечатьюБЗК.ИменаПараметровОбластейСтандартногоМакета(ПечатнаяФорма.ПолныйПутьКМакету);
	ИменаПараметров = ИменаПараметровОбластей.Документ;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету);
	Область = Макет.ПолучитьОбласть("Документ");
	
	Запрос = ЗапросПоСогласиям(МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НачалоТекущегоФрагмента = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Имя файла для сохранения печатной формы.
		ИмяФайла = Формат(Выборка.Дата, "ДФ=yyyy-MM-dd") + ", " + Выборка.Наименование;
		ПечатнаяФорма.ИмяФайлаПечатнойФормы.Вставить(Выборка.Ссылка, ИмяФайла);
		
		// Наполнение и вывод области печатной формы.
		ПараметрыОбласти = Новый Структура(ИменаПараметров);
		ЗаполнитьЗначенияСвойств(ПараметрыОбласти, Выборка);
		ПараметрыОбласти.Дата = Формат(Выборка.Дата, "ДЛФ=D");
		ПараметрыОбласти.НаименованиеСтрахователяВДательномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ПараметрыОбласти.НаименованиеСтрахователя,
			3);
		ПараметрыОбласти.ОтветственныйЗаОбработкуПерсональныхДанныхВРодительномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ПараметрыОбласти.ФИООтветственногоЗаОбработкуПерсональныхДанных,
			2);
		Область.Параметры.Заполнить(ПараметрыОбласти);
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НачалоТекущегоФрагмента, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает запрос для выборки значений реквизитов указанных документов.
//
// Параметры:
//    Согласия - Массив из ДокументСсылка.СогласиеНаУведомлениеОбЭЛН
//
// Возвращаемое значение:
//   Запрос - Запрос по согласиям
//
Функция ЗапросПоСогласиям(Согласия)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Согласия.Ссылка КАК Ссылка,
	|	Согласия.Дата КАК Дата,
	|	Согласия.Сотрудник КАК Сотрудник,
	|	Согласия.Наименование КАК Наименование,
	|	Согласия.Организация КАК Организация,
	|	Согласия.Страхователь КАК Страхователь,
	|	Согласия.НаименованиеСтрахователя КАК НаименованиеСтрахователя,
	|	Согласия.ЮридическийАдресСтрахователя КАК ЮридическийАдресСтрахователя,
	|	Согласия.ОтветственныйЗаОбработкуПерсональныхДанных КАК ОтветственныйЗаОбработкуПерсональныхДанных,
	|	Согласия.ФИООтветственногоЗаОбработкуПерсональныхДанных КАК ФИООтветственногоЗаОбработкуПерсональныхДанных,
	|	Согласия.ФИОСотрудника КАК ФИОСотрудника,
	|	Согласия.АдресСотрудника КАК АдресСотрудника,
	|	Согласия.ПаспортСотрудника КАК ПаспортСотрудника,
	|	Согласия.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.СогласиеНаУведомлениеОбЭЛН КАК Согласия
	|ГДЕ
	|	Согласия.Ссылка В(&Согласия)";
	Запрос.УстановитьПараметр("Согласия", Согласия);
	Возврат Запрос;
КонецФункции

Функция ДругоеСогласиеНаДату(ДатаСогласия, СсылкаСогласия, Сотрудник) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СогласиеНаУведомлениеОбЭЛН.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СогласиеНаУведомлениеОбЭЛН КАК СогласиеНаУведомлениеОбЭЛН
	|ГДЕ
	|	СогласиеНаУведомлениеОбЭЛН.Сотрудник = &Сотрудник
	|	И СогласиеНаУведомлениеОбЭЛН.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ СогласиеНаУведомлениеОбЭЛН.ПометкаУдаления
	|	И СогласиеНаУведомлениеОбЭЛН.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаСогласия));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаСогласия));
	Запрос.УстановитьПараметр("Ссылка", СсылкаСогласия);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура АдаптацияКУчетуВРазрезеСтрахователей(ПараметрыОбновления, ОбработкаЗавершена) Экспорт
	// АПК:1327-выкл
	// АПК:1328-выкл
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СогласиеНаУведомлениеОбЭЛН.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СогласиеНаУведомлениеОбЭЛН КАК СогласиеНаУведомлениеОбЭЛН
	|ГДЕ
	|	СогласиеНаУведомлениеОбЭЛН.Страхователь = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Пространство = "Документ.СогласиеНаУведомлениеОбЭЛН";
	Поле = "Ссылка";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления,
				Пространство,
				Поле,
				СтрокаТаблицы.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ДокументОбъект.Страхователь) Тогда
			ДокументОбъект.Страхователь = СЭДОФСС.СтраховательОрганизации(ДокументОбъект.Организация);
			ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитОбъекта(
				ДокументОбъект,
				"Страхователь");
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	// АПК:1327-вкл
	// АПК:1328-вкл
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли