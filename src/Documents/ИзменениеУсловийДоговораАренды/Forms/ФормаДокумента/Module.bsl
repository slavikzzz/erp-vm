#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("Автотест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	АдресГрафикиДоговора = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыВыбораСтатейИАналитик = Документы.ИзменениеУсловийДоговораАренды.ПараметрыВыбораСтатейИАналитик(
			УчетАрендованныхОС.СозданДляПереходаНаФСБУ25_2018(Объект.Дата, Объект.Организация));
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ПараметрыНастройкиСчетаУчета = Документы.ИзменениеУсловийДоговораАренды.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройкиСчетаУчета);
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыВыбораСтатейИАналитик = Документы.ИзменениеУсловийДоговораАренды.ПараметрыВыбораСтатейИАналитик(
				УчетАрендованныхОС.СозданДляПереходаНаФСБУ25_2018(ТекущийОбъект.Дата, ТекущийОбъект.Организация));
				
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	ПараметрыНастройки = Документы.ИзменениеУсловийДоговораАренды.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьСлужебныеРеквизитыТЧ();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ИзменениеУсловийДоговораАренды", ПараметрыЗаписи, Объект.Ссылка);
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналОС();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.ОС.ВыделенныеСтроки;
		ТребуемоеДействие
			= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.ОС.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ДанныеСтроки.ДействиеСПредметомАренды = ТребуемоеДействие Тогда
				ДанныеСтроки.Подразделение = ВыбранноеЗначение;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.ОС.ВыделенныеСтроки;
		ТребуемоеДействие
			= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.ОС.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ДанныеСтроки.ДействиеСПредметомАренды = ТребуемоеДействие Тогда
				ДанныеСтроки.СтатьяРасходов = ВыбранноеЗначение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаОсновное

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить данные документа по условиям договора на выбранную дату?';
							|en = 'Do you want to refill the document data based on the contract terms as of the selected date?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	ЗаполнитьПоДоговору();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	ЗаполнитьПоДоговору();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ЗаполнитьПоДоговору();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент = Элементы.Договор И ЗначениеЗаполнено(Объект.НовыйДоговор) Тогда
		
		ПараметрыВыбораДоговора = Новый Массив(Элемент.ПараметрыВыбора);
		
		ИмяПараметраСтатус = "Отбор.Статус";
		ИмяПараметраСостояние = "Отбор.Состояние";
		ПараметрВыбораСтатус = Неопределено;
		ПараметрВыбораСостояние = Неопределено;
		
		Для Каждого ПараметрВыбора Из ПараметрыВыбораДоговора Цикл
			
			Если ПараметрВыбора.Имя = ИмяПараметраСтатус Тогда
				ПараметрВыбораСтатус = ПараметрВыбора;
			ИначеЕсли ПараметрВыбора.Имя = ИмяПараметраСостояние Тогда
				ПараметрВыбораСостояние = ПараметрВыбора;
			КонецЕсли;
				
		КонецЦикла;
		
		Если ПараметрВыбораСтатус <> Неопределено Тогда
			ПараметрыВыбораДоговора.Удалить(ПараметрыВыбораДоговора.Найти(ПараметрВыбораСтатус));
		КонецЕсли;
		
		Если ПараметрВыбораСостояние <> Неопределено Тогда
			ПараметрыВыбораДоговора.Удалить(ПараметрыВыбораДоговора.Найти(ПараметрВыбораСостояние));
		КонецЕсли;
		
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДоговора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияВРеглУчетеРасходыНажатие(Элемент, СтандартнаяОбработка)
	НастройкаСчетовУчетаКлиент.ПриНажатии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СтраницаУсловияАренды

&НаКлиенте
Процедура ИндикаторПредыдущиеУсловияНеактуальныНажатие(Элемент)
	
	Если ЗначениеЗаполнено(АктуальныеПредыдущиеУсловияДоговора) Тогда
		ПоказатьЗначение(, АктуальныеПредыдущиеУсловияДоговора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОбеспечительногоПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПервогоОбеспечительногоПлатежаПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаУслугПоАренде(Элемент)
	
	СуммаУслугПоАрендеПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПервогоПлатежаПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыкупаПредметовАрендыПриИзменении(Элемент)
	
	СуммаВыкупаПредметовАрендыПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СрокАрендыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	УчетАрендованныхОСКлиент.ВвестиСрокАренды(
		ЭтотОбъект, 
		Объект,
		Новый ОписаниеОповещения("ВвестиСрокАрендыЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОплатПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
		Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц");
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьНачисленийПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьНачислений) Тогда
		Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц");
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОплатаУслугиПоАрендеПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = Элемент.Имя;
	
	Если Объект.ПериодичностьОплат = Объект.ПериодичностьНачислений
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И Объект.НачислениеУслугиПоАренде = 0
		И Объект.ОплатаУслугиПоАренде <> 0 Тогда
			
		Объект.НачислениеУслугиПоАренде = Объект.ОплатаУслугиПоАренде;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",НачислениеУслугиПоАренде";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);

КонецПроцедуры

&НаКлиенте
Процедура НачислениеУслугиПоАрендеПриИзменении(Элемент)
	
	ИзмененныеРеквизиты = Элемент.Имя;
	
	Если Объект.ПериодичностьОплат = Объект.ПериодичностьНачислений
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И Объект.ОплатаУслугиПоАренде = 0
		И Объект.НачислениеУслугиПоАренде <> 0 Тогда
			
		Объект.ОплатаУслугиПоАренде = Объект.НачислениеУслугиПоАренде;
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",ОплатаУслугиПоАренде";
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);

КонецПроцедуры

&НаКлиенте
Процедура ПодвалИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ЗаполнитьГрафик" Тогда
		ЗаполнитьГрафикПоРасчетам();
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ЗаполнитьРасчетыПоГрафику" Тогда
		ЗаполнитьРасчетыПоГрафику();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйКонтрагентПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("НовыйПартнер");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйПартнерПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("НовыйКонтрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДоговорПриИзменении(Элемент)

	НастроитьЗависимыеЭлементыФормы("НовыйДоговор");

КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами


#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТолькоПросмотр 
		И Поле = Элементы.ОСОсновноеСредство
		И ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ОсновноеСредство) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ОсновноеСредство);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ОсновноеСредствоПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОССправедливаяСтоимостьПриИзменении(Элемент)
	
	РассчитатьСтоимостьОС();
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОСНегарантированнаяСтоимостьПриИзменении(Элемент)
	
	РассчитатьСтоимостьОС();
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОСДействиеСПредметомАрендыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	
	СписокВыбора = Элемент.СписокВыбора;
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные; 
	Если ТекущиеДанные.ДействиеСПредметомАренды = 
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду") Тогда
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду"));
	Иначе
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ИзменениеУсловийАренды"));
		Если ТипДоговора = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыДоговоровАренды.Аренда")
				И РеквизитыДоговора.СпособОпределенияСтоимостиАктивов =
					ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.Дисконтирование")
						Тогда
				СписокВыбора.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ПрекращениеАренды"));
		КонецЕсли;
		Если РеквизитыДоговора.ЕстьВыкупПредметовАренды Тогда
			СписокВыбора.Добавить(ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ДосрочныйВыкуп"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		ТекущиеДанные.ДействиеСПредметомАренды = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	ЗаполнитьСлужебныеРеквизитыОС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ДействиеСПредметомАренды 
		<> ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ПустаяСсылка")
		И ТекущиеДанные.ДействиеСПредметомАренды 
			<> ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент = Элементы.ОСОсновноеСредство И СлужебныеПараметрыФормы.Свойство("РеквизитыДоговора") Тогда
		
		ПараметрыВыбораОС = Новый Массив(Элемент.ПараметрыВыбора);
		
		ПараметрыУчетаПредметовАренды = УчетАрендованныхОСКлиентСервер.ПараметрыУчетаПредметовАренды(
			СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018,
			СлужебныеПараметрыФормы.РеквизитыДоговора);
			
		ИмяПараметраУУ = "Отбор.ОтражатьВУпрУчете";
		ИмяПараметраБУ = "Отбор.ОтражатьВРеглУчете";
		ПараметрВыбораУУ = Неопределено;
		ПараметрВыбораБУ = Неопределено;
		
		Для Каждого ПараметрВыбора Из ПараметрыВыбораОС Цикл
			
			Если ПараметрВыбора.Имя = ИмяПараметраУУ Тогда
				ПараметрВыбораУУ = ПараметрВыбора;
				НовыйПараметрВыбораУУ = Новый ПараметрВыбора(ИмяПараметраУУ, ПараметрыУчетаПредметовАренды.ЕстьУчетУУ);
			ИначеЕсли ПараметрВыбора.Имя = ИмяПараметраБУ Тогда
				ПараметрВыбораБУ = ПараметрВыбора;
				НовыйПараметрВыбораБУ = Новый ПараметрВыбора(ИмяПараметраБУ, ПараметрыУчетаПредметовАренды.ЕстьУчетБУ);
			КонецЕсли;
				
		КонецЦикла;
		
		Если ПараметрВыбораУУ <> Неопределено Тогда
			ПараметрыВыбораОС.Удалить(ПараметрыВыбораОС.Найти(ПараметрВыбораУУ));
			ПараметрыВыбораОС.Добавить(НовыйПараметрВыбораУУ);
		КонецЕсли;
		
		Если ПараметрВыбораБУ <> Неопределено Тогда
			ПараметрыВыбораОС.Удалить(ПараметрыВыбораОС.Найти(ПараметрВыбораБУ));
			ПараметрыВыбораОС.Добавить(НовыйПараметрВыбораБУ);
		КонецЕсли;
		
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОС);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикОплат(Команда)
	
	ОткрытьГрафикОплатИНачислений("ГрафикОплатУслуг");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикНачислений(Команда)
	
	ОткрытьГрафикОплатИНачислений("ГрафикНачисленияУслуг");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикНачисленияПроцентов(Команда)
	
	ОткрытьГрафикОплатИНачислений("ГрафикНачисленияПроцентов");

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтавкуИлиСтоимость(Команда)
	
	Если УчетАрендованныхОСКлиент.МожноРассчитатьСтавкуИлиСтоимость(
		Объект, СлужебныеПараметрыФормы.РеквизитыДоговора, "ОС",, ПредыдущиеУсловия) Тогда
		РассчитатьСтавкуСтоимостьПроцентыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАрендованными(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать договор';
								|en = 'Select a contract'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Договор", "Объект");
		Возврат;
	КонецЕсли;

	Если Объект.ОС.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить список предметов аренды по договору?';
							|en = 'Populate the list of rental objects under the contract?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАрендованнымиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьАрендованнымиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоПредыдущимУсловиям(Команда)
	
	ТекстВопроса = НСтр("ru = 'Обновить данные документа по предыдущим условиям договора?';
						|en = 'Do you want to update the document data based on the previous contract terms?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПоПредыдущимУсловиямЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
		
	ВыделенныеСтроки = Элементы.ОС.ВыделенныеСтроки;
	
	ТребуемоеДействие
		= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");
	ЕстьПодходящиеСтроки = Ложь;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ОС.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.ДействиеСПредметомАренды = ТребуемоеДействие Тогда
			ЕстьПодходящиеСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ОС.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""ОС"" не введено ни одной строки.';
										|en = 'No lines are entered in the Fixed assets list.'"));
		Возврат;
	ИначеЕсли НЕ ЕстьПодходящиеСтроки Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""ОС"" не выбрано ни одной строки с действием ""Взятие в аренду"".';
										|en = 'In the Fixed assets list, no line with the Rent action is selected.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюРасходов(Команда)
	
	ВыделенныеСтроки = Элементы.ОС.ВыделенныеСтроки;
	
	ПодходящиеВыделенныеСтроки = Новый Массив;
	ТребуемоеДействие
		= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ОС.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.ДействиеСПредметомАренды = ТребуемоеДействие Тогда
			ПодходящиеВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ОС.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""ОС"" не введено ни одной строки.';
										|en = 'No lines are entered in the Fixed assets list.'"));
		Возврат;
	ИначеЕсли ПодходящиеВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""ОС"" не выбрано ни одной строки с действием ""Взятие в аренду"".';
										|en = 'In the Fixed assets list, no line with the Rent action is selected.'"));
		Возврат;
	КонецЕсли;
	
	ОтборСписка = Новый Структура;
	ОтборСписка.Вставить("РасходыНаОбъектыЭксплуатации", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ОтборСписка);
	ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(Знач ИзмененныеРеквизитыИлиЭлемент = "")

	Если ТипЗнч(ИзмененныеРеквизитыИлиЭлемент) = Тип("Строка") Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент;
	Иначе
		ИзмененныеРеквизиты = ИзмененныеРеквизитыИлиЭлемент.Имя;
	КонецЕсли;

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	Если ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов) Тогда
		НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты)
	Иначе
		НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(Знач Форма, Знач ИзмененныеРеквизиты = "")
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СлужебныеПараметрыФормы = Форма.СлужебныеПараметрыФормы;
	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	
	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ИспользуетсяУправлениеВНА_2_4", СлужебныеПараметрыФормы.ИспользуетсяУправлениеВНА_2_4);
	ВспомогательныеРеквизиты.Вставить("ИспользуетсяУчетАрендыПоФСБУ25_2018", СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018);
	ВспомогательныеРеквизиты.Вставить("НачалоУчетаАрендыПоФСБУ25_2018", СлужебныеПараметрыФормы.НачалоУчетаАрендыПоФСБУ25_2018);
	ВспомогательныеРеквизиты.Вставить("РеквизитыДоговора", СлужебныеПараметрыФормы.РеквизитыДоговора);
	ВспомогательныеРеквизиты.Вставить("НезначащаяСтавкаНДС", СлужебныеПараметрыФормы.НезначащаяСтавкаНДС);
	ВспомогательныеРеквизиты.Вставить("ВалютаУпр", СлужебныеПараметрыФормы.ВалютаУпр);
	ВспомогательныеРеквизиты.Вставить("ВалютаРегл", СлужебныеПараметрыФормы.ВалютаРегл);
	ВспомогательныеРеквизиты.Вставить("ВалютыСовпадают", СлужебныеПараметрыФормы.ВалютаУпр = СлужебныеПараметрыФормы.ВалютаРегл);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВОперативномУчете", Истина);
	ВспомогательныеРеквизиты.Вставить("ВерсияДокумента24", Ложь);
	ВспомогательныеРеквизиты.Вставить("ИмяТабличнойЧастиОС", "ОС");
	ВспомогательныеРеквизиты.Вставить("ИзменениеУсловий", Истина);

	ПараметрыРеквизитовОбъекта = УчетАрендованныхОСКлиентСервер.ЗначенияСвойствЗависимыхРеквизитов_ИзменениеУсловийДоговораАренды(
									Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
									
	ОбщегоНазначенияУТКлиентСервер.НастроитьЗависимыеЭлементыФормы(Форма, ПараметрыРеквизитовОбъекта);
	
	Если НЕ ОбновитьВсе Тогда
		ОбщегоНазначенияУТКлиентСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, ПараметрыРеквизитовОбъекта, "ОС,ГрафикОплатУслуг,ГрафикНачисленияУслуг,ГрафикНачисленияПроцентов");
	КонецЕсли;
	
	УчетЗаБалансом = (СлужебныеПараметрыФормы.РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель"));
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		Элементы.Комментарий.МаксимальнаяШирина = 
			?(СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 ИЛИ НЕ УчетЗаБалансом, 67, 75);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НовыйПартнер")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НовыйКонтрагент")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НовыйДоговор")
		ИЛИ ОбновитьВсе Тогда
		ТребуетсяЗаполнение = ЗначениеЗаполнено(Объект.НовыйПартнер)
							ИЛИ ЗначениеЗаполнено(Объект.НовыйКонтрагент)
							ИЛИ ЗначениеЗаполнено(Объект.НовыйДоговор);
		Элементы.НовыйПартнер.ОтметкаНезаполненного = ТребуетсяЗаполнение И НЕ(ЗначениеЗаполнено(Объект.НовыйПартнер));
		Элементы.НовыйКонтрагент.ОтметкаНезаполненного = ТребуетсяЗаполнение И НЕ(ЗначениеЗаполнено(Объект.НовыйКонтрагент));
		Элементы.НовыйДоговор.ОтметкаНезаполненного = ТребуетсяЗаполнение И НЕ(ЗначениеЗаполнено(Объект.НовыйДоговор));
	КонецЕсли;
	
	#КонецОбласти

	#Область СтраницаОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			Элементы.ОССправедливаяСтоимость.Видимость
			И Элементы.ОСНегарантированнаяСтоимость.Видимость;
			
		Элементы.ОСГруппаСтоимость.ОтображатьЗаголовок = ЗначениеСвойства;
		Элементы.ОСГруппаСтоимость.ОтображатьВШапке = ЗначениеСвойства;
		Элементы.ОСВыкупнаяСтоимость.Видимость = РеквизитыДоговора.ЕстьВыкупПредметовАренды;
	КонецЕсли;

	#КонецОбласти
			
	#Область ГруппаПодвал
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗакупкаОблагаетсяНДС = УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаЗакупки(РеквизитыДоговора.НалогообложениеНДС);
		
		Если ЗакупкаОблагаетсяНДС Тогда
			Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаСНДС;
			Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоСНДС;
		Иначе
			Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаБезНДС;
			Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоБезНДС;
		КонецЕсли;
	
	КонецЕсли;
	
	#КонецОбласти
	
	УчетАрендованныхОСКлиентСервер.НастроитьЗависимыеЭлементыФормы_Аренда(Форма, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСДействиеСПредметомАрендыПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент);

КонецПроцедуры


&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(Знач ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	#Область Прочее
	
	Если ОбновитьВсе Тогда
		
		Если НЕ СлужебныеПараметрыФормы.ИспользоватьУчетНДС Тогда
			Элементы.СуммаНДСВалюта.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация") 
		ИЛИ ОбновитьВсе Тогда
		ГоловнаяОрганизация = НастройкиНалоговУчетныхПолитикПовтИсп.ГоловнаяОрганизация(Объект.Организация);
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", ГоловнаяОрганизация));
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"НачалоУчетаАрендыПоФСБУ25_2018",
			УчетАрендованныхОС.НачалоУчетаАрендыПоФСБУ25_2018(Объект.Организация),
			СлужебныеПараметрыФормы);
			
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ВалютаРегл",
			ВалютаРегламентированногоУчета,
			СлужебныеПараметрыФормы);
			
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ВалютаРеглПредставление",
			Строка(ВалютаРегламентированногоУчета),
			СлужебныеПараметрыФормы);
			
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ВалютыСовпадают",
			СлужебныеПараметрыФормы.ВалютаУпр = ВалютаРегламентированногоУчета,
			СлужебныеПараметрыФормы);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата") Тогда
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ИспользуетсяУправлениеВНА_2_4",
			ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата),
			СлужебныеПараметрыФормы);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация") Тогда
		
		ЗначениеПараметра = 
			УчетАрендованныхОС.ИспользуетсяУчетАрендыПоФСБУ25_2018(Объект.Организация, Объект.Дата)
			ИЛИ УчетАрендованныхОС.ИспользуетсяУчетАрендыПоФСБУ25_2018(Объект.Организация, КонецМесяца(Объект.Дата)+1);
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"ИспользуетсяУчетАрендыПоФСБУ25_2018",
			ЗначениеПараметра,
			СлужебныеПараметрыФормы);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СтавкаНДС") ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") Тогда
		
		ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
			"НезначащаяСтавкаНДС",
			УчетНДСУП.НезначащаяСтавка(Объект.СтавкаНДС),
			СлужебныеПараметрыФормы);
		
	КонецЕсли;

	#КонецОбласти

	#Область ЗаголовкиЭлементов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
		
		ПредставлениеРеквизитов = Документы.ЗаключениеДоговораАренды.ПредставлениеРеквизитов(
			РеквизитыДоговора.Балансодержатель,
			ТипДоговора,
			СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018);
			
		ВалютаДокументаПредставление = Строка(Объект.Валюта);
		
		Если СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 Тогда
		
			Элементы.ОСГруппаСтоимость.Заголовок = ВнеоборотныеАктивыКлиентСервер.ДобавитьКСтрокеВалюту(
					НСтр("ru = 'Стоимость по договору';
						|en = 'Cost as per contract'"), 
					ВалютаДокументаПредставление);
			
			Если ТипДоговора = Перечисления.ТипыДоговоровАренды.Лизинг
				ИЛИ РеквизитыДоговора.СпособОпределенияСтоимостиАктивов <> Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости Тогда
					
				Элементы.ОССтоимость.Заголовок = ВнеоборотныеАктивыКлиентСервер.ДобавитьКСтрокеВалюту(
					ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок"), 
					ВалютаДокументаПредставление);
				Элементы.ОСВыкупнаяСтоимость.Заголовок = ВнеоборотныеАктивыКлиентСервер.ДобавитьКСтрокеВалюту(
					НСтр("ru = 'Выкупная стоимость (с НДС)';
						|en = 'Buyout value (including VAT)'"), 
					ВалютаДокументаПредставление);
			Иначе
				Элементы.ОССтоимость.Заголовок = ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок");
			КонецЕсли;
			
		Иначе
		
			Если РеквизитыДоговора.Балансодержатель = Перечисления.БалансодержательПредметовАренды.Арендодатель Тогда
				
				Элементы.ОССтоимость.Заголовок = ВнеоборотныеАктивыКлиентСервер.ДобавитьКСтрокеВалюту(
						ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок"), 
						СлужебныеПараметрыФормы.ВалютаРеглПредставление);
						
			Иначе
				
				Элементы.ОССтоимость.Заголовок = ВнеоборотныеАктивыКлиентСервер.ДобавитьКСтрокеВалюту(
						ПредставлениеРеквизитов.Получить("ОС.Стоимость_Заголовок"), 
						ВалютаДокументаПредставление);
						
			КонецЕсли;
		
		КонецЕсли;
		
		Элементы.ОССтоимость.Подсказка = ПредставлениеРеквизитов.Получить("ОС.Стоимость_Подсказка");
		
		ПредыдущиеУсловияНеактуальны = Объект.ПредыдущиеУсловияАренды <> АктуальныеПредыдущиеУсловияДоговора;
		Элементы.ИндикаторПредыдущиеУсловияНеактуальны.Видимость = ПредыдущиеУсловияНеактуальны;
		ЕстьСсылкаНаПредыдущиеАктуальныеУсловия = ПредыдущиеУсловияНеактуальны 
			И ЗначениеЗаполнено(АктуальныеПредыдущиеУсловияДоговора);
		Элементы.ОбновитьПоПредыдущимУсловиям.Видимость = ЕстьСсылкаНаПредыдущиеАктуальныеУсловия;
		
		Если ПредыдущиеУсловияНеактуальны И ЕстьСсылкаНаПредыдущиеАктуальныеУсловия Тогда
			ТекстПодсказкиИндикатора = СтрШаблон(НСтр("ru = 'Предыдущие условия аренды неактуальны. Актуальные условия: %1';
														|en = 'The previous rental terms are no longer effective. Effective terms: %1'"),
				АктуальныеПредыдущиеУсловияДоговора); 
		ИначеЕсли ПредыдущиеУсловияНеактуальны Тогда
			ТекстПодсказкиИндикатора = НСтр("ru = 'Предыдущие условия аренды неактуальны. Нет действующего договора на дату документа';
											|en = 'The previous rental terms are no longer effective. There is no valid contract as of the document date'");
		Иначе
			ТекстПодсказкиИндикатора  = "";
		КонецЕсли;
		Элементы.ИндикаторПредыдущиеУсловияНеактуальны.Подсказка = ТекстПодсказкиИндикатора;
		
		// Установим заголовок Номинальная стоимость у колонки справедливая стоимость для договоров аренды с дисконтированием.
		Если ТипДоговора = Перечисления.ТипыДоговоровАренды.Аренда
			И РеквизитыДоговора.СпособОпределенияСтоимостиАктивов 
				= Перечисления.СпособыОпределенияСтоимостиПредметовАренды.Дисконтирование Тогда
			
			Элементы.ОССправедливаяСтоимость.Заголовок = ВнеоборотныеАктивыКлиентСервер.ДобавитьКСтрокеВалюту(
															НСтр("ru = 'Номинальная стоимость';
																|en = 'Par value'"), 
															ВалютаДокументаПредставление);
		КонецЕсли;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НовыйДоговор
	Если ЗначениеЗаполнено(Объект.НовыйДоговор)
		ИЛИ ЗначениеЗаполнено(Объект.НовыйКонтрагент)
		ИЛИ ЗначениеЗаполнено(Объект.НовыйПартнер) Тогда
		Элементы.ГруппаИзменениеАрендодателяДоговора.Показать();
	КонецЕсли;
	#КонецОбласти
	
	НастроитьЗависимыеЭлементыФормыНаКлиентеНаСервере(ЭтотОбъект, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяВызовСервераДляНастройкиЭлементовФормы(СтруктураИзмененныхРеквизитов)

	Возврат СтруктураИзмененныхРеквизитов.Количество() = 0
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор");

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере(Перезаполнить = Ложь)
	
	АктуализироватьСтавкуНДС();
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Документы.ИзменениеУсловийДоговораАренды.ПроверитьАктуальностьДоговораАренды(Объект.Ссылка, Объект.Договор, Объект.Дата);
		УстановитьАктуальныеУсловияДоговора();
		Документы.ИзменениеУсловийДоговораАренды.ЗаполнитьГрафикиПоПредыдущимУсловиямСУчетомИзменений(Объект);
		Если Перезаполнить И ЗначениеЗаполнено(АктуальныеПредыдущиеУсловияДоговора) Тогда
			Если АктуальныеПредыдущиеУсловияДоговора = Объект.ПредыдущиеУсловияАренды Тогда
				ОбновитьПоПредыдущимУсловиямНаСервере();
			Иначе
				Документы.ИзменениеУсловийДоговораАренды.ЗаполнитьНаОснованииДоговораАренды(Объект, Ложь); 
				ЗаполнитьСлужебныеРеквизитыТЧ();
				НастроитьЗависимыеЭлементыФормыНаСервере("Договор");
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьПредыдущиеУсловия();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Дата");
	
	
	ПараметрыВыбораСтатейИАналитик = Документы.ИзменениеУсловийДоговораАренды.ПараметрыВыбораСтатейИАналитик(
				УчетАрендованныхОС.СозданДляПереходаНаФСБУ25_2018(Объект.Дата, Объект.Организация));
				
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	ПараметрыНастройки = Документы.ИзменениеУсловийДоговораАренды.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	АктуализироватьСтавкуНДС();
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация,Договор");
	
	
	ПараметрыВыбораСтатейИАналитик = Документы.ИзменениеУсловийДоговораАренды.ПараметрыВыбораСтатейИАналитик(
				УчетАрендованныхОС.СозданДляПереходаНаФСБУ25_2018(Объект.Дата, Объект.Организация));
				
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);

	ПараметрыНастройки = Документы.ИзменениеУсловийДоговораАренды.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Договор = Справочники.ДоговорыАренды.ДоговорПоУмолчанию(
				Объект.Организация, Объект.Партнер, Объект.Контрагент, Объект.Договор);
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	ДобавитьРеквизитыДоговораВСлужебныеПараметрыФормы();
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ВалютаВзаиморасчетов = Неопределено;
		Объект.Валюта = Неопределено;
	КонецЕсли;
	
	Если Объект.ОС.Количество() = 0 
		И Объект.СуммаСНДС = 0 
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Документы.ИзменениеУсловийДоговораАренды.ЗаполнитьНаОснованииДоговораАренды(Объект);
		АктуальныеПредыдущиеУсловияДоговора = Объект.ПредыдущиеУсловияАренды;
	Иначе
		ЗаполнитьПоДоговору = Истина;
	КонецЕсли;
	
	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	
	Объект.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Объект.Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
	ВалютаДокумента = Объект.Валюта;
	ЗаполнитьПредыдущиеУсловия();
	
	Если НЕ ЗаполнитьПоДоговору Тогда
		
		ЗаполнитьСлужебныеРеквизитыТЧ();
		НастроитьЗависимыеЭлементыФормыНаСервере("Договор");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговору()

	Если НЕ ЗаполнитьПоДоговору ИЛИ НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить документ по договору?';
						|en = 'Fill in the document under the contract?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДоговоруЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	ЗаполнитьПоДоговору = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДоговоруНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДоговоруНаСервере()
		
	Документы.ИзменениеУсловийДоговораАренды.ЗаполнитьНаОснованииДоговораАренды(Объект);
	АктуальныеПредыдущиеУсловияДоговора = Объект.ПредыдущиеУсловияАренды;
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	НастроитьЗависимыеЭлементыФормыНаСервере("Договор");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыДоговораВСлужебныеПараметрыФормы()
	
	РеквизитыДоговора = УчетАрендованныхОС.РеквизитыДоговораАренды(Объект.Договор);
	
	ТипДоговора = РеквизитыДоговора.ТипДоговора;
	
	ВнеоборотныеАктивыСлужебный.УстановитьСвойствоСтруктуры(
		"РеквизитыДоговора",
		РеквизитыДоговора,
		СлужебныеПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура СуммаУслугПоАрендеПриИзмененииНаСервере()
	
	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	НастроитьЗависимыеЭлементыФормыНаСервере("СуммаУслугПоАренде");
	
КонецПроцедуры

&НаСервере
Процедура СуммаВыкупаПредметовАрендыПриИзмененииНаСервере()

	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	ПересчитатьСуммуНДСВыкупаПредметовАренды(Объект);

	НастроитьЗависимыеЭлементыФормыНаСервере("СуммаВыкупаПредметовАренды");
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере()
	
	ПересчитатьСуммуДоговораИСуммуНДС(Объект);
	ПересчитатьСуммуНДСВыкупаПредметовАренды(Объект);

	НастроитьЗависимыеЭлементыФормыНаСервере("СтавкаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьОС()

	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	Если РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = 
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент
			("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости") Тогда
		ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
		ТекущиеДанные.Стоимость = ТекущиеДанные.СправедливаяСтоимость - ТекущиеДанные.НегарантированнаяСтоимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеСредствоПриИзмененииНаСервере()

	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетСумм

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуДоговораИСуммуНДС(Объект)
	
	УчетАрендованныхОСКлиентСервер.ПересчитатьСуммуДокументаАренды(Объект);
	УчетАрендованныхОСКлиентСервер.ПересчитатьСуммуНДСВДокументеАренды(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДСВыкупаПредметовАренды(Объект)
	
	ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(Объект.СтавкаНДС);
	Объект.СуммаНДСВыкупаПредметовАренды = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(Объект.СуммаВыкупаПредметовАренды, ТекПроцентНДС, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ИзменениеУсловийДоговораАрендыЛокализация.УстановитьУсловноеОформление(ЭтотОбъект);
	
	#Область ОССтоимость_Текст
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССтоимость.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтоимостьРассчитываетсяАвтоматически");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.Стоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<рассчитывается автоматически>';
																|en = '<calculated automatically>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ДоступностьУУ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССрокИспользованияУУ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ПринятКУчетуУУ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не принято к учету>';
																|en = '<not recognized>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ДоступностьДействияСПредметомАренды
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДействиеСПредметомАренды.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДействиеСПредметомАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ДоступностьОС
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСОсновноеСредство.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДействиеСПредметомАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область ДоступностьПодразделенияСтатьиРасхода
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССтатьяРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДействиеСПредметомАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду");
	
	ГруппаИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.Субаренда");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДействиеСПредметомАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ИзменениеУсловийАренды");
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипДоговора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыДоговоровАренды.Лизинг");

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти 
	
	#Область ТекстИспользованиеСправедливаяСтоимость
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССтоимость.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДействиеСПредметомАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ПрекращениеАренды");

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ТекстИспользованиеВыкупнаяСтоимость
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСВыкупнаяСтоимость.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДействиеСПредметомАренды");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ДействияСПредметамиАренды.ДосрочныйВыкуп");

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСлужебныеПараметрыФормы()

	НовыеСлужебныеПараметрыФормы = Новый Структура;
	НовыеСлужебныеПараметрыФормы.Вставить("Балансодержатель", Неопределено);

	ЗначениеПараметра = ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата);
	НовыеСлужебныеПараметрыФормы.Вставить("ИспользуетсяУправлениеВНА_2_4", ЗначениеПараметра);

	ЗначениеПараметра = УчетАрендованныхОС.ИспользуетсяУчетАрендыПоФСБУ25_2018(Объект.Организация, Объект.Дата, Истина);
	НовыеСлужебныеПараметрыФормы.Вставить("ИспользуетсяУчетАрендыПоФСБУ25_2018", ЗначениеПараметра);

	ЗначениеПараметра = УчетАрендованныхОС.НачалоУчетаАрендыПоФСБУ25_2018(Объект.Организация);
	НовыеСлужебныеПараметрыФормы.Вставить("НачалоУчетаАрендыПоФСБУ25_2018", ЗначениеПараметра);

	ЗначениеПараметра = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	НовыеСлужебныеПараметрыФормы.Вставить("ВедетсяРегламентированныйУчетВНА", ЗначениеПараметра);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаУпр", ВалютаУпр);
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаРегл", ВалютаРегл);
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаУпрПредставление", Строка(ВалютаУпр));
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютаРеглПредставление", Строка(ВалютаРегл));
	НовыеСлужебныеПараметрыФормы.Вставить("ВалютыСовпадают", ВалютаУпр = ВалютаРегл);
	
	НовыеСлужебныеПараметрыФормы.Вставить("ИспользоватьУчетНДС", ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"));
	НовыеСлужебныеПараметрыФормы.Вставить("НезначащаяСтавкаНДС", УчетНДСУП.НезначащаяСтавка(Объект.СтавкаНДС));
	
	СлужебныеПараметрыФормы = Новый ФиксированнаяСтруктура(НовыеСлужебныеПараметрыФормы);

	ДобавитьРеквизитыДоговораВСлужебныеПараметрыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормыПриСозданииНаСервере()

	ИнициализироватьСлужебныеПараметрыФормы();
	ЗаполнитьСлужебныеРеквизитыТЧ();
	УстановитьАктуальныеУсловияДоговора();
	ЗаполнитьПредыдущиеУсловия();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИнициализацияФормыПриСозданииНаСервере();
	
	ВалютаДокумента = Объект.Валюта;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикОплатИНачислений(ИмяГрафика)
	
	ВнеоборотныеАктивыКлиент.ОткрытьГрафикОплатИНачислений(
		Объект, 
		ЭтотОбъект, 
		ПоместитьГрафикиВоВременноеХранилище(), 
		Новый ОписаниеОповещения("ОткрытьГрафикОплатИНачисленийЗавершение", ЭтотОбъект), 
		ИмяГрафика);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьГрафикиВоВременноеХранилище()

	ГрафикиДоговора = Новый Структура;
	ГрафикиДоговора.Вставить("ГрафикНачисленияУслуг", Объект.ГрафикНачисленияУслуг.Выгрузить());
	ГрафикиДоговора.Вставить("ГрафикОплатУслуг", Объект.ГрафикОплатУслуг.Выгрузить());
	ГрафикиДоговора.Вставить("ГрафикНачисленияПроцентов", Объект.ГрафикНачисленияПроцентов.Выгрузить());

	Адрес = ПоместитьВоВременноеХранилище(ГрафикиДоговора, АдресГрафикиДоговора);
		
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьГрафикОплатИНачисленийЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт

	Если НЕ ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		Возврат
	КонецЕсли;

	ОткрытьГрафикОплатИНачисленийЗавершениеНаСервере(РезультатЗакрытия);
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОткрытьГрафикОплатИНачисленийЗавершениеНаСервере(Знач РезультатЗакрытия)
	
	Модифицированность = Истина;

	ГрафикиДоговора = ПолучитьИзВременногоХранилища(РезультатЗакрытия);

	Объект.ГрафикНачисленияПроцентовВведенВручную = ГрафикиДоговора.ГрафикНачисленияПроцентовВведенВручную;
	Объект.СуммаПроцентов = ГрафикиДоговора.СуммаПроцентов;
	Объект.ГрафикОплатУслуг.Загрузить(ГрафикиДоговора.ГрафикОплатУслуг);
	Объект.ГрафикНачисленияУслуг.Загрузить(ГрафикиДоговора.ГрафикНачисленияУслуг);
	Объект.ГрафикНачисленияПроцентов.Загрузить(ГрафикиДоговора.ГрафикНачисленияПроцентов);
	
	УчетАрендованныхОСКлиентСервер.ПересчитатьСуммуНДСВДокументеАренды(Объект);

	Объект.ПриведеннаяСтоимость = ПриведеннаяСтоимость(
		Объект, 
		СлужебныеПараметрыФормы.РеквизитыДоговора,
		ПредыдущиеУсловия);

	НастроитьЗависимыеЭлементыФормыНаСервере(
		"ГрафикОплатУслуг,ГрафикНачисленияУслуг,ГрафикНачисленияПроцентов,ГрафикНачисленияПроцентовВведенВручную");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтавкуСтоимостьПроцентыНаСервере()

	Документы.ИзменениеУсловийДоговораАренды.РассчитатьСтавкуСтоимостьПроценты(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ОССправедливаяСтоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАрендованнымиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ЗаполнитьАрендованнымиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАрендованнымиНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОС.Очистить();
	
	ТекстыПакетаЗапросов = Новый Массив;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Стоимость КАК Стоимость,
	|	АрендованныеОС.НоминальнаяСтоимость КАК НоминальнаяСтоимость,
	|	ЗНАЧЕНИЕ(Перечисление.ДействияСПредметамиАренды.ИзменениеУсловийАренды) КАК Действие,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов
	|ПОМЕСТИТЬ втАрендованныеОС_Предварительная
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(
	|			&ПериодГраница,
	|			Договор = &Договор
	|				И Регистратор <> &Ссылка) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ЗаключенДоговорАренды),
	|								ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереданныеВАренду.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ втПереданныеВАренду
	|ИЗ
	|	РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(
	|			&ПериодГраница,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					Т.ОсновноеСредство
	|				ИЗ
	|					втАрендованныеОС_Предварительная КАК Т)) КАК ПереданныеВАренду
	|ГДЕ
	|	ПереданныеВАренду.Договор.ТипДоговора В(&ТипыДоговоровПоФСБУ25)
	|	И ПереданныеВАренду.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПереданоВАренду)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Стоимость КАК Стоимость,
	|	АрендованныеОС.НоминальнаяСтоимость КАК НоминальнаяСтоимость,
	|	АрендованныеОС.Действие КАК Действие,
	|	АрендованныеОС.Подразделение КАК Подразделение,
	|	АрендованныеОС.СтатьяРасходов КАК СтатьяРасходов,
	|	НЕ ПереданныеВАренду.ОсновноеСредство ЕСТЬ NULL КАК Субаренда
	|ПОМЕСТИТЬ втАрендованныеОС
	|ИЗ
	|	втАрендованныеОС_Предварительная КАК АрендованныеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПереданныеВАренду КАК ПереданныеВАренду
	|		ПО ПереданныеВАренду.ОсновноеСредство = АрендованныеОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|";
	ТекстыПакетаЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ИзменениеУсловийДоговораАрендыЛокализация.ТекстЗапросаЗаполнениеТЧПоДоговору();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
		|	АрендованныеОС.Субаренда КАК Субаренда,
		|	ВЫБОР
		|		КОГДА &РасчетПоФактическойСтоимости
		|			ТОГДА АрендованныеОС.Стоимость
		|		ИНАЧЕ АрендованныеОС.НоминальнаяСтоимость
		|	КОНЕЦ КАК СправедливаяСтоимость,
		|	ВЫБОР
		|		КОГДА &РасчетПоФактическойСтоимости
		|			ТОГДА АрендованныеОС.Стоимость
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Стоимость,
		|	АрендованныеОС.Действие КАК ДействиеСПредметомАренды,
		|	АрендованныеОС.Подразделение КАК Подразделение,
		|	АрендованныеОС.СтатьяРасходов КАК СтатьяРасходов,
		|	ЕСТЬNULL(СтоимостьОС.СтоимостьОстаток, 0) КАК СтоимостьУУ,
		|	ЕСТЬNULL(СтоимостьОС.СтоимостьРеглОстаток, 0) КАК СтоимостьБУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСУУ.СрокИспользования, 0) КАК СрокИспользованияУУ
		|ИЗ
		|	втАрендованныеОС КАК АрендованныеОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(&ПериодГраница, Организация = &Организация
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				втАрендованныеОС.ОсновноеСредство
		|			ИЗ
		|				втАрендованныеОС КАК втАрендованныеОС)) КАК СтоимостьОС
		|		ПО СтоимостьОС.ОсновноеСредство = АрендованныеОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(&Дата, Регистратор <> &Ссылка
		|		И Организация = &Организация
		|		И ДатаИсправления = ДАТАВРЕМЯ(1, 1, 1)
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				втАрендованныеОС.ОсновноеСредство
		|			ИЗ
		|				втАрендованныеОС КАК втАрендованныеОС)) КАК ПараметрыАмортизацииОСУУ
		|		ПО ПараметрыАмортизацииОСУУ.ОсновноеСредство = АрендованныеОС.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	АрендованныеОС.ОсновноеСредство.Наименование,
		|	АрендованныеОС.ОсновноеСредство.ИнвентарныйНомер";
		
	КонецЕсли;
	
	ТекстыПакетаЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыПакетаЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());

	ДатаДок = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	
	РасчетПоФактическойСтоимости = СлужебныеПараметрыФормы.РеквизитыДоговора.СпособОпределенияСтоимостиАктивов
			= Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости;
			
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("Дата", ДатаДок);
	Запрос.УстановитьПараметр("ПериодГраница", Новый Граница(Новый МоментВремени(ДатаДок, Объект.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("РасчетПоФактическойСтоимости", РасчетПоФактическойСтоимости);
	Запрос.УстановитьПараметр("ТипыДоговоровПоФСБУ25", УчетАрендованныхОСКлиентСервер.ТипыДоговоровДоходнойАренды());
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОС.Загрузить(Результат[Результат.ВГраница()].Выгрузить());
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикПоРасчетам()
	
	Если (Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьОплат))
		И (Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьНачислений)) Тогда
				
		Возврат;
	КонецЕсли;
	
	Если УчетАрендованныхОСКлиент.ПроверитьВозможностьЗаполненияГрафикаПоРасчетам(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора) Тогда
		
		РассчитатьСтавкуИлиСтоимость = УчетАрендованныхОСКлиент.МожноРассчитатьСтавкуИлиСтоимость(
			Объект, СлужебныеПараметрыФормы.РеквизитыДоговора, "ОС", Ложь, ПредыдущиеУсловия);
		
		ЗаполнитьГрафикПоРасчетамНаСервере(РассчитатьСтавкуИлиСтоимость);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить график по расчетам на сервере.
// Способ заполнения графиков зависит от режима перехода на ФСБУ25.
// 
// Параметры:
//  РассчитатьСтавкуИлиСтоимость - Булево - Рассчитать ставку или стоимость
&НаСервере
Процедура ЗаполнитьГрафикПоРасчетамНаСервере(Знач РассчитатьСтавкуИлиСтоимость)
	
	Модифицированность = Истина;
	
	СозданДляПерехода = УчетАрендованныхОС.СозданДляПереходаНаФСБУ25_2018(Объект.Дата, Объект.Организация);
	
	Если СозданДляПерехода Тогда
		// Графики с начала периода аренды.
		УчетАрендованныхОС.ЗаполнитьГрафикОплатИНачисленийПоРасчетам(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);
	Иначе
		// Графики до даты изменения по старым условиям, с даты изменения - по новым.
		УчетАрендованныхОС.ЗаполнитьГрафикОплатИНачисленийПоРасчетамИзменениеУсловий(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);
	КонецЕсли;
	
	Объект.ПриведеннаяСтоимость = ПриведеннаяСтоимость(
		Объект, 
		СлужебныеПараметрыФормы.РеквизитыДоговора,
		ПредыдущиеУсловия);

	Если РассчитатьСтавкуИлиСтоимость Тогда
		РассчитатьСтавкуСтоимостьПроцентыНаСервере();
	КонецЕсли;
	
	СрокАрендыИзменен = Ложь;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ГрафикОплатУслуг,ГрафикНачисленияУслуг");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетыПоГрафику()
	
	Модифицированность = Истина;

	УчетАрендованныхОС.ЗаполнитьРасчетыПоГрафикуОплатИНачислений(Объект, СлужебныеПараметрыФормы.РеквизитыДоговора);
	
	ИзмененныеРеквизиты = 
	"СуммаОбеспечительногоПлатежа,ДатаПервогоОбеспечительногоПлатежа,
	|СуммаУслугПоАренде,ДатаПервогоПлатежа,
	|СуммаВыкупаПредметовАренды,СуммаНДСВыкупаПредметовАренды,
	|СуммаНДС,
	|ПериодичностьОплат,ОплатаУслугиПоАренде,
	|ПериодичностьНачислений,НачислениеУслугиПоАренде";

	НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСрокАрендыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы("ДатаНачалаАренды,СрокЛет,СрокМес,СрокДней");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТЧ()
	
	СписокОС = Новый Массив;
	Для Каждого ДанныеСтроки Из Объект.ОС Цикл
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
			СписокОС.Добавить(ДанныеСтроки.ОсновноеСредство);
		КонецЕсли;
		
		ДанныеСтроки.ПринятКУчетуУУ = Ложь;
		ДанныеСтроки.ПринятКУчетуБУ = Ложь;
		ДанныеСтроки.ПринятКУчетуНУ = Ложь;
		
	КонецЦикла;
	
	Если СписокОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ИзменениеУсловийДоговораАрендыЛокализация.ТекстЗапросаДляЗаполненияСлужебныхРеквизитовТЧ();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СпрОбъектыЭксплуатации.Ссылка,
		|	ЕСТЬNULL(ПорядокУчетаОСБУ.СостояниеБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК ПринятКУчетуБУ,
		|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК ПринятКУчетуУУ
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК СпрОбъектыЭксплуатации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&Дата,
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
		|					И Организация = &Организация 
		|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|		ПО ПорядокУчетаОСУУ.ОсновноеСредство = СпрОбъектыЭксплуатации.Ссылка
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|			&Дата, 
		|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И Организация = &Организация 
		|				И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСБУ
		|		ПО ПорядокУчетаОСБУ.ОсновноеСредство = СпрОбъектыЭксплуатации.Ссылка
		|ГДЕ
		|	СпрОбъектыЭксплуатации.Ссылка В (&СписокОС)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СписокРеквизитов = "ПринятКУчетуУУ";
	Для Каждого Колонка Из Результат.Колонки Цикл
		Если Колонка.Имя <> "Ссылка" И Колонка.Имя <> "ПринятКУчетуУУ" Тогда
			СписокРеквизитов = СписокРеквизитов + "," + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	СостоянияОС = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ДанныеСостояние = Новый Структура(СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(ДанныеСостояние, Выборка);
		СостоянияОС.Вставить(Выборка.Ссылка, ДанныеСостояние);
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.ОС Цикл
		
		ДанныеСостояние = СостоянияОС.Получить(ДанныеСтроки.ОсновноеСредство);
		
		Если ДанныеСостояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСостояние);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьСтавкуНДС()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	СтруктураДействий.ЗаполнитьСтавкуНДС.Вставить("НалогообложениеНДС", СлужебныеПараметрыФормы.РеквизитыДоговора.НалогообложениеНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, Неопределено);
	
	НастроитьЗависимыеЭлементыФормыНаСервере("НалогообложениеНДС");
	
	СтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПриведеннаяСтоимость(Объект, РеквизитыДоговора, ПредыдущиеУсловия)

	КоэффициентРаспределения = УчетАрендованныхОСКлиентСервер.КоэффициентРаспределенияСтоимости(Объект.ОС, РеквизитыДоговора);
	
	СтоимостьДобавленныхПредметовАренды = УчетАрендованныхОСКлиентСервер.СтоимостьДобавленныхПредметовАренды(Объект.ОС);
			
	ПриведеннаяСтоимость = 
		ПредыдущиеУсловия.ПриведеннаяСтоимость
		* КоэффициентРаспределения
		+ СтоимостьДобавленныхПредметовАренды;
				
	Возврат ПриведеннаяСтоимость;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПоПредыдущимУсловиямЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьПоПредыдущимУсловиямНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоПредыдущимУсловиямНаСервере()
	
	Документы.ИзменениеУсловийДоговораАренды.ЗаполнитьНаОснованииДоговораАренды(Объект, Истина); 
	ЗаполнитьСлужебныеРеквизитыТЧ();
	НастроитьЗависимыеЭлементыФормыНаСервере("Договор");
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыОС()
	
	ЕстьДобавляемыеОС = Ложь;
	ЕстьИсключаемыеОС = Ложь;
	ЕстьВыкупаемыеОС = Ложь;
	
	Если ТипДоговора = Перечисления.ТипыДоговоровАренды.Лизинг Тогда
		ЕстьВыкупаемыеОС = Объект.ОС.НайтиСтроки(Новый Структура("ДействиеСПредметомАренды",
			Перечисления.ДействияСПредметамиАренды.ДосрочныйВыкуп)).Количество() > 0;
	ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоровАренды.Аренда Тогда
		ЕстьДобавляемыеОС = Объект.ОС.НайтиСтроки(Новый Структура("ДействиеСПредметомАренды",
			Перечисления.ДействияСПредметамиАренды.ВзятиеВАренду)).Количество() > 0;
		ЕстьИсключаемыеОС = Объект.ОС.НайтиСтроки(Новый Структура("ДействиеСПредметомАренды",
			Перечисления.ДействияСПредметамиАренды.ПрекращениеАренды)).Количество() > 0;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьАктуальныеУсловияДоговора()
	
	АктуальныеПредыдущиеУсловияДоговора
		= Документы.ИзменениеУсловийДоговораАренды.ПредыдущиеУсловияДоговораАренды(Объект.Ссылка, Объект.Договор, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Перезаполнить = Истина;
	Иначе
		Перезаполнить = Ложь;
	КонецЕсли;
	ДатаПриИзмененииНаСервере(Перезаполнить);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредыдущиеУсловия()
	
	ПредыдущиеУсловия = УчетАрендованныхОС.СтоимостьПоПредыдущимУсловиям(Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
