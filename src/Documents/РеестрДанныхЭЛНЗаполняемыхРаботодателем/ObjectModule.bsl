#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
		
		// Обработчик кнопки "Создать еще один реестр", которая выводится когда приняты не все ЭЛН.
		
		// Заполнение реквизитов шапки.
		ИменаНаследуемыхРеквизитов = "Организация, РегистрационныйНомерФСС, ДополнительныйКодФСС, КодПодчиненностиФСС";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, ИменаНаследуемыхРеквизитов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов);
		
		// Заполнение таблицы теми ЭЛН, которые еще не приняты ФСС.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", Основание);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
		|ИЗ
		|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ДанныеЭЛН
		|ГДЕ
		|	ДанныеЭЛН.Ссылка = &Основание";
		ВключаемыеЭЛН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерЛисткаНетрудоспособности");
		
		ТаблицаОснований = РегистрыСведений.СведенияОбЭЛН.ТаблицаОснованийДляРеестраЭЛН(Организация, Неопределено, ВключаемыеЭЛН, Неопределено, 30);
		Для Каждого СтрокаТаблицы Из ТаблицаОснований Цикл
			ЗаполнитьЗначенияСвойств(ДанныеЭЛН.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	// Обработчик кнопки "Создать следующий реестр", которая выводится когда достигнуто ограничение в 30 ЭЛН.
	
	// Очистка реквизитов шапки.
	ДатаПолученияОтветаФСС = Неопределено;
	СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ВРаботе;
	РеестрСоставил = Неопределено;
	ТелефонСоставителя = Неопределено;
	АдресЭлектроннойПочтыСоставителя = Неопределено;
	ДокументОснование = Неопределено;
	
	// Заполнение таблицы теми ЭЛН, которые требуется отправить и еще не включены в исходный документ.
	ДанныеЭЛН.Очистить();
	Если ЗначениеЗаполнено(Организация) Тогда
		УжеДобавленныеЭЛН = ОбъектКопирования.ДанныеЭЛН.Выгрузить(, "НомерЛисткаНетрудоспособности").ВыгрузитьКолонку("НомерЛисткаНетрудоспособности");
		ТаблицаОснований = РегистрыСведений.СведенияОбЭЛН.ТаблицаОснованийДляРеестраЭЛН(Организация, Неопределено, Неопределено, УжеДобавленныеЭЛН, 30);
		Для Каждого СтрокаТаблицы Из ТаблицаОснований Цикл
			ЗаполнитьЗначенияСвойств(ДанныеЭЛН.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛисткиНетрудоспособности", ДанныеЭЛН.Выгрузить(,"НомерСтроки, Больничный"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛисткиНетрудоспособности.НомерСтроки,
	|	ЛисткиНетрудоспособности.Больничный
	|ПОМЕСТИТЬ ВТЛисткиНетрудоспособности
	|ИЗ
	|	&ЛисткиНетрудоспособности КАК ЛисткиНетрудоспособности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТЛисткиНетрудоспособности.НомерСтроки) КАК НомерСтроки,
	|	ЛисткиНетрудоспособностиПовторы.НомерСтроки КАК НомерСтрокиПовтора,
	|	ВТЛисткиНетрудоспособности.Больничный КАК Больничный
	|ИЗ
	|	ВТЛисткиНетрудоспособности КАК ВТЛисткиНетрудоспособности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛисткиНетрудоспособности КАК ЛисткиНетрудоспособностиПовторы
	|		ПО ВТЛисткиНетрудоспособности.Больничный = ЛисткиНетрудоспособностиПовторы.Больничный
	|			И ВТЛисткиНетрудоспособности.НомерСтроки < ЛисткиНетрудоспособностиПовторы.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЛисткиНетрудоспособности.Больничный,
	|	ЛисткиНетрудоспособностиПовторы.НомерСтроки
	|ИТОГИ ПО
	|	Больничный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЛисткиНетрудоспособности.Больничный,
	|	ВТЛисткиНетрудоспособности.НомерСтроки
	|ИЗ
	|	ВТЛисткиНетрудоспособности КАК ВТЛисткиНетрудоспособности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныеЛисты
	|		ПО ВТЛисткиНетрудоспособности.Больничный = БольничныеЛисты.Ссылка
	|ГДЕ
	|	НЕ БольничныеЛисты.Проведен";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ПовторяющиесяЛН = МассивРезультатов[1];
	НепроведенныеЛН = МассивРезультатов[2];
	
	ИмяТаблицы = "ДанныеЭЛН";
	
	Если Не ПовторяющиесяЛН.Пустой() Тогда
		Выборка = ПовторяющиесяЛН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Текст = НСтр("ru = '%1 использован в нескольких строках: %2.';
						|en = '%1 is used in several lines: %2.'");
			ВыборкаПоЛН = Выборка.Выбрать();
			Если ВыборкаПоЛН.Следующий() Тогда
				ТекстПовторныеСтроки = "" + ВыборкаПоЛН.НомерСтроки + ", " + ВыборкаПоЛН.НомерСтрокиПовтора;
				Пока ВыборкаПоЛН.Следующий() Цикл
					ТекстПовторныеСтроки  = ТекстПовторныеСтроки + ", " + ВыборкаПоЛН.НомерСтрокиПовтора;
				КонецЦикла;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.Больничный, ТекстПовторныеСтроки);
				СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Выборка.НомерСтроки, "Больничный");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не НепроведенныеЛН.Пустой() Тогда
		Выборка = НепроведенныеЛН.Выбрать();
		Пока Выборка.Следующий() Цикл
			Текст = НСтр("ru = 'Листок нетрудоспособности в строке %1 не проведен.';
						|en = 'Sick leave record in line %1 is not posted.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.НомерСтроки);
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Выборка.НомерСтроки, "Больничный");
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеЭЛН Цикл
		Если Не ЗначениеЗаполнено(Строка.НомерЛисткаНетрудоспособности) Тогда
			Текст = НСтр("ru = 'Номер листка нетрудоспособности обязателен к заполнению';
						|en = 'It is required to fill in sick leave record No.'");
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Строка.НомерСтроки, "НомерЛисткаНетрудоспособности");
		КонецЕсли;
		Если Найти("," + Строка.УсловияИсчисленияКод1 + "," + Строка.УсловияИсчисленияКод2 + "," + Строка.УсловияИсчисленияКод3 + ",", ",43,") > 0
			И Не ЗначениеЗаполнено(Строка.ФинансированиеФедеральнымБюджетом) Тогда
			Текст = НСтр("ru = 'Для лица, подвергшегося воздействию радиации, не указана причина этого воздействия';
						|en = 'Impact reason is not specified for a person exposed to radiation '");
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Строка.НомерСтроки, "ВыплатаЗаСчетФедеральногоБюджета");
		КонецЕсли;
		Если Строка.Исправление И Не ЗначениеЗаполнено(Строка.КодПричиныИсправления) И Не ЗначениеЗаполнено(Строка.ОписаниеПричиныИсправления) Тогда
			Текст = НСтр("ru = 'Не указана причина исправления';
						|en = 'Reason for correction is not specified'");
			СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, Строка.НомерСтроки, "КодПричиныИсправления");
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДанныеЭЛН.НомерЛисткаНетрудоспособности");
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ПустаяСсылка()
		Или СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ВРаботе) Тогда
		СостояниеРеестра = Перечисления.СостоянияРеестровФСС.Подготовлен;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И СостояниеРеестра = Перечисления.СостоянияРеестровФСС.Подготовлен Тогда
		СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ВРаботе;
	КонецЕсли;
	РегистрыСведений.СведенияОбЭЛН.ПередЗаписьюРеестра(ЭтотОбъект, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.СведенияОбЭЛН.ПриЗаписиРеестра(ЭтотОбъект);
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.СведенияОбЭЛН.ПередУдалениемРеестра(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкиЗаполненияПоРегламентуФСС

Функция ПроверитьЗаполнениеПоРегламентуФСС() Экспорт
	Отказ = Ложь;
	
	Для Каждого СтрокаТаблицы Из ДанныеЭЛН Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СНИЛС) Тогда
			СообщитьОбОшибке(Отказ, Неопределено, "ДанныеЭЛН", СтрокаТаблицы.НомерСтроки, "СНИЛС");
		КонецЕсли;
		
		Если СтрокаТаблицы.Исправление Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.КодПричиныИсправления) Тогда
				СообщитьОбОшибке(Отказ, Неопределено, "ДанныеЭЛН", СтрокаТаблицы.НомерСтроки, "КодПричиныИсправления");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОписаниеПричиныИсправления) Тогда
				СообщитьОбОшибке(Отказ, Неопределено, "ДанныеЭЛН", СтрокаТаблицы.НомерСтроки, "ОписаниеПричиныИсправления");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ;
КонецФункции

#КонецОбласти

#Область БазоваяФункциональностьПроверокЗаполнения

Процедура СообщитьОбОшибке(Отказ, Текст, ИмяТаблицы, НомерСтроки, ИмяРеквизита)
	Если Текст = Неопределено Тогда
		Текст = НСтр("ru = 'Не заполнено поле ""%1"".';
					|en = 'Field %1 is required.'");
		Если ИмяТаблицы = Неопределено Тогда
			Текст = СтрШаблон(Текст, Метаданные().Реквизиты[ИмяРеквизита].Представление());
		Иначе
			Текст = СтрШаблон(Текст, Метаданные().ТабличныеЧасти[ИмяТаблицы].Реквизиты[ИмяРеквизита].Представление());
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Истина;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Если ИмяТаблицы = Неопределено Тогда
		Сообщение.Поле = ИмяРеквизита;
	Иначе
		Сообщение.Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, НомерСтроки, ИмяРеквизита);
	КонецЕсли;
	Сообщение.Сообщить();
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Если ОбновитьДанныеСтрахователя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеЭЛН(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьДанныеФизическогоЛица(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ОбновитьСостояниеВШапке(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Если ЗначениеЗаполнено(ДатаПолученияОтветаФСС) Тогда
		Возврат Истина; // Дата не выведена в интерфейс, заполняется при фактическом получении ответа от ФСС.
	КонецЕсли;
	
	Если Проведен И Не ПометкаУдаления
		И (СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ПринятФСС
			Или СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ЧастичноПринятФСС
			Или СостояниеРеестра = Перечисления.СостоянияРеестровФСС.НеПринятФСС) Тогда
		Возврат Истина; // Реестр проведен и пользователь вручную установил состояние.
	КонецЕсли;
	
	Возврат Ложь; // Реестр не отправлялся в ФСС, не проведен и не в конечном состоянии.
КонецФункции

Функция ОбновитьДанныеСтрахователя(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаРеквизитов = 
	"РегистрационныйНомерФСС,
	|КодПодчиненностиФСС,
	|ДополнительныйКодФСС,
	|НаименованиеТерриториальногоОрганаФСС,
	|ОГРН,
	|ТелОрганизации,
	|АдресЭлектроннойПочтыОрганизации,
	|ИННЮЛ,
	|КППЮЛ";
	Сведения = СЭДОФСС.СведенияОСтрахователе(Организация, ИменаРеквизитов, Дата);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("РегистрационныйНомерФСС",               Сведения.РегистрационныйНомерФСС);
	Реквизиты.Вставить("КодПодчиненностиФСС",                   Сведения.КодПодчиненностиФСС);
	Реквизиты.Вставить("ДополнительныйКодФСС",                  Сведения.ДополнительныйКодФСС);
	Реквизиты.Вставить("НаименованиеТерриториальногоОрганаФСС", Сведения.НаименованиеТерриториальногоОрганаФСС);
	Реквизиты.Вставить("ОГРН",                                  Сведения.ОГРН);
	Реквизиты.Вставить("ТелефонОрганизации",                    Сведения.ТелОрганизации);
	Реквизиты.Вставить("ИНН",                                   Сведения.ИННЮЛ);
	Реквизиты.Вставить("КПП",                                   Сведения.КППЮЛ);
	Реквизиты.Вставить("ТелефонСоставителя",                    Сведения.ТелОрганизации);
	Реквизиты.Вставить("АдресЭлектроннойПочтыСоставителя",      Сведения.АдресЭлектроннойПочтыОрганизации);
	
	СведенияОПодписях = ПодписиДокументов.СведенияОПодписяхПоУмолчаниюДляОбъектаМетаданных(Метаданные(), Организация);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Реквизиты, СведенияОПодписях, Истина);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеЭЛН(ПараметрыФиксации)
	Если ДанныеЭЛН.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ТаблицаОснований = ДанныеЭЛН.Выгрузить(, "Больничный, НомерЛисткаНетрудоспособности");
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	Запрос = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ЗапросПоПервичнымДокументам(
		ТаблицаОснований,
		Ссылка,
		ГоловнаяОрганизация,
		"ВТВторичныеДанные");
	Если Запрос = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос.Выполнить();
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект, "ДанныеЭЛН", "ВТВторичныеДанные", ПараметрыФиксации);
КонецФункции

Функция ОбновитьДанныеФизическогоЛица(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("РеестрСоставил", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "ФизическоеЛицо"));
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ОбновитьСостояниеВШапке(ПараметрыФиксации)
	РеквизитыДокумента = Новый Структура("СостояниеРеестра", СостояниеДокументаИзСостоянийЭЛН());
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыДокумента, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция СостояниеДокументаИзСостоянийЭЛН() Экспорт
	ЕстьНеопределенные = (ДанныеЭЛН.Найти(Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПустаяСсылка(), "Состояние") <> Неопределено);
	ЕстьПринятые = (ДанныеЭЛН.Найти(Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС, "Состояние") <> Неопределено);
	ЕстьНеПринятые = (ДанныеЭЛН.Найти(Перечисления.СостоянияЭЛНВРеестрахЭЛН.НеПринятФСС, "Состояние") <> Неопределено);
	
	Если Не ЕстьНеопределенные Тогда
		Если ЕстьПринятые И ЕстьНеПринятые Тогда
			Возврат Перечисления.СостоянияРеестровФСС.ЧастичноПринятФСС;
		ИначеЕсли ЕстьПринятые Тогда
			Возврат Перечисления.СостоянияРеестровФСС.ПринятФСС;
		ИначеЕсли ЕстьНеПринятые Тогда
			Возврат Перечисления.СостоянияРеестровФСС.НеПринятФСС;
		КонецЕсли;
	КонецЕсли;
	
	Если Проведен Тогда
		Возврат Перечисления.СостоянияРеестровФСС.Подготовлен;
	КонецЕсли;
	
	Возврат Перечисления.СостоянияРеестровФСС.ВРаботе;
КонецФункции

#КонецОбласти

#Область ФормаЭлемента

Функция ВсеЭЛНПринятыФСС() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	Т.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТДанныеЭЛН
	|ИЗ
	|	&ДанныеЭЛН КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	ВТДанныеЭЛН КАК ВТДанныеЭЛН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ПО ВТДанныеЭЛН.НомерЛисткаНетрудоспособности = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|			И (СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (СведенияОбЭЛН.ИзмененияПринятыФСС = ЛОЖЬ)";
	Запрос.УстановитьПараметр("ДанныеЭЛН", ДанныеЭЛН.Выгрузить(, "НомерЛисткаНетрудоспособности, Состояние"));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли