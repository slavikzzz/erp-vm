///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если СтрСравнить(ВидФормы, "ФормаОбъекта") = 0 Тогда
		Значения = ОбщегоНазначенияБЗК.ЗначенияСвойств(Параметры, "Ключ, Основание, ГоловнаяОрганизация, ФизическоеЛицо");
		Если ЗначениеЗаполнено(Значения.Ключ) Тогда
			Возврат;
		КонецЕсли;
		Основание           = Значения.Основание;
		ГоловнаяОрганизация = Значения.ГоловнаяОрганизация;
		ФизическоеЛицо      = Значения.ФизическоеЛицо;
		Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Если ТипЗнч(Значения.Основание) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание, "Организация, ФизическоеЛицо");
				ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеквизитыОснования.Организация);
				ФизическоеЛицо      = РеквизитыОснования.ФизическоеЛицо;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сведения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СведенияОЗастрахованномЛицеФСС КАК Сведения
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗастрахованныеЛицаСЭДО КАК ЗастрахованныеЛицаСЭДО
			|		ПО Сведения.Ссылка = ЗастрахованныеЛицаСЭДО.ПоследниеСведения
			|			И Сведения.Ссылка <> ЗастрахованныеЛицаСЭДО.ОтправленныеСведения
			|ГДЕ
			|	Сведения.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И Сведения.ФизическоеЛицо = &ФизическоеЛицо
			|	И НЕ Сведения.ПометкаУдаления
			|	И Сведения.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
			|	И НЕ ЗастрахованныеЛицаСЭДО.ПоследниеСведения ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сведения.Дата УБЫВ";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтандартнаяОбработка = Ложь;
				Параметры.Вставить("Ключ", Выборка.Ссылка);
				ВыбраннаяФорма = "Документ.СведенияОЗастрахованномЛицеФСС.Форма.ФормаДокумента";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Макеты = Метаданные.Документы.СведенияОЗастрахованномЛицеФСС.Макеты;
	ДатаФорм2022 = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2022();
	ДатаФорм2024 = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2024();
	
	Макет = Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2021;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик     = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.СведенияОЗастрахованномЛицеФСС";
	КомандаПечати.Идентификатор  = Макет.Имя;
	КомандаПечати.Представление  = Макет.Представление();
	КомандаПечати.Порядок        = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2022, ВидСравнения.Меньше);
	
	Макет = Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2022;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик     = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.СведенияОЗастрахованномЛицеФСС";
	КомандаПечати.Идентификатор  = Макет.Имя;
	КомандаПечати.Представление  = Макет.Представление();
	КомандаПечати.Порядок        = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2022, ВидСравнения.БольшеИлиРавно);
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2024, ВидСравнения.Меньше);
	
	Макет = Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2024;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик     = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.СведенияОЗастрахованномЛицеФСС";
	КомандаПечати.Идентификатор  = Макет.Имя;
	КомандаПечати.Представление  = Макет.Представление();
	КомандаПечати.Порядок        = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Дата", ДатаФорм2024, ВидСравнения.БольшеИлиРавно);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	МенеджерПечати = Документы.СведенияОЗастрахованномЛицеФСС;
	УправлениеПечатьюБЗК.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, МенеджерПечати);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ЗарплатаКадрыПодсистемы

// Формирует печатную форму. Вызывается из УправлениеПечатьюБЗК.Печать.
//
// Параметры:
//   КонтекстПечати - Структура - См. УправлениеПечатьюБЗК.КонтекстПечати.
//
Процедура ПриФормированииПечатнойФормы(КонтекстПечати) Экспорт
	
	Выборка = ВыборкаПоДокументам(КонтекстПечати.МассивОбъектов);
	Макеты = Метаданные.Документы.СведенияОЗастрахованномЛицеФСС.Макеты;
	Если КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2021 Тогда
		ПриПечатиСведенийОЗастрахованномЛицеФСС_2021(КонтекстПечати, Выборка);
	ИначеЕсли КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2022
		Или КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2024 Тогда
		ПриПечатиСведенийОЗастрахованномЛицеФСС_2022(КонтекстПечати, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//  Параметры                  - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ОтзывСогласияНаОбработкуПерсональныхДанных.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
//  Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.СведенияОЗастрахованномЛицеФСС);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТекстXML(Документ) Экспорт
	МенеджерXML = Обработки.ПостроительXML.Создать();
	МенеджерXML.ФорматДат = "ДФ=yyyy-MM-dd; ДП=";
	
	// В корне 1 элемент: Сведения о застрахованном лице.
	КореньXML = МенеджерXML.ДобавитьУзел(МенеджерXML.ДеревоXML, "urn:insuredPerson");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "urn", "urn:ru:fss:integration:types:rpu:InsuredPerson:v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "v02", "http://www.fss.ru/integration/types/person/v02");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "common", "http://www.fss.ru/integration/types/common/v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	// ФИО.
	УзелФИО = МенеджерXML.ДобавитьУзел(КореньXML, "urn:fullName");
	МенеджерXML.ДобавитьУзел(УзелФИО, "v02:firstName",  Документ.СотрудникИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "v02:lastName",   Документ.СотрудникФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "v02:middleName", Документ.СотрудникОтчество, Истина);
	
	// Дата рождения, СНИЛС.
	Пол   = ?(Документ.Пол = Перечисления.ПолФизическогоЛица.Женский, "FEMALE", "MALE");
	СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(Документ.СНИЛС);
	МенеджерXML.ДобавитьУзел(КореньXML, "urn:birthDate", Документ.ДатаРождения);
	МенеджерXML.ДобавитьУзел(КореньXML, "urn:gender",    Пол);
	МенеджерXML.ДобавитьУзел(КореньXML, "urn:snils",     СНИЛС);
	
	Если Документ.НеЧислилсяВОрганизации Тогда
		// Не является сотрудником.
		МенеджерXML.ДобавитьУзел(КореньXML, "urn:isNotWorker", Документ.НеЧислилсяВОрганизации);
	ИначеЕсли ЗначениеЗаполнено(Документ.ДатаУвольнения) Тогда
		// Дата увольнения.
		УзелXML = МенеджерXML.ДобавитьУзел(КореньXML, "urn:fired");
		МенеджерXML.ДобавитьУзел(УзелXML, "urn:date", Документ.ДатаУвольнения);
	Иначе
		// ИНН.
		МенеджерXML.ДобавитьУзел(КореньXML, "urn:inn", Документ.СотрудникИНН, Истина);
		
		// Удостоверение личности.
		УдостоверениеЛичностиXML = МенеджерXML.ДобавитьУзел(КореньXML, "urn:identityDocument");
		СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(Документ.УдостоверениеЛичностиВид);
		Если СведенияОВидеДокумента.ЭтоПаспортРФ Тогда
			УзелXML = МенеджерXML.ДобавитьУзел(УдостоверениеЛичностиXML, "urn:passport");
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:series",    УбратьПробелы(Документ.УдостоверениеЛичностиСерия));
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:number",    УбратьПробелы(Документ.УдостоверениеЛичностиНомер));
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:issueDate", Документ.УдостоверениеЛичностиДатаВыдачи);
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:whoIssued", Документ.УдостоверениеЛичностиКемВыдан);
		ИначеЕсли ЭтоВременноеУдостоверениеЛичности(СведенияОВидеДокумента.КодМВД) Тогда
			УзелXML = МенеджерXML.ДобавитьУзел(УдостоверениеЛичностиXML, "urn:tempIdentDocType");
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:number",         УбратьПробелы(Документ.УдостоверениеЛичностиНомер));
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:issueDate",      Документ.УдостоверениеЛичностиДатаВыдачи, Истина);
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:whoIssued",      Документ.УдостоверениеЛичностиКемВыдан, Истина);
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:expirationDate", Документ.УдостоверениеЛичностиСрокДействия);
		Иначе
			УзелXML = МенеджерXML.ДобавитьУзел(УдостоверениеЛичностиXML, "urn:otherIdentDocType");
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:type",           УбратьПробелы(СведенияОВидеДокумента.КодФСС));
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:series",         УбратьПробелы(Документ.УдостоверениеЛичностиСерия), Истина);
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:number",         УбратьПробелы(Документ.УдостоверениеЛичностиНомер));
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:expirationDate", Документ.УдостоверениеЛичностиСрокДействия, Истина, Ложь);
		КонецЕсли;
		
		// Документ подтверждающий постоянное или временне проживание (пребывание) на территории РФ
		// (для иностранных граждан и лиц без гражданства).
		Если ТребуетсяВыгрузитьРазрешениеНаПроживание(Документ) Тогда
			СведенияОВиде = СЭДОФСС.СведенияОВидеРазрешенияНаПроживание(Документ.РазрешениеНаПроживаниеВид);
			Если СведенияОВиде.ЭтоВНЖ Тогда // Вид на жительство.
				РазрешениеНаПроживаниеXML = МенеджерXML.ДобавитьУзел(КореньXML, "urn:residenceDocumentType");
				УзелXML = МенеджерXML.ДобавитьУзел(РазрешениеНаПроживаниеXML, "urn:residentCard");
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:series",            УбратьПробелы(Документ.РазрешениеНаПроживаниеСерия));
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:number",            УбратьПробелы(Документ.РазрешениеНаПроживаниеНомер));
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:passportIssueDate", Документ.РазрешениеНаПроживаниеДатаВыдачи);
			ИначеЕсли СведенияОВиде.ЭтоРВП Тогда // Разрешение на временное проживание или пребывание.
				РазрешениеНаПроживаниеXML = МенеджерXML.ДобавитьУзел(КореньXML, "urn:residenceDocumentType");
				УзелXML = МенеджерXML.ДобавитьУзел(РазрешениеНаПроживаниеXML, "urn:tempResidencePermit");
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:series",            УбратьПробелы(Документ.РазрешениеНаПроживаниеСерия));
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:number",            УбратьПробелы(Документ.РазрешениеНаПроживаниеНомер));
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:issueDate",         Документ.РазрешениеНаПроживаниеДатаВыдачи);
			КонецЕсли;
		КонецЕсли;
		
		// Льготы ("Иные сведения").
		ПричинаЧислом = СЭДОФСС.ПричинаПредоставленияЛьготыЧислом(Документ.ПричинаПредоставленияЛьготы);
		ВидЧислом = СЭДОФСС.ВидОсобойЗоныЧислом(Документ.ВидОсобойЗоны);
		Если ПричинаЧислом <> Неопределено Или ВидЧислом <> Неопределено Тогда
			УзелXML = МенеджерXML.ДобавитьУзел(КореньXML, "urn:otherInfo");
			// Проживание / работа в особой зоне.
			Если Документ.ОтношениеКОсобойЗоне = Перечисления.ОтношениеКОсобойЗоне.Работает Тогда
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:workplace", ВидЧислом, Истина);
			ИначеЕсли Документ.ОтношениеКОсобойЗоне = Перечисления.ОтношениеКОсобойЗоне.Проживает Тогда
				МенеджерXML.ДобавитьУзел(УзелXML, "urn:livingPlace", ВидЧислом, Истина);
			КонецЕсли;
			// Причина воздействия радиации.
			МенеджерXML.ДобавитьУзел(УзелXML, "urn:causeRadiation", ПричинаЧислом, Ложь);
		КонецЕсли;
		
		// Адрес регистрации.
		Если ТребуетсяВыгружатьАдресРегистрации(Документ) Тогда
			УзелXML = МенеджерXML.ДобавитьУзел(КореньXML, "urn:regAddress");
			ЗаписатьАдрес(МенеджерXML, УзелXML, Документ, "АдресРегистрации", "urn:postalCode", "urn:fiasAddress");
		КонецЕсли;
		
		// Способ выплаты пособий.
		СпособВыплатыXML = МенеджерXML.ДобавитьУзел(КореньXML, "urn:methodReceivePayment", , Истина);
		Если Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
			УзелXML = МенеджерXML.ДобавитьУзел(СпособВыплатыXML, "common:bankInfo");
			МенеджерXML.ДобавитьУзел(УзелXML, "common:bankName",   Документ.БанкНаименование);
			МенеджерXML.ДобавитьУзел(УзелXML, "common:bik",        Документ.БанкБИК);
			МенеджерXML.ДобавитьУзел(УзелXML, "common:accountNum", Документ.НомерСчета);
		ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
			НомерКарты = БанковскиеКарты.ПолныйНомерКарты(Документ.КартаМИР);
			МенеджерXML.ДобавитьУзел(СпособВыплатыXML, "common:cardMir", УбратьПробелы(НомерКарты));
		ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
			ЗаписатьАдрес(МенеджерXML, СпособВыплатыXML, Документ, "АдресПроживания", "common:postalCode", "common:currentFiasAddress");
		ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
			Узел = МенеджерXML.ДобавитьУзел(СпособВыплатыXML, "common:otherOrg");
			МенеджерXML.ДобавитьУзел(Узел, "common:nameOrg",                    Документ.ИнаяОрганизацияНаименование);
			МенеджерXML.ДобавитьУзел(Узел, "common:bik",                        Документ.ИнаяОрганизацияБИК);
			МенеджерXML.ДобавитьУзел(Узел, "common:accountNum",                 Документ.ИнаяОрганизацияНомерСчетаСтрахователя);
			МенеджерXML.ДобавитьУзел(Узел, "common:personalOrgAccount",         Документ.ИнаяОрганизацияЛицевойСчетОрганизации, Истина);
			МенеджерXML.ДобавитьУзел(Узел, "common:personalInsuredAccount",     Документ.ИнаяОрганизацияЛицевойСчетСотрудника, Истина);
			МенеджерXML.ДобавитьУзел(Узел, "common:kbk",                        Документ.ИнаяОрганизацияКБК, Истина);
			Если ЗначениеЗаполнено(Документ.ИнаяОрганизацияРегистрационныйНомерСФР) Тогда
				МенеджерXML.ДобавитьУзел(Узел, "common:regNumCorrectionalFacility",    Документ.ИнаяОрганизацияРегистрационныйНомер, Истина);
				МенеджерXML.ДобавитьУзел(Узел, "common:regNumSFRCorrectionalFacility", Документ.ИнаяОрганизацияРегистрационныйНомерСФР);
			Иначе
				МенеджерXML.ДобавитьУзел(Узел, "common:regNumCorrectionalFacility", Документ.ИнаяОрганизацияРегистрационныйНомер);
			КонецЕсли;
			МенеджерXML.ДобавитьУзел(Узел, "common:innCorrectionalFacility",    Документ.ИнаяОрганизацияИНН);
			МенеджерXML.ДобавитьУзел(Узел, "common:kppCorrectionalFacility",    Документ.ИнаяОрганизацияКПП);
		КонецЕсли;
	КонецЕсли;
	
	МенеджерXML.НачатьЗаписьВСтрокуXML(Ложь);
	СтрокаXML = МенеджерXML.СтрокаXML();
	СтрокаXML = СтрЗаменить(
		СтрокаXML,
		"xmlns:common=""http://www.fss.ru/integration/types/common/v01"" xmlns:v02=""http://www.fss.ru/integration/types/person/v02""",
		"xmlns:v02=""http://www.fss.ru/integration/types/person/v02"" xmlns:common=""http://www.fss.ru/integration/types/common/v01""");
	Возврат СтрокаXML;
КонецФункции

Функция ТипСообщения() Экспорт
	Возврат 86;
КонецФункции

Процедура ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки) Экспорт
	ИменаРеквизитовСтроки = "Ссылка, Номер, Дата, ФизическоеЛицо, Организация";
	
	ИменаРеквизитов = "Ссылка, РегистрацияСведений, Номер, Дата, ДатаОтправки, Организация, ГоловнаяОрганизация,
	|ФизическоеЛицо, СотрудникФамилия, СотрудникИмя, СотрудникОтчество, СНИЛС, ХранилищеXML, ПометкаУдаления, Проведен";
	МетаданныеДокумента = Метаданные.Документы.СведенияОЗастрахованномЛицеФСС;
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	ЗапросыБЗК.ДобавитьОтбор(НастройкиЗапроса.Отбор, "Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, МассивСсылок);
	Запрос = ЗапросыБЗК.ЗапросКТаблице(МетаданныеДокумента, ИменаРеквизитов, НастройкиЗапроса);
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Документ Из ДанныеДокументов Цикл
		// Добавление строки отправки и заполнение представления.
		СтрокаОтправки = ТаблицаОтправки.Добавить();
		СтрокаОтправки.ДополнительныеПараметры = Новый Структура;
		ЗаполнитьЗначенияСвойств(СтрокаОтправки, Документ, ИменаРеквизитовСтроки);
		Если Не ЗначениеЗаполнено(СтрокаОтправки.ФизическоеЛицо) Тогда
			СтрокаОтправки.ФизическоеЛицо = СтрШаблон(
				НСтр("ru = '%2 %3 %4 (СНИЛС %1)';
					|en = '%2%3%4 (SNILS %1)'"),
				Документ.СНИЛС,
				Документ.СотрудникФамилия,
				Документ.СотрудникИмя,
				Документ.СотрудникОтчество);
		КонецЕсли;
		СтрокаОтправки.ТипСообщения = ТипСообщения();
		СтрокаОтправки.ТекстXML     = Документ.ХранилищеXML.Получить();
		СтрокаОтправки.Отправить    = Ложь;
		СтрокаОтправки.ШаблонОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось отправить сведения о застрахованном лице по сотруднику %1:%2';
				|en = 'Cannot send the insured person details by employee %1:%2'"),
			СтрокаОтправки.ФизическоеЛицо,
			"%1");
		// Проверки и обновление вторичных данных документа перед отправкой.
		Если Документ.ПометкаУдаления Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиУдален();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ помечен на удаление';
											|en = 'The document is marked for deletion'");
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
			Если НачалоДня(Документ.ДатаОтправки) <= ТекущаяДатаСеанса() Тогда
				Текст = НСтр("ru = 'Документ уже отправлен %1';
							|en = 'The document is already sent %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДЛФ=D"));
			Иначе
				Текст = НСтр("ru = 'Документ уже отправлен в %1';
							|en = 'The document is already sent to %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДФ=HH:mm"));
			КонецЕсли;
			СтрокаОтправки.ЗначениеРасшифровки = Документ.РегистрацияСведений;
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
			ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, "");
			Если Не ДокументОбъект.ОтключитьПроверкиПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Проведение документа если требуется.
		ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанные();
		СтрокаОтправки.Отправить = Истина;
		Если ЕстьИзменения Или Не ДокументОбъект.Проведен Тогда
			Попытка
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПроведен();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаполнитьЗначенияСвойств(СтрокаОтправки, ДокументОбъект, ИменаРеквизитовСтроки);
				СтрокаОтправки.ТекстXML = ДокументОбъект.ХранилищеXML.Получить();
			Исключение
				СтрокаОтправки.Отправить = Ложь;
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
				СтрокаОтправки.ЗначениеРасшифровки = Документ.Ссылка;
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки) Экспорт
	// Действие не требуется.
КонецПроцедуры

// См. СЭДОФСС.ЗарегистрироватьНепосредственныйРезультатОтправкиДокумента.
Процедура ЗарегистрироватьРезультатОтправки(РезультатОтправки) Экспорт
	РежимЗаписи = ?(РезультатОтправки.Успех, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	// Подготовленный пользователем документ записывается без срабатывания событий.
	ОтправленныйОбъект = РезультатОтправки.Ссылка.ПолучитьОбъект();
	ОтправленныйОбъект.ЗаполнитьРегистрацию();
	ОтправленныйОбъект.ДатаОтправки        = РезультатОтправки.ДатаОтправки;
	ОтправленныйОбъект.Страхователь        = РезультатОтправки.Страхователь;
	ОтправленныйОбъект.ГоловнаяОрганизация = РезультатОтправки.ГоловнаяОрганизация;
	СЭДОФСС.ЗаписатьДокумент(ОтправленныйОбъект, Истина, Ложь, РежимЗаписи);
	
	// Транспортный документ записывается с событиями БЗК для обновления вторичных регистров.
	РегистрацияОбъект = ОтправленныйОбъект.РегистрацияСведений.ПолучитьОбъект();
	РегистрацияОбъект.ДокументОснование           = ОтправленныйОбъект.Ссылка;
	РегистрацияОбъект.СНИЛС                       = ОтправленныйОбъект.СНИЛС;
	РегистрацияОбъект.ФизическоеЛицо              = ОтправленныйОбъект.ФизическоеЛицо;
	РегистрацияОбъект.Страхователь                = РезультатОтправки.Страхователь;
	РегистрацияОбъект.ГоловнаяОрганизация         = РезультатОтправки.ГоловнаяОрганизация;
	РегистрацияОбъект.ОтправленОператору          = РезультатОтправки.ОтправленоОператору;
	РегистрацияОбъект.Доставлен                   = РезультатОтправки.ДоставленоФонду;
	РегистрацияОбъект.ДатаОтправкиОператору       = РезультатОтправки.ДатаОтправкиОператору;
	РегистрацияОбъект.ДатаОтправки                = РезультатОтправки.ДатаОтправкиФонду;
	РегистрацияОбъект.ДоставкаТекстОшибки         = РезультатОтправки.ТекстОшибки;
	РегистрацияОбъект.ДоставкаИдентификатор       = РезультатОтправки.ИдентификаторСообщения;
	РегистрацияОбъект.ДоставкаИдентификаторПакета = РезультатОтправки.ИдентификаторПакета;
	РегистрацияОбъект.ДополнительныеСвойства.Вставить("РеквизитыСведений", ОтправленныйОбъект);
	СЭДОФСС.ЗаписатьДокумент(РегистрацияОбъект, Истина, "БЗК", РежимЗаписи);
	
	// Оповещение открытых форм.
	РезультатОтправки.Измененные.Добавить(РегистрацияОбъект.Ссылка);
	РезультатОтправки.Измененные.Добавить(ОтправленныйОбъект.Ссылка);
	
	// Гиперссылка в форме результата.
	РезультатОтправки.ЗначениеРасшифровки = ОтправленныйОбъект.РегистрацияСведений;
КонецПроцедуры

// См. СЭДОФСС.ЗагрузитьРезультатДоставкиСообщенияСЭДО.
Процедура ЗагрузитьРезультатДоставкиСообщения86(Страхователь, Сообщение, Результат) Экспорт
	Таблица = Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.НайтиПоИдентификаторуСообщения(
		Страхователь,
		Сообщение.Идентификатор,
		Результат);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		РежимЗаписи = ?(Сообщение.ДоставленоФонду, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение);
		
		// Сначала записывается отправляемый документ, т.к. его данные влияют на данные регистров (кэши).
		Если Не Сообщение.ДоставленоФонду Тогда
			ОтправленныйОбъект = СтрокаТаблицы.ДокументОснование.ПолучитьОбъект();
			ОтправленныйОбъект.ДатаОтправки = '00010101';
			СЭДОФСС.ЗаписатьДокумент(ОтправленныйОбъект, Истина, Ложь, РежимЗаписи);
		КонецЕсли;
		
		// Затем записывается транспортный документ, при его записи - обновляется регистр.
		РегистрацияОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		РегистрацияОбъект.Доставлен           = Сообщение.ДоставленоФонду;
		РегистрацияОбъект.ДатаОтправки        = Сообщение.ДатаОтправкиФонду;
		РегистрацияОбъект.ДоставкаТекстОшибки = Сообщение.ТекстОшибки;
		СЭДОФСС.ЗаписатьДокумент(РегистрацияОбъект, Истина, "БЗК", РежимЗаписи);
		
		// Отметка для БРО и других потребителей что сообщение обработано.
		Результат.Обработано = Истина;
	КонецЦикла;
КонецПроцедуры

Функция ЗаголовокФормыОтправкиСведенийВФСС() Экспорт
	Возврат НСтр("ru = 'Отправка сведений о застрахованных лицах через СЭДО';
				|en = 'Send information on insured persons via EDI'");
КонецФункции

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты());
КонецФункции

// Определяет по данным документа признак фиксации.
//
// Параметры:
//   Документ - ДокументОбъект.СведенияОЗастрахованномЛицеФСС, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Не Документ.ПометкаУдаления И ЗначениеЗаполнено(Документ.ДатаОтправки);
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// Реквизиты организации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Организация";
	Группа.ИмяГруппы           = "Организация";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Страхователь");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховательНаименование");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховательЭлектроннаяПочта");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховательТелефон");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КодПодчиненностиФСС");
	
	// Ответственное лицо УполномоченныйПоПрямымВыплатамФСС.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Организация";
	Группа.ИмяГруппы           = "УполномоченныйПредставитель";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УполномоченныйПредставитель", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УполномоченныйПредставительДолжность", Ложь);
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УполномоченныйПредставительОснованиеПодписи", Ложь);
	
	// Кадровые данные уполномоченного представителя.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "УполномоченныйПредставитель";
	Группа.ИмяГруппы           = "УполномоченныйПредставительКадровыеДанные";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УполномоченныйПредставительФИО");
	
	// Отдельные кадровые данные.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "ФизическоеЛицо";
	ГруппаКадровыеДанные.ИмяГруппы           = "КадровыеДанныеФизическогоЛица";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ДатаРождения");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "Гражданство");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "Пол");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникИНН");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СНИЛС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СтатусНалогоплательщика");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникТелефон");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "АдресРегистрации");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "АдресПроживания");
	
	// Место работы.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "ФизическоеЛицо";
	ГруппаКадровыеДанные.ИмяГруппы           = "МестоРаботы";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "Сотрудник");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ДатаУвольнения");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "НеЧислилсяВОрганизации", Ложь);
	
	// Гражданство.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "Гражданство";
	ГруппаКадровыеДанные.ИмяГруппы           = "Гражданство";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "КодСтраныГражданства");
	
	// Кадровые данные: ФИО.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "ФИО";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникФамилия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникИмя");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникОтчество");
	
	// Кадровые данные: Удостоверение личности.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "УдостоверениеЛичности";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСерия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиДатаВыдачи");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиКемВыдан");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСрокДействия");
	
	// Кадровые данные: Адрес регистрации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "АдресРегистрации";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииИндекс");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииКвартира");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииКорпус");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииНаселенныйПункт");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииРайон");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииРегион");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииУлица");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииФИАСДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииФИАСРО");
	
	// Кадровые данные: Разрешение на проживание.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "РазрешениеНаПроживание";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеСерия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеДатаВыдачи");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РазрешениеНаПроживаниеСрокДействия");
	
	// Кадровые данные: Льготы.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "Льготы";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПричинаПредоставленияЛьготы");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтношениеКОсобойЗоне");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВидОсобойЗоны");
	
	// Способ выплаты пособия.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "СпособВыплатыПособия";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СпособВыплатыПособия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КартаМИР");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Банк");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерСчета");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияВид");
	
	// Способ выплаты пособия: Сведения о банке.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Банк";
	Группа.ИмяГруппы           = "РеквизитыБанка";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкБИК");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкКоррСчет");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкНаименование");
	
	// Способ выплаты пособия: реквизиты адреса проживания.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ФизическоеЛицо";
	Группа.ИмяГруппы           = "АдресПроживания";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияИндекс");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияКвартира");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияКорпус");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияНаселенныйПункт");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияРайон");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияРегион");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияУлица");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияФИАСДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияФИАСРО");
	
	// Способ выплаты пособия: Через иную организацию.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения      = "ФизическоеЛицо";
	Группа.ИмяГруппы                = "СпособВыплатыПособия_ИнаяОрганизация";
	Группа.ФиксацияГруппы           = Истина;
	Группа.ОтображатьПредупреждение = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияБИК");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияИНН");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияКБК");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияКПП");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияЛицевойСчетОрганизации");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияЛицевойСчетСотрудника");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияНаименование");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияНомерСчетаСтрахователя");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияРегистрационныйНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнаяОрганизацияРегистрационныйНомерСФР");
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

Процедура ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, ИмяРеквизита, ОтображатьПредупреждение = Неопределено)
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(
		ФиксируемыеРеквизиты,
		Группа,
		ИмяРеквизита,
		ОтображатьПредупреждение);
КонецПроцедуры

#КонецОбласти

#Область Печать

Функция ВыборкаПоДокументам(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Сведения.Дата < &ДатаОкончанияФормы2021
	|			ТОГДА &ИмяМакета2021
	|		ИНАЧЕ &ИмяМакета2022
	|	КОНЕЦ КАК ИмяМакета,
	|	Сведения.Ссылка КАК Ссылка,
	|	Сведения.Дата КАК Дата,
	|	Сведения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сведения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Сведения.Организация КАК Организация,
	|	Сведения.СтраховательНаименование КАК СтраховательНаименование,
	|	Сведения.СтраховательЭлектроннаяПочта КАК СтраховательЭлектроннаяПочта,
	|	Сведения.СтраховательТелефон КАК СтраховательТелефон,
	|	Сведения.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
	|	Сведения.Ответственный КАК Ответственный,
	|	Сведения.Комментарий КАК Комментарий,
	|	Сведения.ДатаСоздания КАК ДатаСоздания,
	|	Сведения.УполномоченныйПредставитель КАК УполномоченныйПредставитель,
	|	Сведения.УполномоченныйПредставительДолжность КАК УполномоченныйПредставительДолжность,
	|	Сведения.УполномоченныйПредставительФИО КАК УполномоченныйПредставительФИО,
	|	Сведения.УполномоченныйПредставительОснованиеПодписи КАК УполномоченныйПредставительОснованиеПодписи,
	|	Сведения.Сотрудник КАК Сотрудник,
	|	Сведения.СотрудникФамилия КАК СотрудникФамилия,
	|	Сведения.СотрудникИмя КАК СотрудникИмя,
	|	Сведения.СотрудникОтчество КАК СотрудникОтчество,
	|	Сведения.СотрудникИНН КАК СотрудникИНН,
	|	Сведения.СотрудникТелефон КАК СотрудникТелефон,
	|	Сведения.ДатаРождения КАК ДатаРождения,
	|	Сведения.ДатаУвольнения КАК ДатаУвольнения,
	|	Сведения.КодСтраныГражданства КАК КодСтраныГражданства,
	|	Сведения.Пол КАК Пол,
	|	Сведения.СНИЛС КАК СНИЛС,
	|	Сведения.СтатусНалогоплательщика КАК СтатусНалогоплательщика,
	|	Сведения.УдостоверениеЛичностиВид КАК УдостоверениеЛичностиВид,
	|	УдостоверениеЛичностиДанныеВида.КодМВД КАК УдостоверениеЛичностиКодМВД,
	|	УдостоверениеЛичностиДанныеВида.Представление КАК УдостоверениеЛичностиПредставление,
	|	УдостоверениеЛичностиДанныеВида.ИмяПредопределенныхДанных КАК УдостоверениеЛичностиИмяПредопределенныхДанных,
	|	Сведения.УдостоверениеЛичностиСерия КАК УдостоверениеЛичностиСерия,
	|	Сведения.УдостоверениеЛичностиНомер КАК УдостоверениеЛичностиНомер,
	|	Сведения.УдостоверениеЛичностиДатаВыдачи КАК УдостоверениеЛичностиДатаВыдачи,
	|	Сведения.УдостоверениеЛичностиКемВыдан КАК УдостоверениеЛичностиКемВыдан,
	|	Сведения.УдостоверениеЛичностиСрокДействия КАК УдостоверениеЛичностиСрокДействия,
	|	Сведения.РазрешениеНаПроживаниеВид КАК РазрешениеНаПроживаниеВид,
	|	РазрешениеНаПроживаниеДанныеВида.КодМВД КАК РазрешениеНаПроживаниеКодМВД,
	|	РазрешениеНаПроживаниеДанныеВида.Представление КАК РазрешениеНаПроживаниеПредставление,
	|	РазрешениеНаПроживаниеДанныеВида.ИмяПредопределенныхДанных КАК РазрешениеНаПроживаниеИмяПредопределенныхДанных,
	|	Сведения.РазрешениеНаПроживаниеСерия КАК РазрешениеНаПроживаниеСерия,
	|	Сведения.РазрешениеНаПроживаниеНомер КАК РазрешениеНаПроживаниеНомер,
	|	Сведения.РазрешениеНаПроживаниеДатаВыдачи КАК РазрешениеНаПроживаниеДатаВыдачи,
	|	Сведения.РазрешениеНаПроживаниеСрокДействия КАК РазрешениеНаПроживаниеСрокДействия,
	|	Сведения.ПричинаПредоставленияЛьготы КАК ПричинаПредоставленияЛьготы,
	|	Сведения.ОтношениеКОсобойЗоне КАК ОтношениеКОсобойЗоне,
	|	Сведения.ВидОсобойЗоны КАК ВидОсобойЗоны,
	|	Сведения.АдресРегистрации КАК АдресРегистрации,
	|	Сведения.АдресПроживанияФИАСДом КАК АдресПроживанияФИАСДом,
	|	Сведения.АдресПроживанияФИАСРО КАК АдресПроживанияФИАСРО,
	|	Сведения.СпособВыплатыПособия КАК СпособВыплатыПособия,
	|	Сведения.СпособВыплатыПособия = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПособия.ПочтовымПереводом) КАК ВыплатаПочтой,
	|	Сведения.КартаМИР КАК КартаМИР,
	|	Сведения.Банк КАК Банк,
	|	Сведения.БанкБИК КАК БанкБИК,
	|	Сведения.БанкКоррСчет КАК БанкКоррСчет,
	|	Сведения.БанкНаименование КАК БанкНаименование,
	|	Сведения.НомерСчета КАК НомерСчета,
	|	Сведения.АдресПроживания КАК АдресПроживания,
	|	Сведения.АдресПроживанияВид КАК АдресПроживанияВид,
	|	Сведения.ИнаяОрганизацияБИК КАК ИнаяОрганизацияБИК,
	|	Сведения.ИнаяОрганизацияИНН КАК ИнаяОрганизацияИНН,
	|	Сведения.ИнаяОрганизацияКБК КАК ИнаяОрганизацияКБК,
	|	Сведения.ИнаяОрганизацияКПП КАК ИнаяОрганизацияКПП,
	|	Сведения.ИнаяОрганизацияЛицевойСчетОрганизации КАК ИнаяОрганизацияЛицевойСчетОрганизации,
	|	Сведения.ИнаяОрганизацияЛицевойСчетСотрудника КАК ИнаяОрганизацияЛицевойСчетСотрудника,
	|	Сведения.ИнаяОрганизацияНаименование КАК ИнаяОрганизацияНаименование,
	|	Сведения.ИнаяОрганизацияНомерСчетаСтрахователя КАК ИнаяОрганизацияНомерСчетаСтрахователя,
	|	Сведения.ИнаяОрганизацияРегистрационныйНомер КАК ИнаяОрганизацияРегистрационныйНомер,
	|	Сведения.ИнаяОрганизацияРегистрационныйНомерСФР КАК ИнаяОрганизацияРегистрационныйНомерСФР
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК Сведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК УдостоверениеЛичностиДанныеВида
	|		ПО Сведения.УдостоверениеЛичностиВид = УдостоверениеЛичностиДанныеВида.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК РазрешениеНаПроживаниеДанныеВида
	|		ПО Сведения.РазрешениеНаПроживаниеВид = РазрешениеНаПроживаниеДанныеВида.Ссылка
	|ГДЕ
	|	Сведения.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	ДатаФорм2022 = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2022();
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДатаОкончанияФормы2021", ДатаФорм2022);
	
	Макеты = Метаданные.Документы.СведенияОЗастрахованномЛицеФСС.Макеты;
	Запрос.УстановитьПараметр("ИмяМакета2021", Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2021.Имя);
	Запрос.УстановитьПараметр("ИмяМакета2022", Макеты.ПФ_MXL_СведенияОЗастрахованномЛице_2022.Имя);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

#КонецОбласти

#Область ПФ_MXL_СведенияОЗастрахованномЛице_2021

Процедура ПриПечатиСведенийОЗастрахованномЛицеФСС_2021(КонтекстПечати, Выборка)
	СЭДОФСС.УстановитьСтандартныйОтступПечати(КонтекстПечати);
	
	Пока Выборка.Следующий() Цикл
		УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
		
		Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.ВсеДанные);
		Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "ВсеДанные");
		
		ВывестиСведенияОСтрахователе_2021(Секция, Параметры, Выборка);
		ВывестиСведенияОСотруднике_2021(Секция, Параметры, Выборка);
		ВывестиУдостоверениеЛичности_2021(Секция, Выборка);
		ВывестиРазрешениеНаПроживание_2021(Секция, Выборка);
		ВывестиСпособВыплатыПособия_2021(Секция, Выборка);
		ВывестиСведенияОЛьготах_2021(Параметры, Выборка);
		ВывестиДатуПодачиЗаявления_2021(Секция, Выборка);
		
		Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
		КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
		
		УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиСведенияОСтрахователе_2021(Секция, Параметры, Документ)
	
	Параметры.УполномоченныйПредставительДолжность = Строка(Документ.УполномоченныйПредставительДолжность);
	Параметры.УполномоченныйПредставительФИО       = Строка(Документ.УполномоченныйПредставительФИО);
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СтраховательНаименование,     "СтраховательНаименование");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СтраховательЭлектроннаяПочта, "ЭлектроннаяПочта");
	УправлениеПечатьюБЗК.ВывестиТелефонПоБуквам(Секция, Документ.СтраховательТелефон,   "Телефон");
	
КонецПроцедуры

Процедура ВывестиСведенияОСотруднике_2021(Секция, Параметры, Документ)
	
	ЧастиИмени = СЭДОФСС.ФИОВРодительномПадеже(
		Документ.СотрудникФамилия,
		Документ.СотрудникИмя,
		Документ.СотрудникОтчество,
		Документ.ФизическоеЛицо);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Фамилия,  "Заявитель_ФамилияВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Имя,      "Заявитель_ИмяВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Отчество, "Заявитель_ОтчествоВРодительномПадеже");
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникФамилия,  "Сотрудник_Фамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникИмя,      "Сотрудник_Имя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникОтчество, "Сотрудник_Отчество");
	
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.ДатаРождения, "ДатаРождения");
	
	СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(Документ.СНИЛС);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, СНИЛС,                 "СНИЛС");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникИНН, "СотрудникИНН");
	
	ИменаПолей = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Строение, Квартира";
	УправлениеПечатьюБЗК.ВывестиАдресПоБуквам(Секция, Документ.АдресРегистрации, "АдресРегистрации", ИменаПолей);
	УправлениеПечатьюБЗК.ВывестиТелефонПоБуквам(Секция, Документ.СотрудникТелефон, "СотрудникТелефон");
	
КонецПроцедуры

Процедура ВывестиУдостоверениеЛичности_2021(Секция, Документ)
	
	Если ЭтоПаспортДляПечати(Документ.УдостоверениеЛичностиКодМВД) Тогда
		
		Секция.ТабличныйДокумент.Области["Паспорт"].Текст = "v";
		
		ДокументСерия = СтрЗаменить(Документ.УдостоверениеЛичностиСерия, " ", "");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ДокументСерия, "ПаспортСерия");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.УдостоверениеЛичностиНомер, "ПаспортНомер");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.УдостоверениеЛичностиКемВыдан, "ПаспортКемВыдан");
		УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.УдостоверениеЛичностиДатаВыдачи, "ПаспортДата");
		
	ИначеЕсли ЭтоВременноеУдостоверениеЛичности(Документ.УдостоверениеЛичностиКодМВД) Тогда
		
		Секция.ТабличныйДокумент.Области["ВременноеУдостоверение"].Текст = "v";
		
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.УдостоверениеЛичностиНомер, "ВременноеУдостоверениеНомер");
		УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(
			Секция,
			Документ.УдостоверениеЛичностиСрокДействия,
			"ВременноеУдостоверениеДата");
		
	ИначеЕсли ЗначениеЗаполнено(Документ.УдостоверениеЛичностиКодМВД) Тогда
		
		Секция.ТабличныйДокумент.Области["ИнойДокумент"].Текст = "v";
		
		ДокументСерия = СтрЗаменить(Документ.УдостоверениеЛичностиСерия, " ", "");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ДокументСерия, "ИнойДокументСерия");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.УдостоверениеЛичностиНомер, "ИнойДокументНомер");
		УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.УдостоверениеЛичностиСрокДействия, "ИнойДокументДата");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоПаспортДляПечати(КодМВД)
	Возврат КодМВД = "01"
		Или КодМВД = "02"
		Или КодМВД = "06"
		Или КодМВД = "09"
		Или КодМВД = "10"
		Или КодМВД = "21"
		Или КодМВД = "22"
		Или КодМВД = "26";
КонецФункции

Функция ЭтоВременноеУдостоверениеЛичности(КодМВД) Экспорт
	Возврат КодМВД = "14";
КонецФункции

Процедура ВывестиРазрешениеНаПроживание_2021(Секция, Документ)
	
	ДокументСерия = СтрЗаменить(Документ.РазрешениеНаПроживаниеСерия, " ", "");
	
	Если СЭДОФСС.ЭтоВидНаЖительство(Документ.РазрешениеНаПроживаниеКодМВД) Тогда
		
		Секция.ТабличныйДокумент.Области["ЭтоВНЖ"].Текст = "v";
		
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ДокументСерия, "ВНЖ_Серия");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РазрешениеНаПроживаниеНомер, "ВНЖ_Номер");
		УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.РазрешениеНаПроживаниеДатаВыдачи, "ВНЖ_Дата");
		
	ИначеЕсли СЭДОФСС.ЭтоРазрешениеНаВременноеПроживание(Документ.РазрешениеНаПроживаниеКодМВД) Тогда
		
		Секция.ТабличныйДокумент.Области["ЭтоРВП"].Текст = "v";
		
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ДокументСерия, "РВП_Серия");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.РазрешениеНаПроживаниеНомер, "РВП_Номер");
		УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.РазрешениеНаПроживаниеДатаВыдачи, "РВП_Дата");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСпособВыплатыПособия_2021(Секция, Документ)
	
	Если Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		
		Секция.ТабличныйДокумент.Области["ВыплатаЧерезБанк"].Текст = "v";
		
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.БанкНаименование, "БанкНаименование");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.НомерСчета, "НомерСчета");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.БанкБИК, "БанкБИК");
		
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		
		Секция.ТабличныйДокумент.Области["ВыплатаЧерезБанк"].Текст = "v";
		
		НомерКартыМИР = БанковскиеКарты.ПолныйНомерКарты(Документ.КартаМИР);
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, НомерКартыМИР, "НомерКартыМИР");
		
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		
		Секция.ТабличныйДокумент.Области["ВыплатаПочтой"].Текст = "v";
		
		ИменаПолей = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Строение, Квартира";
		УправлениеПечатьюБЗК.ВывестиАдресПоБуквам(Секция, Документ.АдресПроживания, "АдресПроживания", ИменаПолей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСведенияОЛьготах_2021(Параметры, Документ)
	
	Финансирование       = Документ.ПричинаПредоставленияЛьготы;
	ЗначенияПеречисления = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом;
	
	Параметры.ЧАЭС                      = Финансирование = ЗначенияПеречисления.Чернобыль;
	Параметры.Семипалатинск             = Финансирование = ЗначенияПеречисления.Семипалатинск;
	Параметры.Маяк                      = Финансирование = ЗначенияПеречисления.Маяк;
	Параметры.ПодразделенияОсобогоРиска = Финансирование = ЗначенияПеречисления.ПодразделенияОсобогоРиска;
	
	Параметры.ПроживаниеВЗоне = Документ.ОтношениеКОсобойЗоне = Перечисления.ОтношениеКОсобойЗоне.Проживает;
	Параметры.РаботаВЗоне     = Документ.ОтношениеКОсобойЗоне = Перечисления.ОтношениеКОсобойЗоне.Работает;
	
	ВидОсобойЗоны        = Документ.ВидОсобойЗоны;
	ЗначенияПеречисления = Перечисления.ВидыОсобойЗоныПроживанияРаботы;
	
	Параметры.ВЗонеСПравомНаОтселение = ВидОсобойЗоны = ЗначенияПеречисления.ЗонаСПравомНаОтселение;
	Параметры.ВЗонеОтселения          = ВидОсобойЗоны = ЗначенияПеречисления.ЗонаОтселения;
	Параметры.ВЗонеСЛьготнымСтатусом  = ВидОсобойЗоны = ЗначенияПеречисления.ЗонаСЛьготнымСоциальноЭкономическимСтатусом;
	
КонецПроцедуры

Процедура ВывестиДатуПодачиЗаявления_2021(Секция, Документ)
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.Дата, "ДатаПодачи");
КонецПроцедуры

#КонецОбласти

#Область ПФ_MXL_СведенияОЗастрахованномЛице_2022

Процедура ПриПечатиСведенийОЗастрахованномЛицеФСС_2022(КонтекстПечати, Выборка)
	СЭДОФСС.УстановитьСтандартныйОтступПечати(КонтекстПечати);
	
	Пока Выборка.Следующий() Цикл
		УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
		
		ВывестиШапкуСтраницы1_2022(КонтекстПечати, Выборка);
		СЭДОФСС.ВывестиАдрес(КонтекстПечати, Выборка.АдресРегистрации, "АдресРегистрации");
		АдресПроживания = ?(Выборка.ВыплатаПочтой, Выборка.АдресПроживания, "");
		СЭДОФСС.ВывестиАдрес(КонтекстПечати, АдресПроживания, "АдресПроживания");
		КонтекстПечати.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ВывестиШапкуСтраницы2_2022(КонтекстПечати, Выборка);
		СЭДОФСС.ВывестиАдрес(КонтекстПечати, "", "ИО_АдресДоставки");
		ВывестиПодвалСтраницы2_2022(КонтекстПечати, Выборка);
		
		УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиШапкуСтраницы1_2022(КонтекстПечати, Документ)
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.Страница1_Шапка);
	Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "Страница1_Шапка");
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СтраховательНаименование, "СтраховательНаименование");
	
	ЧастиИмени = СЭДОФСС.ФИОВРодительномПадеже(
		Документ.СотрудникФамилия,
		Документ.СотрудникИмя,
		Документ.СотрудникОтчество,
		Документ.ФизическоеЛицо);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Фамилия,  "Заявитель_ФамилияВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Имя,      "Заявитель_ИмяВРодительномПадеже");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, ЧастиИмени.Отчество, "Заявитель_ОтчествоВРодительномПадеже");
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникФамилия,  "СотрудникФамилия");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникИмя,      "СотрудникИмя");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникОтчество, "СотрудникОтчество");
	
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.ДатаРождения, "ДатаРождения");
	
	Если Документ.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Секция.ТабличныйДокумент.Области["Пол_Ж"].Текст = "v";
	Иначе
		Секция.ТабличныйДокумент.Области["Пол_М"].Текст = "v";
	КонецЕсли;
	
	СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(Документ.СНИЛС);
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, СНИЛС,                 "СНИЛС");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СотрудникИНН, "СотрудникИНН");
	
	ВывестиУдостоверениеЛичности_2021(Секция, Документ);
	
	ВывестиРазрешениеНаПроживание_2021(Секция, Документ);
	
	ВывестиСведенияОЛьготах_2021(Параметры, Документ);
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
КонецПроцедуры

Процедура ВывестиШапкуСтраницы2_2022(КонтекстПечати, Документ)
	Секция = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "Страница2_Шапка");
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.Страница2_Шапка);
	
	ЭтоИнаяОрганизация = (Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация);
	
	Секция.ТабличныйДокумент.Области.ДанныеИнойОрганизации_Вариант1.Видимость = Не ЭтоИнаяОрганизация;
	Секция.ТабличныйДокумент.Области.ДанныеИнойОрганизации_Вариант2.Видимость = ЭтоИнаяОрганизация;
	
	Если Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		
		Секция.ТабличныйДокумент.Области["ВыплатаЧерезБанк"].Текст = "v";
		
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.БанкНаименование, "БанкНаименование");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.НомерСчета, "НомерСчета");
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.БанкБИК, "БанкБИК");
		
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		
		Секция.ТабличныйДокумент.Области["ВыплатаЧерезБанк"].Текст = "v";
		
		НомерКартыМИР = БанковскиеКарты.ПолныйНомерКарты(Документ.КартаМИР);
		УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, НомерКартыМИР, "НомерКартыМИР");
		
	ИначеЕсли Документ.ВыплатаПочтой Тогда
		
		Секция.ТабличныйДокумент.Области["ВыплатаПочтой"].Текст = "v";
		
	ИначеЕсли ЭтоИнаяОрганизация Тогда
		
		Секция.ТабличныйДокумент.Области["ВыплатаЧерезИнуюОрганизацию"].Текст = "v";
		Параметры.РеквизитыИнойОрганизации = ПредставлениеРеквизитовИнойОрганизации(Документ);
		
	КонецЕсли;
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
КонецПроцедуры

Функция ПредставлениеРеквизитовИнойОрганизации(Документ)
	Массив = Новый Массив;
	
	Массив.Добавить(СтрШаблон(НСтр("ru = 'Наименование организации: %1';
									|en = 'Company name: %1'"), Документ.ИнаяОрганизацияНаименование));
	Массив.Добавить(СтрШаблон(НСтр("ru = 'БИК: %1';
									|en = 'BIC: %1'"), Документ.ИнаяОрганизацияБИК));
	Если Документ.ИнаяОрганизацияНомерСчетаСтрахователя <> "" Тогда
		Массив.Добавить(СтрШаблон(НСтр("ru = 'Номер счета страхователя: %1';
										|en = 'Insurant account number: %1'"), Документ.ИнаяОрганизацияНомерСчетаСтрахователя));
	КонецЕсли;
	Если Документ.ИнаяОрганизацияЛицевойСчетОрганизации <> "" Тогда
		Массив.Добавить(СтрШаблон(НСтр("ru = 'Лицевой счет организации: %1';
										|en = 'Company account: %1'"), Документ.ИнаяОрганизацияЛицевойСчетОрганизации));
	КонецЕсли;
	Если Документ.ИнаяОрганизацияЛицевойСчетСотрудника <> "" Тогда
		Массив.Добавить(СтрШаблон(НСтр("ru = 'Лицевой счет застрахованного: %1';
										|en = 'Personal account of insured person: %1'"), Документ.ИнаяОрганизацияЛицевойСчетСотрудника));
	КонецЕсли;
	Если Документ.ИнаяОрганизацияКБК <> "" Тогда
		Массив.Добавить(СтрШаблон(НСтр("ru = 'КБК: %1';
										|en = 'BCC: %1'"), Документ.ИнаяОрганизацияКБК));
	КонецЕсли;
	Если Документ.ИнаяОрганизацияРегистрационныйНомерСФР <> "" Тогда
		Массив.Добавить(СтрШаблон(НСтр("ru = 'Регистрационный номер страхователя СФР (организации получателя): %1';
										|en = 'Insurant''s registration number in the Social Insurance Fund of Russia (of the recipient company): %1'"), Документ.ИнаяОрганизацияРегистрационныйНомерСФР));
	КонецЕсли;
	Если Документ.ИнаяОрганизацияРегистрационныйНомер <> "" Тогда
		Массив.Добавить(СтрШаблон(НСтр("ru = 'Регистрационный номер по ОСС (организации получателя): %1';
										|en = 'CSI registration number (of the recipient company): %1'"), Документ.ИнаяОрганизацияРегистрационныйНомер));
	КонецЕсли;
	Массив.Добавить(СтрШаблон(НСтр("ru = 'ИНН организации получателя: %1';
									|en = 'Recipient company TIN: %1'"), Документ.ИнаяОрганизацияИНН));
	Массив.Добавить(СтрШаблон(НСтр("ru = 'КПП организации получателя: %1';
									|en = 'Recipient company KPP: %1'"), Документ.ИнаяОрганизацияКПП));
	
	Возврат СтрСоединить(Массив, Символы.ПС);
КонецФункции

Процедура ВывестиПодвалСтраницы2_2022(КонтекстПечати, Документ)
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей.Страница2_Подвал);
	Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, "Страница2_Подвал");
	
	УправлениеПечатьюБЗК.ВывестиТелефонПоБуквам(Секция, Документ.СотрудникТелефон, "СотрудникТелефон");
	УправлениеПечатьюБЗК.ВывестиДатуПоБуквам(Секция, Документ.Дата, "ДатаПодачи");
	
	Параметры.УполномоченныйПредставительДолжность = Строка(Документ.УполномоченныйПредставительДолжность);
	Параметры.УполномоченныйПредставительФИО = Строка(Документ.УполномоченныйПредставительФИО);
	
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.СтраховательЭлектроннаяПочта, "СтраховательЭлектроннаяПочта");
	УправлениеПечатьюБЗК.ВывестиТелефонПоБуквам(Секция, Документ.СтраховательТелефон, "СтраховательТелефон");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, Документ.КодПодчиненностиФСС, "КодТОФ");
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
КонецПроцедуры

#КонецОбласти

#Область СЭДО

Функция ТребуетсяВыгружатьАдресРегистрации(Документ) Экспорт
	Возврат ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСДом) Или ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСРО);
КонецФункции

Функция ИндексЗаполняетсяАвтоматически(Документ, ИмяПоляАдрес) Экспорт
	Возврат ЗначениеЗаполнено(Документ[ИмяПоляАдрес])
		И Не ФиксацияВторичныхДанныхВДокументах.РеквизитШапкиЗафиксирован(Документ, ИмяПоляАдрес + "Индекс");
КонецФункции

// См. ТекстXML.
Процедура ЗаписатьАдрес(МенеджерXML, УзелАдреса, Документ, ИмяПоляАдрес, ИмяУзлаИндекс, ИмяУзлаФИАСXML)
	// Минимизация числа идентификаторов в выгрузке чтобы уменьшить расходы на проверку.
	УзелФИАС = МенеджерXML.ДобавитьУзел(УзелАдреса, ИмяУзлаФИАСXML);
	Если ЗначениеЗаполнено(Документ[ИмяПоляАдрес + "ФИАСДом"]) Тогда
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:houseGuid", Документ[ИмяПоляАдрес + "ФИАСДом"]);
	Иначе
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:guid",     Документ[ИмяПоляАдрес + "ФИАСРО"]);
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:house",    Документ[ИмяПоляАдрес + "Дом"], Истина);
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:building", Документ[ИмяПоляАдрес + "Корпус"], Истина);
	КонецЕсли;
	МенеджерXML.ДобавитьУзел(УзелФИАС,   "common:flat",       Документ[ИмяПоляАдрес + "Квартира"], Истина);
	МенеджерXML.ДобавитьУзел(УзелАдреса, ИмяУзлаИндекс, Документ[ИмяПоляАдрес + "Индекс"]);
КонецПроцедуры

// См. ПриЗаполненииПараметровОтправки.
Функция ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключенияПриПроведении)
	СтрокаОтправки.Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Количество = СтрокаОтправки.Ошибки.Количество();
	Если Количество = 1 Тогда
		СтрокаОтправки.Результат = СтрокаОтправки.Ошибки[0].Текст;
	ИначеЕсли Количество > 1 Тогда
		СтрокаОтправки.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка заполнения;;%1 ошибки заполнения;%1 ошибок заполнения;';
				|en = ';%1 filling error;;%1 filling errors;%1 filling errors;'"),
			Количество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключенияПриПроведении) Тогда
		Если СтрокаОтправки.Результат = "" Тогда
			СтрокаОтправки.Результат = СтрШаблон(НСтр("ru = 'Ошибка проведения: %1';
														|en = 'Posting error: %1'"), ТекстИсключенияПриПроведении);
		Иначе
			СтрокаОтправки.Результат = СтрокаОтправки.Результат + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'И ошибка проведения: %1';
																									|en = 'And posting error: %1'"), ТекстИсключенияПриПроведении);
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// 1. При обновлении регистра ЗастрахованныеЛицаСЭДО не используются ссылки физлиц, сотрудников и организаций
	//    из документов СЗЛ. Вместо физлиц используются только СНИЛС, вместо организаций - страхователи.
	// 2. Если документ СЗЛ отправлен, то его данные важно оставить для истории.
	//    Чтобы было понятно почему в отправленном документе заполнились именно такие ФИО, дата рождения и т.п...
	// 3. Если документ не отправлен, то данные документа можно обновить для того, чтобы документ "прицепился"
	//    к актуальному сотруднику в списке сведений о застрахованных лицах.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗастрахованномЛице.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛице
	|ГДЕ
	|	СведенияОЗастрахованномЛице.СНИЛС = &НовыйСНИЛС
	|	И СведенияОЗастрахованномЛице.ФизическоеЛицо <> &ФизическоеЛицо
	|	И СведенияОЗастрахованномЛице.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОЗастрахованномЛице.Ссылка
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛице
	|ГДЕ
	|	СведенияОЗастрахованномЛице.ФизическоеЛицо = &ФизическоеЛицо
	|	И СведенияОЗастрахованномЛице.СНИЛС <> &НовыйСНИЛС
	|	И СведенияОЗастрахованномЛице.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОЗастрахованномЛице.СНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОЗастрахованномЛице.СНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаВыборки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = СтрокаВыборки.Ссылка.ПолучитьОбъект();
		ФиксацияВторичныхДанныхВДокументах.ОтменитьФиксациюРеквизитаШапки(ДокументОбъект, "СНИЛС");
		Если ДокументОбъект.ОбновитьВторичныеДанные() Тогда
			Если ДокументОбъект.Проведен И Не ЗначениеЗаполнено(ДокументОбъект.СНИЛС) Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, "БЗК", РежимЗаписи);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

// Находит вид на жительство или разрешение на проживание физического лица.
Функция НайтиРазрешениеНаПроживание(ФизическоеЛицо, ДатаНачалаСобытия, КодыМВД = "12,15") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК Вид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия,
	|	ВЫБОР
	|		КОГДА ВидыДокументовФизическихЛиц.КодМВД = ""12""
	|			ТОГДА 1
	|		КОГДА ВидыДокументовФизическихЛиц.КодМВД = ""15""
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаНачалаСобытия, Физлицо = &ФизическоеЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка
	|			И (ВидыДокументовФизическихЛиц.КодМВД В (&КодыМВД))
	|ГДЕ
	|	(ДокументыФизическихЛицСрезПоследних.СрокДействия >= &МинимальныйСрокДействия
	|			ИЛИ ДокументыФизическихЛицСрезПоследних.СрокДействия = &ПустаяДата)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДатаВыдачи УБЫВ";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("МинимальныйСрокДействия", НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -2)));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("КодыМВД", СтрРазделить(КодыМВД, ", ", Ложь));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Таблица.Добавить();
	КонецЕсли;
	
	Возврат Таблица[0];
КонецФункции

Функция ТребуетсяВыгрузитьРазрешениеНаПроживание(Документ) Экспорт
	Возврат СЭДОФСС.ПоказыватьРазрешениеНаПроживание(Документ.КодСтраныГражданства)
		И ЗначениеЗаполнено(Документ.РазрешениеНаПроживаниеВид);
КонецФункции

Функция НайтиПоФизлицу(ФизическоеЛицо, ГоловнаяОрганизация, ИменаПолей) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Метаданные.Документы.СведенияОЗастрахованномЛицеФСС;
	
	Настройки = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	Настройки.УчитыватьRLS = Ложь;
	Настройки.Количество   = 1;
	Настройки.Порядок      = "Дата Убыв";
	
	ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ФизическоеЛицо",      "=", ФизическоеЛицо);
	ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ГоловнаяОрганизация", "=", ГоловнаяОрганизация);
	
	Запрос = ЗапросыБЗК.ЗапросКТаблице(Таблица, ИменаПолей, Настройки);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ИменаПолейТребуемыхКадровыхДанныхФЛ() Экспорт
	Возврат
	"ФизическоеЛицо,
	|Фамилия,
	|Имя,
	|Отчество,
	|ДатаРождения,
	|Страна,
	|Пол,
	|ИНН,
	|СтраховойНомерПФР,
	|ДокументВид,
	|ДокументСерия,
	|ДокументНомер,
	|ДокументДатаВыдачи,
	|ДокументКемВыдан,
	|ДокументСрокДействия,
	|СтатусНалогоплательщика,
	|ЛьготаПриНачисленииПособий,
	|ОтношениеКОсобойЗоне,
	|ВидОсобойЗоны";
КонецФункции

Функция УбратьПробелы(Строка, УбратьТире = Истина)
	Возврат СтроковыеФункцииБЗККлиентСервер.УбратьПробелы(Строка, УбратьТире);
КонецФункции

Функция СоздатьДокументыПоДаннымДляЗаполнения(МассивДанныхДляЗаполнения) Экспорт
	СозданныеДокументы = Новый Массив;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Для Каждого ДанныеДляЗаполнения Из МассивДанныхДляЗаполнения Цикл
		ДокументОбъект = Документы.СведенияОЗастрахованномЛицеФСС.СоздатьДокумент();
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.Заполнить(ДанныеДляЗаполнения);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
	КонецЦикла;
	
	Возврат СозданныеДокументы;
КонецФункции

Функция ОписаниеПодписейДокумента() Экспорт
	ОписаниеПодписей = ПодписиДокументов.ОписаниеТаблицыПодписей();
	
	ОписаниеРеквизитов = ПодписиДокументов.ОписаниеРеквизитовПодписанта();
	ОписаниеРеквизитов.ФизическоеЛицо   = "УполномоченныйПредставитель";
	ОписаниеРеквизитов.Должность        = "УполномоченныйПредставительДолжность";
	ОписаниеРеквизитов.ОснованиеПодписи = "УполномоченныйПредставительОснованиеПодписи";
	
	ПереопределяемыеИмена = Новый Соответствие;
	ПереопределяемыеИмена.Вставить("ПредставительСФР", ОписаниеРеквизитов);
	
	ПодписиДокументов.ДобавитьОписаниеПодписейОрганизации(ОписаниеПодписей, "ПредставительСФР", ПереопределяемыеИмена);
	
	Возврат ОписаниеПодписей;
КонецФункции

#КонецОбласти

#КонецЕсли
