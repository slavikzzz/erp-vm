#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		// Заполнение ключевых реквизитов из умолчаний.
		ОбновитьВторичныеДанные = Ложь;
		ЗначенияДляЗаполнения = Новый Структура;
		// Заполнение ключевых реквизитов из параметров.
		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			ОбновитьВторичныеДанные = Параметры.Свойство("Сотрудник", Объект.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Если Не ОбновитьВторичныеДанные И Не Параметры.Свойство("Организация", Объект.Организация) Тогда
				ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
			КонецЕсли;
			ОбновитьВторичныеДанные = Истина;
		КонецЕсли;
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		// Заполнение второстепенных реквизитов
		ПриПолученииДанныхНаСервере("Объект", ОбновитьВторичныеДанные);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	Если Параметры.ПоказатьОшибкиОтправки Тогда
		Объект.ОтключитьПроверкиПроведения = Ложь;
		ПроверитьЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_НастройкиПрямыхВыплатФСССотрудников"
		И Параметр.ФизическоеЛицо = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_СведенияОЗастрахованномЛицеФСС"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПрямыхВыплатФССОрганизаций"
		И Параметр.ГоловнаяОрганизация = Объект.ГоловнаяОрганизация Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаКонтрагентов" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеКартыКонтрагентов"
		И Источник = Объект.КартаМИР Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СЭДОФСС.СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// До проверки объекта создаем его, дозаполняем и сами проверяем.
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Если Не Объект.ОтключитьПроверкиПроведения Тогда
			Отказ = Истина;
		КонецЕсли;
		ОбработатьСообщенияПользователю();
	КонецЕсли;
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	ТекущийОбъект.ОбновитьВторичныеДанные();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьПанельСостоянияДокумента();
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ЭтотОбъект.Объект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СведенияОЗастрахованномЛицеФСС", ПараметрыЗаписи, Объект.Ссылка);
	СЭДОФССКлиент.ОповеститьОНеобходимостиОбновитьТекущиеДела();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтраховательПриИзменении(Элемент)
	СтраховательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере("СотрудникПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ИначеЕсли ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		ПараметрыОтбора.Вставить("ГоловнаяОрганизация", Объект.ГоловнаяОрганизация);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ФизическоеЛицо);
	ПараметрыФормы.Вставить("Отбор",         ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",   Истина);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ФизическоеЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СНИЛСПриИзменении(Элемент)
	СНИЛСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НеЧислилсяВОрганизацииПриИзменении(Элемент)
	Если Объект.НеЧислилсяВОрганизации Тогда
		Объект.НеЧислилсяВОрганизации = Ложь;
		Если Объект.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский") Тогда
			ТекстВопроса = НСтр("ru = 'Подтверждаете, что %1 %2 %3 со СНИЛС %4 <b>никогда</b> не числилась в организации и не получала доход, с которого организацией были перечислены страховые взносы?';
								|en = 'Do you confirm that %1 %2 %3 with SNILS %4 <b>has never</b> been listed in the company and did not receive the income, from which the company transferred the insurance contributions?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Подтверждаете, что %1 %2 %3 со СНИЛС %4 <b>никогда</b> не числился в организации и не получал доход, с которого организацией были перечислены страховые взносы?';
								|en = 'Do you confirm that %1 %2 %3 with SNILS %4 <b>has never</b> been listed in the company and did not receive the income, from which the company transferred the insurance contributions?'");
		КонецЕсли;
		ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.СотрудникФамилия, Объект.СотрудникИмя, Объект.СотрудникОтчество, Объект.СНИЛС);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстВопроса);
		Обработчик = Новый ОписаниеОповещения("НеЧислилсяВОрганизацииПослеОтветаНаВопрос", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Подтверждаю';
													|en = 'I confirm'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Отмена);
	Иначе
		Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПриИзменении(Элемент)
	ГражданствоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособВыплатыПособияПриИзменении(Элемент)
	СпособВыплатыПособияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	БанкПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресПроживанияВидПриИзменении(Элемент)
	АдресПроживанияВидПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РазрешениеНаПроживаниеВидАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Или Не ЗначениеЗаполнено(Текст) Тогда
		// Событие было вызвано для формирования списка быстрого выбора.
		// Несмотря на СтандартнаяОбработка = Ложь, СписокВыбора из свойств поля все равно будет показан.
		// Добавлять к нему ничего не требуется.
		СтандартнаяОбработка = Ложь;
	Иначе
		// Событие было вызвано при вводе текста.
		СписокДляПодбора = Новый СписокЗначений;
		Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Если СтрНайти(ЭлементСписка.Представление, Текст) > 0 Тогда
				ЗаполнитьЗначенияСвойств(СписокДляПодбора.Добавить(), ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокДляПодбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнаяОрганизацияБИКПриИзменении(Элемент)
	ИнаяОрганизацияБИКПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнаяОрганизацияБанкПриИзменении(Элемент)
	ИнаяОрганизацияБанкПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтношениеКОсобойЗонеПриИзменении(Элемент)
	ОтношениеКОсобойЗонеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПроведенИОтправленОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьРегистрацию();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияСотрудника(Команда)
	СотрудникПриИзмененииНаСервере("ОтменитьИсправленияСотрудника");
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияСпособаВыплатыПособия(Команда)
	ОтменитьИзмененияСпособаВыплатыПособияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

&НаКлиенте
Процедура Подключаемый_ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь)
	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИзменитьАдресРегистрации(Команда)
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ВводАдреса", Истина);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	Иначе
		Подключаемый_ПолеВводаКонтактнойИнформацииНачалоВыбора(Элементы.АдресПроживанияПредставление, Неопределено, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпособВыплатыПособия(Команда)
	УчетПособийСоциальногоСтрахованияКлиент.НастроитьСпособПрямыхВыплатФизическогоЛица(
		Объект.Организация,
		Объект.ФизическоеЛицо,
		ЭтотОбъект,
		Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПроверкиПроведения(Команда)
	Объект.ОтключитьПроверкиПроведения = Не Объект.ОтключитьПроверкиПроведения;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки';
														|en = 'Send message to technical support.'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноОтправитьВФонд(Команда)
	Объект.ДатаОтправки = Неопределено;
	Объект.РегистрацияСведений = Неопределено;
	Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	СЭДОФССКлиент.ОтправитьДокументы(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства 
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
// Конец Обработчик подсистемы "ПодписиДокументов".

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксации = Документы.СведенияОЗастрахованномЛицеФСС.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы());
	
	ОписаниеЭлементовФормы = Новый Соответствие;
	ОписаниеПутиКРеквизитамОбъекта = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеПутиКРеквизитамОбъекта.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеПутиКРеквизитамОбъекта);
	КонецЦикла;
	
	// Адреса редактируется через реквизит формы, поэтому для них указываются пустой префикс пути к объекту.
	ОписаниеПутиКРеквизитамФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации Цикл
		ОписаниеЭлементовФормы.Вставить(КлючИЗначение.Ключ, ОписаниеПутиКРеквизитамФормы);
	КонецЦикла;
	
	ПараметрыФиксации.ОписаниеФормы.ОписаниеЭлементовФормы = ОписаниеЭлементовФормы;
	Возврат ПараметрыФиксации;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		// Поиск элементов по имени.
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	БыстрыйПоискРеквизитов.Вставить("ИнаяОрганизацияБанк", "ИнаяОрганизацияБИК");
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения(ОснованиеЗаполнения, ТекущаяСтрока = 0)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, ОснованиеЗаполнения, ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеНаСервере()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	Если ДокументОбъект.ОбновитьВторичныеДанные() Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(
				ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(ИмяЭлемента)
	Элемент = Элементы[ИмяЭлемента];
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(
		ЭтотОбъект,
		Элемент,
		ОписаниеЭлементов);
	Если Элемент = Элементы.НеЧислилсяВОрганизации Тогда
		Если Объект.НеЧислилсяВОрганизации Тогда
			ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(
				ЭтотОбъект,
				Элементы.СНИЛС,
				ОписаниеЭлементов);
		Иначе
			ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизита(
				ЭтотОбъект,
				Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.СведенияОЗастрахованномЛицеФСС.ОбъектЗафиксирован(Объект);
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Процедура ОбновитьЭлементыКонтактнойИнформации()
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации Цикл
		ИмяРеквизитаФормы = КлючИЗначение.Ключ;
		Если ИмяРеквизитаФормы = "БыстрыйПоискРеквизитовФормы" Тогда
			Продолжить;
		КонецЕсли;
		Реквизит          = КлючИЗначение.Значение;
		Если Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаАдреса(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		ИначеЕсли Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаТелефона(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляВводаКонтактнойИнформации()
	Если ПоляВводаКонтактнойИнформации <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	// ПоляВводаКонтактнойИнформации - Структура
	//   * Ключ     - Строка    - Имя реквизита формы.
	//   * Значение - Структура - Свойства реквизита объекта.
	//       * Имя - Строка - Имя реквизита объекта хранящего значение контактной информации.
	//       * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
	//       * Вид - Строка - Имя предопределенного вида контактной информации.
	ПоляВводаКонтактнойИнформации = Новый Структура;
	БыстрыйПоискРеквизитовФормы = Новый Структура;
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "АдресПроживания";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "АдресРегистрации";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "СотрудникТелефон";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	ПоляВводаКонтактнойИнформации.Вставить("БыстрыйПоискРеквизитовФормы", БыстрыйПоискРеквизитовФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеРеквизитаКонтактнойИнформации()
	Возврат Новый Структура("Имя, Тип, Вид");
КонецФункции

&НаСервере
Процедура АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение)
	Если ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы.Свойство(Сообщение.Поле) Тогда
		Сообщение.Поле = ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы[Сообщение.Поле];
		Сообщение.ПутьКДанным = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаКонтактнойИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Реквизит = ПоляВводаКонтактнойИнформации[Элемент.Имя];
	Оповещение = Новый ОписаниеОповещения("ПолеВводаКонтактнойИнформацииЗавершениеВыбора", ЭтотОбъект, Реквизит);
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение(Реквизит.Вид),
		Объект[Реквизит.Имя]);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКонтактнойИнформацииЗавершениеВыбора(РезультатВыбора, Реквизит) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура")Тогда
		Объект[Реквизит.Имя] = РезультатВыбора.Значение;
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя);
		ОбновитьВторичныеДанныеНаСервере();
		ОбновитьЭлементыФормы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СвертываемыеГруппы

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы) Экспорт
	Группы.Добавить(Элементы.АдресРегистрацииГруппа);
	Группы.Добавить(Элементы.УдостоверениеЛичностиГруппа);
	Группы.Добавить(Элементы.РазрешениеНаПроживаниеГруппа);
	Группы.Добавить(Элементы.ЛьготыГруппа);
	Группы.Добавить(Элементы.СпособВыплатыГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп() Экспорт
	ГруппаСпособовВыплаты = Элементы.СпособВыплатыГруппа.Родитель;
	Элементы.Переместить(Элементы.ИзменитьСпособВыплатыПособий, ГруппаСпособовВыплаты.ПодчиненныеЭлементы[0]);
	ГруппаАдресаРегистрации = Элементы.АдресРегистрацииГруппа.Родитель;
	Элементы.Переместить(Элементы.ИзменитьАдрес, ГруппаАдресаРегистрации.ПодчиненныеЭлементы[0]);
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость) Экспорт
	
	Если Группа = Элементы.АдресРегистрацииГруппа Тогда
		Видимость = ЧислитсяВОрганизации;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Заполнена = ЗначениеЗаполнено(Объект.АдресРегистрации);
		Если Заполнена И Не Развернута Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(Объект.АдресРегистрации);
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.УдостоверениеЛичностиГруппа Тогда
		Видимость = ЧислитсяВОрганизации;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.УдостоверениеЛичностиВид,
			Объект.УдостоверениеЛичностиСерия,
			Объект.УдостоверениеЛичностиНомер,
			Объект.УдостоверениеЛичностиДатаВыдачи,
			Объект.УдостоверениеЛичностиСрокДействия,
			Объект.УдостоверениеЛичностиКемВыдан);
		
	ИначеЕсли Группа = Элементы.РазрешениеНаПроживаниеГруппа Тогда
		Видимость = ЧислитсяВОрганизации
			И СЭДОФСС.ПоказыватьРазрешениеНаПроживание(Объект.КодСтраныГражданства);
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.РазрешениеНаПроживаниеВид,
			Объект.РазрешениеНаПроживаниеСерия,
			Объект.РазрешениеНаПроживаниеНомер,
			Объект.РазрешениеНаПроживаниеДатаВыдачи,
			Объект.РазрешениеНаПроживаниеСрокДействия);
		
	ИначеЕсли Группа = Элементы.ЛьготыГруппа Тогда
		Видимость = ЧислитсяВОрганизации;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеЛьгот();
		
	ИначеЕсли Группа = Элементы.СпособВыплатыГруппа Тогда
		Видимость = ЧислитсяВОрганизации;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Заполнена = ЗначениеЗаполнено(Объект.СпособВыплатыПособия);
		Если Не Заполнена Тогда
			Представление = НСтр("ru = 'Не заполнен';
								|en = 'Not filled in'");
		ИначеЕсли Не Развернута Тогда
			Представление = СЭДОФСС.ПредставлениеСпособаВыплаты(Объект);
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		
		ОбновитьЭлементыГруппыСтрахователь(Видимость, Представление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвернутьРазвернутьГруппу(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	СЭДОФСС.СвернутьРазвернутьГруппу(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = "Объект", ОбновитьВторичныеДанные = Истина)

	ПравоИзменения   = (Элементы.Найти("ФормаПровести") <> Неопределено);
	ПравоПолученияЭД = СЭДОФСС.ЕстьПравоПолучения();
	ПравоОтправкиЭД  = СЭДОФСС.ЕстьПравоОтправки();
	
	СЭДОФСС.НастроитьПолеВидУдостоверенияЛичности(
		Элементы.РазрешениеНаПроживаниеВид,
		Объект.РазрешениеНаПроживаниеВид,
		"12,15");
	
	ЗаполнитьИнаяОрганизацияБанк();
	
	Если Не ПодписиДокументовКлиентСервер.СозданыРеквизитыПодписей(ЭтотОбъект) Тогда
		// ЗарплатаКадрыПодсистемы.ПодписиДокументов
		ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект, Документы.СведенияОЗастрахованномЛицеФСС.ОписаниеПодписейДокумента());
		// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыФиксацииВторичныхДанных());
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(
		ЭтотОбъект,
		ФиксацияБыстрыйПоискРеквизитов());
	
	Если ОбновитьВторичныеДанные Тогда
		ОбновитьВторичныеДанныеНаСервере();
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	ТолькоПросмотр = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные()
	ОтключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные");
	ПодключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОбновитьВторичныеДанные()
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьВторичныеДанныеНаСервере()
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ОбновитьВторичныеДанныеНаСервере();
		ОбновитьЭлементыФормы();
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Иначе
		Прочитать();
		Надпись = Элементы.Найти("ПредупреждениеОбновленияВторичныхДанных");
		Если Надпись <> Неопределено И Надпись.Видимость Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	ОбновитьВторичныеДанныеНаСервере();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	ОбновитьЭлементыФормы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	ДокументЗафиксирован = ОбъектЗафиксирован();
	ТолькоПросмотр = ДокументЗафиксирован;
	ЧислитсяВОрганизации = Не Объект.НеЧислилсяВОрганизации И Не ЗначениеЗаполнено(Объект.ДатаУвольнения);
	
	ОбновитьКнопкиФормы(ДокументЗафиксирован);
	
	ОбновитьПанельСостоянияДокумента();
	
	ОбновитьЭлементыЛьгот();
	
	СЭДОФСС.ОбновитьСвертываемыеГруппы(ЭтотОбъект);
	
	ОбновитьЭлементыКонтактнойИнформации();
	
	ОбновитьЭлементыСпособаВыплатыПособия();
	
	ОбновитьЭлементыШапки();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументовКлиентСервер.УстановитьПредставлениеПодписей(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиФормы(ДокументЗафиксирован)
	
	Элементы.ФормаОбновитьВторичныеДанные.Видимость           = Не ДокументЗафиксирован;
	Элементы.ФормаОтменитьВсеИсправления.Видимость            = Не ДокументЗафиксирован;
	Элементы.ОтменитьИзмененияКадровыхДанных.Видимость        = Не ДокументЗафиксирован;
	Элементы.ОтменитьИзмененияСпособаВыплатыПособия.Видимость = Не ДокументЗафиксирован;
	
	Если ПравоОтправкиЭД Тогда
		Отправлен = Не Объект.ПометкаУдаления И ЗначениеЗаполнено(Объект.ДатаОтправки);
		Элементы.ОтправитьВФонд.ТолькоВоВсехДействиях = Отправлен;
	КонецЕсли;
	
	Элементы.ФормаОтключитьПроверкиПроведения.Пометка = Объект.ОтключитьПроверкиПроведения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСостоянияДокумента()
	ПоложениеКнопкиЗакрыть     = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КнопкаПоУмолчанию          = Неопределено;
	ОтправленВФонд             = Ложь;
	Если Объект.ПометкаУдаления Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПомеченНаУдаление;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаЗаписать;
		КонецЕсли;
	ИначеЕсли Не Объект.Проведен Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументНеПроведен;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаПровести;
		КонецЕсли;
	Иначе
		СостояниеОтправки = СостояниеОтправки();
		ОтправленВФонд = СостояниеОтправки.ОтправленВФонд;
		Если СостояниеОтправки.МожноОтправить И ПравоОтправкиЭД Тогда
			КнопкаПоУмолчанию = Элементы.ОтправитьВФонд;
		КонецЕсли;
		Если СостояниеОтправки.ЕстьОшибки Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьОшибки;
			Элементы.НадписьДокументПроведенИЕстьОшибки.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения И КнопкаПоУмолчанию = Неопределено Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.ЕстьПредупреждения Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьПредупреждения;
			Элементы.НадписьДокументПроведенИЕстьПредупреждения.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения И КнопкаПоУмолчанию = Неопределено Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.МожноОтправить Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИНеОтправлен;
		Иначе
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИОтправлен;
			Элементы.НадписьДокументПроведенИОтправлен.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиЗакрыть = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			КнопкаПоУмолчанию = Элементы.ФормаЗакрыть;
		КонецЕсли;
	КонецЕсли;
	Если ПравоПолученияЭД Тогда
		Элементы.ПроверитьНаличиеОтвета.Видимость = ОтправленВФонд;
	КонецЕсли;
	Если ПравоОтправкиЭД Тогда
		Элементы.ПовторноОтправитьВФонд.Видимость = ОтправленВФонд И (Объект.ДатаОтправки + 86400*2 < ТекущаяДатаСеанса());
	КонецЕсли;
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.СтраницыСостоянияДокумента.ТекущаяСтраница = ТекущаяСтраница;
	Если ПравоИзменения Тогда
		Элементы.КнопкаСкопировать.ПоложениеВКоманднойПанели = ПоложениеКнопкиСкопировать;
	КонецЕсли;
	Элементы.ФормаЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиЗакрыть;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыШапки()
	Элементы.СотрудникИНН.Видимость                  = ЧислитсяВОрганизации;
	Элементы.ГруппаГражданствоСтатус.Видимость       = ЧислитсяВОрганизации;
	Элементы.КодСтраныГражданства.Видимость          = ЧислитсяВОрганизации;
	Элементы.СотрудникТелефонПредставление.Видимость = ЧислитсяВОрганизации;
	ЕстьДатаУвольнения = ЗначениеЗаполнено(Объект.ДатаУвольнения);
	Элементы.НеЧислилсяВОрганизации.Видимость = Объект.НеЧислилсяВОрганизации Или Не ЕстьДатаУвольнения;
	Элементы.НеЧислилсяГруппа.ЦветФона = ?(Объект.НеЧислилсяВОрганизации, ЦветаСтиля.ФонУправляющегоПоля, Новый Цвет);
	Элементы.ДатаУвольнения.Видимость = Не Объект.НеЧислилсяВОрганизации;
	Элементы.ДатаУвольнения.ЦветФона = ?(ЕстьДатаУвольнения, ЦветаСтиля.ФонУправляющегоПоля, Новый Цвет);
	Элементы.ДатаУвольнения.КнопкаОчистки = ЕстьДатаУвольнения;
КонецПроцедуры

&НаСервере
Функция СостояниеОтправки()
	ВариантыСостояний = Перечисления.СостоянияДокументаСЭДОФСС;
	Если ЗначениеЗаполнено(Объект.РегистрацияСведений) Тогда
		Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияСведений, "Состояние");
	Иначе
		Состояние = ВариантыСостояний.ПустаяСсылка();
	КонецЕсли;
	ЕстьОшибки         = Ложь;
	ЕстьПредупреждения = Ложь;
	МожноОтправить     = Ложь;
	ОтправленВФонд     = Ложь;
	Если Состояние = ВариантыСостояний.ПодготовленКОтправке Или Не ЗначениеЗаполнено(Состояние) Тогда
		МожноОтправить = Истина;
		Представление  = Элементы.НадписьДокументПроведенИНеОтправлен.Заголовок;
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаПриОтправке Тогда
		ЕстьПредупреждения = Истина;
		МожноОтправить     = Истина;
		Представление      = НСтр("ru = 'При отправке <a href=""1"">возникла ошибка</a>';
									|en = 'An error occurred when sending <a href=""1"">'");
	ИначеЕсли Состояние = ВариантыСостояний.ОтправленОператору Тогда
		Представление  = НСтр("ru = '<a href=""1"">Отправлен оператору</a>';
								|en = '<a href=""1"">Sent to provider</a>'");
		ОтправленВФонд = Истина;
	ИначеЕсли Состояние = ВариантыСостояний.Отправлен Тогда
		Представление  = НСтр("ru = '<a href=""1"">Отправлен в Фонд</a>';
								|en = '<a href=""1"">Sent to SSF</a>'");
		ОтправленВФонд = Истина;
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаЛогическогоКонтроля Тогда
		ЕстьОшибки    = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">ошибки логического контроля</a>';
							|en = 'Not accepted, see <a href=""1"">logical control errors</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Принят Тогда
		Представление = НСтр("ru = '<a href=""1"">Успешно принят Фондом</a>';
							|en = '<a href=""1"">Accepted by SSF</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.НеПринят Тогда
		ЕстьОшибки    = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">протокол</a>';
							|en = 'Not accepted, see <a href=""1"">protocol</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ПринятСЗамечаниями Тогда
		ЕстьПредупреждения = Истина;
		Представление     = НСтр("ru = 'Принят с замечаниями, см. <a href=""1"">несоответствия</a>';
								|en = 'Accepted with comments, see <a href=""1"">mismatches</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Несоответствие Тогда
		ЕстьПредупреждения = Истина;
		Представление     = НСтр("ru = 'Выявлены <a href=""1"">несоответствия</a>';
								|en = '<a href=""1"">Mismatches</a> are detected'");
	Иначе
		СостояниеСтрокой = Строка(Состояние);
		СостояниеСтрокой = НРег(Лев(СостояниеСтрокой, 1)) + Сред(СостояниеСтрокой, 2);
		Представление    = СтрШаблон(НСтр("ru = 'Проведен и <a href=""1"">%1</a>';
											|en = 'Posted and <a href=""1"">%1</a>'"), СостояниеСтрокой);
	КонецЕсли;
	
	Результат = Новый Структура("Состояние, ЗаголовокНадписи, ЕстьОшибки, ЕстьПредупреждения, МожноОтправить, ОтправленВФонд");
	Результат.Состояние          = Состояние;
	Результат.ЗаголовокНадписи   = СтроковыеФункции.ФорматированнаяСтрока(Представление);
	Результат.ЕстьОшибки         = ЕстьОшибки;
	Результат.ЕстьПредупреждения = ЕстьПредупреждения;
	Результат.МожноОтправить     = МожноОтправить;
	Результат.ОтправленВФонд     = ОтправленВФонд;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщенияПользователю()
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Объект.КоличествоОшибокПроведения = Сообщения.Количество();
	Если Объект.ОтключитьПроверкиПроведения Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация сообщений к особенностям формы.
		Если ЗначениеЗаполнено(Сообщение.Поле) Тогда
			АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение);
			СЭДОФСС.СвертываемыеГруппыАдаптироватьСообщениеПользователю(ЭтотОбъект, Сообщение);
		КонецЕсли;
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Организация

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	// Физлицо и СНИЛС не очищаются, сотрудник будет найден по ним.
	Объект.Сотрудник = Неопределено;
	Объект.Страхователь = Неопределено;
	Объект.ГоловнаяОрганизация = Неопределено;
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Организация");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	УстановитьФункциональныеОпцииФормы();
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СтраховательПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Страхователь");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Страхователь");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыГруппыСтрахователь(Видимость, Представление)
	
	Представление = Строка(Объект.Страхователь);
	
	Если ЗначениеЗаполнено(Объект.СтраховательЭлектроннаяПочта) Тогда
		Представление = ?(Представление = "", "", Представление + ", ") + Объект.СтраховательЭлектроннаяПочта;
	КонецЕсли;
	
	УполномоченныйПредставительПредставление = ПредставлениеГруппыУполномоченныйПредставитель();
	Если ЗначениеЗаполнено(УполномоченныйПредставительПредставление) Тогда
		Представление = ?(Представление = "", "", Представление + ", ")
			+ СтрШаблон(НСтр("ru = 'Уполномоченный представитель: %1';
							|en = 'Authorized representative: %1'"), УполномоченныйПредставительПредставление);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сотрудник

&НаКлиенте
Процедура НеЧислилсяВОрганизацииПослеОтветаНаВопрос(Ответ, ПустойПараметр) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеЧислилсяВОрганизации = Истина;
		Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элементы.НеЧислилсяВОрганизации);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПредставлениеЛьгот()
	Массив = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ПричинаПредоставленияЛьготы) Тогда
		Массив.Добавить(Объект.ПричинаПредоставленияЛьготы);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтношениеКОсобойЗоне)
		И Объект.ОтношениеКОсобойЗоне <> Перечисления.ОтношениеКОсобойЗоне.Нет Тогда
		Элемент = Элементы.ВидОсобойЗоны.СписокВыбора.НайтиПоЗначению(Объект.ВидОсобойЗоны);
		Если Элемент = Неопределено Или Не ЗначениеЗаполнено(Элемент.Представление) Тогда
			ПредставлениеОсобойЗоны = Строка(Объект.ВидОсобойЗоны);
		Иначе
			ПредставлениеОсобойЗоны = Элемент.Представление;
		КонецЕсли;
		Массив.Добавить(НРег(Строка(Объект.ОтношениеКОсобойЗоне) + " " + ПредставлениеОсобойЗоны));
	КонецЕсли;
	Возврат СтрСоединить(Массив, ", ");
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыЛьгот()
	Если Объект.ОтношениеКОсобойЗоне = Перечисления.ОтношениеКОсобойЗоне.Нет Тогда
		Элементы.ВидОсобойЗоны.Доступность = Ложь;
	Иначе
		Элементы.ВидОсобойЗоны.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере(Знач Событие)
	Если Событие = "СотрудникПриИзменении" Тогда
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Сотрудник");
		Объект.ФизическоеЛицо = Неопределено;
		Объект.СНИЛС          = Неопределено;
	КонецЕсли;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	Объект.Сотрудник = Неопределено;
	Объект.СНИЛС     = Неопределено;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ФизическоеЛицо");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СНИЛСПриИзмененииНаСервере()
	Объект.Сотрудник      = Неопределено;
	Объект.ФизическоеЛицо = Неопределено;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ФизическоеЛицо");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СНИЛС");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ГражданствоПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Гражданство");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Гражданство");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОтношениеКОсобойЗонеПриИзмененииНаСервере()
	Если Объект.ОтношениеКОсобойЗоне = Перечисления.ОтношениеКОсобойЗоне.Нет Тогда
		Объект.ВидОсобойЗоны = Перечисления.ВидыОсобойЗоныПроживанияРаботы.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ВидОсобойЗоны) Тогда
		Объект.ВидОсобойЗоны = Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаСПравомНаОтселение;
	КонецЕсли;
	ОбновитьЭлементыЛьгот();
КонецПроцедуры

#КонецОбласти

#Область СпособВыплаты

&НаСервере
Процедура ОбновитьЭлементыСпособаВыплатыПособия()
	// Страница способа выплаты.
	СпособВыплаты = Объект.СпособВыплатыПособия;
	// Список выбора.
	СЭДОФСС.СписокВыбораСпособовВыплаты(Элементы.СпособВыплатыПособия.СписокВыбора, СпособВыплаты);
	ЭтоИнаяОрганизация = (СпособВыплаты = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация);
	// Страница способа выплаты.
	Если СпособВыплаты = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьНаКартуМИР);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьЧерезБанк);
		// Результат проверки номера счета.
		РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(
			Объект.НомерСчета,
			Объект.БанкБИК,
			Объект.БанкКоррСчет);
		Элементы.РезультатПроверкиНомераСчета.Заголовок = РезультатПроверки.Пояснение;
		Если РезультатПроверки.Успех Тогда
			Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаУспешнойОперацииБЗК;
		Иначе
			Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаПредупрежденияБЗК;
		КонецЕсли;
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьПочтовымПереводом);
	ИначеЕсли ЭтоИнаяОрганизация Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьИнаяОрганизация);
	Иначе
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Неопределено);
	КонецЕсли;
	// Цвет гиперссылки "Изменить способ выплаты пособия".
	Если ЭтотОбъект["СпособВыплатыПособияФикс"]
		Или ЭтотОбъект["БанкФикс"]
		Или ЭтотОбъект["АдресПроживанияВидФикс"] Тогда
		Элементы.ИзменитьСпособВыплатыПособий.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Иначе
		Элементы.ИзменитьСпособВыплатыПособий.ЦветТекста = Новый Цвет;
	КонецЕсли;
	// Видимость кнопки "Отменить изменения способа выплаты пособия".
	Элементы.ИзменитьСпособВыплатыПособий.Видимость = Не ЭтоИнаяОрганизация;
	Элементы.ОтменитьИзмененияСпособаВыплатыПособия.Видимость = Не ЭтоИнаяОрганизация И (
		ЭтотОбъект["СпособВыплатыПособияФикс"]
		Или ЭтотОбъект["КартаМИРФикс"]
		Или ЭтотОбъект["БанкФикс"]
		Или ЭтотОбъект["БанкБИКФикс"]
		Или ЭтотОбъект["БанкКоррСчетФикс"]
		Или ЭтотОбъект["БанкНаименованиеФикс"]
		Или ЭтотОбъект["НомерСчетаФикс"]
		Или ЭтотОбъект["АдресПроживанияВидФикс"]
		Или ЭтотОбъект["АдресПроживанияФикс"]
		Или ЭтотОбъект["АдресПроживанияФИАСДомФикс"]
		Или ЭтотОбъект["АдресПроживанияФИАСРОФикс"]);
КонецПроцедуры

&НаСервере
Процедура ОтменитьИзмененияСпособаВыплатыПособияНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоИмениГруппы(
		ЭтотОбъект,
		"СпособВыплатыПособия");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СпособВыплатыПособияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СпособВыплатыПособия");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("СпособВыплатыПособия");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Банк");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура АдресПроживанияВидПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "АдресПроживанияВид");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("АдресПроживанияВид");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ИнаяОрганизацияБИКПриИзмененииНаСервере()
	ЗаполнитьИнаяОрганизацияБанк();
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнаяОрганизацияБанк()
	Если Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация Тогда
		ИнаяОрганизацияБанк = СЭДОФСС.НайтиБанкПоБИК(Объект.ИнаяОрганизацияБИК);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнаяОрганизацияБанкПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(ИнаяОрганизацияБанк) Тогда
		Объект.ИнаяОрганизацияБИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнаяОрганизацияБанк, "Код");
	Иначе
		Объект.ИнаяОрганизацияБИК = "";
	КонецЕсли;
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ИнаяОрганизацияБИК");
КонецПроцедуры

#КонецОбласти

#Область УполномоченныйПредставитель

&НаСервере
Функция ПредставлениеГруппыУполномоченныйПредставитель()
	Представление = Объект.УполномоченныйПредставительФИО;
	
	Если ЗначениеЗаполнено(Объект.УполномоченныйПредставительДолжность) Тогда
		Представление = ?(Представление = "", "", Представление + ", ") + Объект.УполномоченныйПредставительДолжность;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

&НаСервере
Процедура УполномоченныйПредставительПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "УполномоченныйПредставитель");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("УполномоченныйПредставитель");
	ОбновитьВторичныеДанныеНаСервере();
	ОбновитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницу(Страницы, ТекущаяСтраница)
	Для Каждого Страница Из Страницы.ПодчиненныеЭлементы Цикл
		Страница.Видимость = (Страница = ТекущаяСтраница);
	КонецЦикла;
	Если ТекущаяСтраница <> Неопределено Тогда
		Страницы.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	//  Вложения - Массив Из Структура, Неопределено - файлы вложений. Важно: допускаются только
	//              текстовые вложения (*.txt). Поля структуры элемента вложения:
	//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
	//   *ВидДанных - Строка - определяет преобразование переданных данных.
	//                Возможна передача одного из значений:
	//                  - ИмяФайла - Строка - полное имя файла вложения;
	//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
	//                  - Текст - Строка - текст вложения;
	//   *Данные - Строка - данные для формирования вложения;
	Вложения = Новый Массив;
	
	Регистрация = Объект.РегистрацияСведений;
	Если ЗначениеЗаполнено(Регистрация) Тогда
		ИменаРеквизитов = "ДоставкаИдентификатор, РегистрацияИдентификатор, НесоответствиеИдентификатор";
		Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистрация, ИменаРеквизитов);
		Если ЗначениеЗаполнено(Значения.ДоставкаИдентификатор) Тогда
			ТекстXML = СЭДОФСС.ТекстXML(Значения.ДоставкаИдентификатор);
			Если ЗначениеЗаполнено(ТекстXML) Тогда
				Кодировка = СериализацияБЗК.КодировкаXML(ТекстXML);
				ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, Кодировка, Истина);
				Вложение = Новый Структура("Представление, ВидДанных, Данные");
				Вложение.Представление = НСтр("ru = 'Доставка';
												|en = 'Delivery'") + "_" + Значения.ДоставкаИдентификатор + ".xml";
				Вложение.ВидДанных     = "Адрес";
				Вложение.Данные        = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				Вложения.Добавить(Вложение);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Значения.РегистрацияИдентификатор) Тогда
			ТекстXML = СЭДОФСС.ТекстXML(Значения.РегистрацияИдентификатор);
			Если ЗначениеЗаполнено(ТекстXML) Тогда
				Кодировка = СериализацияБЗК.КодировкаXML(ТекстXML);
				ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, Кодировка, Истина);
				Вложение = Новый Структура("Представление, ВидДанных, Данные");
				Вложение.Представление = НСтр("ru = 'Регистрация';
												|en = 'Register'") + "_" + Значения.РегистрацияИдентификатор + ".xml";
				Вложение.ВидДанных     = "Адрес";
				Вложение.Данные        = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				Вложения.Добавить(Вложение);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Значения.НесоответствиеИдентификатор) Тогда
			ТекстXML = СЭДОФСС.ТекстXML(Значения.НесоответствиеИдентификатор);
			Если ЗначениеЗаполнено(ТекстXML) Тогда
				Кодировка = СериализацияБЗК.КодировкаXML(ТекстXML);
				ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, Кодировка, Истина);
				Вложение = Новый Структура("Представление, ВидДанных, Данные");
				Вложение.Представление = НСтр("ru = 'Несоответствие';
												|en = 'Mismatch'") + "_" + Значения.НесоответствиеИдентификатор + ".xml";
				Вложение.ВидДанных     = "Адрес";
				Вложение.Данные        = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				Вложения.Добавить(Вложение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СЭДОФСС.ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения);
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОткрытьРегистрацию()
	ПараметрыФормы = Новый Структура("Ключ", Объект.РегистрацияСведений);
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.ФормаОбъекта", ПараметрыФормы, , , , , , Блокировать);
КонецПроцедуры

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
	УполномоченныйПредставительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

#КонецОбласти
