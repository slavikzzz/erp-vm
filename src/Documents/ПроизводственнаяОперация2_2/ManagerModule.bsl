#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("Производство");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ПроизводственнаяОперация2_2") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Производственная операция".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений.
//  - Неопределено.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПроизводственнаяОперация2_2) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПроизводственнаяОперация2_2.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПроизводственнаяОперация2_2);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПооперационноеУправление";
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьПроизводственнуюОперациюНаОсновании";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПроизводственнаяОперация";
	КомандаПечати.Представление = НСтр("ru = 'Производственная операция';
										|en = 'Routing operation'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	//
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПроизводственнаяОперацияЭтикетка";
	КомандаПечати.Представление = НСтр("ru = 'Этикетка операции';
										|en = 'Operation label'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОБраке";
	КомандаПечати.Представление = НСтр("ru = 'Акт о браке';
										|en = 'Nonconformity report'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусДокумента

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПроизводственныхОпераций[НовыйСтатус];
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка                КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Статус                КАК ТекущийСтатус,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	&Статус                                 КАК НовыйСтатус,
		|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                   КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен              КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
		|	ТаблицаДокументов.МожноПропустить       КАК МожноПропустить,
		|	ИСТИНА                                  КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)");
		
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат НЕ (НовыйСтатус = "Пропущена"
		И НЕ ВыборкаПроверки.МожноПропустить);
	
КонецФункции

// Выполняет действия необходимые при установке нового статуса документа
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором изменяется статус.
//
Процедура ЗаполнитьРеквизитыПриУстановкеСтатуса(Объект) Экспорт
	
	Если Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
		
		КоличествоКВыполнению = ОперативныйУчетПроизводстваКлиентСервер.КоличествоКВыполнению(Объект);
		Если КоличествоКВыполнению > 0 Тогда
			
			НоваяЗапись = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("Выполнение");
			НоваяЗапись.Количество = КоличествоКВыполнению;
			ДобавитьЗаписьПротокола(Объект, НоваяЗапись);
			
		КонецЕсли;
		
		Если Объект.КоличествоНаДоработке > 0 Тогда
			
			НоваяЗапись = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("ПредъявлениеККонтролю");
			НоваяЗапись.Количество = Объект.КоличествоНаДоработке;
			ДобавитьЗаписьПротокола(Объект, НоваяЗапись);
			
		КонецЕсли;
		
	Иначе
		
		СписокРеквизитов = "";
		
		Если Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена Тогда
			СписокРеквизитов = "КоличествоНаКонтроле,КоличествоНаДоработке,КоличествоБрак,КоличествоФакт";
			НазваниеСобытия  = "Аннулирование";
		ИначеЕсли Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Создана Тогда
			СписокРеквизитов = "КоличествоНаКонтроле,КоличествоНаДоработке,КоличествоБрак,КоличествоОтменено,КоличествоФакт";
			НазваниеСобытия  = "Аннулирование";
		ИначеЕсли Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Пропущена Тогда
			СписокРеквизитов = "КоличествоНаКонтроле,КоличествоНаДоработке,КоличествоБрак,КоличествоФакт";
			НазваниеСобытия  = "Аннулирование";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		
			Итоги = ОперативныйУчетПроизводстваКлиентСервер.СтруктураИтоговКонструктор(Объект);
			
			Для Каждого ИмяРеквизита Из СтрРазделить(СписокРеквизитов, ",") Цикл
				
				КоличествоСторно = Итоги[ИмяРеквизита];
				Если КоличествоСторно > 0 Тогда
					
					НоваяЗапись = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор(НазваниеСобытия);
					НоваяЗапись.ПредыдущееСостояние = ИмяРеквизита;
					НоваяЗапись.Количество          = КоличествоСторно;
					НоваяЗапись.Комментарий         = СтрШаблон(НСтр("ru = 'Установка статуса ""%1""';
																	|en = 'Set the ""%1"" status'"), Объект.Статус);
					ДобавитьЗаписьПротокола(Объект, НоваяЗапись);
				
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
		Объект.ТребуетПовторения = Ложь;
		
	КонецЕсли;
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
		Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполняется
			ИЛИ Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена,
		Объект.НачалоВыполнения);
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
		Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена,
		Объект.ОкончаниеВыполнения);
	
	ЗаполнитьСтатусыУказанияСерий(Объект);
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках табличных частей
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = Документы.ПроизводственнаяОперация2_2.ПараметрыУказанияСерий(Объект);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.МатериалыИРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата, Статус, Этап";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = Новый Структура;
	
	НастройкиПроизводства = ПроизводствоСервер.ИспользованиеСерийВПроизводстве22();
	
	#Область ВыходныеИзделия
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ПроизводственнаяОперация2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ВыходныеИзделия";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии = "ВыходныеИзделияСерии";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = НастройкиПроизводства.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = НастройкиПроизводства.ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерийТЧ.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПроизводствоПродукции);
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	
	ПараметрыУказанияСерийТЧ.ФактОтбора = (Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	
	ПараметрыУказанияСерийТЧ.Дата = Объект.Дата;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");
	
	ПараметрыУказанияСерий.Вставить("ВыходныеИзделия", ПараметрыУказанияСерийТЧ);
	
	#КонецОбласти
	
	#Область МатериалыИРаботы
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ПроизводственнаяОперация2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "МатериалыИРаботы";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии  = "МатериалыИРаботы";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = НастройкиПроизводства.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = НастройкиПроизводства.ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве);
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Истина; // всегда используется форма регистрации серий (в ней можно также выбрать из остатков)
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерийТЧ.ПланированиеОтбора = Ложь;
	
	ПараметрыУказанияСерийТЧ.ФактОтбора = (Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	
	ПараметрыУказанияСерийТЧ.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.Вставить("МатериалыИРаботы", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на распоряжение.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия" Тогда
		
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия();
		
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "МатериалыИРаботы" Тогда
		
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалыИРаботы();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область Прочее

// Назначает рабочий центр выбранным операциям операциям
//
// Параметры:
//  Операция	 - ДокументСсылка.ПроизводственнаяОперация2_2, Массив	 - документ или массив документов "Производственная операция"
//  РабочийЦентр - СправочникСсылка.РабочиеЦентры						 - назначаемый рабочий центр.
//  ВариантНаладки - СправочникСсылка.ВариантыНаладки					 - назначаемый вариант наладки.
//
Процедура НазначитьРабочийЦентрОперациям(Операция, РабочийЦентр, ВариантНаладки = Неопределено) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Операция);
	
	Если Не РабочийЦентр.Пустая() Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочийЦентр, "ВидРабочегоЦентра, КоэффициентВремениРаботы");
	Иначе
		Реквизиты = Неопределено;
	КонецЕсли;
	
	Для каждого Операция Из МассивСсылок Цикл
		
		ДокументОбъект = Операция.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстИсключения = СтрШаблон(
				НСтр("ru = 'Не удалось изменить документ %1. Возможно, документ в настоящий момент редактируется.';
					|en = 'Cannot change the %1 document. Maybe, the document is being edited.'"),
				Операция);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
		Если Реквизиты <> Неопределено Тогда
			
			ДокументОбъект.ВидРабочегоЦентра = Реквизиты.ВидРабочегоЦентра;
			
			Если Не ДокументОбъект.РабочийЦентр.Пустая() Тогда
				КоэффициентВремениРаботыДоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.РабочийЦентр, "КоэффициентВремениРаботы");
			Иначе
				КоэффициентВремениРаботыДоИзменения = 1;
			КонецЕсли;
			
			ДокументОбъект.ВремяВыполнения = Реквизиты.КоэффициентВремениРаботы*ДокументОбъект.ВремяВыполнения/КоэффициентВремениРаботыДоИзменения;
			
		КонецЕсли;
		
		ДокументОбъект.РабочийЦентр = РабочийЦентр;
		ДокументОбъект.ВариантНаладки = ВариантНаладки;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокументОбъект.Разблокировать();
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные выполненных документов.
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап для отбора операций.
//
// Возвращаемое значение:
//  Структура - содержит свернутые данные табличных частей выполненных операций.
//
Функция ДанныеВыполненныхОпераций(Этап) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(Таблица.Количество) КАК Количество,
		|	Таблица.Упаковка КАК Упаковка,
		|	Таблица.Серия КАК Серия,
		|	Документ.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.ВыходныеИзделия КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.КоличествоНаКонтроле = 0
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Упаковка,
		|	Таблица.Серия,
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ),
		|	Документ.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Серия КАК Серия,
		|	Документ.Подразделение КАК Подразделение,
		|	СУММА(Таблица.Количество) КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.ВыходныеИзделияСерии КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ),
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Серия,
		|	Документ.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Упаковка КАК Упаковка,
		|	Таблица.Серия КАК Серия,
		|	Документ.Подразделение КАК Подразделение,
		|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(Таблица.Количество) КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.МатериалыИРаботы КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Упаковка,
		|	Таблица.Серия,
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ),
		|	Документ.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.ВидРабот КАК ВидРабот,
		|	Таблица.Исполнитель КАК Исполнитель,
		|	Таблица.НазначениеРабот КАК НазначениеРабот,
		|	Документ.Подразделение КАК Подразделение,
		|	СУММА(Таблица.Количество) КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.Трудозатраты КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ),
		|	Таблица.ВидРабот,
		|	Таблица.Исполнитель,
		|	Таблица.НазначениеРабот,
		|	Документ.Подразделение");
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыходныеИзделия", МассивРезультатов[0].Выгрузить());
	Результат.Вставить("ВыходныеИзделияСерии", МассивРезультатов[1].Выгрузить());
	Результат.Вставить("МатериалыИРаботы", МассивРезультатов[2].Выгрузить());
	Результат.Вставить("Трудозатраты", МассивРезультатов[3].Выгрузить());
	
	Возврат Результат;
	
КонецФункции

// Включает/отключает использование свойств документа.
//
Процедура УстановитьИспользованиеСвойств() Экспорт
	
	ВидыИспользуются = Константы.ИспользоватьВидыТехнологическихОпераций.Получить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыОпераций.НаборСвойств КАК Ссылка
		|ИЗ
		|	Справочник.ВидыТехнологическихОпераций КАК ВидыОпераций
		|ГДЕ
		|	НЕ ВидыОпераций.ЭтоГруппа
		|	И ВидыОпераций.НаборСвойств.Используется <> &Используется
		|");
	Запрос.УстановитьПараметр("Используется", ВидыИспользуются);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект - 
		СпрОбъект.Используется = ВидыИспользуются;
		СпрОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Разделяет один документ на два.
Процедура Разделить(Ссылка, ЗначенияЗаполнения, БлокироватьДанные = Истина) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектСтарый = Ссылка.ПолучитьОбъект();
		
		Если БлокироватьДанные Тогда
			ОбъектСтарый.Заблокировать();
		КонецЕсли;
		
		ОбъектСтарый.ДополнительныеСвойства.Вставить("Разбиение");
		
		ОбъектНовый = ВыделитьОперацию(ОбъектСтарый, ЗначенияЗаполнения);
		
		// Запись документов
		РежимЗаписи = ?(ОбъектСтарый.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ОбъектСтарый.Записать(РежимЗаписи);
		ОбъектНовый.Записать(РежимЗаписи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Производственные операции';
				|en = 'Routing operations'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПроизводственнаяОперация2_2,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Разделяет один документ на два: один со статусом "Выполнено", другой с указанным статусом.
Процедура ВыполнитьЧастично(Ссылка, Выполнено, СтатусНовой = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ОбъектСтарый = Ссылка.ПолучитьОбъект();
		ОбъектСтарый.Заблокировать();
		ОбъектСтарый.ДополнительныеСвойства.Вставить("Разбиение");
		
		КоличествоНов = ОбъектСтарый.Количество - ОбъектСтарый.КоличествоОтменено - Выполнено;
		ВремяВыполненияНов = КоличествоНов*ОбъектСтарый.ВремяВыполнения/(ОбъектСтарый.Количество-ОбъектСтарый.КоличествоОтменено);
		
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("Количество", КоличествоНов);
		ЗначенияЗаполнения.Вставить("ВремяВыполнения", ВремяВыполненияНов);
		ЗначенияЗаполнения.Вставить("КоличествоНаКонтроле", 0);
		ЗначенияЗаполнения.Вставить("КоличествоНаДоработке", 0);
		ЗначенияЗаполнения.Вставить("КоличествоБрак", 0);
		ЗначенияЗаполнения.Вставить("КоличествоФакт", 0);
		ЗначенияЗаполнения.Вставить("КоличествоОтменено", 0);
	
		ОбъектНовый = ВыделитьОперацию(ОбъектСтарый, ЗначенияЗаполнения);
		
		Если НЕ ОбъектСтарый.УстановитьСтатус("Выполнена", Новый Структура) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ОбъектНовый.УстановитьСтатус(СтатусНовой, Новый Структура);
		
		// Запись документов
		РежимЗаписи = ?(ОбъектСтарый.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ОбъектСтарый.Записать(РежимЗаписи);
		ОбъектНовый.Записать(РежимЗаписи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Производственные операции';
				|en = 'Routing operations'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПроизводственнаяОперация2_2,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Создает два документа из одного.
// 
// Параметры:
// 	Объект - ДокументОбъект.ПроизводственнаяОперация2_2 - 
// 	ЗначенияЗаполнения - Структура - Описание:
// * ВремяВыполнения - Число -
// * Количество - Число -
// Возвращаемое значение:
// 	ДокументОбъект.ПроизводственнаяОперация2_2 -
// 
Функция ВыделитьОперацию(Объект, ЗначенияЗаполнения) Экспорт
	
	НовыйОбъект = Объект.Скопировать();
	
	// Заполнение реквизитов шапки
	ЗаполнитьЗначенияСвойств(НовыйОбъект, ЗначенияЗаполнения);
	
	НовыйОбъект.Протокол.Очистить();
	
	Коэффициент = ?(Объект.Количество-Объект.КоличествоОтменено <> 0,
						НовыйОбъект.Количество/(Объект.Количество-Объект.КоличествоОтменено),
						-1);
	
	НовыйОбъект.Дата = ТекущаяДатаСеанса();
	
	ЗаписьПротокола = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("Отмена");
	ЗаписьПротокола.Количество = НовыйОбъект.Количество;
	ЗаписьПротокола.Комментарий = НСтр("ru = 'Разделение операции';
										|en = 'Separate the operation'");
	ДобавитьЗаписьПротокола(Объект, ЗаписьПротокола);
	
	Объект.ВремяВыполнения = Объект.ВремяВыполнения - НовыйОбъект.ВремяВыполнения;
	
	Если Объект.КоличествоФакт <> 0 Тогда
		
		КоличествоФакт = Объект.КоличествоФакт;
		Объект.КоличествоФакт = Мин(Объект.Количество-Объект.КоличествоОтменено, Объект.КоличествоФакт);
		НовыйОбъект.КоличествоФакт = КоличествоФакт - Объект.КоличествоФакт;
		
	КонецЕсли;
	
	Если Коэффициент <> -1 Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
		
		КэшированныеЗначения = Неопределено;
		
		СтрокиУдалить = НоваяСтруктураДляСтрокНаУдаление();
		
		ИменаТЧ = СтрРазделить("МатериалыИРаботы,ВыходныеИзделия,ВыходныеИзделияСерии,Трудозатраты", ",");
		
		// Пересчет табличных частей
		Для каждого ТЧ Из ИменаТЧ Цикл
			
			Для Индекс = 0 По НовыйОбъект[ТЧ].Количество()-1 Цикл
				
				СтрокаНовый = НовыйОбъект[ТЧ][Индекс];
				СтрокаНовый.Количество = СтрокаНовый.Количество * Коэффициент;
				Если СтрокаНовый.Количество = 0 Тогда
					Если СтрокиУдалить.Новый.Получить(ТЧ) = Неопределено Тогда
						СтрокиУдалить.Новый.Вставить(ТЧ, Новый Массив);
					КонецЕсли;
					СтрокиТЧ = СтрокиУдалить.Новый[ТЧ]; //Массив из СтрокаТаблицыЗначений - 
					СтрокиТЧ.Добавить(СтрокаНовый);
				КонецЕсли;
				
				СтрокаСтарый = Объект[ТЧ][Индекс];
				СтрокаСтарый.Количество = СтрокаСтарый.Количество - СтрокаНовый.Количество;
				Если СтрокаСтарый.Количество = 0 Тогда
					Если СтрокиУдалить.Старый.Получить(ТЧ) = Неопределено Тогда
						СтрокиУдалить.Старый.Вставить(ТЧ, Новый Массив);
					КонецЕсли;
					СтрокиТЧ = СтрокиУдалить.Старый[ТЧ]; //Массив из СтрокаТаблицыЗначений - 
					СтрокиТЧ.Добавить(СтрокаСтарый);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТЧ = "МатериалыИРаботы" ИЛИ ТЧ = "ВыходныеИзделия" Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйОбъект[ТЧ], СтруктураДействий, КэшированныеЗначения);
				ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект[ТЧ], СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
			
		КонецЦикла;
		
		// Сверка серий изделий
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		
		Для Сч = 1 По 2 Цикл
			
			Документ = ?(Сч = 1, НовыйОбъект, Объект);
			
			Если Документ.ВыходныеИзделияСерии.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Серии = Документ.ВыходныеИзделияСерии.Выгрузить(, "Номенклатура, Характеристика, Количество");
			Серии.Свернуть("Номенклатура, Характеристика", "Количество");
			
			Изделия = Документ.ВыходныеИзделия.Выгрузить(, "Номенклатура, Характеристика, Количество");
			Изделия.Свернуть("Номенклатура, Характеристика", "Количество");
			Изделия.Индексы.Добавить("Номенклатура, Характеристика");
			
			Для каждого СтрокаСерия Из Серии Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерия);
				СтрокиИзделия = Изделия.НайтиСтроки(СтруктураПоиска);
				
				Отклонение = ?(СтрокиИзделия.ВГраница() = 0, СтрокиИзделия[0].Количество - СтрокаСерия.Количество, 0);
				Если Отклонение = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = Документ.ВыходныеИзделияСерии.НайтиСтроки(СтруктураПоиска);
				
				Для каждого Строка Из НайденныеСтроки Цикл
					
					Если Строка.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоЗачет = Макс(Отклонение, -Строка.Количество);
					Отклонение = Отклонение - КоличествоЗачет;
					Строка.Количество = Строка.Количество + КоличествоЗачет;
					
					Если Строка.Количество = 0 Тогда
						Имя = ?(Сч = 1, "Новый", "Старый");
						Если СтрокиУдалить[Имя].Получить("ВыходныеИзделияСерии") = Неопределено Тогда
							СтрокиУдалить[Имя].Вставить("ВыходныеИзделияСерии", Новый Массив);
						КонецЕсли;
						СтрокиВыходныеИзделия = СтрокиУдалить[Имя]["ВыходныеИзделияСерии"]; //Массив из СтрокаТаблицыЗначений - 
						СтрокиВыходныеИзделия.Добавить(Строка);
					КонецЕсли;
					
					Если Отклонение = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Удаление пустых строк
		Для каждого КлючИЗначение Из СтрокиУдалить.Старый Цикл
			Для каждого Строка Из КлючИЗначение.Значение Цикл
				Объект[КлючИЗначение.Ключ].Удалить(Строка);
			КонецЦикла;
		КонецЦикла;
		Для каждого КлючИЗначение Из СтрокиУдалить.Новый Цикл
			Для каждого Строка Из КлючИЗначение.Значение Цикл
				НовыйОбъект[КлючИЗначение.Ключ].Удалить(Строка);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация) И
	|	ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	ПолноеИмяДокумента = "Документ.ПроизводственнаяОперация2_2";
	
	Если ИмяРегистра = "ДвиженияСерийТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыКОформлению(Неопределено, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТрудозатраты";
		
	Иначе
		
		ШаблонИсключения = НСтр("ru = 'В документе %1 не реализована адаптация текста запроса формирования движений по регистру %2.';
								|en = 'In the %1 document, adaptation of request for generating records of the %2 register is not implemented.'");
		ТекстИсключения = СтрШаблон(ШаблонИсключения, ПолноеИмяДокумента, ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ПереопределениеРасчетаПараметров);
	
	Возврат Результат;
	
КонецФункции

// Используется в механизмах обновления ИБ
//
// Параметры:
//  ИмяРегистра	 - Строка	 - имя регистра.
//
// Возвращаемое значение:
//  Соответствие -
//
Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументСсылка,
		"Дата, Подразделение, Организация, Этап, Статус, ОперацияКакРаспоряжениеВыработки");
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Дата);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПартияПроизводства", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Этап, "ПартияПроизводства"));
	Запрос.УстановитьПараметр("Статус", Реквизиты.Статус);
	Запрос.УстановитьПараметр("ОперацияКакРаспоряжениеВыработки", Реквизиты.ОперацияКакРаспоряжениеВыработки);
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	&Подразделение КАК Отправитель,
	|	&Подразделение КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве) КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.МатериалыИРаботы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Количество,
	|	&Подразделение,
	|	&Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции),
	|	&Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Количество,
	|	&Подразделение,
	|	&Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции),
	|	&Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)          КАК ВидДвижения,
	|	ТаблицаТрудозатраты.Ссылка.ОкончаниеВыполнения  КАК Период,
	|	&Организация                                    КАК Организация,
	|	&ПартияПроизводства                             КАК ПартияПроизводства,
	|	ТаблицаТрудозатраты.Ссылка                      КАК Распоряжение,
	|	ТаблицаТрудозатраты.ВидРабот                    КАК ВидРабот,
	|	ТаблицаТрудозатраты.Исполнитель                 КАК Исполнитель,
	|	&Подразделение                                  КАК Подразделение,
	|	ТаблицаТрудозатраты.КодСтроки                   КАК КодСтрокиРаспоряжения,
	|	ТаблицаТрудозатраты.Количество                  КАК Количество
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.Трудозатраты КАК ТаблицаТрудозатраты
	|ГДЕ
	|	&ОперацияКакРаспоряжениеВыработки
	|	И ТаблицаТрудозатраты.Ссылка = &Ссылка
	|
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
#КонецОбласти

#Область Серии

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ &ФактОтбора
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриПроизводствеПродукции
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 2
	|					КОГДА НЕ &ФактОтбора
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 21
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ТоварыДляЗапроса.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалыИРаботы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ &ФактОтбора
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриРасходеМатериалов
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 2
	|					КОГДА НЕ &ФактОтбора
	|						ТОГДА 21
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПроизводственнаяОперация") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПроизводственнаяОперация",
			НСтр("ru = 'Производственная операция';
				|en = 'Routing operation'"),
			СформироватьПечатнуюФормуОперация(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПроизводственнаяОперацияЭтикетка") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПроизводственнаяОперацияЭтикетка",
			НСтр("ru = 'Этикетка операции';
				|en = 'Operation label'"),
			СформироватьПечатнуюФормуЭтикеткаОперации(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОБраке") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктОБраке",
			НСтр("ru = 'Акт о браке';
				|en = 'Nonconformity report'"),
			СформироватьПечатнуюФормуАктОБраке(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Производственная операция

Функция СформироватьПечатнуюФормуОперация(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственнаяОперация2_2_ПроизводственнаяОперация";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПроизводственнаяОперация2_2.ПФ_MXL_ПроизводственнаяОперация");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ДанныеДляПечатиПроизводственнаяОперация(МассивОбъектов);
	
	ПараметрыПодразделений = ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(ДанныеДляПечати.Подразделения);
	ИспользоватьИнтервалЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
	
	ВыборкаШапка = ДанныеДляПечати.ВыборкаШапка;
	
	Пока ВыборкаШапка.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
	
		Область.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
			ВыборкаШапка, НСтр("ru = 'Производственная операция';
								|en = 'Routing operation'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Область.Параметры.Ссылка = ВыборкаШапка.Ссылка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			Область,
			ВыборкаШапка.Ссылка);
	
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка
		Область = Макет.ПолучитьОбласть("Шапка");
		
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		Область.Параметры.Заполнить(ВыборкаШапка);
		
		Область.Параметры.ИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ВыборкаШапка.ИзделиеНаименованиеПолное,
			ВыборкаШапка.ИзделиеХарактеристикаНаименованиеПолное,
			,
			,
			ДопПараметрыПредставлениеНоменклатуры);
			
		Область.Параметры.ЕдиницаИзмеренияКоличества = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
			ВыборкаШапка.ЕдиницаИзмеренияПредставление, ВыборкаШапка.КоличествоПлан);
			
		Область.Параметры.ВремяВыполненияПредставление = "" + ВыборкаШапка.ВремяВыполнения + " " + ВыборкаШапка.ВремяВыполненияЕдИзм;
		
		Если ПараметрыПодразделений.Получить(ВыборкаШапка.Подразделение).ИспользоватьПооперационноеПланирование Тогда
			Формат = "ДФ='dd.MM.yy HH:mm:ss'";
		ИначеЕсли ИспользоватьИнтервалЧас Тогда
			Формат = "ДФ='dd.MM.yyyy HH:mm'";
		Иначе
			Формат = "ДЛФ=D";
		КонецЕсли;
		
		Область.Область("НачалоВыполнения").Формат = Формат;
		Область.Область("ОкончаниеВыполнения").Формат = Формат;
		
		ТабличныйДокумент.Вывести(Область);
		
		// Материалы
		ПечатнаяФормаОперацияВывестиМатериалы(Макет, ТабличныйДокумент, ВыборкаШапка, ДанныеДляПечати.ВыборкаМатериалы);
		
		// Изделия
		ПечатнаяФормаОперацияВывестиИзделия(Макет, ТабличныйДокумент, ВыборкаШапка, ДанныеДляПечати.ВыборкаИзделия);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаШапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиПроизводственнаяОперация(Ссылки)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Операции.Ссылка                          КАК Ссылка,
		|	Операции.Номер                           КАК Номер,
		|	Операции.Дата                            КАК Дата,
		|	Операции.Подразделение                   КАК Подразделение,
		|	Операции.Подразделение.Представление     КАК ПодразделениеПредставление,
		|	Операции.Операция                        КАК Операция,
		|	&ТекстПоляРеквизитыМаршрута,
		|	Операции.Наименование                    КАК Наименование,
		|	Операции.Исполнитель                     КАК Исполнитель,
		|	Операции.Исполнитель.Представление       КАК ИсполнительПредставление,
		|
		|	Операции.Этап.ПартияПроизводства.ОсновноеИзделиеНоменклатура                      КАК Изделие,
		|	Операции.Этап.ПартияПроизводства.ОсновноеИзделиеНоменклатура.НаименованиеПолное   КАК ИзделиеНаименованиеПолное,
		|	Операции.Этап.ПартияПроизводства.ОсновноеИзделиеХарактеристика.НаименованиеПолное КАК ИзделиеХарактеристикаНаименованиеПолное,
		|	Операции.Операция.ЕдиницаИзмерения.Представление                                  КАК ЕдиницаИзмеренияПредставление,
		|
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр
		|		ИНАЧЕ Операции.ВидРабочегоЦентра
		|	КОНЕЦ                                    КАК РабочийЦентр,
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр.Представление
		|		ИНАЧЕ Операции.ВидРабочегоЦентра.Представление
		|	КОНЕЦ                                    КАК РабочийЦентрПредставление,
		|
		|	Операции.Количество - Операции.КоличествоОтменено КАК КоличествоПлан,
		|	Операции.КоличествоФакт                           КАК КоличествоФакт,
		|	Операции.НачалоВыполнения                         КАК НачалоВыполнения,
		|	Операции.ОкончаниеВыполнения                      КАК ОкончаниеВыполнения,
		|	Операции.ВремяВыполнения                          КАК ВремяВыполнения,
		|	Операции.ВремяВыполненияЕдИзм                     КАК ВремяВыполненияЕдИзм
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Материалы.Ссылка                            КАК Ссылка,
		|	Материалы.Номенклатура                      КАК Номенклатура,
		|	Материалы.Номенклатура.Код                  КАК Код,
		|	Материалы.Номенклатура.Артикул              КАК Артикул,
		|	Материалы.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Материалы.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	&ТекстЗапросаЕдиницаИзмеренияМатериалы      КАК ЕдиницаИзмерения,
		|	Материалы.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2.МатериалыИРаботы КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&Ссылки)
		|	И Материалы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) // Отображается только заполненная номенклатура (номенклатура МК не отображается)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Изделия.Ссылка                            КАК Ссылка,
		|	Изделия.НомерСтроки                       КАК НомерСтроки,
		|	Изделия.Номенклатура                      КАК Номенклатура,
		|	Изделия.Номенклатура.Код                  КАК Код,
		|	Изделия.Номенклатура.Артикул              КАК Артикул,
		|	Изделия.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Изделия.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	&ТекстЗапросаЕдиницаИзмеренияИзделия      КАК ЕдиницаИзмерения,
		|	Изделия.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2.ВыходныеИзделия КАК Изделия
		|ГДЕ
		|	Изделия.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операции.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&Ссылки)";
	
	ТекстЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование", "Материалы.Упаковка", "Материалы.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмеренияМатериалы", ТекстЕдИзм);
	
	ТекстЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование", "Изделия.Упаковка", "Изделия.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмеренияИзделия", ТекстЕдИзм);
	
	ТекстПоляРеквизитыМаршрута = Справочники.ТехнологическиеОперации.ТекстПоляРеквизитыМаршрутаОперации("Операции.Операция");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляРеквизитыМаршрута", ТекстПоляРеквизитыМаршрута);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВыборкаШапка",        МассивРезультатов[0].Выбрать());
	ДанныеДляПечати.Вставить("ВыборкаМатериалы",    МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ДанныеДляПечати.Вставить("ВыборкаИзделия",      МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ДанныеДляПечати.Вставить("Подразделения",       МассивРезультатов[3].Выгрузить().ВыгрузитьКолонку("Подразделение"));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Параметры:
// 	Макет - МакетОформленияКомпоновкиДанных, ГеографическаяСхема, СхемаКомпоновкиДанных, ГрафическаяСхема, ОболочкаHTMLДокумента, ДвоичныеДанные, ТабличныйДокумент, ОболочкаActiveDocument, ТекстовыйДокумент - Описание
// 	ТабличныйДокумент - ТабличныйДокумент - Описание
// 	ВыборкаШапка -  ВыборкаИзРезультатаЗапроса -
// 	ВыборкаМатериалы -  ВыборкаИзРезультатаЗапроса -
Процедура ПечатнаяФормаОперацияВывестиМатериалы(Макет, ТабличныйДокумент, ВыборкаШапка, ВыборкаМатериалы)
	
	Если НЕ ВыборкаМатериалы.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
			
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
		
	Область = Макет.ПолучитьОбласть("ЗаголовокТовары");
	Область.Параметры.ИмяТаблицы = НСтр("ru = 'Материалы';
										|en = 'Materials'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТабличныйДокумент.Вывести(Область);
			
	Если ВыводитьКоды Тогда
	   	
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_СКодом"); // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
			
	Иначе
				
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_БезКода");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_БезКода");  // см. ПроизводствоСервер.СлужебнаяСтруктураТабличныйДокумент
		
	КонецЕсли;
			
	ОбластьШапка.Параметры.ИмяКолонкиНоменклатура = НСтр("ru = 'Материал';
														|en = 'Material'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НомерСтроки = 1;
	Выборка = ВыборкаМатериалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
			
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
						
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
		ОбластьСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименованиеПолное,
			Выборка.ХарактеристикаНаименованиеПолное,
			,
			,
			ДопПараметрыПредставлениеНоменклатуры);
		ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТовары"));
	
КонецПроцедуры

// Параметры:
// 	Макет - МакетОформленияКомпоновкиДанных, ГеографическаяСхема, СхемаКомпоновкиДанных, ГрафическаяСхема, ОболочкаHTMLДокумента, ДвоичныеДанные, ТабличныйДокумент, ОболочкаActiveDocument, ТекстовыйДокумент - Описание
// 	ТабличныйДокумент - ТабличныйДокумент - Описание
// 	ВыборкаШапка -  ВыборкаИзРезультатаЗапроса -
// 	ВыборкаИзделия -  ВыборкаИзРезультатаЗапроса -
Процедура ПечатнаяФормаОперацияВывестиИзделия(Макет, ТабличныйДокумент, ВыборкаШапка, ВыборкаИзделия)
	
	Если НЕ ВыборкаИзделия.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
			
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьКоды = ЗначениеЗаполнено(ИмяКолонкиКодов);
	
	Область = Макет.ПолучитьОбласть("ЗаголовокТовары");
	Область.Параметры.ИмяТаблицы = НСтр("ru = 'Выходные изделия';
										|en = 'Finished products'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТабличныйДокумент.Вывести(Область);
	
	Если ВыводитьКоды Тогда
	   	
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = ПредставлениеКолонкиКодов;
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_СКодом");
			
	Иначе
				
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_БезКода");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_БезКода");
		
	КонецЕсли;
			
	ОбластьШапка.Параметры.ИмяКолонкиНоменклатура = НСтр("ru = 'Изделие';
														|en = 'Product'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Выборка = ВыборкаИзделия.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
			
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[ИмяКолонкиКодов];
		КонецЕсли;
						
		ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
		ОбластьСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименованиеПолное,
			Выборка.ХарактеристикаНаименованиеПолное,
			,
			,
			ДопПараметрыПредставлениеНоменклатуры);
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
			
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТовары"));
	
КонецПроцедуры

// Этикетка операции

Функция СформироватьПечатнуюФормуЭтикеткаОперации(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственнаяОперация2_2_ПроизводственнаяОперацияЭтикетка";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПроизводственнаяОперация2_2.ПФ_MXL_ПроизводственнаяОперацияЭтикетка");
	ПервыйДокумент = Истина;
	
	Выборка = ДанныеДляПечатиЭтикеткиОперации(МассивОбъектов);
	
	Пока Выборка.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Область = Макет.ПолучитьОбласть("Этикетка");
		
		Область.Параметры.Заполнить(Выборка);
		
		Область.Параметры.ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 от %2';
															|en = '%1 from %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Выборка.Номер,
			Формат(Выборка.Дата, "ДЛФ=D"));
		
		Область.Параметры.ЕдиницаИзмеренияКоличества = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
			Выборка.ЕдиницаИзмеренияПредставление, Выборка.КоличествоПлан,, ОбщегоНазначения.КодОсновногоЯзыка());
			
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			Область,
			Выборка.Ссылка);
	    
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиЭтикеткиОперации(Ссылки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Операции.Ссылка                    КАК Ссылка,
		|	Операции.Номер                     КАК Номер,
		|	Операции.Дата                      КАК Дата,
		|	Операции.Операция                  КАК Операция,
		|	Операции.Наименование              КАК Наименование,
		|	Операции.Исполнитель               КАК Исполнитель,
		|	Операции.Исполнитель.Представление КАК ИсполнительПредставление,
		|
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр
		|		ИНАЧЕ Операции.ВидРабочегоЦентра
		|	КОНЕЦ                              КАК РабочийЦентр,
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр.Представление
		|		ИНАЧЕ Операции.ВидРабочегоЦентра.Представление
		|	КОНЕЦ                              КАК РабочийЦентрПредставление,
		|
		|	Операции.Количество - Операции.КоличествоОтменено   КАК КоличествоПлан,
		|	Операции.ВремяВыполнения                            КАК ВремяВыполнения,
		|	Операции.ВремяВыполненияЕдИзм                       КАК ВремяВыполненияЕдИзм,
		|
		|	Операции.Операция.ЕдиницаИзмерения.Представление    КАК ЕдиницаИзмеренияПредставление
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция СформироватьПечатнуюФормуАктОБраке(МассивОбъектов, ОбъектыПечати)
	
	ШаблонОшибки = НСтр("ru = 'Печать используется только для выполненной операции при наличии брака.';
						|en = 'Print is used only when an operation is completed and there is nonconformity.'");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственнаяОперация2_2_АктОБраке";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПроизводственнаяОперация2_2.ПФ_MXL_АктОБраке");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ДанныеДляПечатиАктОБраке(МассивОбъектов);

	ВыборкаШапка    = ДанныеДляПечати.ВыборкаШапка;
	ВыборкаПротокол = ДанныеДляПечати.ВыборкаПротокол;
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Пока ВыборкаШапка.Следующий() Цикл
		
		Если ВыборкаШапка.КоличествоБрак = 0 Или Не ЗначениеЗаполнено(ВыборкаШапка.ДатаДокумента) Тогда
			Если ПервыйДокумент Тогда
				ОбщегоНазначения.СообщитьПользователю(ШаблонОшибки);
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВыборкаШапка.Этап, "Этап,Распоряжение,НазначениеПродукция,ПартияПроизводства");

		ДанныеПартииПроизводства = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(
			ЗначенияРеквизитов.Распоряжение, ЗначенияРеквизитов.НазначениеПродукция,
			ЗначенияРеквизитов.ПартияПроизводства);
		ДанныеСпецификации = Документы.ЭтапПроизводства2_2.ПолучитьНормативыПоСпецификации(
			ДанныеПартииПроизводства, Ложь, "ВыходныеИзделия, Операции");
			
		Если ДанныеСпецификации = Неопределено Тогда
			Если ПервыйДокумент Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка расчета нормативов для заполнения операции.';
															|en = 'An error occurred when calculating standards for filling the operation.'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ДанныеСпецификации.Операции.НайтиСтроки(
			Новый Структура("Операция,ИдентификаторОперации", ВыборкаШапка.Операция, ВыборкаШапка.ИдентификаторОперации));

		ДанныеОперации = НайденныеСтроки[0];
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Шапка
		
		Область = Макет.ПолучитьОбласть("Шапка");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Область, ВыборкаШапка.Ссылка);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента);
		
		Область.Параметры.Заполнить(ВыборкаШапка);
		Область.Параметры.Заполнить(СведенияОбОрганизации);
		Область.Параметры.ДатаДокумента = Формат(ВыборкаШапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(Область);
		
		// Таблица
		
		СчетчикБрака = 0;
		Контроллеры = Новый Массив();
		
		Если ВыборкаПротокол.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
			
			НомерСтроки = 0;
			ВыборкаБрак = ВыборкаПротокол.Выбрать();
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
			
			Пока ВыборкаБрак.Следующий() И СчетчикБрака <> ВыборкаШапка.КоличествоБрак Цикл

				Если Контроллеры.Найти(ВыборкаБрак.Ответственный) = Неопределено Тогда
					Контроллеры.Добавить(ВыборкаБрак.Ответственный);
				КонецЕсли;

				СчетчикБрака = СчетчикБрака + ВыборкаБрак.КоличествоОпераций;

				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");

				Для Каждого СтрокаНСИ Из ДанныеСпецификации.ВыходныеИзделия Цикл

					ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаНСИ);

					НомерСтроки = НомерСтроки + 1;
					ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;

					НоменклатураНаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНСИ.Номенклатура, "НаименованиеПолное");
					ХарактеристикаНаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНСИ.Характеристика, "НаименованиеПолное");
					ОбластьСтрокаТаблицы.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
						НоменклатураНаименованиеПолное, ХарактеристикаНаименованиеПолное, , ,
						ДопПараметрыПредставлениеНоменклатуры);

					КоэффициентТекущейОперации					= ВыборкаБрак.КоличествоОпераций / ДанныеОперации.КоличествоНаПартию;
					ОбластьСтрокаТаблицы.Параметры.Количество   = Формат(СтрокаНСИ.Количество * КоэффициентТекущейОперации,"ЧЦ=15; ЧДЦ=3;");
					ОбластьСтрокаТаблицы.Параметры.ПричинаБрака = ВыборкаБрак.ПричинаБрака;

					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);

				КонецЦикла;

			КонецЦикла;
			
		КонецЕсли;
		
		//++ Локализация
		
		// Подписи МОЛ
		ОбластьМОЛ = Макет.ПолучитьОбласть("МОЛ");
		
		Если ЗначениеЗаполнено(ВыборкаШапка.Исполнитель) Тогда
			
			Если ТипЗнч(ВыборкаШапка.Исполнитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ОбластьМОЛ.Параметры.ФамилияИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаШапка.ИсполнительПредставление);
			Иначе
				ОбластьМОЛ.Параметры.ФамилияИО = ВыборкаШапка.ИсполнительПредставление;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМОЛ);
		//-- Локализация
		
		// Подписи Составил
		
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		
		Заголовок = НСтр("ru = 'Составил';
						|en = 'Created'");
		
		Если Контроллеры.ВГраница() <> -1 Тогда

			Для Каждого Контроллер Из Контроллеры Цикл
				
				ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контроллер, "ФизическоеЛицо");
				ДанныеПодписи = ДанныеПодписывающегоЛица(ФизЛицо, ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента, Заголовок);
				ОбластьПодписи.Параметры.Заполнить(ДанныеПодписи);
				ТабличныйДокумент.Вывести(ОбластьПодписи);
				
			КонецЦикла;
			
		Иначе
			
			ОбластьПодписи.Параметры.ЗаголовокРазделаПодписей        = Заголовок;
			ОбластьПодписи.Параметры.Должность                       = "";
			ОбластьПодписи.Параметры.РасшифровкаПодписиПредставление = "";
			
			ТабличныйДокумент.Вывести(ОбластьПодписи);
			
		КонецЕсли;
		
		// Подписи - Утвердил
		
		Заголовок = НСтр("ru = 'Утвердил';
						|en = 'Approved'");
		ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаШапка.Подразделение, "ТекущийРуководитель");
		
		ДанныеПодписи = ДанныеПодписывающегоЛица(ФизЛицо, ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента, Заголовок);
		
		ОбластьПодписи.Параметры.Заполнить(ДанныеПодписи);
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаШапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Данные подписывающего лица.
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
//  Организация - СправочникСсылка.Организации - Организация
//  Дата - Дата - Дата выполнения операции
//  Заголовок - Строка - Заголовок подписи
// 
// Возвращаемое значение:
//  Структура - Данные подписывающего лица:
// * ЗаголовокРазделаПодписей - Строка - Заголовок подписи
// * Должность - Строка - Должность
// * РасшифровкаПодписиПредставление - Строка - Фамилия инициалы
Функция ДанныеПодписывающегоЛица(ФизическоеЛицо, Организация, Дата, Заголовок)
	
	Результат = Новый Структура();
	Результат.Вставить("ЗаголовокРазделаПодписей", Заголовок);
	Результат.Вставить("Должность","");
	Результат.Вставить("РасшифровкаПодписиПредставление", "");
	
//++ Локализация
	Если ФизическоеЛицо <> Неопределено Тогда
		Результат.РасшифровкаПодписиПредставление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФизическоеЛицо);
	
		// Должность
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			ПараметрыПолученияДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
			ПараметрыПолученияДанных.Организация = Организация;
			ПараметрыПолученияДанных.НачалоПериода = Дата;
			ПараметрыПолученияДанных.ОкончаниеПериода = Дата;
			ПараметрыПолученияДанных.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);

			Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияДанных);

			ПолучаемыеДанные = Новый Массив;
			ПолучаемыеДанные.Добавить("Должность");

			КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, Сотрудники.ВыгрузитьКолонку("Сотрудник"), ПолучаемыеДанные, Дата);

			Если КадровыеДанные.Количество() > 0 Тогда
				Результат.Должность = КадровыеДанные[0].Должность;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
//-- Локализация
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДляПечатиАктОБраке(Ссылки)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Операции.Ссылка                                 КАК Ссылка,
		|	Операции.Номер                                  КАК НомерДокумента,
		|	Операции.ОкончаниеВыполнения                    КАК ДатаДокумента,
		|	Операции.Организация                            КАК Организация,
		|	Операции.Подразделение                          КАК Подразделение,
		|	Операции.Этап                                   КАК Этап,
		|	Операции.Операция                               КАК Операция,
		|	Операции.ИдентификаторОперации                  КАК ИдентификаторОперации,
		|	Операции.Исполнитель                            КАК Исполнитель,
		|	Операции.Исполнитель.Представление              КАК ИсполнительПредставление,
		|	Операции.КоличествоБрак                         КАК КоличествоБрак
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В (&Ссылки)
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Протокол.Ссылка        КАК Ссылка,
		|	Протокол.Дата          КАК Дата,
		|	Протокол.Ответственный КАК Ответственный,
		|	Протокол.Комментарий   КАК ПричинаБрака,
		|	Протокол.Количество    КАК КоличествоОпераций
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2.Протокол КАК Протокол
		|ГДЕ
		|	Протокол.Ссылка В (&Ссылки)
		|	И Протокол.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПротоколаПроизводственнойОперации.Брак)
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Дата УБЫВ
		|ИТОГИ
		|ПО
		|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВыборкаШапка",        МассивРезультатов[0].Выбрать());
	ДанныеДляПечати.Вставить("ВыборкаПротокол",     МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеИКонтроль

// Выполнить действие.
// 
// Параметры:
//  Объект - ДокументОбъект.ПроизводственнаяОперация2_2
//  ЗаписьПротокола - см. ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор
Процедура ДобавитьЗаписьПротокола(Объект, ЗаписьПротокола) Экспорт
	
	Если ЗаписьПротокола.Количество <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗапись = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьПротокола);
	
	Если НЕ ЗначениеЗаполнено(НоваяЗапись.Дата) Тогда
		НоваяЗапись.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НоваяЗапись.Ответственный) Тогда
		НоваяЗапись.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	РассчитатьИтогиПоСтрокеПротокола(Объект, НоваяЗапись);
	
	ЗаполнитьЗначенияСвойств(Объект.Протокол.Добавить(), НоваяЗапись);
	
КонецПроцедуры

// Рассчитать итоги по строке протокола.
// 
// Параметры:
//  Объект - ДокументОбъект.ПроизводственнаяОперация2_2
//  ЗаписьПротокола - Структура - см ЗаписьПротоколаКонструктор
Процедура РассчитатьИтогиПоСтрокеПротокола(Объект, ЗаписьПротокола)
	
	Событие             = ЗаписьПротокола.Событие;
	Количество          = ЗаписьПротокола.Количество;
	
	ПредыдущееСостояние = ЗаписьПротокола.ПредыдущееСостояние;
	НовоеСостояние      = "";
	
	Итоги = ОперативныйУчетПроизводстваКлиентСервер.СтруктураИтоговКонструктор(Объект);
	
	Если Количество > Итоги[ЗаписьПротокола.ПредыдущееСостояние] Тогда
		ВызватьИсключение СтрШаблон("Превышено доступное количество в реквизите ""%1""", ПредыдущееСостояние);
	КонецЕсли;
	
	Если Событие = Перечисления.СобытияПротоколаПроизводственнойОперации.Выполнение Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольВыполненияОпераций")
			И Объект.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.Требуется Тогда
			НовоеСостояние = "КоличествоНаКонтроле";
		Иначе
			НовоеСостояние = "КоличествоФакт";
		КонецЕсли;
		
	ИначеЕсли Событие = Перечисления.СобытияПротоколаПроизводственнойОперации.Контроль Тогда
		
		НовоеСостояние = "КоличествоФакт";
		
	ИначеЕсли Событие = Перечисления.СобытияПротоколаПроизводственнойОперации.ОтправкаНаДоработку Тогда
		
		НовоеСостояние = "КоличествоНаДоработке";
		
	ИначеЕсли Событие = Перечисления.СобытияПротоколаПроизводственнойОперации.ПредъявлениеККонтролю Тогда
		
		НовоеСостояние = "КоличествоНаКонтроле";
		
		Объект.ПовторныйКонтроль = Истина;
		
	ИначеЕсли Событие = Перечисления.СобытияПротоколаПроизводственнойОперации.Брак Тогда
		
		НовоеСостояние = "КоличествоБрак";
		
	ИначеЕсли Событие = Перечисления.СобытияПротоколаПроизводственнойОперации.Отмена Тогда
		
		НовоеСостояние = "КоличествоОтменено";
		
	ИначеЕсли Событие = Перечисления.СобытияПротоколаПроизводственнойОперации.Аннулирование Тогда
		
		НовоеСостояние = "КоличествоКВыполнению";
		
	КонецЕсли;
		
	Итоги[ПредыдущееСостояние] = Итоги[ЗаписьПротокола.ПредыдущееСостояние] - Количество;
	Итоги[НовоеСостояние]      = Итоги[НовоеСостояние] + Количество;
	
	ЗаполнитьЗначенияСвойств(Объект, Итоги);
	
КонецПроцедуры

Процедура ПересчитатьИтоги(Объект) Экспорт
	
	СтруктураДанных = ОперативныйУчетПроизводстваКлиентСервер.СтруктураИтоговКонструктор(Объект, Истина);
	
	СтруктураДанных.Вставить("Контроль",          Объект.Контроль);
	СтруктураДанных.Вставить("ПовторныйКонтроль", Ложь);
	
	Для Индекс = 0 По Объект.Протокол.Количество() - 1  Цикл
		
		РассчитатьИтогиПоСтрокеПротокола(СтруктураДанных, Объект.Протокол[Индекс]);
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных);
	
КонецПроцедуры

Процедура РассчитатьСтатусПриИзмененииРеквизитов(Объект) Экспорт
	
	ТекущийСтатус = Объект.Статус;
	
	Если Объект.Количество = Объект.КоличествоОтменено Тогда
		
		НовыйСтатус = Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена;
	
	ИначеЕсли Объект.Количество <= (Объект.КоличествоНаКонтроле + Объект.КоличествоБрак + Объект.КоличествоФакт + Объект.КоличествоОтменено) Тогда
			
		НовыйСтатус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена;
		
	Иначе
			
		НовыйСтатус = Перечисления.СтатусыПроизводственныхОпераций.Выполняется;
		
	КонецЕсли;
	
	Если ТекущийСтатус <> НовыйСтатус Тогда
		
		Объект.Статус = НовыйСтатус;
		
		ЗаполнитьРеквизитыПриУстановкеСтатуса(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПоследовательностьПредыдущихОперацийВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = ВыполнитьПоследовательностьПредыдущихОпераций(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ВыполнитьПоследовательностьПредыдущихОпераций(Параметры)
	
	ЕстьОшибки      = Ложь;
	ТаблицаОпераций = Параметры.ТаблицаОпераций;
	СтруктураПоиска = Новый Структура("Операция,ИдентификаторОперации");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Подразделение                         КАК Подразделение,
	|	Т.Этап                                  КАК Этап,
	|	Т.Операция                              КАК Операция,
	|	Т.ИдентификаторОперации                 КАК ИдентификаторОперации,
	|	Т.Исполнитель                           КАК Исполнитель,
	|	Т.НомерОперации                         КАК НомерОперации
	|ПОМЕСТИТЬ ВтТаблицаОпераций
	|ИЗ
	|	&ТаблицаОпераций КАК Т
	|ГДЕ
	|	Т.Отметка И Т.Количество > 0
	|
	|;
	|
	|//////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОпераций.Операция                      КАК Операция,
	|	ТаблицаОпераций.ИдентификаторОперации         КАК ИдентификаторОперации,
	|	ПроизводственнаяОперация.Ссылка               КАК ДокументСсылка,
	|	ПроизводственнаяОперация.МоментВремени        КАК ДокументСсылкаМоментВремени,
	|	ВЫБОР
	|		КОГДА ТаблицаОпераций.Исполнитель = ПроизводственнаяОперация.Исполнитель
	|				И НЕ ТаблицаОпераций.Исполнитель В (&ИсполнительНеЗаполнен)
	|			ТОГДА 0
	|		КОГДА ПроизводственнаяОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ                                         КАК Приоритет
	|ИЗ
	|	ВтТаблицаОпераций КАК ТаблицаОпераций
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация
	|	ПО ПроизводственнаяОперация.Подразделение = ТаблицаОпераций.Подразделение
	|		И ПроизводственнаяОперация.Этап = ТаблицаОпераций.Этап
	|		И ПроизводственнаяОперация.Операция = ТаблицаОпераций.Операция
	|		И ПроизводственнаяОперация.ИдентификаторОперации = ТаблицаОпераций.ИдентификаторОперации
	|		И ПроизводственнаяОперация.Проведен
	|		И (ПроизводственнаяОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется)
	|				И (ПроизводственнаяОперация.Количество
	|						- ПроизводственнаяОперация.КоличествоНаКонтроле
	|						- ПроизводственнаяОперация.КоличествоНаДоработке
	|						- ПроизводственнаяОперация.КоличествоБрак
	|						- ПроизводственнаяОперация.КоличествоФакт
	|						- ПроизводственнаяОперация.КоличествоОтменено > 0)
	|			ИЛИ ПроизводственнаяОперация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана))
	|";
	
	СтатусыОпераций = Новый Массив;
	СтатусыОпераций.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Создана);
	СтатусыОпераций.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	
	ИсполнительНеЗаполнен = Новый Массив;
	ИсполнительНеЗаполнен.Добавить(Неопределено);
	ИсполнительНеЗаполнен.Добавить(Справочники.ФизическиеЛица.ПустаяСсылка());
	ИсполнительНеЗаполнен.Добавить(Справочники.Бригады.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтатусыОпераций",       СтатусыОпераций);
	Запрос.УстановитьПараметр("ИсполнительНеЗаполнен", ИсполнительНеЗаполнен);
	Запрос.УстановитьПараметр("ТаблицаОпераций",       ТаблицаОпераций);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
		ЭлементБлокировки.ИсточникДанных = ТаблицаОпераций;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап",                  "Этап");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Операция",              "Операция");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторОперации", "ИдентификаторОперации");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Назначенные = Запрос.Выполнить().Выгрузить();
		Назначенные.Индексы.Добавить("Операция,ИдентификаторОперации");
		
		Для Индекс = 0 По ТаблицаОпераций.Количество() - 1 Цикл
			
			СтрокаОперация = ТаблицаОпераций[Индекс];
			
			Если СтрокаОперация.Отметка = Ложь
				ИЛИ СтрокаОперация.Количество = 0 Тогда
					Продолжить;
			КонецЕсли;
			
			КоличествоКВыполнению = СтрокаОперация.Количество;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОперация);
			НазначенныеПоОперации = Назначенные.Скопировать(СтруктураПоиска);
			Если НазначенныеПоОперации.Количество() > 0 Тогда
				НазначенныеПоОперации.Сортировать("Приоритет,ДокументСсылкаМоментВремени");
				Для Ит = 0 По НазначенныеПоОперации.Количество()-1 Цикл
					
					ДокументОбъект = НазначенныеПоОперации[Ит].ДокументСсылка.ПолучитьОбъект(); // ДокументОбъект.ПроизводственнаяОперация2_2
					КоличествоКВыполнениюОперации = ОперативныйУчетПроизводстваКлиентСервер.КоличествоКВыполнению(ДокументОбъект);
					
					Если КоличествоКВыполнениюОперации > КоличествоКВыполнению Тогда
						НовоеДействие = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("Выполнение");
						НовоеДействие.Количество  = КоличествоКВыполнению;
						Документы.ПроизводственнаяОперация2_2.ДобавитьЗаписьПротокола(ДокументОбъект, НовоеДействие);
						КоличествоКВыполнению = 0;
					Иначе
						ДокументОбъект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена;
						Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкеСтатуса(ДокументОбъект);
						КоличествоКВыполнению = КоличествоКВыполнению - КоличествоКВыполнениюОперации;
					КонецЕсли;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					Если КоличествоКВыполнению <= 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если КоличествоКВыполнению > 0 Тогда
			
				ДанныеЗаполнения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаОперация);
				ДанныеЗаполнения.Вставить("СпособЗаполнения", "ЗаполнитьПоОперации");
				ДанныеЗаполнения.Вставить("Статус",           Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
				ДанныеЗаполнения.Вставить("Количество",       КоличествоКВыполнению);
				
				НовыйДокумент = Документы.ПроизводственнаяОперация2_2.СоздатьДокумент();
				НовыйДокумент.Заполнить(ДанныеЗаполнения);
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Внутрицеховое управление. Создание производственных операций';
				|en = 'Shop management. Create routing operations'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

Функция ТекстПредупрежденияНедоступностьОтраженияБрака() Экспорт
	
	Возврат НСтр("ru = 'Отражение брака доступно при включенном оформлении выработки на основании производственных операций.';
				|en = 'To record nonconformities, enable output registration based on routing operations.'");
	
КонецФункции

Функция ТекстПереключателяПересчитатьНормативы(Операция) Экспорт
	
	Результат = НСтр("ru = 'Заполнить материалы, изделия, трудозатраты';
					|en = 'Fill materials, finished products, labor costs'");
	
	Если ЗначениеЗаполнено(Операция) Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Владелец",                              "Владелец");
		СтруктураРеквизитов.Вставить("ИспользоватьМатериалыВОперациях",       "Владелец.Подразделение.ИспользоватьМатериалыВОперациях");
		СтруктураРеквизитов.Вставить("ИспользоватьВыходныеИзделияВОперациях", "Владелец.Подразделение.ИспользоватьВыходныеИзделияВОперациях");
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Операция, СтруктураРеквизитов);
		
		МассивРесурсов = Новый Массив;
		Если ЗначенияРеквизитов.ИспользоватьМатериалыВОперациях Тогда
			МассивРесурсов.Добавить(НСтр("ru = 'материалы';
										|en = 'materials'"));
		КонецЕсли;
		Если ЗначенияРеквизитов.ИспользоватьВыходныеИзделияВОперациях Тогда
			МассивРесурсов.Добавить(НСтр("ru = 'изделия';
										|en = 'finished products'"));
		КонецЕсли;
		МассивРесурсов.Добавить(НСтр("ru = 'трудозатраты';
									|en = 'labor costs'"));
		
		ПоМаршрутнойКарте = ТипЗнч(ЗначенияРеквизитов.Владелец) = Тип("СправочникСсылка.МаршрутныеКарты");
		
		Результат = СтрШаблон(
			НСтр("ru = 'Заполнить %1 %2';
				|en = 'Fill %1 %2'"),
			СтрСоединить(МассивРесурсов, ", "),
			?(ПоМаршрутнойКарте, НСтр("ru = 'по маршрутной карте';
										|en = 'by route sheet'"), НСтр("ru = 'по спецификации';
																			|en = 'by bill of materials'")));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает настройки использования опциональных табличных частей в операциях.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение документа.
//  Маршрут	- СправочникСсылка.МаршрутныеКарты - маршрутная карта документа.
//
// Возвращаемое значение:
//  Структура - настройки.
//
Функция НастройкиУчета(Подразделение, Маршрут) Экспорт
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
	
	Если ЗначениеЗаполнено(Маршрут) И ТипЗнч(Маршрут) = Тип("СправочникСсылка.МаршрутныеКарты") Тогда
		ДопПараметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Маршрут, "ИспользоватьМатериалы, ИспользоватьВыходныеИзделия");
	Иначе
		ДопПараметры = Новый Структура("ИспользоватьМатериалы, ИспользоватьВыходныеИзделия", Истина, Истина);
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользоватьМатериалы",
		ПараметрыПодразделения.ИспользоватьМатериалыВОперациях
		И ДопПараметры.ИспользоватьМатериалы);
	
	Результат.Вставить("ИспользоватьВыходныеИзделия",
		ПараметрыПодразделения.ИспользоватьВыходныеИзделияВОперациях
		И ДопПараметры.ИспользоватьВыходныеИзделия);
	
	Результат.Вставить("ИспользоватьБригадныеНаряды",
		ПараметрыПодразделения.ИспользоватьБригадныеНаряды);
	
	Результат.Вставить("ИспользоватьСменныеЗадания",
		ПараметрыПодразделения.ИспользоватьСменныеЗадания);
		
	Результат.Вставить("ИспользоватьПооперационноеПланирование",
		ПараметрыПодразделения.ИспользоватьПооперационноеПланирование);
		
	Результат.Вставить("ИспользоватьУчастки",
		ПараметрыПодразделения.ИспользоватьУчастки);
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьПроизводственнуюОперациюНаОснованииПроверкаОснования(ОбъектОснование) Экспорт
	
	РезультатПроверки = Новый Структура("ТекстОшибки", Неопределено);
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснование, "Подразделение"));
		
		Если Не ПараметрыПодразделения.ИспользоватьПооперационноеУправление Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для данного документа';
												|en = 'Unable to execute the command for this document'");
			
		КонецЕсли;
		
	Иначе
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для данного документа';
											|en = 'Unable to execute the command for this document'");
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура СоздатьВТПартииОпераций(МенеджерВременныхТаблиц, Этапы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК ПроизводственнаяОперация,
		|	Таблица.Этап КАК Этап,
		|	Таблица.Операция КАК Операция,
		|	Таблица.ИдентификаторОперации КАК ИдентификаторОперации,
		|	Таблица.НомерПартии КАК НомерПартии,
		|	ВЫБОР
		|		КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|			ТОГДА Таблица.КоличествоФакт
		|		ИНАЧЕ Таблица.Количество - Таблица.КоличествоОтменено
		|	КОНЕЦ КАК Количество,
		|	Таблица.Подразделение КАК Подразделение,
		|	Таблица.РабочийЦентр КАК РабочийЦентр,
		|	Таблица.Статус КАК Статус,
		|	Таблица.ТребуетПовторения КАК ТребуетПовторения
		|ПОМЕСТИТЬ ВТПартииОпераций
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Этап В(&МассивСсылок)
		|	И Таблица.Проведен");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", ОбщегоНазначенияУТКлиентСервер.Массив(Этапы));
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаСписокОпераций() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	Операции.Ссылка КАК Ссылка,
		|	Операции.Дата КАК Дата,
		|	Операции.Номер КАК Номер,
		|	Операции.Исполнитель КАК Исполнитель,
		|	Операции.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Операции.РабочийЦентр КАК РабочийЦентр,
		|	ВЫБОР
		|		КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|			ТОГДА Операции.КоличествоФакт
		|				+ Операции.КоличествоНаКонтроле
		|				+ Операции.КоличествоНаДоработке
		|				+ Операции.КоличествоБрак
		|		ИНАЧЕ Операции.Количество
		|				- Операции.КоличествоОтменено
		|	КОНЕЦ КАК Количество,
		|	Операции.Операция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Операции.Статус КАК Статус
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&СписокОпераций)
		|	И Операции.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * Старый - Соответствие из КлючИЗначение - где:
// ** Ключ - Строка -
// ** Значение - Массив из СтрокаТаблицыЗначений - 
// * Новый - Соответствие из КлючИЗначение - где:
// ** Ключ - Строка -
// ** Значение - Массив из СтрокаТаблицыЗначений -
Функция НоваяСтруктураДляСтрокНаУдаление()
	Возврат Новый Структура("Старый, Новый", Новый Соответствие, Новый Соответствие);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
