
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения, ТекущиеДанныеИдентификатор;

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

&НаКлиенте
Перем СтатусДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.МатериалыИРаботы);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		
	КонецЕсли;
	
	Если НЕ Объект.МожноПропустить Тогда
		
		Элемент = Элементы.Статус.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыПроизводственныхОпераций.Пропущена);
		Если Элемент <> Неопределено Тогда
			Элементы.Статус.СписокВыбора.Удалить(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
	РабочийЦентрДоИзменения = Объект.РабочийЦентр;
	
	ПроверяемаяДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	
	Если ИспользоватьСменныеЗадания И ЗначениеЗаполнено(Объект.СменноеЗадание) Тогда
		ДатаСменногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СменноеЗадание, "Дата");
		ПроверяемаяДата = ДатаСменногоЗадания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеВыполнения) Тогда
		ПроверяемаяДата = Объект.ОкончаниеВыполнения;
	КонецЕсли;
	
	УчетТрудозатратВРазрезеСотрудников = ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(
		ПроверяемаяДата);
	
	#Область УниверсальныеМеханизмы
	
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "МатериалыИРаботы_,ВыходныеИзделия_");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	#КонецОбласти

	Если Параметры.Свойство("Статус") Тогда
		Объект.Статус = Параметры.Статус;
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("ПроверитьПриОткрытии") Тогда 
		ПроверитьЗаполнение();
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(
			ЭтотОбъект, ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ], ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ПроизводственнаяОперация2_2"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Ссылка")
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		СобственноеОповещение = Источник = УникальныйИдентификатор
			ИЛИ ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") 
			И Источник = ВладелецФормы.УникальныйИдентификатор;
		
		Если НЕ СобственноеОповещение Тогда
			Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			
			ОбработатьШтрихкоды(
				МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр),
				"МатериалыИРаботы");
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов, "МатериалыИРаботы");
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом	
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВывестиНормативыДополнительныхРеквизитов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВывестиНормативыДополнительныхРеквизитов();
	
	Если ЭтоМобильныйКлиент Тогда
		ОбщегоНазначенияУТКлиентСервер.АдаптацияЭлементовФормыДляМобильногоЭкрана(
			Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	КлючОперации = УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации();
	ЗаполнитьЗначенияСвойств(КлючОперации,Объект);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Подразделение", Объект.Подразделение);
	ПараметрОповещения.Вставить("КлючОперации", КлючОперации);
	ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
	
	Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИсточникОповещения = ВладелецФормы.УникальныйИдентификатор;
	Иначе
		ИсточникОповещения = УникальныйИдентификатор;
	КонецЕсли;
	
	Оповестить("Запись_ПроизводственнаяОперация2_2", ПараметрОповещения, ИсточникОповещения);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтатусДоИзменения = Объект.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ОперативныйУчетПроизводстваКлиент.ПодтвердитьПриУстановкеСтатусаОперации(
		Объект, Объект.Статус) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодтверждениеСтатусПриИзмененииЗавершение",
			ЭтотОбъект,
			Новый Структура("СтатусДоИзменения", СтатусДоИзменения));
		
		ПоказатьВопрос(ОписаниеОповещения,
			ОперативныйУчетПроизводстваКлиент.ТекстВопросаПриУстановкеСтатусаПропущена(),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьИзменениеСтатусаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		Объект.Подразделение,
		Объект.Исполнитель,
		ДатаДляОпределенияИсполнителя(),
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Объект.Подразделение, ДатаДляОпределенияИсполнителя());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Объект.Подразделение, ДатаДляОпределенияИсполнителя());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ИсполнительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИсполнительПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыПравКонтроля();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Исполнитель,Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыПоПодразделению();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Подразделение");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПриИзменении(Элемент)
	
	Объект.Организация = ?(Объект.Этап.Пустая(), Неопределено, Организация(Объект.Этап));
	Если НЕ Объект.Этап.Пустая() Тогда
		Объект.ОперацияКакРаспоряжениеВыработки = ОперацияКакРаспоряжениеВыработки(Объект.Этап);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыОсновное

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьМаршрут" Тогда 
		
		ПоказатьЗначение(, Маршрут);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьОперацию" Тогда
		
		ПоказатьЗначение(, Объект.Операция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРабочегоЦентраПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыПоВидуРабочегоЦентра(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидРабочегоЦентра");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ЗаполнитьКоличествоКВыполнению();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийЦентрПриИзменении(Элемент)
	
	Если Не РабочийЦентрДоИзменения = Объект.РабочийЦентр Тогда
		Объект.ВремяВыполнения = ЗаполнитьВремяВыполненияНаСервере(Объект.РабочийЦентр, РабочийЦентрДоИзменения, Объект.ВремяВыполнения);
		РабочийЦентрДоИзменения = Объект.РабочийЦентр;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "МатериалыИРаботы");
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Действие);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	ПриИзмененииУпаковки(ТекущиеДанные, "МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда
		
		ОбработатьПодборМатериаловПоЭтапу(ВыбранноеЗначение);
		
	Иначе
		
		ОбработатьПодборНоменклатуры(ВыбранноеЗначение, "МатериалыИРаботы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИРаботы, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("МатериалыИРаботы", Элемент.ТекстРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если (Поле = Элементы.ВыходныеИзделияСерия 
			ИЛИ Поле = Элементы.ВыходныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ВыходныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ВыходныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия) Тогда
		
		ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ВыходныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьПодборНоменклатуры(ВыбранноеЗначение, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ВыходныеИзделия", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Действие = Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "ВыходныеИзделия");
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Действие);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииУпаковки(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ВыходныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ВыходныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		ТекущиеДанные.Исполнитель,
		ИспользоватьБригадныеНаряды,
		УчетТрудозатратВРазрезеСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТрудозатратыИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		Объект.Подразделение,
		ТекущиеДанные.Исполнитель,
		ДатаДляОпределенияИсполнителя(),
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Объект.Подразделение, ДатаДляОпределенияИсполнителя());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Объект.Подразделение, ДатаДляОпределенияИсполнителя());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


#Область ТабличнаяЧасть_МатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботы_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботы_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботы_ПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкоду("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботы_ЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботы_ПолучитьВес(Команда)
	
	ПолучитьВес("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботы_ПодобратьМатериалы(Команда)
	
	ОткрытьПодборТоваров("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботы_ПодобратьМатериалыПоЭтапу(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Этап", Объект.Этап);
	
	ОткрытьФорму(
		"Документ.ПроизводственнаяОперация2_2.Форма.ПодборМатериаловИзЭтапа",
		ПараметрыПодбора,
		Элементы.МатериалыИРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧасть_ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПолучитьВес(Команда)
	
	ПолучитьВес("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧасть_Трудозатраты

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаршрутнойКарте(Команда)
	
	ЗаполнитьПоНормативамОперацииНаСервере();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Заполнение выполнено';
			|en = 'Filled in successfully'"),
		ПолучитьНавигационнуюСсылку(Маршрут),
		НСтр("ru = 'Документ заполнен по маршрутной карте';
			|en = 'Document is filled according to the route sheet'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	ЗаполнитьПоНормативамОперацииНаСервере();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Заполнение выполнено';
			|en = 'Filled in successfully'"),
		ПолучитьНавигационнуюСсылку(Спецификация),
		НСтр("ru = 'Документ заполнен по спецификации';
			|en = 'Document is filled in as per bill of materials'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВыполнения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",      СтрШаблон(НСтр("ru = '%1 от %2';
															|en = '%1, %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D")));
	ПараметрыФормы.Вставить("Количество",     Объект.Количество);
	ПараметрыФормы.Вставить("Контроль"  ,     Объект.Контроль);
	ПараметрыФормы.Вставить("Протокол",       Объект.Протокол);
	ПараметрыФормы.Вставить("Операция",       Объект.Операция);
	ПараметрыФормы.Вставить("НаОснованииНСИ", Объект.НаОснованииНСИ);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр И НЕ ПравоКонтрольВыполненияОпераций);
	
	Оповещение = Новый ОписаниеОповещения("ПротоколВыполненияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ПроизводственнаяОперация2_2.Форма.РедакторПротокола",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОперацию(Команда)
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполняется");
	ОбработатьИзменениеСтатусаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполнена");
	ОбработатьИзменениеСтатусаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьНевыполнениеОперации(Команда)
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.НеВыполнена");
	ОбработатьИзменениеСтатусаНаСервере();
	
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы -
&НаКлиенте
Процедура СменаСтраницы(Команда)
	
	Страницы = Элементы.ГруппаСтраницы;
	
	ВидимыеСтраницы = Новый Массив();
		
		Для Каждого Страница Из Страницы.ПодчиненныеЭлементы Цикл
			Если Страница.Видимость Тогда
				ВидимыеСтраницы.Добавить(Страница);
			КонецЕсли;
		КонецЦикла;
	
	ТекущийИндекс = ВидимыеСтраницы.Найти(Страницы.ТекущаяСтраница);
	
	Если Команда.Имя = "ВкладкаВправо" Тогда
		ТекущийИндекс = ТекущийИндекс + 1;
	Иначе
		ТекущийИндекс = ТекущийИндекс - 1;
	КонецЕсли;
	
	Страницы.ТекущаяСтраница = ВидимыеСтраницы.Получить(ТекущийИндекс);
	
	ПриСменеСтраницы();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеМатериалыИРаботы();
	УстановитьУсловноеОформлениеВыходныеИзделия();
	УстановитьУсловноеОформлениеТрудозатраты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеМатериалыИРаботы()
	
	УстановитьУсловноеОформлениеХарактеристикМатериаловИРабот();
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект,
		"МатериалыИРаботыНоменклатураЕдиницаИзмерения",
		"Объект.МатериалыИРаботы.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"СерииВсегдаВТЧТовары",
		"МатериалыИРаботыСерия",
		"Объект.МатериалыИРаботы.СтатусУказанияСерий",
		"Объект.МатериалыИРаботы.ТипНоменклатуры");
	
	УстановитьУсловноеОформлениеНоменклатурМаршрутнойКарты();
	
	УстановитьУсловноеОформлениеХарактеристикМаршрутнойКарты();
	
	УстановитьУсловноеОформлениеУпаковокМаршрутнойКарты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеХарактеристикМатериаловИРабот()
	
	ИмяПоля = "МатериалыИРаботыХарактеристика";
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		ИмяПоля,
		"Объект.МатериалыИРаботы.ХарактеристикиИспользуются");
	
	// Стандартные условия оформления необходимо дополнить специфическим условием,
	// учитывающим наличие характеристики маршрутной карты.
	
	ДополнитьУсловноеОформлениеХарактеристикМатериаловИРабот(ИмяПоля);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьУсловноеОформлениеХарактеристикМатериаловИРабот(ИмяПоля)
	
	ЭлементОформления = Неопределено;
	ПолеХарактеристика = Элементы[ИмяПоля];//ПолеФормы - 
	Поле = Новый ПолеКомпоновкиДанных(ПолеХарактеристика.Имя);
	
	Для каждого Элемент Из УсловноеОформление.Элементы Цикл
		
		Если Элемент.Поля.Элементы.Количество() > 0
			И Элемент.Поля.Элементы[0].Поле = Поле Тогда
			
			ЭлементОформления = Элемент;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЭлементОформления = Неопределено Тогда
		
		ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
		
		ДобавитьУсловияДляОформленияХарактеристикМаршрутнойКарты(ГруппаЭлементовОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНоменклатурМаршрутнойКарты()
	
	// Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.НоменклатураМаршрутнойКарты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.НоменклатураМаршрутнойКартыПредставление"));
	
	// Отметка незаполненного
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.НоменклатураМаршрутнойКарты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроизводственныхОпераций.Выполнена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеХарактеристикМаршрутнойКарты()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыХарактеристика.Имя);
	
	ГруппаЭлементовОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ДобавитьУсловияДляОформленияХарактеристикМаршрутнойКарты(ГруппаЭлементовОтбора);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ХарактеристикаМаршрутнойКартыПредставление"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУпаковокМаршрутнойКарты()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыУпаковка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.НоменклатураМаршрутнойКарты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.УпаковкаМаршрутнойКартыПредставление"));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловияДляОформленияХарактеристикМаршрутнойКарты(ГруппаЭлементовОтбора)
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ХарактеристикаМаршрутнойКарты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыходныеИзделия()
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ВыходныеИзделияХарактеристика",
		"Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект,
		"ВыходныеИзделияНоменклатураЕдиницаИзмерения",
		"Объект.ВыходныеИзделия.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		Ложь,
		"ВыходныеИзделияСерия", 
		"Объект.ВыходныеИзделия.СтатусУказанияСерий", 
		"Объект.ВыходныеИзделия.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		ЭтотОбъект,
		Ложь,
		"ВыходныеИзделияСтатусУказанияСерий", 
		"Объект.ВыходныеИзделия.СтатусУказанияСерий");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТрудозатраты()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыИсполнитель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроизводственныхОпераций.Выполнена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	ВывестиНормативыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	ВывестиНормативыДополнительныхРеквизитов();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Серии

&НаСервере
Процедура НастроитьИспользованиеСерий()
	
	ПараметрыСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПроизводственнаяОперация2_2);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(ПараметрыСерий);
	
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
							ЭтотОбъект, 
							ПараметрыУказанияСерий[ИмяТЧ], 
							Текст, 
							ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтотОбъект,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
				ДополнительныеПараметры.ПараметрыУказанияСерий, 
				ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	Иначе
		СтруктураДействий = Неопределено;
	КонецЕсли; 
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
					Объект, 
					ПараметрыУказанияСерий[ИмяТЧ], 
					ТекущиеДанныеИдентификатор, 
					ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект, ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(СписокТЧ = Неопределено, ОбновитьПараметрыУказанияСерий = Ложь)
	
	Если ОбновитьПараметрыУказанияСерий Тогда
		НастроитьИспользованиеСерий();
	КонецЕсли;
	
	Если СписокТЧ <> Неопределено Тогда
		МассивТЧ = СтрРазделить(СписокТЧ, ",");
		Для каждого ИмяТЧ Из МассивТЧ Цикл
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
		КонецЦикла; 
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.МатериалыИРаботыСерия.Видимость = ПараметрыУказанияСерий.МатериалыИРаботы.ИспользоватьСерииНоменклатуры;
	
	СерииВВыходныхИзделиях = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	
	Элементы.ВыходныеИзделияСерия.Видимость = СерииВВыходныхИзделиях;
	Элементы.ВыходныеИзделияСтатусУказанияСерий.Видимость = СерииВВыходныхИзделиях;
	Элементы.ВыходныеИзделия_УказатьСерии.Видимость = СерииВВыходныхИзделиях;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерии(ИмяТЧ, Элемент)

	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ], Истина);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда

		ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения); // серверный вызов

		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ]);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения)

	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, Неопределено, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)

	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы[ИмяТЧ]) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоСтрокДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоСтрокДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	Перем СоставСтрок, ПараметрыОтбора;
	
	ПодборТоваров = ИмяТЧ <> "Трудозатраты";
	
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		
		ПараметрыОтбора = Новый Соответствие;
		ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", МассивТиповНоменклатуры);
		
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
		
	Иначе
		СоставСтрок = "ВидРабот,Количество,Исполнитель";
	КонецЕсли;
	
	СтрокиИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, СоставСтрок);
	
	Если Не ЗначениеЗаполнено(СтрокиИзБуфера) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();	
	
	МассивСтрок = Новый Массив;
	
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		ТабличнаяЧасть = Объект[ИмяТЧ];// ДанныеФормыКоллекция - 
		
		ТекущаяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИзБуфера);
		
		Если ПодборТоваров Тогда
			
			ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, ИмяТЧ, ЭтотОбъект, СтруктураДействий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ДоступностьРеквизитов)
	
	Форма.Элементы.МатериалыИРаботы_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюМатериалыИРаботы_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.ВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкоду(ИмяТЧ)

	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ИмяТЧ);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ИмяТЧ) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТЧ)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);
	ДобавитьВСтруктуруДействияРассчитатьСтатусСерий(ИмяТЧ, СтруктураДействийСДобавленнымиСтроками);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
		
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий[ИмяТЧ];
	СтруктураДействий.ИзменятьКоличество                     = Истина;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ИмяТЧ                                  = ИмяТЧ;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтотОбъект);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_" + ИмяТЧ, 0.1, Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		ТаблицаФормы = Элементы[ИмяТЧ];//ТаблицаФормы -
		ТаблицаФормы.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(ИмяТЧ)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект, ИмяТЧ),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, ИмяТЧ) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, ИмяТЧ);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_МатериалыИРаботы()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.МатериалыИРаботы.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("МатериалыИРаботы",,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(ИмяТЧ)
		
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтотОбъект, ИмяТЧ);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока,ИмяТЧ", ТекущаяСтрока, ИмяТЧ)),
		УникальныйИдентификатор);
	
КонецПроцедуры

// Параметры:
// 	РезультатВыполнения - Структура - где:
//  * Результат - Булево - 
//  * ОписаниеОшибки - Строка, Неопределено -
//  * ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование, Неопределено -
// 	ДополнительныеПараметры - Структура - где:
// * ТекущаяСтрока -  ДанныеФормыСтруктура, ДанныеФормыЭлементКоллекции, ДанныеФормыЭлементДерева -
// * ИмяТЧ - Строка - 
&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДополнительныеПараметры.ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ДополнительныеПараметры.ИмяТЧ = "ВыходныеИзделия" Тогда
			ТекущаяСтрокаИдентификатор = ДополнительныеПараметры.ТекущаяСтрока.ПолучитьИдентификатор();
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
					ДополнительныеПараметры.ИмяТЧ, 
					ТекущаяСтрокаИдентификатор, 
					КэшированныеЗначения);
		КонецЕсли; 
		
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеУниверсальныеМеханизмы

&НаКлиенте
Процедура ДобавитьВСтруктуруДействияРассчитатьСтатусСерий(ИмяТЧ, СтруктураДействий)
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", Объект.Подразделение);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, ИмяТЧ, Форма, СтруктураДействий)

	Если НЕ СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус")
		И ИмяТЧ = "ВыходныеИзделия" Тогда
		
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий[ИмяТЧ];
		ПараметрыПроверкиСерий.Склад = Неопределено;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	КонецЕсли; 
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	Действие = Новый Структура("ИмяФормы, ИмяТабличнойЧасти", Форма.ИмяФормы, ИмяТЧ);
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Действие);
	
КонецПроцедуры

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например, при вставке из буфера.
// Процедура выполняет действия которые зависят от данных в строках.
//
&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)
	
	МассивСтрок = Неопределено;
	КоллекцияСтрок = Объект[ИмяТЧ];
	Если МассивИдентификаторовСтрок <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
			МассивСтрок.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла; 
		КоллекцияСтрок = МассивСтрок;
	КонецЕсли;
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если (ИмяТЧ = "МатериалыИРаботы" ИЛИ ИмяТЧ = "ВыходныеИзделия")
		И НЕ СтруктураРанееВыполненныхДействий.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
		ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ);
	КонецЕсли; 
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакАртикул")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		
		ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИмяТЧ, МассивСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(СписокТЧ = "", СтрокиЗаполнения = Неопределено)
	
	СтруктураТЧ = Новый Структура(СписокТЧ);
	ВсеТЧ = (СтруктураТЧ.Количество() = 0);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
	Если СтруктураТЧ.Свойство("МатериалыИРаботы") ИЛИ ВсеТЧ Тогда
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.МатериалыИРаботы,
			СтруктураДействий,
			СтрокиЗаполнения);
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуреМаршрутнойКарты();
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ВыходныеИзделия") ИЛИ ВсеТЧ Тогда
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ВыходныеИзделия,
			СтруктураДействий,
			СтрокиЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреМаршрутнойКарты()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки,
	|	Таблица.НоменклатураМаршрутнойКарты,
	|	Таблица.ХарактеристикаМаршрутнойКарты,
	|	Таблица.УпаковкаМаршрутнойКарты
	|ПОМЕСТИТЬ ВТТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблица.НомерСтроки,
	|	ЕСТЬNULL(Номенклатура.Представление, """") КАК НоменклатураПредставление,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Представление, """") КАК ХарактеристикаПредставление,
	|	ВЫБОР
	|		КОГДА НЕ УпаковкиЕдиницыИзмерения.Ссылка ЕСТЬ NULL
	|			ТОГДА УпаковкиЕдиницыИзмерения.Представление
	|		КОГДА НЕ Номенклатура.Ссылка ЕСТЬ NULL
	|			ТОГДА Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК УпаковкаПредставление
	|ИЗ
	|	ВТТаблица КАК ВТТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТТаблица.НоменклатураМаршрутнойКарты = Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТТаблица.ХарактеристикаМаршрутнойКарты = ХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО ВТТаблица.УпаковкаМаршрутнойКарты = УпаковкиЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	(ВТТаблица.НоменклатураМаршрутнойКарты <> &ПустаяНоменклатура
	|			ИЛИ ВТТаблица.ХарактеристикаМаршрутнойКарты <> &ПустаяХарактеристика)");
	
	КолонкиТаблицы = "НомерСтроки, НоменклатураМаршрутнойКарты, ХарактеристикаМаршрутнойКарты, УпаковкаМаршрутнойКарты";
	Таблица = Объект.МатериалыИРаботы.Выгрузить(, КолонкиТаблицы);
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = Объект.МатериалыИРаботы[Выборка.НомерСтроки - 1];
		
		Строка.НоменклатураМаршрутнойКартыПредставление = ?(
			ЗначениеЗаполнено(Выборка.НоменклатураПредставление),
			"<" + Выборка.НоменклатураПредставление + ">",
			"");
			
		Строка.ХарактеристикаМаршрутнойКартыПредставление = ?(
			ЗначениеЗаполнено(Выборка.ХарактеристикаПредставление),
			"<" + Выборка.ХарактеристикаПредставление + ">",
			"");
		
		Строка.УпаковкаМаршрутнойКартыПредставление = ?(
			ЗначениеЗаполнено(Выборка.УпаковкаПредставление),
			"<" + Выборка.УпаковкаПредставление + ">",
			"");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияРассчитатьСтатусСерий(ИмяТЧ, СтруктураДействий);
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИмяТЧ, ЭтотОбъект, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ИмяТЧ)

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковки(СтрокаТабличнойЧасти, ИмяТЧ)

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(ИмяТЧ)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			Элементы[ИмяТЧ], 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборНоменклатуры(ВыбранноеЗначение, ИмяТЧ)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТабличнаяЧасть = Объект[ИмяТЧ];//ТабличнаяЧасть - 
		
		ТекущаяСтрока = ТабличнаяЧасть.Добавить();
		
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ТекущаяСтрока,
				ИмяТЧ,
				ЭтотОбъект,
				СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;

	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборМатериаловПоЭтапу(ВыбранноеЗначение)
	
	СписокМатериалов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаМатериала Из СписокМатериалов Цикл
		
		НоваяСтрока = Объект.МатериалыИРаботы.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериала);
		
		МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("МатериалыИРаботы", МассивСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеИКонтроль

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьКомандыВыполненияИКонтроля(Форма, СписокКоманд)
	
	МассивСтрок = Новый Массив;
	
	Для Индекс = 0 По СписокКоманд.Количество()-1 Цикл
		
		Команда = СписокКоманд[Индекс];
		
		Если Индекс > 0 Тогда
			МассивСтрок.Добавить("  ");
		КонецЕсли;
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Команда.Представление,,,,Команда.Значение));
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоличествоКВыполнению()
	
	КоличествоКВыполнению = ОперативныйУчетПроизводстваКлиентСервер.КоличествоКВыполнению(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеИКонтрольОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим",                            НавигационнаяСсылка);
	ПараметрыФормы.Вставить("Операция",                         Объект.Операция);
	ПараметрыФормы.Вставить("ОперацияНаименование",             Объект.Наименование);
	ПараметрыФормы.Вставить("ИдентификаторОперации",            Объект.ИдентификаторОперации);
	ПараметрыФормы.Вставить("ОперацияКакРаспоряжениеВыработки", Объект.ОперацияКакРаспоряжениеВыработки);
	ПараметрыФормы.Вставить("НаОснованииНСИ",                   Объект.НаОснованииНСИ);
	ПараметрыФормы.Вставить("ИспользоватьСменныеЗадания",       ИспользоватьСменныеЗадания);
	ПараметрыФормы.Вставить("ЕдиницаИзмеренияПредставление",    ЕдиницаИзмеренияПредставление);
	
	ПараметрыФормы.Вставить("Этап",           Объект.Этап);
	ПараметрыФормы.Вставить("Подразделение",  Объект.Подразделение);
	ПараметрыФормы.Вставить("Участок",        Объект.Участок);
	ПараметрыФормы.Вставить("Исполнитель",    Объект.Исполнитель);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Режим", НавигационнаяСсылка);
	
	Если НавигационнаяСсылка = "Проконтролировать" Тогда
		ПараметрыФормы.Вставить("КоличествоНаКонтроле", Объект.КоличествоНаКонтроле);
		ИмяОткрываемойФормы = "Документ.ПроизводственнаяОперация2_2.Форма.КонтрольОперации";
	ИначеЕсли НавигационнаяСсылка = "НаКонтроль" Тогда
		ПараметрыФормы.Вставить("КоличествоКВыполнению", Объект.КоличествоНаДоработке);
		ИмяОткрываемойФормы = "Документ.ПроизводственнаяОперация2_2.Форма.ВыполнениеОперации";
	Иначе
		ПараметрыФормы.Вставить("КоличествоКВыполнению", КоличествоКВыполнению);
		ИмяОткрываемойФормы = "Документ.ПроизводственнаяОперация2_2.Форма.ВыполнениеОперации";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыполнениеИКонтрольВводКоличестваЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ИмяОткрываемойФормы,
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеИКонтрольВводКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Протокол_ДобавитьЗаписи(Результат.ЗаписиПротокола);
	
	Если Результат.ПересчитатьНормативы Тогда
		
		ПересчитатьНормативы();
		
	ИначеЕсли ДополнительныеПараметры.Режим = "Проконтролировать"
		И ПравоКонтрольВыполненияОпераций
		И ТолькоПросмотр Тогда
			
		Если ЗаписатьДокументНаСервере() Тогда
			
			ОповеститьОбИзменении(Объект.Ссылка);
			ОповеститьОбИзменении(Тип("ДокументСсылка.ПроизводственнаяОперация2_2"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Протокол_ДобавитьЗаписи(ЗаписиПротокола) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗаписиПротокола) Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаписей = ОбщегоНазначенияУТКлиентСервер.Массив(ЗаписиПротокола);
	
	Для Индекс = 0 По МассивЗаписей.ВГраница() Цикл
		Документы.ПроизводственнаяОперация2_2.ДобавитьЗаписьПротокола(Объект, МассивЗаписей[Индекс]);
	КонецЦикла;
	
	Документы.ПроизводственнаяОперация2_2.РассчитатьСтатусПриИзмененииРеквизитов(Объект);
	
	ЗаполнитьКоличествоКВыполнению();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Статус,Количество");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВыполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактироватьПротоколЗавершениеНаСервере(Результат);
	
	Если Результат.ПересчитатьНормативы Тогда
		
		ПересчитатьНормативы();
		
	ИначеЕсли ПравоКонтрольВыполненияОпераций И ТолькоПросмотр Тогда
			
		Если ЗаписатьДокументНаСервере() Тогда
			
			ОповеститьОбИзменении(Объект.Ссылка);
			ОповеститьОбИзменении(Тип("ДокументСсылка.ПроизводственнаяОперация2_2"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьПротоколЗавершениеНаСервере(Результат)
	
	Объект.Протокол.Загрузить(Результат.Протокол.Выгрузить());
	
	Документы.ПроизводственнаяОперация2_2.ПересчитатьИтоги(Объект);
	Документы.ПроизводственнаяОперация2_2.РассчитатьСтатусПриИзмененииРеквизитов(Объект);
	
	ЗаполнитьКоличествоКВыполнению();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Статус,Количество");
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	ИспользоватьИнтервалПланированияЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
	ИспользоватьКонтрольВыполненияОпераций = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольВыполненияОпераций");
	
	ЗаполнитьРеквизитыПравКонтроля();
	ЗаполнитьРеквизитыПоОперации();
	ЗаполнитьРеквизитыПоЭтапу();
	ЗаполнитьРеквизитыПоПодразделению();
	ЗаполнитьРеквизитыПоВидуРабочегоЦентра(ЭтотОбъект);
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ЗаполнитьКоличествоКВыполнению();
	
	НастроитьЭлементыФормы();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	НастроитьИспользованиеСерий();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если Объект.НаОснованииНСИ Тогда
		
		РеквизитыОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Операция, "Владелец, Представление, ЕдиницаИзмерения.Представление");
		
		РеквизитыМаршрута = Справочники.ТехнологическиеОперации.РеквизитыМаршрутаОперации(РеквизитыОперации.Владелец);
		
		Маршрут = РеквизитыМаршрута.Маршрут;
		
		ОткрытьМаршрут = Новый ФорматированнаяСтрока(
			Строка(Маршрут),
			,
			,
			,
			?(РеквизитыМаршрута.МаршрутДоступен,"#ОткрытьМаршрут",""));
		
		ОткрытьОперацию = Новый ФорматированнаяСтрока(
			РеквизитыОперации.Представление,
			,
			,
			,
			"#ОткрытьОперацию");
		
		ОперацияПредставление = Новый ФорматированнаяСтрока(
			ОткрытьМаршрут, ", ", ОткрытьОперацию);
		
		Если НЕ ЕдиницаИзмеренияРассчитывать Тогда
			ЕдиницаИзмеренияПредставление            = РеквизитыОперации.ЕдиницаИзмеренияПредставление;
			ЕдиницаИзмеренияПредставлениеКВыполнению = РеквизитыОперации.ЕдиницаИзмеренияПредставление;
			ЕдиницаИзмеренияПредставлениеНаКонтроле  = РеквизитыОперации.ЕдиницаИзмеренияПредставление;
			ЕдиницаИзмеренияПредставлениеНаДоработке = РеквизитыОперации.ЕдиницаИзмеренияПредставление;
			ЕдиницаИзмеренияПредставлениеБрак        = РеквизитыОперации.ЕдиницаИзмеренияПредставление;
			ЕдиницаИзмеренияПредставлениеОтменено    = РеквизитыОперации.ЕдиницаИзмеренияПредставление;
			ЕдиницаИзмеренияПредставлениеФакт        = РеквизитыОперации.ЕдиницаИзмеренияПредставление;
		КонецЕсли;
		
		Элементы.Подразделение.Вид       = ВидПоляФормы.ПолеНадписи;
		ЭлементПодразделение  = Элементы.Подразделение; // РасширениеПоляФормыДляПоляНадписи 
		ЭлементПодразделение.Гиперссылка = Истина;
		
		Элементы.Этап.Вид       = ВидПоляФормы.ПолеНадписи;
		ЭлементЭтап  = Элементы.Этап; // РасширениеПоляФормыДляПоляНадписи 
		ЭлементЭтап.Гиперссылка = Истина;
		
		ПоМаршрутнойКарте = ТипЗнч(Маршрут) = Тип("СправочникСсылка.МаршрутныеКарты");
		
		Элементы.ФормаЗаполнитьПоМаршрутнойКарте.Видимость = РеквизитыМаршрута.МаршрутДоступен И ПоМаршрутнойКарте;
		Элементы.ФормаЗаполнитьПоСпецификации.Видимость    = РеквизитыМаршрута.МаршрутДоступен И НЕ ПоМаршрутнойКарте;
		
	Иначе
		
		Элементы.Подразделение.Вид = ВидПоляФормы.ПолеВвода;
		Элементы.Этап.Вид          = ВидПоляФормы.ПолеВвода;
		
		Элементы.ФормаЗаполнитьПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.ФормаЗаполнитьПоСпецификации.Видимость    = Ложь;
		
	КонецЕсли;
	
	Элементы.ОперацияПредставление.Видимость           = Объект.НаОснованииНСИ;
	Элементы.ВидОперации.ТолькоПросмотр                = Объект.НаОснованииНСИ;
	Элементы.ОперацияНомерОперации.Видимость           = Объект.НаОснованииНСИ;
	Элементы.ОперацияНомерСледующейОперации.Видимость  = Объект.НаОснованииНСИ;
	
	//
	
	ИзменениеЗапрещено = НЕ ПравоДоступа("Изменение", Метаданные.Документы.ПроизводственнаяОперация2_2);
	
	Если Не Объект.Этап.Пустая()
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Этап, "Статус") 
			= Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
			
		ИзменениеЗапрещено = Истина;
		Элементы.ТекстИнформация.Заголовок = НСтр("ru = 'Этап завершен, операция не может быть изменена.';
													|en = 'Stage is completed, the operation can not be changed.'");
		
	КонецЕсли;
	
	Если Не ИзменениеЗапрещено
		И Не Объект.СменноеЗадание.Пустая()
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СменноеЗадание, "Статус")
			= Перечисления.СтатусыСменныхЗаданий.Закрыто Тогда
		
		ИзменениеЗапрещено = Истина;
		Элементы.ТекстИнформация.Заголовок = НСтр("ru = 'Сменное задание закрыто, операция не может быть изменена.';
													|en = 'Shift task is closed. The operation cannot be changed.'");
		
	КонецЕсли;
	
	ТолькоПросмотр                      = ИзменениеЗапрещено;
	Элементы.ГруппаИнформация.Видимость = ИзменениеЗапрещено И НЕ ПустаяСтрока(Элементы.ТекстИнформация.Заголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	ОтображатьФакт = НЕ (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.НеВыполнена")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Пропущена"));
	
	Если СтруктураРеквизитов.Свойство("Статус") ИЛИ Инициализация Тогда
		
		Выполнена   = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполнена");
		
		Элементы.НачалоВыполнения.ТолькоПросмотр    = НЕ Выполнена;
		Элементы.ОкончаниеВыполнения.ТолькоПросмотр = НЕ Выполнена;
		
		Элементы.ТребуетПовторения.Видимость     = Выполнена
			И Объект.КоличествоНаКонтроле = 0
			И Объект.КоличествоФакт > 0
			И (Объект.МожноПовторить ИЛИ Объект.ТребуетПовторения);
		
		Элементы.НачалоВыполнения.Видимость         = ОтображатьФакт;
		Элементы.ОкончаниеВыполнения.Видимость      = ОтображатьФакт;
		Элементы.СтраницаТрудозатраты.Видимость     = ОтображатьФакт;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение") ИЛИ Инициализация Тогда
		
		Элементы.СменноеЗадание.Видимость = Форма.ИспользоватьСменныеЗадания;
		
		Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Объект.Подразделение));
		
		УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
			Объект.Исполнитель,
			Форма.ИспользоватьБригадныеНаряды,
			Форма.УчетТрудозатратВРазрезеСотрудников);
		
		Если Форма.ИспользоватьПооперационноеПланирование Тогда
			Формат = "ДЛФ=DT";
		Иначе
			Формат = "ДФ='dd.MM.yyyy HH:mm'";
		КонецЕсли;
		
		Элементы.НачалоВыполнения.ФорматРедактирования = Формат;
		Элементы.ОкончаниеВыполнения.ФорматРедактирования = Формат;
		
		Связи = Новый Массив;
		Связи.Добавить(Новый СвязьПараметраВыбора("Подразделение", "Объект.Подразделение")); // Для очистки при изменении подразделения
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.ВидРабочегоЦентра", "Объект.ВидРабочегоЦентра"));
		
		Если Форма.ИспользоватьУчастки Тогда
			Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Участок", "Объект.Участок"));
		КонецЕсли;
		
		Элементы.РабочийЦентр.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		Элементы.СтраницаМатериалыИРаботы.Видимость = ОтображатьФакт И Форма.ИспользоватьМатериалы;;
		Элементы.СтраницаВыходныеИзделия.Видимость  = ОтображатьФакт И Форма.ИспользоватьВыходныеИзделия;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВидРабочегоЦентра") ИЛИ Инициализация Тогда
		
		Элементы.ВариантНаладки.Доступность = Форма.ИспользоватьВариантыНаладки;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Исполнитель") ИЛИ Инициализация Тогда
		
		Элементы.ТрудозатратыИсполнитель.Видимость = НЕ ЗначениеЗаполнено(Объект.Исполнитель);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("Количество")
		ИЛИ Инициализация Тогда
		
		ЕдиницыИзмеренияКРасчету = Новый Структура;
		СписокКоманд = Новый СписокЗначений();
		
		// Назначено
		ЕдиницыИзмеренияКРасчету.Вставить("ЕдиницаИзмеренияПредставление", "Количество");
		
		// К выполнению
		Элементы.ГруппаКВыполнению.Видимость = (Форма.КоличествоКВыполнению > 0)
			И ОтображатьФакт
			И НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Выполнена")
			И НЕ Форма.ЭтоМобильныйКлиент;
		Если Элементы.ГруппаКВыполнению.Видимость Тогда
			
			ЕдиницыИзмеренияКРасчету.Вставить("ЕдиницаИзмеренияПредставлениеКВыполнению", "КоличествоКВыполнению");
				
			Если НЕ Форма.ТолькоПросмотр Тогда
				СписокКоманд.Очистить();
				СписокКоманд.Добавить("Выполнение", НСтр("ru = 'Выполнить';
														|en = 'Run'"));
				Если Форма.ПравоСамостоятельныйКонтрольВыполненныхОпераций
					И Форма.ИспользоватьКонтрольВыполненияОпераций
					И Объект.Контроль = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляТехнологическихОпераций.Требуется") Тогда
					СписокКоманд.Добавить("ВыполнитьПроконтролировать", НСтр("ru = 'Выполнить, проконтролировать';
																			|en = 'Execute, monitor'"));
				КонецЕсли;
				Форма.КомандыКВыполнению = СформироватьКомандыВыполненияИКонтроля(Форма, СписокКоманд);
			КонецЕсли;
			
		КонецЕсли;
		
		// На контроле
		Элементы.ГруппаНаКонтроле.Видимость = (Объект.КоличествоНаКонтроле > 0)
			И ОтображатьФакт
			И Форма.ИспользоватьКонтрольВыполненияОпераций;
		Если Элементы.ГруппаНаКонтроле.Видимость Тогда
			
			ЕдиницыИзмеренияКРасчету.Вставить("ЕдиницаИзмеренияПредставлениеНаКонтроле", "КоличествоНаКонтроле");
				
			Если Форма.ПравоКонтрольВыполненияОпераций Тогда
				СписокКоманд.Очистить();
				СписокКоманд.Добавить("Проконтролировать", НСтр("ru = 'Проконтролировать';
																|en = 'Monitor'"));
				Форма.КомандыНаКонтроле = СформироватьКомандыВыполненияИКонтроля(Форма, СписокКоманд);
			КонецЕсли;
			
		КонецЕсли;
		
		// На доработке
		Элементы.ГруппаНаДоработке.Видимость = (Объект.КоличествоНаДоработке > 0)
			И ОтображатьФакт
			И Форма.ИспользоватьКонтрольВыполненияОпераций;
		Если Элементы.ГруппаНаДоработке.Видимость Тогда
			
			ЕдиницыИзмеренияКРасчету.Вставить("ЕдиницаИзмеренияПредставлениеНаДоработке", "КоличествоНаДоработке");
				
			Если НЕ Форма.ТолькоПросмотр Тогда
				СписокКоманд.Очистить();
				СписокКоманд.Добавить("НаКонтроль", НСтр("ru = 'Предъявить к контролю';
														|en = 'Present for control'"));
				Форма.КомандыНаДоработке = СформироватьКомандыВыполненияИКонтроля(Форма, СписокКоманд);
			КонецЕсли;
			
		КонецЕсли;
		
		// Брак
		Элементы.ГруппаБрак.Видимость = (Объект.КоличествоБрак > 0)
			И ОтображатьФакт;
		Если Элементы.ГруппаБрак.Видимость Тогда
			
			ЕдиницыИзмеренияКРасчету.Вставить("ЕдиницаИзмеренияПредставлениеБрак", "КоличествоБрак");
			
		КонецЕсли;
		
		// Отменено
		Элементы.ГруппаОтменено.Видимость = (Объект.КоличествоОтменено > 0);
		Если Элементы.ГруппаОтменено.Видимость Тогда
			ЕдиницыИзмеренияКРасчету.Вставить("ЕдиницаИзмеренияПредставлениеОтменено", "КоличествоОтменено");
		КонецЕсли;
		
		// Факт
		Элементы.ГруппаФакт.Видимость = (Объект.КоличествоФакт > 0)
			И ОтображатьФакт;
		Если Элементы.ГруппаФакт.Видимость Тогда
			
			ЕдиницыИзмеренияКРасчету.Вставить("ЕдиницаИзмеренияПредставлениеФакт", "КоличествоФакт");
			
		КонецЕсли;
		
		// Единицы измерения
		Если Форма.ЕдиницаИзмеренияРассчитывать Тогда
			Для каждого КлючИЗначение Из ЕдиницыИзмеренияКРасчету Цикл
				Форма[КлючИЗначение.Ключ] = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
					Неопределено,
					?(Объект.Свойство(КлючИЗначение.Значение), Объект[КлючИЗначение.Значение], Форма[КлючИЗначение.Значение]));
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ Объект.НаОснованииНСИ Тогда
			Если Объект.Протокол.Количество() > 0 Тогда
				Элементы.Количество.Вид    = ВидПоляФормы.ПолеНадписи;
			Иначе
				Элементы.Количество.Вид    = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			Элементы.Количество.Ширина = 10;
		КонецЕсли;
		
	КонецЕсли;

	Если Инициализация И Форма.ЭтоМобильныйКлиент Тогда
		
		#Область Основная
		Элементы.ФормаПровестиИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
		Форма.Заголовок = НСтр("ru = 'Операция';
								|en = 'Operation'") + " " + Форма.Объект.Номер;
		Форма.АвтоЗаголовок = Ложь;
		
		Элементы.Номер.Видимость               = Ложь;
		Элементы.Дата.Видимость                = Ложь;
		
		Элементы.ГруппаВыполнение.Группировка      = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаВремяВыполнения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ГруппаНомерОперации.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		Элементы.НачалоВыполнения.ТолькоПросмотр    = Истина;
		Элементы.ОкончаниеВыполнения.ТолькоПросмотр = Истина;
		
		Элементы.ВидРабочегоЦентра.Заголовок = НСтр("ru = 'Вид РЦ';
													|en = 'Work center type'");
		Элементы.Наименование.Заголовок      = НСтр("ru = 'Изготовить';
													|en = 'Manufacture'");
		Элементы.ВремяВыполнения.Заголовок   = НСтр("ru = 'Время';
													|en = 'Time'") + ", " + Форма.Объект.ВремяВыполненияЕдИзм;
		
		Элементы.СтраницаМатериалыИРаботы.Заголовок = НСтр("ru = 'Расход';
															|en = 'Expense'");
		Элементы.СтраницаВыходныеИзделия.Заголовок  = НСтр("ru = 'Выпуск';
															|en = 'Release'");
		
		Элементы.СтраницаДополнительно.Заголовок  = НСтр("ru = 'Прочее';
														|en = 'Other'");
		
		Элементы.Количество.Заголовок      = НСтр("ru = 'Назначено';
													|en = 'Assigned'") + ", " + Форма.ЕдиницаИзмеренияПредставление;
		Элементы.КоличествоФакт.Заголовок  = НСтр("ru = 'Выполнено';
													|en = 'Completed'") + ", " + Форма.ЕдиницаИзмеренияПредставлениеФакт;
		
		Элементы.ВремяВыполненияЕдИзм.Видимость              = Ложь;
		Элементы.ЕдиницаИзмеренияПредставление.Видимость     = Ложь;
		Элементы.ЕдиницаИзмеренияПредставлениеФакт.Видимость = Ложь;
		
		ГруппаИнформацияОбОперации = Элементы.Добавить("ГруппаИнформацияОбОперации",
														Тип("ГруппаФормы"), 
														Элементы.СтраницаОсновное);
		
		ГруппаИнформацияОбОперации.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаИнформацияОбОперации.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		ГруппаИнформацияОбОперации.ЗаголовокСвернутогоОтображения  = Форма.Объект.Наименование;
		ГруппаИнформацияОбОперации.Заголовок = НСтр("ru = 'Информация об операции';
													|en = 'Operation details'");
		ГруппаИнформацияОбОперации.Скрыть();
		
		Элементы.Переместить(ГруппаИнформацияОбОперации, Элементы.СтраницаОсновное, Элементы.ГруппаОсновноеЛевоПраво);
		
		Элементы.Переместить(Элементы.Наименование,          ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.ВремяВыполнения,       ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.ОперацияПредставление, ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.Статус,                ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.Этап,                  ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.СменноеЗадание,        ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.Подразделение,         ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.Участок,               ГруппаИнформацияОбОперации);
		Элементы.Переместить(Элементы.ВидРабочегоЦентра,     ГруппаИнформацияОбОперации);
		
		#КонецОбласти
		
		#Область НастройкаТЧ
		Элементы.МатериалыИРаботы_СкопироватьСтроки.ТолькоВоВсехДействиях                = Истина;
		Элементы.МатериалыИРаботы_ВставитьСтроки.ТолькоВоВсехДействиях                   = Истина;
		Элементы.МатериалыИРаботы_ПоискПоШтрихкоду.ТолькоВоВсехДействиях                 = Истина;
		Элементы.МатериалыИРаботы_ЗагрузитьДанныеИзТСД.ТолькоВоВсехДействиях             = Истина;
		Элементы.МатериалыИРаботы_ПолучитьВес.ТолькоВоВсехДействиях                      = Истина;
		Элементы.МатериалыИРаботы_ПодобратьМатериалы.ТолькоВоВсехДействиях               = Истина;
		Элементы.МатериалыИРаботы_ПодобратьМатериалыПоЭтапу.ТолькоВоВсехДействиях        = Истина;
		Элементы.КонтекстноеМенюМатериалыИРаботы_СкопироватьСтроки.ТолькоВоВсехДействиях = Истина;
		Элементы.КонтекстноеМенюМатериалыИРаботы_ВставитьСтроки.ТолькоВоВсехДействиях    = Истина;
		
		Элементы.ВыходныеИзделия_СкопироватьСтроки.ТолькоВоВсехДействиях                 = Истина;
		Элементы.ВыходныеИзделия_ВставитьСтроки.ТолькоВоВсехДействиях                    = Истина;
		Элементы.ВыходныеИзделия_УказатьСерии.ТолькоВоВсехДействиях                      = Истина;
		Элементы.ВыходныеИзделия_ПолучитьВес.ТолькоВоВсехДействиях                       = Истина;
		Элементы.ВыходныеИзделия_ПодобратьТовары.ТолькоВоВсехДействиях                   = Истина;
		Элементы.КонтекстноеМенюВыходныеИзделия_СкопироватьСтроки.ТолькоВоВсехДействиях  = Истина;
		Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.ТолькоВоВсехДействиях     = Истина;
		
		Элементы.Трудозатраты_СкопироватьСтроки.ТолькоВоВсехДействиях                    = Истина;
		Элементы.Трудозатраты_ВставитьСтроки.ТолькоВоВсехДействиях                       = Истина;
		Элементы.КонтекстноеМенюТрудозатраты_СкопироватьСтроки.ТолькоВоВсехДействиях     = Истина;
		Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.ТолькоВоВсехДействиях        = Истина;
		
		#Область МатериалыИРаботы
		
		Элементы.МатериалыИРаботыНомерСтроки.Видимость = Ложь;
		Элементы.МатериалыИРаботыНоменклатураЕдиницаИзмерения.ОтображатьВШапке = Ложь;
		
		Элементы.МатериалыИРаботыЕдиницаИзмерения.ОтображатьЗаголовок = Ложь;
		
		Элементы.Переместить(Элементы.МатериалыИРаботыНоменклатура, Элементы.МатериалыИРаботы, Элементы.МатериалыИРаботыАртикул);
		Элементы.Переместить(Элементы.МатериалыИРаботыЕдиницаИзмерения, Элементы.МатериалыИРаботы, Элементы.МатериалыИРаботыАртикул);
		Элементы.Переместить(Элементы.МатериалыИРаботыКоличествоУпаковок, Элементы.МатериалыИРаботы, Элементы.МатериалыИРаботыЕдиницаИзмерения);

		Элементы.МатериалыИРаботыКоличествоУпаковок.Ширина = 8;
		Элементы.МатериалыИРаботыНоменклатураЕдиницаИзмерения.Ширина = 2;
		Элементы.МатериалыИРаботыУпаковка.Ширина = 2;

		#КонецОбласти
		
		#Область ВыходныеИзделия
		
		Элементы.ВыходныеИзделияНомерСтроки.Видимость = Ложь;
		Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.ОтображатьВШапке = Ложь;
		
		Элементы.ВыходныеИзделияЕдиницаИзмерения.ОтображатьЗаголовок = Ложь;
		
		Элементы.Переместить(Элементы.ВыходныеИзделияНоменклатура, Элементы.ВыходныеИзделия, Элементы.ВыходныеИзделияАртикул);
		Элементы.Переместить(Элементы.ВыходныеИзделияЕдиницаИзмерения, Элементы.ВыходныеИзделия, Элементы.ВыходныеИзделияАртикул);
		Элементы.Переместить(Элементы.ВыходныеИзделияКоличествоУпаковок, Элементы.ВыходныеИзделия, Элементы.ВыходныеИзделияЕдиницаИзмерения);

		Элементы.ВыходныеИзделияКоличествоУпаковок.Ширина = 8;
		Элементы.ВыходныеИзделияНоменклатураЕдиницаИзмерения.Ширина = 2;
		Элементы.ВыходныеИзделияУпаковка.Ширина = 2;
		
		#КонецОбласти
		
		#Область Трудозатраты
		
		Элементы.ТрудозатратыНомерСтроки.Видимость = Ложь;
		ГруппаКоличество = Элементы.Добавить("ГруппаКоличество", Тип("ГруппаФормы"), Элементы.Трудозатраты);
		ГруппаКоличество.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКоличество.Группировка = ГруппировкаКолонок.ВЯчейке;
		Элементы.ТрудозатратыКоличество.Ширина = 8;
		Элементы.ТрудозатратыВидРаботЕдиницаИзмерения.Ширина = 4;
		
		Элементы.Переместить(ГруппаКоличество, Элементы.Трудозатраты, Элементы.ТрудозатратыКоличество);
		Элементы.Переместить(Элементы.ТрудозатратыКоличество, ГруппаКоличество);
		Элементы.Переместить(Элементы.ТрудозатратыВидРаботЕдиницаИзмерения, ГруппаКоличество);
		
		Элементы.ТрудозатратыВидРаботЕдиницаИзмерения.ОтображатьВШапке = Ложь;
		
		#КонецОбласти
		
		#КонецОбласти
		
		#Область Статус
		ГруппаСтатус = Элементы.Добавить("ГруппаСтатус", Тип("ГруппаФормы"));
		Элементы.Переместить(ГруппаСтатус, Форма, Элементы.ГруппаИнформация);
		
		ГруппаСтатус.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтатус.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтатус.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаСтатус.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаСтатус.РастягиватьПоГоризонтали = Истина;
		
		НачатьОперацию               = Форма.Команды.Добавить("НачатьОперацию");
		ВыполнитьОперацию            = Форма.Команды.Добавить("ВыполнитьОперацию");
		ОтразитьНевыполнениеОперации = Форма.Команды.Добавить("ОтразитьНевыполнениеОперации");
		
		НачатьОперацию.Действие               = "НачатьОперацию";
		ВыполнитьОперацию.Действие            = "ВыполнитьОперацию";
		ОтразитьНевыполнениеОперации.Действие = "ОтразитьНевыполнениеОперации";
		
		НачатьОперацию.Заголовок               = Нстр("ru = 'Начать';
														|en = 'Start'");
		ВыполнитьОперацию.Заголовок            = Нстр("ru = 'Выполнить';
														|en = 'Run'");
		ОтразитьНевыполнениеОперации.Заголовок = Нстр("ru = 'Отразить невыполнение';
														|en = 'Record failure to execute'");
		
		НачатьОперацию.ИзменяетСохраняемыеДанные               = Истина;
		ВыполнитьОперацию.ИзменяетСохраняемыеДанные            = Истина;
		ОтразитьНевыполнениеОперации.ИзменяетСохраняемыеДанные = Истина;
		
		СтатусНачать               = Элементы.Добавить("Начать", Тип("КнопкаФормы"), ГруппаСтатус);
		СтатусВыполнить            = Элементы.Добавить("Выполнить", Тип("КнопкаФормы"), ГруппаСтатус);
		СтатусОтразитьНевыполнение = Элементы.Добавить("ОтразитьНевыполнение", Тип("КнопкаФормы"), ГруппаСтатус);
		
		СтатусНачать.ИмяКоманды               = "НачатьОперацию";
		СтатусВыполнить.ИмяКоманды            = "ВыполнитьОперацию";
		СтатусОтразитьНевыполнение.ИмяКоманды = "ОтразитьНевыполнениеОперации";
		
		СтатусНачать.Вид               = ВидКнопкиФормы.Гиперссылка;
		СтатусВыполнить.Вид            = ВидКнопкиФормы.Гиперссылка;
		СтатусОтразитьНевыполнение.Вид = ВидКнопкиФормы.Гиперссылка;
		
		СтатусНачать.ГоризонтальноеПоложениеВГруппе               = ГоризонтальноеПоложениеЭлемента.Лево;
		СтатусВыполнить.ГоризонтальноеПоложениеВГруппе            = ГоризонтальноеПоложениеЭлемента.Центр;
		СтатусОтразитьНевыполнение.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		
		#КонецОбласти
		
		#Область ПереключенияВкладок
		ГруппаВкладки= Элементы.Добавить("ГруппаВкладки", Тип("ГруппаФормы"));
		Элементы.Переместить(ГруппаВкладки, Форма, Элементы.ГруппаИнформация);
		
		ГруппаВкладки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаВкладки.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаВкладки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаВкладки.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаВкладки.РастягиватьПоГоризонтали = Истина;
		
		ВкладкаВлево  = Форма.Команды.Добавить("ВкладкаВлево");
		ВкладкаВправо = Форма.Команды.Добавить("ВкладкаВправо");
		
		ВкладкаВлево.Действие  = "СменаСтраницы";
		ВкладкаВправо.Действие = "СменаСтраницы";
		
		ЛеваяВкладка   = Элементы.Добавить("ЛеваяВкладка", Тип("КнопкаФормы"), ГруппаВкладки);
		ТекущаяВкладка = Элементы.Добавить("ТекущаяВкладка", Тип("ДекорацияФормы"), ГруппаВкладки);
		ПраваяВкладка  = Элементы.Добавить("ПраваяВкладка", Тип("КнопкаФормы"), ГруппаВкладки);
		
		ЛеваяВкладка.ГоризонтальноеПоложениеВГруппе   = ГоризонтальноеПоложениеЭлемента.Лево;
		ТекущаяВкладка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		ПраваяВкладка.ГоризонтальноеПоложениеВГруппе  = ГоризонтальноеПоложениеЭлемента.Право;
		
		ЛеваяВкладка.Ширина  = 9;
		ПраваяВкладка.Ширина = 9;

		ЛеваяВкладка.ИмяКоманды   = "ВкладкаВлево";
		ПраваяВкладка.ИмяКоманды  = "ВкладкаВправо";
		
		ТекущаяВкладка.Вид = ВидДекорацииФормы.Надпись;
		
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Пролистывание;
		
		#КонецОбласти
		
		ОбщегоНазначенияУТКлиентСервер.АдаптацияЭлементовФормыДляМобильногоЭкрана(Элементы);
		
	КонецЕсли;
	
	Если Форма.ЭтоМобильныйКлиент
		И (Инициализация 
		ИЛИ СтруктураРеквизитов.Свойство("ГруппаСтраницы") 
		ИЛИ СтруктураРеквизитов.Свойство("Статус")) Тогда
		
		Страницы = Элементы.ГруппаСтраницы;
		
		ВидимыеСтраницы = Новый Массив();//Массив из ГруппаФормы - 
		
		Для Каждого Страница Из Страницы.ПодчиненныеЭлементы Цикл
			Если Страница.Видимость Тогда
				ВидимыеСтраницы.Добавить(Страница);
			КонецЕсли;
		КонецЦикла;
		
		ТекущийИндекс = ВидимыеСтраницы.Найти(Страницы.ТекущаяСтраница);
		
		Если НЕ ОтображатьФакт И ТекущийИндекс = Неопределено Тогда
			ТекущийИндекс = 0;
			Страницы.ТекущаяСтраница = ВидимыеСтраницы[0];
		КонецЕсли;
		
		ЛеваяВкладка = Элементы["ЛеваяВкладка"];
		ПраваяВкладка = Элементы["ПраваяВкладка"];
		ТекущаяВкладка = Элементы["ТекущаяВкладка"];
		
		Если ТекущийИндекс = 0 Тогда
			ЛеваяВкладка.Заголовок   = " ";
			ЛеваяВкладка.Доступность = Ложь;
		Иначе
			
			ЛеваяВкладка.Доступность = Истина;
			ЛеваяВкладка.Заголовок   = ВидимыеСтраницы.Получить(ТекущийИндекс - 1).Заголовок;
			
		КонецЕсли;
		
		Если ТекущийИндекс = ВидимыеСтраницы.Количество() - 1 Тогда
			
			ПраваяВкладка.Заголовок   = " ";
			ПраваяВкладка.Доступность = Ложь;
			
		Иначе
			
			ПраваяВкладка.Доступность = Истина;
			ПраваяВкладка.Заголовок   = ВидимыеСтраницы.Получить(ТекущийИндекс + 1).Заголовок;
			
		КонецЕсли;
		
		ТекущаяВкладка.Заголовок = Страницы.ТекущаяСтраница.Заголовок;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеСтатусПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОбработатьИзменениеСтатусаНаСервере();
		
	Иначе
		
		Объект.Статус = СтатусДоИзменения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатусаНаСервере()
	
	Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкеСтатуса(Объект);
	
	НастроитьИспользованиеСерий();
	ЗаполнитьКоличествоКВыполнению();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Статус,Количество");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНормативамОперацииНаСервере(СохранитьИсполнителей = Ложь, СохранитьСерии = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоНормативамОперации(, СохранитьИсполнителей, СохранитьСерии);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("МатериалыИРаботы");
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ВыходныеИзделия");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьВремяВыполненияНаСервере(РабочийЦентр, РабочийЦентрДоИзменения, ВремяВыполнения)
	
	РабочиеЦентры = Новый Массив();
	РабочиеЦентры.Добавить(РабочийЦентрДоИзменения);
	РабочиеЦентры.Добавить(РабочийЦентр);
	ЗначенияРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(РабочиеЦентры, "КоэффициентВремениРаботы");
	Если ЗначенияРеквизита[РабочийЦентрДоИзменения] <> Неопределено Тогда
		КоэффициентВремениРаботыДоИзменения = ЗначенияРеквизита[РабочийЦентрДоИзменения];
	Иначе
		КоэффициентВремениРаботыДоИзменения = 1;
	КонецЕсли;
	Если ЗначенияРеквизита[РабочийЦентр] <> Неопределено Тогда
		КоэффициентВремениРаботы = ЗначенияРеквизита[РабочийЦентр];
	Иначе
		КоэффициентВремениРаботы = 1;
	КонецЕсли;
	
	Возврат КоэффициентВремениРаботы*ВремяВыполнения/КоэффициентВремениРаботыДоИзменения;
	
КонецФункции

&НаКлиенте
Процедура ИсполнительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Объект.Исполнитель = Результат;
		Модифицированность = Истина;
		
		ИсполнительПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
		
		ТекущиеДанные.Исполнитель = Результат;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение, Дата)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПараметрыОтбора = Новый Структура("Организация, Подразделение, Дата");
	ПараметрыОтбора.Подразделение = Подразделение;
	ПараметрыОтбора.Дата = Дата;
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, ПараметрыОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНормативыДополнительныхРеквизитов()
	
	// Проверка возможности вывода нормативов
	Если Объект.Операция.Пустая()
		ИЛИ Объект.ВидОперации.Пустая()
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВидыТехнологическихОпераций") Тогда
		Возврат;
	КонецЕсли;
	
	Нормативы = Справочники.ТехнологическиеОперации.НормативыЗначенийДопРеквизитов(Объект.Операция);
	Если Нормативы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОписаниеРеквизитов = Ложь;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		
		Если Реквизит.Имя = "Свойства_ОписаниеДополнительныхРеквизитов" Тогда
			
			ТаблицаОписание = РеквизитФормыВЗначение("Свойства_ОписаниеДополнительныхРеквизитов");//ТаблицаЗначений - 
			
			ЕстьОписаниеРеквизитов = ТаблицаОписание.Колонки.Найти("Свойство") <> Неопределено
				И ТаблицаОписание.Колонки.Найти("ИмяРеквизитаЗначение") <> Неопределено
				И ТаблицаОписание.Колонки.Найти("Наименование") <> Неопределено;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	Если НЕ ЕстьОписаниеРеквизитов Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод нормативов
	Для каждого Норматив Из Нормативы Цикл
		
		Если Норматив.ЗначениеМин = 0 И Норматив.ЗначениеМакс = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(
			Новый Структура("Свойство", Норматив.Свойство));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРеквизита = НайденныеСтроки[0];
		Если ОписаниеРеквизита.ТипЗначения.Типы().ВГраница() <> 0
			ИЛИ НЕ ОписаниеРеквизита.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормыРеквизит = Элементы.Найти(ОписаниеРеквизита.ИмяРеквизитаЗначение);
		Если ЭлементФормыРеквизит = Неопределено
			ИЛИ Элементы.Найти(ОписаниеРеквизита.ИмяРеквизитаЗначение + "_Группа") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавление группы
		ЭлементФормыГруппа = Элементы.Добавить(
			ОписаниеРеквизита.ИмяРеквизитаЗначение + "_Группа",
			Тип("ГруппаФормы"),
			ЭлементФормыРеквизит.Родитель);
			
		ЭлементФормыГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементФормыГруппа.Заголовок = СтрШаблон(НСтр("ru = '%1 (группа)';
														|en = '%1 (group)'"), ОписаниеРеквизита.Наименование);
		ЭлементФормыГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементФормыГруппа.ОтображатьЗаголовок = Ложь;
		ЭлементФормыГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		Элементы.Переместить(ЭлементФормыГруппа, ЭлементФормыГруппа.Родитель, ЭлементФормыРеквизит);
		Элементы.Переместить(ЭлементФормыРеквизит, ЭлементФормыГруппа);
		
		// Добавление декорации (норматив)
		ЭлементФормыДекорация = Элементы.Добавить(
			ОписаниеРеквизита.ИмяРеквизитаЗначение + "_Декорация",
			Тип("ДекорацияФормы"),
			ЭлементФормыГруппа);
			
		ЭлементФормыДекорация.Вид = ВидДекорацииФормы.Надпись;
		ЭлементФормыДекорация.ЦветТекста = Новый Цвет(0, 150, 70);
		
		Формат = Норматив.Формат
			+ ?(СтрНайти(Норматив.Формат, "ЧН") = 0,
				?(ПустаяСтрока(Норматив.Формат), "ЧН=0", "; ЧН=0"),
				"");
		
		Если Норматив.ЗначениеМакс <> 0 Тогда
			ОписаниеНорматива = СтрШаблон(НСтр("ru = 'норматив: %1 - %2';
												|en = 'standard: %1 - %2'"), 
				Формат(Норматив.ЗначениеМин, Формат),
				Формат(Норматив.ЗначениеМакс, Формат));
		Иначе
			ОписаниеНорматива = СтрШаблон(НСтр("ru = 'норматив: %1';
												|en = 'standard: %1'"),
				Формат(Норматив.ЗначениеМин, Формат));
		КонецЕсли;
		ЭлементФормыДекорация.Заголовок = ОписаниеНорматива;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоОперации()
	
	Если Объект.НаОснованииНСИ Тогда
		
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Операция, "ЕдиницаИзмерения");
			
		ЕдиницаИзмеренияРассчитывать = НЕ ЗначениеЗаполнено(ЕдиницаИзмерения);
		
	Иначе
		
		ЕдиницаИзмеренияРассчитывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоЭтапу()
	
	Если Объект.НаОснованииНСИ Тогда
		
		Спецификация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Этап, "Спецификация");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПоВидуРабочегоЦентра(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ВидРабочегоЦентра) Тогда
		Форма.ИспользоватьВариантыНаладки = ИспользоватьВариантыНаладки(Форма.Объект.ВидРабочегоЦентра);
	Иначе
		Форма.ИспользоватьВариантыНаладки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПравКонтроля()
	
	Если НЕ ИспользоватьКонтрольВыполненияОпераций Тогда
		Возврат;
	КонецЕсли;
	
	ПравоКонтрольВыполненияОпераций = Пользователи.РолиДоступны("КонтрольВыполненияОпераций");
		
	ПравоСамостоятельныйКонтрольВыполненныхОпераций = ОперативныйУчетПроизводства.ЕстьПравоСамостоятельногоКонтроляОперации(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьВариантыНаладки(ВидРабочегоЦентра)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРабочегоЦентра, "ИспользуютсяВариантыНаладки");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоПодразделению()
	
	Настройки = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(
		Объект.Подразделение, Маршрут);
		
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		Настройки,
		"ИспользоватьМатериалы,
		|ИспользоватьВыходныеИзделия,
		|ИспользоватьСменныеЗадания,
		|ИспользоватьБригадныеНаряды,
		|ИспользоватьПооперационноеПланирование,
		|ИспользоватьУчастки");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Организация(Этап)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап, "Организация");
	
КонецФункции

&НаСервереБезКонтекста
Функция ОперацияКакРаспоряжениеВыработки(Этап)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап, "ОперацияКакРаспоряжениеВыработки");
	
КонецФункции

&НаКлиенте
Процедура ПриСменеСтраницы()
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ГруппаСтраницы");
	
	// СтандартныеПодсистемы.Свойства
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
		Если ЭтоМобильныйКлиент Тогда
			ОбщегоНазначенияУТКлиентСервер.АдаптацияЭлементовФормыДляМобильногоЭкрана(
				Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы);
		КонецЕсли;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНормативы()
	
	Если Объект.НаОснованииНСИ Тогда
		
		Если Объект.ВыходныеИзделия.Количество() > 0
			ИЛИ Объект.МатериалыИРаботы.Количество() > 0
			ИЛИ Объект.Трудозатраты.Количество() > 0 Тогда
			
			ЗаполнитьПоНормативамОперацииНаСервере(Истина, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокументНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Результат = Записать();
		
	Исключение
		
		СобытиеЖурналаРегистрации = НСтр("ru = 'Не удалось записать производственную операцию';
										|en = 'Cannot save the routing operation'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДатаДляОпределенияИсполнителя()
	
	Дата = Объект.ОкончаниеВыполнения;
	Если НЕ ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(ДатаСменногоЗадания) Тогда
		Дата = ДатаСменногоЗадания;
	ИначеЕсли НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = Объект.Дата;
	КонецЕсли;
	
	Возврат Дата;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

#КонецОбласти