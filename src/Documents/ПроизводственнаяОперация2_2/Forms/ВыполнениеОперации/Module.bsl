
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Режим",                            Режим);
	Параметры.Свойство("КоличествоКВыполнению",            КоличествоКВыполнению);
	Параметры.Свойство("Операция",                         Операция);
	Параметры.Свойство("ИдентификаторОперации",            ИдентификаторОперации);
	Параметры.Свойство("ОперацияКакРаспоряжениеВыработки", ОперацияКакРаспоряжениеВыработки);
	Параметры.Свойство("НаОснованииНСИ",                   НаОснованииНСИ);
	
	Если НЕ Параметры.Свойство("ОперацияНаименование", ОперацияНаименование) Тогда
		ОперацияНаименование = Операция;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЕдиницаИзмеренияПредставление", ЕдиницаИзмеренияПредставление) Тогда
		ЕдиницаИзмеренияПредставление = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
			Неопределено,
			КоличествоКВыполнению);
	КонецЕсли;
	
	ЗаполнитьСписокПричинБрака();
	
	ЗаполнитьСписокПредыдущихОпераций(Параметры);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	РаспределитьОстаток("КоличествоГотово");
	
КонецПроцедуры

&НаКлиенте
Процедура Брак(Команда)
	
	РаспределитьОстаток("КоличествоБрак");
	
КонецПроцедуры

&НаКлиенте
Процедура Отменено(Команда)
	
	РаспределитьОстаток("КоличествоОтменено");
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ЗаписиПротокола", Новый Массив);
		Результат.Вставить("ПересчитатьНормативы", ПересчитатьНормативы);
		
		Если КоличествоБрак > 0 Тогда
			
			Если Режим = "Выполнение" ИЛИ Режим = "ВыполнитьПроконтролировать" Тогда
				ПредыдущееСостояние = "КоличествоКВыполнению";
			ИначеЕсли Режим = "НаКонтроль" Тогда
				ПредыдущееСостояние = "КоличествоНаДоработке";
			КонецЕсли;
			
			НовоеДействие = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("Брак");
			НовоеДействие.ПредыдущееСостояние = ПредыдущееСостояние;
			НовоеДействие.Количество  = КоличествоБрак;
			НовоеДействие.Комментарий = ПричинаБрак;
			Результат.ЗаписиПротокола.Добавить(НовоеДействие);
			
		КонецЕсли;
		
		Если КоличествоГотово > 0 Тогда
			
			Если Режим = "Выполнение" ИЛИ Режим = "ВыполнитьПроконтролировать" Тогда
				НовоеДействие = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("Выполнение");
				НовоеДействие.Количество  = КоличествоГотово;
				Результат.ЗаписиПротокола.Добавить(НовоеДействие);
			КонецЕсли;
			
			Если Режим = "ВыполнитьПроконтролировать" Тогда
				НовоеДействие = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("Контроль");
				НовоеДействие.Количество  = КоличествоГотово;
				Результат.ЗаписиПротокола.Добавить(НовоеДействие);
			КонецЕсли;
			
			Если Режим = "НаКонтроль" Тогда
				НовоеДействие = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("ПредъявлениеККонтролю");
				НовоеДействие.Количество  = КоличествоГотово;
				Результат.ЗаписиПротокола.Добавить(НовоеДействие);
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоОтменено > 0 Тогда
			
			НовоеДействие = ОперативныйУчетПроизводстваКлиентСервер.ЗаписьПротоколаКонструктор("Отмена");
			НовоеДействие.Количество = КоличествоОтменено;
			Результат.ЗаписиПротокола.Добавить(НовоеДействие);
			
		КонецЕсли;
		
		Если ПредыдущиеОперации.Количество() > 0
			И ПредыдущиеОперацииЕстьКоличествоКВыполнению(ЭтотОбъект) > 0 Тогда
			НачатьВыполнениеПредыдущихОпераций(Результат);
		Иначе
			Закрыть(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для каждого Строка Из ПредыдущиеОперации Цикл
		Строка.Отметка = Истина;
	КонецЦикла;
	
	ПредыдущиеОперацииКоличество = ПредыдущиеОперации.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого Строка Из ПредыдущиеОперации Цикл
		Строка.Отметка = Ложь;
	КонецЦикла;
	
	ПредыдущиеОперацииКоличество = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ПредыдущиеОперацииРассчитатьКоличествоКВыполнению(ЭтотОбъект);
	
	РассчитатьПризнакПересчитатьНормативы(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеОперацииОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПредыдущиеОперации.ТекущиеДанные;
	
	ПредыдущиеОперацииКоличество = ПредыдущиеОперацииКоличество + ?(ТекущиеДанные.Отметка, 1, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеОперацииВыполнитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПредыдущиеОперации.ТекущиеДанные; 
	
	ТекущиеДанные.КоличествоРучнойВвод = ?(ТекущиеДанные.Количество = 0, Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если Режим = "НаКонтроль" Тогда
		
		ЕстьПредыдущиеОперации = Ложь;
		
		Элементы.ГруппаОтменено.Видимость = Ложь;
		Элементы.Отменено.Видимость = Ложь;
		
		Заголовок = СтрШаблон(НСтр("ru = 'Предъявление к контролю операции ""%1""';
									|en = 'Present the ""%1"" operation for control'"), ОперацияНаименование);
		
	Иначе
		
		ЕстьПредыдущиеОперации = ПредыдущиеОперации.Количество() > 0;
		
		Заголовок = СтрШаблон(НСтр("ru = 'Выполнение операции ""%1""';
									|en = 'Execute the ""%1"" operation'"), ОперацияНаименование);
		
	КонецЕсли;
	
	Элементы.ГруппаТекущаяОперация.ОтображатьЗаголовок = ЕстьПредыдущиеОперации;
	Элементы.ГруппаОперацииКВыполнению.Видимость = ЕстьПредыдущиеОперации;
	
	НастроитьЭлементыОтраженияБрака();
	
	НастроитьПереключательПересчитатьНормативы();
	
	КлючСохраненияПоложенияОкна = СтрШаблон("%1%2", ИмяФормы, ?(ЕстьПредыдущиеОперации,"1","2"));
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация
		Или СтруктураРеквизитов.Свойство("Количество") Тогда
			
		ОбновитьКоличествоКРаспределению(Форма);
		
		Элементы.КоличествоБрак.МаксимальноеЗначение      = Форма.КоличествоБрак + Форма.КоличествоКРаспределению;
		Элементы.КоличествоГотово.МаксимальноеЗначение    = Форма.КоличествоГотово + Форма.КоличествоКРаспределению;
		Элементы.КоличествоОтменено.МаксимальноеЗначение  = Форма.КоличествоОтменено + Форма.КоличествоКРаспределению;
		
		Элементы.ГруппаБыстрыеКоманды.Доступность         = Форма.КоличествоКРаспределению > 0;
		Элементы.ФормаПрименить.Доступность = (Форма.КоличествоГотово > 0 ИЛИ Форма.КоличествоБрак > 0 ИЛИ Форма.КоличествоОтменено > 0);
		
	КонецЕсли;
	
	Если Инициализация
		Или СтруктураРеквизитов.Свойство("ИнформационнаяПанель") Тогда
			
			Элементы.ГруппаИнформационнаяПанель.Видимость = ЗначениеЗаполнено(Элементы.ИнформационнаяПанельНадпись.Заголовок);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОтраженияБрака()
	
	Элементы.Брак.Доступность = ОперацияКакРаспоряжениеВыработки;
	Элементы.ГруппаБрак.Доступность = ОперацияКакРаспоряжениеВыработки;
	
	Если НЕ ОперацияКакРаспоряжениеВыработки Тогда
		Элементы.ИнформационнаяПанельНадпись.Заголовок = Документы.ПроизводственнаяОперация2_2.ТекстПредупрежденияНедоступностьОтраженияБрака();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПереключательПересчитатьНормативы()
	
	Элементы.ПересчитатьНормативы.Видимость = НаОснованииНСИ;
	
	Если НаОснованииНСИ Тогда
		
		Элементы.ПересчитатьНормативы.Заголовок = Документы.ПроизводственнаяОперация2_2.ТекстПереключателяПересчитатьНормативы(Операция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоКРаспределению(Форма)
	
	Форма.КоличествоКРаспределению = Форма.КоличествоКВыполнению
		- Форма.КоличествоБрак
		- Форма.КоличествоГотово
		- Форма.КоличествоОтменено;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстаток(ИмяРеквизита)
	
	ЭтотОбъект[ИмяРеквизита] = ЭтотОбъект[ИмяРеквизита] + КоличествоКРаспределению;
	ТекущийЭлемент = Элементы[ИмяРеквизита];
	
	ПредыдущиеОперацииРассчитатьКоличествоКВыполнению(ЭтотОбъект);
	
	РассчитатьПризнакПересчитатьНормативы(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПричинБрака()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	Таблица.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.Протокол КАК Таблица
	|ГДЕ
	|	Таблица.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПротоколаПроизводственнойОперации.Брак)
	|	И Таблица.Комментарий <> """"
	|	И Таблица.Ссылка.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Дата УБЫВ
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущийСписок = Элементы.ПричинаБрак.СписокВыбора;
			Если ТекущийСписок.НайтиПоЗначению(Выборка.Комментарий) = Неопределено Тогда
				ТекущийСписок.Добавить(Выборка.Комментарий);
				Если ТекущийСписок.Количество() >= 5 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	ЕстьОшибки = Ложь;
	
	Если (КоличествоБрак + КоличествоГотово + КоличествоОтменено) > КоличествоКВыполнению Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Превышено доступное к выполнению количество';
				|en = 'The quantity available for execution is exceeded'"),,"КоличествоКВыполнению",,ЕстьОшибки);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПредыдущихОпераций(Параметры)
	
	Если Режим = "НаКонтроль"
			ИЛИ Параметры.ИспользоватьСменныеЗадания Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.НомерОперации                                      КАК НомерОперации,
	|	Т.Требуется                                          КАК Требуется,
	|	Т.Запланировано                                      КАК Запланировано,
	|	Т.Выполнено + Т.Брак + Т.НаКонтроле + Т.НаДоработке  КАК Обработано,
	|	&КоличествоКВыполнению                               КАК КОбработке
	|ПОМЕСТИТЬ ВтТекущаяОперация
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Т
	|ГДЕ
	|	Т.Этап = &Этап
	|	И Т.Операция = &Операция
	|	И Т.ИдентификаторОперации = &ИдентификаторОперации
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Требуется                КАК Требуется,
	|	Т.Запланировано            КАК Запланировано,
	|	Т.Обработано               КАК Обработано,
	|	Т.КОбработке               КАК КОбработке
	|ИЗ
	|	ВтТекущаяОперация КАК Т
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Операция                                                                                  КАК Операция,
	|	Т.ИдентификаторОперации                                                                     КАК ИдентификаторОперации,
	|	Т.НомерОперации                                                                             КАК НомерОперации,
	|	Т.Операция.Контроль                                                                         КАК Контроль,
	|
	|	Т.Требуется                                                                                 КАК Требуется,
	|	Т.Запланировано                                                                             КАК Запланировано,
	|	Т.Выполнено + Т.Брак + Т.НаКонтроле + Т.НаДоработке                                         КАК Обработано,
	|
	|	Т.Запланировано * (ТекущаяОперация.КОбработке + ТекущаяОперация.Обработано)
	|		/ ТекущаяОперация.Запланировано - (Т.Выполнено + Т.Брак + Т.НаКонтроле + Т.НаДоработке) КАК МожноВыполнить,
	|	
	|	&Этап                                                                                       КАК Этап,
	|	&Подразделение                                                                              КАК Подразделение,
	|	&Участок                                                                                    КАК Участок,
	|	&Исполнитель                                                                                КАК Исполнитель
	|
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Т
	|	
	|	ПОЛНОЕ СОЕДИНЕНИЕ ВтТекущаяОперация КАК ТекущаяОперация
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	Т.Этап = &Этап
	|	И Т.НомерОперации < ТекущаяОперация.НомерОперации
	|	И Т.Запланировано - Т.Выполнено - Т.Брак > 0
	|	И Т.Запланировано * (ТекущаяОперация.КОбработке + ТекущаяОперация.Обработано)
	|		/ ТекущаяОперация.Запланировано - (Т.Выполнено + Т.Брак + Т.НаКонтроле + Т.НаДоработке) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерОперации";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Операция",              Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации", ИдентификаторОперации);
	Запрос.УстановитьПараметр("Этап",                  Параметры.Этап);
	Запрос.УстановитьПараметр("Подразделение",         Параметры.Подразделение);
	Запрос.УстановитьПараметр("Участок",               Параметры.Участок);
	Запрос.УстановитьПараметр("Исполнитель",           Параметры.Исполнитель);
	Запрос.УстановитьПараметр("КоличествоКВыполнению", КоличествоКВыполнению);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[1].Выбрать();
	Выборка.Следующий();
	ДанныеТекущейОперации = Новый Структура("Требуется,Запланировано,Обработано,КОбработке");
	ЗаполнитьЗначенияСвойств(ДанныеТекущейОперации, Выборка);
	
	ПредыдущиеОперации.Загрузить(Результаты[2].Выгрузить());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПредыдущиеОперацииРассчитатьКоличествоКВыполнению(Форма)
	
	Если НЕ Форма.ЕстьПредыдущиеОперации Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициент = (Форма.КоличествоГотово + Форма.КоличествоБрак) / Форма.ДанныеТекущейОперации.Запланировано;
	
	Для каждого Строка Из Форма.ПредыдущиеОперации Цикл
		Если НЕ Строка.КоличествоРучнойВвод Тогда
			КоэффициентСтроки = Строка.Обработано/Строка.Запланировано;
			Если Коэффициент > КоэффициентСтроки Тогда
				Строка.Количество = Мин(Строка.Запланировано * (Коэффициент-КоэффициентСтроки), Строка.МожноВыполнить);
			Иначе
				Строка.Количество = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредыдущиеОперацииЕстьКоличествоКВыполнению(Форма)
	
	Для каждого Строка Из Форма.ПредыдущиеОперации Цикл
		Если Строка.Отметка И Строка.Количество > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НачатьВыполнениеПредыдущихОпераций(РезультатВыполнения)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьВыполнениеПредыдущихОперацийНаСервере();
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнениеПредыдущихОперацийЗавершение",
			ЭтотОбъект,
			РезультатВыполнения);
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняются предыдущие операции...';
												|en = 'Previous operations are being executed...'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			ОписаниеОповещения,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьВыполнениеПредыдущихОперацийНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение последовательности предыдущих операций.';
															|en = 'Perform a sequence of previous operations.'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТаблицаОпераций", ПредыдущиеОперации.Выгрузить());
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ПроизводственнаяОперация2_2.ВыполнитьПоследовательностьПредыдущихОперацийВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеПредыдущихОперацийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполнениеПредыдущихОперацийЗавершениеНаСервере(Результат.АдресРезультата) Тогда
	
		Закрыть(ДополнительныеПараметры);
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Ошибка выполнения производственных операций.
								|См. подробности в журнале регистрации.';
								|en = 'An error occurred while performing routing operations.
								|For more information, see the event log.'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнениеПредыдущихОперацийЗавершениеНаСервере(АдресХранилища)
	
	Возврат ПолучитьИзВременногоХранилища(АдресХранилища);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПризнакПересчитатьНормативы(Форма)
	
	Если НЕ Форма.НаОснованииНСИ Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ПересчитатьНормативы Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.КоличествоБрак ИЛИ Форма.КоличествоОтменено Тогда
		Форма.ПересчитатьНормативы = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти