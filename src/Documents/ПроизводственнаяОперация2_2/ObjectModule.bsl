#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПроизводственныхОпераций[НовыйСтатус];
	Статус = ЗначениеНовогоСтатуса;
	
	Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкеСтатуса(ЭтотОбъект);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Заполняет документ по данным НСИ
//
// Параметры:
//	ДанныеЗаполнения - Неопределено, Структура - из:
//		* ЭтапСпецификации - СправочникСсылка.ЭтапыПроизводства
//		* ДанныеСпецификации - см. Справочники.РесурсныеСпецификации.ДанныеСпецификацииКонструктор
//	СохранитьИсполнителей - Булево - определяет необходимость сохранения исполнителей трудозатрат
//	СохранитьСерии - Булево - определяет необходимость сохранения серий в выходных изделиях и материалах
//
Процедура ЗаполнитьПоНормативамОперации(ДанныеЗаполнения = Неопределено, СохранитьИсполнителей = Ложь, СохранитьСерии = Ложь) Экспорт
	
	Если СохранитьИсполнителей И НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ДополнительныеСвойства.Вставить("Трудозатраты", Трудозатраты.Выгрузить());
	КонецЕсли;
	
	Если СохранитьСерии Тогда
		ДополнительныеСвойства.Вставить("ВыходныеИзделияСерии", ВыходныеИзделияСерии.Выгрузить());
		ДополнительныеСвойства.Вставить("ВыходныеИзделия", ВыходныеИзделия.Выгрузить());
		ДополнительныеСвойства.Вставить("МатериалыИРаботы", МатериалыИРаботы.Выгрузить());
	КонецЕсли;
	
	ОчиститьТабличныеЧасти();
	
	ВладелецОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция, "Владелец");
	Если ТипЗнч(ВладелецОперации) = Тип("СправочникСсылка.МаршрутныеКарты") Тогда
		ДанныеОперации  = ДанныеОперацииМаршрутнойКарты();
	Иначе
		ДанныеОперации  = ДанныеОперацииСпецификации(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДанныеОперации = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка расчета нормативов для заполнения операции.';
								|en = 'An error occurred when calculating standards for filling the operation.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОперации, "ВидОперации, ВариантНаладки, МожноПовторить, МожноПропустить, Контроль");
	Если РабочийЦентр.Пустая() Тогда
		ДанныеОперации.КоэффициентВремениРаботы = 1;
	Иначе
		ДанныеОперации.КоэффициентВремениРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "КоэффициентВремениРаботы");
	КонецЕсли;
	
	Наименование = ДанныеОперации.ОперацияПредставление;
	РассчитатьВремяВыполнения(ДанныеОперации);
	
	Настройки = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(
		Подразделение,
		ВладелецОперации);
	
	Если Настройки.ИспользоватьВыходныеИзделия Тогда
		
		Для каждого Строка Из ДанныеОперации.ВыходныеИзделия Цикл
			ЗаполнитьЗначенияСвойств(ВыходныеИзделия.Добавить(), Строка);
		КонецЦикла;
		Для каждого Строка Из ДанныеОперации.ВозвратныеОтходы Цикл
			ЗаполнитьЗначенияСвойств(ВыходныеИзделия.Добавить(), Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Настройки.ИспользоватьМатериалы Тогда
		
		ЗаполнитьМатериалыПоНормативам(ДанныеОперации.Материалы);
		
	КонецЕсли;
	
	Для каждого Строка Из ДанныеОперации.Трудозатраты Цикл
		ЗаполнитьЗначенияСвойств(Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
	ВосстановитьИсполнителейТрудозатрат();
	
	ВосстановитьСерии();
	
	Документы.ПроизводственнаяОперация2_2.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Статус")
			И Статус <> Метаданные.Документы.ПроизводственнаяОперация2_2.Реквизиты.Статус.ЗначениеЗаполнения Тогда
			
			Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкеСтатуса(ЭтотОбъект);
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СпособЗаполнения")
			И ДанныеЗаполнения.СпособЗаполнения = "ЗаполнитьПоОперации" Тогда
			
			Если ДанныеЗаполнения.Свойство("КлючОперации") Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.КлючОперации); // см. УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации
			Иначе
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Этап,Операция,ИдентификаторОперации");
			КонецЕсли;
			
			ЗаполнитьПоНормативамОперации(ДанныеЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		Этап = ДанныеЗаполнения;
		
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	ОперацияКакРаспоряжениеВыработки = УправлениеПроизводством.ИспользуетсяОперацияКакРаспоряжениеВыработки(Дата);
	
	Если НЕ Этап.Пустая() Тогда
		
		Реквизиты = "Организация" + ?(Подразделение.Пустая(), ",Подразделение", "") + ",ОперацияКакРаспоряжениеВыработки";
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Этап, Реквизиты));
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		Исполнитель,
		ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение).ИспользоватьБригадныеНаряды,
		ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(Дата));
	
	НаОснованииНСИ = НЕ Операция.Пустая();
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверитьЗаполнениеРеквизитовШапки(Отказ, МассивНепроверяемыхРеквизитов);
	
	Если Статус = Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена
		ИЛИ Статус = Перечисления.СтатусыПроизводственныхОпераций.Пропущена Тогда
		ИсключитьРеквизитыТабличныхЧастей(ПроверяемыеРеквизиты);
	Иначе
		ПроверитьЗаполнениеНоменклатуры(Отказ, МассивНепроверяемыхРеквизитов);
		ПроверитьЗаполнениеХарактеристик(Отказ, МассивНепроверяемыхРеквизитов);
		ПроверитьЗаполнениеСерий(Отказ, МассивНепроверяемыхРеквизитов);
		ПроверитьЗаполнениеКоличества(Отказ, МассивНепроверяемыхРеквизитов);
		ПроверитьЗаполнениеБригад(Отказ, МассивНепроверяемыхРеквизитов);
		//++ Локализация
		ПроверитьЗаполнениеИсполнителей(Отказ, МассивНепроверяемыхРеквизитов);
		//-- Локализация
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	
	ДанныеДоИзменения =  ДанныеОперацииДоИзменения();
	ДополнительныеСвойства.Вставить("ДанныеДоИзменения", ДанныеДоИзменения);
	
	// Проверка объекта
	Если Не РежимГрупповойОбработки() Тогда
		
		Если Не Этап.Пустая() Тогда
			
			СтатусЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Этап, "Статус");
			
			Если СтатусЭтапа = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Нельзя изменять операцию, принадлежащую завершенному этапу.';
						|en = 'You cannot modify an operation belonging to a completed stage.'"),
					ЭтотОбъект,
					"Этап",,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СменноеЗадание.Пустая() Тогда
		
			СтатусЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СменноеЗадание, "Статус");
			
			Если СтатусЗадания = Перечисления.СтатусыСменныхЗаданий.Закрыто Тогда
			
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Нельзя изменять операцию, принадлежащую закрытому сменному заданию.';
						|en = 'Cannot change the operation that refers to a closed shift task.'"),
					ЭтотОбъект,
					"СменноеЗадание",,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение реквизитов
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводственнаяОперация2_2);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИРаботы);
	
	Если Статус = Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена
		ИЛИ Статус = Перечисления.СтатусыПроизводственныхОпераций.Пропущена Тогда
		
		ОчиститьТабличныеЧасти();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Для каждого Строка Из Трудозатраты Цикл
			Строка.Исполнитель = Исполнитель;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьНомер();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	Если Не РежимГрупповойОбработки()
		И НаОснованииНСИ
		И ИзменилисьДанныеДокумента(
		"Статус,Количество,КоличествоНаКонтроле,КоличествоНаДоработке,КоличествоБрак,КоличествоОтменено,КоличествоФакт,РабочийЦентр,ВремяВыполнения,ВремяВыполненияЕдИзм,ТребуетПовторения") Тогда
		
		КлючОперации = УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации();
		ЗаполнитьЗначенияСвойств(КлючОперации, ЭтотОбъект);
		
		ВсеПоследующиеОперации = ИзменилисьДанныеДокумента("КоличествоБрак", Ложь)
			ИЛИ ИзменилисьДанныеДокумента() И КоличествоБрак > 0;
		
		РегистрыСведений.ОчередьПроизводственныхОпераций.ПересчитатьОчередь(
			КлючОперации,
			ВсеПоследующиеОперации,
			Отказ);
		
		Если НаОснованииПланирования Тогда
			РегистрыСведений.ПооперационноеРасписание2_2.ПересчитатьКоличественныеРесурсыПоКлючу(КлючОперации, НомерПартии, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РежимГрупповойОбработки() Тогда
		ДобавитьЗаданияКОбработкеЭтаповПроизводства();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Номер = "";
	НомерОперацииЭтапа = 0;
	
	Если НЕ ОбъектКопирования.ДополнительныеСвойства.Свойство("Разбиение") Тогда
		
		Операция = Неопределено;
		ИдентификаторОперации = 0;
		
		НаОснованииПланирования = Ложь;
		НаОснованииНСИ = Ложь;
		
		НомерПартии = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

Функция ДанныеОперацииМаршрутнойКарты()
	
	ДанныеПоНоменклатуре = Справочники.МаршрутныеКарты.ДанныеПоНоменклатуре();
	
	Если ЗначениеЗаполнено(Этап) Тогда
		ОсновноеИзделие = Документы.ЭтапПроизводства2_2.ОсновноеИзделиеЦепочкиЭтапов(Этап);
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ОсновноеИзделие);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Распоряжение                         КАК Распоряжение,
	|	Т.КоэффициентМаршрутнойКарты           КАК КоэффициентМаршрутнойКарты,
	|	Т.Распоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Т
	|ГДЕ
	|	Т.Ссылка = &Этап
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Выборка, "Распоряжение,НаправлениеДеятельности");
	
	Результат = Справочники.МаршрутныеКарты.ДанныеОперацииМаршрутнойКарты(
		Операция,
		Количество,
		Выборка.КоэффициентМаршрутнойКарты,
		ДанныеПоНоменклатуре);
		
	ОписаниеТаблиц = ОписаниеТаблицДляПересчетаНормативов();
	
	Для каждого КлючИЗначение Из ОписаниеТаблиц Цикл
		
		ОписаниеТаблицы = КлючИЗначение.Значение;
		
		КоэффициентТекущейОперации = (ОписаниеТаблицы.КоличествоОпераций / Количество);
		
		Для каждого Строка Из Результат[ОписаниеТаблицы.ИмяТЧ] Цикл
			
			Если ОписаниеТаблицы.ЕстьУпаковки Тогда
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковок * КоэффициентТекущейОперации;
			КонецЕсли;
			Строка.Количество = Строка.Количество * КоэффициентТекущейОперации;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьВремяВыполнения(ДанныеОперации)
	
	СтруктураРасчета = ОперативныйУчетПроизводстваКлиентСервер.СтруктураРасчетаОбщегоВремениВыполнения();
	ЗаполнитьЗначенияСвойств(СтруктураРасчета, ДанныеОперации);
	
	КоэффициентПересчета = Справочники.ТехнологическиеОперации.РассчитатьКоэффициентПересчетаНормативов(
		Операция,
		?(Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена,
			КоличествоФакт + КоличествоБрак + КоличествоНаДоработке + КоличествоНаКонтроле,
			Количество - КоличествоОтменено));
	
	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
		СтруктураРасчета,
		КоэффициентПересчета);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРасчета, "ВремяВыполнения, ВремяВыполненияЕдИзм");
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыПоНормативам(Материалы) 
	
	Для каждого Строка Из Материалы Цикл
		ЗаполнитьЗначенияСвойств(МатериалыИРаботы.Добавить(), Строка);
	КонецЦикла;
	
	МатериалыЭтапа = Документы.ЭтапПроизводства2_2.ОстаткиОбеспечиваемыхМатериалов(Этап, "Характеристика");
	МатериалыЭтапа.Индексы.Добавить("Номенклатура, Характеристика");
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	КэшированныеЗначения = Неопределено;
	
	Для Индекс = 0 По МатериалыИРаботы.Количество()-1 Цикл
		
		Строка = МатериалыИРаботы[Индекс];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = МатериалыЭтапа.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(Строка);
			
		Иначе
			
			СтрокаМатериалЭтапа = НайденныеСтроки[0];
			
			Если СтрокаМатериалЭтапа.Количество = Строка.Количество Тогда
				
				МатериалыЭтапа.Удалить(СтрокаМатериалЭтапа);
				
			ИначеЕсли СтрокаМатериалЭтапа.Количество > Строка.Количество Тогда
				
				СтрокаМатериалЭтапа.Количество = СтрокаМатериалЭтапа.Количество - Строка.Количество;
				
			Иначе
				
				КоличествоНедостача = Строка.Количество - СтрокаМатериалЭтапа.Количество;
				
				Строка.Количество = СтрокаМатериалЭтапа.Количество;
				ПересчитатьКоличествоУпаковок(Строка, КэшированныеЗначения);
				
				НоваяСтрока = МатериалыИРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество = КоличествоНедостача;
				ПересчитатьКоличествоУпаковок(НоваяСтрока, КэшированныеЗначения);
				ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(НоваяСтрока);
				
				МатериалыЭтапа.Удалить(СтрокаМатериалЭтапа);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(Строка)
	
	Строка.НоменклатураМаршрутнойКарты = Строка.Номенклатура;
	Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Строка.ХарактеристикаМаршрутнойКарты = Строка.Характеристика;
	Строка.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Строка.УпаковкаМаршрутнойКарты = Строка.Упаковка;
	Строка.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковок(СтрокаТабличнойЧасти, КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОчиститьТабличныеЧасти()
	
	Для каждого ИмяТЧ Из ТабличныеЧасти() Цикл
		ЭтотОбъект[ИмяТЧ].Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция ТабличныеЧасти()
	
	Результат = Новый Массив;
	
	Результат.Добавить("МатериалыИРаботы");
	Результат.Добавить("Трудозатраты");
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ВыходныеИзделияСерии");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОперацииСпецификации(ДанныеЗаполнения = Неопределено)
	
	Результат        = Новый Структура;
	ОписаниеТаблиц   = ОписаниеТаблицДляПересчетаНормативов();
	ЭтапСпецификации = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И ДанныеЗаполнения.Свойство("ДанныеСпецификации") Тогда
		
		ДанныеСпецификации = ДанныеЗаполнения.ДанныеСпецификации;
		
		ЭтапСпецификации   = ДанныеЗаполнения.ЭтапСпецификации;
		
	Иначе
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Этап,
			"Этап,Распоряжение,НазначениеПродукция,ПартияПроизводства");
		
		ДанныеПартииПроизводства = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(
			ЗначенияРеквизитов.Распоряжение,
			ЗначенияРеквизитов.НазначениеПродукция,
			ЗначенияРеквизитов.ПартияПроизводства);
		
		ДанныеСпецификации = Документы.ЭтапПроизводства2_2.ПолучитьНормативыПоСпецификации(
			ДанныеПартииПроизводства,
			Ложь,
			"ВыходныеИзделия,ВозвратныеОтходы,МатериалыИУслуги,Трудозатраты,Операции");
		
		Если ДанныеСпецификации = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЭтапСпецификации = ЗначенияРеквизитов.Этап;
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ОписаниеТаблиц Цикл
		Результат.Вставить(КлючИЗначение.Значение.ИмяТЧ, ДанныеСпецификации[КлючИЗначение.Ключ].СкопироватьКолонки());
	КонецЦикла;
	
	НайденныеСтроки = ДанныеСпецификации.Операции.НайтиСтроки(
		Новый Структура("Операция,ИдентификаторОперации", Операция,ИдентификаторОперации));
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		
		СтрокаОперация = НайденныеСтроки[0];
		
		Для каждого Колонка Из ДанныеСпецификации.Операции.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаОперация[Колонка.Имя]);
		КонецЦикла;
		
		Для каждого КлючИЗначение Из ОписаниеТаблиц Цикл
			
			ОписаниеТаблицы = КлючИЗначение.Значение;
			Таблица         = Результат[ОписаниеТаблицы.ИмяТЧ]; // ТаблицаЗначений
			
			Для каждого СтрокаНСИ Из ДанныеСпецификации[КлючИЗначение.Ключ] Цикл
				
				Если СтрокаНСИ.Этап <> ЭтапСпецификации Тогда
					Продолжить;
				КонецЕсли;
				
				Если (СтрокаОперация.Операция = СтрокаНСИ.Операция
							И (ОписаниеТаблицы.Изделие
								ИЛИ СтрокаОперация.ОперацияРодитель = СтрокаНСИ.ОперацияРодитель))
						ИЛИ (ОписаниеТаблицы.Изделие
							И СтрокаОперация.ИсходныйНомерСледующейОперации = 0
							И СтрокаОперация.ОперацияРодитель = СтрокаНСИ.Операция)
						ИЛИ (НЕ ОписаниеТаблицы.Изделие
							И СтрокаОперация.ИсходныйНомерОперации = 1
							И СтрокаОперация.ОперацияРодитель = СтрокаНСИ.Операция) Тогда
								
					НоваяСтрока = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНСИ);
					
					КоэффициентТекущейОперации = (ОписаниеТаблицы.КоличествоОпераций / СтрокаОперация.КоличествоНаПартию);
					Если ОписаниеТаблицы.ЕстьУпаковки Тогда
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок * КоэффициентТекущейОперации;
					КонецЕсли;
					НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентТекущейОперации;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Колонка Из ДанныеСпецификации.Операции.Колонки Цикл
			Результат.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(0));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеРеквизитовШапки(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если НЕ (Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполняется
		ИЛИ Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НачалоВыполнения");
		
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеВыполнения");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРабочегоЦентра) Тогда
		
		ИспользуютсяВариантыНаладки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВидРабочегоЦентра, "ИспользуютсяВариантыНаладки");
			
	Иначе
			
		ИспользуютсяВариантыНаладки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ИспользуютсяВариантыНаладки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВариантНаладки");
		
	КонецЕсли;
	
	Если НЕ НаОснованииНСИ Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Операция");
		
	КонецЕсли;
	
	Настройки = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(Подразделение, Неопределено);
	Если НЕ Настройки.ИспользоватьСменныеЗадания Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СменноеЗадание");
		
	КонецЕсли;
	
	Если НЕ Настройки.ИспользоватьУчастки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Участок");
		
	КонецЕсли;
	
	Если НЕ МожноПропустить
		И Статус = Перечисления.СтатусыПроизводственныхОпераций.Пропущена Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Операция не может быть пропущена';
				|en = 'Operation cannot be skipped'"),
			ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект),
			"Статус",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатуры(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
		Возврат; // Стандартная проверка реквизитов
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИРаботы.Номенклатура");
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	ПутьКДанным = "Объект";
	
	ШаблонОшибка = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %НомерСтроки% списка ""Материалы и работы""';
						|en = 'Column ""Items"" in line %НомерСтроки% of the ""Materials and works"" list is not filled in'");
	
	Для Каждого Строка Из МатериалыИРаботы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура)
			И НЕ ЗначениеЗаполнено(Строка.НоменклатураМаршрутнойКарты) Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибка, "%НомерСтроки%", Строка(Строка.НомерСтроки));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИРаботы", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеХарактеристик(Отказ, МассивНепроверяемыхРеквизитов)
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИРаботы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСерий(Отказ, МассивНепроверяемыхРеквизитов)
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводственнаяОперация2_2);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыУказанияСерий.МатериалыИРаботы);
	МассивПараметров.Добавить(ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
		МассивПараметров,
		Отказ,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличества(Отказ, МассивНепроверяемыхРеквизитов)
	
	УправлениеПроизводством.ПроверитьЗаполнениеКоличестваВТЧ(
		ЭтотОбъект, "МатериалыИРаботы", МассивНепроверяемыхРеквизитов, Отказ);
	
	УправлениеПроизводством.ПроверитьЗаполнениеКоличестваВТЧ(
		ЭтотОбъект, "ВыходныеИзделия", МассивНепроверяемыхРеквизитов, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеБригад(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если Статус <> Перечисления.СтатусыПроизводственныхОпераций.Выполнена
		ИЛИ ЗначениеЗаполнено(Исполнитель) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Исполнитель");
		
	КонецЕсли;
	
КонецПроцедуры

//++ Локализация
Процедура ПроверитьЗаполнениеИсполнителей(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если Статус <> Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	ПутьКДанным = "Объект";
	
	Если ПроизводствоСервер.ИспользуетсяУчетТрудозатратВРазрезеСотрудников(ОкончаниеВыполнения) Тогда
		
		Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			ТекстСообщения = НСтр("ru = 'В поле ""Исполнитель"" указано физическое лицо. Необходимо указать сотрудника.';
									|en = 'In the ""Assignee"" field, a person is specified. Specify an employee.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "Исполнитель", ПутьКДанным, Отказ);
			
		КонецЕсли;
		
		ПроверяемыеСотрудники = Новый Массив;
		
		Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ПроверяемыеСотрудники.Добавить(Исполнитель);
			УволенныеСотрудники = ПроизводствоСервер.УволенныеСотрудники(ПроверяемыеСотрудники);
			
			Если УволенныеСотрудники.Количество() > 0
				И ОкончаниеВыполнения >= УволенныеСотрудники[0].ДатаУвольнения Тогда
				
				ТекстСообщения = НСтр("ru = 'В поле ""Исполнитель"" указан уволенный сотрудник.';
										|en = 'In the ""Assignee"" field, a dismissed employee is specified.'");
			
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "Исполнитель", ПутьКДанным, Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если МассивНепроверяемыхРеквизитов.Найти("Трудозатраты.Исполнитель") = Неопределено Тогда
			
			ШаблонОшибкаФизЛицо = НСтр("ru = 'В поле ""Исполнитель"" в строке %1 списка ""Трудозатраты"" указано физическое лицо. Необходимо указать сотрудника.';
										|en = 'In the ""Assignee"" field, in line %1 of the ""Labor costs"" list, a person is specified. Specify an employee.'");
			
			Для Каждого Строка Из Трудозатраты Цикл
				Если ЗначениеЗаполнено(Строка.Исполнитель)
					И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					
					ТекстСообщения = СтрШаблон(ШаблонОшибкаФизЛицо, Строка(Строка.НомерСтроки));
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "Исполнитель");
				
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
					
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			ПроверяемыеСотрудники.Добавить(Трудозатраты.ВыгрузитьКолонку("Исполнитель"));
			УволенныеСотрудники = ПроизводствоСервер.УволенныеСотрудники(ПроверяемыеСотрудники);
			
			ШаблонОшибкаУволенный = НСтр("ru = 'В поле ""Исполнитель"" в строке %1 списка ""Трудозатраты"" указан уволенный сотрудник.';
										|en = 'In the ""Assignee"" field, in line %1 of the ""Labor costs"" field, a dismissed employee is specified.'");
			
			Если УволенныеСотрудники.Количество() > 0 Тогда
				Для Каждого Строка Из Трудозатраты Цикл
					
					УволенныйСотрудник = УволенныеСотрудники.Найти(Строка.Исполнитель, "Сотрудник");
					Если УволенныйСотрудник <> Неопределено
						И ОкончаниеВыполнения >= УволенныйСотрудник.ДатаУвольнения Тогда
							
							ТекстСообщения = СтрШаблон(ШаблонОшибкаУволенный, Строка(Строка.НомерСтроки));
							
							Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "Исполнитель");
							
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
							
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ТекстСообщения = НСтр("ru = 'В поле ""Исполнитель"" указан сотрудник. Необходимо указать физическое лицо.';
									|en = 'In the ""Assignee"" field, an employee is specified. Specify a person.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "Исполнитель", ПутьКДанным, Отказ);
			
		КонецЕсли;
		
		Если МассивНепроверяемыхРеквизитов.Найти("Трудозатраты.Исполнитель") = Неопределено Тогда
			
			ШаблонОшибкаСотрудник = НСтр("ru = 'В поле ""Исполнитель"" в строке %1 списка ""Трудозатраты"" указан сотрудник. Необходимо указать физическое лицо.';
										|en = 'In the ""Assignee"" field, in line %1 of the ""Labor costs"" list, an employee is specified. Specify a person.'");
			
			Для Каждого Строка Из Трудозатраты Цикл
				Если ЗначениеЗаполнено(Строка.Исполнитель)
					И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
					
					ТекстСообщения = СтрШаблон(ШаблонОшибкаСотрудник, Строка(Строка.НомерСтроки));
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "Исполнитель");
				
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//-- Локализация

Процедура ИсключитьРеквизитыТабличныхЧастей(ПроверяемыеРеквизиты)
	
	ИменаТЧ = ТабличныеЧасти();
	
	Для Индекс = -ПроверяемыеРеквизиты.ВГраница() По 0 Цикл
		ЧастиПути = СтрРазделить(ПроверяемыеРеквизиты[-Индекс], ".");
		Если ИменаТЧ.Найти(ЧастиПути[0]) <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(-Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСвязанныхДанных

Функция ДанныеОперацииДоИзменения()
	
	СоставРеквизитов = 
		"Статус,
		|Этап,
		|Проведен,
		|ПометкаУдаления,
		|РабочийЦентр,
		|ВремяВыполнения,
		|ВремяВыполненияЕдИзм,
		|Количество,
		|КоличествоНаКонтроле,
		|КоличествоНаДоработке,
		|КоличествоБрак,
		|КоличествоОтменено,
		|КоличествоФакт,
		|ТребуетПовторения,
		|Протокол";
	
	Если НЕ ЭтоНовый() Тогда
		ДанныеДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СоставРеквизитов);
	Иначе
		ДанныеДоИзменения = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(ДанныеДоИзменения, ЭтотОбъект);
	КонецЕсли;
	
	Возврат ДанныеДоИзменения;
	
КонецФункции

Процедура ДобавитьЗаданияКОбработкеЭтаповПроизводства()
	
	ИзменилсяЭтап = ИзменилисьДанныеДокумента("Этап", Ложь);
	БылПроведенИЗавершен = ДополнительныеСвойства.ДанныеДоИзменения.Проведен
		И ДополнительныеСвойства.ДанныеДоИзменения.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена;
	
	Если ИзменилсяЭтап
		И НЕ ДополнительныеСвойства.ДанныеДоИзменения.Этап.Пустая() Тогда
		
		Действия = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
		Действия.ОбновитьСостояние = Истина;
		Если БылПроведенИЗавершен Тогда
			Действия.ЗаполнитьПоОперациям = Истина;
		КонецЕсли;
		
		РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(
			ДополнительныеСвойства.ДанныеДоИзменения.Этап,
			Действия);
		
	КонецЕсли;
	
	Если НЕ Этап.Пустая() Тогда
		
		Действия = РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.СтруктураДействий();
		Действия.ОбновитьСостояние = ИзменилисьДанныеДокумента("Этап,Статус,Количество,КоличествоФакт,КоличествоБрак");
		Если (ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект).РежимЗаписи = РежимЗаписиДокумента.Проведение
				И Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена)
			ИЛИ (БылПроведенИЗавершен И НЕ ИзменилсяЭтап) Тогда
			
			Действия.ЗаполнитьПоОперациям = Истина;
			
		КонецЕсли;
		
		РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДобавитьЗадание(Этап, Действия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменилисьДанныеДокумента(СписокРеквизитов = "", ПроверитьСостояние = Истина)
	
	ДанныеДоИзменения = ДополнительныеСвойства.ДанныеДоИзменения;
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЭтотОбъект);
	
	Если ПроверитьСостояние Тогда
		Если (ДанныеДоИзменения.Проведен
				И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
			ИЛИ (НЕ ДанныеДоИзменения.Проведен
				И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение)
			ИЛИ ЭтоНовый() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокРеквизитов) Тогда
		МассивРеквизитов = СтрРазделить(СписокРеквизитов, ",");
		Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
			Если ЭтотОбъект[ИмяРеквизита] <> ДанныеДоИзменения[ИмяРеквизита] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьНомер()
	
	Если НЕ ЗначениеЗаполнено(Этап)
		ИЛИ (ЗначениеЗаполнено(Номер) И ДополнительныеСвойства.ДанныеДоИзменения.Этап = Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПроизводственнаяОперация2_2.НомерОперацииЭтапа) КАК НомерОперацииЭтапа
	|ПОМЕСТИТЬ ВТНомерОперацииЭтапа
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация2_2
	|ГДЕ
	|	ПроизводственнаяОперация2_2.Этап = &Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Номер КАК НомерЭтапа,
	|	ЕСТЬNULL(ВТНомерОперацииЭтапа.НомерОперацииЭтапа, 0) КАК НомерОперацииЭтапа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНомерОперацииЭтапа КАК ВТНомерОперацииЭтапа
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка = &Этап");
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	НомерОперацииЭтапа = Выборка.НомерОперацииЭтапа + 1;
	Номер = "" + Выборка.НомерЭтапа + "." + Формат(НомерОперацииЭтапа, "ЧГ=0");
	
КонецПроцедуры

Процедура УстановитьРежимГрупповойОбработки() Экспорт
	
	ДополнительныеСвойства.Вставить("КлючРежимГрупповойОбработки");
	
КонецПроцедуры

Функция РежимГрупповойОбработки()

	Возврат ДополнительныеСвойства.Свойство("КлючРежимГрупповойОбработки");
	
КонецФункции

Процедура УстановитьКлючВСтрокахТабличныхЧастей(Отказ)
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
		ЭтотОбъект, "Трудозатраты", "МаксимальныйКодСтрокиТрудозатраты");
	
КонецПроцедуры

Процедура ВосстановитьИсполнителейТрудозатрат()
	
	ТрудозатратыДоПересчета = Неопределено; // ТаблицаЗначений
	
	Если НЕ ДополнительныеСвойства.Свойство("Трудозатраты", ТрудозатратыДоПересчета) Тогда
		Возврат;
	КонецЕсли;
	
	ТрудозатратыРезультат = Трудозатраты.ВыгрузитьКолонки();
	
	ТрудозатратыДоПересчета.Свернуть("ВидРабот,Исполнитель,НазначениеРабот", "Количество");
	ТрудозатратыДоПересчета.Индексы.Добавить("ВидРабот");
	
	СтруктураПоиска = Новый Структура("ВидРабот");
	
	Пока Трудозатраты.Количество() > 0 Цикл
		
		ДанныеСтроки = Трудозатраты[0];
		Если ДанныеСтроки.Количество = 0 Тогда
			Трудозатраты.Удалить(0);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТрудозатратыРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		СтруктураПоиска.ВидРабот = ДанныеСтроки.ВидРабот;
		
		Для каждого НайденнаяСтрока Из ТрудозатратыДоПересчета.НайтиСтроки(СтруктураПоиска) Цикл
			Если НайденнаяСтрока.Количество > 0 
				И (ЗначениеЗаполнено(НайденнаяСтрока.Исполнитель)
					ИЛИ ЗначениеЗаполнено(НайденнаяСтрока.НазначениеРабот)) Тогда
				
				Зачесть = Мин(ДанныеСтроки.Количество, НайденнаяСтрока.Количество);
				
				НоваяСтрока.Количество      = Зачесть;
				НоваяСтрока.Исполнитель     = НайденнаяСтрока.Исполнитель;
				НоваяСтрока.НазначениеРабот = НайденнаяСтрока.НазначениеРабот;
				
				НайденнаяСтрока.Количество  = НайденнаяСтрока.Количество - Зачесть;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСтроки.Количество = ДанныеСтроки.Количество - НоваяСтрока.Количество;
		
	КонецЦикла;
	
	Трудозатраты.Загрузить(ТрудозатратыРезультат);
	
КонецПроцедуры

Процедура ВосстановитьСерии()
	
	ТаблицаДоПересчета = Неопределено; // ТаблицаЗначений
	
	Для каждого ИмяТЧ Из СтрРазделить("ВыходныеИзделия,МатериалыИРаботы", ",") Цикл
		
		Если НЕ ДополнительныеСвойства.Свойство(ИмяТЧ, ТаблицаДоПересчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДоПересчета.Свернуть("Номенклатура,Характеристика,Серия,Упаковка", "Количество,КоличествоУпаковок");
		
		ВосстановитьСерииВТаблице(ЭтотОбъект[ИмяТЧ], ТаблицаДоПересчета);
		
	КонецЦикла;
	
	Если ДополнительныеСвойства.Свойство("ВыходныеИзделияСерии", ТаблицаДоПересчета)
		И ТаблицаДоПересчета.Количество() > 0 Тогда
		
		ВыходныеИзделияСерии.Загрузить(ВыходныеИзделия.Выгрузить());
		ВыходныеИзделияСерии.Свернуть("Номенклатура,Характеристика,Количество");
		
		ВосстановитьСерииВТаблице(ВыходныеИзделияСерии, ТаблицаДоПересчета, Ложь, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСерииВТаблице(ТаблицаТекущая, ТаблицаДоПересчета, ЕстьУпаковки = Истина, ОставитьСтрокиБезСерии = Истина)
	
	РеквизитыУпаковки = "Номенклатура,Упаковка";
	РеквизитыПоиска   = "Номенклатура,Характеристика";
	СтруктураПоиска   = Новый Структура(РеквизитыПоиска);
	
	ТаблицаДоПересчета.Индексы.Добавить(РеквизитыПоиска);
	ТаблицаРезультат = ТаблицаТекущая.ВыгрузитьКолонки(); // ТаблицаЗначений
	
	Если ЕстьУпаковки Тогда
		НоменклатураУпаковка = ТаблицаРезультат.СкопироватьКолонки(РеквизитыУпаковки);
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(НоменклатураУпаковка, ТаблицаТекущая);
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(НоменклатураУпаковка, ТаблицаДоПересчета);
		КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(НоменклатураУпаковка);
	КонецЕсли;
	
	Пока ТаблицаТекущая.Количество() > 0 Цикл
		
		ДанныеСтроки = ТаблицаТекущая[0];
		Если ДанныеСтроки.Количество = 0 Тогда
			ТаблицаТекущая.Удалить(0);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки, РеквизитыПоиска);
		
		Для каждого НайденнаяСтрока Из ТаблицаДоПересчета.НайтиСтроки(СтруктураПоиска) Цикл
			Если НайденнаяСтрока.Количество > 0
				И ЗначениеЗаполнено(НайденнаяСтрока.Серия) Тогда
				
				Зачесть = Мин(ДанныеСтроки.Количество, НайденнаяСтрока.Количество);
				
				НоваяСтрока.Количество     = Зачесть;
				НоваяСтрока.Серия          = НайденнаяСтрока.Серия;
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - Зачесть;
				
				Если ЕстьУпаковки Тогда
					Коэффициент = КоэффициентыУпаковок[НайденнаяСтрока.Номенклатура][НайденнаяСтрока.Упаковка];
					НоваяСтрока.КоличествоУпаковок = Зачесть / ?(ЗначениеЗаполнено(Коэффициент), Коэффициент, 1);
					НоваяСтрока.Упаковка           = НайденнаяСтрока.Упаковка;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСтроки.Количество = ДанныеСтроки.Количество - НоваяСтрока.Количество;
		
		Если ЕстьУпаковки Тогда
			Коэффициент = КоэффициентыУпаковок[ДанныеСтроки.Номенклатура][ДанныеСтроки.Упаковка];
			ДанныеСтроки.КоличествоУпаковок = ДанныеСтроки.КоличествоУпаковок - НоваяСтрока.Количество / ?(ЗначениеЗаполнено(Коэффициент), Коэффициент, 1);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТекущая.Очистить();
	Для Индекс = 0 По ТаблицаРезультат.Количество() - 1 Цикл
		ДанныеСтроки = ТаблицаРезультат[Индекс];
		Если ОставитьСтрокиБезСерии
			ИЛИ ЗначениеЗаполнено(ДанныеСтроки.Серия) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаТекущая.Добавить(), ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеТаблицДляПересчетаНормативов()
	
	КоличествоОперацийИзделия = ?(Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена,
								КоличествоФакт + КоличествоНаДоработке + КоличествоНаКонтроле,
								Количество - КоличествоБрак - КоличествоОтменено);
	КоличествоОпераций        = ?(Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена,
								КоличествоФакт + КоличествоБрак + КоличествоНаДоработке + КоличествоНаКонтроле,
								Количество - КоличествоОтменено);
								
	СписокРеквизитов      = "ИмяТЧ,Изделие,ЕстьУпаковки,КоличествоОпераций";
	
	ОписаниеТаблиц = Новый Структура;
	ОписаниеТаблиц.Вставить("ВыходныеИзделия",  Новый Структура(СписокРеквизитов, "ВыходныеИзделия",  Истина, Истина, КоличествоОперацийИзделия));
	ОписаниеТаблиц.Вставить("ВозвратныеОтходы", Новый Структура(СписокРеквизитов, "ВозвратныеОтходы", Истина, Истина, КоличествоОпераций));
	ОписаниеТаблиц.Вставить("МатериалыИУслуги", Новый Структура(СписокРеквизитов, "Материалы",        Ложь,   Истина, КоличествоОпераций));
	ОписаниеТаблиц.Вставить("Трудозатраты",     Новый Структура(СписокРеквизитов, "Трудозатраты",     Ложь,   Ложь,   КоличествоОпераций));
	
	Возврат ОписаниеТаблиц;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
