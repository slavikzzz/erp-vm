
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьВидимостьКомандФормы();
	
	Если Параметры.Ключ = Документы.ПерерасчетНДФЛ.ПустаяСсылка() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Год, Организация, Ответственный", 
		"Объект.МесяцПерерасчета",
		"Объект.НалоговыйПериод",
		"Объект.Организация",
		"Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПримененныеВычетыНаДетейИИмущественные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой");
	Оповестить("Запись_ПерерасчетНДФЛ", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцПерерасчетаСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцПерерасчета", "МесяцПерерасчетаСтрокой", Модифицированность);
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.МесяцПерерасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПерерасчетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцПерерасчета", "МесяцПерерасчетаСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.МесяцПерерасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПерерасчетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцПерерасчета", "МесяцПерерасчетаСтрокой", Направление, Модифицированность);
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.МесяцПерерасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПерерасчетаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПерерасчетаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
	
	УчетНДФЛКлиент.НДФЛПриАктивизацииСтроки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	НДФЛВыделенныеСтроки = Новый Массив;
	Для Каждого ИдентификаторСтрок ИЗ Элементы.Сотрудники.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрок);
		Если СтрокаТаблицы <> Неопределено Тогда
			НДФЛВыделенныеСтроки.Добавить(СтрокаТаблицы.ИдентификаторСтрокиНДФЛ);
		КонецЕсли;
		
	КонецЦикла;
	УчетНДФЛКлиент.НДФЛПередУдалением(ЭтаФорма, НДФЛВыделенныеСтроки, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	УчетНДФЛКлиент.УдалитьПримененныеВычетыНаДетейИИмущественные(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УчетНДФЛКлиент.НДФЛПриНачалеРедактирования(ЭтаФорма, Элементы.Сотрудники.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.НДФЛПриОкончанииРедактирования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыЛичныеПриИзменении(Элемент)
	
	УчетНДФЛКлиент.НДФЛПриОкончанииРедактирования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПримененныеВычетыИмущественные

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПриИзменении()
	
	ВычетыНаДетейИИмущественныеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УчетНДФЛКлиент.ВычетыПриНачалеРедактирования(Элемент.ТекущиеДанные, НоваяСтрока, Элементы.Сотрудники.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеМесяцПериодаПредоставленияВычетаСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы[ОписаниеПанелиВычетыНаКлиенте().ИмяГруппыФормыПанелиВычеты + "ВычетыНаДетейИИмущественные"].ТекущиеДанные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеМесяцПериодаПредоставленияВычетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы[ОписаниеПанелиВычетыНаКлиенте().ИмяГруппыФормыПанелиВычеты + "ВычетыНаДетейИИмущественные"].ТекущиеДанные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеМесяцПериодаПредоставленияВычетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы[ОписаниеПанелиВычетыНаКлиенте().ИмяГруппыФормыПанелиВычеты + "ВычетыНаДетейИИмущественные"].ТекущиеДанные, "МесяцПериодаПредоставленияВычета", "МесяцПериодаПредоставленияВычетаСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеМесяцПериодаПредоставленияВычетаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВычетыНаДетейИИмущественныеМесяцПериодаПредоставленияВычетаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Заполнить(Команда)
	
	Объект.Сотрудники.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	Объект.КорректировкиВыплаты.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.МесяцПерерасчета) Тогда
		
		ЗаполнитьНаСервере();
		
		Если Объект.Сотрудники.Количество() > 0 Тогда
			Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	КадровыйУчетКлиент.ПодобратьФизическихЛицОрганизации(Элементы.Сотрудники, Объект.Организация, АдресСпискаПодобранныхСотрудников());
КонецПроцедуры

&НаКлиенте
Процедура РегистрНалоговогоУчетаПоНДФЛ(Команда)
	
	НДФЛВыделенныеСтроки = Элементы.Сотрудники.ВыделенныеСтроки;
	Если НДФЛВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрНалоговогоУчетаПоНДФЛ = НДФЛПодробнееНаСервере(НДФЛВыделенныеСтроки);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.РегистрНалоговогоУчетаПоНДФЛ", "РегистрНалоговогоУчетаПоНДФЛ", 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка), ЭтаФорма, Новый Структура("ПечатаемыйДокумент", РегистрНалоговогоУчетаПоНДФЛ));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцПерерасчета", "МесяцПерерасчетаСтрокой");
	
	УчетНДФЛФормы.ДополнитьФормуПанельюВычетов(ЭтаФорма);
	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
	УстановитьВидимостьКолонокПрогрессивногоНалога(Объект.МесяцПерерасчета);
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоНДФЛ(Сотрудники = Неопределено)
	
	ДанныеОНалогах = УчетНДФЛ.ДанныеОПерерасчетеНДФЛ(
		Объект.Организация,
		Объект.МесяцПерерасчета,
		Дата(Объект.НалоговыйПериод, 1, 1),
		Мин(Дата(Объект.НалоговыйПериод, 12, 31), КонецМесяца(Объект.МесяцПерерасчета)),
		Сотрудники,
		Объект.Ссылка);
	
	ДатаОперации = КонецМесяца(Объект.МесяцПерерасчета);
	НалогКУдержанию = УчетНДФЛ.НалогКУдержаниюПоРезультатамРасчета(Объект.Ссылка, Объект.Организация, ДатаОперации, ДанныеОНалогах);
	
	НалогКУдержанию35 = УчетНДФЛ.НалогКУдержаниюПоРезультатамРасчета(Объект.Ссылка, Объект.Организация, ДатаОперации, 
		ДанныеОНалогах, "НалогПоСтавке35", "ЗачтеноАвансовыхПлатежейПоСтавке35");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НалогКУдержанию35, НалогКУдержанию);
	
	ФизическиеЛицаРаботавшиеВОрганизации = КадровыйУчет.ФизическиеЛицаРаботавшиеВОрганизации(Истина, Объект.Организация, 
		Дата(Объект.НалоговыйПериод, 1, 1), Дата(Объект.НалоговыйПериод, 12, 31));
	НалогКУдержаниюФизическиеЛица = ФизическиеЛицаРаботавшиеВОрганизации.ВыгрузитьКолонку("ФизическоеЛицо");
	ВозвратНДФЛПрошлыхЛет = УчетНДФЛ.ВозвратНДФЛПрошлыхЛет(Объект.Организация, ДатаОперации, НалогКУдержаниюФизическиеЛица);
	ТекущиеОстаткиВзаиморасчетов = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(Объект.Организация, Объект.МесяцПерерасчета, 
		НалогКУдержаниюФизическиеЛица, Объект.Ссылка);
	
	КорректировкиВыплаты = РасчетЗарплаты.РекомендуемыеКорректировкиВыплаты(
		НалогКУдержанию,
		ВозвратНДФЛПрошлыхЛет,
		ТекущиеОстаткиВзаиморасчетов,
		Год(Объект.МесяцПерерасчета));
	
	КорректировкиВыплаты.Колонки.Подразделение.Имя = "ОбособленноеПодразделение";
	КорректировкиВыплаты.Свернуть("ФизическоеЛицо, ОбособленноеПодразделение", "КорректировкаВыплаты");
	
	СтрокаГруппировки = "ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, 
	|КатегорияДохода, КодВычетаЛичный, НалоговаяБаза, ПримененныйВычетЛичныйНалоговаяБаза";
	
	СтрокаРесурсов = УчетНДФЛ.РассчитываемыеРесурсыПоОсновнойСтавке() 
		+ ", НалогПоСтавке09, НалогПоСтавке35, ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке35, " + УчетНДФЛ.РесурсыИсчисленногоНалогаСтрокой("ЗачтеноАвансовыхПлатежей", Истина);
	
	ДанныеОНалогахПустая = ДанныеОНалогах.СкопироватьКолонки();
	
	ДанныеОНалогах.Свернуть(СтрокаГруппировки, СтрокаРесурсов);
	
	Для Каждого Колонка Из ДанныеОНалогахПустая.Колонки Цикл 
		Если ДанныеОНалогах.Колонки.Найти(Колонка.Имя) = Неопределено Тогда 
			ДанныеОНалогах.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПоНДФЛ = Новый Структура;
	ДанныеПоНДФЛ.Вставить("РезультатРасчетаНДФЛ", ДанныеОНалогах);
	ДанныеПоНДФЛ.Вставить("КорректировкиВыплаты", КорректировкиВыплаты);
	
	Возврат ДанныеПоНДФЛ;
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	
	ДанныеОНалогах = ДанныеПоНДФЛ(Сотрудники);	
	ПеренестиПолученныеДанныеПоНДФЛВДокумент(ДанныеОНалогах);
	
	РезультатРасчетаНДФЛ = ДанныеОНалогах.РезультатРасчетаНДФЛ;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		СтрокиНДФЛП = РезультатРасчетаНДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", Сотрудник));
		
		Если СтрокиНДФЛП.Количество() = 0 Тогда
			
			ПустаяСтрока = Объект.Сотрудники.Добавить();
			ПустаяСтрока.Сотрудник = Сотрудник;
			
			УчетНДФЛКлиентСервер.НазначитьИдентификаторСтрокеНДФЛ(
				ПустаяСтрока, ЭтаФорма[ОписаниеПанелиВычетыНаСервере().ИмяГруппыФормыПанелиВычеты + "МаксимальныйИдентификаторСтрокиНДФЛ"], Истина);
				
		КонецЕсли;
		
	КонецЦикла;	
			
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНаСервере()
	ПеренестиПолученныеДанныеПоНДФЛВДокумент(ДанныеПоНДФЛ())
КонецПроцедуры

&НаСервере
Процедура ПеренестиПолученныеДанныеПоНДФЛВДокумент(НДФЛ)
	
	РезультатРасчетаНДФЛ = УчетНДФЛ.ДанныеОРезультатахРасчетаНДФЛДляДокумента(НДФЛ.РезультатРасчетаНДФЛ);
	
	РезультатРасчетаНДФЛ.НДФЛ.Колонки.ФизическоеЛицо.Имя = "Сотрудник";
	РезультатРасчетаНДФЛ.НДФЛ.Колонки.Подразделение.Имя = "ОбособленноеПодразделение";
	
	// Перенумеруем строки новых коллекций.
	СдвигИдентификатора = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(Объект.Сотрудники) + 1;
	УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
		СдвигИдентификатора, РезультатРасчетаНДФЛ.НДФЛ, РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные);
			
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.НДФЛ, Объект.Сотрудники);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НДФЛ.КорректировкиВыплаты, Объект.КорректировкиВыплаты);
	УчетНДФЛФормы.ЗаполнитьВторичныеДанныеТабличныхЧастей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПанелиВычеты()
	
	ОписаниеПанелиВычеты = УчетНДФЛКлиентСервер.ОписаниеПанелиВычеты();
	ОписаниеПанелиВычеты.ПутьКДаннымПоляНалоговыйПериод = "Объект.НалоговыйПериод";
	
	ОписаниеТабличнойЧастиНДФЛ = УчетНДФЛКлиентСервер.ОписаниеТабличнойЧастиНДФЛ();
	ОписаниеТабличнойЧастиНДФЛ.ИмяТаблицыФормы = "Сотрудники";
	ОписаниеТабличнойЧастиНДФЛ.ПутьКДаннымНДФЛ = "Объект.Сотрудники";
	ОписаниеТабличнойЧастиНДФЛ.ИмяПоляПериод = "";
	ОписаниеТабличнойЧастиНДФЛ.ИмяПоляФизическоеЛицо = "Сотрудник";
	
	ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ = ОписаниеТабличнойЧастиНДФЛ;
	
	НастраиваемыеПанели = Новый Соответствие;
	НастраиваемыеПанели.Вставить("ВычетыЛичные", 				Истина);
	НастраиваемыеПанели.Вставить("ВычетыНаДетейИИмущественные", "Объект.ПримененныеВычетыНаДетейИИмущественные");
	
	ОписаниеПанелиВычеты.НастраиваемыеПанели = НастраиваемыеПанели;
	
	Возврат ОписаниеПанелиВычеты;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПанелиВычетыНаКлиенте() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаСервере
Функция ОписаниеПанелиВычетыНаСервере() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции
 
&НаСервере
Функция НДФЛПодробнееНаСервере(ИдентификаторыСтрок)
	
	ФизическиеЛица = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ФизическиеЛица.Добавить(Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
	КонецЦикла;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, ФизическиеЛица, Объект.МесяцПерерасчета);
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ВычетыНаДетейИИмущественныеПриИзмененииНаСервере()
	
	УчетНДФЛФормы.ОбновитьПредставлениеВычетовНаДетейИИмущественныхСтрокиНДФЛ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандФормы()
	
	Видимость = УчетНДФЛДокументы.ЕстьПраваНаЧтениеДанныхУчетаНДФЛ();;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заполнить", "Видимость", Видимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиПодборСотрудников", "Видимость", Видимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрНалоговогоУчетаНДФЛ", "Видимость", Видимость);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокПрогрессивногоНалога(ДатаПолученияДохода)
	
	ВидимостьКолонок = ДатаПолученияДохода >= УчетНДФЛ.ДатаЗакона176ФЗ();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонокНалогПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиНалогСПревышенияПоСтавке13",
																"Видимость", НЕ ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКолонокЗачтеноАвансовВСчетСуммПоПрогрессивнымСтавкам",
																"Видимость", ВидимостьКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13",
																"Видимость", НЕ ВидимостьКолонок);
	
КонецПроцедуры

#КонецОбласти
