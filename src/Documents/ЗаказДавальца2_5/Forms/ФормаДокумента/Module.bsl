
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ФормаМодифицирована; // используется для отработки события изменения модифицированности формы

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте
Перем ИмяТекущейТабличнойЧасти; //используется для передачи имени обрабатываемой табличной части в обработчик ожидания

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПараметрыВстраивания = Документы.ЗаказДавальца2_5.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриСозданииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Элементы.ПродукцияВидЦены.БыстрыйВыбор = Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	// Подключаемое оборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "Продукция,Материалы");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		ПриИзмененииШаблонаНазначенияВДокументе();
		
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтогоПродукция.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	// ПараметрыВыбораСтатейИАналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказДавальца2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	ЗакупкиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.СкладПоступления);
	
	ОбновитьПредставлениеНазначения();
	
	УстановитьВидимостьЭлементовПоФО();
	
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьВидимостьЭлементовПоНалогообложениюСервер();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ОбновитьСписокВыбораСпецификаций(Элементы, Объект.Продукция);

	ЭлементыДляЗаполнения = Новый Массив;
	ЭлементыДляЗаполнения.Добавить(Элементы.ВремяДоставкиС);
	ЭлементыДляЗаполнения.Добавить(Элементы.ВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(ЭлементыДляЗаполнения);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтотОбъект);
	ОповеститьОСозданииОбъектаРасчетов = Параметры.ОповеститьОСозданииОбъектаРасчетов;
	// Конец Взаиморасчеты
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПараметрыВстраивания = Документы.ЗаказДавальца2_5.ДоступныеОстаткиПараметрыВстраивания();
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВстраивания);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтотОбъект);
	// Конец Взаиморасчеты
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПараметрыВыбораСтатейИАналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказДавальца2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	// Если документ проводится, заполним пустые даты отгрузки в тч Продукция
	// и пустые даты поступления в тч Материалы, заполним график оплаты.
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтотОбъект,
			"Материалы",
			"Номенклатура,Характеристика,Количество,Склад,ДатаПоступления",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
			
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Объект.НеОтгружатьЧастями Тогда
		
		Отказ = Ложь;
		
		ЭтапыОплатыКлиент.ПредложитьЗаполнитьГрафикОплатПоУмолчанию(
			ЭтотОбъект,
			Новый ОписаниеОповещения(
				"ПередЗаписьюПредложитьЗаполнитьГрафикОплатПоУмолчаниюЗавершение", 
				ЭтотОбъект, 
				ДополнительныеПараметры),
			Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПередЗаписьюНаКлиентеНаСервере();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьЗаполнитьГрафикОплатПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
	
	ПередЗаписьюНаКлиентеНаСервере();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаКлиентеНаСервере()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Согласован")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КПроизводству")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КОтгрузке")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Закрыт") Тогда
		
		ЗаполнитьПустыеДатыПоступленияСервер(ЭтотОбъект);
		
	КонецЕсли;
	
	ВзаиморасчетыВызовСервера.ФормаПередЗаписьюНаКлиентеСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ВзаиморасчетыСервер.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Заполнение служебных реквизитов (пользователю не видны)
	ЗаполнитьСлужебныеРеквизиты();
	
	ОбеспечениеВДокументахСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	УстановитьВидимостьОбеспечения();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Продукция, ЗависимыеРеквизиты("Продукция"));
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Материалы, ЗависимыеРеквизиты("Материалы"));
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
	ОбновитьСостояниеСервер();
	
	ОбновитьПредставлениеНазначения();
	
	// ПараметрыВыбораСтатейИАналитик
	ДоходыИРасходыСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ПараметрыВыбораСтатейИАналитик
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект.ДополнительныеСвойства);
	// Конец Взаиморасчеты
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ФормаМодифицирована = Неопределено;
	Подключаемый_ПриИзмененииМодифицированностиФормы();
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_ЗаказДавальца2_5", ПараметрыЗаписи, Объект.Ссылка);
	
	ВзаиморасчетыКлиент.ФормаПослеЗаписи(ЭтотОбъект);
	ОбеспечениеВДокументахКлиент.ПослеЗаписи(ЭтотОбъект, "Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов");
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			Данные = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
				ОбработатьШтрихкоды(Данные, "Материалы", Элементы.Материалы);
			Иначе
				ОбработатьШтрихкоды(Данные, "Продукция", Элементы.Продукция);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Материалы", Элементы.Материалы);
		Иначе
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Продукция", Элементы.Продукция);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка
	 Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ЗачтенаОплатаСервер(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент" Или ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииМодифицированностиФормы", 1);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтрокиПродукция = Настройки.Получить("СкрыватьОтмененныеСтрокиПродукция");
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	ОбновитьОтборСтрокПоОтмененным(Элементы, "Продукция", СкрыватьОтмененныеСтрокиПродукция, Истина);
	ОбновитьОтборСтрокПоОтмененным(Элементы, "Материалы", СкрыватьОтмененныеСтрокиМатериалы, Истина);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
		Настройки.Удалить("Объект.ПоступлениеОднойДатой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспеченияЗаказов.Форма.Форма" Тогда
		
		АдресТаблицыДвижений = ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
			ВыбранноеЗначение.КодДействия,
			ВыбранноеЗначение.АдресАналитик,
			ВыбранноеЗначение.ПараметрыЗаполнения);
			
		// Возврат управления в форму обработки состояния обеспечения.
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение.ВыполняемоеОповещение, АдресТаблицыДвижений);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца2_5.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца2_5.Форма.ФормаПодбораПоСпецификациям" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ПодборМатериаловПоСпецификациямСервер(ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(
			ЭтотОбъект, ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ], ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" 
		  Или ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		
		ИмяТЧ = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПродукция, "Продукция", "Материалы");
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, ИмяТЧ);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
		Объект.Продукция,
		ДатаОтгрузкиОбязательна,
		СкладОбязателен);
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЗавершениеРаботы 
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ОповеститьОСозданииОбъектаРасчетов Тогда
		ВзаиморасчетыКлиент.ФормаПриЗакрытии(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбщиеЭлементы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПоступленияПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Или Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если ПартнерИзменился И Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Согласован")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КПроизводству")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КОтгрузке")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Закрыт") Тогда
		ЗаполнитьПустыеДатыПоступленияСервер(ЭтотОбъект);
	КонецЕсли;
	
	ПриИзмененииСтатусаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ПриИзмененииНалогообложенияНДССервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ПриИзмененииЦенаВключаетНДССервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ПересчитатьСуммы = ЗначениеЗаполнено(Объект.Валюта)
					   И (ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Продукция")
						  Или ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Материалы"));
	
	ПриИзмененииВалютыСервер(Объект.Валюта, ПересчитатьСуммы, КэшированныеЗначения);
	
	Если ПересчитатьСуммы Тогда
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеЗаказовПоДаннымДавальца(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ДатаОтгрузкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	ПриИзмененииНеОтгружатьЧастямиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ПриИзмененииПоступлениеОднойДатойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ЗаполнитьДатыПоступления(ЭтотОбъект, Объект.ДатаПоступления, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНажатие(Элемент, СтандартнаяОбработка)
	
	ПродажиКлиент.СостояниеВФормеДокументаНажатие(СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.УслугаПоПереработке",
		НСтр("ru = 'Содержание услуги по переработке';
			|en = 'Subcontracting service content'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.Форма.ФормаДокумента.Элемент.НаправлениеДеятельности.ПриИзменении");
	
	НаправлениеДеятельностиПриИзмененииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ТипПроизводственногоПроцессаПриИзменении(Элемент)
	
	Если Объект.ТипПроизводственногоПроцесса <> ТипПроизводственногоПроцессаДоИзменения Тогда
		
		ИмяТаблицы = "Продукция";
		ИмяСвязаннойТаблицы = "Материалы";	
		ИмяПоляСпецификация = "Спецификация";
		
		ИмяПроцедурыОповещения = "ТипПроизводственногоПроцессаПриИзмененииЗавершение";
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Спецификации в табличной части ""%1"" будут перезаполнены, состав материалов по измененным спецификациям будет очищен. Продолжить?';
				|en = 'Bills of materials in table ""%1"" will be refilled, and materials under the changed bills of materials will be cleared. Continue?'"),
			ИмяТаблицы);
			
		СвязанныеРеквизиты = Новый Структура("ТипПроизводственногоПроцессаДоИзменения", "ТипПроизводственногоПроцесса");
		
		ИзмененныеСтроки = ПолучитьОсновныеСпецификацииСтрок(ИмяТаблицы, ИмяПоляСпецификация,, Истина);
		
		ЗаполнитьСпецификациюВТабличнойЧасти(
			ИмяТаблицы, 
			ИмяСвязаннойТаблицы, 
			ИмяПоляСпецификация, 
			ИзмененныеСтроки, 
			ИмяПроцедурыОповещения, 
			ТекстВопроса, 
			СвязанныеРеквизиты);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипПроизводственногоПроцессаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ТипПроизводственногоПроцесса = ТипПроизводственногоПроцессаДоИзменения;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОсновнойСпецификациейЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
	   И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаиморасчетыКлиент.ОбновитьТекстГиперссылкиЭтапыОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныМатериалыПриИзменении(Элемент)

	Если Объект.ВидЦеныМатериалы = ВидЦеныМатериалыДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВидЦеныМатериалыПриИзмененииЗавершение", ЭтотОбъект),
		НСтр("ru = 'Цены в списке ""Сырье и материалы для производства"" будут перезаполнены. Продолжить?';
			|en = 'Prices in the ""Raw and consumable materials for production"" list will be refilled. Continue?'"),
		РежимДиалогаВопрос.ДаНет,
		45,
		КодВозвратаДиалога.Да,
		НСтр("ru = 'Выбор вида цены материалов';
			|en = 'Select material price type'"),
		КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныМатериалыПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Объект.ВидЦеныМатериалы = ВидЦеныМатериалыДоИзменения;
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.Форма.ФормаДокумента.Элемент.ВидЦеныМатериалы.ПриИзменении");
	
	ЗаполнитьЦеныПоВидуЦенМатериаловСервер(Ложь);
	
	ЦеныРассчитаны =
		Объект.Материалы.НайтиСтроки(Новый Структура("Цена", 0)).Количество() <> Объект.Материалы.Количество();
	ЦеныПартнеровЗаполнениеКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦеныПоставщика(ЦеныРассчитаны, Объект.ВидЦеныМатериалы);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ВидЦеныМатериалыДоИзменения = Объект.ВидЦеныМатериалы;
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаСогласованияПриИзменении(Элемент)
	
	ДатаСогласованияПриИзмененииСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УслугаПоПереработке

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДССервер(КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ОчиститьПредставлениеАдреса(
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
		Объект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		ИменаРеквизитовАдресовДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьСписокВыбораСпецификаций(Элементы, Объект.Продукция);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	СкладыКлиент.ОбновитьТаблицуСкладов(
		ТаблицаСкладов,
		Неопределено,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Продукция, ЭтотОбъект),
		СкладГруппа);
	
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Продукция, ЭтотОбъект);
	ИдСтрокКУдалению = Элементы.Продукция.ВыделенныеСтроки;
	СпецификацииКУдалению = СпецификацииКУдалению(ИдСтрокКУдалению);
	
	Если Не СпецификацииКУдалению.Количество() = 0 Тогда
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдСтрокКУдалению", ИдСтрокКУдалению);
		ДополнительныеПараметры.Вставить("СпецификацииКУдалению", СпецификацииКУдалению);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
										"ПродукцияПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru = 'В табличной части ""Сырье и материалы для производства"" будут оставлены строки 
				|по оставшимся спецификациям в табличной части ""Выпускаемая продукция"". Продолжить?';
				|en = 'In table ""Raw and consumable materials for production"", rows 
				|containing BOMs that remain in the ""Released products"" table will not be deleted. Continue?'"),
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Продукция, ЭтотОбъект);
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ДоходыИРасходыКлиентСервер.ВставитьДействиеИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(
			СтруктураДействий, ЭтотОбъект, "Объект.Продукция");
		
		СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда	
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ВариантОбеспечения,Доступно,СкладОбязателен,ДатаОтгрузкиОбязательна");
		
		СтруктураДействий.Вставить(
			"ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий.Продукция));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДействий) Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
	Если Копирование Тогда
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.Форма.ФормаДокумента.Элементы.Продукция.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.ПродукцияДоступно И Не ТолькоПросмотр Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Неопределено);
		
		Если ПараметрыФормы <> Неопределено Тогда
			ОткрытьФорму("Обработка.ЗапросКоличестваИСерий.Форма", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ПродукцияЦена Тогда
		
		Если ПравоНаЧтениеВидаЦены Тогда
			
			ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
				
				ОчиститьСообщения();
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Для редактирования цены очистите вид цены';
						|en = 'To edit the price, clear the price type'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Продукция", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока
		И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	// Проверим дату отгрузки
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	// Проверим код строки
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		УстановитьКлючиВСтрокахПродукции(Элементы, Объект, ТекущиеДанные);
	КонецЕсли;
	
	КэшСтроки =
		?(НоваяСтрока, Неопределено, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Продукция, ЭтотОбъект));
	
	Если Не НоваяСтрока Тогда
		
		Если Не КэшСтроки = Неопределено
			И Не ТекущиеДанные = Неопределено
			И Не ТекущиеДанные.Спецификация = КэшСтроки.Спецификация Тогда
			
			СпецификацииКУдалению = СпецификацииКУдалению(Элемент.ВыделенныеСтроки, КэшСтроки.Спецификация);
			Если СпецификацииКУдалению.Количество() Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("СпецификацииКУдалению", СпецификацииКУдалению);
				ДополнительныеПараметры.Вставить("ТекущиеДанные",         ТекущиеДанные);
				ДополнительныеПараметры.Вставить("КэшСтроки",             КэшСтроки);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПродукцияПередОкончаниемРедактированияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
				ТекстВопроса = НСтр(
					"ru = 'Изменилась основная спецификация. В табличной части ""Сырье и материалы для производства"" будут удалены строки 
					|по спецификации %1. Продолжить?';
					|en = 'Main BOM is changed. Rows corresponding to the %1 BOM will be deleted 
					|from table ""Raw and consumable materials for production"". Continue?'");
				
				ПоказатьВопрос(
					ОписаниеОповещения, 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СпецификацииКУдалению[0]),
					РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		КэшСтроки =
			?(НоваяСтрока, Неопределено, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Продукция, ЭтотОбъект));
		
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КэшСтроки, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
			НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("Продукция",, Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Продукция.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Продукция.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий.Продукция, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	НоменклатураПродукцияПриИзмененииСервер(КэшированныеЗначения);
	ОбновитьСписокВыбораСпецификаций(Элементы, Объект.Продукция);
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуПродажи",
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	СтруктураДействий.Вставить(
		"ЗаполнитьСодержание",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	
	ДобавитьДействияОбеспеченияНаКлиенте(
		СтруктураДействий,
		"ВариантОбеспечения,ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	СтруктураЗаполненияСпецификации = 
		УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
			Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ОбновитьСписокВыбораСпецификаций(Элементы, Объект.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		СтруктураДействий.Вставить(
			"ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
			
	КонецЕсли;
	
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
	ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ДоступноВДругихСтроках");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	СтруктураДействий.Вставить(
		"ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Продукция));
	
	ДобавитьДействияОбеспеченияНаКлиенте(
		СтруктураДействий,
		"ДоступноВДругихСтроках,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	Если Не ТекущаяСтрока.Отменено Тогда
		
		СтруктураЗаполненияСпецификации =
			УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
					Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций);
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбеспечениеВДокументахКлиент.ТребуетсяОбновитьКолонкуДоступно(СтруктураДействий) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	Если ТекущаяСтрока.Отменено Тогда
		
		КлючиСвязиМатериалов = Новый Соответствие;
		КлючиСвязиМатериалов.Вставить(ТекущаяСтрока.Спецификация, ТекущаяСтрока.ПричинаОтмены);
		
		ОтменитьСвязанныеМатериалы(КлючиСвязиМатериалов);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ОбновитьОтборСтрокПоОтмененным(Элементы, "Продукция", СкрыватьОтмененныеСтрокиПродукция, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладПриИзменении(Элемент)
	
	ПродукцияСкладПриИзмененииСервер(Элементы.Продукция.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПодразделениеПриИзменении(Элемент)
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияДатаОтгрузкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы      = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТоварыДатаОтгрузкиПриИзмененииСервер();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияПриИзменении(Элемент)
	
	ОбновитьСписокВыбораСпецификаций(Элементы, Объект.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВариантОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияОбработкаВыбора(
		ЭтотОбъект,
		Элементы.Продукция.ТекущиеДанные,
		ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВариантОбеспеченияПриИзменении(Элемент)
	
	Перем ПараметрыФормы;
	Если ОбеспечениеВДокументахКлиент.ОткрытьФормуВыбораСкладаИСерий(ЭтотОбъект) Тогда
		ВариантПолученияПараметров = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия();
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ВариантПолученияПараметров); // вызов сервера
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерии",
		Истина,
		"ПродукцияВариантОбеспеченияПриИзмененииПослеВопроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов());
	
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСписатьНаРасходыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(
		ЭтотОбъект, ТекущиеДанные, "Объект.Продукция");
	
	НастройкаСчетовУчетаКлиентСервер.ПриИзмененииРеквизитаДоступностиСчетаУчетаВСтроке(
		ЭтотОбъект, ТекущиеДанные, "Объект.Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовПриИзменении(Элемент)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.АвтоПодборАналитикиРасходов(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.ОкончаниеВводаТекстаАналитикиРасходов(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораАналитикиРасходов(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НоменклатураПартнеровКлиент.ПриВыбореНоменклатурыПартнера(
		Объект, Поле, "МатериалыНоменклатураПартнера", НСтр("ru = 'Давалец';
															|en = 'Material provider'"));
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Материалы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент)
	
	СкладыКлиент.ОбновитьТаблицуСкладов(
		ТаблицаСкладовПоступления,
		Неопределено,
		РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Материалы, ЭтотОбъект),
		СкладПоступленияГруппа);
		
	ВсегоСкладов = ТаблицаСкладовПоступления.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
		НадписьНесколькоСкладовПоступления, Элементы.КартинкаНесколькоСкладовПоступления, ВсегоСкладов);
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Материалы, ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
		СтруктураДействий.Вставить("ЗаполнитьДействиеПоПерерабатываемымМатериалам");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока
		И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Объект.ПоступлениеОднойДатой Тогда
		ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		КэшСтроки =
			?(НоваяСтрока, Неопределено, РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.Материалы, ЭтотОбъект));
			
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладовПоступления, ТекущиеДанные, КэшСтроки, СкладПоступленияГруппа);
		
		ВсегоСкладов = ТаблицаСкладовПоступления.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладовПоступления,
			Элементы.КартинкаНесколькоСкладовПоступления, ВсегоСкладов);
			
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "МатериалыНоменклатураПартнера" Тогда
		НоменклатураПартнеровКлиент.ЗаполнитьСписокВыбораНоменклатурыПартнера(
			Объект.Партнер, Элементы.Материалы.ТекущиеДанные, Элементы.МатериалыНоменклатураПартнера.СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПартнераПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера");
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ПараметрыЗаполненияСкладаВСтроке("Материалы"));
	
	СтруктураДействий.Вставить(
		"ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Материалы));
	
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуЗакупки",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
			Объект, "ВидЦеныМатериалы"));
	
	СтруктураДействий.Вставить(
		"НоменклатураПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Материалы"));
	
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
		
	НоменклатураМатериалыПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", 				ПараметрыЗаполненияСкладаВСтроке("Материалы"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 				Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
	
	СтруктураДействий.Вставить(
		"ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Материалы));
	
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуЗакупки",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
			Объект, "ВидЦеныМатериалы"));
	
	СтруктураДействий.Вставить(
		"НоменклатураПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Материалы"));
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
	
	НоменклатураМатериалыПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить(
		"ХарактеристикаПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Материалы"));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуЗакупки",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
			Объект, "ВидЦеныМатериалы"));
		
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	Иначе
		
		СтруктураДействий.Вставить(
			"ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
				Объект, "ВидЦеныМатериалы"));
		
	КонецЕсли;
	
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСкладПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшируемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНазначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНазначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("Материалы",, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыДействиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	МатериалыПриИзмененииДействияВСтроке(ЭтотОбъект, ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииДействияВСтрокеМатериалов(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
	СтруктураДействий.Вставить(
		"ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Материалы));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ОбновитьОтборСтрокПоОтмененным(Элементы, "Материалы", СкрыватьОтмененныеСтрокиМатериалы, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

#Область Шапка

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?';
				|en = 'To proceed, you need to post the document. Do you want to post the document?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетОплаты(Команда)
	ВзаиморасчетыКлиент.ЗачетОплаты(ЭтотОбъект, Элементы.ЗачетОплатыФорма);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ДополнительнаяИнформация",       Объект.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("БанковскийСчет",                 Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("НазначениеПлатежа",              Объект.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НомерЗаказа",                    ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер));
	СтруктураПараметров.Вставить("ДатаЗаказа",                     Формат(Объект.Дата, "ДЛФ=Д"));
	СтруктураПараметров.Вставить("ПараметрыВыбораРеквизитов",      ПараметрыВыбораРеквизитов);
	
	ОткрытьФорму(
		"Документ.ЗаказДавальца2_5.Форма.РеквизитыПечати",
		СтруктураПараметров, ЭтотОбъект,,,,
		Неопределено,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыКлиент.ОграниченияЗадолженностиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область Продукция

&НаКлиенте
Процедура ПродукцияЗаполнитьДатуОтгрузки(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуОтгрузки(Элементы.Продукция.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьСклад(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект,
		Объект.Продукция,
		НСтр("ru = 'Выпускаемая продукция';
			|en = 'Released products'"),
		ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора     = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		
		ОткрытьФорму(
			"Справочник.Склады.ФормаВыбора",
			 СтруктураПараметров,
			 ЭтотОбъект,,,,
			 Новый ОписаниеОповещения(
			 	"ПродукцияЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)),
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПодразделение(Команда)
	
	СкладыКлиент.ЗаполнитьПодразделениеВТабличнойЧасти(
		Объект,
		ЭтотОбъект,
		Объект.Продукция,
		"Продукция",
		Элементы.Продукция.ВыделенныеСтроки,
		Новый ОписаниеОповещения("ПродукцияЗаполнитьПодразделениеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПолучатель(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В список ""Выпущенная продукция"" не введено ни одной строки.';
										|en = 'No lines are entered in the ""Released products"" list.'"), 45);
		Возврат;
	КонецЕсли;
	
	СтрокиТЧ = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не ТекущаяСтрока.СписатьНаРасходы Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТЧ.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Если СтрокиТЧ.Количество() = 0 Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'В выделенных строках списка ""Выпущенная продукция"" заполнение получателя не требуется.';
				|en = 'You do not need to fill the recipient in the selected lines of the ""Released products"" list.'"),
			45);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокиТЧ", СтрокиТЧ);
	
	ОткрытьФорму(
		"Справочник.СтруктураПредприятия.ФормаВыбора",,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПродукцияЗаполнитьПолучательЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьЦеныПоВидуЦен(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.ФормаДокумента.Команда.Продукция_Заполнить_ЗаполнитьЦеныПоВидуЦен");
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения цен';
				|en = 'No selected rows in the table. Select rows to fill in the prices'"),
			Объект.Ссылка,
			"Объект.Продукция");
		
		Возврат;
		
	КонецЕсли;
	
	Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Продукция", НСтр("ru = 'Выпускаемая продукция';
																									|en = 'Released products'")) Тогда
		
		ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
		ПараметрыВыбораЦен.ОписаниеОповещения = 
			Новый ОписаниеОповещения("ПродукцияЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект);
		ПараметрыВыбораЦен.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораЦен.ИспользоватьПриПередачеПродукцииДавальцу = Истина;
		ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("Продукция");
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Продукция) Тогда
		СкопироватьСтрокиНаСервере("Продукция");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Продукция.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ПродукцияЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.ФормаДокумента.Команда.Продукция_Общее_ПодобратьТовары");
	
	ПодобратьТовар("Продукция");
	
	УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Продукция;
	ДанныеТаблицы = Объект.Продукция;
	
	Оповещение = Новый ОписаниеОповещения("ПродукцияРазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("Продукция", НСтр("ru = 'Выпускаемая продукция';
												|en = 'Released products'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиПродукция = Не СкрыватьОтмененныеСтрокиПродукция;
	
	ОбновитьОтборСтрокПоОтмененным(Элементы, "Продукция", СкрыватьОтмененныеСтрокиПродукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьОсновнойСпецификацией(Команда)
	
	ИмяТаблицы = "Продукция";
	ИмяСвязаннойТаблицы = "Материалы";	
	ИмяПоляСпецификация = "Спецификация";
	
	ИмяПроцедурыОповещения = "ПродукцияЗаполнитьОсновнойСпецификациейЗавершение";
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'В табличной части ""%1"" присутствуют строки по измененным спецификациям. Они будут удалены. Продолжить?';
			|en = 'Some rows in table ""%1"" mention the modified BOMs. These rows will be deleted. Continue?'"),
		ИмяСвязаннойТаблицы);

	ВыделенныеСтроки = Элементы[ИмяТаблицы].ВыделенныеСтроки;	
	
	ИзмененныеСтроки = ПолучитьОсновныеСпецификацииСтрок(ИмяТаблицы, ИмяПоляСпецификация, ВыделенныеСтроки);
	
	ЗаполнитьСпецификациюВТабличнойЧасти(
		ИмяТаблицы, ИмяСвязаннойТаблицы, ИмяПоляСпецификация, ИзмененныеСтроки, ИмяПроцедурыОповещения, ТекстВопроса);
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

&НаКлиенте
Процедура МатериалыЗаполнитьДатуПоступления(Команда)
	
	Если Элементы.Материалы.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления(Элементы.Материалы.ВыделенныеСтроки);
	Иначе
		ТекстПредупреждения =
			НСтр("ru = 'В документе не выбраны строки для заполнения. Дата поступления не будет заполнена.';
				|en = 'No lines to fill are selected in the document. The date of receipt will not be filled.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьСклад(Команда)
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект, Объект.Материалы, НСтр("ru = 'Сырье и материалы для производства';
										|en = 'Raw and consumable materials for production'"), ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора     = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор, ГруппаСкладов", СтруктураОтбора, Объект.СкладПоступления);
		
		ОткрытьФорму(
			"Справочник.Склады.ФормаВыбора",
			СтруктураПараметров,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения(
				"МатериалыЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦенМатериалов(Команда)
	
	ЗаполнитьЦеныПоВидуЦенМатериаловСервер(Истина);
	
	ЦеныРассчитаны =
		Объект.Материалы.НайтиСтроки(Новый Структура("Цена", 0)).Количество() <> Объект.Материалы.Количество();
	ЦеныПартнеровЗаполнениеКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦеныПоставщика(ЦеныРассчитаны, Объект.ВидЦеныМатериалы);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодборПоСпецификациям(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.ФормаДокумента.Команда.Материалы_Заполнить_ПодборПоСпецификациям");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	
	Если Объект.Продукция.НайтиСтроки(Отбор).Количество() = Объект.Продукция.Количество() Тогда
		
		Если Объект.Продукция.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Табличная часть ""Выпускаемая продукция"" не заполнена.';
									|en = 'Table ""Released products"" is not filled in.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Поле ""Спецификация"" не заполнено ни в одной из строк табличной части ""Выпускаемая продукция"".';
									|en = 'No lines with ""Bill of materials"" in table ""Released products"" are filled in.'");
		КонецЕсли;
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Продукция");
		
		Возврат; // Нет спецификаций, для получения списка материалов
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокСпецификаций",        Элементы.МатериалыСпецификация.СписокВыбора.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Подразделение",             Объект.Подразделение);
	ПараметрыФормы.Вставить("ДатаЗаказа",                Объект.Дата);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",   Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьПродукциюИМатериалыВоВременноеХранилищеНаСервере());
	
	ОткрытьФорму(
		"Документ.ЗаказДавальца2_5.Форма.ФормаПодбораПоСпецификациям",
		ПараметрыФормы,
		ЭтотОбъект,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьПоСпецификациям(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.ФормаДокумента.Команда.Материалы_Заполнить_ЗаполнитьПоСпецификациям");
	
	ОчиститьСообщения();
	
	Если Объект.Продукция.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Табличная часть ""Выпускаемая продукция"" не заполнена.';
								|en = 'Table ""Released products"" is not filled in.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Продукция");
		
		Возврат;
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	Если Объект.Продукция.НайтиСтроки(Отбор).Количество() = Объект.Продукция.Количество() Тогда
		
		Если Объект.Продукция.Количество() = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Спецификация"" не заполнено.';
									|en = '""Bill of materials"" is not filled in.'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", 1, "Спецификация");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		Иначе
			ТекстСообщения = НСтр("ru = 'Поле ""Спецификация"" не заполнено ни в одной из строк табличной части ""Выпускаемая продукция"".';
									|en = 'No lines with ""Bill of materials"" in table ""Released products"" are filled in.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Продукция");
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнятьМатериалы = Истина;
	
	Если Объект.Материалы.Количество() <> 0 Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("МатериалыЗаполнитьПоСпецификациямЗавершение", ЭтотОбъект),
			НСтр("ru = 'Табличная часть ""Сырье и материалы для производства"" будет перезаполнена. Продолжить?';
				|en = 'Table ""Raw and consumable materials for production"" will be refilled. Continue?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	МатериалыЗаполнитьПоСпецификациямФрагмент(ЗаполнятьМатериалы);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Материалы.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("Материалы");
	
	КоличествоВставленных = Объект.Материалы.Количество() - КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Материалы) Тогда
		СкопироватьСтрокиНаСервере("Материалы");
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Материалы.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("МатериалыЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.ФормаДокумента.Команда.Материалы_Общее_ПодобратьТовары");
	
	ПодобратьТовар("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("МатериалыПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Материалы;
	ДанныеТаблицы = Объект.Материалы;
	
	Оповещение = Новый ОписаниеОповещения("МатериалыРазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("Материалы", НСтр("ru = 'Сырье и материалы для производства';
												|en = 'Raw and consumable materials for production'"));
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиМатериалы = Не СкрыватьОтмененныеСтрокиМатериалы;
	
	ОбновитьОтборСтрокПоОтмененным(Элементы, "Материалы", СкрыватьОтмененныеСтрокиМатериалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнера(Команда)
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Материалы, "Материалы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(
		Новый ОписаниеОповещения("ЗаполнитьНоменклатуруПоНоменклатуреПартнераЗавершение", ЭтотОбъект),
		ПоместитьМатериалыВоВременноеХранилищеСервер(),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыДействиеПринятьНаХранение(Команда)
	
	МатериалыУстановитьДействиеВСтрокахНаСервере(
		ПредопределенноеЗначение("Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение"),
		Элементы.Материалы.ВыделенныеСтроки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыДействиеИспользоватьИмеющиеся(Команда)
	
	МатериалыУстановитьДействиеВСтрокахНаСервере(
		ПредопределенноеЗначение("Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся"),
		Элементы.Материалы.ВыделенныеСтроки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтотОбъект,
		"Материалы",
		"Номенклатура,Характеристика,Количество,Склад,ДатаПоступления");
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемые

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииМодифицированностиФормы()
	
	Если ФормаМодифицирована <> Модифицированность Тогда
		
		ФормаМодифицирована = Модифицированность;
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов()
	
	Ошибка = Ложь;
	Если ОбеспечениеВДокументахКлиент.НужноОбновитьДоступностьПослеЗаписи(ЭтотОбъект,
		"Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасов", Ошибка) Тогда
		ОбеспечениеВДокументахКлиент.НастроитьГиперссылкиСостояниеОбеспеченияПослеЗаписи(ЭтотОбъект, Ошибка);
		ОбновлятьКолонку = ОбеспечениеВДокументахКлиент.ОбновлятьКолонкуДоступноПослеРаспределенияЗапасов(ЭтотОбъект);
		Если ОбновлятьКолонку Тогда
			ОбновитьКолонкуДоступноПослеРаспределенияЗапасов();
		Иначе
			ОбновитьСостояниеСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	СтатусыЧерновик = Новый СписокЗначений;
	СтатусыЧерновик.Добавить(Перечисления.СтатусыЗаказовДавальцев.НеСогласован);
	СтатусыЧерновик.Добавить(Перечисления.СтатусыЗаказовДавальцев.Согласован);
	
	#Область Шапка
	
	//
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "Склад", "Объект.Склад", "СкладОбязателен");
	
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(
		УсловноеОформление, "Склад", "Склад", "", СтатусыЧерновик);
	
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(
		УсловноеОформление, "Подразделение", "Подразделение", "", СтатусыЧерновик);
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ДатаОтгрузки", "Объект.ДатаОтгрузки", "ДатаОтгрузкиОбязательна");
	
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(
		УсловноеОформление, "ДатаПоступления", "ДатаПоступления", "", СтатусыЧерновик);
	
	//
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВШапке(ЭтотОбъект);
	
	//
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтотОбъект);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	#КонецОбласти
	
	#Область Продукция
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "ПродукцияХарактеристика", "Объект.Продукция.ХарактеристикиИспользуются");
		
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект, "ПродукцияНоменклатураЕдиницаИзмерения", "Объект.Продукция.Упаковка");
	
	//
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.Продукция,
		Элементы.ПродукцияОтменено.Имя,
		Элементы.ПродукцияПричинаОтмены.Имя,
		Элементы.ПродукцияЦена.Имя,
		Элементы.ПродукцияСумма.Имя);
	
	//
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ПродукцияДатаОтгрузки", "Объект.Продукция.ДатаОтгрузки", "Объект.Продукция.ДатаОтгрузкиОбязательна");
		
	//
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ПродукцияСклад", "Объект.Продукция.Склад", "Объект.Продукция.СкладОбязателен");
	
	//
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтотОбъект, "ПродукцияСклад");
	
	//
	СкладыСервер.УстановитьУсловноеОформлениеПодразделенияВТЧ(ЭтотОбъект, "Продукция");
	
	//
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(
		ЭтотОбъект, "ПродукцияВидЦены", "Объект.Продукция.ВидЦены");
	
	//
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтотОбъект, "ПродукцияСуммаСНДС");
	
	//
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(
		ЭтотОбъект, "СтавкаНДС", "ПродукцияСуммаНДС", "ПродукцияСуммаСНДС");
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"СерииВсегдаВТЧТовары",
		"ПродукцияСерия",
		"Объект.Продукция.СтатусУказанияСерий",
		"Объект.Продукция.ТипНоменклатуры");
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Получатель");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПолучатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = '<при списании на расходы>';
																			|en = '<when writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область Материалы
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "МатериалыХарактеристика", "Объект.Материалы.ХарактеристикиИспользуются");
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект, "МатериалыНоменклатураЕдиницаИзмерения", "Объект.Материалы.Упаковка");
	
	//
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.Материалы,
		Элементы.МатериалыОтменено.Имя,,
		Элементы.МатериалыЦена.Имя,
		Элементы.МатериалыСумма.Имя);
	
	//
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(
		УсловноеОформление, "МатериалыДатаПоступления", "ДатаПоступления", "Материалы", СтатусыЧерновик);
	
	//
	ОбеспечениеВДокументахСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(
		УсловноеОформление, "МатериалыСклад", "Склад", "Материалы", СтатусыЧерновик);
	
	//
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(ЭтотОбъект);
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"СерииВсегдаВТЧТовары",
		"МатериалыСерия",
		"Объект.Материалы.СтатусУказанияСерий",
		"Объект.Материалы.ТипНоменклатуры");
	
	//
	УсловноеОформлениеНазначениеСырьеИМатериалыДляПроизводства();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыДатаПоступления.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладПоступленияГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыДатаПоступления.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Материалы.Действие");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Материалы.Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("ru = '<не требуется>';
																				|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста" ,           ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыНоменклатураПартнера.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партнер");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru = '<выберите поставщика>';
																			|en = '<select vendor>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	ПараметрыУстановки = МногооборотнаяТараСервер.ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой();
	
	ПараметрыУстановки.Форма                 = ЭтотОбъект;
	ПараметрыУстановки.ЭтоПоступление        = Истина;
	ПараметрыУстановки.ИмяПоляВводаСтавкиНДС = "";
	ПараметрыУстановки.ИмяПоляВводаЦены      = "МатериалыЦена";
	ПараметрыУстановки.ИмяПоляВводаСуммы     = "МатериалыСумма";
	ПараметрыУстановки.ПутьКТЧОтбора         = "Объект.Материалы";
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ПараметрыУстановки);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеНазначениеСырьеИМатериалыДляПроизводства()
	
	// Условное оформление назначения в списке материалов совпадающего с назначением в шапке.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ПредставлениеНазначения"));
	
	// Условное оформление назначения в списке материалов когда не указан давалец
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан давалец>';
																|en = '<material provider is not specified>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	// Стандартное оформление назначения поступления.
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтотОбъект, Элементы.МатериалыНазначение.Имя, "Объект.Материалы.ТипНоменклатуры");
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	СписокРеквизитов - Строка
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокРеквизитов = Новый Структура(СписокРеквизитов);
	Инициализация = Не ЗначениеЗаполнено(СписокРеквизитов);
	
	Если Инициализация
		Или СписокРеквизитов.Свойство("ОставитьПродукциюНаХранении") Тогда
		
		ЗаголовокКоманда   = НСтр("ru = 'Дату отгрузки';
									|en = 'Shipment date'");
		ЗаголовокДата      = НСтр("ru = 'Дата отгрузки';
									|en = 'Shipment date'");
		ЗаголовокФлаг      = НСтр("ru = 'Отгружать одной датой';
									|en = 'One-day shipping'");
		ПодсказкаФлаг      = НСтр("ru = 'Желаемая дата отгрузки заказа';
									|en = 'Desired order shipment date'");
		ПодсказкаДата      = НСтр("ru = 'Признак, определяющий возможность отгрузки по частям в разные даты.';
									|en = 'Shows whether shipment in installments in different dates is permitted.'");
		ЗаголовокОтгрузить = НСтр("ru = 'Отгрузить';
									|en = 'Ship'");
		
		Если Объект.ОставитьПродукциюНаХранении Тогда
			ЗаголовокКоманда   = НСтр("ru = 'Дату производства';
										|en = 'Production date'");
			ЗаголовокОтгрузить = НСтр("ru = 'Принять';
										|en = 'Receive'");
			ЗаголовокДата      = НСтр("ru = 'Дата производства';
										|en = 'Production date'");
			ЗаголовокФлаг      = НСтр("ru = 'Производить одной датой';
										|en = 'Produce in one day'");
			ПодсказкаФлаг      = НСтр("ru = 'Признак, определяющий возможность производства по частям в разные даты.';
										|en = 'Indicates whether it is possible to produce on different dates.'");
			ПодсказкаДата      = НСтр("ru = 'Желаемая дата производства';
										|en = 'Requested production date'");
		КонецЕсли;
		
		Элементы.ПродукцияЗаполнитьДатуОтгрузки.Заголовок    = ЗаголовокКоманда;
		Элементы.ПродукцияОтгрузить.Заголовок                = ЗаголовокОтгрузить;
		Элементы.ПродукцияКонтекстноеМенюОтгрузить.Заголовок = ЗаголовокОтгрузить;
		Элементы.ПродукцияДатаОтгрузки.Заголовок             = ЗаголовокДата;
		Элементы.НеОтгружатьЧастями.Заголовок                = ЗаголовокФлаг;
		Элементы.НеОтгружатьЧастями.Подсказка                = ПодсказкаФлаг;
		Элементы.ДатаОтгрузки.Подсказка                      = ПодсказкаДата;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий(ИмяТЧ)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказДавальца2_5));
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
	
	Элементы[ИмяТЧ + "Серия"].Видимость = ПараметрыУказанияСерий[ИмяТЧ].ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	ЕстьПраво = ОбеспечениеВДокументахСервер.ЕстьПравоПросмотраГиперссылкиСостоянияОбеспечения();
	Элементы.СтраницыГиперссылкаСостояниеОбеспечения.Видимость = ЕстьПраво;
	
	ОбеспечениеВДокументахСервер.НастроитьГиперссылкиСостояниеОбеспечения(ЭтотОбъект);
	Элементы.ДатаОтгрузки.Подсказка = ОбеспечениеВДокументахСервер.ПодсказкаДатаОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоФО()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаголовокСклад");
	МассивЭлементов.Добавить("КартинкаНесколькоСкладов");
	МассивЭлементов.Добавить("НадписьНесколькоСкладов");
	МассивЭлементов.Добавить("ЗаголовокСкладПоступления");
	МассивЭлементов.Добавить("КартинкаНесколькоСкладовПоступления");
	МассивЭлементов.Добавить("НадписьНесколькоСкладовПоступления");
	
	ВидимостьЭлементов.Вставить(
		МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаголовокОрганизация");
	
	ВидимостьЭлементов.Вставить(
		МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ХарактеристикаНеИспользуется");
	
	ВидимостьЭлементов.Вставить(
		МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПродукцияГруппаОтменено");
	
	ВидимостьЭлементов.Вставить(
		МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПродукцияОтмененоПричиныОтменыНеИспользуются");
	
	ВидимостьЭлементов.Вставить(
		МассивЭлементов, Не ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов"));
	
	Для Каждого ЭлементСоответствия Из ВидимостьЭлементов Цикл
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы, ЭлементСоответствия.Ключ, "Видимость", ЭлементСоответствия.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатПоступления()
	
	// Кнопка и реквизит ТЧ
	Элементы.МатериалыЗаполнитьДатуПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	Элементы.МатериалыДатаПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	
	// Общий реквизит формы
	Элементы.ДатаПоступления.Видимость = Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()
	
	// Общий реквизит формы
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	
	// Кнопка и реквизит ТЧ
	Элементы.ПродукцияДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.ПродукцияЗаполнитьДатуОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоНалогообложениюСервер()
	
	Элементы.ЦенаВключаетНДС.Видимость =
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад(ИмяТЧ)
	
	Если ИмяТЧ = "Продукция" Тогда
		
		Элементы.ПродукцияСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(
			Элементы.ПродукцияСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));
			
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		
		Элементы.МатериалыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(
			Элементы.МатериалыСклад, "Ссылка", ДанныеВыбораСкладов(Объект.СкладПоступления));
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбораСпецификаций()

	ПараметрыВыбораСпецификаций =
		УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЗаказДавальца2_5);
		
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(
		Элементы.ПродукцияСпецификация, ПараметрыВыбораСпецификаций);
	
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Доступность", РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПриИзмененииРеквизитов

#Область Шапка

&НаСервере
Процедура ПриИзмененииСтатусаСервер()
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦенаВключаетНДССервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Продукция, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС                          = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПередачеПродукцииДавальцу = Истина;
	ПараметрыВыбораВидаЦены.Статус                                   = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ВалютаДокумента = Объект.Валюта;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	МассивИзмененныхРеквизитов = Новый Массив;
	МассивИзмененныхРеквизитов.Добавить("Партнер");
	МассивИзмененныхРеквизитов.Добавить("Договор");
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, МассивИзмененныхРеквизитов);
	
	ПродажиСервер.ПартнерПриИзменении(Объект);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	
	ОтборВидаЦен = Новый Структура("Владелец, ДоступноДляЗакупки", Объект.Партнер, Истина);
	Объект.ВидЦеныМатериалы = Справочники.ВидыЦенПоставщиков.ВидЦеныПоУмолчанию(Объект.ВидЦеныМатериалы, ОтборВидаЦен);
	Если ЗначениеЗаполнено(Объект.ВидЦеныМатериалы) Тогда
		ЗаполнитьЦеныПоВидуЦенМатериаловСервер(Ложь);
	КонецЕсли;
	
	ПриИзмененииСкладаСервер("Продукция");
	ПриИзмененииСкладаСервер("Материалы");
	
	ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Продукция, ЗависимыеРеквизиты("Продукция"));
	
	НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВТаблице(Объект.Материалы, Объект.Партнер);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	УстановитьВидимостьЭлементовПоНалогообложениюСервер();
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
	ОбновитьНазначения();
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		РеквизитыДоговора = "ГруппаФинансовогоУчета, Подразделение";
		РеквизитыДоговора = Новый Структура(РеквизитыДоговора);
		РеквизитыДоговора.Вставить("Валюта", "ВалютаВзаиморасчетов");
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, РеквизитыДоговора);
		Для Каждого ТекущийРеквизит Из РеквизитыДоговора Цикл
			Если ЗначениеЗаполнено(ТекущийРеквизит.Значение) Тогда
				Объект[ТекущийРеквизит.Ключ] = ТекущийРеквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВалютаДокумента = Объект.Валюта Тогда
			ПересчитатьСуммыДокументаВВалюту();
			ВалютаДокумента = Объект.Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииШаблонаНазначенияВДокументе();
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	
	АктуализироватьНалогообложениеНДС();
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Договор, ВалютаДокумента");
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	
	ОбновитьНазначения();
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтавкиНДССервер(КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	Для Каждого ТекущаяСтрока Из Объект.Продукция Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	УстановитьВидимостьЭлементовПоНалогообложениюСервер();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы, КэшированныеЗначения)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		ПересчитатьСуммыДокументаВВалюту();
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "ВалютаДокумента");
	
	ВалютаДокумента = Объект.Валюта;
	
	ОбновитьНазначения();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыДокументаВВалюту()
	
	СтараяВалюта  = ВалютаДокумента;
	НоваяВалюта   = Объект.Валюта;
	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	СтруктурыКурсов = ВзаиморасчетыСервер.КурсыВалютДляПересчета(ЭтотОбъект, СтараяВалюта, НоваяВалюта, ВалютаРегламентированногоУчета, ДатаДокумента);
	СтруктураКурсовСтаройВалюты = СтруктурыКурсов.СтруктураКурсовСтаройВалюты;
	СтруктураКурсовНовойВалюты  = СтруктурыКурсов.СтруктураКурсовНовойВалюты;
	
	// Пересчет сумм в продукции
	
	ПараметрыПересчета =
		Ценообразование.ПараметрыПересчетаСуммТаблицыВВалюту(
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			ДатаДокумента,
			ВалютаРегламентированногоУчета);
	ПараметрыПересчета.СтавкаНДС = Объект.СтавкаНДС;
	
	Ценообразование.ПересчитатьСуммыТаблицыВВалюту(Объект.Продукция, ПараметрыПересчета);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Продукция, ЗависимыеРеквизиты("Продукция"));
	
	// Пересчет сумм в материалах
	ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Материалы, СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Материалы, ЗависимыеРеквизиты("Материалы"));
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(
			Таблица, Знач СтруктураКурсовСтаройВалюты, Знач СтруктураКурсовНовойВалюты)
	
	СуммаКРаспределению = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
							Таблица.Итог("Сумма"), СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
	
	МассивСумм = Новый Массив;
	
	Для Х = 0 По Таблица.Количество() - 1 Цикл
		
		ТекСтрока = Таблица[Х];
		
		ТекСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
							ТекСтрока.Цена, СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
		
		СуммаВНовойВалюте = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
							ТекСтрока.Сумма, СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
		
		МассивСумм.Добавить(СуммаВНовойВалюте);
		
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для Х = 0 По Таблица.Количество() - 1 Цикл
			
			ТекСтрока = Таблица[Х];
			ТекСтрока.Сумма = МассивСумм[Х];
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалогообложенияНДССервер(КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект, Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Продукция, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьВидимостьЭлементовПоНалогообложениюСервер();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Продукция" Тогда
		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
		Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
		
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Продукция, Ложь);
		
		ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
		
		Если Не СкладГруппа Тогда
			Элементы.ПродукцияГруппаОтправитель.Заголовок = НСтр("ru = 'Подразделение-отправитель';
																|en = 'Shipping business unit'");
		Иначе
			Элементы.ПродукцияГруппаОтправитель.Заголовок = НСтр("ru = 'Отправитель';
																|en = 'Shipper'");
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		
		СкладПоступленияГруппа =
			Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.СкладПоступления);
		Элементы.МатериалыЗаполнитьСклад.Доступность = СкладПоступленияГруппа;
		
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(
			Объект.СкладПоступления, СкладПоступленияГруппа, Объект.Материалы, Ложь);
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект[ИмяТЧ], СтруктураДействий, КэшируемыеЗначения);
	
	УстановитьПараметрыВыбораТоварыСклад(ИмяТЧ);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТЧ);
	ПодготовитьЗаполнитьУстановитьВидимостьСерий(ИмяТЧ);
	
	АктуализироватьНалогообложениеНДС();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		ПродажиСервер.ПартнерПриИзменении(Объект);
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Контрагент");
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности,, Объект.Договор);
	КонецЕсли;
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	АктуализироватьНалогообложениеНДС();
	ОбновитьНазначения();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер(КэшированныеЗначения)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(
				Объект.НаправлениеДеятельности,, Объект.Договор);
			
		КонецЕсли;
		
		ОбновитьНазначения();
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(
		Объект.Организация, Объект.БанковскийСчет,, Объект.НаправлениеДеятельности);
		
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(
		Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Организация");
	
	АктуализироватьНалогообложениеНДС(Истина, КэшированныеЗначения);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииНеОтгружатьЧастямиСервер(УчитыватьСостояниеОбеспечения = Ложь)
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.НеОтгружатьЧастями Тогда
		
		Объект.ДатаОтгрузки = МаксимальнаяДатаОтгрузки();
		
		ЗаполнитьДатыОтгрузки(ЭтотОбъект, Объект.ДатаОтгрузки, Неопределено);
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Продукция.ДатаОтгрузки");
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииПоступлениеОднойДатойСервер()
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.ПоступлениеОднойДатой Тогда
		
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		
		ЗаполнитьДатыПоступления(ЭтотОбъект, Объект.ДатаПоступления, Неопределено);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	АктуализироватьНалогообложениеНДС();
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Дата");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТабЧасти = "", ОбновитьКолонкуДоступно = Истина)
	
	Если Не ИмяТабЧасти = "Продукция" Тогда
		
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(
			Объект.Материалы, ТаблицаСкладовПоступления, СкладПоступленияГруппа);
		
		ВсегоСкладов = ТаблицаСкладовПоступления.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
			НадписьНесколькоСкладовПоступления, Элементы.КартинкаНесколькоСкладовПоступления, ВсегоСкладов);
		
		Если ОбновитьКолонкуДоступно Тогда
			ОбновитьКолонкуДоступноСервер();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ИмяТабЧасти = "Материалы" Тогда
		
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Продукция, ТаблицаСкладов, СкладГруппа);
		
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
			НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
	АктуализироватьНалогообложениеНДС();
	ОбновитьНазначения();
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "НаправлениеДеятельности");
	
КонецПроцедуры

&НаСервере
Процедура ТоварыДатаОтгрузкиПриИзмененииСервер()
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Продукция.ДатаОтгрузки");
	
КонецПроцедуры

&НаСервере
Процедура ДатаСогласованияПриИзмененииСервере()
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "ДатаСогласования");
	
КонецПроцедуры

&НаСервере
Процедура ДатаОтгрузкиПриИзмененииСервер()
	
	ЗаполнитьДатыОтгрузки(ЭтотОбъект, Объект.ДатаОтгрузки, Неопределено);
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Продукция.ДатаОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымДавальца(НомерПоДаннымПартнера)
	
	СписокЗаказов = ЗаказыДавальцаСОдинаковымВходящимНомером(Объект.Ссылка, Объект.Контрагент, НомерПоДаннымПартнера);
	
	Если СписокЗаказов.Количество() > 0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		
		Если СписокЗаказов.Количество() = 1 Тогда
			ТекстВопроса = НСтр(
				"ru = 'В информационной базе уже существует заказ с таким же номером по данным давальца. Продолжить?';
				|en = 'Order with such number by data of the material provider already exists. Continue?'");
			СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть заказ';
																|en = 'Open order'"));
		Иначе
			ТекстВопроса = НСтр(
				"ru = 'В информационной базе уже существуют заказы с таким же номером по данным давальца. Продолжить?';
				|en = 'Orders with such number by data of the material provider already exist. Continue?'");
			СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть список заказов';
																|en = 'Open order list'"));
		КонецЕсли;
		
		СписокКнопок.Добавить("Продолжить", НСтр("ru = 'Продолжить';
												|en = 'Continue'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
					"ПроверитьНаличиеЗаказовПоДаннымДавальцаЗавершение",
					ЭтотОбъект,
					Новый Структура("СписокЗаказов", СписокЗаказов)),
			ТекстВопроса,
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымДавальцаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СписокЗаказов = ДополнительныеПараметры.СписокЗаказов;
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "ОткрытьСписокЗаказов" Тогда
	
		Если СписокЗаказов.Количество() > 1 Тогда
	
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокДокументов", СписокЗаказов);
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Заказы давальцев (%КоличествоДокументов%)';
														|en = 'Subcontracting sales orders (%КоличествоДокументов%)'"));
	
			ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы);
	
		Иначе
	
			ПараметрыФормы = Новый Структура("Ключ", СписокЗаказов.Получить(0).Значение);
			ОткрытьФорму("Документ.ЗаказДавальца2_5.ФормаОбъекта", ПараметрыФормы);
	
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Продукция

&НаСервере
Процедура ПродукцияВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения)
	
	Изменения = ОбеспечениеВДокументахСервер.ВариантОбеспеченияПриИзменении(
		ЭтотОбъект,
		Элементы.Продукция.ТекущаяСтрока);
		
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимВыборДействияНепосредственно();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВариантОбеспеченияПриИзмененииПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	ПродукцияВариантОбеспеченияПриИзмененииНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияПередОкончаниемРедактированияСервер(КешСтроки, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КешСтроки, "Номенклатура, Характеристика, Спецификация");
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", 					ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 				Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Продукция));
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияСкладПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Продукция));
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Продукция");
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьУпрощеннуюСхемуОплаты   = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	ИспользоватьГрафикиОплаты           = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	
	ИспользоватьНаправленияДеятельности =
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	
	ВариантОбеспеченияИФлагОбособленно =
		ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(Истина);
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев2_5");
	
	ИспользоватьПричиныОтменыЗаказовКлиентов    =
		ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ПравоНаЧтениеВидаЦены =
		ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказДавальца2_5.ТабличныеЧасти.Продукция.Реквизиты.ВидЦены);
	
	ПараметрыВыбораРеквизитов =
		ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Документы.ЗаказДавальца2_5);
	
	Элементы.ГруппаСтатус.Видимость      = ИспользоватьСтатусы;
	Элементы.Основание.Видимость = ЗначениеЗаполнено(Объект.Основание);
	Элементы.ЗакрытьЗаказ.Доступность    = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказДавальца2_5);
	
	Элементы.ПродукцияГруппаОтменено.Видимость                      = ИспользоватьПричиныОтменыЗаказовКлиентов;
	Элементы.ПродукцияОтмененоПричиныОтменыНеИспользуются.Видимость = Не ИспользоватьПричиныОтменыЗаказовКлиентов;
	
	ВалютаДокумента = Объект.Валюта;
	
	ВидЦеныМатериалыДоИзменения = Объект.ВидЦеныМатериалы;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
	УстановитьПараметрыВыбораТоварыСклад("Продукция");
	
	СкладПоступленияГруппа =
		Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.СкладПоступления);
	Элементы.МатериалыЗаполнитьСклад.Доступность = СкладПоступленияГруппа;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		Элементы.ПродукцияПодразделение.Видимость = Ложь;
	ИначеЕсли Не СкладГруппа Тогда
		Элементы.ПродукцияПодразделение.Заголовок = НСтр("ru = 'Подразделение-отправитель';
														|en = 'Shipping business unit'");
	КонецЕсли;
	
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС                          = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПередачеПродукцииДавальцу = Истина;
	ПараметрыВыбораВидаЦены.Статус                                   = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
	УстановитьПараметрыВыбораТоварыСклад("Материалы");
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Продукция, ЗависимыеРеквизиты("Продукция"));
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Материалы , ЗависимыеРеквизиты("Материалы"));
	
	ДоступноОписаниеТипаПроизводственногоПроцесса =
		УправлениеДаннымиОбИзделиях.ДоступноОписаниеТипаПроизводственногоПроцесса();
		
	Элементы.ТипПроизводственногоПроцесса.Видимость = ДоступноОписаниеТипаПроизводственногоПроцесса;
	
	Если ДоступноОписаниеТипаПроизводственногоПроцесса Тогда
		
		ИсключаемыеТипы = Новый Массив;
		ИсключаемыеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций);
		ИсключаемыеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
		
		ПроизводствоСервер.ЗаполнитьСписокТиповПроизводственногоПроцесса(
			Элементы.ТипПроизводственногоПроцесса, ИсключаемыеТипы);
		
	КонецЕсли;
	
	ОбновитьСостояниеСервер();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказДавальца2_5));
	
	Элементы.ПродукцияСерия.Видимость = ПараметрыУказанияСерий.Продукция.ИспользоватьСерииНоменклатуры;
	Элементы.МатериалыСерия.Видимость = ПараметрыУказанияСерий.Материалы.ИспользоватьСерииНоменклатуры;
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	ЗаполнитьПараметрыВыбораСпецификаций();

	ЗаполнитьСлужебныеРеквизиты();
	ПриИзмененииСкладаВТабличнойЧастиСервер(, Ложь);
	
	АктуализироватьНалогообложениеНДС(Ложь);
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Продукция);
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.Материалы);
	
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	УстановитьВидимостьОбеспечения();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	ПоместитьЭтапыОплатыВоВременноеХранилище(Элемент.Имя);
	ВзаиморасчетыКлиент.НадписьЭтапыОплатыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ИзмененныеРеквизиты = Результат.СтарыеЗначенияИзмененныхРеквизитов;
		ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты);
	КонецЕсли;
КонецПроцедуры

#Область Продукция

#Область Обеспечение

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияПроблемаНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияОтгружаетсяНажатие(Элемент)
	
	ГиперссылкаСостояниеОбеспеченияНажатиеОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСостояниеОбеспеченияНажатиеОбщий()
	
	ПараметрыФормы = ОбеспечениеВДокументахКлиент.ГиперссылкаСостояниеОбеспеченияНажатие(ЭтотОбъект);
	
	Если ПараметрыФормы.КонтекстИспользования = "ТАБЛИЦА" Тогда
		
		ПараметрыФормы.АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СостояниеОбеспеченияЗаказов.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаСервере
Процедура НоменклатураПродукцияПриИзмененииСервер(КэшированныеЗначения)

	ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", 			ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", 				ПараметрыЗаполненияСкладаВСтроке("Продукция"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", 					ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 				Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Продукция));
	
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");	
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередОкончаниемРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ПродукцияПередОкончаниемРедактированияСервер(ДополнительныеПараметры.КэшСтроки, КэшированныеЗначения);
		
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
		
		Возврат;
		
	КонецЕсли;
	
	ОчиститьМатериалыПоСпецификациям(Объект.Материалы, ДополнительныеПараметры.СпецификацииКУдалению);
	ОбновитьСписокВыбораСпецификаций(Элементы, Объект.Продукция);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалениемЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтрокиКУдалению Из Параметры.ИдСтрокКУдалению Цикл
		Объект.Продукция.Удалить(Объект.Продукция.НайтиПоИдентификатору(ИдСтрокиКУдалению));
	КонецЦикла;
	
	ОбновитьСписокВыбораСпецификаций(Элементы, Объект.Продукция);
	
	ОчиститьМатериалыПоСпецификациям(Объект.Материалы, Параметры.СпецификацииКУдалению);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаСервере
Процедура НоменклатураМатериалыПриИзмененииСервер(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)

	ТекущаяСтрока = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура МатериалыУстановитьДействиеВСтрокахНаСервере(Действие, Знач ИдентификаторыСтрок, КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		// фильтры
		
		ДанныеСтроки.Действие = Действие;
		МатериалыПриИзмененииДействияВСтроке(ЭтотОбъект, ДанныеСтроки);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииДействияВСтрокеМатериалов(ЭтотОбъект, ДанныеСтроки, СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МатериалыПриИзмененииДействияВСтроке(Форма, ДанныеСтроки)
	
	Если ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся") Тогда
		
		ДанныеСтроки.Склад           = Неопределено;
		ДанныеСтроки.ДатаПоступления = Дата(1, 1, 1);
		ДанныеСтроки.Цена            = 0;
		ДанныеСтроки.Сумма           = 0;
		
	ИначеЕсли Не Форма.СкладПоступленияГруппа Тогда
		
		ДанныеСтроки.Склад           = Форма.Объект.СкладПоступления;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиКомандФормы

#Область Шапка

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказДавальца2_5.ФормаДокумента.Команда.ЗакрытьЗаказФрагмент");
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму(
		"Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия",
		СтруктураЗакрытия,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЗаказФрагмент", ЭтотОбъект);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи",ОписаниеОповещения);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗачтенаОплатаСервер(ИмяСобытия, Параметр, Источник)
	
	ОбновитьСостояниеСервер();
	
	// Взаиморасчеты
	ВзаиморасчетыСервер.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец Взаиморасчеты
	
КонецПроцедуры

#КонецОбласти

#Область Продукция

&НаКлиенте
Процедура ПродукцияЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ВыбранныйСклад = Результат;
	
	Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
	
		ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад, "Продукция");
	
		СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
			ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
	
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Продукция");

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПодразделениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПродажиКлиент.ОбработкаВыбораПодразделения(Объект.Продукция, Элементы.Продукция.ВыделенныеСтроки, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПолучательЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТЧ = ДополнительныеПараметры.СтрокиТЧ;
	Для каждого СтрокаТаблицы Из СтрокиТЧ Цикл
		СтрокаТаблицы.Получатель = Результат;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Получатель заполнен';
			|en = 'Recipient is filled in'"),,
		НСтр("ru = 'Для выделенных строк выполнено заполнение получателя';
			|en = 'Recipients are filled in for the selected lines'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьЦеныПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, Истина, КэшированныеЗначения);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ИмяТЧ = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Материалы, "Материалы", "Продукция");
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, ИмяТЧ, Элементы[ИмяТЧ]);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Продукция", Элементы.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
			ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "ОбновитьКэшНоменклатура");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
			НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		УстановитьКлючиВСтрокахПродукции(Элементы, Объект, НоваяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьОсновнойСпецификациейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОсновнойСпецификациейЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

#Область Обеспечение

&НаКлиенте
Процедура ПродукцияКОбеспечению(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_КОБЕСПЕЧЕНИЮ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНеОбеспечивать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_НЕОБЕСПЕЧИВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтгрузить(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_ОТГРУЗИТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРезервировать(Команда)
	
	ОбеспечениеУстановитьДействиеСВопросом("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРезервироватьПоМереПоступления(Команда)
	
	ОбеспечениеУстановитьДействие("ДЕЙСТВИЕ_РЕЗЕРВИРОВАТЬПОМЕРЕПОСТУПЛЕНИЯ");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ЕстьТоварыКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
	
	Если ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен И Не Модифицированность Тогда
		
		// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать.
		ОбъектыОснований = Новый Массив();
		ОбъектыОснований.Добавить(Объект.Ссылка);
		
		ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
		
		Если ДополнительныеПараметры.Резервирование Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ДополнительныеПараметры.ОписаниеКоманды);
		Иначе
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ДополнительныеПараметры.ОписаниеКоманды);
		КонецЕсли;
		
	ИначеЕсли Не ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен  Тогда
		ТекстОшибки = НСтр("ru = 'Нет ни одного товара который требуется обеспечить';
							|en = 'There is no item to provide'");
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат)
	
	СтруктураРезультата = ОбеспечениеВДокументахСервер.УстановитьДействиеПослеВопроса(Ответ, Результат, ЭтотОбъект);
	ПослеЗаполненияОбеспечения(
		СтруктураРезультата.ТаблицаИзменений,
		ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
		СтруктураРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеУстановитьДействиеСВопросом(КодДействия, ВыделенныеСтроки = Неопределено)
	
	Результат = ОбеспечениеУстановитьДействие(КодДействия, ВыделенныеСтроки);
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросЗаполнятьОбеспечениеЦелымиУпаковками(
		ЭтотОбъект,
		Объект.Продукция,
		Результат,
		"ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатой(
			ЭтотОбъект,
			Объект.Продукция,
			Результат,
			"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(КодДействия, АдресАналитик, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ЗаполнитьОбеспечениеИзФормыСостоянияОбеспечения(
		КодДействия,
		АдресАналитик,
		ЭтотОбъект);
	
	Режим = ОбеспечениеВДокументахКлиентСервер.РежимСостоянияОбеспечения();
	ПослеЗаполненияОбеспечения(Изменения, Режим, ПараметрыЗаполнения);
	АдресТаблицыДвижений = АдресТаблицыДвиженийВХранилище();
	Возврат АдресТаблицыДвижений;
	
КонецФункции

&НаСервере
Функция ОбеспечениеУстановитьДействие(КодДействия, ВыделенныеСтроки = Неопределено)
	
	Результат = ОбеспечениеВДокументахСервер.ОбеспечениеУстановитьДействиеСтруктураРезультата();
	
	Изменения = ОбеспечениеВДокументахСервер.УстановитьДействие(
		КодДействия,
		ЭтотОбъект,
		?(ЗначениеЗаполнено(ВыделенныеСтроки), ВыделенныеСтроки, Элементы.Продукция.ВыделенныеСтроки));
		
		ЗаполнитьЗначенияСвойств(Результат, Изменения);
		
		Если Изменения.ТаблицаИзменений <> Неопределено Тогда
			ПослеЗаполненияОбеспечения(
				Изменения.ТаблицаИзменений,
				ОбеспечениеВДокументахКлиентСервер.РежимВыборДействия(),
				Результат);
		КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьВыборСкладаИСерииНаСервере(ВыбранноеЗначение, ПараметрыФормы, ПараметрыЗаполнения)
	
	Модифицированность = Истина;
	Изменения = ОбеспечениеВДокументахСервер.ПриВыбореСклада(
		ВыбранноеЗначение,
		ЭтотОбъект,
		Элементы.Продукция.ТекущаяСтрока,
		ПараметрыФормы.ЗаполняемыеПоля);
		
	ПослеЗаполненияОбеспечения(Изменения, ПараметрыФормы.Режим, ПараметрыЗаполнения);
	ТекстОбработаноСтрок = ОбеспечениеВДокументахСервер.ТекстОбработаноСтрок(Изменения.Количество());
	Возврат ТекстОбработаноСтрок;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Материалы

&НаКлиенте
Процедура МатериалыЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ВыбранныйСклад = Результат;
	
	Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
	
		ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад, "Материалы");
	
		СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
			ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
	
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьПоСпецификациямЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МатериалыЗаполнитьПоСпецификациямФрагмент(РезультатВопроса = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьПоСпецификациямФрагмент(Знач ЗаполнятьМатериалы)
	
	Если ЗаполнятьМатериалы Тогда
		МатериалыЗаполнитьПоСпецификациямНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ИмяТЧ = ?(Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМатериалы,  "Материалы", "Продукция");
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, ИмяТЧ, Элементы[ИмяТЧ]);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Материалы", Элементы.Материалы);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьМатериалыИзВременногоХранилищаСервер(Результат);
		
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаполнитьПоСпецификациямНаСервере()
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"Документ.ЗаказДавальца2_5.Форма.ФормаДокумента.Команда.Материалы_Заполнить_ЗаполнитьПоСпецификациям");
	
	СписокНоменклатуры = Справочники.РесурсныеСпецификации.СписокНоменклатуры();
	
	Для Каждого СтрТЧ Из Объект.Продукция Цикл
		
		Если СтрТЧ.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТЧ, "Номенклатура, Характеристика, Количество, Спецификация");
		НоваяСтрока.НачалоПроизводства      = Объект.Дата;
		НоваяСтрока.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		
	КонецЦикла;
	
	Объект.Материалы.Очистить();
	
	ТаблицаТоваров = Объект.Материалы.Выгрузить(, "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Спецификация, Количество");
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	ПараметрыСпецификаций = Новый Структура;
	ПараметрыСпецификаций.Вставить("ПереченьДанных",     "МатериалыИУслуги, ВходящиеИзделия");
	ПараметрыСпецификаций.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	ПараметрыСпецификаций.Вставить("Подразделение",	     Объект.Подразделение);
	
	Документы.ЗаказДавальца2_5.МатериалыПоСпецификациям(ПараметрыСпецификаций, ТаблицаТоваров);
	
	ТаблицаТоваров.Сортировать("Номенклатура, Характеристика, Спецификация");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если СтрокаТовара.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Спецификация содержит материал с типом ""Работа"" (%1). Добавление работ в заказ давальцу не допускается.';
					|en = 'Bill of materials contains material with type ""Work"" (%1). Adding activities to material provider order is not allowed.'"),
				СтрокаТовара.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура("ПроверитьЗаполнитьСклад", ПараметрыЗаполненияСкладаВСтроке("Материалы"));
		
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
		СтруктураДействий.Вставить("ЗаполнитьДействиеПоПерерабатываемымМатериалам");
		
		СтруктураДействий.Вставить(
			"ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Материалы));
	
		СтруктураДействий.Вставить(
			"НоменклатураПриИзмененииПереопределяемый",
			Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Материалы"));
		
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
		
		СтруктураДействий.Вставить(
			"ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
				Объект,
				"ВидЦеныМатериалы"));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Объект.Материалы.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти, ТаблицаФормы)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить(
		"ПроверитьЗаполнитьСклад", ПараметрыЗаполненияСкладаВСтроке(ИмяТабличнойЧасти));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
		
		СтруктураДействийСДобавленнымиСтроками.Вставить(
			"ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
				Объект, "ВидЦеныМатериалы"));
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДействиеПоПерерабатываемымМатериалам");
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействийСДобавленнымиСтроками);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействийСИзмененнымиСтроками);
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
		
	Иначе // Продукция
		
		СтруктураДействийСДобавленнымиСтроками.Вставить(
			"ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
		СтруктураДействийСДобавленнымиСтроками.Вставить(
			"ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
		
		ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействийСДобавленнымиСтроками, ЭтотОбъект);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(
			СтруктураДействийСДобавленнымиСтроками, Объект);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(
			СтруктураДействийСИзмененнымиСтроками, Объект);
		
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	СтруктураДействий.Штрихкоды									= ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками	= СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками		= СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий					= ПараметрыУказанияСерий[ИмяТабличнойЧасти];
	СтруктураДействий.ИмяТЧ										= ИмяТабличнойЧасти;
	СтруктураДействий.ИзменятьКоличество						= Истина;
	СтруктураДействий.ТолькоТовары								= ИмяТабличнойЧасти = "Материалы";
	СтруктураДействий.ТолькоТоварыИРабота						= Не СтруктураДействий.ТолькоТовары;
	СтруктураДействий.ДополнятьТарой							= ИмяТабличнойЧасти = "Материалы";
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(
		СтруктураДействий, КэшированныеЗначения, ЭтотОбъект);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		ИмяТекущейТабличнойЧасти   = ИмяТабличнойЧасти;
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		ТаблицаФормы.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Продукция" Тогда
		УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ИмяТЧ = СтруктураПараметровДействия.ИмяТЧ;
	
	Если ИмяТЧ = "Продукция" Тогда
		ДобавитьДействияОбеспеченияНаСервере(
			СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками,
			"ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
	КонецЕсли;
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(
		ЭтотОбъект, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
		
	Если ИмяТЧ = "Продукция" Тогда
		ОбновитьКолонкуДоступноСервер();
		ОбеспечениеВДокументахКлиентСервер.УдалитьДействияОбеспечения(СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками);
	КонецЕсли;
	
	Если СтруктураПараметровДействия.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущаяСтрока = Объект[ИмяТЧ].НайтиПоИдентификатору(СтруктураПараметровДействия.ТекущаяСтрока); // ДанныеФормыЭлементКоллекции
		
		Если ИмяТЧ = "Продукция" Тогда
			
			МассивНовыхСтрок = Новый Массив;
			МассивДанныхПоНоменклатуре = Новый Массив;
			
			МассивНовыхСтрок.Добавить(ТекущаяСтрока);
			МассивДанныхПоНоменклатуре.Добавить(Документы.ЗаказДавальца2_5.ДанныеПоНоменклатуре(Объект, ТекущаяСтрока));
			
			УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
				МассивНовыхСтрок, МассивДанныхПоНоменклатуре, ПараметрыВыбораСпецификаций);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТЧ);
	
КонецПроцедуры

#КонецОбласти

#Область Ценообразование

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, ПоВыделеннымСтрокам, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ПараметрыЗаполнения.Дата           = Объект.Дата;
	ПараметрыЗаполнения.Валюта         = Объект.Валюта;
	ПараметрыЗаполнения.Организация    = Объект.Организация;
	ПараметрыЗаполнения.ВидЦены        = ВидЦен;
	ПараметрыЗаполнения.ПоляЗаполнения = "Цена, ВидЦены";
	
	МассивСтрок = Неопределено;
	
	Если ПоВыделеннымСтрокам Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Продукция.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Продукция.НайтиПоИдентификатору(Строка));
		КонецЦикла;
		
	КонецЕсли;
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(Объект.Продукция, МассивСтрок, ПараметрыЗаполнения);
	Если ЦеныРассчитаны Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
		
		КоллекцияСтрок = ?(ПоВыделеннымСтрокам, МассивСтрок, Объект.Продукция);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КоллекцияСтрок, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
		
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЦеныПоВидуЦенМатериаловСервер(ПоВыделеннымСтрокам)
	
	Если ПоВыделеннымСтрокам Тогда
		ОбрабатываемыеСтроки = Новый Массив;
		Для Каждого ТекущаяСтрока Из Элементы.Материалы.ВыделенныеСтроки Цикл
			ОбрабатываемыеСтроки.Добавить(Объект.Материалы.НайтиПоИдентификатору(ТекущаяСтрока));
		КонецЦикла;
	Иначе
		ОбрабатываемыеСтроки = Объект.Материалы;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить(
		"ЗаполнитьЦенуЗакупки",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
			Объект, "ВидЦеныМатериалы"));
			
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбрабатываемыеСтроки, СтруктураДействий, Неопределено);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтруктураДействий

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий)
	
	СтруктураХарактеристики  = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураТипНоменклатуры = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураАртикул         = Новый Структура("Номенклатура", "Артикул");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураХарактеристики);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураТипНоменклатуры);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", СтруктураАртикул);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Продукция"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий)
	
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииДействияВСтрокеМатериалов(Форма, ДанныеСтроки, СтруктураДействий)
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц",
		ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить(
		"ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ДанныеСтроки.Склад, Форма.ПараметрыУказанияСерий.Материалы));
	
	Если ДанныеСтроки.Действие =
			ПредопределенноеЗначение("Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение") Тогда
		
		СтруктураДействий.Вставить(
			"ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
				Форма.Объект,
				"ВидЦеныМатериалы"));
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, Форма)
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(
		СтруктураДействий, Форма, "Объект.Продукция");
	
	ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры(
		СтруктураДействий,
		Форма,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
		Форма.Объект.Организация,
		Форма.Объект.Подразделение,
		"Объект.Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект, ВариантОбеспеченияИФлагОбособленно);
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, ПоляСтрокой)
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект, ВариантОбеспеченияИФлагОбособленно);
	
	ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура ПодобратьТовар(ИмяТЧ)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%';
							|en = 'Pick goods in %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ давальца';
																				|en = 'subcontracting sales order'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",        Объект.Ссылка);
	ПараметрыФормы.Вставить("Партнер",         Объект.Партнер);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Валюта",          Объект.Валюта);
	ПараметрыФормы.Вставить("Дата",            Объект.Дата);
	ПараметрыФормы.Вставить("Заголовок",       ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Подразделение",   Объект.Подразделение);
	
	Если ИмяТЧ = "Продукция" Тогда
		
		ПараметрыФормы.Вставить("Организация",        Объект.Организация);
		ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		ПараметрыФормы.Вставить("Назначение",         Объект.Назначение);
		
		ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",         Истина);
		ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",       Истина);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий",           ПараметрыУказанияСерий[ИмяТЧ]);
		ПараметрыФормы.Вставить("ДопустимыеОбособленныеДействия",   ОбеспечениеВДокументахКлиентСервер.ВсеДействия());
		ПараметрыФормы.Вставить("ДопустимыеНеобособленныеДействия", Новый СписокЗначений());
		ПараметрыФормы.Вставить("ТолькоОбособленно",                Истина);
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",          НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь));
		ПараметрыФормы.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", Истина);
		
		ПараметрыФормы.Вставить(
			"ДоступныеОстаткиПараметрыДокумента",
			ОбеспечениеВДокументахКлиент.ДоступныеОстаткиПараметрыДокумента(ЭтотОбъект));
		
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументПродажи.Форма";
		
	Иначе
		
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",           НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",              Истина);
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",            Истина);
		ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",   Истина);
		ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
		ПараметрыФормы.Вставить("Склад",                             Объект.СкладПоступления);
		
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументЗакупки.Форма";
		
	КонецЕсли;
	
	ОткрытьФорму(ФормаПодбораТоваров, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Валюта"" не заполнено';
				|en = '""Currency"" is required'"), Объект.Ссылка, "Объект.Валюта",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ)
	
	ТаблицаТоваров   = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище); // ТаблицаЗначений
	ТаблицаДокумента = Объект[ИмяТЧ]; // ДанныеФормыКоллекция
	
	СписокСвойств = "Номенклатура, Характеристика, Упаковка, Склад, Цена, КоличествоУпаковок";
	Если ИмяТЧ = "Продукция" Тогда
		СписокСвойств = СписокСвойств + ", Серия, ВидЦены, ВариантОбеспечения, Обособленно, ДатаОтгрузки";
	Иначе
		СписокСвойств = СписокСвойств + ", НоменклатураПартнера";
	КонецЕсли;
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураПересчетаСуммы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий);
		
		Если ИмяТЧ = "Продукция" Тогда
			
			Если Объект.НеОтгружатьЧастями Тогда
				ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЕсли;
			
			СтруктураДействий.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
			СтруктураДействий.Вставить(
				"ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			
			ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
			Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
				ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения");
			КонецЕсли;
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
			
			СтруктураЗаполненияСпецификации =
				УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
					Объект, ТекущаяСтрока, ПараметрыВыбораСпецификаций);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
			
			ДобавитьДействияОчиститьЗаполнитьСтатьюАналитику(СтруктураДействий, ЭтотОбъект);
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда // Поставка
			
			Если Объект.ПоступлениеОднойДатой Тогда
				ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
			КонецЕсли;
			
			СтруктураДействий.Вставить("ЗаполнитьДействиеПоПерерабатываемымМатериалам");
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
			
			СтруктураДействий.Вставить(
				"ЗаполнитьЦенуЗакупки",
				ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
					Объект,
					"ВидЦеныМатериалы"));
			
			СтруктураДействий.Вставить(
				"НоменклатураПриИзмененииПереопределяемый",
				Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, ИмяТЧ));
		
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
			
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ИмяТЧ = "Продукция" Тогда
			
			ТекущаяСтрока.ДатаОтгрузки = ОбеспечениеВДокументахСервер.ДатаОтгрузкиОбработкаВыбораПодбор(
				СтрокаТовара.ДатаОтгрузки,
				ТекущаяСтрока.ВариантОбеспечения,
				НачалоДня);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТЧ = "Продукция" Тогда
		ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузкиОднойДатой(
			Объект.НеОтгружатьЧастями,
			Объект.ДатаОтгрузки,
			Объект.Продукция,
			"ДатаОтгрузки");
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
	
	Если ИмяТЧ = "Продукция" Тогда
		ОбновитьКолонкуДоступноСервер();
	Иначе
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	КонецЕсли;
	
	УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ПодборМатериаловПоСпецификациямСервер(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	СписокСвойств  = "Номенклатура, Характеристика, КодСтроки, Спецификация, Упаковка, КоличествоУпаковок";
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаМатериала Из Объект.Материалы Цикл
		Если ЗначениеЗаполнено(СтрокаМатериала.Спецификация) Тогда
			СтрокиКУдалению.Добавить(СтрокаМатериала);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.Материалы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если СтрокаТовара.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура("ПроверитьЗаполнитьСклад", ПараметрыЗаполненияСкладаВСтроке("Материалы"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
		СтруктураДействий.Вставить("ЗаполнитьДействиеПоПерерабатываемымМатериалам");
		
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		
		СтруктураДействий.Вставить(
			"ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий.Материалы));
	
		СтруктураДействий.Вставить(
			"НоменклатураПриИзмененииПереопределяемый",
			Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Материалы"));
		
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
		
		СтруктураДействий.Вставить(
			"ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
				Объект,
				"ВидЦеныМатериалы"));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, ИмяТЧ)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "Продукция" Тогда
		ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеПодбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		"ОбработкаВыбораПодборНаКлиентеПослеВопроса");
	Иначе
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры, "Продукция");
	
КонецПроцедуры

#КонецОбласти

#Область Назначения

&НаСервере
Процедура ПриИзмененииШаблонаНазначенияВДокументе()
	
	ШаблонНазначения = Документы.ЗаказДавальца2_5.ШаблонНазначения(Объект);
	Если ШаблонНазначения.Заказ = Неопределено Тогда
		Объект.Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
		ОбеспечениеВДокументахСервер.ПриИзмененииРеквизитаДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий(ИмяТЧ)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект[ИмяТекущейТабличнойЧасти].НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(ИмяТекущейТабличнойЧасти, ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, ТекущиеДанные = Неопределено, Текст = "")
	
	Если ИмяТЧ = "Продукция" Тогда
		
		Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтотОбъект, ПараметрыУказанияСерий[ИмяТЧ], Текст, ТекущиеДанные)Тогда
			ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.';
									|en = 'An error occurred when attempting to specify batch. No server call is required to specify batch in this document.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
	
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(ОбеспечениеВДокументахКлиентСервер.РежимПодборСерий());
		
		Если ПараметрыФормы <> Неопределено Тогда
			ОткрытьФорму(
				"Обработка.ЗапросКоличестваИСерий.Форма",
				ПараметрыФормы,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	ИмяТЧ = ПараметрыФормыУказанияСерий.ПараметрыУказанияСерий.ИмяТЧ;
		
	НоменклатураКлиент.ОбработатьУказаниеСерии(Объект, ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область Спецификация

&НаКлиенте
Процедура ЗаполнитьСпецификациюВТабличнойЧасти(
			ИмяТаблицы, 
			ИмяСвязаннойТаблицы, 
			ИмяПоляСпецификация, 
			ИзмененныеСтроки, 
			ИмяПроцедуры, 
			ТекстВопроса, 
			СвязанныеРеквизиты = Неопределено)
	
	Если ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныеСпецификации = 
		ОтобратьСвязанныеСпецификации(Объект, ИмяТаблицы, ИмяСвязаннойТаблицы, ИмяПоляСпецификация, ИзмененныеСтроки);
	
	Если СвязанныеСпецификации.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
		ДополнительныеПараметры.Вставить("ИмяСвязаннойТаблицы", ИмяСвязаннойТаблицы);
		ДополнительныеПараметры.Вставить("ИмяПоляСпецификация", ИмяПоляСпецификация);
		ДополнительныеПараметры.Вставить("ДанныеСтрок", ИзмененныеСтроки);
		ДополнительныеПараметры.Вставить("СвязанныеСпецификации", СвязанныеСпецификации);
		ДополнительныеПараметры.Вставить("СвязанныеРеквизиты", СвязанныеРеквизиты);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьСпецификацииСтрок(
			ЭтотОбъект, Объект, ИмяТаблицы, ИмяПоляСпецификация, ИзмененныеСтроки, СвязанныеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновнойСпецификациейЗавершение(ДанныеЗаполнения)
	
	ОчиститьМатериалыПоСпецификациям(
		Объект[ДанныеЗаполнения.ИмяСвязаннойТаблицы], ДанныеЗаполнения.СвязанныеСпецификации);
	
	ЗаполнитьСпецификацииСтрок(
		ЭтотОбъект,
		Объект,
		ДанныеЗаполнения.ИмяТаблицы,
		ДанныеЗаполнения.ИмяПоляСпецификация,
		ДанныеЗаполнения.ДанныеСтрок);
		
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновныеСпецификацииСтрок(
			ИмяТаблицы, ИмяПоляСпецификация, ИдентификаторыСтрок = Неопределено, ЗаполнитьПараметры = Ложь)
	
	ИзмененныеСтроки = Новый Соответствие;
	
	Если ИдентификаторыСтрок <> Неопределено И ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат ИзмененныеСтроки;
	КонецЕсли;
	
	ДанныеСтрок = Новый ТаблицаЗначений;
	ДанныеСтрок.Колонки.Добавить("Идентификатор");
	ДанныеСтрок.Колонки.Добавить(ИмяПоляСпецификация);
	
	ДанныеНоменклатуры = Новый Массив;
	
	ВыделенныеСтроки = ИдентификаторыСтрок <> Неопределено;
	ИсточникСтрок = ?(ВыделенныеСтроки, ИдентификаторыСтрок, Объект[ИмяТаблицы]);
	
	Для каждого УказательСтроки Из ИсточникСтрок Цикл
		
		СтрокаТаблицы = ?(ВыделенныеСтроки, Объект[ИмяТаблицы].НайтиПоИдентификатору(УказательСтроки), УказательСтроки);
		
		СтрокаДанных = ДанныеСтрок.Добавить();
		СтрокаДанных.Идентификатор = ?(ВыделенныеСтроки, УказательСтроки, УказательСтроки.ПолучитьИдентификатор());
		СтрокаДанных[ИмяПоляСпецификация] = СтрокаТаблицы[ИмяПоляСпецификация];
		
		ДанныеНоменклатуры.Добавить(Документы.ЗаказДавальца2_5.ДанныеПоНоменклатуре(Объект, СтрокаТаблицы));
		
	КонецЦикла;
	
	Если ЗаполнитьПараметры Тогда
		ЗаполнитьПараметрыВыбораСпецификаций();
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
		ДанныеСтрок, ДанныеНоменклатуры, ПараметрыВыбораСпецификаций, ИмяПоляСпецификация);
		
	Для каждого СтрокаДанных Из ДанныеСтрок Цикл
		
		СтрокаТаблицы = Объект[ИмяТаблицы].НайтиПоИдентификатору(СтрокаДанных.Идентификатор);
		
		Если СтрокаТаблицы[ИмяПоляСпецификация] <> СтрокаДанных[ИмяПоляСпецификация] Тогда
			
			ИзмененныеСтроки.Вставить(СтрокаДанных.Идентификатор, СтрокаДанных[ИмяПоляСпецификация]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпецификацииСтрок(
			Форма, Объект, ИмяТаблицы, ИмяПоляСпецификация, ДанныеСтрок, СвязанныеРеквизиты = Неопределено)
	
	Для каждого СтрокаДанных Из ДанныеСтрок Цикл
		СтрокаТаблицы = Объект[ИмяТаблицы].НайтиПоИдентификатору(СтрокаДанных.Ключ);
		СтрокаТаблицы[ИмяПоляСпецификация] = СтрокаДанных.Значение;
	КонецЦикла;
	
	Если СвязанныеРеквизиты <> Неопределено Тогда
		Для каждого ЭлементСвязиРеквизитов Из СвязанныеРеквизиты Цикл
			Форма[ЭлементСвязиРеквизитов.Ключ] = Объект[ЭлементСвязиРеквизитов.Значение];
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьСписокВыбораСпецификаций(Форма.Элементы, Объект[ИмяТаблицы]);
	РассчитатьИтоговыеПоказателиЗаказа(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтобратьСвязанныеСпецификации(Объект, ИмяТаблицы, ИмяСвязаннойТаблицы, ИмяПоляСпецификация, ДанныеСтрок)
	
	СвязанныеСпецификации = Новый Массив;
	
	Для каждого СтрокаДанных Из ДанныеСтрок Цикл
		
		СтрокаТаблицы = Объект[ИмяТаблицы].НайтиПоИдентификатору(СтрокаДанных.Ключ);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоляСпецификация]) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура(ИмяПоляСпецификация, СтрокаТаблицы[ИмяПоляСпецификация]);
		
		НайденныеСтроки = Объект[ИмяСвязаннойТаблицы].НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СвязанныеСпецификации.Добавить(СтрокаТаблицы[ИмяПоляСпецификация]);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СвязанныеСпецификации.Количество() > 0 Тогда
		СвязанныеСпецификации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СвязанныеСпецификации);
	КонецЕсли;
	
	Возврат СвязанныеСпецификации;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораСпецификаций(Элементы, Продукция)
	
	Спецификации = Элементы.МатериалыСпецификация.СписокВыбора;
	Спецификации.Очистить();
	
	// Определение списка выбора.
	Для Каждого СтрокаПродукции Из Продукция Цикл
		
		Если Не Спецификации.НайтиПоЗначению(СтрокаПродукции.Спецификация) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Спецификации.Добавить(
			СтрокаПродукции.Спецификация,
			?(Не ЗначениеЗаполнено(СтрокаПродукции.Спецификация), НСтр("ru = '<Не заполнена>';
																		|en = '<Not filled in>'"), ""));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки =
		Не ДокументОбъект.Статус = Перечисления.СтатусыЗаказовДавальцев.НеСогласован;
	
	СтруктураРезультата = ДокументОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	Если СтруктураРезультата.КоличествоСтрок > 0 Тогда
		ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументОбъект);
	КонецЕсли;
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьСлужебныеРеквизитыФормыДокумента();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Продукция, ЗависимыеРеквизиты("Продукция"));
		
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	ОбновитьКолонкуДоступноСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКлючиВСтрокахПродукции(Элементы, Объект, СтрокаБезКлюча = Неопределено)
	
	Если Не СтрокаБезКлюча = Неопределено Тогда
		
		// В процедуру передана конкретная строка
		Если СтрокаБезКлюча.КодСтроки = 0 Тогда
			
			СтрокаБезКлюча.КодСтроки = Объект.ПродукцияМаксимальныйКодСтроки + 1;
			Объект.ПродукцияМаксимальныйКодСтроки = СтрокаБезКлюча.КодСтроки;
			
		КонецЕсли;
		
	Иначе
		
		// Необходимо проверить установку кода строки для всех строк
		СтрокиБезКлюча = Объект.Продукция.НайтиСтроки(Новый Структура("КодСтроки", 0));
		
		Если СтрокиБезКлюча.Количество() > 0 Тогда
			
			ТекущийКод = Объект.ПродукцияМаксимальныйКодСтроки;
			
			Для Каждого СтрокаБезКлюча Из СтрокиБезКлюча Цикл
				
				ТекущийКод = ТекущийКод + 1;
				СтрокаБезКлюча.КодСтроки = ТекущийКод;
				
			КонецЦикла;
			
			Объект.ПродукцияМаксимальныйКодСтроки = ТекущийКод;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОбъекта(Объект, ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаказыДавальцаСОдинаковымВходящимНомером(ТекущийЗаказ, Контрагент, НомерВходящегоДокумента)
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЗаказ, "Дата");
	ДатаВходящегоДокумента = ?(ЗначениеЗаполнено(РеквизитыЗаказа), РеквизитыЗаказа, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказДавальца2_5.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|ГДЕ
	|	ЗаказДавальца2_5.Ссылка <> &ТекущийЗаказ
	|	И ЗаказДавальца2_5.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказДавальца2_5.НомерПоДаннымПартнера = &НомерПоДаннымПартнера
	|	И ЗаказДавальца2_5.Контрагент = &Контрагент
	|	И НЕ ЗаказДавальца2_5.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНачала",			   ДобавитьМесяц(ДатаВходящегоДокумента, -3));
	Запрос.УстановитьПараметр("ДатаОкончания",		   ДобавитьМесяц(ДатаВходящегоДокумента, 3));
	Запрос.УстановитьПараметр("Контрагент",			   Контрагент);
	Запрос.УстановитьПараметр("ТекущийЗаказ",		   ТекущийЗаказ);
	Запрос.УстановитьПараметр("НомерПоДаннымПартнера", НомерВходящегоДокумента);
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказов;
	
КонецФункции

// Формирует список спецификаций из переданных строк, удаление которых приведет к изменениям в ТЧ Материалы.
// Параметры:
//	ИдентификаторыСтрок - Массив - содержит идентификаторы строк продукции.
//	Спецификация - СправочникСсылка.РесурсныеСпецификации - конкретная спецификация, которую надо проверить.
//
&НаКлиенте
Функция СпецификацииКУдалению(ИдентификаторыСтрок, Спецификация = Неопределено)
	
	СпецификацииПослеУдаления = Новый Массив;
	СпецификацииКУдалению = Новый Массив;
	
	Для Каждого СтрокаПродукции Из Объект.Продукция Цикл
		
		Если Не ИдентификаторыСтрок.Найти(СтрокаПродукции.ПолучитьИдентификатор()) = Неопределено
			И (СпецификацииКУдалению.Найти(СтрокаПродукции.Спецификация) = Неопределено
				Или (Не Спецификация = Неопределено И СпецификацииКУдалению.Найти(Спецификация) = Неопределено)) Тогда
				
			Если Не Спецификация = Неопределено Тогда
				СпецификацииКУдалению.Добавить(Спецификация);
			Иначе
				СпецификацииКУдалению.Добавить(СтрокаПродукции.Спецификация);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СпецификацииПослеУдаления.Найти(СтрокаПродукции.Спецификация) = Неопределено Тогда
			СпецификацииПослеУдаления.Добавить(СтрокаПродукции.Спецификация);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Спецификация");
	
	Счетчик = СпецификацииКУдалению.Количество() - 1;
	Пока Счетчик >= 0 Цикл
		
		ЭлементСпецификация = СпецификацииКУдалению[Счетчик];
		СтруктураПоиска.Спецификация = ЭлементСпецификация;
		
		ИндексЭлемента = СпецификацииПослеУдаления.Найти(ЭлементСпецификация);
		Если Не ИндексЭлемента = Неопределено 
			Или Объект.Материалы.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			СпецификацииКУдалению.Удалить(Счетчик);
		КонецЕсли;
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
	Возврат СпецификацииКУдалению;
	
КонецФункции

// Очищает строки в ТЧ Материалы по спецификациям.
// Параметры:
//  ТабличнаяЧасть - ДанныеФормыКоллекция -
//	Спецификации - Массив из СправочникСсылка.РесурсныеСпецификации - содержит список спецификаций.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьМатериалыПоСпецификациям(ТабличнаяЧасть, Спецификации)
	
	СтруктураПоиска = Новый Структура("Спецификация");
	Для каждого Спецификация Из Спецификации Цикл
		
		СтруктураПоиска.Спецификация = Спецификация;
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			ТабличнаяЧасть.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Материалы, СтруктураДействий);
	
	ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.Продукция);
	ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.Материалы);
	
	ТипПроизводственногоПроцессаДоИзменения = Объект.ТипПроизводственногоПроцесса;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияСкладаВСтроке(ИмяТЧ)
	
	Если ИмяТЧ = "Продукция" Тогда
		
		Возврат ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа);
		
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		
		Возврат ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(
																Объект, СкладПоступленияГруппа, "СкладПоступления");
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты(ИмяТЧ)
	
	Результат = Новый Структура;
	
	Если ИмяТЧ = "Продукция" Тогда
		
		Результат.Вставить("Отменено", "Сумма, СуммаНДС, СуммаСНДС");
		
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		
		Результат.Вставить("Отменено", "Сумма");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизитыПродукцияСтрокой()
	
	Возврат "СуммаОтменено, СуммаНДСОтменено, СуммаСНДСОтменено";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	Материалы = Форма.Объект.Материалы;
	Продукция = Форма.Объект.Продукция;
	
	Форма.СуммаЗаказано    = Продукция.Итог("СуммаСНДС") - Продукция.Итог("СуммаСНДСОтменено");
	Форма.СуммаНДСЗаказано = Продукция.Итог("СуммаНДС") - Продукция.Итог("СуммаНДСОтменено");
	Форма.СуммаОтменено    = Продукция.Итог("СуммаСНДСОтменено");
	
	Форма.СуммаМатериалов = Материалы.Итог("Сумма");
	
	ОтображатьИтогСуммыНДС =
		УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаПродажи(Форма.Объект.НалогообложениеНДС);
	
	Если ОтображатьИтогСуммыНДС Тогда
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДСПродукция;
	Иначе
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДСПродукция;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
	   И ИспользоватьНаправленияДеятельности Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
						ПараметрыОбъекта(Объект),
						Объект.ХозяйственнаяОперация,
						Объект.Валюта,
						Объект.НаправлениеДеятельности);
	
	Иначе
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
						ПараметрыОбъекта(Объект),
						Объект.ХозяйственнаяОперация,
						Объект.Валюта);
	
	КонецЕсли;
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ПриИзмененииДоговораСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад, ИмяТЧ)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект[ИмяТЧ], МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
		ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТЧ);
		
		ТаблицаОбъекта = Объект[ИмяТЧ];
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
						
		Для каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			
			ТекущаяСтрока = ТаблицаОбъекта.НайтиПоИдентификатору(ИдентификаторСтроки);	
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшируемыеЗначения);
				
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Документы.ЗаказДавальца2_5.РассчитатьСостояние(Объект.Ссылка, Объект.Договор, ЭтотОбъект);
	
	Элементы.Состояние.Гиперссылка = ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов);
	
	Если Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению Тогда
		Состояние = НСтр("ru = 'Готов к производству';
						|en = 'Ready for production'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПродукциюИМатериалыВоВременноеХранилищеНаСервере()
	
	Адрес = Новый Структура;
	Адрес.Вставить(
		"Продукция", ПоместитьВоВременноеХранилище(Объект.Продукция.Выгрузить(Новый Структура("Отменено", Ложь))));
	Адрес.Вставить(
		"Материалы", ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить(Новый Структура("Отменено", Ложь))));
	
	Возврат Адрес;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура АктуализироватьНалогообложениеНДС(Заполнить = Истина, КэшированныеЗначения = Неопределено)
	
	ПараметрыЗаполнения = Документы.ЗаказДавальца2_5.ПараметрыЗаполненияНалогообложенияНДС(Объект);
	
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(
			Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(
		Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	
	СтруктураДействийСДобавленнымиСтроками = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДействийСИзмененнымиСтроками);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ПараметрыЗаполненияСкладаВСтроке("Материалы"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДействиеПоПерерабатываемымМатериалам");
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействийСДобавленнымиСтроками.Вставить(
		"ЗаполнитьЦенуЗакупки",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
			Объект, "ВидЦеныМатериалы"));
	
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРеквизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Материалы",
		"Номенклатура,Характеристика,Склад,ДатаПоступления",
		СтруктураДействийСИзмененнымиСтроками,
		СтруктураДействийСДобавленнымиСтроками);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ДатыОтгрузкиПоступления

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(МассивВыделенныхСтрок = Неопределено)
	
	ДатаОтгрузки = Объект.ДатаОтгрузки;
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗаполнитьДатуОтгрузкиЗавершение", ЭтотОбъект, Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок));
	
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
		ДатаОтгрузки, НСтр("ru = 'Введите дату отгрузки';
							|en = 'Enter shipment date'"), ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаОтгрузки = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатыОтгрузки(ЭтотОбъект, ДатаОтгрузки, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, (МассивВыделенныхСтрок <> Неопределено));
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(МассивВыделенныхСтрок = Неопределено)
	
	Если Объект.Материалы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуПоступленияЗавершение",
											  ЭтотОбъект,
											  Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок));
		
		ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			Объект.Дата, НСтр("ru = 'Введите дату поступления';
								|en = 'Enter date of receipt'"), ЧастиДаты.Дата, Оповещение);
		
	Иначе
		ТекстПредупреждения = НСтр("ru = 'В документе нет строк для заполнения. Дата поступления не будет заполнена.';
									|en = 'There are no lines to fill in the document. The date of receipt will not be filled.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаПоступления = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатыПоступления(ЭтотОбъект, ДатаПоступления, МассивВыделенныхСтрок);
		
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияДатПоступления(
			ДатаПоступления, МассивВыделенныхСтрок <> Неопределено);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатыОтгрузки(Форма, ДатаОтгрузки, Знач МассивВыделенныхСтрок)
	
	Объект = Форма.Объект;
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПустыеДатыПоступленияКлиентСервер(Форма, ДатаПоступления)
	
	Объект = Форма.Объект;
	Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МаксимальнаяДатаПоступления()
	
	МаксимальнаяДатаПоступления = Дата(1, 1, 1);
	Для Каждого Товар Из Объект.Материалы Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаСервере 
Функция МаксимальнаяДатаОтгрузки()
	
	МаксимальнаяДатаОтгрузки = Дата(1, 1, 1);
	Для Каждого Товар Из Объект.Продукция Цикл 
		МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, Товар.ДатаОтгрузки);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаОтгрузки
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьДатыПоступления(Форма, ДатаПоступления, Знач МассивВыделенныхСтрок)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(ДатаПоступления) Тогда
		ДатаПоступления = Неопределено;
	КонецЕсли;
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		МассивВыделенныхСтрок = Объект.Материалы;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из МассивВыделенныхСтрок Цикл
		
		Если ТипЗнч(СтрокаТЧ) = Тип("Число") Тогда
			СтрокаТЧ = Объект.Материалы.НайтиПоИдентификатору(СтрокаТЧ);
		КонецЕсли;
		
		Если СтрокаТЧ.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение") Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПустыеДатыПоступленияСервер(Форма)
	
	Объект = Форма.Объект;
	Если Объект.Материалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступления(Форма) Тогда
		Если Объект.ПоступлениеОднойДатой Тогда
			Объект.ДатаПоступления = Неопределено;
			ЗаполнитьДатыПоступления(Форма, Объект.ДатаПоступления, Неопределено);
		Иначе
			ДатаПоступления = Неопределено;
			ЗаполнитьПустыеДатыПоступленияКлиентСервер(Форма, ДатаПоступления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПустуюДатуПоступления(Форма)
	
	Объект = Форма.Объект;
	Для Каждого ТекСтрока Из Объект.Материалы Цикл
		
		Если ТекСтрока.Действие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение")
			И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	Если ИмяТЧ = "Продукция" Тогда
		ТипыНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь);
	Иначе
		ТипыНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Номенклатура.ТипНоменклатуры", ТипыНоменклатуры);
	
	Колонки = "НоменклатураПартнера, Номенклатура, Характеристика, Действие, Упаковка, КоличествоУпаковок, Цена,
			  |ДатаПоступления, ДатаОтгрузки, Спецификация, Склад";
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора, Колонки);
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ПараметрыЗаполненияСкладаВСтроке(ИмяТЧ));
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ИмяТЧ = "Продукция" Тогда
		
		ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения,СкладОбязателен,ДатаОтгрузкиОбязательна");
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
		
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", Объект.НазначениеМатериалы);
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивНовыхСтрок = Новый Массив;
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если ИмяТЧ = "Продукция" Тогда
			
			ТекущаяСтрока = Объект.Продукция.Добавить();
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда
			
			ТекущаяСтрока = Объект.Материалы.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если ИмяТЧ = "Материалы" И Объект.ПоступлениеОднойДатой Тогда
			
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
			
		ИначеЕсли ИмяТЧ = "Продукция" И Объект.НеОтгружатьЧастями Тогда
			
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ИмяТЧ = "Продукция" Тогда
			
			МассивНовыхСтрок.Добавить(ТекущаяСтрока);
			МассивДанныхПоНоменклатуре.Добавить(Документы.ЗаказДавальца2_5.ДанныеПоНоменклатуре(Объект, ТекущаяСтрока));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыХарактеристик = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", ПараметрыХарактеристик);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект[ИмяТЧ], СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
	
	Если ИмяТЧ = "Продукция" Тогда
		УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
			МассивНовыхСтрок, МассивДанныхПоНоменклатуре, ПараметрыВыбораСпецификаций);
		ОбновитьКолонкуДоступноСервер();
	Иначе
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
			Объект.СостояниеЗаполненияМногооборотнойТары);
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТЧ);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьМатериалыВоВременноеХранилищеСервер()
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект.Материалы);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМатериалыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТаблицаМатериалов = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);// ДокументТабличнаяЧасть.ЗаказДавальца2_5.Материалы - 
	
	Для каждого ТекСтрока Из ТаблицаМатериалов Цикл
		
		МассивСтрокКоллекции = Объект.Материалы.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекСтрока.Характеристика);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить(
			"ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекСтрока.Упаковка);
			
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ПараметрыЗаполненияСкладаВСтроке("Материалы"));
	
		СтруктураДействий.Вставить(
			"ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаКоллекции.Склад, ПараметрыУказанияСерий.Материалы));
	
		СтруктураДействий.Вставить(
			"ЗаполнитьЦенуЗакупки",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(
				Объект, "ВидЦеныМатериалы"));
	
		СтруктураДействий.Вставить(
			"НоменклатураПриИзмененииПереопределяемый",
			Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ИмяФормы, "Материалы"));
	
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
	
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
		
		НоменклатураМатериалыПриИзмененииСервер(
			СтрокаКоллекции.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Материалы, СтруктураХарактеристикиНоменклатуры);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Взаиморасчеты

&НаСервере
Процедура ПоместитьЭтапыОплатыВоВременноеХранилище(ИмяЭлемента)
	ВзаиморасчетыСервер.ПоместитьЭтапыОплатыВоВременноеХранилище(ЭтотОбъект, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты)
	
	ВзаиморасчетыСервер.ЗагрузитьЭтапыОплатыИзВременногоХранилища(ЭтотОбъект);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, ИзмененныеРеквизиты, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыКлиент.РасчетыНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаСтрок

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(ИмяТЧ, ПредставлениеТЧ)
	
	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, СтрШаблон(НСтр("ru = 'Таблица ""%1"" не заполнен.';
															|en = 'The ""%1"" table is not filled.'"), ПредставлениеТЧ));
		Возврат;
	ИначеЕсли Элементы[ИмяТЧ].ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(
			Неопределено, СтрШаблон(НСтр("ru = 'В таблице ""%1"" отсутствуют выделенные строки.';
										|en = 'There are no selected rows in the ""%1"" table.'"), ПредставлениеТЧ));
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = Неопределено;
	
	Если ИмяТЧ = "Продукция" Тогда
		
		ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
		
		Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
			
			ОткрытьФорму(
				"Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора",,,,,,
				Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтменитьВыделенныеСтрокиФрагмент(ИмяТЧ, ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПричинаОтмены = Результат;
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтрокиФрагмент(ДополнительныеПараметры.ИмяТЧ, ПричинаОтмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиФрагмент(ИмяТЧ, Знач ПричинаОтмены)
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты(ИмяТЧ));
	
	Если ИмяТЧ = "Продукция" Тогда
		КлючиСвязиМатериалов = Новый Соответствие;
	КонецЕсли;
	
	ЕстьОтмененныеСтроки = Ложь;
	
	Для Каждого ТекСтрока Из Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если ИмяТЧ = "Продукция" Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если Не СтрокаТаблицы.Отменено Тогда
				
				СтрокаТаблицы.Отменено = Истина;
				ЕстьОтмененныеСтроки   = Истина;
				
				Если ИмяТЧ = "Продукция" Тогда
					КлючиСвязиМатериалов.Вставить(СтрокаТаблицы.Спецификация);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяТЧ = "Продукция" Тогда
				ДобавитьДействияОбеспеченияНаКлиенте(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
			КонецЕсли;
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТЧ = "Продукция" Тогда
		
		ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
			Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
		
		ОтменитьСвязанныеМатериалы(КлючиСвязиМатериалов);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	Если ЕстьОтмененныеСтроки Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены';
				|en = 'Selected lines are canceled'"),,
			НСтр("ru = 'Выделенные строки заказа отменены.';
				|en = 'Selected items are canceled from the order.'"),
			БиблиотекаКартинок.Информация32);
		
		ОтменитьВыделенныеСтрокиСервер(ИмяТЧ);
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выделенные строки уже отменены.';
													|en = 'Selected lines are already canceled.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборСтрокПоОтмененным(
			Элементы, ИмяТЧ, СкрытьОтмененныеСтроки, УстановитьПометкуСкрыватьОтмененныеСтроки = Истина)
	
	Элементы[ИмяТЧ].ОтборСтрок = 
		?(СкрытьОтмененныеСтроки, Новый ФиксированнаяСтруктура("Отменено", Ложь), Неопределено);
	
	Если УстановитьПометкуСкрыватьОтмененныеСтроки Тогда
		
		Если ИмяТЧ = "Продукция" Тогда
			
			Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрытьОтмененныеСтроки;
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда
			
			Элементы.МатериалыСкрыватьОтмененныеСтроки.Пометка = СкрытьОтмененныеСтроки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Отменяет связанные с отменяемой продукцией материалы.
// 
// Параметры:
//  КлючиСвязиМатериалов - Соответствие - Ключи связи продукции и материалов.
//
&НаКлиенте
Процедура ОтменитьСвязанныеМатериалы(КлючиСвязиМатериалов)
	
	Если КлючиСвязиМатериалов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборНеОтмененныеСтроки = Новый Структура;
	ОтборНеОтмененныеСтроки.Вставить("Спецификация");
	ОтборНеОтмененныеСтроки.Вставить("Отменено", Ложь);
	
	Для каждого КлючСвязи Из КлючиСвязиМатериалов Цикл
		
		ОтборНеОтмененныеСтроки.Спецификация = КлючСвязи.Ключ;
		
		ЕстьНеОтмененныеСтрокиПродукция = Объект.Продукция.НайтиСтроки(ОтборНеОтмененныеСтроки).Количество() > 0;
		ЕстьНеОтмененныеСтрокиМатериалы = Объект.Материалы.НайтиСтроки(ОтборНеОтмененныеСтроки).Количество() > 0;
		
		Если Не ЕстьНеОтмененныеСтрокиПродукция И ЕстьНеОтмененныеСтрокиМатериалы Тогда
			Продолжить;
		КонецЕсли;
		
		КлючиСвязиМатериалов.Удалить(КлючСвязи.Ключ);
		
	КонецЦикла;
	
	Если КлючиСвязиМатериалов.Количество() > 0 Тогда
		
		ОтменитьСвязанныеМатериалыСервер(КлючиСвязиМатериалов);
		
		ОбновитьОтборСтрокПоОтмененным(Элементы, "Материалы", СкрыватьОтмененныеСтрокиМатериалы, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет связанные с отменяемой продукцией материалы.
// 
// Параметры:
//  КлючиСвязиМатериалов - Соответствие - Ключи связи продукции и материалов.
//
&НаСервере
Процедура ОтменитьСвязанныеМатериалыСервер(КлючиСвязиМатериалов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходныеМатериалы.НомерСтроки  КАК НомерСтроки,
	|	ИсходныеМатериалы.КодСтроки    КАК КодСтроки,
	|	ИсходныеМатериалы.Номенклатура КАК Номенклатура,
	|	ИсходныеМатериалы.Упаковка     КАК Упаковка,
	|	ИсходныеМатериалы.Количество   КАК Количество,
	|	ИсходныеМатериалы.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ИсходныеМатериалы
	|ИЗ
	|	&ИсходныеМатериалы КАК ИсходныеМатериалы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.НомерСтроки  КАК НомерСтроки,
	|	Материалы.КодСтроки    КАК КодСтроки,
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.Упаковка     КАК Упаковка,
	|	Материалы.Количество   КАК Количество
	|ПОМЕСТИТЬ Материалы
	|ИЗ
	|	ИсходныеМатериалы КАК Материалы
	|ГДЕ
	|	Материалы.Спецификация В (&Спецификации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамОбороты.КодСтроки      КАК КодСтроки,
	|	ЗаказыПоставщикамОбороты.ЗаказаноРасход КАК КоличествоПоступило
	|ПОМЕСТИТЬ ТаблицаПоступлений
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(
	|						,,,
	|						ЗаказПоставщику = &Заказ
	|						И КодСтроки В
	|								(ВЫБРАТЬ
	|									Материалы.КодСтроки КАК КодСтроки
	|								ИЗ
	|									Материалы КАК Материалы
	|								ГДЕ
	|									Материалы.КодСтроки > 0)) КАК ЗаказыПоставщикамОбороты
	|ГДЕ
	|	ЗаказыПоставщикамОбороты.ЗаказаноРасход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.НомерСтроки                                                      КАК НомерСтроки,
	|	Материалы.КодСтроки                                                        КАК КодСтроки,
	|	Материалы.Количество                                                       КАК Количество,
	|	Материалы.Количество - ЕСТЬNULL(ТаблицаПоступлений.КоличествоПоступило, 0) КАК КоличествоОтмены,
	|	ВЫБОР
	|		КОГДА Материалы.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ                                                                      КАК Коэффициент
	|ИЗ
	|	Материалы КАК Материалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоступлений КАК ТаблицаПоступлений
	|		ПО Материалы.КодСтроки = ТаблицаПоступлений.КодСтроки
	|ГДЕ
	|	Материалы.Количество > ЕСТЬNULL(ТаблицаПоступлений.КоличествоПоступило, 0)";
	
	Запрос.Текст = СтрЗаменить(
						Запрос.Текст,
						"&ТекстЗапросаКоэффициентУпаковки",
						Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
							"Материалы.Упаковка", "Материалы.Номенклатура"));
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	Запрос.УстановитьПараметр(
				"ИсходныеМатериалы",
				Объект.Материалы.Выгрузить(
					Новый Структура("Отменено", Ложь),
					"НомерСтроки, КодСтроки, Номенклатура, Упаковка, Спецификация, Количество"));
		
	Запрос.УстановитьПараметр(
				"Спецификации",
				ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(КлючиСвязиМатериалов));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ПараметрыПроверитьСериюРассчитатьСтатус = Новый Структура;
	ПараметрыПроверитьСериюРассчитатьСтатус.Вставить("Склад");
	ПараметрыПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий",  ПараметрыУказанияСерий.Материалы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧМатериалы = Объект.Материалы[Выборка.НомерСтроки - 1];
		
		ПараметрыПроверитьСериюРассчитатьСтатус.Склад = СтрокаТЧМатериалы.Склад;
		
		Если Выборка.Количество = Выборка.КоличествоОтмены Тогда
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверитьСериюРассчитатьСтатус);
			
			СтрокаТЧМатериалы.Отменено = Истина;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧМатериалы, СтруктураДействий, КэшированныеЗначения);
			
		Иначе
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			КоличествоУпаковок = СтрокаТЧМатериалы.КоличествоУпаковок;
			
			СтрокаТЧМатериалы.Количество         = Выборка.Количество - Выборка.КоличествоОтмены;
			СтрокаТЧМатериалы.КоличествоУпаковок = СтрокаТЧМатериалы.Количество / Выборка.Коэффициент;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧМатериалы, СтруктураДействий, КэшированныеЗначения);
			
			// Новая строка
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты("Материалы"));
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверитьСериюРассчитатьСтатус);
			
			СтрокаОтмены = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтмены, СтрокаТЧМатериалы,, "КодСтроки");
			СтрокаОтмены.Количество         = Выборка.КоличествоОтмены;
			СтрокаОтмены.КоличествоУпаковок = КоличествоУпаковок - СтрокаТЧМатериалы.КоличествоУпаковок;
			СтрокаОтмены.Отменено           = Истина;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаОтмены, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаСервере
Процедура ОбновитьКолонкуДоступноПослеРаспределенияЗапасов()
	ОбеспечениеВДокументахСервер.ОбновитьДоступностьПослеЗаписи(ЭтотОбъект);
	ОбновитьСостояниеСервер();
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

&НаСервере
Процедура ОбновитьНазначения()
	
	ПустоеНазначение     = Справочники.Назначения.ПустаяСсылка();
	ТипНоменклатурыТовар = Перечисления.ТипыНоменклатуры.Товар;
	
	ШаблонНазначенияМатериалы = Документы.ЗаказДавальца2_5.ШаблонНазначенияМатериалы(Объект);
	Объект.НазначениеМатериалы = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначенияМатериалы);
	
	ОбновитьПредставлениеНазначения(ШаблонНазначенияМатериалы);
	
	ШаблонНазначенияМатериалы.ТипНазначения = Неопределено;
	
	Ссылки = Объект.Материалы.Выгрузить(, "Назначение").ВыгрузитьКолонку("Назначение");
	Шаблоны = Справочники.Назначения.ШаблоныИзСсылок(Ссылки);
	
	Для Каждого Строка Из Объект.Материалы Цикл
		
		Шаблон = Шаблоны.Получить(Строка.Назначение);
		Если Шаблон = Неопределено
		 Или Не (ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(Шаблон, ШаблонНазначенияМатериалы, "НаправлениеДеятельности,Договор,Партнер")
				 И Справочники.Назначения.ШаблонЕстьЧастныйСлучайШаблона(Шаблон, ШаблонНазначенияМатериалы)) Тогда
			
			Строка.Назначение =
				?(Строка.ТипНоменклатуры = ТипНоменклатурыТовар, Объект.НазначениеМатериалы, ПустоеНазначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеНазначения(ШаблонНазначенияМатериалы = Неопределено)
	
	Если ШаблонНазначенияМатериалы = Неопределено Тогда
		ШаблонНазначенияМатериалы = Документы.ЗаказДавальца2_5.ШаблонНазначенияМатериалы(Объект);
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Получатель", Объект.Номер, Объект.Дата, Объект.Партнер);
	ПредставлениеНазначения = Справочники.Назначения.ПредставлениеНазначенияДляЗаписиВИнформационнуюБазу(
								ШаблонНазначенияМатериалы, РеквизитыДокумента);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыДвиженийВХранилище()
	
	Возврат ОбеспечениеВДокументахСервер.АдресТаблицыДвиженийВХранилище(ЭтотОбъект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыДокументаДляДействийОбеспечения(Форма, ВариантОбеспеченияИФлагОбособленно)
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("Форма",                              Форма);
	ПараметрыДокумента.Вставить("Коллекция",                          Форма.Объект.Продукция);
	ПараметрыДокумента.Вставить("ВариантОбеспеченияИФлагОбособленно", ВариантОбеспеченияИФлагОбособленно);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормыДокумента()
	
	ПараметрыДокумента = ПараметрыДокументаДляДействийОбеспечения(ЭтотОбъект, ВариантОбеспеченияИФлагОбособленно);
	ОбеспечениеВДокументахСервер.ЗаполнитьСлужебныеРеквизитыФормыДокумента(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуДоступноСервер()
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступно(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерии(ВыбранноеЗначение, ПараметрыФормы) Экспорт
	
	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВыбораОбеспечения(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерииПослеВопроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСкладаИСерииПослеВопроса(Ответ, Параметры) Экспорт
	
	ПараметрыЗаполнения = ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Ответ);
	
	Оповещение = ОбработатьВыборСкладаИСерииНаСервере(
					Параметры.ВыбранноеЗначение, Параметры.ПараметрыФормы, ПараметрыЗаполнения);
	
	ТекстОповещения = ОбеспечениеВДокументахКлиент.ТекстОповещенияОбработкиВыборСкладаИСерии(
						Параметры.ПараметрыФормы.Режим);
	
	ПоказатьОповещениеПользователя(ТекстОповещения,, Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиСервер(ИмяТЧ)
	
	Если ПараметрыУказанияСерий[ИмяТЧ].ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСтатусыУказанияСерий(ИмяТЧ);
	КонецЕсли;
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнятьОбеспечениеЦелымиУпаковками(Ответ, Результат) Экспорт
	
	ВопросЗадан = ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВопроса(
		ЭтотОбъект,
		Объект.Продукция,
		Результат,
		Ответ,
		"ПослеВопросаСнятьФлагОтгружатьОднойДатой");
		
	Если Не ВопросЗадан Тогда
		
		ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСнятьФлагОтгружатьОднойДатой(Ответ, Результат) Экспорт
	
	ОбеспечениеУстановитьДействиеПослеВопроса(Ответ, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОбеспечения(Изменения, Режим = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	ЕстьИзмененияДатыОтгрузки = Ложь;
	Документы.ЗаказДавальца2_5.ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения, ЕстьИзмененияДатыОтгрузки);
	Если ЕстьИзмененияДатыОтгрузки Тогда
		ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Продукция.ДатаОтгрузки");
	КонецЕсли;
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
	ЗаказыСервер.ПересчитатьЗависимыеРеквизитыПослеРазбиенияСтрок(Изменения, ЗависимыеРеквизитыПродукцияСтрокой());
	
	СтруктураДействий = Новый Структура();
	ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого Изменение Из Изменения Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Изменение.Строка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	ОбеспечениеВДокументахКлиентСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Продукция");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтотОбъект);
	
	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения(Режим)
	
	ПараметрыФормы = ОбеспечениеВДокументахСервер.ПараметрыВыбораОбеспечения(
		ЭтотОбъект,
		Элементы.Продукция.ТекущаяСтрока,
		Режим);
		
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий(Режим)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Продукция",
		НСтр("ru = 'Продукция';
			|en = 'Manufactured products'"));
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект,
				Объект.Продукция,
				Элементы.Продукция.ТекущаяСтрока,
				ПараметрыПроверки,
				Объект.Склад,
				Режим) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(Режим);
	ПараметрыФормы.ПараметрыУказанияСерий = ПараметрыУказанияСерий.Продукция;
	
	Если Элементы.Продукция.ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
		ПараметрыФормы.ДопустимыеНеобособленныеДействия.Очистить();
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
