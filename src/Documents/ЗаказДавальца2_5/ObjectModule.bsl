#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает сумму и дату поступления неотмененных строк поставки сырья.
//
// Возвращаемое значение:
//  Структура - структура с полями "Сумма", "ДатаПоступления".
//
Функция ЗалоговыеДанныеЗаказа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура    КАК Номенклатура,
	|	Товары.Сумма           КАК Сумма,
	|	Товары.ДатаПоступления КАК ДатаПоступления
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма), 0)                               КАК Сумма,
	|	ЕСТЬNULL(МАКСИМУМ(Товары.ДатаПоступления), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоступления
	|ИЗ
	|	Товары КАК Товары";
	
	Запрос.УстановитьПараметр("Товары", Материалы.Выгрузить(, "Номенклатура, Сумма, ДатаПоступления"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Новый Структура("Сумма, ДатаПоступления", Выборка.Сумма, Выборка.ДатаПоступления);
	
КонецФункции

// Рассчитывает количество неотмененных строк заявки
//
// Возвращаемое значение:
//  Число - количество неотмененных строк.
//
Функция КоличествоЗаказанныхСтрок() Экспорт
	
	Возврат Продукция.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
	
КонецФункции

// Рассчитывает сумму неотмененных строк заказа
//
// Возвращаемое значение:
//  Число - сумма неотмененных строк.
//
Функция СуммаЗаказанныхСтрок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС    КАК СуммаСНДС,
	|	Товары.Отменено     КАК Отменено
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС), 0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено";
	
	Запрос.УстановитьПараметр("Товары", Продукция.Выгрузить(, "Номенклатура, СуммаСНДС, Отменено"));
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	СуммаЗаказанныхСтрок = Выгрузка[0].СуммаСНДС;
	
	Возврат СуммаЗаказанныхСтрок;
	
КонецФункции

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = Перечисления.СтатусыЗаказовДавальцев[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров.
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.ОтменитьНеотработанныеСтроки
	   И Не (СтруктураПараметров.СкорректироватьМерныеТовары
			 Или СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке) Тогда
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(Неопределено)
	КонецЕсли;
	
	КоличествоСкорректированныхСтрок = 0;
	
	КорректироватьПродукцию = 
		(СтруктураПараметров.ОтменитьНеотработанныеСтроки Или СтруктураПараметров.СкорректироватьМерныеТовары)
		И (СтруктураПараметров.ИмяТабличнойЧасти = "Товары" Или СтруктураПараметров.ИмяТабличнойЧасти = "Продукция");
		
	КорректироватьМатериалы = 
		СтруктураПараметров.ОтменитьНеотработанныеСтроки 
		Или СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке
			И (СтруктураПараметров.ИмяТабличнойЧасти = "Товары"
			   Или СтруктураПараметров.ИмяТабличнойЧасти = "Материалы");
	
	Если Не СтруктураПараметров.ПроверятьОстатки Тогда
		
		СвойстваОтмененнойСтроки = Новый Структура(
			"Отменено, СтатусУказанияСерий, ПричинаОтмены", Истина, 0, СтруктураПараметров.ПричинаОтмены);
		
		Если КорректироватьПродукцию Тогда
			
			Для каждого СтрокаТовары Из Продукция Цикл
				Если Не СтрокаТовары.Отменено Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
					КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + 1;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если КорректироватьМатериалы Тогда
			
			КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + Материалы.Количество();
			Материалы.Очистить();
			
		КонецЕсли;
		
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
		
	КонецЕсли;
	
	Если КорректироватьПродукцию Тогда
		
		ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
		ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыКлиентов;
		ПараметрыЗаполнения.ИмяТабличнойЧасти = "Продукция";
		ПараметрыЗаполнения.ПутиКДанным.Вставить("Назначение", "Назначение");
		
		ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
		ПараметрыОтмены.ПричинаОтмены = ?(СтруктураПараметров.ОтменитьНеотработанныеСтроки,
			СтруктураПараметров.ПричинаОтмены, Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров);
		ПараметрыОтмены.КорректироватьСумму = Истина;
		ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
			И СтруктураПараметров.СкорректироватьМерныеТовары;
		ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТовары;
		
		КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок
			+ ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоОтгрузке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены).КоличествоСтрок;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца2_5));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Продукция);
		
	КонецЕсли;
	
	Если КорректироватьМатериалы Тогда
		
		ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
		ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыПоставщикам;
		ПараметрыЗаполнения.ИмяТабличнойЧасти = "Материалы";
		
		ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
		ПараметрыОтмены.КорректироватьСумму = Истина;
		ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
			И СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке;
		ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке;
		
		КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок
			+ ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоПриемке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены).КоличествоСтрок;
			
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
			НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца2_5));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Материалы);
		
	КонецЕсли;
	
	Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ПустаяДата = '00010101';
	
	МатериалыМаксимальныйКодСтроки = 0;
	ПродукцияМаксимальныйКодСтроки = 0;
	Статус						   = Перечисления.СтатусыЗаказовДавальцев.НеСогласован;
	ДатаОтгрузки				   = ПустаяДата;
	ДатаПоступления				   = ПустаяДата;
	ДатаСогласования			   = ПустаяДата;
	НомерПоДаннымПартнера		   = "";
	ДатаПоДаннымПартнера		   = ПустаяДата;
	Назначение					   = Неопределено;
	НазначениеМатериалы			   = Неопределено;
	ИдентификаторПлатежа 		   = Неопределено;
	Основание					   = Неопределено;
	
	Для Каждого СтрокаТЧ Из Продукция Цикл
		
		СтрокаТЧ.КодСтроки    = 0;
		СтрокаТЧ.ДатаОтгрузки = ПустаяДата;
		СтрокаТЧ.Отменено = Ложь;
		СтрокаТЧ.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
		
	КонецЦикла;
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Для Каждого СтрокаТЧ Из Материалы Цикл
		
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = ПустаяДата;
		СтрокаТЧ.Назначение      = ПустоеНазначение;
		СтрокаТЧ.Отменено        = Ложь;
		
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
	ВзаиморасчетыСервер.ПриКопировании(ЭтотОбъект);
	
	ЗаказДавальца2_5Локализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	Автор = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Автор = Пользователи.ТекущийПользователь();
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументПоСделке(ДанныеЗаполнения);
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику2_5") Тогда
		
		ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Проведен, Статус");
		Если Не ДанныеЗаказа.Проведен Тогда
			ВызватьИсключение НСтр("ru = 'Ввод заказа давальца возможен только на основании проведенного заказа переработчику.';
									|en = 'You can generate a subcontracting sales order only based on a posted subcontracting purchase order.'");;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам2_5")
			И (ДанныеЗаказа.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован
				Или ДанныеЗаказа.Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт) Тогда
			ВызватьИсключение НСтр("ru = 'Ввод заказа давальца возможен только на основании согласованного и не завершенного заказа переработчику.';
									|en = 'You can generate a subcontracting sales order only based on an approved and not closed subcontracting purchase order.'");;
		КонецЕсли;
		
		ЗаполнитьДокументНаОснованииЗаказПереработчику(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказДавальца2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	
	ЗаказДавальца2_5Локализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	// Склады могли быть заполнены по статистике - перенесем их в таблицы документа.
	Если ЗначениеЗаполнено(Склад) Тогда
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Продукция, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладПоступления) Тогда
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(СкладПоступления);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(СкладПоступления, СкладГруппа, Материалы, Ложь);
	КонецЕсли;
	
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь",   Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	#Область Округление
	
	ПараметрыОкругления = Документы.ЗаказДавальца2_5.ПараметрыТЧДляОкругления();
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["Продукция"]);
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления["Материалы"]);
	
	#КонецОбласти
		
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Продукция", "ПродукцияМаксимальныйКодСтроки");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Материалы", "МатериалыМаксимальныйКодСтроки");
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Тогда
		
		НоваяДатаОтгрузки = Дата(1, 1, 1);
		
		Если Продукция.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаказовДавальцев.Согласован
			 Или Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				СтрокиКОбеспечению = Продукция.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = Продукция.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
		
	Иначе
		ОбеспечениеВДокументахСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, Продукция, "ДатаОтгрузки");
	КонецЕсли;
	
	// Установим дату согласования, если документ согласован
	Если Не ЗначениеЗаполнено(ДатаСогласования)
	   И Не Статус = Перечисления.СтатусыЗаказовДавальцев.НеСогласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
		ВзаиморасчетыСервер.ПриИзмененииДатыСогласования(ЭтотОбъект);
	КонецЕсли;
	
	Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	Иначе
		ИдентификаторПлатежа = Неопределено;
	КонецЕсли; 
	
	ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕсли;
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре Тогда
		СуммаАвансаДоОбеспечения = 0;
		СуммаПредоплатыДоОтгрузки = 0;
	Иначе
		ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказДавальца2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	СтруктураЗалоговыхДанных = ЗалоговыеДанныеЗаказа();
	
	СуммаДокумента = СуммаЗаказанныхСтрок();
	СуммаЗалоговая = СтруктураЗалоговыхДанных.Сумма;
	
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("Касса");
		ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца2_5);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.Продукция);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.Материалы);
	
	#Область ЗаполнениеНазначений
	
	ШаблонНазначения  = Документы.ЗаказДавальца2_5.ШаблонНазначения(ЭтотОбъект);
	РеквизитыПроверки = "НаправлениеДеятельности,Партнер,Договор";
	
	Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения, ЭтотОбъект, РеквизитыПроверки, Отказ);
	
	// Назначение материалов проверяется только после проверки заполнения документа,
	// так как до проверки не гарантируется заполнение всех ключевых реквизитов,
	// влияющих на подбор назначений.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ШаблонНазначенияМатериалы = Документы.ЗаказДавальца2_5.ШаблонНазначенияМатериалы(ЭтотОбъект);
		
		Если Справочники.Назначения.ШаблоныРавны(ШаблонНазначения, ШаблонНазначенияМатериалы) Тогда
			НазначениеМатериалы = Назначение;
		Иначе
			Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(
				НазначениеМатериалы, ШаблонНазначенияМатериалы, ЭтотОбъект, РеквизитыПроверки, Отказ);
		КонецЕсли;
		
		ЗаполнитьПустыеНазначенияМатериалы();
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(
			ЭтотОбъект, Метаданные.Документы.ЗаказДавальца2_5.ТабличныеЧасти.Продукция.Имя);
	КонецЕсли;
	
	ЗаказДавальца2_5Локализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ШаблонНазначения          = Документы.ЗаказДавальца2_5.ШаблонНазначения(ЭтотОбъект);
	ШаблонНазначенияМатериалы = Документы.ЗаказДавальца2_5.ШаблонНазначенияМатериалы(ЭтотОбъект);
	ВидДеятельностиНДС        = УчетНДСУП.ВидДеятельностиПоНалогообложениюНДС(НалогообложениеНДС);
	
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Партнер, ВидДеятельностиНДС);
	Справочники.Назначения.ПриЗаписиДокумента(
		НазначениеМатериалы, ШаблонНазначенияМатериалы, ЭтотОбъект, Партнер, ВидДеятельностиНДС);
	
	ЗаказДавальца2_5Локализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	///////////////////////////////////////////////////////////////////////////
	// Вспомогательные переменные
	
	СтатусДокументаСогласованИВыше = Ложь
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.Согласован
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт;
	
	СтатусДокументаКПроизводствуИВыше = Ложь
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.КОтгрузке
		Или Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	///////////////////////////////////////////////////////////////////////////
	// Проверка реквизитов

#Область Тч__ХарактеристикиКоличество

	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверкиКоличества = Документы.ЗаказДавальца2_5.ПараметрыТЧДляОкругления();
	
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества.Продукция);
		
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества.Материалы);
		
#КонецОбласти

#Область Тч__Серии
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца2_5);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыУказанияСерий.Продукция);
	МассивПараметров.Добавить(ПараметрыУказанияСерий.Материалы);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
		МассивПараметров,
		Отказ,
		МассивНепроверяемыхРеквизитов);
		
#КонецОбласти

#Область ПродукцияДатаОтгрузкиСклад
	
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДатаОтгрузки");
	
	ПараметрыВстраивания = Документы.ЗаказДавальца2_5.ДоступныеОстаткиПараметрыВстраивания();
	ТаблицаОшибок = ОбеспечениеВДокументахСервер.ТаблицаОшибокЗаполнения(ЭтотОбъект, ПараметрыВстраивания);
	
	ЗаказНаГруппуСкладов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ЭтоГруппа");
	
	ДатаОтгрузкиОбязательна  = Ложь;
	СкладОбязателен          = Ложь;
	ШаблонТекстаДатаОтгрузки = НСтр("ru = 'Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Выпускаемая продукция""';
									|en = 'Column ""Shipment date"" in line %НомерСтроки% of the ""Released products"" list is not filled in'");
	ШаблонТекстаСклад        = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""Выпускаемая продукция""';
									|en = 'Column ""Warehouse"" in line %НомерСтроки% of the ""Released products"" list is not filled in'");
	
	Для ТекИндекс = 0 По ТаблицаОшибок.Количество() - 1 Цикл
		
		СтрокаОшибки = ТаблицаОшибок[ТекИндекс];
		
		Если СтрокаОшибки.ДатаОтгрузкиОбязательна И Не НеОтгружатьЧастями И СтрокаОшибки.ДатаОтгрузкиНеЗаполнена Тогда
			
			ТекстОшибки   = СтрЗаменить(ШаблонТекстаДатаОтгрузки, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", СтрокаОшибки.НомерСтроки, "ДатаОтгрузки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
			
		КонецЕсли;
		
		Если СтрокаОшибки.СкладОбязателен И ЗначениеЗаполнено(Склад) И СтрокаОшибки.СкладНеЗаполнен Тогда
			
			ТекстОшибки   = СтрЗаменить(ШаблонТекстаСклад, "%НомерСтроки%", СтрокаОшибки.НомерСтроки);
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", СтрокаОшибки.НомерСтроки, "Склад");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти, , Отказ);
			
		КонецЕсли;
		СкладОбязателен = СкладОбязателен Или СтрокаОшибки.СкладОбязателен;
		ДатаОтгрузкиОбязательна = ДатаОтгрузкиОбязательна Или СтрокаОшибки.ДатаОтгрузкиОбязательна;
		
	КонецЦикла;
	
#КонецОбласти

#Область Тч__ПричинаОтменыЦенаИСумма
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ПричинаОтмены");
	
	Для ТекИндекс = 0 По Продукция.Количество() - 1 Цикл
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""';
								|en = 'in line %НомерСтроки% of the ""Goods"" list'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Продукция[ТекИндекс].НомерСтроки);
		
		ТекСтрока = Продукция[ТекИндекс];
		АдресОшибки = СтрШаблон(
			НСтр("ru = 'в строке %1 списка ""Выпускаемая продукция"".';
				|en = 'in line %1 of the ""Released products"" list.'"),
			ТекСтрока.НомерСтроки);
			
		// Дата отгрузки в тч Продукция должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями
			И ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки)
			И ТекСтрока.ДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата отгрузки %1 должна быть не меньше даты документа %2';
								|en = 'Shipping date %1 must be not less than document date %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, АдресОшибки, Формат(Дата,"ДЛФ=DD"));
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ДатаОтгрузки");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в строках с признаком Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов")
			И ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать причину отмены %1';
								|en = '%1 cancellation reason is required'");
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибки, АдресОшибки), ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
#КонецОбласти

#Область Тч__ДатаПоступления
	
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.ДатаПоступления");
	
	Для ТекИндекс = 0 По Материалы.Количество() - 1 Цикл
		
		ТекСтрока = Материалы[ТекИндекс];
		
		АдресОшибки =
			СтрШаблон(НСтр("ru = 'в строке %1 списка ""Сырье и материалы для производства""';
							|en = 'in line %1 of the ""Raw and consumable materials for production"" list'"), ТекСтрока.НомерСтроки);
		
		// Дата поступления в тч Материалы обязательна к заполнению только для заказов в статусах Согласован и выше.
		Если СтатусДокументаСогласованИВыше
		   И Не ПоступлениеОднойДатой 
		   И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления)
		   И Не ТекСтрока.Отменено
		   И ТекСтрока.Действие <> Перечисления.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата поступления"" %1';
								|en = 'The ""Date of receipt"" column is not filled in%1'");
			ПутьКТЧ =
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, АдресОшибки), ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Дата поступления в тч Товары должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями 
			И ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) 
			И ТекСтрока.ДатаПоступления < НачалоДня(Дата)
			И Не ТекСтрока.Отменено
			И ТекСтрока.Действие <> Перечисления.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %1 %2';
								|en = 'Date of receipt cannot be less than document date %1 %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Формат(Дата, "ДЛФ=DD"), АдресОшибки);
			ПутьКТЧ =
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти

#Область Док_ДатаПоступления
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Отменено", Ложь);
	СтруктураОтбора.Вставить("Действие", Перечисления.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение);
	
	ЕстьПроверяемыеСтроки = Материалы.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
	Если Не ПоступлениеОднойДатой
	 Или Не СтатусДокументаСогласованИВыше
	 Или Не ЕстьПроверяемыеСтроки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		
	КонецЕсли;
	
	Если ПоступлениеОднойДатой
	   И ЗначениеЗаполнено(ДатаПоступления)
	   И ДатаПоступления < НачалоДня(Дата) И Материалы.Количество() > 0
	   И ЕстьПроверяемыеСтроки Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата%';
							|en = 'Date of receipt cannot be before the document date: %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаПоступления", , Отказ);
		
	КонецЕсли;
	
#КонецОбласти

#Область Док_ДатаОтгрузки
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Продукция", "Отменено");
	
	Если НеОтгружатьЧастями
		И ЗначениеЗаполнено(ДатаОтгрузки)
		И ДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты документа %Дата%';
							|en = 'Shipment date cannot be less than document date%Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
		
	КонецЕсли;

	Если Не ДатаОтгрузкиОбязательна Или Не НеОтгружатьЧастями Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Или ВсеСтрокиОтменены Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
#КонецОбласти

#Область Док_ДатаСогласования
	
	// Срок действия заказа должен быть не меньше даты документа
	Если Статус = Перечисления.СтатусыЗаказовДавальцев.НеСогласован
	   И ЗначениеЗаполнено(ДатаСогласования)
	   И ДатаСогласования < НачалоДня(Дата) Тогда
		
		ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Дата согласования должна быть не меньше даты документа %1';
							|en = 'Date of approval must not be less than the %1 document date'"),
						Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаСогласования",, Отказ);
		
	КонецЕсли;
	
#КонецОбласти

#Область СкладПродукции
	
	Если Не СкладОбязателен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
#КонецОбласти

#Область Док_ДатаОтгрузкиИПоступления
	
	МинимальнаяДатаПоступления = ДатаОтгрузки;
	
	Если ПоступлениеОднойДатой
	   И ЗначениеЗаполнено(ДатаПоступления)
	   И ДатаПоступления > МинимальнаяДатаПоступления Тогда
		МинимальнаяДатаПоступления = ДатаПоступления;
	Иначе
		Для Каждого СтрокаМатериалов Из Материалы Цикл
			Если ЗначениеЗаполнено(СтрокаМатериалов.ДатаПоступления)
			   И СтрокаМатериалов.ДатаПоступления > МинимальнаяДатаПоступления Тогда
				МинимальнаяДатаПоступления = СтрокаМатериалов.ДатаПоступления;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальнаяДатаПоступления)
	   И ЗначениеЗаполнено(ДатаОтгрузки)
	   И МинимальнаяДатаПоступления > ДатаОтгрузки Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата отгрузки должна быть не меньше даты поступления материалов';
							|en = 'Shipment date should not be earlier than the date of material receipt'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
		
	КонецЕсли;
	
	Если ПоступлениеОднойДатой Тогда
		
		ПроверяемаяДата = ДатаПоступления;
		
		Если НеОтгружатьЧастями Тогда
			КонтрольнаяДата = ДатаОтгрузки;
		Иначе
			
			КонтрольнаяДата = Дата(3999, 1, 1);
			Для Каждого СтрокаПродукции Из Продукция Цикл
				КонтрольнаяДата = Мин(СтрокаПродукции.ДатаОтгрузки, КонтрольнаяДата);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроверяемаяДата)
		   И ЗначениеЗаполнено(КонтрольнаяДата)
		   И ПроверяемаяДата > КонтрольнаяДата Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата поступления материалов должна быть меньше даты отгрузки продукции';
								|en = 'Date of material receipt must be less than shipment date'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаПоступления", , Отказ);
			
		КонецЕсли;
		
	Иначе
		
		ДатыОтгрузкиПродукции = Новый Соответствие;
		ОтборСпецификации = Новый Структура("Спецификация");
		
		Если НеОтгружатьЧастями Тогда
			КонтрольнаяДата = ДатаОтгрузки;
		Иначе
			КонтрольнаяДата = Дата(1, 1, 1);
		КонецЕсли;
		
		Для Каждого СтрокаМатериалов Из Материалы Цикл
			
			ПроверяемаяДата = СтрокаМатериалов.ДатаПоступления;
			
			Если Не НеОтгружатьЧастями Тогда
				
				Если ДатыОтгрузкиПродукции[СтрокаМатериалов.Спецификация] = Неопределено Тогда
					
					ОтборСпецификации.Спецификация = СтрокаМатериалов.Спецификация;
					
					ОтобранныеСтроки = Продукция.НайтиСтроки(ОтборСпецификации);
					Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл
						КонтрольнаяДата = Макс(КонтрольнаяДата, ОтобраннаяСтрока.ДатаОтгрузки);
					КонецЦикла;
					
					ДатыОтгрузкиПродукции.Вставить(СтрокаМатериалов.Спецификация, КонтрольнаяДата);
					
				Иначе
					КонтрольнаяДата = ДатыОтгрузкиПродукции[СтрокаМатериалов.Спецификация];
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПроверяемаяДата)
			   И ЗначениеЗаполнено(КонтрольнаяДата)
			   И ПроверяемаяДата > КонтрольнаяДата Тогда
				
				ТекстОшибки = НСтр("ru = 'Дата поступления материалов должна быть меньше даты отгрузки продукции в строке %1 списка Сырье и материалы';
									|en = 'The materials receipt date must be less than the manufactured products shipment date in line %1 of the Raw and consumable materials list'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаМатериалов.НомерСтроки);
				ПутьКТЧ 	= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", СтрокаМатериалов.НомерСтроки, "ДатаПоступления");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
					
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти

#Область Док_Подразделение

	МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	
	Если Статус <> Перечисления.СтатусыЗаказовДавальцев.НеСогласован
	   И Статус <> Перечисления.СтатусыЗаказовДавальцев.Согласован
	   И Не ЗначениеЗаполнено(Подразделение) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Необходимо указать подразделение';
							|en = 'Specify business unit'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Подразделение", , Отказ);
		
	КонецЕсли;
	
#КонецОбласти

#Область Доставка
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
#КонецОбласти

	ПараметрыПроверкиПолучателя = Новый Структура;
	ПараметрыПроверкиПолучателя.Вставить("СписатьНаРасходы", Истина);
	ПараметрыПроверкиПолучателя.Вставить("Получатель",       Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Получатель"" в строке %1 списка ""Продукция""';
						|en = 'The ""Recipient"" field is not filled in line %1 of the ""Manufactured products"" list'");
	
	МассивСтрок = Продукция.НайтиСтроки(ПараметрыПроверкиПолучателя);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ТекстОшибки, СтрокаТаблицы.НомерСтроки),
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", СтрокаТаблицы.НомерСтроки, "Получатель"),,
			Отказ);
		
	КонецЦикла;

	ПараметрыВыбораСтатейИАналитик = Документы.ЗаказДавальца2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(
		ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);

	///////////////////////////////////////////////////////////////////////////
	// Исключим проверенные реквизиты из дальнейшей проверки
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	///////////////////////////////////////////////////////////////////////////
	// Проверка остальных реквизитов
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СтруктураЗалоговыхДанных = ЗалоговыеДанныеЗаказа();
	
	СуммаДокумента = СуммаЗаказанныхСтрок();
	СуммаЗалоговая = СтруктураЗалоговыхДанных.Сумма;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
	Если СтатусДокументаКПроизводствуИВыше Тогда
		ПродажиСервер.ПроверитьЗапретОтгрузки(Партнер, Отказ);
	КонецЕсли;
	
	ЗаказДавальца2_5Локализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ЗаказДавальца2_5Локализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ, Истина);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	
	ЗаказДавальца2_5Локализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Валюта			 = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация		 = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад			 = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	СкладПоступления = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(СкладПоступления);
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.Касса		= Касса;
	
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ХозяйственнаяОперация = ДавальческаяСхемаКлиентСервер.ХозяйственнаяОперацияДоговора();
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
	ОтборВидаЦен = Новый Структура("Владелец, ДоступноДляЗакупки", Партнер, Истина);
	ВидЦеныМатериалы = Справочники.ВидыЦенПоставщиков.ВидЦеныПоУмолчанию(ВидЦеныМатериалы, ОтборВидаЦен);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев2_5") Тогда
		Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт;
	Иначе
		Статус = Перечисления.СтатусыЗаказовДавальцев.Согласован;
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Продукция, Истина);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказДавальца2_5));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Продукция);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Материалы);
	
	// Очистка назначения при копировании.
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из Материалы Цикл
		СтрокаТаблицы.Назначение = ПустоеНазначение;
	КонецЦикла;
	
	ПараметрыЗаполнения = Документы.ЗаказДавальца2_5.ПараметрыЗаполненияНалогообложенияНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ЭтотОбъект, СтруктураДействий, КэшированныеЗначения);
	
	Если Не КэшированныеЗначения.ОбработанныеСтроки.Количество() = 0 Тогда
		
		ТаблицаПродукция = Продукция.Выгрузить();
		ТаблицаПродукция.Колонки.Добавить("СтавкаНДС");
		ТаблицаПродукция.ЗаполнитьЗначения(СтавкаНДС, "СтавкаНДС");
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаПродукция, СтруктураДействий, Неопределено);
		
		Продукция.Загрузить(ТаблицаПродукция);
		
	КонецЕсли;
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСделке(ДанныеЗаполнения)
	
	Сделка  = ДанныеЗаполнения;
	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Партнер");
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Партнер = ДанныеЗаполнения;
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Партнер, "Клиент, Поставщик");
	
	Если Не РеквизитыПартнера.Клиент
	 Или Не РеквизитыПартнера.Поставщик Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			ТекстОшибки = НСтр("ru = 'Ввод на основании доступен только для контрагентов, которые одновременно являются и клиентом, и поставщиком.';
								|en = 'Generation is available only for counterparties who are customers and vendors at the same time.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Ввод на основании доступен только для партнеров, которые одновременно являются и клиентом, и поставщиком.';
								|en = 'Generation is available only for partners who are customers and vendors at the same time.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
КонецПроцедуры

#Область ЗаполнениеПоЗаказуПереработчику

Процедура ЗаполнитьДокументНаОснованииЗаказПереработчику(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаЗаполнитьНаОснованииЗаказПереработчику();
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки                 = Результат[Результат.ВГраница() - 5].Выбрать();
	ТаблицаПродукцияУДавальца      = Результат[Результат.ВГраница() - 4].Выгрузить();
	ТаблицаПродукцияУПереработчика = Результат[Результат.ВГраница() - 3].Выгрузить();
	ТаблицаУслуги                  = Результат[Результат.ВГраница() - 2].Выгрузить();
	ТаблицаМатериалыУДавальца      = Результат[Результат.ВГраница() - 1].Выгрузить();
	ТаблицаМатериалыУПереработчика = Результат[Результат.ВГраница()].Выгрузить();
	
	Если РеквизитыШапки.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найдена организация-переработчик. Проверьте соответствие ""ИНН"", ""КПП"" в справочниках организаций и контаргентов.';
														|en = 'Cannot find the subcontractor company. Check whether ""TIN"" and ""KPP"" of the Companies and Сounterparties catalogs match.'"));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найден контрагент-давалец. Проверьте соответствие ""ИНН"", ""КПП"" в справочниках организаций и контаргентов.';
														|en = 'Cannot find the material provider counterparty. Check whether ""TIN"" and ""KPP"" of the Companies and Сounterparties catalogs match.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	#Область Продукция
	
	РаспределитьПродукциюПереработчикаНаПродукциюДавальца(ТаблицаПродукцияУДавальца, ТаблицаПродукцияУПереработчика, ТаблицаУслуги);
	Продукция.Загрузить(ТаблицаПродукцияУДавальца);
	Если Продукция.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заказы давальца уже оформлены на всю продукцию заказа переработчику.';
													|en = 'Subcontracting sales orders are already registered for all products of the subcontracting purchase order.'"));
	КонецЕсли;
	
	Если НеОтгружатьЧастями Тогда
		Для Каждого ТекущиеДанные Из Продукция Цикл
			ТекущиеДанные.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме",        "Количество");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Продукция, СтруктураДействий, КэшированныеЗначения);
	
	#КонецОбласти
	
	#Область Материалы
	
	РаспределитьМатериалыПереработчикаНаМатериалыДавальца(ТаблицаМатериалыУДавальца, ТаблицаМатериалыУПереработчика);
	Материалы.Загрузить(ТаблицаМатериалыУДавальца);
	Если Материалы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заказы давальца уже оформлены на все материалы заказа переработчику.';
													|en = 'Subcontracting sales orders are already registered for all materials of the subcontracting purchase order.'"));
	КонецЕсли;
	
	Спецификации = Продукция.ВыгрузитьКолонку("Спецификация");
	Спецификации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Спецификации);
	
	Для Каждого ТекущиеДанные Из Материалы Цикл
		
		Если ПоступлениеОднойДатой Тогда
			ТекущиеДанные.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
		
		Если Спецификации.Количество() = 1 Тогда
			ТекущиеДанные.Спецификация = Спецификации[0];
		ИначеЕсли Спецификации.Найти(ТекущиеДанные.Спецификация) = Неопределено Тогда
			ТекущиеДанные.Спецификация = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме",       "Количество");
	СтруктураДействий.Вставить("ЗаполнитьДействиеПоПерерабатываемымМатериалам");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Материалы, СтруктураДействий, КэшированныеЗначения);
	
	#КонецОбласти
	
КонецПроцедуры

Функция ТекстЗапросаЗаполнитьНаОснованииЗаказПереработчику()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеЗаказа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СформированныеЗаказы
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ДанныеЗаказа
	|ГДЕ
	|	ДанныеЗаказа.Основание = &Основание
	|	И ДанныеЗаказа.Проведен
	|	И НЕ ДанныеЗаказа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Спецификации заказа по номерам групп затрат
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыходныеИзделия.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	ВыходныеИзделия.Спецификация      КАК Спецификация
	|ПОМЕСТИТЬ СпецификацииЗаказа
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &Основание
	|	И ВыходныеИзделия.Ссылка.ГруппировкаЗатрат В(
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям),
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям))
	|	И НЕ ВыходныеИзделия.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.НомерГруппыЗатрат,
	|	ВыходныеИзделия.Спецификация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерГруппыЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ДанныеЗаказа.Организация) КАК Организация,
	|	МИНИМУМ(ДанныеЗаказа.Контрагент)  КАК Контрагент,
	|	МИНИМУМ(ДанныеЗаказа.Партнер)     КАК Партнер,
	|	МИНИМУМ(ДанныеЗаказа.Договор)     КАК Договор,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.Склад) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.Склад)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                             КАК Склад,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.СкладПоступления) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.СкладПоступления)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                             КАК СкладПоступления,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.Подразделение) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.Подразделение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ                             КАК Подразделение,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.СтавкаНДС) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.СтавкаНДС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	КОНЕЦ                             КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.НаправлениеДеятельности) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.НаправлениеДеятельности)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                             КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.ГруппаФинансовогоУчета) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.ГруппаФинансовогоУчета)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)
	|	КОНЕЦ                             КАК ГруппаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.БанковскийСчет) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.БанковскийСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ                             КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.БанковскийСчетКонтрагента) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.БанковскийСчетКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ                             КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.Касса) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.Касса)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ                             КАК Касса,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.Грузоотправитель) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.Грузоотправитель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ                             КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.Грузополучатель) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.Грузополучатель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ                             КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.БанковскийСчетГрузоотправителя) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.БанковскийСчетГрузоотправителя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ                             КАК БанковскийСчетГрузоотправителя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.БанковскийСчетГрузополучателя) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.БанковскийСчетГрузополучателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ                             КАК БанковскийСчетГрузополучателя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.КонтактноеЛицо) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.КонтактноеЛицо)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|	КОНЕЦ                             КАК КонтактноеЛицо,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеЗаказа.УслугаПоПереработке) = 1
	|			ТОГДА МИНИМУМ(ДанныеЗаказа.УслугаПоПереработке)
	|		ИНАЧЕ """"
	|	КОНЕЦ                             КАК УслугаПоПереработке
	|ПОМЕСТИТЬ РеквизитыСформированногоЗаказа
	|ИЗ
	|	СформированныеЗаказы КАК СформированныеЗаказы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5 КАК ДанныеЗаказа
	|	ПО ДанныеЗаказа.Ссылка = СформированныеЗаказы.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ДанныеЗаказа.Организация) ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.Организация ЕСТЬ NULL
	|			ТОГДА СпрОрганизации.Ссылка
	|		ИНАЧЕ РеквизитыЗаказа.Организация
	|	КОНЕЦ                                    КАК Организация,
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.Контрагент ЕСТЬ NULL
	|			ТОГДА СпрКонтрагенты.Ссылка
	|		ИНАЧЕ РеквизитыЗаказа.Контрагент
	|	КОНЕЦ                                    КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.Партнер ЕСТЬ NULL
	|			ТОГДА СпрКонтрагенты.Партнер
	|		ИНАЧЕ РеквизитыЗаказа.Партнер
	|	КОНЕЦ                                    КАК Партнер,
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.Договор ЕСТЬ NULL
	|			ТОГДА СпрДоговоры.Ссылка
	|		ИНАЧЕ РеквизитыЗаказа.Договор
	|	КОНЕЦ                                    КАК Договор,
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.БанковскийСчетКонтрагента ЕСТЬ NULL
	|			И ЕСТЬNULL(СпрДоговоры.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) = 
	|				ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|			ТОГДА СпрБанковскиеСчета.Ссылка
	|		КОГДА РеквизитыЗаказа.БанковскийСчетКонтрагента ЕСТЬ NULL
	|			ТОГДА СпрДоговоры.БанковскийСчет
	|		ИНАЧЕ РеквизитыЗаказа.БанковскийСчетКонтрагента
	|	КОНЕЦ                                    КАК БанковскийСчетКонтрагента,
	|	РеквизитыЗаказа.Склад                    КАК Склад,
	|	РеквизитыЗаказа.СкладПоступления         КАК СкладПоступления,
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.Подразделение ЕСТЬ NULL
	|			ТОГДА СпрДоговоры.Подразделение
	|		ИНАЧЕ РеквизитыЗаказа.Подразделение
	|	КОНЕЦ                                    КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РеквизитыЗаказа.НаправлениеДеятельности ЕСТЬ NULL
	|			И СпрДоговоры.НаправлениеДеятельности ЕСТЬ NULL
	|			ТОГДА ЗаказПереработчику.НаправлениеДеятельности
	|		КОГДА СпрДоговоры.НаправлениеДеятельности ЕСТЬ NULL
	|			ТОГДА РеквизитыЗаказа.НаправлениеДеятельности
	|		ИНАЧЕ СпрДоговоры.НаправлениеДеятельности
	|	КОНЕЦ                                    КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА СпрДоговоры.ГруппаФинансовогоУчета ЕСТЬ NULL
	|			ТОГДА РеквизитыЗаказа.ГруппаФинансовогоУчета
	|		ИНАЧЕ СпрДоговоры.ГруппаФинансовогоУчета
	|	КОНЕЦ                                    КАК ГруппаФинансовогоУчета,
	|	РеквизитыЗаказа.СтавкаНДС                КАК СтавкаНДС,
	|	РеквизитыЗаказа.БанковскийСчет           КАК БанковскийСчет,
	|	РеквизитыЗаказа.Касса                    КАК Касса,
	|	РеквизитыЗаказа.Грузоотправитель         КАК Грузоотправитель,
	|	РеквизитыЗаказа.Грузополучатель          КАК Грузополучатель,
	|	РеквизитыЗаказа.КонтактноеЛицо           КАК КонтактноеЛицо,
	|	РеквизитыЗаказа.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	РеквизитыЗаказа.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
	|	РеквизитыЗаказа.УслугаПоПереработке      КАК УслугаПоПереработке,
	|	ЗаказПереработчику.Дата                  КАК Дата,
	|	ЗаказПереработчику.Сделка                КАК Сделка,
	|	ЗаказПереработчику.Валюта                КАК Валюта,
	|	ЗаказПереработчику.НалогообложениеНДС    КАК НалогообложениеНДС,
	|	ЗаказПереработчику.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
	|	ЗаказПереработчику.Ссылка                КАК Основание,
	|	ЗаказПереработчику.НеОтгружатьЧастями    КАК ПоступлениеОднойДатой,
	|	ЗаказПереработчику.ДатаОтгрузки          КАК ДатаПоступления,
	|	ЗаказПереработчику.ПоступлениеОднойДатой КАК НеОтгружатьЧастями,
	|	ЗаказПереработчику.ДатаПоступления       КАК ДатаОтгрузки,
	|	ЗаказПереработчику.ОставитьИзделияУПереработчика КАК ОставитьПродукциюНаХранении,
	|	ЗаказПереработчику.Номер                 КАК НомерПоДаннымПартнера,
	|	ЗаказПереработчику.Дата                  КАК ДатаПоДаннымПартнера,
	|	ЗаказПереработчику.ДатаСогласования      КАК ДатаСогласования
	|ИЗ
	|	Документ.ЗаказПереработчику2_5 КАК ЗаказПереработчику
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыСформированногоЗаказа КАК РеквизитыЗаказа
	|	ПО ИСТИНА
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Переработчик
	|	ПО Переработчик.Ссылка = ЗаказПереработчику.Контрагент
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|	ПО СпрОрганизации.ИНН = Переработчик.ИНН
	|	И СпрОрганизации.КПП = Переработчик.КПП
	|	И НЕ СпрОрганизации.ПометкаУдаления
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Давалец
	|	ПО Давалец.Ссылка = ЗаказПереработчику.Организация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
	|	ПО СпрКонтрагенты.ИНН = Давалец.ИНН
	|	И СпрКонтрагенты.КПП = Давалец.КПП
	|	И НЕ СпрКонтрагенты.ПометкаУдаления
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорДавальца
	|	ПО ДоговорДавальца.Ссылка = ЗаказПереработчику.Договор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК СпрДоговоры
	|	ПО СпрДоговоры.Организация = СпрОрганизации.Ссылка
	|	И СпрДоговоры.Контрагент = СпрКонтрагенты.Ссылка
	|	И СпрДоговоры.Номер = ДоговорДавальца.Номер
	|	И СпрДоговоры.Дата = ДоговорДавальца.Дата
	|	И СпрДоговоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И НЕ СпрДоговоры.ПометкаУдаления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскийСчетДавальца
	|	ПО БанковскийСчетДавальца.Ссылка = ЗаказПереработчику.БанковскийСчет
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК СпрБанковскиеСчета
	|	ПО СпрБанковскиеСчета.Владелец = СпрКонтрагенты.Ссылка
	|	И СпрБанковскиеСчета.НомерСчета = БанковскийСчетДавальца.НомерСчета
	|	И СпрБанковскиеСчета.БИКБанка = БанковскийСчетДавальца.БИКБанка
	|	И НЕ СпрБанковскиеСчета.Закрыт
	|	И НЕ СпрБанковскиеСчета.ПометкаУдаления
	|
	|ГДЕ
	|	ЗаказПереработчику.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Выходные изделия давальца заказа
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыходныеИзделия.Номенклатура      КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика    КАК Характеристика,
	|	ВыходныеИзделия.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Ссылка.ГруппировкаЗатрат В(
	|				ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям),
	|				ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям))
	|			ТОГДА ВыходныеИзделия.Спецификация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	КОНЕЦ                             КАК Спецификация,
	|	СУММА(ВыходныеИзделия.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &Основание
	|	И НЕ ВыходныеИзделия.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.Номенклатура,
	|	ВыходныеИзделия.Характеристика,
	|	ВыходныеИзделия.НомерГруппыЗатрат,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Ссылка.ГруппировкаЗатрат В(
	|				ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям),
	|				ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям))
	|			ТОГДА ВыходныеИзделия.Спецификация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Побочные изделия давальца заказа
	|ВЫБРАТЬ
	|	ПобочныеИзделия.Номенклатура      КАК Номенклатура,
	|	ПобочныеИзделия.Характеристика    КАК Характеристика,
	|	ПобочныеИзделия.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	ЕСТЬNULL(СпецификацииЗаказа.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)) КАК Спецификация,
	|	СУММА(ПобочныеИзделия.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ПобочныеИзделия КАК ПобочныеИзделия
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииЗаказа КАК СпецификацииЗаказа
	|	ПО СпецификацииЗаказа.НомерГруппыЗатрат = ПобочныеИзделия.НомерГруппыЗатрат
	|
	|ГДЕ
	|	ПобочныеИзделия.Ссылка = &Основание
	|	И НЕ ПобочныеИзделия.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ПобочныеИзделия.Номенклатура,
	|	ПобочныеИзделия.Характеристика,
	|	ПобочныеИзделия.НомерГруппыЗатрат,
	|	ЕСТЬNULL(СпецификацииЗаказа.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Выходные изделия давальца этапа
	|ВЫБРАТЬ
	|	ВыходныеИзделия.Номенклатура         КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика       КАК Характеристика,
	|	Распоряжения.НомерГруппыЗатрат       КАК НомерГруппыЗатрат,
	|	ВыходныеИзделия.Ссылка.Спецификация  КАК Спецификация,
	|	СУММА(ВыходныеИзделия.Количество)    КАК Количество
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.Распоряжения КАК Распоряжения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
	|	ПО ВыходныеИзделия.Ссылка = Распоряжения.Распоряжение
	|ГДЕ
	|	Распоряжения.Ссылка = &Основание
	|	И НЕ ВыходныеИзделия.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.Номенклатура,
	|	ВыходныеИзделия.Характеристика,
	|	Распоряжения.НомерГруппыЗатрат,
	|	ВыходныеИзделия.Ссылка.Спецификация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Побочные изделия давальца этапа
	|ВЫБРАТЬ
	|	ПобочныеИзделия.Номенклатура         КАК Номенклатура,
	|	ПобочныеИзделия.Характеристика       КАК Характеристика,
	|	Распоряжения.НомерГруппыЗатрат       КАК НомерГруппыЗатрат,
	|	ВЫБОР
	|		КОГДА ПобочныеИзделия.Ссылка.НомерСледующегоЭтапа = 0
	|			ТОГДА ПобочныеИзделия.Ссылка.Спецификация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	КОНЕЦ                                КАК Спецификация,
	|	СУММА(ПобочныеИзделия.Количество)    КАК Количество
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.Распоряжения КАК Распоряжения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ПобочныеИзделия
	|	ПО ПобочныеИзделия.Ссылка = Распоряжения.Распоряжение
	|ГДЕ
	|	Распоряжения.Ссылка = &Основание
	|	И НЕ ПобочныеИзделия.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ПобочныеИзделия.Номенклатура,
	|	ПобочныеИзделия.Характеристика,
	|	Распоряжения.НомерГруппыЗатрат,
	|	ВЫБОР
	|		КОГДА ПобочныеИзделия.Ссылка.НомерСледующегоЭтапа = 0
	|			ТОГДА ПобочныеИзделия.Ссылка.Спецификация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппыЗатрат,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Продукция переработчика
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Продукция.Номенклатура      КАК Номенклатура,
	|	Продукция.Характеристика    КАК Характеристика,
	|	СУММА(Продукция.Количество) КАК Количество,
	|	СУММА(Продукция.Сумма)      КАК Сумма,
	|	СУММА(Продукция.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(Продукция.СуммаСНДС)  КАК СуммаСНДС
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК Продукция
	|ГДЕ
	|	Продукция.Ссылка В (
	|		ВЫБРАТЬ
	|			СформированныеЗаказы.Ссылка
	|		ИЗ
	|			СформированныеЗаказы КАК СформированныеЗаказы)
	|	И НЕ Продукция.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Продукция.Номенклатура,
	|	Продукция.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Услуги
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Услуги.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	СУММА(Услуги.Сумма)      КАК Сумма,
	|	СУММА(Услуги.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(Услуги.СуммаСНДС)  КАК СуммаСНДС
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Основание
	|	И НЕ Услуги.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Услуги.НомерГруппыЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Материалы давальца заказа
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МатериалыИРаботы.Номенклатура      КАК Номенклатура,
	|	МатериалыИРаботы.Характеристика    КАК Характеристика,
	|	ЕСТЬNULL(СпецификацииЗаказа.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)) КАК Спецификация,
	|	СУММА(МатериалыИРаботы.Количество) КАК Количество,
	|	СУММА(МатериалыИРаботы.Сумма)      КАК Сумма
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ОбеспечениеМатериаламиИРаботами КАК МатериалыИРаботы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииЗаказа КАК СпецификацииЗаказа
	|	ПО СпецификацииЗаказа.НомерГруппыЗатрат = МатериалыИРаботы.НомерГруппыЗатрат
	|	
	|ГДЕ
	|	МатериалыИРаботы.Ссылка = &Основание
	|	И НЕ МатериалыИРаботы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ МатериалыИРаботы.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СпецификацииЗаказа.Спецификация, ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)),
	|	МатериалыИРаботы.Номенклатура,
	|	МатериалыИРаботы.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Материалы давальца этапа
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Номенклатура        КАК Номенклатура,
	|	МатериалыИРаботы.Характеристика      КАК Характеристика,
	|	ВЫБОР
	|		КОГДА МатериалыИРаботы.Ссылка.НомерСледующегоЭтапа = 0
	|			ТОГДА МатериалыИРаботы.Ссылка.Спецификация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	КОНЕЦ                                КАК Спецификация,
	|	СУММА(МатериалыИРаботы.Количество)   КАК Количество,
	|	0                                    КАК Сумма
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.Распоряжения КАК Распоряжения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК МатериалыИРаботы
	|	ПО МатериалыИРаботы.Ссылка = Распоряжения.Распоряжение
	|ГДЕ
	|	Распоряжения.Ссылка = &Основание
	|	И НЕ МатериалыИРаботы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ МатериалыИРаботы.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИРаботы.Номенклатура,
	|	МатериалыИРаботы.Характеристика,
	|	ВЫБОР
	|		КОГДА МатериалыИРаботы.Ссылка.НомерСледующегоЭтапа = 0
	|			ТОГДА МатериалыИРаботы.Ссылка.Спецификация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спецификация,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Материалы переработчика
	|ВЫБРАТЬ
	|	МатериалыИРаботы.Номенклатура      КАК Номенклатура,
	|	МатериалыИРаботы.Характеристика    КАК Характеристика,
	|	СУММА(МатериалыИРаботы.Количество) КАК Количество,
	|	СУММА(МатериалыИРаботы.Сумма)      КАК Сумма
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК МатериалыИРаботы
	|ГДЕ
	|	МатериалыИРаботы.Ссылка В (
	|		ВЫБРАТЬ
	|			СформированныеЗаказы.Ссылка
	|		ИЗ
	|			СформированныеЗаказы КАК СформированныеЗаказы)
	|	И НЕ МатериалыИРаботы.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИРаботы.Номенклатура,
	|	МатериалыИРаботы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура РаспределитьПродукциюПереработчикаНаПродукциюДавальца(ПродукцияУДавальца, ПродукцияУПереработчика, ТаблицаУслуги)
	
	// Распределим суммы услуг переработки по изделиям.
	ПродукцияУДавальца.Колонки.Добавить(
		"Сумма",
		РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
	ПродукцияУДавальца.Колонки.Добавить(
		"СуммаНДС",
		РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
	ПродукцияУДавальца.Колонки.Добавить(
		"СуммаСНДС",
		РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
	
	ПродукцияУДавальца.Индексы.Добавить("НомерГруппыЗатрат");
	
	ГруппыЗатрат = Новый Соответствие;
	Для Каждого ТекущаяУслуга Из ТаблицаУслуги Цикл
		
		Отбор = Новый Структура("НомерГруппыЗатрат", ТекущаяУслуга.НомерГруппыЗатрат);
		НайденныеСтроки = ПродукцияУДавальца.НайтиСтроки(Отбор);
		
		ВсегоКоличество = ГруппыЗатрат.Получить(ТекущаяУслуга.НомерГруппыЗатрат);
		Если ВсегоКоличество = Неопределено Тогда
			
			ВсегоКоличество = 0;
			Для Каждого ТекущаяПродукция Из НайденныеСтроки Цикл
				ВсегоКоличество = ВсегоКоличество + ТекущаяПродукция.Количество;
			КонецЦикла;
			
			ГруппыЗатрат.Вставить(ТекущаяУслуга.НомерГруппыЗатрат, ВсегоКоличество);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВсегоКоличество) Тогда
			
			СуммаУслуг     = ТекущаяУслуга.Сумма;
			СуммаНДСУслуг  = ТекущаяУслуга.СуммаНДС;
			СуммаСНДСУслуг = ТекущаяУслуга.СуммаСНДС;
			Для Каждого ТекущаяПродукция Из НайденныеСтроки Цикл
				
				СуммаПродукции             = Окр(СуммаУслуг * ТекущаяПродукция.Количество / ВсегоКоличество, 2);
				СуммаНДСПродукции          = Окр(СуммаНДСУслуг * ТекущаяПродукция.Количество / ВсегоКоличество, 2);
				СуммаСНДСПродукции         = Окр(СуммаСНДСУслуг * ТекущаяПродукция.Количество / ВсегоКоличество, 2);
				ТекущаяПродукция.Сумма     = ТекущаяПродукция.Сумма + СуммаПродукции;
				ТекущаяПродукция.СуммаНДС  = ТекущаяПродукция.СуммаНДС + СуммаНДСПродукции;
				ТекущаяПродукция.СуммаСНДС = ТекущаяПродукция.СуммаСНДС + СуммаСНДСПродукции;
				
				ВсегоКоличество = ВсегоКоличество - ТекущаяПродукция.Количество;
				СуммаУслуг      = СуммаУслуг - СуммаПродукции;
				СуммаНДСУслуг   = СуммаНДСУслуг - СуммаНДСПродукции;
				СуммаСНДСУслуг  = СуммаСНДСУслуг - СуммаСНДСПродукции;
				
				Если ВсегоКоличество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПродукцияУДавальца.Индексы.Очистить();
	ПродукцияУДавальца.Свернуть("Номенклатура, Характеристика, Спецификация", "Количество, Сумма, СуммаНДС, СуммаСНДС");
	
	// Учтем уже оформленные заказы.
	ПродукцияУДавальца.Индексы.Добавить("Номенклатура, Характеристика");
	
	Для Каждого ТекущаяПродукцияПереработчика Из ПродукцияУПереработчика Цикл
		
		КоличествоУПереработчика = ТекущаяПродукцияПереработчика.Количество;
		СуммаУПереработчика      = ТекущаяПродукцияПереработчика.Сумма;
		СуммаНДСУПереработчика   = ТекущаяПродукцияПереработчика.СуммаНДС;
		СуммаСНДСУПереработчика  = ТекущаяПродукцияПереработчика.СуммаСНДС;
		
		Отбор =
			Новый Структура(
				"Номенклатура, Характеристика",
				ТекущаяПродукцияПереработчика.Номенклатура,
				ТекущаяПродукцияПереработчика.Характеристика);
		
		Для Каждого ТекущаяПродукция Из ПродукцияУДавальца.НайтиСтроки(Отбор) Цикл
			
			Если ТекущаяПродукция.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоУПереработчика, ТекущаяПродукция.Количество);
			Сумма      = Мин(СуммаУПереработчика, ТекущаяПродукция.Сумма);
			СуммаНДС   = Мин(СуммаНДСУПереработчика, ТекущаяПродукция.СуммаНДС);
			СуммаСНДС  = Мин(СуммаСНДСУПереработчика, ТекущаяПродукция.СуммаСНДС);
			
			ТекущаяПродукция.Количество = ТекущаяПродукция.Количество - Количество;
			ТекущаяПродукция.Сумма      = ТекущаяПродукция.Сумма - Сумма;
			ТекущаяПродукция.СуммаНДС   = ТекущаяПродукция.СуммаНДС - СуммаНДС;
			ТекущаяПродукция.СуммаСНДС  = ТекущаяПродукция.СуммаСНДС - СуммаСНДС;
			
			КоличествоУПереработчика = КоличествоУПереработчика - Количество;
			СуммаУПереработчика      = СуммаУПереработчика - Сумма;
			СуммаНДСУПереработчика   = СуммаНДСУПереработчика - СуммаНДС;
			СуммаСНДСУПереработчика  = СуммаСНДСУПереработчика - СуммаСНДС;
			
			Если КоличествоУПереработчика = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПродукцияУДавальца.Индексы.Очистить();
	
	Отбор = Новый Структура("Количество", 0);
	Для Каждого ТекущиеДанные Из ПродукцияУДавальца.НайтиСтроки(Отбор) Цикл
		ПродукцияУДавальца.Удалить(ТекущиеДанные);
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьМатериалыПереработчикаНаМатериалыДавальца(МатериалыУДавальца, МатериалыУПереработчика)
	
	// Учтем уже оформленные заказы.
	МатериалыУДавальца.Индексы.Добавить("Номенклатура, Характеристика");
	
	Для Каждого ТекущийМатериалПереработчика Из МатериалыУПереработчика Цикл
		
		КоличествоУПереработчика = ТекущийМатериалПереработчика.Количество;
		СуммаУПереработчика      = ТекущийМатериалПереработчика.Сумма;
		
		Отбор =
			Новый Структура(
				"Номенклатура, Характеристика",
				ТекущийМатериалПереработчика.Номенклатура,
				ТекущийМатериалПереработчика.Характеристика);
		
		Для Каждого ТекущийМатериал Из МатериалыУДавальца.НайтиСтроки(Отбор) Цикл
			
			Если ТекущийМатериал.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоУПереработчика, ТекущийМатериал.Количество);
			Сумма      = Мин(СуммаУПереработчика, ТекущийМатериал.Сумма);
			
			ТекущийМатериал.Количество = ТекущийМатериал.Количество - Количество;
			ТекущийМатериал.Сумма      = ТекущийМатериал.Сумма - Сумма;
			
			КоличествоУПереработчика = КоличествоУПереработчика - Количество;
			СуммаУПереработчика      = СуммаУПереработчика - Сумма;
			
			Если КоличествоУПереработчика = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МатериалыУДавальца.Индексы.Очистить();
	
	Отбор = Новый Структура("Количество", 0);
	Для Каждого ТекущиеДанные Из МатериалыУДавальца.НайтиСтроки(Отбор) Цикл
		МатериалыУДавальца.Удалить(ТекущиеДанные);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьПустыеНазначенияМатериалы()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Индекс",       Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для Счетчик = 1 По Материалы.Количество() Цикл
		
		Строка = Материалы[Счетчик - 1];
		
		Если Не ЗначениеЗаполнено(Строка.Назначение) Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Индекс = Счетчик - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Индекс       КАК Индекс,
	|	Таблица.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Индекс КАК Индекс
	|ИЗ
	|	ВтТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = Таблица.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
		
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Материалы[Выборка.Индекс].Назначение = НазначениеМатериалы;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
