#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует представление объекта метаданных на основном языке.
// Возвращаемое значение:
//  Строка - Представление объекта на основном языке
//
Функция ПредставлениеОбъектаНаОсновномЯзыке() Экспорт
	
	СинонимДляЗаписиВИнформационнуюБазу = НСтр("ru = 'Заказ давальца';
												|en = 'Subcontracting sales order'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат СинонимДляЗаписиВИнформационнуюБазу;
	
КонецФункции

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Автор";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Автор, Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "Склад", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор, Организация";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены  = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "СкладПоступления", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор, Менеджер, Организация";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены  = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "Подразделение", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "БанковскийСчет", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Автор, Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Автор, Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "Касса", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда            = "Контрагент";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены             = "Контрагент";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "БанковскийСчетКонтрагента", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Договор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены  = "Договор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(
		ОписаниеРеквизитов, "УслугаПоПереработке, СтавкаНДС", Параметры);
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	МеханизмыДокумента.Добавить("Закупки");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ПриемВПереработку");
	МеханизмыДокумента.Добавить("Продажи");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("ЦеныИСкидки");
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	
	ЗаказДавальца2_5Локализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаказДавальца2_5") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры);
	ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство2_2;
	Если ПравоДоступа("Добавление", МенеджерОбъекта) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер            = МенеджерОбъекта.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление       = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МенеджерОбъекта);
		КомандаСоздатьНаОсновании.РежимЗаписи         = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
		КомандаСоздатьНаОсновании.Обработчик          = 
			"СозданиеНаОснованииУТКлиент.СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальца2_5";
		
	КонецЕсли;
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Команда = Документы.ПриемкаТоваровНаХранение.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.Представление = ДавальческаяСхемаКлиентСервер.СинонимДокументаПриемкаТоваровНаХранение();
	КонецЕсли;
	
	Команда = Документы.ОтгрузкаТоваровСХранения.ДобавитьКомандуОтгрузкаТоваровСХраненияПередачаДавальцуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ОставитьПродукциюНаХранении", Ложь);
	КонецЕсли;
	
	Документы.ОтгрузкаТоваровСХранения.ДобавитьКомандуОтгрузкаТоваровСХраненияВозвратДавальцуСоздатьНаОснованииЗаказа(
		КомандыСозданияНаОсновании);
	
	Документы.ОтчетДавальцу2_5.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Обработки.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.ДобавитьКомандуСоздатьНаОсновании(
		КомандыСозданияНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(
		КомандыСозданияНаОсновании);
	
	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОснованииСчетаНаОплатуЗаказДавальца(
		КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПроизводствоБезЗаказа.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьПередачуПродукцииНаСкладНаОсновании(КомандыСозданияНаОсновании);
	
	ПроизводствоСервер.ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании(КомандыСозданияНаОсновании);
	
	Справочники.Претензии.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ЗаказДавальца2_5Локализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Заказ давальца".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
// Возвращаемое значение:
//  СтрокаТаблицыЗначений
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца2_5) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер            = Метаданные.Документы.ЗаказДавальца2_5.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление       = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказДавальца2_5);
		КомандаСоздатьНаОсновании.РежимЗаписи         = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду создания документа "Заказ давальца".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
// Возвращаемое значение:
//  СтрокаТаблицыЗначений
//
Функция ДобавитьКомандуСоздатьНаОснованииЗаказаПереработчику(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца2_5) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер            = Метаданные.Документы.ЗаказДавальца2_5.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление       = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказДавальца2_5);
		КомандаСоздатьНаОсновании.РежимЗаписи         = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции =
			"ИспользоватьНесколькоОрганизацийПроизводствоИзДавальческогоСырья2_5";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
// 	КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// 	Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияЗаказаДавальца(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВзаиморасчетыСервер.ЗадолженностьКлиентов_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВзаиморасчетыСервер.КарточкаРасчетовСКлиентом_ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КонтрольПоставкиСырьяИМатериаловДавальцем2_5.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КонтрольПередачиПродукцииДавальцу2_5.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасшифровкаСтоимостиПереработки) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		КомандаОтчет.Менеджер           = Метаданные.Отчеты.РасшифровкаСтоимостиПереработки.ПолноеИмя();
		КомандаОтчет.Представление      = НСтр("ru = 'Расшифровка стоимости переработки';
												|en = 'Overtime cost drill-down'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность           = "Обычное";
		КомандаОтчет.КлючВарианта       = "РасшифровкаСтоимости";
		
	КонецЕсли;
	
	ЗаказДавальца2_5Локализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#Область Статус

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка                КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
	|	ТаблицаДокументов.Статус = &Статус      КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен              КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
	|	ИСТИНА                                  КАК ЗаписьПроведением
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ТаблицаДокументов
	|
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос.УстановитьПараметр("Статус",           Перечисления.СтатусыЗаказовДавальцев[НовыйСтатус]);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует запрос проверки при автосмене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка                КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ТаблицаДокументов.Проведен              КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
	|	ИСТИНА                                  КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - ПеречислениеСсылка.СтатусыЗаказовДавальцев - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Проверок не требуется
	
КонецФункции

// Формирует массив допустимых статусов на основании настроек программы
//
// Параметры:
//	ИмяДокумента - Строка - Имя вводимого документа.
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации, Неопределено -
//
// Возвращаемое значение:
//	Массив - массив допустимых статусов.
//
Функция ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента, ХозяйственнаяОперация = Неопределено) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	
	Если ИмяДокумента = "ПриемкаТоваровНаХранение" Тогда
		
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
		
	ИначеЕсли ИмяДокумента = "ОтгрузкаТоваровСХранения" Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5 Тогда
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
		КонецЕсли;
		
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
		
	ИначеЕсли ИмяДокумента = "ОтчетДавальцу2_5" Тогда
		
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
		
	КонецЕсли;
	
	Возврат МассивДопустимыхСтатусов;
	
КонецФункции

#КонецОбласти

#Область РасчетСостояний

// Осуществляет вычисление текущего состояния заказа давальца
//
// Параметры:
//	ЗаказДавальца            - ДокументСсылка.ЗаказДавальца2_5 - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - ФормаКлиентскогоПриложения - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояние(Знач ЗаказДавальца, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаказДавальца)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
	
		УстановитьПривилегированныйРежим(Истина); 
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА НЕ ДокументЗаказКлиента.Проведен 
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
			|		ИНАЧЕ
			|			ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)) 
			|	КОНЕЦ КАК Состояние,
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаказКлиента.Проведен)
			|			ТОГДА ЛОЖЬ
			|		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)
			|			ТОГДА ЛОЖЬ
			|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|				И &ТекущаяДата > СостоянияЗаказовКлиентов.ДатаСобытия 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПросрочено,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты,0) КАК СуммаОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты,0) КАК ПроцентОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки,0) КАК СуммаОтгрузки,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки,0) КАК ПроцентОтгрузки,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) КАК ЕстьРасхожденияОрдерНакладная,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаказКлиента.Проведен И
			|			((ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
			|			ДокументЗаказКлиента.СуммаДокумента > 0)
			|			ИЛИ НЕ (ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
			|				ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)))
			|		ТОГДА
			|			ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК ЧИСЛО(31,2))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаДолга,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга,0) КАК ПроцентДолга,
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаказКлиента.Проведен
			|			И (ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|				ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным))
			|		ТОГДА
			|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток,0)
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ЗаказДавальца2_5 КАК ДокументЗаказКлиента
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(,ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыСКлиентамиОстатки
			|	ПО ИСТИНА
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
			|	ПО СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка
			|
			|ГДЕ
			|	ДокументЗаказКлиента.Ссылка = &ЗаказДавальца
			|";
		
		ОбъектРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказДавальца, "ОбъектРасчетов");
		
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
		Запрос.УстановитьПараметр("ЗаказДавальца",  ЗаказДавальца);
		Запрос.УстановитьПараметр("ТекущаяДата",    НачалоДня(ТекущаяДатаСеанса()));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст запроса для расчета состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийЗаказов() Экспорт
	
	ТекстЗапроса ="
		|ВЫБРАТЬ 
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
		|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
		|// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И ДокументЗаказКлиента.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству))
		|		И ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0
		|		И ЕСТЬNULL(СостояниеВзаиморасчетов.ОплаченоПоЗаказу, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|		И (ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) > 0 ИЛИ СостояниеВзаиморасчетов.Заказ ЕСТЬ NULL)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения)
		|// ГОТОВ К ОБЕСПЕЧЕНИЮ ///////////////////////////////////////////////////
		|	КОГДА
		|		ВТОбеспечениеЗаказа.ЕстьКОбеспечению
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОбеспечению)
		|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ ////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|		И ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
		|		И ЕСТЬNULL(СостояниеВзаиморасчетов.ОплаченоПоЗаказу, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|		И (ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) > 0 ИЛИ СостояниеВзаиморасчетов.Заказ ЕСТЬ NULL)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки)
		|// ОЖИДАЕТСЯ ОБЕСПЕЧЕНИЕ ////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВтЧастичноВНаличии.Ссылка ЕСТЬ NULL
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение)
		|// ГОТОВ К ОТГРУЗКЕ //////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТОбеспечениеЗаказа.ВсеОтгрузить
		|			ИЛИ ВТРасхожденияОрдерНакладная.ТребуетсяОрдер
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОтгрузке)
		|// В ПРОЦЕССЕ ОТГРУЗКИ //////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|		И (ЕСТЬNULL(СостояниеВзаиморасчетов.ОплаченоПоЗаказу, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|			ИЛИ ЕСТЬNULL(СостояниеВзаиморасчетов.СуммаЗаказа, 0) - ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|			ИЛИ НЕ ДокументЗаказКлиента.ПорядокРасчетов В (ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам), ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)))
		|		И (ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) <> 0 
		|			ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0) <> 0
		|			ИЛИ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) <> 0)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки)
		|// ОЖИДАЕТСЯ ОПЛАТА ПОСЛЕ ОТГРУЗКИ /////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|		И ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 
		|		И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0
		|		И ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) > 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки)
		|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)
		|		И &КонтролироватьЗакрытиеЗаказаДавальца2_5
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКЗакрытию)
		|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус В
		|				(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
		|КОНЕЦ КАК Состояние,
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1)
		|// ДАТА СОГЛАСОВАНИЯ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|	ТОГДА
		|		ДокументЗаказКлиента.ДатаСогласования
		|// ДАТА АВАНСА /////////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован)
		|		И ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0
		|		И ЕСТЬNULL(СостояниеВзаиморасчетов.ОплаченоПоЗаказу, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|		И (ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) > 0 ИЛИ СостояниеВзаиморасчетов.Заказ ЕСТЬ NULL)
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПРЕДОПЛАТЫ /////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|		И ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
		|		И ЕСТЬNULL(СостояниеВзаиморасчетов.ОплаченоПоЗаказу, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|		И (ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) > 0 ИЛИ СостояниеВзаиморасчетов.Заказ ЕСТЬ NULL)
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|		И ДокументЗаказКлиента.СуммаДокумента > 0
		|		И (ЕСТЬNULL(СостояниеВзаиморасчетов.ОплаченоПоЗаказу, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|			ИЛИ ЕСТЬNULL(СостояниеВзаиморасчетов.СуммаЗаказа, 0) - ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|			ИЛИ НЕ ДокументЗаказКлиента.ПорядокРасчетов В (ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам), ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)))
		|		И (ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаКонечныйОстаток, 0) > 0 ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) > 0)
		|	ТОГДА
		|		ЕСТЬNULL(ДатыОтгрузкиЗаказовКлиентов.МинимальнаяДатаОтгрузки, ДокументЗаказКлиента.ДатаОтгрузки)
		|// ДАТА ОПЛАТЫ ПОСЛЕ ОТГРУЗКИ //////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|		И ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
		|		И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0
		|		И ЕСТЬNULL(СостояниеВзаиморасчетов.ОсталосьОплатить, 0) > 0
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|КОНЕЦ КАК ДатаСобытия,
		|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|ЕСТЬNULL(СостояниеВзаиморасчетов.СуммаОплаты, 0) КАК СуммаОплаты,
		|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|ЕСТЬNULL(СостояниеВзаиморасчетов.ПроцентОплаты, 0) КАК ПроцентОплаты,
		|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|ЕСТЬNULL(СостояниеВзаиморасчетов.СуммаОтгрузки, 0) КАК СуммаОтгрузки,
		|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
		|ЕСТЬNULL(СостояниеВзаиморасчетов.ПроцентОтгрузки, 0) КАК ПроцентОтгрузки,
		|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|ЕСТЬNULL(СостояниеВзаиморасчетов.СуммаДолга, 0) КАК СуммаДолга,
		|// ПРОЦЕНТ ДОЛГА ////////////////////////////////////////////////////////////
		|ЕСТЬNULL(СостояниеВзаиморасчетов.ПроцентДолга, 0) КАК ПроцентДолга,
		|// РАСХОЖДЕНИЯ ОРДЕР-НАКЛАДНАЯ//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен
		|		И ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|		И ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(ВТРасхожденияОрдерНакладная.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ)
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК ЕстьРасхожденияОрдерНакладная,
		|//ССЫЛКА НА ЗАКАЗ///////////////////////////////////////////////////////
		|	ДокументЗаказКлиента.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказДавальца2_5 КАК ДокументЗаказКлиента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтСостояниеВзаиморасчетов КАК СостояниеВзаиморасчетов
		|	ПО ДокументЗаказКлиента.Ссылка = СостояниеВзаиморасчетов.Заказ
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказыКлиентовОстатки КАК ЗаказыКлиентовОстатки
		|	ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыКОтгрузкеОстатки КАК ТоварыКОтгрузкеОстатки
		|	ПО ДокументЗаказКлиента.Ссылка = ТоварыКОтгрузкеОстатки.ЗаказКлиента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыАктуальностиЗаказовКлиентов КАК ДатыАктуальностиРасчетов
		|	ПО ДокументЗаказКлиента.ОбъектРасчетов = ДатыАктуальностиРасчетов.ОбъектРасчетов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДатыОтгрузкиЗаказовКлиентов КАК ДатыОтгрузкиЗаказовКлиентов
		|	ПО ДокументЗаказКлиента.Ссылка = ДатыОтгрузкиЗаказовКлиентов.ЗаказКлиента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОбеспечениеЗаказа КАК ВТОбеспечениеЗаказа
		|	ПО ВТОбеспечениеЗаказа.Ссылка = ДокументЗаказКлиента.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтЧастичноВНаличии КАК ВтЧастичноВНаличии
		|	ПО ВтЧастичноВНаличии.Ссылка = ДокументЗаказКлиента.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРасхожденияОрдерНакладная КАК ВТРасхожденияОрдерНакладная
		|	ПО ДокументЗаказКлиента.Ссылка = ВТРасхожденияОрдерНакладная.ЗаказКлиента
		|
		|ГДЕ
		|	ДокументЗаказКлиента.Ссылка В (&МассивЗаказов)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Округление

// Возвращает параметры для округления
// 
// Возвращаемое значение:
// 	Структура - описание:
// 	* Продукция - см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров
// 	* Материалы - см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров
//
Функция ПараметрыТЧДляОкругления() Экспорт
	
	ПараметрыТЧ = Новый Структура;
	
	ИмяТЧ = "Продукция";
	ИмяПоляСклад = "Склад";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	ИмяТЧ = "Материалы";
	ИмяПоляСклад = "Склад";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, ИмяТЧ + "." + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
		
	Возврат ПараметрыТЧ;

КонецФункции

#КонецОбласти

#Область Прочее

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ЗаказДавальца2_5 - Ссылка на документа.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата",                  Дата(1,1,1));
	СтруктураРеквизитов.Вставить("Организация",           Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("Партнер",               Справочники.Партнеры.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("Контрагент",            Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("Договор",               Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ПорядокРасчетов",       Перечисления.ПорядокРасчетов.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	СтруктураРеквизитов.Вставить("Валюта",                Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов",  Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("СуммаДокумента",        0);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов",   0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата            КАК Дата,
	|	ДанныеДокумента.Организация     КАК Организация,
	|	ДанныеДокумента.Партнер         КАК Партнер,
	|	ДанныеДокумента.Контрагент      КАК Контрагент,
	|	ДанныеДокумента.Договор         КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
	|		ИНАЧЕ ДанныеДокумента.ХозяйственнаяОперация
	|	КОНЕЦ                           КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Валюта          КАК Валюта,
	|	ДанныеДокумента.Валюта          КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента  КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаДокумента  КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Заполняет "ВременнаяТаблицаМатериалов" данными о материалах по данным спецификаций.
//
// Параметры:
//	ПараметрыСпецификаций - Структура - параметры для формирования списка материалов, требуемых для выпуска продукции
//	ВременнаяТаблицаМатериалов - ТаблицаЗначений - таблица, в которую будут помещены рассчитанные данные.
//
Процедура МатериалыПоСпецификациям(ПараметрыСпецификаций, ВременнаяТаблицаМатериалов) Экспорт
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
		ПараметрыСпецификаций.ПереченьДанных,,
		Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство);
	
	ПараметрыВыборки.ПолучитьСведенияАвтовыбора          = Ложь;
	ПараметрыВыборки.ПолучитьПредставления               = Ложь;
	ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
	ПараметрыВыборки.СпособРасчетаМатериалов             = Перечисления.СпособыРасчетаМатериалов.МаксимальноеПотребление;
	
	Для Каждого ТекНоменклатура Из ПараметрыСпецификаций.СписокНоменклатуры Цикл
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ТекНоменклатура);
		
		Результат = Справочники.РесурсныеСпецификации.ДанныеСпецификацииСПолуфабрикатами(
			ДанныеПоНоменклатуре, Истина, ПараметрыВыборки);
		
		Для Каждого СтрТЧ Из Результат.МатериалыИУслуги Цикл
			
			НоваяСтрока = ВременнаяТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТЧ);
			НоваяСтрока.Спецификация       = ДанныеПоНоменклатуре.Спецификация;
			НоваяСтрока.Упаковка           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВременнаяТаблицаМатериалов.Количество() > 0 Тогда
		ВременнаяТаблицаМатериалов.Свернуть(
			"Номенклатура, Характеристика, Упаковка, ТипНоменклатуры, Спецификация", "КоличествоУпаковок, Количество");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с данными для получения перечня материалов согласно спецификации.
//
// Параметры:
//	РеквизитыЗаказа - ДокументОбъект.ЗаказДавальца2_5, Структура - содержит реквизиты шапки документа
//	ДанныеСтроки - СтрокаТаблицыЗначений - строка с данными для заполнения структуры.
//
// Возвращаемое значение:
//	Структура - структура с результирующими данными.
//
Функция ДанныеПоНоменклатуре(РеквизитыЗаказа, ДанныеСтроки) Экспорт
	
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
	
	ДанныеПоНоменклатуре.НачалоПроизводства      = РеквизитыЗаказа.Дата;
	ДанныеПоНоменклатуре.НаправлениеДеятельности = РеквизитыЗаказа.НаправлениеДеятельности;
	ДанныеПоНоменклатуре.Номенклатура            = ДанныеСтроки.Номенклатура;
	ДанныеПоНоменклатуре.Характеристика          = ДанныеСтроки.Характеристика;
	ДанныеПоНоменклатуре.Количество              = ДанныеСтроки.Количество;
	ДанныеПоНоменклатуре.Спецификация            = ДанныеСтроки.Спецификация;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
//	Структура - структура состояния выполнения документа.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",        1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление",              2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление",      3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение",              4);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",                 5);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка",         6);
	СтруктураСостояние.Вставить("ВыводитьТаблицуУслугДавальцуКОформлению", 7);
	
	СтруктураСостояние.Вставить("ЭтоЗаказ",                          Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",    Ложь);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыОтгрузки",         ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов"));
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",               "Продукция");
	СтруктураСостояние.Вставить("ИмяТЧТоварыПоступление",            "Материалы");
	СтруктураСостояние.Вставить("ИмяПоляСумма",                      "Сумма");
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка",          НСтр("ru = 'Продукция';
																			|en = 'Manufactured products'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление",       НСтр("ru = 'Сырье и материалы';
																			|en = 'Raw and consumable materials'"));
	
	СтруктураДопЗапросов = Новый Структура;
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ", ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ());
	
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	Возврат СтруктураСостояние
	
КонецФункции

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Объект.ТипПроизводственногоПроцесса);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.ДоступныСпецификацииНаПобочныйВыход = Истина;
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура            = "Объект.Продукция.Номенклатура";
	СвязиПараметровВыбора.Характеристика          = "Объект.Продукция.Характеристика";
	СвязиПараметровВыбора.НачалоПроизводства      = "Объект.Дата";
	СвязиПараметровВыбора.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Вставить("Объект.Продукция.Спецификация", СвязиПараметровВыбора);
	
	ПараметрыВыбораСпецификаций.Вставить("ИгнорируемыеПараметрыНазначения",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер));
	
	Возврат ПараметрыВыбораСпецификаций;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "ТипПроизводственногоПроцесса";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//  Заказ              - ДокументСсылка.ЗаказДавальца2_5 - Документ, на основании которого осуществляется ввод
//  Статус             - ПеречислениеСсылка - Статус документа, на основании которого осуществляется ввод
//  ЕстьОшибкиПроведен - Булево - Если Истина - документ, на основании которого осуществляется ввод, не проведен
//  ИмяДокумента       - см. ДопустимыеСтатусыВводаНаОсновании.ИмяДокумента
//
Процедура ПроверитьВозможностьВводаНаОсновании(
			Заказ,
			Статус,
			ЕстьОшибкиПроведен = Ложь,
			ИмяДокумента = "") Экспорт
	
	ДопустимыеСтатусы = ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента);
	ЕстьОшибкиСтатус  = ДопустимыеСтатусы.Найти(Статус) = Неопределено;
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиВозможностиВводаНаОсновании();
	ПараметрыПроверки.Статус = Статус;
	ПараметрыПроверки.ЕстьОшибкиПроведен = ЕстьОшибкиПроведен;
	ПараметрыПроверки.ЕстьОшибкиСтатус = ЕстьОшибкиСтатус;
	ПараметрыПроверки.МассивДопустимыхСтатусов = ДопустимыеСтатусы;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСПараметрами(Заказ, ПараметрыПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат "Склад, СкладПоступления";
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - с ключами:
//   *  Продукция - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//   *  Материалы - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий 
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = Новый Структура;
	
	// Продукция
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЗаказДавальца2_5";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары      = "Продукция";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии       = "Продукция";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Склад");
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
	ПараметрыУказанияСерийТЧ.ЭтоЗаказ             = Истина;
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Истина;
	
	ПараметрыУказанияСерий.Вставить("Продукция", ПараметрыУказанияСерийТЧ);
	
	// Материалы
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ЗаказДавальца2_5";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары      = "Материалы";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии       = "Материалы";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.СкладПоступления, Истина);
	
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Действие");
	ПараметрыУказанияСерийТЧ.ИменаПолейДополнительные.Добавить("Отменено");
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);
		
	ПараметрыУказанияСерий.Вставить("Материалы", ПараметрыУказанияСерийТЧ);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
//  Возвращаемое значение:
//   Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = "";
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "Продукция" Тогда
		
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийПродукция();
		
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "Материалы" Тогда
		
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалы();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий табличной части "Продукция"
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийПродукция() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий табличной части "Материалы"
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалы() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Склад               КАК Склад,
	|	Товары.Действие            КАК Действие,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Отменено            КАК Отменено
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|		  ИЛИ Товары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся)
	|		  ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ                      КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ПолитикиУчетаСерий.Склад = Товары.Склад
	|		 И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки         КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область УчетНДС

// Инициализирует параметры заполнения налогообложения НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ЗаказДавальца2_5, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи
//
Функция ПараметрыЗаполненияНалогообложенияНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	ПараметрыЗаполнения.Организация				= Объект.Организация;
	ПараметрыЗаполнения.Дата					= Объект.Дата;
	ПараметрыЗаполнения.Склад					= Объект.Склад;
	ПараметрыЗаполнения.Договор					= Объект.Договор;
	ПараметрыЗаполнения.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.ОтчетДавальцу			= Истина;
	ПараметрыЗаполнения.ЭтоЗаказ				= Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область Взаиморасчеты

// Возвращает параметры механизма взаиморасчетов.
//
// Параметры:
// 	ДанныеЗаполнения - ДокументОбъект, СправочникОбъект, Структура, ДанныеФормыСтруктура - Объект или коллекция для
//              расчета параметров взаиморасчетов.
//
// Возвращаемое значение:
// 	Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма
//
Функция ПараметрыВзаиморасчеты(ДанныеЗаполнения = Неопределено) Экспорт
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	
	СтруктураПараметров.ЭтоЗаказ                         = Истина;
	СтруктураПараметров.ТипРасчетов                      = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	СтруктураПараметров.КурсЧислитель                    = "";
	СтруктураПараметров.КурсЗнаменатель                  = "";
	СтруктураПараметров.ГрафикОплаты                     = "Объект.ГрафикОплаты";
	
	СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты         = "Объект.ЭтапыГрафикаОплаты";
	СтруктураПараметров.НадписьЭтапыОплаты               = "Форма.НадписьЭтапыОплаты";
	СтруктураПараметров.ИсточникСуммТабличнаяЧасть       = Истина;
	СтруктураПараметров.ДатаСогласования                 = "Объект.ДатаСогласования";
	СтруктураПараметров.ДатаОтгрузки                     = "Объект.Продукция.ДатаОтгрузки"; 
	СтруктураПараметров.ОтгружатьОднойДатой              = "Объект.НеОтгружатьЧастями";
	
	СтруктураПараметров.Соглашение                       = "";
	СтруктураПараметров.Менеджер                         = "Объект.Менеджер";
	СтруктураПараметров.БанковскийСчетОрганизации        = "Объект.БанковскийСчет";
	СтруктураПараметров.СуммаДокументаФорма              = "Форма.СуммаЗаказано";
	
	// Имена элементов форм для текущего набора параметров
	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы                     = "ДекорацияЭтапыОплаты";
	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты                   = "ДекорацияСостояниеРасчетов";
	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиТекст    = "ТекстОстатокДопустимогоКредита";
	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиКартинка = "КартинкаОтгрузкаЗапрещена";
	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты                      = "ЗачетОплатыФорма";
	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета           = "ГруппаФинансовогоУчета";
	СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности          = "НаправлениеДеятельности";
	СтруктураПараметров.НомерВходящегоДокумента                        = "Объект.НомерПоДаннымПартнера";
	СтруктураПараметров.ДатаВходящегоДокумента                         = "Объект.ДатаПоДаннымПартнера";
	
	СтруктураПараметров.ОбъектРасчетов                   = "Объект.ОбъектРасчетов";
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область ВыборСтатейИАналитик

// Возвращает параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
// 	Массив из см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатей = Новый Массив;
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	
	ПараметрыВыбора.ПутьКДанным				   = "Объект.Продукция";
	ПараметрыВыбора.Статья					   = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи				   = "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиРасходов		   = Истина;
	ПараметрыВыбора.АналитикаРасходов		   = "АналитикаРасходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ПродукцияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ПродукцияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ПродукцияАналитикаАктивовПассивов");
	
	ПараметрыВыбораСтатей.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатей;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)
	|	И( ЗначениеРазрешено(Склад)
	|	ИЛИ ЗначениеРазрешено(СкладПоступления)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	ВЫБОР КОГДА Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ИНАЧЕ Шапка.СпособДоставки
	|	КОНЕЦ                   КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Т.Склад                 КАК Склад,
	|	Т.ДоставитьПолностью    КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад,
	|		МИНИМУМ(
	|			ВЫБОР
	|				КОГДА Т.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДоставитьПолностью
	|	ИЗ
	|		Документ.ЗаказДавальца2_5.Продукция КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка,
	|		Т.Склад
	|	
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(
	|			ВЫБОР
	|				КОГДА Т.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) = ИСТИНА
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5 КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует структуру параметров документа для встраивания документа в механизмы обеспечения.
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаказДавальца2_5 - документ
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания
//
Функция ДоступныеОстаткиПараметрыВстраивания(ДокументОбъект = Неопределено) Экспорт
	
	ПараметрыВстраивания = ОбеспечениеВДокументахСервер.ДоступныеОстаткиПараметрыВстраивания();
	ПараметрыВстраивания.ОчищаемыеРеквизиты = "КодСтроки";
	
	// Обновление колонки "Доступно".
	ПараметрыВстраивания.ИмяТаблицыФормы = "Продукция";
	
	// Условное оформление.
	ЭлементыФормы = ПараметрыВстраивания.УсловноеОформление.ЭлементыФормы;
	ЭлементыФормы.ВариантОбеспечения = "ПродукцияВариантОбеспечения";
	ЭлементыФормы.Доступно           = "ПродукцияДоступно";
	ЭлементыФормы.Серия              = "ПродукцияСерия";
	ЭлементыФормы.Обособленно        = "ПродукцияОбособленно";
	ЭлементыФормы.Склад              = "ПродукцияСклад";
	
	ПутиКДанным = ПараметрыВстраивания.УсловноеОформление.ПутиКДанным;
	ПутиКДанным.ПерераспределятьЗапасы = "Объект.Продукция.ПерераспределятьЗапасы";
	ПутиКДанным.ЗапретРедактирования = "Объект.Продукция.Отменено";
	ПутиКДанным.ТипНоменклатуры = "Объект.Продукция.ТипНоменклатуры";
	
	// Выбор варианта обеспечения.
	Связи = ПараметрыВстраивания.СвязиПараметровВыбораВариантаОбеспечения;
	Связи.Доступно              = "Элементы.Продукция.ТекущиеДанные.Доступно";
	Связи.КоличествоУпаковок    = "Элементы.Продукция.ТекущиеДанные.КоличествоУпаковок";
	Связи.Количество            = "Элементы.Продукция.ТекущиеДанные.Количество";
	Связи.ОтгружатьЕслиДоступно = "Элементы.Продукция.ТекущиеДанные.ОтгружатьЕслиДоступно";
	Связи.Обособленно           = "Элементы.Продукция.ТекущиеДанные.Обособленно";
	Связи.ТипНоменклатуры       = "Элементы.Продукция.ТекущиеДанные.ТипНоменклатуры";
	Связи.Упаковка              = "Элементы.Продукция.ТекущиеДанные.Упаковка";
	Связи.Номенклатура          = "Элементы.Продукция.ТекущиеДанные.Номенклатура";
	Связи.ВариантОбеспечения    = "Элементы.Продукция.ТекущиеДанные.ВариантОбеспечения";
	Связи.Склад                 = "Элементы.Продукция.ТекущиеДанные.Склад";
	Связи.НесколькоСкладов      = "СкладГруппа";
	
	// Имя регистра оформления отгрузки.
	ПараметрыВстраивания.ИмяРегистраОформленияОтгрузки = "ЗаказыКлиентов";
	
	// Временная таблица данных документа.
	ПараметрыВстраивания.ИмяОбъекта = "Документ.ЗаказДавальца2_5";
	ПараметрыВстраивания.ИмяТаблицы = "Документ.ЗаказДавальца2_5.Продукция";
	
	ПараметрыВстраивания.ОписаниеПолученияДанныхДокумента =
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Подразделение КАК Подразделение,
		|	ТабЧасть.Склад КАК Склад,
		|	Реквизиты.Назначение КАК Назначение,
		|	Реквизиты.Ссылка КАК ЗаказНаОтгрузку,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Обособленно КАК Обособленно,
		|	ТабЧасть.Количество КАК Количество,
		|	ТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабЧасть.Упаковка КАК Упаковка,
		|	Реквизиты.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)
		|		) КАК ГотовКОбеспечению,
		|	Реквизиты.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)
		|		) КАК ГотовКОтгрузке,
		|	ВЫБОР
		|		КОГДА Реквизиты.НеОтгружатьЧастями
		|			ТОГДА Реквизиты.ДатаОтгрузки
		|		ИНАЧЕ ТабЧасть.ДатаОтгрузки
		|	КОНЕЦ КАК ЖелаемаяДатаОтгрузки,
		|	ТабЧасть.Серия КАК Серия,
		|	ТабЧасть.КодСтроки КАК КодСтроки,
		|	ТабЧасть.Отменено КАК Отменено,
		|	ТабЧасть.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК ДатаДокумента,
		|	Реквизиты.Склад КАК ГруппаСкладов,
		|	Реквизиты.Приоритет КАК Приоритет,
		|	ВЫБОР
		|		КОГДА Реквизиты.НеОтгружатьЧастями
		|			ТОГДА Реквизиты.ДатаОтгрузки
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаОтгрузкиВсехСтрокОднойДатой
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхДокумента
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Продукция КАК ТабЧасть
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5 КАК Реквизиты
		|		ПО ИСТИНА";
	
	// Шаблон сериализации данных формы.
	Продукция = Новый Структура();
	Продукция.Вставить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	Продукция.Вставить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Продукция.Вставить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Продукция.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Продукция.Вставить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Продукция.Вставить("Обособленно",        Новый ОписаниеТипов("Булево"));
	Продукция.Вставить("Количество",         Новый ОписаниеТипов("Число"));
	Продукция.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	Продукция.Вставить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Продукция.Вставить("ДатаОтгрузки",       Новый ОписаниеТипов("Дата"));
	Продукция.Вставить("Серия",              Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Продукция.Вставить("Отменено",           Новый ОписаниеТипов("Булево"));
	Продукция.Вставить("КодСтроки",          Новый ОписаниеТипов("Число"));
	Продукция.Вставить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
	Объект = Новый Структура();
	Объект.Вставить("Назначение",         Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Объект.Вставить("Ссылка",             Новый ОписаниеТипов("ДокументСсылка.ЗаказДавальца2_5"));
	Объект.Вставить("Статус",             Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказовДавальцев"));
	Объект.Вставить("НеОтгружатьЧастями", Новый ОписаниеТипов("Булево"));
	Объект.Вставить("ДатаОтгрузки",       Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Дата",               Новый ОписаниеТипов("Дата"));
	Объект.Вставить("Приоритет",          Новый ОписаниеТипов("СправочникСсылка.Приоритеты"));
	Объект.Вставить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Объект.Вставить("Продукция",          Продукция);
	
	ПараметрыВстраивания.ШаблонСериализацииДанныхФормы.Вставить("Объект", Объект);
	
	Возврат ПараметрыВстраивания;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТекстЗапросаТоварыДокумента(Отбор, Ресурс) Экспорт
	
	Если Ресурс = "Продукция" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Таблица.Обособленно
		|			ТОГДА Таблица.Ссылка.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                                КАК Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Серия                        КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаОтгрузки                 КАК ДатаОтгрузки,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	Таблица.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.КПередаче, 0)   КАК КПередаче,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Продукция КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	&Отбор
		|	И НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	Таблица.Назначение                   КАК Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Серия                        КАК Серия,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Цена                         КАК Цена,
		|	Таблица.Сумма                        КАК Сумма,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаПоступления              КАК ДатаПоступления,
		|	Таблица.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Материалы КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.ЗаказПоставщику
		|		И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	&Отбор
		|	И НЕ ДанныеУчета.ЗаказПоставщику ЕСТЬ NULL
		|";
		
	КонецЕсли;
	
	ТекстОтбора = ОбщегоНазначенияУТ.ТекстОтбораПоКоллекцииОтборов(Отбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", ТекстОтбора);
	
	Возврат ТекстЗапроса;

КонецФункции

#Область Обеспечение

// Параметры:
//  Ссылка - ДокументСсылка.ЗаказДавальца2_5 - ссылка на заказ, в который встроены команды создания корректировки назначения
//  ДополнительныеПараметры - Структура - структура с полями:
//  * ИдентификаторВХранилище - УникальныйИдентификатор - Уникальный идентификатор, чтобы поместить товары документа в хранилище
//  * ЭтоСнятиеРезерва - Булево - Истина, если данные нужно получить для операции снятия резерва, Ложь, если для операции резервирования
//  Возвращаемое значение:
//   Структура - Данные документа, необходимые для выполнения команды создания корректировки назначения
Функция ДанныеДокументаДляСозданияКорректировкиНазначения(Ссылка, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыДокумента.Проведен КАК Проведен
		|ИЗ
		|	Документ.ЗаказДавальца2_5 КАК РеквизитыДокумента
		|ГДЕ
		|	РеквизитыДокумента.Ссылка = &Ссылка
		|;
		|ВЫБРАТЬ
		|	РеквизитыДокумента.НазначениеМатериалы КАК Ссылка
		|ИЗ
		|	Документ.ЗаказДавальца2_5 КАК РеквизитыДокумента
		|ГДЕ
		|	РеквизитыДокумента.Ссылка = &Ссылка
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МатериалыЗаказа.Номенклатура КАК Номенклатура,
		|	МатериалыЗаказа.Характеристика КАК Характеристика
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Материалы КАК МатериалыЗаказа
		|ГДЕ
		|	МатериалыЗаказа.Ссылка = &Ссылка
		|	И НЕ МатериалыЗаказа.Отменено";
		
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетРезультатовЗапроса[0].Выбрать();
	Выборка.Следующий();
	Проведен = Выборка.Проведен;
	
	Назначения = ПакетРезультатовЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Товары       = ПакетРезультатовЗапроса[2].Выгрузить();
	АдресТоваров = ПоместитьВоВременноеХранилище(Товары, ДополнительныеПараметры.ИдентификаторВХранилище);
	
	ЕстьТоварыКОбособленномуОбеспечению = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(
		Назначения, АдресТоваров);
	
	ЕстьТоварыКСнятиюРезерва = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКСнятиюРезерва(
		Назначения, АдресТоваров);
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("Проведен", Проведен);
	ДанныеДокумента.Вставить("Назначения", Назначения);
	ДанныеДокумента.Вставить("АдресТоваров", АдресТоваров);
	ДанныеДокумента.Вставить("ЕстьТоварыКОбособленномуОбеспечению", ЕстьТоварыКОбособленномуОбеспечению);
	ДанныеДокумента.Вставить("ЕстьТоварыКСнятиюРезерва", ЕстьТоварыКСнятиюРезерва);
	Возврат ДанныеДокумента;

КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  см. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	
	// Потребности в материалах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Материалы.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Материалы.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Материалы.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Материалы.Склад";
	
	Возврат МакетФормы;
	
КонецФункции

// Выполняет дополнительные действия связанные с заполнением обеспечения в документе.
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект.ЗаказДавальца2_5 - Документ, в котором заполнили обеспечение.
//  Изменения - ТаблицаЗначений - Таблица изменений документа после заполнения обеспечения.
//  Режим - Строка - Режим, определяющий контекст заполнения обеспечения.
//  ПараметрыЗаполнения - Структура - Параметры заполнения.
//  ЕстьИзмененияДатыОтгрузки - Булево - будет установлено в Истина, если изменились даты отгрузки
Процедура ПослеЗаполненияОбеспечения(Объект, Изменения, Режим, ПараметрыЗаполнения, ЕстьИзмененияДатыОтгрузки = Ложь) Экспорт
	
	ЕстьИзмененияДатыОтгрузки = ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузки(
		ПараметрыЗаполнения,
		Объект.НеОтгружатьЧастями,
		Объект.ДатаОтгрузки,
		Объект.Продукция,
		"ДатаОтгрузки");
	
	Если ОбеспечениеВДокументахКлиентСервер.НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Тогда
		
		ЕстьИзмененияДатыОтгрузки = ЕстьИзмененияДатыОтгрузки Или ОбеспечениеВДокументахСервер.ПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(
			Изменения.ВыгрузитьКолонку("Строка"),
			"ДатаОтгрузки",
			Объект.НеОтгружатьЧастями,
			Объект.ДатаОтгрузки);
			
	КонецЕсли;
	
	Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") И ЕстьИзмененияДатыОтгрузки Тогда
		ЭтапыОплатыСервер.ПослеЗаполненияОбеспечения(Объект);
	КонецЕсли;
	
	ОбеспечениеВДокументахСервер.ПересчитатьКоличествоЕдиниц(Изменения);
	Реквизиты = "Сумма, СуммаНДС, СуммаСНДС";
	ЗаказыСервер.ПересчитатьЗависимыеРеквизитыПослеРазбиенияСтрок(Изменения, Реквизиты);
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(Объект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Продукция);
	
	ЕстьОтгрузить = Ложь;
	
	Если ОбеспечениеВДокументахКлиентСервер.ЭтоРежимИзмененияВариантаОбеспечения(Режим) Тогда
		Для Каждого ТекущиеДанные Из Изменения Цикл
			Если ТекущиеДанные.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				ЕстьОтгрузить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОтгрузить
		И (Объект.Статус = Перечисления.СтатусыЗаказовДавальцев.НеСогласован
			Или Объект.Статус = Перечисления.СтатусыЗаказовДавальцев.Согласован
			Или Объект.Статус = Перечисления.СтатусыЗаказовДавальцев.КПроизводству) Тогда
		Объект.Статус = Перечисления.СтатусыЗаказовДавальцев.КОтгрузке;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

Функция СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований) Экспорт
	
	Возврат Новый Структура("ОбъектыОснований, ТекстОшибки", ОбъектыОснований);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

#Область ПодготовкаДанных

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Номер                        КАК Номер,
	|	Заказ.Дата                         КАК Период,
	|	Заказ.НомерПоДаннымПартнера        КАК НомерПоДаннымПартнера,
	|	Заказ.ДатаПоДаннымПартнера         КАК ДатаПоДаннымПартнера,
	|	Заказ.Валюта                       КАК Валюта,
	|	Заказ.Статус                       КАК Статус,
	|	Заказ.Партнер                      КАК Партнер,
	|	Заказ.Договор                      КАК Договор,
	|	ПРЕДСТАВЛЕНИЕ(Заказ.Договор)       КАК ДоговорПредставление,
	|	Заказ.Назначение                   КАК Назначение,
	|	Заказ.Контрагент                   КАК Контрагент,
	|	Заказ.Организация                  КАК Организация,
	|	Заказ.Склад                        КАК Склад,
	|	Заказ.Подразделение                КАК Подразделение,
	|	Заказ.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	Заказ.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	Заказ.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	Заказ.ВариантПриемкиТоваров        КАК ВариантПриемкиТоваров,
	|	Заказ.ОставитьПродукциюНаХранении  КАК ОставитьПродукциюНаХранении,
	|	Заказ.ВидЦеныМатериалы             КАК ВидЦеныМатериалы,
	|	Заказ.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	Заказ.СуммаДокумента               КАК СуммаДокумента,
	|	Заказ.Менеджер                     КАК Менеджер,
	|	Заказ.Автор                        КАК Автор,
	|	Заказ.Комментарий                  КАК Комментарий,
	|
	|	ВЫБОР
	|		КОГДА Заказ.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА Заказ.Назначение.ДвиженияПоСкладскимРегистрам
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                              КАК ДвиженияПоСкладскимРегистрам,
	|	
	|	Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) КАК РасчетыПоДоговорам,
	|	Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)             КАК РасчетыПоНакладным,
	|	
	|	Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ЕСТЬNULL(Заказ.Договор.ЗаданГрафикИсполнения, ЛОЖЬ)                КАК ГрафикИсполненияВДоговоре,
	|
	|	Заказ.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))       КАК СтатусКПроизводствуИлиВыше,
	|	Заказ.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))       КАК СтатусКОтгрузкеИлиВыше,
	|	Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт) КАК СтатусЗакрыт,
	|	
	|	Заказ.Проведен                     КАК Проведен,
	|	Заказ.ПометкаУдаления              КАК ПометкаУдаления,
	|	Заказ.Приоритет                    КАК Приоритет
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("НачалоДня",                      НачалоДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",            ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев2_5"));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",        ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	
	ИнформацияПоДоговору = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru = 'По договору ""%Договор%""';
									|en = 'Under the ""%Договор%"" contract'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.ДоговорПредставление);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ЗаказДавальца2_5";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",  """""");
	ПереопределениеРасчетаПараметров.Вставить("НомерПоДаннымПартнера", """""");
	ПереопределениеРасчетаПараметров.Вставить("СтатусКОтгрузкеИлиВыше",
		"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Статус В(
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("СтатусКПроизводствуИлиВыше",
		"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Статус В(
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрам",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	ПереопределениеРасчетаПараметров.Вставить("Назначение","ТаблицаТовары.Ссылка.Назначение");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	
	Если ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

#Область ВременныеТаблицы

Функция ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалют";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтносительныеКурсыВалют.Валюта          КАК Валюта,
	|	ОтносительныеКурсыВалют.КурсЧислитель   КАК КурсЧислитель,
	|	ОтносительныеКурсыВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|			&Период,
	|			БазоваяВалюта В
	|				(ВЫБРАТЬ
	|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
	|				ИЗ
	|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК ОтносительныеКурсыВалют
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаТовары";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НоменклатураПартнера   КАК НоменклатураПартнера,
	|	Товары.Номенклатура           КАК Номенклатура,
	|	Товары.Характеристика         КАК Характеристика,
	|	&ВидЦеныМатериалы             КАК ВидЦеныПоставщика,
	|	Товары.Упаковка               КАК Упаковка,
	|	Товары.Цена                   КАК Цена
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|	И &РегистрироватьЦеныПоставщика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ТоварыСРазличнымиУпаковкамиЦенами";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура                   КАК Номенклатура,
	|	Товары.Характеристика                 КАК Характеристика,
	|	&ВидЦеныМатериалы                     КАК ВидЦеныПоставщика,
	|	СРЕДНЕЕ(Товары.Цена / ВЫБОР
	|							КОГДА Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|								ТОГДА &ТекстЗапросаКоэффициентУпаковки
	|							ИНАЧЕ 1
	|						  КОНЕЦ)          КАК ЦенаЗаБазовуюЕдиницу,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) КАК КоличествоРазличныхУпаковок
	|ПОМЕСТИТЬ ТоварыСРазличнымиУпаковкамиЦенами
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"&ТекстЗапросаКоэффициентУпаковки",
						Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
							"Товары.Упаковка", "Товары.Номенклатура"));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено) Экспорт
	
	ТекстЗапросаДанных = 
	"ВЫБРАТЬ
	|	""Продукция""                                          КАК ИсточникДанных,
	|	ЛОЖЬ                                                   КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация                    КАК Организация,
	|	ТаблицаДокумента.Ссылка.Валюта                         КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО                                           КАК ВалютаВзаиморасчетов,
	|	ДАТАВРЕМЯ(1,1,1)                                       КАК ПериодБазыНДС,
	|	ТаблицаДокумента.Ссылка.Дата                           КАК ДатаКурса,
	|
	|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки                   КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.Ссылка.СтавкаНДС                      КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС,
	|	0                                                      КАК СуммаВзаиморасчетов,
	|	0                                                      КАК СуммаНДСВзаиморасчетов,
	|	0                                                      КАК СуммаБезНДСРегл,
	|	0                                                      КАК СуммаБезНДСУпр,
	|	
	|	ИСТИНА                                                 КАК ОтражаетсяВРасчетах,
	|	ТаблицаДокумента.Ссылка.ОбъектРасчетов                 КАК ОбъектРасчетов,
	|	ЛОЖЬ                                                   КАК ПересчитыватьПоДаннымРасчетов
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И НЕ ТаблицаДокумента.Отменено";
	
	РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанных);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НачалоПериода(&Период, День)           КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаТовары.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК Склад,
	|	ТаблицаТовары.Количество               КАК Заказано,
	|	0                                      КАК КОформлению,
	|	0                                      КАК КПередаче,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаТовары.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК Склад,
	|	-ТаблицаТовары.Количество              КАК Заказано,
	|	0                                      КАК КОформлению,
	|	0                                      КАК КПередаче,
	|	0                                      КАК Сумма,
	|	ТаблицаТовары.ПричинаОтмены            КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаТовары.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК Склад,
	|	0                                      КАК Заказано,
	|	ТаблицаТовары.Количество               КАК КОформлению,
	|	0                                      КАК КПередаче,
	|	ТаблицаТовары.СуммаСНДС                КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКОтгрузкеИлиВыше
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	0                                      КАК Заказано,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество               КАК КПередаче,
	|	0                                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено 
	|	И &СтатусКОтгрузкеИлиВыше
	|	И НЕ &ОставитьПродукциюНаХранении
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Количество               КАК Заказано,
	|	0                                      КАК КОформлению,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	-ТаблицаТовары.Количество              КАК Заказано,
	|	0                                      КАК КОформлению,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|	И ТаблицаТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	0                                      КАК Заказано,
	|	ТаблицаТовары.Количество               КАК КОформлению,
	|	НЕОПРЕДЕЛЕНО                           КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКПроизводствуИлиВыше
	|	И ТаблицаТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ПринятьНаХранение)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ДанныеИсточника.Ссылка				КАК Ссылка,
	|	ВЫБОР КОГДА ДанныеИсточника.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|				ДанныеИсточника.ДатаОтгрузки
	|			ИНАЧЕ
	|				ДанныеИсточника.Ссылка.Дата
	|		КОНЕЦ                           КАК Период,
	|	ДанныеИсточника.Ссылка				КАК Заказ,
	|	НЕОПРЕДЕЛЕНО						КАК Накладная,
	|	ЛОЖЬ								КАК Исправление,
	|	НЕОПРЕДЕЛЕНО						КАК ИсправляемыйДокумент,
	|	ДанныеИсточника.Ссылка.Партнер		КАК Получатель,
	|	ДанныеИсточника.Склад				КАК Склад,
	|	ДанныеИсточника.Номенклатура		КАК Номенклатура,
	|	ДанныеИсточника.Характеристика		КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеИсточника.Обособленно
	|			ТОГДА ДанныеИсточника.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ								КАК Назначение,
	|	ДанныеИсточника.Серия				КАК Серия,
	|	ДанныеИсточника.СтатусУказанияСерий	КАК СтатусУказанияСерий,
	|	ДанныеИсточника.Количество			КАК Количество,
	|	ЛОЖЬ								КАК СверхЗаказа,
	|	ДанныеИсточника.Отменено			КАК Отменено,
	|	ЛОЖЬ								КАК ЭтоНакладная,
	|	ИСТИНА								КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ДанныеИсточника
	|
	|ГДЕ
	|	ДанныеИсточника.Ссылка В(&Ссылка)
	|	И ДанныеИсточника.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|	И НЕ ДанныеИсточника.Отменено";
	
	СкладыСервер.ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Ссылка                                                 КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                                                          КАК Накладная,
	|	ИсточникДанных.Ссылка                                                 КАК Заказ,
	|	ЛОЖЬ                                                                  КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                                          КАК ИсправляемыйДокумент,
	|	ИсточникДанных.Ссылка.Договор                                         КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                                          КАК Соглашение,
	|	ИсточникДанных.Ссылка.ВариантПриемкиТоваров                           КАК ВариантПриемкиТоваров,
	|	ИсточникДанных.ДатаПоступления                                        КАК Дата,
	|	ИсточникДанных.Номенклатура                                           КАК Номенклатура,
	|	ИсточникДанных.Характеристика                                         КАК Характеристика,
	|	ИсточникДанных.Назначение                                             КАК Назначение,
	|	ИсточникДанных.СтатусУказанияСерий                                    КАК СтатусУказанияСерий,
	|	ИсточникДанных.Серия                                                  КАК Серия,
	|	ЛОЖЬ                                                                  КАК СверхЗаказа,
	|	ИсточникДанных.Склад                                                  КАК Склад,
	|	ИсточникДанных.Ссылка.Партнер                                         КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца2_5) КАК ХозяйственнаяОперация,
	|	ИсточникДанных.Количество                                             КАК Количество,
	|	ЛОЖЬ                                                                  КАК ЭтоНакладная,
	|	ЛОЖЬ                                                                  КАК ПоступлениеПоЗаказам
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК ИсточникДанных
	|
	|ГДЕ
	|	ИсточникДанных.Ссылка В (&Ссылка)
	|	И НЕ ИсточникДанных.Отменено
	|	И НЕ ИсточникДанных.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся)
	|	И ИсточникДанных.Ссылка.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))";
	
	СкладыСервер.ЗапланироватьПоступлениеТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДокумента);
	
КонецПроцедуры

Процедура ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ДанныеИсточника.Ссылка				КАК Ссылка,
	|	ДанныеИсточника.ДатаОтгрузки		КАК Период,
	|	ДанныеИсточника.Ссылка				КАК Заказ,
	|	НЕОПРЕДЕЛЕНО						КАК Накладная,
	|	ЛОЖЬ								КАК Исправление,
	|	НЕОПРЕДЕЛЕНО						КАК ИсправляемыйДокумент,
	|	ДанныеИсточника.Ссылка.Партнер		КАК Получатель,
	|	ДанныеИсточника.Склад				КАК Склад,
	|	ДанныеИсточника.Номенклатура		КАК Номенклатура,
	|	ДанныеИсточника.Характеристика		КАК Характеристика,
	|	ДанныеИсточника.Ссылка.Назначение	КАК Назначение,
	|	ДанныеИсточника.Серия				КАК Серия,
	|	ДанныеИсточника.СтатусУказанияСерий	КАК СтатусУказанияСерий,
	|	ДанныеИсточника.Количество			КАК Количество,
	|	ЛОЖЬ								КАК СверхЗаказа,
	|	ДанныеИсточника.Отменено			КАК Отменено,
	|	ЛОЖЬ								КАК ЭтоНакладная,
	|	ИСТИНА								КАК ОтгрузкаПоЗаказу
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ДанныеИсточника
	|
	|ГДЕ
	|	ДанныеИсточника.Ссылка В(&Ссылка)
	|	И НЕ ДанныеИсточника.Отменено
	|	И ДанныеИсточника.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|";
	
	СкладыСервер.ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

Процедура ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры)
	
	#Область НаправленияДеятельности
	
	ИмяРегистра = "ВременнаяТаблицаНаправленияДеятельности";
	
	ТекстЗапросаНаправленияДеятельности = 
		"ВЫБРАТЬ
		|	ДанныеДокументаШапка.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ЗаказДавальца2_5 КАК ДанныеДокументаШапка
		|ГДЕ
		|	ДанныеДокументаШапка.Ссылка В (&Ссылка)";
		
	ТекстЗапросаНаправленияДеятельности = ВзаиморасчетыСервер.ПолучитьТаблицуНаправленийДеятельности(ТекстЗапросаНаправленияДеятельности);

	ТекстыЗапроса.Добавить(ТекстЗапросаНаправленияДеятельности, ИмяРегистра);
	
	#КонецОбласти
	
	ТекстПланыОплат =
	"ВЫБРАТЬ
	|	Таблица.Ссылка                                                           КАК Ссылка,
	|	Таблица.Ссылка.Организация                                               КАК Организация,
	|	Таблица.Ссылка.Партнер                                                   КАК Партнер,
	|
	|	Таблица.Ссылка.ОбъектРасчетов                                            КАК ОбъектРасчетов,
	|	Таблица.Ссылка.Дата                                                      КАК ДатаРегистратора,
	|	Таблица.Ссылка.Номер                                                     КАК НомерРегистратора,
	|	Таблица.Ссылка.ПорядокРасчетов                                           КАК ПорядокРасчетов,
	|	Таблица.Ссылка.Валюта                                                    КАК ВалютаВзаиморасчетов,
	|	Таблица.Ссылка.Валюта                                                    КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация,
	|	Таблица.Ссылка.ФормаОплаты                                               КАК ФормаОплаты,
	|	
	|	Таблица.ДатаПлатежа                                                      КАК ДатаПлатежа,
	|	Таблица.ВариантОплаты                                                    КАК ВариантОплаты,
	|	Таблица.СуммаПлатежа                                                     КАК КОплате,
	|	0                                                                        КАК СуммаОтклоненияМерныхТоваров,
	|	
	//	Проверяем аванс до производства
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьСтатусы
	|			ТОГДА ИСТИНА
	|		КОГДА Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
	|			И Таблица.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения)
	|			ТОГДА ЛОЖЬ
	//	Проверяем предоплату до отгрузки
	|		КОГДА &ИспользоватьСтатусы
	|			И Таблица.Ссылка.Статус В (
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
	|			И Таблица.ВариантОплаты В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения))
	|				ТОГДА ЛОЖЬ
	//	Считаем, что все хорошо
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                                    КАК ИсключатьПриКонтроле
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.ЭтапыГрафикаОплаты КАК Таблица
	|
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылка)
	|	И Таблица.Ссылка.Статус В (
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
	|";
	
	ТекстПланыОтгрузок =
	"ВЫБРАТЬ
	|	Таблица.Ссылка                                                           КАК Ссылка,
	|	Таблица.Ссылка.Организация                                               КАК Организация,
	|	Таблица.Ссылка.Партнер                                                   КАК Партнер,
	|	
	|	Таблица.Ссылка.ОбъектРасчетов                                            КАК ОбъектРасчетов,
	|	КОНЕЦПЕРИОДА(Таблица.ДатаОтгрузки, ДЕНЬ)                                 КАК ДатаОтгрузки,
	|
	|	Таблица.СуммаСНДС                                                        КАК УвеличитьКОтгрузке,
	|	Таблица.СуммаСНДС                                                        КАК УвеличитьОтгружается,
	|	Таблица.Ссылка.Дата                                                      КАК ДатаРегистратора,
	|	Таблица.Ссылка.Номер                                                     КАК НомерРегистратора,
	|	Таблица.Ссылка.ПорядокРасчетов                                           КАК ПорядокРасчетов,
	|	Таблица.Ссылка.Валюта                                                    КАК ВалютаВзаиморасчетов,
	|	Таблица.Ссылка.Валюта                                                    КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация,
	|	Таблица.Ссылка.ФормаОплаты                                               КАК ФормаОплаты
	|	
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылка)
	|	И НЕ Таблица.Отменено
	|	И НЕ &ОставитьПродукциюНаХранении
	|	И Таблица.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
	|";
	
	ВзаиморасчетыСервер.ПроведениеЗаказаКлиента(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат, ТекстПланыОтгрузок);
	ВзаиморасчетыСервер.ПроведениеРасчетыСКлиентамиПланОплат(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОплат);
	ВзаиморасчетыСервер.ПроведениеРасчетыСКлиентамиПланОтгрузок(Запрос, ТекстыЗапроса, Регистры, ТекстПланыОтгрузок);
	
КонецПроцедуры

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата    КАК Период,
		|	ТабЧасть.Номенклатура   КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ТабЧасть.Подразделение
		|		ИНАЧЕ ТабЧасть.Склад
		|	КОНЕЦ                   КАК Склад,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Обособленно
		|			ТОГДА ТабЧасть.Ссылка.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                   КАК Назначение,
		|	
		|	ТабЧасть.Количество     КАК Количество,
		|	ТабЧасть.Ссылка         КАК ЗапланированныйРасходРаспределенногоЗапаса,
		|	ИСТИНА                  КАК КонтрольСвободногоОстатка
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Продукция КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|	И ТабЧасть.Ссылка.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|	И ТабЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|";
	
	РаспределениеЗапасовДвижения.РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка             КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата        КАК Период,
		|	ТабЧасть.Номенклатура       КАК Номенклатура,
		|	ТабЧасть.Характеристика     КАК Характеристика,
		|
		|	ВЫБОР
		|		КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ТабЧасть.Подразделение
		|		ИНАЧЕ ТабЧасть.Склад
		|	КОНЕЦ                       КАК Склад,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Обособленно
		|			ТОГДА ТабЧасть.Ссылка.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                       КАК Назначение,
		|	
		|	ТабЧасть.Количество         КАК Количество,
		|	ТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ТабЧасть.Ссылка             КАК Заказ,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Ссылка.НеОтгружатьЧастями
		|			ТОГДА ТабЧасть.Ссылка.ДатаОтгрузки
		|		ИНАЧЕ ТабЧасть.ДатаОтгрузки
		|	КОНЕЦ                       КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ                        КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                КАК РаспоряжениеВГрафике,
		|	0                           КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Продукция КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|	И НЕ ТабЧасть.Ссылка.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован))
		|	И ТабЧасть.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|";
	
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                     КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                КАК Период,
		|	ТабЧасть.Номенклатура                               КАК Номенклатура,
		|	ТабЧасть.Характеристика                             КАК Характеристика,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ТабЧасть.Подразделение
		|		ИНАЧЕ ТабЧасть.Склад
		|	КОНЕЦ                                               КАК Склад,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Обособленно
		|			ТОГДА ТабЧасть.Ссылка.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                                               КАК Назначение,
		|	
		|	ТабЧасть.Количество                                 КАК Количество,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) И ТабЧасть.Обособленно
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
		|		КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) И НЕ ТабЧасть.Обособленно
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	КОНЕЦ КАК ВариантОбеспечения,
		|	
		|	ТабЧасть.Ссылка                                     КАК Заказ,
		|	
		|	ВЫБОР
		|		КОГДА ТабЧасть.Ссылка.НеОтгружатьЧастями
		|			ТОГДА ТабЧасть.Ссылка.ДатаОтгрузки
		|		ИНАЧЕ ТабЧасть.ДатаОтгрузки
		|	КОНЕЦ                                               КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ                                                КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО                                        КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Продукция КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|	И ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|	И ТабЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|";
	
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаТабЧасть);
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка          КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата     КАК Период,
		|	ТабЧасть.Номенклатура    КАК Номенклатура,
		|	ТабЧасть.Характеристика  КАК Характеристика,
		|	ТабЧасть.Склад           КАК Склад,
		|	ТабЧасть.Назначение      КАК Назначение,
		|	ТабЧасть.Количество      КАК Количество,
		|	ТабЧасть.Ссылка          КАК Заказ,
		|	ТабЧасть.ДатаПоступления КАК ДатаПоступления,
		|	ИСТИНА                   КАК ДоступенДляРасхода,
		|	ЛОЖЬ                     КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО             КАК РаспоряжениеВГрафике,
		|	0                        КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказДавальца2_5.Материалы КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|	И НЕ ТабЧасть.Отменено
		|	И НЕ ТабЧасть.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоПерерабатываемымМатериалам.ИспользоватьИмеющиеся)
		|";
	
	РаспределениеЗапасовДвижения.ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЦеныНоменклатурыПоставщиков";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТоварыСРазличнымиУпаковкамиЦенами", ТекстыЗапроса) Тогда
		ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Товары.НоменклатураПартнера)    КАК НоменклатураПартнера,
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Характеристика                    КАК Характеристика,
	|	Товары.ВидЦеныПоставщика                 КАК ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта          КАК Валюта,
	|	&Период                                  КАК Период,
	|	&Партнер                                 КАК Партнер,
	|	МИНИМУМ(ВЫБОР
	|				КОГДА ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ИНАЧЕ Товары.Упаковка
	|			КОНЕЦ)                           КАК Упаковка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(ВЫБОР
	|						КОГДА ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|							ТОГДА ТоварыСРазличнымиУпаковкамиЦенами.ЦенаЗаБазовуюЕдиницу
	|						ИНАЧЕ Товары.Цена
	|					КОНЕЦ
	|					* ВЫБОР
	|						КОГДА &Валюта <> Товары.ВидЦеныПоставщика.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|										И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|										И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|										И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|											ТОГДА КурсыВалюты.КурсЧислитель
	|													* КурсыВалютыЦены.КурсЗнаменатель
	|													/ (КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ) КАК ЧИСЛО(31, 2)) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСРазличнымиУпаковкамиЦенами КАК ТоварыСРазличнымиУпаковкамиЦенами
	|		ПО Товары.Номенклатура   = ТоварыСРазличнымиУпаковкамиЦенами.Номенклатура
	|		 И Товары.Характеристика = ТоварыСРазличнымиУпаковкамиЦенами.Характеристика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|		ПО КурсыВалюты.Валюта = &Валюта
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
	|		ПО КурсыВалютыЦены.Валюта = Товары.ВидЦеныПоставщика.Валюта
	|ГДЕ
	|	НЕ Товары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Товары.Цена > 0
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&Партнер                 КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&Договор                 КАК Договор,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Склад                   КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	&Менеджер                КАК Ответственный,
	|	&Автор                   КАК Автор,
	|	&Комментарий             КАК Комментарий,
	|	&Валюта                  КАК Валюта,
	|	&СуммаДокумента          КАК Сумма,
	|	&Статус                  КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	&ДатаПоДаннымПартнера    КАК ДатаПервичногоДокумента,
	|	&НомерПоДаннымПартнера   КАК НомерПервичногоДокумента,
	|	&Период                  КАК ДатаОтраженияВУчете,
	|	ЛОЖЬ                     КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО             КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО             КАК ИсправляемыйДокумент,
	|	&Приоритет               КАК Приоритет
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Заказ клиента
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор  = "ЗаказДавальцаНаУслуги";
	КомандаПечати.Представление  = НСтр("ru = 'Заказ давальца на услуги по выпуску продукции';
										|en = 'Subcontracting sales order for product release services'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Заказ поставщику
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор  = "ЗаказДавальцуНаСырье";
	КомандаПечати.Представление  = НСтр("ru = 'Заказ давальцу на сырье и материалы';
										|en = 'Material provider order for raw and consumable materials'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		
		// Счет на оплату
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор  = "СчетНаОплату";
		КомандаПечати.Представление  = НСтр("ru = 'Счет на оплату';
											|en = 'Commercial invoice'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Счет на оплату с факсимиле
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор  = "СчетНаОплату";
		КомандаПечати.Представление  = НСтр("ru = 'Счет на оплату с факсимиле';
											|en = 'Commercial invoice with facsimile'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		
	КонецЕсли;
	
	ЗаказДавальца2_5Локализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Сформировать печатные формы объектов
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать.
//  ПараметрыПечати - Структура - дополнительные настройки печати.
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение      - ссылка на объект
//                                            представление - имя области в которой был выведен объект (выходной параметр).
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ЗаказДавальца2_5Локализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);

КонецПроцедуры


Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов, КодЯзыка = Неопределено) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов, КодЯзыка);
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаСырьеИМатериалы(МассивОбъектов, ПараметрыПечати, КодЯзыка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка                               КАК Ссылка,
	|	Документы.Номер                                КАК Номер,
	|	Документы.Дата                                 КАК Дата,
	|	Документы.Организация                          КАК Организация,
	|	Документы.Организация                          КАК Заказчик,
	|
	|	ЛОЖЬ                                           КАК УчитыватьНДС,
	|	ЛОЖЬ                                           КАК ОперацияОблагаетсяНДСУПокупателя,
	|
	|	Документы.Организация.Префикс                  КАК Префикс,
	|	Документы.Контрагент                           КАК Контрагент,
	|	Документы.Контрагент                           КАК Исполнитель,
	|	Документы.БанковскийСчет                       КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента   КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС                      КАК ЦенаВключаетНДС,
	|	Документы.Валюта                               КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	Документы.ДополнительнаяИнформация             КАК ДополнительнаяИнформация,
	|
	|	Документы.АдресДоставки                        КАК АдресДоставки,
	|	Документы.Грузоотправитель                     КАК Грузоотправитель,
	|	Документы.Грузополучатель                      КАК Грузополучатель,
	// Параметры для выбора областей макета отчета
	|	ЛОЖЬ                                           КАК ПоказыватьНДСВСтроках,
	|	ЛОЖЬ                                           КАК ИспользоватьАвтоСкидки,
	|	""ЗаказДавальцуНаСырье""                       КАК Тип,
	|	&ПредставлениеВОшибке                          КАК ПредставлениеВОшибке
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК Документы
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПроцентПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                            КАК Ссылка,
	|	Товары.НомерСтроки                       КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО                             КАК ВидЦеныИсполнителя,
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Номенклатура.Код                  КАК Код,
	|	Товары.Номенклатура.Артикул              КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПредставления.НаименованиеПолное, Товары.Номенклатура.НаименованиеПолное) КАК НаименованиеПолное,
	|	Товары.ДатаПоступления                   КАК ДатаПоступления,
	|	ЕСТЬNULL(ХарактеристикиНоменклатурыПредставления.НаименованиеПолное, ЕСТЬNULL(Товары.Характеристика.НаименованиеПолное, """")) КАК Характеристика,
	|	""""                                     КАК Содержание,
	|
	|	Товары.КоличествоУпаковок                КАК Количество,
	|
	|	Товары.Цена                              КАК Цена,
	|	0                                        КАК СуммаСкидки,
	|	Товары.Сумма                             КАК СуммаБезСкидки,
	|	Товары.Сумма                             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                             КАК СтавкаНДС,
	|	0                                        КАК СуммаНДС,
	|
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ                                    КАК ЕдиницаИзмерения,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ                                    КАК Упаковка,
	|	ЛОЖЬ                                     КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК Товары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Представления КАК НоменклатураПредставления
	|	ПО Товары.Номенклатура = НоменклатураПредставления.Ссылка
	|	И НоменклатураПредставления.КодЯзыка = &КодЯзыка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.Представления КАК ХарактеристикиНоменклатурыПредставления
	|	ПО Товары.Характеристика = ХарактеристикиНоменклатурыПредставления.Ссылка
	|	И ХарактеристикиНоменклатурыПредставления.КодЯзыка = &КодЯзыка
	|
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И НЕ Товары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'заказа давальцу';
																|en = 'material provider order'"));
	Запрос.УстановитьПараметр("КодЯзыка",				КодЯзыка);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаУслуги(МассивОбъектов, ПараметрыПечати, КодЯзыка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка                               КАК Ссылка,
	|	Документы.Номер                                КАК Номер,
	|	Документы.Дата                                 КАК Дата,
	|	""""                                           КАК АдресДоставки,
	|	Документы.Организация                          КАК Организация,
	|	Документы.Организация                          КАК Исполнитель,
	|	НЕ Документы.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))   КАК УчитыватьНДС,
	|	Документы.НалогообложениеНДС =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя) КАК ОперацияОблагаетсяНДСУПокупателя,
	|	ЛОЖЬ                                           КАК ИспользоватьАвтоСкидки,
	|	&ВыводитьДопКолонкиНДС                         КАК ПоказыватьНДСВСтроках,
	|	""ЗаказДавальцаНаУслуги""                      КАК Тип,
	|	&ПредставлениеВОшибке                          КАК ПредставлениеВОшибке,
	|	Документы.Организация.Префикс                  КАК Префикс,
	|	Документы.Контрагент                           КАК Контрагент,
	|	Документы.Контрагент                           КАК Заказчик,
	|	Документы.БанковскийСчет                       КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента   КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС                      КАК ЦенаВключаетНДС,
	|	Документы.Валюта                               КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	Документы.ДополнительнаяИнформация             КАК ДополнительнаяИнформация,
	|	НЕОПРЕДЕЛЕНО                                   КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО                                   КАК Грузополучатель
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка         КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки    КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа    КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ВариантОплаты  КАК ВариантОплаты,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа   КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказДавальца2_5.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                            КАК Ссылка,
	|	Товары.НомерСтроки                       КАК НомерСтроки,
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Номенклатура.Код                  КАК Код,
	|	Товары.Номенклатура.Артикул              КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПредставления.НаименованиеПолное, Товары.Номенклатура.НаименованиеПолное) КАК НаименованиеПолное,
	|	Товары.ДатаОтгрузки                      КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ХарактеристикиНоменклатурыПредставления.НаименованиеПолное, ЕСТЬNULL(Товары.Характеристика.НаименованиеПолное, """")) КАК Характеристика,
	|	""""                                     КАК Содержание,
	|
	|	НЕОПРЕДЕЛЕНО                             КАК ВидЦеныИсполнителя,
	|
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ                                    КАК ЕдиницаИзмерения,
	|
	|	Товары.КоличествоУпаковок                КАК Количество,
	|
	|	Товары.Цена                              КАК Цена,
	|	Товары.Сумма                             КАК Сумма,
	|	Товары.СуммаНДС                          КАК СуммаНДС,
	|	0                                        КАК СуммаСкидки,
	|	Товары.Сумма                             КАК СуммаБезСкидки,
	|
	|	Заказ.СтавкаНДС                          КАК СтавкаНДС,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ                                    КАК Упаковка,
	|
	|	ЛОЖЬ                                     КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК Заказ
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5.Продукция КАК Товары
	|	ПО Заказ.Ссылка = Товары.Ссылка
	|	И НЕ Товары.Отменено
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Представления КАК НоменклатураПредставления
	|	ПО Товары.Номенклатура = НоменклатураПредставления.Ссылка
	|	И НоменклатураПредставления.КодЯзыка = &КодЯзыка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.Представления КАК ХарактеристикиНоменклатурыПредставления
	|	ПО Товары.Характеристика = ХарактеристикиНоменклатурыПредставления.Ссылка
	|	И ХарактеристикиНоменклатурыПредставления.КодЯзыка = &КодЯзыка
	|
	|ГДЕ
	|	Заказ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'заказа давальца';
																|en = 'subcontracting sales order'"));
	Запрос.УстановитьПараметр("ВыводитьДопКолонкиНДС",	Константы.ВыводитьДопКолонкиНДС.Получить());
	Запрос.УстановитьПараметр("КодЯзыка", КодЯзыка);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",		   ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",   ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов, КодЯзыка = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка                                                           КАК Ссылка,
	|	Документы.Номер                                                            КАК Номер,
	|	Документы.Дата                                                             КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                                               КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчет.Владелец, Документы.Организация)         КАК Организация,
	|	Документы.Организация                                                      КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование                          КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность                             КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование                      КАК ГлавныйБухгалтер,
	|	НЕ Документы.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))   КАК УчитыватьНДС,
	|	Документы.НалогообложениеНДС =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя) КАК ОперацияОблагаетсяНДСУПокупателя,
	|	Документы.Контрагент                                                       КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо                                             КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет                                                   КАК БанковскийСчет,
	|	
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.ИностранныйБанк
	|		  ИЛИ Документы.БанковскийСчет.ВалютаДенежныхСредств <> Документы.Организация.ВалютаРегламентированногоУчета
	|		  ИЛИ Документы.БанковскийСчет.ИностранныйБанк
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                      КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчет.ВалютаДенежныхСредств                             КАК ВалютаДенежныхСредств,
	|	
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаМеждународное
	|		ИНАЧЕ Документы.БанковскийСчет.Банк.МеждународноеНаименование
	|	КОНЕЦ                                                                      КАК НаименованиеБанкаМеждународное,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаДляРасчетовМеждународное
	|		ИНАЧЕ Документы.БанковскийСчет.БанкДляРасчетов.МеждународноеНаименование
	|	КОНЕЦ                                                                      КАК НаименованиеБанкаДляРасчетовМеждународное,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.СВИФТБанка
	|		ИНАЧЕ Документы.БанковскийСчет.Банк.СВИФТБИК
	|	КОНЕЦ                                                                      КАК СВИФТБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ Документы.БанковскийСчет.БанкДляРасчетов.СВИФТБИК
	|	КОНЕЦ                                                                      КАК СВИФТБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.АдресБанкаМеждународный
	|		ИНАЧЕ Документы.БанковскийСчет.Банк.АдресМеждународный
	|	КОНЕЦ                                                                      КАК АдресБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ Документы.БанковскийСчет.БанкДляРасчетов.АдресМеждународный
	|	КОНЕЦ                                                                      КАК АдресБанкаДляРасчетов,
	|	
	|	Документы.БанковскийСчет.СчетВБанкеДляРасчетов                             КАК СчетВБанкеДляРасчетов,
	|	
	|	Документы.БанковскийСчет.НомерСчета                                        КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ                                                                      КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ                                                                      КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ                                                                      КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ                                                                      КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ                                                                      КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ                                                                      КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ                                                                      КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ                                                                      КАК ГородБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаМеждународный
	|		ИНАЧЕ КлассификаторБанков.ГородМеждународный
	|	КОНЕЦ                                                                      КАК ГородБанкаМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.СтранаБанка
	|		ИНАЧЕ КлассификаторБанков.Страна
	|	КОНЕЦ                                                                      КАК СтранаБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.ГородМеждународный
	|	КОНЕЦ                                                                      КАК ГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.СтранаБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Страна
	|	КОНЕЦ                                                                      КАК СтранаБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанков.БИКРКЦ.Наименование, """")
	|	КОНЕЦ                                                                      КАК НаименованиеРКЦБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанковКорреспондентовРФ.БИКРКЦ.Наименование, """")
	|	КОНЕЦ                                                                      КАК НаименованиеРКЦБанкаДляРасчетов,
	|	Документы.БанковскийСчет.ТекстКорреспондента                               КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС                                                  КАК ЦенаВключаетНДС,
	|	Документы.Валюта                                                           КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо                                          КАК Менеджер,
	|	Документы.ДополнительнаяИнформация                                         КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента                                                   КАК СуммаКВозврату,
	|	ЛОЖЬ                                                                       КАК ЧастичнаяОплата,
	|	Документы.НазначениеПлатежа                                                КАК НазначениеПлатежа,
	|	100                                                                        КАК ПроцентОплаты,
	|	Документы.СуммаДокумента                                                   КАК СуммаДокумента,
	|	Документы.Грузоотправитель                                                 КАК Грузоотправитель,
	|	Документы.Грузополучатель                                                  КАК Грузополучатель,
	|	Документы.ИдентификаторПлатежа                                             КАК ИдентификаторПлатежа,
	|	ЛОЖЬ                                                                       КАК СчетКВозврату
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК Документы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО Документы.БанковскийСчет.Банк = КлассификаторБанков.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО Документы.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка         КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки    КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа    КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа	  КАК СуммаПлатежа,
	|	ЛОЖЬ                              КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказДавальца2_5.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.СуммаПлатежа <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаПродукции.Ссылка                            КАК Ссылка,
	|	ТаблицаПродукции.Номенклатура                      КАК Номенклатура,
	|	ТаблицаПродукции.Номенклатура.Код                  КАК Код,
	|	ТаблицаПродукции.Номенклатура.Артикул              КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПредставления.НаименованиеПолное, ТаблицаПродукции.Номенклатура.НаименованиеПолное) КАК НаименованиеПолное,
	|	ТаблицаПродукции.Ссылка.СтавкаНДС                  КАК СтавкаНДС,
	|	ЕСТЬNULL(ХарактеристикиНоменклатурыПредставления.НаименованиеПолное, ЕСТЬNULL(ТаблицаПродукции.Характеристика.НаименованиеПолное, """")) КАК Характеристика,
	|	""""                                               КАК Содержание,
	|	ТаблицаПродукции.Цена                              КАК Цена,
	|	ТаблицаПродукции.Сумма                             КАК Сумма,
	|	ТаблицаПродукции.СуммаНДС                          КАК СуммаНДС,
	|	ТаблицаПродукции.Сумма                             КАК СуммаБезСкидки,
	|	0                                                  КАК СуммаСкидки,
	|	ТаблицаПродукции.КоличествоУпаковок                КАК Количество,
	|	ТаблицаПродукции.Упаковка                          КАК Упаковка,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения          КАК ЕдиницаИзмерения,
	|	ЛОЖЬ                                               КАК ЭтоВозвратнаяТара
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Продукция КАК ТаблицаПродукции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Представления КАК НоменклатураПредставления
	|	ПО ТаблицаПродукции.Номенклатура = НоменклатураПредставления.Ссылка
	|	И НоменклатураПредставления.КодЯзыка = &КодЯзыка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.Представления КАК ХарактеристикиНоменклатурыПредставления
	|	ПО ТаблицаПродукции.Характеристика = ХарактеристикиНоменклатурыПредставления.Ссылка
	|	И ХарактеристикиНоменклатурыПредставления.КодЯзыка = &КодЯзыка
	|ГДЕ
	|	ТаблицаПродукции.Ссылка В(&МассивОбъектов)
	|	И НЕ ТаблицаПродукции.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Запрос.Текст =
		СтрЗаменить(
			Запрос.Текст,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "ТаблицаПродукции.Упаковка", "ТаблицаПродукции.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КодЯзыка",       КодЯзыка);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

#КонецОбласти

#Область Взаиморасчеты

Функция СуммыПоЗаказам(СсылкаОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Ссылка             КАК Ссылка,
	|	Товары.СуммаСНДС    КАК Сумма,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Товары.Отменено     КАК Отменено
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ &Таблица КАК Товары
	|ГДЕ
	|	&УсловиеСсылка
	|;
	|ВЫБРАТЬ 
	|	Товары.Ссылка       КАК Заказ,
	|	&Дата               КАК Дата,
	|	&ДатаСогласования   КАК ДатаСогласования,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СУММА(Товары.Сумма) КАК СуммаПлатежа,
	|	0                   КАК СуммаВзаиморасчетов,
	|	0                   КАК СуммаЗалогаЗаТару,
	|	0                   КАК СуммаВзаиморасчетовПоТаре
	|ИЗ ВТТовары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.ДатаОтгрузки
	|;";
	
	Если ТипЗнч(СсылкаОбъект) = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "Документ.ЗаказДавальца2_5.Продукция");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Дата", "Товары.Ссылка.Дата");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаСогласования", "Товары.Ссылка.ДатаСогласования");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСсылка", "Товары.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", СсылкаОбъект);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,      "&УсловиеСсылка", "ИСТИНА");
		Запрос.УстановитьПараметр("Дата",             СсылкаОбъект.Дата);
		Запрос.УстановитьПараметр("ДатаСогласования", СсылкаОбъект.ДатаСогласования);
		Запрос.УстановитьПараметр("Таблица",          СсылкаОбъект.Продукция);
		Запрос.УстановитьПараметр("Ссылка",           СсылкаОбъект.Ссылка);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает назначение материала по умолчанию. Используется для заполнения в строках табличной части "Материалы"
// заказа давальца.
// Параметры:
//  ЗаказДавальца - ДокументСсылка.ЗаказДавальца2_5 - заказ, являющийся распоряжением на поступление материала,
//                                                    назначение которого необходимо получить.
//  Возвращаемое значение:
//   СправочникСсылка.Назначения, Неопределено - назначение давальческого материала.
//
Функция НазначениеМатериалы(ЗаказДавальца) Экспорт
	
	Результат = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказДавальца, "НазначениеМатериалы");
	
	Возврат Результат;
	
КонецФункции

// Возвращает шаблон для генерации назначения продукции в документе.
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаказДавальца2_5, ДанныеФормыСтруктура - заказ
//
// Возвращаемое значение:
//  см. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ШаблонНазначения.Партнер       = Объект.Партнер;
	ШаблонНазначения.Договор       = Объект.Договор;
	ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое2_5;
	
	ВариантОбособления = Константы.ВариантОбособленияПродукцииПриПриемеВПереработку.Получить();
	Если ВариантОбособления = Перечисления.ВариантыОбособленияПриПриемеВПереработку.ЗаказДавальца
		Или Не ЗначениеЗаполнено(ШаблонНазначения.Договор)
			И Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		ШаблонНазначения.Заказ     = Объект.Ссылка;
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Возвращает шаблон для генерации назначения материалов в документе.
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаказДавальца2_5, ДанныеФормыСтруктура - заказ
//
// Возвращаемое значение:
//  см. Справочники.Назначения.ШаблонНового
//
Функция ШаблонНазначенияМатериалы(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ШаблонНазначения.Партнер       = Объект.Партнер;
	ШаблонНазначения.Договор       = Объект.Договор;
	ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.Давальческое2_5;
	
	ВариантОбособления = Константы.ВариантОбособленияМатериаловПриПриемеВПереработку.Получить();
	Если ВариантОбособления = Перечисления.ВариантыОбособленияПриПриемеВПереработку.ЗаказДавальца Тогда
		ШаблонНазначения.Заказ     = Объект.Ссылка;
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ()
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура              КАК Номенклатура,
	|	ДокументТовары.Характеристика            КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ДокументТовары.Упаковка
	|	КОНЕЦ                                    КАК Упаковка,
	|	СУММА(ДокументТовары.Количество)         КАК Количество,
	|	СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	Сумма(ДокументТовары.Сумма)              КАК СуммаСНДС,
	|	ДокументТовары.Склад                     КАК Склад,
	|	ВтДокументы.ДокументСсылка               КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
	|ИЗ
	|	Документ.ЗаказДавальца2_5.Материалы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ВтДокументы.Проведен
	|	И НЕ ДокументТовары.Отменено
	|	И ДокументТовары.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Упаковка,
	|	ДокументТовары.Склад,
	|	ВтДокументы.ДокументСсылка,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ДокументТовары.Упаковка
	|	КОНЕЦ
	|
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Осуществляет инициализацию структуры состояния расчетов
//
// Возвращаемое значение:
//	Структура
//
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка());
	СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

#КонецОбласти

#Область ПроизводствоПоЗаказуДавальца

Процедура СоздатьВтСпособыПолученияМатериаловДляЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМатериалы.Спецификация        КАК Распоряжение,
	|	ЗаказДавальца2_5.НазначениеМатериалы КАК Назначение,
	|	ТаблицаМатериалы.Номенклатура        КАК Номенклатура,
	|	ТаблицаМатериалы.Характеристика      КАК Характеристика,
	|	МАКСИМУМ(ТаблицаМатериалы.Склад)     КАК Склад,
	|	ИСТИНА                               КАК Обособленно
	|ПОМЕСТИТЬ ВтСпособыПолученияМатериалов
	|ИЗ
	|	Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5.Материалы КАК ТаблицаМатериалы
	|		ПО ЗаказДавальца2_5.Ссылка = ТаблицаМатериалы.Ссылка
	|		 И НЕ ТаблицаМатериалы.Отменено
	|ГДЕ
	|	ЗаказДавальца2_5.Ссылка = &Заказ
	|	И ЗаказДавальца2_5.Проведен
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМатериалы.Спецификация,
	|	ЗаказДавальца2_5.НазначениеМатериалы,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Назначение,
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|";
		
	Запрос.УстановитьПараметр("Заказ", Заказ);
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//		ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов -
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений:
//		* Заказ                - ДокументСсылка.ЗаказДавальца2_5 -
//		* Номенклатура         - СправочникСсылка.Номенклатура -
//		* Характеристика       - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* Серия                - СправочникСсылка.СерииНоменклатуры -
//		* ДопустимоеОтклонение - Число -
//
Функция ДопустимыеОтклоненияМерныхТоваров(СписокРаспоряжений, ТипДвиженияЗапасов) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если Не ЗначениеЗаполнено(СписокРаспоряжений) Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Склад");
		
		Если ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Отгрузка Тогда
			Таблица.Колонки.Добавить("Серия");
		КонецЕсли;
		
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		
		Возврат Таблица;
		
	КонецЕсли;
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЗаказДавальца2_5") Тогда
		МассивРаспоряжений = Новый Массив;
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	
	Если ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Поступление Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыКПоступлению.ЗаказПоставщику                               КАК Заказ,
			|	ТоварыКПоступлению.Номенклатура                                  КАК Номенклатура,
			|	ТоварыКПоступлению.Характеристика                                КАК Характеристика,
			|	ТоварыКПоступлению.Склад                                         КАК Склад,
			|	СУММА(ТоварыКПоступлению.КОформлениюПриход
			|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Обороты(
			|		&НачПериод,
			|		&КонПериод,
			|		,
			|		ЗаказПоставщику В (&МассивРаспоряжений)
			|		И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)) КАК ТоварыКПоступлению
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКПоступлению.Номенклатура,
			|	ТоварыКПоступлению.Характеристика,
			|	ТоварыКПоступлению.ЗаказПоставщику,
			|	ТоварыКПоступлению.Склад";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра(
												"ЗаказыПоставщикам",
												"ЗаказПоставщику В (&МассивРаспоряжений)",
												Запрос.Параметры);
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыКОтгрузке.ЗаказКлиента                                     КАК Заказ,
			|	ТоварыКОтгрузке.Номенклатура                                     КАК Номенклатура,
			|	ТоварыКОтгрузке.Характеристика                                   КАК Характеристика,
			|	ТоварыКОтгрузке.Серия                                            КАК Серия,
			|	ТоварыКОтгрузке.Склад                                            КАК Склад,
			|	СУММА(ТоварыКОтгрузке.КОформлениюПриход
			|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Обороты(
			|		&НачПериод,
			|		&КонПериод,
			|		,
			|		ЗаказКлиента В (&МассивРаспоряжений)
			|		И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)) КАК ТоварыКОтгрузке
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКОтгрузке.ЗаказКлиента,
			|	ТоварыКОтгрузке.Номенклатура,
			|	ТоварыКОтгрузке.Характеристика,
			|	ТоварыКОтгрузке.Серия,
			|	ТоварыКОтгрузке.Склад";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра(
												"ЗаказыКлиентов",
												"ЗаказКлиента В (&МассивРаспоряжений)",
												Запрос.Параметры);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр(
		"МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
		
	Запрос.УстановитьПараметр(
		"ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ФормированиеГиперссылкиВЖурналеДокументыПереработки

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СостоянияЗаказовКлиентов)
		И ПравоДоступа("Изменение", Метаданные.Документы.ЗаказДавальца2_5)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья2_5")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияЗаказов.Заказ КАК Заказ
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СостоянияЗаказов.Заказ) = ТИП(Документ.ЗаказДавальца2_5)
	|	И СостоянияЗаказов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)";
	
	ЦветТекста = ?(Запрос.Выполнить().Пустой(), ЦветаСтиля.НезаполненноеПолеТаблицы, Неопределено);
	
	Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'Заказы давальцев';
											|en = 'Subcontracting sales orders'"),, ЦветТекста,, ИмяФормыРабочееМесто());
	
КонецФункции

Функция ИмяФормыРабочееМесто() Экспорт
	
	Возврат "Документ.ЗаказДавальца2_5.Форма.ФормаСписка";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
