#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

Функция ИдентификаторКомандыПечати_ФормаСЗВ_ДСО() Экспорт
	
	Возврат "ПФ_MXL_ФормаСЗВ_ДСО";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода, ФизическиеЛица = Неопределено, Должности = Неопределено) Экспорт 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ОтчетныйПериод; 
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеОтчетногоПериода; 
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, Должность";
	
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	Если ФизическиеЛица <> Неопределено Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;	
	
	Если Должности <> Неопределено Тогда 
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолученияСотрудников.Отборы, "Должность", "В", Должности);
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ОкончаниеОтчетногоПериода);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	Если ФизическиеЛица <> Неопределено Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
			|	&Период КАК Период
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			|		ПО ФизическиеЛица.Ссылка = СотрудникиОрганизации.ФизическоеЛицо
			|			И (ФизическиеЛица.Ссылка В (&ФизическиеЛица))
			|ГДЕ
			|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
			|	И СотрудникиОрганизации.ФизическоеЛицо ЕСТЬ NULL";
		
		Запрос.Выполнить();
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, "ВТФизическиеЛица");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество, СтраховойНомерПФР");
		
		ИменаВТ = Новый Массив;
		ИменаВТ.Добавить("ВТФизическиеЛица");
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	"""" КАК Фамилия,
			|	"""" КАК Имя,
			|	"""" КАК Отчество,
			|	"""" КАК СтраховойНомерПФР
			|ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.ФизическоеЛицо КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СотрудникиОрганизации.Фамилия, 1, 10) = ""-""
		|			ТОГДА """"
		|		ИНАЧЕ СотрудникиОрганизации.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	СотрудникиОрганизации.Имя КАК Имя,
		|	СотрудникиОрганизации.Отчество КАК Отчество,
		|	СотрудникиОрганизации.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ПОМЕСТИТЬ ВТПерсональныеДанныеСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КадровыеДанныеФизическихЛиц.Фамилия, 1, 10) = ""-""
		|			ТОГДА """"
		|		ИНАЧЕ КадровыеДанныеФизическихЛиц.Фамилия
		|	КОНЕЦ,
		|	КадровыеДанныеФизическихЛиц.Имя,
		|	КадровыеДанныеФизическихЛиц.Отчество,
		|	КадровыеДанныеФизическихЛиц.СтраховойНомерПФР
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников, ТаблицаСтажа, РеквизитыДокумента) Экспорт 
	
	Если Не РеквизитыДокумента.ИспользуетсяТрудШахтеров И Не РеквизитыДокумента.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда 
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыСотрудников, "Ключ");
	
	Если СписокСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолученияСотрудников.Организация = РеквизитыДокумента.Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = РеквизитыДокумента.ОтчетныйПериод; 
	ПараметрыПолученияСотрудников.ОкончаниеПериода = РеквизитыДокумента.ОкончаниеОтчетногоПериода; 
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, Должность";
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокСотрудников;
	
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Должности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.ЯвляетсяДолжностьюЛетногоЭкипажа";
	
	Если РеквизитыДокумента.ИспользуетсяТрудШахтеров Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Должности.ЯвляетсяДолжностьюЛетногоЭкипажа", "Должности.ЯвляетсяШахтерскойДолжностью");
	КонецЕсли;
	
	СписокДолжностей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолученияСотрудников.Отборы, "Должность", "В", СписокДолжностей);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	               |	НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, ГОД) КАК НачалоПериода,
	               |	СотрудникиОрганизации.Период КАК ОкончаниеПериода
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
				   |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Запрос.Выполнить();
	
	ПараметрыРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыРабочихМест.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыРабочихМест);
	
	Запрос.УстановитьПараметр("СписокДолжностей", СписокДолжностей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМеста.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РабочиеМеста.Сотрудник КАК Сотрудник,
		|	РабочиеМеста.Период КАК ДатаНачалаПериода,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончанияПериода,
		|	РабочиеМеста.ВидСобытия КАК ВидСобытия,
		|	ВЫБОР
		|		КОГДА РабочиеМеста.Должность В (&СписокДолжностей)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВключатьВСтаж,
		|	ВЫБОР
		|		КОГДА РабочиеМеста.Должность.ЯвляетсяДолжностьюЛетногоЭкипажа
		|			ТОГДА РабочиеМеста.Должность.ВидСтажаЛетныхЭкипажей
		|		ИНАЧЕ РабочиеМеста.Должность.ВидСтажаШахтеров
		|	КОНЕЦ КАК ВидСтажа
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Сотрудник,
		|	ДатаНачалаПериода";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПерсонифицированныйУчетРасширенная") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПерсонифицированныйУчетРасширенный");
	    Модуль.СоздатьЗапросРабочиеМестаСЗВ_ДСО(Запрос, РеквизитыДокумента);
	КонецЕсли;                                                              
	
	РабочиеМеста = Запрос.Выполнить().Выгрузить();
	
	КоличествоСтрок = РабочиеМеста.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл 
		Если Сч < КоличествоСтрок И РабочиеМеста[Сч-1].Сотрудник = РабочиеМеста[Сч].Сотрудник Тогда 
			РабочиеМеста[Сч-1].ДатаОкончанияПериода = РабочиеМеста[Сч].ДатаНачалаПериода - 86400;
		Иначе 
			РабочиеМеста[Сч-1].ДатаОкончанияПериода = РеквизитыДокумента.ОкончаниеОтчетногоПериода;
		КонецЕсли;
	КонецЦикла;
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТСотрудникиОрганизации");
	ИменаВТ.Добавить("ВТСотрудникиПериоды");
	ИменаВТ.Добавить("ВТРабочиеМестаСотрудников");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
	Если РеквизитыДокумента.ИспользуетсяТрудШахтеров Тогда 
		СтрокаСтажа = Неопределено;
		ВыбранныйСотрудник = Неопределено;
		ПериодыРаботы = РабочиеМеста.СкопироватьКолонки();
		Для Каждого РабочееМесто Из РабочиеМеста Цикл 
			Если РабочееМесто.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда 
				Продолжить;
			КонецЕсли;
			Если Не РабочееМесто.ВключатьВСтаж Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаСтажа <> Неопределено 
				И ВыбранныйСотрудник = РабочееМесто.Сотрудник
				И СтрокаСтажа.ВидСтажа = РабочееМесто.ВидСтажа 
				И СтрокаСтажа.ДатаОкончанияПериода = РабочееМесто.ДатаНачалаПериода - 86400 Тогда 
				СтрокаСтажа.ДатаОкончанияПериода = РабочееМесто.ДатаОкончанияПериода;
				Продолжить;
			КонецЕсли;
			СтрокаСтажа = ПериодыРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтажа, РабочееМесто);
			ВыбранныйСотрудник = РабочееМесто.Сотрудник;
		КонецЦикла;
		ПериодыРаботы.Индексы.Добавить("ФизическоеЛицо");
		СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, СписокСотрудников, РеквизитыДокумента);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеСтажаПФР.*
			|ИЗ
			|	ВТДанныеСтажаПФР КАК ДанныеСтажаПФР
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДанныеСтажаПФР.ФизическоеЛицо,
			|	ДанныеСтажаПФР.ДатаНачалаПериода";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПериодыРаботыСотрудника = ПериодыРаботы.НайтиСтроки(Новый Структура("ФизическоеЛицо", Выборка.ФизическоеЛицо));
			Для Каждого ПериодРаботы Из ПериодыРаботыСотрудника Цикл 
				Если Выборка.ДатаНачалаПериода > ПериодРаботы.ДатаОкончанияПериода
					Или Выборка.ДатаОкончанияПериода < ПериодРаботы.ДатаНачалаПериода Тогда  
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Выборка.ОснованиеВыслугиЛет) И Не ЗначениеЗаполнено(Выборка.ОсобыеУсловияТруда) Тогда 
					Продолжить;
				КонецЕсли;
				СтрокаСтажа = ТаблицаСтажа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСтажа, Выборка);
				СтрокаСтажа.ВидСтажа = ПериодРаботы.ВидСтажа;
				СтрокаСтажа.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников[Выборка.ФизическоеЛицо];
				Если СтрокаСтажа.ДатаНачалаПериода < ПериодРаботы.ДатаНачалаПериода Тогда 
					СтрокаСтажа.ДатаНачалаПериода = ПериодРаботы.ДатаНачалаПериода;
				КонецЕсли;
				Если СтрокаСтажа.ДатаОкончанияПериода > ПериодРаботы.ДатаОкончанияПериода Тогда 
					СтрокаСтажа.ДатаОкончанияПериода = ПериодРаботы.ДатаОкончанияПериода;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе 
		СтрокаСтажа = Неопределено;
		ВыбранныйСотрудник = Неопределено;
		Для Каждого РабочееМесто Из РабочиеМеста Цикл 
			Если РабочееМесто.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда 
				Продолжить;
			КонецЕсли;
			Если Не РабочееМесто.ВключатьВСтаж Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаСтажа <> Неопределено 
				И ВыбранныйСотрудник = РабочееМесто.Сотрудник
				И СтрокаСтажа.ВидСтажа = РабочееМесто.ВидСтажа 
				И СтрокаСтажа.ДатаОкончанияПериода = РабочееМесто.ДатаНачалаПериода - 86400 Тогда 
				СтрокаСтажа.ДатаОкончанияПериода = РабочееМесто.ДатаОкончанияПериода;
				Продолжить;
			КонецЕсли;
			СтрокаСтажа = ТаблицаСтажа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтажа, РабочееМесто);
			СтрокаСтажа.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников[РабочееМесто.ФизическоеЛицо];
			ВыбранныйСотрудник = РабочееМесто.Сотрудник;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаСтажа.Сортировать("ИдентификаторСтрокиСотрудника, ДатаНачалаПериода");
	
КонецПроцедуры

Процедура СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Сотрудники, РеквизитыДокумента) Экспорт 
	
	СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДокумента.Ссылка);
	
	ПараметрыДляСоздатьВТДанныеСтажаПФР = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТДанныеСтажаПФР();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ВыделятьСтажПоДоговорамГПХ = Истина;	
	
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
	ПараметрыДляСоздатьВТДанныеСтажаПФР.УчитываемыеДокументы = СписокДокументов;
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокСотрудников;
	
	Организации = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(РеквизитыДокумента.Организация, РеквизитыДокумента.ОтчетныйПериод);
	
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, 
		Организации, 
		РеквизитыДокумента.ОтчетныйПериод, 
		ПараметрыДляСоздатьВТДанныеСтажаПФР,
		ПараметрыОтбора,
		РеквизитыДокумента.ОкончаниеОтчетногоПериода);
		
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаСотрудников(МенеджерВременныхТаблиц, Организации, РеквизитыДокумента.ОтчетныйПериод);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников, СведенияОЗаработке, Сотрудники, РеквизитыДокумента) Экспорт 
	
	Если Не РеквизитыДокумента.ИспользуетсяТрудШахтеров И Не РеквизитыДокумента.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда 
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыСотрудников, "Ключ");
	
	Если СписокСотрудников.Количество() = 0 Или Не ЗначениеЗаполнено(РеквизитыДокумента.Организация) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(РеквизитыДокумента.Организация));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&СписокСотрудников)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
		
	Запрос.Выполнить();
	
	ДатаАктуальности = Макс(РеквизитыДокумента.ДатаДокумента, РеквизитыДокумента.ОкончаниеОтчетногоПериода);
	УчетСтраховыхВзносов.СформироватьВТРасширенныхСведенийОДоходах(РеквизитыДокумента.ОтчетныйПериод, РеквизитыДокумента.ОкончаниеОтчетногоПериода, ДатаАктуальности, Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", РеквизитыДокумента.ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", РеквизитыДокумента.ОкончаниеОтчетногоПериода);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(СведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	СУММА(СведенияОДоходах.БазаПФР) КАК Заработок
		|ИЗ
		|	ВТСведенияОДоходах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.ФизическоеЛицо В(&СписокСотрудников)
		|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
		|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ПустаяСсылка)
		|	И СведенияОДоходах.ВидТарифаСтраховыхВзносов <> ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.АУСН)
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &ОкончаниеОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ОблагаетсяВзносамиНаДоплатуЛетчикам
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(СведенияОДоходах.Период, МЕСЯЦ),
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	Если РеквизитыДокумента.ИспользуетсяТрудШахтеров Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОДоходах.ОблагаетсяВзносамиНаДоплатуЛетчикам", "И СведенияОДоходах.ОблагаетсяВзносамиНаДоплатуШахтерам");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	КодыМесяцев = Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.КодыМесяцевСЗВ_ДСО();
	ЗаработокСотрудников = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = СведенияОЗаработке.Добавить();
		НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторыСотрудников[Выборка.ФизическоеЛицо];
		НоваяСтрока.КодМесяца = КодыМесяцев[Месяц(Выборка.Период)];
		НоваяСтрока.Заработок = Выборка.Заработок;
		ЗаработокВсего = ЗаработокСотрудников[НоваяСтрока.ИдентификаторСтрокиСотрудника];
		Если ЗаработокВсего = Неопределено Тогда 
			ЗаработокВсего = 0;
		КонецЕсли;
		ЗаработокСотрудников.Вставить(НоваяСтрока.ИдентификаторСтрокиСотрудника, ЗаработокВсего + НоваяСтрока.Заработок);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ИдентификаторыСотрудников Цикл 
		Отбор = Новый Структура("ИдентификаторСтрокиСотрудника", КлючИЗначение.Значение);
		ДанныеСотрудника = Сотрудники.НайтиСтроки(Отбор);
		Если ДанныеСотрудника.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ДанныеСотрудника[0].Заработок = ЗаработокСотрудников[КлючИЗначение.Значение];
	КонецЦикла;
	
КонецПроцедуры

#Область ПроцедурыИФункцииФормированияФайлов

Функция ИмяФайла(Организация, Дата, УИД = Неопределено) Экспорт

	Если УИД = Неопределено Тогда
		УИД = Новый УникальныйИдентификатор;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрационныйНомерСФР, РегистрационныйНомерПФР, КодОрганаПФР");
	
	Если ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР(Дата, Организация) И ЗначениеЗаполнено(Параметры.РегистрационныйНомерСФР) Тогда 
		Возврат "ПФР"
				+ "_" + Параметры.РегистрационныйНомерСФР
				+ "_СЗВ-ДСО"
				+ "_" + Формат(Дата, "ДФ=ггггММдд")
				+ "_" + УИД;
	КонецЕсли;
	
	Возврат "ПФР"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.РегистрационныйНомерПФР), Параметры.РегистрационныйНомерПФР, "")
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодОрганаПФР),СтрЗаменить(Параметры.КодОрганаПФР, "-", ""),"")
			+ "_СЗВ-ДСО"
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + УИД;
			
КонецФункции	

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	
	ТекстФайла = СформироватьВыходнойФайл(Объект.Ссылка);
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка, Объект.ИмяФайлаДляСФР, ТекстФайла, , "UTF-8", Ложь, Ложь);
	
КонецПроцедуры

Функция СформироватьВыходнойФайл(Ссылка)
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	ВыборкаПоШапкеДокумента = ЗапросПоШапке(СписокДокументов).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоРаботникам = ЗапросПоСотрудникам(СписокДокументов).Выбрать();
	ВыборкаПоСтажуЧленовЛетныхЭкипажей = ЗапросПоСтажуЧленовЛетныхЭкипажей(СписокДокументов).Выбрать();
	ВыборкаПоСтажуШахтеров = ЗапросПоСтажуШахтеров(СписокДокументов).Выбрать();
	ВыборкаПоЗаработку = ЗапросПоЗаработку(СписокДокументов).Выбрать();
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматСЗВ_ДСО_2022XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматСЗВ_ДСО = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_ДСО");
	
	ФорматЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ДСО.ЗЛ.Значение);
	ФорматСЗВ_ДСО.Удалить("ЗЛ");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ДСО.ДатаЗаполнения));
	ФорматСЗВ_ДСО.Удалить("ДатаЗаполнения");
	
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСЗВ_ДСО.Руководитель));
	ФорматСЗВ_ДСО.Удалить("Руководитель");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/СЗВ-ДСО/2022-07-08");
	Атрибуты.Вставить("xmlns:УТ2", "http://пф.рф/УТ/2017-08-21");
	Атрибуты.Вставить("xmlns:АФ5", "http://пф.рф/АФ/2018-12-07");
	
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Исходная Тогда 
		ФорматСЗВ_ДСО.ТипСведений.Значение = "ИСХД";
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая Тогда 
		ФорматСЗВ_ДСО.ТипСведений.Значение = "КОРР";
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда 
		ФорматСЗВ_ДСО.ТипСведений.Значение = "ОТМН";
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.НазначениеДоплаты Тогда 
		ФорматСЗВ_ДСО.ТипСведений.Значение = "ПЕНС";
	КонецЕсли;
	
	ФорматСЗВ_ДСО.Год.Значение = ВыборкаПоШапкеДокумента.Год;
	
	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая 
		Или ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда 
		ФорматСЗВ_ДСО.КоррОтмПериод.Значение = ВыборкаПоШапкеДокумента.КорректируемыйГод;
	КонецЕсли;
	ПерсонифицированныйУчет.УстановитьВыводВФайл(ФорматСЗВ_ДСО.КоррОтмПериод, "Значение");
	
	// Данные формы и страхователя
	НаборЗаписейРаботодатель = ФорматСЗВ_ДСО.Работодатель.Значение;
	НаименованиеОрганизации = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.НаименованиеПолное));
	ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(НаименованиеОрганизации);
	НаборЗаписейРаботодатель.НаименованиеОрганизации = НаименованиеОрганизации;
	НаборЗаписейРаботодатель.РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	Если ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР(ВыборкаПоШапкеДокумента.Дата, ВыборкаПоШапкеДокумента.Организация) 
		И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РегистрационныйНомерСФР) Тогда
		НаборЗаписейРаботодатель.РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерСФР;
	КонецЕсли;
	НаборЗаписейРаботодатель.УТ2__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейРаботодатель.УТ2__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейРаботодатель.Удалить("УТ2__КПП");
		СтрокаПоляКПП = ФорматСЗВ_ДСО.Работодатель.Поля.Найти("УТ2__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_ДСО.Работодатель.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	// Данные прежнего страхователя
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПрежнийСтраховательНаименованиеПолное) Тогда
		
		НаборЗаписейРаботодатель = ФорматСЗВ_ДСО.РаботодательЗаКоторого.Значение;
		ПрежнийСтраховательНаименованиеПолное = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ПрежнийСтраховательНаименованиеПолное));
		ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(ПрежнийСтраховательНаименованиеПолное);
		НаборЗаписейРаботодатель.НаименованиеОрганизации = ПрежнийСтраховательНаименованиеПолное;
		НаборЗаписейРаботодатель.РегНомер = СокрЛП(ВыборкаПоШапкеДокумента.ПрежнийСтраховательРегистрационныйНомерПФР);
		НаборЗаписейРаботодатель.УТ2__ИНН = СокрЛП(ВыборкаПоШапкеДокумента.ПрежнийСтраховательИНН);
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПрежнийСтраховательКПП) Тогда
			НаборЗаписейРаботодатель.УТ2__КПП = СокрЛП(ВыборкаПоШапкеДокумента.ПрежнийСтраховательКПП);
		Иначе
			НаборЗаписейРаботодатель.Удалить("УТ2__КПП");
			СтрокаПоляКПП = ФорматСЗВ_ДСО.РаботодательЗаКоторого.Поля.Найти("УТ2__КПП", "ИмяПоля");
			Если СтрокаПоляКПП <> Неопределено Тогда
				ФорматСЗВ_ДСО.РаботодательЗаКоторого.Поля.Удалить(СтрокаПоляКПП);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ФорматСЗВ_ДСО.РаботодательЗаКоторого.НеВыводитьВФайл = Истина;
	КонецЕсли;
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-ДСО", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_ДСО);
	
	ФорматПериодыДСО = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.ПериодыДСО.Значение);
	ФорматЗЛ.Удалить("ПериодыДСО");
	
	ФорматСведенияОЗаработке = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ.СведенияОЗаработке.Значение);
	ФорматЗЛ.Удалить("СведенияОЗаработке");
	
	Пока ВыборкаПоРаботникам.Следующий() Цикл  
		
		НаборЗаписейЗЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматЗЛ);
		
		// Данные по сотруднику
		Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
		
		НаборЗаписейФИО = НаборЗаписейЗЛ.УТ2__ФИО.Значение;
		НаборЗаписейФИО.УТ2__Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.УТ2__Имя = ВРег(Имя);
		НаборЗаписейФИО.УТ2__Отчество = ВРег(Отчество);
		
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.УТ2__ФИО, "УТ2__Фамилия");
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.УТ2__ФИО, "УТ2__Имя");
		ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейЗЛ.УТ2__ФИО, "УТ2__Отчество");
		
		НаборЗаписейЗЛ.УТ2__СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		Если ВыборкаПоШапкеДокумента.ТипСведений <> Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда 
			НаборЗаписейЗЛ.КодДСО.Значение = ?(ВыборкаПоШапкеДокумента.ИспользуетсяТрудШахтеров, "ДСОУ", "ДСОЛ");
		КонецЕсли;
		
		ПерсонифицированныйУчет.УстановитьВыводВФайл(НаборЗаписейЗЛ.КодДСО, "Значение");
		
		УзелСотрудника = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ЗЛ", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейЗЛ);
		
		Если ВыборкаПоШапкеДокумента.ИспользуетсяТрудЧленовЛетныхЭкипажей И ВыборкаПоСтажуЧленовЛетныхЭкипажей.Количество() > 0 Тогда 
			УзелПериодыДСО = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "ПериодыДСО", "");
			Отбор = Новый Структура("ОтчетныйПериод, Ссылка, ИдентификаторСтрокиСотрудника");
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРаботникам);
			Пока ВыборкаПоСтажуЧленовЛетныхЭкипажей.НайтиСледующий(Отбор) Цикл 
				НаборЗаписейДСОЛ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматПериодыДСО.ДСОЛ.Значение.ПодпунктА.Значение);
				НаборЗаписейДСОЛ.Период.Значение.УТ2__С = Формат(ВыборкаПоСтажуЧленовЛетныхЭкипажей.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
				НаборЗаписейДСОЛ.Период.Значение.УТ2__По = Формат(ВыборкаПоСтажуЧленовЛетныхЭкипажей.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
				НаборЗаписейДСОЛ.Налет.Значение.Часы = ВыборкаПоСтажуЧленовЛетныхЭкипажей.Часы;
				НаборЗаписейДСОЛ.Налет.Значение.Минуты = ВыборкаПоСтажуЧленовЛетныхЭкипажей.Минуты;
				УзелДСОЛ = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПериодыДСО, "ДСОЛ", "");
				Если ВыборкаПоСтажуЧленовЛетныхЭкипажей.ВидСтажа = Перечисления.ВидыСтажаЛетныхЭкипажей.ПодпунктА Тогда 
					УзелВидСтажа = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДСОЛ, "ПодпунктА", "");
				Иначе 
					УзелВидСтажа = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДСОЛ, "ПодпунктБ", "");
				КонецЕсли;
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелВидСтажа, НаборЗаписейДСОЛ);
			КонецЦикла;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ИспользуетсяТрудШахтеров И ВыборкаПоСтажуШахтеров.Количество() > 0 Тогда 
			УзелПериодыДСО = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "ПериодыДСО", "");
			Отбор = Новый Структура("ОтчетныйПериод, Ссылка, ИдентификаторСтрокиСотрудника");
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРаботникам);
			Пока ВыборкаПоСтажуШахтеров.НайтиСледующий(Отбор) Цикл 
				НаборЗаписейДСОУ = ОбщегоНазначения.СкопироватьРекурсивно(ФорматПериодыДСО.ДСОУ.Значение.Ведущая.Значение);
				НаборЗаписейДСОУ.УТ2__С.Значение = Формат(ВыборкаПоСтажуШахтеров.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
				НаборЗаписейДСОУ.УТ2__По.Значение = Формат(ВыборкаПоСтажуШахтеров.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
				УзелДСОУ = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПериодыДСО, "ДСОУ", "");
				Если ВыборкаПоСтажуШахтеров.ВидСтажа = Перечисления.ВидыСтажаШахтеров.ВедущиеПрофессии Тогда 
					УзелВидСтажа = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДСОУ, "Ведущая", "");
				ИначеЕсли ВыборкаПоСтажуШахтеров.ВидСтажа = Перечисления.ВидыСтажаШахтеров.НеведущиеПрофессии Тогда 
					УзелВидСтажа = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДСОУ, "Неведущая", "");
				Иначе 
					УзелВидСтажа = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелДСОУ, "ПоСписку", "");
				КонецЕсли;
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелВидСтажа, НаборЗаписейДСОУ);
			КонецЦикла;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ТипСведений <> Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда 
		
			ЗаработокСотрудника = Новый ТаблицаЗначений;
			ЗаработокСотрудника.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Строка"));
			ЗаработокСотрудника.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
			
			ПорядокМесяцев = ПорядокМесяцевСЗВ_ДСО();
			Для Каждого КлючИЗначение Из ПорядокМесяцев Цикл 
				НоваяСтрока = ЗаработокСотрудника.Добавить();
			    НоваяСтрока.Месяц = КлючИЗначение.Значение;
			КонецЦикла;
			
			Если ВыборкаПоЗаработку.Количество() > 0 Тогда 
				Отбор = Новый Структура("ОтчетныйПериод, Ссылка, ИдентификаторСтрокиСотрудника");
				ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРаботникам);
				Пока ВыборкаПоЗаработку.НайтиСледующий(Отбор) Цикл 
					ПараметрыОтбора = Новый Структура("Месяц", ПорядокМесяцев[ВыборкаПоЗаработку.КодМесяца]);
					НайденныеСтроки = ЗаработокСотрудника.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].Сумма = ВыборкаПоЗаработку.Заработок;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЗаработокСотрудника.Сортировать("Месяц");
			
			УзелСведенияОЗаработке = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "СведенияОЗаработке", "");
			Отбор = Новый Структура("ОтчетныйПериод, Ссылка, ИдентификаторСтрокиСотрудника");
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРаботникам);
			Для Каждого ДанныеЗаработка Из ЗаработокСотрудника Цикл 
				НаборЗаписейЗаработок = ОбщегоНазначения.СкопироватьРекурсивно(ФорматСведенияОЗаработке.ЗаМесяц.Значение);
				НаборЗаписейЗаработок.Месяц.Значение = ДанныеЗаработка.Месяц;
				НаборЗаписейЗаработок.Сумма.Значение = ДанныеЗаработка.Сумма;
				УзелЗаМесяц = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСведенияОЗаработке, "ЗаМесяц", "");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЗаМесяц, НаборЗаписейЗаработок);
			КонецЦикла;
			НаборЗаписейИтого = Новый Структура("Итого", ОбщегоНазначения.СкопироватьРекурсивно(ФорматСведенияОЗаработке.Итого));
			НаборЗаписейИтого.Итого.Значение = ВыборкаПоРаботникам.Заработок;
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСведенияОЗаработке, НаборЗаписейИтого);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписейРуководитель.Руководитель.Значение.УТ2__Должность.Значение = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя));
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.УТ2__ФИО.Значение;
	НаборЗаписейФИО.УТ2__Фамилия = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя));
	НаборЗаписейФИО.УТ2__Имя = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя));
	НаборЗаписейФИО.УТ2__Отчество = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя));
	ПерсонифицированныйУчет.УстановитьВыводВФайлСвойстваЗначенияЭлемента(НаборЗаписейРуководитель.Руководитель.Значение.УТ2__ФИО, "УТ2__Отчество");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляСФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляСФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ5__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ5__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
	ОписаниеВыгруженногоФайла.ПроверятьПОПД = Истина;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

Функция ЗапросПоШапке(СписокДокументов) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = СписокДокументов;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных, Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	СведенияОбОрганизациях.Организация КАК Организация,
		|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
		|	СведенияОбОрганизациях.ИНН КАК ИНН,
		|	СведенияОбОрганизациях.КПП КАК КПП,
		|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
		|	ГОД(ДанныеДокумента.ОтчетныйПериод) КАК Год,
		|	ГОД(ДанныеДокумента.КорректируемыйПериод) КАК КорректируемыйГод,
		|	ДанныеДокумента.ОтчетныйПериод КАК ОтчетныйПериод,
		|	ДанныеДокумента.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
		|	ДанныеДокумента.ТипСведений КАК ТипСведений,
		|	ДанныеДокумента.Руководитель КАК Руководитель,
		|	ДанныеДокумента.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
		|	ДанныеДокумента.Дата КАК Дата,
		|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
		|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
		|	СведенияОбОрганизациях.КодОКФС КАК КодОКФС,
		|	СведенияОбОрганизациях.КодОКВЭД КАК КодОКВЭД,
		|	СведенияОбОрганизациях.КодОКВЭД2 КАК КодОКВЭД2,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
		|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
		|	СведенияОбОрганизациях.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	ДанныеДокумента.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
		|	ДанныеДокумента.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
		|	ДанныеДокумента.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
		|	ДанныеДокумента.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
		|	ДанныеДокумента.ИспользуетсяТрудЧленовЛетныхЭкипажей КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	ДанныеДокумента.ИспользуетсяТрудШахтеров КАК ИспользуетсяТрудШахтеров,
		|	ДанныеДокумента.ИмяФайлаДляСФР КАК ИмяФайлаДляСФР
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
		|		ПО ДанныеДокумента.Организация = СведенияОбОрганизациях.Организация
		|			И ДанныеДокумента.Дата = СведенияОбОрганизациях.Период
		|ГДЕ
		|	ДанныеДокумента.Ссылка В(&СписокДокументов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Руководитель";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
		|	ДанныеДокументов.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР,
		|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
		|	ДанныеДокументов.ИНН КАК ИНН,
		|	ДанныеДокументов.КПП КАК КПП,
		|	ДанныеДокументов.ОГРН КАК ОГРН,
		|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
		|	ДанныеДокументов.КодОКФС КАК КодОКФС,
		|	ДанныеДокументов.КодОКВЭД КАК КодОКВЭД,
		|	ДанныеДокументов.КодОКВЭД2 КАК КодОКВЭД2,
		|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
		|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	ДанныеДокументов.Год КАК Год,
		|	ДанныеДокументов.КорректируемыйГод КАК КорректируемыйГод,
		|	ДанныеДокументов.ОтчетныйПериод КАК ОтчетныйПериод,
		|	ДанныеДокументов.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
		|	ДанныеДокументов.ТипСведений КАК ТипСведений,
		|	ЕСТЬNULL(ФИОПоследние.ФИОПолные, """") КАК Руководитель,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЕСТЬNULL(ФИОПоследние.Фамилия, """"), 1, 10) = ""-""
		|			ТОГДА """"
		|		ИНАЧЕ ЕСТЬNULL(ФИОПоследние.Фамилия, """")
		|	КОНЕЦ КАК ФамилияРуководителя,
		|	ЕСТЬNULL(ФИОПоследние.Имя, """") КАК ИмяРуководителя,
		|	ЕСТЬNULL(ФИОПоследние.Отчество, """") КАК ОтчествоРуководителя,
		|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ДанныеДокументов.Дата КАК Дата,
		|	ДанныеДокументов.ПрежнийСтраховательРегистрационныйНомерПФР КАК ПрежнийСтраховательРегистрационныйНомерПФР,
		|	ДанныеДокументов.ПрежнийСтраховательНаименованиеПолное КАК ПрежнийСтраховательНаименованиеПолное,
		|	ДанныеДокументов.ПрежнийСтраховательИНН КАК ПрежнийСтраховательИНН,
		|	ДанныеДокументов.ПрежнийСтраховательКПП КАК ПрежнийСтраховательКПП,
		|	ДанныеДокументов.ИспользуетсяТрудЧленовЛетныхЭкипажей КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	ДанныеДокументов.ИспользуетсяТрудШахтеров КАК ИспользуетсяТрудШахтеров,
		|	ДанныеДокументов.ИмяФайлаДляСФР КАК ИмяФайлаДляСФР
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПоследние
		|		ПО ДанныеДокументов.Ссылка = ФИОПоследние.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОПоследние.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипСведений,
		|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникам(СписокДокументов) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.НомерСтроки КАК НомерСтроки,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	Сотрудники.Фамилия КАК Фамилия,
		|	Сотрудники.Имя КАК Имя,
		|	Сотрудники.Отчество КАК Отчество,
		|	Сотрудники.Заработок КАК Заработок,
		|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника
		|ИЗ
		|	Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетныйПериод УБЫВ,
		|	Ссылка,
		|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСтажуЧленовЛетныхЭкипажей(СписокДокументов) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧленыЛетныхЭкипажей.Ссылка.ОтчетныйПериод КАК ОтчетныйПериод,
		|	ЧленыЛетныхЭкипажей.Ссылка КАК Ссылка,
		|	ЧленыЛетныхЭкипажей.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
		|	ЧленыЛетныхЭкипажей.ВидСтажа КАК ВидСтажа,
		|	ЧленыЛетныхЭкипажей.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЧленыЛетныхЭкипажей.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЧленыЛетныхЭкипажей.Часы КАК Часы,
		|	ЧленыЛетныхЭкипажей.Минуты КАК Минуты
		|ИЗ
		|	Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ЧленыЛетныхЭкипажей КАК ЧленыЛетныхЭкипажей
		|ГДЕ
		|	ЧленыЛетныхЭкипажей.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетныйПериод УБЫВ,
		|	Ссылка,
		|	ИдентификаторСтрокиСотрудника,
		|	ЧленыЛетныхЭкипажей.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСтажуШахтеров(СписокДокументов) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Шахтеры.Ссылка.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Шахтеры.Ссылка КАК Ссылка,
		|	Шахтеры.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
		|	Шахтеры.ВидСтажа КАК ВидСтажа,
		|	Шахтеры.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Шахтеры.ДатаОкончанияПериода КАК ДатаОкончанияПериода
		|ИЗ
		|	Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.Шахтеры КАК Шахтеры
		|ГДЕ
		|	Шахтеры.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетныйПериод УБЫВ,
		|	Ссылка,
		|	ИдентификаторСтрокиСотрудника,
		|	Шахтеры.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоЗаработку(СписокДокументов) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОЗаработке.Ссылка.ОтчетныйПериод КАК ОтчетныйПериод,
		|	СведенияОЗаработке.Ссылка КАК Ссылка,
		|	СведенияОЗаработке.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
		|	СведенияОЗаработке.КодМесяца КАК КодМесяца,
		|	СведенияОЗаработке.Заработок КАК Заработок
		|ИЗ
		|	Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.СведенияОЗаработке КАК СведенияОЗаработке
		|ГДЕ
		|	СведенияОЗаработке.Ссылка В(&СписокДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетныйПериод УБЫВ,
		|	Ссылка,
		|	ИдентификаторСтрокиСотрудника,
		|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция КодыМесяцевСЗВ_ДСО() Экспорт 
	
	КодыМесяцев = Новый Соответствие;
	КодыМесяцев.Вставить(1, "Январь");
	КодыМесяцев.Вставить(2, "Февраль");
	КодыМесяцев.Вставить(3, "Март");
	КодыМесяцев.Вставить(4, "Апрель");
	КодыМесяцев.Вставить(5, "Май");
	КодыМесяцев.Вставить(6, "Июнь");
	КодыМесяцев.Вставить(7, "Июль");
	КодыМесяцев.Вставить(8, "Август");
	КодыМесяцев.Вставить(9, "Сентябрь");
	КодыМесяцев.Вставить(10, "Октябрь");
	КодыМесяцев.Вставить(11, "Ноябрь");
	КодыМесяцев.Вставить(12, "Декабрь");
	
	Возврат КодыМесяцев;
	
КонецФункции

Функция ПорядокМесяцевСЗВ_ДСО() Экспорт
	
	ПорядокМесяцев = Новый Соответствие;
	ПорядокМесяцев.Вставить("Январь", "01");
	ПорядокМесяцев.Вставить("Февраль", "02");
	ПорядокМесяцев.Вставить("Март", "03");
	ПорядокМесяцев.Вставить("Апрель", "04");
	ПорядокМесяцев.Вставить("Май", "05");
	ПорядокМесяцев.Вставить("Июнь", "06");
	ПорядокМесяцев.Вставить("Июль", "07");
	ПорядокМесяцев.Вставить("Август", "08");
	ПорядокМесяцев.Вставить("Сентябрь", "09");
	ПорядокМесяцев.Вставить("Октябрь", "10");
	ПорядокМесяцев.Вставить("Ноябрь", "11");
	ПорядокМесяцев.Вставить("Декабрь", "12");
	
	Возврат ПорядокМесяцев;
	
КонецФункции

Функция НачалоПериодаДокумента(ТипСведений, ОтчетныйПериод, КорректируемыйПериод) Экспорт
	
	НачалоПериода = ОтчетныйПериод;
	Если ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая
		Или ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда 
		НачалоПериода = КорректируемыйПериод;
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

Функция ОкончаниеПериодаДокумента(ТипСведений, ОкончаниеОтчетногоПериода, ОкончаниеКорректируемогоПериода) Экспорт
	
	ОкончаниеПериода = ОкончаниеОтчетногоПериода;
	Если ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая
		Или ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда 
		ОкончаниеПериода = ОкончаниеКорректируемогоПериода;
	КонецЕсли;
	
	Возврат КонецДня(ОкончаниеПериода);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = ИдентификаторКомандыПечати_ФормаСЗВ_ДСО();
	КомандаПечати.Представление = НСтр("ru = 'СЗВ-ДСО';
										|en = 'SZV-DSO'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИсключитьПередачуВКабинетСотрудника");
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ИдентификаторКомандыПечати_ФормаСЗВ_ДСО()) Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			ИдентификаторКомандыПечати_ФормаСЗВ_ДСО(), 
			"СЗВ-ДСО", 
			ПечатнаяФормаСЗВ_ДСО(ПараметрыПечати, МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаСЗВ_ДСО(ПараметрыПечати, МассивОбъектов, ОбъектыПечати)
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапке(МассивОбъектов).Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникам(МассивОбъектов).Выбрать();
	ВыборкаПоСтажуЧленовЛетныхЭкипажей = ЗапросПоСтажуЧленовЛетныхЭкипажей(МассивОбъектов).Выбрать();
	ВыборкаПоСтажуШахтеров = ЗапросПоСтажуШахтеров(МассивОбъектов).Выбрать();
	ВыборкаПоЗаработку = ЗапросПоЗаработку(МассивОбъектов).Выбрать();
	
	Возврат ПечатнаяФормаСЗВДСОПоВыборкамИзДокументов(ПараметрыПечати, ОбъектыПечати, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам,
		ВыборкаПоСтажуЧленовЛетныхЭкипажей, ВыборкаПоСтажуШахтеров, ВыборкаПоЗаработку);
	
КонецФункции

Функция ПечатнаяФормаСЗВДСОПоВыборкамИзДокументов(ПараметрыПечати, ОбъектыПечати, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам,
	ВыборкаПоСтажуЧленовЛетныхЭкипажей, ВыборкаПоСтажуШахтеров, ВыборкаПоЗаработку) Экспорт
	
	ЭтоПервыйДокументКоллекции = Истина;
	ПорядокМесяцев = ПорядокМесяцевСЗВ_ДСО();
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		ЭтоФорма2023 = ВыборкаПоШапкеДокумента.Дата >= '20231121';
		Макет = ?(ЭтоФорма2023,
			УправлениеПечатью.МакетПечатнойФормы("Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ПФ_MXL_ФормаСЗВ_ДСО_2023"),
			УправлениеПечатью.МакетПечатнойФормы("Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ПФ_MXL_ФормаСЗВ_ДСО"));
			
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_ДСО";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		НачалоФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьЛетныеЭкипажиСтрока = Макет.ПолучитьОбласть("ЛетныеЭкипажиСтрока");
		ОбластьШахтерыШапка = Макет.ПолучитьОбласть("ШахтерыШапка");
		ОбластьШахтерыСтрока = Макет.ПолучитьОбласть("ШахтерыСтрока");
		ОбластьЗаработок = Макет.ПолучитьОбласть("Заработок");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПримечания = Макет.ПолучитьОбласть("Примечания");
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
			
			ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
			Пока ВыборкаПоРаботникам.Следующий() Цикл
				
				НачалоФормыСотрудника = ДокументРезультат.ВысотаТаблицы + 1;
				
				Если ЭтоПервыйДокументКоллекции Тогда
					ЭтоПервыйДокументКоллекции = Ложь;	
				Иначе
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
				
				ОчиститьОбласть(ОбластьШапка);
				ОчиститьОбласть(ОбластьЗаработок);
				ОчиститьОбласть(ОбластьПодвал);
				
				РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР, " ", "");
			    ОбластьШапка.Параметры.РегистрационныйНомерПФР = РегистрационныйНомерПФР;
				
				Если ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР(ВыборкаПоШапкеДокумента.Дата, ВыборкаПоШапкеДокумента.Организация) 
					И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РегистрационныйНомерСФР) Тогда
					ОбластьШапка.Параметры.РегистрационныйНомерПФР = ВыборкаПоШапкеДокумента.РегистрационныйНомерСФР;
				КонецЕсли;
				
				ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12, 1);
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП, "ЧГ=0"), ОбластьШапка, "КПП", 9, 1);
				
				ОбластьШапка.Параметры.НаименованиеПолное = ВыборкаПоШапкеДокумента.НаименованиеПолное;
				ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
				
				ПрежнийСтраховательРегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ПрежнийСтраховательРегистрационныйНомерПФР, " ", "");				
			    ОбластьШапка.Параметры.ПрежнийСтраховательРегистрационныйНомерПФР = ПрежнийСтраховательРегистрационныйНомерПФР;
				
				Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПрежнийСтраховательИНН) Тогда 
					ПрежнийСтраховательИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ПрежнийСтраховательИНН, 12, "-", "Справа");
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ПрежнийСтраховательИНН, ОбластьШапка, "ИНН", 12, 13);
				КонецЕсли;
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.ПрежнийСтраховательКПП, "ЧГ=0"), ОбластьШапка, "КПП", 9, 10);
				
				ОбластьШапка.Параметры.ПрежнийСтраховательНаименованиеПолное = ВыборкаПоШапкеДокумента.ПрежнийСтраховательНаименованиеПолное;
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.Год, "ЧГ=0"), ОбластьШапка, "Год", 4, 1);
				Если ЭтоФорма2023 И (ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая 
					Или ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая) Тогда 
					ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КорректируемыйГод, "ЧГ=0"), ОбластьШапка, "КорректируемыйГод", 4, 1);
				КонецЕсли;
				
				Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Исходная Тогда 
					ОбластьШапка.Параметры.Исходная = "Х";
				ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая Тогда 
					ОбластьШапка.Параметры.Корректирующая = "Х";
				ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда 
					ОбластьШапка.Параметры.Отменяющая = "Х";
				ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.НазначениеДоплаты Тогда 
					ОбластьШапка.Параметры.НазначениеДоплаты = "Х";
				КонецЕсли;
				
				ОбластьШапка.Параметры.СтраховойНомерПФР = ВыборкаПоРаботникам.СтраховойНомерПФР;
				ОбластьШапка.Параметры.Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
				ОбластьШапка.Параметры.Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
				ОбластьШапка.Параметры.Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
				
				КодДСО = ?(ВыборкаПоШапкеДокумента.ИспользуетсяТрудШахтеров, "ДСОУ", "ДСОЛ");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(КодДСО, ОбластьШапка, "КодДСО", 4, 1);
				
				ДокументРезультат.Вывести(ОбластьШапка);
				
				Если ВыборкаПоШапкеДокумента.ИспользуетсяТрудЧленовЛетныхЭкипажей И ВыборкаПоСтажуЧленовЛетныхЭкипажей.Количество() > 0 Тогда 
					НомерСтроки = 1;
					Отбор = Новый Структура("ОтчетныйПериод, Ссылка, ИдентификаторСтрокиСотрудника");
					ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРаботникам);
					Пока ВыборкаПоСтажуЧленовЛетныхЭкипажей.НайтиСледующий(Отбор) Цикл 
						ОчиститьОбласть(ОбластьЛетныеЭкипажиСтрока);
						Часы = НСтр("ru = '00 час.';
									|en = '00 h'");
						Если ЗначениеЗаполнено(ВыборкаПоСтажуЧленовЛетныхЭкипажей.Часы) Тогда
							Часы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 час.';
																								|en = '%1 h'"), ВыборкаПоСтажуЧленовЛетныхЭкипажей.Часы);
						КонецЕсли;
						Минуты = НСтр("ru = '00 мин.';
										|en = '00 min'");
						Если ЗначениеЗаполнено(ВыборкаПоСтажуЧленовЛетныхЭкипажей.Минуты) Тогда
							Минуты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 мин.';
																									|en = '%1 min'"), ВыборкаПоСтажуЧленовЛетныхЭкипажей.Минуты);
						КонецЕсли;
						Налет = Часы + " " + Минуты;
						Если ВыборкаПоСтажуЧленовЛетныхЭкипажей.ВидСтажа = Перечисления.ВидыСтажаЛетныхЭкипажей.ПодпунктА Тогда 
							ОбластьЛетныеЭкипажиСтрока.Параметры.ПодпунктАС = Формат(ВыборкаПоСтажуЧленовЛетныхЭкипажей.ДатаНачалаПериода, "ДФ=дд.ММ.гггг");
							ОбластьЛетныеЭкипажиСтрока.Параметры.ПодпунктАПо = Формат(ВыборкаПоСтажуЧленовЛетныхЭкипажей.ДатаОкончанияПериода, "ДФ=дд.ММ.гггг");
							ОбластьЛетныеЭкипажиСтрока.Параметры.ПодпунктАНалет = Налет;
						Иначе 
							ОбластьЛетныеЭкипажиСтрока.Параметры.ПодпунктБС = Формат(ВыборкаПоСтажуЧленовЛетныхЭкипажей.ДатаНачалаПериода, "ДФ=дд.ММ.гггг");
							ОбластьЛетныеЭкипажиСтрока.Параметры.ПодпунктБПо = Формат(ВыборкаПоСтажуЧленовЛетныхЭкипажей.ДатаОкончанияПериода, "ДФ=дд.ММ.гггг");
							ОбластьЛетныеЭкипажиСтрока.Параметры.ПодпунктБНалет = Налет;
						КонецЕсли;
						ОбластьЛетныеЭкипажиСтрока.Параметры.НомерСтроки = НомерСтроки;
						ВывестиОбласть(ОбластьЛетныеЭкипажиСтрока, ДокументРезультат);
						НомерСтроки = НомерСтроки + 1;
					КонецЦикла;
				Иначе 
					ОчиститьОбласть(ОбластьЛетныеЭкипажиСтрока);
					ВывестиОбласть(ОбластьЛетныеЭкипажиСтрока, ДокументРезультат)
				КонецЕсли;
				
				ВывестиОбласть(ОбластьШахтерыШапка, ДокументРезультат);
				
				Если ВыборкаПоШапкеДокумента.ИспользуетсяТрудШахтеров И ВыборкаПоСтажуШахтеров.Количество() > 0 Тогда 
					НомерСтроки = 1;
					Отбор = Новый Структура("ОтчетныйПериод, Ссылка, ИдентификаторСтрокиСотрудника");
					ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРаботникам);
					Пока ВыборкаПоСтажуШахтеров.НайтиСледующий(Отбор) Цикл 
						ОчиститьОбласть(ОбластьШахтерыСтрока);
						Если ВыборкаПоСтажуШахтеров.ВидСтажа = Перечисления.ВидыСтажаШахтеров.ВедущиеПрофессии Тогда 
							ОбластьШахтерыСтрока.Параметры.ВедущиеС = Формат(ВыборкаПоСтажуШахтеров.ДатаНачалаПериода, "ДФ=дд.ММ.гггг");
							ОбластьШахтерыСтрока.Параметры.ВедущиеПо = Формат(ВыборкаПоСтажуШахтеров.ДатаОкончанияПериода, "ДФ=дд.ММ.гггг");
						ИначеЕсли ВыборкаПоСтажуШахтеров.ВидСтажа = Перечисления.ВидыСтажаШахтеров.НеведущиеПрофессии Тогда 
							ОбластьШахтерыСтрока.Параметры.НеведущиеС = Формат(ВыборкаПоСтажуШахтеров.ДатаНачалаПериода, "ДФ=дд.ММ.гггг");
							ОбластьШахтерыСтрока.Параметры.НеведущиеПо = Формат(ВыборкаПоСтажуШахтеров.ДатаОкончанияПериода, "ДФ=дд.ММ.гггг");
						Иначе 
							ОбластьШахтерыСтрока.Параметры.ПоСпискуС = Формат(ВыборкаПоСтажуШахтеров.ДатаНачалаПериода, "ДФ=дд.ММ.гггг");
							ОбластьШахтерыСтрока.Параметры.ПоСпискуПо = Формат(ВыборкаПоСтажуШахтеров.ДатаОкончанияПериода, "ДФ=дд.ММ.гггг");
						КонецЕсли;
						ОбластьШахтерыСтрока.Параметры.НомерСтроки = НомерСтроки;
						ВывестиОбласть(ОбластьШахтерыСтрока, ДокументРезультат);
						НомерСтроки = НомерСтроки + 1;
					КонецЦикла;
				Иначе 
					ОчиститьОбласть(ОбластьШахтерыСтрока);
					ВывестиОбласть(ОбластьШахтерыСтрока, ДокументРезультат)
				КонецЕсли;
				
				Если ВыборкаПоЗаработку.Количество() > 0 Тогда 
					ПорядокМесяцев = ПорядокМесяцевСЗВ_ДСО();
					Отбор = Новый Структура("ОтчетныйПериод, Ссылка, ИдентификаторСтрокиСотрудника");
					ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРаботникам);
					Пока ВыборкаПоЗаработку.НайтиСледующий(Отбор) Цикл 
						НомерМесяца = ПорядокМесяцев[ВыборкаПоЗаработку.КодМесяца];
						ОбластьЗаработок.Параметры["Месяц" + НомерМесяца] = ВыборкаПоЗаработку.Заработок;
					КонецЦикла;
					ОбластьЗаработок.Параметры.ЗаработокИтого = ВыборкаПоРаботникам.Заработок;
				КонецЕсли;
				
				ВывестиОбласть(ОбластьЗаработок, ДокументРезультат);
				
				ОбластьПодвал.Параметры.ДолжностьРуководителя = СокрЛП(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
				ОбластьПодвал.Параметры.ФамилияРуководителя = СокрЛП(ВыборкаПоШапкеДокумента.ФамилияРуководителя);
				ОбластьПодвал.Параметры.ИмяРуководителя = СокрЛП(ВыборкаПоШапкеДокумента.ИмяРуководителя);
				ОбластьПодвал.Параметры.ОтчествоРуководителя = СокрЛП(ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
				ОбластьПодвал.Параметры.ДатаЗаполнения = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=дд.ММ.гггг");
				
				ВывестиОбласть(ОбластьПодвал, ДокументРезультат);
				
				ВывестиОбласть(ОбластьПримечания, ДокументРезультат);
				
				КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторКомандыПечати_ФормаСЗВ_ДСО(),
					НачалоФормыСотрудника, ВыборкаПоРаботникам, ВыборкаПоШапкеДокумента.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоФормы, ОбъектыПечати, ВыборкаПоШапкеДокумента.Ссылка);
		
	КонецЦикла;	
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиОбласть(ВыводимаяОбласть, ДокументРезультат)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ДокументРезультат.Вывести(ВыводимаяОбласть);
	Иначе
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ДокументРезультат.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьКорректируемыйПериодСЗВ_ДСО(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
	               |	СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.Ссылка КАК Ссылка,
	               |	СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ОтчетныйПериод КАК ОтчетныйПериод
	               |ИЗ
	               |	Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО КАК СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО
	               |ГДЕ
	               |	СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.КорректируемыйПериод = ДАТАВРЕМЯ(1, 1, 1)
	               |	И СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ТипСведений В (ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_ДСО.Корректирующая), ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_ДСО.Отменяющая))";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КорректируемыйПериод = ?(ЗначениеЗаполнено(Выборка.ОтчетныйПериод), Выборка.ОтчетныйПериод, НачалоГода(ТекущаяДатаСеанса()));
		ДокументОбъект.ОкончаниеКорректируемогоПериода = КонецГода(ДокументОбъект.КорректируемыйПериод);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли