#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда 
		ЧленыЛетныхЭкипажей.Очистить();
	КонецЕсли;
	
	Если Не ИспользуетсяТрудШахтеров Тогда 
		Шахтеры.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаДляСФР) Тогда
		ИмяФайлаДляСФР = Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ИмяФайла(Организация, Дата);
	Иначе		
		УИДИзИмениФайла = Прав(ИмяФайлаДляСФР, 36);
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УИДИзИмениФайла) Тогда
			УИДИзИмениФайла = Строка(Новый УникальныйИдентификатор);	
		КонецЕсли;	
		ИмяФайлаДляСФР = Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ИмяФайла(Организация, Дата, УИДИзИмениФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(Организация, ОтчетныйПериод) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Организация не отчитывается самостоятельно';
																|en = 'Company does not report independently'"), ЭтотОбъект, , , Отказ);
	КонецЕсли;
	
	Ошибки = Неопределено;
	ДополнительныеСвойства.Свойство("Ошибки", Ошибки);
	
	Если Не ДополнительныеСвойства.Свойство("НеПроверятьДанныеОрганизации") Тогда
		ПерсонифицированныйУчет.ПроверитьДанныеОрганизации(ЭтотОбъект, Организация, Отказ, , Ошибки);
	КонецЕсли;	
	
	Если Не ИспользуетсяТрудЧленовЛетныхЭкипажей И Не ИспользуетсяТрудШахтеров Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для организации должно быть установлено испольльзование труда членов летных экипажей или шахтеров';
													|en = 'The use of labor of flight crew members or miners must be specified for the company'"), , , , Отказ);
	КонецЕсли;
	
	УникальныеСтраховыеНомера = Новый Соответствие;
	Для Каждого ДанныеСотрудника Из Сотрудники Цикл 
		Если ЗначениеЗаполнено(ДанныеСотрудника.СтраховойНомерПФР) Тогда 
			Если УникальныеСтраховыеНомера[ДанныеСотрудника.СтраховойНомерПФР] <> Неопределено Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: СНИЛС %2 уже был введен ранее в строке %3.';
						|en = 'Line %1: SNILS%2 is already filled in line %3.'"),
					ДанныеСотрудника.НомерСтроки, ДанныеСотрудника.СтраховойНомерПФР, УникальныеСтраховыеНомера[ДанныеСотрудника.СтраховойНомерПФР]);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,
					"Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].СтраховойНомерПФР" , , Отказ);
			Иначе 
				УникальныеСтраховыеНомера.Вставить(ДанныеСотрудника.СтраховойНомерПФР, ДанныеСотрудника.НомерСтроки);
			КонецЕсли;
			ТекстСообщения = "";
			Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(ДанныеСотрудника.СтраховойНомерПФР, ТекстСообщения) Тогда 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,
					"Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].СтраховойНомерПФР" , , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НачалоПериода = Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.НачалоПериодаДокумента(ТипСведений, ОтчетныйПериод, КорректируемыйПериод);
	ОкончаниеПериода = Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ОкончаниеПериодаДокумента(ТипСведений, ОкончаниеОтчетногоПериода, ОкончаниеКорректируемогоПериода);
	
	Для Каждого ДанныеСтажа Из ЧленыЛетныхЭкипажей Цикл 
		Если ДанныеСтажа.ДатаНачалаПериода > ОкончаниеПериода
			Или ДанныеСтажа.ДатаОкончанияПериода < НачалоПериода Тогда 
			Отбор = Новый Структура("ИдентификаторСтрокиСотрудника", ДанныеСтажа.ИдентификаторСтрокиСотрудника);
			НайденныеСтроки = Сотрудники.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Период стажа (%2 - %3) выходит за границы отчетного периода.';
						|en = 'Line %1: The service period (%2 - %3) is beyond the accounting period.'"),
					НайденныеСтроки[0].НомерСтроки, Формат(ДанныеСтажа.ДатаНачалаПериода, "ДЛФ=Д"), Формат(ДанныеСтажа.ДатаОкончанияПериода, "ДЛФ=Д"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,
					"Объект.Сотрудники[" + Формат(НайденныеСтроки[0].НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Сотрудник" , , Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДанныеСтажа Из Шахтеры Цикл 
		Если ДанныеСтажа.ДатаНачалаПериода > ОкончаниеПериода
			Или ДанныеСтажа.ДатаОкончанияПериода < НачалоПериода Тогда 
			Отбор = Новый Структура("ИдентификаторСтрокиСотрудника", ДанныеСтажа.ИдентификаторСтрокиСотрудника);
			НайденныеСтроки = Сотрудники.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Период стажа (%2 - %3) выходит за границы отчетного периода.';
						|en = 'Line %1: The service period (%2 - %3) is beyond the accounting period.'"),
					НайденныеСтроки[0].НомерСтроки, Формат(ДанныеСтажа.ДатаНачалаПериода, "ДЛФ=Д"), Формат(ДанныеСтажа.ДатаОкончанияПериода, "ДЛФ=Д"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,
					"Объект.Сотрудники[" + Формат(НайденныеСтроки[0].НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Сотрудник" , , Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДанныеДокумента(Отказ = Ложь) Экспорт 
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли