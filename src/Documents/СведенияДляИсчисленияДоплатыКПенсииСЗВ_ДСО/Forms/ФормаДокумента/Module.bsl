#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Объект.ОтчетныйПериод) Тогда 
			Объект.ОтчетныйПериод = НачалоГода(ТекущаяДатаСеанса());
			Объект.ОкончаниеОтчетногоПериода = КонецГода(Объект.ОтчетныйПериод);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.КорректируемыйПериод) Тогда 
			Объект.КорректируемыйПериод = НачалоГода(ТекущаяДатаСеанса());
			Объект.ОкончаниеКорректируемогоПериода = КонецГода(Объект.КорректируемыйПериод);
		КонецЕсли;
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияПервоначальногоЗаполнения());
		Если ЗначениеЗаполнено(Объект.Организация) Тогда 
			ОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	// ПанельОтправкиВКонтролирующиеОрганы
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыДанныеСотрудникаСЗВ_ДСО" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбработатьИзменениеДанныхСотрудника(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ИмяСобытия = "Завершение отправки в контролирующий орган" 
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Ссылка = Объект.Ссылка Тогда
	    ПослеОтправкиВСФР();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО"));
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда 
		Отказ = Истина;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПанельОтправкиВКонтролирующиеОрганы
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Ссылка);
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
	УстановитьСвойстваЭлементовФормы();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтчетныйПериодПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ОтчетныйПериод = ДобавитьМесяц(Объект.ОтчетныйПериод, Направление * 12);
	Объект.ОкончаниеОтчетногоПериода = Дата(Год(Объект.ОтчетныйПериод), 12, 31);
	ОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ДанныеОтчетногоПериода(Объект.ОтчетныйПериод, Объект.ОкончаниеОтчетногоПериода);
	ОтчетныйПериодПредставление = ОтчетныйПериод.Представление;
	
	Если Объект.ТипСведений = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ_ДСО.Корректирующая") 
		Или Объект.ТипСведений = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ_ДСО.Отменяющая") Тогда 
	    Возврат;
	КонецЕсли;
	
	ОтчетныйПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыйПериодПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.КорректируемыйПериод = ДобавитьМесяц(Объект.КорректируемыйПериод, Направление * 12);
	Объект.ОкончаниеКорректируемогоПериода = Дата(Год(Объект.КорректируемыйПериод), 12, 31);
	КорректируемыйПериод = ПерсонифицированныйУчетКлиентСервер.ДанныеОтчетногоПериода(Объект.КорректируемыйПериод, Объект.ОкончаниеКорректируемогоПериода);
	КорректируемыйПериодПредставление = КорректируемыйПериод.Представление;
	
	ОтчетныйПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагБлокировкиДокументаПриИзменении(Элемент)
	
	ФлагБлокировкиДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСведенийПриИзменении(Элемент)
	
	ТипСведенийПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяТрудЧленовЛетныхЭкипажейПриИзменении(Элемент)
	
	Если Объект.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда 
		Объект.ИспользуетсяТрудШахтеров = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяТрудШахтеровПриИзменении(Элемент)
	
	Если Объект.ИспользуетсяТрудШахтеров Тогда 
		Объект.ИспользуетсяТрудЧленовЛетныхЭкипажей = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательНаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательРегистрационныйНомерПФРПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательИННПриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрежнийСтраховательКПППриИзменении(Элемент)
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияКарточкиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	СотрудникиПередУдалениемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника + 1;
	Элемент.ТекущиеДанные.ИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда 
		Возврат;
	КонецЕсли;
	
	СотрудникиПриОкончанииРедактированияНаСервере(ТекущиеДанные.Сотрудник, ТекущиеДанные.ИдентификаторСтрокиСотрудника);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеСотрудников(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуЗавершение(Результат, Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();

	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);
	ПроверкаСтороннимиПрограммами(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьДокументНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПерсонифицированныйУчетКлиент.ПодобратьФизическихЛиц(Элементы.Сотрудники, Объект.Организация, АдресСпискаПодобранныхСотрудников());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВСФР(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ПФР");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма", Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ИнформационнаяПанельБРО

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	ПараметрыОтображения = ЭлектронныйДокументооборотСФСС.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = СЭДОФСС.СтраховательОрганизации(Объект.Организация);
	ПараметрыОтображения.Группа      = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма       = ЭтотОбъект;
	ПараметрыОтображения.ЭтоСЭДО     = Ложь;
	ЭлектронныйДокументооборотСФСС.ОбновитьИнформационнуюПанельБРО(ПараметрыОтображения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ЭлектронныйДокументооборотСФССКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ФлагБлокировкиДокумента = Объект.ДокументПринятВСФР;	
	ОтправленВСФР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОбъектОтправлялсяВКонтролирующиеОрганы(Объект.Ссылка);
	
	ДанныеПериода = ПерсонифицированныйУчетКлиентСервер.ДанныеОтчетногоПериода(Объект.ОтчетныйПериод, Объект.ОкончаниеОтчетногоПериода);
	ОтчетныйПериодПредставление = ДанныеПериода.Представление;
	
	ДанныеПериода = ПерсонифицированныйУчетКлиентСервер.ДанныеОтчетногоПериода(Объект.КорректируемыйПериод, Объект.ОкончаниеКорректируемогоПериода);
	КорректируемыйПериодПредставление = ДанныеПериода.Представление;
	
	МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтроки();
	
	УстановитьСвойстваЭлементовФормы();
	УстановитьДоступностьДанныхФормы();
	
	ПерсонифицированныйУчет.УстановитьСвязиПараметровВыбораСотрудников(Элементы.СотрудникиСотрудник);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.ЧленыЛетныхЭкипажей.Очистить();
	Объект.Шахтеры.Очистить();
	Объект.СведенияОЗаработке.Очистить();
	
	Если Не УчетСтраховыхВзносов.ОрганизацияОтчитываетсяПоВзносамСамостоятельно(Объект.Организация, Объект.ОтчетныйПериод) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Должности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.ЯвляетсяДолжностьюЛетногоЭкипажа";
	
	Если Объект.ИспользуетсяТрудШахтеров Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Должности.ЯвляетсяДолжностьюЛетногоЭкипажа", "Должности.ЯвляетсяШахтерскойДолжностью");
	КонецЕсли;
	
	СписокДолжностей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Объект.Организация, НачалоПериодаДокумента(), ОкончаниеПериодаДокумента(), , СписокДолжностей);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПерсональныеДанные.Сотрудник КАК Сотрудник,
	               |	ПерсональныеДанные.Фамилия КАК Фамилия,
	               |	ПерсональныеДанные.Имя КАК Имя,
	               |	ПерсональныеДанные.Отчество КАК Отчество,
	               |	ПерсональныеДанные.СтраховойНомерПФР КАК СтраховойНомерПФР
	               |ИЗ
	               |	ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанные
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Фамилия,
	               |	Имя,
	               |	Отчество,
	               |	Сотрудник";
								
	Выборка = Запрос.Выполнить().Выбрать();							
	
	ИдентификаторыСотрудников = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника + 1;
		НоваяСтрока.ИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника;
		ИдентификаторыСотрудников.Вставить(НоваяСтрока.Сотрудник, НоваяСтрока.ИдентификаторСтрокиСотрудника);
	КонецЦикла;
	
	ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников);
	ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников);
	
	ТаблицаСтажа = Объект.ЧленыЛетныхЭкипажей;
	Если Объект.ИспользуетсяТрудШахтеров Тогда
		ТаблицаСтажа = Объект.Шахтеры;
	КонецЕсли;
	
	ИспользуемыеИдентификаторы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтажа, "ИдентификаторСтрокиСотрудника", Истина);
	ИдентификаторыКУдалению = Новый Массив;
	Для Каждого КлючИЗначение Из ИдентификаторыСотрудников Цикл 
		Если ИспользуемыеИдентификаторы.Найти(КлючИЗначение.Значение) = Неопределено Тогда 
			ИдентификаторыКУдалению.Добавить(КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИдентификаторКУдалению Из ИдентификаторыКУдалению Цикл 
		ОчиститьСведенияОСотруднике(ИдентификаторКУдалению);
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиСотрудника", ИдентификаторКУдалению);
		СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
			Объект.Сотрудники.Удалить(СтрокаСотрудника);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеОтправкиВСФР()
	
	ОтправленВСФР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОбъектОтправлялсяВКонтролирующиеОрганы(Объект.Ссылка);
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	
	Если Объект.ДокументПринятВСФР Тогда  
		ТолькоПросмотр = Истина;	
	КонецЕсли;
	
	УстановитьЗаголовокГруппыПрежнегоСтрахователя(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтчетныйПериодПриИзмененииНаСервере()
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.Сотрудники.Очистить();
	Объект.ЧленыЛетныхЭкипажей.Очистить();
	Объект.Шахтеры.Очистить();
	Объект.СведенияОЗаработке.Очистить();
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	Объект.ИспользуетсяТрудЧленовЛетныхЭкипажей = ПолучитьФункциональнуюОпцию("ИспользуетсяТрудЧленовЛетныхЭкипажей", ПараметрыФО);
	Объект.ИспользуетсяТрудШахтеров = ПолучитьФункциональнуюОпцию("ИспользуетсяТрудШахтеров", ПараметрыФО);
	
	ПерсонифицированныйУчет.ЗаполнитьДанныеРуководителя(Объект);
	УстановитьСвойстваЭлементовФормы();
	
	ОбновитьИнформационнуюПанельБРО();
	
	Если Не Объект.ИспользуетсяТрудЧленовЛетныхЭкипажей И Не Объект.ИспользуетсяТрудШахтеров Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для организации должно быть установлено испольльзование труда членов летных экипажей или шахтеров';
													|en = 'The use of labor of flight crew members or miners must be specified for the company'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипСведенийПриИзмененииНаСервере()
	
	Если Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая
		Или Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда
		Если Не ЗначениеЗаполнено(Объект.КорректируемыйПериод) Тогда 
			Объект.КорректируемыйПериод = НачалоГода(ТекущаяДатаСеанса());
			Объект.ОкончаниеКорректируемогоПериода = КонецГода(Объект.КорректируемыйПериод);
			ДанныеПериода = ПерсонифицированныйУчетКлиентСервер.ДанныеОтчетногоПериода(Объект.КорректируемыйПериод, Объект.ОкончаниеКорректируемогоПериода);
			КорректируемыйПериодПредставление = ДанныеПериода.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда
		Объект.ЧленыЛетныхЭкипажей.Очистить();
		Объект.Шахтеры.Очистить();
		Объект.СведенияОЗаработке.Очистить();
		Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл 
			СтрокаСотрудника.Заработок = 0;
		КонецЦикла;
	КонецЕсли;	
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере()
	
	ДанныеСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСотрудника.Сотрудник);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НачалоПериода = НачалоПериодаДокумента();
	ОкончаниеПериода = ОкончаниеПериодаДокумента();
	Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.СоздатьВТПерсональныеДанныеСотрудников(
		МенеджерВременныхТаблиц, Объект.Организация, НачалоПериода, ОкончаниеПериода, СписокСотрудников);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК Сотрудник,
	               |	ФизическиеЛица.Фамилия,
	               |	ФизическиеЛица.Имя,
	               |	ФизическиеЛица.Отчество
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Ссылка В(&СписокСотрудников)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.Сотрудник,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Фамилия, ФизическиеЛица.Фамилия) КАК Фамилия,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Имя, ФизическиеЛица.Имя) КАК Имя,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Отчество, ФизическиеЛица.Отчество) КАК Отчество,
	               |	ПерсональныеДанныеСотрудников.*
	               |ИЗ
	               |	ВТФизическиеЛица КАК ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанныеСотрудников
	               |		ПО ФизическиеЛица.Сотрудник = ПерсональныеДанныеСотрудников.Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда  
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, Выборка);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ФлагБлокировкиДокументаПриИзмененииНаСервере()
	
	Модифицированность = Истина;
	Объект.ДокументПринятВСФР = ФлагБлокировкиДокумента;
	Если Не ФлагБлокировкиДокумента Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	
	УдаляемыеСтроки = Элементы.Сотрудники.ВыделенныеСтроки;
	Для Каждого Идентификатор Из УдаляемыеСтроки Цикл
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(Идентификатор);
		ОчиститьСведенияОСотруднике(СтрокаСотрудника.ИдентификаторСтрокиСотрудника);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПриОкончанииРедактированияНаСервере(Сотрудник, ИдентификаторСтрокиСотрудника)
	
	ИдентификаторыСотрудников = Новый Соответствие;
	ИдентификаторыСотрудников.Вставить(Сотрудник, ИдентификаторСтрокиСотрудника);
	
	ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников);
	ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияПервоначальногоЗаполнения()
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияЗаполненияПоОрганизации();
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапрашиваемыеЗначенияЗаполненияПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции 	

&НаКлиенте
Процедура ОткрытьФормуРедактированияКарточкиДокумента()
	
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда	
		
		ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", АдресДанныхТекущегоДокументаВХранилище);
		ПараметрыОткрытияФормы.Вставить("РедактируемыйДокументСсылка", Объект.Ссылка);
		ПараметрыОткрытияФормы.Вставить("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		ПараметрыОткрытияФормы.Вставить("Организация", Объект.Организация);
		ПараметрыОткрытияФормы.Вставить("Период", Объект.ОтчетныйПериод);
		ПараметрыОткрытияФормы.Вставить("ОкончаниеПериода", КонецДня(Объект.ОкончаниеОтчетногоПериода));
		ПараметрыОткрытияФормы.Вставить("ИспользуетсяТрудЧленовЛетныхЭкипажей", Объект.ИспользуетсяТрудЧленовЛетныхЭкипажей);
		ПараметрыОткрытияФормы.Вставить("ИспользуетсяТрудШахтеров", Объект.ИспользуетсяТрудШахтеров);
		ПараметрыОткрытияФормы.Вставить("ТипСведений", Объект.ТипСведений);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		Если Объект.ТипСведений = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ_ДСО.Корректирующая") 
			Или Объект.ТипСведений = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ_ДСО.Отменяющая") Тогда 
			ПараметрыОткрытияФормы.Вставить("Период", Объект.КорректируемыйПериод);
			ПараметрыОткрытияФормы.Вставить("ОкончаниеПериода", КонецДня(Объект.ОкончаниеКорректируемогоПериода));
		КонецЕсли;
		
		ОткрытьФорму("Документ.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.Форма.ФормаРедактированияДанныхСотрудника", ПараметрыОткрытияФормы, ЭтаФорма);	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище()
	
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", ДанныеТекущейСтрокиПоСотруднику.СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", ДанныеТекущейСтрокиПоСотруднику.Фамилия);
	ДанныеСотрудника.Вставить("Имя", ДанныеТекущейСтрокиПоСотруднику.Имя);
	ДанныеСотрудника.Вставить("Отчество", ДанныеТекущейСтрокиПоСотруднику.Отчество);
	ДанныеСотрудника.Вставить("ФиксСтаж", ДанныеТекущейСтрокиПоСотруднику.ФиксСтаж);
	ДанныеСотрудника.Вставить("ФиксЗаработок", ДанныеТекущейСтрокиПоСотруднику.ФиксЗаработок);
	ДанныеСотрудника.Вставить("ЧленыЛетныхЭкипажей", Новый Массив);
    ДанныеСотрудника.Вставить("Шахтеры", Новый Массив);
	ДанныеСотрудника.Вставить("СведенияОЗаработке", Новый Массив);
	ДанныеСотрудника.Вставить("ИдентификаторСтрокиСотрудника", ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника);
	ДанныеСотрудника.Вставить("ИспользуетсяТрудЧленовЛетныхЭкипажей", Объект.ИспользуетсяТрудЧленовЛетныхЭкипажей);
	ДанныеСотрудника.Вставить("ИспользуетсяТрудШахтеров", Объект.ИспользуетсяТрудШахтеров);
	
	ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
											ЭтаФорма, 
											ДанныеТекущейСтрокиПоСотруднику,
											"Объект.Сотрудники");
											
	ДанныеСотрудника.Вставить("ЗначенияРеквизитовХраненияОшибок", ЗначенияРеквизитовХраненияОшибок);	
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиСотрудника", ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника);
	
	СтрокиСведенияОЗаработке = Объект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаЗаработок Из СтрокиСведенияОЗаработке Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработке();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаЗаработок);
		ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
												ЭтаФорма, 
												СтрокаЗаработок,
												"Объект.СведенияОЗаработке");	
		ДанныеСотрудника.СведенияОЗаработке.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
	
	СтрокиЧленыЛетныхЭкипажей = Объект.ЧленыЛетныхЭкипажей.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаСтажа Из СтрокиЧленыЛетныхЭкипажей Цикл
		СтруктураПолейЧленыЛетныхЭкипажей = СтруктураПолейЧленыЛетныхЭкипажей();
		ЗаполнитьЗначенияСвойств(СтруктураПолейЧленыЛетныхЭкипажей, СтрокаСтажа);
		ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
												ЭтаФорма, 
												СтрокаСтажа,
												"Объект.ЧленыЛетныхЭкипажей");	
		ДанныеСотрудника.ЧленыЛетныхЭкипажей.Добавить(СтруктураПолейЧленыЛетныхЭкипажей);
	КонецЦикла;	
	
	СтрокиШахтеры = Объект.Шахтеры.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаСтажа Из СтрокиШахтеры Цикл
		СтруктураПолейШахтеры = СтруктураПолейШахтеры();
		ЗаполнитьЗначенияСвойств(СтруктураПолейШахтеры, СтрокаСтажа);
		ЗначенияРеквизитовХраненияОшибок = ПерсонифицированныйУчетКлиентСервер.ЗначенияРеквизитовХраненияОшибокВСтруктуру(
												ЭтаФорма, 
												СтрокаСтажа,
												"Объект.Шахтеры");	
		ДанныеСотрудника.Шахтеры.Добавить(СтруктураПолейШахтеры);
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(АдресДанныхТекущегоДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(ДанныеСотрудника, АдресДанныхТекущегоДокументаВХранилище);	
	Иначе	
		АдресДанныхТекущегоДокументаВХранилище = ПоместитьВоВременноеХранилище(ДанныеСотрудника, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СтруктураПолейЧленыЛетныхЭкипажей()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидСтажа");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("Часы");
	СтруктураПолей.Вставить("Минуты");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейШахтеры()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидСтажа");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");

	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция СтруктураПолейСведенияОЗаработке()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КодМесяца");
	СтруктураПолей.Вставить("Заработок");
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", "ТолькоПросмотр", ОтправленВСФР);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтчетныйПериодПредставление", "ТолькоПросмотр", ОтправленВСФР);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорректируемыйПериодПредставление", "ТолькоПросмотр", ОтправленВСФР);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорректируемыйПериодПредставление", "Заголовок", 
		?(Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая, НСтр("ru = 'Отменяемый период';
																				|en = 'Period to cancel'"), НСтр("ru = 'Корректируемый период';
																													|en = 'Adjusted period'")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорректируемыйПериодПредставление", "Видимость", 
		?(Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Корректирующая Или Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая, Истина, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДанныхСотрудника(АдресВоВременномХранилище)
	
	ДанныеШапкиДокумента = Объект;
	
	ДанныеТекущегоДокумента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеТекущегоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Неопределено;
	
	НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСотрудника", ДанныеТекущегоДокумента.ИдентификаторСтрокиСотрудника));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеТекущейСтрокиПоСотруднику = НайденныеСтроки[0];
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'В текущем документе не найдены данные по редактируемому сотруднику.';
								|en = 'Data on the edited employee is not found in the current document.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента);
	
	Заработок = 0;
	
	ОчиститьСведенияОСотруднике(ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника);
	
	Для Каждого СтрокаЗаработок Из ДанныеТекущегоДокумента.СведенияОЗаработке Цикл
		СтрокаЗаработокОбъекта = Объект.СведенияОЗаработке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаработокОбъекта, СтрокаЗаработок);
		СтрокаЗаработокОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
		Заработок = Заработок + СтрокаЗаработок.Заработок;
	КонецЦикла;
		
	Для Каждого СтрокаСтажа Из ДанныеТекущегоДокумента.ЧленыЛетныхЭкипажей Цикл
		СтрокаСтажаОбъекта = Объект.ЧленыЛетныхЭкипажей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтажаОбъекта, СтрокаСтажа);
		СтрокаСтажаОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
	КонецЦикла;
		
	Для Каждого СтрокаСтажа Из ДанныеТекущегоДокумента.Шахтеры Цикл
		СтрокаСтажаОбъекта = Объект.Шахтеры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтажаОбъекта, СтрокаСтажа);
		СтрокаСтажаОбъекта.ИдентификаторСтрокиСотрудника = ДанныеТекущейСтрокиПоСотруднику.ИдентификаторСтрокиСотрудника;
	КонецЦикла;
	
	ДанныеТекущейСтрокиПоСотруднику.Заработок = Заработок;
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьСведенияОСотруднике(ИдентификаторСтрокиСотрудника)
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиСотрудника", ИдентификаторСтрокиСотрудника);
	
	СтрокиЗаработка = Объект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаЗаработокСотрудника Из СтрокиЗаработка Цикл
		Объект.СведенияОЗаработке.Удалить(СтрокаЗаработокСотрудника);
	КонецЦикла;
	
	СтрокиСтажа = Объект.ЧленыЛетныхЭкипажей.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаСтажСотрудника Из СтрокиСтажа Цикл
		Объект.ЧленыЛетныхЭкипажей.Удалить(СтрокаСтажСотрудника);
	КонецЦикла;
	
	СтрокиСтажа = Объект.Шахтеры.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаСтажСотрудника Из СтрокиСтажа Цикл
		Объект.Шахтеры.Удалить(СтрокаСтажСотрудника);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполненияДокумента(Отказ = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';
							|en = 'Cannot run the command for unposted documents. Do you want to post the document and continue?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверкаЗаполненияДокумента(Отказ);	
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?';
							|en = 'Errors were detected in the set.
							|Continue (not recommended)?'");
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.';
																											|en = 'Warning.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.
		|Выполнить проверку сторонними программами?';
		|en = 'Errors occurred while checking with the integrated check.
		|Check with third-party applications?'")
	Иначе	
		ТекстВопроса = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.
		|Выполнить проверку сторонними программами?';
		|en = 'Errors are not detected while checking with the integrated check.
		|Check with third-party applications?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСтороннимиПрограммамиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПроверитьСтороннимиПрограммами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтороннимиПрограммами()
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытия.Вставить("СсылкиНаПроверяемыеОбъекты", ПроверяемыеОбъекты);
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаФайловОтчетностиПерсУчетаПФР", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(Ссылка, УникальныйИдентификатор)
	
	Возврат ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(СписокСотрудников)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НачалоПериода = НачалоПериодаДокумента();
	ОкончаниеПериода = ОкончаниеПериодаДокумента();
	Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.СоздатьВТПерсональныеДанныеСотрудников(
		МенеджерВременныхТаблиц, Объект.Организация, НачалоПериода, ОкончаниеПериода, СписокСотрудников);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК Сотрудник,
	               |	ФизическиеЛица.Фамилия,
	               |	ФизическиеЛица.Имя,
	               |	ФизическиеЛица.Отчество
	               |ПОМЕСТИТЬ ВТФизическиеЛица
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Ссылка В(&СписокСотрудников)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.Сотрудник,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Фамилия, ФизическиеЛица.Фамилия) КАК Фамилия,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Имя, ФизическиеЛица.Имя) КАК Имя,
	               |	ЕСТЬNULL(ПерсональныеДанныеСотрудников.Отчество, ФизическиеЛица.Отчество) КАК Отчество,
	               |	ПерсональныеДанныеСотрудников.*
	               |ИЗ
	               |	ВТФизическиеЛица КАК ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПерсональныеДанныеСотрудников КАК ПерсональныеДанныеСотрудников
	               |		ПО ФизическиеЛица.Сотрудник = ПерсональныеДанныеСотрудников.Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИдентификаторыСотрудников = Новый Соответствие;
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = Объект.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		МаксимальныйИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника + 1;
		НоваяСтрока.ИдентификаторСтрокиСотрудника = МаксимальныйИдентификаторСтрокиСотрудника;
		ИдентификаторыСотрудников.Вставить(НоваяСтрока.Сотрудник, НоваяСтрока.ИдентификаторСтрокиСотрудника);
	КонецЦикла;
	
	ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников);
	ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников)
	
	Если Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтажа = Объект.ЧленыЛетныхЭкипажей;
	Если Объект.ИспользуетсяТрудШахтеров Тогда
		ТаблицаСтажа = Объект.Шахтеры;
	КонецЕсли;
	
	РеквизитыДокумента = РеквизитыДляЗаполнения();
	Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ЗаполнитьДанныеОСтажеСотрудников(ИдентификаторыСотрудников, ТаблицаСтажа, РеквизитыДокумента)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников)
	
	Если Объект.ТипСведений = Перечисления.ТипыСведенийСЗВ_ДСО.Отменяющая Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = РеквизитыДляЗаполнения();
	Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ЗаполнитьДанныеОЗаработкеСотрудников(ИдентификаторыСотрудников, Объект.СведенияОЗаработке, Объект.Сотрудники, РеквизитыДокумента);
	
КонецПроцедуры

&НаСервере
Функция РеквизитыДляЗаполнения()
	
	РеквизитыДокумента = Новый Структура();
	РеквизитыДокумента.Вставить("Организация", Объект.Организация);
	РеквизитыДокумента.Вставить("ОтчетныйПериод", НачалоПериодаДокумента());
	РеквизитыДокумента.Вставить("ОкончаниеОтчетногоПериода", ОкончаниеПериодаДокумента());
	РеквизитыДокумента.Вставить("ИспользуетсяТрудШахтеров", Объект.ИспользуетсяТрудШахтеров);
	РеквизитыДокумента.Вставить("ИспользуетсяТрудЧленовЛетныхЭкипажей", Объект.ИспользуетсяТрудЧленовЛетныхЭкипажей);
	РеквизитыДокумента.Вставить("ДатаДокумента", Объект.Дата);
	РеквизитыДокумента.Вставить("Ссылка", Объект.Ссылка);
	
	Возврат РеквизитыДокумента;
	
КонецФункции

&НаСервере
Функция НачалоПериодаДокумента()
	
	Возврат Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.НачалоПериодаДокумента(Объект.ТипСведений, Объект.ОтчетныйПериод, Объект.КорректируемыйПериод);
	
КонецФункции

&НаСервере
Функция ОкончаниеПериодаДокумента()
	
	Возврат Документы.СведенияДляИсчисленияДоплатыКПенсииСЗВ_ДСО.ОкончаниеПериодаДокумента(Объект.ТипСведений, Объект.ОкончаниеОтчетногоПериода, Объект.ОкончаниеКорректируемогоПериода);
	
КонецФункции

&НаСервере
Функция МаксимальныйИдентификаторСтроки() Экспорт
	
	МаксимальныйИдентификатор = 0;
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Если МаксимальныйИдентификатор < СтрокаСотрудника.ИдентификаторСтрокиСотрудника Тогда
			МаксимальныйИдентификатор = СтрокаСотрудника.ИдентификаторСтрокиСотрудника;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МаксимальныйИдентификатор;
	
КонецФункции

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	
	ОписаниеЭлементовИндикацииОшибок = Новый Соответствие;	
	Возврат ОписаниеЭлементовИндикацииОшибок;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппыПрежнегоСтрахователя(УправляемаяФорма)
	
	Объект = УправляемаяФорма.Объект;
	Элементы = УправляемаяФорма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.ПрежнийСтраховательНаименованиеПолное) Тогда
		ПредставлениеСтрахователя = НСтр("ru = 'не задан';
										|en = 'not specified'");
	Иначе
		
		ПредставленияСтрахователя = Новый Массив;
		ПредставленияСтрахователя.Добавить(СокрЛП(Объект.ПрежнийСтраховательНаименованиеПолное));
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательРегистрационныйНомерПФР) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'рег. номер: %1';
					|en = 'reg. number: %1'"), СокрЛП(Объект.ПрежнийСтраховательРегистрационныйНомерПФР)));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательИНН) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'ИНН: %1';
					|en = 'TIN: %1'"), СокрЛП(Объект.ПрежнийСтраховательИНН)));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Объект.ПрежнийСтраховательКПП) Тогда
			ПредставленияСтрахователя.Добавить(СтрШаблон(
				НСтр("ru = 'КПП: %1';
					|en = 'KPP: %1'"), СокрЛП(Объект.ПрежнийСтраховательКПП)));
		КонецЕсли;
		ПредставлениеСтрахователя = СтрСоединить(ПредставленияСтрахователя, ", ");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПрежнийСтрахователь",
		"ЗаголовокСвернутогоОтображения",
		СтрШаблон(НСтр("ru = 'Сведения о работодателе, правопреемником которого является страхователь (%1)';
						|en = 'Information record on the employer whose successor is the insurant (%1)'"), ПредставлениеСтрахователя));
	
КонецПроцедуры

#КонецОбласти
