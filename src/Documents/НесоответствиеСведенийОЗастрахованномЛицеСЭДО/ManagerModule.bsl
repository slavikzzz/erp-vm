///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(ГоловнаяОрганизация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция ТипСообщения() Экспорт
	Возврат 88;
КонецФункции

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "");
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СЭДО

// Загружает информацию о несоответствии сведений о застрахованном лице в базу данных.
Процедура ЗагрузитьСообщение88(Страхователь, ИдентификаторСообщения, ТекстXML, Результат, Кэш) Экспорт
	// Пример:
	//<mismatchInfo>
	//	<snils>01234567890</snils>
	//	<protocol>
	//		<item>
	//			<mnemonic>INFO_KZ_0001</mnemonic>
	//			<message>По информации от ПФР застрахованный ... СНИЛС 01234567890 числится сотрудником страхователя 0123456789. Была создана карточка застрахованного.</message>
	//			<description>INFO</description>
	//		</item>
	//		<item>
	//			<mnemonic>WARN_KZ_0004</mnemonic>
	//			<message>По информации от ПФР застрахованный ... СНИЛС 01234567890 не числится сотрудником страхователя 0123456789</message>
	//			<description>WARN</description>
	//		</item>
	//	</protocol>
	//</mismatchInfo>
	
	// Поиск корневого узла.
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "mismatchInfo");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM.ЭлементДокумента;
	КонецЕсли;
	
	// Чтение реквизитов.
	РеквизитыКорня = СериализацияБЗК.УзлыЭлементаDOM(КореньDOM, "snils, protocol");
	СНИЛСФСС = СериализацияБЗК.СтрокаИзXML(РеквизитыКорня.snils);
	СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СНИЛСФСС);
	
	Протокол = Протокол(РеквизитыКорня.protocol);
	Количество = Протокол.Количество();
	Если Количество = 1 Тогда
		ЗаписьПротокола = Протокол[0];
		Тип         = ЗаписьПротокола.Тип;
		Текст       = ЗаписьПротокола.Текст;
		Критичность = ЗаписьПротокола.Критичность;
	ИначеЕсли Количество > 1 Тогда
		Типы        = Новый Массив;
		Критичности = Новый Массив;
		Тексты      = Новый Массив;
		Для Каждого ЗаписьПротокола Из Протокол Цикл
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Типы, ЗаписьПротокола.Тип);
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Критичности, ЗаписьПротокола.Критичность);
			Если ЗначениеЗаполнено(ЗаписьПротокола.Текст) Тогда
				Массив = СтрРазделить(ЗаписьПротокола.Текст, Символы.ПС + Символы.ВК, Ложь);
				Представление = СтрСоединить(Массив, Символы.ПС + "  ");
			Иначе
				Представление = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗаписьПротокола.Тип) Тогда
				Представление = ЗаписьПротокола.Тип + ": " + Представление;
			КонецЕсли;
			Если ЗначениеЗаполнено(Критичность) Тогда
				Представление = "[" + ПредставлениеКритичности(Критичность) + "] " + Представление;
			КонецЕсли;
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Тексты, Представление);
		КонецЦикла;
		Тип         = СтрСоединить(КоллекцииБЗК.СортироватьМассив(Типы), ", ");
		Текст       = СтрСоединить(КоллекцииБЗК.СортироватьМассив(Тексты), Символы.ПС);
		Критичность = СтрСоединить(КоллекцииБЗК.СортироватьМассив(Критичности), ", ");
	Иначе
		Тип         = "";
		Текст       = "";
		Критичность = "";
	КонецЕсли;
	
	ВходящаяДатаВремя = СЭДОФСС.ДатаСообщения(ИдентификаторСообщения, Кэш);;
	
	Объект = СоздатьДокументПоСообщению(Страхователь, ИдентификаторСообщения);
	Объект.ВходящаяДата = ВходящаяДатаВремя;
	Объект.СНИЛС        = СНИЛС;
	Объект.Тип          = Тип;
	Объект.Текст        = Текст;
	Объект.Критичность  = Критичность;
	Объект.ХранилищеXML = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
	
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ВходящаяДатаВремя;
	Иначе
		ДатаНачалоДня = НачалоДня(Объект.Дата);
		СЭДОФСС.ОбновитьДатуСообщения(Объект.Дата, ДатаНачалоДня, ВходящаяДатаВремя);
	КонецЕсли;
	
	ЗаполнитьФизлицоФИО(Объект);
	
	Объект.СотрудникНеЧислится = (СтрНайти(ВРег(Тип), "WARN_KZ_0004") > 0);
	
	СЭДОФСС.ЗаписатьДокумент(Объект, Истина, "БЗК", РежимЗаписиДокумента.Проведение);
	
	Результат.Обработано = Истина;
КонецПроцедуры

Функция ПредставлениеКритичности(Критичность) Экспорт
	Если СтрСравнить(Критичность, "INFO") = 0 Тогда
		Возврат Строка(УровеньЖурналаРегистрации.Информация);
	ИначеЕсли СтрСравнить(Критичность, "WARN") = 0 Тогда
		Возврат Строка(УровеньЖурналаРегистрации.Предупреждение);
	ИначеЕсли СтрСравнить(Критичность, "ERR") = 0 Тогда
		Возврат Строка(УровеньЖурналаРегистрации.Ошибка);
	Иначе
		Возврат Критичность;
	КонецЕсли;
КонецФункции

Функция Протокол(ПротоколDOM) Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Тип");
	Результат.Колонки.Добавить("Текст");
	Результат.Колонки.Добавить("Критичность");
	Для Каждого ЗаписьПротоколаDOM Из ПротоколDOM.ДочерниеУзлы Цикл
		УзлыDOM = СериализацияБЗК.УзлыЭлементаDOM(ЗаписьПротоколаDOM, "mnemonic, message, description");
		
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.Тип         = СериализацияБЗК.СтрокаИзXML(УзлыDOM.mnemonic);
		СтрокаТаблицы.Текст       = СериализацияБЗК.СтрокаИзXML(УзлыDOM.message);
		СтрокаТаблицы.Критичность = СериализацияБЗК.СтрокаИзXML(УзлыDOM.description);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СоздатьДокументПоСообщению(Страхователь, ИдентификаторСообщения)
	ТаблицаЗапроса = Метаданные.Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО;
	ВыбираемыеПоля = "Ссылка";
	НастройкиЗапроса = ЗапросыБЗК.НастройкиЗапросаКТаблице();
	НастройкиЗапроса.Количество = 1;
	ЗапросыБЗК.ДобавитьОтбор(НастройкиЗапроса.Отбор, "ИдентификаторСообщения", , ИдентификаторСообщения);
	ЗапросыБЗК.ДобавитьОтбор(НастройкиЗапроса.Отбор, "Страхователь",           , Страхователь);
	Запрос = ЗапросыБЗК.ЗапросКТаблице(ТаблицаЗапроса, ВыбираемыеПоля, НастройкиЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Объект = СоздатьДокумент();
		Объект.Страхователь = Страхователь;
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
		Объект.ИдентификаторСообщения = ИдентификаторСообщения;
		Возврат Объект;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьФизлицоФИО(ДокументОбъект) Экспорт
	РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(ДокументОбъект.СНИЛС, "", "", "");
	ДокументОбъект.ФизическоеЛицо = РезультатПоиска.ФизическоеЛицо;
	ДокументОбъект.ФИО            = РезультатПоиска.ФИО;
	
	ЗаполнитьФИОИзТекста(ДокументОбъект);
КонецПроцедуры

Процедура ЗаполнитьФИОИзТекста(ДокументОбъект)
	Если Не ЗначениеЗаполнено(ДокументОбъект.ФИО) И ЗначениеЗаполнено(ДокументОбъект.СНИЛС) Тогда
		СНИЛСФСС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(ДокументОбъект.СНИЛС);
		Массив = СтрРазделить(ДокументОбъект.Текст, " ");
		Индекс = Массив.Найти(СНИЛСФСС);
		Если Индекс <> Неопределено
			И Индекс > 4
			И СтрСравнить(Массив[Индекс-5], "застрахованный") = 0 Тогда
			ДокументОбъект.ФИО = СокрЛП(ТРег(Массив[Индекс-4] + " " + Массив[Индекс-3] + " " + Массив[Индекс-2]));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// В сообщениях 88 Фонд явно указывает СНИЛС
	// и сообщения 88 не связаны напрямую с сообщениями 86 (сведениями о застрахованных лицах),
	// поэтому в них требуется актуализировать ссылки физлиц.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Несоответствие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НесоответствиеСведенийОЗастрахованномЛицеСЭДО КАК Несоответствие
	|ГДЕ
	|	Несоответствие.СНИЛС = &НовыйСНИЛС
	|	И Несоответствие.ФизическоеЛицо <> &ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Несоответствие.Ссылка
	|ИЗ
	|	Документ.НесоответствиеСведенийОЗастрахованномЛицеСЭДО КАК Несоответствие
	|ГДЕ
	|	Несоответствие.ФизическоеЛицо = &ФизическоеЛицо
	|	И Несоответствие.СНИЛС <> &НовыйСНИЛС";
	Если ЗначениеЗаполнено(НовыйСНИЛС) Тогда
		Запрос.УстановитьПараметр("НовыйСНИЛС", НовыйСНИЛС);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Несоответствие.СНИЛС = &НовыйСНИЛС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Несоответствие.СНИЛС <> &НовыйСНИЛС", "ИСТИНА");
	КонецЕсли;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборки Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаВыборки.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = СтрокаВыборки.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.СНИЛС = НовыйСНИЛС И ЗначениеЗаполнено(НовыйСНИЛС) Тогда
			ДокументОбъект.ФизическоеЛицо = ФизическоеЛицо;
			ДокументОбъект.ФИО            = Строка(ФизическоеЛицо);
		Иначе
			ДокументОбъект.ФизическоеЛицо = Неопределено;
			ДокументОбъект.ФИО            = "";
		КонецЕсли;
		ЗаполнитьФИОИзТекста(ДокументОбъект);
		СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Истина, Ложь, РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли