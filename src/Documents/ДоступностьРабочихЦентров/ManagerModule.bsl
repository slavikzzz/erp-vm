#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ДоступностьРабочихЦентров");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ДоступностьРабочихЦентров") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	ТаблицыДляДвижений = Новый Структура;
	СформироватьТаблицыДляДвижений(ТаблицыДляДвижений, ДокументСсылка, Регистры);
	Возврат ТаблицыДляДвижений;
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Доступность рабочих центров".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений.
//  - Неопределено.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДоступностьРабочихЦентров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ДоступностьРабочихЦентров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ДоступностьРабочихЦентров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура СформироватьТаблицыДляДвижений(ТаблицыДляДвижений, ДокументСсылка, Регистры = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.ВидРабочегоЦентра.Подразделение КАК Подразделение,
	|	Реквизиты.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	Реквизиты.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаИнтервалы.РабочийЦентр) КАК КоличествоРабочихЦентров
	|ИЗ
	|	Документ.ДоступностьРабочихЦентров КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоступностьРабочихЦентров.Интервалы КАК ТаблицаИнтервалы
	|		ПО Реквизиты.Ссылка = ТаблицаИнтервалы.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.ВидРабочегоЦентра,
	|	Реквизиты.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Интервалы.ДатаГрафика КАК Дата,
	|	Интервалы.ВремяНачала КАК ВремяНачала,
	|	Интервалы.ВремяОкончания КАК ВремяОкончания,
	|	Интервалы.РабочийЦентр,
	|	Интервалы.РабочийЦентр.КоэффициентВремениРаботы КАК КоэффициентВремениРаботы,
	|	Интервалы.Количество
	|ИЗ
	|	Документ.ДоступностьРабочихЦентров.Интервалы КАК Интервалы
	|ГДЕ
	|	Интервалы.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	
	Интервал = Результат.Выбрать();
	
	// Формируем доступность видов РЦ по интервалам планирования
	ТаблицаДоступностьВидовРабочихЦентров = Новый ТаблицаЗначений;
	ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("Период",            Новый ОписаниеТипов("Дата"));
	ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("Подразделение",     Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("ДатаИнтервала",     Новый ОписаниеТипов("Дата"));
	ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("ДоступностьПоРЦ",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8,1)));
	
	ТаблицаДоступностьРабочихЦентров = Новый ТаблицаЗначений;
	ТаблицаДоступностьРабочихЦентров.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	ТаблицаДоступностьРабочихЦентров.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	ТаблицаДоступностьРабочихЦентров.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
	
	ТаблицаСостоянияРабочихЦентров = Новый ТаблицаЗначений;
	ТаблицаСостоянияРабочихЦентров.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаСостоянияРабочихЦентров.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаСостоянияРабочихЦентров.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаСостоянияРабочихЦентров.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	ТаблицаСостоянияРабочихЦентров.Колонки.Добавить("ВремяДоступен",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	Пока Интервал.Следующий() Цикл
		
		Если Реквизиты.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			
			// При интервале Час периоды расписания могут включать несколько интервалов
			// Нужно определить какие интервалы входят в период расписания и сколько в них секунд.
			
			ВремяИнтервала = НачалоЧаса(Интервал.ВремяНачала);
			Пока ВремяИнтервала < Интервал.ВремяОкончания - 1 Цикл
				
				ВремяНачала = Макс(Интервал.ВремяНачала, ВремяИнтервала);
				ВремяОкончания = Мин(КонецЧаса(ВремяИнтервала) + 1, Интервал.ВремяОкончания);
				
				ДатаИнтервала = НачалоЧаса(Интервал.Дата + Час(ВремяИнтервала) * 3600 + Минута(ВремяИнтервала) * 60 + Секунда(ВремяИнтервала));
				
				Если Не ЗначениеЗаполнено(ВремяОкончания) 
					ИЛИ КонецМинуты(ВремяОкончания) = '00010101235959' Тогда
					СекундИнтервала = КонецДня(ВремяОкончания) - ВремяНачала + 1;
				Иначе
					СекундИнтервала = ВремяОкончания - ВремяНачала;
				КонецЕсли;
				
				СтрокаДоступность = ТаблицаДоступностьВидовРабочихЦентров.Добавить();
				СтрокаДоступность.Период            = ДатаИнтервала;
				СтрокаДоступность.ВидРабочегоЦентра = Реквизиты.ВидРабочегоЦентра;
				СтрокаДоступность.Подразделение     = Реквизиты.Подразделение;
				СтрокаДоступность.ДатаИнтервала     = ДатаИнтервала;
				СтрокаДоступность.ДоступностьПоРЦ   = СекундИнтервала / Интервал.КоэффициентВремениРаботы;
				ВремяИнтервала = ВремяИнтервала + 3600;
				
			КонецЦикла;
			
		Иначе
			
			// Для остальных интервалов планирования периоды расписания всегда входят в интервал планирования.
			
			Если Реквизиты.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
				ДатаИнтервала = НачалоДня(Интервал.Дата);
			ИначеЕсли Реквизиты.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
				ДатаИнтервала = НачалоНедели(Интервал.Дата);
			Иначе
				ДатаИнтервала = НачалоМесяца(Интервал.Дата);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Интервал.ВремяОкончания) 
				ИЛИ КонецМинуты(Интервал.ВремяОкончания) = '00010101235959' Тогда
				СекундИнтервала = КонецДня(Интервал.ВремяОкончания) - Интервал.ВремяНачала + 1;
			Иначе
				СекундИнтервала = Интервал.ВремяОкончания - Интервал.ВремяНачала;
			КонецЕсли;
			
			СтрокаДоступность = ТаблицаДоступностьВидовРабочихЦентров.Добавить();
			СтрокаДоступность.Период            = ДатаИнтервала;
			СтрокаДоступность.ВидРабочегоЦентра = Реквизиты.ВидРабочегоЦентра;
			СтрокаДоступность.Подразделение     = Реквизиты.Подразделение;
			СтрокаДоступность.ДатаИнтервала     = ДатаИнтервала;
			СтрокаДоступность.ДоступностьПоРЦ   = СекундИнтервала / Интервал.КоэффициентВремениРаботы;
			
		КонецЕсли; 
		
		ВремяНачала = Час(Интервал.ВремяНачала)*3600 + Минута(Интервал.ВремяНачала)*60 + Секунда(Интервал.ВремяНачала);
		НачалоИнтервала = Интервал.Дата + ВремяНачала;
		ОкончаниеИнтервала = НачалоИнтервала + Интервал.Количество;
		
		СтрокаДоступностьРЦ = ТаблицаДоступностьРабочихЦентров.Добавить();
		СтрокаДоступностьРЦ.РабочийЦентр = Интервал.РабочийЦентр;
		СтрокаДоступностьРЦ.Начало = НачалоИнтервала;
		СтрокаДоступностьРЦ.Окончание = ОкончаниеИнтервала;
		
		СтрокаСостоянияРЦ = ТаблицаСостоянияРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСостоянияРЦ, Реквизиты);
		СтрокаСостоянияРЦ.Период = НачалоИнтервала;
		СтрокаСостоянияРЦ.РабочийЦентр = Интервал.РабочийЦентр;
		СтрокаСостоянияРЦ.ВремяДоступен = Интервал.Количество;
		
	КонецЦикла;
	
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("ДоступностьВидовРабочихЦентров", Регистры) Тогда
		
		ТаблицаДоступностьВидовРабочихЦентров.Свернуть("ДатаИнтервала, ВидРабочегоЦентра, Подразделение, Период", "ДоступностьПоРЦ");
		
		ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("МаксимальнаяДоступность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8,1)));
		ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("ЭтоДвижениеВводаДоступности", Новый ОписаниеТипов("Булево"));
		ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("ЭтоДвижениеЗаказаНаПроизводство", Новый ОписаниеТипов("Булево"));
		ТаблицаДоступностьВидовРабочихЦентров.Колонки.Добавить("ЭтоДвижениеМаршрутногоЛиста", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаДоступность Из ТаблицаДоступностьВидовРабочихЦентров Цикл
			
			СтрокаДоступность.МаксимальнаяДоступность = СтрокаДоступность.ДоступностьПоРЦ / Реквизиты.КоличествоРабочихЦентров;
			
			СтрокаДоступность.ЭтоДвижениеВводаДоступности     = Истина;
			СтрокаДоступность.ЭтоДвижениеЗаказаНаПроизводство = Ложь;
			СтрокаДоступность.ЭтоДвижениеМаршрутногоЛиста     = Ложь;
			
		КонецЦикла;
		
		ТаблицыДляДвижений.Вставить("Таблица" + "ДоступностьВидовРабочихЦентров", ТаблицаДоступностьВидовРабочихЦентров);
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("ДоступностьРабочихЦентров", Регистры) Тогда
		ТаблицыДляДвижений.Вставить("Таблица" + "ДоступностьРабочихЦентров", ТаблицаДоступностьРабочихЦентров);
	КонецЕсли;
	
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("СостоянияРабочихЦентров", Регистры) Тогда
		ТаблицыДляДвижений.Вставить("Таблица" + "СостоянияРабочихЦентров", ТаблицаСостоянияРабочихЦентров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
