#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка." + Метаданные().Имя) Тогда
		ИсправлениеДокументов.ЗаполнитьИсправление(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	// Выбор статей и аналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец Выбор статей и аналитик
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если НЕ ДетализацияДоФизическихЛиц Тогда
		НепроверяемыеРеквизиты.Добавить("Начисления.ФизическоеЛицо");
		НепроверяемыеРеквизиты.Добавить("НалогиВзносыОрганизации.ФизическоеЛицо");
		НепроверяемыеРеквизиты.Добавить("НалогиВзносыСотрудников.ФизическоеЛицо");
	КонецЕсли;
	
	// Проверка настроек отражения
	ПроверитьЗаполнениеНастроекОтражения(НепроверяемыеРеквизиты, Отказ);
	
	ПроверитьНаличиеБазыРаспределения(Отказ);
	
	ИсправлениеДокументов.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	// Проверка настроек отражения на прочие расходы/доходы/пассивы выполняется универсальным механизмом
	
	// Выбор статей и аналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	// Конец Выбор статей и аналитик
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИсправлениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	СтрокаТЧ = "Начисления,НалогиВзносыОрганизации,НалогиВзносыСотрудников,Удержания";
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, СтрокаТЧ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЗаполнитьТабличныеЧастиПоРеквизитамДокумента();
	
	СтрокаТЧ = "Начисления,НалогиВзносыОрганизации,НалогиВзносыСотрудников,Удержания";
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, СтрокаТЧ);
	
	// Выбор статей и аналитик
	ПараметрыВыбораСтатейИАналитик = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	// Конец Выбор статей и аналитик
	
	//Настройка счетов учета
	НастройкаСчетовУчетаСервер.ПередЗаписью(ЭтотОбъект,
		Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыНастройкиСчетовУчета());
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Дата          = ТекущаяДатаСеанса();
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	КонецЕсли;
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(ПериодРасчетов) Тогда
		ПериодРасчетов = НачалоМесяца(Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиПоРеквизитамДокумента()
	
	ВидРасчетовУказанВШапке    = ЗначениеЗаполнено(ВидРасчетов);
	ПодразделениеУказаноВШапке = ЗначениеЗаполнено(Подразделение);
	
	Для Каждого СтрокаТаблицы Из Начисления Цикл
		Если ВидРасчетовУказанВШапке И НЕ СтрокаТаблицы.ВидРасчетов = ВидРасчетов Тогда
			СтрокаТаблицы.ВидРасчетов = ВидРасчетов;
		КонецЕсли;
		Если ПодразделениеУказаноВШапке И НЕ СтрокаТаблицы.Подразделение = Подразделение Тогда
			СтрокаТаблицы.Подразделение = Подразделение;
		КонецЕсли;
		Если НЕ ДетализацияДоФизическихЛиц И ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) Тогда
			СтрокаТаблицы.ФизическоеЛицо = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из НалогиВзносыОрганизации Цикл
		Если ПодразделениеУказаноВШапке И НЕ СтрокаТаблицы.Подразделение = Подразделение Тогда
			СтрокаТаблицы.Подразделение = Подразделение;
		КонецЕсли;
		Если НЕ ДетализацияДоФизическихЛиц И ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) Тогда
			СтрокаТаблицы.ФизическоеЛицо = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из НалогиВзносыСотрудников Цикл
		Если ВидРасчетовУказанВШапке И НЕ СтрокаТаблицы.ВидРасчетов = ВидРасчетов Тогда
			СтрокаТаблицы.ВидРасчетов = ВидРасчетов;
		КонецЕсли;
		Если ПодразделениеУказаноВШапке И НЕ СтрокаТаблицы.Подразделение = Подразделение Тогда
			СтрокаТаблицы.Подразделение = Подразделение;
		КонецЕсли;
		Если НЕ ДетализацияДоФизическихЛиц И ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) Тогда
			СтрокаТаблицы.ФизическоеЛицо = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Удержания Цикл
		Если ВидРасчетовУказанВШапке И НЕ СтрокаТаблицы.ВидРасчетов = ВидРасчетов Тогда
			СтрокаТаблицы.ВидРасчетов = ВидРасчетов;
		КонецЕсли;
		Если ПодразделениеУказаноВШапке И НЕ СтрокаТаблицы.Подразделение = Подразделение Тогда
			СтрокаТаблицы.Подразделение = Подразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНастроекОтражения(НепроверяемыеРеквизиты, Отказ)
	
	ВариантыОтраженияНачислений = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ВариантыОтраженияНачислений();
	
	// Начисления
	Для Каждого СтрокаТаблицы Из Начисления Цикл
		
		ПараметрыВариантаОтражения = ВариантыОтраженияНачислений[СтрокаТаблицы.ВариантОтражения];
		Если ПараметрыВариантаОтражения = Неопределено ИЛИ НЕ ПараметрыВариантаОтражения.ПроверятьЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПроверитьКорректностьНастройкиОтражения(ПараметрыВариантаОтражения.СвойстваРеквизитов, СтрокаТаблицы) Тогда
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Начисления", СтрокаТаблицы.НомерСтроки, "НастройкаОтраженияПредставление");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Настройки отражения заполнены некорректно (строка %1 таблицы ""Начисления"")';
						|en = 'Record settings are not filled in correctly (line %1 of the table ""Accruals"")'"),
					СтрокаТаблицы.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКДанным, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Налоги, взносы (с организации)
	Для Каждого СтрокаТаблицы Из НалогиВзносыОрганизации Цикл
		
		ПараметрыВариантаОтражения = ВариантыОтраженияНачислений[СтрокаТаблицы.ВариантОтражения];
		Если ПараметрыВариантаОтражения = Неопределено ИЛИ НЕ ПараметрыВариантаОтражения.ПроверятьЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПроверитьКорректностьНастройкиОтражения(ПараметрыВариантаОтражения.СвойстваРеквизитов, СтрокаТаблицы) Тогда
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"НалогиВзносыОрганизации", СтрокаТаблицы.НомерСтроки, "НастройкаОтраженияПредставление");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Настройки отражения заполнены некорректно (строка %1 таблицы ""Налоги, взносы (с организации)"")';
						|en = 'Record settings are not filled in correctly (line %1 of the table ""Payroll taxes"")'"),
					СтрокаТаблицы.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКДанным, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВариантОтражения Из ВариантыОтраженияНачислений Цикл
		ПараметрыВариантаОтражения = ВариантОтражения.Значение;
		Если НЕ ПараметрыВариантаОтражения.ПроверятьЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Реквизит Из ПараметрыВариантаОтражения.СвойстваРеквизитов Цикл
			НепроверяемыеРеквизиты.Добавить("Начисления." + Реквизит.Ключ);
			НепроверяемыеРеквизиты.Добавить("НалогиВзносыОрганизации." + Реквизит.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	// Удержания
	ВариантыОтраженияУдержаний = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ВариантыОтраженияУдержаний();
	
	Для Каждого СтрокаТаблицы Из Удержания Цикл
		
		ПараметрыВариантаОтражения = ВариантыОтраженияУдержаний[СтрокаТаблицы.ВариантОтражения];
		Если ПараметрыВариантаОтражения = Неопределено ИЛИ НЕ ПараметрыВариантаОтражения.ПроверятьЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПроверитьКорректностьНастройкиОтражения(ПараметрыВариантаОтражения.СвойстваРеквизитов, СтрокаТаблицы) Тогда
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Удержания", СтрокаТаблицы.НомерСтроки, "НастройкаОтраженияПредставление");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Настройки отражения заполнены некорректно (строка %1 таблицы ""Удержания"")';
						|en = 'Record settings are not filled in correctly (line %1 of the table ""Deductions"")'"),
					СтрокаТаблицы.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКДанным, , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВариантОтражения Из ВариантыОтраженияУдержаний Цикл
		ПараметрыВариантаОтражения = ВариантОтражения.Значение;
		Если НЕ ПараметрыВариантаОтражения.ПроверятьЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Реквизит Из ПараметрыВариантаОтражения.СвойстваРеквизитов Цикл
			НепроверяемыеРеквизиты.Добавить("Удержания." + Реквизит.Ключ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьКорректностьНастройкиОтражения(Реквизиты, СтрокаТаблицы)
	
	Результат = Истина;
	
	Для Каждого ЭлементСписка Из Реквизиты Цикл
		
		Имя = ЭлементСписка.Ключ;
		Реквизит = ЭлементСписка.Значение;
		
		Если НЕ Реквизит.Используется ИЛИ НЕ Реквизит.РеквизитОбязательный Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[Имя]) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНаличиеБазыРаспределения(Отказ)
	
	ИсточникиДанных = Новый Структура;
	
	Колонки = "НомерСтроки, Подразделение, ФизическоеЛицо, ТипБазыРаспределения";
	
	Отбор = Новый Структура("ВариантОтражения",
		Перечисления.ВариантыОтраженияНачисленийУдержаний.РаспределитьНаПроизводство);
	
	ИсточникиДанных.Вставить("Начисления",
		Новый Структура("Таблица, ПутьКДанным, Представление",
			Начисления.Выгрузить(Отбор, Колонки),
			"Начисления[%1].НастройкаОтраженияПредставление",
			НСтр("ru = 'Начисления';
				|en = 'Accruals'")));
	
	ИсточникиДанных.Вставить("НалогиВзносыОрганизации",
		Новый Структура("Таблица, ПутьКДанным, Представление",
			НалогиВзносыОрганизации.Выгрузить(Отбор, Колонки),
			"НалогиВзносыОрганизации[%1].НастройкаОтраженияПредставление",
			НСтр("ru = 'Налоги, взносы (с организации)';
				|en = 'Payroll taxes'")));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРасчетов));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ПериодРасчетов));
	
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		Запрос.УстановитьПараметр(ИсточникДанных.Ключ, ИсточникДанных.Значение.Таблица);
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Порядок,
	|	""Начисления"" КАК Источник,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Подразделение КАК Подразделение,
	|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаДокумента.ТипБазыРаспределения КАК ТипБазыРаспределения
	|ПОМЕСТИТЬ ВтНачисления
	|ИЗ
	|	&Начисления КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	""НалогиВзносыОрганизации"" КАК Источник,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Подразделение КАК Подразделение,
	|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаДокумента.ТипБазыРаспределения КАК ТипБазыРаспределения
	|ПОМЕСТИТЬ ВтНалогиВзносыОрганизации
	|ИЗ
	|	&НалогиВзносыОрганизации КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Порядок,
	|	Источник,
	|	НомерСтроки,
	|	Подразделение,
	|	ФизическоеЛицо,
	|	ТипБазыРаспределения
	|ПОМЕСТИТЬ ВтДанныеДокумента
	|ИЗ ВтНачисления КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Порядок,
	|	Источник,
	|	НомерСтроки,
	|	Подразделение,
	|	ФизическоеЛицо,
	|	ТипБазыРаспределения
	|ИЗ ВтНалогиВзносыОрганизации КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТрудозатратыНЗП.Подразделение КАК Подразделение,
	|	ТрудозатратыНЗП.Сотрудник КАК ФизическоеЛицо,
	|	СУММА(ТрудозатратыНЗП.НормативнаяСтоимость) КАК НормативнаяСтоимость,
	|	СУММА(ВЫБОР
	|		КОГДА ВидыРабот.КратностьТрудоемкости > 0
	|			ТОГДА ВЫРАЗИТЬ(ТрудозатратыНЗП.Количество * ВидыРабот.Трудоемкость / ВидыРабот.КратностьТрудоемкости КАК ЧИСЛО(15,3))
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК Длительность
	|ПОМЕСТИТЬ ВтБазаРаспределения
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ТрудозатратыНЗП
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРабот
	|		ПО ТрудозатратыНЗП.ВидРабот = ВидыРабот.Ссылка
	|ГДЕ
	|	(ТрудозатратыНЗП.Подразделение, ТрудозатратыНЗП.Сотрудник) В
	|		(ВЫБРАТЬ Подразделение, ФизическоеЛицо ИЗ ВТДанныеДокумента)
	|	И ТрудозатратыНЗП.Организация = &Организация
	|	И ТрудозатратыНЗП.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыНЗП.Подразделение,
	|	ТрудозатратыНЗП.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Порядок,
	|	ДанныеДокумента.Источник,
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА БазаРаспределения.Подразделение ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	ВтДанныеДокумента КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаРаспределения КАК БазаРаспределения
	|	ПО ДанныеДокумента.Подразделение = БазаРаспределения.Подразделение
	|		И ДанныеДокумента.ФизическоеЛицо = БазаРаспределения.ФизическоеЛицо
	|
	|ГДЕ
	|	ДанныеДокумента.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	И (ДанныеДокумента.ТипБазыРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда)
	|			И ЕСТЬNULL(БазаРаспределения.НормативнаяСтоимость, 0) = 0
	|		ИЛИ 
	|		ДанныеДокумента.ТипБазыРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ДлительностьВыполненияРабот)
	|			И ЕСТЬNULL(БазаРаспределения.Длительность, 0) = 0
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Порядок,
	|	ДанныеДокумента.НомерСтроки
	|";
	
	Если НЕ ДетализацияДоФизическихЛиц Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента.ФизическоеЛицо", "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТрудозатратыНЗП.Сотрудник", "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДетализацияДоФизическихЛиц Тогда
		ШаблонСообщенияНетВыработки = НСтр("ru = 'Выработка сотрудника %2 в подразделении ""%1"" не регистрировалась (строка %4 таблицы ""%3"")';
											|en = 'Work output for employee %2 in the business unit ""%1"" was not registered (line %4 of the table ""%3"")'");
		ШаблонСообщенияПустойКоэффициент = НСтр("ru = 'Не задан коэффициент распределения работ сотрудника %2 в подразделении ""%1"" (строка %4 таблицы ""%3"")';
												|en = 'The employee''s work distribution factor %2in the business unit ""%1"" is not set (line %4 of the table ""%3"")'");
	Иначе
		ШаблонСообщенияНетВыработки = НСтр("ru = 'Выработка в подразделении ""%1"" не регистрировалась (строка %4 таблицы ""%3"")';
											|en = 'Work output in the ""%1"" business unit was not registered (line %4 of the table ""%3"")'");
		ШаблонСообщенияПустойКоэффициент = НСтр("ru = 'Не задан коэффициент распределения работ в подразделении ""%1"" (строка %4 таблицы ""%3"")';
												|en = 'The work distribution factor is not set in the business unit ""%1"" (line %4 of the table ""%3"")'");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(Выборка.Коэффициент = Неопределено, ШаблонСообщенияНетВыработки, ШаблонСообщенияПустойКоэффициент),
			Выборка.Подразделение, Выборка.ФизическоеЛицо, ИсточникиДанных[Выборка.Источник].Представление, Выборка.НомерСтроки);
		
		ПутьКДанным = СтрШаблон(ИсточникиДанных[Выборка.Источник].ПутьКДанным, Формат(Выборка.НомерСтроки-1, "ЧН=0; ЧГ=;"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКДанным,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли