
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьДобавленныеРеквизитыВТаблицахДокумента();
	КонецЕсли;
	
	УправлениеФормой();
	
	ПараметрыНастройки = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если Объект.Исправление Тогда
		Элементы.ЗаполнитьНачисленияПоВыработке.Видимость = Ложь;
	КонецЕсли;
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	ЗаполнитьДобавленныеРеквизитыВТаблицахДокумента();
	
	ПараметрыНастройки = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыНастройкиСчетовУчета();
	НастройкаСчетовУчетаСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыНастройки);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтражениеЗарплатыВФинансовомУчете2_5", ПараметрыЗаписи, Объект.Ссылка);
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеРеквизитыВТаблицахДокумента();
	
	НастройкаСчетовУчетаСервер.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкаСчетовУчетаСервер.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредставлениеПериодаРасчетов = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРасчетов);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодРасчетовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка,
		Объект.ПериодРасчетов, ПредставлениеПериодаРасчетов);
	Объект.ПериодРасчетов = НачалоМесяца(Объект.ПериодРасчетов);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПериодРасчетовНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Значение, РежимВыбораПериода", Объект.ПериодРасчетов, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , ,
		ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодРасчетов = НачалоМесяца(ВыбранныйПериод);
	ПредставлениеПериодаРасчетов = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетовПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НачисленияНастройкаОтраженияВУчете Тогда
		РедактироватьНастройкиОтражения(ВариантыОтраженияНачислений, Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент,, "Объект.Начисления");
		Иначе
			ТекущиеДанные.ВариантОтражения =
				ПредопределенноеЗначение("Перечисление.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеРасходы");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение, ВидРасчетов");
			ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
			ТекущиеДанные.НастройкаОтраженияПредставление = ПредставлениеНастройкиОтраженияЗаполнить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВариантОтраженияПриИзменении(Элемент)
	ОбновитьДобавленныеРеквизитыВСтрокеТаблицыДокументаПриИзмененииВариантаОтражения(Элементы.Начисления.Имя, ВариантыОтраженияНачислений);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНалогиВзносыОрганизации

&НаКлиенте
Процедура НалогиВзносыОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НалогиВзносыОрганизацииНастройкаОтраженияВУчете Тогда
		РедактироватьНастройкиОтражения(ВариантыОтраженияНачислений, Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВзносыОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент,, "Объект.НалогиВзносыОрганизации");
		Иначе
			ТекущиеДанные.ВариантОтражения =
				ПредопределенноеЗначение("Перечисление.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеРасходы");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение");
			ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
			ТекущиеДанные.НастройкаОтраженияПредставление = ПредставлениеНастройкиОтраженияЗаполнить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВзносыОрганизацииВариантОтраженияПриИзменении(Элемент)
	ОбновитьДобавленныеРеквизитыВСтрокеТаблицыДокументаПриИзмененииВариантаОтражения(Элементы.НалогиВзносыОрганизации.Имя, ВариантыОтраженияНачислений);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНалогиВзносыСотрудников

&НаКлиенте
Процедура НалогиВзносыСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение, ВидРасчетов");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдержания

&НаКлиенте
Процедура УдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.УдержанияНастройкаОтраженияВУчете Тогда
		РедактироватьНастройкиОтражения(ВариантыОтраженияУдержаний, Элемент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			НастройкаСчетовУчетаКлиент.ПриКопированииСтроки(ЭтотОбъект, Элемент,, "Объект.Удержания");
		Иначе
			ТекущиеДанные.ВариантОтражения =
				ПредопределенноеЗначение("Перечисление.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеДоходы");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "Подразделение, ВидРасчетов");
			ТекущиеДанные.СтатьяДоходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка");
			ТекущиеДанные.НастройкаОтраженияПредставление = ПредставлениеНастройкиОтраженияЗаполнить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВариантОтраженияПриИзменении(Элемент)
	ОбновитьДобавленныеРеквизитыВСтрокеТаблицыДокументаПриИзмененииВариантаОтражения(Элементы.Удержания.Имя, ВариантыОтраженияУдержаний);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайлаНачисления(Команда)
	ЗагрузитьДанныеВТаблицуИзФайла(Элементы.Начисления, ЗначениеЗаполнено(Объект.Начисления));
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаНалогиВзносыОрганизации(Команда)
	ЗагрузитьДанныеВТаблицуИзФайла(Элементы.НалогиВзносыОрганизации, ЗначениеЗаполнено(Объект.НалогиВзносыОрганизации));
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаНалогиВзносыСотрудников(Команда)
	ЗагрузитьДанныеВТаблицуИзФайла(Элементы.НалогиВзносыСотрудников, ЗначениеЗаполнено(Объект.НалогиВзносыСотрудников));
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаУдержания(Команда)
	ЗагрузитьДанныеВТаблицуИзФайла(Элементы.Удержания, ЗначениеЗаполнено(Объект.Удержания));
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрок

&НаКлиенте
Процедура СкопироватьСтрокиНачисления(Команда)
	СкопироватьСтроки(Элементы.Начисления);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокиНалогиВзносыОрганизации(Команда)
	СкопироватьСтроки(Элементы.НалогиВзносыОрганизации);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокиНалогиВзносыСотрудников(Команда)
	СкопироватьСтроки(Элементы.НалогиВзносыСотрудников);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокиУдержания(Команда)
	СкопироватьСтроки(Элементы.Удержания);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиНачисления(Команда)
	ВставитьСтроки(Элементы.Начисления);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиНалогиВзносыОрганизации(Команда)
	ВставитьСтроки(Элементы.НалогиВзносыОрганизации);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиНалогиВзносыСотрудников(Команда)
	ВставитьСтроки(Элементы.НалогиВзносыСотрудников);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиУдержания(Команда)
	ВставитьСтроки(Элементы.Удержания);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДополнитьНачисленияПоВыработке(Команда)
	
	ЗаполнитьДокумент("ВыработкаСотрудников");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодразделениеНачисления(Команда)
	ЗаполнитьПодразделениеВТабличнойЧасти(Объект.Начисления, Элементы.Начисления);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодразделениеНалогиВзносыОрганизации(Команда)
	ЗаполнитьПодразделениеВТабличнойЧасти(Объект.НалогиВзносыОрганизации, Элементы.НалогиВзносыОрганизации);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодразделениеНалогиВзносыСотрудников(Команда)
	ЗаполнитьПодразделениеВТабличнойЧасти(Объект.НалогиВзносыСотрудников, Элементы.НалогиВзносыСотрудников);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодразделениеУдержания(Команда)
	ЗаполнитьПодразделениеВТабличнойЧасти(Объект.Удержания, Элементы.Удержания);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидРасчетовНачисления(Команда)
	ЗаполнитьВидРасчетовВТабличнойЧасти(Объект.Начисления, Элементы.Начисления);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидРасчетовНалогиВзносыСотрудников(Команда)
	ЗаполнитьВидРасчетовВТабличнойЧасти(Объект.НалогиВзносыСотрудников, Элементы.НалогиВзносыСотрудников);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидРасчетовУдержания(Команда)
	ЗаполнитьВидРасчетовВТабличнойЧасти(Объект.Удержания, Элементы.Удержания);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиОтраженияНачисления(Команда)
	РедактироватьНастройкиОтражения(ВариантыОтраженияНачислений, Элементы.Начисления);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиОтраженияНалогиВзносыОрганизации(Команда)
	РедактироватьНастройкиОтражения(ВариантыОтраженияНачислений, Элементы.НалогиВзносыОрганизации);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиОтраженияУдержания(Команда)
	РедактироватьНастройкиОтражения(ВариантыОтраженияУдержаний, Элементы.Удержания);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНалогиВзносы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоВыделенныеСтроки", Элементы.Начисления.ВыделенныеСтроки.Количество() > 1);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РассчитатьНалогиВзносыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОтражениеЗарплатыВФинансовомУчете2_5.Форма.ФормаЗаполненияНалогов",
		ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНалогиВзносыОрганизации(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Налогоплательщик", "Организация");
	ПараметрыФормы.Вставить("ТолькоВыделенныеСтроки", Элементы.НалогиВзносыОрганизации.ВыделенныеСтроки.Количество() > 1);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПересчитатьНалогиВзносыЗавершение", ЭтотОбъект, Элементы.НалогиВзносыОрганизации);
	
	ОткрытьФорму("Документ.ОтражениеЗарплатыВФинансовомУчете2_5.Форма.ФормаЗаполненияНалогов",
		ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНалогиВзносыСотрудников(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Налогоплательщик", "Сотрудник");
	ПараметрыФормы.Вставить("ТолькоВыделенныеСтроки", Элементы.НалогиВзносыСотрудников.ВыделенныеСтроки.Количество() > 1);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПересчитатьНалогиВзносыЗавершение", ЭтотОбъект, Элементы.НалогиВзносыСотрудников);
	
	ОткрытьФорму("Документ.ОтражениеЗарплатыВФинансовомУчете2_5.Форма.ФормаЗаполненияНалогов",
		ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Элементы.НачисленияВариантОтражения.СписокВыбора.Очистить();
	Элементы.НалогиВзносыОрганизацииВариантОтражения.СписокВыбора.Очистить();
	Элементы.УдержанияВариантОтражения.СписокВыбора.Очистить();
	
	ВариантыОтраженияНачислений = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ВариантыОтраженияНачислений();
	Для Каждого ВариантОтражения Из ВариантыОтраженияНачислений Цикл
		
		Если НЕ ВариантОтражения.Значение.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.НачисленияВариантОтражения.СписокВыбора.Добавить(ВариантОтражения.Ключ);
		Элементы.НалогиВзносыОрганизацииВариантОтражения.СписокВыбора.Добавить(ВариантОтражения.Ключ);
		
	КонецЦикла;
	
	ВариантыОтраженияУдержаний = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ВариантыОтраженияУдержаний();
	Для Каждого ВариантОтражения Из ВариантыОтраженияУдержаний Цикл
		
		Если НЕ ВариантОтражения.Значение.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.УдержанияВариантОтражения.СписокВыбора.Добавить(ВариантОтражения.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПодразделениеВШапке = ЗначениеЗаполнено(Объект.Подразделение);
	Элементы.ИзменитьПодразделениеНачисления.Видимость = НЕ ПодразделениеВШапке;
	Элементы.ИзменитьПодразделениеНалогиВзносыОрганизации.Видимость = НЕ ПодразделениеВШапке;
	Элементы.ИзменитьПодразделениеНалогиВзносыСотрудников.Видимость = НЕ ПодразделениеВШапке;
	Элементы.ИзменитьПодразделениеУдержания.Видимость = НЕ ПодразделениеВШапке;
	
	ВидРасчетовВШапке = ЗначениеЗаполнено(Объект.ВидРасчетов);
	Элементы.ИзменитьВидРасчетовНачисления.Видимость = НЕ ВидРасчетовВШапке;
	Элементы.ИзменитьВидРасчетовНалогиВзносыСотрудников.Видимость = НЕ ВидРасчетовВШапке;
	Элементы.ИзменитьВидРасчетовУдержания.Видимость = НЕ ВидРасчетовВШапке;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Подразделения
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияПодразделение.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыОрганизацииПодразделение.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыСотрудниковПодразделение.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УдержанияПодразделение.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Вид расчетов
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияВидРасчетов.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыСотрудниковВидРасчетов.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УдержанияВидРасчетов.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Физическое лицо при сводном отражении
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияФизическоеЛицо.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыОрганизацииФизическоеЛицо.Имя);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыСотрудниковФизическоеЛицо.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетализацияДоФизическихЛиц");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Начисления - Цвет гиперссылок
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияНастройкаОтраженияВУчете.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.НастройкаОтраженияКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Налоги организации - Цвет гиперссылок
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогиВзносыОрганизацииНастройкаОтраженияВУчете.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогиВзносыОрганизации.НастройкаОтраженияКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Удержания - Цвет гиперссылок
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УдержанияНастройкаОтраженияВУчете.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Удержания.НастройкаОтраженияКорректна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаОтраженияВУчете(СтрокаТаблицы, ПараметрыОтражения)
	
	Если ПараметрыОтражения <> Неопределено Тогда
		НастройкаОтражения = Новый Структура("ВариантОтражения," + ПараметрыОтражения.Реквизиты);
	Иначе
		НастройкаОтражения = Новый Структура("ВариантОтражения");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НастройкаОтражения, СтрокаТаблицы);
	
	Возврат НастройкаОтражения;
	
КонецФункции

&НаСервере
Процедура ОбновитьДобавленныеРеквизитыВСтрокеТаблицыДокументаПриИзмененииВариантаОтражения(ИмяТаблицы, ВариантыОтражения)
	
	ТаблицаФормы = Элементы[ИмяТаблицы];
	ЧастиПути = СтрРазделить(ТаблицаФормы.ПутьКДанным, ".");
	ТаблицаДанных = Объект[ЧастиПути.Получить(1)];
	
	СтрокаТаблицы = ТаблицаДанных.НайтиПоИдентификатору(ТаблицаФормы.ТекущаяСтрока);
	ПараметрыОтражения = ВариантыОтражения[СтрокаТаблицы.ВариантОтражения];
	НастройкаОтражения = НастройкаОтраженияВУчете(СтрокаТаблицы, ПараметрыОтражения);
	
	Если ЭтоПостатейноеОтражение(СтрокаТаблицы.ВариантОтражения) Тогда
		ПривестиСтатьюКВариантуОтражения(СтрокаТаблицы, НастройкаОтражения);
	КонецЕсли;
	
	ЗаполнитьДобавленныеРеквизитыВСтрокеТаблицыДокумента(СтрокаТаблицы, ПараметрыОтражения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеРеквизитыВТаблицахДокумента()
	
	ЗаполнитьДобавленныеРеквизитыВТаблицеДокумента(Объект.Начисления,              ВариантыОтраженияНачислений);
	ЗаполнитьДобавленныеРеквизитыВТаблицеДокумента(Объект.НалогиВзносыОрганизации, ВариантыОтраженияНачислений);
	ЗаполнитьДобавленныеРеквизитыВТаблицеДокумента(Объект.Удержания,               ВариантыОтраженияУдержаний);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеРеквизитыВТаблицеДокумента(ТаблицаДокумента, ВариантыОтражения)
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		ПараметрыОтражения = ВариантыОтражения[СтрокаТаблицы.ВариантОтражения];
		ЗаполнитьДобавленныеРеквизитыВСтрокеТаблицыДокумента(СтрокаТаблицы, ПараметрыОтражения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеРеквизитыВСтрокеТаблицыДокумента(СтрокаТаблицы, ПараметрыОтражения)
	
	НастройкаОтражения = НастройкаОтраженияВУчете(СтрокаТаблицы, ПараметрыОтражения);
	
	СтрокаТаблицы.НастройкаОтраженияПредставление = ПредставлениеНастройкиОтражения(
		ПараметрыОтражения.ШаблонПредставления, ПараметрыОтражения.СвойстваРеквизитов, НастройкаОтражения);
	СтрокаТаблицы.НастройкаОтраженияКорректна = ПроверитьКорректностьНастройкиОтражения(
		ПараметрыОтражения.СвойстваРеквизитов, НастройкаОтражения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНастройкиОтраженияЗаполнить()
	Возврат НСтр("ru = 'Заполнить параметры отражения...';
				|en = 'Fill in accounting attributes...'");
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеНастройкиОтражения(Знач Шаблон, Реквизиты, НастройкаОтражения)
	
	ПараметрыШаблона = Новый Структура;
	Для Каждого ЭлементСписка Из Реквизиты Цикл
		
		Имя = ЭлементСписка.Ключ;
		Реквизит = ЭлементСписка.Значение;
		Значение = Неопределено;
		
		Если НастройкаОтражения.Свойство(Имя, Значение) И ЗначениеЗаполнено(Значение) Тогда
			ПараметрыШаблона.Вставить(Имя, Значение);
			Продолжить;
		ИначеЕсли НЕ Реквизит.Используется Тогда
			Шаблон = СтрЗаменить(Шаблон, "[" + Имя + "]", "");
			Продолжить;
		ИначеЕсли Имя = "НастройкаСчетовУчета" Тогда
			Шаблон = СтрЗаменить(Шаблон, "[" + Имя + "]", "");
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Основной Тогда
			// Не заполнен основной реквизит
			Возврат ПредставлениеНастройкиОтраженияЗаполнить();
		КонецЕсли;
		
		// Представление незаполненных полей
		
		Если Имя = "СтатьяКалькуляции" Тогда
			ПараметрыШаблона.Вставить(Имя, НСтр("ru = '<по выработке>';
												|en = '<by output>'"));
		ИначеЕсли Имя = "ЦельВыдачи" Тогда
			ПараметрыШаблона.Вставить(Имя, НСтр("ru = '<не указана>';
												|en = '<not specified>'"));
		ИначеЕсли Имя = "ОбъектРасчетов" Тогда
			ПараметрыШаблона.Вставить(Имя, НСтр("ru = '<не указан>';
												|en = '<not specified>'"));
		ИначеЕсли СтрНачинаетсяС(Имя, "Аналитика") И ЭтоПостатейноеОтражение(НастройкаОтражения.ВариантОтражения) Тогда
			
			Статья = СтатьяОтраженияВУчете(НастройкаОтражения);
			НастройкиСтатьи = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.СвойстваСтатьиОтражения(Статья);
			
			Если НастройкиСтатьи.ДоступноАвтозаполнение Тогда
				ПараметрыШаблона.Вставить(Имя, НСтр("ru = '<подбирается автоматически>';
													|en = '<picked automatically>'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПараметрыШаблона.Свойство(Имя) Тогда
			ПараметрыШаблона.Вставить(Имя, НСтр("ru = '<...>';
												|en = '<...>'"));
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Шаблон) Тогда
		Шаблон = СтрЗаменить(Шаблон, "][", "], [");
		Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);
	Иначе
		Представление = НСтр("ru = '<не требуется>';
							|en = '<not required>'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьКорректностьНастройкиОтражения(Реквизиты, НастройкаОтражения)
	
	Результат = Истина;
	
	Для Каждого ЭлементСписка Из Реквизиты Цикл
		
		Имя = ЭлементСписка.Ключ;
		Реквизит = ЭлементСписка.Значение;
		Значение = Неопределено;
		
		Если НЕ Реквизит.Используется ИЛИ НЕ Реквизит.РеквизитОбязательный Тогда
			Продолжить;
		ИначеЕсли НастройкаОтражения.Свойство(Имя, Значение) И ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		// Дополнительная проверка обязательных, но незаполненных полей
		
		Если СтрНачинаетсяС(Имя, "Аналитика") И ЭтоПостатейноеОтражение(НастройкаОтражения.ВариантОтражения) Тогда
			
			Статья = СтатьяОтраженияВУчете(НастройкаОтражения);
			НастройкиСтатьи = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.СвойстваСтатьиОтражения(Статья);
			
			Если НастройкиСтатьи.БезАналитики Тогда
				Продолжить;
			ИначеЕсли НЕ НастройкиСтатьи.КонтролироватьЗаполнениеАналитики Тогда
				Продолжить;
			ИначеЕсли НастройкиСтатьи.ДоступноАвтозаполнение Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли Имя = "НастройкаСчетовУчета" Тогда
			
			Статья = СтатьяОтраженияВУчете(НастройкаОтражения);
			НастройкиСтатьи = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.СвойстваСтатьиОтражения(Статья);
			
			Если НЕ НастройкиСтатьи.ДоступнаНастройкаСчетовУчета Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПривестиСтатьюКВариантуОтражения(СтрокаТаблицы, НастройкаОтражения)
	
	ПриведеннаяСтатья = СтатьяОтраженияВУчете(НастройкаОтражения);
	Если НастройкаОтражения.Свойство("СтатьяРасходов") И СтрокаТаблицы.СтатьяРасходов <> ПриведеннаяСтатья Тогда
		СтрокаТаблицы.СтатьяРасходов = ПриведеннаяСтатья;
		Возврат Истина;
	ИначеЕсли НастройкаОтражения.Свойство("СтатьяДоходов") И СтрокаТаблицы.СтатьяДоходов <> ПриведеннаяСтатья Тогда
		СтрокаТаблицы.СтатьяДоходов = ПриведеннаяСтатья;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатьяОтраженияВУчете(НастройкаОтражения)
	
	Статья = Неопределено;
	Если НЕ (НастройкаОтражения.Свойство("СтатьяРасходов", Статья) ИЛИ НастройкаОтражения.Свойство("СтатьяДоходов", Статья)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВариантыОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний;
	Если НастройкаОтражения.ВариантОтражения = ВариантыОтражения.ОтнестиНаПрочиеРасходы Тогда
		ТипСтатьи = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
	ИначеЕсли НастройкаОтражения.ВариантОтражения = ВариантыОтражения.ОтнестиНаПрочиеДоходы Тогда
		ТипСтатьи = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
	ИначеЕсли НастройкаОтражения.ВариантОтражения = ВариантыОтражения.ОтнестиНаПрочиеАктивыПассивы Тогда
		ТипСтатьи = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
	Иначе
		ТипСтатьи = Неопределено;
	КонецЕсли;
	
	Если ТипСтатьи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТипСтатьи.ПривестиЗначение(Статья);
	
КонецФункции

&НаКлиенте
Процедура РедактироватьНастройкиОтражения(ВариантыОтражения, ТаблицаФормы)
	
	Если ТаблицаФормы.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДокумента",   Объект.Дата);
	ПараметрыФормы.Вставить("ВалютаДокумента", Объект.Валюта);
	ПараметрыФормы.Вставить("ВариантыОтражения", ВариантыОтражения);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", ТаблицаФормы.Имя);
	
	ПараметрыВариантаОтражения = ВариантыОтражения[ТекущиеДанные.ВариантОтражения];
	Если ПараметрыВариантаОтражения <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",
			Новый Структура("ВариантОтражения," + ПараметрыВариантаОтражения.Реквизиты));
		ЗаполнитьЗначенияСвойств(ПараметрыФормы.ЗначенияЗаполнения, ТекущиеДанные);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантыОтражения", ВариантыОтражения);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ТаблицаФормы.ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ТаблицаФормы.Имя);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактироватьНастройкиОтраженияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ОтражениеЗарплатыВФинансовомУчете2_5.Форма.ФормаНастройкиОтраженияВУчете",
		ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиОтраженияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		РедактироватьНастройкиОтраженияНаСервере(Результат, ДополнительныеПараметры);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьНастройкиОтраженияНаСервере(Результат, ДополнительныеПараметры)
	
	ПараметрыОтражения = ДополнительныеПараметры.ВариантыОтражения[Результат.ВариантОтражения];
	
	ПредставлениеНастройкиОтражения = ПредставлениеНастройкиОтражения(
		ПараметрыОтражения.ШаблонПредставления, ПараметрыОтражения.СвойстваРеквизитов, Результат);
	НастройкаОтраженияКорректна = ПроверитьКорректностьНастройкиОтражения(
		ПараметрыОтражения.СвойстваРеквизитов, Результат);
	
	ТаблицаФормы = Элементы[ДополнительныеПараметры.ИмяТаблицы];
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	ЧастиПути = СтрРазделить(ТаблицаФормы.ПутьКДанным, ".");
	ТаблицаДанных = Объект[ЧастиПути.Получить(1)];
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТаблицаДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
		СтрокаТаблицы.НастройкаОтраженияПредставление = ПредставлениеНастройкиОтражения;
		СтрокаТаблицы.НастройкаОтраженияКорректна = НастройкаОтраженияКорректна;
		
	КонецЦикла;
	
	НастройкаСчетовУчетаСервер.ОбновитьПредставлениеНастройки(ЭтотОбъект, ТаблицаФормы.ПутьКДанным, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеВТабличнойЧасти(ТаблицаДанных, Элемент)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьРеквизитВТабличнойЧасти", ЭтотОбъект,
		Новый Структура("ТаблицаДанных, ИмяРеквизита, ВыделенныеСтроки", ТаблицаДанных, "Подразделение", Элемент.ВыделенныеСтроки));
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , Элемент, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидРасчетовВТабличнойЧасти(ТаблицаДанных, Элемент)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьРеквизитВТабличнойЧасти", ЭтотОбъект,
		Новый Структура("ТаблицаДанных, ИмяРеквизита, ВыделенныеСтроки", ТаблицаДанных, "ВидРасчетов", Элемент.ВыделенныеСтроки));
	
	ОткрытьФорму("Справочник.ВидыРасчетовССотрудниками.ФормаВыбора", , Элемент, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВТабличнойЧасти(Результат, ПараметрыЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура(ПараметрыЗаполнения.ИмяРеквизита, Результат);
	
	ТаблицаДанных = ПараметрыЗаполнения.ТаблицаДанных;
	Для Каждого ИдентификторСтроки Из ПараметрыЗаполнения.ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТаблицаДанных.НайтиПоИдентификатору(ИдентификторСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗначенияЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНалогиВзносыЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ВидыНалогов) Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьНалогиВзносыНаСервере(Результат);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНалогиВзносыНаСервере(НастройкиЗаполнения)
	
	Если НастройкиЗаполнения.ТолькоВыделенныеСтроки Тогда
		КоллекцияСтрок = Новый Массив;
		Для Каждого ИдентификаторСтроки Из Элементы.Начисления.ВыделенныеСтроки Цикл
			КоллекцияСтрок.Добавить(Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;
	Иначе
		КоллекцияСтрок = Объект.Начисления;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоллекцияСтрок) Тогда
		Возврат;
	КонецЕсли;
	
	НалогиОрганизации = Элементы.НалогиВзносыОрганизации;
	НалогиСотрудников = Элементы.НалогиВзносыСотрудников;
	
	// Очищаем выделенные строки
	
	НалогиОрганизации.ВыделенныеСтроки.Очистить();
	НалогиСотрудников.ВыделенныеСтроки.Очистить();
	
	// Сбрасываем текщую строку
	
	НалогиОрганизации.ТекущаяСтрока = Неопределено;
	НалогиСотрудников.ТекущаяСтрока = Неопределено;
	
	Для Каждого ЭлементСписка Из НастройкиЗаполнения.ВидыНалогов Цикл
		
		ВидНалога        = ЭлементСписка.Ключ;
		ПараметрыРасчета = ЭлементСписка.Значение;
		
		РассчитатьНалогиВзносыПоНачислениям(КоллекцияСтрок, ВидНалога, ПараметрыРасчета);
		
	КонецЦикла;
	
	// Если были добавлены новые строки, выделяем их и переключаем текущую страницу
	// Если новые строки не добавлялись, то выделям текущую строку если она есть
	
	Если НалогиОрганизации.ВыделенныеСтроки.ВГраница() >= 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНалогиОрганизации;
	ИначеЕсли НалогиОрганизации.ТекущаяСтрока <> Неопределено Тогда
		НалогиОрганизации.ВыделенныеСтроки.Добавить(НалогиОрганизации.ТекущаяСтрока);
	КонецЕсли;
	
	Если НалогиСотрудников.ВыделенныеСтроки.ВГраница() >= 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаНалогиСотрудников;
	ИначеЕсли НалогиСотрудников.ТекущаяСтрока <> Неопределено Тогда
		НалогиСотрудников.ВыделенныеСтроки.Добавить(НалогиСотрудников.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНалогиВзносыПоНачислениям(Начисления, ВидНалога, ПараметрыРасчета)
	
	Если ПараметрыРасчета.НалогСотрудника Тогда
		ТаблицаФормы = Элементы.НалогиВзносыСотрудников;
		ТаблицаДанных = Объект.НалогиВзносыСотрудников;
	Иначе
		ТаблицаФормы = Элементы.НалогиВзносыОрганизации;
		ТаблицаДанных = Объект.НалогиВзносыОрганизации;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Начисления Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "Сумма");
		НоваяСтрока.НалоговаяБаза = СтрокаТаблицы.Сумма;
		НоваяСтрока.ВидНалога     = ВидНалога;
		
		НоваяСтрока.Сумма = РассчитатьСуммуНалогаПоПараметрам(СтрокаТаблицы.Сумма, ПараметрыРасчета);
		
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
		Если ТаблицаФормы.ТекущаяСтрока = Неопределено Тогда
			ТаблицаФормы.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		ТаблицаФормы.ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНалогиВзносыЗавершение(Результат, Элемент) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ВидыНалогов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент = Элементы.НалогиВзносыОрганизации Тогда
		ПересчитатьНалогиВзносыОрганизацииНаСервере(Результат);
	ИначеЕсли Элемент = Элементы.НалогиВзносыСотрудников Тогда
		ПересчитатьНалогиВзносыСотрудниковНаСервере(Результат);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНалогиВзносыОрганизацииНаСервере(НастройкиПересчета)
	ПересчитатьНалогиВзносыНаСервере(НастройкиПересчета, Объект.НалогиВзносыОрганизации, Элементы.НалогиВзносыОрганизации.ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНалогиВзносыСотрудниковНаСервере(НастройкиПересчета)
	ПересчитатьНалогиВзносыНаСервере(НастройкиПересчета, Объект.НалогиВзносыСотрудников, Элементы.НалогиВзносыСотрудников.ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНалогиВзносыНаСервере(НастройкиПересчета, ТаблицаДанных, ВыделенныеСтроки)
	
	Если НастройкиПересчета.ТолькоВыделенныеСтроки Тогда
		КоличествоСтрок = ВыделенныеСтроки.Количество();
	Иначе
		КоличествоСтрок = ТаблицаДанных.Количество();
	КонецЕсли;
	
	Для Индекс = 0 По КоличествоСтрок - 1 Цикл
		
		Если НастройкиПересчета.ТолькоВыделенныеСтроки Тогда
			СтрокаТаблицы = ТаблицаДанных.НайтиПоИдентификатору(ВыделенныеСтроки[Индекс]);
		Иначе
			СтрокаТаблицы = ТаблицаДанных[Индекс];
		КонецЕсли;
		
		ПараметрыРасчета = НастройкиПересчета.ВидыНалогов.Получить(СтрокаТаблицы.ВидНалога);
		Если ПараметрыРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = РассчитатьСуммуНалогаПоПараметрам(СтрокаТаблицы.НалоговаяБаза, ПараметрыРасчета);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуНалогаПоПараметрам(НалоговаяБаза, ПараметрыРасчета)
	
	Результат = 0;
	Если ПараметрыРасчета.СпособРасчета = "Процентом" Тогда
		Результат = НалоговаяБаза / 100 * ПараметрыРасчета.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыделитьДобавленныеСтроки(ТаблицаФормы, МассивСтрок)
	
	Если НЕ ЗначениеЗаполнено(МассивСтрок) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФормы.ТекущаяСтрока = МассивСтрок[0];
	ТаблицаФормы.ВыделенныеСтроки.Очистить();
	Для Каждого ИдентификаторСтроки Из МассивСтрок Цикл
		ТаблицаФормы.ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПостатейноеОтражение(ВариантОтражения)
	
	Возврат ВариантОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеРасходы
			ИЛИ ВариантОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеДоходы
			ИЛИ ВариантОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний.ОтнестиНаПрочиеАктивыПассивы;
	
КонецФункции

#Область ЗаполнениеДокумента

&НаКлиенте
Процедура ЗаполнитьДокумент(ИсточникиЗаполнения)
	
	ДлительнаяОперация = ЗаполнитьДокументВФонеНаСервере(ИсточникиЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДокументЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументВФонеНаСервере(ИсточникиЗаполнения)
	
	ПараметрыЗаполнения = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПараметрыЗаполненияДокумента();
	
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.НачалоПериода = НачалоМесяца(Объект.ПериодРасчетов);
	ПараметрыЗаполнения.КонецПериода  = КонецМесяца(Объект.ПериодРасчетов);
	ПараметрыЗаполнения.ФизическиеЛицаПодробно = Объект.ДетализацияДоФизическихЛиц;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ПараметрыЗаполнения.Подразделение = Объект.Подразделение;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИсточникиЗаполнения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗаполнения.Источники, Новый Структура(ИсточникиЗаполнения));
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение документа «Отражение зарплаты в финансовом учете»';
															|en = 'Fill the ""Post payroll expenses to accounting"" document'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ПодготовитьДанныеЗаполнения",
		Новый ФиксированнаяСтруктура(ПараметрыЗаполнения));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументНаСервере(Результат)
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВыработкаСотрудников") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидРасчетов) Тогда
			ВидРасчетов = Справочники.ВидыРасчетовССотрудниками.ОплатаТруда;
		Иначе
			ВидРасчетов = Объект.ВидРасчетов;
		КонецЕсли;
		
		ВариантОтражения = Перечисления.ВариантыОтраженияНачисленийУдержаний.РаспределитьНаПроизводство;
		ПараметрыОтражения = ВариантыОтраженияНачислений[ВариантОтражения];
		НастройкаОтражения = Новый Структура(ПараметрыОтражения.Реквизиты);
		НастройкаОтражения.Вставить("ВариантОтражения", ВариантОтражения);
		НастройкаОтражения.Вставить("ТипБазыРаспределения",
			Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда);
		
		ПредставлениеНастройкиОтражения = ПредставлениеНастройкиОтражения(
			ПараметрыОтражения.ШаблонПредставления, ПараметрыОтражения.СвойстваРеквизитов, НастройкаОтражения);
		НастройкаОтраженияКорректна = ПроверитьКорректностьНастройкиОтражения(
			ПараметрыОтражения.СвойстваРеквизитов, НастройкаОтражения);
		
		Для Каждого СтрокаВыработки Из ДанныеЗаполнения.ВыработкаСотрудников Цикл
			
			НоваяСтрока = Объект.Начисления.Добавить();
			
			НоваяСтрока.ВидРасчетов          = ВидРасчетов;
			НоваяСтрока.ВидНачисления        = Справочники.ВидыНачисленийУдержаний.СдельнаяОплата;
			
			НоваяСтрока.Подразделение        = СтрокаВыработки.Подразделение;
			НоваяСтрока.ФизическоеЛицо       = СтрокаВыработки.ФизическоеЛицо;
			НоваяСтрока.Сумма                = СтрокаВыработки.Сумма;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаОтражения);
			
			НоваяСтрока.НастройкаОтраженияПредставление = ПредставлениеНастройкиОтражения;
			НоваяСтрока.НастройкаОтраженияКорректна = НастройкаОтраженияКорректна;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Асинх Процедура ЗагрузитьДанныеВТаблицуИзФайла(ТаблицаФормы, ЕстьДанные = Ложь)
	
	Если ЕстьДанные И Ждать ВопросАсинх(СтрШаблон(
		НСтр("ru = 'Таблица ""%1"" будет очищена. Продолжить?';
			|en = 'The ""%1"" table will be cleared. Continue?'"), ТаблицаФормы.Заголовок),
		РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьФормуЗагрузки(ТаблицаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗагрузки(ТаблицаФормы)
	
	ЗаголовокФормыЗагрузки = СтрШаблон(
		НСтр("ru = 'Загрузка таблицы ""%1"" из файла';
			|en = 'Download the table ""%1"" from the file'"),
		ТаблицаФормы.Родитель.Заголовок);
	
	Если ТаблицаФормы = Элементы.Удержания Тогда
		ВариантыОтражения = ВариантыОтраженияУдержаний;
	Иначе
		ВариантыОтражения = ВариантыОтраженияНачислений;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ДоступныеВариантыОтражения", Новый Массив);
	Для Каждого Вариант Из ВариантыОтражения Цикл
		ДополнительныеПараметры.ДоступныеВариантыОтражения.Добавить(Вариант.Ключ);
	КонецЦикла;
	
	ПараметрыЗагрузкиДанных = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузкиДанных.Заголовок = ЗаголовокФормыЗагрузки;
	ПараметрыЗагрузкиДанных.ПолноеИмяТабличнойЧасти =
		"ОтражениеЗарплатыВФинансовомУчете2_5." + ТаблицаФормы.Имя;
	ПараметрыЗагрузкиДанных.КолонкиМакета =
		ОписаниеКолонокМакетаДляЗагрузкиИзФайла(ТаблицаФормы.Имя);
	ПараметрыЗагрузкиДанных.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьФормуЗагрузкиЗавершение", ЭтотОбъект, ТаблицаФормы.Имя);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузкиДанных, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиЗавершение(АдресЗагруженныхДанных, ИмяТаблицы) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ИмяТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ИмяТаблицыФормы)
	
	ТаблицаФормы = Элементы[ИмяТаблицыФормы];
	
	ЧастиПути = СтрРазделить(ТаблицаФормы.ПутьКДанным, ".");
	ТаблицаДанных = Объект[ЧастиПути.Получить(1)];
	
	ТаблицаДанных.Очистить();
	
	РеквизитыШапки = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыШапки.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидРасчетов) Тогда
		РеквизитыШапки.Вставить("ВидРасчетов", Объект.ВидРасчетов);
	КонецЕсли;
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	НастройкаОтражения = Новый Структура;
	НастройкаОтражения.Вставить("НастройкаОтраженияПредставление", ПредставлениеНастройкиОтраженияЗаполнить());
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыШапки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаОтражения);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаДляЗагрузкиИзФайла(ИмяТабличнойЧасти)
	
	ТребуютсяВидыРасчетов   = НЕ ЗначениеЗаполнено(Объект.ВидРасчетов);
	ТребуютсяПодразделения  = НЕ ЗначениеЗаполнено(Объект.Подразделение);
	ТребуютсяФизическиеЛица = Объект.ДетализацияДоФизическихЛиц;
	
	КолонкиМакета = Документы.ОтражениеЗарплатыВФинансовомУчете2_5.ОписаниеКолонокМакетаДляЗагрузкиИзФайла(
		ИмяТабличнойЧасти, ТребуютсяПодразделения, ТребуютсяФизическиеЛица, ТребуютсяВидыРасчетов);
	
	Возврат КолонкиМакета;
	
КонецФункции

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтроки(ТаблицаФормы)
	
	Если Не ЗначениеЗаполнено(ТаблицаФормы.ВыделенныеСтроки) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для копирования требуется выбрать строки табличной части.';
										|en = 'Select lines of the table to copy.'"));
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере(ТаблицаФормы.Имя);
	
	ТекстЗаголовка = НСтр("ru = 'Строки скопированы';
							|en = 'Lines are copied'");
	ТекстСообщения = НСтр("ru = 'Количество строк: %1';
							|en = 'Line quantity: %1'");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,
		СтрШаблон(ТекстСообщения, ТаблицаФормы.ВыделенныеСтроки.Количество()),
		БиблиотекаКартинок.Информация32,
		СтатусОповещенияПользователя.Информация);
	
	Оповестить("КопированиеСтрокОтраженияЗарплатыВБуферОбмена");
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ТаблицаФормы = Элементы[ИмяТаблицы];
	ТабличнаяЧасть = Объект[ИмяТаблицы];
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(ТабличнаяЧасть, ТаблицаФормы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ТаблицаФормы)
	
	НовыеСтроки = ВставитьСтрокиНаСервере(ТаблицаФормы.Имя);
	
	ВыделитьДобавленныеСтроки(ТаблицаФормы, НовыеСтроки);
	
	ТекстЗаголовка = НСтр("ru = 'Строки вставлены';
							|en = 'Lines are inserted'");
	ТекстСообщения = НСтр("ru = 'Количество строк: %1';
							|en = 'Line quantity: %1'");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,
		СтрШаблон(ТекстСообщения, НовыеСтроки.Количество()),
		БиблиотекаКартинок.Информация32,
		СтатусОповещенияПользователя.Информация);
	
КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	НовыеСтроки = Новый Массив;
	ПараметрыОтбора = Новый Соответствие;
	
	Если ИмяТаблицы = Элементы.Начисления.Имя Тогда
		ПараметрыОтбора.Вставить("ВидНачисления.ЯвляетсяУдержанием", Ложь);
	ИначеЕсли ИмяТаблицы = Элементы.Удержания.Имя Тогда
		ПараметрыОтбора.Вставить("ВидУдержания.ЯвляетсяУдержанием", Истина);
	Иначе
		ПараметрыОтбора.Вставить("ВидНалога.ПлательщикСотрудник",
			ИмяТаблицы = Элементы.НалогиВзносыСотрудников.Имя);
	КонецЕсли;
	
	ТаблицаИзБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена(ПараметрыОтбора);
	Если НЕ ЗначениеЗаполнено(ТаблицаИзБуфера) Тогда
		Возврат НовыеСтроки;
	КонецЕсли;
	
	Таблица = Объект[ИмяТаблицы]; // ДанныеФормыКоллекция - табличная часть документа
	
	Для Каждого СтрокаТаблицы Из ТаблицаИзБуфера Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НовыеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат НовыеСтроки;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти
