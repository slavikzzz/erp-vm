#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ НЕ УТКА
	МеханизмыДокумента.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("РезервыПоСомнительнымДолгам");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	
	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.НачислениеСписаниеРезервовПоСомнительнымДолгам") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРезервыПоСомнительнымДолгам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
		НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос,
																									ТекстыЗапроса,
																									Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Подготавливает данные о дебиторской задолженности, необходимые для расчета резервов по сомнительным долгам.
// Собираются из остатков регистров на дату, переданную в параметрах.
// Сохраняет полученный результат (таблицу значений) в переданный адрес временного хранилища.
// 
// Параметры:
// 		ПараметрыЗаполнения - Структура - структура, содержащая следующие ключи:
//			Дата - Дата и время - дата, на которую необходимо получить остатки по регистрам;
//			Организация - СправочникСсылка.Организации - организация, по которой необходимо получить данные;
//			ПустойДокумент - Булево - если Истина, то документ этого месяца не содержит строк дебиторской задолженности.
//		АдресХранилища - Строка - адрес временного хранилища, куда помещаются данные для заполнения дебиторской задолженности.
//
Процедура ПодготовитьДанныеДебиторскойЗадолженности(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.Форма.ФормаДокумента.Команда.ЗаполнитьДебиторскуюЗадолженность");
	
	Результат = ПолучитьДанныеДляЗаполненияДебиторскойЗадолженности(ПараметрыЗаполнения);
	Данные = Результат.Выгрузить();
	
	ПоместитьВоВременноеХранилище(Данные, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Данные.Количество() / 10);
	
КонецПроцедуры

// Возвращает данные о дебиторской задолженности, необходимые для расчета резервов по сомнительным долгам.
// Собираются из остатков регистров на дату, переданную в параметрах.
//
// Параметры:
// 		ПараметрыЗаполнения - Структура - структура, содержащая следующие ключи:
//			Дата - Дата и время - дата, на которую необходимо получить остатки по регистрам;
//			Организация - СправочникСсылка.Организации - организация, по которой необходимо получить данные;
//			ПустойДокумент - Булево - если Истина, то документ этого месяца не содержит строк дебиторской задолженности.
// Возвращаемое значение:
// 		РезультатЗапроса - Данные результата запроса.
//
Функция ПолучитьДанныеДляЗаполненияДебиторскойЗадолженности(ПараметрыЗаполнения, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонецЕсли;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаДебиторскаяЗадолженность();
	
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", ПараметрыЗаполнения.Дата);
	Запрос.УстановитьПараметр("ГраницаКонцаМесяца", Новый Граница(ПараметрыЗаполнения.Дата,
		ВидГраницы.Включая)); // Для получения остатков взаиморасчетов включая последнюю секунду месяца
	Запрос.УстановитьПараметр("ПустойДокумент", ПараметрыЗаполнения.ПустойДокумент);
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	Запрос.УстановитьПараметр("ИспользоватьДоговорыКредитовИДепозитов", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов"));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ПараметрыЗаполнения.Организация));
	Запрос.УстановитьПараметр("ТипПретензий", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Претензии"));
	
	ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента(Запрос.МенеджерВременныхТаблиц, ПараметрыЗаполнения.Дата);
	ВзаиморасчетыСервер.РассчитатьДатыПлатежаПоставщика(Запрос.МенеджерВременныхТаблиц, ПараметрыЗаполнения.Дата);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает данные о встречной (кредиторской) задолженности, необходимые для расчета резервов по сомнительным долгам.
// Необходимо только с 01.01.2017 согласно пункту 1 статьи 266 НК РФ (в ред. Федерального закона от 30.11.2016 № 401-ФЗ).
//
// Параметры:
// 		ПараметрыЗаполнения - Структура - структура, содержащая следующие ключи:
//			Дата - Дата и время - дата, на которую необходимо получить остатки по регистрам;
//			Ссылка - ДокументСсылка - ссылка на документ, остатки по которому не надо учитывать при получении остатков по регистрам;
//			Организация - СправочникСсылка.Организации - организация, по которой необходимо получить данные;
//			МассивКонтрагентов - Массив - массив контрагентов, по которым необходимо получить данные.
// Возвращаемое значение:
// 		РезультатЗапроса - Данные результата запроса.
//
Функция ПолучитьДанныеДляЗаполненияКредиторскойЗадолженности(ПараметрыЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКредиторскаяЗадолженность();
	
	Для Каждого Элемент Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ГраницаКонцаМесяца", Новый Граница(ПараметрыЗаполнения.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает пустую таблицу оценки задолженности 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица оценки
//
Функция ПустаяТаблицаОценки() Экспорт
	
	ТаблицаОценки = Новый ТаблицаЗначений;
	ТаблицаОценки.Колонки.Добавить("ВидЗадолженности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗадолженности"));
	ТаблицаОценки.Колонки.Добавить("НижняяГраницаИнтервала", Новый ОписаниеТипов("Число"));
	ТаблицаОценки.Колонки.Добавить("ВерхняяГраницаИнтервала", Новый ОписаниеТипов("Число"));
	ТаблицаОценки.Колонки.Добавить("Оценка", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаОценки;
	
КонецФункции

// Возвращает таблицу оценки задолженности в соответствии со статьей 266 НК РФ.
//
// Возвращаемое значение:
// 		ТаблицаЗначений - пустая таблица оценки (См. ПустаяТаблицаОценки)
//
Функция ТаблицаОценкиНУ() Экспорт
	
	ТаблицаОценки = ПустаяТаблицаОценки();
	
	ИнтервалыОценки = Новый Массив;
	ИнтервалыОценки.Добавить(ПолучитьИнтервалОценки(1, 44, 0));
	ИнтервалыОценки.Добавить(ПолучитьИнтервалОценки(45, 90, 50));
	ИнтервалыОценки.Добавить(ПолучитьИнтервалОценки(91, 9999999999, 100));
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыЗадолженности.ЗначенияПеречисления Цикл
		Если ЗначениеПеречисления.Имя = "ЗадолженностьКонтрагентовРегл" Тогда
			Для Каждого Интервал Из ИнтервалыОценки Цикл
				НоваяСтрока = ТаблицаОценки.Добавить();
				НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности[ЗначениеПеречисления.Имя];
				НоваяСтрока.НижняяГраницаИнтервала = Интервал.Нижняя;
				НоваяСтрока.ВерхняяГраницаИнтервала = Интервал.Верхняя;
				НоваяСтрока.Оценка = Интервал.Оценка;
			КонецЦикла;
		Иначе
			НоваяСтрока = ТаблицаОценки.Добавить();
			НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности[ЗначениеПеречисления.Имя];
			НоваяСтрока.НижняяГраницаИнтервала = 1;
			НоваяСтрока.ВерхняяГраницаИнтервала = 9999999999;
			НоваяСтрока.Оценка = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОценки;
	
КонецФункции

// Возвращает оценку (процент) из переданной таблицы оценки задолженности, либо если таблица оценки не задана, то
// сперва получает таблицу оценки из учетной политики переданной организации на указанный период.
//
// Параметры:
// 	ВидЗадолженности - ПеречислениеСсылка.ВидыЗадолженности - вид задолженности, для которого нужно получить оценку
// 	СрокЗадолженности - Число - количество дней задолженности
// 	ДополнительныеПараметры - Структура - структура дополнительных параметров вида:
// 		ТаблицаОценки - ТаблицаЗначений - Таблица порядка оценки задолженности (См. ПустаяТаблицаОценки)
// 		Организация - Справочник.Организация - Если не передана ТаблицаОценки, то она будет получена по данной организации
// 		Период - Дата - Если не передана ТаблицаОценки, то она будет получена на эту дату.
//
// Возвращаемое значение:
// 	Число - оценка (процент) задолженности
//
Функция ПолучитьОценку(ВидЗадолженности, СрокЗадолженности, ДополнительныеПараметры) Экспорт

	Оценка = 0;

	Если ДополнительныеПараметры.Свойство("ТаблицаОценки") Тогда
		ТаблицаОценки = ДополнительныеПараметры.ТаблицаОценки;
	ИначеЕсли ДополнительныеПараметры.Свойство("Организация") И ДополнительныеПараметры.Свойство("Период") Тогда 
		ТаблицаОценки = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТаблицаОценкиБУ(ДополнительныеПараметры.Организация,
			ДополнительныеПараметры.Период);
	Иначе
		ТаблицаОценки = ПустаяТаблицаОценки();
	КонецЕсли;

	НайденныеСтроки = ТаблицаОценки.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если
			НайденнаяСтрока.НижняяГраницаИнтервала > СрокЗадолженности Или
			НайденнаяСтрока.ВерхняяГраницаИнтервала < СрокЗадолженности
		Тогда
			Продолжить;
		КонецЕсли;

		Оценка = НайденнаяСтрока.Оценка;
		Прервать;
	КонецЦикла;

	Возврат Оценка;

КонецФункции

// Возвращает период расчета резервов, либо Неопределено в случае,
// если начиная с данного периода резервы не начисляются.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации - организация, по которой нужно получить период расчета резервов
// 	Период - Дата - дата, на которую нужно получить данные
//
// Возвращаемое значение:
// 	Дата, Неопределено - дату начла начисления резервов или Неопределено, если резервы не начисляются
//
Функция ПериодРасчетаРезервовПоСомнительнымДолгам(Организация, Период) Экспорт
	
	Результат = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ПериодРасчетаРезервовПоСомнительнымДолгам(Организация, Период);
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("УчетнаяПолитикаФинансовогоУчета",
		Организация,
		Период);
		
	ФормироватьРезервыПоСомнительнымДолгамУУ = ?(НЕ ПараметрыУчетнойПолитики = Неопределено,
		ПараметрыУчетнойПолитики.ФормироватьРезервыПоСомнительнымДолгам, Ложь);
	
	Если ФормироватьРезервыПоСомнительнымДолгамУУ Тогда
		Возврат Период;
	ИначеЕсли ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ГОД) КАК НачалоГода,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ОтражатьВБухгалтерскомУчете,
	|	ДанныеДокумента.ОтражатьВНалоговомУчете,
	|	ДанныеДокумента.ОтражатьВУправленческомУчете,
	|	ВЫБОР КОГДА ДанныеДокумента.ОтражатьВБухгалтерскомУчете ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК БУ,
	|	ВЫБОР КОГДА ДанныеДокумента.ОтражатьВНалоговомУчете ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК НУ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОтражатьВУправленческомУчете
	|				ИЛИ ДанныеДокумента.ОтражатьВБухгалтерскомУчете
	|				ИЛИ ДанныеДокумента.ОтражатьВНалоговомУчете
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УУ,
	|	ДанныеДокумента.МоментВремени,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Ответственный КАК Ответственный
	|
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
		
	// Работа с валютой и курсами валют.
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ДополнитьПараметрыИнициализации(Запрос, Реквизиты);
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам"));
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("ХозОперацияДляРеестра", Перечисления.ХозяйственныеОперации.НачислениеСписаниеРезервовПоСомнительнымДолгам);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("ТаблицаКоэффициентовПересчетаВВалютуУпр") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКоэффициентов = Новый ТаблицаЗначений;
	ТаблицаКоэффициентов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКоэффициентов.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями"));
	ТаблицаКоэффициентов.Колонки.Добавить("ВариантКурсаДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыКурсаДоговора"));
	ТаблицаКоэффициентов.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Строки.Валюта КАК Валюта,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ЕСТЬNULL(
	|		ОбъектыРасчетов.Договор.ВариантКурсаДоговора, 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ДебиторскаяЗадолженность КАК Строки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО Строки.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Строки.Валюта КАК Валюта,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ЕСТЬNULL(
	|		ОбъектыРасчетов.Договор.ВариантКурсаДоговора, 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПогашеннаяЗадолженность КАК Строки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО Строки.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|ГДЕ
	|	Строки.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКоэффициентов.Добавить();
		НоваяСтрока.Валюта               = Выборка.Валюта;
		НоваяСтрока.Договор              = Выборка.Договор;
		НоваяСтрока.ВариантКурсаДоговора = Выборка.ВариантКурсаДоговора;
		ПараметрыВариантаКурсаДоговора   = РаботаСКурсамиВалютУТ.ПараметрыВариантаКурсаДоговора();
		ПараметрыВариантаКурсаДоговора.ВариантКурсаДоговора = Выборка.ВариантКурсаДоговора;
		ПараметрыВариантаКурсаДоговора.ВалютаВзаиморасчетов = Выборка.Валюта;
		ПараметрыВариантаКурсаДоговора.Договор              = Выборка.Договор;
		НоваяСтрока.Коэффициент        = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
			Выборка.Валюта,
			Запрос.Параметры.ВалютаУправленческогоУчета, 
			Запрос.Параметры.Период,,
			ПараметрыВариантаКурсаДоговора);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаКоэффициентовПересчетаВВалютуУпр",  ТаблицаКоэффициентов);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПоПартнерамИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	Резервы.Партнер КАК Партнер,
	|	Резервы.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Резервы.Договор) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОГДА ТИПЗНАЧЕНИЯ(Резервы.Контрагент) = ТИП(Справочник.Организации) И Резервы.Договор = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|		КОГДА Резервы.Договор = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		ИНАЧЕ
	|			Резервы.Договор
	|	КОНЕЦ КАК Договор,
	|	Резервы.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ДебиторскаяЗадолженность КАК Резервы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО &Организация = Аналитика.Организация
	|		И Резервы.Контрагент = Аналитика.Контрагент
	|		И Резервы.Партнер = Аналитика.Партнер
	|		И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Резервы.Договор) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОГДА ТИПЗНАЧЕНИЯ(Резервы.Контрагент) = ТИП(Справочник.Организации) И Резервы.Договор = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|			КОГДА Резервы.Договор = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ИНАЧЕ
	|				Резервы.Договор
	|		КОНЕЦ = Аналитика.Договор
	|		И Резервы.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	Резервы.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Организация", Запрос.Параметры.Организация);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПоПартнерамИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_РезервыНачисленоВосстановлено", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтРезервыНачисленоВосстановлено(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	вт_РезервыНачисленоВосстановлено.Подразделение КАК Подразделение,
	|	вт_РезервыНачисленоВосстановлено.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(вт_РезервыНачисленоВосстановлено.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ вт_РезервыНачисленоВосстановлено.Партнер
	|	КОНЕЦ КАК Партнер,
	|	вт_РезервыНачисленоВосстановлено.Контрагент КАК Контрагент,
	|	вт_РезервыНачисленоВосстановлено.Договор КАК Договор,
	|	вт_РезервыНачисленоВосстановлено.ОбъектРасчетов КАК ОбъектРасчетов,
	|	
	|	вт_РезервыНачисленоВосстановлено.НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам) КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	&Организация КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	
	|	вт_РезервыНачисленоВосстановлено.НачисленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	вт_РезервыНачисленоВосстановлено.НачисленоБУ КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	вт_РезервыНачисленоВосстановлено.Валюта КАК Валюта,
	|	вт_РезервыНачисленоВосстановлено.Начислено КАК СуммаВВалюте,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	0 КАК СуммаВВалютеВзаиморасчетов,
	|	вт_РезервыНачисленоВосстановлено.ОбъектРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
	|	вт_РезервыНачисленоВосстановлено КАК вт_РезервыНачисленоВосстановлено
	|ГДЕ
	|	НЕ вт_РезервыНачисленоВосстановлено.НачисленоБУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.Начислено = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	вт_РезервыНачисленоВосстановлено.Подразделение КАК Подразделение,
	|	вт_РезервыНачисленоВосстановлено.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(вт_РезервыНачисленоВосстановлено.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ вт_РезервыНачисленоВосстановлено.Партнер
	|	КОНЕЦ КАК Партнер,
	|	вт_РезервыНачисленоВосстановлено.Контрагент КАК Контрагент,
	|	вт_РезервыНачисленоВосстановлено.Договор КАК Договор,
	|	вт_РезервыНачисленоВосстановлено.ОбъектРасчетов КАК ОбъектРасчетов,
	|	
	|	вт_РезервыНачисленоВосстановлено.НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) КАК СтатьяДоходовРасходов,
	|	&Организация КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	
	|	вт_РезервыНачисленоВосстановлено.ВосстановленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	вт_РезервыНачисленоВосстановлено.ВосстановленоБУ КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	вт_РезервыНачисленоВосстановлено.Валюта КАК Валюта,
	|	вт_РезервыНачисленоВосстановлено.Восстановлено КАК СуммаВВалюте,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	0 КАК СуммаВВалютеВзаиморасчетов,
	|	вт_РезервыНачисленоВосстановлено.ОбъектРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
	|	вт_РезервыНачисленоВосстановлено КАК вт_РезервыНачисленоВосстановлено
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_КоэффициентыПересчетаВВалютуУпр КАК вт_КоэффициентыПересчетаВВалютуУпр
	|		ПО вт_РезервыНачисленоВосстановлено.Валюта = вт_КоэффициентыПересчетаВВалютуУпр.Валюта
	|			И вт_РезервыНачисленоВосстановлено.Договор = вт_КоэффициентыПересчетаВВалютуУпр.Договор
	|ГДЕ
	|	НЕ вт_РезервыНачисленоВосстановлено.ВосстановленоБУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.Восстановлено = 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_РезервыНачисленоВосстановлено", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтРезервыНачисленоВосстановлено(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	вт_РезервыНачисленоВосстановлено.Подразделение КАК Подразделение,
	|	вт_РезервыНачисленоВосстановлено.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ЗакрытиеРезервовПоСомнительнымДолгам) КАК СтатьяДоходов,
	|	&Организация КАК АналитикаДоходов,
	|	
	|	вт_РезервыНачисленоВосстановлено.ВосстановленоУпр КАК Сумма,
	|	вт_РезервыНачисленоВосстановлено.ВосстановленоБУ КАК СуммаРегл,
	|	вт_РезервыНачисленоВосстановлено.ВосстановленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации 
	|	
	|ИЗ
	|	вт_РезервыНачисленоВосстановлено КАК вт_РезервыНачисленоВосстановлено
	|ГДЕ
	|	НЕ вт_РезервыНачисленоВосстановлено.ВосстановленоБУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.Восстановлено = 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРезервыПоСомнительнымДолгам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РезервыПоСомнительнымДолгам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_РезервыНачисленоВосстановлено", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтРезервыНачисленоВосстановлено(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	вт_РезервыНачисленоВосстановлено.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	вт_РезервыНачисленоВосстановлено.ОбъектРасчетов КАК ОбъектРасчетов,
	|	вт_РезервыНачисленоВосстановлено.РасчетныйДокумент КАК РасчетныйДокумент,
	|	вт_РезервыНачисленоВосстановлено.ТипСуммы КАК ТипСуммы,
	|	вт_РезервыНачисленоВосстановлено.Валюта КАК Валюта,
	|	
	|	вт_РезервыНачисленоВосстановлено.Начислено КАК Сумма,
	|	вт_РезервыНачисленоВосстановлено.НачисленоБУ КАК СуммаРегл,
	|	&ВР * (вт_РезервыНачисленоВосстановлено.НачисленоБУ - вт_РезервыНачисленоВосстановлено.НачисленоНУ) КАК ВременнаяРазница,
	|	&ПР * (вт_РезервыНачисленоВосстановлено.НачисленоБУ - вт_РезервыНачисленоВосстановлено.НачисленоНУ) КАК ПостояннаяРазница,
	|	вт_РезервыНачисленоВосстановлено.НачисленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки,
	|	
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации 
	|	
	|ИЗ
	|	вт_РезервыНачисленоВосстановлено КАК вт_РезервыНачисленоВосстановлено
	|ГДЕ
	|	НЕ вт_РезервыНачисленоВосстановлено.НачисленоБУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.НачисленоНУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.Начислено = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	вт_РезервыНачисленоВосстановлено.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	вт_РезервыНачисленоВосстановлено.ОбъектРасчетов КАК ОбъектРасчетов,
	|	вт_РезервыНачисленоВосстановлено.РасчетныйДокумент КАК РасчетныйДокумент,
	|	вт_РезервыНачисленоВосстановлено.ТипСуммы КАК ТипСуммы,
	|	вт_РезервыНачисленоВосстановлено.Валюта КАК Валюта,
	|	
	|	вт_РезервыНачисленоВосстановлено.Восстановлено КАК Сумма,
	|	вт_РезервыНачисленоВосстановлено.ВосстановленоБУ КАК СуммаРегл,
	|	&ВР * (вт_РезервыНачисленоВосстановлено.ВосстановленоБУ - вт_РезервыНачисленоВосстановлено.ВосстановленоНУ) КАК ВременнаяРазница,
	|	&ПР * (вт_РезервыНачисленоВосстановлено.ВосстановленоБУ - вт_РезервыНачисленоВосстановлено.ВосстановленоНУ) КАК ПостояннаяРазница,
	|	вт_РезервыНачисленоВосстановлено.ВосстановленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки,
	|	
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации 
	|	
	|ИЗ
	|	вт_РезервыНачисленоВосстановлено КАК вт_РезервыНачисленоВосстановлено
	|ГДЕ
	|	НЕ вт_РезервыНачисленоВосстановлено.ВосстановленоБУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.ВосстановленоНУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.Восстановлено = 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	&Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	вт_РезервыНачисленоВосстановлено.АналитикаУчетаПоПартнерам,
	|	вт_РезервыНачисленоВосстановлено.ОбъектРасчетов,
	|	вт_РезервыНачисленоВосстановлено.РасчетныйДокумент,
	|	вт_РезервыНачисленоВосстановлено.ТипСуммы,
	|	вт_РезервыНачисленоВосстановлено.Валюта,
	|
	|	0,
	|	0,
	|	вт_РезервыНачисленоВосстановлено.СуммаПР,
	|	-вт_РезервыНачисленоВосстановлено.СуммаПР,
	|	0,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПоСомнительнымДолгам),
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки,
	|
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	вт_РезервыНачисленоВосстановлено КАК вт_РезервыНачисленоВосстановлено
	|ГДЕ
	|	&ИзмененВидРазниц
	|	И вт_РезервыНачисленоВосстановлено.СуммаПР <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Таблица аналитики учета по партнерам по организации.
//
Функция ТекстЗапросаТаблицаВтАналитикаУчета(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "вт_АналитикаУчета";
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики,
	|	АналитикаУчетаПоПартнерам.Партнер,
	|	АналитикаУчетаПоПартнерам.Контрагент,
	|	АналитикаУчетаПоПартнерам.Договор,
	|	АналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|ПОМЕСТИТЬ вт_АналитикаУчета
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Таблица коэффициентов пересчета из возможных валют задолженности документа в валюту управленческого учета.
// Таблица значений инициализирована как параметр запроса "ТаблицаКоэффициентовПересчетаВВалютуУпр".
//
Функция ТекстЗапросаТаблицаВтКоэффициентыПересчетаВВалютуУпр(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "вт_КоэффициентыПересчетаВВалютуУпр";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаКоэффициентов.Валюта,
	|	ТаблицаКоэффициентов.Договор,
	|	ТаблицаКоэффициентов.ВариантКурсаДоговора,
	|	ТаблицаКоэффициентов.Коэффициент
	|ПОМЕСТИТЬ вт_КоэффициентыПересчетаВВалютуУпр
	|ИЗ
	|	&ТаблицаКоэффициентовПересчетаВВалютуУпр КАК ТаблицаКоэффициентов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Таблица резервов, соответствующая табличной части Дебиторская задолженность.
// На одну задолженность может быть несколько строк на разные сроки.
// 
// Параметры:
// 	Запрос - Запрос -
// 	ТекстыЗапроса - СписокЗначений -
// Возвращаемое значение:
// 	Строка - текст запроса
Функция ТекстЗапросаТаблицаВтРезервы(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "вт_Резервы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_АналитикаУчета", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтАналитикаУчета(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР
	|		КОГДА Строки.ВидЗадолженности = ЗНАЧЕНИЕ(перечисление.ВидыЗадолженности.Прочее)
	|				И Строки.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Строки.Договор) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|							ИЛИ ТИПЗНАЧЕНИЯ(Строки.Договор) = ТИП(Справочник.ДоговорыАренды)
	|						ТОГДА Строки.Договор
	|					ИНАЧЕ Строки.ОбъектРасчетов
	|				КОНЕЦ
	|		ИНАЧЕ Строки.ОбъектРасчетов
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	Строки.РасчетныйДокумент,
	|	Строки.ТипСуммы,
	|	Строки.Валюта,
	|	
	|	Строки.СуммаЗадолженности,
	|	Строки.СуммаЗадолженностиРегл,
	|	Строки.СуммаОбеспечения,
	|	Строки.ВстречнаяЗадолженность,
	|	Строки.Оценка,
	|	&БУ * Строки.РезервБУ * ВЫБОР КОГДА Строки.НеНачислять ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК РезервБУ,
	|	&НУ * Строки.РезервНУ * ВЫБОР КОГДА Строки.НеНачислять ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК РезервНУ,
	|	&НУ * Строки.РезервНУВПределахОграничения * ВЫБОР КОГДА Строки.НеНачислять ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК РезервНУВПределахОграничения,
	|	&УУ * Строки.Резерв * ВЫБОР КОГДА Строки.НеНачислять ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК Резерв,
	|	
	|	Строки.ДатаВозникновенияЗадолженности,
	|	Строки.СрокЗадолженности,
	|	
	|	Строки.Партнер,
	|	Строки.Контрагент,
	|	Строки.Договор,
	|	Строки.НаправлениеДеятельности,
	|	Строки.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	
	|	Строки.ИдентификаторСтроки,
	|	Строки.НомерСтроки,
	|	Строки.НеНачислять
	|
	|ПОМЕСТИТЬ вт_Резервы
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ДебиторскаяЗадолженность КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_АналитикаУчета КАК Аналитика
	|		ПО Строки.Партнер = Аналитика.Партнер
	|		И Строки.Контрагент = Аналитика.Контрагент
	|		И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Строки.Договор) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОГДА ТИПЗНАЧЕНИЯ(Строки.Контрагент) = ТИП(Справочник.Организации) И Строки.Договор = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|			КОГДА Строки.Договор = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ИНАЧЕ
	|				Строки.Договор
	|		КОНЕЦ = Аналитика.Договор
	|		И Строки.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.АналитикаУчетаПоПартнерам,
	|	Строки.ОбъектРасчетов,
	|	Строки.РасчетныйДокумент,
	|	Строки.ТипСуммы,
	|	Строки.Валюта,
	|	
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	
	|	ДАТАВРЕМЯ(1,1,1),
	|	0,
	|	
	|	Строки.АналитикаУчетаПоПартнерам.Партнер,
	|	Строки.АналитикаУчетаПоПартнерам.Контрагент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Строки.ОбъектРасчетов) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|			ТОГДА Строки.ОбъектРасчетов
	|		ИНАЧЕ
	|			Строки.АналитикаУчетаПоПартнерам.Договор
	|	КОНЕЦ,
	|	Строки.АналитикаУчетаПоПартнерам.НаправлениеДеятельности,
	|	Строки.ОбъектРасчетов.Подразделение,
	|	
	|	Строки.ИдентификаторСтроки,
	|	Строки.НомерСтроки,
	|	NULL
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПогашеннаяЗадолженность КАК Строки
	|ГДЕ
	|	Строки.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Свернутая до каждой задолженности таблица резервов.
// В разрезах: Аналитика учета по партнерам, Объект расчетов, Расчетный документ, Тип суммы, Валюта.
//
Функция ТекстЗапросаТаблицаВтРезервыСводно(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "вт_РезервыСводно";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_Резервы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтРезервы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	вт_Резервы.АналитикаУчетаПоПартнерам,
	|	вт_Резервы.ОбъектРасчетов,
	|	вт_Резервы.РасчетныйДокумент,
	|	вт_Резервы.ТипСуммы,
	|	вт_Резервы.Валюта,
	|	
	|	СУММА(вт_Резервы.СуммаЗадолженности) КАК СуммаЗадолженности,
	|	СУММА(вт_Резервы.СуммаЗадолженностиРегл) КАК СуммаЗадолженностиРегл,
	|	СУММА(вт_Резервы.СуммаОбеспечения) КАК СуммаОбеспечения,
	|	СУММА(вт_Резервы.ВстречнаяЗадолженность) КАК ВстречнаяЗадолженность,
	|	СУММА(вт_Резервы.РезервБУ) КАК РезервБУ,
	|	СУММА(вт_Резервы.РезервНУ) КАК РезервНУ,
	|	СУММА(вт_Резервы.РезервНУВПределахОграничения) КАК РезервНУВПределахОграничения,
	|	СУММА(вт_Резервы.Резерв) КАК Резерв,
	|	
	|	МАКСИМУМ(вт_Резервы.Партнер) КАК Партнер,
	|	МАКСИМУМ(вт_Резервы.Контрагент) КАК Контрагент,
	|	МАКСИМУМ(вт_Резервы.Договор) КАК Договор,
	|	МАКСИМУМ(вт_Резервы.НаправлениеДеятельности) КАК НаправлениеДеятельности,
	|	МАКСИМУМ(вт_Резервы.Подразделение) КАК Подразделение,
	|	
	|	МАКСИМУМ(вт_Резервы.ИдентификаторСтроки) КАК ИдентификаторСтроки,
	|	МИНИМУМ(вт_Резервы.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ вт_РезервыСводно
	|ИЗ
	|	вт_Резервы КАК вт_Резервы
	|СГРУППИРОВАТЬ ПО
	|	вт_Резервы.АналитикаУчетаПоПартнерам,
	|	вт_Резервы.ОбъектРасчетов,
	|	вт_Резервы.РасчетныйДокумент,
	|	вт_Резервы.ТипСуммы,
	|	вт_Резервы.Валюта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Таблица остатков резервов из регистра накопления РезервыПоСомнительнымДолгам.
//
Функция ТекстЗапросаТаблицаВтОстаткиРезервов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "вт_ОстаткиРезервов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_АналитикаУчета", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтАналитикаУчета(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиРезервов.АналитикаУчетаПоПартнерам,
	|	ОстаткиРезервов.ОбъектРасчетов,
	|	ОстаткиРезервов.РасчетныйДокумент,
	|	ОстаткиРезервов.ТипСуммы,
	|	ОстаткиРезервов.Валюта,
	|	
	|	&БУ * -ОстаткиРезервов.СуммаРеглОстаток КАК СуммаБУ,
	|	&НУ * -(ОстаткиРезервов.СуммаРеглОстаток - ОстаткиРезервов.ВременнаяРазницаОстаток - ОстаткиРезервов.ПостояннаяРазницаОстаток) КАК СуммаНУ,
	|	&УУ * -ОстаткиРезервов.СуммаУпрОстаток КАК СуммаУпр,
	|	&УУ * -ОстаткиРезервов.СуммаОстаток КАК Сумма,
	|	- ОстаткиРезервов.ПостояннаяРазницаОстаток КАК СуммаПР,
	|	
	|	ЕСТЬNULL(-ОстаткиРезервовПредыдущегоГода.СуммаРеглОстаток, 0) КАК ОстатокРезерваПредыдущегоГода
	|ПОМЕСТИТЬ вт_ОстаткиРезервов
	|ИЗ
	|	РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(&МоментВремени, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			вт_АналитикаУчета КАК Т)) КАК ОстаткиРезервов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(&НачалоГода, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			вт_АналитикаУчета КАК Т)) КАК ОстаткиРезервовПредыдущегоГода
	|	ПО &ПрименятьПункт70Приказа34н
	|		И ОстаткиРезервов.АналитикаУчетаПоПартнерам = ОстаткиРезервовПредыдущегоГода.АналитикаУчетаПоПартнерам
	|		И ОстаткиРезервов.ОбъектРасчетов = ОстаткиРезервовПредыдущегоГода.ОбъектРасчетов
	|		И ОстаткиРезервов.РасчетныйДокумент = ОстаткиРезервовПредыдущегоГода.РасчетныйДокумент
	|		И ОстаткиРезервов.ТипСуммы = ОстаткиРезервовПредыдущегоГода.ТипСуммы
	|		И ОстаткиРезервов.Валюта = ОстаткиРезервовПредыдущегоГода.Валюта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Свернутая таблица резервов, дополненная данными остатков резервов и разложенная на сумму начисления и восстановления.
// В разрезах: Аналитика учета по партнерам, Объект расчетов, Расчетный документ, Тип суммы, Валюта.
//
// Параметры:
// 	Запрос - Запрос -
// 	ТекстыЗапроса - СписокЗначений -
// Возвращаемое значение:
// 	Строка - текст запроса
Функция ТекстЗапросаТаблицаВтРезервыНачисленоВосстановлено(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "вт_РезервыНачисленоВосстановлено";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_РезервыСводно", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтРезервыСводно(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_ОстаткиРезервов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтОстаткиРезервов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_КоэффициентыПересчетаВВалютуУпр", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтКоэффициентыПересчетаВВалютуУпр(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	вт_РезервыСводно.АналитикаУчетаПоПартнерам,
	|	вт_РезервыСводно.ОбъектРасчетов,
	|	вт_РезервыСводно.РасчетныйДокумент,
	|	вт_РезервыСводно.ТипСуммы,
	|	вт_РезервыСводно.Валюта,
	|	
	|	ЕСТЬNULL(вт_ОстаткиРезервов.СуммаБУ, 0) КАК НачисленоРанееБУ,
	|	ЕСТЬNULL(вт_ОстаткиРезервов.СуммаНУ, 0) КАК НачисленоРанееНУ,
	|	ЕСТЬNULL(вт_ОстаткиРезервов.СуммаПР, 0) КАК СуммаПР,
	|	
	|	// Начислено
	|	
	|	(вт_РезервыСводно.Резерв - ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.Резерв > ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начислено,
	|	(вт_РезервыСводно.РезервБУ - ЕСТЬNULL(вт_ОстаткиРезервов.СуммаБУ, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.РезервБУ > ЕСТЬNULL(вт_ОстаткиРезервов.СуммаБУ, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоБУ,
	|	(вт_РезервыСводно.РезервНУВПределахОграничения - ЕСТЬNULL(вт_ОстаткиРезервов.СуммаНУ, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.РезервНУВПределахОграничения > ЕСТЬNULL(вт_ОстаткиРезервов.СуммаНУ, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоНУ,
	|	ВЫРАЗИТЬ((вт_РезервыСводно.Резерв - ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.Резерв > ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА вт_РезервыСводно.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(вт_КоэффициентыПересчетаВВалютуУпр.Коэффициент, 0)
	|	КОНЕЦ КАК ЧИСЛО(31,2)) КАК НачисленоУпр,
	|	
	|	// Восстановлено
	|	
	|	(вт_РезервыСводно.Резерв - ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.Резерв > ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК Восстановлено,
	|	(вт_РезервыСводно.РезервБУ - ЕСТЬNULL(вт_ОстаткиРезервов.СуммаБУ, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.РезервБУ > ЕСТЬNULL(вт_ОстаткиРезервов.СуммаБУ, 0)
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ВосстановленоБУ,
	|	(вт_РезервыСводно.РезервНУВПределахОграничения - ЕСТЬNULL(вт_ОстаткиРезервов.СуммаНУ, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.РезервНУВПределахОграничения > ЕСТЬNULL(вт_ОстаткиРезервов.СуммаНУ, 0)
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ВосстановленоНУ,
	|	ВЫРАЗИТЬ((вт_РезервыСводно.Резерв - ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)) * ВЫБОР
	|		КОГДА вт_РезервыСводно.Резерв > ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ * ВЫБОР
	|		КОГДА вт_РезервыСводно.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(вт_КоэффициентыПересчетаВВалютуУпр.Коэффициент, 0)
	|	КОНЕЦ КАК ЧИСЛО(31,2)) КАК ВосстановленоУпр,
	|	
	|	// Присоединено
	|	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(вт_ОстаткиРезервов.ОстатокРезерваПредыдущегоГода, 0) > вт_РезервыСводно.РезервБУ
	|			ТОГДА вт_РезервыСводно.РезервБУ
	|		ИНАЧЕ ЕСТЬNULL(вт_ОстаткиРезервов.ОстатокРезерваПредыдущегоГода, 0)
	|	КОНЕЦ КАК ПрисоединеноБУ,
	|	вт_РезервыСводно.РезервНУВПределахОграничения КАК НачисленоСНачалаГодаНУ,
	|	
	|	// Сопутствующая аналитика
	|	
	|	вт_РезервыСводно.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	вт_РезервыСводно.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА вт_РезервыСводно.ОбъектРасчетов ССЫЛКА Справочник.ОбъектыРасчетов
	|			ТОГДА вт_РезервыСводно.ОбъектРасчетов.Договор
	|		КОГДА вт_РезервыСводно.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(вт_РезервыСводно.АналитикаУчетаПоПартнерам.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|		ИНАЧЕ вт_РезервыСводно.ОбъектРасчетов
	|	КОНЕЦ КАК Договор,
	|	вт_РезервыСводно.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	вт_РезервыСводно.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	
	|	вт_РезервыСводно.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	вт_РезервыСводно.НомерСтроки
	|ПОМЕСТИТЬ вт_РезервыНачисленоВосстановлено
	|ИЗ
	|	вт_РезервыСводно КАК вт_РезервыСводно
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_ОстаткиРезервов КАК вт_ОстаткиРезервов
	|		ПО вт_РезервыСводно.АналитикаУчетаПоПартнерам = вт_ОстаткиРезервов.АналитикаУчетаПоПартнерам
	|		И вт_РезервыСводно.ОбъектРасчетов = вт_ОстаткиРезервов.ОбъектРасчетов
	|		И вт_РезервыСводно.РасчетныйДокумент = вт_ОстаткиРезервов.РасчетныйДокумент
	|		И вт_РезервыСводно.ТипСуммы = вт_ОстаткиРезервов.ТипСуммы
	|		И вт_РезервыСводно.Валюта = вт_ОстаткиРезервов.Валюта
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_КоэффициентыПересчетаВВалютуУпр КАК вт_КоэффициентыПересчетаВВалютуУпр
	|		ПО вт_РезервыСводно.Валюта = вт_КоэффициентыПересчетаВВалютуУпр.Валюта
	|			И вт_РезервыСводно.АналитикаУчетаПоПартнерам.Договор = вт_КоэффициентыПересчетаВВалютуУпр.Договор
	|ГДЕ
	|	НЕ вт_РезервыСводно.РезервБУ = ЕСТЬNULL(вт_ОстаткиРезервов.СуммаБУ, 0)
	|	ИЛИ НЕ вт_РезервыСводно.РезервНУВПределахОграничения = ЕСТЬNULL(вт_ОстаткиРезервов.СуммаНУ, 0)
	|	ИЛИ НЕ вт_РезервыСводно.Резерв = ЕСТЬNULL(вт_ОстаткиРезервов.Сумма, 0)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("вт_РезервыНачисленоВосстановлено", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтРезервыНачисленоВосстановлено(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы() +
	ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	вт_РезервыНачисленоВосстановлено.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам) КАК СтатьяРасходов,
	|	&Организация КАК АналитикаРасходов,
	|	вт_РезервыНачисленоВосстановлено.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	
	|	вт_РезервыНачисленоВосстановлено.НачисленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|	вт_РезервыНачисленоВосстановлено.НачисленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	вт_РезервыНачисленоВосстановлено.НачисленоУпр * ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|	вт_РезервыНачисленоВосстановлено.НачисленоБУ КАК СуммаСНДСРегл,
	|	вт_РезервыНачисленоВосстановлено.НачисленоБУ КАК СуммаБезНДСРегл,
	|	&ПР * (вт_РезервыНачисленоВосстановлено.НачисленоБУ - вт_РезервыНачисленоВосстановлено.НачисленоНУ) КАК ПостояннаяРазница,
	|	&ВР * (вт_РезервыНачисленоВосстановлено.НачисленоБУ - вт_РезервыНачисленоВосстановлено.НачисленоНУ) КАК ВременнаяРазница,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	
	|	вт_РезервыНачисленоВосстановлено.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеРезервовПоСомнительнымДолгам) КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	вт_РезервыНачисленоВосстановлено КАК вт_РезервыНачисленоВосстановлено
	|ГДЕ
	|	НЕ вт_РезервыНачисленоВосстановлено.НачисленоБУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.НачисленоНУ = 0
	|	ИЛИ НЕ вт_РезервыНачисленоВосстановлено.Начислено = 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&ХозОперацияДляРеестра КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	&Период КАК ДатаДокументаИБ,
	|	&Ссылка КАК Ссылка,
	|	&Номер КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	&Ответственный КАК Ответственный,
	|	НЕОПРЕДЕЛЕНО КАК Автор,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК Дополнительно,
	|	&Комментарий КАК Комментарий,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	0 КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйДокумент,
	|	&Период КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам";
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам"));
	ЗначенияПараметров.Вставить("ХозОперацияДляРеестра", Перечисления.ХозяйственныеОперации.НачислениеСписаниеРезервовПоСомнительнымДолгам);
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Ложь);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	Возврат НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстОтраженияВРеглУчете();
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область Задолженность

Функция ТекстЗапросаДебиторскаяЗадолженность()
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ПредыдущийДокумент
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеСписаниеРезервовПоСомнительнымДолгам.Ссылка КАК Ссылка,
	|	НачислениеСписаниеРезервовПоСомнительнымДолгам.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ вт_ПредыдущийДокумент
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК НачислениеСписаниеРезервовПоСомнительнымДолгам
	|ГДЕ
	|	НачислениеСписаниеРезервовПоСомнительнымДолгам.Организация = &Организация
	|	И НЕ НачислениеСписаниеРезервовПоСомнительнымДолгам.ПометкаУдаления
	|	И (НачислениеСписаниеРезервовПоСомнительнымДолгам.Дата < &КонецМесяца И НачислениеСписаниеРезервовПоСомнительнымДолгам.Проведен
	|		ИЛИ НачислениеСписаниеРезервовПоСомнительнымДолгам.Дата = &КонецМесяца И НЕ &ПустойДокумент)
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеСписаниеРезервовПоСомнительнымДолгам.МоментВремени УБЫВ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ДебиторскаяЗадолженностьИзДокумента
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеДокумента.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеДокумента.ТипСуммы КАК ТипСуммы,
	|	ДанныеДокумента.ДатаВозникновенияЗадолженности КАК ДатаВозникновенияЗадолженности,
	|	ДанныеДокумента.СрокЗадолженности КАК СрокЗадолженности,
	|	ДанныеДокумента.СуммаЗадолженности КАК СуммаЗадолженности,
	|	ДанныеДокумента.СуммаЗадолженностиРегл КАК СуммаЗадолженностиРегл,
	|	ДанныеДокумента.СуммаОбеспеченияПоАналитике КАК СуммаОбеспеченияПоАналитике,
	|	ДанныеДокумента.Оценка КАК Оценка,
	|	ДанныеДокумента.РезервБУ КАК РезервБУ,
	|	ДанныеДокумента.Резерв КАК Резерв,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.ОбъектРасчетов.ТипСсылки,
	|			ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)) = &ТипПретензий
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Прочее)
	|		ИНАЧЕ ДанныеДокумента.ВидЗадолженности
	|	КОНЕЦ КАК ВидЗадолженности,
	|	ДанныеДокумента.НеНачислять КАК НеНачислять,
	|	ДанныеДокумента.РучнаяКорректировка КАК РучнаяКорректировка
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ДебиторскаяЗадолженность КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ПредыдущийДокумент КАК вт_ПредыдущийДокумент
	|		ПО ДанныеДокумента.Ссылка = вт_ПредыдущийДокумент.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ДебиторскаяЗадолженностьИзРегистров
	
	#Область РасчетыПоФинансовымИнструментам
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов КАК Валюта,
	|	ДоговорыКредитовИДепозитов.ХарактерДоговора КАК ХарактерДоговора
	|ПОМЕСТИТЬ вт_ДоговорыКредитовИДепозитов
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|ГДЕ
	|	&ИспользоватьДоговорыКредитовИДепозитов
	|	И ДоговорыКредитовИДепозитов.Организация = &Организация
	|	И ДоговорыКредитовИДепозитов.ХарактерДоговора В (ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит), ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вт_ДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
	|	вт_ДоговорыКредитовИДепозитов.Валюта КАК Валюта,
	|	вт_ДоговорыКредитовИДепозитов.ХарактерДоговора КАК ХарактерДоговора
	|ПОМЕСТИТЬ вт_ДоговорыКредитовИДепозитовВыданные
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(
	|			&ГраницаКонцаМесяца,
	|			(Договор, Валюта) В
	|				(ВЫБРАТЬ
	|					вт_ДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
	|					вт_ДоговорыКредитовИДепозитов.Валюта КАК Валюта
	|				ИЗ
	|					вт_ДоговорыКредитовИДепозитов КАК вт_ДоговорыКредитовИДепозитов)) КАК РасчетыПоФинансовымИнструментамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ДоговорыКредитовИДепозитов КАК вт_ДоговорыКредитовИДепозитов
	|		ПО РасчетыПоФинансовымИнструментамОстатки.Договор = вт_ДоговорыКредитовИДепозитов.Ссылка
	|			И РасчетыПоФинансовымИнструментамОстатки.Валюта = вт_ДоговорыКредитовИДепозитов.Валюта
	|ГДЕ
	|	РасчетыПоФинансовымИнструментамОстатки.СуммаОстаток <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ДоговорыКредитовИДепозитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расчеты.Договор КАК Договор,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.ТипСуммы КАК ТипСуммы,
	|	Расчеты.СуммаРасход КАК Сумма
	|ПОМЕСТИТЬ вт_ПоступлениеСредств
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Обороты(, &ГраницаКонцаМесяца,, Договор В
	|		(ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			вт_ДоговорыКредитовИДепозитовВыданные КАК Т)) КАК Расчеты
	|ГДЕ
	|	Расчеты.СуммаРасход > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вт_ДоговорыКредитовИДепозитовВыданные.Ссылка КАК Договор,
	|	вт_ДоговорыКредитовИДепозитовВыданные.Валюта,
	|	вт_ДоговорыКредитовИДепозитовВыданные.ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) КАК ТипСуммы,
	|	График.Период КАК ДатаВозникновенияЗадолженности,
	|	ВЫБОР
	|		КОГДА График.СуммаИтог - График.Сумма - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0) < 0
	|			ТОГДА График.СуммаИтог - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0)
	|		ИНАЧЕ График.Сумма
	|	КОНЕЦ КАК СуммаЗадолженности
	|ПОМЕСТИТЬ вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ДоговорыКредитовИДепозитовВыданные КАК вт_ДоговорыКредитовИДепозитовВыданные
	|		ПО График.ВариантГрафика.Владелец = вт_ДоговорыКредитовИДепозитовВыданные.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ПоступлениеСредств КАК вт_ПоступлениеСредств
	|		ПО вт_ПоступлениеСредств.Договор = вт_ДоговорыКредитовИДепозитовВыданные.Ссылка
	|		И вт_ПоступлениеСредств.Валюта = вт_ДоговорыКредитовИДепозитовВыданные.Валюта
	|		И вт_ПоступлениеСредств.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|ГДЕ
	|	График.ВариантГрафика.Используется
	|	И НЕ График.ВариантГрафика.ПометкаУдаления
	|	И График.Сумма > 0
	|	И График.СуммаИтог - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0) > 0
	|	И График.Период <= &КонецМесяца
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ДоговорыКредитовИДепозитовВыданные.Ссылка,
	|	вт_ДоговорыКредитовИДепозитовВыданные.Валюта,
	|	вт_ДоговорыКредитовИДепозитовВыданные.ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты),
	|	График.Период,
	|	ВЫБОР
	|		КОГДА График.ПроцентыИтог - График.Проценты - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0) < 0
	|			ТОГДА График.ПроцентыИтог - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0)
	|		ИНАЧЕ График.Проценты
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ДоговорыКредитовИДепозитовВыданные КАК вт_ДоговорыКредитовИДепозитовВыданные
	|		ПО График.ВариантГрафика.Владелец = вт_ДоговорыКредитовИДепозитовВыданные.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ПоступлениеСредств КАК вт_ПоступлениеСредств
	|		ПО вт_ПоступлениеСредств.Договор = вт_ДоговорыКредитовИДепозитовВыданные.Ссылка
	|		И вт_ПоступлениеСредств.Валюта = вт_ДоговорыКредитовИДепозитовВыданные.Валюта
	|		И вт_ПоступлениеСредств.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|ГДЕ
	|	График.ВариантГрафика.Используется
	|	И НЕ График.ВариантГрафика.ПометкаУдаления
	|	И График.Проценты > 0
	|	И График.ПроцентыИтог - ЕСТЬNULL(вт_ПоступлениеСредств.Сумма, 0) > 0
	|	И График.Период <= &КонецМесяца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ДоговорыКредитовИДепозитовВыданные
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПоступлениеСредств";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область АналитикаУчета
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ вт_АналитикаУчета
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область КурсыВалют
	
	// Получим курсы валют на каждую дату возникновения задолженности
	// по валюте взаиморасчетов и валюте регламентированного учета.
	
	ТекстЗапросаКурсыВалют =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам.ДатаВозникновенияЗадолженности КАК Период,
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам.Валюта КАК Валюта
	|ПОМЕСТИТЬ вт_ПериодыВалют
	|ИЗ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам КАК вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам.ДатаВозникновенияЗадолженности,
	|	&ВалютаРегламентированногоУчета
	|ИЗ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам КАК вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ПериодыВалют.Период КАК Период,
	|	вт_ПериодыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ вт_ПериодыКурсов
	|ИЗ
	|	вт_ПериодыВалют КАК вт_ПериодыВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО вт_ПериодыВалют.Валюта = КурсыВалют.Валюта
	|			И вт_ПериодыВалют.Период >= КурсыВалют.Период
	|			И КурсыВалют.БазоваяВалюта = &ВалютаРегламентированногоУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ПериодыВалют.Период,
	|	вт_ПериодыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	ПериодКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ПериодыКурсов.Период КАК Период,
	|	вт_ПериодыКурсов.Валюта КАК Валюта,
	|	КурсыВалют.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ вт_КурсыВалют
	|ИЗ
	|	вт_ПериодыКурсов КАК вт_ПериодыКурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО вт_ПериодыКурсов.Валюта = КурсыВалют.Валюта
	|			И вт_ПериодыКурсов.ПериодКурса = КурсыВалют.Период
	|			И КурсыВалют.БазоваяВалюта = &ВалютаРегламентированногоУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапросаКурсыВалют);
	
	#КонецОбласти
	
	#Область РасчетыСКлиентами
	
	// Запрос использует временную таблицу из ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоСрокамОстатки.Валюта КАК Валюта,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаВозникновенияЗадолженности,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток КАК СуммаЗадолженностиРегл,
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК СуммаЗадолженности
	|ПОМЕСТИТЬ вт_ЗадолженностьРасчетыСКлиентами
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ГраницаКонцаМесяца, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			вт_АналитикаУчета КАК Т)
	|	И НЕ ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|	И НЕ ДатаПлановогоПогашения = ДАТАВРЕМЯ(1, 1, 1)) КАК РасчетыСКлиентамиПоСрокамОстатки
	|ГДЕ
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток > 0
	|	И &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента КАК ОбъектРасчетов,
	|	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументамОстатки.Валюта КАК Валюта,
	|	НАЧАЛОПЕРИОДА(ТаблицаОстатков.ДатаПлатежа, ДЕНЬ) КАК ДатаВозникновенияЗадолженности,
	|	РасчетыСКлиентамиПоДокументамОстатки.ДолгРеглОстаток КАК СуммаЗадолженностиРегл,
	|	РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток КАК СуммаЗадолженности
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	|			&ГраницаКонцаМесяца,
	|			АналитикаУчетаПоПартнерам В (
	|				ВЫБРАТЬ
	|					Т.КлючАналитики
	|				ИЗ
	|					вт_АналитикаУчета КАК Т)) КАК РасчетыСКлиентамиПоДокументамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
	|		ПО РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
	|			И РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
	|			И РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент = ТаблицаОстатков.РасчетныйДокумент
	|			И РасчетыСКлиентамиПоДокументамОстатки.Валюта = ТаблицаОстатков.Валюта
	|ГДЕ
	|	РасчетыСКлиентамиПоДокументамОстатки.ДолгРеглОстаток > 0
	|	И РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента.Объект <> НЕОПРЕДЕЛЕНО
	|	И НЕ &НоваяАрхитектураВзаиморасчетов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыСПоставщиками
	
	// Т.к. на данный момент не информации о планируемой дате зачета аванса, то датой возникновения задолженности
	// считаем дату получения аванса.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	РасчетыСПоставщикамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументамОстатки.Валюта КАК Валюта,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаРеглОстаток КАК ПредоплатаРеглОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаОстаток КАК ПредоплатаОстаток
	|ПОМЕСТИТЬ вт_РасчетыСПоставщикамиПоДокументамОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(
	|			&ГраницаКонцаМесяца,
	|			АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						Т.КлючАналитики
	|					ИЗ
	|						вт_АналитикаУчета КАК Т)
	|				И НЕ ЗаказПоставщику.Объект = НЕОПРЕДЕЛЕНО) КАК РасчетыСПоставщикамиПоДокументамОстатки
	|ГДЕ
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаРеглОстаток > 0
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказПоставщику,
	|	РасчетныйДокумент,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Остатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Остатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Остатки.Валюта КАК Валюта,
	|	МИНИМУМ(ЕСТЬNULL(РасчетыСПоставщикамиПоДокументам.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК Период
	|ПОМЕСТИТЬ вт_ПериодыПоставщика
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_РасчетыСПоставщикамиПоДокументамОстатки КАК Остатки
	|		ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = Остатки.ЗаказПоставщику
	|			И РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = Остатки.РасчетныйДокумент
	|			И РасчетыСПоставщикамиПоДокументам.Валюта = Остатки.Валюта
	|ГДЕ
	|	РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.АналитикаУчетаПоПартнерам,
	|	Остатки.ЗаказПоставщику,
	|	Остатки.Валюта,
	|	Остатки.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокамОстатки.Валюта КАК Валюта,
	|	РасчетыСПоставщикамиПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновенияЗадолженности,
	|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК СуммаЗадолженностиРегл,
	|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаОстаток КАК СуммаЗадолженности
	|ПОМЕСТИТЬ вт_ЗадолженностьРасчетыСПоставщиками
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|			&ГраницаКонцаМесяца,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					Т.КлючАналитики
	|				ИЗ
	|					вт_АналитикаУчета КАК Т)) КАК РасчетыСПоставщикамиПоСрокамОстатки
	|ГДЕ
	|	РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаРеглОстаток > 0
	|	И &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ЗаказПоставщику,
	|	РасчетыСПоставщикамиПоДокументамОстатки.РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументамОстатки.Валюта,
	|	НАЧАЛОПЕРИОДА(вт_ПериодыПоставщика.Период, ДЕНЬ),
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаРеглОстаток,
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаОстаток
	|ИЗ
	|	вт_РасчетыСПоставщикамиПоДокументамОстатки КАК РасчетыСПоставщикамиПоДокументамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ПериодыПоставщика КАК вт_ПериодыПоставщика
	|		ПО РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам = вт_ПериодыПоставщика.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПоДокументамОстатки.ЗаказПоставщику = вт_ПериодыПоставщика.ЗаказПоставщику
	|			И РасчетыСПоставщикамиПоДокументамОстатки.РасчетныйДокумент = вт_ПериодыПоставщика.РасчетныйДокумент
	|			И РасчетыСПоставщикамиПоДокументамОстатки.Валюта = вт_ПериодыПоставщика.Валюта
	|ГДЕ
	|	РасчетыСПоставщикамиПоДокументамОстатки.ПредоплатаРеглОстаток > 0
	|	И НЕ &НоваяАрхитектураВзаиморасчетов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыОбъединение
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка) КАК ТипСуммы,
	|	ВЫБОР
	|		КОГДА Расчеты.Валюта = &ВалютаРегламентированногоУчета
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.ЗадолженностьКонтрагентовРегл)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.ЗадолженностьКонтрагентовВал)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	Расчеты.ДатаВозникновенияЗадолженности,
	|	Расчеты.СуммаЗадолженностиРегл,
	|	Расчеты.СуммаЗадолженности,
	|	Расчеты.Валюта,
	|	ВЫБОР
	|		КОГДА Расчеты.Валюта = &ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеНачислять
	|ПОМЕСТИТЬ вт_ЗаписиРегистров
	|ИЗ
	|	вт_ЗадолженностьРасчетыСКлиентами КАК Расчеты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.ВыданныеАвансы),
	|	Расчеты.ДатаВозникновенияЗадолженности,
	|	Расчеты.СуммаЗадолженностиРегл,
	|	Расчеты.СуммаЗадолженности,
	|	Расчеты.Валюта,
	|	ИСТИНА
	|ИЗ
	|	вт_ЗадолженностьРасчетыСПоставщиками КАК Расчеты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Договор.Партнер,
	|	Расчеты.Договор.Контрагент,
	|	Расчеты.Договор,
	|	Расчеты.Договор.НаправлениеДеятельности,
	|	Расчеты.Договор,
	|	НЕОПРЕДЕЛЕНО,
	|	Расчеты.ТипСуммы,
	|	ВЫБОР
	|		КОГДА Расчеты.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.ВыданныеАвансы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.ЗаймыВыданные)
	|	КОНЕЦ,
	|	Расчеты.ДатаВозникновенияЗадолженности,
	|	ВЫБОР
	|		КОГДА Расчеты.Валюта = &ВалютаРегламентированногоУчета
	|			ТОГДА Расчеты.СуммаЗадолженности
	|		КОГДА КурсыВалют.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА КурсыВалютРегл.Период ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(Расчеты.СуммаЗадолженности
	|				* ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) / ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 0)
	|				/ ЕСТЬNULL(КурсыВалютРегл.КурсЧислитель, 0) * ЕСТЬNULL(КурсыВалютРегл.КурсЗнаменатель, 0) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаЗадолженностиРегл,
	|	Расчеты.СуммаЗадолженности,
	|	Расчеты.Валюта,
	|	ИСТИНА
	|ИЗ
	|	вт_ЗадолженностьРасчетыПоФинансовымИнструментам КАК Расчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалют
	|		ПО Расчеты.Валюта = КурсыВалют.Валюта
	|		И Расчеты.ДатаВозникновенияЗадолженности = КурсыВалют.Период
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_КурсыВалют КАК КурсыВалютРегл
	|		ПО &ВалютаРегламентированногоУчета = КурсыВалютРегл.Валюта
	|		И Расчеты.ДатаВозникновенияЗадолженности = КурсыВалютРегл.Период
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗадолженностьРасчетыПоФинансовымИнструментам
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_АналитикаУчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗадолженностьРасчетыСКлиентами
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗадолженностьРасчетыСПоставщиками
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПериодыВалют
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПериодыКурсов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_КурсыВалют
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ЗаписиРегистров.Партнер,
	|	вт_ЗаписиРегистров.Контрагент,
	|	вт_ЗаписиРегистров.Договор,
	|	вт_ЗаписиРегистров.НаправлениеДеятельности,
	|	вт_ЗаписиРегистров.ОбъектРасчетов,
	|	вт_ЗаписиРегистров.РасчетныйДокумент,
	|	вт_ЗаписиРегистров.ТипСуммы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОбъектыРасчетов.ТипСсылки,
	|			ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)) = &ТипПретензий
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Прочее)
	|		ИНАЧЕ вт_ЗаписиРегистров.ВидЗадолженности
	|	КОНЕЦ КАК ВидЗадолженности,
	|	вт_ЗаписиРегистров.ДатаВозникновенияЗадолженности,
	|	вт_ЗаписиРегистров.Валюта,
	|	СУММА(вт_ЗаписиРегистров.СуммаЗадолженностиРегл) КАК СуммаЗадолженностиРегл,
	|	СУММА(вт_ЗаписиРегистров.СуммаЗадолженности) КАК СуммаЗадолженности,
	|	МАКСИМУМ(вт_ЗаписиРегистров.НеНачислять) КАК НеНачислять
	|ПОМЕСТИТЬ вт_ДанныеРегистров
	|ИЗ
	|	вт_ЗаписиРегистров КАК вт_ЗаписиРегистров
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО вт_ЗаписиРегистров.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	вт_ЗаписиРегистров.Партнер,
	|	вт_ЗаписиРегистров.Контрагент,
	|	вт_ЗаписиРегистров.Договор,
	|	вт_ЗаписиРегистров.НаправлениеДеятельности,
	|	вт_ЗаписиРегистров.ОбъектРасчетов,
	|	вт_ЗаписиРегистров.РасчетныйДокумент,
	|	вт_ЗаписиРегистров.ТипСуммы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОбъектыРасчетов.ТипСсылки,
	|			ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)) = &ТипПретензий
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Прочее)
	|		ИНАЧЕ вт_ЗаписиРегистров.ВидЗадолженности
	|	КОНЕЦ,
	|	вт_ЗаписиРегистров.ДатаВозникновенияЗадолженности,
	|	вт_ЗаписиРегистров.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаписиРегистров";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область РучныеКорректировки
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Договор КАК Договор,
	|	вт_ДанныеДокумента.РасчетныйДокумент КАК РасчетныйДокумент,
	|	МАКСИМУМ(вт_ДанныеДокумента.РучнаяКорректировка) КАК РучнаяКорректировка,
	|	МАКСИМУМ(вт_ДанныеДокумента.НеНачислять) КАК НеНачислять,
	|	МАКСИМУМ(вт_ДанныеДокумента.ВидЗадолженности) КАК ВидЗадолженности,
	|	МАКСИМУМ(вт_ДанныеДокумента.СуммаОбеспеченияПоАналитике) КАК СуммаОбеспеченияПоАналитике
	|ПОМЕСТИТЬ вт_АналитикаДокумента
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	НЕ вт_ДанныеДокумента.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Прочее)

	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Договор,
	|	вт_ДанныеДокумента.РасчетныйДокумент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(вт_ДанныеРегистров.Партнер, вт_ДанныеДокумента.Партнер) КАК Партнер,
	|	ЕСТЬNULL(вт_ДанныеРегистров.Контрагент, вт_ДанныеДокумента.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(вт_ДанныеРегистров.Договор, вт_ДанныеДокумента.Договор) КАК Договор,
	|	ЕСТЬNULL(вт_ДанныеРегистров.НаправлениеДеятельности, вт_ДанныеДокумента.НаправлениеДеятельности) КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(вт_ДанныеРегистров.ОбъектРасчетов, вт_ДанныеДокумента.ОбъектРасчетов) КАК ОбъектРасчетов,
	|	ЕСТЬNULL(вт_ДанныеРегистров.РасчетныйДокумент, вт_ДанныеДокумента.РасчетныйДокумент) КАК РасчетныйДокумент,
	|	ЕСТЬNULL(вт_ДанныеРегистров.ТипСуммы, вт_ДанныеДокумента.ТипСуммы) КАК ТипСуммы,
	|	ЕСТЬNULL(вт_ДанныеРегистров.ДатаВозникновенияЗадолженности, вт_ДанныеДокумента.ДатаВозникновенияЗадолженности) КАК ДатаВозникновенияЗадолженности,
	|	ЕСТЬNULL(вт_ДанныеРегистров.СуммаЗадолженностиРегл, 0) КАК СуммаЗадолженностиРегл,
	|	ЕСТЬNULL(вт_ДанныеРегистров.СуммаЗадолженности, 0) КАК СуммаЗадолженности,
	|	ЕСТЬNULL(вт_ДанныеРегистров.Валюта, вт_ДанныеДокумента.Валюта) КАК Валюта,
	|	ЕСТЬNULL(вт_АналитикаРучнаяКорректировка_Документ.СуммаОбеспеченияПоАналитике, 0) КАК СуммаОбеспеченияПоАналитике,
	|	ЕСТЬNULL(вт_ДанныеДокумента.Оценка, 0) КАК Оценка,
	|	ЕСТЬNULL(вт_ДанныеДокумента.РезервБУ, 0) КАК РезервБУ,
	|	ЕСТЬNULL(вт_ДанныеДокумента.Резерв, 0) КАК Резерв,
	|	ЕСТЬNULL(вт_АналитикаРучнаяКорректировка_Регистры.ВидЗадолженности, вт_АналитикаРучнаяКорректировка_Документ.ВидЗадолженности) КАК ВидЗадолженности,
	|	ЕСТЬNULL(вт_АналитикаРучнаяКорректировка_Регистры.НеНачислять, вт_АналитикаРучнаяКорректировка_Документ.НеНачислять) КАК НеНачислять,
	|	ИСТИНА КАК РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(вт_ДанныеРегистров.СуммаЗадолженностиРегл, 0) = ЕСТЬNULL(вт_ДанныеДокумента.СуммаЗадолженностиРегл, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НужнаПроверка
	|ПОМЕСТИТЬ вт_ДанныеРучнаяКорректировка
	|ИЗ
	|	вт_ДанныеРегистров КАК вт_ДанныеРегистров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_АналитикаДокумента КАК вт_АналитикаРучнаяКорректировка_Регистры
	|		ПО вт_ДанныеРегистров.Контрагент = вт_АналитикаРучнаяКорректировка_Регистры.Контрагент
	|			И вт_ДанныеРегистров.Договор = вт_АналитикаРучнаяКорректировка_Регистры.Договор
	|			И вт_ДанныеРегистров.РасчетныйДокумент = вт_АналитикаРучнаяКорректировка_Регистры.РасчетныйДокумент
	|			И вт_АналитикаРучнаяКорректировка_Регистры.РучнаяКорректировка
	|		ПОЛНОЕ СОЕДИНЕНИЕ вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_АналитикаДокумента КАК вт_АналитикаРучнаяКорректировка_Документ
	|			ПО вт_ДанныеДокумента.Контрагент = вт_АналитикаРучнаяКорректировка_Документ.Контрагент
	|				И вт_ДанныеДокумента.Договор = вт_АналитикаРучнаяКорректировка_Документ.Договор
	|				И вт_ДанныеДокумента.РасчетныйДокумент = вт_АналитикаРучнаяКорректировка_Документ.РасчетныйДокумент
	|				И вт_АналитикаРучнаяКорректировка_Документ.РучнаяКорректировка
	|		ПО вт_ДанныеРегистров.Контрагент = вт_ДанныеДокумента.Контрагент
	|			И вт_ДанныеРегистров.Договор = вт_ДанныеДокумента.Договор
	|			И вт_ДанныеДокумента.ОбъектРасчетов = вт_ДанныеДокумента.ОбъектРасчетов
	|			И вт_ДанныеРегистров.РасчетныйДокумент = вт_ДанныеДокумента.РасчетныйДокумент
	|			И вт_ДанныеРегистров.ТипСуммы = вт_ДанныеДокумента.ТипСуммы
	|			И вт_ДанныеРегистров.ДатаВозникновенияЗадолженности = вт_ДанныеДокумента.ДатаВозникновенияЗадолженности";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ДанныеДебиторскойЗадолженности
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	вт_ДанныеРучнаяКорректировка.Партнер КАК Партнер,
	|	вт_ДанныеРучнаяКорректировка.Контрагент КАК Контрагент,
	|	вт_ДанныеРучнаяКорректировка.Договор КАК Договор,
	|	вт_ДанныеРучнаяКорректировка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	вт_ДанныеРучнаяКорректировка.ОбъектРасчетов КАК ОбъектРасчетов,
	|	вт_ДанныеРучнаяКорректировка.РасчетныйДокумент КАК РасчетныйДокумент,
	|	вт_ДанныеРучнаяКорректировка.ТипСуммы КАК ТипСуммы,
	|	вт_ДанныеРучнаяКорректировка.ДатаВозникновенияЗадолженности КАК ДатаВозникновенияЗадолженности,
	|	вт_ДанныеРучнаяКорректировка.СуммаЗадолженностиРегл КАК СуммаЗадолженностиРегл,
	|	вт_ДанныеРучнаяКорректировка.СуммаЗадолженности КАК СуммаЗадолженности,
	|	вт_ДанныеРучнаяКорректировка.Валюта КАК Валюта,
	|	вт_ДанныеРучнаяКорректировка.СуммаОбеспеченияПоАналитике КАК СуммаОбеспеченияПоАналитике,
	|	вт_ДанныеРучнаяКорректировка.Оценка КАК Оценка,
	|	вт_ДанныеРучнаяКорректировка.РезервБУ КАК РезервБУ,
	|	вт_ДанныеРучнаяКорректировка.Резерв КАК Резерв,
	|	вт_ДанныеРучнаяКорректировка.ВидЗадолженности КАК ВидЗадолженности,
	|	вт_ДанныеРучнаяКорректировка.НеНачислять КАК НеНачислять,
	|	вт_ДанныеРучнаяКорректировка.РучнаяКорректировка КАК РучнаяКорректировка,
	|	вт_ДанныеРучнаяКорректировка.НужнаПроверка КАК НужнаПроверка
	|ИЗ
	|	вт_ДанныеРучнаяКорректировка КАК вт_ДанныеРучнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Партнер,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Договор,
	|	вт_ДанныеДокумента.НаправлениеДеятельности,
	|	вт_ДанныеДокумента.ОбъектРасчетов,
	|	вт_ДанныеДокумента.РасчетныйДокумент,
	|	вт_ДанныеДокумента.ТипСуммы,
	|	вт_ДанныеДокумента.ДатаВозникновенияЗадолженности,
	|	вт_ДанныеДокумента.СуммаЗадолженностиРегл,
	|	вт_ДанныеДокумента.СуммаЗадолженности,
	|	вт_ДанныеДокумента.Валюта,
	|	вт_ДанныеДокумента.СуммаОбеспеченияПоАналитике КАК СуммаОбеспеченияПоАналитике,
	|	вт_ДанныеДокумента.Оценка,
	|	вт_ДанныеДокумента.РезервБУ,
	|	вт_ДанныеДокумента.Резерв,
	|	вт_ДанныеДокумента.ВидЗадолженности,
	|	вт_ДанныеДокумента.НеНачислять,
	|	вт_ДанныеДокумента.РучнаяКорректировка,
	|	ЛОЖЬ
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|ГДЕ
	|	вт_ДанныеДокумента.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Прочее)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ДанныеРегистров.Партнер,
	|	вт_ДанныеРегистров.Контрагент,
	|	вт_ДанныеРегистров.Договор,
	|	вт_ДанныеРегистров.НаправлениеДеятельности,
	|	вт_ДанныеРегистров.ОбъектРасчетов,
	|	вт_ДанныеРегистров.РасчетныйДокумент,
	|	вт_ДанныеРегистров.ТипСуммы,
	|	вт_ДанныеРегистров.ДатаВозникновенияЗадолженности,
	|	вт_ДанныеРегистров.СуммаЗадолженностиРегл,
	|	вт_ДанныеРегистров.СуммаЗадолженности,
	|	вт_ДанныеРегистров.Валюта,
	|	вт_АналитикаДокумента.СуммаОбеспеченияПоАналитике,
	|	0,
	|	0,
	|	0,
	|	вт_ДанныеРегистров.ВидЗадолженности,
	|	ЕСТЬNULL(вт_АналитикаДокумента.НеНачислять, вт_ДанныеРегистров.НеНачислять),
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	вт_ДанныеРегистров КАК вт_ДанныеРегистров
	|	ЛЕВОЕ СОЕДИНЕНИЕ вт_АналитикаДокумента КАК вт_АналитикаДокумента
	|	ПО вт_ДанныеРегистров.Контрагент = вт_АналитикаДокумента.Контрагент
	|		И вт_ДанныеРегистров.Договор = вт_АналитикаДокумента.Договор
	|		И вт_ДанныеРегистров.РасчетныйДокумент = вт_АналитикаДокумента.РасчетныйДокумент
	|ГДЕ
	|	НЕ ЕСТЬNULL(вт_АналитикаДокумента.РучнаяКорректировка, ЛОЖЬ)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_АналитикаДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКредиторскаяЗадолженность()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборПоОрганизацииКонтрагентам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент В (&МассивКонтрагентов)
	|	И (&ОбработатьВсе
	|		ИЛИ АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|		И АналитикаУчетаПоПартнерам.Договор = &Договор
	|	)
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	РасчетыСПоставщикамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгРеглОстаток КАК Сумма
	|ПОМЕСТИТЬ вт_ЗадолженностьПередПоставщиками
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&ГраницаКонцаМесяца, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			ОтборПоОрганизацииКонтрагентам КАК Т)
	|		И (&ОбработатьВсе ИЛИ РасчетныйДокумент = &РасчетныйДокумент)) КАК РасчетыСПоставщикамиПоСрокамОстатки
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	РасчетыСПоставщикамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	-РасчетыСПоставщикамиПоДокументамОстатки.ДолгРеглОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&ГраницаКонцаМесяца, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			ОтборПоОрганизацииКонтрагентам КАК Т)
	|		И (&ОбработатьВсе ИЛИ РасчетныйДокумент = &РасчетныйДокумент)) КАК РасчетыСПоставщикамиПоДокументамОстатки
	|ГДЕ
	|	НЕ &НоваяАрхитектураВзаиморасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСКлиентамиПоСрокамОстатки.ПредоплатаРеглОстаток КАК Сумма
	|ПОМЕСТИТЬ вт_АвансыПолученныеОтКлиентов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ГраницаКонцаМесяца, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			ОтборПоОрганизацииКонтрагентам КАК Т)
	|		И (&ОбработатьВсе ИЛИ РасчетныйДокумент = &РасчетныйДокумент)) КАК РасчетыСКлиентамиПоСрокамОстатки
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	-РасчетыСКлиентамиПоДокументамОстатки.ПредоплатаРеглОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ГраницаКонцаМесяца, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			ОтборПоОрганизацииКонтрагентам КАК Т)
	|		И (&ОбработатьВсе ИЛИ РасчетныйДокумент = &РасчетныйДокумент)) КАК РасчетыСКлиентамиПоДокументамОстатки
	|ГДЕ
	|	НЕ &НоваяАрхитектураВзаиморасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыПоФинансовымИнструментамОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыПоФинансовымИнструментамОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыПоФинансовымИнструментамОстатки.Договор КАК Договор,
	|	-РасчетыПоФинансовымИнструментамОстатки.СуммаРеглОстаток КАК Сумма
	|ПОМЕСТИТЬ вт_ВыданныеКредитыИДепозиты
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(&ГраницаКонцаМесяца, АналитикаУчетаПоПартнерам В
	|		(ВЫБРАТЬ
	|			Т.КлючАналитики
	|		ИЗ
	|			ОтборПоОрганизацииКонтрагентам КАК Т)) КАК РасчетыПоФинансовымИнструментамОстатки
	|ГДЕ
	|	РасчетыПоФинансовымИнструментамОстатки.СуммаРеглОстаток < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ЗадолженностьПередПоставщиками.Партнер КАК Партнер,
	|	вт_ЗадолженностьПередПоставщиками.Контрагент КАК Контрагент,
	|	вт_ЗадолженностьПередПоставщиками.Договор КАК Договор,
	|	вт_ЗадолженностьПередПоставщиками.РасчетныйДокумент КАК РасчетныйДокумент,
	|	вт_ЗадолженностьПередПоставщиками.Сумма КАК Сумма
	|ПОМЕСТИТЬ вт_Данные
	|ИЗ
	|	вт_ЗадолженностьПередПоставщиками КАК вт_ЗадолженностьПередПоставщиками
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_АвансыПолученныеОтКлиентов.Партнер,
	|	вт_АвансыПолученныеОтКлиентов.Контрагент,
	|	вт_АвансыПолученныеОтКлиентов.Договор,
	|	вт_АвансыПолученныеОтКлиентов.РасчетныйДокумент,
	|	вт_АвансыПолученныеОтКлиентов.Сумма
	|ИЗ
	|	вт_АвансыПолученныеОтКлиентов КАК вт_АвансыПолученныеОтКлиентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ВыданныеКредитыИДепозиты.Партнер,
	|	вт_ВыданныеКредитыИДепозиты.Контрагент,
	|	вт_ВыданныеКредитыИДепозиты.Договор,
	|	НЕОПРЕДЕЛЕНО,
	|	вт_ВыданныеКредитыИДепозиты.Сумма
	|ИЗ
	|	вт_ВыданныеКредитыИДепозиты КАК вт_ВыданныеКредитыИДепозиты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Данные.Партнер КАК Партнер,
	|	вт_Данные.Контрагент КАК Контрагент,
	|	вт_Данные.Договор КАК Договор,
	|	вт_Данные.РасчетныйДокумент КАК РасчетныйДокумент,
	|	СУММА(вт_Данные.Сумма) КАК Сумма
	|ИЗ
	|	вт_Данные КАК вт_Данные
	|СГРУППИРОВАТЬ ПО
	|	вт_Данные.Партнер,
	|	вт_Данные.Контрагент,
	|	вт_Данные.Договор,
	|	вт_Данные.РасчетныйДокумент";
	
КонецФункции

#КонецОбласти

#Область Оценка

Функция ПолучитьИнтервалОценки(Нижняя, Верхняя, Оценка)

	Возврат Новый Структура("Нижняя,Верхняя,Оценка", Нижняя, Верхняя, Оценка);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
