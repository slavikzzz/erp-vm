
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Интерактивное создание документов данного вида запрещено.
			|Создание документов выполняется автоматически,
			|при выполнении соответствующей регламентной операции закрытия месяца.';
			|en = 'Interactive document creation of this kind is prohibited. 
			|Documents are created automatically while the corresponding 
			|month-end transaction is executed.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьРеквизитыФормы();
	ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности();
	
	ПредставлениеПериода = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.Дата);
	
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьРеквизитыФормы();
	ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности();
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.Дата = НачалоМесяца(Объект.Дата);
	
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка,
		Объект.Дата, ПредставлениеПериода);
	
	Объект.Дата = КонецМесяца(Объект.Дата);
	
	ПриИзмененииДатыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Значение, РежимВыбораПериода", Объект.Дата, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , ,
		ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Дата = КонецМесяца(ВыбранныйПериод);
	ПредставлениеПериода = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.Дата);
	
	ПриИзмененииДатыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыФормы();
	
	ПроверитьИзменениеРеквизитовШапки();
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторскаяЗадолженность

&НаКлиенте
Процедура ДебиторскаяЗадолженностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтруктураПоказатьЗначение = Новый Структура("Элемент,Реквизит");
	СтруктураПоказатьЗначение.Вставить("ДебиторскаяЗадолженностьКонтрагент", "Контрагент");
	СтруктураПоказатьЗначение.Вставить("ДебиторскаяЗадолженностьДоговор", "Договор");
	СтруктураПоказатьЗначение.Вставить("ДебиторскаяЗадолженностьРасчетныйДокумент", "РасчетныйДокумент");
	СтруктураПоказатьЗначение.Вставить("ДебиторскаяЗадолженностьПартнер", "Партнер");
	СтруктураПоказатьЗначение.Вставить("ДебиторскаяЗадолженностьНаправлениеДеятельности", "НаправлениеДеятельности");
	СтруктураПоказатьЗначение.Вставить("ДебиторскаяЗадолженностьОбъектРасчетов", "ОбъектРасчетов");
	
	Если Не Элемент.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Прочее") Тогда
		Реквизит = "";
		Если СтруктураПоказатьЗначение.Свойство(Поле.Имя, Реквизит) И ЗначениеЗаполнено(Элемент.ТекущиеДанные[Реквизит]) Тогда
			ПоказатьЗначение(, Элемент.ТекущиеДанные[Реквизит]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Прочее");
		Элемент.ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПриАктивизацииСтроки(Элемент)
	
	ДебиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование И Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.РезервНУ = 0;
		Элемент.ТекущиеДанные.РезервНУВПределахОграничения = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПередУдалением(Элемент, Отказ)
	
	ДебиторскаяЗадолженность_ТекущиеДанныеПередУдалением = ЗаполнитьТекущиеДанныеДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПослеУдаления(Элемент)
	
	ДебиторскаяЗадолженность_ТекущиеДанные = ДебиторскаяЗадолженность_ТекущиеДанныеПередУдалением;
	Если ДебиторскаяЗадолженность_ТекущиеДанные.СуммаОбеспеченияПоАналитике = 0 И ДебиторскаяЗадолженность_ТекущиеДанные.ВстречнаяЗадолженность = 0 Тогда
		// Если суммы обеспечения и встречной задолженности удаляемой строки не были установлены, то нечего и пересчитывать.
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьНеНачислятьПриИзменении(Элемент)
	
	ДебиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеДЗ(); // Обновляем признак Не начислять
	ОбработатьИзменениеДебиторскойЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	ПартнерПриИзмененииНаСервере(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьКонтрагентПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	Если ТекДанные.СуммаЗадолженности = 0 Тогда
		ДебиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеДЗ();
		Возврат;
	КонецЕсли;
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.Контрагент = ТекДанные.Контрагент Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности(); // По старому контрагенту
	ОбработатьИзменениеДебиторскойЗадолженности(); // А теперь по новому контрагенту
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	ЭтоКонтрагент = ТипЗнч(ТекДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	
	Элементы.ДебиторскаяЗадолженностьДоговор.ВыбиратьТип = ЭтоКонтрагент;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	
	Элементы.ДебиторскаяЗадолженностьДоговор.ОграничениеТипа = ?(ЭтоКонтрагент,
		Новый ОписаниеТипов(МассивТипов),
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьСуммаЗадолженностиРеглПриИзменении(Элемент)
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.СуммаЗадолженностиРегл = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.СуммаЗадолженностиРегл Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьСуммаЗадолженностиПриИзменении(Элемент)
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.СуммаЗадолженности = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.СуммаЗадолженности Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьСуммаОбеспеченияПоАналитикеПриИзменении(Элемент)
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.СуммаОбеспеченияПоАналитике = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.СуммаОбеспеченияПоАналитике Тогда
		Возврат;
	КонецЕсли;
	
	ДебиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеДЗ(); // Обновляем сумму обеспечения по аналитике
	ОбработатьИзменениеДебиторскойЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьДатаВозникновенияЗадолженностиПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	Если ДебиторскаяЗадолженность_ТекущиеДанные.ДатаВозникновенияЗадолженности = ТекДанные.ДатаВозникновенияЗадолженности Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСрокДебиторскойЗадолженности(ТекДанные);
	
	Если Не ТекДанные.РучнаяКорректировка Тогда
		ПараметрыОценки = Новый Структура("Организация,Период", Объект.Организация, Объект.Дата);
		ТекДанные.Оценка = ПолучитьОценку(ТекДанные.ВидЗадолженности, ТекДанные.СрокЗадолженности, ПараметрыОценки);
	КонецЕсли;
	
	// Если установлен флаг ручной корректировки, то оценка не изменилась и резервы БУ рассчитывать не нужно.
	
	ОбработатьИзменениеДебиторскойЗадолженности(Не ТекДанные.РучнаяКорректировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьОценкаПриИзменении(Элемент)
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.Оценка = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.Оценка Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности(, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьРучнаяКорректировкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	
	// Обрабатываем изменение ручной корректировки для всех строк текущей задолженности.
	
	Аналитика = АналитикаРасчетаРезервов();
	ЗаполнитьЗначенияСвойств(Аналитика, ТекДанные);
	
	ПараметрыОценки = Новый Структура("Организация,Период", Объект.Организация, Объект.Дата);
	ИзмениласьОценка = Ложь;
	
	НайденныеСтроки = Объект.ДебиторскаяЗадолженность.НайтиСтроки(Аналитика);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.РучнаяКорректировка = ТекДанные.РучнаяКорректировка;
		Если НайденнаяСтрока.РучнаяКорректировка Тогда
			// Если решили установить ручную корректировку, то влияем только на условное оформление формы.
			Продолжить;
		КонецЕсли;
		
		// Иначе восстанавливаем оценку.
		
		НайденнаяСтрока.Оценка = ПолучитьОценку(НайденнаяСтрока.ВидЗадолженности, НайденнаяСтрока.СрокЗадолженности, ПараметрыОценки);
		ИзмениласьОценка = Истина;
	КонецЦикла;
	
	Если Не ИзмениласьОценка Тогда
		// Оценка не изменилась, нечего и пересчитывать.
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности(, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьВалютаПриИзменении(Элемент)
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.Валюта = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьРезервБУПриИзменении(Элемент)
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.РезервБУ = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.РезервБУ Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьРезервПриИзменении(Элемент)
	
	Если ДебиторскаяЗадолженность_ТекущиеДанные.Резерв = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные.Резерв Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДебиторскойЗадолженности(Ложь, Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторскаяЗадолженность

&НаКлиенте
Процедура КредиторскаяЗадолженностьПриАктивизацииСтроки(Элемент)
	
	КредиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеКЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.РучнаяКорректировка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьПередУдалением(Элемент, Отказ)
	
	КредиторскаяЗадолженность_ТекущиеДанныеПередУдалением = ЗаполнитьТекущиеДанныеКЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьПослеУдаления(Элемент)
	
	КредиторскаяЗадолженность_ТекущиеДанные = КредиторскаяЗадолженность_ТекущиеДанныеПередУдалением;
	Если КредиторскаяЗадолженность_ТекущиеДанные.Сумма = 0 Тогда
		// Если сумма кредиторской задолженности удаляемой строки не была установлена, то нечего и пересчитывать.
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеКредиторскойЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьРучнаяКорректировкаПриИзменении(Элемент)
	
	Если Элементы.КредиторскаяЗадолженность.ТекущиеДанные.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Восстанавливаем значения строки кредиторской задолженности к значениям из базы.
	// Текущая строка может быть удалена, если задолженности больше нет.
	
	ЗаполнитьКредиторскуюЗадолженность(Элементы.КредиторскаяЗадолженность.ТекущаяСтрока);
	КредиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеКЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	ПартнерПриИзмененииНаСервере(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьКонтрагентПриИзменении(Элемент)
	
	ТекДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если ТекДанные.Сумма = 0 Тогда
		КредиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеКЗ();
		Возврат;
	КонецЕсли;
	
	Если КредиторскаяЗадолженность_ТекущиеДанные.Контрагент = ТекДанные.Контрагент Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.РучнаяКорректировка = Истина;
	
	ОбработатьИзменениеКредиторскойЗадолженности(); // По старому контрагенту
	ОбработатьИзменениеКредиторскойЗадолженности(); // А теперь по новому контрагенту
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если КредиторскаяЗадолженность_ТекущиеДанные.Сумма = ТекДанные.Сумма Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.РучнаяКорректировка = Истина;
	
	ОбработатьИзменениеКредиторскойЗадолженности();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура КомандаЗаполнитьДокумент(Команда)
	
	Если Не ГотовКЗаполнению() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДебиторскаяЗадолженность.Количество() > 0 Или Объект.КредиторскаяЗадолженность.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура("ИмяСобытия", Команда.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбновленияДокументаЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ТекстВопроса = НСтр("ru = 'Информация о задолженности будет обновлена, ручные корректировки сохранены. Продолжить?';
							|en = 'Debt information will be updated, manual adjustments are saved. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьДокументНаКлиенте("ЗаполнитьДокумент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьДебиторскуюЗадолженность(Команда)
	
	Если Не ГотовКЗаполнению() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДебиторскаяЗадолженность.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура("ИмяСобытия", Команда.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбновленияДокументаЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ТекстВопроса = НСтр("ru = 'Информация о задолженности будет обновлена, ручные корректировки сохранены. Продолжить?';
							|en = 'Debt information will be updated, manual adjustments are saved. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьДокументНаКлиенте("ЗаполнитьДебиторскуюЗадолженность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьКредиторскуюЗадолженность(Команда)
	
	Если Не ГотовКЗаполнению() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КредиторскаяЗадолженность.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура("ИмяСобытия", Команда.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбновленияДокументаЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ТекстВопроса = НСтр("ru = 'Информация о задолженности будет обновлена, ручные корректировки сохранены. Продолжить?';
							|en = 'Debt information will be updated, manual adjustments are saved. Continue?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.Форма.ФормаДокумента.Команда.ЗаполнитьКредиторскуюЗадолженность");
		
		ЗаполнитьКредиторскуюЗадолженность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновленияДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяСобытия = "ЗаполнитьДокумент" Тогда
		ЗаполнитьДокументНаКлиенте("ЗаполнитьДокумент");
		ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности();
	ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ЗаполнитьДебиторскуюЗадолженность" Тогда
		ЗаполнитьДокументНаКлиенте("ЗаполнитьДебиторскуюЗадолженность");
	ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ЗаполнитьКредиторскуюЗадолженность" Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.Форма.ФормаДокумента.Команда.ЗаполнитьКредиторскуюЗадолженность");
		
		ЗаполнитьКредиторскуюЗадолженность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьЛимитРасходовНУ(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.Форма.ФормаДокумента.Команда.ОбновитьЛимитРасходовНУ");
	
	ОбновитьЛимитРасходовНУ();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиенте
Процедура ПроверитьИзменениеРеквизитовШапки()
	
	Если
		Объект.ДебиторскаяЗадолженность.Количество() = 0 И
		Объект.КредиторскаяЗадолженность.Количество() = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеШапки(Объект.Ссылка);
	
	Если
		РеквизитыШапки.Организация = Объект.Организация И
		РеквизитыШапки.Дата = Объект.Дата
	Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ИмяСобытия, СтарыеРеквизиты", "ИзменениеРеквизитов", РеквизитыШапки);
	ОчисткаТЧОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчисткиТабличнойЧастиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ТекстВопроса = НСтр("ru = 'Таблицы задолженности будут очищены. Продолжить?';
						|en = 'Debt tables will be cleared. Continue?'");
	
	ПоказатьВопрос(ОчисткаТЧОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчисткиТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена И Не ДополнительныеПараметры.ИмяСобытия = "ИзменениеРеквизитов" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяСобытия = "ИзменениеРеквизитов" И Не Результат = КодВозвратаДиалога.Да Тогда
		Объект.Организация = ДополнительныеПараметры.СтарыеРеквизиты.Организация;
		Объект.Дата = ДополнительныеПараметры.СтарыеРеквизиты.Дата;
		
		ПредставлениеПериода = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		УчетнаяПолитикаЗаголовок = НСтр("ru = 'Порядок оценки задолженности не определен. Сперва необходимо выбрать организацию';
										|en = 'The debt evaluation procedure is not defined. You must select a company first'");
	ИначеЕсли Не УчетнаяПолитикаУстановлена Тогда
		УчетнаяПолитикаЗаголовок = НСтр("ru = 'Порядок оценки задолженности не определен. Для организации не задана учетная политика';
										|en = 'The debt evaluation procedure is not defined. The accounting policy is not specified for a company'");
	ИначеЕсли УчетнаяПолитикаУстановлена Тогда
		Элементы.КомандаОткрытьУчетнуюПолитику.Видимость = Истина;
		Элементы.ОписаниеУчетнойПолитики.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ОписаниеУчетнойПолитики.Заголовок = УчетнаяПолитикаЗаголовок;
	
	Элементы.ДебиторскаяЗадолженностьСуммаЗадолженностиРегл.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задолженность, %1.';
					|en = 'Debt, %1.'"),
				ВалютаРегламентированногоУчета);
				
	Если ЛокализацияРФ Тогда
		Элементы.ЛимитРасходовНУ.ТолькоПросмотр = НЕ ЛимитРасходовНУРедактированиеРазрешено;
		Элементы.ГруппаКредиторскаяЗадолженность.Видимость = УчитыватьВстречнуюЗадолженность;
		Элементы.ОтражатьВБухгалтерскомУчете.ТолькоПросмотр = Не Формировать;
		Элементы.ОтражатьВНалоговомУчете.ТолькоПросмотр = Не ФормироватьНУ;
		Элементы.СПАРК_Баннер.Видимость = СПАРК_ИспользованиеРазрешено;
	Иначе
		Элементы.ГруппаЛимитРасходовНУ.Видимость = Ложь;
		Элементы.ГруппаНастройкиУчетнойПолитики.Видимость = Ложь;
		Элементы.ГруппаШапкаПравый.Видимость = Ложь;
		Элементы.ГруппаКредиторскаяЗадолженность.Видимость = Ложь;
		Элементы.ГруппаИтогоДебиторскаяЗадолженность.Видимость = Ложь;
		Элементы.ДебиторскаяЗадолженностьВстречнаяЗадолженность.Видимость = Ложь;
		Элементы.ДебиторскаяЗадолженностьГруппаРезервы.Видимость = Ложь;
		Элементы.ДебиторскаяЗадолженностьРезервНУВПределахОграничения.Видимость = Ложь;
		Элементы.ДебиторскаяЗадолженностьГруппа1СПАРК.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеШапки(ОбъектСсылка)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Организация,Дата");
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область КонтролируемыеВидыЗадолженности
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВидЗадолженности");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВидыЗадолженности.Прочее;
	
	// Поля.
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьКонтрагент.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьДоговор.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРасчетныйДокумент.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьТипСуммы.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьВалюта.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьСуммаЗадолженности.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьСуммаЗадолженностиРегл.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьДатаВозникновенияЗадолженности.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьПартнер.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьНаправлениеДеятельности.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьОбъектРасчетов.Имя);
	
	Для Каждого Поле Из МассивПолей Цикл
		ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	#КонецОбласти

	#Область РасчетныйДокумент_Видимость
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВидЗадолженности");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВидыЗадолженности.ЗаймыВыданные;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьРасчетныйДокумент.Имя);
	
	#КонецОбласти
	
	#Область ТипСуммы_Видимость
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВидЗадолженности");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВидыЗадолженности.ЗаймыВыданные;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьТипСуммы.Имя);
	
	#КонецОбласти
	
	#Область НеНачислять_ЦветСтроки
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.НеНачислять");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженность.Имя);
	
	#КонецОбласти
	
	#Область НеНачислять_НеПрименяется
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "х");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.НеНачислять");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	// Поля.
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезервБУ.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезервНУ.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезервНУВПределахОграничения.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезерв.Имя);
	
	Для Каждого Поле Из МассивПолей Цикл
		ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	#КонецОбласти
	
	#Область НеНачислять_ТолькоПросмотр
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.НеНачислять");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	// Поля.
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьКонтрагент.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьДоговор.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРасчетныйДокумент.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьТипСуммы.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьСуммаЗадолженности.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьСуммаОбеспеченияПоАналитике.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРучнаяКорректировка.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьДатаВозникновенияЗадолженности.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьОценка.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьПартнер.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьНаправлениеДеятельности.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьОбъектРасчетов.Имя);
	
	Для Каждого Поле Из МассивПолей Цикл
		ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПредставлениеСуммыОбеспечения
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.СуммаОбеспеченияПредставление"));
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.СуммаОбеспеченияПоАналитике");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.СуммаОбеспечения");
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьСуммаОбеспеченияПоАналитике.Имя);
	
	#КонецОбласти
	
	#Область ВстречнаяЗадолженность_Видимость
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчитыватьВстречнуюЗадолженность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьВстречнаяЗадолженность.Имя);
	
	#КонецОбласти
	
	#Область ВстречнаяЗадолженность_НеПрименяется
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "х");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	// Отбор.
	
	ЗначениеОтбора = Новый СписокЗначений;
	ЗначениеОтбора.Добавить(Перечисления.ВидыЗадолженности.ЗадолженностьКонтрагентовВал);
	ЗначениеОтбора.Добавить(Перечисления.ВидыЗадолженности.ЗадолженностьКонтрагентовРегл);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВидЗадолженности");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = ЗначениеОтбора;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьВстречнаяЗадолженность.Имя);
	
	#КонецОбласти
	
	#Область НужнаПроверка
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.НужнаПроверка");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьНужнаПроверка.Имя);
	
	// Следующий элемент.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.НужнаПроверка");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	// Поля.
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженность.Имя);
	
	#КонецОбласти
	
	#Область РучнаяКорректировка_ПоляРедактирования
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.РучнаяКорректировка");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	// Поля.
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьОценка.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезервБУ.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезерв.Имя);
	
	Для Каждого Поле Из МассивПолей Цикл
		ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	#КонецОбласти

	#Область КолонкиРезервовНУ
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Оформление.
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Отбор.
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормироватьНУ");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	// Поля.
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезервНУ.Имя);
	МассивПолей.Добавить(Элементы.ДебиторскаяЗадолженностьРезервНУВПределахОграничения.Имя);
	
	Для Каждого Поле Из МассивПолей Цикл
		ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	#КонецОбласти

	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.СПАРКРискиУсловноеОформление(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

&НаКлиенте
Процедура ЗаполнитьДокументНаКлиенте(ИмяСобытия)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяСобытия", ИмяСобытия);
		
	ДлительнаяОперация = ЗаполнитьДебиторскуюЗадолженностьНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаполненияДебиторскойЗадолженности", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДебиторскуюЗадолженностьНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("ПустойДокумент", Объект.ДебиторскаяЗадолженность.Количество() = 0);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение дебиторской задолженности';
															|en = 'Filling receivables'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПодготовитьДанныеДебиторскойЗадолженности",
		ПараметрыЗаполнения, ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаполненияДебиторскойЗадолженности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'Произошла ошибка заполнения дебиторской задолженности:';
								|en = 'An error occurred while filling receivables:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПодготовленныеДанные(Результат.АдресРезультата, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(АдресРезультата, ДополнительныеПараметры)
	
	ДанныеДебиторскойЗадолженности = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ДополнительныеПараметры.ИмяСобытия = "ЗаполнитьДебиторскуюЗадолженность" Тогда
		ТекущийОбъект.ЗаполнитьДебиторскуюЗадолженность(ДанныеДебиторскойЗадолженности);
		ТекущийОбъект.РассчитатьРезервы();
	ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ЗаполнитьДокумент" Тогда
		ТекущийОбъект.ЗаполнитьДокумент(ДанныеДебиторскойЗадолженности);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеФормы

#Область Шапка

&НаСервере
Процедура ОбновитьЛимитРасходовНУ()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ОбновитьЛимитРасходовНУ(Истина, Истина);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности();
	
КонецПроцедуры

#КонецОбласти

#Область ДебиторскаяЗадолженность

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности()
	
	МассивКонтрагентов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(
		Объект.ДебиторскаяЗадолженность.Выгрузить(, "Контрагент").ВыгрузитьКолонку("Контрагент"));
	СПАРК_Данные = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.СПАРКРискиПолучитьДанные(
		МассивКонтрагентов, СПАРК_ИспользованиеРазрешено);
	
	Для Каждого ТекДанные Из Объект.ДебиторскаяЗадолженность Цикл
		
		ТекстПредставления = НСтр("ru = '""%1"" из ""%2""';
									|en = '""%1"" out of ""%2""'");
			
		ТекДанные.СуммаОбеспеченияПредставление = ?(ТекДанные.СуммаЗадолженности = 0 Или ТекДанные.СуммаОбеспечения = 0, "",
			СтрШаблон(ТекстПредставления, Формат(ТекДанные.СуммаОбеспечения, НСтр("ru = 'ЧДЦ=2;''ЧН=;''';
																					|en = 'NFD=2;''NZ=;'''")),
				Формат(ТекДанные.СуммаОбеспеченияПоАналитике, НСтр("ru = 'ЧДЦ=2;''ЧН=;''';
																	|en = 'NFD=2;''NZ=;'''"))));
				
		Если СПАРК_ИспользованиеРазрешено Тогда
			НайденнаяСтрока = СПАРК_Данные.Найти(ТекДанные.Контрагент, "Контрагент");
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				ЗаполнитьЗначенияСвойств(ТекДанные, НайденнаяСтрока,, "Контрагент");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСрокДебиторскойЗадолженности(ДебиторскаяЗадолженностьДанныеСтроки = Неопределено)
	
	ИтераторОбработки = ПолучитьИтераторТаблицы(Объект.ДебиторскаяЗадолженность, ДебиторскаяЗадолженностьДанныеСтроки);
	Для Каждого ТекДанные Из ИтераторОбработки Цикл
		ТекДанные.СрокЗадолженности = Макс(0, (НачалоДня(Объект.Дата) - ТекДанные.ДатаВозникновенияЗадолженности) / 86400);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОценку(ВидЗадолженности, СрокЗадолженности, ДополнительныеПараметры)

	Возврат Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПолучитьОценку(
		ВидЗадолженности, СрокЗадолженности, ДополнительныеПараметры);

КонецФункции

#КонецОбласти

#Область КредиторскаяЗадолженность

&НаСервере
Процедура ЗаполнитьКредиторскуюЗадолженность(КредиторскаяЗадолженностьСтрока = Неопределено)
	
	Аналитика = Неопределено;
	
	Если Не КредиторскаяЗадолженностьСтрока = Неопределено Тогда
		ДанныеСтроки = Объект.КредиторскаяЗадолженность.НайтиПоИдентификатору(КредиторскаяЗадолженностьСтрока);
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Аналитика = Новый Структура("Контрагент,Договор,РасчетныйДокумент");
		ЗаполнитьЗначенияСвойств(Аналитика, ДанныеСтроки);
	КонецЕсли;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ЗаполнитьКредиторскуюЗадолженность(Аналитика);
	ТекущийОбъект.РассчитатьРезервы();
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности();
	
КонецПроцедуры

#КонецОбласти

#Область Резервы

&НаКлиенте
Процедура ОбработатьИзменениеДебиторскойЗадолженности(БУ = Истина, НУ = Истина, УУ = Истина)
	
	Аналитика = АналитикаРасчетаРезервов();
	ЗаполнитьЗначенияСвойств(Аналитика, ДебиторскаяЗадолженность_ТекущиеДанные);
	
	// Заполним Сумму обеспечения по аналитике для каждой строки задолженности текущих данных.
	
	НайденныеСтроки = Объект.ДебиторскаяЗадолженность.НайтиСтроки(Аналитика);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.НеНачислять = ДебиторскаяЗадолженность_ТекущиеДанные.НеНачислять;
		НайденнаяСтрока.СуммаОбеспеченияПоАналитике = ДебиторскаяЗадолженность_ТекущиеДанные.СуммаОбеспеченияПоАналитике;
	КонецЦикла;
	
	РассчитатьРезервы(Аналитика, БУ, НУ, УУ);
	ДебиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКредиторскойЗадолженности()
	
	Аналитика = АналитикаРасчетаРезервов();
	ЗаполнитьЗначенияСвойств(Аналитика, КредиторскаяЗадолженность_ТекущиеДанные);
	
	РассчитатьРезервы(Аналитика, Истина, Истина, Истина); // Всегда рассчитывают резервы БУ, НУ и УУ
	КредиторскаяЗадолженность_ТекущиеДанные = ЗаполнитьТекущиеДанныеКЗ();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРезервы(Аналитика, БУ, НУ, УУ)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.РассчитатьРезервы(Аналитика, БУ, НУ, УУ);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ЗаполнитьДополнительныеРеквизитыДебиторскойЗадолженности();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочие

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	УстановитьУчетнуюПолитикуОрганизаций();
	
	УчитыватьВстречнуюЗадолженность = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.УчитыватьВстречнуюЗадолженность(Объект.Дата);
	СПАРК_ИспользованиеРазрешено = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.СПАРКРискиИспользованиеРазрешено();
	
	ЛимитРасходовНУРедактированиеРазрешено = РазрешеноРедактированиеЛимитаРасходовНУ(Объект.Организация);
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	ЛокализацияРФ = ПолучитьФункциональнуюОпцию("ЛокализацияРФ");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУчетнуюПолитикуОрганизаций()
	
	УчетнаяПолитикаУстановлена	= Ложь;
	Формировать					= Ложь;
	ФормироватьНУ				= Ложь;
	
	ПараметрыУчетныхПолитик = НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПолучитьДействующиеПараметрыУчетныхПолитик(
		Объект.Организация,
		Объект.Дата);
	
	ПараметрыУчетнойПолитики = ПараметрыУчетныхПолитик.УчетнаяПолитикаФинансовогоУчета;
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		УчетнаяПолитикаУстановлена = Истина;
		Формировать = ПараметрыУчетнойПолитики.ФормироватьРезервыПоСомнительнымДолгам;
		
		Если Объект.Ссылка.Пустая() Тогда
			Объект.ОтражатьВБухгалтерскомУчете = Формировать
				И НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ТребуетсяФормированиеРезервовВУказанномПериоде(
					ПараметрыУчетнойПолитики.ПериодичностьРезервовПоСомнительнымДолгам, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыУчетнойПолитики = ПараметрыУчетныхПолитик.НастройкиУчетаНалогаНаПрибыль;
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		УчетнаяПолитикаУстановлена = Истина;
		ФормироватьНУ = ПараметрыУчетнойПолитики.ФормироватьРезервыПоСомнительнымДолгамНУ;
		
		Если Объект.Ссылка.Пустая() Тогда
			Объект.ОтражатьВНалоговомУчете = ФормироватьНУ
				И НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ТребуетсяФормированиеРезервовВУказанномПериоде(
					ПараметрыУчетнойПолитики.ПериодичностьРезервовПоСомнительнымДолгамНУ, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыДокумента()
	
	ПроверитьИзменениеРеквизитовШапки();
	
	ЗаполнитьРеквизитыФормы();
	
	ЗаполнитьСрокДебиторскойЗадолженности();
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Функция ГотовКЗаполнению()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Перед заполнением документа необходимо заполнить организацию';
								|en = 'Fill the company before filling the document'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Организация", "Объект.Организация");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Сохраняем значения полей текущей строки табличной части дебиторской задолженности перед изменением.
// Используется для проверки изменения значений соответствующих полей события "ПриИзменении".
//
&НаКлиенте
Функция ЗаполнитьТекущиеДанныеДЗ()
	
	Результат = Новый Структура(
		"ВидЗадолженности,Контрагент,Договор, ОбъектРасчетов, РасчетныйДокумент,ТипСуммы," +
		"Валюта,СуммаЗадолженностиРегл,СуммаЗадолженности,СуммаОбеспеченияПоАналитике,ВстречнаяЗадолженность," +
		"НеНачислять,РучнаяКорректировка,ДатаВозникновенияЗадолженности,Оценка,РезервБУ,Резерв");
	
	ТекДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ТекДанные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьТекущиеДанныеКЗ()
	
	Результат = Новый Структура("Контрагент,Сумма");
	
	ТекДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ТекДанные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АналитикаРасчетаРезервов()
	
	Возврат Новый Структура("ВидЗадолженности,Контрагент,Договор,РасчетныйДокумент");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииНаСервере(Партнер, Контрагент)
	
	Если Партнер = Справочники.Партнеры.НашеПредприятие 
		И ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
		Контрагент = Справочники.Организации.ПустаяСсылка();
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает коллекцию строк переданной таблицы.
// Если задана Структура поиска, то возвращаем найденные строки по структуре поиска, заполненной данными строки.
// Если заданы Данные строки, то возвращается массив из этой одной строки.
// В противном случае возвращается сама таблица.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИтераторТаблицы(Таблица, ДанныеСтроки, СтруктураПоиска = Неопределено)
	
	Если ДанныеСтроки = Неопределено Тогда
		Итератор = Таблица;
	ИначеЕсли СтруктураПоиска = Неопределено Тогда
		Итератор = Новый Массив;
		Итератор.Добавить(ДанныеСтроки);
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		Итератор = Таблица.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Возврат Итератор;
	
КонецФункции

&НаКлиенте
Процедура КомандаОткрытьУчетнуюПолитикуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//++ Локализация
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьУчетнуюПолитикуФУ" Тогда
		ОткрытьФорму("РегистрСведений.УчетнаяПолитикаФинансовогоУчета.ФормаЗаписи",
			ПараметрыОткрытияФормыУчетнойПолитики("УчетнаяПолитикаФинансовогоУчета",
				Объект.Организация,
				Объект.Дата),
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьУчетнуюПолитикуНУ" Тогда
		ОткрытьФорму("РегистрСведений.НастройкиУчетаНалогаНаПрибыль.ФормаЗаписи",
			ПараметрыОткрытияФормыУчетнойПолитики("НастройкиУчетаНалогаНаПрибыль",
				Объект.Организация,
				Объект.Дата),
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры
//++ Локализация
&НаСервереБезКонтекста
Функция ПараметрыОткрытияФормыУчетнойПолитики(ИмяНастройки, Организация, Дата)
	
	КлючЗаписиНастройкиУчетнойПолитики = НастройкиНалоговУчетныхПолитик.КлючЗаписиДействующейУчетнойПолитики(ИмяНастройки,
		Организация,
		Дата);
	
	ПараметрыОткрытияФормы = Новый Структура("Ключ, Организация",
		КлючЗаписиНастройкиУчетнойПолитики,
		Организация);
		
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции
//-- Локализация

&НаСервереБезКонтекста
Функция РазрешеноРедактированиеЛимитаРасходовНУ(Организация)
	
	Возврат Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация);
	
КонецФункции
#КонецОбласти

#КонецОбласти
