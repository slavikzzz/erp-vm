#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет документ.
//  - Обновляет лимит расходов НУ
//  - Заполняет табличную часть Дебиторская задолженность
//  - Заполняет табличную часть кредиторская задолженность
//  - Рассчитывает резервы.
// 
// Параметры:
// 	ДанныеДебиторскойЗадолженности - ТаблицаЗначений - 
// 	ИнтерактивноеОбновление - Булево - признак вызова обновления лимитов из формы документа
//
Процедура ЗаполнитьДокумент(ДанныеДебиторскойЗадолженности, ИнтерактивноеОбновление = Ложь) Экспорт
	
	ОбновитьЛимитРасходовНУ(Ложь, ИнтерактивноеОбновление);
	ЗаполнитьДебиторскуюЗадолженность(ДанныеДебиторскойЗадолженности, Ложь);
	ЗаполнитьКредиторскуюЗадолженность(, Ложь);
	РассчитатьРезервы();
	
КонецПроцедуры

// Заполняет табличную часть Дебиторская задолженность.
// 
// Параметры:
//  ДанныеДебиторскойЗадолженности - ТаблицаЗначений - содержит данные заполнения дебиторской задолженности 
// 	РассчитыватьРезервы - Булево - если Истина, то после заполнения рассчитываются резервы
// 
Процедура ЗаполнитьДебиторскуюЗадолженность(ДанныеДебиторскойЗадолженности, РассчитыватьРезервы = Истина) Экспорт
	
	ДебиторскаяЗадолженность.Загрузить(ДанныеДебиторскойЗадолженности);
	ДебиторскаяЗадолженность.Сортировать("ВидЗадолженности,Контрагент,Договор,РасчетныйДокумент,ДатаВозникновенияЗадолженности");
	
	ТаблицаОценкиУУ = НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ТаблицаОценкиУУ(Организация, Дата);
	ПараметрыОценки = Новый Структура("ТаблицаОценки", ТаблицаОценкиУУ);
	ТаблицаОценкиСроков = ТаблицаОценкиСроков(ТаблицаОценкиУУ);
	
	СтрокиКУдалению = Новый Массив();
	Для Каждого ТекущаяСтрока Из ДебиторскаяЗадолженность Цикл
		ТекущаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		ТекущаяСтрока.СрокЗадолженности = Макс(0, (НачалоДня(Дата) - ТекущаяСтрока.ДатаВозникновенияЗадолженности) / 86400);
		
		Если ТекущаяСтрока.РучнаяКорректировка Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеВключатьВРезервПоСроку(ТекущаяСтрока.ВидЗадолженности, ТекущаяСтрока.СрокЗадолженности, ТаблицаОценкиСроков) Тогда
			СтрокиКУдалению.Добавить(ТекущаяСтрока);
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.Оценка = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПолучитьОценку(
			ТекущаяСтрока.ВидЗадолженности, ТекущаяСтрока.СрокЗадолженности, ПараметрыОценки);
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ДебиторскаяЗадолженность.Удалить(Строка);
	КонецЦикла;
	
	Если РассчитыватьРезервы Тогда
		РассчитатьРезервы();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть Кредиторская задолженность.
// 
// Параметры:
// 	АналитикаУчета - Структура, Неопределено - аналитика, по которой необходимо заполнить кредиторскую задолженность
// 		из данных учета. Если Неопределено, то заполнить нужно всю таблицу.
// 	* Контрагент
// 	* Договор
// 	* РасчетныйДокумент
// 	РассчитыватьРезервы - Булево - если Истина, то после заполнения рассчитываются резервы 
//
Процедура ЗаполнитьКредиторскуюЗадолженность(АналитикаУчета = Неопределено, РассчитыватьРезервы = Истина) Экспорт
	
	Если Не НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.УчитыватьВстречнуюЗадолженность(Дата) Тогда
		КредиторскаяЗадолженность.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбработатьВсе = АналитикаУчета = Неопределено;
	
	// Получаем встречную задолженность только по контрагентам из таблицы дебиторской задолженности.
	МассивКонтрагентов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(
		ДебиторскаяЗадолженность.Выгрузить(, "Контрагент").ВыгрузитьКолонку("Контрагент"));
	
	// Получаем обновленную информацию о встречной задолженности.
	
	ПараметрыЗаполнения = Новый Структура("Контрагент,Договор,РасчетныйДокумент");
	ПараметрыЗаполнения.Вставить("Дата", Дата);
	ПараметрыЗаполнения.Вставить("Ссылка", Ссылка);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("МассивКонтрагентов", МассивКонтрагентов);
	ПараметрыЗаполнения.Вставить("ОбработатьВсе", ОбработатьВсе);
	
	Если Не АналитикаУчета = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, АналитикаУчета, "Контрагент,Договор,РасчетныйДокумент");
	КонецЕсли;
	
	РезультатЗапроса = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПолучитьДанныеДляЗаполненияКредиторскойЗадолженности(
		ПараметрыЗаполнения);
	
	// Обрабатываем полученную информацию:
	// 1. Если сумма корректировалась вручную, то оставляем её как есть.
	// 2. Если уже есть такой контрагент, договор, расчетный документ, то обновляем сумму.
	// 3. Если нет такого контрагента, договора, расчетного документа, то добавляем новую строку.
	// 4. Иначе удаляем строку встречной задолженности.
	
	ДанныеКредиторскаяЗадолженность = РезультатЗапроса.Выгрузить();
	ДанныеКредиторскаяЗадолженность.Индексы.Добавить("Контрагент,Договор,РасчетныйДокумент");
	
	СтрокиКУдалению = Новый Массив;
	СтрокиОбработкиКЗ = ?(ОбработатьВсе, КредиторскаяЗадолженность, КредиторскаяЗадолженность.НайтиСтроки(АналитикаУчета));
	
	Для Каждого ТекДанные Из СтрокиОбработкиКЗ Цикл
		СтруктураПоиска = ИнициализироватьСтруктуруПоиска(ТекДанные, Ложь);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекДанные);
		
		НайденныеСтроки = ДанныеКредиторскаяЗадолженность.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокиКУдалению.Добавить(ТекДанные);
			Продолжить;
		КонецЕсли;
		
		Если Не ТекДанные.РучнаяКорректировка Тогда
			ТекДанные.Сумма = НайденныеСтроки[0].Сумма;
		КонецЕсли;
		ДанныеКредиторскаяЗадолженность.Удалить(НайденныеСтроки[0]);
	КонецЦикла;
	
	Для Каждого ТекДанные Из ДанныеКредиторскаяЗадолженность Цикл
		НоваяСтрока = КредиторскаяЗадолженность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	КонецЦикла;
	
	Для Каждого ТекДанные Из СтрокиКУдалению Цикл
		Если ТекДанные.РучнаяКорректировка Тогда
			Продолжить;
		КонецЕсли;
		
		КредиторскаяЗадолженность.Удалить(ТекДанные);
	КонецЦикла;
	
	КредиторскаяЗадолженность.Сортировать("Контрагент,Договор,РасчетныйДокумент");
	
	Если РассчитыватьРезервы Тогда
		РассчитатьРезервы(АналитикаУчета);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает резервы в табличной части Дебиторская задолженность.
// 
// Параметры:
// 	АналитикаУчета - Структура, Неопределено - аналитика по которой нужно рассчитать резервы.
// 		Если Неопределено, то для все таблицы.
// 	* Контрагент
// 	* Договор
// 	* Расчетный документ
// 	
// Выполняет следующие действия по порядку:
// 1. Распределяет сумму обеспечения (по переданной аналитике).
// 2. Распределяет встречную задолженность (по контрагенту из переданной аналитики).
// 3. Рассчитывает суммы резерва БУ (по контрагенту из переданной аналитики).
// 4. Рассчитывает суммы резерва НУ (по контрагенту из переданной аналитики).
// 5. Рассчитывает НУ в пределах ограничения (для всей таблицы).
// 	
// 	БУ - Булево - если Истина, то рассчитывается сумма резерва БУ
// 	НУ - Булево - если Истина, то рассчитывается сумма резерва НУ
// 	УУ - Булево - если Истина, то рассчитывается сумма резерва в валюте взаиморасчетов
//
Процедура РассчитатьРезервы(АналитикаУчета = Неопределено, БУ = Истина, НУ = Истина, УУ = Истина) Экспорт
	
	МеждународнаяВерсия = НЕ ПолучитьФункциональнуюОпцию("ЛокализацияРФ");
	
	РаспределитьОбеспечение(АналитикаУчета);
	РаспределитьВстречнуюЗадолженность(?(АналитикаУчета = Неопределено, Неопределено,
		Новый Структура("Контрагент", АналитикаУчета.Контрагент)));
	
	// Расчет суммы резервов.
	
	ОбработатьВсе = АналитикаУчета = Неопределено;
	
	Если Не НУ Тогда
		НУ = Ложь;
		ФормироватьНУ = Ложь;
	Иначе
		СтруктураФлаговНУ = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ЗначенияФлаговНалоговогоУчета(
								Организация,
								Дата,
								НУ,
								ФормироватьНУ);
		Если СтруктураФлаговНУ <> Неопределено Тогда
			НУ = СтруктураФлаговНУ.НУ;
			ФормироватьНУ = СтруктураФлаговНУ.ФормироватьНУ;
		Иначе
			НУ = Ложь;
			ФормироватьНУ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаОценкиНУ = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ТаблицаОценкиНУ();
	ПараметрыОценки = Новый Структура("ТаблицаОценки", ТаблицаОценкиНУ);
	
	СтрокиОбработкиДЗ = ?(ОбработатьВсе, ДебиторскаяЗадолженность,
		ДебиторскаяЗадолженность.НайтиСтроки(Новый Структура("Контрагент", АналитикаУчета.Контрагент)));
	Для Каждого СтрокаДЗ Из СтрокиОбработкиДЗ Цикл
		Если СтрокаДЗ.НеНачислять Тогда
			СтрокаДЗ.РезервБУ = 0;
			СтрокаДЗ.РезервНУ = 0;
			СтрокаДЗ.Резерв = 0;
			
			Продолжить;
		КонецЕсли;
		
		БазаРасчета = СтрокаДЗ.СуммаЗадолженностиРегл - СтрокаДЗ.СуммаОбеспечения;
		Если БУ И Не (СтрокаДЗ.РучнаяКорректировка И ОбработатьВсе) Тогда
			СтрокаДЗ.РезервБУ = БазаРасчета * СтрокаДЗ.Оценка / 100;
		КонецЕсли;
		
		Если УУ И Не (СтрокаДЗ.РучнаяКорректировка И ОбработатьВсе) Тогда
			СтрокаДЗ.Резерв = ?(СтрокаДЗ.СуммаЗадолженностиРегл = 0, 0,
				СтрокаДЗ.СуммаЗадолженности * СтрокаДЗ.РезервБУ / СтрокаДЗ.СуммаЗадолженностиРегл);
		КонецЕсли;
		
		Если МеждународнаяВерсия И СтрокаДЗ.РучнаяКорректировка И НЕ ОбработатьВсе
			И БУ = Ложь И УУ = Ложь И НУ = Ложь Тогда
				СтрокаДЗ.РезервБУ = ?(СтрокаДЗ.СуммаЗадолженности = 0, 0,
					СтрокаДЗ.СуммаЗадолженностиРегл * СтрокаДЗ.Резерв / СтрокаДЗ.СуммаЗадолженности);
		КонецЕсли;
		
		БазаРасчета = БазаРасчета - СтрокаДЗ.ВстречнаяЗадолженность;
		Если НУ Тогда
			Если ФормироватьНУ Тогда
				ОценкаНУ = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПолучитьОценку(
					СтрокаДЗ.ВидЗадолженности, СтрокаДЗ.СрокЗадолженности, ПараметрыОценки);
				СтрокаДЗ.РезервНУ = БазаРасчета * ОценкаНУ / 100;
			Иначе
				СтрокаДЗ.РезервНУ = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НУ Тогда
		РассчитатьРезервыНУВПределахОграничения();
	КонецЕсли;
	
КонецПроцедуры

// Обновляет лимит расходов НУ.
// 
// Параметры:
// 	РассчитыватьРезервы - Булево - если Истина, то после заполнения рассчитываются резервы
// 	ИнтерактивноеОбновление - Булево - признак вызова обновления лимитов из формы документа
//
Процедура ОбновитьЛимитРасходовНУ(РассчитыватьРезервы = Истина, ИнтерактивноеОбновление) Экспорт
	
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Организация, "ОбособленноеПодразделение, ГоловнаяОрганизация");
	
	Если ДанныеОрганизации.ОбособленноеПодразделение Тогда
		Если ИнтерактивноеОбновление = Истина Тогда 
			ЛимитРасходовНУ = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ПолучитьЛимитРасходовНУ(
				Дата, ДанныеОрганизации.ГоловнаяОрганизация);
		Иначе
			ЛимитРасходовНУ = 0;
		КонецЕсли;
	Иначе
		ЛимитРасходовНУ = НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ПолучитьЛимитРасходовНУ(
			Дата, Организация);
	КонецЕсли;
	
	Если РассчитыватьРезервы Тогда
		РассчитатьРезервы(, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что в этом месяце больше нет аналогичных документов.
	
	Если Не ПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеСписаниеРезервовПоСомнительнымДолгам.Ссылка
		|ИЗ
		|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК НачислениеСписаниеРезервовПоСомнительнымДолгам
		|ГДЕ
		|	НЕ НачислениеСписаниеРезервовПоСомнительнымДолгам.Ссылка = &Ссылка
		|	И НАЧАЛОПЕРИОДА(НачислениеСписаниеРезервовПоСомнительнымДолгам.Дата, МЕСЯЦ) = &НачалоМесяца
		|	И НачислениеСписаниеРезервовПоСомнительнымДолгам.Организация = &Организация
		|	И НЕ НачислениеСписаниеРезервовПоСомнительнымДолгам.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстСообщения = НСтр("ru = 'По организации ""%1"" за ""%2"" месяц уже оформлен документ ""%3"".';
									|en = 'The ""%3"" document is already registered for the ""%1"" company for ""%2"" month.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Организация, Формат(Дата, НСтр("ru = 'ДФ=''ММММ''';
																						|en = 'DF=''MMMM'''")), Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "ДебиторскаяЗадолженность,ПогашеннаяЗадолженность");
	
	СкорректироватьИдентификаторыСтрок();
	
	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, "ДебиторскаяЗадолженность,ПогашеннаяЗадолженность");
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьСтруктуруПоиска(АналитикаУчета, ЭтоДебиторскаяЗадолженность = Истина)

	Если АналитикаУчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не ЭтоДебиторскаяЗадолженность Тогда
		Возврат Новый Структура("Контрагент,Договор,РасчетныйДокумент");
	ИначеЕсли АналитикаУчета.ВидЗадолженности = Перечисления.ВидыЗадолженности.ЗаймыВыданные Тогда
		Возврат Новый Структура("Контрагент,Договор,ТипСуммы");
	Иначе
		Возврат Новый Структура("ВидЗадолженности,Контрагент,Договор,РасчетныйДокумент");
	КонецЕсли;

КонецФункции

// Распределение суммы обеспечения по аналитике.
//
Процедура РаспределитьОбеспечение(Знач СтруктураОтбора = Неопределено)
	
	ОбработатьВсе = Ложь;
	Если СтруктураОтбора = Неопределено Тогда
		ОбработатьВсе = Истина;
		СтруктураОтбора = Новый Структура("ВидЗадолженности,Контрагент,Договор,РасчетныйДокумент");
	КонецЕсли;
	
	ТаблицаОбеспечения = ДебиторскаяЗадолженность.Выгрузить(, "ВидЗадолженности,Контрагент,Договор,РасчетныйДокумент,СуммаОбеспеченияПоАналитике");
	ТаблицаОбеспечения.Свернуть("ВидЗадолженности,Контрагент,Договор,РасчетныйДокумент,СуммаОбеспеченияПоАналитике");
	
	ТаблицаРаспределения = ДебиторскаяЗадолженность.ВыгрузитьКолонки(
		"НеНачислять,ДатаВозникновенияЗадолженности,СуммаЗадолженностиРегл");
	ТаблицаРаспределения.Колонки.Добавить("СтрокаРасчета");
	
	СтрокиРаспределенияОбеспечения = ?(ОбработатьВсе, ТаблицаОбеспечения, ТаблицаОбеспечения.НайтиСтроки(СтруктураОтбора));
	Для Каждого СтрокаОбеспечения Из СтрокиРаспределенияОбеспечения Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОбеспечения);
		ЗаполнитьТаблицуРаспределенияОбеспечения(ТаблицаРаспределения, ДебиторскаяЗадолженность, СтруктураОтбора);
		
		РаспределяемаяСумма = СтрокаОбеспечения.СуммаОбеспеченияПоАналитике;
		ПропускатьРаспределение = ТаблицаРаспределения.Итог("СуммаЗадолженностиРегл") <= РаспределяемаяСумма;
		
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
			Если ПропускатьРаспределение Тогда
				СтрокаРаспределения.СтрокаРасчета.СуммаОбеспечения = СтрокаРаспределения.СуммаЗадолженностиРегл;
				Продолжить;
			КонецЕсли;
			
			Если РаспределяемаяСумма = 0 Тогда
				СтрокаРаспределения.СтрокаРасчета.СуммаОбеспечения = 0;
				Продолжить;
			КонецЕсли;
			
			СтрокаРаспределения.СтрокаРасчета.СуммаОбеспечения = Мин(СтрокаРаспределения.СуммаЗадолженностиРегл, РаспределяемаяСумма);
			РаспределяемаяСумма = РаспределяемаяСумма - СтрокаРаспределения.СтрокаРасчета.СуммаОбеспечения;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Распределение кредиторской задолженности по контрагентам.
//
Процедура РаспределитьВстречнуюЗадолженность(Знач СтруктураОтбора = Неопределено)
	
	ОбработатьВсе = Ложь;
	Если СтруктураОтбора = Неопределено Тогда
		ОбработатьВсе = Истина;
		СтруктураОтбора = Новый Структура("Контрагент");
	КонецЕсли;
	
	ТаблицаКЗ = КредиторскаяЗадолженность.Выгрузить(, "Контрагент,Сумма");
	ТаблицаКЗ.Свернуть("Контрагент", "Сумма");
	
	// Очистим встречную задолженность нужных строк таблицы дебиторской задолженности перед распределением.
	Если ОбработатьВсе Тогда
		МассивНулей = Новый Массив;
		Для Индекс = 1 По ДебиторскаяЗадолженность.Количество() Цикл
			МассивНулей.Добавить(0);
		КонецЦикла;
		
		ДебиторскаяЗадолженность.ЗагрузитьКолонку(МассивНулей, "ВстречнаяЗадолженность");
	Иначе
		НайденныеСтроки = ДебиторскаяЗадолженность.НайтиСтроки(СтруктураОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВстречнаяЗадолженность = 0;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРаспределения = ДебиторскаяЗадолженность.ВыгрузитьКолонки(
		"НеНачислять,ВидЗадолженности,ДатаВозникновенияЗадолженности,СуммаЗадолженностиРегл,СуммаОбеспечения");
	ТаблицаРаспределения.Колонки.Добавить("СтрокаРасчета");
	
	СтрокиРаспределенияКЗ = ?(ОбработатьВсе, ТаблицаКЗ, ТаблицаКЗ.НайтиСтроки(СтруктураОтбора));
	Для Каждого СтрокаКЗ Из СтрокиРаспределенияКЗ Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКЗ);
		ЗаполнитьТаблицуРаспределенияВстречнойЗадолженности(ТаблицаРаспределения, ДебиторскаяЗадолженность, СтруктураОтбора);
		
		РаспределяемаяСумма = СтрокаКЗ.Сумма;
		ПропускатьРаспределение = ТаблицаРаспределения.Итог("СуммаЗадолженностиРегл") -
			ТаблицаРаспределения.Итог("СуммаОбеспечения") <= РаспределяемаяСумма;
		
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
			СомнительнаяЗадолженность = Макс(0, СтрокаРаспределения.СуммаЗадолженностиРегл - СтрокаРаспределения.СуммаОбеспечения);
			Если ПропускатьРаспределение Тогда
				СтрокаРаспределения.СтрокаРасчета.ВстречнаяЗадолженность = СомнительнаяЗадолженность;
				Продолжить;
			КонецЕсли;
			
			Если РаспределяемаяСумма = 0 Тогда
				СтрокаРаспределения.СтрокаРасчета.ВстречнаяЗадолженность = 0;
				Продолжить;
			КонецЕсли;
			
			СтрокаРаспределения.СтрокаРасчета.ВстречнаяЗадолженность = Мин(СомнительнаяЗадолженность, РаспределяемаяСумма);
			РаспределяемаяСумма = РаспределяемаяСумма - СтрокаРаспределения.СтрокаРасчета.ВстречнаяЗадолженность;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРаспределенияОбеспечения(ТаблицаРаспределения, ДебиторскаяЗадолженность, СтруктураПоиска)
	
	ТаблицаРаспределения.Очистить();
	СтрокиОбработкиДЗ = ДебиторскаяЗадолженность.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаДЗ Из СтрокиОбработкиДЗ Цикл
		НоваяСтрока = ТаблицаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДЗ);
		
		// Не распределяем строки, отмеченные признаком "Не начислять".
		
		Если СтрокаДЗ.НеНачислять Тогда
			НоваяСтрока.СуммаЗадолженностиРегл = 0;
		КонецЕсли;
		
		НоваяСтрока.СтрокаРасчета = СтрокаДЗ;
	КонецЦикла;
	
	ТаблицаРаспределения.Сортировать("ДатаВозникновенияЗадолженности");
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРаспределенияВстречнойЗадолженности(ТаблицаРаспределения, ДебиторскаяЗадолженность, СтруктураПоиска)
	
	ТаблицаРаспределения.Очистить();
	СтрокиОбработкиДЗ = ДебиторскаяЗадолженность.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаДЗ Из СтрокиОбработкиДЗ Цикл
		НоваяСтрока = ТаблицаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДЗ);
		
		// Распределяем строки, по которым начисляется резерв только по расчетам с контрагентами. 
		
		Если
			СтрокаДЗ.НеНачислять Или
				Не СтрокаДЗ.ВидЗадолженности = Перечисления.ВидыЗадолженности.ЗадолженностьКонтрагентовРегл И
				Не СтрокаДЗ.ВидЗадолженности = Перечисления.ВидыЗадолженности.ЗадолженностьКонтрагентовВал
		Тогда
			НоваяСтрока.СуммаОбеспечения = 0;
			НоваяСтрока.СуммаЗадолженностиРегл = 0;
		КонецЕсли;
		
		НоваяСтрока.СтрокаРасчета = СтрокаДЗ;
	КонецЦикла;
	
	ТаблицаРаспределения.Сортировать("ДатаВозникновенияЗадолженности");
	
КонецПроцедуры

Процедура РассчитатьРезервыНУВПределахОграничения()
	
	СуммаРезерва = ДебиторскаяЗадолженность.Итог("РезервНУ");
	ДоляРезервовПоСомнительнымДолгамНУ = ?(СуммаРезерва = 0, 0, Мин(СуммаРезерва, ЛимитРасходовНУ) / СуммаРезерва);
	
	Если ДоляРезервовПоСомнительнымДолгамНУ >= 1 Тогда
		ДебиторскаяЗадолженность.ЗагрузитьКолонку(ДебиторскаяЗадолженность.ВыгрузитьКолонку("РезервНУ"),
			"РезервНУВПределахОграничения");
	Иначе
		ТаблицаКРаспределению = ДебиторскаяЗадолженность.Выгрузить();
		
		РезервНУВПределахОграничения = Окр(СуммаРезерва * ДоляРезервовПоСомнительнымДолгамНУ, 2);
		Если РезервНУВПределахОграничения = 0 Тогда
			ТаблицаКРаспределению.ЗаполнитьЗначения(0, "РезервНУВПределахОграничения");
		Иначе
			МассивСтарыхСумм = ТаблицаКРаспределению.ВыгрузитьКолонку("РезервНУ");
			МассивНовыхСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				РезервНУВПределахОграничения, МассивСтарыхСумм);
			Если Не МассивНовыхСумм = Неопределено Тогда
		 		ТаблицаКРаспределению.ЗагрузитьКолонку(МассивНовыхСумм, "РезервНУВПределахОграничения");
			КонецЕсли; 
		КонецЕсли;
		
		ДебиторскаяЗадолженность.Загрузить(ТаблицаКРаспределению);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьИдентификаторыСтрок()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки,
	|	
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Договор,
	|	ДанныеДокумента.НаправлениеДеятельности,
	|	
	|	ДанныеДокумента.ОбъектРасчетов,
	|	ДанныеДокумента.РасчетныйДокумент,
	|	ДанныеДокумента.ТипСуммы,
	|	ДанныеДокумента.Валюта,
	|	
	|	ДанныеДокумента.ИдентификаторСтроки
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Контрагент КАК Контрагент,
	|	вт_ДанныеДокумента.Договор КАК Договор,
	|	вт_ДанныеДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	вт_ДанныеДокумента.РасчетныйДокумент КАК РасчетныйДокумент,
	|	вт_ДанныеДокумента.ТипСуммы КАК ТипСуммы,
	|	МАКСИМУМ(вт_ДанныеДокумента.ИдентификаторСтроки) КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ вт_КорректировкаИдентификаторовСтроки
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Договор,
	|	вт_ДанныеДокумента.ОбъектРасчетов,
	|	вт_ДанныеДокумента.РасчетныйДокумент,
	|	вт_ДанныеДокумента.ТипСуммы
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_ДанныеДокумента.ИдентификаторСтроки) > 1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	вт_КорректировкаИдентификаторовСтроки.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КорректировкаИдентификаторовСтроки КАК вт_КорректировкаИдентификаторовСтроки
	|		ПО вт_ДанныеДокумента.Контрагент = вт_КорректировкаИдентификаторовСтроки.Контрагент
	|		И вт_ДанныеДокумента.Договор = вт_КорректировкаИдентификаторовСтроки.Договор
	|		И вт_ДанныеДокумента.ОбъектРасчетов = вт_КорректировкаИдентификаторовСтроки.ОбъектРасчетов
	|		И вт_ДанныеДокумента.РасчетныйДокумент = вт_КорректировкаИдентификаторовСтроки.РасчетныйДокумент
	|		И вт_ДанныеДокумента.ТипСуммы = вт_КорректировкаИдентификаторовСтроки.ТипСуммы
	|ГДЕ
	|	(вт_ДанныеДокумента.ИдентификаторСтроки = """"
	|			ИЛИ НЕ вт_КорректировкаИдентификаторовСтроки.ИдентификаторСтроки ЕСТЬ NULL)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_КорректировкаИдентификаторовСтроки";
	
	Запрос.УстановитьПараметр("ДанныеДокумента", ДебиторскаяЗадолженность.Выгрузить(,
		"НомерСтроки,Партнер,Контрагент,Договор,НаправлениеДеятельности,ОбъектРасчетов,РасчетныйДокумент,ТипСуммы,Валюта,ИдентификаторСтроки"));
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	РезультатЗапроса2 = РезультатПакета.Получить(2); // РезультатЗапроса
	Выборка = РезультатЗапроса2.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДебиторскаяЗадолженность[Выборка.НомерСтроки -1].ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
	КонецЦикла;

	ЗаполнитьИдентификаторыСтрокПогашеннойЗадолженности(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокПогашеннойЗадолженности(МенеджерВременныхТаблиц)
	
	ПогашеннаяЗадолженность.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ вт_АналитикаУчета
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_АналитикаУчета.КлючАналитики КАК КлючАналитики,
	|	вт_ДанныеДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	вт_ДанныеДокумента.РасчетныйДокумент КАК РасчетныйДокумент,
	|	вт_ДанныеДокумента.ТипСуммы КАК ТипСуммы
	|ПОМЕСТИТЬ вт_АналитикаДокумента
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_АналитикаУчета КАК вт_АналитикаУчета
	|		ПО вт_ДанныеДокумента.Партнер = вт_АналитикаУчета.Партнер
	|		И вт_ДанныеДокумента.Контрагент = вт_АналитикаУчета.Контрагент
	|		И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.Договор) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ИНАЧЕ вт_ДанныеДокумента.Договор
	|		КОНЕЦ = вт_АналитикаУчета.Договор
	|		И вт_ДанныеДокумента.НаправлениеДеятельности = вт_АналитикаУчета.НаправлениеДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Остатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Остатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Остатки.ТипСуммы КАК ТипСуммы,
	|	Остатки.Валюта КАК Валюта,
	|	СУММА(Остатки.Сумма) КАК Сумма,
	|	СУММА(Остатки.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Остатки.СуммаРегл) КАК СуммаРегл,
	|	СУММА(Остатки.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(Остатки.ВременнаяРазница) КАК ВременнаяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		Резервы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Резервы.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Резервы.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Резервы.ТипСуммы КАК ТипСуммы,
	|		Резервы.Валюта КАК Валюта,
	|		Резервы.СуммаОстаток КАК Сумма,
	|		Резервы.СуммаУпрОстаток КАК СуммаУпр,
	|		Резервы.СуммаРеглОстаток КАК СуммаРегл,
	|		Резервы.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
	|		Резервы.ВременнаяРазницаОстаток КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(&ГраницаКонцаМесяца, АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Резервы
	|			ЛЕВОЕ СОЕДИНЕНИЕ вт_АналитикаДокумента КАК вт_АналитикаДокумента
	|			ПО Резервы.АналитикаУчетаПоПартнерам = вт_АналитикаДокумента.КлючАналитики
	|			И Резервы.ОбъектРасчетов = вт_АналитикаДокумента.ОбъектРасчетов
	|			И Резервы.РасчетныйДокумент = вт_АналитикаДокумента.РасчетныйДокумент
	|			И Резервы.ТипСуммы = вт_АналитикаДокумента.ТипСуммы
	|	ГДЕ
	|		вт_АналитикаДокумента.РасчетныйДокумент ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Резервы.АналитикаУчетаПоПартнерам,
	|		Резервы.ОбъектРасчетов,
	|		Резервы.РасчетныйДокумент,
	|		Резервы.ТипСуммы,
	|		Резервы.Валюта,
	|		ВЫБОР
	|			КОГДА Резервы.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА Резервы.Сумма
	|			ИНАЧЕ -Резервы.Сумма
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Резервы.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА Резервы.СуммаУпр
	|			ИНАЧЕ -Резервы.СуммаУпр
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Резервы.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА Резервы.СуммаРегл
	|			ИНАЧЕ -Резервы.СуммаРегл
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Резервы.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА Резервы.ПостояннаяРазница
	|			ИНАЧЕ -Резервы.ПостояннаяРазница
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Резервы.ВидДвижения = &ВидДвиженияРасход
	|				ТОГДА Резервы.ВременнаяРазница
	|			ИНАЧЕ -Резервы.ВременнаяРазница
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РезервыПоСомнительнымДолгам КАК Резервы
	|			ЛЕВОЕ СОЕДИНЕНИЕ вт_АналитикаДокумента КАК вт_АналитикаДокумента
	|			ПО Резервы.АналитикаУчетаПоПартнерам = вт_АналитикаДокумента.КлючАналитики
	|			И Резервы.ОбъектРасчетов = вт_АналитикаДокумента.ОбъектРасчетов
	|			И Резервы.РасчетныйДокумент = вт_АналитикаДокумента.РасчетныйДокумент
	|			И Резервы.ТипСуммы = вт_АналитикаДокумента.ТипСуммы
	|	ГДЕ
	|		&ИсключатьДвиженияДокумента
	|		И вт_АналитикаДокумента.РасчетныйДокумент ЕСТЬ NULL
	|		И Резервы.Регистратор = &Регистратор) КАК Остатки
	|СГРУППИРОВАТЬ ПО
	|	Остатки.АналитикаУчетаПоПартнерам,
	|	Остатки.ОбъектРасчетов,
	|	Остатки.РасчетныйДокумент,
	|	Остатки.ТипСуммы,
	|	Остатки.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.Сумма) <> 0
	|	ИЛИ СУММА(Остатки.СуммаУпр) <> 0
	|	ИЛИ СУММА(Остатки.СуммаРегл) <> 0";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГраницаКонцаМесяца", Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИсключатьДвиженияДокумента",
		НЕ ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.ЭтоНовый);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	// Блокируем весь регистр накопления, т.к. нужная нам организация является частью аналитики учета по партнерам.
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрНакопления.РезервыПоСомнительнымДолгам");
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
	Попытка
		БлокировкаДанных.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПогашеннаяЗадолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЦикла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю("ru = 'Не удалось заблокировать регистр накопления ""Резервы по сомнительным долгам""'");
	КонецПопытки;
	
КонецПроцедуры

Функция ТаблицаОценкиСроков(ТаблицаОценкиБУ)

	Если ОтражатьВНалоговомУчете Тогда
		ТаблицаОценкиНУ = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ТаблицаОценкиНУ();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОценкиНУ, ТаблицаОценкиБУ);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОценкиБУ.ВидЗадолженности КАК ВидЗадолженности,
		|	ТаблицаОценкиБУ.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
		|	ТаблицаОценкиБУ.Оценка КАК Оценка
		|ПОМЕСТИТЬ ДанныеТЗ
		|ИЗ
		|	&ТаблицаОценкиБУ КАК ТаблицаОценкиБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТЗ.ВидЗадолженности КАК ВидЗадолженности,
		|	МИНИМУМ(ДанныеТЗ.НижняяГраницаИнтервала) КАК НижняяГраницаИнтервала
		|ИЗ
		|	ДанныеТЗ КАК ДанныеТЗ
		|ГДЕ
		|	ДанныеТЗ.Оценка <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеТЗ.ВидЗадолженности";
	
	Запрос.УстановитьПараметр("ТаблицаОценкиБУ", ТаблицаОценкиБУ);
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции 

Функция НеВключатьВРезервПоСроку(ВидЗадолженности, СрокЗадолженности, ТаблицаОценкиСроков)
	
	НайденныеСтроки = ТаблицаОценкиСроков.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности));
	Если ВидЗадолженности = Перечисления.ВидыЗадолженности.Прочее Тогда
		Возврат Ложь;
	ИначеЕсли НайденныеСтроки.Количество()>0 Тогда
		Возврат НайденныеСтроки[0].НижняяГраницаИнтервала > СрокЗадолженности;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли
