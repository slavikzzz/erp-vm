#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежная ведомость (Т-53)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53)';
										|en = 'Paysheet (T-53)'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВедомостьНаВыплатуЗарплатыБюджетныхУчреждений");
		Модуль.ДобавитьКомандыПечатиПриВыплатеПрочихДоходовНаличными(КомандыПечати);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати)
	КонецЕсли;	
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы 
//                                            (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение      - ссылка на объект;
//                                            представление - имя области в которой был выведен объект
//                                            (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов
//                                            (выходной параметр);
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ВедомостьНаВыплатуЗарплаты.ПечатьПриВыплатеНаличными(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТолькоПроведенные") И Параметры.ТолькоПроведенные Тогда
		Параметры.Отбор.Вставить("Проведен", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОтбораПоОрганизации(Настройки);
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляОбъектаСПрисоединеннымиФайлами(Настройки);
КонецПроцедуры

#КонецОбласти

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ВедомостьПрочихДоходовВКассу;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

// ЗарплатаКадры.ОграничениеИспользованияДокументов

Функция ПредставлениеПометкиОграничения() Экспорт
	Возврат ВедомостьНаВыплатуЗарплаты.ПредставлениеПометкиОграниченияПриВыплатеНаличными();
КонецФункции

Функция ОперацияОграниченияДокумента() Экспорт
	Возврат ВедомостьНаВыплатуЗарплаты.ОперацияОграниченияДокументаПриВыплатеНаличными();
КонецФункции

// Конец ЗарплатаКадры.ОграничениеИспользованияДокументов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВидМестаВыплаты(Ведомость = Неопределено) Экспорт
	Возврат Перечисления.ВидыМестВыплатыЗарплаты.Касса
КонецФункции

Функция ТекстЗапросаДанныеДляОплаты(ИмяПараметраВедомости = "Ведомости", ИмяПараметраФизическиеЛица = "ФизическиеЛица") Экспорт
	Возврат 
		ВедомостьПрочихДоходов.ТекстЗапросаДанныеДляОплаты(
			Метаданные.Документы.ВедомостьПрочихДоходовВКассу.ПолноеИмя(), 
			ИмяПараметраВедомости, ИмяПараметраФизическиеЛица);
КонецФункции	

#Область Печать

// Формирует запрос по документу.
//
// Параметры: 
//  Ведомости - массив ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк.
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ВыборкаДляПечатиШапки(Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.Номер КАК Номер,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель КАК Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	Ведомость.Кассир КАК Кассир,
	|	Ведомость.ДолжностьКассира КАК КассирДолжность,
	|	Ведомость.Бухгалтер КАК Бухгалтер,
	|	Ведомость.Составил КАК Составил,
	|	Ведомость.ДолжностьСоставившего КАК ДолжностьСоставившего,
	|	Ведомость.Проверил КАК Проверил,
	|	Ведомость.ДолжностьПроверившего КАК ДолжностьПроверившего,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Раздатчик,
	|	ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка) КАК ДолжностьРаздатчика
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Кассир");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Составил");
	ИменаПолейОтветственныхЛиц.Добавить("Проверил");
	ИменаПолейОтветственныхЛиц.Добавить("Раздатчик");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ФИОРуководителя.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОКассира.РасшифровкаПодписи, """") КАК Кассир,
	|	ДанныеДокументов.КассирДолжность,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер,
	|	ФИОСоставил.РасшифровкаПодписи КАК СоставилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьСоставившего,
	|	ФИОПроверил.РасшифровкаПодписи КАК ПроверилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьПроверившего,
	|	ФИОРаздатчик.РасшифровкаПодписи КАК РаздатчикРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьРаздатчика
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКассира
	|		ПО ДанныеДокументов.Ссылка = ФИОКассира.Ссылка
	|			И ДанныеДокументов.Кассир = ФИОКассира.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСоставил
	|		ПО ДанныеДокументов.Ссылка = ФИОСоставил.Ссылка
	|			И ДанныеДокументов.Составил = ФИОСоставил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПроверил
	|		ПО ДанныеДокументов.Ссылка = ФИОПроверил.Ссылка
	|			И ДанныеДокументов.Проверил = ФИОПроверил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаздатчик
	|		ПО ДанныеДокументов.Ссылка = ФИОРаздатчик.Ссылка
	|			И ДанныеДокументов.Раздатчик = ФИОРаздатчик.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Формирует запрос по табличной части документа.
//
// Параметры: 
//  Ведомости - массив ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк.
//
// Возвращаемое значение:
//  Выборка из результата запроса.
//
Функция ВыборкаДляПечатиТаблицы(Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВыплатыВедомостей(Запрос.МенеджерВременныхТаблиц, Истина, Метаданные.Документы.ВедомостьПрочихДоходовВКассу.ПолноеИмя(), Ведомости);

	Запрос.УстановитьПараметр("Ведомости", Ведомости);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Выплаты.ВедомостьДата КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(
		ОписательВременныхТаблиц, Истина, 
		"ФИОПолные, ФамилияИО");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Ведомость КАК Ведомость,
	|	"""" КАК ТабельныйНомер,
	|	КадровыеДанные.ФИОПолные КАК ФИОПолные,
	|	КадровыеДанные.ФамилияИО КАК ФамилияИО,
	|	Выплаты.Сумма КАК Сумма
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанные
	|		ПО Выплаты.ФизическоеЛицо = КадровыеДанные.ФизическоеЛицо
	|			И Выплаты.ВедомостьДата = КадровыеДанные.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выплаты.Ведомость,
	|	Выплаты.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура СоздатьВТВыплатыВедомостей(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяТипа, Ведомости)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.Регистратор КАК Ведомость,
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Взаиморасчеты.СуммаВзаиморасчетов) КАК Сумма
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.Регистратор В(&Ведомости)
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Регистратор,
	|	Взаиморасчеты.ФизическоеЛицо,
	|	Взаиморасчеты.СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Ведомость КАК Ведомость,
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки * 10000 + ВедомостьВыплаты.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНомераСтрок
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьСостав КАК ВедомостьСостав
	|		ПО Взаиморасчеты.Ведомость = ВедомостьСостав.Ссылка
	|			И (ВедомостьСостав.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьСписокВыплат КАК ВедомостьВыплаты
	|		ПО (ВедомостьСостав.Ссылка = ВедомостьВыплаты.Ссылка)
	|			И (ВедомостьСостав.ИдентификаторСтроки = ВедомостьВыплаты.ИдентификаторСтроки)
	|			И Взаиморасчеты.ФизическоеЛицо = ВедомостьВыплаты.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Ведомость,
	|	Взаиморасчеты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедомостьДокумент.Ссылка КАК Ведомость,
	|	ВедомостьДокумент.Дата КАК ВедомостьДата,
	|	НомераСтрок.НомерСтроки КАК НомерСтроки,
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(Взаиморасчеты.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыВедомостей
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьДокумент КАК ВедомостьДокумент
	|		ПО Взаиморасчеты.Ведомость = ВедомостьДокумент.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрок КАК НомераСтрок
	|		ПО Взаиморасчеты.Ведомость = НомераСтрок.Ведомость
	|			И Взаиморасчеты.ФизическоеЛицо = НомераСтрок.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьДокумент.Ссылка,
	|	ВедомостьДокумент.Дата,
	|	НомераСтрок.НомерСтроки,
	|	Взаиморасчеты.ФизическоеЛицо";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ИмяТипа);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСписокВыплат",	ИмяТипа + ".Выплаты");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ИмяТипа + ".Состав");
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли